"use strict";
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([
    [
        544
    ],
    {
        5215: function(dD, a7, d) {
            var a8 = d(8908);
            var f = d.n(a8);
            var a9 = d(9144);
            var J = d.n(a9);
            var ah = d(7462);
            var dE = d(7326);
            var dF = d(4578);
            var ba = d(5974);
            var dG = d.n(ba);
            var bb = d(7537);
            var dH = d.n(bb);
            var bc = d(9603);
            var bd = d.n(bc);
            var be = d(3407);
            var dI = d.n(be);
            var dJ = d(8852);
            var dK = d(136);
            var bf = d(779);
            var dL = d(9323);
            var dM = d(2260);
            var dN = d(8485);
            var dO = d(973);
            var bg = d(4221);
            var dP = d.n(bg);
            var dQ = d(8925);
            var dR = d(6185);
            var dS = d(562);
            var bh = d(1489);
            var dT = d.n(bh);
            var bi = "7.17.0";
            var bj = {};
            var bk = function c(a, b) {
                bj[a] = bj[a] || [];
                if (b) {
                    bj[a] = bj[a].concat(b);
                }
                return bj[a];
            };
            var bl = function c(a, b) {
                bk(a, b);
            };
            var bm = function d(a, c) {
                var b = bk(a).indexOf(c);
                if (b <= -1) {
                    return false;
                }
                bj[a] = bj[a].slice();
                bj[a].splice(b, 1);
                return true;
            };
            var bn = function c(a, b) {
                bk(a, [].concat(b).map(function(c) {
                    var b = function b() {
                        bm(a, b);
                        return c.apply(void 0, arguments);
                    };
                    return b;
                }));
            };
            var ai = {
                prefixed: true
            };
            var z = [
                [
                    "requestFullscreen",
                    "exitFullscreen",
                    "fullscreenElement",
                    "fullscreenEnabled",
                    "fullscreenchange",
                    "fullscreenerror",
                    "fullscreen", 
                ],
                [
                    "webkitRequestFullscreen",
                    "webkitExitFullscreen",
                    "webkitFullscreenElement",
                    "webkitFullscreenEnabled",
                    "webkitfullscreenchange",
                    "webkitfullscreenerror",
                    "-webkit-full-screen", 
                ],
                [
                    "mozRequestFullScreen",
                    "mozCancelFullScreen",
                    "mozFullScreenElement",
                    "mozFullScreenEnabled",
                    "mozfullscreenchange",
                    "mozfullscreenerror",
                    "-moz-full-screen", 
                ],
                [
                    "msRequestFullscreen",
                    "msExitFullscreen",
                    "msFullscreenElement",
                    "msFullscreenEnabled",
                    "MSFullscreenChange",
                    "MSFullscreenError",
                    "-ms-fullscreen", 
                ], 
            ];
            var aj = z[0];
            var u;
            for(var A = 0; A < z.length; A++){
                if (z[A][1] in J()) {
                    u = z[A];
                    break;
                }
            }
            if (u) {
                for(var B = 0; B < u.length; B++){
                    ai[aj[B]] = u[B];
                }
                ai.prefixed = u[0] !== aj[0];
            }
            var dU = [];
            var dV = function a(b, c) {
                return function(a, i, d) {
                    var g = c.levels[i];
                    var j = new RegExp("^(" + g + ")$");
                    if (a !== "log") {
                        d.unshift(a.toUpperCase() + ":");
                    }
                    d.unshift(b + ":");
                    if (dU) {
                        dU.push([].concat(d));
                        var h = dU.length - 1000;
                        dU.splice(0, h > 0 ? h : 0);
                    }
                    if (!f().console) {
                        return;
                    }
                    var e = f().console[a];
                    if (!e && a === "debug") {
                        e = f().console.info || f().console.log;
                    }
                    if (!e || !g || !j.test(a)) {
                        return;
                    }
                    e[Array.isArray(d) ? "apply" : "call"](f().console, d);
                };
            };
            function bo(b) {
                var c = "info";
                var d;
                var a = function f() {
                    for(var b = arguments.length, e = new Array(b), a = 0; a < b; a++){
                        e[a] = arguments[a];
                    }
                    d("log", c, e);
                };
                d = dV(b, a);
                a.createLogger = function(a) {
                    return bo(b + ": " + a);
                };
                a.levels = {
                    all: "debug|log|warn|error",
                    off: "",
                    debug: "debug|log|warn|error",
                    info: "log|warn|error",
                    warn: "warn|error",
                    error: "error",
                    DEFAULT: c
                };
                a.level = function(b) {
                    if (typeof b === "string") {
                        if (!a.levels.hasOwnProperty(b)) {
                            throw new Error('"' + b + '" in not a valid log level');
                        }
                        c = b;
                    }
                    return c;
                };
                a.history = function() {
                    return dU ? [].concat(dU) : [];
                };
                a.history.filter = function(a) {
                    return (dU || []).filter(function(b) {
                        return new RegExp(".*" + a + ".*").test(b[0]);
                    });
                };
                a.history.clear = function() {
                    if (dU) {
                        dU.length = 0;
                    }
                };
                a.history.disable = function() {
                    if (dU !== null) {
                        dU.length = 0;
                        dU = null;
                    }
                };
                a.history.enable = function() {
                    if (dU === null) {
                        dU = [];
                    }
                };
                a.error = function() {
                    for(var b = arguments.length, e = new Array(b), a = 0; a < b; a++){
                        e[a] = arguments[a];
                    }
                    return d("error", c, e);
                };
                a.warn = function() {
                    for(var b = arguments.length, e = new Array(b), a = 0; a < b; a++){
                        e[a] = arguments[a];
                    }
                    return d("warn", c, e);
                };
                a.debug = function() {
                    for(var b = arguments.length, e = new Array(b), a = 0; a < b; a++){
                        e[a] = arguments[a];
                    }
                    return d("debug", c, e);
                };
                return a;
            }
            var ak = bo("VIDEOJS");
            var bp = ak.createLogger;
            var dW = Object.prototype.toString;
            var dX = function b(a) {
                return d_(a) ? Object.keys(a) : [];
            };
            function dY(a, b) {
                dX(a).forEach(function(c) {
                    return b(a[c], c);
                });
            }
            function dZ(b, c, a) {
                if (a === void 0) {
                    a = 0;
                }
                return dX(b).reduce(function(d, a) {
                    return c(d, b[a], a);
                }, a);
            }
            function d$(d) {
                for(var b = arguments.length, c = new Array(b > 1 ? b - 1 : 0), a = 1; a < b; a++){
                    c[a - 1] = arguments[a];
                }
                if (Object.assign) {
                    return ah.Z.apply(void 0, [
                        d
                    ].concat(c));
                }
                c.forEach(function(a) {
                    if (!a) {
                        return;
                    }
                    dY(a, function(a, b) {
                        d[b] = a;
                    });
                });
                return d;
            }
            function d_(a) {
                return !!a && typeof a === "object";
            }
            function d0(a) {
                return (d_(a) && dW.call(a) === "[object Object]" && a.constructor === Object);
            }
            function bq(c, b) {
                if (!c || !b) {
                    return "";
                }
                if (typeof f().getComputedStyle === "function") {
                    var a;
                    try {
                        a = f().getComputedStyle(c);
                    } catch (d) {
                        return "";
                    }
                    return a ? a.getPropertyValue(b) || a[b] : "";
                }
                return "";
            }
            var h = (f().navigator && f().navigator.userAgent) || "";
            var al = /AppleWebKit\/([\d.]+)/i.exec(h);
            var br = al ? parseFloat(al.pop()) : null;
            var am = /iPod/i.test(h);
            var bs = (function() {
                var a = h.match(/OS (\d+)_/i);
                if (a && a[1]) {
                    return a[1];
                }
                return null;
            })();
            var n = /Android/i.test(h);
            var an = (function() {
                var a = h.match(/Android (\d+)(?:\.(\d+))?(?:\.(\d+))*/i);
                if (!a) {
                    return null;
                }
                var b = a[1] && parseFloat(a[1]);
                var c = a[2] && parseFloat(a[2]);
                if (b && c) {
                    return parseFloat(a[1] + "." + a[2]);
                } else if (b) {
                    return b;
                }
                return null;
            })();
            var bt = n && an < 5 && br < 537;
            var bu = /Firefox/i.test(h);
            var K = /Edg/i.test(h);
            var L = !K && (/Chrome/i.test(h) || /CriOS/i.test(h));
            var bv = (function() {
                var a = h.match(/(Chrome|CriOS)\/(\d+)/);
                if (a && a[2]) {
                    return parseFloat(a[2]);
                }
                return null;
            })();
            var bw = (function() {
                var b = /MSIE\s(\d+)\.\d/.exec(h);
                var a = b && parseFloat(b[1]);
                if (!a && /Trident\/7.0/i.test(h) && /rv:11.0/.test(h)) {
                    a = 11.0;
                }
                return a;
            })();
            var M = /Safari/i.test(h) && !L && !n && !K;
            var bx = /Windows/i.test(h);
            var N = Boolean(P() && ("ontouchstart" in f() || f().navigator.maxTouchPoints || (f().DocumentTouch && f().document instanceof f().DocumentTouch)));
            var O = /iPad/i.test(h) || (M && N && !/iPhone/i.test(h));
            var ao = /iPhone/i.test(h) && !O;
            var o = ao || O || am;
            var by = (M || o) && !L;
            var bz = Object.freeze({
                __proto__: null,
                IS_IPOD: am,
                IOS_VERSION: bs,
                IS_ANDROID: n,
                ANDROID_VERSION: an,
                IS_NATIVE_ANDROID: bt,
                IS_FIREFOX: bu,
                IS_EDGE: K,
                IS_CHROME: L,
                CHROME_VERSION: bv,
                IE_VERSION: bw,
                IS_SAFARI: M,
                IS_WINDOWS: bx,
                TOUCH_ENABLED: N,
                IS_IPAD: O,
                IS_IPHONE: ao,
                IS_IOS: o,
                IS_ANY_SAFARI: by
            });
            function d1(a) {
                return typeof a === "string" && Boolean(a.trim());
            }
            function d2(a) {
                if (a.indexOf(" ") >= 0) {
                    throw new Error("class has illegal whitespace characters");
                }
            }
            function d3(a) {
                return new RegExp("(^|\\s)" + a + "($|\\s)");
            }
            function P() {
                return (J() === f().document);
            }
            function bA(a) {
                return d_(a) && a.nodeType === 1;
            }
            function bB() {
                try {
                    return (f().parent !== f().self);
                } catch (a) {
                    return true;
                }
            }
            function ap(a) {
                return function(c, b) {
                    if (!d1(c)) {
                        return J()[a](null);
                    }
                    if (d1(b)) {
                        b = J().querySelector(b);
                    }
                    var d = bA(b) ? b : J();
                    return d[a] && d[a](c);
                };
            }
            function bC(a, b, c, d) {
                if (a === void 0) {
                    a = "div";
                }
                if (b === void 0) {
                    b = {};
                }
                if (c === void 0) {
                    c = {};
                }
                var e = J().createElement(a);
                Object.getOwnPropertyNames(b).forEach(function(a) {
                    var c = b[a];
                    if (a.indexOf("aria-") !== -1 || a === "role" || a === "type") {
                        ak.warn("Setting attributes in the second argument of createEl()\n" + "has been deprecated. Use the third argument instead.\n" + ("createEl(type, properties, attributes). Attempting to set " + a + " to " + c + "."));
                        e.setAttribute(a, c);
                    } else if (a === "textContent") {
                        bD(e, c);
                    } else if (e[a] !== c || a === "tabIndex") {
                        e[a] = c;
                    }
                });
                Object.getOwnPropertyNames(c).forEach(function(a) {
                    e.setAttribute(a, c[a]);
                });
                if (d) {
                    bW(e, d);
                }
                return e;
            }
            function bD(a, b) {
                if (typeof a.textContent === "undefined") {
                    a.innerText = b;
                } else {
                    a.textContent = b;
                }
                return a;
            }
            function bE(b, a) {
                if (a.firstChild) {
                    a.insertBefore(b, a.firstChild);
                } else {
                    a.appendChild(b);
                }
            }
            function bF(a, b) {
                d2(b);
                if (a.classList) {
                    return a.classList.contains(b);
                }
                return d3(b).test(a.className);
            }
            function bG(a, b) {
                if (a.classList) {
                    a.classList.add(b);
                } else if (!bF(a, b)) {
                    a.className = (a.className + " " + b).trim();
                }
                return a;
            }
            function bH(a, b) {
                if (!a) {
                    ak.warn("removeClass was called with an element that doesn't exist");
                    return null;
                }
                if (a.classList) {
                    a.classList.remove(b);
                } else {
                    d2(b);
                    a.className = a.className.split(/\s+/).filter(function(a) {
                        return a !== b;
                    }).join(" ");
                }
                return a;
            }
            function bI(b, c, a) {
                var d = bF(b, c);
                if (typeof a === "function") {
                    a = a(b, c);
                }
                if (typeof a !== "boolean") {
                    a = !d;
                }
                if (a === d) {
                    return;
                }
                if (a) {
                    bG(b, c);
                } else {
                    bH(b, c);
                }
                return b;
            }
            function bJ(b, a) {
                Object.getOwnPropertyNames(a).forEach(function(d) {
                    var c = a[d];
                    if (c === null || typeof c === "undefined" || c === false) {
                        b.removeAttribute(d);
                    } else {
                        b.setAttribute(d, c === true ? "" : c);
                    }
                });
            }
            function bK(a) {
                var f = {};
                var g = "," + "autoplay,controls,playsinline,loop,muted,default,defaultMuted" + ",";
                if (a && a.attributes && a.attributes.length > 0) {
                    var c = a.attributes;
                    for(var b = c.length - 1; b >= 0; b--){
                        var d = c[b].name;
                        var e = c[b].value;
                        if (typeof a[d] === "boolean" || g.indexOf("," + d + ",") !== -1) {
                            e = e !== null ? true : false;
                        }
                        f[d] = e;
                    }
                }
                return f;
            }
            function bL(a, b) {
                return a.getAttribute(b);
            }
            function bM(a, b, c) {
                a.setAttribute(b, c);
            }
            function bN(a, b) {
                a.removeAttribute(b);
            }
            function bO() {
                J().body.focus();
                J().onselectstart = function() {
                    return false;
                };
            }
            function bP() {
                J().onselectstart = function() {
                    return true;
                };
            }
            function bQ(a) {
                if (a && a.getBoundingClientRect && a.parentNode) {
                    var c = a.getBoundingClientRect();
                    var b = {};
                    [
                        "bottom",
                        "height",
                        "left",
                        "right",
                        "top",
                        "width", 
                    ].forEach(function(a) {
                        if (c[a] !== undefined) {
                            b[a] = c[a];
                        }
                    });
                    if (!b.height) {
                        b.height = parseFloat(bq(a, "height"));
                    }
                    if (!b.width) {
                        b.width = parseFloat(bq(a, "width"));
                    }
                    return b;
                }
            }
            function bR(a) {
                if (!a || (a && !a.offsetParent)) {
                    return {
                        left: 0,
                        top: 0,
                        width: 0,
                        height: 0
                    };
                }
                var d = a.offsetWidth;
                var e = a.offsetHeight;
                var b = 0;
                var c = 0;
                while(a.offsetParent && a !== J()[ai.fullscreenElement]){
                    b += a.offsetLeft;
                    c += a.offsetTop;
                    a = a.offsetParent;
                }
                return {
                    left: b,
                    top: c,
                    width: d,
                    height: e
                };
            }
            function bS(i, a) {
                var b = {
                    x: 0,
                    y: 0
                };
                if (o) {
                    var d = i;
                    while(d && d.nodeName.toLowerCase() !== "html"){
                        var e = bq(d, "transform");
                        if (/^matrix/.test(e)) {
                            var j = e.slice(7, -1).split(/,\s/).map(Number);
                            b.x += j[4];
                            b.y += j[5];
                        } else if (/^matrix3d/.test(e)) {
                            var k = e.slice(9, -1).split(/,\s/).map(Number);
                            b.x += k[12];
                            b.y += k[13];
                        }
                        d = d.parentNode;
                    }
                }
                var f = {};
                var l = bR(a.target);
                var c = bR(i);
                var m = c.width;
                var n = c.height;
                var g = a.offsetY - (c.top - l.top);
                var h = a.offsetX - (c.left - l.left);
                if (a.changedTouches) {
                    h = a.changedTouches[0].pageX - c.left;
                    g = a.changedTouches[0].pageY + c.top;
                    if (o) {
                        h -= b.x;
                        g -= b.y;
                    }
                }
                f.y = 1 - Math.max(0, Math.min(1, g / n));
                f.x = Math.max(0, Math.min(1, h / m));
                return f;
            }
            function bT(a) {
                return d_(a) && a.nodeType === 3;
            }
            function bU(a) {
                while(a.firstChild){
                    a.removeChild(a.firstChild);
                }
                return a;
            }
            function bV(a) {
                if (typeof a === "function") {
                    a = a();
                }
                return (Array.isArray(a) ? a : [
                    a
                ]).map(function(a) {
                    if (typeof a === "function") {
                        a = a();
                    }
                    if (bA(a) || bT(a)) {
                        return a;
                    }
                    if (typeof a === "string" && /\S/.test(a)) {
                        return J().createTextNode(a);
                    }
                }).filter(function(a) {
                    return a;
                });
            }
            function bW(a, b) {
                bV(b).forEach(function(b) {
                    return a.appendChild(b);
                });
                return a;
            }
            function bX(a, b) {
                return bW(bU(a), b);
            }
            function bY(a) {
                if (a.button === undefined && a.buttons === undefined) {
                    return true;
                }
                if (a.button === 0 && a.buttons === undefined) {
                    return true;
                }
                if (a.type === "mouseup" && a.button === 0 && a.buttons === 0) {
                    return true;
                }
                if (a.button !== 0 || a.buttons !== 1) {
                    return false;
                }
                return true;
            }
            var Q = ap("querySelector");
            var bZ = ap("querySelectorAll");
            var b$ = Object.freeze({
                __proto__: null,
                isReal: P,
                isEl: bA,
                isInFrame: bB,
                createEl: bC,
                textContent: bD,
                prependTo: bE,
                hasClass: bF,
                addClass: bG,
                removeClass: bH,
                toggleClass: bI,
                setAttributes: bJ,
                getAttributes: bK,
                getAttribute: bL,
                setAttribute: bM,
                removeAttribute: bN,
                blockTextSelection: bO,
                unblockTextSelection: bP,
                getBoundingClientRect: bQ,
                findPosition: bR,
                getPointerPosition: bS,
                isTextNode: bT,
                emptyEl: bU,
                normalizeContent: bV,
                appendContent: bW,
                insertContent: bX,
                isSingleLeftClick: bY,
                $: Q,
                $$: bZ
            });
            var d4 = false;
            var d5;
            var d6 = function i() {
                if (d5.options.autoSetup === false) {
                    return;
                }
                var d = Array.prototype.slice.call(J().getElementsByTagName("video"));
                var e = Array.prototype.slice.call(J().getElementsByTagName("audio"));
                var f = Array.prototype.slice.call(J().getElementsByTagName("video-js"));
                var b = d.concat(e, f);
                if (b && b.length > 0) {
                    for(var c = 0, g = b.length; c < g; c++){
                        var a = b[c];
                        if (a && a.getAttribute) {
                            if (a.player === undefined) {
                                var h = a.getAttribute("data-setup");
                                if (h !== null) {
                                    d5(a);
                                }
                            }
                        } else {
                            b_(1);
                            break;
                        }
                    }
                } else if (!d4) {
                    b_(1);
                }
            };
            function b_(b, a) {
                if (!P()) {
                    return;
                }
                if (a) {
                    d5 = a;
                }
                f().setTimeout(d6, b);
            }
            function aq() {
                d4 = true;
                f().removeEventListener("load", aq);
            }
            if (P()) {
                if (J().readyState === "complete") {
                    aq();
                } else {
                    f().addEventListener("load", aq);
                }
            }
            var b0 = function c(b) {
                var a = J().createElement("style");
                a.className = b;
                return a;
            };
            var b1 = function c(a, b) {
                if (a.styleSheet) {
                    a.styleSheet.cssText = b;
                } else {
                    a.textContent = b;
                }
            };
            var b2 = 3;
            var d7 = b2;
            function d8() {
                return d7++;
            }
            var ar;
            if (!f().WeakMap) {
                ar = (function() {
                    function b() {
                        this.vdata = "vdata" + Math.floor((f().performance && f().performance.now()) || Date.now());
                        this.data = {};
                    }
                    var a = b.prototype;
                    a.set = function d(a, c) {
                        var b = a[this.vdata] || d8();
                        if (!a[this.vdata]) {
                            a[this.vdata] = b;
                        }
                        this.data[b] = c;
                        return this;
                    };
                    a.get = function c(a) {
                        var b = a[this.vdata];
                        if (b) {
                            return this.data[b];
                        }
                        ak("We have no data for this element", a);
                        return undefined;
                    };
                    a.has = function c(a) {
                        var b = a[this.vdata];
                        return b in this.data;
                    };
                    a["delete"] = function c(a) {
                        var b = a[this.vdata];
                        if (b) {
                            delete this.data[b];
                            delete a[this.vdata];
                        }
                    };
                    return b;
                })();
            }
            var d9 = f().WeakMap ? new WeakMap() : new ar();
            function ea(b, c) {
                if (!d9.has(b)) {
                    return;
                }
                var a = d9.get(b);
                if (a.handlers[c].length === 0) {
                    delete a.handlers[c];
                    if (b.removeEventListener) {
                        b.removeEventListener(c, a.dispatcher, false);
                    } else if (b.detachEvent) {
                        b.detachEvent("on" + c, a.dispatcher);
                    }
                }
                if (Object.getOwnPropertyNames(a.handlers).length <= 0) {
                    delete a.handlers;
                    delete a.dispatcher;
                    delete a.disabled;
                }
                if (Object.getOwnPropertyNames(a).length === 0) {
                    d9["delete"](b);
                }
            }
            function eb(b, c, a, d) {
                a.forEach(function(a) {
                    b(c, a, d);
                });
            }
            function b3(a) {
                if (a.fixed_) {
                    return a;
                }
                function h() {
                    return true;
                }
                function g() {
                    return false;
                }
                if (!a || !a.isPropagationStopped || !a.isImmediatePropagationStopped) {
                    var e = a || f().event;
                    a = {};
                    for(var b in e){
                        if (b !== "layerX" && b !== "layerY" && b !== "keyLocation" && b !== "webkitMovementX" && b !== "webkitMovementY") {
                            if (!(b === "returnValue" && e.preventDefault)) {
                                a[b] = e[b];
                            }
                        }
                    }
                    if (!a.target) {
                        a.target = a.srcElement || J();
                    }
                    if (!a.relatedTarget) {
                        a.relatedTarget = a.fromElement === a.target ? a.toElement : a.fromElement;
                    }
                    a.preventDefault = function() {
                        if (e.preventDefault) {
                            e.preventDefault();
                        }
                        a.returnValue = false;
                        e.returnValue = false;
                        a.defaultPrevented = true;
                    };
                    a.defaultPrevented = false;
                    a.stopPropagation = function() {
                        if (e.stopPropagation) {
                            e.stopPropagation();
                        }
                        a.cancelBubble = true;
                        e.cancelBubble = true;
                        a.isPropagationStopped = h;
                    };
                    a.isPropagationStopped = g;
                    a.stopImmediatePropagation = function() {
                        if (e.stopImmediatePropagation) {
                            e.stopImmediatePropagation();
                        }
                        a.isImmediatePropagationStopped = h;
                        a.stopPropagation();
                    };
                    a.isImmediatePropagationStopped = g;
                    if (a.clientX !== null && a.clientX !== undefined) {
                        var c = J().documentElement;
                        var d = J().body;
                        a.pageX = a.clientX + ((c && c.scrollLeft) || (d && d.scrollLeft) || 0) - ((c && c.clientLeft) || (d && d.clientLeft) || 0);
                        a.pageY = a.clientY + ((c && c.scrollTop) || (d && d.scrollTop) || 0) - ((c && c.clientTop) || (d && d.clientTop) || 0);
                    }
                    a.which = a.charCode || a.keyCode;
                    if (a.button !== null && a.button !== undefined) {
                        a.button = a.button & 1 ? 0 : a.button & 4 ? 1 : a.button & 2 ? 2 : 0;
                    }
                }
                a.fixed_ = true;
                return a;
            }
            var ec;
            var ed = function b() {
                if (typeof ec !== "boolean") {
                    ec = false;
                    try {
                        var a = Object.defineProperty({}, "passive", {
                            get: function a() {
                                ec = true;
                            }
                        });
                        f().addEventListener("test", null, a);
                        f().removeEventListener("test", null, a);
                    } catch (c) {}
                }
                return ec;
            };
            var ee = [
                "touchstart",
                "touchmove"
            ];
            function as(c, b, d) {
                if (Array.isArray(b)) {
                    return eb(as, c, b, d);
                }
                if (!d9.has(c)) {
                    d9.set(c, {});
                }
                var a = d9.get(c);
                if (!a.handlers) {
                    a.handlers = {};
                }
                if (!a.handlers[b]) {
                    a.handlers[b] = [];
                }
                if (!d.guid) {
                    d.guid = d8();
                }
                a.handlers[b].push(d);
                if (!a.dispatcher) {
                    a.disabled = false;
                    a.dispatcher = function(b, g) {
                        if (a.disabled) {
                            return;
                        }
                        b = b3(b);
                        var e = a.handlers[b.type];
                        if (e) {
                            var f = e.slice(0);
                            for(var d = 0, h = f.length; d < h; d++){
                                if (b.isImmediatePropagationStopped()) {
                                    break;
                                } else {
                                    try {
                                        f[d].call(c, b, g);
                                    } catch (i) {
                                        ak.error(i);
                                    }
                                }
                            }
                        }
                    };
                }
                if (a.handlers[b].length === 1) {
                    if (c.addEventListener) {
                        var e = false;
                        if (ed() && ee.indexOf(b) > -1) {
                            e = {
                                passive: true
                            };
                        }
                        c.addEventListener(b, a.dispatcher, e);
                    } else if (c.attachEvent) {
                        c.attachEvent("on" + b, a.dispatcher);
                    }
                }
            }
            function at(a, b, c) {
                if (!d9.has(a)) {
                    return;
                }
                var d = d9.get(a);
                if (!d.handlers) {
                    return;
                }
                if (Array.isArray(b)) {
                    return eb(at, a, b, c);
                }
                var g = function c(b, a) {
                    d.handlers[a] = [];
                    ea(b, a);
                };
                if (b === undefined) {
                    for(var h in d.handlers){
                        if (Object.prototype.hasOwnProperty.call(d.handlers || {}, h)) {
                            g(a, h);
                        }
                    }
                    return;
                }
                var e = d.handlers[b];
                if (!e) {
                    return;
                }
                if (!c) {
                    g(a, b);
                    return;
                }
                if (c.guid) {
                    for(var f = 0; f < e.length; f++){
                        if (e[f].guid === c.guid) {
                            e.splice(f--, 1);
                        }
                    }
                }
                ea(a, b);
            }
            function au(b, a, d) {
                var e = d9.has(b) ? d9.get(b) : {};
                var c = b.parentNode || b.ownerDocument;
                if (typeof a === "string") {
                    a = {
                        type: a,
                        target: b
                    };
                } else if (!a.target) {
                    a.target = b;
                }
                a = b3(a);
                if (e.dispatcher) {
                    e.dispatcher.call(b, a, d);
                }
                if (c && !a.isPropagationStopped() && a.bubbles === true) {
                    au.call(null, c, a, d);
                } else if (!c && !a.defaultPrevented && a.target && a.target[a.type]) {
                    if (!d9.has(a.target)) {
                        d9.set(a.target, {});
                    }
                    var f = d9.get(a.target);
                    if (a.target[a.type]) {
                        f.disabled = true;
                        if (typeof a.target[a.type] === "function") {
                            a.target[a.type]();
                        }
                        f.disabled = false;
                    }
                }
                return !a.defaultPrevented;
            }
            function av(c, a, b) {
                if (Array.isArray(a)) {
                    return eb(av, c, a, b);
                }
                var d = function d() {
                    at(c, a, d);
                    b.apply(this, arguments);
                };
                d.guid = b.guid = b.guid || d8();
                as(c, a, d);
            }
            function b4(c, d, a) {
                var b = function b() {
                    at(c, d, b);
                    a.apply(this, arguments);
                };
                b.guid = a.guid = a.guid || d8();
                as(c, d, b);
            }
            var ef = Object.freeze({
                __proto__: null,
                fixEvent: b3,
                on: as,
                off: at,
                trigger: au,
                one: av,
                any: b4
            });
            var eg = 30;
            var b5 = function e(d, a, b) {
                if (!a.guid) {
                    a.guid = d8();
                }
                var c = a.bind(d);
                c.guid = b ? b + "_" + a.guid : a.guid;
                return c;
            };
            var eh = function b(c, d) {
                var e = f().performance.now();
                var a = function b() {
                    var a = f().performance.now();
                    if (a - e >= d) {
                        c.apply(void 0, arguments);
                        e = a;
                    }
                };
                return a;
            };
            var ei = function d(e, g, h, a) {
                if (a === void 0) {
                    a = f();
                }
                var i;
                var c = function b() {
                    a.clearTimeout(i);
                    i = null;
                };
                var b = function f() {
                    var b = this;
                    var c = arguments;
                    var d = function a() {
                        i = null;
                        d = null;
                        if (!h) {
                            e.apply(b, c);
                        }
                    };
                    if (!i && h) {
                        e.apply(b, c);
                    }
                    a.clearTimeout(i);
                    i = a.setTimeout(d, g);
                };
                b.cancel = c;
                return b;
            };
            var g = function a() {};
            g.prototype.allowedEvents_ = {};
            g.prototype.on = function(a, b) {
                var c = this.addEventListener;
                this.addEventListener = function() {};
                as(this, a, b);
                this.addEventListener = c;
            };
            g.prototype.addEventListener = g.prototype.on;
            g.prototype.off = function(a, b) {
                at(this, a, b);
            };
            g.prototype.removeEventListener = g.prototype.off;
            g.prototype.one = function(a, b) {
                var c = this.addEventListener;
                this.addEventListener = function() {};
                av(this, a, b);
                this.addEventListener = c;
            };
            g.prototype.any = function(a, b) {
                var c = this.addEventListener;
                this.addEventListener = function() {};
                b4(this, a, b);
                this.addEventListener = c;
            };
            g.prototype.trigger = function(a) {
                var b = a.type || a;
                if (typeof a === "string") {
                    a = {
                        type: b
                    };
                }
                a = b3(a);
                if (this.allowedEvents_[b] && this["on" + b]) {
                    this["on" + b](a);
                }
                au(this, a);
            };
            g.prototype.dispatchEvent = g.prototype.trigger;
            var ej;
            g.prototype.queueTrigger = function(c) {
                var g = this;
                if (!ej) {
                    ej = new Map();
                }
                var b = c.type || c;
                var a = ej.get(this);
                if (!a) {
                    a = new Map();
                    ej.set(this, a);
                }
                var d = a.get(b);
                a["delete"](b);
                f().clearTimeout(d);
                var e = f().setTimeout(function() {
                    if (a.size === 0) {
                        a = null;
                        ej["delete"](g);
                    }
                    g.trigger(c);
                }, 0);
                a.set(b, e);
            };
            var ek = function b(a) {
                if (typeof a.name === "function") {
                    return a.name();
                }
                if (typeof a.name === "string") {
                    return a.name;
                }
                if (a.name_) {
                    return a.name_;
                }
                if (a.constructor && a.constructor.name) {
                    return a.constructor.name;
                }
                return typeof a;
            };
            var el = function b(a) {
                return (a instanceof g || (!!a.eventBusEl_ && [
                    "on",
                    "one",
                    "off",
                    "trigger"
                ].every(function(b) {
                    return typeof a[b] === "function";
                })));
            };
            var em = function c(a, b) {
                if (el(a)) {
                    b();
                } else {
                    if (!a.eventedCallbacks) {
                        a.eventedCallbacks = [];
                    }
                    a.eventedCallbacks.push(b);
                }
            };
            var en = function b(a) {
                return ((typeof a === "string" && /\S/.test(a)) || (Array.isArray(a) && !!a.length));
            };
            var eo = function d(a, b, c) {
                if (!a || (!a.nodeName && !el(a))) {
                    throw new Error("Invalid target for " + ek(b) + "#" + c + "; must be a DOM node or evented object.");
                }
            };
            var ep = function d(a, b, c) {
                if (!en(a)) {
                    throw new Error("Invalid event type for " + ek(b) + "#" + c + "; must be a non-empty string or array.");
                }
            };
            var eq = function d(a, b, c) {
                if (typeof a !== "function") {
                    throw new Error("Invalid listener for " + ek(b) + "#" + c + "; must be a function.");
                }
            };
            var er = function h(b, a, f) {
                var g = a.length < 3 || a[0] === b || a[0] === b.eventBusEl_;
                var d;
                var e;
                var c;
                if (g) {
                    d = b.eventBusEl_;
                    if (a.length >= 3) {
                        a.shift();
                    }
                    e = a[0];
                    c = a[1];
                } else {
                    d = a[0];
                    e = a[1];
                    c = a[2];
                }
                eo(d, b, f);
                ep(e, b, f);
                eq(c, b, f);
                c = b5(b, c);
                return {
                    isTargetingSelf: g,
                    target: d,
                    type: e,
                    listener: c
                };
            };
            var es = function e(a, b, c, d) {
                eo(a, a, b);
                if (a.nodeName) {
                    ef[b](a, c, d);
                } else {
                    a[b](c, d);
                }
            };
            var et = {
                on: function k() {
                    var l = this;
                    for(var d = arguments.length, e = new Array(d), a = 0; a < d; a++){
                        e[a] = arguments[a];
                    }
                    var b = er(this, e, "on"), i = b.isTargetingSelf, f = b.target, j = b.type, c = b.listener;
                    es(f, "on", j, c);
                    if (!i) {
                        var g = function a() {
                            return l.off(f, j, c);
                        };
                        g.guid = c.guid;
                        var h = function a() {
                            return l.off("dispose", g);
                        };
                        h.guid = c.guid;
                        es(this, "on", "dispose", g);
                        es(f, "on", "dispose", h);
                    }
                },
                one: function j() {
                    var k = this;
                    for(var c = arguments.length, d = new Array(c), a = 0; a < c; a++){
                        d[a] = arguments[a];
                    }
                    var b = er(this, d, "one"), i = b.isTargetingSelf, e = b.target, f = b.type, g = b.listener;
                    if (i) {
                        es(e, "one", f, g);
                    } else {
                        var h = function d() {
                            k.off(e, f, d);
                            for(var b = arguments.length, c = new Array(b), a = 0; a < b; a++){
                                c[a] = arguments[a];
                            }
                            g.apply(null, c);
                        };
                        h.guid = g.guid;
                        es(e, "one", f, h);
                    }
                },
                any: function j() {
                    var k = this;
                    for(var c = arguments.length, d = new Array(c), a = 0; a < c; a++){
                        d[a] = arguments[a];
                    }
                    var b = er(this, d, "any"), i = b.isTargetingSelf, e = b.target, f = b.type, g = b.listener;
                    if (i) {
                        es(e, "any", f, g);
                    } else {
                        var h = function d() {
                            k.off(e, f, d);
                            for(var b = arguments.length, c = new Array(b), a = 0; a < b; a++){
                                c[a] = arguments[a];
                            }
                            g.apply(null, c);
                        };
                        h.guid = g.guid;
                        es(e, "any", f, h);
                    }
                },
                off: function f(c, e, a) {
                    if (!c || en(c)) {
                        at(this.eventBusEl_, c, e);
                    } else {
                        var b = c;
                        var d = e;
                        eo(b, this, "off");
                        ep(d, this, "off");
                        eq(a, this, "off");
                        a = b5(this, a);
                        this.off("dispose", a);
                        if (b.nodeName) {
                            at(b, d, a);
                            at(b, "dispose", a);
                        } else if (el(b)) {
                            b.off(d, a);
                            b.off("dispose", a);
                        }
                    }
                },
                trigger: function e(a, c) {
                    eo(this.eventBusEl_, this, "trigger");
                    var d = a && typeof a !== "string" ? a.type : a;
                    if (!en(d)) {
                        var b = "Invalid event type for " + ek(this) + "#trigger; " + "must be a non-empty string or object with a type key that has a non-empty value.";
                        if (a) {
                            (this.log || ak).error(b);
                        } else {
                            throw new Error(b);
                        }
                    }
                    return au(this.eventBusEl_, a, c);
                }
            };
            function eu(a, c) {
                if (c === void 0) {
                    c = {};
                }
                var d = c, b = d.eventBusKey;
                if (b) {
                    if (!a[b].nodeName) {
                        throw new Error('The eventBusKey "' + b + '" does not refer to an element.');
                    }
                    a.eventBusEl_ = a[b];
                } else {
                    a.eventBusEl_ = bC("span", {
                        className: "vjs-event-bus"
                    });
                }
                d$(a, et);
                if (a.eventedCallbacks) {
                    a.eventedCallbacks.forEach(function(a) {
                        a();
                    });
                }
                a.on("dispose", function() {
                    a.off();
                    [
                        a,
                        a.el_,
                        a.eventBusEl_
                    ].forEach(function(a) {
                        if (a && d9.has(a)) {
                            d9["delete"](a);
                        }
                    });
                    f().setTimeout(function() {
                        a.eventBusEl_ = null;
                    }, 0);
                });
                return a;
            }
            var ev = {
                state: {},
                setState: function c(a) {
                    var d = this;
                    if (typeof a === "function") {
                        a = a();
                    }
                    var b;
                    dY(a, function(c, a) {
                        if (d.state[a] !== c) {
                            b = b || {};
                            b[a] = {
                                from: d.state[a],
                                to: c
                            };
                        }
                        d.state[a] = c;
                    });
                    if (b && el(this)) {
                        this.trigger({
                            changes: b,
                            type: "statechanged"
                        });
                    }
                    return b;
                }
            };
            function ew(a, b) {
                d$(a, ev);
                a.state = d$({}, a.state, b);
                if (typeof a.handleStateChanged === "function" && el(a)) {
                    a.on("statechanged", a.handleStateChanged);
                }
                return a;
            }
            var ex = function b(a) {
                if (typeof a !== "string") {
                    return a;
                }
                return a.replace(/./, function(a) {
                    return a.toLowerCase();
                });
            };
            var ey = function b(a) {
                if (typeof a !== "string") {
                    return a;
                }
                return a.replace(/./, function(a) {
                    return a.toUpperCase();
                });
            };
            var ez = function c(a, b) {
                return ey(a) === ey(b);
            };
            function b6() {
                var d = {};
                for(var b = arguments.length, c = new Array(b), a = 0; a < b; a++){
                    c[a] = arguments[a];
                }
                c.forEach(function(a) {
                    if (!a) {
                        return;
                    }
                    dY(a, function(b, a) {
                        if (!d0(b)) {
                            d[a] = b;
                            return;
                        }
                        if (!d0(d[a])) {
                            d[a] = {};
                        }
                        d[a] = b6(d[a], b);
                    });
                });
                return d;
            }
            var b7 = (function() {
                function b() {
                    this.map_ = {};
                }
                var a = b.prototype;
                a.has = function b(a) {
                    return a in this.map_;
                };
                a["delete"] = function c(a) {
                    var b = this.has(a);
                    delete this.map_[a];
                    return b;
                };
                a.set = function c(a, b) {
                    this.map_[a] = b;
                    return this;
                };
                a.forEach = function d(b, c) {
                    for(var a in this.map_){
                        b.call(c, this.map_[a], a, this);
                    }
                };
                return b;
            })();
            var eA = f().Map ? f().Map : b7;
            var b8 = (function() {
                function b() {
                    this.set_ = {};
                }
                var a = b.prototype;
                a.has = function b(a) {
                    return a in this.set_;
                };
                a["delete"] = function c(a) {
                    var b = this.has(a);
                    delete this.set_[a];
                    return b;
                };
                a.add = function b(a) {
                    this.set_[a] = 1;
                    return this;
                };
                a.forEach = function d(b, c) {
                    for(var a in this.set_){
                        b.call(c, a, a, this);
                    }
                };
                return b;
            })();
            var eB = f().Set ? f().Set : b8;
            var a = (function() {
                function b(b, a, c) {
                    if (!b && this.play) {
                        this.player_ = b = this;
                    } else {
                        this.player_ = b;
                    }
                    this.isDisposed_ = false;
                    this.parentComponent_ = null;
                    this.options_ = b6({}, this.options_);
                    a = this.options_ = b6(this.options_, a);
                    this.id_ = a.id || (a.el && a.el.id);
                    if (!this.id_) {
                        var d = (b && b.id && b.id()) || "no_player";
                        this.id_ = d + "_component_" + d8();
                    }
                    this.name_ = a.name || null;
                    if (a.el) {
                        this.el_ = a.el;
                    } else if (a.createEl !== false) {
                        this.el_ = this.createEl();
                    }
                    if (a.evented !== false) {
                        eu(this, {
                            eventBusKey: this.el_ ? "el_" : null
                        });
                        this.handleLanguagechange = this.handleLanguagechange.bind(this);
                        this.on(this.player_, "languagechange", this.handleLanguagechange);
                    }
                    ew(this, this.constructor.defaultState);
                    this.children_ = [];
                    this.childIndex_ = {};
                    this.childNameIndex_ = {};
                    this.setTimeoutIds_ = new eB();
                    this.setIntervalIds_ = new eB();
                    this.rafIds_ = new eB();
                    this.namedRafs_ = new eA();
                    this.clearingTimersOnDispose_ = false;
                    if (a.initChildren !== false) {
                        this.initChildren();
                    }
                    this.ready(c);
                    if (a.reportTouchActivity !== false) {
                        this.enableTouchActivity();
                    }
                }
                var a = b.prototype;
                a.dispose = function b() {
                    if (this.isDisposed_) {
                        return;
                    }
                    if (this.readyQueue_) {
                        this.readyQueue_.length = 0;
                    }
                    this.trigger({
                        type: "dispose",
                        bubbles: false
                    });
                    this.isDisposed_ = true;
                    if (this.children_) {
                        for(var a = this.children_.length - 1; a >= 0; a--){
                            if (this.children_[a].dispose) {
                                this.children_[a].dispose();
                            }
                        }
                    }
                    this.children_ = null;
                    this.childIndex_ = null;
                    this.childNameIndex_ = null;
                    this.parentComponent_ = null;
                    if (this.el_) {
                        if (this.el_.parentNode) {
                            this.el_.parentNode.removeChild(this.el_);
                        }
                        this.el_ = null;
                    }
                    this.player_ = null;
                };
                a.isDisposed = function a() {
                    return Boolean(this.isDisposed_);
                };
                a.player = function a() {
                    return this.player_;
                };
                a.options = function b(a) {
                    if (!a) {
                        return this.options_;
                    }
                    this.options_ = b6(this.options_, a);
                    return this.options_;
                };
                a.el = function a() {
                    return this.el_;
                };
                a.createEl = function d(a, b, c) {
                    return bC(a, b, c);
                };
                a.localize = function j(a, h, d) {
                    if (d === void 0) {
                        d = a;
                    }
                    var e = this.player_.language && this.player_.language();
                    var c = this.player_.languages && this.player_.languages();
                    var f = c && c[e];
                    var i = e && e.split("-")[0];
                    var g = c && c[i];
                    var b = d;
                    if (f && f[a]) {
                        b = f[a];
                    } else if (g && g[a]) {
                        b = g[a];
                    }
                    if (h) {
                        b = b.replace(/\{(\d+)\}/g, function(c, d) {
                            var a = h[d - 1];
                            var b = a;
                            if (typeof a === "undefined") {
                                b = c;
                            }
                            return b;
                        });
                    }
                    return b;
                };
                a.handleLanguagechange = function a() {};
                a.contentEl = function a() {
                    return this.contentEl_ || this.el_;
                };
                a.id = function a() {
                    return this.id_;
                };
                a.name = function a() {
                    return this.name_;
                };
                a.children = function a() {
                    return this.children_;
                };
                a.getChildById = function b(a) {
                    return this.childIndex_[a];
                };
                a.getChild = function b(a) {
                    if (!a) {
                        return;
                    }
                    return this.childNameIndex_[a];
                };
                a.getDescendant = function f() {
                    for(var e = arguments.length, a = new Array(e), c = 0; c < e; c++){
                        a[c] = arguments[c];
                    }
                    a = a.reduce(function(a, b) {
                        return a.concat(b);
                    }, []);
                    var b = this;
                    for(var d = 0; d < a.length; d++){
                        b = b.getChild(a[d]);
                        if (!b || !b.getChild) {
                            return;
                        }
                    }
                    return b;
                };
                a.addChild = function j(f, e, c) {
                    if (e === void 0) {
                        e = {};
                    }
                    if (c === void 0) {
                        c = this.children_.length;
                    }
                    var a;
                    var d;
                    if (typeof f === "string") {
                        d = ey(f);
                        var i = e.componentClass || d;
                        e.name = d;
                        var g = b.getComponent(i);
                        if (!g) {
                            throw new Error("Component " + i + " does not exist");
                        }
                        if (typeof g !== "function") {
                            return null;
                        }
                        a = new g(this.player_ || this, e);
                    } else {
                        a = f;
                    }
                    if (a.parentComponent_) {
                        a.parentComponent_.removeChild(a);
                    }
                    this.children_.splice(c, 0, a);
                    a.parentComponent_ = this;
                    if (typeof a.id === "function") {
                        this.childIndex_[a.id()] = a;
                    }
                    d = d || (a.name && ey(a.name()));
                    if (d) {
                        this.childNameIndex_[d] = a;
                        this.childNameIndex_[ex(d)] = a;
                    }
                    if (typeof a.el === "function" && a.el()) {
                        var h = null;
                        if (this.children_[c + 1]) {
                            if (this.children_[c + 1].el_) {
                                h = this.children_[c + 1].el_;
                            } else if (bA(this.children_[c + 1])) {
                                h = this.children_[c + 1];
                            }
                        }
                        this.contentEl().insertBefore(a.el(), h);
                    }
                    return a;
                };
                a.removeChild = function e(a) {
                    if (typeof a === "string") {
                        a = this.getChild(a);
                    }
                    if (!a || !this.children_) {
                        return;
                    }
                    var c = false;
                    for(var b = this.children_.length - 1; b >= 0; b--){
                        if (this.children_[b] === a) {
                            c = true;
                            this.children_.splice(b, 1);
                            break;
                        }
                    }
                    if (!c) {
                        return;
                    }
                    a.parentComponent_ = null;
                    this.childIndex_[a.id()] = null;
                    this.childNameIndex_[ey(a.name())] = null;
                    this.childNameIndex_[ex(a.name())] = null;
                    var d = a.el();
                    if (d && d.parentNode === this.contentEl()) {
                        this.contentEl().removeChild(a.el());
                    }
                };
                a.initChildren = function e() {
                    var f = this;
                    var a = this.options_.children;
                    if (a) {
                        var g = this.options_;
                        var d = function e(c) {
                            var b = c.name;
                            var a = c.opts;
                            if (g[b] !== undefined) {
                                a = g[b];
                            }
                            if (a === false) {
                                return;
                            }
                            if (a === true) {
                                a = {};
                            }
                            a.playerOptions = f.options_.playerOptions;
                            var d = f.addChild(b, a);
                            if (d) {
                                f[b] = d;
                            }
                        };
                        var c;
                        var h = b.getComponent("Tech");
                        if (Array.isArray(a)) {
                            c = a;
                        } else {
                            c = Object.keys(a);
                        }
                        c.concat(Object.keys(this.options_).filter(function(a) {
                            return !c.some(function(b) {
                                if (typeof b === "string") {
                                    return a === b;
                                }
                                return a === b.name;
                            });
                        })).map(function(c) {
                            var b;
                            var d;
                            if (typeof c === "string") {
                                b = c;
                                d = a[b] || f.options_[b] || {};
                            } else {
                                b = c.name;
                                d = c;
                            }
                            return {
                                name: b,
                                opts: d
                            };
                        }).filter(function(a) {
                            var c = b.getComponent(a.opts.componentClass || ey(a.name));
                            return c && !h.isTech(c);
                        }).forEach(d);
                    }
                };
                a.buildCSSClass = function a() {
                    return "";
                };
                a.ready = function c(a, b) {
                    if (b === void 0) {
                        b = false;
                    }
                    if (!a) {
                        return;
                    }
                    if (!this.isReady_) {
                        this.readyQueue_ = this.readyQueue_ || [];
                        this.readyQueue_.push(a);
                        return;
                    }
                    if (b) {
                        a.call(this);
                    } else {
                        this.setTimeout(a, 1);
                    }
                };
                a.triggerReady = function a() {
                    this.isReady_ = true;
                    this.setTimeout(function() {
                        var a = this.readyQueue_;
                        this.readyQueue_ = [];
                        if (a && a.length > 0) {
                            a.forEach(function(a) {
                                a.call(this);
                            }, this);
                        }
                        this.trigger("ready");
                    }, 1);
                };
                a.$ = function c(a, b) {
                    return Q(a, b || this.contentEl());
                };
                a.$$ = function c(a, b) {
                    return bZ(a, b || this.contentEl());
                };
                a.hasClass = function b(a) {
                    return bF(this.el_, a);
                };
                a.addClass = function b(a) {
                    bG(this.el_, a);
                };
                a.removeClass = function b(a) {
                    bH(this.el_, a);
                };
                a.toggleClass = function c(a, b) {
                    bI(this.el_, a, b);
                };
                a.show = function a() {
                    this.removeClass("vjs-hidden");
                };
                a.hide = function a() {
                    this.addClass("vjs-hidden");
                };
                a.lockShowing = function a() {
                    this.addClass("vjs-lock-showing");
                };
                a.unlockShowing = function a() {
                    this.removeClass("vjs-lock-showing");
                };
                a.getAttribute = function b(a) {
                    return bL(this.el_, a);
                };
                a.setAttribute = function c(a, b) {
                    bM(this.el_, a, b);
                };
                a.removeAttribute = function b(a) {
                    bN(this.el_, a);
                };
                a.width = function c(a, b) {
                    return this.dimension("width", a, b);
                };
                a.height = function c(a, b) {
                    return this.dimension("height", a, b);
                };
                a.dimensions = function c(a, b) {
                    this.width(a, true);
                    this.height(b);
                };
                a.dimension = function f(b, a, e) {
                    if (a !== undefined) {
                        if (a === null || a !== a) {
                            a = 0;
                        }
                        if (("" + a).indexOf("%") !== -1 || ("" + a).indexOf("px") !== -1) {
                            this.el_.style[b] = a;
                        } else if (a === "auto") {
                            this.el_.style[b] = "";
                        } else {
                            this.el_.style[b] = a + "px";
                        }
                        if (!e) {
                            this.trigger("componentresize");
                        }
                        return;
                    }
                    if (!this.el_) {
                        return 0;
                    }
                    var c = this.el_.style[b];
                    var d = c.indexOf("px");
                    if (d !== -1) {
                        return parseInt(c.slice(0, d), 10);
                    }
                    return parseInt(this.el_["offset" + ey(b)], 10);
                };
                a.currentDimension = function d(b) {
                    var a = 0;
                    if (b !== "width" && b !== "height") {
                        throw new Error("currentDimension only accepts width or height value");
                    }
                    a = bq(this.el_, b);
                    a = parseFloat(a);
                    if (a === 0 || isNaN(a)) {
                        var c = "offset" + ey(b);
                        a = this.el_[c];
                    }
                    return a;
                };
                a.currentDimensions = function a() {
                    return {
                        width: this.currentDimension("width"),
                        height: this.currentDimension("height")
                    };
                };
                a.currentWidth = function a() {
                    return this.currentDimension("width");
                };
                a.currentHeight = function a() {
                    return this.currentDimension("height");
                };
                a.focus = function a() {
                    this.el_.focus();
                };
                a.blur = function a() {
                    this.el_.blur();
                };
                a.handleKeyDown = function b(a) {
                    if (this.player_) {
                        a.stopPropagation();
                        this.player_.handleKeyDown(a);
                    }
                };
                a.handleKeyPress = function b(a) {
                    this.handleKeyDown(a);
                };
                a.emitTapEvents = function b() {
                    var c = 0;
                    var d = null;
                    var e = 10;
                    var g = 200;
                    var h;
                    this.on("touchstart", function(a) {
                        if (a.touches.length === 1) {
                            d = {
                                pageX: a.touches[0].pageX,
                                pageY: a.touches[0].pageY
                            };
                            c = f().performance.now();
                            h = true;
                        }
                    });
                    this.on("touchmove", function(a) {
                        if (a.touches.length > 1) {
                            h = false;
                        } else if (d) {
                            var b = a.touches[0].pageX - d.pageX;
                            var c = a.touches[0].pageY - d.pageY;
                            var f = Math.sqrt(b * b + c * c);
                            if (f > e) {
                                h = false;
                            }
                        }
                    });
                    var a = function a() {
                        h = false;
                    };
                    this.on("touchleave", a);
                    this.on("touchcancel", a);
                    this.on("touchend", function(a) {
                        d = null;
                        if (h === true) {
                            var b = f().performance.now() - c;
                            if (b < g) {
                                a.preventDefault();
                                this.trigger("tap");
                            }
                        }
                    });
                };
                a.enableTouchActivity = function c() {
                    if (!this.player() || !this.player().reportUserActivity) {
                        return;
                    }
                    var b = b5(this.player(), this.player().reportUserActivity);
                    var d;
                    this.on("touchstart", function() {
                        b();
                        this.clearInterval(d);
                        d = this.setInterval(b, 250);
                    });
                    var a = function a(c) {
                        b();
                        this.clearInterval(d);
                    };
                    this.on("touchmove", b);
                    this.on("touchend", a);
                    this.on("touchcancel", a);
                };
                a.setTimeout = function d(b, c) {
                    var e = this;
                    var a;
                    b = b5(this, b);
                    this.clearTimersOnDispose_();
                    a = f().setTimeout(function() {
                        if (e.setTimeoutIds_.has(a)) {
                            e.setTimeoutIds_["delete"](a);
                        }
                        b();
                    }, c);
                    this.setTimeoutIds_.add(a);
                    return a;
                };
                a.clearTimeout = function b(a) {
                    if (this.setTimeoutIds_.has(a)) {
                        this.setTimeoutIds_["delete"](a);
                        f().clearTimeout(a);
                    }
                    return a;
                };
                a.setInterval = function d(a, c) {
                    a = b5(this, a);
                    this.clearTimersOnDispose_();
                    var b = f().setInterval(a, c);
                    this.setIntervalIds_.add(b);
                    return b;
                };
                a.clearInterval = function b(a) {
                    if (this.setIntervalIds_.has(a)) {
                        this.setIntervalIds_["delete"](a);
                        f().clearInterval(a);
                    }
                    return a;
                };
                a.requestAnimationFrame = function c(a) {
                    var d = this;
                    if (!this.supportsRaf_) {
                        return this.setTimeout(a, 1000 / 60);
                    }
                    this.clearTimersOnDispose_();
                    var b;
                    a = b5(this, a);
                    b = f().requestAnimationFrame(function() {
                        if (d.rafIds_.has(b)) {
                            d.rafIds_["delete"](b);
                        }
                        a();
                    });
                    this.rafIds_.add(b);
                    return b;
                };
                a.requestNamedAnimationFrame = function d(a, b) {
                    var e = this;
                    if (this.namedRafs_.has(a)) {
                        return;
                    }
                    this.clearTimersOnDispose_();
                    b = b5(this, b);
                    var c = this.requestAnimationFrame(function() {
                        b();
                        if (e.namedRafs_.has(a)) {
                            e.namedRafs_["delete"](a);
                        }
                    });
                    this.namedRafs_.set(a, c);
                    return a;
                };
                a.cancelNamedAnimationFrame = function b(a) {
                    if (!this.namedRafs_.has(a)) {
                        return;
                    }
                    this.cancelAnimationFrame(this.namedRafs_.get(a));
                    this.namedRafs_["delete"](a);
                };
                a.cancelAnimationFrame = function b(a) {
                    if (!this.supportsRaf_) {
                        return this.clearTimeout(a);
                    }
                    if (this.rafIds_.has(a)) {
                        this.rafIds_["delete"](a);
                        f().cancelAnimationFrame(a);
                    }
                    return a;
                };
                a.clearTimersOnDispose_ = function a() {
                    var b = this;
                    if (this.clearingTimersOnDispose_) {
                        return;
                    }
                    this.clearingTimersOnDispose_ = true;
                    this.one("dispose", function() {
                        [
                            [
                                "namedRafs_",
                                "cancelNamedAnimationFrame"
                            ],
                            [
                                "rafIds_",
                                "cancelAnimationFrame"
                            ],
                            [
                                "setTimeoutIds_",
                                "clearTimeout"
                            ],
                            [
                                "setIntervalIds_",
                                "clearInterval"
                            ], 
                        ].forEach(function(a) {
                            var c = a[0], d = a[1];
                            b[c].forEach(function(c, a) {
                                return b[d](a);
                            });
                        });
                        b.clearingTimersOnDispose_ = false;
                    });
                };
                b.registerComponent = function k(a, c) {
                    if (typeof a !== "string" || !a) {
                        throw new Error('Illegal component name, "' + a + '"; must be a non-empty string.');
                    }
                    var f = b.getComponent("Tech");
                    var g = f && f.isTech(c);
                    var j = b === c || b.prototype.isPrototypeOf(c.prototype);
                    if (g || !j) {
                        var d;
                        if (g) {
                            d = "techs must be registered using Tech.registerTech()";
                        } else {
                            d = "must be a Component subclass";
                        }
                        throw new Error('Illegal component, "' + a + '"; ' + d + ".");
                    }
                    a = ey(a);
                    if (!b.components_) {
                        b.components_ = {};
                    }
                    var e = b.getComponent("Player");
                    if (a === "Player" && e && e.players) {
                        var h = e.players;
                        var i = Object.keys(h);
                        if (h && i.length > 0 && i.map(function(a) {
                            return h[a];
                        }).every(Boolean)) {
                            throw new Error("Can not register Player component after player has been created.");
                        }
                    }
                    b.components_[a] = c;
                    b.components_[ex(a)] = c;
                    return c;
                };
                b.getComponent = function c(a) {
                    if (!a || !b.components_) {
                        return;
                    }
                    return b.components_[a];
                };
                return b;
            })();
            a.prototype.supportsRaf_ = typeof f().requestAnimationFrame === "function" && typeof f().cancelAnimationFrame === "function";
            a.registerComponent("Component", a);
            function eC(c, a, b) {
                if (typeof a !== "number" || a < 0 || a > b) {
                    throw new Error("Failed to execute '" + c + "' on 'TimeRanges': The index provided (" + a + ") is non-numeric or out of bounds (0-" + b + ").");
                }
            }
            function eD(c, d, a, b) {
                eC(c, b, a.length - 1);
                return a[b][d];
            }
            function eE(a) {
                var b;
                if (a === undefined || a.length === 0) {
                    b = {
                        length: 0,
                        start: function a() {
                            throw new Error("This TimeRanges object is empty");
                        },
                        end: function a() {
                            throw new Error("This TimeRanges object is empty");
                        }
                    };
                } else {
                    b = {
                        length: a.length,
                        start: eD.bind(null, "start", 0, a),
                        end: eD.bind(null, "end", 1, a)
                    };
                }
                if (f().Symbol && f().Symbol.iterator) {
                    b[f().Symbol.iterator] = function() {
                        return (a || []).values();
                    };
                }
                return b;
            }
            function b9(a, b) {
                if (Array.isArray(a)) {
                    return eE(a);
                } else if (a === undefined || b === undefined) {
                    return eE();
                }
                return eE([
                    [
                        a,
                        b
                    ]
                ]);
            }
            function eF(a, b) {
                var e = 0;
                var f;
                var c;
                if (!b) {
                    return 0;
                }
                if (!a || !a.length) {
                    a = b9(0, 0);
                }
                for(var d = 0; d < a.length; d++){
                    f = a.start(d);
                    c = a.end(d);
                    if (c > b) {
                        c = b;
                    }
                    e += c - f;
                }
                return e / b;
            }
            function i(a) {
                if (a instanceof i) {
                    return a;
                }
                if (typeof a === "number") {
                    this.code = a;
                } else if (typeof a === "string") {
                    this.message = a;
                } else if (d_(a)) {
                    if (typeof a.code === "number") {
                        this.code = a.code;
                    }
                    d$(this, a);
                }
                if (!this.message) {
                    this.message = i.defaultMessages[this.code] || "";
                }
            }
            i.prototype.code = 0;
            i.prototype.message = "";
            i.prototype.status = null;
            i.errorTypes = [
                "MEDIA_ERR_CUSTOM",
                "MEDIA_ERR_ABORTED",
                "MEDIA_ERR_NETWORK",
                "MEDIA_ERR_DECODE",
                "MEDIA_ERR_SRC_NOT_SUPPORTED",
                "MEDIA_ERR_ENCRYPTED", 
            ];
            i.defaultMessages = {
                1: "You aborted the media playback",
                2: "A network error caused the media download to fail part-way.",
                3: "The media playback was aborted due to a corruption problem or because the media used features your browser did not support.",
                4: "The media could not be loaded, either because the server or network failed or because the format is not supported.",
                5: "The media is encrypted and we do not have the keys to decrypt it."
            };
            for(var p = 0; p < i.errorTypes.length; p++){
                i[i.errorTypes[p]] = p;
                i.prototype[i.errorTypes[p]] = p;
            }
            function eG(a) {
                return (a !== undefined && a !== null && typeof a.then === "function");
            }
            function eH(a) {
                if (eG(a)) {
                    a.then(null, function(a) {});
                }
            }
            var ca = function c(a) {
                var b = [
                    "kind",
                    "label",
                    "language",
                    "id",
                    "inBandMetadataTrackDispatchType",
                    "mode",
                    "src", 
                ].reduce(function(c, b, d) {
                    if (a[b]) {
                        c[b] = a[b];
                    }
                    return c;
                }, {
                    cues: a.cues && Array.prototype.map.call(a.cues, function(a) {
                        return {
                            startTime: a.startTime,
                            endTime: a.endTime,
                            text: a.text,
                            id: a.id
                        };
                    })
                });
                return b;
            };
            var cb = function d(a) {
                var b = a.$$("track");
                var e = Array.prototype.map.call(b, function(a) {
                    return a.track;
                });
                var c = Array.prototype.map.call(b, function(a) {
                    var b = ca(a.track);
                    if (a.src) {
                        b.src = a.src;
                    }
                    return b;
                });
                return c.concat(Array.prototype.filter.call(a.textTracks(), function(a) {
                    return e.indexOf(a) === -1;
                }).map(ca));
            };
            var cc = function c(a, b) {
                a.forEach(function(a) {
                    var c = b.addRemoteTextTrack(a).track;
                    if (!a.src && a.cues) {
                        a.cues.forEach(function(a) {
                            return c.addCue(a);
                        });
                    }
                });
                return b.textTracks();
            };
            var eI = {
                textTracksToJson: cb,
                jsonToTextTracks: cc,
                trackToJson_: ca
            };
            var eJ = "vjs-modal-dialog";
            var v = (function(c) {
                (0, dF.Z)(b, c);
                function b(b, d) {
                    var a;
                    a = c.call(this, b, d) || this;
                    a.handleKeyDown_ = function(b) {
                        return a.handleKeyDown(b);
                    };
                    a.close_ = function(b) {
                        return a.close(b);
                    };
                    a.opened_ = a.hasBeenOpened_ = a.hasBeenFilled_ = false;
                    a.closeable(!a.options_.uncloseable);
                    a.content(a.options_.content);
                    a.contentEl_ = bC("div", {
                        className: eJ + "-content"
                    }, {
                        role: "document"
                    });
                    a.descEl_ = bC("p", {
                        className: eJ + "-description vjs-control-text",
                        id: a.el().getAttribute("aria-describedby")
                    });
                    bD(a.descEl_, a.description());
                    a.el_.appendChild(a.descEl_);
                    a.el_.appendChild(a.contentEl_);
                    return a;
                }
                var a = b.prototype;
                a.createEl = function a() {
                    return c.prototype.createEl.call(this, "div", {
                        className: this.buildCSSClass(),
                        tabIndex: -1
                    }, {
                        "aria-describedby": this.id() + "_description",
                        "aria-hidden": "true",
                        "aria-label": this.label(),
                        role: "dialog"
                    });
                };
                a.dispose = function a() {
                    this.contentEl_ = null;
                    this.descEl_ = null;
                    this.previouslyActiveEl_ = null;
                    c.prototype.dispose.call(this);
                };
                a.buildCSSClass = function a() {
                    return (eJ + " vjs-hidden " + c.prototype.buildCSSClass.call(this));
                };
                a.label = function a() {
                    return this.localize(this.options_.label || "Modal Window");
                };
                a.description = function b() {
                    var a = this.options_.description || this.localize("This is a modal window.");
                    if (this.closeable()) {
                        a += " " + this.localize("This modal can be closed by pressing the Escape key or activating the close button.");
                    }
                    return a;
                };
                a.open = function b() {
                    if (!this.opened_) {
                        var a = this.player();
                        this.trigger("beforemodalopen");
                        this.opened_ = true;
                        if (this.options_.fillAlways || (!this.hasBeenOpened_ && !this.hasBeenFilled_)) {
                            this.fill();
                        }
                        this.wasPlaying_ = !a.paused();
                        if (this.options_.pauseOnOpen && this.wasPlaying_) {
                            a.pause();
                        }
                        this.on("keydown", this.handleKeyDown_);
                        this.hadControls_ = a.controls();
                        a.controls(false);
                        this.show();
                        this.conditionalFocus_();
                        this.el().setAttribute("aria-hidden", "false");
                        this.trigger("modalopen");
                        this.hasBeenOpened_ = true;
                    }
                };
                a.opened = function b(a) {
                    if (typeof a === "boolean") {
                        this[a ? "open" : "close"]();
                    }
                    return this.opened_;
                };
                a.close = function b() {
                    if (!this.opened_) {
                        return;
                    }
                    var a = this.player();
                    this.trigger("beforemodalclose");
                    this.opened_ = false;
                    if (this.wasPlaying_ && this.options_.pauseOnOpen) {
                        a.play();
                    }
                    this.off("keydown", this.handleKeyDown_);
                    if (this.hadControls_) {
                        a.controls(true);
                    }
                    this.hide();
                    this.el().setAttribute("aria-hidden", "true");
                    this.trigger("modalclose");
                    this.conditionalBlur_();
                    if (this.options_.temporary) {
                        this.dispose();
                    }
                };
                a.closeable = function b(c) {
                    if (typeof c === "boolean") {
                        var b = (this.closeable_ = !!c);
                        var a = this.getChild("closeButton");
                        if (b && !a) {
                            var d = this.contentEl_;
                            this.contentEl_ = this.el_;
                            a = this.addChild("closeButton", {
                                controlText: "Close Modal Dialog"
                            });
                            this.contentEl_ = d;
                            this.on(a, "close", this.close_);
                        }
                        if (!b && a) {
                            this.off(a, "close", this.close_);
                            this.removeChild(a);
                            a.dispose();
                        }
                    }
                    return this.closeable_;
                };
                a.fill = function a() {
                    this.fillWith(this.content());
                };
                a.fillWith = function f(e) {
                    var a = this.contentEl();
                    var b = a.parentNode;
                    var c = a.nextSibling;
                    this.trigger("beforemodalfill");
                    this.hasBeenFilled_ = true;
                    b.removeChild(a);
                    this.empty();
                    bX(a, e);
                    this.trigger("modalfill");
                    if (c) {
                        b.insertBefore(a, c);
                    } else {
                        b.appendChild(a);
                    }
                    var d = this.getChild("closeButton");
                    if (d) {
                        b.appendChild(d.el_);
                    }
                };
                a.empty = function a() {
                    this.trigger("beforemodalempty");
                    bU(this.contentEl());
                    this.trigger("modalempty");
                };
                a.content = function b(a) {
                    if (typeof a !== "undefined") {
                        this.content_ = a;
                    }
                    return this.content_;
                };
                a.conditionalFocus_ = function c() {
                    var a = J().activeElement;
                    var b = this.player_.el_;
                    this.previouslyActiveEl_ = null;
                    if (b.contains(a) || b === a) {
                        this.previouslyActiveEl_ = a;
                        this.focus();
                    }
                };
                a.conditionalBlur_ = function a() {
                    if (this.previouslyActiveEl_) {
                        this.previouslyActiveEl_.focus();
                        this.previouslyActiveEl_ = null;
                    }
                };
                a.handleKeyDown = function f(a) {
                    a.stopPropagation();
                    if (dH().isEventKey(a, "Escape") && this.closeable()) {
                        a.preventDefault();
                        this.close();
                        return;
                    }
                    if (!dH().isEventKey(a, "Tab")) {
                        return;
                    }
                    var b = this.focusableEls_();
                    var e = this.el_.querySelector(":focus");
                    var c;
                    for(var d = 0; d < b.length; d++){
                        if (e === b[d]) {
                            c = d;
                            break;
                        }
                    }
                    if (J().activeElement === this.el_) {
                        c = 0;
                    }
                    if (a.shiftKey && c === 0) {
                        b[b.length - 1].focus();
                        a.preventDefault();
                    } else if (!a.shiftKey && c === b.length - 1) {
                        b[0].focus();
                        a.preventDefault();
                    }
                };
                a.focusableEls_ = function b() {
                    var a = this.el_.querySelectorAll("*");
                    return Array.prototype.filter.call(a, function(a) {
                        return (((a instanceof f().HTMLAnchorElement || a instanceof f().HTMLAreaElement) && a.hasAttribute("href")) || ((a instanceof f().HTMLInputElement || a instanceof f().HTMLSelectElement || a instanceof f().HTMLTextAreaElement || a instanceof f().HTMLButtonElement) && !a.hasAttribute("disabled")) || a instanceof f().HTMLIFrameElement || a instanceof f().HTMLObjectElement || a instanceof f().HTMLEmbedElement || (a.hasAttribute("tabindex") && a.getAttribute("tabindex") !== -1) || a.hasAttribute("contenteditable"));
                    });
                };
                return b;
            })(a);
            v.prototype.options_ = {
                pauseOnOpen: true,
                temporary: true
            };
            a.registerComponent("ModalDialog", v);
            var q = (function(c) {
                (0, dF.Z)(b, c);
                function b(b) {
                    var a;
                    if (b === void 0) {
                        b = [];
                    }
                    a = c.call(this) || this;
                    a.tracks_ = [];
                    Object.defineProperty((0, dE.Z)(a), "length", {
                        get: function a() {
                            return this.tracks_.length;
                        }
                    });
                    for(var d = 0; d < b.length; d++){
                        a.addTrack(b[d]);
                    }
                    return a;
                }
                var a = b.prototype;
                a.addTrack = function c(a) {
                    var d = this;
                    var b = this.tracks_.length;
                    if (!("" + b in this)) {
                        Object.defineProperty(this, b, {
                            get: function a() {
                                return this.tracks_[b];
                            }
                        });
                    }
                    if (this.tracks_.indexOf(a) === -1) {
                        this.tracks_.push(a);
                        this.trigger({
                            track: a,
                            type: "addtrack",
                            target: this
                        });
                    }
                    a.labelchange_ = function() {
                        d.trigger({
                            track: a,
                            type: "labelchange",
                            target: d
                        });
                    };
                    if (el(a)) {
                        a.addEventListener("labelchange", a.labelchange_);
                    }
                };
                a.removeTrack = function e(c) {
                    var a;
                    for(var b = 0, d = this.length; b < d; b++){
                        if (this[b] === c) {
                            a = this[b];
                            if (a.off) {
                                a.off();
                            }
                            this.tracks_.splice(b, 1);
                            break;
                        }
                    }
                    if (!a) {
                        return;
                    }
                    this.trigger({
                        track: a,
                        type: "removetrack",
                        target: this
                    });
                };
                a.getTrackById = function f(d) {
                    var b = null;
                    for(var a = 0, e = this.length; a < e; a++){
                        var c = this[a];
                        if (c.id === d) {
                            b = c;
                            break;
                        }
                    }
                    return b;
                };
                return b;
            })(g);
            q.prototype.allowedEvents_ = {
                change: "change",
                addtrack: "addtrack",
                removetrack: "removetrack",
                labelchange: "labelchange"
            };
            for(var cd in q.prototype.allowedEvents_){
                q.prototype["on" + cd] = null;
            }
            var eK = function d(b, c) {
                for(var a = 0; a < b.length; a++){
                    if (!Object.keys(b[a]).length || c.id === b[a].id) {
                        continue;
                    }
                    b[a].enabled = false;
                }
            };
            var ce = (function(c) {
                (0, dF.Z)(a, c);
                function a(a) {
                    var d;
                    if (a === void 0) {
                        a = [];
                    }
                    for(var b = a.length - 1; b >= 0; b--){
                        if (a[b].enabled) {
                            eK(a, a[b]);
                            break;
                        }
                    }
                    d = c.call(this, a) || this;
                    d.changing_ = false;
                    return d;
                }
                var b = a.prototype;
                b.addTrack = function b(a) {
                    var d = this;
                    if (a.enabled) {
                        eK(this, a);
                    }
                    c.prototype.addTrack.call(this, a);
                    if (!a.addEventListener) {
                        return;
                    }
                    a.enabledChange_ = function() {
                        if (d.changing_) {
                            return;
                        }
                        d.changing_ = true;
                        eK(d, a);
                        d.changing_ = false;
                        d.trigger("change");
                    };
                    a.addEventListener("enabledchange", a.enabledChange_);
                };
                b.removeTrack = function b(a) {
                    c.prototype.removeTrack.call(this, a);
                    if (a.removeEventListener && a.enabledChange_) {
                        a.removeEventListener("enabledchange", a.enabledChange_);
                        a.enabledChange_ = null;
                    }
                };
                return a;
            })(q);
            var eL = function d(b, c) {
                for(var a = 0; a < b.length; a++){
                    if (!Object.keys(b[a]).length || c.id === b[a].id) {
                        continue;
                    }
                    b[a].selected = false;
                }
            };
            var cf = (function(c) {
                (0, dF.Z)(a, c);
                function a(a) {
                    var b;
                    if (a === void 0) {
                        a = [];
                    }
                    for(var d = a.length - 1; d >= 0; d--){
                        if (a[d].selected) {
                            eL(a, a[d]);
                            break;
                        }
                    }
                    b = c.call(this, a) || this;
                    b.changing_ = false;
                    Object.defineProperty((0, dE.Z)(b), "selectedIndex", {
                        get: function b() {
                            for(var a = 0; a < this.length; a++){
                                if (this[a].selected) {
                                    return a;
                                }
                            }
                            return -1;
                        },
                        set: function a() {}
                    });
                    return b;
                }
                var b = a.prototype;
                b.addTrack = function b(a) {
                    var d = this;
                    if (a.selected) {
                        eL(this, a);
                    }
                    c.prototype.addTrack.call(this, a);
                    if (!a.addEventListener) {
                        return;
                    }
                    a.selectedChange_ = function() {
                        if (d.changing_) {
                            return;
                        }
                        d.changing_ = true;
                        eL(d, a);
                        d.changing_ = false;
                        d.trigger("change");
                    };
                    a.addEventListener("selectedchange", a.selectedChange_);
                };
                b.removeTrack = function b(a) {
                    c.prototype.removeTrack.call(this, a);
                    if (a.removeEventListener && a.selectedChange_) {
                        a.removeEventListener("selectedchange", a.selectedChange_);
                        a.selectedChange_ = null;
                    }
                };
                return a;
            })(q);
            var aw = (function(c) {
                (0, dF.Z)(a, c);
                function a() {
                    return c.apply(this, arguments) || this;
                }
                var b = a.prototype;
                b.addTrack = function d(a) {
                    var e = this;
                    c.prototype.addTrack.call(this, a);
                    if (!this.queueChange_) {
                        this.queueChange_ = function() {
                            return e.queueTrigger("change");
                        };
                    }
                    if (!this.triggerSelectedlanguagechange) {
                        this.triggerSelectedlanguagechange_ = function() {
                            return e.trigger("selectedlanguagechange");
                        };
                    }
                    a.addEventListener("modechange", this.queueChange_);
                    var b = [
                        "metadata",
                        "chapters"
                    ];
                    if (b.indexOf(a.kind) === -1) {
                        a.addEventListener("modechange", this.triggerSelectedlanguagechange_);
                    }
                };
                b.removeTrack = function b(a) {
                    c.prototype.removeTrack.call(this, a);
                    if (a.removeEventListener) {
                        if (this.queueChange_) {
                            a.removeEventListener("modechange", this.queueChange_);
                        }
                        if (this.selectedlanguagechange_) {
                            a.removeEventListener("modechange", this.triggerSelectedlanguagechange_);
                        }
                    }
                };
                return a;
            })(q);
            var cg = (function() {
                function b(a) {
                    if (a === void 0) {
                        a = [];
                    }
                    this.trackElements_ = [];
                    Object.defineProperty(this, "length", {
                        get: function a() {
                            return this.trackElements_.length;
                        }
                    });
                    for(var b = 0, c = a.length; b < c; b++){
                        this.addTrackElement_(a[b]);
                    }
                }
                var a = b.prototype;
                a.addTrackElement_ = function c(a) {
                    var b = this.trackElements_.length;
                    if (!("" + b in this)) {
                        Object.defineProperty(this, b, {
                            get: function a() {
                                return this.trackElements_[b];
                            }
                        });
                    }
                    if (this.trackElements_.indexOf(a) === -1) {
                        this.trackElements_.push(a);
                    }
                };
                a.getTrackElementByTrack_ = function e(c) {
                    var b;
                    for(var a = 0, d = this.trackElements_.length; a < d; a++){
                        if (c === this.trackElements_[a].track) {
                            b = this.trackElements_[a];
                            break;
                        }
                    }
                    return b;
                };
                a.removeTrackElement_ = function d(b) {
                    for(var a = 0, c = this.trackElements_.length; a < c; a++){
                        if (b === this.trackElements_[a]) {
                            if (this.trackElements_[a].track && typeof this.trackElements_[a].track.off === "function") {
                                this.trackElements_[a].track.off();
                            }
                            if (typeof this.trackElements_[a].off === "function") {
                                this.trackElements_[a].off();
                            }
                            this.trackElements_.splice(a, 1);
                            break;
                        }
                    }
                };
                return b;
            })();
            var eM = (function() {
                function a(b) {
                    a.prototype.setCues_.call(this, b);
                    Object.defineProperty(this, "length", {
                        get: function a() {
                            return this.length_;
                        }
                    });
                }
                var b = a.prototype;
                b.setCues_ = function f(b) {
                    var c = this.length || 0;
                    var a = 0;
                    var d = b.length;
                    this.cues_ = b;
                    this.length_ = b.length;
                    var e = function b(a) {
                        if (!("" + a in this)) {
                            Object.defineProperty(this, "" + a, {
                                get: function b() {
                                    return this.cues_[a];
                                }
                            });
                        }
                    };
                    if (c < d) {
                        a = c;
                        for(; a < d; a++){
                            e.call(this, a);
                        }
                    }
                };
                b.getCueById = function f(d) {
                    var b = null;
                    for(var a = 0, e = this.length; a < e; a++){
                        var c = this[a];
                        if (c.id === d) {
                            b = c;
                            break;
                        }
                    }
                    return b;
                };
                return a;
            })();
            var eN = {
                alternative: "alternative",
                captions: "captions",
                main: "main",
                sign: "sign",
                subtitles: "subtitles",
                commentary: "commentary"
            };
            var eO = {
                alternative: "alternative",
                descriptions: "descriptions",
                main: "main",
                "main-desc": "main-desc",
                translation: "translation",
                commentary: "commentary"
            };
            var eP = {
                subtitles: "subtitles",
                captions: "captions",
                descriptions: "descriptions",
                chapters: "chapters",
                metadata: "metadata"
            };
            var eQ = {
                disabled: "disabled",
                hidden: "hidden",
                showing: "showing"
            };
            var R = (function(a) {
                (0, dF.Z)(b, a);
                function b(b) {
                    var c;
                    if (b === void 0) {
                        b = {};
                    }
                    c = a.call(this) || this;
                    var d = {
                        id: b.id || "vjs_track_" + d8(),
                        kind: b.kind || "",
                        language: b.language || ""
                    };
                    var g = b.label || "";
                    var e = function b(a) {
                        Object.defineProperty((0, dE.Z)(c), a, {
                            get: function b() {
                                return d[a];
                            },
                            set: function a() {}
                        });
                    };
                    for(var f in d){
                        e(f);
                    }
                    Object.defineProperty((0, dE.Z)(c), "label", {
                        get: function a() {
                            return g;
                        },
                        set: function b(a) {
                            if (a !== g) {
                                g = a;
                                this.trigger("labelchange");
                            }
                        }
                    });
                    return c;
                }
                return b;
            })(g);
            var ax = function g(e) {
                var c = [
                    "protocol",
                    "hostname",
                    "port",
                    "pathname",
                    "search",
                    "hash",
                    "host", 
                ];
                var d = J().createElement("a");
                d.href = e;
                var a = {};
                for(var b = 0; b < c.length; b++){
                    a[c[b]] = d[c[b]];
                }
                if (a.protocol === "http:") {
                    a.host = a.host.replace(/:80$/, "");
                }
                if (a.protocol === "https:") {
                    a.host = a.host.replace(/:443$/, "");
                }
                if (!a.protocol) {
                    a.protocol = f().location.protocol;
                }
                if (!a.host) {
                    a.host = f().location.host;
                }
                return a;
            };
            var ch = function c(a) {
                if (!a.match(/^https?:\/\//)) {
                    var b = J().createElement("a");
                    b.href = a;
                    a = b.href;
                }
                return a;
            };
            var ci = function d(a) {
                if (typeof a === "string") {
                    var c = /^(\/?)([\s\S]*?)((?:\.{1,2}|[^\/]+?)(\.([^\.\/\?]+)))(?:[\/]*|[\?].*)$/;
                    var b = c.exec(a);
                    if (b) {
                        return b.pop().toLowerCase();
                    }
                }
                return "";
            };
            var ay = function g(c, a) {
                if (a === void 0) {
                    a = f().location;
                }
                var b = ax(c);
                var d = b.protocol === ":" ? a.protocol : b.protocol;
                var e = d + b.host !== a.protocol + a.host;
                return e;
            };
            var cj = Object.freeze({
                __proto__: null,
                parseUrl: ax,
                getAbsoluteURL: ch,
                getFileExtension: ci,
                isCrossOrigin: ay
            });
            var eR = function e(c, d) {
                var a = new (f().WebVTT.Parser)(f(), f().vttjs, f().WebVTT.StringDecoder());
                var b = [];
                a.oncue = function(a) {
                    d.addCue(a);
                };
                a.onparsingerror = function(a) {
                    b.push(a);
                };
                a.onflush = function() {
                    d.trigger({
                        type: "loadeddata",
                        target: d
                    });
                };
                a.parse(c);
                if (b.length > 0) {
                    if (f().console && f().console.groupCollapsed) {
                        f().console.groupCollapsed("Text Track parsing errors for " + d.src);
                    }
                    b.forEach(function(a) {
                        return ak.error(a);
                    });
                    if (f().console && f().console.groupEnd) {
                        f().console.groupEnd();
                    }
                }
                a.flush();
            };
            var eS = function g(b, e) {
                var a = {
                    uri: b
                };
                var c = ay(b);
                if (c) {
                    a.cors = c;
                }
                var d = e.tech_.crossOrigin() === "use-credentials";
                if (d) {
                    a.withCredentials = d;
                }
                bd()(a, b5(this, function(a, b, c) {
                    if (a) {
                        return ak.error(a, b);
                    }
                    e.loaded_ = true;
                    if (typeof f().WebVTT !== "function") {
                        if (e.tech_) {
                            e.tech_.any([
                                "vttjsloaded",
                                "vttjserror"
                            ], function(a) {
                                if (a.type === "vttjserror") {
                                    ak.error("vttjs failed to load, stopping trying to process " + e.src);
                                    return;
                                }
                                return eR(c, e);
                            });
                        }
                    } else {
                        eR(c, e);
                    }
                }));
            };
            var C = (function(c) {
                (0, dF.Z)(a, c);
                function a(d) {
                    var a;
                    if (d === void 0) {
                        d = {};
                    }
                    if (!d.tech) {
                        throw new Error("A tech was not provided.");
                    }
                    var b = b6(d, {
                        kind: eP[d.kind] || "subtitles",
                        language: d.language || d.srclang || ""
                    });
                    var e = eQ[b.mode] || "disabled";
                    var h = b["default"];
                    if (b.kind === "metadata" || b.kind === "chapters") {
                        e = "hidden";
                    }
                    a = c.call(this, b) || this;
                    a.tech_ = b.tech;
                    a.cues_ = [];
                    a.activeCues_ = [];
                    a.preload_ = a.tech_.preloadTextTracks !== false;
                    var i = new eM(a.cues_);
                    var j = new eM(a.activeCues_);
                    var k = false;
                    var f = b5((0, dE.Z)(a), function() {
                        if (!this.tech_.isReady_ || this.tech_.isDisposed()) {
                            return;
                        }
                        this.activeCues = this.activeCues;
                        if (k) {
                            this.trigger("cuechange");
                            k = false;
                        }
                    });
                    var g = function b() {
                        a.tech_.off("timeupdate", f);
                    };
                    a.tech_.one("dispose", g);
                    if (e !== "disabled") {
                        a.tech_.on("timeupdate", f);
                    }
                    Object.defineProperties((0, dE.Z)(a), {
                        default: {
                            get: function a() {
                                return h;
                            },
                            set: function a() {}
                        },
                        mode: {
                            get: function a() {
                                return e;
                            },
                            set: function b(a) {
                                if (!eQ[a]) {
                                    return;
                                }
                                if (e === a) {
                                    return;
                                }
                                e = a;
                                if (!this.preload_ && e !== "disabled" && this.cues.length === 0) {
                                    eS(this.src, this);
                                }
                                this.tech_.off("timeupdate", f);
                                if (e !== "disabled") {
                                    this.tech_.on("timeupdate", f);
                                }
                                this.trigger("modechange");
                            }
                        },
                        cues: {
                            get: function a() {
                                if (!this.loaded_) {
                                    return null;
                                }
                                return i;
                            },
                            set: function a() {}
                        },
                        activeCues: {
                            get: function g() {
                                if (!this.loaded_) {
                                    return null;
                                }
                                if (this.cues.length === 0) {
                                    return j;
                                }
                                var c = this.tech_.currentTime();
                                var b = [];
                                for(var d = 0, f = this.cues.length; d < f; d++){
                                    var a = this.cues[d];
                                    if (a.startTime <= c && a.endTime >= c) {
                                        b.push(a);
                                    } else if (a.startTime === a.endTime && a.startTime <= c && a.startTime + 0.5 >= c) {
                                        b.push(a);
                                    }
                                }
                                k = false;
                                if (b.length !== this.activeCues_.length) {
                                    k = true;
                                } else {
                                    for(var e = 0; e < b.length; e++){
                                        if (this.activeCues_.indexOf(b[e]) === -1) {
                                            k = true;
                                        }
                                    }
                                }
                                this.activeCues_ = b;
                                j.setCues_(this.activeCues_);
                                return j;
                            },
                            set: function a() {}
                        }
                    });
                    if (b.src) {
                        a.src = b.src;
                        if (!a.preload_) {
                            a.loaded_ = true;
                        }
                        if (a.preload_ || (b.kind !== "subtitles" && b.kind !== "captions")) {
                            eS(a.src, (0, dE.Z)(a));
                        }
                    } else {
                        a.loaded_ = true;
                    }
                    return a;
                }
                var b = a.prototype;
                b.addCue = function g(a) {
                    var b = a;
                    if (f().vttjs && !(a instanceof f().vttjs.VTTCue)) {
                        b = new (f().vttjs.VTTCue)(a.startTime, a.endTime, a.text);
                        for(var d in a){
                            if (!(d in b)) {
                                b[d] = a[d];
                            }
                        }
                        b.id = a.id;
                        b.originalCue_ = a;
                    }
                    var e = this.tech_.textTracks();
                    for(var c = 0; c < e.length; c++){
                        if (e[c] !== this) {
                            e[c].removeCue(b);
                        }
                    }
                    this.cues_.push(b);
                    this.cues.setCues_(this.cues_);
                };
                b.removeCue = function d(c) {
                    var a = this.cues_.length;
                    while(a--){
                        var b = this.cues_[a];
                        if (b === c || (b.originalCue_ && b.originalCue_ === c)) {
                            this.cues_.splice(a, 1);
                            this.cues.setCues_(this.cues_);
                            break;
                        }
                    }
                };
                return a;
            })(R);
            C.prototype.allowedEvents_ = {
                cuechange: "cuechange"
            };
            var az = (function(a) {
                (0, dF.Z)(b, a);
                function b(c) {
                    var b;
                    if (c === void 0) {
                        c = {};
                    }
                    var d = b6(c, {
                        kind: eO[c.kind] || ""
                    });
                    b = a.call(this, d) || this;
                    var e = false;
                    Object.defineProperty((0, dE.Z)(b), "enabled", {
                        get: function a() {
                            return e;
                        },
                        set: function b(a) {
                            if (typeof a !== "boolean" || a === e) {
                                return;
                            }
                            e = a;
                            this.trigger("enabledchange");
                        }
                    });
                    if (d.enabled) {
                        b.enabled = d.enabled;
                    }
                    b.loaded_ = true;
                    return b;
                }
                return b;
            })(R);
            var aA = (function(a) {
                (0, dF.Z)(b, a);
                function b(b) {
                    var c;
                    if (b === void 0) {
                        b = {};
                    }
                    var d = b6(b, {
                        kind: eN[b.kind] || ""
                    });
                    c = a.call(this, d) || this;
                    var e = false;
                    Object.defineProperty((0, dE.Z)(c), "selected", {
                        get: function a() {
                            return e;
                        },
                        set: function b(a) {
                            if (typeof a !== "boolean" || a === e) {
                                return;
                            }
                            e = a;
                            this.trigger("selectedchange");
                        }
                    });
                    if (d.selected) {
                        c.selected = d.selected;
                    }
                    return c;
                }
                return b;
            })(R);
            var ck = 0;
            var cl = 1;
            var cm = 2;
            var cn = 3;
            var r = (function(a) {
                (0, dF.Z)(b, a);
                function b(d) {
                    var b;
                    if (d === void 0) {
                        d = {};
                    }
                    b = a.call(this) || this;
                    var e;
                    var c = new C(d);
                    b.kind = c.kind;
                    b.src = c.src;
                    b.srclang = c.language;
                    b.label = c.label;
                    b["default"] = c["default"];
                    Object.defineProperties((0, dE.Z)(b), {
                        readyState: {
                            get: function a() {
                                return e;
                            }
                        },
                        track: {
                            get: function a() {
                                return c;
                            }
                        }
                    });
                    e = ck;
                    c.addEventListener("loadeddata", function() {
                        e = cm;
                        b.trigger({
                            type: "load",
                            target: (0, dE.Z)(b)
                        });
                    });
                    return b;
                }
                return b;
            })(g);
            r.prototype.allowedEvents_ = {
                load: "load"
            };
            r.NONE = ck;
            r.LOADING = cl;
            r.LOADED = cm;
            r.ERROR = cn;
            var w = {
                audio: {
                    ListClass: ce,
                    TrackClass: az,
                    capitalName: "Audio"
                },
                video: {
                    ListClass: cf,
                    TrackClass: aA,
                    capitalName: "Video"
                },
                text: {
                    ListClass: aw,
                    TrackClass: C,
                    capitalName: "Text"
                }
            };
            Object.keys(w).forEach(function(a) {
                w[a].getterName = a + "Tracks";
                w[a].privateName = a + "Tracks_";
            });
            var D = {
                remoteText: {
                    ListClass: aw,
                    TrackClass: C,
                    capitalName: "RemoteText",
                    getterName: "remoteTextTracks",
                    privateName: "remoteTextTracks_"
                },
                remoteTextEl: {
                    ListClass: cg,
                    TrackClass: r,
                    capitalName: "RemoteTextTrackEls",
                    getterName: "remoteTextTrackEls",
                    privateName: "remoteTextTrackEls_"
                }
            };
            var S = (0, ah.Z)({}, w, D);
            D.names = Object.keys(D);
            w.names = Object.keys(w);
            S.names = [].concat(D.names).concat(w.names);
            function eT(b, f, c, d, a) {
                if (a === void 0) {
                    a = {};
                }
                var g = b.textTracks();
                a.kind = f;
                if (c) {
                    a.label = c;
                }
                if (d) {
                    a.language = d;
                }
                a.tech = b;
                var e = new S.text.TrackClass(a);
                g.addTrack(e);
                return e;
            }
            var e = (function(c) {
                (0, dF.Z)(b, c);
                function b(b, d) {
                    var a;
                    if (b === void 0) {
                        b = {};
                    }
                    if (d === void 0) {
                        d = function a() {};
                    }
                    b.reportTouchActivity = false;
                    a = c.call(this, null, b, d) || this;
                    a.onDurationChange_ = function(b) {
                        return a.onDurationChange(b);
                    };
                    a.trackProgress_ = function(b) {
                        return a.trackProgress(b);
                    };
                    a.trackCurrentTime_ = function(b) {
                        return a.trackCurrentTime(b);
                    };
                    a.stopTrackingCurrentTime_ = function(b) {
                        return a.stopTrackingCurrentTime(b);
                    };
                    a.disposeSourceHandler_ = function(b) {
                        return a.disposeSourceHandler(b);
                    };
                    a.hasStarted_ = false;
                    a.on("playing", function() {
                        this.hasStarted_ = true;
                    });
                    a.on("loadstart", function() {
                        this.hasStarted_ = false;
                    });
                    S.names.forEach(function(d) {
                        var c = S[d];
                        if (b && b[c.getterName]) {
                            a[c.privateName] = b[c.getterName];
                        }
                    });
                    if (!a.featuresProgressEvents) {
                        a.manualProgressOn();
                    }
                    if (!a.featuresTimeupdateEvents) {
                        a.manualTimeUpdatesOn();
                    }
                    [
                        "Text",
                        "Audio",
                        "Video"
                    ].forEach(function(c) {
                        if (b["native" + c + "Tracks"] === false) {
                            a["featuresNative" + c + "Tracks"] = false;
                        }
                    });
                    if (b.nativeCaptions === false || b.nativeTextTracks === false) {
                        a.featuresNativeTextTracks = false;
                    } else if (b.nativeCaptions === true || b.nativeTextTracks === true) {
                        a.featuresNativeTextTracks = true;
                    }
                    if (!a.featuresNativeTextTracks) {
                        a.emulateTextTracks();
                    }
                    a.preloadTextTracks = b.preloadTextTracks !== false;
                    a.autoRemoteTextTracks_ = new S.text.ListClass();
                    a.initTrackListeners();
                    if (!b.nativeControlsForTouch) {
                        a.emitTapEvents();
                    }
                    if (a.constructor) {
                        a.name_ = a.constructor.name || "Unknown Tech";
                    }
                    return a;
                }
                var a = b.prototype;
                a.triggerSourceset = function b(a) {
                    var c = this;
                    if (!this.isReady_) {
                        this.one("ready", function() {
                            return c.setTimeout(function() {
                                return c.triggerSourceset(a);
                            }, 1);
                        });
                    }
                    this.trigger({
                        src: a,
                        type: "sourceset"
                    });
                };
                a.manualProgressOn = function a() {
                    this.on("durationchange", this.onDurationChange_);
                    this.manualProgress = true;
                    this.one("ready", this.trackProgress_);
                };
                a.manualProgressOff = function a() {
                    this.manualProgress = false;
                    this.stopTrackingProgress();
                    this.off("durationchange", this.onDurationChange_);
                };
                a.trackProgress = function a(b) {
                    this.stopTrackingProgress();
                    this.progressInterval = this.setInterval(b5(this, function() {
                        var a = this.bufferedPercent();
                        if (this.bufferedPercent_ !== a) {
                            this.trigger("progress");
                        }
                        this.bufferedPercent_ = a;
                        if (a === 1) {
                            this.stopTrackingProgress();
                        }
                    }), 500);
                };
                a.onDurationChange = function a(b) {
                    this.duration_ = this.duration();
                };
                a.buffered = function a() {
                    return b9(0, 0);
                };
                a.bufferedPercent = function a() {
                    return eF(this.buffered(), this.duration_);
                };
                a.stopTrackingProgress = function a() {
                    this.clearInterval(this.progressInterval);
                };
                a.manualTimeUpdatesOn = function a() {
                    this.manualTimeUpdates = true;
                    this.on("play", this.trackCurrentTime_);
                    this.on("pause", this.stopTrackingCurrentTime_);
                };
                a.manualTimeUpdatesOff = function a() {
                    this.manualTimeUpdates = false;
                    this.stopTrackingCurrentTime();
                    this.off("play", this.trackCurrentTime_);
                    this.off("pause", this.stopTrackingCurrentTime_);
                };
                a.trackCurrentTime = function a() {
                    if (this.currentTimeInterval) {
                        this.stopTrackingCurrentTime();
                    }
                    this.currentTimeInterval = this.setInterval(function() {
                        this.trigger({
                            type: "timeupdate",
                            target: this,
                            manuallyTriggered: true
                        });
                    }, 250);
                };
                a.stopTrackingCurrentTime = function a() {
                    this.clearInterval(this.currentTimeInterval);
                    this.trigger({
                        type: "timeupdate",
                        target: this,
                        manuallyTriggered: true
                    });
                };
                a.dispose = function a() {
                    this.clearTracks(w.names);
                    if (this.manualProgress) {
                        this.manualProgressOff();
                    }
                    if (this.manualTimeUpdates) {
                        this.manualTimeUpdatesOff();
                    }
                    c.prototype.dispose.call(this);
                };
                a.clearTracks = function b(a) {
                    var c = this;
                    a = [].concat(a);
                    a.forEach(function(b) {
                        var a = c[b + "Tracks"]() || [];
                        var d = a.length;
                        while(d--){
                            var e = a[d];
                            if (b === "text") {
                                c.removeRemoteTextTrack(e);
                            }
                            a.removeTrack(e);
                        }
                    });
                };
                a.cleanupAutoTextTracks = function d() {
                    var a = this.autoRemoteTextTracks_ || [];
                    var b = a.length;
                    while(b--){
                        var c = a[b];
                        this.removeRemoteTextTrack(c);
                    }
                };
                a.reset = function a() {};
                a.crossOrigin = function a() {};
                a.setCrossOrigin = function a() {};
                a.error = function b(a) {
                    if (a !== undefined) {
                        this.error_ = new i(a);
                        this.trigger("error");
                    }
                    return this.error_;
                };
                a.played = function a() {
                    if (this.hasStarted_) {
                        return b9(0, 0);
                    }
                    return b9();
                };
                a.play = function a() {};
                a.setScrubbing = function a() {};
                a.scrubbing = function a() {};
                a.setCurrentTime = function a() {
                    if (this.manualTimeUpdates) {
                        this.trigger({
                            type: "timeupdate",
                            target: this,
                            manuallyTriggered: true
                        });
                    }
                };
                a.initTrackListeners = function a() {
                    var b = this;
                    w.names.forEach(function(d) {
                        var e = w[d];
                        var a = function a() {
                            b.trigger(d + "trackchange");
                        };
                        var c = b[e.getterName]();
                        c.addEventListener("removetrack", a);
                        c.addEventListener("addtrack", a);
                        b.on("dispose", function() {
                            c.removeEventListener("removetrack", a);
                            c.removeEventListener("addtrack", a);
                        });
                    });
                };
                a.addWebVttScript_ = function b() {
                    var c = this;
                    if (f().WebVTT) {
                        return;
                    }
                    if (J().body.contains(this.el())) {
                        if (!this.options_["vtt.js"] && d0(dI()) && Object.keys(dI()).length > 0) {
                            this.trigger("vttjsloaded");
                            return;
                        }
                        var a = J().createElement("script");
                        a.src = this.options_["vtt.js"] || "https://vjs.zencdn.net/vttjs/0.14.1/vtt.min.js";
                        a.onload = function() {
                            c.trigger("vttjsloaded");
                        };
                        a.onerror = function() {
                            c.trigger("vttjserror");
                        };
                        this.on("dispose", function() {
                            a.onload = null;
                            a.onerror = null;
                        });
                        f().WebVTT = true;
                        this.el().parentNode.appendChild(a);
                    } else {
                        this.ready(this.addWebVttScript_);
                    }
                };
                a.emulateTextTracks = function f() {
                    var g = this;
                    var b = this.textTracks();
                    var c = this.remoteTextTracks();
                    var d = function c(a) {
                        return b.addTrack(a.track);
                    };
                    var e = function c(a) {
                        return b.removeTrack(a.track);
                    };
                    c.on("addtrack", d);
                    c.on("removetrack", e);
                    this.addWebVttScript_();
                    var h = function a() {
                        return g.trigger("texttrackchange");
                    };
                    var a = function d() {
                        h();
                        for(var a = 0; a < b.length; a++){
                            var c = b[a];
                            c.removeEventListener("cuechange", h);
                            if (c.mode === "showing") {
                                c.addEventListener("cuechange", h);
                            }
                        }
                    };
                    a();
                    b.addEventListener("change", a);
                    b.addEventListener("addtrack", a);
                    b.addEventListener("removetrack", a);
                    this.on("dispose", function() {
                        c.off("addtrack", d);
                        c.off("removetrack", e);
                        b.removeEventListener("change", a);
                        b.removeEventListener("addtrack", a);
                        b.removeEventListener("removetrack", a);
                        for(var f = 0; f < b.length; f++){
                            var g = b[f];
                            g.removeEventListener("cuechange", h);
                        }
                    });
                };
                a.addTextTrack = function d(a, b, c) {
                    if (!a) {
                        throw new Error("TextTrack kind is required but was not provided");
                    }
                    return eT(this, a, b, c);
                };
                a.createRemoteTextTrack = function c(a) {
                    var b = b6(a, {
                        tech: this
                    });
                    return new D.remoteTextEl.TrackClass(b);
                };
                a.addRemoteTextTrack = function d(b, a) {
                    var e = this;
                    if (b === void 0) {
                        b = {};
                    }
                    var c = this.createRemoteTextTrack(b);
                    if (a !== true && a !== false) {
                        ak.warn('Calling addRemoteTextTrack without explicitly setting the "manualCleanup" parameter to `true` is deprecated and default to `false` in future version of video.js');
                        a = true;
                    }
                    this.remoteTextTrackEls().addTrackElement_(c);
                    this.remoteTextTracks().addTrack(c.track);
                    if (a !== true) {
                        this.ready(function() {
                            return e.autoRemoteTextTracks_.addTrack(c.track);
                        });
                    }
                    return c;
                };
                a.removeRemoteTextTrack = function c(a) {
                    var b = this.remoteTextTrackEls().getTrackElementByTrack_(a);
                    this.remoteTextTrackEls().removeTrackElement_(b);
                    this.remoteTextTracks().removeTrack(a);
                    this.autoRemoteTextTracks_.removeTrack(a);
                };
                a.getVideoPlaybackQuality = function a() {
                    return {};
                };
                a.requestPictureInPicture = function b() {
                    var a = this.options_.Promise || f().Promise;
                    if (a) {
                        return a.reject();
                    }
                };
                a.disablePictureInPicture = function a() {
                    return true;
                };
                a.setDisablePictureInPicture = function a() {};
                a.setPoster = function a() {};
                a.playsinline = function a() {};
                a.setPlaysinline = function a() {};
                a.overrideNativeAudioTracks = function a() {};
                a.overrideNativeVideoTracks = function a() {};
                a.canPlayType = function a() {
                    return "";
                };
                b.canPlayType = function a() {
                    return "";
                };
                b.canPlaySource = function c(a, d) {
                    return b.canPlayType(a.type);
                };
                b.isTech = function c(a) {
                    return (a.prototype instanceof b || a instanceof b || a === b);
                };
                b.registerTech = function d(a, c) {
                    if (!b.techs_) {
                        b.techs_ = {};
                    }
                    if (!b.isTech(c)) {
                        throw new Error("Tech " + a + " must be a Tech");
                    }
                    if (!b.canPlayType) {
                        throw new Error("Techs must have a static canPlayType method on them");
                    }
                    if (!b.canPlaySource) {
                        throw new Error("Techs must have a static canPlaySource method on them");
                    }
                    a = ey(a);
                    b.techs_[a] = c;
                    b.techs_[ex(a)] = c;
                    if (a !== "Tech") {
                        b.defaultTechOrder_.push(a);
                    }
                    return c;
                };
                b.getTech = function c(a) {
                    if (!a) {
                        return;
                    }
                    if (b.techs_ && b.techs_[a]) {
                        return b.techs_[a];
                    }
                    a = ey(a);
                    if (f() && f().videojs && f().videojs[a]) {
                        ak.warn("The " + a + " tech was added to the videojs object when it should be registered using videojs.registerTech(name, tech)");
                        return f().videojs[a];
                    }
                };
                return b;
            })(a);
            S.names.forEach(function(a) {
                var b = S[a];
                e.prototype[b.getterName] = function() {
                    this[b.privateName] = this[b.privateName] || new b.ListClass();
                    return this[b.privateName];
                };
            });
            e.prototype.featuresVolumeControl = true;
            e.prototype.featuresMuteControl = true;
            e.prototype.featuresFullscreenResize = false;
            e.prototype.featuresPlaybackRate = false;
            e.prototype.featuresProgressEvents = false;
            e.prototype.featuresSourceset = false;
            e.prototype.featuresTimeupdateEvents = false;
            e.prototype.featuresNativeTextTracks = false;
            e.withSourceHandlers = function(a) {
                a.registerSourceHandler = function(d, c) {
                    var b = a.sourceHandlers;
                    if (!b) {
                        b = a.sourceHandlers = [];
                    }
                    if (c === undefined) {
                        c = b.length;
                    }
                    b.splice(c, 0, d);
                };
                a.canPlayType = function(e) {
                    var d = a.sourceHandlers || [];
                    var b;
                    for(var c = 0; c < d.length; c++){
                        b = d[c].canPlayType(e);
                        if (b) {
                            return b;
                        }
                    }
                    return "";
                };
                a.selectSourceHandler = function(e, f) {
                    var c = a.sourceHandlers || [];
                    var d;
                    for(var b = 0; b < c.length; b++){
                        d = c[b].canHandleSource(e, f);
                        if (d) {
                            return c[b];
                        }
                    }
                    return null;
                };
                a.canPlaySource = function(b, c) {
                    var d = a.selectSourceHandler(b, c);
                    if (d) {
                        return d.canHandleSource(b, c);
                    }
                    return "";
                };
                var b = [
                    "seekable",
                    "seeking",
                    "duration"
                ];
                b.forEach(function(a) {
                    var b = this[a];
                    if (typeof b !== "function") {
                        return;
                    }
                    this[a] = function() {
                        if (this.sourceHandler_ && this.sourceHandler_[a]) {
                            return this.sourceHandler_[a].apply(this.sourceHandler_, arguments);
                        }
                        return b.apply(this, arguments);
                    };
                }, a.prototype);
                a.prototype.setSource = function(c) {
                    var b = a.selectSourceHandler(c, this.options_);
                    if (!b) {
                        if (a.nativeSourceHandler) {
                            b = a.nativeSourceHandler;
                        } else {
                            ak.error("No source handler found for the current source.");
                        }
                    }
                    this.disposeSourceHandler();
                    this.off("dispose", this.disposeSourceHandler_);
                    if (b !== a.nativeSourceHandler) {
                        this.currentSource_ = c;
                    }
                    this.sourceHandler_ = b.handleSource(c, this, this.options_);
                    this.one("dispose", this.disposeSourceHandler_);
                };
                a.prototype.disposeSourceHandler = function() {
                    if (this.currentSource_) {
                        this.clearTracks([
                            "audio",
                            "video"
                        ]);
                        this.currentSource_ = null;
                    }
                    this.cleanupAutoTextTracks();
                    if (this.sourceHandler_) {
                        if (this.sourceHandler_.dispose) {
                            this.sourceHandler_.dispose();
                        }
                        this.sourceHandler_ = null;
                    }
                };
            };
            a.registerComponent("Tech", e);
            e.registerTech("Tech", e);
            e.defaultTechOrder_ = [];
            var eU = {};
            var eV = {};
            var co = {};
            function cp(a, b) {
                eU[a] = eU[a] || [];
                eU[a].push(b);
            }
            function eW(a, b, c) {
                a.setTimeout(function() {
                    return e6(b, eU[b.type], c, a);
                }, 1);
            }
            function eX(a, b) {
                a.forEach(function(a) {
                    return a.setTech && a.setTech(b);
                });
            }
            function eY(b, c, a) {
                return b.reduceRight(e2(a), c[a]());
            }
            function eZ(b, c, a, d) {
                return c[a](b.reduce(e2(a), d));
            }
            function e$(c, g, a, b) {
                if (b === void 0) {
                    b = null;
                }
                var h = "call" + ey(a);
                var d = c.reduce(e2(h), b);
                var e = d === co;
                var f = e ? null : g[a](d);
                e3(c, a, f, e);
                return f;
            }
            var e_ = {
                buffered: 1,
                currentTime: 1,
                duration: 1,
                muted: 1,
                played: 1,
                paused: 1,
                seekable: 1,
                volume: 1,
                ended: 1
            };
            var e0 = {
                setCurrentTime: 1,
                setMuted: 1,
                setVolume: 1
            };
            var e1 = {
                play: 1,
                pause: 1
            };
            function e2(a) {
                return function(b, c) {
                    if (b === co) {
                        return co;
                    }
                    if (c[a]) {
                        return c[a](b);
                    }
                    return b;
                };
            }
            function e3(b, c, e, f) {
                for(var a = b.length - 1; a >= 0; a--){
                    var d = b[a];
                    if (d[c]) {
                        d[c](f, e);
                    }
                }
            }
            function e4(a) {
                eV[a.id()] = null;
            }
            function e5(d, b) {
                var c = eV[d.id()];
                var a = null;
                if (c === undefined || c === null) {
                    a = b(d);
                    eV[d.id()] = [
                        [
                            b,
                            a
                        ]
                    ];
                    return a;
                }
                for(var e = 0; e < c.length; e++){
                    var f = c[e], g = f[0], h = f[1];
                    if (g !== b) {
                        continue;
                    }
                    a = h;
                }
                if (a === null) {
                    a = b(d);
                    c.push([
                        b,
                        a
                    ]);
                }
                return a;
            }
            function e6(a, g, d, e, b, c) {
                if (a === void 0) {
                    a = {};
                }
                if (g === void 0) {
                    g = [];
                }
                if (b === void 0) {
                    b = [];
                }
                if (c === void 0) {
                    c = false;
                }
                var j = g, f = j[0], h = j.slice(1);
                if (typeof f === "string") {
                    e6(a, eU[f], d, e, b, c);
                } else if (f) {
                    var i = e5(e, f);
                    if (!i.setSource) {
                        b.push(i);
                        return e6(a, h, d, e, b, c);
                    }
                    i.setSource(d$({}, a), function(g, f) {
                        if (g) {
                            return e6(a, h, d, e, b, c);
                        }
                        b.push(i);
                        e6(f, a.type === f.type ? h : eU[f.type], d, e, b, c);
                    });
                } else if (h.length) {
                    e6(a, h, d, e, b, c);
                } else if (c) {
                    d(a, b);
                } else {
                    e6(a, eU["*"], d, e, b, true);
                }
            }
            var e7 = {
                opus: "video/ogg",
                ogv: "video/ogg",
                mp4: "video/mp4",
                mov: "video/mp4",
                m4v: "video/mp4",
                mkv: "video/x-matroska",
                m4a: "audio/mp4",
                mp3: "audio/mpeg",
                aac: "audio/aac",
                caf: "audio/x-caf",
                flac: "audio/flac",
                oga: "audio/ogg",
                wav: "audio/wav",
                m3u8: "application/x-mpegURL",
                jpg: "image/jpeg",
                jpeg: "image/jpeg",
                gif: "image/gif",
                png: "image/png",
                svg: "image/svg+xml",
                webp: "image/webp"
            };
            var e8 = function d(a) {
                if (a === void 0) {
                    a = "";
                }
                var b = ci(a);
                var c = e7[b.toLowerCase()];
                return c || "";
            };
            var e9 = function g(a, b) {
                if (!b) {
                    return "";
                }
                if (a.cache_.source.src === b && a.cache_.source.type) {
                    return a.cache_.source.type;
                }
                var e = a.cache_.sources.filter(function(a) {
                    return a.src === b;
                });
                if (e.length) {
                    return e[0].type;
                }
                var f = a.$$("source");
                for(var d = 0; d < f.length; d++){
                    var c = f[d];
                    if (c.type && c.src && c.src === b) {
                        return c.type;
                    }
                }
                return e8(b);
            };
            var fa = function c(a) {
                if (Array.isArray(a)) {
                    var b = [];
                    a.forEach(function(a) {
                        a = c(a);
                        if (Array.isArray(a)) {
                            b = b.concat(a);
                        } else if (d_(a)) {
                            b.push(a);
                        }
                    });
                    a = b;
                } else if (typeof a === "string" && a.trim()) {
                    a = [
                        fb({
                            src: a
                        }), 
                    ];
                } else if (d_(a) && typeof a.src === "string" && a.src && a.src.trim()) {
                    a = [
                        fb(a)
                    ];
                } else {
                    a = [];
                }
                return a;
            };
            function fb(a) {
                if (!a.type) {
                    var b = e8(a.src);
                    if (b) {
                        a.type = b;
                    }
                }
                return a;
            }
            var cq = (function(b) {
                (0, dF.Z)(c, b);
                function c(f, c, k) {
                    var i;
                    var l = b6({
                        createEl: false
                    }, c);
                    i = b.call(this, f, l, k) || this;
                    if (!c.playerOptions.sources || c.playerOptions.sources.length === 0) {
                        for(var g = 0, j = c.playerOptions.techOrder; g < j.length; g++){
                            var d = ey(j[g]);
                            var h = e.getTech(d);
                            if (!d) {
                                h = a.getComponent(d);
                            }
                            if (h && h.isSupported()) {
                                f.loadTech_(d);
                                break;
                            }
                        }
                    } else {
                        f.src(c.playerOptions.sources);
                    }
                    return i;
                }
                return c;
            })(a);
            a.registerComponent("MediaLoader", cq);
            var E = (function(c) {
                (0, dF.Z)(b, c);
                function b(b, d) {
                    var a;
                    a = c.call(this, b, d) || this;
                    a.handleMouseOver_ = function(b) {
                        return a.handleMouseOver(b);
                    };
                    a.handleMouseOut_ = function(b) {
                        return a.handleMouseOut(b);
                    };
                    a.handleClick_ = function(b) {
                        return a.handleClick(b);
                    };
                    a.handleKeyDown_ = function(b) {
                        return a.handleKeyDown(b);
                    };
                    a.emitTapEvents();
                    a.enable();
                    return a;
                }
                var a = b.prototype;
                a.createEl = function e(b, a, c) {
                    if (b === void 0) {
                        b = "div";
                    }
                    if (a === void 0) {
                        a = {};
                    }
                    if (c === void 0) {
                        c = {};
                    }
                    a = d$({
                        className: this.buildCSSClass(),
                        tabIndex: 0
                    }, a);
                    if (b === "button") {
                        ak.error("Creating a ClickableComponent with an HTML element of " + b + " is not supported; use a Button instead.");
                    }
                    c = d$({
                        role: "button"
                    }, c);
                    this.tabIndex_ = a.tabIndex;
                    var d = bC(b, a, c);
                    d.appendChild(bC("span", {
                        className: "vjs-icon-placeholder"
                    }, {
                        "aria-hidden": true
                    }));
                    this.createControlTextEl(d);
                    return d;
                };
                a.dispose = function a() {
                    this.controlTextEl_ = null;
                    c.prototype.dispose.call(this);
                };
                a.createControlTextEl = function b(a) {
                    this.controlTextEl_ = bC("span", {
                        className: "vjs-control-text"
                    }, {
                        "aria-live": "polite"
                    });
                    if (a) {
                        a.appendChild(this.controlTextEl_);
                    }
                    this.controlText(this.controlText_, a);
                    return this.controlTextEl_;
                };
                a.controlText = function d(a, b) {
                    if (b === void 0) {
                        b = this.el();
                    }
                    if (a === undefined) {
                        return this.controlText_ || "Need Text";
                    }
                    var c = this.localize(a);
                    this.controlText_ = a;
                    bD(this.controlTextEl_, c);
                    if (!this.nonIconControl && !this.player_.options_.noUITitleAttributes) {
                        b.setAttribute("title", c);
                    }
                };
                a.buildCSSClass = function a() {
                    return ("vjs-control vjs-button " + c.prototype.buildCSSClass.call(this));
                };
                a.enable = function a() {
                    if (!this.enabled_) {
                        this.enabled_ = true;
                        this.removeClass("vjs-disabled");
                        this.el_.setAttribute("aria-disabled", "false");
                        if (typeof this.tabIndex_ !== "undefined") {
                            this.el_.setAttribute("tabIndex", this.tabIndex_);
                        }
                        this.on([
                            "tap",
                            "click"
                        ], this.handleClick_);
                        this.on("keydown", this.handleKeyDown_);
                    }
                };
                a.disable = function a() {
                    this.enabled_ = false;
                    this.addClass("vjs-disabled");
                    this.el_.setAttribute("aria-disabled", "true");
                    if (typeof this.tabIndex_ !== "undefined") {
                        this.el_.removeAttribute("tabIndex");
                    }
                    this.off("mouseover", this.handleMouseOver_);
                    this.off("mouseout", this.handleMouseOut_);
                    this.off([
                        "tap",
                        "click"
                    ], this.handleClick_);
                    this.off("keydown", this.handleKeyDown_);
                };
                a.handleLanguagechange = function a() {
                    this.controlText(this.controlText_);
                };
                a.handleClick = function a(b) {
                    if (this.options_.clickHandler) {
                        this.options_.clickHandler.call(this, arguments);
                    }
                };
                a.handleKeyDown = function b(a) {
                    if (dH().isEventKey(a, "Space") || dH().isEventKey(a, "Enter")) {
                        a.preventDefault();
                        a.stopPropagation();
                        this.trigger("click");
                    } else {
                        c.prototype.handleKeyDown.call(this, a);
                    }
                };
                return b;
            })(a);
            a.registerComponent("ClickableComponent", E);
            var cr = (function(c) {
                (0, dF.Z)(b, c);
                function b(b, d) {
                    var a;
                    a = c.call(this, b, d) || this;
                    a.update();
                    a.update_ = function(b) {
                        return a.update(b);
                    };
                    b.on("posterchange", a.update_);
                    return a;
                }
                var a = b.prototype;
                a.dispose = function a() {
                    this.player().off("posterchange", this.update_);
                    c.prototype.dispose.call(this);
                };
                a.createEl = function b() {
                    var a = bC("div", {
                        className: "vjs-poster",
                        tabIndex: -1
                    });
                    return a;
                };
                a.update = function b(c) {
                    var a = this.player().poster();
                    this.setSrc(a);
                    if (a) {
                        this.show();
                    } else {
                        this.hide();
                    }
                };
                a.setSrc = function c(a) {
                    var b = "";
                    if (a) {
                        b = 'url("' + a + '")';
                    }
                    this.el_.style.backgroundImage = b;
                };
                a.handleClick = function b(c) {
                    if (!this.player_.controls()) {
                        return;
                    }
                    var a = this.player_.usingPlugin("eme") && this.player_.eme.sessions && this.player_.eme.sessions.length > 0;
                    if (this.player_.tech(true) && !((bw || K) && a)) {
                        this.player_.tech(true).focus();
                    }
                    if (this.player_.paused()) {
                        eH(this.player_.play());
                    } else {
                        this.player_.pause();
                    }
                };
                return b;
            })(E);
            a.registerComponent("PosterImage", cr);
            var fc = "#222";
            var fd = "#ccc";
            var fe = {
                monospace: "monospace",
                sansSerif: "sans-serif",
                serif: "serif",
                monospaceSansSerif: '"Andale Mono", "Lucida Console", monospace',
                monospaceSerif: '"Courier New", monospace',
                proportionalSansSerif: "sans-serif",
                proportionalSerif: "serif",
                casual: '"Comic Sans MS", Impact, fantasy',
                script: '"Monotype Corsiva", cursive',
                smallcaps: '"Andale Mono", "Lucida Console", monospace, sans-serif'
            };
            function ff(a, c) {
                var b;
                if (a.length === 4) {
                    b = a[1] + a[1] + a[2] + a[2] + a[3] + a[3];
                } else if (a.length === 7) {
                    b = a.slice(1);
                } else {
                    throw new Error("Invalid color code provided, " + a + "; must be formatted as e.g. #f0e or #f604e2.");
                }
                return ("rgba(" + parseInt(b.slice(0, 2), 16) + "," + parseInt(b.slice(2, 4), 16) + "," + parseInt(b.slice(4, 6), 16) + "," + c + ")");
            }
            function fg(a, b, c) {
                try {
                    a.style[b] = c;
                } catch (d) {
                    return;
                }
            }
            var cs = (function(c) {
                (0, dF.Z)(b, c);
                function b(a, d, e) {
                    var b;
                    b = c.call(this, a, d, e) || this;
                    var g = function c(a) {
                        return b.updateDisplay(a);
                    };
                    a.on("loadstart", function(a) {
                        return b.toggleDisplay(a);
                    });
                    a.on("texttrackchange", g);
                    a.on("loadedmetadata", function(a) {
                        return b.preselectTrack(a);
                    });
                    a.ready(b5((0, dE.Z)(b), function() {
                        if (a.tech_ && a.tech_.featuresNativeTextTracks) {
                            this.hide();
                            return;
                        }
                        a.on("fullscreenchange", g);
                        a.on("playerresize", g);
                        f().addEventListener("orientationchange", g);
                        a.on("dispose", function() {
                            return f().removeEventListener("orientationchange", g);
                        });
                        var c = this.options_.playerOptions.tracks || [];
                        for(var b = 0; b < c.length; b++){
                            this.player_.addRemoteTextTrack(c[b], true);
                        }
                        this.preselectTrack();
                    }));
                    return b;
                }
                var a = b.prototype;
                a.preselectTrack = function i() {
                    var g = {
                        captions: 1,
                        subtitles: 1
                    };
                    var h = this.player_.textTracks();
                    var b = this.player_.cache_.selectedLanguage;
                    var d;
                    var e;
                    var c;
                    for(var f = 0; f < h.length; f++){
                        var a = h[f];
                        if (b && b.enabled && b.language && b.language === a.language && a.kind in g) {
                            if (a.kind === b.kind) {
                                c = a;
                            } else if (!c) {
                                c = a;
                            }
                        } else if (b && !b.enabled) {
                            c = null;
                            d = null;
                            e = null;
                        } else if (a["default"]) {
                            if (a.kind === "descriptions" && !d) {
                                d = a;
                            } else if (a.kind in g && !e) {
                                e = a;
                            }
                        }
                    }
                    if (c) {
                        c.mode = "showing";
                    } else if (e) {
                        e.mode = "showing";
                    } else if (d) {
                        d.mode = "showing";
                    }
                };
                a.toggleDisplay = function a() {
                    if (this.player_.tech_ && this.player_.tech_.featuresNativeTextTracks) {
                        this.hide();
                    } else {
                        this.show();
                    }
                };
                a.createEl = function a() {
                    return c.prototype.createEl.call(this, "div", {
                        className: "vjs-text-track-display"
                    }, {
                        translate: "yes",
                        "aria-live": "off",
                        "aria-atomic": "true"
                    });
                };
                a.clearDisplay = function a() {
                    if (typeof f().WebVTT === "function") {
                        f().WebVTT.processCues(f(), [], this.el_);
                    }
                };
                a.updateDisplay = function j() {
                    var a = this.player_.textTracks();
                    var i = this.options_.allowMultipleShowingTracks;
                    this.clearDisplay();
                    if (i) {
                        var f = [];
                        for(var c = 0; c < a.length; ++c){
                            var g = a[c];
                            if (g.mode !== "showing") {
                                continue;
                            }
                            f.push(g);
                        }
                        this.updateForTrack(f);
                        return;
                    }
                    var d = null;
                    var e = null;
                    var h = a.length;
                    while(h--){
                        var b = a[h];
                        if (b.mode === "showing") {
                            if (b.kind === "descriptions") {
                                d = b;
                            } else {
                                e = b;
                            }
                        }
                    }
                    if (e) {
                        if (this.getAttribute("aria-live") !== "off") {
                            this.setAttribute("aria-live", "off");
                        }
                        this.updateForTrack(e);
                    } else if (d) {
                        if (this.getAttribute("aria-live") !== "assertive") {
                            this.setAttribute("aria-live", "assertive");
                        }
                        this.updateForTrack(d);
                    }
                };
                a.updateDisplayState = function i(g) {
                    var a = this.player_.textTrackSettings.getValues();
                    var c = g.activeCues;
                    var d = c.length;
                    while(d--){
                        var e = c[d];
                        if (!e) {
                            continue;
                        }
                        var b = e.displayState;
                        if (a.color) {
                            b.firstChild.style.color = a.color;
                        }
                        if (a.textOpacity) {
                            fg(b.firstChild, "color", ff(a.color || "#fff", a.textOpacity));
                        }
                        if (a.backgroundColor) {
                            b.firstChild.style.backgroundColor = a.backgroundColor;
                        }
                        if (a.backgroundOpacity) {
                            fg(b.firstChild, "backgroundColor", ff(a.backgroundColor || "#000", a.backgroundOpacity));
                        }
                        if (a.windowColor) {
                            if (a.windowOpacity) {
                                fg(b, "backgroundColor", ff(a.windowColor, a.windowOpacity));
                            } else {
                                b.style.backgroundColor = a.windowColor;
                            }
                        }
                        if (a.edgeStyle) {
                            if (a.edgeStyle === "dropshadow") {
                                b.firstChild.style.textShadow = "2px 2px 3px " + fc + ", 2px 2px 4px " + fc + ", 2px 2px 5px " + fc;
                            } else if (a.edgeStyle === "raised") {
                                b.firstChild.style.textShadow = "1px 1px " + fc + ", 2px 2px " + fc + ", 3px 3px " + fc;
                            } else if (a.edgeStyle === "depressed") {
                                b.firstChild.style.textShadow = "1px 1px " + fd + ", 0 1px " + fd + ", -1px -1px " + fc + ", 0 -1px " + fc;
                            } else if (a.edgeStyle === "uniform") {
                                b.firstChild.style.textShadow = "0 0 4px " + fc + ", 0 0 4px " + fc + ", 0 0 4px " + fc + ", 0 0 4px " + fc;
                            }
                        }
                        if (a.fontPercent && a.fontPercent !== 1) {
                            var h = f().parseFloat(b.style.fontSize);
                            b.style.fontSize = h * a.fontPercent + "px";
                            b.style.height = "auto";
                            b.style.top = "auto";
                        }
                        if (a.fontFamily && a.fontFamily !== "default") {
                            if (a.fontFamily === "small-caps") {
                                b.firstChild.style.fontVariant = "small-caps";
                            } else {
                                b.firstChild.style.fontFamily = fe[a.fontFamily];
                            }
                        }
                    }
                };
                a.updateForTrack = function k(a) {
                    if (!Array.isArray(a)) {
                        a = [
                            a
                        ];
                    }
                    if (typeof f().WebVTT !== "function" || a.every(function(a) {
                        return !a.activeCues;
                    })) {
                        return;
                    }
                    var i = [];
                    for(var d = 0; d < a.length; ++d){
                        var j = a[d];
                        for(var e = 0; e < j.activeCues.length; ++e){
                            i.push(j.activeCues[e]);
                        }
                    }
                    f().WebVTT.processCues(f(), i, this.el_);
                    for(var c = 0; c < a.length; ++c){
                        var b = a[c];
                        for(var g = 0; g < b.activeCues.length; ++g){
                            var h = b.activeCues[g].displayState;
                            bG(h, "vjs-text-track-cue");
                            bG(h, "vjs-text-track-cue-" + (b.language ? b.language : c));
                            if (b.language) {
                                bM(h, "lang", b.language);
                            }
                        }
                        if (this.player_.textTrackSettings) {
                            this.updateDisplayState(b);
                        }
                    }
                };
                return b;
            })(a);
            a.registerComponent("TextTrackDisplay", cs);
            var ct = (function(b) {
                (0, dF.Z)(a, b);
                function a() {
                    return b.apply(this, arguments) || this;
                }
                var c = a.prototype;
                c.createEl = function f() {
                    var c = this.player_.isAudio();
                    var d = this.localize(c ? "Audio Player" : "Video Player");
                    var e = bC("span", {
                        className: "vjs-control-text",
                        textContent: this.localize("{1} is loading.", [
                            d, 
                        ])
                    });
                    var a = b.prototype.createEl.call(this, "div", {
                        className: "vjs-loading-spinner",
                        dir: "ltr"
                    });
                    a.appendChild(e);
                    return a;
                };
                return a;
            })(a);
            a.registerComponent("LoadingSpinner", ct);
            var l = (function(d) {
                (0, dF.Z)(c, d);
                function c() {
                    return d.apply(this, arguments) || this;
                }
                var b = c.prototype;
                b.createEl = function e(d, a, b) {
                    if (a === void 0) {
                        a = {};
                    }
                    if (b === void 0) {
                        b = {};
                    }
                    d = "button";
                    a = d$({
                        className: this.buildCSSClass()
                    }, a);
                    b = d$({
                        type: "button"
                    }, b);
                    var c = bC(d, a, b);
                    c.appendChild(bC("span", {
                        className: "vjs-icon-placeholder"
                    }, {
                        "aria-hidden": true
                    }));
                    this.createControlTextEl(c);
                    return c;
                };
                b.addChild = function e(c, b) {
                    if (b === void 0) {
                        b = {};
                    }
                    var d = this.constructor.name;
                    ak.warn("Adding an actionable (user controllable) child to a Button (" + d + ") is not supported; use a ClickableComponent instead.");
                    return a.prototype.addChild.call(this, c, b);
                };
                b.enable = function a() {
                    d.prototype.enable.call(this);
                    this.el_.removeAttribute("disabled");
                };
                b.disable = function a() {
                    d.prototype.disable.call(this);
                    this.el_.setAttribute("disabled", "disabled");
                };
                b.handleKeyDown = function b(a) {
                    if (dH().isEventKey(a, "Space") || dH().isEventKey(a, "Enter")) {
                        a.stopPropagation();
                        return;
                    }
                    d.prototype.handleKeyDown.call(this, a);
                };
                return c;
            })(E);
            a.registerComponent("Button", l);
            var aB = (function(c) {
                (0, dF.Z)(b, c);
                function b(b, d) {
                    var a;
                    a = c.call(this, b, d) || this;
                    a.mouseused_ = false;
                    a.on("mousedown", function(b) {
                        return a.handleMouseDown(b);
                    });
                    return a;
                }
                var a = b.prototype;
                a.buildCSSClass = function a() {
                    return "vjs-big-play-button";
                };
                a.handleClick = function g(b) {
                    var a = this.player_.play();
                    if (this.mouseused_ && b.clientX && b.clientY) {
                        var e = this.player_.usingPlugin("eme") && this.player_.eme.sessions && this.player_.eme.sessions.length > 0;
                        eH(a);
                        if (this.player_.tech(true) && !((bw || K) && e)) {
                            this.player_.tech(true).focus();
                        }
                        return;
                    }
                    var c = this.player_.getChild("controlBar");
                    var f = c && c.getChild("playToggle");
                    if (!f) {
                        this.player_.tech(true).focus();
                        return;
                    }
                    var d = function a() {
                        return f.focus();
                    };
                    if (eG(a)) {
                        a.then(d, function() {});
                    } else {
                        this.setTimeout(d, 1);
                    }
                };
                a.handleKeyDown = function b(a) {
                    this.mouseused_ = false;
                    c.prototype.handleKeyDown.call(this, a);
                };
                a.handleMouseDown = function a(b) {
                    this.mouseused_ = true;
                };
                return b;
            })(l);
            aB.prototype.controlText_ = "Play Video";
            a.registerComponent("BigPlayButton", aB);
            var cu = (function(c) {
                (0, dF.Z)(b, c);
                function b(d, b) {
                    var a;
                    a = c.call(this, d, b) || this;
                    a.controlText((b && b.controlText) || a.localize("Close"));
                    return a;
                }
                var a = b.prototype;
                a.buildCSSClass = function a() {
                    return ("vjs-close-button " + c.prototype.buildCSSClass.call(this));
                };
                a.handleClick = function a(b) {
                    this.trigger({
                        type: "close",
                        bubbles: false
                    });
                };
                a.handleKeyDown = function b(a) {
                    if (dH().isEventKey(a, "Esc")) {
                        a.preventDefault();
                        a.stopPropagation();
                        this.trigger("click");
                    } else {
                        c.prototype.handleKeyDown.call(this, a);
                    }
                };
                return b;
            })(l);
            a.registerComponent("CloseButton", cu);
            var aC = (function(c) {
                (0, dF.Z)(b, c);
                function b(d, a) {
                    var b;
                    if (a === void 0) {
                        a = {};
                    }
                    b = c.call(this, d, a) || this;
                    a.replay = a.replay === undefined || a.replay;
                    b.on(d, "play", function(a) {
                        return b.handlePlay(a);
                    });
                    b.on(d, "pause", function(a) {
                        return b.handlePause(a);
                    });
                    if (a.replay) {
                        b.on(d, "ended", function(a) {
                            return b.handleEnded(a);
                        });
                    }
                    return b;
                }
                var a = b.prototype;
                a.buildCSSClass = function a() {
                    return ("vjs-play-control " + c.prototype.buildCSSClass.call(this));
                };
                a.handleClick = function a(b) {
                    if (this.player_.paused()) {
                        eH(this.player_.play());
                    } else {
                        this.player_.pause();
                    }
                };
                a.handleSeeked = function b(a) {
                    this.removeClass("vjs-ended");
                    if (this.player_.paused()) {
                        this.handlePause(a);
                    } else {
                        this.handlePlay(a);
                    }
                };
                a.handlePlay = function a(b) {
                    this.removeClass("vjs-ended");
                    this.removeClass("vjs-paused");
                    this.addClass("vjs-playing");
                    this.controlText("Pause");
                };
                a.handlePause = function a(b) {
                    this.removeClass("vjs-playing");
                    this.addClass("vjs-paused");
                    this.controlText("Play");
                };
                a.handleEnded = function a(b) {
                    var c = this;
                    this.removeClass("vjs-playing");
                    this.addClass("vjs-ended");
                    this.controlText("Replay");
                    this.one(this.player_, "seeked", function(a) {
                        return c.handleSeeked(a);
                    });
                };
                return b;
            })(l);
            aC.prototype.controlText_ = "Play";
            a.registerComponent("PlayToggle", aC);
            var cv = function h(a, e) {
                a = a < 0 ? 0 : a;
                var b = Math.floor(a % 60);
                var c = Math.floor((a / 60) % 60);
                var d = Math.floor(a / 3600);
                var f = Math.floor((e / 60) % 60);
                var g = Math.floor(e / 3600);
                if (isNaN(a) || a === Infinity) {
                    d = c = b = "-";
                }
                d = d > 0 || g > 0 ? d + ":" : "";
                c = ((d || f >= 10) && c < 10 ? "0" + c : c) + ":";
                b = b < 10 ? "0" + b : b;
                return d + c + b;
            };
            var fh = cv;
            function cw(a) {
                fh = a;
            }
            function cx() {
                fh = cv;
            }
            function cy(b, a) {
                if (a === void 0) {
                    a = b;
                }
                return fh(b, a);
            }
            var s = (function(c) {
                (0, dF.Z)(b, c);
                function b(b, d) {
                    var a;
                    a = c.call(this, b, d) || this;
                    a.on(b, [
                        "timeupdate",
                        "ended"
                    ], function(b) {
                        return a.updateContent(b);
                    });
                    a.updateTextNode_();
                    return a;
                }
                var a = b.prototype;
                a.createEl = function e() {
                    var b = this.buildCSSClass();
                    var a = c.prototype.createEl.call(this, "div", {
                        className: b + " vjs-time-control vjs-control"
                    });
                    var d = bC("span", {
                        className: "vjs-control-text",
                        textContent: this.localize(this.labelText_) + "\xA0"
                    }, {
                        role: "presentation"
                    });
                    a.appendChild(d);
                    this.contentEl_ = bC("span", {
                        className: b + "-display"
                    }, {
                        "aria-live": "off",
                        role: "presentation"
                    });
                    a.appendChild(this.contentEl_);
                    return a;
                };
                a.dispose = function a() {
                    this.contentEl_ = null;
                    this.textNode_ = null;
                    c.prototype.dispose.call(this);
                };
                a.updateTextNode_ = function b(a) {
                    var c = this;
                    if (a === void 0) {
                        a = 0;
                    }
                    a = cy(a);
                    if (this.formattedTime_ === a) {
                        return;
                    }
                    this.formattedTime_ = a;
                    this.requestNamedAnimationFrame("TimeDisplay#updateTextNode_", function() {
                        if (!c.contentEl_) {
                            return;
                        }
                        var a = c.textNode_;
                        if (a && c.contentEl_.firstChild !== a) {
                            a = null;
                            ak.warn("TimeDisplay#updateTextnode_: Prevented replacement of text node element since it was no longer a child of this node. Appending a new node instead.");
                        }
                        c.textNode_ = J().createTextNode(c.formattedTime_);
                        if (!c.textNode_) {
                            return;
                        }
                        if (a) {
                            c.contentEl_.replaceChild(c.textNode_, a);
                        } else {
                            c.contentEl_.appendChild(c.textNode_);
                        }
                    });
                };
                a.updateContent = function a(b) {};
                return b;
            })(a);
            s.prototype.labelText_ = "Time";
            s.prototype.controlText_ = "Time";
            a.registerComponent("TimeDisplay", s);
            var T = (function(c) {
                (0, dF.Z)(a, c);
                function a() {
                    return c.apply(this, arguments) || this;
                }
                var b = a.prototype;
                b.buildCSSClass = function a() {
                    return "vjs-current-time";
                };
                b.updateContent = function b(c) {
                    var a;
                    if (this.player_.ended()) {
                        a = this.player_.duration();
                    } else {
                        a = this.player_.scrubbing() ? this.player_.getCache().currentTime : this.player_.currentTime();
                    }
                    this.updateTextNode_(a);
                };
                return a;
            })(s);
            T.prototype.labelText_ = "Current Time";
            T.prototype.controlText_ = "Current Time";
            a.registerComponent("CurrentTimeDisplay", T);
            var U = (function(c) {
                (0, dF.Z)(a, c);
                function a(b, e) {
                    var a;
                    a = c.call(this, b, e) || this;
                    var d = function c(b) {
                        return a.updateContent(b);
                    };
                    a.on(b, "durationchange", d);
                    a.on(b, "loadstart", d);
                    a.on(b, "loadedmetadata", d);
                    return a;
                }
                var b = a.prototype;
                b.buildCSSClass = function a() {
                    return "vjs-duration";
                };
                b.updateContent = function b(c) {
                    var a = this.player_.duration();
                    this.updateTextNode_(a);
                };
                return a;
            })(s);
            U.prototype.labelText_ = "Duration";
            U.prototype.controlText_ = "Duration";
            a.registerComponent("DurationDisplay", U);
            var cz = (function(b) {
                (0, dF.Z)(a, b);
                function a() {
                    return b.apply(this, arguments) || this;
                }
                var c = a.prototype;
                c.createEl = function e() {
                    var a = b.prototype.createEl.call(this, "div", {
                        className: "vjs-time-control vjs-time-divider"
                    }, {
                        "aria-hidden": true
                    });
                    var c = b.prototype.createEl.call(this, "div");
                    var d = b.prototype.createEl.call(this, "span", {
                        textContent: "/"
                    });
                    c.appendChild(d);
                    a.appendChild(c);
                    return a;
                };
                return a;
            })(a);
            a.registerComponent("TimeDivider", cz);
            var V = (function(c) {
                (0, dF.Z)(b, c);
                function b(b, d) {
                    var a;
                    a = c.call(this, b, d) || this;
                    a.on(b, "durationchange", function(b) {
                        return a.updateContent(b);
                    });
                    return a;
                }
                var a = b.prototype;
                a.buildCSSClass = function a() {
                    return "vjs-remaining-time";
                };
                a.createEl = function b() {
                    var a = c.prototype.createEl.call(this);
                    a.insertBefore(bC("span", {}, {
                        "aria-hidden": true
                    }, "-"), this.contentEl_);
                    return a;
                };
                a.updateContent = function b(c) {
                    if (typeof this.player_.duration() !== "number") {
                        return;
                    }
                    var a;
                    if (this.player_.ended()) {
                        a = 0;
                    } else if (this.player_.remainingTimeDisplay) {
                        a = this.player_.remainingTimeDisplay();
                    } else {
                        a = this.player_.remainingTime();
                    }
                    this.updateTextNode_(a);
                };
                return b;
            })(s);
            V.prototype.labelText_ = "Remaining Time";
            V.prototype.controlText_ = "Remaining Time";
            a.registerComponent("RemainingTimeDisplay", V);
            var cA = (function(c) {
                (0, dF.Z)(b, c);
                function b(b, d) {
                    var a;
                    a = c.call(this, b, d) || this;
                    a.updateShowing();
                    a.on(a.player(), "durationchange", function(b) {
                        return a.updateShowing(b);
                    });
                    return a;
                }
                var a = b.prototype;
                a.createEl = function b() {
                    var a = c.prototype.createEl.call(this, "div", {
                        className: "vjs-live-control vjs-control"
                    });
                    this.contentEl_ = bC("div", {
                        className: "vjs-live-display"
                    }, {
                        "aria-live": "off"
                    });
                    this.contentEl_.appendChild(bC("span", {
                        className: "vjs-control-text",
                        textContent: this.localize("Stream Type") + "\xA0"
                    }));
                    this.contentEl_.appendChild(J().createTextNode(this.localize("LIVE")));
                    a.appendChild(this.contentEl_);
                    return a;
                };
                a.dispose = function a() {
                    this.contentEl_ = null;
                    c.prototype.dispose.call(this);
                };
                a.updateShowing = function a(b) {
                    if (this.player().duration() === Infinity) {
                        this.show();
                    } else {
                        this.hide();
                    }
                };
                return b;
            })(a);
            a.registerComponent("LiveDisplay", cA);
            var aD = (function(c) {
                (0, dF.Z)(b, c);
                function b(b, d) {
                    var a;
                    a = c.call(this, b, d) || this;
                    a.updateLiveEdgeStatus();
                    if (a.player_.liveTracker) {
                        a.updateLiveEdgeStatusHandler_ = function(b) {
                            return a.updateLiveEdgeStatus(b);
                        };
                        a.on(a.player_.liveTracker, "liveedgechange", a.updateLiveEdgeStatusHandler_);
                    }
                    return a;
                }
                var a = b.prototype;
                a.createEl = function b() {
                    var a = c.prototype.createEl.call(this, "button", {
                        className: "vjs-seek-to-live-control vjs-control"
                    });
                    this.textEl_ = bC("span", {
                        className: "vjs-seek-to-live-text",
                        textContent: this.localize("LIVE")
                    }, {
                        "aria-hidden": "true"
                    });
                    a.appendChild(this.textEl_);
                    return a;
                };
                a.updateLiveEdgeStatus = function a() {
                    if (!this.player_.liveTracker || this.player_.liveTracker.atLiveEdge()) {
                        this.setAttribute("aria-disabled", true);
                        this.addClass("vjs-at-live-edge");
                        this.controlText("Seek to live, currently playing live");
                    } else {
                        this.setAttribute("aria-disabled", false);
                        this.removeClass("vjs-at-live-edge");
                        this.controlText("Seek to live, currently behind live");
                    }
                };
                a.handleClick = function a() {
                    this.player_.liveTracker.seekToLiveEdge();
                };
                a.dispose = function a() {
                    if (this.player_.liveTracker) {
                        this.off(this.player_.liveTracker, "liveedgechange", this.updateLiveEdgeStatusHandler_);
                    }
                    this.textEl_ = null;
                    c.prototype.dispose.call(this);
                };
                return b;
            })(l);
            aD.prototype.controlText_ = "Seek to live, currently playing live";
            a.registerComponent("SeekToLive", aD);
            var fi = function d(a, b, c) {
                a = Number(a);
                return Math.min(c, Math.max(b, isNaN(a) ? b : a));
            };
            var W = (function(c) {
                (0, dF.Z)(b, c);
                function b(b, d) {
                    var a;
                    a = c.call(this, b, d) || this;
                    a.handleMouseDown_ = function(b) {
                        return a.handleMouseDown(b);
                    };
                    a.handleMouseUp_ = function(b) {
                        return a.handleMouseUp(b);
                    };
                    a.handleKeyDown_ = function(b) {
                        return a.handleKeyDown(b);
                    };
                    a.handleClick_ = function(b) {
                        return a.handleClick(b);
                    };
                    a.handleMouseMove_ = function(b) {
                        return a.handleMouseMove(b);
                    };
                    a.update_ = function(b) {
                        return a.update(b);
                    };
                    a.bar = a.getChild(a.options_.barName);
                    a.vertical(!!a.options_.vertical);
                    a.enable();
                    return a;
                }
                var a = b.prototype;
                a.enabled = function a() {
                    return this.enabled_;
                };
                a.enable = function a() {
                    if (this.enabled()) {
                        return;
                    }
                    this.on("mousedown", this.handleMouseDown_);
                    this.on("touchstart", this.handleMouseDown_);
                    this.on("keydown", this.handleKeyDown_);
                    this.on("click", this.handleClick_);
                    this.on(this.player_, "controlsvisible", this.update);
                    if (this.playerEvent) {
                        this.on(this.player_, this.playerEvent, this.update);
                    }
                    this.removeClass("disabled");
                    this.setAttribute("tabindex", 0);
                    this.enabled_ = true;
                };
                a.disable = function b() {
                    if (!this.enabled()) {
                        return;
                    }
                    var a = this.bar.el_.ownerDocument;
                    this.off("mousedown", this.handleMouseDown_);
                    this.off("touchstart", this.handleMouseDown_);
                    this.off("keydown", this.handleKeyDown_);
                    this.off("click", this.handleClick_);
                    this.off(this.player_, "controlsvisible", this.update_);
                    this.off(a, "mousemove", this.handleMouseMove_);
                    this.off(a, "mouseup", this.handleMouseUp_);
                    this.off(a, "touchmove", this.handleMouseMove_);
                    this.off(a, "touchend", this.handleMouseUp_);
                    this.removeAttribute("tabindex");
                    this.addClass("disabled");
                    if (this.playerEvent) {
                        this.off(this.player_, this.playerEvent, this.update);
                    }
                    this.enabled_ = false;
                };
                a.createEl = function e(d, a, b) {
                    if (a === void 0) {
                        a = {};
                    }
                    if (b === void 0) {
                        b = {};
                    }
                    a.className = a.className + " vjs-slider";
                    a = d$({
                        tabIndex: 0
                    }, a);
                    b = d$({
                        role: "slider",
                        "aria-valuenow": 0,
                        "aria-valuemin": 0,
                        "aria-valuemax": 100,
                        tabIndex: 0
                    }, b);
                    return c.prototype.createEl.call(this, d, a, b);
                };
                a.handleMouseDown = function c(a) {
                    var b = this.bar.el_.ownerDocument;
                    if (a.type === "mousedown") {
                        a.preventDefault();
                    }
                    if (a.type === "touchstart" && !L) {
                        a.preventDefault();
                    }
                    bO();
                    this.addClass("vjs-sliding");
                    this.trigger("slideractive");
                    this.on(b, "mousemove", this.handleMouseMove_);
                    this.on(b, "mouseup", this.handleMouseUp_);
                    this.on(b, "touchmove", this.handleMouseMove_);
                    this.on(b, "touchend", this.handleMouseUp_);
                    this.handleMouseMove(a);
                };
                a.handleMouseMove = function a(b) {};
                a.handleMouseUp = function b() {
                    var a = this.bar.el_.ownerDocument;
                    bP();
                    this.removeClass("vjs-sliding");
                    this.trigger("sliderinactive");
                    this.off(a, "mousemove", this.handleMouseMove_);
                    this.off(a, "mouseup", this.handleMouseUp_);
                    this.off(a, "touchmove", this.handleMouseMove_);
                    this.off(a, "touchend", this.handleMouseUp_);
                    this.update();
                };
                a.update = function b() {
                    var c = this;
                    if (!this.el_ || !this.bar) {
                        return;
                    }
                    var a = this.getProgress();
                    if (a === this.progress_) {
                        return a;
                    }
                    this.progress_ = a;
                    this.requestNamedAnimationFrame("Slider#update", function() {
                        var b = c.vertical() ? "height" : "width";
                        c.bar.el().style[b] = (a * 100).toFixed(2) + "%";
                    });
                    return a;
                };
                a.getProgress = function a() {
                    return Number(fi(this.getPercent(), 0, 1).toFixed(4));
                };
                a.calculateDistance = function c(b) {
                    var a = bS(this.el_, b);
                    if (this.vertical()) {
                        return a.y;
                    }
                    return a.x;
                };
                a.handleKeyDown = function b(a) {
                    if (dH().isEventKey(a, "Left") || dH().isEventKey(a, "Down")) {
                        a.preventDefault();
                        a.stopPropagation();
                        this.stepBack();
                    } else if (dH().isEventKey(a, "Right") || dH().isEventKey(a, "Up")) {
                        a.preventDefault();
                        a.stopPropagation();
                        this.stepForward();
                    } else {
                        c.prototype.handleKeyDown.call(this, a);
                    }
                };
                a.handleClick = function b(a) {
                    a.stopPropagation();
                    a.preventDefault();
                };
                a.vertical = function b(a) {
                    if (a === undefined) {
                        return this.vertical_ || false;
                    }
                    this.vertical_ = !!a;
                    if (this.vertical_) {
                        this.addClass("vjs-slider-vertical");
                    } else {
                        this.addClass("vjs-slider-horizontal");
                    }
                };
                return b;
            })(a);
            a.registerComponent("Slider", W);
            var fj = function c(a, b) {
                return fi((a / b) * 100, 0, 100).toFixed(2) + "%";
            };
            var cB = (function(c) {
                (0, dF.Z)(b, c);
                function b(b, d) {
                    var a;
                    a = c.call(this, b, d) || this;
                    a.partEls_ = [];
                    a.on(b, "progress", function(b) {
                        return a.update(b);
                    });
                    return a;
                }
                var a = b.prototype;
                a.createEl = function f() {
                    var b = c.prototype.createEl.call(this, "div", {
                        className: "vjs-load-progress"
                    });
                    var a = bC("span", {
                        className: "vjs-control-text"
                    });
                    var d = bC("span", {
                        textContent: this.localize("Loaded")
                    });
                    var e = J().createTextNode(": ");
                    this.percentageEl_ = bC("span", {
                        className: "vjs-control-text-loaded-percentage",
                        textContent: "0%"
                    });
                    b.appendChild(a);
                    a.appendChild(d);
                    a.appendChild(e);
                    a.appendChild(this.percentageEl_);
                    return b;
                };
                a.dispose = function a() {
                    this.partEls_ = null;
                    this.percentageEl_ = null;
                    c.prototype.dispose.call(this);
                };
                a.update = function a(b) {
                    var c = this;
                    this.requestNamedAnimationFrame("LoadProgressBar#update", function() {
                        var h = c.player_.liveTracker;
                        var d = c.player_.buffered();
                        var l = h && h.isLive() ? h.seekableEnd() : c.player_.duration();
                        var i = c.player_.bufferedEnd();
                        var e = c.partEls_;
                        var f = fj(i, l);
                        if (c.percent_ !== f) {
                            c.el_.style.width = f;
                            bD(c.percentageEl_, f);
                            c.percent_ = f;
                        }
                        for(var b = 0; b < d.length; b++){
                            var g = d.start(b);
                            var j = d.end(b);
                            var a = e[b];
                            if (!a) {
                                a = c.el_.appendChild(bC());
                                e[b] = a;
                            }
                            if (a.dataset.start === g && a.dataset.end === j) {
                                continue;
                            }
                            a.dataset.start = g;
                            a.dataset.end = j;
                            a.style.left = fj(g, i);
                            a.style.width = fj(j - g, i);
                        }
                        for(var k = e.length; k > d.length; k--){
                            c.el_.removeChild(e[k - 1]);
                        }
                        e.length = d.length;
                    });
                };
                return b;
            })(a);
            a.registerComponent("LoadProgressBar", cB);
            var cC = (function(c) {
                (0, dF.Z)(b, c);
                function b(b, d) {
                    var a;
                    a = c.call(this, b, d) || this;
                    a.update = eh(b5((0, dE.Z)(a), a.update), eg);
                    return a;
                }
                var a = b.prototype;
                a.createEl = function a() {
                    return c.prototype.createEl.call(this, "div", {
                        className: "vjs-time-tooltip"
                    }, {
                        "aria-hidden": "true"
                    });
                };
                a.update = function j(b, h, i) {
                    var c = bR(this.el_);
                    var d = bQ(this.player_.el());
                    var e = b.width * h;
                    if (!d || !c) {
                        return;
                    }
                    var f = b.left - d.left + e;
                    var g = b.width - e + (d.right - b.right);
                    var a = c.width / 2;
                    if (f < a) {
                        a += a - f;
                    } else if (g < a) {
                        a = g;
                    }
                    if (a < 0) {
                        a = 0;
                    } else if (a > c.width) {
                        a = c.width;
                    }
                    a = Math.round(a);
                    this.el_.style.right = "-" + a + "px";
                    this.write(i);
                };
                a.write = function b(a) {
                    bD(this.el_, a);
                };
                a.updateTime = function a(b, c, d, e) {
                    var f = this;
                    this.requestNamedAnimationFrame("TimeTooltip#updateTime", function() {
                        var a;
                        var i = f.player_.duration();
                        if (f.player_.liveTracker && f.player_.liveTracker.isLive()) {
                            var g = f.player_.liveTracker.liveWindow();
                            var h = g - c * g;
                            a = (h < 1 ? "" : "-") + cy(h, g);
                        } else {
                            a = cy(d, i);
                        }
                        f.update(b, c, a);
                        if (e) {
                            e();
                        }
                    });
                };
                return b;
            })(a);
            a.registerComponent("TimeTooltip", cC);
            var X = (function(c) {
                (0, dF.Z)(a, c);
                function a(b, d) {
                    var a;
                    a = c.call(this, b, d) || this;
                    a.update = eh(b5((0, dE.Z)(a), a.update), eg);
                    return a;
                }
                var b = a.prototype;
                b.createEl = function a() {
                    return c.prototype.createEl.call(this, "div", {
                        className: "vjs-play-progress vjs-slider-bar"
                    }, {
                        "aria-hidden": "true"
                    });
                };
                b.update = function e(b, c) {
                    var a = this.getChild("timeTooltip");
                    if (!a) {
                        return;
                    }
                    var d = this.player_.scrubbing() ? this.player_.getCache().currentTime : this.player_.currentTime();
                    a.updateTime(b, c, d);
                };
                return a;
            })(a);
            X.prototype.options_ = {
                children: []
            };
            if (!o && !n) {
                X.prototype.options_.children.push("timeTooltip");
            }
            a.registerComponent("PlayProgressBar", X);
            var aE = (function(c) {
                (0, dF.Z)(a, c);
                function a(b, d) {
                    var a;
                    a = c.call(this, b, d) || this;
                    a.update = eh(b5((0, dE.Z)(a), a.update), eg);
                    return a;
                }
                var b = a.prototype;
                b.createEl = function a() {
                    return c.prototype.createEl.call(this, "div", {
                        className: "vjs-mouse-display"
                    });
                };
                b.update = function d(b, a) {
                    var e = this;
                    var c = a * this.player_.duration();
                    this.getChild("timeTooltip").updateTime(b, a, c, function() {
                        e.el_.style.left = b.width * a + "px";
                    });
                };
                return a;
            })(a);
            aE.prototype.options_ = {
                children: [
                    "timeTooltip"
                ]
            };
            a.registerComponent("MouseTimeDisplay", aE);
            var fk = 5;
            var fl = 12;
            var Y = (function(c) {
                (0, dF.Z)(b, c);
                function b(b, d) {
                    var a;
                    a = c.call(this, b, d) || this;
                    a.setEventHandlers_();
                    return a;
                }
                var a = b.prototype;
                a.setEventHandlers_ = function a() {
                    var b = this;
                    this.update_ = b5(this, this.update);
                    this.update = eh(this.update_, eg);
                    this.on(this.player_, [
                        "ended",
                        "durationchange",
                        "timeupdate"
                    ], this.update);
                    if (this.player_.liveTracker) {
                        this.on(this.player_.liveTracker, "liveedgechange", this.update);
                    }
                    this.updateInterval = null;
                    this.enableIntervalHandler_ = function(a) {
                        return b.enableInterval_(a);
                    };
                    this.disableIntervalHandler_ = function(a) {
                        return b.disableInterval_(a);
                    };
                    this.on(this.player_, [
                        "playing"
                    ], this.enableIntervalHandler_);
                    this.on(this.player_, [
                        "ended",
                        "pause",
                        "waiting"
                    ], this.disableIntervalHandler_);
                    if ("hidden" in J() && "visibilityState" in J()) {
                        this.on(J(), "visibilitychange", this.toggleVisibility_);
                    }
                };
                a.toggleVisibility_ = function b(a) {
                    if (J().visibilityState === "hidden") {
                        this.cancelNamedAnimationFrame("SeekBar#update");
                        this.cancelNamedAnimationFrame("Slider#update");
                        this.disableInterval_(a);
                    } else {
                        if (!this.player_.ended() && !this.player_.paused()) {
                            this.enableInterval_();
                        }
                        this.update();
                    }
                };
                a.enableInterval_ = function a() {
                    if (this.updateInterval) {
                        return;
                    }
                    this.updateInterval = this.setInterval(this.update, eg);
                };
                a.disableInterval_ = function b(a) {
                    if (this.player_.liveTracker && this.player_.liveTracker.isLive() && a && a.type !== "ended") {
                        return;
                    }
                    if (!this.updateInterval) {
                        return;
                    }
                    this.clearInterval(this.updateInterval);
                    this.updateInterval = null;
                };
                a.createEl = function a() {
                    return c.prototype.createEl.call(this, "div", {
                        className: "vjs-progress-holder"
                    }, {
                        "aria-label": this.localize("Progress Bar")
                    });
                };
                a.update = function b(d) {
                    var e = this;
                    if (J().visibilityState === "hidden") {
                        return;
                    }
                    var a = c.prototype.update.call(this);
                    this.requestNamedAnimationFrame("SeekBar#update", function() {
                        var c = e.player_.ended() ? e.player_.duration() : e.getCurrentTime_();
                        var d = e.player_.liveTracker;
                        var b = e.player_.duration();
                        if (d && d.isLive()) {
                            b = e.player_.liveTracker.liveCurrentTime();
                        }
                        if (e.percent_ !== a) {
                            e.el_.setAttribute("aria-valuenow", (a * 100).toFixed(2));
                            e.percent_ = a;
                        }
                        if (e.currentTime_ !== c || e.duration_ !== b) {
                            e.el_.setAttribute("aria-valuetext", e.localize("progress bar timing: currentTime={1} duration={2}", [
                                cy(c, b),
                                cy(b, b), 
                            ], "{1} of {2}"));
                            e.currentTime_ = c;
                            e.duration_ = b;
                        }
                        if (e.bar) {
                            e.bar.update(bQ(e.el()), e.getProgress());
                        }
                    });
                    return a;
                };
                a.userSeek_ = function b(a) {
                    if (this.player_.liveTracker && this.player_.liveTracker.isLive()) {
                        this.player_.liveTracker.nextSeekedFromUser();
                    }
                    this.player_.currentTime(a);
                };
                a.getCurrentTime_ = function a() {
                    return this.player_.scrubbing() ? this.player_.getCache().currentTime : this.player_.currentTime();
                };
                a.getPercent = function d() {
                    var c = this.getCurrentTime_();
                    var b;
                    var a = this.player_.liveTracker;
                    if (a && a.isLive()) {
                        b = (c - a.seekableStart()) / a.liveWindow();
                        if (a.atLiveEdge()) {
                            b = 1;
                        }
                    } else {
                        b = c / this.player_.duration();
                    }
                    return b;
                };
                a.handleMouseDown = function b(a) {
                    if (!bY(a)) {
                        return;
                    }
                    a.stopPropagation();
                    this.player_.scrubbing(true);
                    this.videoWasPlaying = !this.player_.paused();
                    this.player_.pause();
                    c.prototype.handleMouseDown.call(this, a);
                };
                a.handleMouseMove = function g(e) {
                    if (!bY(e)) {
                        return;
                    }
                    var a;
                    var c = this.calculateDistance(e);
                    var b = this.player_.liveTracker;
                    if (!b || !b.isLive()) {
                        a = c * this.player_.duration();
                        if (a === this.player_.duration()) {
                            a = a - 0.1;
                        }
                    } else {
                        if (c >= 0.99) {
                            b.seekToLiveEdge();
                            return;
                        }
                        var d = b.seekableStart();
                        var f = b.liveCurrentTime();
                        a = d + c * b.liveWindow();
                        if (a >= f) {
                            a = f;
                        }
                        if (a <= d) {
                            a = d + 0.1;
                        }
                        if (a === Infinity) {
                            return;
                        }
                    }
                    this.userSeek_(a);
                };
                a.enable = function b() {
                    c.prototype.enable.call(this);
                    var a = this.getChild("mouseTimeDisplay");
                    if (!a) {
                        return;
                    }
                    a.show();
                };
                a.disable = function b() {
                    c.prototype.disable.call(this);
                    var a = this.getChild("mouseTimeDisplay");
                    if (!a) {
                        return;
                    }
                    a.hide();
                };
                a.handleMouseUp = function b(a) {
                    c.prototype.handleMouseUp.call(this, a);
                    if (a) {
                        a.stopPropagation();
                    }
                    this.player_.scrubbing(false);
                    this.player_.trigger({
                        type: "timeupdate",
                        target: this,
                        manuallyTriggered: true
                    });
                    if (this.videoWasPlaying) {
                        eH(this.player_.play());
                    } else {
                        this.update_();
                    }
                };
                a.stepForward = function a() {
                    this.userSeek_(this.player_.currentTime() + fk);
                };
                a.stepBack = function a() {
                    this.userSeek_(this.player_.currentTime() - fk);
                };
                a.handleAction = function a(b) {
                    if (this.player_.paused()) {
                        this.player_.play();
                    } else {
                        this.player_.pause();
                    }
                };
                a.handleKeyDown = function e(a) {
                    var b = this.player_.liveTracker;
                    if (dH().isEventKey(a, "Space") || dH().isEventKey(a, "Enter")) {
                        a.preventDefault();
                        a.stopPropagation();
                        this.handleAction(a);
                    } else if (dH().isEventKey(a, "Home")) {
                        a.preventDefault();
                        a.stopPropagation();
                        this.userSeek_(0);
                    } else if (dH().isEventKey(a, "End")) {
                        a.preventDefault();
                        a.stopPropagation();
                        if (b && b.isLive()) {
                            this.userSeek_(b.liveCurrentTime());
                        } else {
                            this.userSeek_(this.player_.duration());
                        }
                    } else if (/^[0-9]$/.test(dH()(a))) {
                        a.preventDefault();
                        a.stopPropagation();
                        var d = ((dH().codes[dH()(a)] - dH().codes[0]) * 10.0) / 100.0;
                        if (b && b.isLive()) {
                            this.userSeek_(b.seekableStart() + b.liveWindow() * d);
                        } else {
                            this.userSeek_(this.player_.duration() * d);
                        }
                    } else if (dH().isEventKey(a, "PgDn")) {
                        a.preventDefault();
                        a.stopPropagation();
                        this.userSeek_(this.player_.currentTime() - fk * fl);
                    } else if (dH().isEventKey(a, "PgUp")) {
                        a.preventDefault();
                        a.stopPropagation();
                        this.userSeek_(this.player_.currentTime() + fk * fl);
                    } else {
                        c.prototype.handleKeyDown.call(this, a);
                    }
                };
                a.dispose = function a() {
                    this.disableInterval_();
                    this.off(this.player_, [
                        "ended",
                        "durationchange",
                        "timeupdate"
                    ], this.update);
                    if (this.player_.liveTracker) {
                        this.off(this.player_.liveTracker, "liveedgechange", this.update);
                    }
                    this.off(this.player_, [
                        "playing"
                    ], this.enableIntervalHandler_);
                    this.off(this.player_, [
                        "ended",
                        "pause",
                        "waiting"
                    ], this.disableIntervalHandler_);
                    if ("hidden" in J() && "visibilityState" in J()) {
                        this.off(J(), "visibilitychange", this.toggleVisibility_);
                    }
                    c.prototype.dispose.call(this);
                };
                return b;
            })(W);
            Y.prototype.options_ = {
                children: [
                    "loadProgressBar",
                    "playProgressBar"
                ],
                barName: "playProgressBar"
            };
            if (!o && !n) {
                Y.prototype.options_.children.splice(1, 0, "mouseTimeDisplay");
            }
            a.registerComponent("SeekBar", Y);
            var aF = (function(c) {
                (0, dF.Z)(b, c);
                function b(b, d) {
                    var a;
                    a = c.call(this, b, d) || this;
                    a.handleMouseMove = eh(b5((0, dE.Z)(a), a.handleMouseMove), eg);
                    a.throttledHandleMouseSeek = eh(b5((0, dE.Z)(a), a.handleMouseSeek), eg);
                    a.handleMouseUpHandler_ = function(b) {
                        return a.handleMouseUp(b);
                    };
                    a.handleMouseDownHandler_ = function(b) {
                        return a.handleMouseDown(b);
                    };
                    a.enable();
                    return a;
                }
                var a = b.prototype;
                a.createEl = function a() {
                    return c.prototype.createEl.call(this, "div", {
                        className: "vjs-progress-control vjs-control"
                    });
                };
                a.handleMouseMove = function h(g) {
                    var a = this.getChild("seekBar");
                    if (!a) {
                        return;
                    }
                    var b = a.getChild("playProgressBar");
                    var c = a.getChild("mouseTimeDisplay");
                    if (!b && !c) {
                        return;
                    }
                    var e = a.el();
                    var f = bR(e);
                    var d = bS(e, g).x;
                    d = fi(d, 0, 1);
                    if (c) {
                        c.update(f, d);
                    }
                    if (b) {
                        b.update(f, a.getProgress());
                    }
                };
                a.handleMouseSeek = function c(b) {
                    var a = this.getChild("seekBar");
                    if (a) {
                        a.handleMouseMove(b);
                    }
                };
                a.enabled = function a() {
                    return this.enabled_;
                };
                a.disable = function b() {
                    this.children().forEach(function(a) {
                        return a.disable && a.disable();
                    });
                    if (!this.enabled()) {
                        return;
                    }
                    this.off([
                        "mousedown",
                        "touchstart"
                    ], this.handleMouseDownHandler_);
                    this.off(this.el_, "mousemove", this.handleMouseMove);
                    this.removeListenersAddedOnMousedownAndTouchstart();
                    this.addClass("disabled");
                    this.enabled_ = false;
                    if (this.player_.scrubbing()) {
                        var a = this.getChild("seekBar");
                        this.player_.scrubbing(false);
                        if (a.videoWasPlaying) {
                            eH(this.player_.play());
                        }
                    }
                };
                a.enable = function a() {
                    this.children().forEach(function(a) {
                        return a.enable && a.enable();
                    });
                    if (this.enabled()) {
                        return;
                    }
                    this.on([
                        "mousedown",
                        "touchstart"
                    ], this.handleMouseDownHandler_);
                    this.on(this.el_, "mousemove", this.handleMouseMove);
                    this.removeClass("disabled");
                    this.enabled_ = true;
                };
                a.removeListenersAddedOnMousedownAndTouchstart = function b() {
                    var a = this.el_.ownerDocument;
                    this.off(a, "mousemove", this.throttledHandleMouseSeek);
                    this.off(a, "touchmove", this.throttledHandleMouseSeek);
                    this.off(a, "mouseup", this.handleMouseUpHandler_);
                    this.off(a, "touchend", this.handleMouseUpHandler_);
                };
                a.handleMouseDown = function d(c) {
                    var a = this.el_.ownerDocument;
                    var b = this.getChild("seekBar");
                    if (b) {
                        b.handleMouseDown(c);
                    }
                    this.on(a, "mousemove", this.throttledHandleMouseSeek);
                    this.on(a, "touchmove", this.throttledHandleMouseSeek);
                    this.on(a, "mouseup", this.handleMouseUpHandler_);
                    this.on(a, "touchend", this.handleMouseUpHandler_);
                };
                a.handleMouseUp = function c(b) {
                    var a = this.getChild("seekBar");
                    if (a) {
                        a.handleMouseUp(b);
                    }
                    this.removeListenersAddedOnMousedownAndTouchstart();
                };
                return b;
            })(a);
            aF.prototype.options_ = {
                children: [
                    "seekBar"
                ]
            };
            a.registerComponent("ProgressControl", aF);
            var aG = (function(c) {
                (0, dF.Z)(b, c);
                function b(b, d) {
                    var a;
                    a = c.call(this, b, d) || this;
                    a.on(b, [
                        "enterpictureinpicture",
                        "leavepictureinpicture"
                    ], function(b) {
                        return a.handlePictureInPictureChange(b);
                    });
                    a.on(b, [
                        "disablepictureinpicturechanged",
                        "loadedmetadata"
                    ], function(b) {
                        return a.handlePictureInPictureEnabledChange(b);
                    });
                    a.disable();
                    return a;
                }
                var a = b.prototype;
                a.buildCSSClass = function a() {
                    return ("vjs-picture-in-picture-control " + c.prototype.buildCSSClass.call(this));
                };
                a.handlePictureInPictureEnabledChange = function a() {
                    if (J().pictureInPictureEnabled && this.player_.disablePictureInPicture() === false) {
                        this.enable();
                    } else {
                        this.disable();
                    }
                };
                a.handlePictureInPictureChange = function a(b) {
                    if (this.player_.isInPictureInPicture()) {
                        this.controlText("Exit Picture-in-Picture");
                    } else {
                        this.controlText("Picture-in-Picture");
                    }
                    this.handlePictureInPictureEnabledChange();
                };
                a.handleClick = function a(b) {
                    if (!this.player_.isInPictureInPicture()) {
                        this.player_.requestPictureInPicture();
                    } else {
                        this.player_.exitPictureInPicture();
                    }
                };
                return b;
            })(l);
            aG.prototype.controlText_ = "Picture-in-Picture";
            a.registerComponent("PictureInPictureToggle", aG);
            var aH = (function(c) {
                (0, dF.Z)(b, c);
                function b(b, d) {
                    var a;
                    a = c.call(this, b, d) || this;
                    a.on(b, "fullscreenchange", function(b) {
                        return a.handleFullscreenChange(b);
                    });
                    if (J()[b.fsApi_.fullscreenEnabled] === false) {
                        a.disable();
                    }
                    return a;
                }
                var a = b.prototype;
                a.buildCSSClass = function a() {
                    return ("vjs-fullscreen-control " + c.prototype.buildCSSClass.call(this));
                };
                a.handleFullscreenChange = function a(b) {
                    if (this.player_.isFullscreen()) {
                        this.controlText("Non-Fullscreen");
                    } else {
                        this.controlText("Fullscreen");
                    }
                };
                a.handleClick = function a(b) {
                    if (!this.player_.isFullscreen()) {
                        this.player_.requestFullscreen();
                    } else {
                        this.player_.exitFullscreen();
                    }
                };
                return b;
            })(l);
            aH.prototype.controlText_ = "Fullscreen";
            a.registerComponent("FullscreenToggle", aH);
            var fm = function c(b, a) {
                if (a.tech_ && !a.tech_.featuresVolumeControl) {
                    b.addClass("vjs-hidden");
                }
                b.on(a, "loadstart", function() {
                    if (!a.tech_.featuresVolumeControl) {
                        b.addClass("vjs-hidden");
                    } else {
                        b.removeClass("vjs-hidden");
                    }
                });
            };
            var cD = (function(b) {
                (0, dF.Z)(a, b);
                function a() {
                    return b.apply(this, arguments) || this;
                }
                var c = a.prototype;
                c.createEl = function c() {
                    var a = b.prototype.createEl.call(this, "div", {
                        className: "vjs-volume-level"
                    });
                    a.appendChild(b.prototype.createEl.call(this, "span", {
                        className: "vjs-control-text"
                    }));
                    return a;
                };
                return a;
            })(a);
            a.registerComponent("VolumeLevel", cD);
            var cE = (function(c) {
                (0, dF.Z)(b, c);
                function b(b, d) {
                    var a;
                    a = c.call(this, b, d) || this;
                    a.update = eh(b5((0, dE.Z)(a), a.update), eg);
                    return a;
                }
                var a = b.prototype;
                a.createEl = function a() {
                    return c.prototype.createEl.call(this, "div", {
                        className: "vjs-volume-tooltip"
                    }, {
                        "aria-hidden": "true"
                    });
                };
                a.update = function k(b, h, i, j) {
                    if (!i) {
                        var c = bQ(this.el_);
                        var d = bQ(this.player_.el());
                        var e = b.width * h;
                        if (!d || !c) {
                            return;
                        }
                        var f = b.left - d.left + e;
                        var g = b.width - e + (d.right - b.right);
                        var a = c.width / 2;
                        if (f < a) {
                            a += a - f;
                        } else if (g < a) {
                            a = g;
                        }
                        if (a < 0) {
                            a = 0;
                        } else if (a > c.width) {
                            a = c.width;
                        }
                        this.el_.style.right = "-" + a + "px";
                    }
                    this.write(j + "%");
                };
                a.write = function b(a) {
                    bD(this.el_, a);
                };
                a.updateVolume = function a(b, c, d, e, f) {
                    var g = this;
                    this.requestNamedAnimationFrame("VolumeLevelTooltip#updateVolume", function() {
                        g.update(b, c, d, e.toFixed(0));
                        if (f) {
                            f();
                        }
                    });
                };
                return b;
            })(a);
            a.registerComponent("VolumeLevelTooltip", cE);
            var aI = (function(c) {
                (0, dF.Z)(a, c);
                function a(b, d) {
                    var a;
                    a = c.call(this, b, d) || this;
                    a.update = eh(b5((0, dE.Z)(a), a.update), eg);
                    return a;
                }
                var b = a.prototype;
                b.createEl = function a() {
                    return c.prototype.createEl.call(this, "div", {
                        className: "vjs-mouse-display"
                    });
                };
                b.update = function e(b, a, c) {
                    var f = this;
                    var d = 100 * a;
                    this.getChild("volumeLevelTooltip").updateVolume(b, a, c, d, function() {
                        if (c) {
                            f.el_.style.bottom = b.height * a + "px";
                        } else {
                            f.el_.style.left = b.width * a + "px";
                        }
                    });
                };
                return a;
            })(a);
            aI.prototype.options_ = {
                children: [
                    "volumeLevelTooltip"
                ]
            };
            a.registerComponent("MouseVolumeLevelDisplay", aI);
            var F = (function(c) {
                (0, dF.Z)(b, c);
                function b(b, d) {
                    var a;
                    a = c.call(this, b, d) || this;
                    a.on("slideractive", function(b) {
                        return a.updateLastVolume_(b);
                    });
                    a.on(b, "volumechange", function(b) {
                        return a.updateARIAAttributes(b);
                    });
                    b.ready(function() {
                        return a.updateARIAAttributes();
                    });
                    return a;
                }
                var a = b.prototype;
                a.createEl = function a() {
                    return c.prototype.createEl.call(this, "div", {
                        className: "vjs-volume-bar vjs-slider-bar"
                    }, {
                        "aria-label": this.localize("Volume Level"),
                        "aria-live": "polite"
                    });
                };
                a.handleMouseDown = function b(a) {
                    if (!bY(a)) {
                        return;
                    }
                    c.prototype.handleMouseDown.call(this, a);
                };
                a.handleMouseMove = function g(b) {
                    var c = this.getChild("mouseVolumeLevelDisplay");
                    if (c) {
                        var d = this.el();
                        var f = bQ(d);
                        var e = this.vertical();
                        var a = bS(d, b);
                        a = e ? a.y : a.x;
                        a = fi(a, 0, 1);
                        c.update(f, a, e);
                    }
                    if (!bY(b)) {
                        return;
                    }
                    this.checkMuted();
                    this.player_.volume(this.calculateDistance(b));
                };
                a.checkMuted = function a() {
                    if (this.player_.muted()) {
                        this.player_.muted(false);
                    }
                };
                a.getPercent = function a() {
                    if (this.player_.muted()) {
                        return 0;
                    }
                    return this.player_.volume();
                };
                a.stepForward = function a() {
                    this.checkMuted();
                    this.player_.volume(this.player_.volume() + 0.1);
                };
                a.stepBack = function a() {
                    this.checkMuted();
                    this.player_.volume(this.player_.volume() - 0.1);
                };
                a.updateARIAAttributes = function b(c) {
                    var a = this.player_.muted() ? 0 : this.volumeAsPercentage_();
                    this.el_.setAttribute("aria-valuenow", a);
                    this.el_.setAttribute("aria-valuetext", a + "%");
                };
                a.volumeAsPercentage_ = function a() {
                    return Math.round(this.player_.volume() * 100);
                };
                a.updateLastVolume_ = function a() {
                    var b = this;
                    var c = this.player_.volume();
                    this.one("sliderinactive", function() {
                        if (b.player_.volume() === 0) {
                            b.player_.lastVolume_(c);
                        }
                    });
                };
                return b;
            })(W);
            F.prototype.options_ = {
                children: [
                    "volumeLevel"
                ],
                barName: "volumeLevel"
            };
            if (!o && !n) {
                F.prototype.options_.children.splice(0, 0, "mouseVolumeLevelDisplay");
            }
            F.prototype.playerEvent = "volumechange";
            a.registerComponent("VolumeBar", F);
            var aJ = (function(c) {
                (0, dF.Z)(b, c);
                function b(d, b) {
                    var a;
                    if (b === void 0) {
                        b = {};
                    }
                    b.vertical = b.vertical || false;
                    if (typeof b.volumeBar === "undefined" || d0(b.volumeBar)) {
                        b.volumeBar = b.volumeBar || {};
                        b.volumeBar.vertical = b.vertical;
                    }
                    a = c.call(this, d, b) || this;
                    fm((0, dE.Z)(a), d);
                    a.throttledHandleMouseMove = eh(b5((0, dE.Z)(a), a.handleMouseMove), eg);
                    a.handleMouseUpHandler_ = function(b) {
                        return a.handleMouseUp(b);
                    };
                    a.on("mousedown", function(b) {
                        return a.handleMouseDown(b);
                    });
                    a.on("touchstart", function(b) {
                        return a.handleMouseDown(b);
                    });
                    a.on("mousemove", function(b) {
                        return a.handleMouseMove(b);
                    });
                    a.on(a.volumeBar, [
                        "focus",
                        "slideractive"
                    ], function() {
                        a.volumeBar.addClass("vjs-slider-active");
                        a.addClass("vjs-slider-active");
                        a.trigger("slideractive");
                    });
                    a.on(a.volumeBar, [
                        "blur",
                        "sliderinactive"
                    ], function() {
                        a.volumeBar.removeClass("vjs-slider-active");
                        a.removeClass("vjs-slider-active");
                        a.trigger("sliderinactive");
                    });
                    return a;
                }
                var a = b.prototype;
                a.createEl = function b() {
                    var a = "vjs-volume-horizontal";
                    if (this.options_.vertical) {
                        a = "vjs-volume-vertical";
                    }
                    return c.prototype.createEl.call(this, "div", {
                        className: "vjs-volume-control vjs-control " + a
                    });
                };
                a.handleMouseDown = function b(c) {
                    var a = this.el_.ownerDocument;
                    this.on(a, "mousemove", this.throttledHandleMouseMove);
                    this.on(a, "touchmove", this.throttledHandleMouseMove);
                    this.on(a, "mouseup", this.handleMouseUpHandler_);
                    this.on(a, "touchend", this.handleMouseUpHandler_);
                };
                a.handleMouseUp = function b(c) {
                    var a = this.el_.ownerDocument;
                    this.off(a, "mousemove", this.throttledHandleMouseMove);
                    this.off(a, "touchmove", this.throttledHandleMouseMove);
                    this.off(a, "mouseup", this.handleMouseUpHandler_);
                    this.off(a, "touchend", this.handleMouseUpHandler_);
                };
                a.handleMouseMove = function b(a) {
                    this.volumeBar.handleMouseMove(a);
                };
                return b;
            })(a);
            aJ.prototype.options_ = {
                children: [
                    "volumeBar"
                ]
            };
            a.registerComponent("VolumeControl", aJ);
            var fn = function c(b, a) {
                if (a.tech_ && !a.tech_.featuresMuteControl) {
                    b.addClass("vjs-hidden");
                }
                b.on(a, "loadstart", function() {
                    if (!a.tech_.featuresMuteControl) {
                        b.addClass("vjs-hidden");
                    } else {
                        b.removeClass("vjs-hidden");
                    }
                });
            };
            var aK = (function(c) {
                (0, dF.Z)(b, c);
                function b(b, d) {
                    var a;
                    a = c.call(this, b, d) || this;
                    fn((0, dE.Z)(a), b);
                    a.on(b, [
                        "loadstart",
                        "volumechange"
                    ], function(b) {
                        return a.update(b);
                    });
                    return a;
                }
                var a = b.prototype;
                a.buildCSSClass = function a() {
                    return ("vjs-mute-control " + c.prototype.buildCSSClass.call(this));
                };
                a.handleClick = function d(e) {
                    var b = this.player_.volume();
                    var a = this.player_.lastVolume_();
                    if (b === 0) {
                        var c = a < 0.1 ? 0.1 : a;
                        this.player_.volume(c);
                        this.player_.muted(false);
                    } else {
                        this.player_.muted(this.player_.muted() ? false : true);
                    }
                };
                a.update = function a(b) {
                    this.updateIcon_();
                    this.updateControlText_();
                };
                a.updateIcon_ = function d() {
                    var b = this.player_.volume();
                    var a = 3;
                    if (o && this.player_.tech_ && this.player_.tech_.el_) {
                        this.player_.muted(this.player_.tech_.el_.muted);
                    }
                    if (b === 0 || this.player_.muted()) {
                        a = 0;
                    } else if (b < 0.33) {
                        a = 1;
                    } else if (b < 0.67) {
                        a = 2;
                    }
                    for(var c = 0; c < 4; c++){
                        bH(this.el_, "vjs-vol-" + c);
                    }
                    bG(this.el_, "vjs-vol-" + a);
                };
                a.updateControlText_ = function c() {
                    var b = this.player_.muted() || this.player_.volume() === 0;
                    var a = b ? "Unmute" : "Mute";
                    if (this.controlText() !== a) {
                        this.controlText(a);
                    }
                };
                return b;
            })(l);
            aK.prototype.controlText_ = "Mute";
            a.registerComponent("MuteToggle", aK);
            var aL = (function(c) {
                (0, dF.Z)(b, c);
                function b(d, b) {
                    var a;
                    if (b === void 0) {
                        b = {};
                    }
                    if (typeof b.inline !== "undefined") {
                        b.inline = b.inline;
                    } else {
                        b.inline = true;
                    }
                    if (typeof b.volumeControl === "undefined" || d0(b.volumeControl)) {
                        b.volumeControl = b.volumeControl || {};
                        b.volumeControl.vertical = !b.inline;
                    }
                    a = c.call(this, d, b) || this;
                    a.handleKeyPressHandler_ = function(b) {
                        return a.handleKeyPress(b);
                    };
                    a.on(d, [
                        "loadstart"
                    ], function(b) {
                        return a.volumePanelState_(b);
                    });
                    a.on(a.muteToggle, "keyup", function(b) {
                        return a.handleKeyPress(b);
                    });
                    a.on(a.volumeControl, "keyup", function(b) {
                        return a.handleVolumeControlKeyUp(b);
                    });
                    a.on("keydown", function(b) {
                        return a.handleKeyPress(b);
                    });
                    a.on("mouseover", function(b) {
                        return a.handleMouseOver(b);
                    });
                    a.on("mouseout", function(b) {
                        return a.handleMouseOut(b);
                    });
                    a.on(a.volumeControl, [
                        "slideractive"
                    ], a.sliderActive_);
                    a.on(a.volumeControl, [
                        "sliderinactive"
                    ], a.sliderInactive_);
                    return a;
                }
                var a = b.prototype;
                a.sliderActive_ = function a() {
                    this.addClass("vjs-slider-active");
                };
                a.sliderInactive_ = function a() {
                    this.removeClass("vjs-slider-active");
                };
                a.volumePanelState_ = function a() {
                    if (this.volumeControl.hasClass("vjs-hidden") && this.muteToggle.hasClass("vjs-hidden")) {
                        this.addClass("vjs-hidden");
                    }
                    if (this.volumeControl.hasClass("vjs-hidden") && !this.muteToggle.hasClass("vjs-hidden")) {
                        this.addClass("vjs-mute-toggle-only");
                    }
                };
                a.createEl = function b() {
                    var a = "vjs-volume-panel-horizontal";
                    if (!this.options_.inline) {
                        a = "vjs-volume-panel-vertical";
                    }
                    return c.prototype.createEl.call(this, "div", {
                        className: "vjs-volume-panel vjs-control " + a
                    });
                };
                a.dispose = function a() {
                    this.handleMouseOut();
                    c.prototype.dispose.call(this);
                };
                a.handleVolumeControlKeyUp = function b(a) {
                    if (dH().isEventKey(a, "Esc")) {
                        this.muteToggle.focus();
                    }
                };
                a.handleMouseOver = function a(b) {
                    this.addClass("vjs-hover");
                    as(J(), "keyup", this.handleKeyPressHandler_);
                };
                a.handleMouseOut = function a(b) {
                    this.removeClass("vjs-hover");
                    at(J(), "keyup", this.handleKeyPressHandler_);
                };
                a.handleKeyPress = function b(a) {
                    if (dH().isEventKey(a, "Esc")) {
                        this.handleMouseOut();
                    }
                };
                return b;
            })(a);
            aL.prototype.options_ = {
                children: [
                    "muteToggle",
                    "volumeControl"
                ]
            };
            a.registerComponent("VolumePanel", aL);
            var cF = (function(d) {
                (0, dF.Z)(c, d);
                function c(c, b) {
                    var a;
                    a = d.call(this, c, b) || this;
                    if (b) {
                        a.menuButton_ = b.menuButton;
                    }
                    a.focusedChild_ = -1;
                    a.on("keydown", function(b) {
                        return a.handleKeyDown(b);
                    });
                    a.boundHandleBlur_ = function(b) {
                        return a.handleBlur(b);
                    };
                    a.boundHandleTapClick_ = function(b) {
                        return a.handleTapClick(b);
                    };
                    return a;
                }
                var b = c.prototype;
                b.addEventListenerForItem = function c(b) {
                    if (!(b instanceof a)) {
                        return;
                    }
                    this.on(b, "blur", this.boundHandleBlur_);
                    this.on(b, [
                        "tap",
                        "click"
                    ], this.boundHandleTapClick_);
                };
                b.removeEventListenerForItem = function c(b) {
                    if (!(b instanceof a)) {
                        return;
                    }
                    this.off(b, "blur", this.boundHandleBlur_);
                    this.off(b, [
                        "tap",
                        "click"
                    ], this.boundHandleTapClick_);
                };
                b.removeChild = function b(a) {
                    if (typeof a === "string") {
                        a = this.getChild(a);
                    }
                    this.removeEventListenerForItem(a);
                    d.prototype.removeChild.call(this, a);
                };
                b.addItem = function c(b) {
                    var a = this.addChild(b);
                    if (a) {
                        this.addEventListenerForItem(a);
                    }
                };
                b.createEl = function c() {
                    var b = this.options_.contentElType || "ul";
                    this.contentEl_ = bC(b, {
                        className: "vjs-menu-content"
                    });
                    this.contentEl_.setAttribute("role", "menu");
                    var a = d.prototype.createEl.call(this, "div", {
                        append: this.contentEl_,
                        className: "vjs-menu"
                    });
                    a.appendChild(this.contentEl_);
                    as(a, "click", function(a) {
                        a.preventDefault();
                        a.stopImmediatePropagation();
                    });
                    return a;
                };
                b.dispose = function a() {
                    this.contentEl_ = null;
                    this.boundHandleBlur_ = null;
                    this.boundHandleTapClick_ = null;
                    d.prototype.dispose.call(this);
                };
                b.handleBlur = function d(b) {
                    var c = b.relatedTarget || J().activeElement;
                    if (!this.children().some(function(a) {
                        return a.el() === c;
                    })) {
                        var a = this.menuButton_;
                        if (a && a.buttonPressed_ && c !== a.el().firstChild) {
                            a.unpressButton();
                        }
                    }
                };
                b.handleTapClick = function c(d) {
                    if (this.menuButton_) {
                        this.menuButton_.unpressButton();
                        var a = this.children();
                        if (!Array.isArray(a)) {
                            return;
                        }
                        var b = a.filter(function(a) {
                            return a.el() === d.target;
                        })[0];
                        if (!b) {
                            return;
                        }
                        if (b.name() !== "CaptionSettingsMenuItem") {
                            this.menuButton_.focus();
                        }
                    }
                };
                b.handleKeyDown = function b(a) {
                    if (dH().isEventKey(a, "Left") || dH().isEventKey(a, "Down")) {
                        a.preventDefault();
                        a.stopPropagation();
                        this.stepForward();
                    } else if (dH().isEventKey(a, "Right") || dH().isEventKey(a, "Up")) {
                        a.preventDefault();
                        a.stopPropagation();
                        this.stepBack();
                    }
                };
                b.stepForward = function b() {
                    var a = 0;
                    if (this.focusedChild_ !== undefined) {
                        a = this.focusedChild_ + 1;
                    }
                    this.focus(a);
                };
                b.stepBack = function b() {
                    var a = 0;
                    if (this.focusedChild_ !== undefined) {
                        a = this.focusedChild_ - 1;
                    }
                    this.focus(a);
                };
                b.focus = function d(a) {
                    if (a === void 0) {
                        a = 0;
                    }
                    var b = this.children().slice();
                    var c = b.length && b[0].hasClass("vjs-menu-title");
                    if (c) {
                        b.shift();
                    }
                    if (b.length > 0) {
                        if (a < 0) {
                            a = 0;
                        } else if (a >= b.length) {
                            a = b.length - 1;
                        }
                        this.focusedChild_ = a;
                        b[a].el_.focus();
                    }
                };
                return c;
            })(a);
            a.registerComponent("Menu", cF);
            var Z = (function(d) {
                (0, dF.Z)(c, d);
                function c(c, b) {
                    var a;
                    if (b === void 0) {
                        b = {};
                    }
                    a = d.call(this, c, b) || this;
                    a.menuButton_ = new l(c, b);
                    a.menuButton_.controlText(a.controlText_);
                    a.menuButton_.el_.setAttribute("aria-haspopup", "true");
                    var f = l.prototype.buildCSSClass();
                    a.menuButton_.el_.className = a.buildCSSClass() + " " + f;
                    a.menuButton_.removeClass("vjs-control");
                    a.addChild(a.menuButton_);
                    a.update();
                    a.enabled_ = true;
                    var e = function c(b) {
                        return a.handleClick(b);
                    };
                    a.handleMenuKeyUp_ = function(b) {
                        return a.handleMenuKeyUp(b);
                    };
                    a.on(a.menuButton_, "tap", e);
                    a.on(a.menuButton_, "click", e);
                    a.on(a.menuButton_, "keydown", function(b) {
                        return a.handleKeyDown(b);
                    });
                    a.on(a.menuButton_, "mouseenter", function() {
                        a.addClass("vjs-hover");
                        a.menu.show();
                        as(J(), "keyup", a.handleMenuKeyUp_);
                    });
                    a.on("mouseleave", function(b) {
                        return a.handleMouseLeave(b);
                    });
                    a.on("keydown", function(b) {
                        return a.handleSubmenuKeyDown(b);
                    });
                    return a;
                }
                var b = c.prototype;
                b.update = function b() {
                    var a = this.createMenu();
                    if (this.menu) {
                        this.menu.dispose();
                        this.removeChild(this.menu);
                    }
                    this.menu = a;
                    this.addChild(a);
                    this.buttonPressed_ = false;
                    this.menuButton_.el_.setAttribute("aria-expanded", "false");
                    if (this.items && this.items.length <= this.hideThreshold_) {
                        this.hide();
                    } else {
                        this.show();
                    }
                };
                b.createMenu = function f() {
                    var b = new cF(this.player_, {
                        menuButton: this
                    });
                    this.hideThreshold_ = 0;
                    if (this.options_.title) {
                        var d = bC("li", {
                            className: "vjs-menu-title",
                            textContent: ey(this.options_.title),
                            tabIndex: -1
                        });
                        var e = new a(this.player_, {
                            el: d
                        });
                        b.addItem(e);
                    }
                    this.items = this.createItems();
                    if (this.items) {
                        for(var c = 0; c < this.items.length; c++){
                            b.addItem(this.items[c]);
                        }
                    }
                    return b;
                };
                b.createItems = function a() {};
                b.createEl = function a() {
                    return d.prototype.createEl.call(this, "div", {
                        className: this.buildWrapperCSSClass()
                    }, {});
                };
                b.buildWrapperCSSClass = function c() {
                    var a = "vjs-menu-button";
                    if (this.options_.inline === true) {
                        a += "-inline";
                    } else {
                        a += "-popup";
                    }
                    var b = l.prototype.buildCSSClass();
                    return ("vjs-menu-button " + a + " " + b + " " + d.prototype.buildCSSClass.call(this));
                };
                b.buildCSSClass = function b() {
                    var a = "vjs-menu-button";
                    if (this.options_.inline === true) {
                        a += "-inline";
                    } else {
                        a += "-popup";
                    }
                    return ("vjs-menu-button " + a + " " + d.prototype.buildCSSClass.call(this));
                };
                b.controlText = function c(b, a) {
                    if (a === void 0) {
                        a = this.menuButton_.el();
                    }
                    return this.menuButton_.controlText(b, a);
                };
                b.dispose = function a() {
                    this.handleMouseLeave();
                    d.prototype.dispose.call(this);
                };
                b.handleClick = function a(b) {
                    if (this.buttonPressed_) {
                        this.unpressButton();
                    } else {
                        this.pressButton();
                    }
                };
                b.handleMouseLeave = function a(b) {
                    this.removeClass("vjs-hover");
                    at(J(), "keyup", this.handleMenuKeyUp_);
                };
                b.focus = function a() {
                    this.menuButton_.focus();
                };
                b.blur = function a() {
                    this.menuButton_.blur();
                };
                b.handleKeyDown = function b(a) {
                    if (dH().isEventKey(a, "Esc") || dH().isEventKey(a, "Tab")) {
                        if (this.buttonPressed_) {
                            this.unpressButton();
                        }
                        if (!dH().isEventKey(a, "Tab")) {
                            a.preventDefault();
                            this.menuButton_.focus();
                        }
                    } else if (dH().isEventKey(a, "Up") || dH().isEventKey(a, "Down")) {
                        if (!this.buttonPressed_) {
                            a.preventDefault();
                            this.pressButton();
                        }
                    }
                };
                b.handleMenuKeyUp = function b(a) {
                    if (dH().isEventKey(a, "Esc") || dH().isEventKey(a, "Tab")) {
                        this.removeClass("vjs-hover");
                    }
                };
                b.handleSubmenuKeyPress = function b(a) {
                    this.handleSubmenuKeyDown(a);
                };
                b.handleSubmenuKeyDown = function b(a) {
                    if (dH().isEventKey(a, "Esc") || dH().isEventKey(a, "Tab")) {
                        if (this.buttonPressed_) {
                            this.unpressButton();
                        }
                        if (!dH().isEventKey(a, "Tab")) {
                            a.preventDefault();
                            this.menuButton_.focus();
                        }
                    }
                };
                b.pressButton = function a() {
                    if (this.enabled_) {
                        this.buttonPressed_ = true;
                        this.menu.show();
                        this.menu.lockShowing();
                        this.menuButton_.el_.setAttribute("aria-expanded", "true");
                        if (o && bB()) {
                            return;
                        }
                        this.menu.focus();
                    }
                };
                b.unpressButton = function a() {
                    if (this.enabled_) {
                        this.buttonPressed_ = false;
                        this.menu.unlockShowing();
                        this.menu.hide();
                        this.menuButton_.el_.setAttribute("aria-expanded", "false");
                    }
                };
                b.disable = function a() {
                    this.unpressButton();
                    this.enabled_ = false;
                    this.addClass("vjs-disabled");
                    this.menuButton_.disable();
                };
                b.enable = function a() {
                    this.enabled_ = true;
                    this.removeClass("vjs-disabled");
                    this.menuButton_.enable();
                };
                return c;
            })(a);
            a.registerComponent("MenuButton", Z);
            var $ = (function(a) {
                (0, dF.Z)(b, a);
                function b(f, e) {
                    var b;
                    var c = e.tracks;
                    b = a.call(this, f, e) || this;
                    if (b.items.length <= 1) {
                        b.hide();
                    }
                    if (!c) {
                        return (0, dE.Z)(b);
                    }
                    var d = b5((0, dE.Z)(b), b.update);
                    c.addEventListener("removetrack", d);
                    c.addEventListener("addtrack", d);
                    c.addEventListener("labelchange", d);
                    b.player_.on("ready", d);
                    b.player_.on("dispose", function() {
                        c.removeEventListener("removetrack", d);
                        c.removeEventListener("addtrack", d);
                        c.removeEventListener("labelchange", d);
                    });
                    return b;
                }
                return b;
            })(Z);
            a.registerComponent("TrackButton", $);
            var fo = [
                "Tab",
                "Esc",
                "Up",
                "Down",
                "Right",
                "Left"
            ];
            var x = (function(c) {
                (0, dF.Z)(b, c);
                function b(d, b) {
                    var a;
                    a = c.call(this, d, b) || this;
                    a.selectable = b.selectable;
                    a.isSelected_ = b.selected || false;
                    a.multiSelectable = b.multiSelectable;
                    a.selected(a.isSelected_);
                    if (a.selectable) {
                        if (a.multiSelectable) {
                            a.el_.setAttribute("role", "menuitemcheckbox");
                        } else {
                            a.el_.setAttribute("role", "menuitemradio");
                        }
                    } else {
                        a.el_.setAttribute("role", "menuitem");
                    }
                    return a;
                }
                var a = b.prototype;
                a.createEl = function e(f, b, d) {
                    this.nonIconControl = true;
                    var a = c.prototype.createEl.call(this, "li", d$({
                        className: "vjs-menu-item",
                        tabIndex: -1
                    }, b), d);
                    a.replaceChild(bC("span", {
                        className: "vjs-menu-item-text",
                        textContent: this.localize(this.options_.label)
                    }), a.querySelector(".vjs-icon-placeholder"));
                    return a;
                };
                a.handleKeyDown = function b(a) {
                    if (!fo.some(function(b) {
                        return dH().isEventKey(a, b);
                    })) {
                        c.prototype.handleKeyDown.call(this, a);
                    }
                };
                a.handleClick = function a(b) {
                    this.selected(true);
                };
                a.selected = function b(a) {
                    if (this.selectable) {
                        if (a) {
                            this.addClass("vjs-selected");
                            this.el_.setAttribute("aria-checked", "true");
                            this.controlText(", selected");
                            this.isSelected_ = true;
                        } else {
                            this.removeClass("vjs-selected");
                            this.el_.setAttribute("aria-checked", "false");
                            this.controlText("");
                            this.isSelected_ = false;
                        }
                    }
                };
                return b;
            })(E);
            a.registerComponent("MenuItem", x);
            var G = (function(c) {
                (0, dF.Z)(b, c);
                function b(e, b) {
                    var a;
                    var d = b.track;
                    var g = e.textTracks();
                    b.label = d.label || d.language || "Unknown";
                    b.selected = d.mode === "showing";
                    a = c.call(this, e, b) || this;
                    a.track = d;
                    a.kinds = (b.kinds || [
                        b.kind || a.track.kind
                    ]).filter(Boolean);
                    var h = function e() {
                        for(var c = arguments.length, d = new Array(c), b = 0; b < c; b++){
                            d[b] = arguments[b];
                        }
                        a.handleTracksChange.apply((0, dE.Z)(a), d);
                    };
                    var i = function e() {
                        for(var c = arguments.length, d = new Array(c), b = 0; b < c; b++){
                            d[b] = arguments[b];
                        }
                        a.handleSelectedLanguageChange.apply((0, dE.Z)(a), d);
                    };
                    e.on([
                        "loadstart",
                        "texttrackchange"
                    ], h);
                    g.addEventListener("change", h);
                    g.addEventListener("selectedlanguagechange", i);
                    a.on("dispose", function() {
                        e.off([
                            "loadstart",
                            "texttrackchange"
                        ], h);
                        g.removeEventListener("change", h);
                        g.removeEventListener("selectedlanguagechange", i);
                    });
                    if (g.onchange === undefined) {
                        var j;
                        a.on([
                            "tap",
                            "click"
                        ], function() {
                            if (typeof f().Event !== "object") {
                                try {
                                    j = new (f().Event)("change");
                                } catch (a) {}
                            }
                            if (!j) {
                                j = J().createEvent("Event");
                                j.initEvent("change", true, true);
                            }
                            g.dispatchEvent(j);
                        });
                    }
                    a.handleTracksChange();
                    return a;
                }
                var a = b.prototype;
                a.handleClick = function g(e) {
                    var f = this.track;
                    var b = this.player_.textTracks();
                    c.prototype.handleClick.call(this, e);
                    if (!b) {
                        return;
                    }
                    for(var d = 0; d < b.length; d++){
                        var a = b[d];
                        if (this.kinds.indexOf(a.kind) === -1) {
                            continue;
                        }
                        if (a === f) {
                            if (a.mode !== "showing") {
                                a.mode = "showing";
                            }
                        } else if (a.mode !== "disabled") {
                            a.mode = "disabled";
                        }
                    }
                };
                a.handleTracksChange = function b(c) {
                    var a = this.track.mode === "showing";
                    if (a !== this.isSelected_) {
                        this.selected(a);
                    }
                };
                a.handleSelectedLanguageChange = function b(c) {
                    if (this.track.mode === "showing") {
                        var a = this.player_.cache_.selectedLanguage;
                        if (a && a.enabled && a.language === this.track.language && a.kind !== this.track.kind) {
                            return;
                        }
                        this.player_.cache_.selectedLanguage = {
                            enabled: true,
                            language: this.track.language,
                            kind: this.track.kind
                        };
                    }
                };
                a.dispose = function a() {
                    this.track = null;
                    c.prototype.dispose.call(this);
                };
                return b;
            })(x);
            a.registerComponent("TextTrackMenuItem", G);
            var cG = (function(c) {
                (0, dF.Z)(a, c);
                function a(b, a) {
                    a.track = {
                        player: b,
                        kind: a.kind,
                        kinds: a.kinds,
                        default: false,
                        mode: "disabled"
                    };
                    if (!a.kinds) {
                        a.kinds = [
                            a.kind
                        ];
                    }
                    if (a.label) {
                        a.track.label = a.label;
                    } else {
                        a.track.label = a.kinds.join(" and ") + " off";
                    }
                    a.selectable = true;
                    a.multiSelectable = false;
                    return (c.call(this, b, a) || this);
                }
                var b = a.prototype;
                b.handleTracksChange = function f(g) {
                    var c = this.player().textTracks();
                    var a = true;
                    for(var b = 0, e = c.length; b < e; b++){
                        var d = c[b];
                        if (this.options_.kinds.indexOf(d.kind) > -1 && d.mode === "showing") {
                            a = false;
                            break;
                        }
                    }
                    if (a !== this.isSelected_) {
                        this.selected(a);
                    }
                };
                b.handleSelectedLanguageChange = function f(g) {
                    var b = this.player().textTracks();
                    var c = true;
                    for(var a = 0, e = b.length; a < e; a++){
                        var d = b[a];
                        if ([
                            "captions",
                            "descriptions",
                            "subtitles", 
                        ].indexOf(d.kind) > -1 && d.mode === "showing") {
                            c = false;
                            break;
                        }
                    }
                    if (c) {
                        this.player_.cache_.selectedLanguage = {
                            enabled: false
                        };
                    }
                };
                return a;
            })(G);
            a.registerComponent("OffTextTrackMenuItem", cG);
            var t = (function(b) {
                (0, dF.Z)(a, b);
                function a(c, a) {
                    if (a === void 0) {
                        a = {};
                    }
                    a.tracks = c.textTracks();
                    return b.call(this, c, a) || this;
                }
                var c = a.prototype;
                c.createItems = function h(a, b) {
                    if (a === void 0) {
                        a = [];
                    }
                    if (b === void 0) {
                        b = G;
                    }
                    var e;
                    if (this.label_) {
                        e = this.label_ + " off";
                    }
                    a.push(new cG(this.player_, {
                        kinds: this.kinds_,
                        kind: this.kind_,
                        label: e
                    }));
                    this.hideThreshold_ += 1;
                    var f = this.player_.textTracks();
                    if (!Array.isArray(this.kinds_)) {
                        this.kinds_ = [
                            this.kind_
                        ];
                    }
                    for(var c = 0; c < f.length; c++){
                        var d = f[c];
                        if (this.kinds_.indexOf(d.kind) > -1) {
                            var g = new b(this.player_, {
                                track: d,
                                kinds: this.kinds_,
                                kind: this.kind_,
                                selectable: true,
                                multiSelectable: false
                            });
                            g.addClass("vjs-" + d.kind + "-menu-item");
                            a.push(g);
                        }
                    }
                    return a;
                };
                return a;
            })($);
            a.registerComponent("TextTrackButton", t);
            var cH = (function(c) {
                (0, dF.Z)(a, c);
                function a(e, a) {
                    var b;
                    var f = a.track;
                    var d = a.cue;
                    var g = e.currentTime();
                    a.selectable = true;
                    a.multiSelectable = false;
                    a.label = d.text;
                    a.selected = d.startTime <= g && g < d.endTime;
                    b = c.call(this, e, a) || this;
                    b.track = f;
                    b.cue = d;
                    f.addEventListener("cuechange", b5((0, dE.Z)(b), b.update));
                    return b;
                }
                var b = a.prototype;
                b.handleClick = function a(b) {
                    c.prototype.handleClick.call(this);
                    this.player_.currentTime(this.cue.startTime);
                    this.update(this.cue.startTime);
                };
                b.update = function c(d) {
                    var a = this.cue;
                    var b = this.player_.currentTime();
                    this.selected(a.startTime <= b && b < a.endTime);
                };
                return a;
            })(x);
            a.registerComponent("ChaptersTrackMenuItem", cH);
            var _ = (function(c) {
                (0, dF.Z)(b, c);
                function b(a, b, d) {
                    return (c.call(this, a, b, d) || this);
                }
                var a = b.prototype;
                a.buildCSSClass = function a() {
                    return ("vjs-chapters-button " + c.prototype.buildCSSClass.call(this));
                };
                a.buildWrapperCSSClass = function a() {
                    return ("vjs-chapters-button " + c.prototype.buildWrapperCSSClass.call(this));
                };
                a.update = function b(a) {
                    if (!this.track_ || (a && (a.type === "addtrack" || a.type === "removetrack"))) {
                        this.setTrack(this.findChaptersTrack());
                    }
                    c.prototype.update.call(this);
                };
                a.setTrack = function d(a) {
                    if (this.track_ === a) {
                        return;
                    }
                    if (!this.updateHandler_) {
                        this.updateHandler_ = this.update.bind(this);
                    }
                    if (this.track_) {
                        var b = this.player_.remoteTextTrackEls().getTrackElementByTrack_(this.track_);
                        if (b) {
                            b.removeEventListener("load", this.updateHandler_);
                        }
                        this.track_ = null;
                    }
                    this.track_ = a;
                    if (this.track_) {
                        this.track_.mode = "hidden";
                        var c = this.player_.remoteTextTrackEls().getTrackElementByTrack_(this.track_);
                        if (c) {
                            c.addEventListener("load", this.updateHandler_);
                        }
                    }
                };
                a.findChaptersTrack = function d() {
                    var b = this.player_.textTracks() || [];
                    for(var a = b.length - 1; a >= 0; a--){
                        var c = b[a];
                        if (c.kind === this.kind_) {
                            return c;
                        }
                    }
                };
                a.getMenuCaption = function a() {
                    if (this.track_ && this.track_.label) {
                        return this.track_.label;
                    }
                    return this.localize(ey(this.kind_));
                };
                a.createMenu = function a() {
                    this.options_.title = this.getMenuCaption();
                    return c.prototype.createMenu.call(this);
                };
                a.createItems = function g() {
                    var a = [];
                    if (!this.track_) {
                        return a;
                    }
                    var b = this.track_.cues;
                    if (!b) {
                        return a;
                    }
                    for(var c = 0, d = b.length; c < d; c++){
                        var e = b[c];
                        var f = new cH(this.player_, {
                            track: this.track_,
                            cue: e
                        });
                        a.push(f);
                    }
                    return a;
                };
                return b;
            })(t);
            _.prototype.kind_ = "chapters";
            _.prototype.controlText_ = "Chapters";
            a.registerComponent("ChaptersButton", _);
            var aa = (function(c) {
                (0, dF.Z)(b, c);
                function b(b, d, e) {
                    var a;
                    a = c.call(this, b, d, e) || this;
                    var f = b.textTracks();
                    var g = b5((0, dE.Z)(a), a.handleTracksChange);
                    f.addEventListener("change", g);
                    a.on("dispose", function() {
                        f.removeEventListener("change", g);
                    });
                    return a;
                }
                var a = b.prototype;
                a.handleTracksChange = function f(g) {
                    var b = this.player().textTracks();
                    var c = false;
                    for(var a = 0, e = b.length; a < e; a++){
                        var d = b[a];
                        if (d.kind !== this.kind_ && d.mode === "showing") {
                            c = true;
                            break;
                        }
                    }
                    if (c) {
                        this.disable();
                    } else {
                        this.enable();
                    }
                };
                a.buildCSSClass = function a() {
                    return ("vjs-descriptions-button " + c.prototype.buildCSSClass.call(this));
                };
                a.buildWrapperCSSClass = function a() {
                    return ("vjs-descriptions-button " + c.prototype.buildWrapperCSSClass.call(this));
                };
                return b;
            })(t);
            aa.prototype.kind_ = "descriptions";
            aa.prototype.controlText_ = "Descriptions";
            a.registerComponent("DescriptionsButton", aa);
            var ab = (function(c) {
                (0, dF.Z)(a, c);
                function a(a, b, d) {
                    return (c.call(this, a, b, d) || this);
                }
                var b = a.prototype;
                b.buildCSSClass = function a() {
                    return ("vjs-subtitles-button " + c.prototype.buildCSSClass.call(this));
                };
                b.buildWrapperCSSClass = function a() {
                    return ("vjs-subtitles-button " + c.prototype.buildWrapperCSSClass.call(this));
                };
                return a;
            })(t);
            ab.prototype.kind_ = "subtitles";
            ab.prototype.controlText_ = "Subtitles";
            a.registerComponent("SubtitlesButton", ab);
            var cI = (function(b) {
                (0, dF.Z)(a, b);
                function a(d, a) {
                    var c;
                    a.track = {
                        player: d,
                        kind: a.kind,
                        label: a.kind + " settings",
                        selectable: false,
                        default: false,
                        mode: "disabled"
                    };
                    a.selectable = false;
                    a.name = "CaptionSettingsMenuItem";
                    c = b.call(this, d, a) || this;
                    c.addClass("vjs-texttrack-settings");
                    c.controlText(", opens " + a.kind + " settings dialog");
                    return c;
                }
                var c = a.prototype;
                c.handleClick = function a(b) {
                    this.player().getChild("textTrackSettings").open();
                };
                return a;
            })(G);
            a.registerComponent("CaptionSettingsMenuItem", cI);
            var ac = (function(c) {
                (0, dF.Z)(b, c);
                function b(a, b, d) {
                    return (c.call(this, a, b, d) || this);
                }
                var a = b.prototype;
                a.buildCSSClass = function a() {
                    return ("vjs-captions-button " + c.prototype.buildCSSClass.call(this));
                };
                a.buildWrapperCSSClass = function a() {
                    return ("vjs-captions-button " + c.prototype.buildWrapperCSSClass.call(this));
                };
                a.createItems = function b() {
                    var a = [];
                    if (!(this.player().tech_ && this.player().tech_.featuresNativeTextTracks) && this.player().getChild("textTrackSettings")) {
                        a.push(new cI(this.player_, {
                            kind: this.kind_
                        }));
                        this.hideThreshold_ += 1;
                    }
                    return c.prototype.createItems.call(this, a);
                };
                return b;
            })(t);
            ac.prototype.kind_ = "captions";
            ac.prototype.controlText_ = "Captions";
            a.registerComponent("CaptionsButton", ac);
            var cJ = (function(b) {
                (0, dF.Z)(a, b);
                function a() {
                    return b.apply(this, arguments) || this;
                }
                var c = a.prototype;
                c.createEl = function g(d, e, f) {
                    var a = b.prototype.createEl.call(this, d, e, f);
                    var c = a.querySelector(".vjs-menu-item-text");
                    if (this.options_.track.kind === "captions") {
                        c.appendChild(bC("span", {
                            className: "vjs-icon-placeholder"
                        }, {
                            "aria-hidden": true
                        }));
                        c.appendChild(bC("span", {
                            className: "vjs-control-text",
                            textContent: " " + this.localize("Captions")
                        }));
                    }
                    return a;
                };
                return a;
            })(G);
            a.registerComponent("SubsCapsMenuItem", cJ);
            var ad = (function(c) {
                (0, dF.Z)(b, c);
                function b(d, b) {
                    var a;
                    if (b === void 0) {
                        b = {};
                    }
                    a = c.call(this, d, b) || this;
                    a.label_ = "subtitles";
                    if ([
                        "en",
                        "en-us",
                        "en-ca",
                        "fr-ca"
                    ].indexOf(a.player_.language_) > -1) {
                        a.label_ = "captions";
                    }
                    a.menuButton_.controlText(ey(a.label_));
                    return a;
                }
                var a = b.prototype;
                a.buildCSSClass = function a() {
                    return ("vjs-subs-caps-button " + c.prototype.buildCSSClass.call(this));
                };
                a.buildWrapperCSSClass = function a() {
                    return ("vjs-subs-caps-button " + c.prototype.buildWrapperCSSClass.call(this));
                };
                a.createItems = function b() {
                    var a = [];
                    if (!(this.player().tech_ && this.player().tech_.featuresNativeTextTracks) && this.player().getChild("textTrackSettings")) {
                        a.push(new cI(this.player_, {
                            kind: this.label_
                        }));
                        this.hideThreshold_ += 1;
                    }
                    a = c.prototype.createItems.call(this, a, cJ);
                    return a;
                };
                return b;
            })(t);
            ad.prototype.kinds_ = [
                "captions",
                "subtitles"
            ];
            ad.prototype.controlText_ = "Subtitles";
            a.registerComponent("SubsCapsButton", ad);
            var cK = (function(c) {
                (0, dF.Z)(b, c);
                function b(e, d) {
                    var a;
                    var b = d.track;
                    var f = e.audioTracks();
                    d.label = b.label || b.language || "Unknown";
                    d.selected = b.enabled;
                    a = c.call(this, e, d) || this;
                    a.track = b;
                    a.addClass("vjs-" + b.kind + "-menu-item");
                    var g = function e() {
                        for(var c = arguments.length, d = new Array(c), b = 0; b < c; b++){
                            d[b] = arguments[b];
                        }
                        a.handleTracksChange.apply((0, dE.Z)(a), d);
                    };
                    f.addEventListener("change", g);
                    a.on("dispose", function() {
                        f.removeEventListener("change", g);
                    });
                    return a;
                }
                var a = b.prototype;
                a.createEl = function g(d, e, f) {
                    var a = c.prototype.createEl.call(this, d, e, f);
                    var b = a.querySelector(".vjs-menu-item-text");
                    if (this.options_.track.kind === "main-desc") {
                        b.appendChild(c.prototype.createEl.call(this, "span", {
                            className: "vjs-icon-placeholder"
                        }, {
                            "aria-hidden": true
                        }));
                        b.appendChild(c.prototype.createEl.call(this, "span", {
                            className: "vjs-control-text",
                            textContent: this.localize("Descriptions")
                        }));
                    }
                    return a;
                };
                a.handleClick = function b(a) {
                    c.prototype.handleClick.call(this, a);
                    this.track.enabled = true;
                };
                a.handleTracksChange = function a(b) {
                    this.selected(this.track.enabled);
                };
                return b;
            })(x);
            a.registerComponent("AudioTrackMenuItem", cK);
            var aM = (function(c) {
                (0, dF.Z)(b, c);
                function b(b, a) {
                    if (a === void 0) {
                        a = {};
                    }
                    a.tracks = b.audioTracks();
                    return c.call(this, b, a) || this;
                }
                var a = b.prototype;
                a.buildCSSClass = function a() {
                    return ("vjs-audio-button " + c.prototype.buildCSSClass.call(this));
                };
                a.buildWrapperCSSClass = function a() {
                    return ("vjs-audio-button " + c.prototype.buildWrapperCSSClass.call(this));
                };
                a.createItems = function e(a) {
                    if (a === void 0) {
                        a = [];
                    }
                    this.hideThreshold_ = 1;
                    var c = this.player_.audioTracks();
                    for(var b = 0; b < c.length; b++){
                        var d = c[b];
                        a.push(new cK(this.player_, {
                            track: d,
                            selectable: true,
                            multiSelectable: false
                        }));
                    }
                    return a;
                };
                return b;
            })($);
            aM.prototype.controlText_ = "Audio Track";
            a.registerComponent("AudioTrackButton", aM);
            var aN = (function(c) {
                (0, dF.Z)(a, c);
                function a(d, a) {
                    var b;
                    var e = a.rate;
                    var f = parseFloat(e, 10);
                    a.label = e;
                    a.selected = f === d.playbackRate();
                    a.selectable = true;
                    a.multiSelectable = false;
                    b = c.call(this, d, a) || this;
                    b.label = e;
                    b.rate = f;
                    b.on(d, "ratechange", function(a) {
                        return b.update(a);
                    });
                    return b;
                }
                var b = a.prototype;
                b.handleClick = function a(b) {
                    c.prototype.handleClick.call(this);
                    this.player().playbackRate(this.rate);
                };
                b.update = function a(b) {
                    this.selected(this.player().playbackRate() === this.rate);
                };
                return a;
            })(x);
            aN.prototype.contentElType = "button";
            a.registerComponent("PlaybackRateMenuItem", aN);
            var aO = (function(c) {
                (0, dF.Z)(b, c);
                function b(b, d) {
                    var a;
                    a = c.call(this, b, d) || this;
                    a.menuButton_.el_.setAttribute("aria-describedby", a.labelElId_);
                    a.updateVisibility();
                    a.updateLabel();
                    a.on(b, "loadstart", function(b) {
                        return a.updateVisibility(b);
                    });
                    a.on(b, "ratechange", function(b) {
                        return a.updateLabel(b);
                    });
                    a.on(b, "playbackrateschange", function(b) {
                        return a.handlePlaybackRateschange(b);
                    });
                    return a;
                }
                var a = b.prototype;
                a.createEl = function b() {
                    var a = c.prototype.createEl.call(this);
                    this.labelElId_ = "vjs-playback-rate-value-label-" + this.id_;
                    this.labelEl_ = bC("div", {
                        className: "vjs-playback-rate-value",
                        id: this.labelElId_,
                        textContent: "1x"
                    });
                    a.appendChild(this.labelEl_);
                    return a;
                };
                a.dispose = function a() {
                    this.labelEl_ = null;
                    c.prototype.dispose.call(this);
                };
                a.buildCSSClass = function a() {
                    return ("vjs-playback-rate " + c.prototype.buildCSSClass.call(this));
                };
                a.buildWrapperCSSClass = function a() {
                    return ("vjs-playback-rate " + c.prototype.buildWrapperCSSClass.call(this));
                };
                a.createItems = function d() {
                    var b = this.playbackRates();
                    var c = [];
                    for(var a = b.length - 1; a >= 0; a--){
                        c.push(new aN(this.player(), {
                            rate: b[a] + "x"
                        }));
                    }
                    return c;
                };
                a.updateARIAAttributes = function a() {
                    this.el().setAttribute("aria-valuenow", this.player().playbackRate());
                };
                a.handleClick = function e(f) {
                    var d = this.player().playbackRate();
                    var a = this.playbackRates();
                    var c = a[0];
                    for(var b = 0; b < a.length; b++){
                        if (a[b] > d) {
                            c = a[b];
                            break;
                        }
                    }
                    this.player().playbackRate(c);
                };
                a.handlePlaybackRateschange = function a(b) {
                    this.update();
                };
                a.playbackRates = function b() {
                    var a = this.player();
                    return ((a.playbackRates && a.playbackRates()) || []);
                };
                a.playbackRateSupported = function a() {
                    return (this.player().tech_ && this.player().tech_.featuresPlaybackRate && this.playbackRates() && this.playbackRates().length > 0);
                };
                a.updateVisibility = function a(b) {
                    if (this.playbackRateSupported()) {
                        this.removeClass("vjs-hidden");
                    } else {
                        this.addClass("vjs-hidden");
                    }
                };
                a.updateLabel = function a(b) {
                    if (this.playbackRateSupported()) {
                        this.labelEl_.textContent = this.player().playbackRate() + "x";
                    }
                };
                return b;
            })(Z);
            aO.prototype.controlText_ = "Playback Rate";
            a.registerComponent("PlaybackRateMenuButton", aO);
            var aP = (function(c) {
                (0, dF.Z)(a, c);
                function a() {
                    return c.apply(this, arguments) || this;
                }
                var b = a.prototype;
                b.buildCSSClass = function a() {
                    return ("vjs-spacer " + c.prototype.buildCSSClass.call(this));
                };
                b.createEl = function e(b, a, d) {
                    if (b === void 0) {
                        b = "div";
                    }
                    if (a === void 0) {
                        a = {};
                    }
                    if (d === void 0) {
                        d = {};
                    }
                    if (!a.className) {
                        a.className = this.buildCSSClass();
                    }
                    return c.prototype.createEl.call(this, b, a, d);
                };
                return a;
            })(a);
            a.registerComponent("Spacer", aP);
            var cL = (function(c) {
                (0, dF.Z)(a, c);
                function a() {
                    return c.apply(this, arguments) || this;
                }
                var b = a.prototype;
                b.buildCSSClass = function a() {
                    return ("vjs-custom-control-spacer " + c.prototype.buildCSSClass.call(this));
                };
                b.createEl = function a() {
                    return c.prototype.createEl.call(this, "div", {
                        className: this.buildCSSClass(),
                        textContent: "\xA0"
                    });
                };
                return a;
            })(aP);
            a.registerComponent("CustomControlSpacer", cL);
            var H = (function(b) {
                (0, dF.Z)(a, b);
                function a() {
                    return b.apply(this, arguments) || this;
                }
                var c = a.prototype;
                c.createEl = function a() {
                    return b.prototype.createEl.call(this, "div", {
                        className: "vjs-control-bar",
                        dir: "ltr"
                    });
                };
                return a;
            })(a);
            H.prototype.options_ = {
                children: [
                    "playToggle",
                    "volumePanel",
                    "currentTimeDisplay",
                    "timeDivider",
                    "durationDisplay",
                    "progressControl",
                    "liveDisplay",
                    "seekToLive",
                    "remainingTimeDisplay",
                    "customControlSpacer",
                    "playbackRateMenuButton",
                    "chaptersButton",
                    "descriptionsButton",
                    "subsCapsButton",
                    "audioTrackButton",
                    "fullscreenToggle", 
                ]
            };
            if ("exitPictureInPicture" in J()) {
                H.prototype.options_.children.splice(H.prototype.options_.children.length - 1, 0, "pictureInPictureToggle");
            }
            a.registerComponent("ControlBar", H);
            var aQ = (function(c) {
                (0, dF.Z)(a, c);
                function a(b, d) {
                    var a;
                    a = c.call(this, b, d) || this;
                    a.on(b, "error", function(b) {
                        return a.open(b);
                    });
                    return a;
                }
                var b = a.prototype;
                b.buildCSSClass = function a() {
                    return ("vjs-error-display " + c.prototype.buildCSSClass.call(this));
                };
                b.content = function b() {
                    var a = this.player().error();
                    return a ? this.localize(a.message) : "";
                };
                return a;
            })(v);
            aQ.prototype.options_ = (0, ah.Z)({}, v.prototype.options_, {
                pauseOnOpen: false,
                fillAlways: true,
                temporary: false,
                uncloseable: true
            });
            a.registerComponent("ErrorDisplay", aQ);
            var fp = "vjs-text-track-settings";
            var aR = [
                "#000",
                "Black"
            ];
            var aS = [
                "#00F",
                "Blue"
            ];
            var aT = [
                "#0FF",
                "Cyan"
            ];
            var aU = [
                "#0F0",
                "Green"
            ];
            var aV = [
                "#F0F",
                "Magenta"
            ];
            var aW = [
                "#F00",
                "Red"
            ];
            var aX = [
                "#FFF",
                "White"
            ];
            var aY = [
                "#FF0",
                "Yellow"
            ];
            var ae = [
                "1",
                "Opaque"
            ];
            var af = [
                "0.5",
                "Semi-Transparent"
            ];
            var aZ = [
                "0",
                "Transparent"
            ];
            var a$ = {
                backgroundColor: {
                    selector: ".vjs-bg-color > select",
                    id: "captions-background-color-%s",
                    label: "Color",
                    options: [
                        aR,
                        aX,
                        aW,
                        aU,
                        aS,
                        aY,
                        aV,
                        aT, 
                    ]
                },
                backgroundOpacity: {
                    selector: ".vjs-bg-opacity > select",
                    id: "captions-background-opacity-%s",
                    label: "Transparency",
                    options: [
                        ae,
                        af,
                        aZ
                    ]
                },
                color: {
                    selector: ".vjs-fg-color > select",
                    id: "captions-foreground-color-%s",
                    label: "Color",
                    options: [
                        aX,
                        aR,
                        aW,
                        aU,
                        aS,
                        aY,
                        aV,
                        aT, 
                    ]
                },
                edgeStyle: {
                    selector: ".vjs-edge-style > select",
                    id: "%s",
                    label: "Text Edge Style",
                    options: [
                        [
                            "none",
                            "None"
                        ],
                        [
                            "raised",
                            "Raised"
                        ],
                        [
                            "depressed",
                            "Depressed"
                        ],
                        [
                            "uniform",
                            "Uniform"
                        ],
                        [
                            "dropshadow",
                            "Dropshadow"
                        ], 
                    ]
                },
                fontFamily: {
                    selector: ".vjs-font-family > select",
                    id: "captions-font-family-%s",
                    label: "Font Family",
                    options: [
                        [
                            "proportionalSansSerif",
                            "Proportional Sans-Serif"
                        ],
                        [
                            "monospaceSansSerif",
                            "Monospace Sans-Serif"
                        ],
                        [
                            "proportionalSerif",
                            "Proportional Serif"
                        ],
                        [
                            "monospaceSerif",
                            "Monospace Serif"
                        ],
                        [
                            "casual",
                            "Casual"
                        ],
                        [
                            "script",
                            "Script"
                        ],
                        [
                            "small-caps",
                            "Small Caps"
                        ], 
                    ]
                },
                fontPercent: {
                    selector: ".vjs-font-percent > select",
                    id: "captions-font-size-%s",
                    label: "Font Size",
                    options: [
                        [
                            "0.50",
                            "50%"
                        ],
                        [
                            "0.75",
                            "75%"
                        ],
                        [
                            "1.00",
                            "100%"
                        ],
                        [
                            "1.25",
                            "125%"
                        ],
                        [
                            "1.50",
                            "150%"
                        ],
                        [
                            "1.75",
                            "175%"
                        ],
                        [
                            "2.00",
                            "200%"
                        ],
                        [
                            "3.00",
                            "300%"
                        ],
                        [
                            "4.00",
                            "400%"
                        ], 
                    ],
                    default: 2,
                    parser: function b(a) {
                        return a === "1.00" ? null : Number(a);
                    }
                },
                textOpacity: {
                    selector: ".vjs-text-opacity > select",
                    id: "captions-foreground-opacity-%s",
                    label: "Transparency",
                    options: [
                        ae,
                        af
                    ]
                },
                windowColor: {
                    selector: ".vjs-window-color > select",
                    id: "captions-window-color-%s",
                    label: "Color"
                },
                windowOpacity: {
                    selector: ".vjs-window-opacity > select",
                    id: "captions-window-opacity-%s",
                    label: "Transparency",
                    options: [
                        aZ,
                        af,
                        ae
                    ]
                }
            };
            a$.windowColor.options = a$.backgroundColor.options;
            function fq(a, b) {
                if (b) {
                    a = b(a);
                }
                if (a && a !== "none") {
                    return a;
                }
            }
            function fr(a, b) {
                var c = a.options[a.options.selectedIndex].value;
                return fq(c, b);
            }
            function fs(b, c, d) {
                if (!c) {
                    return;
                }
                for(var a = 0; a < b.options.length; a++){
                    if (fq(b.options[a].value, d) === c) {
                        b.selectedIndex = a;
                        break;
                    }
                }
            }
            var cM = (function(c) {
                (0, dF.Z)(b, c);
                function b(d, b) {
                    var a;
                    b.temporary = false;
                    a = c.call(this, d, b) || this;
                    a.updateDisplay = a.updateDisplay.bind((0, dE.Z)(a));
                    a.fill();
                    a.hasBeenOpened_ = a.hasBeenFilled_ = true;
                    a.endDialog = bC("p", {
                        className: "vjs-control-text",
                        textContent: a.localize("End of dialog window.")
                    });
                    a.el().appendChild(a.endDialog);
                    a.setDefaults();
                    if (b.persistTextTrackSettings === undefined) {
                        a.options_.persistTextTrackSettings = a.options_.playerOptions.persistTextTrackSettings;
                    }
                    a.on(a.$(".vjs-done-button"), "click", function() {
                        a.saveSettings();
                        a.close();
                    });
                    a.on(a.$(".vjs-default-button"), "click", function() {
                        a.setDefaults();
                        a.updateDisplay();
                    });
                    dY(a$, function(b) {
                        a.on(a.$(b.selector), "change", a.updateDisplay);
                    });
                    if (a.options_.persistTextTrackSettings) {
                        a.restoreSettings();
                    }
                    return a;
                }
                var a = b.prototype;
                a.dispose = function a() {
                    this.endDialog = null;
                    c.prototype.dispose.call(this);
                };
                a.createElSelect_ = function g(e, b, a) {
                    var h = this;
                    if (b === void 0) {
                        b = "";
                    }
                    if (a === void 0) {
                        a = "label";
                    }
                    var c = a$[e];
                    var d = c.id.replace("%s", this.id_);
                    var f = [
                        b,
                        d
                    ].join(" ").trim();
                    return [
                        "<" + a + ' id="' + d + '" class="' + (a === "label" ? "vjs-label" : "") + '">',
                        this.localize(c.label),
                        "</" + a + ">",
                        '<select aria-labelledby="' + f + '">', 
                    ].concat(c.options.map(function(a) {
                        var b = d + "-" + a[1].replace(/\W+/g, "");
                        return [
                            '<option id="' + b + '" value="' + a[0] + '" ',
                            'aria-labelledby="' + f + " " + b + '">',
                            h.localize(a[1]),
                            "</option>", 
                        ].join("");
                    })).concat("</select>").join("");
                };
                a.createElFgColor_ = function b() {
                    var a = "captions-text-legend-" + this.id_;
                    return [
                        '<fieldset class="vjs-fg-color vjs-track-setting">',
                        '<legend id="' + a + '">',
                        this.localize("Text"),
                        "</legend>",
                        this.createElSelect_("color", a),
                        '<span class="vjs-text-opacity vjs-opacity">',
                        this.createElSelect_("textOpacity", a),
                        "</span>",
                        "</fieldset>", 
                    ].join("");
                };
                a.createElBgColor_ = function b() {
                    var a = "captions-background-" + this.id_;
                    return [
                        '<fieldset class="vjs-bg-color vjs-track-setting">',
                        '<legend id="' + a + '">',
                        this.localize("Background"),
                        "</legend>",
                        this.createElSelect_("backgroundColor", a),
                        '<span class="vjs-bg-opacity vjs-opacity">',
                        this.createElSelect_("backgroundOpacity", a),
                        "</span>",
                        "</fieldset>", 
                    ].join("");
                };
                a.createElWinColor_ = function b() {
                    var a = "captions-window-" + this.id_;
                    return [
                        '<fieldset class="vjs-window-color vjs-track-setting">',
                        '<legend id="' + a + '">',
                        this.localize("Window"),
                        "</legend>",
                        this.createElSelect_("windowColor", a),
                        '<span class="vjs-window-opacity vjs-opacity">',
                        this.createElSelect_("windowOpacity", a),
                        "</span>",
                        "</fieldset>", 
                    ].join("");
                };
                a.createElColors_ = function a() {
                    return bC("div", {
                        className: "vjs-track-settings-colors",
                        innerHTML: [
                            this.createElFgColor_(),
                            this.createElBgColor_(),
                            this.createElWinColor_(), 
                        ].join("")
                    });
                };
                a.createElFont_ = function a() {
                    return bC("div", {
                        className: "vjs-track-settings-font",
                        innerHTML: [
                            '<fieldset class="vjs-font-percent vjs-track-setting">',
                            this.createElSelect_("fontPercent", "", "legend"),
                            "</fieldset>",
                            '<fieldset class="vjs-edge-style vjs-track-setting">',
                            this.createElSelect_("edgeStyle", "", "legend"),
                            "</fieldset>",
                            '<fieldset class="vjs-font-family vjs-track-setting">',
                            this.createElSelect_("fontFamily", "", "legend"),
                            "</fieldset>", 
                        ].join("")
                    });
                };
                a.createElControls_ = function b() {
                    var a = this.localize("restore all settings to the default values");
                    return bC("div", {
                        className: "vjs-track-settings-controls",
                        innerHTML: [
                            '<button type="button" class="vjs-default-button" title="' + a + '">',
                            this.localize("Reset"),
                            '<span class="vjs-control-text"> ' + a + "</span>",
                            "</button>",
                            '<button type="button" class="vjs-done-button">' + this.localize("Done") + "</button>", 
                        ].join("")
                    });
                };
                a.content = function a() {
                    return [
                        this.createElColors_(),
                        this.createElFont_(),
                        this.createElControls_(), 
                    ];
                };
                a.label = function a() {
                    return this.localize("Caption Settings Dialog");
                };
                a.description = function a() {
                    return this.localize("Beginning of dialog window. Escape will cancel and close the window.");
                };
                a.buildCSSClass = function a() {
                    return (c.prototype.buildCSSClass.call(this) + " vjs-text-track-settings");
                };
                a.getValues = function a() {
                    var b = this;
                    return dZ(a$, function(a, c, e) {
                        var d = fr(b.$(c.selector), c.parser);
                        if (d !== undefined) {
                            a[e] = d;
                        }
                        return a;
                    }, {});
                };
                a.setValues = function a(b) {
                    var c = this;
                    dY(a$, function(a, d) {
                        fs(c.$(a.selector), b[d], a.parser);
                    });
                };
                a.setDefaults = function a() {
                    var b = this;
                    dY(a$, function(a) {
                        var c = a.hasOwnProperty("default") ? a["default"] : 0;
                        b.$(a.selector).selectedIndex = c;
                    });
                };
                a.restoreSettings = function c() {
                    var a;
                    try {
                        a = JSON.parse(f().localStorage.getItem(fp));
                    } catch (b) {
                        ak.warn(b);
                    }
                    if (a) {
                        this.setValues(a);
                    }
                };
                a.saveSettings = function c() {
                    if (!this.options_.persistTextTrackSettings) {
                        return;
                    }
                    var a = this.getValues();
                    try {
                        if (Object.keys(a).length) {
                            f().localStorage.setItem(fp, JSON.stringify(a));
                        } else {
                            f().localStorage.removeItem(fp);
                        }
                    } catch (b) {
                        ak.warn(b);
                    }
                };
                a.updateDisplay = function b() {
                    var a = this.player_.getChild("textTrackDisplay");
                    if (a) {
                        a.updateDisplay();
                    }
                };
                a.conditionalBlur_ = function d() {
                    this.previouslyActiveEl_ = null;
                    var a = this.player_.controlBar;
                    var b = a && a.subsCapsButton;
                    var c = a && a.captionsButton;
                    if (b) {
                        b.focus();
                    } else if (c) {
                        c.focus();
                    }
                };
                return b;
            })(v);
            a.registerComponent("TextTrackSettings", cM);
            var cN = (function(c) {
                (0, dF.Z)(b, c);
                function b(e, b) {
                    var a;
                    var d = b.ResizeObserver || f().ResizeObserver;
                    if (b.ResizeObserver === null) {
                        d = false;
                    }
                    var g = b6({
                        createEl: !d,
                        reportTouchActivity: false
                    }, b);
                    a = c.call(this, e, g) || this;
                    a.ResizeObserver = b.ResizeObserver || f().ResizeObserver;
                    a.loadListener_ = null;
                    a.resizeObserver_ = null;
                    a.debouncedHandler_ = ei(function() {
                        a.resizeHandler();
                    }, 100, false, (0, dE.Z)(a));
                    if (d) {
                        a.resizeObserver_ = new a.ResizeObserver(a.debouncedHandler_);
                        a.resizeObserver_.observe(e.el());
                    } else {
                        a.loadListener_ = function() {
                            if (!a.el_ || !a.el_.contentWindow) {
                                return;
                            }
                            var b = a.debouncedHandler_;
                            var c = (a.unloadListener_ = function() {
                                at(this, "resize", b);
                                at(this, "unload", c);
                                c = null;
                            });
                            as(a.el_.contentWindow, "unload", c);
                            as(a.el_.contentWindow, "resize", b);
                        };
                        a.one("load", a.loadListener_);
                    }
                    return a;
                }
                var a = b.prototype;
                a.createEl = function a() {
                    return c.prototype.createEl.call(this, "iframe", {
                        className: "vjs-resize-manager",
                        tabIndex: -1
                    }, {
                        "aria-hidden": "true"
                    });
                };
                a.resizeHandler = function a() {
                    if (!this.player_ || !this.player_.trigger) {
                        return;
                    }
                    this.player_.trigger("playerresize");
                };
                a.dispose = function a() {
                    if (this.debouncedHandler_) {
                        this.debouncedHandler_.cancel();
                    }
                    if (this.resizeObserver_) {
                        if (this.player_.el()) {
                            this.resizeObserver_.unobserve(this.player_.el());
                        }
                        this.resizeObserver_.disconnect();
                    }
                    if (this.loadListener_) {
                        this.off("load", this.loadListener_);
                    }
                    if (this.el_ && this.el_.contentWindow && this.unloadListener_) {
                        this.unloadListener_.call(this.el_.contentWindow);
                    }
                    this.ResizeObserver = null;
                    this.resizeObserver = null;
                    this.debouncedHandler_ = null;
                    this.loadListener_ = null;
                    c.prototype.dispose.call(this);
                };
                return b;
            })(a);
            a.registerComponent("ResizeManager", cN);
            var ft = {
                trackingThreshold: 20,
                liveTolerance: 15
            };
            var cO = (function(c) {
                (0, dF.Z)(b, c);
                function b(b, d) {
                    var a;
                    var e = b6(ft, d, {
                        createEl: false
                    });
                    a = c.call(this, b, e) || this;
                    a.handleVisibilityChange_ = function(b) {
                        return a.handleVisibilityChange(b);
                    };
                    a.trackLiveHandler_ = function() {
                        return a.trackLive_();
                    };
                    a.handlePlay_ = function(b) {
                        return a.handlePlay(b);
                    };
                    a.handleFirstTimeupdate_ = function(b) {
                        return a.handleFirstTimeupdate(b);
                    };
                    a.handleSeeked_ = function(b) {
                        return a.handleSeeked(b);
                    };
                    a.seekToLiveEdge_ = function(b) {
                        return a.seekToLiveEdge(b);
                    };
                    a.reset_();
                    a.on(a.player_, "durationchange", function(b) {
                        return a.handleDurationchange(b);
                    });
                    a.one(a.player_, "canplay", function() {
                        return a.toggleTracking();
                    });
                    if (bw && "hidden" in J() && "visibilityState" in J()) {
                        a.on(J(), "visibilitychange", a.handleVisibilityChange_);
                    }
                    return a;
                }
                var a = b.prototype;
                a.handleVisibilityChange = function a() {
                    if (this.player_.duration() !== Infinity) {
                        return;
                    }
                    if (J().hidden) {
                        this.stopTracking();
                    } else {
                        this.startTracking();
                    }
                };
                a.trackLive_ = function h() {
                    var b = this.player_.seekable();
                    if (!b || !b.length) {
                        return;
                    }
                    var c = Number(f().performance.now().toFixed(4));
                    var e = this.lastTime_ === -1 ? 0 : (c - this.lastTime_) / 1000;
                    this.lastTime_ = c;
                    this.pastSeekEnd_ = this.pastSeekEnd() + e;
                    var d = this.liveCurrentTime();
                    var g = this.player_.currentTime();
                    var a = this.player_.paused() || this.seekedBehindLive_ || Math.abs(d - g) > this.options_.liveTolerance;
                    if (!this.timeupdateSeen_ || d === Infinity) {
                        a = false;
                    }
                    if (a !== this.behindLiveEdge_) {
                        this.behindLiveEdge_ = a;
                        this.trigger("liveedgechange");
                    }
                };
                a.handleDurationchange = function a() {
                    this.toggleTracking();
                };
                a.toggleTracking = function a() {
                    if (this.player_.duration() === Infinity && this.liveWindow() >= this.options_.trackingThreshold) {
                        if (this.player_.options_.liveui) {
                            this.player_.addClass("vjs-liveui");
                        }
                        this.startTracking();
                    } else {
                        this.player_.removeClass("vjs-liveui");
                        this.stopTracking();
                    }
                };
                a.startTracking = function a() {
                    if (this.isTracking()) {
                        return;
                    }
                    if (!this.timeupdateSeen_) {
                        this.timeupdateSeen_ = this.player_.hasStarted();
                    }
                    this.trackingInterval_ = this.setInterval(this.trackLiveHandler_, eg);
                    this.trackLive_();
                    this.on(this.player_, [
                        "play",
                        "pause"
                    ], this.trackLiveHandler_);
                    if (!this.timeupdateSeen_) {
                        this.one(this.player_, "play", this.handlePlay_);
                        this.one(this.player_, "timeupdate", this.handleFirstTimeupdate_);
                    } else {
                        this.on(this.player_, "seeked", this.handleSeeked_);
                    }
                };
                a.handleFirstTimeupdate = function a() {
                    this.timeupdateSeen_ = true;
                    this.on(this.player_, "seeked", this.handleSeeked_);
                };
                a.handleSeeked = function b() {
                    var a = Math.abs(this.liveCurrentTime() - this.player_.currentTime());
                    this.seekedBehindLive_ = this.nextSeekedFromUser_ && a > 2;
                    this.nextSeekedFromUser_ = false;
                    this.trackLive_();
                };
                a.handlePlay = function a() {
                    this.one(this.player_, "timeupdate", this.seekToLiveEdge_);
                };
                a.reset_ = function a() {
                    this.lastTime_ = -1;
                    this.pastSeekEnd_ = 0;
                    this.lastSeekEnd_ = -1;
                    this.behindLiveEdge_ = true;
                    this.timeupdateSeen_ = false;
                    this.seekedBehindLive_ = false;
                    this.nextSeekedFromUser_ = false;
                    this.clearInterval(this.trackingInterval_);
                    this.trackingInterval_ = null;
                    this.off(this.player_, [
                        "play",
                        "pause"
                    ], this.trackLiveHandler_);
                    this.off(this.player_, "seeked", this.handleSeeked_);
                    this.off(this.player_, "play", this.handlePlay_);
                    this.off(this.player_, "timeupdate", this.handleFirstTimeupdate_);
                    this.off(this.player_, "timeupdate", this.seekToLiveEdge_);
                };
                a.nextSeekedFromUser = function a() {
                    this.nextSeekedFromUser_ = true;
                };
                a.stopTracking = function a() {
                    if (!this.isTracking()) {
                        return;
                    }
                    this.reset_();
                    this.trigger("liveedgechange");
                };
                a.seekableEnd = function d() {
                    var b = this.player_.seekable();
                    var a = [];
                    var c = b ? b.length : 0;
                    while(c--){
                        a.push(b.end(c));
                    }
                    return a.length ? a.sort()[a.length - 1] : Infinity;
                };
                a.seekableStart = function d() {
                    var a = this.player_.seekable();
                    var b = [];
                    var c = a ? a.length : 0;
                    while(c--){
                        b.push(a.start(c));
                    }
                    return b.length ? b.sort()[0] : 0;
                };
                a.liveWindow = function b() {
                    var a = this.liveCurrentTime();
                    if (a === Infinity) {
                        return 0;
                    }
                    return a - this.seekableStart();
                };
                a.isLive = function a() {
                    return this.isTracking();
                };
                a.atLiveEdge = function a() {
                    return !this.behindLiveEdge();
                };
                a.liveCurrentTime = function a() {
                    return this.pastSeekEnd() + this.seekableEnd();
                };
                a.pastSeekEnd = function b() {
                    var a = this.seekableEnd();
                    if (this.lastSeekEnd_ !== -1 && a !== this.lastSeekEnd_) {
                        this.pastSeekEnd_ = 0;
                    }
                    this.lastSeekEnd_ = a;
                    return this.pastSeekEnd_;
                };
                a.behindLiveEdge = function a() {
                    return this.behindLiveEdge_;
                };
                a.isTracking = function a() {
                    return typeof this.trackingInterval_ === "number";
                };
                a.seekToLiveEdge = function a() {
                    this.seekedBehindLive_ = false;
                    if (this.atLiveEdge()) {
                        return;
                    }
                    this.nextSeekedFromUser_ = false;
                    this.player_.currentTime(this.liveCurrentTime());
                };
                a.dispose = function a() {
                    this.off(J(), "visibilitychange", this.handleVisibilityChange_);
                    this.stopTracking();
                    c.prototype.dispose.call(this);
                };
                return b;
            })(a);
            a.registerComponent("LiveTracker", cO);
            var fu = function h(b) {
                var f = b.el();
                if (f.hasAttribute("src")) {
                    b.triggerSourceset(f.src);
                    return true;
                }
                var c = b.$$("source");
                var a = [];
                var g = "";
                if (!c.length) {
                    return false;
                }
                for(var d = 0; d < c.length; d++){
                    var e = c[d].src;
                    if (e && a.indexOf(e) === -1) {
                        a.push(e);
                    }
                }
                if (!a.length) {
                    return false;
                }
                if (a.length === 1) {
                    g = a[0];
                }
                b.triggerSourceset(g);
                return true;
            };
            var fv = Object.defineProperty({}, "innerHTML", {
                get: function a() {
                    return this.cloneNode(true).innerHTML;
                },
                set: function d(c) {
                    var a = J().createElement(this.nodeName.toLowerCase());
                    a.innerHTML = c;
                    var b = J().createDocumentFragment();
                    while(a.childNodes.length){
                        b.appendChild(a.childNodes[0]);
                    }
                    this.innerText = "";
                    f().Element.prototype.appendChild.call(this, b);
                    return this.innerHTML;
                }
            });
            var fw = function e(c, d) {
                var a = {};
                for(var b = 0; b < c.length; b++){
                    a = Object.getOwnPropertyDescriptor(c[b], d);
                    if (a && a.set && a.get) {
                        break;
                    }
                }
                a.enumerable = true;
                a.configurable = true;
                return a;
            };
            var fx = function b(a) {
                return fw([
                    a.el(),
                    f().HTMLMediaElement.prototype,
                    f().Element.prototype,
                    fv, 
                ], "innerHTML");
            };
            var fy = function e(b) {
                var a = b.el();
                if (a.resetSourceWatch_) {
                    return;
                }
                var f = {};
                var c = fx(b);
                var d = function c(d) {
                    return function() {
                        for(var e = arguments.length, f = new Array(e), c = 0; c < e; c++){
                            f[c] = arguments[c];
                        }
                        var g = d.apply(a, f);
                        fu(b);
                        return g;
                    };
                };
                [
                    "append",
                    "appendChild",
                    "insertAdjacentHTML"
                ].forEach(function(b) {
                    if (!a[b]) {
                        return;
                    }
                    f[b] = a[b];
                    a[b] = d(f[b]);
                });
                Object.defineProperty(a, "innerHTML", b6(c, {
                    set: d(c.set)
                }));
                a.resetSourceWatch_ = function() {
                    a.resetSourceWatch_ = null;
                    Object.keys(f).forEach(function(b) {
                        a[b] = f[b];
                    });
                    Object.defineProperty(a, "innerHTML", c);
                };
                b.one("sourceset", a.resetSourceWatch_);
            };
            var fz = Object.defineProperty({}, "src", {
                get: function a() {
                    if (this.hasAttribute("src")) {
                        return ch(f().Element.prototype.getAttribute.call(this, "src"));
                    }
                    return "";
                },
                set: function b(a) {
                    f().Element.prototype.setAttribute.call(this, "src", a);
                    return a;
                }
            });
            var fA = function b(a) {
                return fw([
                    a.el(),
                    f().HTMLMediaElement.prototype,
                    fz, 
                ], "src");
            };
            var fB = function d(b) {
                if (!b.featuresSourceset) {
                    return;
                }
                var a = b.el();
                if (a.resetSourceset_) {
                    return;
                }
                var c = fA(b);
                var e = a.setAttribute;
                var f = a.load;
                Object.defineProperty(a, "src", b6(c, {
                    set: function f(d) {
                        var e = c.set.call(a, d);
                        b.triggerSourceset(a.src);
                        return e;
                    }
                }));
                a.setAttribute = function(c, d) {
                    var f = e.call(a, c, d);
                    if (/src/i.test(c)) {
                        b.triggerSourceset(a.src);
                    }
                    return f;
                };
                a.load = function() {
                    var c = f.call(a);
                    if (!fu(b)) {
                        b.triggerSourceset("");
                        fy(b);
                    }
                    return c;
                };
                if (a.currentSrc) {
                    b.triggerSourceset(a.currentSrc);
                } else if (!fu(b)) {
                    fy(b);
                }
                a.resetSourceset_ = function() {
                    a.resetSourceset_ = null;
                    a.load = f;
                    a.setAttribute = e;
                    Object.defineProperty(a, "src", c);
                    if (a.resetSourceWatch_) {
                        a.resetSourceWatch_();
                    }
                };
            };
            var a_ = function f(c, d, g, a) {
                if (a === void 0) {
                    a = true;
                }
                var e = function b(a) {
                    return Object.defineProperty(c, d, {
                        value: a,
                        enumerable: true,
                        writable: true
                    });
                };
                var b = {
                    configurable: true,
                    enumerable: true,
                    get: function b() {
                        var a = g();
                        e(a);
                        return a;
                    }
                };
                if (a) {
                    b.set = e;
                }
                return Object.defineProperty(c, d, b);
            };
            var c = (function(c) {
                (0, dF.Z)(b, c);
                function b(b, k) {
                    var a;
                    a = c.call(this, b, k) || this;
                    var e = b.source;
                    var f = false;
                    if (e && (a.el_.currentSrc !== e.src || (b.tag && b.tag.initNetworkState_ === 3))) {
                        a.setSource(e);
                    } else {
                        a.handleLateInit_(a.el_);
                    }
                    if (b.enableSourceset) {
                        a.setupSourcesetHandling_();
                    }
                    a.isScrubbing_ = false;
                    if (a.el_.hasChildNodes()) {
                        var i = a.el_.childNodes;
                        var j = i.length;
                        var g = [];
                        while(j--){
                            var d = i[j];
                            var l = d.nodeName.toLowerCase();
                            if (l === "track") {
                                if (!a.featuresNativeTextTracks) {
                                    g.push(d);
                                } else {
                                    a.remoteTextTrackEls().addTrackElement_(d);
                                    a.remoteTextTracks().addTrack(d.track);
                                    a.textTracks().addTrack(d.track);
                                    if (!f && !a.el_.hasAttribute("crossorigin") && ay(d.src)) {
                                        f = true;
                                    }
                                }
                            }
                        }
                        for(var h = 0; h < g.length; h++){
                            a.el_.removeChild(g[h]);
                        }
                    }
                    a.proxyNativeTracks_();
                    if (a.featuresNativeTextTracks && f) {
                        ak.warn("Text Tracks are being loaded from another origin but the crossorigin attribute isn't used.\n" + "This may prevent text tracks from loading.");
                    }
                    a.restoreMetadataTracksInIOSNativePlayer_();
                    if ((N || ao || bt) && b.nativeControlsForTouch === true) {
                        a.setControls(true);
                    }
                    a.proxyWebkitFullscreen_();
                    a.triggerReady();
                    return a;
                }
                var a = b.prototype;
                a.dispose = function a() {
                    if (this.el_ && this.el_.resetSourceset_) {
                        this.el_.resetSourceset_();
                    }
                    b.disposeMediaElement(this.el_);
                    this.options_ = null;
                    c.prototype.dispose.call(this);
                };
                a.setupSourcesetHandling_ = function a() {
                    fB(this);
                };
                a.restoreMetadataTracksInIOSNativePlayer_ = function c() {
                    var b = this.textTracks();
                    var d;
                    var a = function e() {
                        d = [];
                        for(var a = 0; a < b.length; a++){
                            var c = b[a];
                            if (c.kind === "metadata") {
                                d.push({
                                    track: c,
                                    storedMode: c.mode
                                });
                            }
                        }
                    };
                    a();
                    b.addEventListener("change", a);
                    this.on("dispose", function() {
                        return b.removeEventListener("change", a);
                    });
                    var e = function e() {
                        for(var c = 0; c < d.length; c++){
                            var a = d[c];
                            if (a.track.mode === "disabled" && a.track.mode !== a.storedMode) {
                                a.track.mode = a.storedMode;
                            }
                        }
                        b.removeEventListener("change", e);
                    };
                    this.on("webkitbeginfullscreen", function() {
                        b.removeEventListener("change", a);
                        b.removeEventListener("change", e);
                        b.addEventListener("change", e);
                    });
                    this.on("webkitendfullscreen", function() {
                        b.removeEventListener("change", a);
                        b.addEventListener("change", a);
                        b.removeEventListener("change", e);
                    });
                };
                a.overrideNative_ = function d(b, c) {
                    var e = this;
                    if (c !== this["featuresNative" + b + "Tracks"]) {
                        return;
                    }
                    var a = b.toLowerCase();
                    if (this[a + "TracksListeners_"]) {
                        Object.keys(this[a + "TracksListeners_"]).forEach(function(b) {
                            var c = e.el()[a + "Tracks"];
                            c.removeEventListener(b, e[a + "TracksListeners_"][b]);
                        });
                    }
                    this["featuresNative" + b + "Tracks"] = !c;
                    this[a + "TracksListeners_"] = null;
                    this.proxyNativeTracksForType_(a);
                };
                a.overrideNativeAudioTracks = function b(a) {
                    this.overrideNative_("Audio", a);
                };
                a.overrideNativeVideoTracks = function b(a) {
                    this.overrideNative_("Video", a);
                };
                a.proxyNativeTracksForType_ = function f(d) {
                    var g = this;
                    var a = w[d];
                    var b = this.el()[a.getterName];
                    var h = this[a.getterName]();
                    if (!this["featuresNative" + a.capitalName + "Tracks"] || !b || !b.addEventListener) {
                        return;
                    }
                    var c = {
                        change: function b(c) {
                            var a = {
                                type: "change",
                                target: h,
                                currentTarget: h,
                                srcElement: h
                            };
                            h.trigger(a);
                            if (d === "text") {
                                g[D.remoteText.getterName]().trigger(a);
                            }
                        },
                        addtrack: function b(a) {
                            h.addTrack(a.track);
                        },
                        removetrack: function b(a) {
                            h.removeTrack(a.track);
                        }
                    };
                    var e = function f() {
                        var c = [];
                        for(var a = 0; a < h.length; a++){
                            var e = false;
                            for(var d = 0; d < b.length; d++){
                                if (b[d] === h[a]) {
                                    e = true;
                                    break;
                                }
                            }
                            if (!e) {
                                c.push(h[a]);
                            }
                        }
                        while(c.length){
                            h.removeTrack(c.shift());
                        }
                    };
                    this[a.getterName + "Listeners_"] = c;
                    Object.keys(c).forEach(function(a) {
                        var d = c[a];
                        b.addEventListener(a, d);
                        g.on("dispose", function(c) {
                            return b.removeEventListener(a, d);
                        });
                    });
                    this.on("loadstart", e);
                    this.on("dispose", function(a) {
                        return g.off("loadstart", e);
                    });
                };
                a.proxyNativeTracks_ = function a() {
                    var b = this;
                    w.names.forEach(function(a) {
                        b.proxyNativeTracksForType_(a);
                    });
                };
                a.createEl = function j() {
                    var a = this.options_.tag;
                    if (!a || !(this.options_.playerElIngest || this.movingMediaElementInDOM)) {
                        if (a) {
                            var f = a.cloneNode(true);
                            if (a.parentNode) {
                                a.parentNode.insertBefore(f, a);
                            }
                            b.disposeMediaElement(a);
                            a = f;
                        } else {
                            a = J().createElement("video");
                            var i = this.options_.tag && bK(this.options_.tag);
                            var g = b6({}, i);
                            if (!N || this.options_.nativeControlsForTouch !== true) {
                                delete g.controls;
                            }
                            bJ(a, d$(g, {
                                id: this.options_.techId,
                                class: "vjs-tech"
                            }));
                        }
                        a.playerId = this.options_.playerId;
                    }
                    if (typeof this.options_.preload !== "undefined") {
                        bM(a, "preload", this.options_.preload);
                    }
                    if (this.options_.disablePictureInPicture !== undefined) {
                        a.disablePictureInPicture = this.options_.disablePictureInPicture;
                    }
                    var h = [
                        "loop",
                        "muted",
                        "playsinline",
                        "autoplay", 
                    ];
                    for(var d = 0; d < h.length; d++){
                        var c = h[d];
                        var e = this.options_[c];
                        if (typeof e !== "undefined") {
                            if (e) {
                                bM(a, c, c);
                            } else {
                                bN(a, c);
                            }
                            a[c] = e;
                        }
                    }
                    return a;
                };
                a.handleLateInit_ = function e(a) {
                    if (a.networkState === 0 || a.networkState === 3) {
                        return;
                    }
                    if (a.readyState === 0) {
                        var f = false;
                        var c = function a() {
                            f = true;
                        };
                        this.on("loadstart", c);
                        var d = function a() {
                            if (!f) {
                                this.trigger("loadstart");
                            }
                        };
                        this.on("loadedmetadata", d);
                        this.ready(function() {
                            this.off("loadstart", c);
                            this.off("loadedmetadata", d);
                            if (!f) {
                                this.trigger("loadstart");
                            }
                        });
                        return;
                    }
                    var b = [
                        "loadstart"
                    ];
                    b.push("loadedmetadata");
                    if (a.readyState >= 2) {
                        b.push("loadeddata");
                    }
                    if (a.readyState >= 3) {
                        b.push("canplay");
                    }
                    if (a.readyState >= 4) {
                        b.push("canplaythrough");
                    }
                    this.ready(function() {
                        b.forEach(function(a) {
                            this.trigger(a);
                        }, this);
                    });
                };
                a.setScrubbing = function b(a) {
                    this.isScrubbing_ = a;
                };
                a.scrubbing = function a() {
                    return this.isScrubbing_;
                };
                a.setCurrentTime = function c(a) {
                    try {
                        if (this.isScrubbing_ && this.el_.fastSeek && by) {
                            this.el_.fastSeek(a);
                        } else {
                            this.el_.currentTime = a;
                        }
                    } catch (b) {
                        ak(b, "Video is not ready. (Video.js)");
                    }
                };
                a.duration = function b() {
                    var c = this;
                    if (this.el_.duration === Infinity && n && L && this.el_.currentTime === 0) {
                        var a = function a() {
                            if (c.el_.currentTime > 0) {
                                if (c.el_.duration === Infinity) {
                                    c.trigger("durationchange");
                                }
                                c.off("timeupdate", a);
                            }
                        };
                        this.on("timeupdate", a);
                        return NaN;
                    }
                    return this.el_.duration || NaN;
                };
                a.width = function a() {
                    return this.el_.offsetWidth;
                };
                a.height = function a() {
                    return this.el_.offsetHeight;
                };
                a.proxyWebkitFullscreen_ = function b() {
                    var c = this;
                    if (!("webkitDisplayingFullscreen" in this.el_)) {
                        return;
                    }
                    var d = function a() {
                        this.trigger("fullscreenchange", {
                            isFullscreen: false
                        });
                    };
                    var a = function a() {
                        if ("webkitPresentationMode" in this.el_ && this.el_.webkitPresentationMode !== "picture-in-picture") {
                            this.one("webkitendfullscreen", d);
                            this.trigger("fullscreenchange", {
                                isFullscreen: true,
                                nativeIOSFullscreen: true
                            });
                        }
                    };
                    this.on("webkitbeginfullscreen", a);
                    this.on("dispose", function() {
                        c.off("webkitbeginfullscreen", a);
                        c.off("webkitendfullscreen", d);
                    });
                };
                a.supportsFullScreen = function b() {
                    if (typeof this.el_.webkitEnterFullScreen === "function") {
                        var a = (f().navigator && f().navigator.userAgent) || "";
                        if (/Android/.test(a) || !/Chrome|Mac OS X 10.5/.test(a)) {
                            return true;
                        }
                    }
                    return false;
                };
                a.enterFullScreen = function c() {
                    var a = this.el_;
                    if (a.paused && a.networkState <= a.HAVE_METADATA) {
                        eH(this.el_.play());
                        this.setTimeout(function() {
                            a.pause();
                            try {
                                a.webkitEnterFullScreen();
                            } catch (b) {
                                this.trigger("fullscreenerror", b);
                            }
                        }, 0);
                    } else {
                        try {
                            a.webkitEnterFullScreen();
                        } catch (b) {
                            this.trigger("fullscreenerror", b);
                        }
                    }
                };
                a.exitFullScreen = function a() {
                    if (!this.el_.webkitDisplayingFullscreen) {
                        this.trigger("fullscreenerror", new Error("The video is not fullscreen"));
                        return;
                    }
                    this.el_.webkitExitFullScreen();
                };
                a.requestPictureInPicture = function a() {
                    return this.el_.requestPictureInPicture();
                };
                a.src = function b(a) {
                    if (a === undefined) {
                        return this.el_.src;
                    }
                    this.setSrc(a);
                };
                a.reset = function a() {
                    b.resetMediaElement(this.el_);
                };
                a.currentSrc = function a() {
                    if (this.currentSource_) {
                        return this.currentSource_.src;
                    }
                    return this.el_.currentSrc;
                };
                a.setControls = function b(a) {
                    this.el_.controls = !!a;
                };
                a.addTextTrack = function e(a, b, d) {
                    if (!this.featuresNativeTextTracks) {
                        return c.prototype.addTextTrack.call(this, a, b, d);
                    }
                    return this.el_.addTextTrack(a, b, d);
                };
                a.createRemoteTextTrack = function d(a) {
                    if (!this.featuresNativeTextTracks) {
                        return c.prototype.createRemoteTextTrack.call(this, a);
                    }
                    var b = J().createElement("track");
                    if (a.kind) {
                        b.kind = a.kind;
                    }
                    if (a.label) {
                        b.label = a.label;
                    }
                    if (a.language || a.srclang) {
                        b.srclang = a.language || a.srclang;
                    }
                    if (a["default"]) {
                        b["default"] = a["default"];
                    }
                    if (a.id) {
                        b.id = a.id;
                    }
                    if (a.src) {
                        b.src = a.src;
                    }
                    return b;
                };
                a.addRemoteTextTrack = function e(b, d) {
                    var a = c.prototype.addRemoteTextTrack.call(this, b, d);
                    if (this.featuresNativeTextTracks) {
                        this.el().appendChild(a);
                    }
                    return a;
                };
                a.removeRemoteTextTrack = function e(d) {
                    c.prototype.removeRemoteTextTrack.call(this, d);
                    if (this.featuresNativeTextTracks) {
                        var a = this.$$("track");
                        var b = a.length;
                        while(b--){
                            if (d === a[b] || d === a[b].track) {
                                this.el().removeChild(a[b]);
                            }
                        }
                    }
                };
                a.getVideoPlaybackQuality = function b() {
                    if (typeof this.el().getVideoPlaybackQuality === "function") {
                        return this.el().getVideoPlaybackQuality();
                    }
                    var a = {};
                    if (typeof this.el().webkitDroppedFrameCount !== "undefined" && typeof this.el().webkitDecodedFrameCount !== "undefined") {
                        a.droppedVideoFrames = this.el().webkitDroppedFrameCount;
                        a.totalVideoFrames = this.el().webkitDecodedFrameCount;
                    }
                    if (f().performance && typeof f().performance.now === "function") {
                        a.creationTime = f().performance.now();
                    } else if (f().performance && f().performance.timing && typeof f().performance.timing.navigationStart === "number") {
                        a.creationTime = f().Date.now() - f().performance.timing.navigationStart;
                    }
                    return a;
                };
                return b;
            })(e);
            a_(c, "TEST_VID", function() {
                if (!P()) {
                    return;
                }
                var b = J().createElement("video");
                var a = J().createElement("track");
                a.kind = "captions";
                a.srclang = "en";
                a.label = "English";
                b.appendChild(a);
                return b;
            });
            c.isSupported = function() {
                try {
                    c.TEST_VID.volume = 0.5;
                } catch (a) {
                    return false;
                }
                return !!(c.TEST_VID && c.TEST_VID.canPlayType);
            };
            c.canPlayType = function(a) {
                return c.TEST_VID.canPlayType(a);
            };
            c.canPlaySource = function(a, b) {
                return c.canPlayType(a.type);
            };
            c.canControlVolume = function() {
                try {
                    var a = c.TEST_VID.volume;
                    c.TEST_VID.volume = a / 2 + 0.1;
                    return a !== c.TEST_VID.volume;
                } catch (b) {
                    return false;
                }
            };
            c.canMuteVolume = function() {
                try {
                    var a = c.TEST_VID.muted;
                    c.TEST_VID.muted = !a;
                    if (c.TEST_VID.muted) {
                        bM(c.TEST_VID, "muted", "muted");
                    } else {
                        bN(c.TEST_VID, "muted", "muted");
                    }
                    return a !== c.TEST_VID.muted;
                } catch (b) {
                    return false;
                }
            };
            c.canControlPlaybackRate = function() {
                if (n && L && bv < 58) {
                    return false;
                }
                try {
                    var a = c.TEST_VID.playbackRate;
                    c.TEST_VID.playbackRate = a / 2 + 0.1;
                    return a !== c.TEST_VID.playbackRate;
                } catch (b) {
                    return false;
                }
            };
            c.canOverrideAttributes = function() {
                try {
                    var a = function a() {};
                    Object.defineProperty(J().createElement("video"), "src", {
                        get: a,
                        set: a
                    });
                    Object.defineProperty(J().createElement("audio"), "src", {
                        get: a,
                        set: a
                    });
                    Object.defineProperty(J().createElement("video"), "innerHTML", {
                        get: a,
                        set: a
                    });
                    Object.defineProperty(J().createElement("audio"), "innerHTML", {
                        get: a,
                        set: a
                    });
                } catch (b) {
                    return false;
                }
                return true;
            };
            c.supportsNativeTextTracks = function() {
                return by || (o && L);
            };
            c.supportsNativeVideoTracks = function() {
                return !!(c.TEST_VID && c.TEST_VID.videoTracks);
            };
            c.supportsNativeAudioTracks = function() {
                return !!(c.TEST_VID && c.TEST_VID.audioTracks);
            };
            c.Events = [
                "loadstart",
                "suspend",
                "abort",
                "error",
                "emptied",
                "stalled",
                "loadedmetadata",
                "loadeddata",
                "canplay",
                "canplaythrough",
                "playing",
                "waiting",
                "seeking",
                "seeked",
                "ended",
                "durationchange",
                "timeupdate",
                "progress",
                "play",
                "pause",
                "ratechange",
                "resize",
                "volumechange", 
            ];
            [
                [
                    "featuresVolumeControl",
                    "canControlVolume"
                ],
                [
                    "featuresMuteControl",
                    "canMuteVolume"
                ],
                [
                    "featuresPlaybackRate",
                    "canControlPlaybackRate"
                ],
                [
                    "featuresSourceset",
                    "canOverrideAttributes"
                ],
                [
                    "featuresNativeTextTracks",
                    "supportsNativeTextTracks"
                ],
                [
                    "featuresNativeVideoTracks",
                    "supportsNativeVideoTracks"
                ],
                [
                    "featuresNativeAudioTracks",
                    "supportsNativeAudioTracks"
                ], 
            ].forEach(function(a) {
                var b = a[0], d = a[1];
                a_(c.prototype, b, function() {
                    return c[d]();
                }, true);
            });
            c.prototype.movingMediaElementInDOM = !o;
            c.prototype.featuresFullscreenResize = true;
            c.prototype.featuresProgressEvents = true;
            c.prototype.featuresTimeupdateEvents = true;
            var fC;
            c.patchCanPlayType = function() {
                if (an >= 4.0 && !bu && !L) {
                    fC = c.TEST_VID && c.TEST_VID.constructor.prototype.canPlayType;
                    c.TEST_VID.constructor.prototype.canPlayType = function(a) {
                        var b = /^application\/(?:x-|vnd\.apple\.)mpegurl/i;
                        if (a && b.test(a)) {
                            return "maybe";
                        }
                        return fC.call(this, a);
                    };
                }
            };
            c.unpatchCanPlayType = function() {
                var a = c.TEST_VID.constructor.prototype.canPlayType;
                if (fC) {
                    c.TEST_VID.constructor.prototype.canPlayType = fC;
                }
                return a;
            };
            c.patchCanPlayType();
            c.disposeMediaElement = function(a) {
                if (!a) {
                    return;
                }
                if (a.parentNode) {
                    a.parentNode.removeChild(a);
                }
                while(a.hasChildNodes()){
                    a.removeChild(a.firstChild);
                }
                a.removeAttribute("src");
                if (typeof a.load === "function") {
                    (function() {
                        try {
                            a.load();
                        } catch (b) {}
                    })();
                }
            };
            c.resetMediaElement = function(a) {
                if (!a) {
                    return;
                }
                var b = a.querySelectorAll("source");
                var c = b.length;
                while(c--){
                    a.removeChild(b[c]);
                }
                a.removeAttribute("src");
                if (typeof a.load === "function") {
                    (function() {
                        try {
                            a.load();
                        } catch (b) {}
                    })();
                }
            };
            [
                "muted",
                "defaultMuted",
                "autoplay",
                "controls",
                "loop",
                "playsinline", 
            ].forEach(function(a) {
                c.prototype[a] = function() {
                    return this.el_[a] || this.el_.hasAttribute(a);
                };
            });
            [
                "muted",
                "defaultMuted",
                "autoplay",
                "loop",
                "playsinline", 
            ].forEach(function(a) {
                c.prototype["set" + ey(a)] = function(b) {
                    this.el_[a] = b;
                    if (b) {
                        this.el_.setAttribute(a, a);
                    } else {
                        this.el_.removeAttribute(a);
                    }
                };
            });
            [
                "paused",
                "currentTime",
                "buffered",
                "volume",
                "poster",
                "preload",
                "error",
                "seeking",
                "seekable",
                "ended",
                "playbackRate",
                "defaultPlaybackRate",
                "disablePictureInPicture",
                "played",
                "networkState",
                "readyState",
                "videoWidth",
                "videoHeight",
                "crossOrigin", 
            ].forEach(function(a) {
                c.prototype[a] = function() {
                    return this.el_[a];
                };
            });
            [
                "volume",
                "src",
                "poster",
                "preload",
                "playbackRate",
                "defaultPlaybackRate",
                "disablePictureInPicture",
                "crossOrigin", 
            ].forEach(function(a) {
                c.prototype["set" + ey(a)] = function(b) {
                    this.el_[a] = b;
                };
            });
            [
                "pause",
                "load",
                "play", 
            ].forEach(function(a) {
                c.prototype[a] = function() {
                    return this.el_[a]();
                };
            });
            e.withSourceHandlers(c);
            c.nativeSourceHandler = {};
            c.nativeSourceHandler.canPlayType = function(a) {
                try {
                    return c.TEST_VID.canPlayType(a);
                } catch (b) {
                    return "";
                }
            };
            c.nativeSourceHandler.canHandleSource = function(a, d) {
                if (a.type) {
                    return c.nativeSourceHandler.canPlayType(a.type);
                } else if (a.src) {
                    var b = ci(a.src);
                    return c.nativeSourceHandler.canPlayType("video/" + b);
                }
                return "";
            };
            c.nativeSourceHandler.handleSource = function(a, b, c) {
                b.setSrc(a.src);
            };
            c.nativeSourceHandler.dispose = function() {};
            c.registerSourceHandler(c.nativeSourceHandler);
            e.registerTech("Html5", c);
            var cP = [
                "progress",
                "abort",
                "suspend",
                "emptied",
                "stalled",
                "loadedmetadata",
                "loadeddata",
                "timeupdate",
                "resize",
                "volumechange",
                "texttrackchange", 
            ];
            var fD = {
                canplay: "CanPlay",
                canplaythrough: "CanPlayThrough",
                playing: "Playing",
                seeked: "Seeked"
            };
            var cQ = [
                "tiny",
                "xsmall",
                "small",
                "medium",
                "large",
                "xlarge",
                "huge", 
            ];
            var fE = {};
            cQ.forEach(function(a) {
                var b = a.charAt(0) === "x" ? "x-" + a.substring(1) : a;
                fE[a] = "vjs-layout-" + b;
            });
            var fF = {
                tiny: 210,
                xsmall: 320,
                small: 425,
                medium: 768,
                large: 1440,
                xlarge: 2560,
                huge: Infinity
            };
            var j = (function(d) {
                (0, dF.Z)(c, d);
                function c(e, b, h) {
                    var a;
                    e.id = e.id || b.id || "vjs_video_" + d8();
                    b = d$(c.getTagSettings(e), b);
                    b.initChildren = false;
                    b.createEl = false;
                    b.evented = false;
                    b.reportTouchActivity = false;
                    if (!b.language) {
                        if (typeof e.closest === "function") {
                            var g = e.closest("[lang]");
                            if (g && g.getAttribute) {
                                b.language = g.getAttribute("lang");
                            }
                        } else {
                            var f = e;
                            while(f && f.nodeType === 1){
                                if (bK(f).hasOwnProperty("lang")) {
                                    b.language = f.getAttribute("lang");
                                    break;
                                }
                                f = f.parentNode;
                            }
                        }
                    }
                    a = d.call(this, null, b, h) || this;
                    a.boundDocumentFullscreenChange_ = function(b) {
                        return a.documentFullscreenChange_(b);
                    };
                    a.boundFullWindowOnEscKey_ = function(b) {
                        return a.fullWindowOnEscKey(b);
                    };
                    a.boundUpdateStyleEl_ = function(b) {
                        return a.updateStyleEl_(b);
                    };
                    a.boundApplyInitTime_ = function(b) {
                        return a.applyInitTime_(b);
                    };
                    a.boundUpdateCurrentBreakpoint_ = function(b) {
                        return a.updateCurrentBreakpoint_(b);
                    };
                    a.boundHandleTechClick_ = function(b) {
                        return a.handleTechClick_(b);
                    };
                    a.boundHandleTechDoubleClick_ = function(b) {
                        return a.handleTechDoubleClick_(b);
                    };
                    a.boundHandleTechTouchStart_ = function(b) {
                        return a.handleTechTouchStart_(b);
                    };
                    a.boundHandleTechTouchMove_ = function(b) {
                        return a.handleTechTouchMove_(b);
                    };
                    a.boundHandleTechTouchEnd_ = function(b) {
                        return a.handleTechTouchEnd_(b);
                    };
                    a.boundHandleTechTap_ = function(b) {
                        return a.handleTechTap_(b);
                    };
                    a.isFullscreen_ = false;
                    a.log = bp(a.id_);
                    a.fsApi_ = ai;
                    a.isPosterFromTech_ = false;
                    a.queuedCallbacks_ = [];
                    a.isReady_ = false;
                    a.hasStarted_ = false;
                    a.userActive_ = false;
                    a.debugEnabled_ = false;
                    if (!a.options_ || !a.options_.techOrder || !a.options_.techOrder.length) {
                        throw new Error("No techOrder specified. Did you overwrite " + "videojs.options instead of just changing the " + "properties you want to override?");
                    }
                    a.tag = e;
                    a.tagAttributes = e && bK(e);
                    a.language(a.options_.language);
                    if (b.languages) {
                        var i = {};
                        Object.getOwnPropertyNames(b.languages).forEach(function(a) {
                            i[a.toLowerCase()] = b.languages[a];
                        });
                        a.languages_ = i;
                    } else {
                        a.languages_ = c.prototype.options_.languages;
                    }
                    a.resetCache_();
                    a.poster_ = b.poster || "";
                    a.controls_ = !!b.controls;
                    e.controls = false;
                    e.removeAttribute("controls");
                    a.changingSrc_ = false;
                    a.playCallbacks_ = [];
                    a.playTerminatedQueue_ = [];
                    if (e.hasAttribute("autoplay")) {
                        a.autoplay(true);
                    } else {
                        a.autoplay(a.options_.autoplay);
                    }
                    if (b.plugins) {
                        Object.keys(b.plugins).forEach(function(b) {
                            if (typeof a[b] !== "function") {
                                throw new Error('plugin "' + b + '" does not exist');
                            }
                        });
                    }
                    a.scrubbing_ = false;
                    a.el_ = a.createEl();
                    eu((0, dE.Z)(a), {
                        eventBusKey: "el_"
                    });
                    if (a.fsApi_.requestFullscreen) {
                        as(J(), a.fsApi_.fullscreenchange, a.boundDocumentFullscreenChange_);
                        a.on(a.fsApi_.fullscreenchange, a.boundDocumentFullscreenChange_);
                    }
                    if (a.fluid_) {
                        a.on([
                            "playerreset",
                            "resize"
                        ], a.boundUpdateStyleEl_);
                    }
                    var j = b6(a.options_);
                    if (b.plugins) {
                        Object.keys(b.plugins).forEach(function(c) {
                            a[c](b.plugins[c]);
                        });
                    }
                    if (b.debug) {
                        a.debug(true);
                    }
                    a.options_.playerOptions = j;
                    a.middleware_ = [];
                    a.playbackRates(b.playbackRates);
                    a.initChildren();
                    a.isAudio(e.nodeName.toLowerCase() === "audio");
                    if (a.controls()) {
                        a.addClass("vjs-controls-enabled");
                    } else {
                        a.addClass("vjs-controls-disabled");
                    }
                    a.el_.setAttribute("role", "region");
                    if (a.isAudio()) {
                        a.el_.setAttribute("aria-label", a.localize("Audio Player"));
                    } else {
                        a.el_.setAttribute("aria-label", a.localize("Video Player"));
                    }
                    if (a.isAudio()) {
                        a.addClass("vjs-audio");
                    }
                    if (a.flexNotSupported_()) {
                        a.addClass("vjs-no-flex");
                    }
                    if (N) {
                        a.addClass("vjs-touch-enabled");
                    }
                    if (!o) {
                        a.addClass("vjs-workinghover");
                    }
                    c.players[a.id_] = (0, dE.Z)(a);
                    var k = bi.split(".")[0];
                    a.addClass("vjs-v" + k);
                    a.userActive(true);
                    a.reportUserActivity();
                    a.one("play", function(b) {
                        return a.listenForUserActivity_(b);
                    });
                    a.on("stageclick", function(b) {
                        return a.handleStageClick_(b);
                    });
                    a.on("keydown", function(b) {
                        return a.handleKeyDown(b);
                    });
                    a.on("languagechange", function(b) {
                        return a.handleLanguagechange(b);
                    });
                    a.breakpoints(a.options_.breakpoints);
                    a.responsive(a.options_.responsive);
                    return a;
                }
                var b = c.prototype;
                b.dispose = function a() {
                    var b = this;
                    this.trigger("dispose");
                    this.off("dispose");
                    at(J(), this.fsApi_.fullscreenchange, this.boundDocumentFullscreenChange_);
                    at(J(), "keydown", this.boundFullWindowOnEscKey_);
                    if (this.styleEl_ && this.styleEl_.parentNode) {
                        this.styleEl_.parentNode.removeChild(this.styleEl_);
                        this.styleEl_ = null;
                    }
                    c.players[this.id_] = null;
                    if (this.tag && this.tag.player) {
                        this.tag.player = null;
                    }
                    if (this.el_ && this.el_.player) {
                        this.el_.player = null;
                    }
                    if (this.tech_) {
                        this.tech_.dispose();
                        this.isPosterFromTech_ = false;
                        this.poster_ = "";
                    }
                    if (this.playerElIngest_) {
                        this.playerElIngest_ = null;
                    }
                    if (this.tag) {
                        this.tag = null;
                    }
                    e4(this);
                    S.names.forEach(function(c) {
                        var d = S[c];
                        var a = b[d.getterName]();
                        if (a && a.off) {
                            a.off();
                        }
                    });
                    d.prototype.dispose.call(this);
                };
                b.createEl = function m() {
                    var a = this.tag;
                    var b;
                    var e = (this.playerElIngest_ = a.parentNode && a.parentNode.hasAttribute && a.parentNode.hasAttribute("data-vjs-player"));
                    var h = this.tag.tagName.toLowerCase() === "video-js";
                    if (e) {
                        b = this.el_ = a.parentNode;
                    } else if (!h) {
                        b = this.el_ = d.prototype.createEl.call(this, "div");
                    }
                    var c = bK(a);
                    if (h) {
                        b = this.el_ = a;
                        a = this.tag = J().createElement("video");
                        while(b.children.length){
                            a.appendChild(b.firstChild);
                        }
                        if (!bF(b, "video-js")) {
                            bG(b, "video-js");
                        }
                        b.appendChild(a);
                        e = this.playerElIngest_ = b;
                        Object.keys(b).forEach(function(c) {
                            try {
                                a[c] = b[c];
                            } catch (d) {}
                        });
                    }
                    a.setAttribute("tabindex", "-1");
                    c.tabindex = "-1";
                    if (bw || (L && bx)) {
                        a.setAttribute("role", "application");
                        c.role = "application";
                    }
                    a.removeAttribute("width");
                    a.removeAttribute("height");
                    if ("width" in c) {
                        delete c.width;
                    }
                    if ("height" in c) {
                        delete c.height;
                    }
                    Object.getOwnPropertyNames(c).forEach(function(d) {
                        if (!(h && d === "class")) {
                            b.setAttribute(d, c[d]);
                        }
                        if (h) {
                            a.setAttribute(d, c[d]);
                        }
                    });
                    a.playerId = a.id;
                    a.id += "_html5_api";
                    a.className = "vjs-tech";
                    a.player = b.player = this;
                    this.addClass("vjs-paused");
                    if (f().VIDEOJS_NO_DYNAMIC_STYLE !== true) {
                        this.styleEl_ = b0("vjs-styles-dimensions");
                        var i = Q(".vjs-styles-defaults");
                        var j = Q("head");
                        j.insertBefore(this.styleEl_, i ? i.nextSibling : j.firstChild);
                    }
                    this.fill_ = false;
                    this.fluid_ = false;
                    this.width(this.options_.width);
                    this.height(this.options_.height);
                    this.fill(this.options_.fill);
                    this.fluid(this.options_.fluid);
                    this.aspectRatio(this.options_.aspectRatio);
                    this.crossOrigin(this.options_.crossOrigin || this.options_.crossorigin);
                    var k = a.getElementsByTagName("a");
                    for(var g = 0; g < k.length; g++){
                        var l = k.item(g);
                        bG(l, "vjs-hidden");
                        l.setAttribute("hidden", "hidden");
                    }
                    a.initNetworkState_ = a.networkState;
                    if (a.parentNode && !e) {
                        a.parentNode.insertBefore(b, a);
                    }
                    bE(a, b);
                    this.children_.unshift(a);
                    this.el_.setAttribute("lang", this.language_);
                    this.el_.setAttribute("translate", "no");
                    this.el_ = b;
                    return b;
                };
                b.crossOrigin = function b(a) {
                    if (!a) {
                        return this.techGet_("crossOrigin");
                    }
                    if (a !== "anonymous" && a !== "use-credentials") {
                        ak.warn('crossOrigin must be "anonymous" or "use-credentials", given "' + a + '"');
                        return;
                    }
                    this.techCall_("setCrossOrigin", a);
                    return;
                };
                b.width = function b(a) {
                    return this.dimension("width", a);
                };
                b.height = function b(a) {
                    return this.dimension("height", a);
                };
                b.dimension = function e(c, a) {
                    var b = c + "_";
                    if (a === undefined) {
                        return this[b] || 0;
                    }
                    if (a === "" || a === "auto") {
                        this[b] = undefined;
                        this.updateStyleEl_();
                        return;
                    }
                    var d = parseFloat(a);
                    if (isNaN(d)) {
                        ak.error('Improper value "' + a + '" supplied for for ' + c);
                        return;
                    }
                    this[b] = d;
                    this.updateStyleEl_();
                };
                b.fluid = function b(a) {
                    var c = this;
                    if (a === undefined) {
                        return !!this.fluid_;
                    }
                    this.fluid_ = !!a;
                    if (el(this)) {
                        this.off([
                            "playerreset",
                            "resize"
                        ], this.boundUpdateStyleEl_);
                    }
                    if (a) {
                        this.addClass("vjs-fluid");
                        this.fill(false);
                        em(this, function() {
                            c.on([
                                "playerreset",
                                "resize"
                            ], c.boundUpdateStyleEl_);
                        });
                    } else {
                        this.removeClass("vjs-fluid");
                    }
                    this.updateStyleEl_();
                };
                b.fill = function b(a) {
                    if (a === undefined) {
                        return !!this.fill_;
                    }
                    this.fill_ = !!a;
                    if (a) {
                        this.addClass("vjs-fill");
                        this.fluid(false);
                    } else {
                        this.removeClass("vjs-fill");
                    }
                };
                b.aspectRatio = function b(a) {
                    if (a === undefined) {
                        return this.aspectRatio_;
                    }
                    if (!/^\d+\:\d+$/.test(a)) {
                        throw new Error("Improper value supplied for aspect ratio. The format should be width:height, for example 16:9.");
                    }
                    this.aspectRatio_ = a;
                    this.fluid(true);
                    this.updateStyleEl_();
                };
                b.updateStyleEl_ = function k() {
                    if (f().VIDEOJS_NO_DYNAMIC_STYLE === true) {
                        var h = typeof this.width_ === "number" ? this.width_ : this.options_.width;
                        var i = typeof this.height_ === "number" ? this.height_ : this.options_.height;
                        var d = this.tech_ && this.tech_.el();
                        if (d) {
                            if (h >= 0) {
                                d.width = h;
                            }
                            if (i >= 0) {
                                d.height = i;
                            }
                        }
                        return;
                    }
                    var a;
                    var e;
                    var c;
                    var b;
                    if (this.aspectRatio_ !== undefined && this.aspectRatio_ !== "auto") {
                        c = this.aspectRatio_;
                    } else if (this.videoWidth() > 0) {
                        c = this.videoWidth() + ":" + this.videoHeight();
                    } else {
                        c = "16:9";
                    }
                    var j = c.split(":");
                    var g = j[1] / j[0];
                    if (this.width_ !== undefined) {
                        a = this.width_;
                    } else if (this.height_ !== undefined) {
                        a = this.height_ / g;
                    } else {
                        a = this.videoWidth() || 300;
                    }
                    if (this.height_ !== undefined) {
                        e = this.height_;
                    } else {
                        e = a * g;
                    }
                    if (/^[^a-zA-Z]/.test(this.id())) {
                        b = "dimensions-" + this.id();
                    } else {
                        b = this.id() + "-dimensions";
                    }
                    this.addClass(b);
                    b1(this.styleEl_, "\n      ." + b + " {\n        width: " + a + "px;\n        height: " + e + "px;\n      }\n\n      ." + b + ".vjs-fluid {\n        padding-top: " + g * 100 + "%;\n      }\n    ");
                };
                b.loadTech_ = function i(c, d) {
                    var j = this;
                    if (this.tech_) {
                        this.unloadTech_();
                    }
                    var a = ey(c);
                    var f = c.charAt(0).toLowerCase() + c.slice(1);
                    if (a !== "Html5" && this.tag) {
                        e.getTech("Html5").disposeMediaElement(this.tag);
                        this.tag.player = null;
                        this.tag = null;
                    }
                    this.techName_ = a;
                    this.isReady_ = false;
                    var g = this.autoplay();
                    if (typeof this.autoplay() === "string" || (this.autoplay() === true && this.options_.normalizeAutoplay)) {
                        g = false;
                    }
                    var b = {
                        source: d,
                        autoplay: g,
                        nativeControlsForTouch: this.options_.nativeControlsForTouch,
                        playerId: this.id(),
                        techId: this.id() + "_" + f + "_api",
                        playsinline: this.options_.playsinline,
                        preload: this.options_.preload,
                        loop: this.options_.loop,
                        disablePictureInPicture: this.options_.disablePictureInPicture,
                        muted: this.options_.muted,
                        poster: this.poster(),
                        language: this.language(),
                        playerElIngest: this.playerElIngest_ || false,
                        "vtt.js": this.options_["vtt.js"],
                        canOverridePoster: !!this.options_.techCanOverridePoster,
                        enableSourceset: this.options_.enableSourceset,
                        Promise: this.options_.Promise
                    };
                    S.names.forEach(function(c) {
                        var a = S[c];
                        b[a.getterName] = j[a.privateName];
                    });
                    d$(b, this.options_[a]);
                    d$(b, this.options_[f]);
                    d$(b, this.options_[c.toLowerCase()]);
                    if (this.tag) {
                        b.tag = this.tag;
                    }
                    if (d && d.src === this.cache_.src && this.cache_.currentTime > 0) {
                        b.startTime = this.cache_.currentTime;
                    }
                    var h = e.getTech(c);
                    if (!h) {
                        throw new Error("No Tech named '" + a + "' exists! '" + a + "' should be registered using videojs.registerTech()'");
                    }
                    this.tech_ = new h(b);
                    this.tech_.ready(b5(this, this.handleTechReady_), true);
                    eI.jsonToTextTracks(this.textTracksJson_ || [], this.tech_);
                    cP.forEach(function(a) {
                        j.on(j.tech_, a, function(b) {
                            return j["handleTech" + ey(a) + "_"](b);
                        });
                    });
                    Object.keys(fD).forEach(function(a) {
                        j.on(j.tech_, a, function(b) {
                            if (j.tech_.playbackRate() === 0 && j.tech_.seeking()) {
                                j.queuedCallbacks_.push({
                                    callback: j["handleTech" + fD[a] + "_"].bind(j),
                                    event: b
                                });
                                return;
                            }
                            j["handleTech" + fD[a] + "_"](b);
                        });
                    });
                    this.on(this.tech_, "loadstart", function(a) {
                        return j.handleTechLoadStart_(a);
                    });
                    this.on(this.tech_, "sourceset", function(a) {
                        return j.handleTechSourceset_(a);
                    });
                    this.on(this.tech_, "waiting", function(a) {
                        return j.handleTechWaiting_(a);
                    });
                    this.on(this.tech_, "ended", function(a) {
                        return j.handleTechEnded_(a);
                    });
                    this.on(this.tech_, "seeking", function(a) {
                        return j.handleTechSeeking_(a);
                    });
                    this.on(this.tech_, "play", function(a) {
                        return j.handleTechPlay_(a);
                    });
                    this.on(this.tech_, "firstplay", function(a) {
                        return j.handleTechFirstPlay_(a);
                    });
                    this.on(this.tech_, "pause", function(a) {
                        return j.handleTechPause_(a);
                    });
                    this.on(this.tech_, "durationchange", function(a) {
                        return j.handleTechDurationChange_(a);
                    });
                    this.on(this.tech_, "fullscreenchange", function(a, b) {
                        return j.handleTechFullscreenChange_(a, b);
                    });
                    this.on(this.tech_, "fullscreenerror", function(a, b) {
                        return j.handleTechFullscreenError_(a, b);
                    });
                    this.on(this.tech_, "enterpictureinpicture", function(a) {
                        return j.handleTechEnterPictureInPicture_(a);
                    });
                    this.on(this.tech_, "leavepictureinpicture", function(a) {
                        return j.handleTechLeavePictureInPicture_(a);
                    });
                    this.on(this.tech_, "error", function(a) {
                        return j.handleTechError_(a);
                    });
                    this.on(this.tech_, "posterchange", function(a) {
                        return j.handleTechPosterChange_(a);
                    });
                    this.on(this.tech_, "textdata", function(a) {
                        return j.handleTechTextData_(a);
                    });
                    this.on(this.tech_, "ratechange", function(a) {
                        return j.handleTechRateChange_(a);
                    });
                    this.on(this.tech_, "loadedmetadata", this.boundUpdateStyleEl_);
                    this.usingNativeControls(this.techGet_("controls"));
                    if (this.controls() && !this.usingNativeControls()) {
                        this.addTechControlsListeners_();
                    }
                    if (this.tech_.el().parentNode !== this.el() && (a !== "Html5" || !this.tag)) {
                        bE(this.tech_.el(), this.el());
                    }
                    if (this.tag) {
                        this.tag.player = null;
                        this.tag = null;
                    }
                };
                b.unloadTech_ = function a() {
                    var b = this;
                    S.names.forEach(function(c) {
                        var a = S[c];
                        b[a.privateName] = b[a.getterName]();
                    });
                    this.textTracksJson_ = eI.textTracksToJson(this.tech_);
                    this.isReady_ = false;
                    this.tech_.dispose();
                    this.tech_ = false;
                    if (this.isPosterFromTech_) {
                        this.poster_ = "";
                        this.trigger("posterchange");
                    }
                    this.isPosterFromTech_ = false;
                };
                b.tech = function b(a) {
                    if (a === undefined) {
                        ak.warn("Using the tech directly can be dangerous. I hope you know what you're doing.\n" + "See https://github.com/videojs/video.js/issues/2617 for more info.\n");
                    }
                    return this.tech_;
                };
                b.addTechControlsListeners_ = function a() {
                    this.removeTechControlsListeners_();
                    this.on(this.tech_, "click", this.boundHandleTechClick_);
                    this.on(this.tech_, "dblclick", this.boundHandleTechDoubleClick_);
                    this.on(this.tech_, "touchstart", this.boundHandleTechTouchStart_);
                    this.on(this.tech_, "touchmove", this.boundHandleTechTouchMove_);
                    this.on(this.tech_, "touchend", this.boundHandleTechTouchEnd_);
                    this.on(this.tech_, "tap", this.boundHandleTechTap_);
                };
                b.removeTechControlsListeners_ = function a() {
                    this.off(this.tech_, "tap", this.boundHandleTechTap_);
                    this.off(this.tech_, "touchstart", this.boundHandleTechTouchStart_);
                    this.off(this.tech_, "touchmove", this.boundHandleTechTouchMove_);
                    this.off(this.tech_, "touchend", this.boundHandleTechTouchEnd_);
                    this.off(this.tech_, "click", this.boundHandleTechClick_);
                    this.off(this.tech_, "dblclick", this.boundHandleTechDoubleClick_);
                };
                b.handleTechReady_ = function a() {
                    this.triggerReady();
                    if (this.cache_.volume) {
                        this.techCall_("setVolume", this.cache_.volume);
                    }
                    this.handleTechPosterChange_();
                    this.handleTechDurationChange_();
                };
                b.handleTechLoadStart_ = function a() {
                    this.removeClass("vjs-ended");
                    this.removeClass("vjs-seeking");
                    this.error(null);
                    this.handleTechDurationChange_();
                    if (!this.paused()) {
                        this.trigger("loadstart");
                        this.trigger("firstplay");
                    } else {
                        this.hasStarted(false);
                        this.trigger("loadstart");
                    }
                    this.manualAutoplay_(this.autoplay() === true && this.options_.normalizeAutoplay ? "play" : this.autoplay());
                };
                b.manualAutoplay_ = function d(b) {
                    var e = this;
                    if (!this.tech_ || typeof b !== "string") {
                        return;
                    }
                    var c = function c() {
                        var d = e.muted();
                        e.muted(true);
                        var b = function a() {
                            e.muted(d);
                        };
                        e.playTerminatedQueue_.push(b);
                        var a = e.play();
                        if (!eG(a)) {
                            return;
                        }
                        return a["catch"](function(a) {
                            b();
                            throw new Error("Rejection at manualAutoplay. Restoring muted value. " + (a ? a : ""));
                        });
                    };
                    var a;
                    if (b === "any" && !this.muted()) {
                        a = this.play();
                        if (eG(a)) {
                            a = a["catch"](c);
                        }
                    } else if (b === "muted" && !this.muted()) {
                        a = c();
                    } else {
                        a = this.play();
                    }
                    if (!eG(a)) {
                        return;
                    }
                    return a.then(function() {
                        e.trigger({
                            type: "autoplay-success",
                            autoplay: b
                        });
                    })["catch"](function() {
                        e.trigger({
                            type: "autoplay-failure",
                            autoplay: b
                        });
                    });
                };
                b.updateSourceCaches_ = function j(b) {
                    if (b === void 0) {
                        b = "";
                    }
                    var a = b;
                    var c = "";
                    if (typeof a !== "string") {
                        a = b.src;
                        c = b.type;
                    }
                    this.cache_.source = this.cache_.source || {};
                    this.cache_.sources = this.cache_.sources || [];
                    if (a && !c) {
                        c = e9(this, a);
                    }
                    this.cache_.source = b6({}, b, {
                        src: a,
                        type: c
                    });
                    var f = this.cache_.sources.filter(function(b) {
                        return b.src && b.src === a;
                    });
                    var g = [];
                    var h = this.$$("source");
                    var i = [];
                    for(var e = 0; e < h.length; e++){
                        var d = bK(h[e]);
                        g.push(d);
                        if (d.src && d.src === a) {
                            i.push(d.src);
                        }
                    }
                    if (i.length && !f.length) {
                        this.cache_.sources = g;
                    } else if (!f.length) {
                        this.cache_.sources = [
                            this.cache_.source
                        ];
                    }
                    this.cache_.src = a;
                };
                b.handleTechSourceset_ = function e(a) {
                    var f = this;
                    if (!this.changingSrc_) {
                        var d = function b(a) {
                            return f.updateSourceCaches_(a);
                        };
                        var b = this.currentSource().src;
                        var c = a.src;
                        if (b && !/^blob:/.test(b) && /^blob:/.test(c)) {
                            if (!this.lastSource_ || (this.lastSource_.tech !== c && this.lastSource_.player !== b)) {
                                d = function a() {};
                            }
                        }
                        d(c);
                        if (!a.src) {
                            this.tech_.any([
                                "sourceset",
                                "loadstart"
                            ], function(b) {
                                if (b.type === "sourceset") {
                                    return;
                                }
                                var a = f.techGet("currentSrc");
                                f.lastSource_.tech = a;
                                f.updateSourceCaches_(a);
                            });
                        }
                    }
                    this.lastSource_ = {
                        player: this.currentSource().src,
                        tech: a.src
                    };
                    this.trigger({
                        src: a.src,
                        type: "sourceset"
                    });
                };
                b.hasStarted = function b(a) {
                    if (a === undefined) {
                        return this.hasStarted_;
                    }
                    if (a === this.hasStarted_) {
                        return;
                    }
                    this.hasStarted_ = a;
                    if (this.hasStarted_) {
                        this.addClass("vjs-has-started");
                        this.trigger("firstplay");
                    } else {
                        this.removeClass("vjs-has-started");
                    }
                };
                b.handleTechPlay_ = function a() {
                    this.removeClass("vjs-ended");
                    this.removeClass("vjs-paused");
                    this.addClass("vjs-playing");
                    this.hasStarted(true);
                    this.trigger("play");
                };
                b.handleTechRateChange_ = function a() {
                    if (this.tech_.playbackRate() > 0 && this.cache_.lastPlaybackRate === 0) {
                        this.queuedCallbacks_.forEach(function(a) {
                            return a.callback(a.event);
                        });
                        this.queuedCallbacks_ = [];
                    }
                    this.cache_.lastPlaybackRate = this.tech_.playbackRate();
                    this.trigger("ratechange");
                };
                b.handleTechWaiting_ = function b() {
                    var c = this;
                    this.addClass("vjs-waiting");
                    this.trigger("waiting");
                    var d = this.currentTime();
                    var a = function a() {
                        if (d !== c.currentTime()) {
                            c.removeClass("vjs-waiting");
                            c.off("timeupdate", a);
                        }
                    };
                    this.on("timeupdate", a);
                };
                b.handleTechCanPlay_ = function a() {
                    this.removeClass("vjs-waiting");
                    this.trigger("canplay");
                };
                b.handleTechCanPlayThrough_ = function a() {
                    this.removeClass("vjs-waiting");
                    this.trigger("canplaythrough");
                };
                b.handleTechPlaying_ = function a() {
                    this.removeClass("vjs-waiting");
                    this.trigger("playing");
                };
                b.handleTechSeeking_ = function a() {
                    this.addClass("vjs-seeking");
                    this.trigger("seeking");
                };
                b.handleTechSeeked_ = function a() {
                    this.removeClass("vjs-seeking");
                    this.removeClass("vjs-ended");
                    this.trigger("seeked");
                };
                b.handleTechFirstPlay_ = function a() {
                    if (this.options_.starttime) {
                        ak.warn("Passing the `starttime` option to the player will be deprecated in 6.0");
                        this.currentTime(this.options_.starttime);
                    }
                    this.addClass("vjs-has-started");
                    this.trigger("firstplay");
                };
                b.handleTechPause_ = function a() {
                    this.removeClass("vjs-playing");
                    this.addClass("vjs-paused");
                    this.trigger("pause");
                };
                b.handleTechEnded_ = function a() {
                    this.addClass("vjs-ended");
                    this.removeClass("vjs-waiting");
                    if (this.options_.loop) {
                        this.currentTime(0);
                        this.play();
                    } else if (!this.paused()) {
                        this.pause();
                    }
                    this.trigger("ended");
                };
                b.handleTechDurationChange_ = function a() {
                    this.duration(this.techGet_("duration"));
                };
                b.handleTechClick_ = function b(a) {
                    if (!this.controls_) {
                        return;
                    }
                    if (this.options_ === undefined || this.options_.userActions === undefined || this.options_.userActions.click === undefined || this.options_.userActions.click !== false) {
                        if (this.options_ !== undefined && this.options_.userActions !== undefined && typeof this.options_.userActions.click === "function") {
                            this.options_.userActions.click.call(this, a);
                        } else if (this.paused()) {
                            eH(this.play());
                        } else {
                            this.pause();
                        }
                    }
                };
                b.handleTechDoubleClick_ = function c(a) {
                    if (!this.controls_) {
                        return;
                    }
                    var b = Array.prototype.some.call(this.$$(".vjs-control-bar, .vjs-modal-dialog"), function(b) {
                        return b.contains(a.target);
                    });
                    if (!b) {
                        if (this.options_ === undefined || this.options_.userActions === undefined || this.options_.userActions.doubleClick === undefined || this.options_.userActions.doubleClick !== false) {
                            if (this.options_ !== undefined && this.options_.userActions !== undefined && typeof this.options_.userActions.doubleClick === "function") {
                                this.options_.userActions.doubleClick.call(this, a);
                            } else if (this.isFullscreen()) {
                                this.exitFullscreen();
                            } else {
                                this.requestFullscreen();
                            }
                        }
                    }
                };
                b.handleTechTap_ = function a() {
                    this.userActive(!this.userActive());
                };
                b.handleTechTouchStart_ = function a() {
                    this.userWasActive = this.userActive();
                };
                b.handleTechTouchMove_ = function a() {
                    if (this.userWasActive) {
                        this.reportUserActivity();
                    }
                };
                b.handleTechTouchEnd_ = function b(a) {
                    if (a.cancelable) {
                        a.preventDefault();
                    }
                };
                b.handleStageClick_ = function a() {
                    this.reportUserActivity();
                };
                b.toggleFullscreenClass_ = function a() {
                    if (this.isFullscreen()) {
                        this.addClass("vjs-fullscreen");
                    } else {
                        this.removeClass("vjs-fullscreen");
                    }
                };
                b.documentFullscreenChange_ = function e(d) {
                    var c = d.target.player;
                    if (c && c !== this) {
                        return;
                    }
                    var a = this.el();
                    var b = J()[this.fsApi_.fullscreenElement] === a;
                    if (!b && a.matches) {
                        b = a.matches(":" + this.fsApi_.fullscreen);
                    } else if (!b && a.msMatchesSelector) {
                        b = a.msMatchesSelector(":" + this.fsApi_.fullscreen);
                    }
                    this.isFullscreen(b);
                };
                b.handleTechFullscreenChange_ = function b(c, a) {
                    if (a) {
                        if (a.nativeIOSFullscreen) {
                            this.toggleClass("vjs-ios-native-fs");
                        }
                        this.isFullscreen(a.isFullscreen);
                    }
                };
                b.handleTechFullscreenError_ = function b(c, a) {
                    this.trigger("fullscreenerror", a);
                };
                b.togglePictureInPictureClass_ = function a() {
                    if (this.isInPictureInPicture()) {
                        this.addClass("vjs-picture-in-picture");
                    } else {
                        this.removeClass("vjs-picture-in-picture");
                    }
                };
                b.handleTechEnterPictureInPicture_ = function a(b) {
                    this.isInPictureInPicture(true);
                };
                b.handleTechLeavePictureInPicture_ = function a(b) {
                    this.isInPictureInPicture(false);
                };
                b.handleTechError_ = function b() {
                    var a = this.tech_.error();
                    this.error(a);
                };
                b.handleTechTextData_ = function b() {
                    var a = null;
                    if (arguments.length > 1) {
                        a = arguments[1];
                    }
                    this.trigger("textdata", a);
                };
                b.getCache = function a() {
                    return this.cache_;
                };
                b.resetCache_ = function a() {
                    this.cache_ = {
                        currentTime: 0,
                        initTime: 0,
                        inactivityTimeout: this.options_.inactivityTimeout,
                        duration: NaN,
                        lastVolume: 1,
                        lastPlaybackRate: this.defaultPlaybackRate(),
                        media: null,
                        src: "",
                        source: {},
                        sources: [],
                        playbackRates: [],
                        volume: 1
                    };
                };
                b.techCall_ = function a(b, c) {
                    this.ready(function() {
                        if (b in e0) {
                            return eZ(this.middleware_, this.tech_, b, c);
                        } else if (b in e1) {
                            return e$(this.middleware_, this.tech_, b, c);
                        }
                        try {
                            if (this.tech_) {
                                this.tech_[b](c);
                            }
                        } catch (a) {
                            ak(a);
                            throw a;
                        }
                    }, true);
                };
                b.techGet_ = function c(a) {
                    if (!this.tech_ || !this.tech_.isReady_) {
                        return;
                    }
                    if (a in e_) {
                        return eY(this.middleware_, this.tech_, a);
                    } else if (a in e1) {
                        return e$(this.middleware_, this.tech_, a);
                    }
                    try {
                        return this.tech_[a]();
                    } catch (b) {
                        if (this.tech_[a] === undefined) {
                            ak("Video.js: " + a + " method not defined for " + this.techName_ + " playback technology.", b);
                            throw b;
                        }
                        if (b.name === "TypeError") {
                            ak("Video.js: " + a + " unavailable on " + this.techName_ + " playback technology element.", b);
                            this.tech_.isReady_ = false;
                            throw b;
                        }
                        ak(b);
                        throw b;
                    }
                };
                b.play = function b() {
                    var c = this;
                    var a = this.options_.Promise || f().Promise;
                    if (a) {
                        return new a(function(a) {
                            c.play_(a);
                        });
                    }
                    return this.play_();
                };
                b.play_ = function d(a) {
                    var e = this;
                    if (a === void 0) {
                        a = eH;
                    }
                    this.playCallbacks_.push(a);
                    var b = Boolean(!this.changingSrc_ && (this.src() || this.currentSrc()));
                    if (this.waitToPlay_) {
                        this.off([
                            "ready",
                            "loadstart"
                        ], this.waitToPlay_);
                        this.waitToPlay_ = null;
                    }
                    if (!this.isReady_ || !b) {
                        this.waitToPlay_ = function(a) {
                            e.play_();
                        };
                        this.one([
                            "ready",
                            "loadstart"
                        ], this.waitToPlay_);
                        if (!b && (by || o)) {
                            this.load();
                        }
                        return;
                    }
                    var c = this.techGet_("play");
                    if (c === null) {
                        this.runPlayTerminatedQueue_();
                    } else {
                        this.runPlayCallbacks_(c);
                    }
                };
                b.runPlayTerminatedQueue_ = function b() {
                    var a = this.playTerminatedQueue_.slice(0);
                    this.playTerminatedQueue_ = [];
                    a.forEach(function(a) {
                        a();
                    });
                };
                b.runPlayCallbacks_ = function b(c) {
                    var a = this.playCallbacks_.slice(0);
                    this.playCallbacks_ = [];
                    this.playTerminatedQueue_ = [];
                    a.forEach(function(a) {
                        a(c);
                    });
                };
                b.pause = function a() {
                    this.techCall_("pause");
                };
                b.paused = function a() {
                    return this.techGet_("paused") === false ? false : true;
                };
                b.played = function a() {
                    return this.techGet_("played") || b9(0, 0);
                };
                b.scrubbing = function b(a) {
                    if (typeof a === "undefined") {
                        return this.scrubbing_;
                    }
                    this.scrubbing_ = !!a;
                    this.techCall_("setScrubbing", this.scrubbing_);
                    if (a) {
                        this.addClass("vjs-scrubbing");
                    } else {
                        this.removeClass("vjs-scrubbing");
                    }
                };
                b.currentTime = function b(a) {
                    if (typeof a !== "undefined") {
                        if (a < 0) {
                            a = 0;
                        }
                        if (!this.isReady_ || this.changingSrc_ || !this.tech_ || !this.tech_.isReady_) {
                            this.cache_.initTime = a;
                            this.off("canplay", this.boundApplyInitTime_);
                            this.one("canplay", this.boundApplyInitTime_);
                            return;
                        }
                        this.techCall_("setCurrentTime", a);
                        this.cache_.initTime = 0;
                        return;
                    }
                    this.cache_.currentTime = this.techGet_("currentTime") || 0;
                    return this.cache_.currentTime;
                };
                b.applyInitTime_ = function a() {
                    this.currentTime(this.cache_.initTime);
                };
                b.duration = function b(a) {
                    if (a === undefined) {
                        return this.cache_.duration !== undefined ? this.cache_.duration : NaN;
                    }
                    a = parseFloat(a);
                    if (a < 0) {
                        a = Infinity;
                    }
                    if (a !== this.cache_.duration) {
                        this.cache_.duration = a;
                        if (a === Infinity) {
                            this.addClass("vjs-live");
                        } else {
                            this.removeClass("vjs-live");
                        }
                        if (!isNaN(a)) {
                            this.trigger("durationchange");
                        }
                    }
                };
                b.remainingTime = function a() {
                    return this.duration() - this.currentTime();
                };
                b.remainingTimeDisplay = function a() {
                    return (Math.floor(this.duration()) - Math.floor(this.currentTime()));
                };
                b.buffered = function a() {
                    var a = this.techGet_("buffered");
                    if (!a || !a.length) {
                        a = b9(0, 0);
                    }
                    return a;
                };
                b.bufferedPercent = function a() {
                    return eF(this.buffered(), this.duration());
                };
                b.bufferedEnd = function d() {
                    var b = this.buffered();
                    var c = this.duration();
                    var a = b.end(b.length - 1);
                    if (a > c) {
                        a = c;
                    }
                    return a;
                };
                b.volume = function c(b) {
                    var a;
                    if (b !== undefined) {
                        a = Math.max(0, Math.min(1, parseFloat(b)));
                        this.cache_.volume = a;
                        this.techCall_("setVolume", a);
                        if (a > 0) {
                            this.lastVolume_(a);
                        }
                        return;
                    }
                    a = parseFloat(this.techGet_("volume"));
                    return isNaN(a) ? 1 : a;
                };
                b.muted = function b(a) {
                    if (a !== undefined) {
                        this.techCall_("setMuted", a);
                        return;
                    }
                    return this.techGet_("muted") || false;
                };
                b.defaultMuted = function b(a) {
                    if (a !== undefined) {
                        return this.techCall_("setDefaultMuted", a);
                    }
                    return this.techGet_("defaultMuted") || false;
                };
                b.lastVolume_ = function b(a) {
                    if (a !== undefined && a !== 0) {
                        this.cache_.lastVolume = a;
                        return;
                    }
                    return this.cache_.lastVolume;
                };
                b.supportsFullScreen = function a() {
                    return this.techGet_("supportsFullScreen") || false;
                };
                b.isFullscreen = function c(a) {
                    if (a !== undefined) {
                        var b = this.isFullscreen_;
                        this.isFullscreen_ = Boolean(a);
                        if (this.isFullscreen_ !== b && this.fsApi_.prefixed) {
                            this.trigger("fullscreenchange");
                        }
                        this.toggleFullscreenClass_();
                        return;
                    }
                    return this.isFullscreen_;
                };
                b.requestFullscreen = function b(c) {
                    var a = this.options_.Promise || f().Promise;
                    if (a) {
                        var d = this;
                        return new a(function(e, f) {
                            function b() {
                                d.off("fullscreenerror", h);
                                d.off("fullscreenchange", g);
                            }
                            function g() {
                                b();
                                e();
                            }
                            function h(c, a) {
                                b();
                                f(a);
                            }
                            d.one("fullscreenchange", g);
                            d.one("fullscreenerror", h);
                            var a = d.requestFullscreenHelper_(c);
                            if (a) {
                                a.then(b, b);
                                a.then(e, f);
                            }
                        });
                    }
                    return this.requestFullscreenHelper_();
                };
                b.requestFullscreenHelper_ = function d(c) {
                    var e = this;
                    var a;
                    if (!this.fsApi_.prefixed) {
                        a = (this.options_.fullscreen && this.options_.fullscreen.options) || {};
                        if (c !== undefined) {
                            a = c;
                        }
                    }
                    if (this.fsApi_.requestFullscreen) {
                        var b = this.el_[this.fsApi_.requestFullscreen](a);
                        if (b) {
                            b.then(function() {
                                return e.isFullscreen(true);
                            }, function() {
                                return e.isFullscreen(false);
                            });
                        }
                        return b;
                    } else if (this.tech_.supportsFullScreen() && !this.options_.preferFullWindow === true) {
                        this.techCall_("enterFullScreen");
                    } else {
                        this.enterFullWindow();
                    }
                };
                b.exitFullscreen = function b() {
                    var a = this.options_.Promise || f().Promise;
                    if (a) {
                        var c = this;
                        return new a(function(d, e) {
                            function b() {
                                c.off("fullscreenerror", g);
                                c.off("fullscreenchange", f);
                            }
                            function f() {
                                b();
                                d();
                            }
                            function g(c, a) {
                                b();
                                e(a);
                            }
                            c.one("fullscreenchange", f);
                            c.one("fullscreenerror", g);
                            var a = c.exitFullscreenHelper_();
                            if (a) {
                                a.then(b, b);
                                a.then(d, e);
                            }
                        });
                    }
                    return this.exitFullscreenHelper_();
                };
                b.exitFullscreenHelper_ = function b() {
                    var c = this;
                    if (this.fsApi_.requestFullscreen) {
                        var a = J()[this.fsApi_.exitFullscreen]();
                        if (a) {
                            eH(a.then(function() {
                                return c.isFullscreen(false);
                            }));
                        }
                        return a;
                    } else if (this.tech_.supportsFullScreen() && !this.options_.preferFullWindow === true) {
                        this.techCall_("exitFullScreen");
                    } else {
                        this.exitFullWindow();
                    }
                };
                b.enterFullWindow = function a() {
                    this.isFullscreen(true);
                    this.isFullWindow = true;
                    this.docOrigOverflow = J().documentElement.style.overflow;
                    as(J(), "keydown", this.boundFullWindowOnEscKey_);
                    J().documentElement.style.overflow = "hidden";
                    bG(J().body, "vjs-full-window");
                    this.trigger("enterFullWindow");
                };
                b.fullWindowOnEscKey = function b(a) {
                    if (dH().isEventKey(a, "Esc")) {
                        if (this.isFullscreen() === true) {
                            if (!this.isFullWindow) {
                                this.exitFullscreen();
                            } else {
                                this.exitFullWindow();
                            }
                        }
                    }
                };
                b.exitFullWindow = function a() {
                    this.isFullscreen(false);
                    this.isFullWindow = false;
                    at(J(), "keydown", this.boundFullWindowOnEscKey_);
                    J().documentElement.style.overflow = this.docOrigOverflow;
                    bH(J().body, "vjs-full-window");
                    this.trigger("exitFullWindow");
                };
                b.disablePictureInPicture = function b(a) {
                    if (a === undefined) {
                        return this.techGet_("disablePictureInPicture");
                    }
                    this.techCall_("setDisablePictureInPicture", a);
                    this.options_.disablePictureInPicture = a;
                    this.trigger("disablepictureinpicturechanged");
                };
                b.isInPictureInPicture = function b(a) {
                    if (a !== undefined) {
                        this.isInPictureInPicture_ = !!a;
                        this.togglePictureInPictureClass_();
                        return;
                    }
                    return !!this.isInPictureInPicture_;
                };
                b.requestPictureInPicture = function a() {
                    if ("pictureInPictureEnabled" in J() && this.disablePictureInPicture() === false) {
                        return this.techGet_("requestPictureInPicture");
                    }
                };
                b.exitPictureInPicture = function a() {
                    if ("pictureInPictureEnabled" in J()) {
                        return J().exitPictureInPicture();
                    }
                };
                b.handleKeyDown = function d(b) {
                    var a = this.options_.userActions;
                    if (!a || !a.hotkeys) {
                        return;
                    }
                    var c = function e(a) {
                        var b = a.tagName.toLowerCase();
                        if (a.isContentEditable) {
                            return true;
                        }
                        var c = [
                            "button",
                            "checkbox",
                            "hidden",
                            "radio",
                            "reset",
                            "submit", 
                        ];
                        if (b === "input") {
                            return c.indexOf(a.type) === -1;
                        }
                        var d = [
                            "textarea"
                        ];
                        return d.indexOf(b) !== -1;
                    };
                    if (c(this.el_.ownerDocument.activeElement)) {
                        return;
                    }
                    if (typeof a.hotkeys === "function") {
                        a.hotkeys.call(this, b);
                    } else {
                        this.handleHotkeys(b);
                    }
                };
                b.handleHotkeys = function m(b) {
                    var c = this.options_.userActions ? this.options_.userActions.hotkeys : {};
                    var d = c.fullscreenKey, g = d === void 0 ? function(a) {
                        return dH().isEventKey(a, "f");
                    } : d, e = c.muteKey, h = e === void 0 ? function(a) {
                        return dH().isEventKey(a, "m");
                    } : e, f = c.playPauseKey, i = f === void 0 ? function(a) {
                        return (dH().isEventKey(a, "k") || dH().isEventKey(a, "Space"));
                    } : f;
                    if (g.call(this, b)) {
                        b.preventDefault();
                        b.stopPropagation();
                        var j = a.getComponent("FullscreenToggle");
                        if (J()[this.fsApi_.fullscreenEnabled] !== false) {
                            j.prototype.handleClick.call(this, b);
                        }
                    } else if (h.call(this, b)) {
                        b.preventDefault();
                        b.stopPropagation();
                        var k = a.getComponent("MuteToggle");
                        k.prototype.handleClick.call(this, b);
                    } else if (i.call(this, b)) {
                        b.preventDefault();
                        b.stopPropagation();
                        var l = a.getComponent("PlayToggle");
                        l.prototype.handleClick.call(this, b);
                    }
                };
                b.canPlayType = function i(h) {
                    var c;
                    for(var d = 0, g = this.options_.techOrder; d < g.length; d++){
                        var f = g[d];
                        var b = e.getTech(f);
                        if (!b) {
                            b = a.getComponent(f);
                        }
                        if (!b) {
                            ak.error('The "' + f + '" tech is undefined. Skipped browser support check for that tech.');
                            continue;
                        }
                        if (b.isSupported()) {
                            c = b.canPlayType(h);
                            if (c) {
                                return c;
                            }
                        }
                    }
                    return "";
                };
                b.selectSource = function h(b) {
                    var i = this;
                    var c = this.options_.techOrder.map(function(a) {
                        return [
                            a,
                            e.getTech(a)
                        ];
                    }).filter(function(a) {
                        var c = a[0], b = a[1];
                        if (b) {
                            return b.isSupported();
                        }
                        ak.error('The "' + c + '" tech is undefined. Skipped browser support check for that tech.');
                        return false;
                    });
                    var d = function c(a, d, e) {
                        var b;
                        a.some(function(a) {
                            return d.some(function(c) {
                                b = e(a, c);
                                if (b) {
                                    return true;
                                }
                            });
                        });
                        return b;
                    };
                    var a;
                    var g = function a(b) {
                        return function(a, c) {
                            return b(c, a);
                        };
                    };
                    var f = function e(a, b) {
                        var c = a[0], d = a[1];
                        if (d.canPlaySource(b, i.options_[c.toLowerCase()])) {
                            return {
                                source: b,
                                tech: c
                            };
                        }
                    };
                    if (this.options_.sourceOrder) {
                        a = d(b, c, g(f));
                    } else {
                        a = d(c, b, f);
                    }
                    return a || false;
                };
                b.handleSrc_ = function f(b, c) {
                    var g = this;
                    if (typeof b === "undefined") {
                        return this.cache_.src || "";
                    }
                    if (this.resetRetryOnError_) {
                        this.resetRetryOnError_();
                    }
                    var a = fa(b);
                    if (!a.length) {
                        this.setTimeout(function() {
                            this.error({
                                code: 4,
                                message: this.localize(this.options_.notSupportedMessage)
                            });
                        }, 0);
                        return;
                    }
                    this.changingSrc_ = true;
                    if (!c) {
                        this.cache_.sources = a;
                    }
                    this.updateSourceCaches_(a[0]);
                    eW(this, a[0], function(b, d) {
                        g.middleware_ = d;
                        if (!c) {
                            g.cache_.sources = a;
                        }
                        g.updateSourceCaches_(b);
                        var e = g.src_(b);
                        if (e) {
                            if (a.length > 1) {
                                return g.handleSrc_(a.slice(1));
                            }
                            g.changingSrc_ = false;
                            g.setTimeout(function() {
                                this.error({
                                    code: 4,
                                    message: this.localize(this.options_.notSupportedMessage)
                                });
                            }, 0);
                            g.triggerReady();
                            return;
                        }
                        eX(d, g.tech_);
                    });
                    if (this.options_.retryOnError && a.length > 1) {
                        var d = function b() {
                            g.error(null);
                            g.handleSrc_(a.slice(1), true);
                        };
                        var e = function a() {
                            g.off("error", d);
                        };
                        this.one("error", d);
                        this.one("playing", e);
                        this.resetRetryOnError_ = function() {
                            g.off("error", d);
                            g.off("playing", e);
                        };
                    }
                };
                b.src = function b(a) {
                    return this.handleSrc_(a, false);
                };
                b.src_ = function c(b) {
                    var d = this;
                    var a = this.selectSource([
                        b
                    ]);
                    if (!a) {
                        return true;
                    }
                    if (!ez(a.tech, this.techName_)) {
                        this.changingSrc_ = true;
                        this.loadTech_(a.tech, a.source);
                        this.tech_.ready(function() {
                            d.changingSrc_ = false;
                        });
                        return false;
                    }
                    this.ready(function() {
                        if (this.tech_.constructor.prototype.hasOwnProperty("setSource")) {
                            this.techCall_("setSource", b);
                        } else {
                            this.techCall_("src", b.src);
                        }
                        this.changingSrc_ = false;
                    }, true);
                    return false;
                };
                b.load = function a() {
                    this.techCall_("load");
                };
                b.reset = function c() {
                    var d = this;
                    var a = this.options_.Promise || f().Promise;
                    if (this.paused() || !a) {
                        this.doReset_();
                    } else {
                        var b = this.play();
                        eH(b.then(function() {
                            return d.doReset_();
                        }));
                    }
                };
                b.doReset_ = function a() {
                    if (this.tech_) {
                        this.tech_.clearTracks("text");
                    }
                    this.resetCache_();
                    this.poster("");
                    this.loadTech_(this.options_.techOrder[0], null);
                    this.techCall_("reset");
                    this.resetControlBarUI_();
                    if (el(this)) {
                        this.trigger("playerreset");
                    }
                };
                b.resetControlBarUI_ = function a() {
                    this.resetProgressBar_();
                    this.resetPlaybackRate_();
                    this.resetVolumeBar_();
                };
                b.resetProgressBar_ = function d() {
                    this.currentTime(0);
                    var a = this.controlBar, b = a.durationDisplay, c = a.remainingTimeDisplay;
                    if (b) {
                        b.updateContent();
                    }
                    if (c) {
                        c.updateContent();
                    }
                };
                b.resetPlaybackRate_ = function a() {
                    this.playbackRate(this.defaultPlaybackRate());
                    this.handleTechRateChange_();
                };
                b.resetVolumeBar_ = function a() {
                    this.volume(1.0);
                    this.trigger("volumechange");
                };
                b.currentSources = function c() {
                    var a = this.currentSource();
                    var b = [];
                    if (Object.keys(a).length !== 0) {
                        b.push(a);
                    }
                    return this.cache_.sources || b;
                };
                b.currentSource = function a() {
                    return this.cache_.source || {};
                };
                b.currentSrc = function a() {
                    return ((this.currentSource() && this.currentSource().src) || "");
                };
                b.currentType = function a() {
                    return ((this.currentSource() && this.currentSource().type) || "");
                };
                b.preload = function b(a) {
                    if (a !== undefined) {
                        this.techCall_("setPreload", a);
                        this.options_.preload = a;
                        return;
                    }
                    return this.techGet_("preload");
                };
                b.autoplay = function c(a) {
                    if (a === undefined) {
                        return this.options_.autoplay || false;
                    }
                    var b;
                    if ((typeof a === "string" && /(any|play|muted)/.test(a)) || (a === true && this.options_.normalizeAutoplay)) {
                        this.options_.autoplay = a;
                        this.manualAutoplay_(typeof a === "string" ? a : "play");
                        b = false;
                    } else if (!a) {
                        this.options_.autoplay = false;
                    } else {
                        this.options_.autoplay = true;
                    }
                    b = typeof b === "undefined" ? this.options_.autoplay : b;
                    if (this.tech_) {
                        this.techCall_("setAutoplay", b);
                    }
                };
                b.playsinline = function b(a) {
                    if (a !== undefined) {
                        this.techCall_("setPlaysinline", a);
                        this.options_.playsinline = a;
                        return this;
                    }
                    return this.techGet_("playsinline");
                };
                b.loop = function b(a) {
                    if (a !== undefined) {
                        this.techCall_("setLoop", a);
                        this.options_.loop = a;
                        return;
                    }
                    return this.techGet_("loop");
                };
                b.poster = function b(a) {
                    if (a === undefined) {
                        return this.poster_;
                    }
                    if (!a) {
                        a = "";
                    }
                    if (a === this.poster_) {
                        return;
                    }
                    this.poster_ = a;
                    this.techCall_("setPoster", a);
                    this.isPosterFromTech_ = false;
                    this.trigger("posterchange");
                };
                b.handleTechPosterChange_ = function b() {
                    if ((!this.poster_ || this.options_.techCanOverridePoster) && this.tech_ && this.tech_.poster) {
                        var a = this.tech_.poster() || "";
                        if (a !== this.poster_) {
                            this.poster_ = a;
                            this.isPosterFromTech_ = true;
                            this.trigger("posterchange");
                        }
                    }
                };
                b.controls = function b(a) {
                    if (a === undefined) {
                        return !!this.controls_;
                    }
                    a = !!a;
                    if (this.controls_ === a) {
                        return;
                    }
                    this.controls_ = a;
                    if (this.usingNativeControls()) {
                        this.techCall_("setControls", a);
                    }
                    if (this.controls_) {
                        this.removeClass("vjs-controls-disabled");
                        this.addClass("vjs-controls-enabled");
                        this.trigger("controlsenabled");
                        if (!this.usingNativeControls()) {
                            this.addTechControlsListeners_();
                        }
                    } else {
                        this.removeClass("vjs-controls-enabled");
                        this.addClass("vjs-controls-disabled");
                        this.trigger("controlsdisabled");
                        if (!this.usingNativeControls()) {
                            this.removeTechControlsListeners_();
                        }
                    }
                };
                b.usingNativeControls = function b(a) {
                    if (a === undefined) {
                        return !!this.usingNativeControls_;
                    }
                    a = !!a;
                    if (this.usingNativeControls_ === a) {
                        return;
                    }
                    this.usingNativeControls_ = a;
                    if (this.usingNativeControls_) {
                        this.addClass("vjs-using-native-controls");
                        this.trigger("usingnativecontrols");
                    } else {
                        this.removeClass("vjs-using-native-controls");
                        this.trigger("usingcustomcontrols");
                    }
                };
                b.error = function c(a) {
                    var d = this;
                    if (a === undefined) {
                        return this.error_ || null;
                    }
                    bk("beforeerror").forEach(function(c) {
                        var b = c(d, a);
                        if (!((d_(b) && !Array.isArray(b)) || typeof b === "string" || typeof b === "number" || b === null)) {
                            d.log.error("please return a value that MediaError expects in beforeerror hooks");
                            return;
                        }
                        a = b;
                    });
                    if (this.options_.suppressNotSupportedError && a && a.code === 4) {
                        var b = function b() {
                            this.error(a);
                        };
                        this.options_.suppressNotSupportedError = false;
                        this.any([
                            "click",
                            "touchstart"
                        ], b);
                        this.one("loadstart", function() {
                            this.off([
                                "click",
                                "touchstart"
                            ], b);
                        });
                        return;
                    }
                    if (a === null) {
                        this.error_ = a;
                        this.removeClass("vjs-error");
                        if (this.errorDisplay) {
                            this.errorDisplay.close();
                        }
                        return;
                    }
                    this.error_ = new i(a);
                    this.addClass("vjs-error");
                    ak.error("(CODE:" + this.error_.code + " " + i.errorTypes[this.error_.code] + ")", this.error_.message, this.error_);
                    this.trigger("error");
                    bk("error").forEach(function(a) {
                        return a(d, d.error_);
                    });
                    return;
                };
                b.reportUserActivity = function a(b) {
                    this.userActivity_ = true;
                };
                b.userActive = function b(a) {
                    if (a === undefined) {
                        return this.userActive_;
                    }
                    a = !!a;
                    if (a === this.userActive_) {
                        return;
                    }
                    this.userActive_ = a;
                    if (this.userActive_) {
                        this.userActivity_ = true;
                        this.removeClass("vjs-user-inactive");
                        this.addClass("vjs-user-active");
                        this.trigger("useractive");
                        return;
                    }
                    if (this.tech_) {
                        this.tech_.one("mousemove", function(a) {
                            a.stopPropagation();
                            a.preventDefault();
                        });
                    }
                    this.userActivity_ = false;
                    this.removeClass("vjs-user-active");
                    this.addClass("vjs-user-inactive");
                    this.trigger("userinactive");
                };
                b.listenForUserActivity_ = function f() {
                    var g;
                    var h;
                    var i;
                    var b = b5(this, this.reportUserActivity);
                    var d = function c(a) {
                        if (a.screenX !== h || a.screenY !== i) {
                            h = a.screenX;
                            i = a.screenY;
                            b();
                        }
                    };
                    var e = function a() {
                        b();
                        this.clearInterval(g);
                        g = this.setInterval(b, 250);
                    };
                    var c = function a(c) {
                        b();
                        this.clearInterval(g);
                    };
                    this.on("mousedown", e);
                    this.on("mousemove", d);
                    this.on("mouseup", c);
                    this.on("mouseleave", c);
                    var a = this.getChild("controlBar");
                    if (a && !o && !n) {
                        a.on("mouseenter", function(a) {
                            if (this.player().options_.inactivityTimeout !== 0) {
                                this.player().cache_.inactivityTimeout = this.player().options_.inactivityTimeout;
                            }
                            this.player().options_.inactivityTimeout = 0;
                        });
                        a.on("mouseleave", function(a) {
                            this.player().options_.inactivityTimeout = this.player().cache_.inactivityTimeout;
                        });
                    }
                    this.on("keydown", b);
                    this.on("keyup", b);
                    var j;
                    this.setInterval(function() {
                        if (!this.userActivity_) {
                            return;
                        }
                        this.userActivity_ = false;
                        this.userActive(true);
                        this.clearTimeout(j);
                        var a = this.options_.inactivityTimeout;
                        if (a <= 0) {
                            return;
                        }
                        j = this.setTimeout(function() {
                            if (!this.userActivity_) {
                                this.userActive(false);
                            }
                        }, a);
                    }, 250);
                };
                b.playbackRate = function b(a) {
                    if (a !== undefined) {
                        this.techCall_("setPlaybackRate", a);
                        return;
                    }
                    if (this.tech_ && this.tech_.featuresPlaybackRate) {
                        return (this.cache_.lastPlaybackRate || this.techGet_("playbackRate"));
                    }
                    return 1.0;
                };
                b.defaultPlaybackRate = function b(a) {
                    if (a !== undefined) {
                        return this.techCall_("setDefaultPlaybackRate", a);
                    }
                    if (this.tech_ && this.tech_.featuresPlaybackRate) {
                        return this.techGet_("defaultPlaybackRate");
                    }
                    return 1.0;
                };
                b.isAudio = function b(a) {
                    if (a !== undefined) {
                        this.isAudio_ = !!a;
                        return;
                    }
                    return !!this.isAudio_;
                };
                b.addTextTrack = function d(a, b, c) {
                    if (this.tech_) {
                        return this.tech_.addTextTrack(a, b, c);
                    }
                };
                b.addRemoteTextTrack = function c(a, b) {
                    if (this.tech_) {
                        return this.tech_.addRemoteTextTrack(a, b);
                    }
                };
                b.removeRemoteTextTrack = function d(a) {
                    if (a === void 0) {
                        a = {};
                    }
                    var c = a, b = c.track;
                    if (!b) {
                        b = a;
                    }
                    if (this.tech_) {
                        return this.tech_.removeRemoteTextTrack(b);
                    }
                };
                b.getVideoPlaybackQuality = function a() {
                    return this.techGet_("getVideoPlaybackQuality");
                };
                b.videoWidth = function a() {
                    return ((this.tech_ && this.tech_.videoWidth && this.tech_.videoWidth()) || 0);
                };
                b.videoHeight = function a() {
                    return ((this.tech_ && this.tech_.videoHeight && this.tech_.videoHeight()) || 0);
                };
                b.language = function b(a) {
                    if (a === undefined) {
                        return this.language_;
                    }
                    if (this.language_ !== String(a).toLowerCase()) {
                        this.language_ = String(a).toLowerCase();
                        if (el(this)) {
                            this.trigger("languagechange");
                        }
                    }
                };
                b.languages = function a() {
                    return b6(c.prototype.options_.languages, this.languages_);
                };
                b.toJSON = function e() {
                    var a = b6(this.options_);
                    var d = a.tracks;
                    a.tracks = [];
                    for(var b = 0; b < d.length; b++){
                        var c = d[b];
                        c = b6(c);
                        c.player = undefined;
                        a.tracks[b] = c;
                    }
                    return a;
                };
                b.createModal = function d(c, a) {
                    var e = this;
                    a = a || {};
                    a.content = c || "";
                    var b = new v(this, a);
                    this.addChild(b);
                    b.on("dispose", function() {
                        e.removeChild(b);
                    });
                    b.open();
                    return b;
                };
                b.updateCurrentBreakpoint_ = function f() {
                    if (!this.responsive()) {
                        return;
                    }
                    var b = this.currentBreakpoint();
                    var d = this.currentWidth();
                    for(var c = 0; c < cQ.length; c++){
                        var a = cQ[c];
                        var e = this.breakpoints_[a];
                        if (d <= e) {
                            if (b === a) {
                                return;
                            }
                            if (b) {
                                this.removeClass(fE[b]);
                            }
                            this.addClass(fE[a]);
                            this.breakpoint_ = a;
                            break;
                        }
                    }
                };
                b.removeCurrentBreakpoint_ = function b() {
                    var a = this.currentBreakpointClass();
                    this.breakpoint_ = "";
                    if (a) {
                        this.removeClass(a);
                    }
                };
                b.breakpoints = function b(a) {
                    if (a === undefined) {
                        return d$(this.breakpoints_);
                    }
                    this.breakpoint_ = "";
                    this.breakpoints_ = d$({}, fF, a);
                    this.updateCurrentBreakpoint_();
                    return d$(this.breakpoints_);
                };
                b.responsive = function c(a) {
                    if (a === undefined) {
                        return this.responsive_;
                    }
                    a = Boolean(a);
                    var b = this.responsive_;
                    if (a === b) {
                        return;
                    }
                    this.responsive_ = a;
                    if (a) {
                        this.on("playerresize", this.boundUpdateCurrentBreakpoint_);
                        this.updateCurrentBreakpoint_();
                    } else {
                        this.off("playerresize", this.boundUpdateCurrentBreakpoint_);
                        this.removeCurrentBreakpoint_();
                    }
                    return a;
                };
                b.currentBreakpoint = function a() {
                    return this.breakpoint_;
                };
                b.currentBreakpointClass = function a() {
                    return fE[this.breakpoint_] || "";
                };
                b.loadMedia = function h(c, f) {
                    var i = this;
                    if (!c || typeof c !== "object") {
                        return;
                    }
                    this.reset();
                    this.cache_.media = b6(c);
                    var b = this.cache_.media, g = b.artwork, a = b.poster, d = b.src, e = b.textTracks;
                    if (!g && a) {
                        this.cache_.media.artwork = [
                            {
                                src: a,
                                type: e8(a)
                            }, 
                        ];
                    }
                    if (d) {
                        this.src(d);
                    }
                    if (a) {
                        this.poster(a);
                    }
                    if (Array.isArray(e)) {
                        e.forEach(function(a) {
                            return i.addRemoteTextTrack(a, false);
                        });
                    }
                    this.ready(f);
                };
                b.getMedia = function e() {
                    if (!this.cache_.media) {
                        var b = this.poster();
                        var c = this.currentSources();
                        var d = Array.prototype.map.call(this.remoteTextTracks(), function(a) {
                            return {
                                kind: a.kind,
                                label: a.label,
                                language: a.language,
                                src: a.src
                            };
                        });
                        var a = {
                            src: c,
                            textTracks: d
                        };
                        if (b) {
                            a.poster = b;
                            a.artwork = [
                                {
                                    src: a.poster,
                                    type: e8(a.poster)
                                }, 
                            ];
                        }
                        return a;
                    }
                    return b6(this.cache_.media);
                };
                c.getTagSettings = function m(a) {
                    var c = {
                        sources: [],
                        tracks: []
                    };
                    var b = bK(a);
                    var f = b["data-setup"];
                    if (bF(a, "vjs-fill")) {
                        b.fill = true;
                    }
                    if (bF(a, "vjs-fluid")) {
                        b.fluid = true;
                    }
                    if (f !== null) {
                        var g = dG()(f || "{}"), h = g[0], k = g[1];
                        if (h) {
                            ak.error(h);
                        }
                        d$(b, k);
                    }
                    d$(c, b);
                    if (a.hasChildNodes()) {
                        var i = a.childNodes;
                        for(var d = 0, l = i.length; d < l; d++){
                            var e = i[d];
                            var j = e.nodeName.toLowerCase();
                            if (j === "source") {
                                c.sources.push(bK(e));
                            } else if (j === "track") {
                                c.tracks.push(bK(e));
                            }
                        }
                    }
                    return c;
                };
                b.flexNotSupported_ = function b() {
                    var a = J().createElement("i");
                    return !("flexBasis" in a.style || "webkitFlexBasis" in a.style || "mozFlexBasis" in a.style || "msFlexBasis" in a.style || "msFlexOrder" in a.style);
                };
                b.debug = function b(a) {
                    if (a === undefined) {
                        return this.debugEnabled_;
                    }
                    if (a) {
                        this.trigger("debugon");
                        this.previousLogLevel_ = this.log.level;
                        this.log.level("debug");
                        this.debugEnabled_ = true;
                    } else {
                        this.trigger("debugoff");
                        this.log.level(this.previousLogLevel_);
                        this.previousLogLevel_ = undefined;
                        this.debugEnabled_ = false;
                    }
                };
                b.playbackRates = function b(a) {
                    if (a === undefined) {
                        return this.cache_.playbackRates;
                    }
                    if (!Array.isArray(a)) {
                        return;
                    }
                    if (!a.every(function(a) {
                        return typeof a === "number";
                    })) {
                        return;
                    }
                    this.cache_.playbackRates = a;
                    this.trigger("playbackrateschange");
                };
                return c;
            })(a);
            S.names.forEach(function(a) {
                var b = S[a];
                j.prototype[b.getterName] = function() {
                    if (this.tech_) {
                        return this.tech_[b.getterName]();
                    }
                    this[b.privateName] = this[b.privateName] || new b.ListClass();
                    return this[b.privateName];
                };
            });
            j.prototype.crossorigin = j.prototype.crossOrigin;
            j.players = {};
            var y = f().navigator;
            j.prototype.options_ = {
                techOrder: e.defaultTechOrder_,
                html5: {},
                inactivityTimeout: 2000,
                playbackRates: [],
                liveui: false,
                children: [
                    "mediaLoader",
                    "posterImage",
                    "textTrackDisplay",
                    "loadingSpinner",
                    "bigPlayButton",
                    "liveTracker",
                    "controlBar",
                    "errorDisplay",
                    "textTrackSettings",
                    "resizeManager", 
                ],
                language: (y && ((y.languages && y.languages[0]) || y.userLanguage || y.language)) || "en",
                languages: {},
                notSupportedMessage: "No compatible source was found for this media.",
                normalizeAutoplay: false,
                fullscreen: {
                    options: {
                        navigationUI: "hide"
                    }
                },
                breakpoints: {},
                responsive: false
            };
            [
                "ended",
                "seeking",
                "seekable",
                "networkState",
                "readyState", 
            ].forEach(function(a) {
                j.prototype[a] = function() {
                    return this.techGet_(a);
                };
            });
            cP.forEach(function(a) {
                j.prototype["handleTech" + ey(a) + "_"] = function() {
                    return this.trigger(a);
                };
            });
            a.registerComponent("Player", j);
            var a0 = "plugin";
            var fG = "activePlugins_";
            var fH = {};
            var fI = function b(a) {
                return fH.hasOwnProperty(a);
            };
            var cR = function b(a) {
                return fI(a) ? fH[a] : undefined;
            };
            var fJ = function c(a, b) {
                a[fG] = a[fG] || {};
                a[fG][b] = true;
            };
            var fK = function e(b, a, d) {
                var c = (d ? "before" : "") + "pluginsetup";
                b.trigger(c, a);
                b.trigger(c + ":" + a.name, a);
            };
            var fL = function c(d, a) {
                var b = function c() {
                    fK(this, {
                        name: d,
                        plugin: a,
                        instance: null
                    }, true);
                    var b = a.apply(this, arguments);
                    fJ(this, d);
                    fK(this, {
                        name: d,
                        plugin: a,
                        instance: b
                    });
                    return b;
                };
                Object.keys(a).forEach(function(c) {
                    b[c] = a[c];
                });
                return b;
            };
            var fM = function c(a, b) {
                b.prototype.name = a;
                return function() {
                    fK(this, {
                        name: a,
                        plugin: b,
                        instance: null
                    }, true);
                    for(var d = arguments.length, e = new Array(d), c = 0; c < d; c++){
                        e[c] = arguments[c];
                    }
                    var f = (0, dJ.Z)(b, [
                        this
                    ].concat(e));
                    this[a] = function() {
                        return f;
                    };
                    fK(this, f.getEventHash());
                    return f;
                };
            };
            var k = (function() {
                function a(b) {
                    if (this.constructor === a) {
                        throw new Error("Plugin must be sub-classed; not directly instantiated.");
                    }
                    this.player = b;
                    if (!this.log) {
                        this.log = this.player.log.createLogger(this.name);
                    }
                    eu(this);
                    delete this.trigger;
                    ew(this, this.constructor.defaultState);
                    fJ(b, this.name);
                    this.dispose = this.dispose.bind(this);
                    b.on("dispose", this.dispose);
                }
                var b = a.prototype;
                b.version = function a() {
                    return this.constructor.VERSION;
                };
                b.getEventHash = function b(a) {
                    if (a === void 0) {
                        a = {};
                    }
                    a.name = this.name;
                    a.plugin = this.constructor;
                    a.instance = this;
                    return a;
                };
                b.trigger = function c(b, a) {
                    if (a === void 0) {
                        a = {};
                    }
                    return au(this.eventBusEl_, b, this.getEventHash(a));
                };
                b.handleStateChanged = function a(b) {};
                b.dispose = function c() {
                    var a = this.name, b = this.player;
                    this.trigger("dispose");
                    this.off();
                    b.off("dispose", this.dispose);
                    b[fG][a] = false;
                    this.player = this.state = null;
                    b[a] = fM(a, fH[a]);
                };
                a.isBasic = function d(b) {
                    var c = typeof b === "string" ? cR(b) : b;
                    return (typeof c === "function" && !a.prototype.isPrototypeOf(c.prototype));
                };
                a.registerPlugin = function d(b, c) {
                    if (typeof b !== "string") {
                        throw new Error('Illegal plugin name, "' + b + '", must be a string, was ' + typeof b + ".");
                    }
                    if (fI(b)) {
                        ak.warn('A plugin named "' + b + '" already exists. You may want to avoid re-registering plugins!');
                    } else if (j.prototype.hasOwnProperty(b)) {
                        throw new Error('Illegal plugin name, "' + b + '", cannot share a name with an existing player method!');
                    }
                    if (typeof c !== "function") {
                        throw new Error('Illegal plugin for "' + b + '", must be a function, was ' + typeof c + ".");
                    }
                    fH[b] = c;
                    if (b !== a0) {
                        if (a.isBasic(c)) {
                            j.prototype[b] = fL(b, c);
                        } else {
                            j.prototype[b] = fM(b, c);
                        }
                    }
                    return c;
                };
                a.deregisterPlugin = function b(a) {
                    if (a === a0) {
                        throw new Error("Cannot de-register base plugin.");
                    }
                    if (fI(a)) {
                        delete fH[a];
                        delete j.prototype[a];
                    }
                };
                a.getPlugins = function c(a) {
                    if (a === void 0) {
                        a = Object.keys(fH);
                    }
                    var b;
                    a.forEach(function(a) {
                        var c = cR(a);
                        if (c) {
                            b = b || {};
                            b[a] = c;
                        }
                    });
                    return b;
                };
                a.getPluginVersion = function c(b) {
                    var a = cR(b);
                    return (a && a.VERSION) || "";
                };
                return a;
            })();
            k.getPlugin = cR;
            k.BASE_PLUGIN_NAME = a0;
            k.registerPlugin(a0, k);
            j.prototype.usingPlugin = function(a) {
                return (!!this[fG] && this[fG][a] === true);
            };
            j.prototype.hasPlugin = function(a) {
                return !!fI(a);
            };
            var cS = function f(d, a) {
                if (a === void 0) {
                    a = {};
                }
                var b = function a() {
                    d.apply(this, arguments);
                };
                var c = {};
                if (typeof a === "object") {
                    if (a.constructor !== Object.prototype.constructor) {
                        b = a.constructor;
                    }
                    c = a;
                } else if (typeof a === "function") {
                    b = a;
                }
                (0, dK.Z)(b, d);
                if (d) {
                    b.super_ = d;
                }
                for(var e in c){
                    if (c.hasOwnProperty(e)) {
                        b.prototype[e] = c[e];
                    }
                }
                return b;
            };
            var fN = function b(a) {
                return a.indexOf("#") === 0 ? a.slice(1) : a;
            };
            function b(c, f, g) {
                var d = b.getPlayer(c);
                if (d) {
                    if (f) {
                        ak.warn('Player "' + c + '" is already initialised. Options will not be applied.');
                    }
                    if (g) {
                        d.ready(g);
                    }
                    return d;
                }
                var e = typeof c === "string" ? Q("#" + fN(c)) : c;
                if (!bA(e)) {
                    throw new TypeError("The element or ID supplied is not valid. (videojs)");
                }
                if (!e.ownerDocument.defaultView || !e.ownerDocument.body.contains(e)) {
                    ak.warn("The element supplied is not included in the DOM");
                }
                f = f || {};
                bk("beforesetup").forEach(function(b) {
                    var a = b(e, b6(f));
                    if (!d_(a) || Array.isArray(a)) {
                        ak.error("please return an object in beforesetup hooks");
                        return;
                    }
                    f = b6(f, a);
                });
                var h = a.getComponent("Player");
                d = new h(e, f, g);
                bk("setup").forEach(function(a) {
                    return a(d);
                });
                return d;
            }
            b.hooks_ = bj;
            b.hooks = bk;
            b.hook = bl;
            b.hookOnce = bn;
            b.removeHook = bm;
            if (f().VIDEOJS_NO_DYNAMIC_STYLE !== true && P()) {
                var I = Q(".vjs-styles-defaults");
                if (!I) {
                    I = b0("vjs-styles-defaults");
                    var ag = Q("head");
                    if (ag) {
                        ag.insertBefore(I, ag.firstChild);
                    }
                    b1(I, "\n      .video-js {\n        width: 300px;\n        height: 150px;\n      }\n\n      .vjs-fluid {\n        padding-top: 56.25%\n      }\n    ");
                }
            }
            b_(1, b);
            b.VERSION = bi;
            b.options = j.prototype.options_;
            b.getPlayers = function() {
                return j.players;
            };
            b.getPlayer = function(b) {
                var c = j.players;
                var a;
                if (typeof b === "string") {
                    var d = fN(b);
                    var e = c[d];
                    if (e) {
                        return e;
                    }
                    a = Q("#" + d);
                } else {
                    a = b;
                }
                if (bA(a)) {
                    var f = a, g = f.player, h = f.playerId;
                    if (g || c[h]) {
                        return g || c[h];
                    }
                }
            };
            b.getAllPlayers = function() {
                return (Object.keys(j.players).map(function(a) {
                    return j.players[a];
                }).filter(Boolean));
            };
            b.players = j.players;
            b.getComponent = a.getComponent;
            b.registerComponent = function(b, c) {
                if (e.isTech(c)) {
                    ak.warn("The " + b + " tech was registered as a component. It should instead be registered using videojs.registerTech(name, tech)");
                }
                a.registerComponent.call(a, b, c);
            };
            b.getTech = e.getTech;
            b.registerTech = e.registerTech;
            b.use = cp;
            Object.defineProperty(b, "middleware", {
                value: {},
                writeable: false,
                enumerable: true
            });
            Object.defineProperty(b.middleware, "TERMINATOR", {
                value: co,
                writeable: false,
                enumerable: true
            });
            b.browser = bz;
            b.TOUCH_ENABLED = N;
            b.extend = cS;
            b.mergeOptions = b6;
            b.bind = b5;
            b.registerPlugin = k.registerPlugin;
            b.deregisterPlugin = k.deregisterPlugin;
            b.plugin = function(a, b) {
                ak.warn("videojs.plugin() is deprecated; use videojs.registerPlugin() instead");
                return k.registerPlugin(a, b);
            };
            b.getPlugins = k.getPlugins;
            b.getPlugin = k.getPlugin;
            b.getPluginVersion = k.getPluginVersion;
            b.addLanguage = function(a, d) {
                var c;
                a = ("" + a).toLowerCase();
                b.options.languages = b6(b.options.languages, ((c = {}), (c[a] = d), c));
                return b.options.languages[a];
            };
            b.log = ak;
            b.createLogger = bp;
            b.createTimeRange = b.createTimeRanges = b9;
            b.formatTime = cy;
            b.setFormatTime = cw;
            b.resetFormatTime = cx;
            b.parseUrl = ax;
            b.isCrossOrigin = ay;
            b.EventTarget = g;
            b.on = as;
            b.one = av;
            b.off = at;
            b.trigger = au;
            b.xhr = bd();
            b.TextTrack = C;
            b.AudioTrack = az;
            b.VideoTrack = aA;
            [
                "isEl",
                "isTextNode",
                "createEl",
                "hasClass",
                "addClass",
                "removeClass",
                "toggleClass",
                "setAttributes",
                "getAttributes",
                "emptyEl",
                "appendContent",
                "insertContent", 
            ].forEach(function(a) {
                b[a] = function() {
                    ak.warn("videojs." + a + "() is deprecated; use videojs.dom." + a + "() instead");
                    return b$[a].apply(null, arguments);
                };
            });
            b.computedStyle = bq;
            b.dom = b$;
            b.url = cj;
            b.defineLazyProperty = a_;
            b.addLanguage("en", {
                "Non-Fullscreen": "Exit Fullscreen"
            });
            var fO = bf.Z;
            var fP = function d(c, b, a) {
                if (c && a && a.responseURL && b !== a.responseURL) {
                    return a.responseURL;
                }
                return b;
            };
            var a1 = function c(a) {
                if (b.log.debug) {
                    return b.log.debug.bind(b, "VHS:", a + " >");
                }
                return function() {};
            };
            var cT = 1 / 30;
            var fQ = cT * 3;
            var fR = function f(a, e) {
                var d = [];
                var c;
                if (a && a.length) {
                    for(c = 0; c < a.length; c++){
                        if (e(a.start(c), a.end(c))) {
                            d.push([
                                a.start(c),
                                a.end(c), 
                            ]);
                        }
                    }
                }
                return b.createTimeRanges(d);
            };
            var fS = function b(a, c) {
                return fR(a, function(a, b) {
                    return (a - fQ <= c && b + fQ >= c);
                });
            };
            var fT = function b(a, c) {
                return fR(a, function(a) {
                    return a - cT >= c;
                });
            };
            var fU = function g(a) {
                if (a.length < 2) {
                    return b.createTimeRanges();
                }
                var d = [];
                for(var c = 1; c < a.length; c++){
                    var e = a.end(c - 1);
                    var f = a.start(c);
                    d.push([
                        e,
                        f
                    ]);
                }
                return b.createTimeRanges(d);
            };
            var fV = function j(d, e) {
                var f = null;
                var g = null;
                var h = 0;
                var c = [];
                var i = [];
                if (!d || !d.length || !e || !e.length) {
                    return b.createTimeRange();
                }
                var a = d.length;
                while(a--){
                    c.push({
                        time: d.start(a),
                        type: "start"
                    });
                    c.push({
                        time: d.end(a),
                        type: "end"
                    });
                }
                a = e.length;
                while(a--){
                    c.push({
                        time: e.start(a),
                        type: "start"
                    });
                    c.push({
                        time: e.end(a),
                        type: "end"
                    });
                }
                c.sort(function(a, b) {
                    return a.time - b.time;
                });
                for(a = 0; a < c.length; a++){
                    if (c[a].type === "start") {
                        h++;
                        if (h === 2) {
                            f = c[a].time;
                        }
                    } else if (c[a].type === "end") {
                        h--;
                        if (h === 1) {
                            g = c[a].time;
                        }
                    }
                    if (f !== null && g !== null) {
                        i.push([
                            f,
                            g
                        ]);
                        f = null;
                        g = null;
                    }
                }
                return b.createTimeRanges(i);
            };
            var fW = function d(a) {
                var c = [];
                if (!a || !a.length) {
                    return "";
                }
                for(var b = 0; b < a.length; b++){
                    c.push(a.start(b) + " => " + a.end(b));
                }
                return c.join(", ");
            };
            var fX = function e(a, c, b) {
                if (b === void 0) {
                    b = 1;
                }
                var d = a.length ? a.end(a.length - 1) : 0;
                return (d - c) / b;
            };
            var fY = function d(b) {
                var c = [];
                for(var a = 0; a < b.length; a++){
                    c.push({
                        start: b.start(a),
                        end: b.end(a)
                    });
                }
                return c;
            };
            var fZ = function d(a, b) {
                if (a === b) {
                    return false;
                }
                if ((!a && b) || (!b && a)) {
                    return true;
                }
                if (a.length !== b.length) {
                    return true;
                }
                for(var c = 0; c < a.length; c++){
                    if (a.start(c) !== b.start(c) || a.end(c) !== b.end(c)) {
                        return true;
                    }
                }
                return false;
            };
            var f$ = function b(a) {
                if (!a || !a.length || !a.end) {
                    return;
                }
                return a.end(a.length - 1);
            };
            var f_ = function g(a, b) {
                var c = 0;
                if (!a || !a.length) {
                    return c;
                }
                for(var d = 0; d < a.length; d++){
                    var f = a.start(d);
                    var e = a.end(d);
                    if (b > e) {
                        continue;
                    }
                    if (b > f && b <= e) {
                        c += e - b;
                        continue;
                    }
                    c += e - f;
                }
                return c;
            };
            var f0 = b.createTimeRange;
            var cU = function c(d, a) {
                if (!a.preload) {
                    return a.duration;
                }
                var b = 0;
                (a.parts || []).forEach(function(a) {
                    b += a.duration;
                });
                (a.preloadHints || []).forEach(function(a) {
                    if (a.type === "PART") {
                        b += d.partTargetDuration;
                    }
                });
                return b;
            };
            var f1 = function b(a) {
                return (a.segments || []).reduce(function(b, a, c) {
                    if (a.parts) {
                        a.parts.forEach(function(d, e) {
                            b.push({
                                duration: d.duration,
                                segmentIndex: c,
                                partIndex: e,
                                part: d,
                                segment: a
                            });
                        });
                    } else {
                        b.push({
                            duration: a.duration,
                            segmentIndex: c,
                            partIndex: null,
                            segment: a,
                            part: null
                        });
                    }
                    return b;
                }, []);
            };
            var f2 = function c(a) {
                var b = a.segments && a.segments.length && a.segments[a.segments.length - 1];
                return (b && b.parts) || [];
            };
            var f3 = function f(d) {
                var a = d.preloadSegment;
                if (!a) {
                    return;
                }
                var b = a.parts, e = a.preloadHints;
                var c = (e || []).reduce(function(a, b) {
                    return a + (b.type === "PART" ? 1 : 0);
                }, 0);
                c += b && b.length ? b.length : 0;
                return c;
            };
            var cV = function d(b, a) {
                if (a.endList) {
                    return 0;
                }
                if (b && b.suggestedPresentationDelay) {
                    return b.suggestedPresentationDelay;
                }
                var c = f2(a).length > 0;
                if (c && a.serverControl && a.serverControl.partHoldBack) {
                    return a.serverControl.partHoldBack;
                } else if (c && a.partTargetDuration) {
                    return a.partTargetDuration * 3;
                } else if (a.serverControl && a.serverControl.holdBack) {
                    return a.serverControl.holdBack;
                } else if (a.targetDuration) {
                    return a.targetDuration * 3;
                }
                return 0;
            };
            var f4 = function f(b, e) {
                var c = 0;
                var d = e - b.mediaSequence;
                var a = b.segments[d];
                if (a) {
                    if (typeof a.start !== "undefined") {
                        return {
                            result: a.start,
                            precise: true
                        };
                    }
                    if (typeof a.end !== "undefined") {
                        return {
                            result: a.end - a.duration,
                            precise: true
                        };
                    }
                }
                while(d--){
                    a = b.segments[d];
                    if (typeof a.end !== "undefined") {
                        return {
                            result: c + a.end,
                            precise: true
                        };
                    }
                    c += cU(b, a);
                    if (typeof a.start !== "undefined") {
                        return {
                            result: c + a.start,
                            precise: true
                        };
                    }
                }
                return {
                    result: c,
                    precise: false
                };
            };
            var f5 = function f(b, e) {
                var c = 0;
                var a;
                var d = e - b.mediaSequence;
                for(; d < b.segments.length; d++){
                    a = b.segments[d];
                    if (typeof a.start !== "undefined") {
                        return {
                            result: a.start - c,
                            precise: true
                        };
                    }
                    c += cU(b, a);
                    if (typeof a.end !== "undefined") {
                        return {
                            result: a.end - c,
                            precise: true
                        };
                    }
                }
                return {
                    result: -1,
                    precise: false
                };
            };
            var f6 = function f(a, b, e) {
                if (typeof b === "undefined") {
                    b = a.mediaSequence + a.segments.length;
                }
                if (b < a.mediaSequence) {
                    return 0;
                }
                var c = f4(a, b);
                if (c.precise) {
                    return c.result;
                }
                var d = f5(a, b);
                if (d.precise) {
                    return d.result;
                }
                return c.result + e;
            };
            var cW = function d(a, c, b) {
                if (!a) {
                    return 0;
                }
                if (typeof b !== "number") {
                    b = 0;
                }
                if (typeof c === "undefined") {
                    if (a.totalDuration) {
                        return a.totalDuration;
                    }
                    if (!a.endList) {
                        return f()[Infinity];
                    }
                }
                return f6(a, c, b);
            };
            var f7 = function j(c) {
                var h = c.defaultDuration, i = c.durationList, a = c.startIndex, b = c.endIndex;
                var d = 0;
                if (a > b) {
                    var f = [
                        b,
                        a
                    ];
                    a = f[0];
                    b = f[1];
                }
                if (a < 0) {
                    for(var g = a; g < Math.min(0, b); g++){
                        d += h;
                    }
                    a = 0;
                }
                for(var e = a; e < b; e++){
                    d += i[e].duration;
                }
                return d;
            };
            var cX = function f(a, b, e, c) {
                if (!a || !a.segments) {
                    return null;
                }
                if (a.endList) {
                    return cW(a);
                }
                if (b === null) {
                    return null;
                }
                b = b || 0;
                var d = f6(a, a.mediaSequence + a.segments.length, b);
                if (e) {
                    c = typeof c === "number" ? c : cV(null, a);
                    d -= c;
                }
                return Math.max(0, d);
            };
            var cY = function g(c, a, d) {
                var e = true;
                var f = a || 0;
                var b = cX(c, a, e, d);
                if (b === null) {
                    return f0();
                }
                return f0(f, b);
            };
            var cZ = function r(d) {
                var e = d.playlist, f = d.currentTime, q = d.startingSegmentIndex, n = d.startingPartIndex, j = d.startTime, o = d.experimentalExactManifestTimings;
                var b = f - j;
                var a = f1(e);
                var c = 0;
                for(var g = 0; g < a.length; g++){
                    var k = a[g];
                    if (q !== k.segmentIndex) {
                        continue;
                    }
                    if (typeof n === "number" && typeof k.partIndex === "number" && n !== k.partIndex) {
                        continue;
                    }
                    c = g;
                    break;
                }
                if (b < 0) {
                    if (c > 0) {
                        for(var h = c - 1; h >= 0; h--){
                            var l = a[h];
                            b += l.duration;
                            if (o) {
                                if (b < 0) {
                                    continue;
                                }
                            } else if (b + cT <= 0) {
                                continue;
                            }
                            return {
                                partIndex: l.partIndex,
                                segmentIndex: l.segmentIndex,
                                startTime: j - f7({
                                    defaultDuration: e.targetDuration,
                                    durationList: a,
                                    startIndex: c,
                                    endIndex: h
                                })
                            };
                        }
                    }
                    return {
                        partIndex: (a[0] && a[0].partIndex) || null,
                        segmentIndex: (a[0] && a[0].segmentIndex) || 0,
                        startTime: f
                    };
                }
                if (c < 0) {
                    for(var p = c; p < 0; p++){
                        b -= e.targetDuration;
                        if (b < 0) {
                            return {
                                partIndex: (a[0] && a[0].partIndex) || null,
                                segmentIndex: (a[0] && a[0].segmentIndex) || 0,
                                startTime: f
                            };
                        }
                    }
                    c = 0;
                }
                for(var i = c; i < a.length; i++){
                    var m = a[i];
                    b -= m.duration;
                    if (o) {
                        if (b > 0) {
                            continue;
                        }
                    } else if (b - cT >= 0) {
                        continue;
                    }
                    return {
                        partIndex: m.partIndex,
                        segmentIndex: m.segmentIndex,
                        startTime: j + f7({
                            defaultDuration: e.targetDuration,
                            durationList: a,
                            startIndex: c,
                            endIndex: i
                        })
                    };
                }
                return {
                    segmentIndex: a[a.length - 1].segmentIndex,
                    partIndex: a[a.length - 1].partIndex,
                    startTime: f
                };
            };
            var c$ = function b(a) {
                return (a.excludeUntil && a.excludeUntil > Date.now());
            };
            var c_ = function b(a) {
                return (a.excludeUntil && a.excludeUntil === Infinity);
            };
            var c0 = function c(a) {
                var b = c$(a);
                return !a.disabled && !b;
            };
            var c1 = function b(a) {
                return a.disabled;
            };
            var c2 = function c(b) {
                for(var a = 0; a < b.segments.length; a++){
                    if (b.segments[a].key) {
                        return true;
                    }
                }
                return false;
            };
            var c3 = function c(b, a) {
                return a.attributes && a.attributes[b];
            };
            var c4 = function f(c, d, b, a) {
                if (a === void 0) {
                    a = 0;
                }
                if (!c3("BANDWIDTH", b)) {
                    return NaN;
                }
                var e = c * b.attributes.BANDWIDTH;
                return (e - a * 8) / d;
            };
            var c5 = function c(a, b) {
                if (a.playlists.length === 1) {
                    return true;
                }
                var d = b.attributes.BANDWIDTH || Number.MAX_VALUE;
                return (a.playlists.filter(function(a) {
                    if (!c0(a)) {
                        return false;
                    }
                    return ((a.attributes.BANDWIDTH || 0) < d);
                }).length === 0);
            };
            var c6 = function c(a, b) {
                if ((!a && !b) || (!a && b) || (a && !b)) {
                    return false;
                }
                if (a === b) {
                    return true;
                }
                if (a.id && b.id && a.id === b.id) {
                    return true;
                }
                if (a.resolvedUri && b.resolvedUri && a.resolvedUri === b.resolvedUri) {
                    return true;
                }
                if (a.uri && b.uri && a.uri === b.uri) {
                    return true;
                }
                return false;
            };
            var f8 = function g(b, e) {
                var c = (b && b.mediaGroups && b.mediaGroups.AUDIO) || {};
                var a = false;
                for(var d in c){
                    for(var f in c[d]){
                        a = e(c[d][f]);
                        if (a) {
                            break;
                        }
                    }
                    if (a) {
                        break;
                    }
                }
                return !!a;
            };
            var c7 = function f(a) {
                if (!a || !a.playlists || !a.playlists.length) {
                    var d = f8(a, function(a) {
                        return ((a.playlists && a.playlists.length) || a.uri);
                    });
                    return d;
                }
                var e = function f(d) {
                    var b = a.playlists[d];
                    var c = b.attributes && b.attributes.CODECS;
                    if (c && c.split(",").every(function(a) {
                        return (0, dM.KL)(a);
                    })) {
                        return "continue";
                    }
                    var e = f8(a, function(a) {
                        return c6(b, a);
                    });
                    if (e) {
                        return "continue";
                    }
                    return {
                        v: false
                    };
                };
                for(var b = 0; b < a.playlists.length; b++){
                    var c = e(b);
                    if (c === "continue") continue;
                    if (typeof c === "object") return c.v;
                }
                return true;
            };
            var c8 = {
                liveEdgeDelay: cV,
                duration: cW,
                seekable: cY,
                getMediaInfoForTime: cZ,
                isEnabled: c0,
                isDisabled: c1,
                isBlacklisted: c$,
                isIncompatible: c_,
                playlistEnd: cX,
                isAes: c2,
                hasAttribute: c3,
                estimateSegmentRequestTime: c4,
                isLowestEnabledRendition: c5,
                isAudioOnly: c7,
                playlistMatch: c6,
                segmentDurationWithParts: cU
            };
            var f9 = b.log;
            var ga = function c(a, b) {
                return a + "-" + b;
            };
            var gb = function o(b) {
                var c = b.onwarn, f = b.oninfo, k = b.manifestString, g = b.customTagParsers, l = g === void 0 ? [] : g, h = b.customTagMappers, m = h === void 0 ? [] : h, n = b.experimentalLLHLS;
                var d = new dL._b();
                if (c) {
                    d.on("warn", c);
                }
                if (f) {
                    d.on("info", f);
                }
                l.forEach(function(a) {
                    return d.addParser(a);
                });
                m.forEach(function(a) {
                    return d.addTagMapper(a);
                });
                d.push(k);
                d.end();
                var a = d.manifest;
                if (!n) {
                    [
                        "preloadSegment",
                        "skip",
                        "serverControl",
                        "renditionReports",
                        "partInf",
                        "partTargetDuration", 
                    ].forEach(function(b) {
                        if (a.hasOwnProperty(b)) {
                            delete a[b];
                        }
                    });
                    if (a.segments) {
                        a.segments.forEach(function(a) {
                            [
                                "parts",
                                "preloadHints"
                            ].forEach(function(b) {
                                if (a.hasOwnProperty(b)) {
                                    delete a[b];
                                }
                            });
                        });
                    }
                }
                if (!a.targetDuration) {
                    var e = 10;
                    if (a.segments && a.segments.length) {
                        e = a.segments.reduce(function(a, b) {
                            return Math.max(a, b.duration);
                        }, 0);
                    }
                    if (c) {
                        c("manifest has no targetDuration defaulting to " + e);
                    }
                    a.targetDuration = e;
                }
                var i = f2(a);
                if (i.length && !a.partTargetDuration) {
                    var j = i.reduce(function(a, b) {
                        return Math.max(a, b.duration);
                    }, 0);
                    if (c) {
                        c("manifest has no partTargetDuration defaulting to " + j);
                        f9.error("LL-HLS manifest has parts but lacks required #EXT-X-PART-INF:PART-TARGET value. See https://datatracker.ietf.org/doc/html/draft-pantos-hls-rfc8216bis-09#section-4.4.3.7. Playback is not guaranteed.");
                    }
                    a.partTargetDuration = j;
                }
                return a;
            };
            var gc = function b(a, c) {
                if (!a.mediaGroups) {
                    return;
                }
                [
                    "AUDIO",
                    "SUBTITLES"
                ].forEach(function(b) {
                    if (!a.mediaGroups[b]) {
                        return;
                    }
                    for(var d in a.mediaGroups[b]){
                        for(var e in a.mediaGroups[b][d]){
                            var f = a.mediaGroups[b][d][e];
                            c(f, b, d, e);
                        }
                    }
                });
            };
            var gd = function e(b) {
                var a = b.playlist, c = b.uri, d = b.id;
                a.id = d;
                a.playlistErrors_ = 0;
                if (c) {
                    a.uri = c;
                }
                a.attributes = a.attributes || {};
            };
            var ge = function d(b) {
                var c = b.playlists.length;
                while(c--){
                    var a = b.playlists[c];
                    gd({
                        playlist: a,
                        id: ga(c, a.uri)
                    });
                    a.resolvedUri = fO(b.uri, a.uri);
                    b.playlists[a.id] = a;
                    b.playlists[a.uri] = a;
                    if (!a.attributes.BANDWIDTH) {
                        f9.warn("Invalid playlist STREAM-INF detected. Missing BANDWIDTH attribute.");
                    }
                }
            };
            var gf = function b(a) {
                gc(a, function(b) {
                    if (b.uri) {
                        b.resolvedUri = fO(a.uri, b.uri);
                    }
                });
            };
            var gg = function d(e, b) {
                var c = ga(0, b);
                var a = {
                    mediaGroups: {
                        AUDIO: {},
                        VIDEO: {},
                        "CLOSED-CAPTIONS": {},
                        SUBTITLES: {}
                    },
                    uri: f().location.href,
                    resolvedUri: f().location.href,
                    playlists: [
                        {
                            uri: b,
                            id: c,
                            resolvedUri: b,
                            attributes: {}
                        }, 
                    ]
                };
                a.playlists[c] = a.playlists[0];
                a.playlists[b] = a.playlists[0];
                return a;
            };
            var gh = function e(a, c) {
                a.uri = c;
                for(var b = 0; b < a.playlists.length; b++){
                    if (!a.playlists[b].uri) {
                        var d = "placeholder-uri-" + b;
                        a.playlists[b].uri = d;
                    }
                }
                var f = c7(a);
                gc(a, function(b, e, g, h) {
                    var i = "placeholder-uri-" + e + "-" + g + "-" + h;
                    if (!b.playlists || !b.playlists.length) {
                        if (f && e === "AUDIO" && !b.uri) {
                            for(var c = 0; c < a.playlists.length; c++){
                                var d = a.playlists[c];
                                if (d.attributes && d.attributes.AUDIO && d.attributes.AUDIO === g) {
                                    return;
                                }
                            }
                        }
                        b.playlists = [
                            (0, ah.Z)({}, b), 
                        ];
                    }
                    b.playlists.forEach(function(b, c) {
                        var d = ga(c, i);
                        if (b.uri) {
                            b.resolvedUri = b.resolvedUri || fO(a.uri, b.uri);
                        } else {
                            b.uri = c === 0 ? i : d;
                            b.resolvedUri = b.uri;
                        }
                        b.id = b.id || d;
                        b.attributes = b.attributes || {};
                        a.playlists[b.id] = b;
                        a.playlists[b.uri] = b;
                    });
                });
                ge(a);
                gf(a);
            };
            var gi = b.mergeOptions, c9 = b.EventTarget;
            var gj = function j(b, a) {
                if (a.endList || !a.serverControl) {
                    return b;
                }
                var c = {};
                if (a.serverControl.canBlockReload) {
                    var e = a.preloadSegment;
                    var g = a.mediaSequence + a.segments.length;
                    if (e) {
                        var h = e.parts || [];
                        var d = f3(a) - 1;
                        if (d > -1 && d !== h.length - 1) {
                            c._HLS_part = d;
                        }
                        if (d > -1 || h.length) {
                            g--;
                        }
                    }
                    c._HLS_msn = g;
                }
                if (a.serverControl && a.serverControl.canSkipUntil) {
                    c._HLS_skip = a.serverControl.canSkipDateranges ? "v2" : "YES";
                }
                if (Object.keys(c).length) {
                    var i = new (f().URL)(b);
                    [
                        "_HLS_skip",
                        "_HLS_msn",
                        "_HLS_part"
                    ].forEach(function(a) {
                        if (!c.hasOwnProperty(a)) {
                            return;
                        }
                        i.searchParams.set(a, c[a]);
                    });
                    b = i.toString();
                }
                return b;
            };
            var gk = function e(a, b) {
                if (!a) {
                    return b;
                }
                var c = gi(a, b);
                if (a.preloadHints && !b.preloadHints) {
                    delete c.preloadHints;
                }
                if (a.parts && !b.parts) {
                    delete c.parts;
                } else if (a.parts && b.parts) {
                    for(var d = 0; d < b.parts.length; d++){
                        if (a.parts && a.parts[d]) {
                            c.parts[d] = gi(a.parts[d], b.parts[d]);
                        }
                    }
                }
                if (!a.skipped && b.skipped) {
                    c.skipped = false;
                }
                if (a.preload && !b.preload) {
                    c.preload = false;
                }
                return c;
            };
            var gl = function k(h, i, d) {
                var j = h.slice();
                var g = i.slice();
                d = d || 0;
                var e = [];
                var a;
                for(var b = 0; b < g.length; b++){
                    var f = j[b + d];
                    var c = g[b];
                    if (f) {
                        a = f.map || a;
                        e.push(gk(f, c));
                    } else {
                        if (a && !c.map) {
                            c.map = a;
                        }
                        e.push(c);
                    }
                }
                return e;
            };
            var gm = function c(a, b) {
                if (!a.resolvedUri && a.uri) {
                    a.resolvedUri = fO(b, a.uri);
                }
                if (a.key && !a.key.resolvedUri) {
                    a.key.resolvedUri = fO(b, a.key.uri);
                }
                if (a.map && !a.map.resolvedUri) {
                    a.map.resolvedUri = fO(b, a.map.uri);
                }
                if (a.map && a.map.key && !a.map.key.resolvedUri) {
                    a.map.key.resolvedUri = fO(b, a.map.key.uri);
                }
                if (a.parts && a.parts.length) {
                    a.parts.forEach(function(a) {
                        if (a.resolvedUri) {
                            return;
                        }
                        a.resolvedUri = fO(b, a.uri);
                    });
                }
                if (a.preloadHints && a.preloadHints.length) {
                    a.preloadHints.forEach(function(a) {
                        if (a.resolvedUri) {
                            return;
                        }
                        a.resolvedUri = fO(b, a.uri);
                    });
                }
            };
            var gn = function e(b) {
                var c = b.segments || [];
                var a = b.preloadSegment;
                if (a && a.parts && a.parts.length) {
                    if (a.preloadHints) {
                        for(var d = 0; d < a.preloadHints.length; d++){
                            if (a.preloadHints[d].type === "MAP") {
                                return c;
                            }
                        }
                    }
                    a.duration = b.targetDuration;
                    a.preload = true;
                    c.push(a);
                }
                return c;
            };
            var go = function c(a, b) {
                return (a === b || (a.segments && b.segments && a.segments.length === b.segments.length && a.endList === b.endList && a.mediaSequence === b.mediaSequence && a.preloadSegment === b.preloadSegment));
            };
            var gp = function i(g, a, f) {
                if (f === void 0) {
                    f = go;
                }
                var b = gi(g, {});
                var d = b.playlists[a.id];
                if (!d) {
                    return null;
                }
                if (f(d, a)) {
                    return null;
                }
                a.segments = gn(a);
                var c = gi(d, a);
                if (c.preloadSegment && !a.preloadSegment) {
                    delete c.preloadSegment;
                }
                if (d.segments) {
                    if (a.skip) {
                        a.segments = a.segments || [];
                        for(var h = 0; h < a.skip.skippedSegments; h++){
                            a.segments.unshift({
                                skipped: true
                            });
                        }
                    }
                    c.segments = gl(d.segments, a.segments, a.mediaSequence - d.mediaSequence);
                }
                c.segments.forEach(function(a) {
                    gm(a, c.resolvedUri);
                });
                for(var e = 0; e < b.playlists.length; e++){
                    if (b.playlists[e].id === a.id) {
                        b.playlists[e] = c;
                    }
                }
                b.playlists[a.id] = c;
                b.playlists[a.uri] = c;
                gc(g, function(b, d, e, f) {
                    if (!b.playlists) {
                        return;
                    }
                    for(var c = 0; c < b.playlists.length; c++){
                        if (a.id === b.playlists[c].id) {
                            b.playlists[c] = a;
                        }
                    }
                });
                return b;
            };
            var gq = function g(b, f) {
                var c = b.segments || [];
                var a = c[c.length - 1];
                var d = a && a.parts && a.parts[a.parts.length - 1];
                var e = (d && d.duration) || (a && a.duration);
                if (f && e) {
                    return e * 1000;
                }
                return ((b.partTargetDuration || b.targetDuration || 10) * 500);
            };
            var da = (function(d) {
                (0, dF.Z)(c, d);
                function c(f, g, e) {
                    var a;
                    if (e === void 0) {
                        e = {};
                    }
                    a = d.call(this) || this;
                    if (!f) {
                        throw new Error("A non-empty playlist URL or object is required");
                    }
                    a.logger_ = a1("PlaylistLoader");
                    var h = e, i = h.withCredentials, k = i === void 0 ? false : i, j = h.handleManifestRedirects, l = j === void 0 ? false : j;
                    a.src = f;
                    a.vhs_ = g;
                    a.withCredentials = k;
                    a.handleManifestRedirects = l;
                    var c = g.options_;
                    a.customTagParsers = (c && c.customTagParsers) || [];
                    a.customTagMappers = (c && c.customTagMappers) || [];
                    a.experimentalLLHLS = (c && c.experimentalLLHLS) || false;
                    if (b.browser.IE_VERSION) {
                        a.experimentalLLHLS = false;
                    }
                    a.state = "HAVE_NOTHING";
                    a.handleMediaupdatetimeout_ = a.handleMediaupdatetimeout_.bind((0, dE.Z)(a));
                    a.on("mediaupdatetimeout", a.handleMediaupdatetimeout_);
                    return a;
                }
                var a = c.prototype;
                a.handleMediaupdatetimeout_ = function c() {
                    var d = this;
                    if (this.state !== "HAVE_METADATA") {
                        return;
                    }
                    var b = this.media();
                    var a = fO(this.master.uri, b.uri);
                    if (this.experimentalLLHLS) {
                        a = gj(a, b);
                    }
                    this.state = "HAVE_CURRENT_METADATA";
                    this.request = this.vhs_.xhr({
                        uri: a,
                        withCredentials: this.withCredentials
                    }, function(a, b) {
                        if (!d.request) {
                            return;
                        }
                        if (a) {
                            return d.playlistRequestError(d.request, d.media(), "HAVE_METADATA");
                        }
                        d.haveMetadata({
                            playlistString: d.request.responseText,
                            url: d.media().uri,
                            id: d.media().id
                        });
                    });
                };
                a.playlistRequestError = function f(a, b, c) {
                    var d = b.uri, e = b.id;
                    this.request = null;
                    if (c) {
                        this.state = c;
                    }
                    this.error = {
                        playlist: this.master.playlists[e],
                        status: a.status,
                        message: "HLS playlist request error at URL: " + d + ".",
                        responseText: a.responseText,
                        code: a.status >= 500 ? 4 : 2
                    };
                    this.trigger("error");
                };
                a.parseManifest_ = function c(a) {
                    var d = this;
                    var e = a.url, b = a.manifestString;
                    return gb({
                        onwarn: function c(a) {
                            var b = a.message;
                            return d.logger_("m3u8-parser warn for " + e + ": " + b);
                        },
                        oninfo: function c(a) {
                            var b = a.message;
                            return d.logger_("m3u8-parser info for " + e + ": " + b);
                        },
                        manifestString: b,
                        customTagParsers: this.customTagParsers,
                        customTagMappers: this.customTagMappers,
                        experimentalLLHLS: this.experimentalLLHLS
                    });
                };
                a.haveMetadata = function h(b) {
                    var f = b.playlistString, g = b.playlistObject, d = b.url, e = b.id;
                    this.request = null;
                    this.state = "HAVE_METADATA";
                    var a = g || this.parseManifest_({
                        url: d,
                        manifestString: f
                    });
                    a.lastRequest = Date.now();
                    gd({
                        playlist: a,
                        uri: d,
                        id: e
                    });
                    var c = gp(this.master, a);
                    this.targetDuration = a.partTargetDuration || a.targetDuration;
                    this.pendingMedia_ = null;
                    if (c) {
                        this.master = c;
                        this.media_ = this.master.playlists[e];
                    } else {
                        this.trigger("playlistunchanged");
                    }
                    this.updateMediaUpdateTimeout_(gq(this.media(), !!c));
                    this.trigger("loadedplaylist");
                };
                a.dispose = function a() {
                    this.trigger("dispose");
                    this.stopRequest();
                    f().clearTimeout(this.mediaUpdateTimeout);
                    f().clearTimeout(this.finalRenditionTimeout);
                    this.off();
                };
                a.stopRequest = function b() {
                    if (this.request) {
                        var a = this.request;
                        this.request = null;
                        a.onreadystatechange = null;
                        a.abort();
                    }
                };
                a.media = function h(a, d) {
                    var i = this;
                    if (!a) {
                        return this.media_;
                    }
                    if (this.state === "HAVE_NOTHING") {
                        throw new Error("Cannot switch media playlist from " + this.state);
                    }
                    if (typeof a === "string") {
                        if (!this.master.playlists[a]) {
                            throw new Error("Unknown playlist URI: " + a);
                        }
                        a = this.master.playlists[a];
                    }
                    f().clearTimeout(this.finalRenditionTimeout);
                    if (d) {
                        var e = ((a.partTargetDuration || a.targetDuration) / 2) * 1000 || 5 * 1000;
                        this.finalRenditionTimeout = f().setTimeout(this.media.bind(this, a, false), e);
                        return;
                    }
                    var g = this.state;
                    var b = !this.media_ || a.id !== this.media_.id;
                    var c = this.master.playlists[a.id];
                    if ((c && c.endList) || (a.endList && a.segments.length)) {
                        if (this.request) {
                            this.request.onreadystatechange = null;
                            this.request.abort();
                            this.request = null;
                        }
                        this.state = "HAVE_METADATA";
                        this.media_ = a;
                        if (b) {
                            this.trigger("mediachanging");
                            if (g === "HAVE_MASTER") {
                                this.trigger("loadedmetadata");
                            } else {
                                this.trigger("mediachange");
                            }
                        }
                        return;
                    }
                    this.updateMediaUpdateTimeout_(gq(a, true));
                    if (!b) {
                        return;
                    }
                    this.state = "SWITCHING_MEDIA";
                    if (this.request) {
                        if (a.resolvedUri === this.request.url) {
                            return;
                        }
                        this.request.onreadystatechange = null;
                        this.request.abort();
                        this.request = null;
                    }
                    if (this.media_) {
                        this.trigger("mediachanging");
                    }
                    this.pendingMedia_ = a;
                    this.request = this.vhs_.xhr({
                        uri: a.resolvedUri,
                        withCredentials: this.withCredentials
                    }, function(c, b) {
                        if (!i.request) {
                            return;
                        }
                        a.lastRequest = Date.now();
                        a.resolvedUri = fP(i.handleManifestRedirects, a.resolvedUri, b);
                        if (c) {
                            return i.playlistRequestError(i.request, a, g);
                        }
                        i.haveMetadata({
                            playlistString: b.responseText,
                            url: a.uri,
                            id: a.id
                        });
                        if (g === "HAVE_MASTER") {
                            i.trigger("loadedmetadata");
                        } else {
                            i.trigger("mediachange");
                        }
                    });
                };
                a.pause = function a() {
                    if (this.mediaUpdateTimeout) {
                        f().clearTimeout(this.mediaUpdateTimeout);
                        this.mediaUpdateTimeout = null;
                    }
                    this.stopRequest();
                    if (this.state === "HAVE_NOTHING") {
                        this.started = false;
                    }
                    if (this.state === "SWITCHING_MEDIA") {
                        if (this.media_) {
                            this.state = "HAVE_METADATA";
                        } else {
                            this.state = "HAVE_MASTER";
                        }
                    } else if (this.state === "HAVE_CURRENT_METADATA") {
                        this.state = "HAVE_METADATA";
                    }
                };
                a.load = function d(b) {
                    var e = this;
                    if (this.mediaUpdateTimeout) {
                        f().clearTimeout(this.mediaUpdateTimeout);
                        this.mediaUpdateTimeout = null;
                    }
                    var a = this.media();
                    if (b) {
                        var c = a ? ((a.partTargetDuration || a.targetDuration) / 2) * 1000 : 5 * 1000;
                        this.mediaUpdateTimeout = f().setTimeout(function() {
                            e.mediaUpdateTimeout = null;
                            e.load();
                        }, c);
                        return;
                    }
                    if (!this.started) {
                        this.start();
                        return;
                    }
                    if (a && !a.endList) {
                        this.trigger("mediaupdatetimeout");
                    } else {
                        this.trigger("loadedplaylist");
                    }
                };
                a.updateMediaUpdateTimeout_ = function b(a) {
                    var c = this;
                    if (this.mediaUpdateTimeout) {
                        f().clearTimeout(this.mediaUpdateTimeout);
                        this.mediaUpdateTimeout = null;
                    }
                    if (!this.media() || this.media().endList) {
                        return;
                    }
                    this.mediaUpdateTimeout = f().setTimeout(function() {
                        c.mediaUpdateTimeout = null;
                        c.trigger("mediaupdatetimeout");
                        c.updateMediaUpdateTimeout_(a);
                    }, a);
                };
                a.start = function a() {
                    var b = this;
                    this.started = true;
                    if (typeof this.src === "object") {
                        if (!this.src.uri) {
                            this.src.uri = f().location.href;
                        }
                        this.src.resolvedUri = this.src.uri;
                        setTimeout(function() {
                            b.setupInitialPlaylist(b.src);
                        }, 0);
                        return;
                    }
                    this.request = this.vhs_.xhr({
                        uri: this.src,
                        withCredentials: this.withCredentials
                    }, function(c, a) {
                        if (!b.request) {
                            return;
                        }
                        b.request = null;
                        if (c) {
                            b.error = {
                                status: a.status,
                                message: "HLS playlist request error at URL: " + b.src + ".",
                                responseText: a.responseText,
                                code: 2
                            };
                            if (b.state === "HAVE_NOTHING") {
                                b.started = false;
                            }
                            return b.trigger("error");
                        }
                        b.src = fP(b.handleManifestRedirects, b.src, a);
                        var d = b.parseManifest_({
                            manifestString: a.responseText,
                            url: b.src
                        });
                        b.setupInitialPlaylist(d);
                    });
                };
                a.srcUri = function a() {
                    return typeof this.src === "string" ? this.src : this.src.uri;
                };
                a.setupInitialPlaylist = function c(a) {
                    this.state = "HAVE_MASTER";
                    if (a.playlists) {
                        this.master = a;
                        gh(this.master, this.srcUri());
                        a.playlists.forEach(function(a) {
                            a.segments = gn(a);
                            a.segments.forEach(function(b) {
                                gm(b, a.resolvedUri);
                            });
                        });
                        this.trigger("loadedplaylist");
                        if (!this.request) {
                            this.media(this.master.playlists[0]);
                        }
                        return;
                    }
                    var b = this.srcUri() || f().location.href;
                    this.master = gg(a, b);
                    this.haveMetadata({
                        playlistObject: a,
                        url: b,
                        id: this.master.playlists[0].id
                    });
                    this.trigger("loadedmetadata");
                };
                return c;
            })(c9);
            var gr = b.xhr, gs = b.mergeOptions;
            var gt = function f(a, b, c, e) {
                var d = a.responseType === "arraybuffer" ? a.response : a.responseText;
                if (!b && d) {
                    a.responseTime = Date.now();
                    a.roundTripTime = a.responseTime - a.requestTime;
                    a.bytesReceived = d.byteLength || d.length;
                    if (!a.bandwidth) {
                        a.bandwidth = Math.floor((a.bytesReceived / a.roundTripTime) * 8 * 1000);
                    }
                }
                if (c.headers) {
                    a.responseHeaders = c.headers;
                }
                if (b && b.code === "ETIMEDOUT") {
                    a.timedout = true;
                }
                if (!b && !a.aborted && c.statusCode !== 200 && c.statusCode !== 206 && c.statusCode !== 0) {
                    b = new Error("XHR Failed with a response of: " + (a && (d || a.responseText)));
                }
                e(b, a);
            };
            var db = function c() {
                var a = function f(a, h) {
                    a = gs({
                        timeout: 45e3
                    }, a);
                    var d = f.beforeRequest || b.Vhs.xhr.beforeRequest;
                    if (d && typeof d === "function") {
                        var e = d(a);
                        if (e) {
                            a = e;
                        }
                    }
                    var g = b.Vhs.xhr.original === true ? gr : b.Vhs.xhr;
                    var c = g(a, function(a, b) {
                        return gt(c, a, b, h);
                    });
                    var i = c.abort;
                    c.abort = function() {
                        c.aborted = true;
                        return i.apply(c, arguments);
                    };
                    c.uri = a.uri;
                    c.requestTime = Date.now();
                    return c;
                };
                a.original = true;
                return a;
            };
            var gu = function d(a) {
                var b = a.offset + a.length - 1;
                var c = a.offset;
                return "bytes=" + c + "-" + b;
            };
            var gv = function c(a) {
                var b = {};
                if (a.byterange) {
                    b.Range = gu(a.byterange);
                }
                return b;
            };
            var gw = function c(a, b) {
                return a.start(b) + "-" + a.end(b);
            };
            var gx = function d(b, c) {
                var a = b.toString(16);
                return ("00".substring(0, 2 - a.length) + a + (c % 2 ? " " : ""));
            };
            var gy = function b(a) {
                if (a >= 0x20 && a < 0x7e) {
                    return String.fromCharCode(a);
                }
                return ".";
            };
            var dc = function c(a) {
                var b = {};
                Object.keys(a).forEach(function(d) {
                    var c = a[d];
                    if (ArrayBuffer.isView(c)) {
                        b[d] = {
                            bytes: c.buffer,
                            byteOffset: c.byteOffset,
                            byteLength: c.byteLength
                        };
                    } else {
                        b[d] = c;
                    }
                });
                return b;
            };
            var dd = function c(a) {
                var b = a.byterange || {
                    length: Infinity,
                    offset: 0
                };
                return [
                    b.length,
                    b.offset,
                    a.resolvedUri, 
                ].join(",");
            };
            var de = function b(a) {
                return a.resolvedUri;
            };
            var df = function h(g) {
                var c = Array.prototype.slice.call(g);
                var a = 16;
                var d = "";
                var e;
                var f;
                for(var b = 0; b < c.length / a; b++){
                    e = c.slice(b * a, b * a + a).map(gx).join("");
                    f = c.slice(b * a, b * a + a).map(gy).join("");
                    d += e + " " + f + "\n";
                }
                return d;
            };
            var dg = function c(a) {
                var b = a.bytes;
                return df(b);
            };
            var dh = function d(b) {
                var c = "";
                var a;
                for(a = 0; a < b.length; a++){
                    c += gw(b, a) + " ";
                }
                return c;
            };
            var di = Object.freeze({
                __proto__: null,
                createTransferableMessage: dc,
                initSegmentId: dd,
                segmentKeyId: de,
                hexDump: df,
                tagDump: dg,
                textRanges: dh
            });
            var gz = 0.25;
            var gA = function g(b, a) {
                if (!a.dateTimeObject) {
                    return null;
                }
                var c = a.videoTimingInfo.transmuxerPrependedSeconds;
                var d = a.videoTimingInfo.transmuxedPresentationStart;
                var e = d + c;
                var f = b - e;
                return new Date(a.dateTimeObject.getTime() + f * 1000);
            };
            var gB = function b(a) {
                return (a.transmuxedPresentationEnd - a.transmuxedPresentationStart - a.transmuxerPrependedSeconds);
            };
            var gC = function k(g, a) {
                var d;
                try {
                    d = new Date(g);
                } catch (l) {
                    return null;
                }
                if (!a || !a.segments || a.segments.length === 0) {
                    return null;
                }
                var b = a.segments[0];
                if (d < b.dateTimeObject) {
                    return null;
                }
                for(var e = 0; e < a.segments.length - 1; e++){
                    b = a.segments[e];
                    var h = a.segments[e + 1].dateTimeObject;
                    if (d < h) {
                        break;
                    }
                }
                var c = a.segments[a.segments.length - 1];
                var f = c.dateTimeObject;
                var i = c.videoTimingInfo ? gB(c.videoTimingInfo) : c.duration + c.duration * gz;
                var j = new Date(f.getTime() + i * 1000);
                if (d > j) {
                    return null;
                }
                if (d > f) {
                    b = c;
                }
                return {
                    segment: b,
                    estimatedStart: b.videoTimingInfo ? b.videoTimingInfo.transmuxedPresentationStart : c8.duration(a, a.mediaSequence + a.segments.indexOf(b)),
                    type: b.videoTimingInfo ? "accurate" : "estimate"
                };
            };
            var gD = function g(d, b) {
                if (!b || !b.segments || b.segments.length === 0) {
                    return null;
                }
                var c = 0;
                var a;
                for(var f = 0; f < b.segments.length; f++){
                    a = b.segments[f];
                    c = a.videoTimingInfo ? a.videoTimingInfo.transmuxedPresentationEnd : c + a.duration;
                    if (d <= c) {
                        break;
                    }
                }
                var e = b.segments[b.segments.length - 1];
                if (e.videoTimingInfo && e.videoTimingInfo.transmuxedPresentationEnd < d) {
                    return null;
                }
                if (d > c) {
                    if (d > c + e.duration * gz) {
                        return null;
                    }
                    a = e;
                }
                return {
                    segment: a,
                    estimatedStart: a.videoTimingInfo ? a.videoTimingInfo.transmuxedPresentationStart : c - a.duration,
                    type: a.videoTimingInfo ? "accurate" : "estimate"
                };
            };
            var gE = function g(c, d) {
                var a;
                var b;
                try {
                    a = new Date(c);
                    b = new Date(d);
                } catch (h) {}
                var e = a.getTime();
                var f = b.getTime();
                return (f - e) / 1000;
            };
            var gF = function d(a) {
                if (!a.segments || a.segments.length === 0) {
                    return false;
                }
                for(var b = 0; b < a.segments.length; b++){
                    var c = a.segments[b];
                    if (!c.dateTimeObject) {
                        return false;
                    }
                }
                return true;
            };
            var gG = function i(d) {
                var e = d.playlist, f = d.time, b = f === void 0 ? undefined : f, a = d.callback;
                if (!a) {
                    throw new Error("getProgramTime: callback must be provided");
                }
                if (!e || b === undefined) {
                    return a({
                        message: "getProgramTime: playlist and time must be provided"
                    });
                }
                var c = gD(b, e);
                if (!c) {
                    return a({
                        message: "valid programTime was not found"
                    });
                }
                if (c.type === "estimate") {
                    return a({
                        message: "Accurate programTime could not be determined." + " Please seek to e.seekTime and try again",
                        seekTime: c.estimatedStart
                    });
                }
                var g = {
                    mediaSeconds: b
                };
                var h = gA(b, c.segment);
                if (h) {
                    g.programDateTime = h.toISOString();
                }
                return a(null, g);
            };
            var gH = function p(a) {
                var c = a.programTime, d = a.playlist, h = a.retryCount, l = h === void 0 ? 2 : h, g = a.seekTo, i = a.pauseAfterSeek, m = i === void 0 ? true : i, e = a.tech, b = a.callback;
                if (!b) {
                    throw new Error("seekToProgramTime: callback must be provided");
                }
                if (typeof c === "undefined" || !d || !g) {
                    return b({
                        message: "seekToProgramTime: programTime, seekTo and playlist must be provided"
                    });
                }
                if (!d.endList && !e.hasStarted_) {
                    return b({
                        message: "player must be playing a live stream to start buffering"
                    });
                }
                if (!gF(d)) {
                    return b({
                        message: "programDateTime tags must be provided in the manifest " + d.resolvedUri
                    });
                }
                var f = gC(c, d);
                if (!f) {
                    return b({
                        message: c + " was not found in the stream"
                    });
                }
                var j = f.segment;
                var k = gE(j.dateTimeObject, c);
                if (f.type === "estimate") {
                    if (l === 0) {
                        return b({
                            message: c + " is not buffered yet. Try again"
                        });
                    }
                    g(f.estimatedStart + k);
                    e.one("seeked", function() {
                        p({
                            programTime: c,
                            playlist: d,
                            retryCount: l - 1,
                            seekTo: g,
                            pauseAfterSeek: m,
                            tech: e,
                            callback: b
                        });
                    });
                    return;
                }
                var n = j.start + k;
                var o = function a() {
                    return b(null, e.currentTime());
                };
                e.one("seeked", o);
                if (m) {
                    e.pause();
                }
                g(n);
            };
            var gI = function c(a, b) {
                if (a.readyState === 4) {
                    return b();
                }
                return;
            };
            var gJ = function e(a, b, f) {
                var g = [];
                var h;
                var i = false;
                var j = function e(b, a, c, d) {
                    a.abort();
                    i = true;
                    return f(b, a, c, d);
                };
                var k = function e(c, a) {
                    if (i) {
                        return;
                    }
                    if (c) {
                        return j(c, a, "", g);
                    }
                    var d = a.responseText.substring((g && g.byteLength) || 0, a.responseText.length);
                    g = (0, dS.lx)(g, (0, dS.qX)(d, true));
                    h = h || (0, dQ.c)(g);
                    if (g.length < 10 || (h && g.length < h + 2)) {
                        return gI(a, function() {
                            return j(c, a, "", g);
                        });
                    }
                    var b = (0, dR.Xm)(g);
                    if (b === "ts" && g.length < 188) {
                        return gI(a, function() {
                            return j(c, a, "", g);
                        });
                    }
                    if (!b && g.length < 376) {
                        return gI(a, function() {
                            return j(c, a, "", g);
                        });
                    }
                    return j(null, a, b, g);
                };
                var c = {
                    uri: a,
                    beforeSend: function b(a) {
                        a.overrideMimeType("text/plain; charset=x-user-defined");
                        a.addEventListener("progress", function(b) {
                            b.total;
                            b.loaded;
                            return gt(a, null, {
                                statusCode: a.status
                            }, k);
                        });
                    }
                };
                var d = b(c, function(a, b) {
                    return gt(d, a, b, k);
                });
                return d;
            };
            var dj = b.EventTarget, gK = b.mergeOptions;
            var gL = function h(a, b) {
                if (!go(a, b)) {
                    return false;
                }
                if (a.sidx && b.sidx && (a.sidx.offset !== b.sidx.offset || a.sidx.length !== b.sidx.length)) {
                    return false;
                } else if ((!a.sidx && b.sidx) || (a.sidx && !b.sidx)) {
                    return false;
                }
                if ((a.segments && !b.segments) || (!a.segments && b.segments)) {
                    return false;
                }
                if (!a.segments && !b.segments) {
                    return true;
                }
                for(var c = 0; c < a.segments.length; c++){
                    var f = a.segments[c];
                    var g = b.segments[c];
                    if (f.uri !== g.uri) {
                        return false;
                    }
                    if (!f.byterange && !g.byterange) {
                        continue;
                    }
                    var d = f.byterange;
                    var e = g.byterange;
                    if ((d && !e) || (!d && e)) {
                        return false;
                    }
                    if (d.offset !== e.offset || d.length !== e.length) {
                        return false;
                    }
                }
                return true;
            };
            var gM = function g(a) {
                var d = a.masterXml, b = a.srcUrl, e = a.clientOffset, f = a.sidxMapping;
                var c = (0, dO.Qc)(d, {
                    manifestUri: b,
                    clientOffset: e,
                    sidxMapping: f
                });
                gh(c, b);
                return c;
            };
            var gN = function j(h, a, c) {
                var d = true;
                var e = gK(h, {
                    duration: a.duration,
                    minimumUpdatePeriod: a.minimumUpdatePeriod
                });
                for(var f = 0; f < a.playlists.length; f++){
                    var b = a.playlists[f];
                    if (b.sidx) {
                        var g = (0, dO.mm)(b.sidx);
                        if (c && c[g] && c[g].sidx) {
                            (0, dO.jp)(b, c[g].sidx, b.sidx.resolvedUri);
                        }
                    }
                    var i = gp(e, b, gL);
                    if (i) {
                        e = i;
                        d = false;
                    }
                }
                gc(a, function(a, c, f, g) {
                    if (a.playlists && a.playlists.length) {
                        var h = a.playlists[0].id;
                        var b = gp(e, a.playlists[0], gL);
                        if (b) {
                            e = b;
                            e.mediaGroups[c][f][g].playlists[0] = e.playlists[h];
                            d = false;
                        }
                    }
                });
                if (a.minimumUpdatePeriod !== h.minimumUpdatePeriod) {
                    d = false;
                }
                if (d) {
                    return null;
                }
                return e;
            };
            var gO = function e(a, b) {
                var c = Boolean(!a.map && !b.map);
                var d = c || Boolean(a.map && b.map && a.map.byterange.offset === b.map.byterange.offset && a.map.byterange.length === b.map.byterange.length);
                return (d && a.uri === b.uri && a.byterange.offset === b.byterange.offset && a.byterange.length === b.byterange.length);
            };
            var gP = function i(d, b) {
                var e = {};
                for(var f in d){
                    var g = d[f];
                    var c = g.sidx;
                    if (c) {
                        var a = (0, dO.mm)(c);
                        if (!b[a]) {
                            break;
                        }
                        var h = b[a].sidxInfo;
                        if (gO(h, c)) {
                            e[a] = b[a];
                        }
                    }
                }
                return e;
            };
            var gQ = function e(a, b) {
                var c = gP(a.playlists, b);
                var d = c;
                gc(a, function(a, e, f, g) {
                    if (a.playlists && a.playlists.length) {
                        var c = a.playlists;
                        d = gK(d, gP(c, b));
                    }
                });
                return d;
            };
            var gR = (function(c) {
                (0, dF.Z)(b, c);
                function b(b, i, d, e) {
                    var a;
                    if (d === void 0) {
                        d = {};
                    }
                    a = c.call(this) || this;
                    a.masterPlaylistLoader_ = e || (0, dE.Z)(a);
                    if (!e) {
                        a.isMaster_ = true;
                    }
                    var f = d, g = f.withCredentials, j = g === void 0 ? false : g, h = f.handleManifestRedirects, k = h === void 0 ? false : h;
                    a.vhs_ = i;
                    a.withCredentials = j;
                    a.handleManifestRedirects = k;
                    if (!b) {
                        throw new Error("A non-empty playlist URL or object is required");
                    }
                    a.on("minimumUpdatePeriod", function() {
                        a.refreshXml_();
                    });
                    a.on("mediaupdatetimeout", function() {
                        a.refreshMedia_(a.media().id);
                    });
                    a.state = "HAVE_NOTHING";
                    a.loadedPlaylists_ = {};
                    a.logger_ = a1("DashPlaylistLoader");
                    if (a.isMaster_) {
                        a.masterPlaylistLoader_.srcUrl = b;
                        a.masterPlaylistLoader_.sidxMapping_ = {};
                    } else {
                        a.childPlaylist_ = b;
                    }
                    return a;
                }
                var a = b.prototype;
                a.requestErrored_ = function d(a, b, c) {
                    if (!this.request) {
                        return true;
                    }
                    this.request = null;
                    if (a) {
                        this.error = typeof a === "object" && !(a instanceof Error) ? a : {
                            status: b.status,
                            message: "DASH request error at URL: " + b.uri,
                            response: b.response,
                            code: 2
                        };
                        if (c) {
                            this.state = c;
                        }
                        this.trigger("error");
                        return true;
                    }
                };
                a.addSidxSegments_ = function d(a, e, g) {
                    var h = this;
                    var b = a.sidx && (0, dO.mm)(a.sidx);
                    if (!a.sidx || !b || this.masterPlaylistLoader_.sidxMapping_[b]) {
                        this.mediaRequest_ = f().setTimeout(function() {
                            return g(false);
                        }, 0);
                        return;
                    }
                    var c = fP(this.handleManifestRedirects, a.sidx.resolvedUri);
                    var i = function k(f, c) {
                        if (h.requestErrored_(f, c, e)) {
                            return;
                        }
                        var i = h.masterPlaylistLoader_.sidxMapping_;
                        var d;
                        try {
                            d = dP()((0, dS.Ki)(c.response).subarray(8));
                        } catch (j) {
                            h.requestErrored_(j, c, e);
                            return;
                        }
                        i[b] = {
                            sidxInfo: a.sidx,
                            sidx: d
                        };
                        (0, dO.jp)(a, d, a.sidx.resolvedUri);
                        return g(true);
                    };
                    this.request = gJ(c, this.vhs_.xhr, function(d, b, e, g) {
                        if (d) {
                            return i(d, b);
                        }
                        if (!e || e !== "mp4") {
                            return i({
                                status: b.status,
                                message: "Unsupported " + (e || "unknown") + " container type for sidx segment at URL: " + c,
                                response: "",
                                playlist: a,
                                internal: true,
                                blacklistDuration: Infinity,
                                code: 2
                            }, b);
                        }
                        var j = a.sidx.byterange, f = j.offset, k = j.length;
                        if (g.length >= k + f) {
                            return i(d, {
                                response: g.subarray(f, f + k),
                                status: b.status,
                                uri: b.uri
                            });
                        }
                        h.request = h.vhs_.xhr({
                            uri: c,
                            responseType: "arraybuffer",
                            headers: gv({
                                byterange: a.sidx.byterange
                            })
                        }, i);
                    });
                };
                a.dispose = function a() {
                    this.trigger("dispose");
                    this.stopRequest();
                    this.loadedPlaylists_ = {};
                    f().clearTimeout(this.minimumUpdatePeriodTimeout_);
                    f().clearTimeout(this.mediaRequest_);
                    f().clearTimeout(this.mediaUpdateTimeout);
                    this.mediaUpdateTimeout = null;
                    this.mediaRequest_ = null;
                    this.minimumUpdatePeriodTimeout_ = null;
                    if (this.masterPlaylistLoader_.createMupOnMedia_) {
                        this.off("loadedmetadata", this.masterPlaylistLoader_.createMupOnMedia_);
                        this.masterPlaylistLoader_.createMupOnMedia_ = null;
                    }
                    this.off();
                };
                a.hasPendingRequest = function a() {
                    return this.request || this.mediaRequest_;
                };
                a.stopRequest = function b() {
                    if (this.request) {
                        var a = this.request;
                        this.request = null;
                        a.onreadystatechange = null;
                        a.abort();
                    }
                };
                a.media = function d(a) {
                    var e = this;
                    if (!a) {
                        return this.media_;
                    }
                    if (this.state === "HAVE_NOTHING") {
                        throw new Error("Cannot switch media playlist from " + this.state);
                    }
                    var c = this.state;
                    if (typeof a === "string") {
                        if (!this.masterPlaylistLoader_.master.playlists[a]) {
                            throw new Error("Unknown playlist URI: " + a);
                        }
                        a = this.masterPlaylistLoader_.master.playlists[a];
                    }
                    var b = !this.media_ || a.id !== this.media_.id;
                    if (b && this.loadedPlaylists_[a.id] && this.loadedPlaylists_[a.id].endList) {
                        this.state = "HAVE_METADATA";
                        this.media_ = a;
                        if (b) {
                            this.trigger("mediachanging");
                            this.trigger("mediachange");
                        }
                        return;
                    }
                    if (!b) {
                        return;
                    }
                    if (this.media_) {
                        this.trigger("mediachanging");
                    }
                    this.addSidxSegments_(a, c, function(b) {
                        e.haveMetadata({
                            startingState: c,
                            playlist: a
                        });
                    });
                };
                a.haveMetadata = function d(b) {
                    var c = b.startingState, a = b.playlist;
                    this.state = "HAVE_METADATA";
                    this.loadedPlaylists_[a.id] = a;
                    this.mediaRequest_ = null;
                    this.refreshMedia_(a.id);
                    if (c === "HAVE_MASTER") {
                        this.trigger("loadedmetadata");
                    } else {
                        this.trigger("mediachange");
                    }
                };
                a.pause = function a() {
                    if (this.masterPlaylistLoader_.createMupOnMedia_) {
                        this.off("loadedmetadata", this.masterPlaylistLoader_.createMupOnMedia_);
                        this.masterPlaylistLoader_.createMupOnMedia_ = null;
                    }
                    this.stopRequest();
                    f().clearTimeout(this.mediaUpdateTimeout);
                    this.mediaUpdateTimeout = null;
                    if (this.isMaster_) {
                        f().clearTimeout(this.masterPlaylistLoader_.minimumUpdatePeriodTimeout_);
                        this.masterPlaylistLoader_.minimumUpdatePeriodTimeout_ = null;
                    }
                    if (this.state === "HAVE_NOTHING") {
                        this.started = false;
                    }
                };
                a.load = function d(b) {
                    var e = this;
                    f().clearTimeout(this.mediaUpdateTimeout);
                    this.mediaUpdateTimeout = null;
                    var a = this.media();
                    if (b) {
                        var c = a ? (a.targetDuration / 2) * 1000 : 5 * 1000;
                        this.mediaUpdateTimeout = f().setTimeout(function() {
                            return e.load();
                        }, c);
                        return;
                    }
                    if (!this.started) {
                        this.start();
                        return;
                    }
                    if (a && !a.endList) {
                        if (this.isMaster_ && !this.minimumUpdatePeriodTimeout_) {
                            this.trigger("minimumUpdatePeriod");
                            this.updateMinimumUpdatePeriodTimeout_();
                        }
                        this.trigger("mediaupdatetimeout");
                    } else {
                        this.trigger("loadedplaylist");
                    }
                };
                a.start = function a() {
                    var b = this;
                    this.started = true;
                    if (!this.isMaster_) {
                        this.mediaRequest_ = f().setTimeout(function() {
                            return b.haveMaster_();
                        }, 0);
                        return;
                    }
                    this.requestMaster_(function(a, c) {
                        b.haveMaster_();
                        if (!b.hasPendingRequest() && !b.media_) {
                            b.media(b.masterPlaylistLoader_.master.playlists[0]);
                        }
                    });
                };
                a.requestMaster_ = function a(b) {
                    var c = this;
                    this.request = this.vhs_.xhr({
                        uri: this.masterPlaylistLoader_.srcUrl,
                        withCredentials: this.withCredentials
                    }, function(e, a) {
                        if (c.requestErrored_(e, a)) {
                            if (c.state === "HAVE_NOTHING") {
                                c.started = false;
                            }
                            return;
                        }
                        var d = a.responseText !== c.masterPlaylistLoader_.masterXml_;
                        c.masterPlaylistLoader_.masterXml_ = a.responseText;
                        if (a.responseHeaders && a.responseHeaders.date) {
                            c.masterLoaded_ = Date.parse(a.responseHeaders.date);
                        } else {
                            c.masterLoaded_ = Date.now();
                        }
                        c.masterPlaylistLoader_.srcUrl = fP(c.handleManifestRedirects, c.masterPlaylistLoader_.srcUrl, a);
                        if (d) {
                            c.handleMaster_();
                            c.syncClientServerClock_(function() {
                                return b(a, d);
                            });
                            return;
                        }
                        return b(a, d);
                    });
                };
                a.syncClientServerClock_ = function c(b) {
                    var d = this;
                    var a = (0, dO.LG)(this.masterPlaylistLoader_.masterXml_);
                    if (a === null) {
                        this.masterPlaylistLoader_.clientOffset_ = this.masterLoaded_ - Date.now();
                        return b();
                    }
                    if (a.method === "DIRECT") {
                        this.masterPlaylistLoader_.clientOffset_ = a.value - Date.now();
                        return b();
                    }
                    this.request = this.vhs_.xhr({
                        uri: fO(this.masterPlaylistLoader_.srcUrl, a.value),
                        method: a.method,
                        withCredentials: this.withCredentials
                    }, function(f, c) {
                        if (!d.request) {
                            return;
                        }
                        if (f) {
                            d.masterPlaylistLoader_.clientOffset_ = d.masterLoaded_ - Date.now();
                            return b();
                        }
                        var e;
                        if (a.method === "HEAD") {
                            if (!c.responseHeaders || !c.responseHeaders.date) {
                                e = d.masterLoaded_;
                            } else {
                                e = Date.parse(c.responseHeaders.date);
                            }
                        } else {
                            e = Date.parse(c.responseText);
                        }
                        d.masterPlaylistLoader_.clientOffset_ = e - Date.now();
                        b();
                    });
                };
                a.haveMaster_ = function a() {
                    this.state = "HAVE_MASTER";
                    if (this.isMaster_) {
                        this.trigger("loadedplaylist");
                    } else if (!this.media_) {
                        this.media(this.childPlaylist_);
                    }
                };
                a.handleMaster_ = function d() {
                    this.mediaRequest_ = null;
                    var a = gM({
                        masterXml: this.masterPlaylistLoader_.masterXml_,
                        srcUrl: this.masterPlaylistLoader_.srcUrl,
                        clientOffset: this.masterPlaylistLoader_.clientOffset_,
                        sidxMapping: this.masterPlaylistLoader_.sidxMapping_
                    });
                    var b = this.masterPlaylistLoader_.master;
                    if (b) {
                        a = gN(b, a, this.masterPlaylistLoader_.sidxMapping_);
                    }
                    this.masterPlaylistLoader_.master = a ? a : b;
                    var c = this.masterPlaylistLoader_.master.locations && this.masterPlaylistLoader_.master.locations[0];
                    if (c && c !== this.masterPlaylistLoader_.srcUrl) {
                        this.masterPlaylistLoader_.srcUrl = c;
                    }
                    if (!b || (a && a.minimumUpdatePeriod !== b.minimumUpdatePeriod)) {
                        this.updateMinimumUpdatePeriodTimeout_();
                    }
                    return Boolean(a);
                };
                a.updateMinimumUpdatePeriodTimeout_ = function c() {
                    var a = this.masterPlaylistLoader_;
                    if (a.createMupOnMedia_) {
                        a.off("loadedmetadata", a.createMupOnMedia_);
                        a.createMupOnMedia_ = null;
                    }
                    if (a.minimumUpdatePeriodTimeout_) {
                        f().clearTimeout(a.minimumUpdatePeriodTimeout_);
                        a.minimumUpdatePeriodTimeout_ = null;
                    }
                    var b = a.master && a.master.minimumUpdatePeriod;
                    if (b === 0) {
                        if (a.media()) {
                            b = a.media().targetDuration * 1000;
                        } else {
                            a.createMupOnMedia_ = a.updateMinimumUpdatePeriodTimeout_;
                            a.one("loadedmetadata", a.createMupOnMedia_);
                        }
                    }
                    if (typeof b !== "number" || b <= 0) {
                        if (b < 0) {
                            this.logger_("found invalid minimumUpdatePeriod of " + b + ", not setting a timeout");
                        }
                        return;
                    }
                    this.createMUPTimeout_(b);
                };
                a.createMUPTimeout_ = function c(a) {
                    var b = this.masterPlaylistLoader_;
                    b.minimumUpdatePeriodTimeout_ = f().setTimeout(function() {
                        b.minimumUpdatePeriodTimeout_ = null;
                        b.trigger("minimumUpdatePeriod");
                        b.createMUPTimeout_(a);
                    }, a);
                };
                a.refreshXml_ = function a() {
                    var b = this;
                    this.requestMaster_(function(c, a) {
                        if (!a) {
                            return;
                        }
                        if (b.media_) {
                            b.media_ = b.masterPlaylistLoader_.master.playlists[b.media_.id];
                        }
                        b.masterPlaylistLoader_.sidxMapping_ = gQ(b.masterPlaylistLoader_.master, b.masterPlaylistLoader_.sidxMapping_);
                        b.addSidxSegments_(b.media(), b.state, function(a) {
                            b.refreshMedia_(b.media().id);
                        });
                    });
                };
                a.refreshMedia_ = function e(a) {
                    var g = this;
                    if (!a) {
                        throw new Error("refreshMedia_ must take a media id");
                    }
                    if (this.media_ && this.isMaster_) {
                        this.handleMaster_();
                    }
                    var b = this.masterPlaylistLoader_.master.playlists;
                    var c = !this.media_ || this.media_ !== b[a];
                    if (c) {
                        this.media_ = b[a];
                    } else {
                        this.trigger("playlistunchanged");
                    }
                    if (!this.mediaUpdateTimeout) {
                        var d = function a() {
                            if (g.media().endList) {
                                return;
                            }
                            g.mediaUpdateTimeout = f().setTimeout(function() {
                                g.trigger("mediaupdatetimeout");
                                a();
                            }, gq(g.media(), Boolean(c)));
                        };
                        d();
                    }
                    this.trigger("loadedplaylist");
                };
                return b;
            })(dj);
            var dk = {
                GOAL_BUFFER_LENGTH: 30,
                MAX_GOAL_BUFFER_LENGTH: 60,
                BACK_BUFFER_LENGTH: 30,
                GOAL_BUFFER_LENGTH_RATE: 1,
                INITIAL_BANDWIDTH: 4194304,
                BANDWIDTH_VARIANCE: 1.2,
                BUFFER_LOW_WATER_LINE: 0,
                MAX_BUFFER_LOW_WATER_LINE: 30,
                EXPERIMENTAL_MAX_BUFFER_LOW_WATER_LINE: 16,
                BUFFER_LOW_WATER_LINE_RATE: 1,
                BUFFER_HIGH_WATER_LINE: 30
            };
            var gS = function d(b) {
                var c = new Uint8Array(new ArrayBuffer(b.length));
                for(var a = 0; a < b.length; a++){
                    c[a] = b.charCodeAt(a);
                }
                return c.buffer;
            };
            var gT = function b(a) {
                a.on = a.addEventListener;
                a.off = a.removeEventListener;
                return a;
            };
            var gU = function c(a) {
                try {
                    return URL.createObjectURL(new Blob([
                        a
                    ], {
                        type: "application/javascript"
                    }));
                } catch (d) {
                    var b = new BlobBuilder();
                    b.append(a);
                    return URL.createObjectURL(b.getBlob());
                }
            };
            var a2 = function a(b) {
                return function() {
                    var c = gU(b);
                    var a = gT(new Worker(c));
                    a.objURL = c;
                    var d = a.terminate;
                    a.on = a.addEventListener;
                    a.off = a.removeEventListener;
                    a.terminate = function() {
                        URL.revokeObjectURL(c);
                        return d.call(this);
                    };
                    return a;
                };
            };
            var a3 = function b(a) {
                return ("var browserWorkerPolyFill = " + gT.toString() + ";\n" + "browserWorkerPolyFill(self);\n" + a);
            };
            var a4 = function b(a) {
                return a.toString().replace(/^function.+?{/, "").slice(0, -1);
            };
            var dl = a3(a4(function() {
                var e = function a() {
                    this.init = function() {
                        var a = {};
                        this.on = function(b, c) {
                            if (!a[b]) {
                                a[b] = [];
                            }
                            a[b] = a[b].concat(c);
                        };
                        this.off = function(b, d) {
                            var c;
                            if (!a[b]) {
                                return false;
                            }
                            c = a[b].indexOf(d);
                            a[b] = a[b].slice();
                            a[b].splice(c, 1);
                            return c > -1;
                        };
                        this.trigger = function(f) {
                            var c, b, d, e;
                            c = a[f];
                            if (!c) {
                                return;
                            }
                            if (arguments.length === 2) {
                                d = c.length;
                                for(b = 0; b < d; ++b){
                                    c[b].call(this, arguments[1]);
                                }
                            } else {
                                e = [];
                                b = arguments.length;
                                for(b = 1; b < arguments.length; ++b){
                                    e.push(arguments[b]);
                                }
                                d = c.length;
                                for(b = 0; b < d; ++b){
                                    c[b].apply(this, e);
                                }
                            }
                        };
                        this.dispose = function() {
                            a = {};
                        };
                    };
                };
                e.prototype.pipe = function(a) {
                    this.on("data", function(b) {
                        a.push(b);
                    });
                    this.on("done", function(b) {
                        a.flush(b);
                    });
                    this.on("partialdone", function(b) {
                        a.partialFlush(b);
                    });
                    this.on("endedtimeline", function(b) {
                        a.endTimeline(b);
                    });
                    this.on("reset", function(b) {
                        a.reset(b);
                    });
                    return a;
                };
                e.prototype.push = function(a) {
                    this.trigger("data", a);
                };
                e.prototype.flush = function(a) {
                    this.trigger("done", a);
                };
                e.prototype.partialFlush = function(a) {
                    this.trigger("partialdone", a);
                };
                e.prototype.endTimeline = function(a) {
                    this.trigger("endedtimeline", a);
                };
                e.prototype.reset = function(a) {
                    this.trigger("reset", a);
                };
                var c = e;
                var be = Math.pow(2, 32) - 1;
                var V, W, X, y, z, Y, Z, A, B, $, _, aa, ab, ac, ad, ae, af, ag, bf, ah, ai, bg, bh, bi, bj, bk, bl, bm, bn, bo, bp, bq, br, bs, bt, bu;
                (function() {
                    var a;
                    bh = {
                        avc1: [],
                        avcC: [],
                        btrt: [],
                        dinf: [],
                        dref: [],
                        esds: [],
                        ftyp: [],
                        hdlr: [],
                        mdat: [],
                        mdhd: [],
                        mdia: [],
                        mfhd: [],
                        minf: [],
                        moof: [],
                        moov: [],
                        mp4a: [],
                        mvex: [],
                        mvhd: [],
                        pasp: [],
                        sdtp: [],
                        smhd: [],
                        stbl: [],
                        stco: [],
                        stsc: [],
                        stsd: [],
                        stsz: [],
                        stts: [],
                        styp: [],
                        tfdt: [],
                        tfhd: [],
                        traf: [],
                        trak: [],
                        trun: [],
                        trex: [],
                        tkhd: [],
                        vmhd: []
                    };
                    if (typeof Uint8Array === "undefined") {
                        return;
                    }
                    for(a in bh){
                        if (bh.hasOwnProperty(a)) {
                            bh[a] = [
                                a.charCodeAt(0),
                                a.charCodeAt(1),
                                a.charCodeAt(2),
                                a.charCodeAt(3), 
                            ];
                        }
                    }
                    bi = new Uint8Array([
                        "i".charCodeAt(0),
                        "s".charCodeAt(0),
                        "o".charCodeAt(0),
                        "m".charCodeAt(0), 
                    ]);
                    bk = new Uint8Array([
                        "a".charCodeAt(0),
                        "v".charCodeAt(0),
                        "c".charCodeAt(0),
                        "1".charCodeAt(0), 
                    ]);
                    bj = new Uint8Array([
                        0,
                        0,
                        0,
                        1
                    ]);
                    bl = new Uint8Array([
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x76,
                        0x69,
                        0x64,
                        0x65,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x56,
                        0x69,
                        0x64,
                        0x65,
                        0x6f,
                        0x48,
                        0x61,
                        0x6e,
                        0x64,
                        0x6c,
                        0x65,
                        0x72,
                        0x00
                    ]);
                    bm = new Uint8Array([
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x73,
                        0x6f,
                        0x75,
                        0x6e,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x53,
                        0x6f,
                        0x75,
                        0x6e,
                        0x64,
                        0x48,
                        0x61,
                        0x6e,
                        0x64,
                        0x6c,
                        0x65,
                        0x72,
                        0x00
                    ]);
                    bn = {
                        video: bl,
                        audio: bm
                    };
                    bq = new Uint8Array([
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x01,
                        0x00,
                        0x00,
                        0x00,
                        0x0c,
                        0x75,
                        0x72,
                        0x6c,
                        0x20,
                        0x00,
                        0x00,
                        0x00,
                        0x01
                    ]);
                    bp = new Uint8Array([
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00
                    ]);
                    br = new Uint8Array([
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00
                    ]);
                    bs = br;
                    bt = new Uint8Array([
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00
                    ]);
                    bu = br;
                    bo = new Uint8Array([
                        0x00,
                        0x00,
                        0x00,
                        0x01,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00
                    ]);
                })();
                V = function g(f) {
                    var c = [], d = 0, a, b, e;
                    for(a = 1; a < arguments.length; a++){
                        c.push(arguments[a]);
                    }
                    a = c.length;
                    while(a--){
                        d += c[a].byteLength;
                    }
                    b = new Uint8Array(d + 8);
                    e = new DataView(b.buffer, b.byteOffset, b.byteLength);
                    e.setUint32(0, b.byteLength);
                    b.set(f, 4);
                    for(a = 0, d = 8; a < c.length; a++){
                        b.set(c[a], d);
                        d += c[a].byteLength;
                    }
                    return b;
                };
                W = function a() {
                    return V(bh.dinf, V(bh.dref, bq));
                };
                X = function b(a) {
                    return V(bh.esds, new Uint8Array([
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x03,
                        0x19,
                        0x00,
                        0x00,
                        0x00,
                        0x04,
                        0x11,
                        0x40,
                        0x15,
                        0x00,
                        0x06,
                        0x00,
                        0x00,
                        0x00,
                        0xda,
                        0xc0,
                        0x00,
                        0x00,
                        0xda,
                        0xc0,
                        0x05,
                        0x02,
                        (a.audioobjecttype << 3) | (a.samplingfrequencyindex >>> 1),
                        (a.samplingfrequencyindex << 7) | (a.channelcount << 3),
                        0x06,
                        0x01,
                        0x02
                    ]));
                };
                y = function a() {
                    return V(bh.ftyp, bi, bj, bi, bk);
                };
                ae = function b(a) {
                    return V(bh.hdlr, bn[a]);
                };
                z = function b(a) {
                    return V(bh.mdat, a);
                };
                ad = function c(a) {
                    var b = new Uint8Array([
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x02,
                        0x00,
                        0x00,
                        0x00,
                        0x03,
                        0x00,
                        0x01,
                        0x5f,
                        0x90,
                        (a.duration >>> 24) & 0xff,
                        (a.duration >>> 16) & 0xff,
                        (a.duration >>> 8) & 0xff,
                        a.duration & 0xff,
                        0x55,
                        0xc4,
                        0x00,
                        0x00, 
                    ]);
                    if (a.samplerate) {
                        b[12] = (a.samplerate >>> 24) & 0xff;
                        b[13] = (a.samplerate >>> 16) & 0xff;
                        b[14] = (a.samplerate >>> 8) & 0xff;
                        b[15] = a.samplerate & 0xff;
                    }
                    return V(bh.mdhd, b);
                };
                ac = function b(a) {
                    return V(bh.mdia, ad(a), ae(a.type), Z(a));
                };
                Y = function b(a) {
                    return V(bh.mfhd, new Uint8Array([
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        (a & 0xff000000) >> 24,
                        (a & 0xff0000) >> 16,
                        (a & 0xff00) >> 8,
                        a & 0xff
                    ]));
                };
                Z = function b(a) {
                    return V(bh.minf, a.type === "video" ? V(bh.vmhd, bo) : V(bh.smhd, bp), W(), ag(a));
                };
                A = function e(d, b) {
                    var c = [], a = b.length;
                    while(a--){
                        c[a] = ah(b[a]);
                    }
                    return V.apply(null, [
                        bh.moof,
                        Y(d)
                    ].concat(c));
                };
                B = function d(a) {
                    var b = a.length, c = [];
                    while(b--){
                        c[b] = aa(a[b]);
                    }
                    return V.apply(null, [
                        bh.moov,
                        _(0xffffffff)
                    ].concat(c).concat($(a)));
                };
                $ = function d(b) {
                    var a = b.length, c = [];
                    while(a--){
                        c[a] = ai(b[a]);
                    }
                    return V.apply(null, [
                        bh.mvex
                    ].concat(c));
                };
                _ = function c(a) {
                    var b = new Uint8Array([
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x01,
                        0x00,
                        0x00,
                        0x00,
                        0x02,
                        0x00,
                        0x01,
                        0x5f,
                        0x90,
                        (a & 0xff000000) >> 24,
                        (a & 0xff0000) >> 16,
                        (a & 0xff00) >> 8,
                        a & 0xff,
                        0x00,
                        0x01,
                        0x00,
                        0x00,
                        0x01,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x01,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x01,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x40,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0xff,
                        0xff,
                        0xff,
                        0xff
                    ]);
                    return V(bh.mvhd, b);
                };
                af = function f(e) {
                    var c = e.samples || [], d = new Uint8Array(4 + c.length), b, a;
                    for(a = 0; a < c.length; a++){
                        b = c[a].flags;
                        d[a + 4] = (b.dependsOn << 4) | (b.isDependedOn << 2) | b.hasRedundancy;
                    }
                    return V(bh.sdtp, d);
                };
                ag = function b(a) {
                    return V(bh.stbl, bf(a), V(bh.stts, bu), V(bh.stsc, bs), V(bh.stsz, bt), V(bh.stco, br));
                };
                (function() {
                    var a, b;
                    bf = function d(c) {
                        return V(bh.stsd, new Uint8Array([
                            0x00,
                            0x00,
                            0x00,
                            0x00,
                            0x00,
                            0x00,
                            0x00,
                            0x01, 
                        ]), c.type === "video" ? a(c) : b(c));
                    };
                    a = function j(a) {
                        var c = a.sps || [], d = a.pps || [], e = [], f = [], b, i;
                        for(b = 0; b < c.length; b++){
                            e.push((c[b].byteLength & 0xff00) >>> 8);
                            e.push(c[b].byteLength & 0xff);
                            e = e.concat(Array.prototype.slice.call(c[b]));
                        }
                        for(b = 0; b < d.length; b++){
                            f.push((d[b].byteLength & 0xff00) >>> 8);
                            f.push(d[b].byteLength & 0xff);
                            f = f.concat(Array.prototype.slice.call(d[b]));
                        }
                        i = [
                            bh.avc1,
                            new Uint8Array([
                                0x00,
                                0x00,
                                0x00,
                                0x00,
                                0x00,
                                0x00,
                                0x00,
                                0x01,
                                0x00,
                                0x00,
                                0x00,
                                0x00,
                                0x00,
                                0x00,
                                0x00,
                                0x00,
                                0x00,
                                0x00,
                                0x00,
                                0x00,
                                0x00,
                                0x00,
                                0x00,
                                0x00,
                                (a.width & 0xff00) >> 8,
                                a.width & 0xff,
                                (a.height & 0xff00) >> 8,
                                a.height & 0xff,
                                0x00,
                                0x48,
                                0x00,
                                0x00,
                                0x00,
                                0x48,
                                0x00,
                                0x00,
                                0x00,
                                0x00,
                                0x00,
                                0x00,
                                0x00,
                                0x01,
                                0x13,
                                0x76,
                                0x69,
                                0x64,
                                0x65,
                                0x6f,
                                0x6a,
                                0x73,
                                0x2d,
                                0x63,
                                0x6f,
                                0x6e,
                                0x74,
                                0x72,
                                0x69,
                                0x62,
                                0x2d,
                                0x68,
                                0x6c,
                                0x73,
                                0x00,
                                0x00,
                                0x00,
                                0x00,
                                0x00,
                                0x00,
                                0x00,
                                0x00,
                                0x00,
                                0x00,
                                0x00,
                                0x00,
                                0x00,
                                0x18,
                                0x11,
                                0x11
                            ]),
                            V(bh.avcC, new Uint8Array([
                                0x01,
                                a.profileIdc,
                                a.profileCompatibility,
                                a.levelIdc,
                                0xff
                            ].concat([
                                c.length
                            ], e, [
                                d.length
                            ], f))),
                            V(bh.btrt, new Uint8Array([
                                0x00,
                                0x1c,
                                0x9c,
                                0x80,
                                0x00,
                                0x2d,
                                0xc6,
                                0xc0,
                                0x00,
                                0x2d,
                                0xc6,
                                0xc0
                            ])), 
                        ];
                        if (a.sarRatio) {
                            var g = a.sarRatio[0], h = a.sarRatio[1];
                            i.push(V(bh.pasp, new Uint8Array([
                                (g & 0xff000000) >> 24,
                                (g & 0xff0000) >> 16,
                                (g & 0xff00) >> 8,
                                g & 0xff,
                                (h & 0xff000000) >> 24,
                                (h & 0xff0000) >> 16,
                                (h & 0xff00) >> 8,
                                h & 0xff, 
                            ])));
                        }
                        return V.apply(null, i);
                    };
                    b = function b(a) {
                        return V(bh.mp4a, new Uint8Array([
                            0x00,
                            0x00,
                            0x00,
                            0x00,
                            0x00,
                            0x00,
                            0x00,
                            0x01,
                            0x00,
                            0x00,
                            0x00,
                            0x00,
                            0x00,
                            0x00,
                            0x00,
                            0x00,
                            (a.channelcount & 0xff00) >> 8,
                            a.channelcount & 0xff,
                            (a.samplesize & 0xff00) >> 8,
                            a.samplesize & 0xff,
                            0x00,
                            0x00,
                            0x00,
                            0x00,
                            (a.samplerate & 0xff00) >> 8,
                            a.samplerate & 0xff,
                            0x00,
                            0x00
                        ]), X(a));
                    };
                })();
                ab = function c(a) {
                    var b = new Uint8Array([
                        0x00,
                        0x00,
                        0x00,
                        0x07,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        (a.id & 0xff000000) >> 24,
                        (a.id & 0xff0000) >> 16,
                        (a.id & 0xff00) >> 8,
                        a.id & 0xff,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        (a.duration & 0xff000000) >> 24,
                        (a.duration & 0xff0000) >> 16,
                        (a.duration & 0xff00) >> 8,
                        a.duration & 0xff,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x01,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x01,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x01,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x40,
                        0x00,
                        0x00,
                        0x00,
                        (a.width & 0xff00) >> 8,
                        a.width & 0xff,
                        0x00,
                        0x00,
                        (a.height & 0xff00) >> 8,
                        a.height & 0xff,
                        0x00,
                        0x00
                    ]);
                    return V(bh.tkhd, b);
                };
                ah = function i(a) {
                    var e, f, d, g, h, b, c;
                    e = V(bh.tfhd, new Uint8Array([
                        0x00,
                        0x00,
                        0x00,
                        0x3a,
                        (a.id & 0xff000000) >> 24,
                        (a.id & 0xff0000) >> 16,
                        (a.id & 0xff00) >> 8,
                        a.id & 0xff,
                        0x00,
                        0x00,
                        0x00,
                        0x01,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00
                    ]));
                    b = Math.floor(a.baseMediaDecodeTime / (be + 1));
                    c = Math.floor(a.baseMediaDecodeTime % (be + 1));
                    f = V(bh.tfdt, new Uint8Array([
                        0x01,
                        0x00,
                        0x00,
                        0x00,
                        (b >>> 24) & 0xff,
                        (b >>> 16) & 0xff,
                        (b >>> 8) & 0xff,
                        b & 0xff,
                        (c >>> 24) & 0xff,
                        (c >>> 16) & 0xff,
                        (c >>> 8) & 0xff,
                        c & 0xff, 
                    ]));
                    h = 32 + 20 + 8 + 16 + 8 + 8;
                    if (a.type === "audio") {
                        d = bg(a, h);
                        return V(bh.traf, e, f, d);
                    }
                    g = af(a);
                    d = bg(a, g.length + h);
                    return V(bh.traf, e, f, d, g);
                };
                aa = function b(a) {
                    a.duration = a.duration || 0xffffffff;
                    return V(bh.trak, ab(a), ac(a));
                };
                ai = function c(a) {
                    var b = new Uint8Array([
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        (a.id & 0xff000000) >> 24,
                        (a.id & 0xff0000) >> 16,
                        (a.id & 0xff00) >> 8,
                        a.id & 0xff,
                        0x00,
                        0x00,
                        0x00,
                        0x01,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x01,
                        0x00,
                        0x01
                    ]);
                    if (a.type !== "video") {
                        b[b.length - 1] = 0x00;
                    }
                    return V(bh.trex, b);
                };
                (function() {
                    var a, b, c;
                    c = function g(a, b) {
                        var c = 0, d = 0, e = 0, f = 0;
                        if (a.length) {
                            if (a[0].duration !== undefined) {
                                c = 0x1;
                            }
                            if (a[0].size !== undefined) {
                                d = 0x2;
                            }
                            if (a[0].flags !== undefined) {
                                e = 0x4;
                            }
                            if (a[0].compositionTimeOffset !== undefined) {
                                f = 0x8;
                            }
                        }
                        return [
                            0x00,
                            0x00,
                            c | d | e | f,
                            0x01,
                            (a.length & 0xff000000) >>> 24,
                            (a.length & 0xff0000) >>> 16,
                            (a.length & 0xff00) >>> 8,
                            a.length & 0xff,
                            (b & 0xff000000) >>> 24,
                            (b & 0xff0000) >>> 16,
                            (b & 0xff00) >>> 8,
                            b & 0xff
                        ];
                    };
                    b = function j(i, h) {
                        var d, b, f, e, a, g;
                        e = i.samples || [];
                        h += 8 + 12 + 16 * e.length;
                        f = c(e, h);
                        b = new Uint8Array(f.length + e.length * 16);
                        b.set(f);
                        d = f.length;
                        for(g = 0; g < e.length; g++){
                            a = e[g];
                            b[d++] = (a.duration & 0xff000000) >>> 24;
                            b[d++] = (a.duration & 0xff0000) >>> 16;
                            b[d++] = (a.duration & 0xff00) >>> 8;
                            b[d++] = a.duration & 0xff;
                            b[d++] = (a.size & 0xff000000) >>> 24;
                            b[d++] = (a.size & 0xff0000) >>> 16;
                            b[d++] = (a.size & 0xff00) >>> 8;
                            b[d++] = a.size & 0xff;
                            b[d++] = (a.flags.isLeading << 2) | a.flags.dependsOn;
                            b[d++] = (a.flags.isDependedOn << 6) | (a.flags.hasRedundancy << 4) | (a.flags.paddingValue << 1) | a.flags.isNonSyncSample;
                            b[d++] = a.flags.degradationPriority & (0xf0 << 8);
                            b[d++] = a.flags.degradationPriority & 0x0f;
                            b[d++] = (a.compositionTimeOffset & 0xff000000) >>> 24;
                            b[d++] = (a.compositionTimeOffset & 0xff0000) >>> 16;
                            b[d++] = (a.compositionTimeOffset & 0xff00) >>> 8;
                            b[d++] = a.compositionTimeOffset & 0xff;
                        }
                        return V(bh.trun, b);
                    };
                    a = function j(i, h) {
                        var a, b, f, e, d, g;
                        e = i.samples || [];
                        h += 8 + 12 + 8 * e.length;
                        f = c(e, h);
                        a = new Uint8Array(f.length + e.length * 8);
                        a.set(f);
                        b = f.length;
                        for(g = 0; g < e.length; g++){
                            d = e[g];
                            a[b++] = (d.duration & 0xff000000) >>> 24;
                            a[b++] = (d.duration & 0xff0000) >>> 16;
                            a[b++] = (d.duration & 0xff00) >>> 8;
                            a[b++] = d.duration & 0xff;
                            a[b++] = (d.size & 0xff000000) >>> 24;
                            a[b++] = (d.size & 0xff0000) >>> 16;
                            a[b++] = (d.size & 0xff00) >>> 8;
                            a[b++] = d.size & 0xff;
                        }
                        return V(bh.trun, a);
                    };
                    bg = function e(c, d) {
                        if (c.type === "audio") {
                            return a(c, d);
                        }
                        return b(c, d);
                    };
                })();
                var bv = {
                    ftyp: y,
                    mdat: z,
                    moof: A,
                    moov: B,
                    initSegment: function e(d) {
                        var b = y(), c = B(d), a;
                        a = new Uint8Array(b.byteLength + c.byteLength);
                        a.set(b);
                        a.set(c, b.byteLength);
                        return a;
                    }
                };
                var aj = function f(e) {
                    var d, c, a = [], b = [];
                    b.byteLength = 0;
                    b.nalCount = 0;
                    b.duration = 0;
                    a.byteLength = 0;
                    for(d = 0; d < e.length; d++){
                        c = e[d];
                        if (c.nalUnitType === "access_unit_delimiter_rbsp") {
                            if (a.length) {
                                a.duration = c.dts - a.dts;
                                b.byteLength += a.byteLength;
                                b.nalCount += a.length;
                                b.duration += a.duration;
                                b.push(a);
                            }
                            a = [
                                c
                            ];
                            a.byteLength = c.data.byteLength;
                            a.pts = c.pts;
                            a.dts = c.dts;
                        } else {
                            if (c.nalUnitType === "slice_layer_without_partitioning_rbsp_idr") {
                                a.keyFrame = true;
                            }
                            a.duration = c.dts - a.dts;
                            a.byteLength += c.data.byteLength;
                            a.push(c);
                        }
                    }
                    if (b.length && (!a.duration || a.duration <= 0)) {
                        a.duration = b[b.length - 1].duration;
                    }
                    b.byteLength += a.byteLength;
                    b.nalCount += a.length;
                    b.duration += a.duration;
                    b.push(a);
                    return b;
                };
                var ak = function f(d) {
                    var e, c, a = [], b = [];
                    a.byteLength = 0;
                    a.nalCount = 0;
                    a.duration = 0;
                    a.pts = d[0].pts;
                    a.dts = d[0].dts;
                    b.byteLength = 0;
                    b.nalCount = 0;
                    b.duration = 0;
                    b.pts = d[0].pts;
                    b.dts = d[0].dts;
                    for(e = 0; e < d.length; e++){
                        c = d[e];
                        if (c.keyFrame) {
                            if (a.length) {
                                b.push(a);
                                b.byteLength += a.byteLength;
                                b.nalCount += a.nalCount;
                                b.duration += a.duration;
                            }
                            a = [
                                c
                            ];
                            a.nalCount = c.length;
                            a.byteLength = c.byteLength;
                            a.pts = c.pts;
                            a.dts = c.dts;
                            a.duration = c.duration;
                        } else {
                            a.duration += c.duration;
                            a.nalCount += c.length;
                            a.byteLength += c.byteLength;
                            a.push(c);
                        }
                    }
                    if (b.length && a.duration <= 0) {
                        a.duration = b[b.length - 1].duration;
                    }
                    b.byteLength += a.byteLength;
                    b.nalCount += a.nalCount;
                    b.duration += a.duration;
                    b.push(a);
                    return b;
                };
                var al = function c(a) {
                    var b;
                    if (!a[0][0].keyFrame && a.length > 1) {
                        b = a.shift();
                        a.byteLength -= b.byteLength;
                        a.nalCount -= b.nalCount;
                        a[0][0].dts = b.dts;
                        a[0][0].pts = b.pts;
                        a[0][0].duration += b.duration;
                    }
                    return a;
                };
                var bw = function a() {
                    return {
                        size: 0,
                        flags: {
                            isLeading: 0,
                            dependsOn: 1,
                            isDependedOn: 0,
                            hasRedundancy: 0,
                            degradationPriority: 0,
                            isNonSyncSample: 1
                        }
                    };
                };
                var bx = function d(b, c) {
                    var a = bw();
                    a.dataOffset = c;
                    a.compositionTimeOffset = b.pts - b.dts;
                    a.duration = b.duration;
                    a.size = 4 * b.length;
                    a.size += b.byteLength;
                    if (b.keyFrame) {
                        a.flags.dependsOn = 2;
                        a.flags.isNonSyncSample = 0;
                    }
                    return a;
                };
                var am = function j(e, i) {
                    var a, b, c, d, f, g = i || 0, h = [];
                    for(a = 0; a < e.length; a++){
                        d = e[a];
                        for(b = 0; b < d.length; b++){
                            f = d[b];
                            c = bx(f, g);
                            g += c.size;
                            h.push(c);
                        }
                    }
                    return h;
                };
                var an = function n(a) {
                    var b, c, d, g, h, e, f = 0, j = a.byteLength, k = a.nalCount, l = j + 4 * k, i = new Uint8Array(l), m = new DataView(i.buffer);
                    for(b = 0; b < a.length; b++){
                        g = a[b];
                        for(c = 0; c < g.length; c++){
                            h = g[c];
                            for(d = 0; d < h.length; d++){
                                e = h[d];
                                m.setUint32(f, e.data.byteLength);
                                f += 4;
                                i.set(e.data, f);
                                f += e.data.byteLength;
                            }
                        }
                    }
                    return i;
                };
                var ao = function f(c, d) {
                    var a, e = d || 0, b = [];
                    a = bx(c, e);
                    b.push(a);
                    return b;
                };
                var ap = function j(a) {
                    var b, c, d = 0, f = a.byteLength, g = a.length, h = f + 4 * g, e = new Uint8Array(h), i = new DataView(e.buffer);
                    for(b = 0; b < a.length; b++){
                        c = a[b];
                        i.setUint32(d, c.data.byteLength);
                        d += 4;
                        e.set(c.data, d);
                        d += c.data.byteLength;
                    }
                    return e;
                };
                var by = {
                    groupNalsIntoFrames: aj,
                    groupFramesIntoGops: ak,
                    extendFirstKeyFrame: al,
                    generateSampleTable: am,
                    concatenateNalData: an,
                    generateSampleTableForFrame: ao,
                    concatenateNalDataForFrame: ap
                };
                var bz = [
                    33,
                    16,
                    5,
                    32,
                    164,
                    27
                ];
                var bA = [
                    33,
                    65,
                    108,
                    84,
                    1,
                    2,
                    4,
                    8,
                    168,
                    2,
                    4,
                    8,
                    17,
                    191,
                    252, 
                ];
                var bB = function c(b) {
                    var a = [];
                    while(b--){
                        a.push(0);
                    }
                    return a;
                };
                var bC = function b(a) {
                    return Object.keys(a).reduce(function(b, c) {
                        b[c] = new Uint8Array(a[c].reduce(function(a, b) {
                            return a.concat(b);
                        }, []));
                        return b;
                    }, {});
                };
                var bD;
                var bE = function b() {
                    if (!bD) {
                        var a = {
                            96000: [
                                bz,
                                [
                                    227,
                                    64
                                ],
                                bB(154),
                                [
                                    56
                                ], 
                            ],
                            88200: [
                                bz,
                                [
                                    231
                                ],
                                bB(170),
                                [
                                    56
                                ]
                            ],
                            64000: [
                                bz,
                                [
                                    248,
                                    192
                                ],
                                bB(240),
                                [
                                    56
                                ], 
                            ],
                            48000: [
                                bz,
                                [
                                    255,
                                    192
                                ],
                                bB(268),
                                [
                                    55,
                                    148,
                                    128
                                ],
                                bB(54),
                                [
                                    112
                                ], 
                            ],
                            44100: [
                                bz,
                                [
                                    255,
                                    192
                                ],
                                bB(268),
                                [
                                    55,
                                    163,
                                    128
                                ],
                                bB(84),
                                [
                                    112
                                ], 
                            ],
                            32000: [
                                bz,
                                [
                                    255,
                                    192
                                ],
                                bB(268),
                                [
                                    55,
                                    234
                                ],
                                bB(226),
                                [
                                    112
                                ], 
                            ],
                            24000: [
                                bz,
                                [
                                    255,
                                    192
                                ],
                                bB(268),
                                [
                                    55,
                                    255,
                                    128
                                ],
                                bB(268),
                                [
                                    111,
                                    112
                                ],
                                bB(126),
                                [
                                    224
                                ], 
                            ],
                            16000: [
                                bz,
                                [
                                    255,
                                    192
                                ],
                                bB(268),
                                [
                                    55,
                                    255,
                                    128
                                ],
                                bB(268),
                                [
                                    111,
                                    255
                                ],
                                bB(269),
                                [
                                    223,
                                    108
                                ],
                                bB(195),
                                [
                                    1,
                                    192
                                ], 
                            ],
                            12000: [
                                bA,
                                bB(268),
                                [
                                    3,
                                    127,
                                    248
                                ],
                                bB(268),
                                [
                                    6,
                                    255,
                                    240
                                ],
                                bB(268),
                                [
                                    13,
                                    255,
                                    224
                                ],
                                bB(268),
                                [
                                    27,
                                    253,
                                    128
                                ],
                                bB(259),
                                [
                                    56
                                ], 
                            ],
                            11025: [
                                bA,
                                bB(268),
                                [
                                    3,
                                    127,
                                    248
                                ],
                                bB(268),
                                [
                                    6,
                                    255,
                                    240
                                ],
                                bB(268),
                                [
                                    13,
                                    255,
                                    224
                                ],
                                bB(268),
                                [
                                    27,
                                    255,
                                    192
                                ],
                                bB(268),
                                [
                                    55,
                                    175,
                                    128
                                ],
                                bB(108),
                                [
                                    112
                                ], 
                            ],
                            8000: [
                                bA,
                                bB(268),
                                [
                                    3,
                                    121,
                                    16
                                ],
                                bB(47),
                                [
                                    7
                                ], 
                            ]
                        };
                        bD = bC(a);
                    }
                    return bD;
                };
                var aq = 90000, C, D, E, F, G, H, I;
                C = function b(a) {
                    return a * aq;
                };
                D = function c(a, b) {
                    return a * b;
                };
                E = function b(a) {
                    return a / aq;
                };
                F = function c(a, b) {
                    return a / b;
                };
                G = function c(a, b) {
                    return C(F(a, b));
                };
                H = function c(a, b) {
                    return D(E(a), b);
                };
                I = function d(a, b, c) {
                    return E(c ? a : a - b);
                };
                var g = {
                    ONE_SECOND_IN_TS: aq,
                    secondsToVideoTs: C,
                    secondsToAudioTs: D,
                    videoTsToSeconds: E,
                    audioTsToSeconds: F,
                    audioTsToVideoTs: G,
                    videoTsToAudioTs: H,
                    metadataTsToSeconds: I
                };
                var bF = function e(b) {
                    var a, c, d = 0;
                    for(a = 0; a < b.length; a++){
                        c = b[a];
                        d += c.data.byteLength;
                    }
                    return d;
                };
                var ar = function n(a, c, j, k) {
                    var l, b = 0, m = 0, d = 0, e = 0, f, h, i;
                    if (!c.length) {
                        return;
                    }
                    l = g.audioTsToVideoTs(a.baseMediaDecodeTime, a.samplerate);
                    b = Math.ceil(g.ONE_SECOND_IN_TS / (a.samplerate / 1024));
                    if (j && k) {
                        m = l - Math.max(j, k);
                        d = Math.floor(m / b);
                        e = d * b;
                    }
                    if (d < 1 || e > g.ONE_SECOND_IN_TS / 2) {
                        return;
                    }
                    f = bE()[a.samplerate];
                    if (!f) {
                        f = c[0].data;
                    }
                    for(h = 0; h < d; h++){
                        i = c[0];
                        c.splice(0, 0, {
                            data: f,
                            dts: i.dts - b,
                            pts: i.pts - b
                        });
                    }
                    a.baseMediaDecodeTime -= Math.floor(g.videoTsToAudioTs(e, a.samplerate));
                    return e;
                };
                var as = function d(a, b, c) {
                    if (b.minSegmentDts >= c) {
                        return a;
                    }
                    b.minSegmentDts = Infinity;
                    return a.filter(function(a) {
                        if (a.dts >= c) {
                            b.minSegmentDts = Math.min(b.minSegmentDts, a.dts);
                            b.minSegmentPts = b.minSegmentDts;
                            return true;
                        }
                        return false;
                    });
                };
                var at = function e(b) {
                    var a, c, d = [];
                    for(a = 0; a < b.length; a++){
                        c = b[a];
                        d.push({
                            size: c.data.byteLength,
                            duration: 1024
                        });
                    }
                    return d;
                };
                var au = function f(b) {
                    var a, c, d = 0, e = new Uint8Array(bF(b));
                    for(a = 0; a < b.length; a++){
                        c = b[a];
                        e.set(c.data, d);
                        d += c.data.byteLength;
                    }
                    return e;
                };
                var bG = {
                    prefixWithSilence: ar,
                    trimAdtsFramesByEarliestDts: as,
                    generateSampleTable: at,
                    concatenateFrameData: au
                };
                var bH = g.ONE_SECOND_IN_TS;
                var av = function c(a, b) {
                    if (typeof b.pts === "number") {
                        if (a.timelineStartInfo.pts === undefined) {
                            a.timelineStartInfo.pts = b.pts;
                        }
                        if (a.minSegmentPts === undefined) {
                            a.minSegmentPts = b.pts;
                        } else {
                            a.minSegmentPts = Math.min(a.minSegmentPts, b.pts);
                        }
                        if (a.maxSegmentPts === undefined) {
                            a.maxSegmentPts = b.pts;
                        } else {
                            a.maxSegmentPts = Math.max(a.maxSegmentPts, b.pts);
                        }
                    }
                    if (typeof b.dts === "number") {
                        if (a.timelineStartInfo.dts === undefined) {
                            a.timelineStartInfo.dts = b.dts;
                        }
                        if (a.minSegmentDts === undefined) {
                            a.minSegmentDts = b.dts;
                        } else {
                            a.minSegmentDts = Math.min(a.minSegmentDts, b.dts);
                        }
                        if (a.maxSegmentDts === undefined) {
                            a.maxSegmentDts = b.dts;
                        } else {
                            a.maxSegmentDts = Math.max(a.maxSegmentDts, b.dts);
                        }
                    }
                };
                var aw = function b(a) {
                    delete a.minSegmentDts;
                    delete a.maxSegmentDts;
                    delete a.minSegmentPts;
                    delete a.maxSegmentPts;
                };
                var ax = function f(b, e) {
                    var a, c, d = b.minSegmentDts;
                    if (!e) {
                        d -= b.timelineStartInfo.dts;
                    }
                    a = b.timelineStartInfo.baseMediaDecodeTime;
                    a += d;
                    a = Math.max(0, a);
                    if (b.type === "audio") {
                        c = b.samplerate / bH;
                        a *= c;
                        a = Math.floor(a);
                    }
                    return a;
                };
                var bI = {
                    clearDtsInfo: aw,
                    calculateTrackBaseMediaDecodeTime: ax,
                    collectDtsInfo: av
                };
                var ay = 4, bJ = 128;
                var az = function g(b) {
                    var a = 0, c = {
                        payloadType: -1,
                        payloadSize: 0
                    }, e = 0, d = 0;
                    while(a < b.byteLength){
                        if (b[a] === bJ) {
                            break;
                        }
                        while(b[a] === 0xff){
                            e += 255;
                            a++;
                        }
                        e += b[a++];
                        while(b[a] === 0xff){
                            d += 255;
                            a++;
                        }
                        d += b[a++];
                        if (!c.payload && e === ay) {
                            var f = String.fromCharCode(b[a + 3], b[a + 4], b[a + 5], b[a + 6]);
                            if (f === "GA94") {
                                c.payloadType = e;
                                c.payloadSize = d;
                                c.payload = b.subarray(a, a + d);
                                break;
                            } else {
                                c.payload = void 0;
                            }
                        }
                        a += d;
                        e = 0;
                        d = 0;
                    }
                    return c;
                };
                var aA = function b(a) {
                    if (a.payload[0] !== 181) {
                        return null;
                    }
                    if (((a.payload[1] << 8) | a.payload[2]) !== 49) {
                        return null;
                    }
                    if (String.fromCharCode(a.payload[3], a.payload[4], a.payload[5], a.payload[6]) !== "GA94") {
                        return null;
                    }
                    if (a.payload[7] !== 0x03) {
                        return null;
                    }
                    return a.payload.subarray(8, a.payload.length - 1);
                };
                var aB = function h(g, a) {
                    var d = [], c, f, b, e;
                    if (!(a[0] & 0x40)) {
                        return d;
                    }
                    f = a[0] & 0x1f;
                    for(c = 0; c < f; c++){
                        b = c * 3;
                        e = {
                            type: a[b + 2] & 0x03,
                            pts: g
                        };
                        if (a[b + 2] & 0x04) {
                            e.ccData = (a[b + 3] << 8) | a[b + 4];
                            d.push(e);
                        }
                    }
                    return d;
                };
                var aC = function h(b) {
                    var g = b.byteLength, c = [], a = 1, e, f;
                    while(a < g - 2){
                        if (b[a] === 0 && b[a + 1] === 0 && b[a + 2] === 0x03) {
                            c.push(a + 2);
                            a += 2;
                        } else {
                            a++;
                        }
                    }
                    if (c.length === 0) {
                        return b;
                    }
                    e = g - c.length;
                    f = new Uint8Array(e);
                    var d = 0;
                    for(a = 0; a < e; d++, a++){
                        if (d === c[0]) {
                            d++;
                            c.shift();
                        }
                        f[a] = b[d];
                    }
                    return f;
                };
                var aD = {
                    parseSei: az,
                    parseUserData: aA,
                    parseCaptionPackets: aB,
                    discardEmulationPreventionBytes: aC,
                    USER_DATA_REGISTERED_ITU_T_T35: ay
                };
                var d = function d(c) {
                    c = c || {};
                    d.prototype.init.call(this);
                    this.parse708captions_ = typeof c.parse708captions === "boolean" ? c.parse708captions : true;
                    this.captionPackets_ = [];
                    this.ccStreams_ = [
                        new b(0, 0),
                        new b(0, 1),
                        new b(1, 0),
                        new b(1, 1)
                    ];
                    if (this.parse708captions_) {
                        this.cc708Stream_ = new a({
                            captionServices: c.captionServices
                        });
                    }
                    this.reset();
                    this.ccStreams_.forEach(function(a) {
                        a.on("data", this.trigger.bind(this, "data"));
                        a.on("partialdone", this.trigger.bind(this, "partialdone"));
                        a.on("done", this.trigger.bind(this, "done"));
                    }, this);
                    if (this.parse708captions_) {
                        this.cc708Stream_.on("data", this.trigger.bind(this, "data"));
                        this.cc708Stream_.on("partialdone", this.trigger.bind(this, "partialdone"));
                        this.cc708Stream_.on("done", this.trigger.bind(this, "done"));
                    }
                };
                d.prototype = new c();
                d.prototype.push = function(a) {
                    var b, c, d;
                    if (a.nalUnitType !== "sei_rbsp") {
                        return;
                    }
                    b = aD.parseSei(a.escapedRBSP);
                    if (!b.payload) {
                        return;
                    }
                    if (b.payloadType !== aD.USER_DATA_REGISTERED_ITU_T_T35) {
                        return;
                    }
                    c = aD.parseUserData(b);
                    if (!c) {
                        return;
                    }
                    if (a.dts < this.latestDts_) {
                        this.ignoreNextEqualDts_ = true;
                        return;
                    } else if (a.dts === this.latestDts_ && this.ignoreNextEqualDts_) {
                        this.numSameDts_--;
                        if (!this.numSameDts_) {
                            this.ignoreNextEqualDts_ = false;
                        }
                        return;
                    }
                    d = aD.parseCaptionPackets(a.pts, c);
                    this.captionPackets_ = this.captionPackets_.concat(d);
                    if (this.latestDts_ !== a.dts) {
                        this.numSameDts_ = 0;
                    }
                    this.numSameDts_++;
                    this.latestDts_ = a.dts;
                };
                d.prototype.flushCCStreams = function(a) {
                    this.ccStreams_.forEach(function(b) {
                        return a === "flush" ? b.flush() : b.partialFlush();
                    }, this);
                };
                d.prototype.flushStream = function(a) {
                    if (!this.captionPackets_.length) {
                        this.flushCCStreams(a);
                        return;
                    }
                    this.captionPackets_.forEach(function(a, b) {
                        a.presortIndex = b;
                    });
                    this.captionPackets_.sort(function(a, b) {
                        if (a.pts === b.pts) {
                            return a.presortIndex - b.presortIndex;
                        }
                        return a.pts - b.pts;
                    });
                    this.captionPackets_.forEach(function(a) {
                        if (a.type < 2) {
                            this.dispatchCea608Packet(a);
                        } else {
                            this.dispatchCea708Packet(a);
                        }
                    }, this);
                    this.captionPackets_.length = 0;
                    this.flushCCStreams(a);
                };
                d.prototype.flush = function() {
                    return this.flushStream("flush");
                };
                d.prototype.partialFlush = function() {
                    return this.flushStream("partialFlush");
                };
                d.prototype.reset = function() {
                    this.latestDts_ = null;
                    this.ignoreNextEqualDts_ = false;
                    this.numSameDts_ = 0;
                    this.activeCea608Channel_ = [
                        null,
                        null
                    ];
                    this.ccStreams_.forEach(function(a) {
                        a.reset();
                    });
                };
                d.prototype.dispatchCea608Packet = function(a) {
                    if (this.setsTextOrXDSActive(a)) {
                        this.activeCea608Channel_[a.type] = null;
                    } else if (this.setsChannel1Active(a)) {
                        this.activeCea608Channel_[a.type] = 0;
                    } else if (this.setsChannel2Active(a)) {
                        this.activeCea608Channel_[a.type] = 1;
                    }
                    if (this.activeCea608Channel_[a.type] === null) {
                        return;
                    }
                    this.ccStreams_[(a.type << 1) + this.activeCea608Channel_[a.type]].push(a);
                };
                d.prototype.setsChannel1Active = function(a) {
                    return (a.ccData & 0x7800) === 0x1000;
                };
                d.prototype.setsChannel2Active = function(a) {
                    return (a.ccData & 0x7800) === 0x1800;
                };
                d.prototype.setsTextOrXDSActive = function(a) {
                    return ((a.ccData & 0x7100) === 0x0100 || (a.ccData & 0x78fe) === 0x102a || (a.ccData & 0x78fe) === 0x182a);
                };
                d.prototype.dispatchCea708Packet = function(a) {
                    if (this.parse708captions_) {
                        this.cc708Stream_.push(a);
                    }
                };
                var bK = {
                    0x7f: 0x266a,
                    0x1020: 0x20,
                    0x1021: 0xa0,
                    0x1025: 0x2026,
                    0x102a: 0x0160,
                    0x102c: 0x0152,
                    0x1030: 0x2588,
                    0x1031: 0x2018,
                    0x1032: 0x2019,
                    0x1033: 0x201c,
                    0x1034: 0x201d,
                    0x1035: 0x2022,
                    0x1039: 0x2122,
                    0x103a: 0x0161,
                    0x103c: 0x0153,
                    0x103d: 0x2120,
                    0x103f: 0x0178,
                    0x1076: 0x215b,
                    0x1077: 0x215c,
                    0x1078: 0x215d,
                    0x1079: 0x215e,
                    0x107a: 0x23d0,
                    0x107b: 0x23a4,
                    0x107c: 0x23a3,
                    0x107d: 0x23af,
                    0x107e: 0x23a6,
                    0x107f: 0x23a1,
                    0x10a0: 0x3138
                };
                var bL = function c(a) {
                    var b = bK[a] || a;
                    if (a & 0x1000 && a === b) {
                        return "";
                    }
                    return String.fromCharCode(b);
                };
                var bM = function b(a) {
                    return ((0x20 <= a && a <= 0x7f) || (0xa0 <= a && a <= 0xff));
                };
                var f = function b(a) {
                    this.windowNum = a;
                    this.reset();
                };
                f.prototype.reset = function() {
                    this.clearText();
                    this.pendingNewLine = false;
                    this.winAttr = {};
                    this.penAttr = {};
                    this.penLoc = {};
                    this.penColor = {};
                    this.visible = 0;
                    this.rowLock = 0;
                    this.columnLock = 0;
                    this.priority = 0;
                    this.relativePositioning = 0;
                    this.anchorVertical = 0;
                    this.anchorHorizontal = 0;
                    this.anchorPoint = 0;
                    this.rowCount = 1;
                    this.virtualRowCount = this.rowCount + 1;
                    this.columnCount = 41;
                    this.windowStyle = 0;
                    this.penStyle = 0;
                };
                f.prototype.getText = function() {
                    return this.rows.join("\n");
                };
                f.prototype.clearText = function() {
                    this.rows = [
                        ""
                    ];
                    this.rowIdx = 0;
                };
                f.prototype.newLine = function(a) {
                    if (this.rows.length >= this.virtualRowCount && typeof this.beforeRowOverflow === "function") {
                        this.beforeRowOverflow(a);
                    }
                    if (this.rows.length > 0) {
                        this.rows.push("");
                        this.rowIdx++;
                    }
                    while(this.rows.length > this.virtualRowCount){
                        this.rows.shift();
                        this.rowIdx--;
                    }
                };
                f.prototype.isEmpty = function() {
                    if (this.rows.length === 0) {
                        return true;
                    } else if (this.rows.length === 1) {
                        return this.rows[0] === "";
                    }
                    return false;
                };
                f.prototype.addText = function(a) {
                    this.rows[this.rowIdx] += a;
                };
                f.prototype.backspace = function() {
                    if (!this.isEmpty()) {
                        var a = this.rows[this.rowIdx];
                        this.rows[this.rowIdx] = a.substr(0, a.length - 1);
                    }
                };
                var l = function d(b, a, c) {
                    this.serviceNum = b;
                    this.text = "";
                    this.currentWindow = new f(-1);
                    this.windows = [];
                    this.stream = c;
                    if (typeof a === "string") {
                        this.createTextDecoder(a);
                    }
                };
                l.prototype.init = function(c, b) {
                    this.startPts = c;
                    for(var a = 0; a < 8; a++){
                        this.windows[a] = new f(a);
                        if (typeof b === "function") {
                            this.windows[a].beforeRowOverflow = b;
                        }
                    }
                };
                l.prototype.setCurrentWindow = function(a) {
                    this.currentWindow = this.windows[a];
                };
                l.prototype.createTextDecoder = function(a) {
                    if (typeof TextDecoder === "undefined") {
                        this.stream.trigger("log", {
                            level: "warn",
                            message: "The `encoding` option is unsupported without TextDecoder support"
                        });
                    } else {
                        try {
                            this.textDecoder_ = new TextDecoder(a);
                        } catch (b) {
                            this.stream.trigger("log", {
                                level: "warn",
                                message: "TextDecoder could not be created with " + a + " encoding. " + b
                            });
                        }
                    }
                };
                var a = function b(a) {
                    a = a || {};
                    b.prototype.init.call(this);
                    var e = this;
                    var c = a.captionServices || {};
                    var d = {};
                    var f;
                    Object.keys(c).forEach(function(a) {
                        f = c[a];
                        if (/^SERVICE/.test(a)) {
                            d[a] = f.encoding;
                        }
                    });
                    this.serviceEncodings = d;
                    this.current708Packet = null;
                    this.services = {};
                    this.push = function(a) {
                        if (a.type === 3) {
                            e.new708Packet();
                            e.add708Bytes(a);
                        } else {
                            if (e.current708Packet === null) {
                                e.new708Packet();
                            }
                            e.add708Bytes(a);
                        }
                    };
                };
                a.prototype = new c();
                a.prototype.new708Packet = function() {
                    if (this.current708Packet !== null) {
                        this.push708Packet();
                    }
                    this.current708Packet = {
                        data: [],
                        ptsVals: []
                    };
                };
                a.prototype.add708Bytes = function(a) {
                    var b = a.ccData;
                    var c = b >>> 8;
                    var d = b & 0xff;
                    this.current708Packet.ptsVals.push(a.pts);
                    this.current708Packet.data.push(c);
                    this.current708Packet.data.push(d);
                };
                a.prototype.push708Packet = function() {
                    var f = this.current708Packet;
                    var d = f.data;
                    var e = null;
                    var c = null;
                    var a = 0;
                    var b = d[a++];
                    f.seq = b >> 6;
                    f.sizeCode = b & 0x3f;
                    for(; a < d.length; a++){
                        b = d[a++];
                        e = b >> 5;
                        c = b & 0x1f;
                        if (e === 7 && c > 0) {
                            b = d[a++];
                            e = b;
                        }
                        this.pushServiceBlock(e, a, c);
                        if (c > 0) {
                            a += c - 1;
                        }
                    }
                };
                a.prototype.pushServiceBlock = function(d, e, g) {
                    var b;
                    var a = e;
                    var f = this.current708Packet.data;
                    var c = this.services[d];
                    if (!c) {
                        c = this.initService(d, a);
                    }
                    for(; a < e + g && a < f.length; a++){
                        b = f[a];
                        if (bM(b)) {
                            a = this.handleText(a, c);
                        } else if (b === 0x18) {
                            a = this.multiByteCharacter(a, c);
                        } else if (b === 0x10) {
                            a = this.extendedCommands(a, c);
                        } else if (0x80 <= b && b <= 0x87) {
                            a = this.setCurrentWindow(a, c);
                        } else if (0x98 <= b && b <= 0x9f) {
                            a = this.defineWindow(a, c);
                        } else if (b === 0x88) {
                            a = this.clearWindows(a, c);
                        } else if (b === 0x8c) {
                            a = this.deleteWindows(a, c);
                        } else if (b === 0x89) {
                            a = this.displayWindows(a, c);
                        } else if (b === 0x8a) {
                            a = this.hideWindows(a, c);
                        } else if (b === 0x8b) {
                            a = this.toggleWindows(a, c);
                        } else if (b === 0x97) {
                            a = this.setWindowAttributes(a, c);
                        } else if (b === 0x90) {
                            a = this.setPenAttributes(a, c);
                        } else if (b === 0x91) {
                            a = this.setPenColor(a, c);
                        } else if (b === 0x92) {
                            a = this.setPenLocation(a, c);
                        } else if (b === 0x8f) {
                            c = this.reset(a, c);
                        } else if (b === 0x08) {
                            c.currentWindow.backspace();
                        } else if (b === 0x0c) {
                            c.currentWindow.clearText();
                        } else if (b === 0x0d) {
                            c.currentWindow.pendingNewLine = true;
                        } else if (b === 0x0e) {
                            c.currentWindow.clearText();
                        } else if (b === 0x8d) {
                            a++;
                        } else ;
                    }
                };
                a.prototype.extendedCommands = function(a, b) {
                    var c = this.current708Packet.data;
                    var d = c[++a];
                    if (bM(d)) {
                        a = this.handleText(a, b, {
                            isExtended: true
                        });
                    }
                    return a;
                };
                a.prototype.getPts = function(a) {
                    return this.current708Packet.ptsVals[Math.floor(a / 2)];
                };
                a.prototype.initService = function(a, d) {
                    var b = "SERVICE" + a;
                    var e = this;
                    var b;
                    var c;
                    if (b in this.serviceEncodings) {
                        c = this.serviceEncodings[b];
                    }
                    this.services[a] = new l(a, c, e);
                    this.services[a].init(this.getPts(d), function(b) {
                        e.flushDisplayed(b, e.services[a]);
                    });
                    return this.services[a];
                };
                a.prototype.handleText = function(a, d, c) {
                    var h = c && c.isExtended;
                    var j = c && c.isMultiByte;
                    var i = this.current708Packet.data;
                    var k = h ? 0x1000 : 0x0000;
                    var e = i[a];
                    var l = i[a + 1];
                    var b = d.currentWindow;
                    var f;
                    var g;
                    if (d.textDecoder_ && !h) {
                        if (j) {
                            g = [
                                e,
                                l
                            ];
                            a++;
                        } else {
                            g = [
                                e
                            ];
                        }
                        f = d.textDecoder_.decode(new Uint8Array(g));
                    } else {
                        f = bL(k | e);
                    }
                    if (b.pendingNewLine && !b.isEmpty()) {
                        b.newLine(this.getPts(a));
                    }
                    b.pendingNewLine = false;
                    b.addText(f);
                    return a;
                };
                a.prototype.multiByteCharacter = function(a, c) {
                    var b = this.current708Packet.data;
                    var d = b[a + 1];
                    var e = b[a + 2];
                    if (bM(d) && bM(e)) {
                        a = this.handleText(++a, c, {
                            isMultiByte: true
                        });
                    }
                    return a;
                };
                a.prototype.setCurrentWindow = function(a, b) {
                    var c = this.current708Packet.data;
                    var d = c[a];
                    var e = d & 0x07;
                    b.setCurrentWindow(e);
                    return a;
                };
                a.prototype.defineWindow = function(c, e) {
                    var d = this.current708Packet.data;
                    var a = d[c];
                    var f = a & 0x07;
                    e.setCurrentWindow(f);
                    var b = e.currentWindow;
                    a = d[++c];
                    b.visible = (a & 0x20) >> 5;
                    b.rowLock = (a & 0x10) >> 4;
                    b.columnLock = (a & 0x08) >> 3;
                    b.priority = a & 0x07;
                    a = d[++c];
                    b.relativePositioning = (a & 0x80) >> 7;
                    b.anchorVertical = a & 0x7f;
                    a = d[++c];
                    b.anchorHorizontal = a;
                    a = d[++c];
                    b.anchorPoint = (a & 0xf0) >> 4;
                    b.rowCount = a & 0x0f;
                    a = d[++c];
                    b.columnCount = a & 0x3f;
                    a = d[++c];
                    b.windowStyle = (a & 0x38) >> 3;
                    b.penStyle = a & 0x07;
                    b.virtualRowCount = b.rowCount + 1;
                    return c;
                };
                a.prototype.setWindowAttributes = function(c, e) {
                    var d = this.current708Packet.data;
                    var a = d[c];
                    var b = e.currentWindow.winAttr;
                    a = d[++c];
                    b.fillOpacity = (a & 0xc0) >> 6;
                    b.fillRed = (a & 0x30) >> 4;
                    b.fillGreen = (a & 0x0c) >> 2;
                    b.fillBlue = a & 0x03;
                    a = d[++c];
                    b.borderType = (a & 0xc0) >> 6;
                    b.borderRed = (a & 0x30) >> 4;
                    b.borderGreen = (a & 0x0c) >> 2;
                    b.borderBlue = a & 0x03;
                    a = d[++c];
                    b.borderType += (a & 0x80) >> 5;
                    b.wordWrap = (a & 0x40) >> 6;
                    b.printDirection = (a & 0x30) >> 4;
                    b.scrollDirection = (a & 0x0c) >> 2;
                    b.justify = a & 0x03;
                    a = d[++c];
                    b.effectSpeed = (a & 0xf0) >> 4;
                    b.effectDirection = (a & 0x0c) >> 2;
                    b.displayEffect = a & 0x03;
                    return c;
                };
                a.prototype.flushDisplayed = function(c, a) {
                    var d = [];
                    for(var b = 0; b < 8; b++){
                        if (a.windows[b].visible && !a.windows[b].isEmpty()) {
                            d.push(a.windows[b].getText());
                        }
                    }
                    a.endPts = c;
                    a.text = d.join("\n\n");
                    this.pushCaption(a);
                    a.startPts = c;
                };
                a.prototype.pushCaption = function(a) {
                    if (a.text !== "") {
                        this.trigger("data", {
                            startPts: a.startPts,
                            endPts: a.endPts,
                            text: a.text,
                            stream: "cc708_" + a.serviceNum
                        });
                        a.text = "";
                        a.startPts = a.endPts;
                    }
                };
                a.prototype.displayWindows = function(b, c) {
                    var d = this.current708Packet.data;
                    var e = d[++b];
                    var f = this.getPts(b);
                    this.flushDisplayed(f, c);
                    for(var a = 0; a < 8; a++){
                        if (e & (0x01 << a)) {
                            c.windows[a].visible = 1;
                        }
                    }
                    return b;
                };
                a.prototype.hideWindows = function(b, c) {
                    var d = this.current708Packet.data;
                    var e = d[++b];
                    var f = this.getPts(b);
                    this.flushDisplayed(f, c);
                    for(var a = 0; a < 8; a++){
                        if (e & (0x01 << a)) {
                            c.windows[a].visible = 0;
                        }
                    }
                    return b;
                };
                a.prototype.toggleWindows = function(b, c) {
                    var d = this.current708Packet.data;
                    var e = d[++b];
                    var f = this.getPts(b);
                    this.flushDisplayed(f, c);
                    for(var a = 0; a < 8; a++){
                        if (e & (0x01 << a)) {
                            c.windows[a].visible ^= 1;
                        }
                    }
                    return b;
                };
                a.prototype.clearWindows = function(b, c) {
                    var d = this.current708Packet.data;
                    var e = d[++b];
                    var f = this.getPts(b);
                    this.flushDisplayed(f, c);
                    for(var a = 0; a < 8; a++){
                        if (e & (0x01 << a)) {
                            c.windows[a].clearText();
                        }
                    }
                    return b;
                };
                a.prototype.deleteWindows = function(b, c) {
                    var d = this.current708Packet.data;
                    var e = d[++b];
                    var f = this.getPts(b);
                    this.flushDisplayed(f, c);
                    for(var a = 0; a < 8; a++){
                        if (e & (0x01 << a)) {
                            c.windows[a].reset();
                        }
                    }
                    return b;
                };
                a.prototype.setPenAttributes = function(c, e) {
                    var d = this.current708Packet.data;
                    var a = d[c];
                    var b = e.currentWindow.penAttr;
                    a = d[++c];
                    b.textTag = (a & 0xf0) >> 4;
                    b.offset = (a & 0x0c) >> 2;
                    b.penSize = a & 0x03;
                    a = d[++c];
                    b.italics = (a & 0x80) >> 7;
                    b.underline = (a & 0x40) >> 6;
                    b.edgeType = (a & 0x38) >> 3;
                    b.fontStyle = a & 0x07;
                    return c;
                };
                a.prototype.setPenColor = function(c, e) {
                    var d = this.current708Packet.data;
                    var a = d[c];
                    var b = e.currentWindow.penColor;
                    a = d[++c];
                    b.fgOpacity = (a & 0xc0) >> 6;
                    b.fgRed = (a & 0x30) >> 4;
                    b.fgGreen = (a & 0x0c) >> 2;
                    b.fgBlue = a & 0x03;
                    a = d[++c];
                    b.bgOpacity = (a & 0xc0) >> 6;
                    b.bgRed = (a & 0x30) >> 4;
                    b.bgGreen = (a & 0x0c) >> 2;
                    b.bgBlue = a & 0x03;
                    a = d[++c];
                    b.edgeRed = (a & 0x30) >> 4;
                    b.edgeGreen = (a & 0x0c) >> 2;
                    b.edgeBlue = a & 0x03;
                    return c;
                };
                a.prototype.setPenLocation = function(a, d) {
                    var c = this.current708Packet.data;
                    var b = c[a];
                    var e = d.currentWindow.penLoc;
                    d.currentWindow.pendingNewLine = true;
                    b = c[++a];
                    e.row = b & 0x0f;
                    b = c[++a];
                    e.column = b & 0x3f;
                    return a;
                };
                a.prototype.reset = function(a, b) {
                    var c = this.getPts(a);
                    this.flushDisplayed(c, b);
                    return this.initService(b.serviceNum, a);
                };
                var bN = {
                    0x2a: 0xe1,
                    0x5c: 0xe9,
                    0x5e: 0xed,
                    0x5f: 0xf3,
                    0x60: 0xfa,
                    0x7b: 0xe7,
                    0x7c: 0xf7,
                    0x7d: 0xd1,
                    0x7e: 0xf1,
                    0x7f: 0x2588,
                    0x0130: 0xae,
                    0x0131: 0xb0,
                    0x0132: 0xbd,
                    0x0133: 0xbf,
                    0x0134: 0x2122,
                    0x0135: 0xa2,
                    0x0136: 0xa3,
                    0x0137: 0x266a,
                    0x0138: 0xe0,
                    0x0139: 0xa0,
                    0x013a: 0xe8,
                    0x013b: 0xe2,
                    0x013c: 0xea,
                    0x013d: 0xee,
                    0x013e: 0xf4,
                    0x013f: 0xfb,
                    0x0220: 0xc1,
                    0x0221: 0xc9,
                    0x0222: 0xd3,
                    0x0223: 0xda,
                    0x0224: 0xdc,
                    0x0225: 0xfc,
                    0x0226: 0x2018,
                    0x0227: 0xa1,
                    0x0228: 0x2a,
                    0x0229: 0x27,
                    0x022a: 0x2014,
                    0x022b: 0xa9,
                    0x022c: 0x2120,
                    0x022d: 0x2022,
                    0x022e: 0x201c,
                    0x022f: 0x201d,
                    0x0230: 0xc0,
                    0x0231: 0xc2,
                    0x0232: 0xc7,
                    0x0233: 0xc8,
                    0x0234: 0xca,
                    0x0235: 0xcb,
                    0x0236: 0xeb,
                    0x0237: 0xce,
                    0x0238: 0xcf,
                    0x0239: 0xef,
                    0x023a: 0xd4,
                    0x023b: 0xd9,
                    0x023c: 0xf9,
                    0x023d: 0xdb,
                    0x023e: 0xab,
                    0x023f: 0xbb,
                    0x0320: 0xc3,
                    0x0321: 0xe3,
                    0x0322: 0xcd,
                    0x0323: 0xcc,
                    0x0324: 0xec,
                    0x0325: 0xd2,
                    0x0326: 0xf2,
                    0x0327: 0xd5,
                    0x0328: 0xf5,
                    0x0329: 0x7b,
                    0x032a: 0x7d,
                    0x032b: 0x5c,
                    0x032c: 0x5e,
                    0x032d: 0x5f,
                    0x032e: 0x7c,
                    0x032f: 0x7e,
                    0x0330: 0xc4,
                    0x0331: 0xe4,
                    0x0332: 0xd6,
                    0x0333: 0xf6,
                    0x0334: 0xdf,
                    0x0335: 0xa5,
                    0x0336: 0xa4,
                    0x0337: 0x2502,
                    0x0338: 0xc5,
                    0x0339: 0xe5,
                    0x033a: 0xd8,
                    0x033b: 0xf8,
                    0x033c: 0x250c,
                    0x033d: 0x2510,
                    0x033e: 0x2514,
                    0x033f: 0x2518
                };
                var bO = function b(a) {
                    if (a === null) {
                        return "";
                    }
                    a = bN[a] || a;
                    return String.fromCharCode(a);
                };
                var bP = 14;
                var bQ = [
                    0x1100,
                    0x1120,
                    0x1200,
                    0x1220,
                    0x1500,
                    0x1520,
                    0x1600,
                    0x1620,
                    0x1700,
                    0x1720,
                    0x1000,
                    0x1300,
                    0x1320,
                    0x1400,
                    0x1420, 
                ];
                var bR = function c() {
                    var a = [], b = bP + 1;
                    while(b--){
                        a.push("");
                    }
                    return a;
                };
                var b = function a(b, c) {
                    a.prototype.init.call(this);
                    this.field_ = b || 0;
                    this.dataChannel_ = c || 0;
                    this.name_ = "CC" + (((this.field_ << 1) | this.dataChannel_) + 1);
                    this.setConstants();
                    this.reset();
                    this.push = function(a) {
                        var b, g, d, c, e;
                        b = a.ccData & 0x7f7f;
                        if (b === this.lastControlCode_) {
                            this.lastControlCode_ = null;
                            return;
                        }
                        if ((b & 0xf000) === 0x1000) {
                            this.lastControlCode_ = b;
                        } else if (b !== this.PADDING_) {
                            this.lastControlCode_ = null;
                        }
                        d = b >>> 8;
                        c = b & 0xff;
                        if (b === this.PADDING_) {
                            return;
                        } else if (b === this.RESUME_CAPTION_LOADING_) {
                            this.mode_ = "popOn";
                        } else if (b === this.END_OF_CAPTION_) {
                            this.mode_ = "popOn";
                            this.clearFormatting(a.pts);
                            this.flushDisplayed(a.pts);
                            g = this.displayed_;
                            this.displayed_ = this.nonDisplayed_;
                            this.nonDisplayed_ = g;
                            this.startPts_ = a.pts;
                        } else if (b === this.ROLL_UP_2_ROWS_) {
                            this.rollUpRows_ = 2;
                            this.setRollUp(a.pts);
                        } else if (b === this.ROLL_UP_3_ROWS_) {
                            this.rollUpRows_ = 3;
                            this.setRollUp(a.pts);
                        } else if (b === this.ROLL_UP_4_ROWS_) {
                            this.rollUpRows_ = 4;
                            this.setRollUp(a.pts);
                        } else if (b === this.CARRIAGE_RETURN_) {
                            this.clearFormatting(a.pts);
                            this.flushDisplayed(a.pts);
                            this.shiftRowsUp_();
                            this.startPts_ = a.pts;
                        } else if (b === this.BACKSPACE_) {
                            if (this.mode_ === "popOn") {
                                this.nonDisplayed_[this.row_] = this.nonDisplayed_[this.row_].slice(0, -1);
                            } else {
                                this.displayed_[this.row_] = this.displayed_[this.row_].slice(0, -1);
                            }
                        } else if (b === this.ERASE_DISPLAYED_MEMORY_) {
                            this.flushDisplayed(a.pts);
                            this.displayed_ = bR();
                        } else if (b === this.ERASE_NON_DISPLAYED_MEMORY_) {
                            this.nonDisplayed_ = bR();
                        } else if (b === this.RESUME_DIRECT_CAPTIONING_) {
                            if (this.mode_ !== "paintOn") {
                                this.flushDisplayed(a.pts);
                                this.displayed_ = bR();
                            }
                            this.mode_ = "paintOn";
                            this.startPts_ = a.pts;
                        } else if (this.isSpecialCharacter(d, c)) {
                            d = (d & 0x03) << 8;
                            e = bO(d | c);
                            this[this.mode_](a.pts, e);
                            this.column_++;
                        } else if (this.isExtCharacter(d, c)) {
                            if (this.mode_ === "popOn") {
                                this.nonDisplayed_[this.row_] = this.nonDisplayed_[this.row_].slice(0, -1);
                            } else {
                                this.displayed_[this.row_] = this.displayed_[this.row_].slice(0, -1);
                            }
                            d = (d & 0x03) << 8;
                            e = bO(d | c);
                            this[this.mode_](a.pts, e);
                            this.column_++;
                        } else if (this.isMidRowCode(d, c)) {
                            this.clearFormatting(a.pts);
                            this[this.mode_](a.pts, " ");
                            this.column_++;
                            if ((c & 0xe) === 0xe) {
                                this.addFormatting(a.pts, [
                                    "i"
                                ]);
                            }
                            if ((c & 0x1) === 0x1) {
                                this.addFormatting(a.pts, [
                                    "u"
                                ]);
                            }
                        } else if (this.isOffsetControlCode(d, c)) {
                            this.column_ += c & 0x03;
                        } else if (this.isPAC(d, c)) {
                            var f = bQ.indexOf(b & 0x1f20);
                            if (this.mode_ === "rollUp") {
                                if (f - this.rollUpRows_ + 1 < 0) {
                                    f = this.rollUpRows_ - 1;
                                }
                                this.setRollUp(a.pts, f);
                            }
                            if (f !== this.row_) {
                                this.clearFormatting(a.pts);
                                this.row_ = f;
                            }
                            if (c & 0x1 && this.formatting_.indexOf("u") === -1) {
                                this.addFormatting(a.pts, [
                                    "u"
                                ]);
                            }
                            if ((b & 0x10) === 0x10) {
                                this.column_ = ((b & 0xe) >> 1) * 4;
                            }
                            if (this.isColorPAC(c)) {
                                if ((c & 0xe) === 0xe) {
                                    this.addFormatting(a.pts, [
                                        "i"
                                    ]);
                                }
                            }
                        } else if (this.isNormalChar(d)) {
                            if (c === 0x00) {
                                c = null;
                            }
                            e = bO(d);
                            e += bO(c);
                            this[this.mode_](a.pts, e);
                            this.column_ += e.length;
                        }
                    };
                };
                b.prototype = new c();
                b.prototype.flushDisplayed = function(b) {
                    var a = this.displayed_.map(function(a, b) {
                        try {
                            return a.trim();
                        } catch (c) {
                            this.trigger("log", {
                                level: "warn",
                                message: "Skipping a malformed 608 caption at index " + b + "."
                            });
                            return "";
                        }
                    }, this).join("\n").replace(/^\n+|\n+$/g, "");
                    if (a.length) {
                        this.trigger("data", {
                            startPts: this.startPts_,
                            endPts: b,
                            text: a,
                            stream: this.name_
                        });
                    }
                };
                b.prototype.reset = function() {
                    this.mode_ = "popOn";
                    this.topRow_ = 0;
                    this.startPts_ = 0;
                    this.displayed_ = bR();
                    this.nonDisplayed_ = bR();
                    this.lastControlCode_ = null;
                    this.column_ = 0;
                    this.row_ = bP;
                    this.rollUpRows_ = 2;
                    this.formatting_ = [];
                };
                b.prototype.setConstants = function() {
                    if (this.dataChannel_ === 0) {
                        this.BASE_ = 0x10;
                        this.EXT_ = 0x11;
                        this.CONTROL_ = (0x14 | this.field_) << 8;
                        this.OFFSET_ = 0x17;
                    } else if (this.dataChannel_ === 1) {
                        this.BASE_ = 0x18;
                        this.EXT_ = 0x19;
                        this.CONTROL_ = (0x1c | this.field_) << 8;
                        this.OFFSET_ = 0x1f;
                    }
                    this.PADDING_ = 0x0000;
                    this.RESUME_CAPTION_LOADING_ = this.CONTROL_ | 0x20;
                    this.END_OF_CAPTION_ = this.CONTROL_ | 0x2f;
                    this.ROLL_UP_2_ROWS_ = this.CONTROL_ | 0x25;
                    this.ROLL_UP_3_ROWS_ = this.CONTROL_ | 0x26;
                    this.ROLL_UP_4_ROWS_ = this.CONTROL_ | 0x27;
                    this.CARRIAGE_RETURN_ = this.CONTROL_ | 0x2d;
                    this.RESUME_DIRECT_CAPTIONING_ = this.CONTROL_ | 0x29;
                    this.BACKSPACE_ = this.CONTROL_ | 0x21;
                    this.ERASE_DISPLAYED_MEMORY_ = this.CONTROL_ | 0x2c;
                    this.ERASE_NON_DISPLAYED_MEMORY_ = this.CONTROL_ | 0x2e;
                };
                b.prototype.isSpecialCharacter = function(b, a) {
                    return (b === this.EXT_ && a >= 0x30 && a <= 0x3f);
                };
                b.prototype.isExtCharacter = function(a, b) {
                    return ((a === this.EXT_ + 1 || a === this.EXT_ + 2) && b >= 0x20 && b <= 0x3f);
                };
                b.prototype.isMidRowCode = function(b, a) {
                    return (b === this.EXT_ && a >= 0x20 && a <= 0x2f);
                };
                b.prototype.isOffsetControlCode = function(b, a) {
                    return (b === this.OFFSET_ && a >= 0x21 && a <= 0x23);
                };
                b.prototype.isPAC = function(a, b) {
                    return (a >= this.BASE_ && a < this.BASE_ + 8 && b >= 0x40 && b <= 0x7f);
                };
                b.prototype.isColorPAC = function(a) {
                    return ((a >= 0x40 && a <= 0x4f) || (a >= 0x60 && a <= 0x7f));
                };
                b.prototype.isNormalChar = function(a) {
                    return a >= 0x20 && a <= 0x7f;
                };
                b.prototype.setRollUp = function(c, a) {
                    if (this.mode_ !== "rollUp") {
                        this.row_ = bP;
                        this.mode_ = "rollUp";
                        this.flushDisplayed(c);
                        this.nonDisplayed_ = bR();
                        this.displayed_ = bR();
                    }
                    if (a !== undefined && a !== this.row_) {
                        for(var b = 0; b < this.rollUpRows_; b++){
                            this.displayed_[a - b] = this.displayed_[this.row_ - b];
                            this.displayed_[this.row_ - b] = "";
                        }
                    }
                    if (a === undefined) {
                        a = this.row_;
                    }
                    this.topRow_ = a - this.rollUpRows_ + 1;
                };
                b.prototype.addFormatting = function(b, a) {
                    this.formatting_ = this.formatting_.concat(a);
                    var c = a.reduce(function(a, b) {
                        return a + "<" + b + ">";
                    }, "");
                    this[this.mode_](b, c);
                };
                b.prototype.clearFormatting = function(a) {
                    if (!this.formatting_.length) {
                        return;
                    }
                    var b = this.formatting_.reverse().reduce(function(a, b) {
                        return a + "</" + b + ">";
                    }, "");
                    this.formatting_ = [];
                    this[this.mode_](a, b);
                };
                b.prototype.popOn = function(c, b) {
                    var a = this.nonDisplayed_[this.row_];
                    a += b;
                    this.nonDisplayed_[this.row_] = a;
                };
                b.prototype.rollUp = function(c, b) {
                    var a = this.displayed_[this.row_];
                    a += b;
                    this.displayed_[this.row_] = a;
                };
                b.prototype.shiftRowsUp_ = function() {
                    var a;
                    for(a = 0; a < this.topRow_; a++){
                        this.displayed_[a] = "";
                    }
                    for(a = this.row_ + 1; a < bP + 1; a++){
                        this.displayed_[a] = "";
                    }
                    for(a = this.topRow_; a < this.row_; a++){
                        this.displayed_[a] = this.displayed_[a + 1];
                    }
                    this.displayed_[this.row_] = "";
                };
                b.prototype.paintOn = function(c, b) {
                    var a = this.displayed_[this.row_];
                    a += b;
                    this.displayed_[this.row_] = a;
                };
                var h = {
                    CaptionStream: d,
                    Cea608Stream: b,
                    Cea708Stream: a
                };
                var m = {
                    H264_STREAM_TYPE: 0x1b,
                    ADTS_STREAM_TYPE: 0x0f,
                    METADATA_STREAM_TYPE: 0x15
                };
                var bS = 8589934592;
                var bT = 4294967296;
                var bU = "shared";
                var aE = function d(a, b) {
                    var c = 1;
                    if (a > b) {
                        c = -1;
                    }
                    while(Math.abs(b - a) > bT){
                        a += c * bS;
                    }
                    return a;
                };
                var J = function a(b) {
                    var c, d;
                    a.prototype.init.call(this);
                    this.type_ = b || bU;
                    this.push = function(a) {
                        if (this.type_ !== bU && a.type !== this.type_) {
                            return;
                        }
                        if (d === undefined) {
                            d = a.dts;
                        }
                        a.dts = aE(a.dts, d);
                        a.pts = aE(a.pts, d);
                        c = a.dts;
                        this.trigger("data", a);
                    };
                    this.flush = function() {
                        d = c;
                        this.trigger("done");
                    };
                    this.endTimeline = function() {
                        this.flush();
                        this.trigger("endedtimeline");
                    };
                    this.discontinuity = function() {
                        d = void 0;
                        c = void 0;
                    };
                    this.reset = function() {
                        this.discontinuity();
                        this.trigger("reset");
                    };
                };
                J.prototype = new c();
                var K = {
                    TimestampRolloverStream: J,
                    handleRollover: aE
                };
                var bV = function f(c, d, e) {
                    var a, b = "";
                    for(a = d; a < e; a++){
                        b += "%" + ("00" + c[a].toString(16)).slice(-2);
                    }
                    return b;
                }, bW = function d(a, b, c) {
                    return decodeURIComponent(bV(a, b, c));
                }, bX = function d(a, b, c) {
                    return unescape(bV(a, b, c));
                }, bY = function b(a) {
                    return ((a[0] << 21) | (a[1] << 14) | (a[2] << 7) | a[3]);
                }, bZ = {
                    TXXX: function c(a) {
                        var b;
                        if (a.data[0] !== 3) {
                            return;
                        }
                        for(b = 1; b < a.data.length; b++){
                            if (a.data[b] === 0) {
                                a.description = bW(a.data, 1, b);
                                a.value = bW(a.data, b + 1, a.data.length).replace(/\0*$/, "");
                                break;
                            }
                        }
                        a.data = a.value;
                    },
                    WXXX: function c(a) {
                        var b;
                        if (a.data[0] !== 3) {
                            return;
                        }
                        for(b = 1; b < a.data.length; b++){
                            if (a.data[b] === 0) {
                                a.description = bW(a.data, 1, b);
                                a.url = bW(a.data, b + 1, a.data.length);
                                break;
                            }
                        }
                    },
                    PRIV: function c(a) {
                        var b;
                        for(b = 0; b < a.data.length; b++){
                            if (a.data[b] === 0) {
                                a.owner = bX(a.data, 0, b);
                                break;
                            }
                        }
                        a.privateData = a.data.subarray(b + 1);
                        a.data = a.privateData;
                    }
                }, n;
                n = function d(c) {
                    var b = {
                        descriptor: c && c.descriptor
                    }, e = 0, f = [], g = 0, a;
                    n.prototype.init.call(this);
                    this.dispatchType = m.METADATA_STREAM_TYPE.toString(16);
                    if (b.descriptor) {
                        for(a = 0; a < b.descriptor.length; a++){
                            this.dispatchType += ("00" + b.descriptor[a].toString(16)).slice(-2);
                        }
                    }
                    this.push = function(d) {
                        var a, b, j, c, i, l;
                        if (d.type !== "timed-metadata") {
                            return;
                        }
                        if (d.dataAlignmentIndicator) {
                            g = 0;
                            f.length = 0;
                        }
                        if (f.length === 0 && (d.data.length < 10 || d.data[0] !== "I".charCodeAt(0) || d.data[1] !== "D".charCodeAt(0) || d.data[2] !== "3".charCodeAt(0))) {
                            this.trigger("log", {
                                level: "warn",
                                message: "Skipping unrecognized metadata packet"
                            });
                            return;
                        }
                        f.push(d);
                        g += d.data.byteLength;
                        if (f.length === 1) {
                            e = bY(d.data.subarray(6, 10));
                            e += 10;
                        }
                        if (g < e) {
                            return;
                        }
                        a = {
                            data: new Uint8Array(e),
                            frames: [],
                            pts: f[0].pts,
                            dts: f[0].dts
                        };
                        for(i = 0; i < e;){
                            a.data.set(f[0].data.subarray(0, e - i), i);
                            i += f[0].data.byteLength;
                            g -= f[0].data.byteLength;
                            f.shift();
                        }
                        b = 10;
                        if (a.data[5] & 0x40) {
                            b += 4;
                            b += bY(a.data.subarray(10, 14));
                            e -= bY(a.data.subarray(16, 20));
                        }
                        do {
                            j = bY(a.data.subarray(b + 4, b + 8));
                            if (j < 1) {
                                this.trigger("log", {
                                    level: "warn",
                                    message: "Malformed ID3 frame encountered. Skipping metadata parsing."
                                });
                                return;
                            }
                            l = String.fromCharCode(a.data[b], a.data[b + 1], a.data[b + 2], a.data[b + 3]);
                            c = {
                                id: l,
                                data: a.data.subarray(b + 10, b + j + 10)
                            };
                            c.key = c.id;
                            if (bZ[c.id]) {
                                bZ[c.id](c);
                                if (c.owner === "com.apple.streaming.transportStreamTimestamp") {
                                    var h = c.data, k = ((h[3] & 0x01) << 30) | (h[4] << 22) | (h[5] << 14) | (h[6] << 6) | (h[7] >>> 2);
                                    k *= 4;
                                    k += h[7] & 0x03;
                                    c.timeStamp = k;
                                    if (a.pts === undefined && a.dts === undefined) {
                                        a.pts = c.timeStamp;
                                        a.dts = c.timeStamp;
                                    }
                                    this.trigger("timestamp", c);
                                }
                            }
                            a.frames.push(c);
                            b += 10;
                            b += j;
                        }while (b < e)
                        this.trigger("data", a);
                    };
                };
                n.prototype = new c();
                var aF = n;
                var aG = K.TimestampRolloverStream;
                var o, i, p;
                var aH = 188, b$ = 0x47;
                o = function a() {
                    var b = new Uint8Array(aH), c = 0;
                    o.prototype.init.call(this);
                    this.push = function(f) {
                        var d = 0, e = aH, a;
                        if (c) {
                            a = new Uint8Array(f.byteLength + c);
                            a.set(b.subarray(0, c));
                            a.set(f, c);
                            c = 0;
                        } else {
                            a = f;
                        }
                        while(e < a.byteLength){
                            if (a[d] === b$ && a[e] === b$) {
                                this.trigger("data", a.subarray(d, e));
                                d += aH;
                                e += aH;
                                continue;
                            }
                            d++;
                            e++;
                        }
                        if (d < a.byteLength) {
                            b.set(a.subarray(d), 0);
                            c = a.byteLength - d;
                        }
                    };
                    this.flush = function() {
                        if (c === aH && b[0] === b$) {
                            this.trigger("data", b);
                            c = 0;
                        }
                        this.trigger("done");
                    };
                    this.endTimeline = function() {
                        this.flush();
                        this.trigger("endedtimeline");
                    };
                    this.reset = function() {
                        c = 0;
                        this.trigger("reset");
                    };
                };
                o.prototype = new c();
                i = function e() {
                    var a, b, c, d;
                    i.prototype.init.call(this);
                    d = this;
                    this.packetsWaitingForPmt = [];
                    this.programMapTable = undefined;
                    a = function f(e, a) {
                        var d = 0;
                        if (a.payloadUnitStartIndicator) {
                            d += e[d] + 1;
                        }
                        if (a.type === "pat") {
                            b(e.subarray(d), a);
                        } else {
                            c(e.subarray(d), a);
                        }
                    };
                    b = function c(a, b) {
                        b.section_number = a[7];
                        b.last_section_number = a[8];
                        d.pmtPid = ((a[10] & 0x1f) << 8) | a[11];
                        b.pmtPid = d.pmtPid;
                    };
                    c = function j(a, i) {
                        var f, g, h, b;
                        if (!(a[5] & 0x01)) {
                            return;
                        }
                        d.programMapTable = {
                            video: null,
                            audio: null,
                            "timed-metadata": {}
                        };
                        f = ((a[1] & 0x0f) << 8) | a[2];
                        g = 3 + f - 4;
                        h = ((a[10] & 0x0f) << 8) | a[11];
                        b = 12 + h;
                        while(b < g){
                            var c = a[b];
                            var e = ((a[b + 1] & 0x1f) << 8) | a[b + 2];
                            if (c === m.H264_STREAM_TYPE && d.programMapTable.video === null) {
                                d.programMapTable.video = e;
                            } else if (c === m.ADTS_STREAM_TYPE && d.programMapTable.audio === null) {
                                d.programMapTable.audio = e;
                            } else if (c === m.METADATA_STREAM_TYPE) {
                                d.programMapTable["timed-metadata"][e] = c;
                            }
                            b += (((a[b + 3] & 0x0f) << 8) | a[b + 4]) + 5;
                        }
                        i.programMapTable = d.programMapTable;
                    };
                    this.push = function(c) {
                        var b = {}, d = 4;
                        b.payloadUnitStartIndicator = !!(c[1] & 0x40);
                        b.pid = c[1] & 0x1f;
                        b.pid <<= 8;
                        b.pid |= c[2];
                        if ((c[3] & 0x30) >>> 4 > 0x01) {
                            d += c[d] + 1;
                        }
                        if (b.pid === 0) {
                            b.type = "pat";
                            a(c.subarray(d), b);
                            this.trigger("data", b);
                        } else if (b.pid === this.pmtPid) {
                            b.type = "pmt";
                            a(c.subarray(d), b);
                            this.trigger("data", b);
                            while(this.packetsWaitingForPmt.length){
                                this.processPes_.apply(this, this.packetsWaitingForPmt.shift());
                            }
                        } else if (this.programMapTable === undefined) {
                            this.packetsWaitingForPmt.push([
                                c,
                                d,
                                b, 
                            ]);
                        } else {
                            this.processPes_(c, d, b);
                        }
                    };
                    this.processPes_ = function(b, c, a) {
                        if (a.pid === this.programMapTable.video) {
                            a.streamType = m.H264_STREAM_TYPE;
                        } else if (a.pid === this.programMapTable.audio) {
                            a.streamType = m.ADTS_STREAM_TYPE;
                        } else {
                            a.streamType = this.programMapTable["timed-metadata"][a.pid];
                        }
                        a.type = "pes";
                        a.data = b.subarray(c);
                        this.trigger("data", a);
                    };
                };
                i.prototype = new c();
                i.STREAM_TYPES = {
                    h264: 0x1b,
                    adts: 0x0f
                };
                p = function a() {
                    var b = this, c = false, d = {
                        data: [],
                        size: 0
                    }, e = {
                        data: [],
                        size: 0
                    }, f = {
                        data: [],
                        size: 0
                    }, g, h = function e(a, b) {
                        var c;
                        var d = (a[0] << 16) | (a[1] << 8) | a[2];
                        b.data = new Uint8Array();
                        if (d !== 1) {
                            return;
                        }
                        b.packetLength = 6 + ((a[4] << 8) | a[5]);
                        b.dataAlignmentIndicator = (a[6] & 0x04) !== 0;
                        c = a[7];
                        if (c & 0xc0) {
                            b.pts = ((a[9] & 0x0e) << 27) | ((a[10] & 0xff) << 20) | ((a[11] & 0xfe) << 12) | ((a[12] & 0xff) << 5) | ((a[13] & 0xfe) >>> 3);
                            b.pts *= 4;
                            b.pts += (a[13] & 0x06) >>> 1;
                            b.dts = b.pts;
                            if (c & 0x40) {
                                b.dts = ((a[14] & 0x0e) << 27) | ((a[15] & 0xff) << 20) | ((a[16] & 0xfe) << 12) | ((a[17] & 0xff) << 5) | ((a[18] & 0xfe) >>> 3);
                                b.dts *= 4;
                                b.dts += (a[18] & 0x06) >>> 1;
                            }
                        }
                        b.data = a.subarray(9 + a[8]);
                    }, i = function l(a, g, k) {
                        var i = new Uint8Array(a.size), c = {
                            type: g
                        }, d = 0, j = 0, e = false, f;
                        if (!a.data.length || a.size < 9) {
                            return;
                        }
                        c.trackId = a.data[0].pid;
                        for(d = 0; d < a.data.length; d++){
                            f = a.data[d];
                            i.set(f.data, j);
                            j += f.data.byteLength;
                        }
                        h(i, c);
                        e = g === "video" || c.packetLength <= a.size;
                        if (k || e) {
                            a.size = 0;
                            a.data.length = 0;
                        }
                        if (e) {
                            b.trigger("data", c);
                        }
                    };
                    p.prototype.init.call(this);
                    this.push = function(a) {
                        ({
                            pat: function a() {},
                            pes: function g() {
                                var b, c;
                                switch(a.streamType){
                                    case m.H264_STREAM_TYPE:
                                        b = d;
                                        c = "video";
                                        break;
                                    case m.ADTS_STREAM_TYPE:
                                        b = e;
                                        c = "audio";
                                        break;
                                    case m.METADATA_STREAM_TYPE:
                                        b = f;
                                        c = "timed-metadata";
                                        break;
                                    default:
                                        return;
                                }
                                if (a.payloadUnitStartIndicator) {
                                    i(b, c, true);
                                }
                                b.data.push(a);
                                b.size += a.data.byteLength;
                            },
                            pmt: function e() {
                                var d = {
                                    type: "metadata",
                                    tracks: []
                                };
                                g = a.programMapTable;
                                if (g.video !== null) {
                                    d.tracks.push({
                                        timelineStartInfo: {
                                            baseMediaDecodeTime: 0
                                        },
                                        id: +g.video,
                                        codec: "avc",
                                        type: "video"
                                    });
                                }
                                if (g.audio !== null) {
                                    d.tracks.push({
                                        timelineStartInfo: {
                                            baseMediaDecodeTime: 0
                                        },
                                        id: +g.audio,
                                        codec: "adts",
                                        type: "audio"
                                    });
                                }
                                c = true;
                                b.trigger("data", d);
                            }
                        }[a.type]());
                    };
                    this.reset = function() {
                        d.size = 0;
                        d.data.length = 0;
                        e.size = 0;
                        e.data.length = 0;
                        this.trigger("reset");
                    };
                    this.flushStreams_ = function() {
                        i(d, "video");
                        i(e, "audio");
                        i(f, "timed-metadata");
                    };
                    this.flush = function() {
                        if (!c && g) {
                            var a = {
                                type: "metadata",
                                tracks: []
                            };
                            if (g.video !== null) {
                                a.tracks.push({
                                    timelineStartInfo: {
                                        baseMediaDecodeTime: 0
                                    },
                                    id: +g.video,
                                    codec: "avc",
                                    type: "video"
                                });
                            }
                            if (g.audio !== null) {
                                a.tracks.push({
                                    timelineStartInfo: {
                                        baseMediaDecodeTime: 0
                                    },
                                    id: +g.audio,
                                    codec: "adts",
                                    type: "audio"
                                });
                            }
                            b.trigger("data", a);
                        }
                        c = false;
                        this.flushStreams_();
                        this.trigger("done");
                    };
                };
                p.prototype = new c();
                var L = {
                    PAT_PID: 0x0000,
                    MP2T_PACKET_LENGTH: aH,
                    TransportPacketStream: o,
                    TransportParseStream: i,
                    ElementaryStream: p,
                    TimestampRolloverStream: aG,
                    CaptionStream: h.CaptionStream,
                    Cea608Stream: h.Cea608Stream,
                    Cea708Stream: h.Cea708Stream,
                    MetadataStream: aF
                };
                for(var q in m){
                    if (m.hasOwnProperty(q)) {
                        L[q] = m[q];
                    }
                }
                var b_ = L;
                var b0 = g.ONE_SECOND_IN_TS;
                var r;
                var b1 = [
                    96000,
                    88200,
                    64000,
                    48000,
                    44100,
                    32000,
                    24000,
                    22050,
                    16000,
                    12000,
                    11025,
                    8000,
                    7350, 
                ];
                r = function a(b) {
                    var c, d = 0;
                    r.prototype.init.call(this);
                    this.skipWarn_ = function(a, b) {
                        this.trigger("log", {
                            level: "warn",
                            message: "adts skiping bytes " + a + " to " + b + " in frame " + d + " outside syncword"
                        });
                    };
                    this.push = function(f) {
                        var a = 0, g, k, h, i, j;
                        if (!b) {
                            d = 0;
                        }
                        if (f.type !== "audio") {
                            return;
                        }
                        if (c && c.length) {
                            h = c;
                            c = new Uint8Array(h.byteLength + f.data.byteLength);
                            c.set(h);
                            c.set(f.data, h.byteLength);
                        } else {
                            c = f.data;
                        }
                        var e;
                        while(a + 7 < c.length){
                            if (c[a] !== 0xff || (c[a + 1] & 0xf6) !== 0xf0) {
                                if (typeof e !== "number") {
                                    e = a;
                                }
                                a++;
                                continue;
                            }
                            if (typeof e === "number") {
                                this.skipWarn_(e, a);
                                e = null;
                            }
                            k = (~c[a + 1] & 0x01) * 2;
                            g = ((c[a + 3] & 0x03) << 11) | (c[a + 4] << 3) | ((c[a + 5] & 0xe0) >> 5);
                            i = ((c[a + 6] & 0x03) + 1) * 1024;
                            j = (i * b0) / b1[(c[a + 2] & 0x3c) >>> 2];
                            if (c.byteLength - a < g) {
                                break;
                            }
                            this.trigger("data", {
                                pts: f.pts + d * j,
                                dts: f.dts + d * j,
                                sampleCount: i,
                                audioobjecttype: ((c[a + 2] >>> 6) & 0x03) + 1,
                                channelcount: ((c[a + 2] & 1) << 2) | ((c[a + 3] & 0xc0) >>> 6),
                                samplerate: b1[(c[a + 2] & 0x3c) >>> 2],
                                samplingfrequencyindex: (c[a + 2] & 0x3c) >>> 2,
                                samplesize: 16,
                                data: c.subarray(a + 7 + k, a + g)
                            });
                            d++;
                            a += g;
                        }
                        if (typeof e === "number") {
                            this.skipWarn_(e, a);
                            e = null;
                        }
                        c = c.subarray(a);
                    };
                    this.flush = function() {
                        d = 0;
                        this.trigger("done");
                    };
                    this.reset = function() {
                        c = void 0;
                        this.trigger("reset");
                    };
                    this.endTimeline = function() {
                        c = void 0;
                        this.trigger("endedtimeline");
                    };
                };
                r.prototype = new c();
                var b2 = r;
                var M;
                M = function b(a) {
                    var c = a.byteLength, d = 0, e = 0;
                    this.length = function() {
                        return 8 * c;
                    };
                    this.bitsAvailable = function() {
                        return (8 * c + e);
                    };
                    this.loadWord = function() {
                        var f = a.byteLength - c, g = new Uint8Array(4), b = Math.min(4, c);
                        if (b === 0) {
                            throw new Error("no bytes available");
                        }
                        g.set(a.subarray(f, f + b));
                        d = new DataView(g.buffer).getUint32(0);
                        e = b * 8;
                        c -= b;
                    };
                    this.skipBits = function(a) {
                        var b;
                        if (e > a) {
                            d <<= a;
                            e -= a;
                        } else {
                            a -= e;
                            b = Math.floor(a / 8);
                            a -= b * 8;
                            c -= b;
                            this.loadWord();
                            d <<= a;
                            e -= a;
                        }
                    };
                    this.readBits = function(b) {
                        var a = Math.min(e, b), f = d >>> (32 - a);
                        e -= a;
                        if (e > 0) {
                            d <<= a;
                        } else if (c > 0) {
                            this.loadWord();
                        }
                        a = b - a;
                        if (a > 0) {
                            return (f << a) | this.readBits(a);
                        }
                        return f;
                    };
                    this.skipLeadingZeros = function() {
                        var a;
                        for(a = 0; a < e; ++a){
                            if ((d & (0x80000000 >>> a)) !== 0) {
                                d <<= a;
                                e -= a;
                                return a;
                            }
                        }
                        this.loadWord();
                        return a + this.skipLeadingZeros();
                    };
                    this.skipUnsignedExpGolomb = function() {
                        this.skipBits(1 + this.skipLeadingZeros());
                    };
                    this.skipExpGolomb = function() {
                        this.skipBits(1 + this.skipLeadingZeros());
                    };
                    this.readUnsignedExpGolomb = function() {
                        var a = this.skipLeadingZeros();
                        return this.readBits(a + 1) - 1;
                    };
                    this.readExpGolomb = function() {
                        var a = this.readUnsignedExpGolomb();
                        if (0x01 & a) {
                            return (1 + a) >>> 1;
                        }
                        return -1 * (a >>> 1);
                    };
                    this.readBoolean = function() {
                        return this.readBits(1) === 1;
                    };
                    this.readUnsignedByte = function() {
                        return this.readBits(8);
                    };
                    this.loadWord();
                };
                var b3 = M;
                var s, t;
                var aI;
                t = function a() {
                    var b = 0, c, d;
                    t.prototype.init.call(this);
                    this.push = function(e) {
                        var a;
                        if (!d) {
                            d = e.data;
                        } else {
                            a = new Uint8Array(d.byteLength + e.data.byteLength);
                            a.set(d);
                            a.set(e.data, d.byteLength);
                            d = a;
                        }
                        var f = d.byteLength;
                        for(; b < f - 3; b++){
                            if (d[b + 2] === 1) {
                                c = b + 5;
                                break;
                            }
                        }
                        while(c < f){
                            switch(d[c]){
                                case 0:
                                    if (d[c - 1] !== 0) {
                                        c += 2;
                                        break;
                                    } else if (d[c - 2] !== 0) {
                                        c++;
                                        break;
                                    }
                                    if (b + 3 !== c - 2) {
                                        this.trigger("data", d.subarray(b + 3, c - 2));
                                    }
                                    do {
                                        c++;
                                    }while (d[c] !== 1 && c < f)
                                    b = c - 2;
                                    c += 3;
                                    break;
                                case 1:
                                    if (d[c - 1] !== 0 || d[c - 2] !== 0) {
                                        c += 3;
                                        break;
                                    }
                                    this.trigger("data", d.subarray(b + 3, c - 2));
                                    b = c - 2;
                                    c += 3;
                                    break;
                                default:
                                    c += 3;
                                    break;
                            }
                        }
                        d = d.subarray(b);
                        c -= b;
                        b = 0;
                    };
                    this.reset = function() {
                        d = null;
                        b = 0;
                        this.trigger("reset");
                    };
                    this.flush = function() {
                        if (d && d.byteLength > 3) {
                            this.trigger("data", d.subarray(b + 3));
                        }
                        d = null;
                        b = 0;
                        this.trigger("done");
                    };
                    this.endTimeline = function() {
                        this.flush();
                        this.trigger("endedtimeline");
                    };
                };
                t.prototype = new c();
                aI = {
                    100: true,
                    110: true,
                    122: true,
                    244: true,
                    44: true,
                    83: true,
                    86: true,
                    118: true,
                    128: true,
                    138: true,
                    139: true,
                    134: true
                };
                s = function f() {
                    var a = new t(), b, g, h, i, c, d, e;
                    s.prototype.init.call(this);
                    b = this;
                    this.push = function(b) {
                        if (b.type !== "video") {
                            return;
                        }
                        g = b.trackId;
                        h = b.pts;
                        i = b.dts;
                        a.push(b);
                    };
                    a.on("data", function(e) {
                        var a = {
                            trackId: g,
                            pts: h,
                            dts: i,
                            data: e,
                            nalUnitTypeCode: e[0] & 0x1f
                        };
                        switch(a.nalUnitTypeCode){
                            case 0x05:
                                a.nalUnitType = "slice_layer_without_partitioning_rbsp_idr";
                                break;
                            case 0x06:
                                a.nalUnitType = "sei_rbsp";
                                a.escapedRBSP = c(e.subarray(1));
                                break;
                            case 0x07:
                                a.nalUnitType = "seq_parameter_set_rbsp";
                                a.escapedRBSP = c(e.subarray(1));
                                a.config = d(a.escapedRBSP);
                                break;
                            case 0x08:
                                a.nalUnitType = "pic_parameter_set_rbsp";
                                break;
                            case 0x09:
                                a.nalUnitType = "access_unit_delimiter_rbsp";
                                break;
                        }
                        b.trigger("data", a);
                    });
                    a.on("done", function() {
                        b.trigger("done");
                    });
                    a.on("partialdone", function() {
                        b.trigger("partialdone");
                    });
                    a.on("reset", function() {
                        b.trigger("reset");
                    });
                    a.on("endedtimeline", function() {
                        b.trigger("endedtimeline");
                    });
                    this.flush = function() {
                        a.flush();
                    };
                    this.partialFlush = function() {
                        a.partialFlush();
                    };
                    this.reset = function() {
                        a.reset();
                    };
                    this.endTimeline = function() {
                        a.endTimeline();
                    };
                    e = function g(e, f) {
                        var b = 8, a = 8, c, d;
                        for(c = 0; c < e; c++){
                            if (a !== 0) {
                                d = f.readExpGolomb();
                                a = (b + d + 256) % 256;
                            }
                            b = a === 0 ? b : a;
                        }
                    };
                    c = function h(b) {
                        var g = b.byteLength, c = [], a = 1, e, f;
                        while(a < g - 2){
                            if (b[a] === 0 && b[a + 1] === 0 && b[a + 2] === 0x03) {
                                c.push(a + 2);
                                a += 2;
                            } else {
                                a++;
                            }
                        }
                        if (c.length === 0) {
                            return b;
                        }
                        e = g - c.length;
                        f = new Uint8Array(e);
                        var d = 0;
                        for(a = 0; a < e; d++, a++){
                            if (d === c[0]) {
                                d++;
                                c.shift();
                            }
                            f[a] = b[d];
                        }
                        return f;
                    };
                    d = function u(t) {
                        var i = 0, j = 0, k = 0, l = 0, a, d, m, n, f, g, o, p, q, h, r, b = [
                            1,
                            1
                        ], s, c;
                        a = new b3(t);
                        d = a.readUnsignedByte();
                        n = a.readUnsignedByte();
                        m = a.readUnsignedByte();
                        a.skipUnsignedExpGolomb();
                        if (aI[d]) {
                            f = a.readUnsignedExpGolomb();
                            if (f === 3) {
                                a.skipBits(1);
                            }
                            a.skipUnsignedExpGolomb();
                            a.skipUnsignedExpGolomb();
                            a.skipBits(1);
                            if (a.readBoolean()) {
                                r = f !== 3 ? 8 : 12;
                                for(c = 0; c < r; c++){
                                    if (a.readBoolean()) {
                                        if (c < 6) {
                                            e(16, a);
                                        } else {
                                            e(64, a);
                                        }
                                    }
                                }
                            }
                        }
                        a.skipUnsignedExpGolomb();
                        g = a.readUnsignedExpGolomb();
                        if (g === 0) {
                            a.readUnsignedExpGolomb();
                        } else if (g === 1) {
                            a.skipBits(1);
                            a.skipExpGolomb();
                            a.skipExpGolomb();
                            o = a.readUnsignedExpGolomb();
                            for(c = 0; c < o; c++){
                                a.skipExpGolomb();
                            }
                        }
                        a.skipUnsignedExpGolomb();
                        a.skipBits(1);
                        p = a.readUnsignedExpGolomb();
                        q = a.readUnsignedExpGolomb();
                        h = a.readBits(1);
                        if (h === 0) {
                            a.skipBits(1);
                        }
                        a.skipBits(1);
                        if (a.readBoolean()) {
                            i = a.readUnsignedExpGolomb();
                            j = a.readUnsignedExpGolomb();
                            k = a.readUnsignedExpGolomb();
                            l = a.readUnsignedExpGolomb();
                        }
                        if (a.readBoolean()) {
                            if (a.readBoolean()) {
                                s = a.readUnsignedByte();
                                switch(s){
                                    case 1:
                                        b = [
                                            1,
                                            1
                                        ];
                                        break;
                                    case 2:
                                        b = [
                                            12,
                                            11
                                        ];
                                        break;
                                    case 3:
                                        b = [
                                            10,
                                            11
                                        ];
                                        break;
                                    case 4:
                                        b = [
                                            16,
                                            11
                                        ];
                                        break;
                                    case 5:
                                        b = [
                                            40,
                                            33
                                        ];
                                        break;
                                    case 6:
                                        b = [
                                            24,
                                            11
                                        ];
                                        break;
                                    case 7:
                                        b = [
                                            20,
                                            11
                                        ];
                                        break;
                                    case 8:
                                        b = [
                                            32,
                                            11
                                        ];
                                        break;
                                    case 9:
                                        b = [
                                            80,
                                            33
                                        ];
                                        break;
                                    case 10:
                                        b = [
                                            18,
                                            11
                                        ];
                                        break;
                                    case 11:
                                        b = [
                                            15,
                                            11
                                        ];
                                        break;
                                    case 12:
                                        b = [
                                            64,
                                            33
                                        ];
                                        break;
                                    case 13:
                                        b = [
                                            160,
                                            99
                                        ];
                                        break;
                                    case 14:
                                        b = [
                                            4,
                                            3
                                        ];
                                        break;
                                    case 15:
                                        b = [
                                            3,
                                            2
                                        ];
                                        break;
                                    case 16:
                                        b = [
                                            2,
                                            1
                                        ];
                                        break;
                                    case 255:
                                        {
                                            b = [
                                                (a.readUnsignedByte() << 8) | a.readUnsignedByte(),
                                                (a.readUnsignedByte() << 8) | a.readUnsignedByte(), 
                                            ];
                                            break;
                                        }
                                }
                                if (b) {
                                    b[0] / b[1];
                                }
                            }
                        }
                        return {
                            profileIdc: d,
                            levelIdc: m,
                            profileCompatibility: n,
                            width: (p + 1) * 16 - i * 2 - j * 2,
                            height: (2 - h) * (q + 1) * 16 - k * 2 - l * 2,
                            sarRatio: b
                        };
                    };
                };
                s.prototype = new c();
                var aJ = {
                    H264Stream: s,
                    NalByteStream: t
                };
                var b4 = [
                    96000,
                    88200,
                    64000,
                    48000,
                    44100,
                    32000,
                    24000,
                    22050,
                    16000,
                    12000,
                    11025,
                    8000,
                    7350, 
                ];
                var aK = function f(a, b) {
                    var c = (a[b + 6] << 21) | (a[b + 7] << 14) | (a[b + 8] << 7) | a[b + 9], d = a[b + 5], e = (d & 16) >> 4;
                    c = c >= 0 ? c : 0;
                    if (e) {
                        return c + 20;
                    }
                    return c + 10;
                };
                var b5 = function c(b, a) {
                    if (b.length - a < 10 || b[a] !== "I".charCodeAt(0) || b[a + 1] !== "D".charCodeAt(0) || b[a + 2] !== "3".charCodeAt(0)) {
                        return a;
                    }
                    a += aK(b, a);
                    return c(b, a);
                };
                var aL = function c(a) {
                    var b = b5(a, 0);
                    return (a.length >= b + 2 && (a[b] & 0xff) === 0xff && (a[b + 1] & 0xf0) === 0xf0 && (a[b + 1] & 0x16) === 0x10);
                };
                var b6 = function b(a) {
                    return ((a[0] << 21) | (a[1] << 14) | (a[2] << 7) | a[3]);
                };
                var b7 = function f(c, d, e) {
                    var a, b = "";
                    for(a = d; a < e; a++){
                        b += "%" + ("00" + c[a].toString(16)).slice(-2);
                    }
                    return b;
                };
                var b8 = function d(a, b, c) {
                    return unescape(b7(a, b, c));
                };
                var aM = function f(a, b) {
                    var c = (a[b + 5] & 0xe0) >> 5, d = a[b + 4] << 3, e = a[b + 3] & (0x3 << 11);
                    return e | d | c;
                };
                var aN = function c(a, b) {
                    if (a[b] === "I".charCodeAt(0) && a[b + 1] === "D".charCodeAt(0) && a[b + 2] === "3".charCodeAt(0)) {
                        return "timed-metadata";
                    } else if (a[b] & (0xff === 0xff) && (a[b + 1] & 0xf0) === 0xf0) {
                        return "audio";
                    }
                    return null;
                };
                var aO = function c(b) {
                    var a = 0;
                    while(a + 5 < b.length){
                        if (b[a] !== 0xff || (b[a + 1] & 0xf6) !== 0xf0) {
                            a++;
                            continue;
                        }
                        return b4[(b[a + 2] & 0x3c) >>> 2];
                    }
                    return null;
                };
                var aP = function j(b) {
                    var a, f, d, h;
                    a = 10;
                    if (b[5] & 0x40) {
                        a += 4;
                        a += b6(b.subarray(10, 14));
                    }
                    do {
                        f = b6(b.subarray(a + 4, a + 8));
                        if (f < 1) {
                            return null;
                        }
                        h = String.fromCharCode(b[a], b[a + 1], b[a + 2], b[a + 3]);
                        if (h === "PRIV") {
                            d = b.subarray(a + 10, a + f + 10);
                            for(var e = 0; e < d.byteLength; e++){
                                if (d[e] === 0) {
                                    var i = b8(d, 0, e);
                                    if (i === "com.apple.streaming.transportStreamTimestamp") {
                                        var c = d.subarray(e + 1);
                                        var g = ((c[3] & 0x01) << 30) | (c[4] << 22) | (c[5] << 14) | (c[6] << 6) | (c[7] >>> 2);
                                        g *= 4;
                                        g += c[7] & 0x03;
                                        return g;
                                    }
                                    break;
                                }
                            }
                        }
                        a += 10;
                        a += f;
                    }while (a < b.byteLength)
                    return null;
                };
                var N = {
                    isLikelyAacData: aL,
                    parseId3TagSize: aK,
                    parseAdtsSize: aM,
                    parseType: aN,
                    parseSampleRate: aO,
                    parseAacTimestamp: aP
                };
                var u;
                u = function a() {
                    var b = new Uint8Array(), c = 0;
                    u.prototype.init.call(this);
                    this.setTimestamp = function(a) {
                        c = a;
                    };
                    this.push = function(f) {
                        var d = 0, a = 0, g, h, i, e;
                        if (b.length) {
                            e = b.length;
                            b = new Uint8Array(f.byteLength + e);
                            b.set(b.subarray(0, e));
                            b.set(f, e);
                        } else {
                            b = f;
                        }
                        while(b.length - a >= 3){
                            if (b[a] === "I".charCodeAt(0) && b[a + 1] === "D".charCodeAt(0) && b[a + 2] === "3".charCodeAt(0)) {
                                if (b.length - a < 10) {
                                    break;
                                }
                                d = N.parseId3TagSize(b, a);
                                if (a + d > b.length) {
                                    break;
                                }
                                h = {
                                    type: "timed-metadata",
                                    data: b.subarray(a, a + d)
                                };
                                this.trigger("data", h);
                                a += d;
                                continue;
                            } else if ((b[a] & 0xff) === 0xff && (b[a + 1] & 0xf0) === 0xf0) {
                                if (b.length - a < 7) {
                                    break;
                                }
                                d = N.parseAdtsSize(b, a);
                                if (a + d > b.length) {
                                    break;
                                }
                                i = {
                                    type: "audio",
                                    data: b.subarray(a, a + d),
                                    pts: c,
                                    dts: c
                                };
                                this.trigger("data", i);
                                a += d;
                                continue;
                            }
                            a++;
                        }
                        g = b.length - a;
                        if (g > 0) {
                            b = b.subarray(a);
                        } else {
                            b = new Uint8Array();
                        }
                    };
                    this.reset = function() {
                        b = new Uint8Array();
                        this.trigger("reset");
                    };
                    this.endTimeline = function() {
                        b = new Uint8Array();
                        this.trigger("endedtimeline");
                    };
                };
                u.prototype = new c();
                var b9 = u;
                var aQ = [
                    "audioobjecttype",
                    "channelcount",
                    "samplerate",
                    "samplingfrequencyindex",
                    "samplesize", 
                ];
                var aR = aQ;
                var aS = [
                    "width",
                    "height",
                    "profileIdc",
                    "levelIdc",
                    "profileCompatibility",
                    "sarRatio", 
                ];
                var aT = aS;
                var ca = aJ.H264Stream;
                var cb = N.isLikelyAacData;
                var cc = g.ONE_SECOND_IN_TS;
                var v, w, x, j;
                var cd = function c(b, a) {
                    a.stream = b;
                    this.trigger("log", a);
                };
                var ce = function f(e, b) {
                    var d = Object.keys(b);
                    for(var c = 0; c < d.length; c++){
                        var a = d[c];
                        if (a === "headOfPipeline" || !b[a].on) {
                            continue;
                        }
                        b[a].on("log", cd.bind(e, a));
                    }
                };
                var cf = function d(b, c) {
                    var a;
                    if (b.length !== c.length) {
                        return false;
                    }
                    for(a = 0; a < b.length; a++){
                        if (b[a] !== c[a]) {
                            return false;
                        }
                    }
                    return true;
                };
                var aU = function j(a, b, c, d, e, f) {
                    var g = c - b, h = d - b, i = e - c;
                    return {
                        start: {
                            dts: a,
                            pts: a + g
                        },
                        end: {
                            dts: a + h,
                            pts: a + i
                        },
                        prependedContentDuration: f,
                        baseMediaDecodeTime: a
                    };
                };
                w = function c(d, a) {
                    var e = [], b, f = 0, h = 0, i = Infinity;
                    a = a || {};
                    b = a.firstSequenceNumber || 0;
                    w.prototype.init.call(this);
                    this.push = function(a) {
                        bI.collectDtsInfo(d, a);
                        if (d) {
                            aR.forEach(function(b) {
                                d[b] = a[b];
                            });
                        }
                        e.push(a);
                    };
                    this.setEarliestDts = function(a) {
                        f = a;
                    };
                    this.setVideoBaseMediaDecodeTime = function(a) {
                        i = a;
                    };
                    this.setAudioAppendStart = function(a) {
                        h = a;
                    };
                    this.flush = function() {
                        var c, j, m, k, n, l, o;
                        if (e.length === 0) {
                            this.trigger("done", "AudioSegmentStream");
                            return;
                        }
                        c = bG.trimAdtsFramesByEarliestDts(e, d, f);
                        d.baseMediaDecodeTime = bI.calculateTrackBaseMediaDecodeTime(d, a.keepOriginalTimestamps);
                        o = bG.prefixWithSilence(d, c, h, i);
                        d.samples = bG.generateSampleTable(c);
                        m = bv.mdat(bG.concatenateFrameData(c));
                        e = [];
                        j = bv.moof(b, [
                            d
                        ]);
                        k = new Uint8Array(j.byteLength + m.byteLength);
                        b++;
                        k.set(j);
                        k.set(m, j.byteLength);
                        bI.clearDtsInfo(d);
                        n = Math.ceil((cc * 1024) / d.samplerate);
                        if (c.length) {
                            l = c.length * n;
                            this.trigger("segmentTimingInfo", aU(g.audioTsToVideoTs(d.baseMediaDecodeTime, d.samplerate), c[0].dts, c[0].pts, c[0].dts + l, c[0].pts + l, o || 0));
                            this.trigger("timingInfo", {
                                start: c[0].pts,
                                end: c[0].pts + l
                            });
                        }
                        this.trigger("data", {
                            track: d,
                            boxes: k
                        });
                        this.trigger("done", "AudioSegmentStream");
                    };
                    this.reset = function() {
                        bI.clearDtsInfo(d);
                        e = [];
                        this.trigger("reset");
                    };
                };
                w.prototype = new c();
                v = function d(b, a) {
                    var c, e = [], f = [], g, h;
                    a = a || {};
                    c = a.firstSequenceNumber || 0;
                    v.prototype.init.call(this);
                    delete b.minPTS;
                    this.gopCache_ = [];
                    this.push = function(a) {
                        bI.collectDtsInfo(b, a);
                        if (a.nalUnitType === "seq_parameter_set_rbsp" && !g) {
                            g = a.config;
                            b.sps = [
                                a.data
                            ];
                            aT.forEach(function(a) {
                                b[a] = g[a];
                            }, this);
                        }
                        if (a.nalUnitType === "pic_parameter_set_rbsp" && !h) {
                            h = a.data;
                            b.pps = [
                                a.data
                            ];
                        }
                        e.push(a);
                    };
                    this.flush = function() {
                        var n, g, d, i, l, j, o = 0, m, h;
                        while(e.length){
                            if (e[0].nalUnitType === "access_unit_delimiter_rbsp") {
                                break;
                            }
                            e.shift();
                        }
                        if (e.length === 0) {
                            this.resetStream_();
                            this.trigger("done", "VideoSegmentStream");
                            return;
                        }
                        n = by.groupNalsIntoFrames(e);
                        d = by.groupFramesIntoGops(n);
                        if (!d[0][0].keyFrame) {
                            g = this.getGopForFusion_(e[0], b);
                            if (g) {
                                o = g.duration;
                                d.unshift(g);
                                d.byteLength += g.byteLength;
                                d.nalCount += g.nalCount;
                                d.pts = g.pts;
                                d.dts = g.dts;
                                d.duration += g.duration;
                            } else {
                                d = by.extendFirstKeyFrame(d);
                            }
                        }
                        if (f.length) {
                            var k;
                            if (a.alignGopsAtEnd) {
                                k = this.alignGopsAtEnd_(d);
                            } else {
                                k = this.alignGopsAtStart_(d);
                            }
                            if (!k) {
                                this.gopCache_.unshift({
                                    gop: d.pop(),
                                    pps: b.pps,
                                    sps: b.sps
                                });
                                this.gopCache_.length = Math.min(6, this.gopCache_.length);
                                e = [];
                                this.resetStream_();
                                this.trigger("done", "VideoSegmentStream");
                                return;
                            }
                            bI.clearDtsInfo(b);
                            d = k;
                        }
                        bI.collectDtsInfo(b, d);
                        b.samples = by.generateSampleTable(d);
                        l = bv.mdat(by.concatenateNalData(d));
                        b.baseMediaDecodeTime = bI.calculateTrackBaseMediaDecodeTime(b, a.keepOriginalTimestamps);
                        this.trigger("processedGopsInfo", d.map(function(a) {
                            return {
                                pts: a.pts,
                                dts: a.dts,
                                byteLength: a.byteLength
                            };
                        }));
                        m = d[0];
                        h = d[d.length - 1];
                        this.trigger("segmentTimingInfo", aU(b.baseMediaDecodeTime, m.dts, m.pts, h.dts + h.duration, h.pts + h.duration, o));
                        this.trigger("timingInfo", {
                            start: d[0].pts,
                            end: d[d.length - 1].pts + d[d.length - 1].duration
                        });
                        this.gopCache_.unshift({
                            gop: d.pop(),
                            pps: b.pps,
                            sps: b.sps
                        });
                        this.gopCache_.length = Math.min(6, this.gopCache_.length);
                        e = [];
                        this.trigger("baseMediaDecodeTime", b.baseMediaDecodeTime);
                        this.trigger("timelineStartInfo", b.timelineStartInfo);
                        i = bv.moof(c, [
                            b
                        ]);
                        j = new Uint8Array(i.byteLength + l.byteLength);
                        c++;
                        j.set(i);
                        j.set(l, i.byteLength);
                        this.trigger("data", {
                            track: b,
                            boxes: j
                        });
                        this.resetStream_();
                        this.trigger("done", "VideoSegmentStream");
                    };
                    this.reset = function() {
                        this.resetStream_();
                        e = [];
                        this.gopCache_.length = 0;
                        f.length = 0;
                        this.trigger("reset");
                    };
                    this.resetStream_ = function() {
                        bI.clearDtsInfo(b);
                        g = undefined;
                        h = undefined;
                    };
                    this.getGopForFusion_ = function(h) {
                        var i = 45000, j = 10000, g = Infinity, a, d, e, c, f;
                        for(f = 0; f < this.gopCache_.length; f++){
                            c = this.gopCache_[f];
                            e = c.gop;
                            if (!(b.pps && cf(b.pps[0], c.pps[0])) || !(b.sps && cf(b.sps[0], c.sps[0]))) {
                                continue;
                            }
                            if (e.dts < b.timelineStartInfo.dts) {
                                continue;
                            }
                            a = h.dts - e.dts - e.duration;
                            if (a >= -j && a <= i) {
                                if (!d || g > a) {
                                    d = c;
                                    g = a;
                                }
                            }
                        }
                        if (d) {
                            return d.gop;
                        }
                        return null;
                    };
                    this.alignGopsAtStart_ = function(b) {
                        var e, c, g, d, h, i, j, a;
                        h = b.byteLength;
                        i = b.nalCount;
                        j = b.duration;
                        e = c = 0;
                        while(e < f.length && c < b.length){
                            g = f[e];
                            d = b[c];
                            if (g.pts === d.pts) {
                                break;
                            }
                            if (d.pts > g.pts) {
                                e++;
                                continue;
                            }
                            c++;
                            h -= d.byteLength;
                            i -= d.nalCount;
                            j -= d.duration;
                        }
                        if (c === 0) {
                            return b;
                        }
                        if (c === b.length) {
                            return null;
                        }
                        a = b.slice(c);
                        a.byteLength = h;
                        a.duration = j;
                        a.nalCount = i;
                        a.pts = a[0].pts;
                        a.dts = a[0].dts;
                        return a;
                    };
                    this.alignGopsAtEnd_ = function(d) {
                        var c, b, i, j, e, g;
                        c = f.length - 1;
                        b = d.length - 1;
                        e = null;
                        g = false;
                        while(c >= 0 && b >= 0){
                            i = f[c];
                            j = d[b];
                            if (i.pts === j.pts) {
                                g = true;
                                break;
                            }
                            if (i.pts > j.pts) {
                                c--;
                                continue;
                            }
                            if (c === f.length - 1) {
                                e = b;
                            }
                            b--;
                        }
                        if (!g && e === null) {
                            return null;
                        }
                        var h;
                        if (g) {
                            h = b;
                        } else {
                            h = e;
                        }
                        if (h === 0) {
                            return d;
                        }
                        var a = d.slice(h);
                        var k = a.reduce(function(a, b) {
                            a.byteLength += b.byteLength;
                            a.duration += b.duration;
                            a.nalCount += b.nalCount;
                            return a;
                        }, {
                            byteLength: 0,
                            duration: 0,
                            nalCount: 0
                        });
                        a.byteLength = k.byteLength;
                        a.duration = k.duration;
                        a.nalCount = k.nalCount;
                        a.pts = a[0].pts;
                        a.dts = a[0].dts;
                        return a;
                    };
                    this.alignGopsWith = function(a) {
                        f = a;
                    };
                };
                v.prototype = new c();
                j = function c(a, b) {
                    this.numberOfTracks = 0;
                    this.metadataStream = b;
                    a = a || {};
                    if (typeof a.remux !== "undefined") {
                        this.remuxTracks = !!a.remux;
                    } else {
                        this.remuxTracks = true;
                    }
                    if (typeof a.keepOriginalTimestamps === "boolean") {
                        this.keepOriginalTimestamps = a.keepOriginalTimestamps;
                    } else {
                        this.keepOriginalTimestamps = false;
                    }
                    this.pendingTracks = [];
                    this.videoTrack = null;
                    this.pendingBoxes = [];
                    this.pendingCaptions = [];
                    this.pendingMetadata = [];
                    this.pendingBytes = 0;
                    this.emittedTracks = 0;
                    j.prototype.init.call(this);
                    this.push = function(a) {
                        if (a.text) {
                            return this.pendingCaptions.push(a);
                        }
                        if (a.frames) {
                            return this.pendingMetadata.push(a);
                        }
                        this.pendingTracks.push(a.track);
                        this.pendingBytes += a.boxes.byteLength;
                        if (a.track.type === "video") {
                            this.videoTrack = a.track;
                            this.pendingBoxes.push(a.boxes);
                        }
                        if (a.track.type === "audio") {
                            this.audioTrack = a.track;
                            this.pendingBoxes.unshift(a.boxes);
                        }
                    };
                };
                j.prototype = new c();
                j.prototype.flush = function(h) {
                    var i = 0, b = {
                        captions: [],
                        captionStreams: {},
                        metadata: [],
                        info: {}
                    }, c, d, f, e = 0, a;
                    if (this.pendingTracks.length < this.numberOfTracks) {
                        if (h !== "VideoSegmentStream" && h !== "AudioSegmentStream") {
                            return;
                        } else if (this.remuxTracks) {
                            return;
                        } else if (this.pendingTracks.length === 0) {
                            this.emittedTracks++;
                            if (this.emittedTracks >= this.numberOfTracks) {
                                this.trigger("done");
                                this.emittedTracks = 0;
                            }
                            return;
                        }
                    }
                    if (this.videoTrack) {
                        e = this.videoTrack.timelineStartInfo.pts;
                        aT.forEach(function(a) {
                            b.info[a] = this.videoTrack[a];
                        }, this);
                    } else if (this.audioTrack) {
                        e = this.audioTrack.timelineStartInfo.pts;
                        aR.forEach(function(a) {
                            b.info[a] = this.audioTrack[a];
                        }, this);
                    }
                    if (this.videoTrack || this.audioTrack) {
                        if (this.pendingTracks.length === 1) {
                            b.type = this.pendingTracks[0].type;
                        } else {
                            b.type = "combined";
                        }
                        this.emittedTracks += this.pendingTracks.length;
                        f = bv.initSegment(this.pendingTracks);
                        b.initSegment = new Uint8Array(f.byteLength);
                        b.initSegment.set(f);
                        b.data = new Uint8Array(this.pendingBytes);
                        for(a = 0; a < this.pendingBoxes.length; a++){
                            b.data.set(this.pendingBoxes[a], i);
                            i += this.pendingBoxes[a].byteLength;
                        }
                        for(a = 0; a < this.pendingCaptions.length; a++){
                            c = this.pendingCaptions[a];
                            c.startTime = g.metadataTsToSeconds(c.startPts, e, this.keepOriginalTimestamps);
                            c.endTime = g.metadataTsToSeconds(c.endPts, e, this.keepOriginalTimestamps);
                            b.captionStreams[c.stream] = true;
                            b.captions.push(c);
                        }
                        for(a = 0; a < this.pendingMetadata.length; a++){
                            d = this.pendingMetadata[a];
                            d.cueTime = g.metadataTsToSeconds(d.pts, e, this.keepOriginalTimestamps);
                            b.metadata.push(d);
                        }
                        b.metadata.dispatchType = this.metadataStream.dispatchType;
                        this.pendingTracks.length = 0;
                        this.videoTrack = null;
                        this.pendingBoxes.length = 0;
                        this.pendingCaptions.length = 0;
                        this.pendingBytes = 0;
                        this.pendingMetadata.length = 0;
                        this.trigger("data", b);
                        for(a = 0; a < b.captions.length; a++){
                            c = b.captions[a];
                            this.trigger("caption", c);
                        }
                        for(a = 0; a < b.metadata.length; a++){
                            d = b.metadata[a];
                            this.trigger("id3Frame", d);
                        }
                    }
                    if (this.emittedTracks >= this.numberOfTracks) {
                        this.trigger("done");
                        this.emittedTracks = 0;
                    }
                };
                j.prototype.setRemux = function(a) {
                    this.remuxTracks = a;
                };
                x = function b(a) {
                    var c = this, d = true, e, f;
                    x.prototype.init.call(this);
                    a = a || {};
                    this.baseMediaDecodeTime = a.baseMediaDecodeTime || 0;
                    this.transmuxPipeline_ = {};
                    this.setupAacPipeline = function() {
                        var b = {};
                        this.transmuxPipeline_ = b;
                        b.type = "aac";
                        b.metadataStream = new b_.MetadataStream();
                        b.aacStream = new b9();
                        b.audioTimestampRolloverStream = new b_.TimestampRolloverStream("audio");
                        b.timedMetadataTimestampRolloverStream = new b_.TimestampRolloverStream("timed-metadata");
                        b.adtsStream = new b2();
                        b.coalesceStream = new j(a, b.metadataStream);
                        b.headOfPipeline = b.aacStream;
                        b.aacStream.pipe(b.audioTimestampRolloverStream).pipe(b.adtsStream);
                        b.aacStream.pipe(b.timedMetadataTimestampRolloverStream).pipe(b.metadataStream).pipe(b.coalesceStream);
                        b.metadataStream.on("timestamp", function(a) {
                            b.aacStream.setTimestamp(a.timeStamp);
                        });
                        b.aacStream.on("data", function(d) {
                            if ((d.type !== "timed-metadata" && d.type !== "audio") || b.audioSegmentStream) {
                                return;
                            }
                            f = f || {
                                timelineStartInfo: {
                                    baseMediaDecodeTime: c.baseMediaDecodeTime
                                },
                                codec: "adts",
                                type: "audio"
                            };
                            b.coalesceStream.numberOfTracks++;
                            b.audioSegmentStream = new w(f, a);
                            b.audioSegmentStream.on("log", c.getLogTrigger_("audioSegmentStream"));
                            b.audioSegmentStream.on("timingInfo", c.trigger.bind(c, "audioTimingInfo"));
                            b.adtsStream.pipe(b.audioSegmentStream).pipe(b.coalesceStream);
                            c.trigger("trackinfo", {
                                hasAudio: !!f,
                                hasVideo: !!e
                            });
                        });
                        b.coalesceStream.on("data", this.trigger.bind(this, "data"));
                        b.coalesceStream.on("done", this.trigger.bind(this, "done"));
                        ce(this, b);
                    };
                    this.setupTsPipeline = function() {
                        var b = {};
                        this.transmuxPipeline_ = b;
                        b.type = "ts";
                        b.metadataStream = new b_.MetadataStream();
                        b.packetStream = new b_.TransportPacketStream();
                        b.parseStream = new b_.TransportParseStream();
                        b.elementaryStream = new b_.ElementaryStream();
                        b.timestampRolloverStream = new b_.TimestampRolloverStream();
                        b.adtsStream = new b2();
                        b.h264Stream = new ca();
                        b.captionStream = new b_.CaptionStream(a);
                        b.coalesceStream = new j(a, b.metadataStream);
                        b.headOfPipeline = b.packetStream;
                        b.packetStream.pipe(b.parseStream).pipe(b.elementaryStream).pipe(b.timestampRolloverStream);
                        b.timestampRolloverStream.pipe(b.h264Stream);
                        b.timestampRolloverStream.pipe(b.adtsStream);
                        b.timestampRolloverStream.pipe(b.metadataStream).pipe(b.coalesceStream);
                        b.h264Stream.pipe(b.captionStream).pipe(b.coalesceStream);
                        b.elementaryStream.on("data", function(d) {
                            var g;
                            if (d.type === "metadata") {
                                g = d.tracks.length;
                                while(g--){
                                    if (!e && d.tracks[g].type === "video") {
                                        e = d.tracks[g];
                                        e.timelineStartInfo.baseMediaDecodeTime = c.baseMediaDecodeTime;
                                    } else if (!f && d.tracks[g].type === "audio") {
                                        f = d.tracks[g];
                                        f.timelineStartInfo.baseMediaDecodeTime = c.baseMediaDecodeTime;
                                    }
                                }
                                if (e && !b.videoSegmentStream) {
                                    b.coalesceStream.numberOfTracks++;
                                    b.videoSegmentStream = new v(e, a);
                                    b.videoSegmentStream.on("log", c.getLogTrigger_("videoSegmentStream"));
                                    b.videoSegmentStream.on("timelineStartInfo", function(d) {
                                        if (f && !a.keepOriginalTimestamps) {
                                            f.timelineStartInfo = d;
                                            b.audioSegmentStream.setEarliestDts(d.dts - c.baseMediaDecodeTime);
                                        }
                                    });
                                    b.videoSegmentStream.on("processedGopsInfo", c.trigger.bind(c, "gopInfo"));
                                    b.videoSegmentStream.on("segmentTimingInfo", c.trigger.bind(c, "videoSegmentTimingInfo"));
                                    b.videoSegmentStream.on("baseMediaDecodeTime", function(a) {
                                        if (f) {
                                            b.audioSegmentStream.setVideoBaseMediaDecodeTime(a);
                                        }
                                    });
                                    b.videoSegmentStream.on("timingInfo", c.trigger.bind(c, "videoTimingInfo"));
                                    b.h264Stream.pipe(b.videoSegmentStream).pipe(b.coalesceStream);
                                }
                                if (f && !b.audioSegmentStream) {
                                    b.coalesceStream.numberOfTracks++;
                                    b.audioSegmentStream = new w(f, a);
                                    b.audioSegmentStream.on("log", c.getLogTrigger_("audioSegmentStream"));
                                    b.audioSegmentStream.on("timingInfo", c.trigger.bind(c, "audioTimingInfo"));
                                    b.audioSegmentStream.on("segmentTimingInfo", c.trigger.bind(c, "audioSegmentTimingInfo"));
                                    b.adtsStream.pipe(b.audioSegmentStream).pipe(b.coalesceStream);
                                }
                                c.trigger("trackinfo", {
                                    hasAudio: !!f,
                                    hasVideo: !!e
                                });
                            }
                        });
                        b.coalesceStream.on("data", this.trigger.bind(this, "data"));
                        b.coalesceStream.on("id3Frame", function(a) {
                            a.dispatchType = b.metadataStream.dispatchType;
                            c.trigger("id3Frame", a);
                        });
                        b.coalesceStream.on("caption", this.trigger.bind(this, "caption"));
                        b.coalesceStream.on("done", this.trigger.bind(this, "done"));
                        ce(this, b);
                    };
                    this.setBaseMediaDecodeTime = function(c) {
                        var b = this.transmuxPipeline_;
                        if (!a.keepOriginalTimestamps) {
                            this.baseMediaDecodeTime = c;
                        }
                        if (f) {
                            f.timelineStartInfo.dts = undefined;
                            f.timelineStartInfo.pts = undefined;
                            bI.clearDtsInfo(f);
                            if (b.audioTimestampRolloverStream) {
                                b.audioTimestampRolloverStream.discontinuity();
                            }
                        }
                        if (e) {
                            if (b.videoSegmentStream) {
                                b.videoSegmentStream.gopCache_ = [];
                            }
                            e.timelineStartInfo.dts = undefined;
                            e.timelineStartInfo.pts = undefined;
                            bI.clearDtsInfo(e);
                            b.captionStream.reset();
                        }
                        if (b.timestampRolloverStream) {
                            b.timestampRolloverStream.discontinuity();
                        }
                    };
                    this.setAudioAppendStart = function(a) {
                        if (f) {
                            this.transmuxPipeline_.audioSegmentStream.setAudioAppendStart(a);
                        }
                    };
                    this.setRemux = function(c) {
                        var b = this.transmuxPipeline_;
                        a.remux = c;
                        if (b && b.coalesceStream) {
                            b.coalesceStream.setRemux(c);
                        }
                    };
                    this.alignGopsWith = function(a) {
                        if (e && this.transmuxPipeline_.videoSegmentStream) {
                            this.transmuxPipeline_.videoSegmentStream.alignGopsWith(a);
                        }
                    };
                    this.getLogTrigger_ = function(a) {
                        var b = this;
                        return function(c) {
                            c.stream = a;
                            b.trigger("log", c);
                        };
                    };
                    this.push = function(a) {
                        if (d) {
                            var b = cb(a);
                            if (b && this.transmuxPipeline_.type !== "aac") {
                                this.setupAacPipeline();
                            } else if (!b && this.transmuxPipeline_.type !== "ts") {
                                this.setupTsPipeline();
                            }
                            d = false;
                        }
                        this.transmuxPipeline_.headOfPipeline.push(a);
                    };
                    this.flush = function() {
                        d = true;
                        this.transmuxPipeline_.headOfPipeline.flush();
                    };
                    this.endTimeline = function() {
                        this.transmuxPipeline_.headOfPipeline.endTimeline();
                    };
                    this.reset = function() {
                        if (this.transmuxPipeline_.headOfPipeline) {
                            this.transmuxPipeline_.headOfPipeline.reset();
                        }
                    };
                    this.resetCaptions = function() {
                        if (this.transmuxPipeline_.captionStream) {
                            this.transmuxPipeline_.captionStream.reset();
                        }
                    };
                };
                x.prototype = new c();
                var cg = {
                    Transmuxer: x,
                    VideoSegmentStream: v,
                    AudioSegmentStream: w,
                    AUDIO_PROPERTIES: aR,
                    VIDEO_PROPERTIES: aT,
                    generateSegmentTimingInfo: aU
                };
                var aV = function b(a) {
                    return a >>> 0;
                };
                var aW = function b(a) {
                    return ("00" + a.toString(16)).slice(-2);
                };
                var k = {
                    toUnsigned: aV,
                    toHexString: aW
                };
                var aX = function c(b) {
                    var a = "";
                    a += String.fromCharCode(b[0]);
                    a += String.fromCharCode(b[1]);
                    a += String.fromCharCode(b[2]);
                    a += String.fromCharCode(b[3]);
                    return a;
                };
                var aY = aX;
                var ch = k.toUnsigned;
                var aZ = function i(b, c) {
                    var d = [], a, f, h, e, g;
                    if (!c.length) {
                        return null;
                    }
                    for(a = 0; a < b.byteLength;){
                        f = ch((b[a] << 24) | (b[a + 1] << 16) | (b[a + 2] << 8) | b[a + 3]);
                        h = aY(b.subarray(a + 4, a + 8));
                        e = f > 1 ? a + f : b.byteLength;
                        if (h === c[0]) {
                            if (c.length === 1) {
                                d.push(b.subarray(a + 8, e));
                            } else {
                                g = i(b.subarray(a + 8, e), c.slice(1));
                                if (g.length) {
                                    d = d.concat(g);
                                }
                            }
                        }
                        a = e;
                    }
                    return d;
                };
                var a$ = aZ;
                var ci = k.toUnsigned;
                var a_ = function c(a) {
                    var b = {
                        version: a[0],
                        flags: new Uint8Array(a.subarray(1, 4)),
                        baseMediaDecodeTime: ci((a[4] << 24) | (a[5] << 16) | (a[6] << 8) | a[7])
                    };
                    if (b.version === 1) {
                        b.baseMediaDecodeTime *= Math.pow(2, 32);
                        b.baseMediaDecodeTime += ci((a[8] << 24) | (a[9] << 16) | (a[10] << 8) | a[11]);
                    }
                    return b;
                };
                var cj = a_;
                var a0 = function b(a) {
                    return {
                        isLeading: (a[0] & 0x0c) >>> 2,
                        dependsOn: a[0] & 0x03,
                        isDependedOn: (a[1] & 0xc0) >>> 6,
                        hasRedundancy: (a[1] & 0x30) >>> 4,
                        paddingValue: (a[1] & 0x0e) >>> 1,
                        isNonSyncSample: a[1] & 0x01,
                        degradationPriority: (a[2] << 8) | a[3]
                    };
                };
                var ck = a0;
                var a1 = function m(e) {
                    var c = {
                        version: e[0],
                        flags: new Uint8Array(e.subarray(1, 4)),
                        samples: []
                    }, d = new DataView(e.buffer, e.byteOffset, e.byteLength), j = c.flags[2] & 0x01, k = c.flags[2] & 0x04, g = c.flags[1] & 0x01, h = c.flags[1] & 0x02, l = c.flags[1] & 0x04, i = c.flags[1] & 0x08, f = d.getUint32(4), a = 8, b;
                    if (j) {
                        c.dataOffset = d.getInt32(a);
                        a += 4;
                    }
                    if (k && f) {
                        b = {
                            flags: ck(e.subarray(a, a + 4))
                        };
                        a += 4;
                        if (g) {
                            b.duration = d.getUint32(a);
                            a += 4;
                        }
                        if (h) {
                            b.size = d.getUint32(a);
                            a += 4;
                        }
                        if (i) {
                            if (c.version === 1) {
                                b.compositionTimeOffset = d.getInt32(a);
                            } else {
                                b.compositionTimeOffset = d.getUint32(a);
                            }
                            a += 4;
                        }
                        c.samples.push(b);
                        f--;
                    }
                    while(f--){
                        b = {};
                        if (g) {
                            b.duration = d.getUint32(a);
                            a += 4;
                        }
                        if (h) {
                            b.size = d.getUint32(a);
                            a += 4;
                        }
                        if (l) {
                            b.flags = ck(e.subarray(a, a + 4));
                            a += 4;
                        }
                        if (i) {
                            if (c.version === 1) {
                                b.compositionTimeOffset = d.getInt32(a);
                            } else {
                                b.compositionTimeOffset = d.getUint32(a);
                            }
                            a += 4;
                        }
                        c.samples.push(b);
                    }
                    return c;
                };
                var cl = a1;
                var a2 = function l(d) {
                    var c = new DataView(d.buffer, d.byteOffset, d.byteLength), a = {
                        version: d[0],
                        flags: new Uint8Array(d.subarray(1, 4)),
                        trackId: c.getUint32(4)
                    }, e = a.flags[2] & 0x01, f = a.flags[2] & 0x02, g = a.flags[2] & 0x08, h = a.flags[2] & 0x10, i = a.flags[2] & 0x20, j = a.flags[0] & 0x010000, k = a.flags[0] & 0x020000, b;
                    b = 8;
                    if (e) {
                        b += 4;
                        a.baseDataOffset = c.getUint32(12);
                        b += 4;
                    }
                    if (f) {
                        a.sampleDescriptionIndex = c.getUint32(b);
                        b += 4;
                    }
                    if (g) {
                        a.defaultSampleDuration = c.getUint32(b);
                        b += 4;
                    }
                    if (h) {
                        a.defaultSampleSize = c.getUint32(b);
                        b += 4;
                    }
                    if (i) {
                        a.defaultSampleFlags = c.getUint32(b);
                    }
                    if (j) {
                        a.durationIsEmpty = true;
                    }
                    if (!e && k) {
                        a.baseDataOffsetIsMoof = true;
                    }
                    return a;
                };
                var cm = a2;
                var cn = aD.discardEmulationPreventionBytes;
                var co = h.CaptionStream;
                var cp = function f(e, c) {
                    var d = e;
                    for(var a = 0; a < c.length; a++){
                        var b = c[a];
                        if (d < b.size) {
                            return b;
                        }
                        d -= b.size;
                    }
                    return null;
                };
                var cq = function l(b, j, h) {
                    var k = new DataView(b.buffer, b.byteOffset, b.byteLength), g = {
                        logs: [],
                        seiNals: []
                    }, c, a, d, e;
                    for(a = 0; a + 4 < b.length; a += d){
                        d = k.getUint32(a);
                        a += 4;
                        if (d <= 0) {
                            continue;
                        }
                        switch(b[a] & 0x1f){
                            case 0x06:
                                var i = b.subarray(a + 1, a + 1 + d);
                                var f = cp(a, j);
                                c = {
                                    nalUnitType: "sei_rbsp",
                                    size: d,
                                    data: i,
                                    escapedRBSP: cn(i),
                                    trackId: h
                                };
                                if (f) {
                                    c.pts = f.pts;
                                    c.dts = f.dts;
                                    e = f;
                                } else if (e) {
                                    c.pts = e.pts;
                                    c.dts = e.dts;
                                } else {
                                    g.logs.push({
                                        level: "warn",
                                        message: "We've encountered a nal unit without data at " + a + " for trackId " + h + ". See mux.js#223."
                                    });
                                    break;
                                }
                                g.seiNals.push(c);
                                break;
                        }
                    }
                    return g;
                };
                var cr = function e(b, c, a) {
                    var f = c;
                    var g = a.defaultSampleDuration || 0;
                    var h = a.defaultSampleSize || 0;
                    var i = a.trackId;
                    var d = [];
                    b.forEach(function(b) {
                        var c = cl(b);
                        var a = c.samples;
                        a.forEach(function(a) {
                            if (a.duration === undefined) {
                                a.duration = g;
                            }
                            if (a.size === undefined) {
                                a.size = h;
                            }
                            a.trackId = i;
                            a.dts = f;
                            if (a.compositionTimeOffset === undefined) {
                                a.compositionTimeOffset = 0;
                            }
                            a.pts = f + a.compositionTimeOffset;
                            f += a.duration;
                        });
                        d = d.concat(a);
                    });
                    return d;
                };
                var cs = function e(a, f) {
                    var g = a$(a, [
                        "moof",
                        "traf"
                    ]);
                    var b = a$(a, [
                        "mdat"
                    ]);
                    var c = {};
                    var d = [];
                    b.forEach(function(a, b) {
                        var c = g[b];
                        d.push({
                            mdat: a,
                            traf: c
                        });
                    });
                    d.forEach(function(e) {
                        var k = e.mdat;
                        var b = e.traf;
                        var l = a$(b, [
                            "tfhd"
                        ]);
                        var g = cm(l[0]);
                        var a = g.trackId;
                        var h = a$(b, [
                            "tfdt"
                        ]);
                        var m = h.length > 0 ? cj(h[0]).baseMediaDecodeTime : 0;
                        var i = a$(b, [
                            "trun"
                        ]);
                        var j;
                        var d;
                        if (f === a && i.length > 0) {
                            j = cr(i, m, g);
                            d = cq(k, j, a);
                            if (!c[a]) {
                                c[a] = {
                                    seiNals: [],
                                    logs: []
                                };
                            }
                            c[a].seiNals = c[a].seiNals.concat(d.seiNals);
                            c[a].logs = c[a].logs.concat(d.logs);
                        }
                    });
                    return c;
                };
                var ct = function f(d, a, e) {
                    var b;
                    if (a === null) {
                        return null;
                    }
                    b = cs(d, a);
                    var c = b[a] || {};
                    return {
                        seiNals: c.seiNals,
                        logs: c.logs,
                        timescale: e
                    };
                };
                var a3 = function a() {
                    var b = false;
                    var c;
                    var d;
                    var e;
                    var f;
                    var g;
                    var h;
                    this.isInitialized = function() {
                        return b;
                    };
                    this.init = function(a) {
                        c = new co();
                        b = true;
                        h = a ? a.isPartial : false;
                        c.on("data", function(a) {
                            a.startTime = a.startPts / f;
                            a.endTime = a.endPts / f;
                            g.captions.push(a);
                            g.captionStreams[a.stream] = true;
                        });
                        c.on("log", function(a) {
                            g.logs.push(a);
                        });
                    };
                    this.isNewInit = function(b, a) {
                        if ((b && b.length === 0) || (a && typeof a === "object" && Object.keys(a).length === 0)) {
                            return false;
                        }
                        return (e !== b[0] || f !== a[e]);
                    };
                    this.parse = function(h, b, c) {
                        var a;
                        if (!this.isInitialized()) {
                            return null;
                        } else if (!b || !c) {
                            return null;
                        } else if (this.isNewInit(b, c)) {
                            e = b[0];
                            f = c[e];
                        } else if (e === null || !f) {
                            d.push(h);
                            return null;
                        }
                        while(d.length > 0){
                            var i = d.shift();
                            this.parse(i, b, c);
                        }
                        a = ct(h, e, f);
                        if (a && a.logs) {
                            g.logs = g.logs.concat(a.logs);
                        }
                        if (a === null || !a.seiNals) {
                            if (g.logs.length) {
                                return {
                                    logs: g.logs,
                                    captions: [],
                                    captionStreams: []
                                };
                            }
                            return null;
                        }
                        this.pushNals(a.seiNals);
                        this.flushStream();
                        return g;
                    };
                    this.pushNals = function(a) {
                        if (!this.isInitialized() || !a || a.length === 0) {
                            return null;
                        }
                        a.forEach(function(a) {
                            c.push(a);
                        });
                    };
                    this.flushStream = function() {
                        if (!this.isInitialized()) {
                            return null;
                        }
                        if (!h) {
                            c.flush();
                        } else {
                            c.partialFlush();
                        }
                    };
                    this.clearParsedCaptions = function() {
                        g.captions = [];
                        g.captionStreams = {};
                        g.logs = [];
                    };
                    this.resetCaptionStream = function() {
                        if (!this.isInitialized()) {
                            return null;
                        }
                        c.reset();
                    };
                    this.clearAllCaptions = function() {
                        this.clearParsedCaptions();
                        this.resetCaptionStream();
                    };
                    this.reset = function() {
                        d = [];
                        e = null;
                        f = null;
                        if (!g) {
                            g = {
                                captions: [],
                                captionStreams: {},
                                logs: []
                            };
                        } else {
                            this.clearParsedCaptions();
                        }
                        this.resetCaptionStream();
                    };
                    this.reset();
                };
                var cu = a3;
                var cv = k.toUnsigned;
                var cw = k.toHexString;
                var O, P, Q, R, S, T;
                O = function d(a) {
                    var b = {}, c = a$(a, [
                        "moov",
                        "trak"
                    ]);
                    return c.reduce(function(e, f) {
                        var b, d, a, g, c;
                        b = a$(f, [
                            "tkhd"
                        ])[0];
                        if (!b) {
                            return null;
                        }
                        d = b[0];
                        a = d === 0 ? 12 : 20;
                        g = cv((b[a] << 24) | (b[a + 1] << 16) | (b[a + 2] << 8) | b[a + 3]);
                        c = a$(f, [
                            "mdia",
                            "mdhd"
                        ])[0];
                        if (!c) {
                            return null;
                        }
                        d = c[0];
                        a = d === 0 ? 12 : 20;
                        e[g] = cv((c[a] << 24) | (c[a + 1] << 16) | (c[a + 2] << 8) | c[a + 3]);
                        return e;
                    }, b);
                };
                P = function e(f, d) {
                    var b, c, a;
                    b = a$(d, [
                        "moof",
                        "traf"
                    ]);
                    c = [].concat.apply([], b.map(function(a) {
                        return a$(a, [
                            "tfhd"
                        ]).map(function(c) {
                            var d, e, b;
                            d = cv((c[4] << 24) | (c[5] << 16) | (c[6] << 8) | c[7]);
                            e = f[d] || 90e3;
                            b = a$(a, [
                                "tfdt"
                            ]).map(function(a) {
                                var c, b;
                                c = a[0];
                                b = cv((a[4] << 24) | (a[5] << 16) | (a[6] << 8) | a[7]);
                                if (c === 1) {
                                    b *= Math.pow(2, 32);
                                    b += cv((a[8] << 24) | (a[9] << 16) | (a[10] << 8) | a[11]);
                                }
                                return b;
                            })[0];
                            b = typeof b === "number" && !isNaN(b) ? b : Infinity;
                            return b / e;
                        });
                    }));
                    a = Math.min.apply(null, c);
                    return isFinite(a) ? a : 0;
                };
                Q = function n(i, j) {
                    var a = a$(j, [
                        "moof",
                        "traf"
                    ]);
                    var c = 0;
                    var d = 0;
                    var e;
                    if (a && a.length) {
                        var f = a$(a[0], [
                            "tfhd"
                        ])[0];
                        var g = a$(a[0], [
                            "trun"
                        ])[0];
                        var h = a$(a[0], [
                            "tfdt"
                        ])[0];
                        if (f) {
                            var k = cm(f);
                            e = k.trackId;
                        }
                        if (h) {
                            var l = cj(h);
                            c = l.baseMediaDecodeTime;
                        }
                        if (g) {
                            var b = cl(g);
                            if (b.samples && b.samples.length) {
                                d = b.samples[0].compositionTimeOffset || 0;
                            }
                        }
                    }
                    var m = i[e] || 90e3;
                    return ((c + d) / m);
                };
                R = function d(a) {
                    var b = a$(a, [
                        "moov",
                        "trak"
                    ]);
                    var c = [];
                    b.forEach(function(a) {
                        var b = a$(a, [
                            "mdia",
                            "hdlr"
                        ]);
                        var d = a$(a, [
                            "tkhd"
                        ]);
                        b.forEach(function(g, h) {
                            var i = aY(g.subarray(8, 12));
                            var b = d[h];
                            var a;
                            var e;
                            var f;
                            if (i === "vide") {
                                a = new DataView(b.buffer, b.byteOffset, b.byteLength);
                                e = a.getUint8(0);
                                f = e === 0 ? a.getUint32(12) : a.getUint32(20);
                                c.push(f);
                            }
                        });
                    });
                    return c;
                };
                T = function d(a) {
                    var c = a[0];
                    var b = c === 0 ? 12 : 20;
                    return cv((a[b] << 24) | (a[b + 1] << 16) | (a[b + 2] << 8) | a[b + 3]);
                };
                S = function d(a) {
                    var b = a$(a, [
                        "moov",
                        "trak"
                    ]);
                    var c = [];
                    b.forEach(function(d) {
                        var a = {};
                        var e = a$(d, [
                            "tkhd"
                        ])[0];
                        var f, j;
                        if (e) {
                            f = new DataView(e.buffer, e.byteOffset, e.byteLength);
                            j = f.getUint8(0);
                            a.id = j === 0 ? f.getUint32(12) : f.getUint32(20);
                        }
                        var k = a$(d, [
                            "mdia",
                            "hdlr"
                        ])[0];
                        if (k) {
                            var h = aY(k.subarray(8, 12));
                            if (h === "vide") {
                                a.type = "video";
                            } else if (h === "soun") {
                                a.type = "audio";
                            } else {
                                a.type = h;
                            }
                        }
                        var l = a$(d, [
                            "mdia",
                            "minf",
                            "stbl",
                            "stsd", 
                        ])[0];
                        if (l) {
                            var m = l.subarray(8);
                            a.codec = aY(m.subarray(4, 8));
                            var i = a$(m, [
                                a.codec, 
                            ])[0];
                            var b, g;
                            if (i) {
                                if (/^[asm]vc[1-9]$/i.test(a.codec)) {
                                    b = i.subarray(78);
                                    g = aY(b.subarray(4, 8));
                                    if (g === "avcC" && b.length > 11) {
                                        a.codec += ".";
                                        a.codec += cw(b[9]);
                                        a.codec += cw(b[10]);
                                        a.codec += cw(b[11]);
                                    } else {
                                        a.codec = "avc1.4d400d";
                                    }
                                } else if (/^mp4[a,v]$/i.test(a.codec)) {
                                    b = i.subarray(28);
                                    g = aY(b.subarray(4, 8));
                                    if (g === "esds" && b.length > 20 && b[19] !== 0) {
                                        a.codec += "." + cw(b[19]);
                                        a.codec += "." + cw((b[20] >>> 2) & 0x3f).replace(/^0/, "");
                                    } else {
                                        a.codec = "mp4a.40.2";
                                    }
                                } else {
                                    a.codec = a.codec.toLowerCase();
                                }
                            }
                        }
                        var n = a$(d, [
                            "mdia",
                            "mdhd"
                        ])[0];
                        if (n) {
                            a.timescale = T(n);
                        }
                        c.push(a);
                    });
                    return c;
                };
                var cx = {
                    findBox: a$,
                    parseType: aY,
                    timescale: O,
                    startTime: P,
                    compositionStartTime: Q,
                    videoTrackIds: R,
                    tracks: S,
                    getTimescaleFromMediaHeader: T
                };
                var cy = function c(b) {
                    var a = b[1] & 0x1f;
                    a <<= 8;
                    a |= b[2];
                    return a;
                };
                var a4 = function b(a) {
                    return !!(a[1] & 0x40);
                };
                var cz = function c(a) {
                    var b = 0;
                    if ((a[3] & 0x30) >>> 4 > 0x01) {
                        b += a[4] + 1;
                    }
                    return b;
                };
                var a5 = function d(c, a) {
                    var b = cy(c);
                    if (b === 0) {
                        return "pat";
                    } else if (b === a) {
                        return "pmt";
                    } else if (a) {
                        return "pes";
                    }
                    return null;
                };
                var a6 = function d(a) {
                    var c = a4(a);
                    var b = 4 + cz(a);
                    if (c) {
                        b += a[b] + 1;
                    }
                    return (((a[b + 10] & 0x1f) << 8) | a[b + 11]);
                };
                var a7 = function j(a) {
                    var e = {};
                    var i = a4(a);
                    var b = 4 + cz(a);
                    if (i) {
                        b += a[b] + 1;
                    }
                    if (!(a[b + 5] & 0x01)) {
                        return;
                    }
                    var f, g, h;
                    f = ((a[b + 1] & 0x0f) << 8) | a[b + 2];
                    g = 3 + f - 4;
                    h = ((a[b + 10] & 0x0f) << 8) | a[b + 11];
                    var d = 12 + h;
                    while(d < g){
                        var c = b + d;
                        e[((a[c + 1] & 0x1f) << 8) | a[c + 2]] = a[c];
                        d += (((a[c + 3] & 0x0f) << 8) | a[c + 4]) + 5;
                    }
                    return e;
                };
                var a8 = function e(a, b) {
                    var c = cy(a);
                    var d = b[c];
                    switch(d){
                        case m.H264_STREAM_TYPE:
                            return "video";
                        case m.ADTS_STREAM_TYPE:
                            return "audio";
                        case m.METADATA_STREAM_TYPE:
                            return "timed-metadata";
                        default:
                            return null;
                    }
                };
                var a9 = function f(a) {
                    var e = a4(a);
                    if (!e) {
                        return null;
                    }
                    var b = 4 + cz(a);
                    if (b >= a.byteLength) {
                        return null;
                    }
                    var c = null;
                    var d;
                    d = a[b + 7];
                    if (d & 0xc0) {
                        c = {};
                        c.pts = ((a[b + 9] & 0x0e) << 27) | ((a[b + 10] & 0xff) << 20) | ((a[b + 11] & 0xfe) << 12) | ((a[b + 12] & 0xff) << 5) | ((a[b + 13] & 0xfe) >>> 3);
                        c.pts *= 4;
                        c.pts += (a[b + 13] & 0x06) >>> 1;
                        c.dts = c.pts;
                        if (d & 0x40) {
                            c.dts = ((a[b + 14] & 0x0e) << 27) | ((a[b + 15] & 0xff) << 20) | ((a[b + 16] & 0xfe) << 12) | ((a[b + 17] & 0xff) << 5) | ((a[b + 18] & 0xfe) >>> 3);
                            c.dts *= 4;
                            c.dts += (a[b + 18] & 0x06) >>> 1;
                        }
                    }
                    return c;
                };
                var cA = function b(a) {
                    switch(a){
                        case 0x05:
                            return "slice_layer_without_partitioning_rbsp_idr";
                        case 0x06:
                            return "sei_rbsp";
                        case 0x07:
                            return "seq_parameter_set_rbsp";
                        case 0x08:
                            return "pic_parameter_set_rbsp";
                        case 0x09:
                            return "access_unit_delimiter_rbsp";
                        default:
                            return null;
                    }
                };
                var ba = function h(f) {
                    var g = 4 + cz(f);
                    var b = f.subarray(g);
                    var a = 0;
                    var c = 0;
                    var e = false;
                    var d;
                    for(; c < b.byteLength - 3; c++){
                        if (b[c + 2] === 1) {
                            a = c + 5;
                            break;
                        }
                    }
                    while(a < b.byteLength){
                        switch(b[a]){
                            case 0:
                                if (b[a - 1] !== 0) {
                                    a += 2;
                                    break;
                                } else if (b[a - 2] !== 0) {
                                    a++;
                                    break;
                                }
                                if (c + 3 !== a - 2) {
                                    d = cA(b[c + 3] & 0x1f);
                                    if (d === "slice_layer_without_partitioning_rbsp_idr") {
                                        e = true;
                                    }
                                }
                                do {
                                    a++;
                                }while (b[a] !== 1 && a < b.length)
                                c = a - 2;
                                a += 3;
                                break;
                            case 1:
                                if (b[a - 1] !== 0 || b[a - 2] !== 0) {
                                    a += 3;
                                    break;
                                }
                                d = cA(b[c + 3] & 0x1f);
                                if (d === "slice_layer_without_partitioning_rbsp_idr") {
                                    e = true;
                                }
                                c = a - 2;
                                a += 3;
                                break;
                            default:
                                a += 3;
                                break;
                        }
                    }
                    b = b.subarray(c);
                    a -= c;
                    c = 0;
                    if (b && b.byteLength > 3) {
                        d = cA(b[c + 3] & 0x1f);
                        if (d === "slice_layer_without_partitioning_rbsp_idr") {
                            e = true;
                        }
                    }
                    return e;
                };
                var bb = {
                    parseType: a5,
                    parsePat: a6,
                    parsePmt: a7,
                    parsePayloadUnitStartIndicator: a4,
                    parsePesType: a8,
                    parsePesTime: a9,
                    videoPacketContainsKeyFrame: ba
                };
                var cB = K.handleRollover;
                var U = {};
                U.ts = bb;
                U.aac = N;
                var cC = g.ONE_SECOND_IN_TS;
                var cD = 188, cE = 0x47;
                var cF = function h(b, c) {
                    var d = 0, a = cD, e, f;
                    while(a < b.byteLength){
                        if (b[d] === cE && b[a] === cE) {
                            e = b.subarray(d, a);
                            f = U.ts.parseType(e, c.pid);
                            switch(f){
                                case "pat":
                                    c.pid = U.ts.parsePat(e);
                                    break;
                                case "pmt":
                                    var g = U.ts.parsePmt(e);
                                    c.table = c.table || {};
                                    Object.keys(g).forEach(function(a) {
                                        c.table[a] = g[a];
                                    });
                                    break;
                            }
                            d += cD;
                            a += cD;
                            continue;
                        }
                        d++;
                        a++;
                    }
                };
                var bc = function l(b, g, k) {
                    var c = 0, a = cD, d, h, i, j, e;
                    var f = false;
                    while(a <= b.byteLength){
                        if (b[c] === cE && (b[a] === cE || a === b.byteLength)) {
                            d = b.subarray(c, a);
                            h = U.ts.parseType(d, g.pid);
                            switch(h){
                                case "pes":
                                    i = U.ts.parsePesType(d, g.table);
                                    j = U.ts.parsePayloadUnitStartIndicator(d);
                                    if (i === "audio" && j) {
                                        e = U.ts.parsePesTime(d);
                                        if (e) {
                                            e.type = "audio";
                                            k.audio.push(e);
                                            f = true;
                                        }
                                    }
                                    break;
                            }
                            if (f) {
                                break;
                            }
                            c += cD;
                            a += cD;
                            continue;
                        }
                        c++;
                        a++;
                    }
                    a = b.byteLength;
                    c = a - cD;
                    f = false;
                    while(c >= 0){
                        if (b[c] === cE && (b[a] === cE || a === b.byteLength)) {
                            d = b.subarray(c, a);
                            h = U.ts.parseType(d, g.pid);
                            switch(h){
                                case "pes":
                                    i = U.ts.parsePesType(d, g.table);
                                    j = U.ts.parsePayloadUnitStartIndicator(d);
                                    if (i === "audio" && j) {
                                        e = U.ts.parsePesTime(d);
                                        if (e) {
                                            e.type = "audio";
                                            k.audio.push(e);
                                            f = true;
                                        }
                                    }
                                    break;
                            }
                            if (f) {
                                break;
                            }
                            c -= cD;
                            a -= cD;
                            continue;
                        }
                        c--;
                        a--;
                    }
                };
                var cG = function q(d, j, g) {
                    var c = 0, b = cD, a, k, l, i, e, m, n, o;
                    var h = false;
                    var f = {
                        data: [],
                        size: 0
                    };
                    while(b < d.byteLength){
                        if (d[c] === cE && d[b] === cE) {
                            a = d.subarray(c, b);
                            k = U.ts.parseType(a, j.pid);
                            switch(k){
                                case "pes":
                                    l = U.ts.parsePesType(a, j.table);
                                    i = U.ts.parsePayloadUnitStartIndicator(a);
                                    if (l === "video") {
                                        if (i && !h) {
                                            e = U.ts.parsePesTime(a);
                                            if (e) {
                                                e.type = "video";
                                                g.video.push(e);
                                                h = true;
                                            }
                                        }
                                        if (!g.firstKeyFrame) {
                                            if (i) {
                                                if (f.size !== 0) {
                                                    m = new Uint8Array(f.size);
                                                    n = 0;
                                                    while(f.data.length){
                                                        o = f.data.shift();
                                                        m.set(o, n);
                                                        n += o.byteLength;
                                                    }
                                                    if (U.ts.videoPacketContainsKeyFrame(m)) {
                                                        var p = U.ts.parsePesTime(m);
                                                        if (p) {
                                                            g.firstKeyFrame = p;
                                                            g.firstKeyFrame.type = "video";
                                                        } else {
                                                            console.warn("Failed to extract PTS/DTS from PES at first keyframe. " + "This could be an unusual TS segment, or else mux.js did not " + "parse your TS segment correctly. If you know your TS " + "segments do contain PTS/DTS on keyframes please file a bug " + "report! You can try ffprobe to double check for yourself.");
                                                        }
                                                    }
                                                    f.size = 0;
                                                }
                                            }
                                            f.data.push(a);
                                            f.size += a.byteLength;
                                        }
                                    }
                                    break;
                            }
                            if (h && g.firstKeyFrame) {
                                break;
                            }
                            c += cD;
                            b += cD;
                            continue;
                        }
                        c++;
                        b++;
                    }
                    b = d.byteLength;
                    c = b - cD;
                    h = false;
                    while(c >= 0){
                        if (d[c] === cE && d[b] === cE) {
                            a = d.subarray(c, b);
                            k = U.ts.parseType(a, j.pid);
                            switch(k){
                                case "pes":
                                    l = U.ts.parsePesType(a, j.table);
                                    i = U.ts.parsePayloadUnitStartIndicator(a);
                                    if (l === "video" && i) {
                                        e = U.ts.parsePesTime(a);
                                        if (e) {
                                            e.type = "video";
                                            g.video.push(e);
                                            h = true;
                                        }
                                    }
                                    break;
                            }
                            if (h) {
                                break;
                            }
                            c -= cD;
                            b -= cD;
                            continue;
                        }
                        c--;
                        b--;
                    }
                };
                var cH = function f(a, e) {
                    if (a.audio && a.audio.length) {
                        var d = e;
                        if (typeof d === "undefined" || isNaN(d)) {
                            d = a.audio[0].dts;
                        }
                        a.audio.forEach(function(a) {
                            a.dts = cB(a.dts, d);
                            a.pts = cB(a.pts, d);
                            a.dtsTime = a.dts / cC;
                            a.ptsTime = a.pts / cC;
                        });
                    }
                    if (a.video && a.video.length) {
                        var c = e;
                        if (typeof c === "undefined" || isNaN(c)) {
                            c = a.video[0].dts;
                        }
                        a.video.forEach(function(a) {
                            a.dts = cB(a.dts, c);
                            a.pts = cB(a.pts, c);
                            a.dtsTime = a.dts / cC;
                            a.ptsTime = a.pts / cC;
                        });
                        if (a.firstKeyFrame) {
                            var b = a.firstKeyFrame;
                            b.dts = cB(b.dts, c);
                            b.pts = cB(b.pts, c);
                            b.dtsTime = b.dts / cC;
                            b.ptsTime = b.pts / cC;
                        }
                    }
                };
                var cI = function l(b) {
                    var e = false, h = 0, f = null, d = null, c = 0, a = 0, g;
                    while(b.length - a >= 3){
                        var j = U.aac.parseType(b, a);
                        switch(j){
                            case "timed-metadata":
                                if (b.length - a < 10) {
                                    e = true;
                                    break;
                                }
                                c = U.aac.parseId3TagSize(b, a);
                                if (c > b.length) {
                                    e = true;
                                    break;
                                }
                                if (d === null) {
                                    g = b.subarray(a, a + c);
                                    d = U.aac.parseAacTimestamp(g);
                                }
                                a += c;
                                break;
                            case "audio":
                                if (b.length - a < 7) {
                                    e = true;
                                    break;
                                }
                                c = U.aac.parseAdtsSize(b, a);
                                if (c > b.length) {
                                    e = true;
                                    break;
                                }
                                if (f === null) {
                                    g = b.subarray(a, a + c);
                                    f = U.aac.parseSampleRate(g);
                                }
                                h++;
                                a += c;
                                break;
                            default:
                                a++;
                                break;
                        }
                        if (e) {
                            return null;
                        }
                    }
                    if (f === null || d === null) {
                        return null;
                    }
                    var i = cC / f;
                    var k = {
                        audio: [
                            {
                                type: "audio",
                                dts: d,
                                pts: d
                            },
                            {
                                type: "audio",
                                dts: d + h * 1024 * i,
                                pts: d + h * 1024 * i
                            }, 
                        ]
                    };
                    return k;
                };
                var cJ = function f(c) {
                    var b = {
                        pid: null,
                        table: null
                    };
                    var a = {};
                    cF(c, b);
                    for(var d in b.table){
                        if (b.table.hasOwnProperty(d)) {
                            var e = b.table[d];
                            switch(e){
                                case m.H264_STREAM_TYPE:
                                    a.video = [];
                                    cG(c, b, a);
                                    if (a.video.length === 0) {
                                        delete a.video;
                                    }
                                    break;
                                case m.ADTS_STREAM_TYPE:
                                    a.audio = [];
                                    bc(c, b, a);
                                    if (a.audio.length === 0) {
                                        delete a.audio;
                                    }
                                    break;
                            }
                        }
                    }
                    return a;
                };
                var bd = function e(b, c) {
                    var d = U.aac.isLikelyAacData(b);
                    var a;
                    if (d) {
                        a = cI(b);
                    } else {
                        a = cJ(b);
                    }
                    if (!a || (!a.audio && !a.video)) {
                        return null;
                    }
                    cH(a, c);
                    return a;
                };
                var cK = {
                    inspect: bd,
                    parseAudioPes_: bc
                };
                var cL = function b(c, a) {
                    a.on("data", function(a) {
                        var b = a.initSegment;
                        a.initSegment = {
                            data: b.buffer,
                            byteOffset: b.byteOffset,
                            byteLength: b.byteLength
                        };
                        var d = a.data;
                        a.data = d.buffer;
                        c.postMessage({
                            action: "data",
                            segment: a,
                            byteOffset: d.byteOffset,
                            byteLength: d.byteLength
                        }, [
                            a.data
                        ]);
                    });
                    a.on("done", function(a) {
                        c.postMessage({
                            action: "done"
                        });
                    });
                    a.on("gopInfo", function(a) {
                        c.postMessage({
                            action: "gopInfo",
                            gopInfo: a
                        });
                    });
                    a.on("videoSegmentTimingInfo", function(a) {
                        var b = {
                            start: {
                                decode: g.videoTsToSeconds(a.start.dts),
                                presentation: g.videoTsToSeconds(a.start.pts)
                            },
                            end: {
                                decode: g.videoTsToSeconds(a.end.dts),
                                presentation: g.videoTsToSeconds(a.end.pts)
                            },
                            baseMediaDecodeTime: g.videoTsToSeconds(a.baseMediaDecodeTime)
                        };
                        if (a.prependedContentDuration) {
                            b.prependedContentDuration = g.videoTsToSeconds(a.prependedContentDuration);
                        }
                        c.postMessage({
                            action: "videoSegmentTimingInfo",
                            videoSegmentTimingInfo: b
                        });
                    });
                    a.on("audioSegmentTimingInfo", function(a) {
                        var b = {
                            start: {
                                decode: g.videoTsToSeconds(a.start.dts),
                                presentation: g.videoTsToSeconds(a.start.pts)
                            },
                            end: {
                                decode: g.videoTsToSeconds(a.end.dts),
                                presentation: g.videoTsToSeconds(a.end.pts)
                            },
                            baseMediaDecodeTime: g.videoTsToSeconds(a.baseMediaDecodeTime)
                        };
                        if (a.prependedContentDuration) {
                            b.prependedContentDuration = g.videoTsToSeconds(a.prependedContentDuration);
                        }
                        c.postMessage({
                            action: "audioSegmentTimingInfo",
                            audioSegmentTimingInfo: b
                        });
                    });
                    a.on("id3Frame", function(a) {
                        c.postMessage({
                            action: "id3Frame",
                            id3Frame: a
                        });
                    });
                    a.on("caption", function(a) {
                        c.postMessage({
                            action: "caption",
                            caption: a
                        });
                    });
                    a.on("trackinfo", function(a) {
                        c.postMessage({
                            action: "trackinfo",
                            trackInfo: a
                        });
                    });
                    a.on("audioTimingInfo", function(a) {
                        c.postMessage({
                            action: "audioTimingInfo",
                            audioTimingInfo: {
                                start: g.videoTsToSeconds(a.start),
                                end: g.videoTsToSeconds(a.end)
                            }
                        });
                    });
                    a.on("videoTimingInfo", function(a) {
                        c.postMessage({
                            action: "videoTimingInfo",
                            videoTimingInfo: {
                                start: g.videoTsToSeconds(a.start),
                                end: g.videoTsToSeconds(a.end)
                            }
                        });
                    });
                    a.on("log", function(a) {
                        c.postMessage({
                            action: "log",
                            log: a
                        });
                    });
                };
                var cM = (function() {
                    function b(a, b) {
                        this.options = b || {};
                        this.self = a;
                        this.init();
                    }
                    var a = b.prototype;
                    a.init = function a() {
                        if (this.transmuxer) {
                            this.transmuxer.dispose();
                        }
                        this.transmuxer = new cg.Transmuxer(this.options);
                        cL(this.self, this.transmuxer);
                    };
                    a.pushMp4Captions = function d(a) {
                        if (!this.captionParser) {
                            this.captionParser = new cu();
                            this.captionParser.init();
                        }
                        var c = new Uint8Array(a.data, a.byteOffset, a.byteLength);
                        var b = this.captionParser.parse(c, a.trackIds, a.timescales);
                        this.self.postMessage({
                            action: "mp4Captions",
                            captions: (b && b.captions) || [],
                            logs: (b && b.logs) || [],
                            data: c.buffer
                        }, [
                            c.buffer
                        ]);
                    };
                    a.probeMp4StartTime = function e(b) {
                        var c = b.timescales, a = b.data;
                        var d = cx.startTime(c, a);
                        this.self.postMessage({
                            action: "probeMp4StartTime",
                            startTime: d,
                            data: a
                        }, [
                            a.buffer
                        ]);
                    };
                    a.probeMp4Tracks = function d(b) {
                        var a = b.data;
                        var c = cx.tracks(a);
                        this.self.postMessage({
                            action: "probeMp4Tracks",
                            tracks: c,
                            data: a
                        }, [
                            a.buffer
                        ]);
                    };
                    a.probeTs = function h(e) {
                        var c = e.data, d = e.baseStartTime;
                        var f = typeof d === "number" && !isNaN(d) ? d * g.ONE_SECOND_IN_TS : void 0;
                        var a = cK.inspect(c, f);
                        var b = null;
                        if (a) {
                            b = {
                                hasVideo: (a.video && a.video.length === 2) || false,
                                hasAudio: (a.audio && a.audio.length === 2) || false
                            };
                            if (b.hasVideo) {
                                b.videoStart = a.video[0].ptsTime;
                            }
                            if (b.hasAudio) {
                                b.audioStart = a.audio[0].ptsTime;
                            }
                        }
                        this.self.postMessage({
                            action: "probeTs",
                            result: b,
                            data: c
                        }, [
                            c.buffer
                        ]);
                    };
                    a.clearAllMp4Captions = function a() {
                        if (this.captionParser) {
                            this.captionParser.clearAllCaptions();
                        }
                    };
                    a.clearParsedMp4Captions = function a() {
                        if (this.captionParser) {
                            this.captionParser.clearParsedCaptions();
                        }
                    };
                    a.push = function c(a) {
                        var b = new Uint8Array(a.data, a.byteOffset, a.byteLength);
                        this.transmuxer.push(b);
                    };
                    a.reset = function a() {
                        this.transmuxer.reset();
                    };
                    a.setTimestampOffset = function c(a) {
                        var b = a.timestampOffset || 0;
                        this.transmuxer.setBaseMediaDecodeTime(Math.round(g.secondsToVideoTs(b)));
                    };
                    a.setAudioAppendStart = function b(a) {
                        this.transmuxer.setAudioAppendStart(Math.ceil(g.secondsToVideoTs(a.appendStart)));
                    };
                    a.setRemux = function b(a) {
                        this.transmuxer.setRemux(a.remux);
                    };
                    a.flush = function a(b) {
                        this.transmuxer.flush();
                        self.postMessage({
                            action: "done",
                            type: "transmuxed"
                        });
                    };
                    a.endTimeline = function a() {
                        this.transmuxer.endTimeline();
                        self.postMessage({
                            action: "endedtimeline",
                            type: "transmuxed"
                        });
                    };
                    a.alignGopsWith = function b(a) {
                        this.transmuxer.alignGopsWith(a.gopsToAlignWith.slice());
                    };
                    return b;
                })();
                self.onmessage = function(a) {
                    if (a.data.action === "init" && a.data.options) {
                        this.messageHandlers = new cM(self, a.data.options);
                        return;
                    }
                    if (!this.messageHandlers) {
                        this.messageHandlers = new cM(self);
                    }
                    if (a.data && a.data.action && a.data.action !== "init") {
                        if (this.messageHandlers[a.data.action]) {
                            this.messageHandlers[a.data.action](a.data);
                        }
                    }
                };
            }));
            var gV = a2(dl);
            var gW = function n(b, h, i) {
                var a = b.data.segment, j = a.type, c = a.initSegment, k = a.captions, l = a.captionStreams, m = a.metadata, f = a.videoFrameDtsTime, g = a.videoFramePtsTime;
                h.buffer.push({
                    captions: k,
                    captionStreams: l,
                    metadata: m
                });
                var d = b.data.segment.boxes || {
                    data: b.data.segment.data
                };
                var e = {
                    type: j,
                    data: new Uint8Array(d.data, d.data.byteOffset, d.data.byteLength),
                    initSegment: new Uint8Array(c.data, c.byteOffset, c.byteLength)
                };
                if (typeof f !== "undefined") {
                    e.videoFrameDtsTime = f;
                }
                if (typeof g !== "undefined") {
                    e.videoFramePtsTime = g;
                }
                i(e);
            };
            var gX = function d(a) {
                var b = a.transmuxedData, c = a.callback;
                b.buffer = [];
                c(b);
            };
            var gY = function c(a, b) {
                b.gopInfo = a.data.gopInfo;
            };
            var gZ = function k(a) {
                var b = a.transmuxer, c = a.bytes, d = a.audioAppendStart, e = a.gopsToAlignWith, f = a.remux, l = a.onData, m = a.onTrackInfo, n = a.onAudioTimingInfo, o = a.onVideoTimingInfo, p = a.onVideoSegmentTimingInfo, q = a.onAudioSegmentTimingInfo, r = a.onId3, s = a.onCaptions, t = a.onDone, u = a.onEndedTimeline, v = a.onTransmuxerLog, g = a.isEndOfTimeline;
                var w = {
                    buffer: []
                };
                var x = g;
                var i = function d(c) {
                    if (b.currentTransmux !== a) {
                        return;
                    }
                    if (c.data.action === "data") {
                        gW(c, w, l);
                    }
                    if (c.data.action === "trackinfo") {
                        m(c.data.trackInfo);
                    }
                    if (c.data.action === "gopInfo") {
                        gY(c, w);
                    }
                    if (c.data.action === "audioTimingInfo") {
                        n(c.data.audioTimingInfo);
                    }
                    if (c.data.action === "videoTimingInfo") {
                        o(c.data.videoTimingInfo);
                    }
                    if (c.data.action === "videoSegmentTimingInfo") {
                        p(c.data.videoSegmentTimingInfo);
                    }
                    if (c.data.action === "audioSegmentTimingInfo") {
                        q(c.data.audioSegmentTimingInfo);
                    }
                    if (c.data.action === "id3Frame") {
                        r([
                            c.data.id3Frame
                        ], c.data.id3Frame.dispatchType);
                    }
                    if (c.data.action === "caption") {
                        s(c.data.caption);
                    }
                    if (c.data.action === "endedtimeline") {
                        x = false;
                        u();
                    }
                    if (c.data.action === "log") {
                        v(c.data.log);
                    }
                    if (c.data.type !== "transmuxed") {
                        return;
                    }
                    if (x) {
                        return;
                    }
                    b.onmessage = null;
                    gX({
                        transmuxedData: w,
                        callback: t
                    });
                    g$(b);
                };
                b.onmessage = i;
                if (d) {
                    b.postMessage({
                        action: "setAudioAppendStart",
                        appendStart: d
                    });
                }
                if (Array.isArray(e)) {
                    b.postMessage({
                        action: "alignGopsWith",
                        gopsToAlignWith: e
                    });
                }
                if (typeof f !== "undefined") {
                    b.postMessage({
                        action: "setRemux",
                        remux: f
                    });
                }
                if (c.byteLength) {
                    var h = c instanceof ArrayBuffer ? c : c.buffer;
                    var j = c instanceof ArrayBuffer ? 0 : c.byteOffset;
                    b.postMessage({
                        action: "push",
                        data: h,
                        byteOffset: j,
                        byteLength: c.byteLength
                    }, [
                        h
                    ]);
                }
                if (g) {
                    b.postMessage({
                        action: "endTimeline"
                    });
                }
                b.postMessage({
                    action: "flush"
                });
            };
            var g$ = function b(a) {
                a.currentTransmux = null;
                if (a.transmuxQueue.length) {
                    a.currentTransmux = a.transmuxQueue.shift();
                    if (typeof a.currentTransmux === "function") {
                        a.currentTransmux();
                    } else {
                        gZ(a.currentTransmux);
                    }
                }
            };
            var g_ = function c(a, b) {
                a.postMessage({
                    action: b
                });
                g$(a);
            };
            var g0 = function c(b, a) {
                if (!a.currentTransmux) {
                    a.currentTransmux = b;
                    g_(a, b);
                    return;
                }
                a.transmuxQueue.push(g_.bind(null, a, b));
            };
            var dm = function b(a) {
                g0("reset", a);
            };
            var dn = function b(a) {
                g0("endTimeline", a);
            };
            var dp = function b(a) {
                if (!a.transmuxer.currentTransmux) {
                    a.transmuxer.currentTransmux = a;
                    gZ(a);
                    return;
                }
                a.transmuxer.transmuxQueue.push(a);
            };
            var dq = function c(b) {
                var a = new gV();
                a.currentTransmux = null;
                a.transmuxQueue = [];
                var d = a.terminate;
                a.terminate = function() {
                    a.currentTransmux = null;
                    a.transmuxQueue.length = 0;
                    return d.call(a);
                };
                a.postMessage({
                    action: "init",
                    options: b
                });
                return a;
            };
            var g1 = {
                reset: dm,
                endTimeline: dn,
                transmux: dp,
                createTransmuxer: dq
            };
            var g2 = function g(a) {
                var c = a.transmuxer;
                var h = a.endAction || a.action;
                var i = a.callback;
                var b = (0, ah.Z)({}, a, {
                    endAction: null,
                    transmuxer: null,
                    callback: null
                });
                var e = function d(b) {
                    if (b.data.action !== h) {
                        return;
                    }
                    c.removeEventListener("message", d);
                    if (b.data.data) {
                        b.data.data = new Uint8Array(b.data.data, a.byteOffset || 0, a.byteLength || b.data.data.byteLength);
                        if (a.data) {
                            a.data = b.data.data;
                        }
                    }
                    i(b.data);
                };
                c.addEventListener("message", e);
                if (a.data) {
                    var d = a.data instanceof ArrayBuffer;
                    b.byteOffset = d ? 0 : a.data.byteOffset;
                    b.byteLength = a.data.byteLength;
                    var f = [
                        d ? a.data : a.data.buffer, 
                    ];
                    c.postMessage(b, f);
                } else {
                    c.postMessage(b);
                }
            };
            var g3 = {
                FAILURE: 2,
                TIMEOUT: -101,
                ABORTED: -102
            };
            var g4 = function b(a) {
                a.forEach(function(a) {
                    a.abort();
                });
            };
            var g5 = function b(a) {
                return {
                    bandwidth: a.bandwidth,
                    bytesReceived: a.bytesReceived || 0,
                    roundTripTime: a.roundTripTime || 0
                };
            };
            var g6 = function e(b) {
                var c = b.target;
                var d = Date.now() - c.requestTime;
                var a = {
                    bandwidth: Infinity,
                    bytesReceived: 0,
                    roundTripTime: d || 0
                };
                a.bytesReceived = b.loaded;
                a.bandwidth = Math.floor((a.bytesReceived / a.roundTripTime) * 8 * 1000);
                return a;
            };
            var g7 = function c(b, a) {
                if (a.timedout) {
                    return {
                        status: a.status,
                        message: "HLS request timed-out at URL: " + a.uri,
                        code: g3.TIMEOUT,
                        xhr: a
                    };
                }
                if (a.aborted) {
                    return {
                        status: a.status,
                        message: "HLS request aborted at URL: " + a.uri,
                        code: g3.ABORTED,
                        xhr: a
                    };
                }
                if (b) {
                    return {
                        status: a.status,
                        message: "HLS request errored at URL: " + a.uri,
                        code: g3.FAILURE,
                        xhr: a
                    };
                }
                if (a.responseType === "arraybuffer" && a.response.byteLength === 0) {
                    return {
                        status: a.status,
                        message: "Empty HLS response at URL: " + a.uri,
                        code: g3.FAILURE,
                        xhr: a
                    };
                }
                return null;
            };
            var g8 = function a(b, c, d) {
                return function(i, a) {
                    var g = a.response;
                    var h = g7(i, a);
                    if (h) {
                        return d(h, b);
                    }
                    if (g.byteLength !== 16) {
                        return d({
                            status: a.status,
                            message: "Invalid HLS key at URL: " + a.uri,
                            code: g3.FAILURE,
                            xhr: a
                        }, b);
                    }
                    var e = new DataView(g);
                    var j = new Uint32Array([
                        e.getUint32(0),
                        e.getUint32(4),
                        e.getUint32(8),
                        e.getUint32(12), 
                    ]);
                    for(var f = 0; f < c.length; f++){
                        c[f].bytes = j;
                    }
                    return d(null, b);
                };
            };
            var g9 = function e(a, c) {
                var b = (0, dR.Xm)(a.map.bytes);
                if (b !== "mp4") {
                    var d = a.map.resolvedUri || a.map.uri;
                    return c({
                        internal: true,
                        message: "Found unsupported " + (b || "unknown") + " container for initialization segment at URL: " + d,
                        code: g3.FAILURE
                    });
                }
                g2({
                    action: "probeMp4Tracks",
                    data: a.map.bytes,
                    transmuxer: a.transmuxer,
                    callback: function f(b) {
                        var d = b.tracks, e = b.data;
                        a.map.bytes = e;
                        d.forEach(function(b) {
                            a.map.tracks = a.map.tracks || {};
                            if (a.map.tracks[b.type]) {
                                return;
                            }
                            a.map.tracks[b.type] = b;
                            if (typeof b.id === "number" && b.timescale) {
                                a.map.timescales = a.map.timescales || {};
                                a.map.timescales[b.id] = b.timescale;
                            }
                        });
                        return c(null);
                    }
                });
            };
            var ha = function b(a) {
                var c = a.segment, d = a.finishProcessingFn;
                return function(f, a) {
                    var b = g7(f, a);
                    if (b) {
                        return d(b, c);
                    }
                    var e = new Uint8Array(a.response);
                    if (c.map.key) {
                        c.map.encryptedBytes = e;
                        return d(null, c);
                    }
                    c.map.bytes = e;
                    g9(c, function(b) {
                        if (b) {
                            b.xhr = a;
                            b.status = a.status;
                            return d(b, c);
                        }
                        d(null, c);
                    });
                };
            };
            var hb = function b(a) {
                var c = a.segment, d = a.finishProcessingFn, e = a.responseType;
                return function(g, a) {
                    var b = g7(g, a);
                    if (b) {
                        return d(b, c);
                    }
                    var f = e === "arraybuffer" || !a.responseText ? a.response : gS(a.responseText.substring(c.lastReachedChar || 0));
                    c.stats = g5(a);
                    if (c.key) {
                        c.encryptedBytes = new Uint8Array(f);
                    } else {
                        c.bytes = new Uint8Array(f);
                    }
                    return d(null, c);
                };
            };
            var hc = function f(a) {
                var b = a.segment, e = a.bytes, g = a.trackInfoFn, c = a.timingInfoFn, h = a.videoSegmentTimingInfoFn, i = a.audioSegmentTimingInfoFn, j = a.id3Fn, k = a.captionsFn, l = a.isEndOfTimeline, m = a.endedTimelineFn, n = a.dataFn, o = a.doneFn, p = a.onTransmuxerLog;
                var d = (b.map && b.map.tracks) || {};
                var q = Boolean(d.audio && d.video);
                var r = c.bind(null, b, "audio", "start");
                var s = c.bind(null, b, "audio", "end");
                var t = c.bind(null, b, "video", "start");
                var u = c.bind(null, b, "video", "end");
                var v = function a() {
                    return dp({
                        bytes: e,
                        transmuxer: b.transmuxer,
                        audioAppendStart: b.audioAppendStart,
                        gopsToAlignWith: b.gopsToAlignWith,
                        remux: q,
                        onData: function c(a) {
                            a.type = a.type === "combined" ? "video" : a.type;
                            n(b, a);
                        },
                        onTrackInfo: function c(a) {
                            if (g) {
                                if (q) {
                                    a.isMuxed = true;
                                }
                                g(b, a);
                            }
                        },
                        onAudioTimingInfo: function b(a) {
                            if (r && typeof a.start !== "undefined") {
                                r(a.start);
                                r = null;
                            }
                            if (s && typeof a.end !== "undefined") {
                                s(a.end);
                            }
                        },
                        onVideoTimingInfo: function b(a) {
                            if (t && typeof a.start !== "undefined") {
                                t(a.start);
                                t = null;
                            }
                            if (u && typeof a.end !== "undefined") {
                                u(a.end);
                            }
                        },
                        onVideoSegmentTimingInfo: function b(a) {
                            h(a);
                        },
                        onAudioSegmentTimingInfo: function b(a) {
                            i(a);
                        },
                        onId3: function d(a, c) {
                            j(b, a, c);
                        },
                        onCaptions: function c(a) {
                            k(b, [
                                a
                            ]);
                        },
                        isEndOfTimeline: l,
                        onEndedTimeline: function a() {
                            m();
                        },
                        onTransmuxerLog: p,
                        onDone: function c(a) {
                            if (!o) {
                                return;
                            }
                            a.type = a.type === "combined" ? "video" : a.type;
                            o(null, b, a);
                        }
                    });
                };
                g2({
                    action: "probeTs",
                    transmuxer: b.transmuxer,
                    data: e,
                    baseStartTime: b.baseStartTime,
                    callback: function d(c) {
                        b.bytes = e = c.data;
                        var a = c.result;
                        if (a) {
                            g(b, {
                                hasAudio: a.hasAudio,
                                hasVideo: a.hasVideo,
                                isMuxed: q
                            });
                            g = null;
                            if (a.hasAudio && !q) {
                                r(a.audioStart);
                            }
                            if (a.hasVideo) {
                                t(a.videoStart);
                            }
                            r = null;
                            t = null;
                        }
                        v();
                    }
                });
            };
            var hd = function s(c) {
                var a = c.segment, i = c.bytes, f = c.trackInfoFn, j = c.timingInfoFn, k = c.videoSegmentTimingInfoFn, l = c.audioSegmentTimingInfoFn, m = c.id3Fn, n = c.captionsFn, o = c.isEndOfTimeline, p = c.endedTimelineFn, q = c.dataFn, g = c.doneFn, r = c.onTransmuxerLog;
                var h = new Uint8Array(i);
                if ((0, dR.cz)(h)) {
                    a.isFmp4 = true;
                    var d = a.map.tracks;
                    var e = {
                        isFmp4: true,
                        hasVideo: !!d.video,
                        hasAudio: !!d.audio
                    };
                    if (d.audio && d.audio.codec && d.audio.codec !== "enca") {
                        e.audioCodec = d.audio.codec;
                    }
                    if (d.video && d.video.codec && d.video.codec !== "encv") {
                        e.videoCodec = d.video.codec;
                    }
                    if (d.video && d.audio) {
                        e.isMuxed = true;
                    }
                    f(a, e);
                    var t = function c(b) {
                        q(a, {
                            data: h,
                            type: e.hasAudio && !e.isMuxed ? "audio" : "video"
                        });
                        if (b && b.length) {
                            n(a, b);
                        }
                        g(null, a, {});
                    };
                    g2({
                        action: "probeMp4StartTime",
                        timescales: a.map.timescales,
                        data: h,
                        transmuxer: a.transmuxer,
                        callback: function k(f) {
                            var c = f.data, g = f.startTime;
                            i = c.buffer;
                            a.bytes = h = c;
                            if (e.hasAudio && !e.isMuxed) {
                                j(a, "audio", "start", g);
                            }
                            if (e.hasVideo) {
                                j(a, "video", "start", g);
                            }
                            if (!d.video || !c.byteLength || !a.transmuxer) {
                                t();
                                return;
                            }
                            g2({
                                action: "pushMp4Captions",
                                endAction: "mp4Captions",
                                transmuxer: a.transmuxer,
                                data: h,
                                timescales: a.map.timescales,
                                trackIds: [
                                    d.video.id
                                ],
                                callback: function d(c) {
                                    i = c.data.buffer;
                                    a.bytes = h = c.data;
                                    c.logs.forEach(function(a) {
                                        r(b.mergeOptions(a, {
                                            stream: "mp4CaptionParser"
                                        }));
                                    });
                                    t(c.captions);
                                }
                            });
                        }
                    });
                    return;
                }
                if (!a.transmuxer) {
                    g(null, a, {});
                    return;
                }
                if (typeof a.container === "undefined") {
                    a.container = (0, dR.Xm)(h);
                }
                if (a.container !== "ts" && a.container !== "aac") {
                    f(a, {
                        hasAudio: false,
                        hasVideo: false
                    });
                    g(null, a, {});
                    return;
                }
                hc({
                    segment: a,
                    bytes: i,
                    trackInfoFn: f,
                    timingInfoFn: j,
                    videoSegmentTimingInfoFn: k,
                    audioSegmentTimingInfoFn: l,
                    id3Fn: m,
                    captionsFn: n,
                    isEndOfTimeline: o,
                    endedTimelineFn: p,
                    dataFn: q,
                    doneFn: g,
                    onTransmuxerLog: r
                });
            };
            var he = function h(a, i) {
                var f = a.id, b = a.key, d = a.encryptedBytes, e = a.decryptionWorker;
                var g = function c(b) {
                    if (b.data.source === f) {
                        e.removeEventListener("message", c);
                        var a = b.data.decrypted;
                        i(new Uint8Array(a.bytes, a.byteOffset, a.byteLength));
                    }
                };
                e.addEventListener("message", g);
                var c;
                if (b.bytes.slice) {
                    c = b.bytes.slice();
                } else {
                    c = new Uint32Array(Array.prototype.slice.call(b.bytes));
                }
                e.postMessage(dc({
                    source: f,
                    encrypted: d,
                    key: c,
                    iv: b.iv
                }), [
                    d.buffer,
                    c.buffer
                ]);
            };
            var hf = function d(a) {
                var c = a.decryptionWorker, b = a.segment, e = a.trackInfoFn, f = a.timingInfoFn, g = a.videoSegmentTimingInfoFn, h = a.audioSegmentTimingInfoFn, i = a.id3Fn, j = a.captionsFn, k = a.isEndOfTimeline, l = a.endedTimelineFn, m = a.dataFn, n = a.doneFn, o = a.onTransmuxerLog;
                he({
                    id: b.requestId,
                    key: b.key,
                    encryptedBytes: b.encryptedBytes,
                    decryptionWorker: c
                }, function(a) {
                    b.bytes = a;
                    hd({
                        segment: b,
                        bytes: b.bytes,
                        trackInfoFn: e,
                        timingInfoFn: f,
                        videoSegmentTimingInfoFn: g,
                        audioSegmentTimingInfoFn: h,
                        id3Fn: i,
                        captionsFn: j,
                        isEndOfTimeline: k,
                        endedTimelineFn: l,
                        dataFn: m,
                        doneFn: n,
                        onTransmuxerLog: o
                    });
                });
            };
            var hg = function b(a) {
                var c = a.activeXhrs, d = a.decryptionWorker, e = a.trackInfoFn, f = a.timingInfoFn, g = a.videoSegmentTimingInfoFn, h = a.audioSegmentTimingInfoFn, i = a.id3Fn, j = a.captionsFn, k = a.isEndOfTimeline, l = a.endedTimelineFn, m = a.dataFn, n = a.doneFn, o = a.onTransmuxerLog;
                var p = 0;
                var q = false;
                return function(b, a) {
                    if (q) {
                        return;
                    }
                    if (b) {
                        q = true;
                        g4(c);
                        return n(b, a);
                    }
                    p += 1;
                    if (p === c.length) {
                        var r = function b() {
                            if (a.encryptedBytes) {
                                return hf({
                                    decryptionWorker: d,
                                    segment: a,
                                    trackInfoFn: e,
                                    timingInfoFn: f,
                                    videoSegmentTimingInfoFn: g,
                                    audioSegmentTimingInfoFn: h,
                                    id3Fn: i,
                                    captionsFn: j,
                                    isEndOfTimeline: k,
                                    endedTimelineFn: l,
                                    dataFn: m,
                                    doneFn: n,
                                    onTransmuxerLog: o
                                });
                            }
                            hd({
                                segment: a,
                                bytes: a.bytes,
                                trackInfoFn: e,
                                timingInfoFn: f,
                                videoSegmentTimingInfoFn: g,
                                audioSegmentTimingInfoFn: h,
                                id3Fn: i,
                                captionsFn: j,
                                isEndOfTimeline: k,
                                endedTimelineFn: l,
                                dataFn: m,
                                doneFn: n,
                                onTransmuxerLog: o
                            });
                        };
                        a.endOfAllRequests = Date.now();
                        if (a.map && a.map.encryptedBytes && !a.map.bytes) {
                            return he({
                                decryptionWorker: d,
                                id: a.requestId + "-init",
                                encryptedBytes: a.map.encryptedBytes,
                                key: a.map.key
                            }, function(b) {
                                a.map.bytes = b;
                                g9(a, function(b) {
                                    if (b) {
                                        g4(c);
                                        return n(b, a);
                                    }
                                    r();
                                });
                            });
                        }
                        r();
                    }
                };
            };
            var hh = function b(a) {
                var c = a.loadendState, d = a.abortFn;
                return function(a) {
                    var b = a.target;
                    if (b.aborted && d && !c.calledAbortFn) {
                        d();
                        c.calledAbortFn = true;
                    }
                };
            };
            var hi = function c(a) {
                var d = a.segment, e = a.progressFn;
                a.trackInfoFn;
                a.timingInfoFn;
                a.videoSegmentTimingInfoFn;
                a.audioSegmentTimingInfoFn;
                a.id3Fn;
                a.captionsFn;
                a.isEndOfTimeline;
                a.endedTimelineFn;
                a.dataFn;
                return function(a) {
                    var c = a.target;
                    if (c.aborted) {
                        return;
                    }
                    d.stats = b.mergeOptions(d.stats, g6(a));
                    if (!d.stats.firstBytesReceivedAt && d.stats.bytesReceived) {
                        d.stats.firstBytesReceivedAt = Date.now();
                    }
                    return e(a, d);
                };
            };
            var hj = function I(c) {
                var e = c.xhr, f = c.xhrOptions, t = c.decryptionWorker, a = c.segment, J = c.abortFn, u = c.progressFn, h = c.trackInfoFn, i = c.timingInfoFn, j = c.videoSegmentTimingInfoFn, k = c.audioSegmentTimingInfoFn, l = c.id3Fn, m = c.captionsFn, n = c.isEndOfTimeline, o = c.endedTimelineFn, p = c.dataFn, v = c.doneFn, w = c.onTransmuxerLog;
                var d = [];
                var g = hg({
                    activeXhrs: d,
                    decryptionWorker: t,
                    trackInfoFn: h,
                    timingInfoFn: i,
                    videoSegmentTimingInfoFn: j,
                    audioSegmentTimingInfoFn: k,
                    id3Fn: l,
                    captionsFn: m,
                    isEndOfTimeline: n,
                    endedTimelineFn: o,
                    dataFn: p,
                    doneFn: v,
                    onTransmuxerLog: w
                });
                if (a.key && !a.key.bytes) {
                    var q = [
                        a.key
                    ];
                    if (a.map && !a.map.bytes && a.map.key && a.map.key.resolvedUri === a.key.resolvedUri) {
                        q.push(a.map.key);
                    }
                    var x = b.mergeOptions(f, {
                        uri: a.key.resolvedUri,
                        responseType: "arraybuffer"
                    });
                    var y = g8(a, q, g);
                    var z = e(x, y);
                    d.push(z);
                }
                if (a.map && !a.map.bytes) {
                    var A = a.map.key && (!a.key || a.key.resolvedUri !== a.map.key.resolvedUri);
                    if (A) {
                        var B = b.mergeOptions(f, {
                            uri: a.map.key.resolvedUri,
                            responseType: "arraybuffer"
                        });
                        var C = g8(a, [
                            a.map.key
                        ], g);
                        var D = e(B, C);
                        d.push(D);
                    }
                    var E = b.mergeOptions(f, {
                        uri: a.map.resolvedUri,
                        responseType: "arraybuffer",
                        headers: gv(a.map)
                    });
                    var F = ha({
                        segment: a,
                        finishProcessingFn: g
                    });
                    var G = e(E, F);
                    d.push(G);
                }
                var r = b.mergeOptions(f, {
                    uri: (a.part && a.part.resolvedUri) || a.resolvedUri,
                    responseType: "arraybuffer",
                    headers: gv(a)
                });
                var H = hb({
                    segment: a,
                    finishProcessingFn: g,
                    responseType: r.responseType
                });
                var s = e(r, H);
                s.addEventListener("progress", hi({
                    segment: a,
                    progressFn: u,
                    trackInfoFn: h,
                    timingInfoFn: i,
                    videoSegmentTimingInfoFn: j,
                    audioSegmentTimingInfoFn: k,
                    id3Fn: l,
                    captionsFn: m,
                    isEndOfTimeline: n,
                    endedTimelineFn: o,
                    dataFn: p
                }));
                d.push(s);
                var K = {};
                d.forEach(function(a) {
                    a.addEventListener("loadend", hh({
                        loadendState: K,
                        abortFn: J
                    }));
                });
                return function() {
                    return g4(d);
                };
            };
            var hk = a1("CodecUtils");
            var hl = function c(b) {
                var a = b.attributes || {};
                if (a.CODECS) {
                    return (0, dM.kS)(a.CODECS);
                }
            };
            var hm = function d(a, c) {
                var b = c.attributes || {};
                return (a && a.mediaGroups && a.mediaGroups.AUDIO && b.AUDIO && a.mediaGroups.AUDIO[b.AUDIO]);
            };
            var hn = function f(b, c) {
                if (!hm(b, c)) {
                    return true;
                }
                var e = c.attributes || {};
                var a = b.mediaGroups.AUDIO[e.AUDIO];
                for(var d in a){
                    if (!a[d].uri && !a[d].playlists) {
                        return true;
                    }
                }
                return false;
            };
            var ho = function c(b) {
                var a = {};
                b.forEach(function(b) {
                    var c = b.mediaType, d = b.type, e = b.details;
                    a[c] = a[c] || [];
                    a[c].push((0, dM.ws)("" + d + e));
                });
                Object.keys(a).forEach(function(b) {
                    if (a[b].length > 1) {
                        hk("multiple " + b + " codecs found as attributes: " + a[b].join(", ") + ". Setting playlist codecs to null so that we wait for mux.js to probe segments for real codecs.");
                        a[b] = null;
                        return;
                    }
                    a[b] = a[b][0];
                });
                return a;
            };
            var hp = function c(b) {
                var a = 0;
                if (b.audio) {
                    a++;
                }
                if (b.video) {
                    a++;
                }
                return a;
            };
            var hq = function f(b, a) {
                var e = a.attributes || {};
                var c = ho(hl(a) || []);
                if (hm(b, a) && !c.audio) {
                    if (!hn(b, a)) {
                        var d = ho((0, dM.Jg)(b, e.AUDIO) || []);
                        if (d.audio) {
                            c.audio = d.audio;
                        }
                    }
                }
                return c;
            };
            var hr = a1("PlaylistSelector");
            var hs = function c(a) {
                if (!a || !a.playlist) {
                    return;
                }
                var b = a.playlist;
                return JSON.stringify({
                    id: b.id,
                    bandwidth: a.bandwidth,
                    width: a.width,
                    height: a.height,
                    codecs: (b.attributes && b.attributes.CODECS) || ""
                });
            };
            var ht = function d(a, c) {
                if (!a) {
                    return "";
                }
                var b = f().getComputedStyle(a);
                if (!b) {
                    return "";
                }
                return b[c];
            };
            var hu = function b(a, c) {
                var d = a.slice();
                a.sort(function(a, b) {
                    var e = c(a, b);
                    if (e === 0) {
                        return d.indexOf(a) - d.indexOf(b);
                    }
                    return e;
                });
            };
            var dr = function e(c, d) {
                var a;
                var b;
                if (c.attributes.BANDWIDTH) {
                    a = c.attributes.BANDWIDTH;
                }
                a = a || f().Number.MAX_VALUE;
                if (d.attributes.BANDWIDTH) {
                    b = d.attributes.BANDWIDTH;
                }
                b = b || f().Number.MAX_VALUE;
                return a - b;
            };
            var ds = function e(a, b) {
                var c;
                var d;
                if (a.attributes.RESOLUTION && a.attributes.RESOLUTION.width) {
                    c = a.attributes.RESOLUTION.width;
                }
                c = c || f().Number.MAX_VALUE;
                if (b.attributes.RESOLUTION && b.attributes.RESOLUTION.width) {
                    d = b.attributes.RESOLUTION.width;
                }
                d = d || f().Number.MAX_VALUE;
                if (c === d && a.attributes.BANDWIDTH && b.attributes.BANDWIDTH) {
                    return (a.attributes.BANDWIDTH - b.attributes.BANDWIDTH);
                }
                return c - d;
            };
            var hv = function A(l, x, y, z, r, s) {
                if (!l) {
                    return;
                }
                var d = {
                    bandwidth: x,
                    width: y,
                    height: z,
                    limitRenditionByPlayerDimensions: r
                };
                var t = l.playlists;
                if (c8.isAudioOnly(l)) {
                    t = s.getAudioTrackPlaylists_();
                    d.audioOnly = true;
                }
                var a = t.map(function(a) {
                    var b;
                    var c = a.attributes && a.attributes.RESOLUTION && a.attributes.RESOLUTION.width;
                    var d = a.attributes && a.attributes.RESOLUTION && a.attributes.RESOLUTION.height;
                    b = a.attributes && a.attributes.BANDWIDTH;
                    b = b || f().Number.MAX_VALUE;
                    return {
                        bandwidth: b,
                        width: c,
                        height: d,
                        playlist: a
                    };
                });
                hu(a, function(a, b) {
                    return a.bandwidth - b.bandwidth;
                });
                a = a.filter(function(a) {
                    return !c8.isIncompatible(a.playlist);
                });
                var b = a.filter(function(a) {
                    return c8.isEnabled(a.playlist);
                });
                if (!b.length) {
                    b = a.filter(function(a) {
                        return !c8.isDisabled(a.playlist);
                    });
                }
                var e = b.filter(function(a) {
                    return (a.bandwidth * dk.BANDWIDTH_VARIANCE < x);
                });
                var u = e[e.length - 1];
                var g = e.filter(function(a) {
                    return (a.bandwidth === u.bandwidth);
                })[0];
                if (r === false) {
                    var h = g || b[0] || a[0];
                    if (h && h.playlist) {
                        var m = "sortedPlaylistReps";
                        if (g) {
                            m = "bandwidthBestRep";
                        }
                        if (b[0]) {
                            m = "enabledPlaylistReps";
                        }
                        hr("choosing " + hs(h) + " using " + m + " with options", d);
                        return h.playlist;
                    }
                    hr("could not choose a playlist with options", d);
                    return null;
                }
                var i = e.filter(function(a) {
                    return a.width && a.height;
                });
                hu(i, function(a, b) {
                    return a.width - b.width;
                });
                var n = i.filter(function(a) {
                    return (a.width === y && a.height === z);
                });
                u = n[n.length - 1];
                var o = n.filter(function(a) {
                    return (a.bandwidth === u.bandwidth);
                })[0];
                var v;
                var j;
                var p;
                if (!o) {
                    v = i.filter(function(a) {
                        return (a.width > y || a.height > z);
                    });
                    j = v.filter(function(a) {
                        return (a.width === v[0].width && a.height === v[0].height);
                    });
                    u = j[j.length - 1];
                    p = j.filter(function(a) {
                        return (a.bandwidth === u.bandwidth);
                    })[0];
                }
                var q;
                if (s.experimentalLeastPixelDiffSelector) {
                    var w = i.map(function(a) {
                        a.pixelDiff = Math.abs(a.width - y) + Math.abs(a.height - z);
                        return a;
                    });
                    hu(w, function(a, b) {
                        if (a.pixelDiff === b.pixelDiff) {
                            return b.bandwidth - a.bandwidth;
                        }
                        return a.pixelDiff - b.pixelDiff;
                    });
                    q = w[0];
                }
                var k = q || p || o || g || b[0] || a[0];
                if (k && k.playlist) {
                    var c = "sortedPlaylistReps";
                    if (q) {
                        c = "leastPixelDiffRep";
                    } else if (p) {
                        c = "resolutionPlusOneRep";
                    } else if (o) {
                        c = "resolutionBestRep";
                    } else if (g) {
                        c = "bandwidthBestRep";
                    } else if (b[0]) {
                        c = "enabledPlaylistReps";
                    }
                    hr("choosing " + hs(k) + " using " + c + " with options", d);
                    return k.playlist;
                }
                hr("could not choose a playlist with options", d);
                return null;
            };
            var a5 = function b() {
                var a = this.useDevicePixelRatio ? f().devicePixelRatio || 1 : 1;
                return hv(this.playlists.master, this.systemBandwidth, parseInt(ht(this.tech_.el(), "width"), 10) * a, parseInt(ht(this.tech_.el(), "height"), 10) * a, this.limitRenditionByPlayerDimensions, this.masterPlaylistController_);
            };
            var dt = function b(a) {
                var c = -1;
                var d = -1;
                if (a < 0 || a > 1) {
                    throw new Error("Moving average bandwidth decay must be between 0 and 1.");
                }
                return function() {
                    var b = this.useDevicePixelRatio ? f().devicePixelRatio || 1 : 1;
                    if (c < 0) {
                        c = this.systemBandwidth;
                        d = this.systemBandwidth;
                    }
                    if (this.systemBandwidth > 0 && this.systemBandwidth !== d) {
                        c = a * this.systemBandwidth + (1 - a) * c;
                        d = this.systemBandwidth;
                    }
                    return hv(this.playlists.master, c, parseInt(ht(this.tech_.el(), "width"), 10) * b, parseInt(ht(this.tech_.el(), "height"), 10) * b, this.limitRenditionByPlayerDimensions, this.masterPlaylistController_);
                };
            };
            var hw = function h(a) {
                var f = a.master, i = a.currentTime, j = a.bandwidth, k = a.duration, l = a.segmentDuration, m = a.timeUntilRebuffer, n = a.currentTimeline, o = a.syncController;
                var e = f.playlists.filter(function(a) {
                    return !c8.isIncompatible(a);
                });
                var b = e.filter(c8.isEnabled);
                if (!b.length) {
                    b = e.filter(function(a) {
                        return !c8.isDisabled(a);
                    });
                }
                var g = b.filter(c8.hasAttribute.bind(null, "BANDWIDTH"));
                var c = g.map(function(a) {
                    var b = o.getSyncPoint(a, k, n, i);
                    var c = b ? 1 : 2;
                    var d = c8.estimateSegmentRequestTime(l, j, a);
                    var e = d * c - m;
                    return {
                        playlist: a,
                        rebufferingImpact: e
                    };
                });
                var d = c.filter(function(a) {
                    return a.rebufferingImpact <= 0;
                });
                hu(d, function(a, b) {
                    return dr(b.playlist, a.playlist);
                });
                if (d.length) {
                    return d[0];
                }
                hu(c, function(a, b) {
                    return a.rebufferingImpact - b.rebufferingImpact;
                });
                return c[0] || null;
            };
            var du = function c() {
                var d = this;
                var a = this.playlists.master.playlists.filter(c8.isEnabled);
                hu(a, function(a, b) {
                    return dr(a, b);
                });
                var b = a.filter(function(a) {
                    return !!hq(d.playlists.master, a).video;
                });
                return b[0] || null;
            };
            var hx = function c(a) {
                var d = 0;
                var b;
                if (a.bytes) {
                    b = new Uint8Array(a.bytes);
                    a.segments.forEach(function(a) {
                        b.set(a, d);
                        d += a.byteLength;
                    });
                }
                return b;
            };
            var hy = function k(e, b, a) {
                if (!e[a]) {
                    b.trigger({
                        type: "usage",
                        name: "vhs-608"
                    });
                    b.trigger({
                        type: "usage",
                        name: "hls-608"
                    });
                    var c = a;
                    if (/^cc708_/.test(a)) {
                        c = "SERVICE" + a.split("_")[1];
                    }
                    var f = b.textTracks().getTrackById(c);
                    if (f) {
                        e[a] = f;
                    } else {
                        var j = (b.options_.vhs && b.options_.vhs.captionServices) || {};
                        var g = a;
                        var h = a;
                        var i = false;
                        var d = j[c];
                        if (d) {
                            g = d.label;
                            h = d.language;
                            i = d["default"];
                        }
                        e[a] = b.addRemoteTextTrack({
                            kind: "captions",
                            id: c,
                            default: i,
                            label: g,
                            language: h
                        }, false).track;
                    }
                }
            };
            var hz = function c(a) {
                var d = a.inbandTextTracks, b = a.captionArray, e = a.timestampOffset;
                if (!b) {
                    return;
                }
                var g = f().WebKitDataCue || f().VTTCue;
                b.forEach(function(a) {
                    var b = a.stream;
                    d[b].addCue(new g(a.startTime + e, a.endTime + e, a.text));
                });
            };
            var hA = function c(a) {
                Object.defineProperties(a.frame, {
                    id: {
                        get: function c() {
                            b.log.warn("cue.frame.id is deprecated. Use cue.value.key instead.");
                            return a.value.key;
                        }
                    },
                    value: {
                        get: function c() {
                            b.log.warn("cue.frame.value is deprecated. Use cue.value.data instead.");
                            return a.value.data;
                        }
                    },
                    privateData: {
                        get: function c() {
                            b.log.warn("cue.frame.privateData is deprecated. Use cue.value.data instead.");
                            return a.value.data;
                        }
                    }
                });
            };
            var hB = function k(a) {
                var h = a.inbandTextTracks, e = a.metadataArray, l = a.timestampOffset, m = a.videoDuration;
                if (!e) {
                    return;
                }
                var n = f().WebKitDataCue || f().VTTCue;
                var b = h.metadataTrack_;
                if (!b) {
                    return;
                }
                e.forEach(function(c) {
                    var a = c.cueTime + l;
                    if (typeof a !== "number" || f().isNaN(a) || a < 0 || !(a < Infinity)) {
                        return;
                    }
                    c.frames.forEach(function(c) {
                        var d = new n(a, a, c.value || c.url || c.data || "");
                        d.frame = c;
                        d.value = c;
                        hA(d);
                        b.addCue(d);
                    });
                });
                if (!b.cues || !b.cues.length) {
                    return;
                }
                var d = b.cues;
                var g = [];
                for(var c = 0; c < d.length; c++){
                    if (d[c]) {
                        g.push(d[c]);
                    }
                }
                var i = g.reduce(function(a, b) {
                    var c = a[b.startTime] || [];
                    c.push(b);
                    a[b.startTime] = c;
                    return a;
                }, {});
                var j = Object.keys(i).sort(function(a, b) {
                    return Number(a) - Number(b);
                });
                j.forEach(function(a, b) {
                    var c = i[a];
                    var d = Number(j[b + 1]) || m;
                    c.forEach(function(a) {
                        a.endTime = d;
                    });
                });
            };
            var hC = function d(a, b, c) {
                if (a.metadataTrack_) {
                    return;
                }
                a.metadataTrack_ = c.addRemoteTextTrack({
                    kind: "metadata",
                    label: "Timed Metadata"
                }, false).track;
                a.metadataTrack_.inBandMetadataTrackDispatchType = b;
            };
            var hD = function f(d, e, a) {
                var c;
                var b;
                if (!a) {
                    return;
                }
                if (!a.cues) {
                    return;
                }
                c = a.cues.length;
                while(c--){
                    b = a.cues[c];
                    if (b.startTime >= d && b.endTime <= e) {
                        a.removeCue(b);
                    }
                }
            };
            var hE = function g(f) {
                var a = f.cues;
                if (!a) {
                    return;
                }
                for(var c = 0; c < a.length; c++){
                    var d = [];
                    var e = 0;
                    for(var b = 0; b < a.length; b++){
                        if (a[c].startTime === a[b].startTime && a[c].endTime === a[b].endTime && a[c].text === a[b].text) {
                            e++;
                            if (e > 1) {
                                d.push(a[b]);
                            }
                        }
                    }
                    if (d.length) {
                        d.forEach(function(a) {
                            return f.removeCue(a);
                        });
                    }
                }
            };
            var hF = function f(b, c, d) {
                if (typeof c === "undefined" || c === null || !b.length) {
                    return [];
                }
                var e = Math.ceil((c - d + 3) * bh.ONE_SECOND_IN_TS);
                var a;
                for(a = 0; a < b.length; a++){
                    if (b[a].pts > e) {
                        break;
                    }
                }
                return b.slice(a);
            };
            var hG = function f(b, c, d) {
                if (!c.length) {
                    return b;
                }
                if (d) {
                    return c.slice();
                }
                var e = c[0].pts;
                var a = 0;
                for(a; a < b.length; a++){
                    if (b[a].pts >= e) {
                        break;
                    }
                }
                return b.slice(0, a).concat(c);
            };
            var hH = function j(c, f, g, e) {
                var h = Math.ceil((f - e) * bh.ONE_SECOND_IN_TS);
                var i = Math.ceil((g - e) * bh.ONE_SECOND_IN_TS);
                var d = c.slice();
                var b = c.length;
                while(b--){
                    if (c[b].pts <= i) {
                        break;
                    }
                }
                if (b === -1) {
                    return d;
                }
                var a = b + 1;
                while(a--){
                    if (c[a].pts <= h) {
                        break;
                    }
                }
                a = Math.max(a, 0);
                d.splice(a, b - a + 1);
                return d;
            };
            var hI = function g(a, b) {
                if ((!a && !b) || (!a && b) || (a && !b)) {
                    return false;
                }
                if (a === b) {
                    return true;
                }
                var d = Object.keys(a).sort();
                var f = Object.keys(b).sort();
                if (d.length !== f.length) {
                    return false;
                }
                for(var c = 0; c < d.length; c++){
                    var e = d[c];
                    if (e !== f[c]) {
                        return false;
                    }
                    if (a[e] !== b[e]) {
                        return false;
                    }
                }
                return true;
            };
            var hJ = 22;
            var hK = function h(f, b, g) {
                b = b || [];
                var c = [];
                var d = 0;
                for(var a = 0; a < b.length; a++){
                    var e = b[a];
                    if (f === e.timeline) {
                        c.push(a);
                        d += e.duration;
                        if (d > g) {
                            return a;
                        }
                    }
                }
                if (c.length === 0) {
                    return 0;
                }
                return c[c.length - 1];
            };
            var hL = 1;
            var hM = 500;
            var hN = function b(a) {
                return typeof a === "number" && isFinite(a);
            };
            var hO = 1 / 60;
            var hP = function d(c, b, a) {
                if (c !== "main" || !b || !a) {
                    return null;
                }
                if (!a.hasAudio && !a.hasVideo) {
                    return "Neither audio nor video found in segment.";
                }
                if (b.hasVideo && !a.hasVideo) {
                    return ("Only audio found in segment when we expected video." + " We can't switch to audio only from a stream that had video." + " To get rid of this message, please add codec information to the manifest.");
                }
                if (!b.hasVideo && a.hasVideo) {
                    return ("Video found in segment when we expected only audio." + " We can't switch to a stream with video from an audio only stream." + " To get rid of this message, please add codec information to the manifest.");
                }
                return null;
            };
            var hQ = function f(b, c, d) {
                var a = c - dk.BACK_BUFFER_LENGTH;
                if (b.length) {
                    a = Math.max(a, b.start(0));
                }
                var e = c - d;
                return Math.min(e, a);
            };
            var hR = function s(a) {
                var j = a.startOfSegment, k = a.duration, c = a.segment, f = a.part, d = a.playlist, g = d.mediaSequence, l = d.id, h = d.segments, m = h === void 0 ? [] : h, n = a.mediaIndex, i = a.partIndex, o = a.timeline;
                var p = m.length - 1;
                var b = "mediaIndex/partIndex increment";
                if (a.getMediaInfoForTime) {
                    b = "getMediaInfoForTime (" + a.getMediaInfoForTime + ")";
                } else if (a.isSyncRequest) {
                    b = "getSyncSegmentCandidate (isSyncRequest)";
                }
                if (a.independent) {
                    b += " with independent " + a.independent;
                }
                var e = typeof i === "number";
                var q = a.segment.uri ? "segment" : "pre-segment";
                var r = e ? f3({
                    preloadSegment: c
                }) - 1 : 0;
                return (q + " [" + (g + n) + "/" + (g + p) + "]" + (e ? " part [" + i + "/" + r + "]" : "") + (" segment start/end [" + c.start + " => " + c.end + "]") + (e ? " part start/end [" + f.start + " => " + f.end + "]" : "") + (" startOfSegment [" + j + "]") + (" duration [" + k + "]") + (" timeline [" + o + "]") + (" selected by [" + b + "]") + (" playlist [" + l + "]"));
            };
            var hS = function b(a) {
                return a + "TimingInfo";
            };
            var hT = function g(a) {
                var c = a.segmentTimeline, d = a.currentTimeline, e = a.startOfSegment, b = a.buffered, f = a.overrideCheck;
                if (!f && c === d) {
                    return null;
                }
                if (c < d) {
                    return e;
                }
                return b.length ? b.end(b.length - 1) : e;
            };
            var hU = function i(a) {
                var c = a.timelineChangeController, g = a.currentTimeline, b = a.segmentTimeline, d = a.loaderType, h = a.audioDisabled;
                if (g === b) {
                    return false;
                }
                if (d === "audio") {
                    var e = c.lastTimelineChange({
                        type: "main"
                    });
                    return (!e || e.to !== b);
                }
                if (d === "main" && h) {
                    var f = c.pendingTimelineChange({
                        type: "audio"
                    });
                    if (f && f.to === b) {
                        return false;
                    }
                    return true;
                }
                return false;
            };
            var hV = function e(a, b) {
                var c = a && typeof a.start === "number" && typeof a.end === "number" ? a.end - a.start : 0;
                var d = b && typeof b.start === "number" && typeof b.end === "number" ? b.end - b.start : 0;
                return Math.max(c, d);
            };
            var hW = function d(a) {
                var b = a.segmentDuration, c = a.maxDuration;
                if (!b) {
                    return false;
                }
                return (Math.round(b) > c + cT);
            };
            var hX = function h(a, e) {
                if (e !== "hls") {
                    return null;
                }
                var b = hV(a.audioTimingInfo, a.videoTimingInfo);
                if (!b) {
                    return null;
                }
                var c = a.playlist.targetDuration;
                var d = hW({
                    segmentDuration: b,
                    maxDuration: c * 2
                });
                var f = hW({
                    segmentDuration: b,
                    maxDuration: c
                });
                var g = "Segment with index " + a.mediaIndex + " " + ("from playlist " + a.playlist.id + " ") + ("has a duration of " + b + " ") + ("when the reported duration is " + a.duration + " ") + ("and the target duration is " + c + ". ") + "For HLS content, a duration in excess of the target duration may result in " + "playback issues. See the HLS specification section on EXT-X-TARGETDURATION for " + "more details: " + "https://tools.ietf.org/html/draft-pantos-http-live-streaming-23#section-4.3.3.1";
                if (d || f) {
                    return {
                        severity: d ? "warn" : "info",
                        message: g
                    };
                }
                return null;
            };
            var dv = (function(d) {
                (0, dF.Z)(c, d);
                function c(c, e) {
                    var a;
                    a = d.call(this) || this;
                    if (!c) {
                        throw new TypeError("Initialization settings are required");
                    }
                    if (typeof c.currentTime !== "function") {
                        throw new TypeError("No currentTime getter specified");
                    }
                    if (!c.mediaSource) {
                        throw new TypeError("No MediaSource specified");
                    }
                    a.bandwidth = c.bandwidth;
                    a.throughput = {
                        rate: 0,
                        count: 0
                    };
                    a.roundTrip = NaN;
                    a.resetStats_();
                    a.mediaIndex = null;
                    a.partIndex = null;
                    a.hasPlayed_ = c.hasPlayed;
                    a.currentTime_ = c.currentTime;
                    a.seekable_ = c.seekable;
                    a.seeking_ = c.seeking;
                    a.duration_ = c.duration;
                    a.mediaSource_ = c.mediaSource;
                    a.vhs_ = c.vhs;
                    a.loaderType_ = c.loaderType;
                    a.currentMediaInfo_ = void 0;
                    a.startingMediaInfo_ = void 0;
                    a.segmentMetadataTrack_ = c.segmentMetadataTrack;
                    a.goalBufferLength_ = c.goalBufferLength;
                    a.sourceType_ = c.sourceType;
                    a.sourceUpdater_ = c.sourceUpdater;
                    a.inbandTextTracks_ = c.inbandTextTracks;
                    a.state_ = "INIT";
                    a.timelineChangeController_ = c.timelineChangeController;
                    a.shouldSaveSegmentTimingInfo_ = true;
                    a.parse708captions_ = c.parse708captions;
                    a.captionServices_ = c.captionServices;
                    a.experimentalExactManifestTimings = c.experimentalExactManifestTimings;
                    a.checkBufferTimeout_ = null;
                    a.error_ = void 0;
                    a.currentTimeline_ = -1;
                    a.pendingSegment_ = null;
                    a.xhrOptions_ = null;
                    a.pendingSegments_ = [];
                    a.audioDisabled_ = false;
                    a.isPendingTimestampOffset_ = false;
                    a.gopBuffer_ = [];
                    a.timeMapping_ = 0;
                    a.safeAppend_ = b.browser.IE_VERSION >= 11;
                    a.appendInitSegment_ = {
                        audio: true,
                        video: true
                    };
                    a.playlistOfLastInitSegment_ = {
                        audio: null,
                        video: null
                    };
                    a.callQueue_ = [];
                    a.loadQueue_ = [];
                    a.metadataQueue_ = {
                        id3: [],
                        caption: []
                    };
                    a.waitingOnRemove_ = false;
                    a.quotaExceededErrorRetryTimeout_ = null;
                    a.activeInitSegmentId_ = null;
                    a.initSegments_ = {};
                    a.cacheEncryptionKeys_ = c.cacheEncryptionKeys;
                    a.keyCache_ = {};
                    a.decrypter_ = c.decrypter;
                    a.syncController_ = c.syncController;
                    a.syncPoint_ = {
                        segmentIndex: 0,
                        time: 0
                    };
                    a.transmuxer_ = a.createTransmuxer_();
                    a.triggerSyncInfoUpdate_ = function() {
                        return a.trigger("syncinfoupdate");
                    };
                    a.syncController_.on("syncinfoupdate", a.triggerSyncInfoUpdate_);
                    a.mediaSource_.addEventListener("sourceopen", function() {
                        if (!a.isEndOfStream_()) {
                            a.ended_ = false;
                        }
                    });
                    a.fetchAtBuffer_ = false;
                    a.logger_ = a1("SegmentLoader[" + a.loaderType_ + "]");
                    Object.defineProperty((0, dE.Z)(a), "state", {
                        get: function a() {
                            return this.state_;
                        },
                        set: function b(a) {
                            if (a !== this.state_) {
                                this.logger_(this.state_ + " -> " + a);
                                this.state_ = a;
                                this.trigger("statechange");
                            }
                        }
                    });
                    a.sourceUpdater_.on("ready", function() {
                        if (a.hasEnoughInfoToAppend_()) {
                            a.processCallQueue_();
                        }
                    });
                    if (a.loaderType_ === "main") {
                        a.timelineChangeController_.on("pendingtimelinechange", function() {
                            if (a.hasEnoughInfoToAppend_()) {
                                a.processCallQueue_();
                            }
                        });
                    }
                    if (a.loaderType_ === "audio") {
                        a.timelineChangeController_.on("timelinechange", function() {
                            if (a.hasEnoughInfoToLoad_()) {
                                a.processLoadQueue_();
                            }
                            if (a.hasEnoughInfoToAppend_()) {
                                a.processCallQueue_();
                            }
                        });
                    }
                    return a;
                }
                var a = c.prototype;
                a.createTransmuxer_ = function a() {
                    return g1.createTransmuxer({
                        remux: false,
                        alignGopsAtEnd: this.safeAppend_,
                        keepOriginalTimestamps: true,
                        parse708captions: this.parse708captions_,
                        captionServices: this.captionServices_
                    });
                };
                a.resetStats_ = function a() {
                    this.mediaBytesTransferred = 0;
                    this.mediaRequests = 0;
                    this.mediaRequestsAborted = 0;
                    this.mediaRequestsTimedout = 0;
                    this.mediaRequestsErrored = 0;
                    this.mediaTransferDuration = 0;
                    this.mediaSecondsLoaded = 0;
                    this.mediaAppends = 0;
                };
                a.dispose = function a() {
                    this.trigger("dispose");
                    this.state = "DISPOSED";
                    this.pause();
                    this.abort_();
                    if (this.transmuxer_) {
                        this.transmuxer_.terminate();
                    }
                    this.resetStats_();
                    if (this.checkBufferTimeout_) {
                        f().clearTimeout(this.checkBufferTimeout_);
                    }
                    if (this.syncController_ && this.triggerSyncInfoUpdate_) {
                        this.syncController_.off("syncinfoupdate", this.triggerSyncInfoUpdate_);
                    }
                    this.off();
                };
                a.setAudio = function b(a) {
                    this.audioDisabled_ = !a;
                    if (a) {
                        this.appendInitSegment_.audio = true;
                    } else {
                        this.sourceUpdater_.removeAudio(0, this.duration_());
                    }
                };
                a.abort = function a() {
                    if (this.state !== "WAITING") {
                        if (this.pendingSegment_) {
                            this.pendingSegment_ = null;
                        }
                        return;
                    }
                    this.abort_();
                    this.state = "READY";
                    if (!this.paused()) {
                        this.monitorBuffer_();
                    }
                };
                a.abort_ = function a() {
                    if (this.pendingSegment_ && this.pendingSegment_.abortRequests) {
                        this.pendingSegment_.abortRequests();
                    }
                    this.pendingSegment_ = null;
                    this.callQueue_ = [];
                    this.loadQueue_ = [];
                    this.metadataQueue_.id3 = [];
                    this.metadataQueue_.caption = [];
                    this.timelineChangeController_.clearPendingTimelineChange(this.loaderType_);
                    this.waitingOnRemove_ = false;
                    f().clearTimeout(this.quotaExceededErrorRetryTimeout_);
                    this.quotaExceededErrorRetryTimeout_ = null;
                };
                a.checkForAbort_ = function b(a) {
                    if (this.state === "APPENDING" && !this.pendingSegment_) {
                        this.state = "READY";
                        return true;
                    }
                    if (!this.pendingSegment_ || this.pendingSegment_.requestId !== a) {
                        return true;
                    }
                    return false;
                };
                a.error = function b(a) {
                    if (typeof a !== "undefined") {
                        this.logger_("error occurred:", a);
                        this.error_ = a;
                    }
                    this.pendingSegment_ = null;
                    return this.error_;
                };
                a.endOfStream = function a() {
                    this.ended_ = true;
                    if (this.transmuxer_) {
                        g1.reset(this.transmuxer_);
                    }
                    this.gopBuffer_.length = 0;
                    this.pause();
                    this.trigger("ended");
                };
                a.buffered_ = function f() {
                    var a = this.getMediaInfo_();
                    if (!this.sourceUpdater_ || !a) {
                        return b.createTimeRanges();
                    }
                    if (this.loaderType_ === "main") {
                        var d = a.hasAudio, c = a.hasVideo, e = a.isMuxed;
                        if (c && d && !this.audioDisabled_ && !e) {
                            return this.sourceUpdater_.buffered();
                        }
                        if (c) {
                            return this.sourceUpdater_.videoBuffered();
                        }
                    }
                    return this.sourceUpdater_.audioBuffered();
                };
                a.initSegmentForMap = function e(a, b) {
                    if (b === void 0) {
                        b = false;
                    }
                    if (!a) {
                        return null;
                    }
                    var d = dd(a);
                    var c = this.initSegments_[d];
                    if (b && !c && a.bytes) {
                        this.initSegments_[d] = c = {
                            resolvedUri: a.resolvedUri,
                            byterange: a.byterange,
                            bytes: a.bytes,
                            tracks: a.tracks,
                            timescales: a.timescales
                        };
                    }
                    return c || a;
                };
                a.segmentKey = function f(a, c) {
                    if (c === void 0) {
                        c = false;
                    }
                    if (!a) {
                        return null;
                    }
                    var d = de(a);
                    var b = this.keyCache_[d];
                    if (this.cacheEncryptionKeys_ && c && !b && a.bytes) {
                        this.keyCache_[d] = b = {
                            resolvedUri: a.resolvedUri,
                            bytes: a.bytes
                        };
                    }
                    var e = {
                        resolvedUri: (b || a).resolvedUri
                    };
                    if (b) {
                        e.bytes = b.bytes;
                    }
                    return e;
                };
                a.couldBeginLoading_ = function a() {
                    return this.playlist_ && !this.paused();
                };
                a.load = function a() {
                    this.monitorBuffer_();
                    if (!this.playlist_) {
                        return;
                    }
                    if (this.state === "INIT" && this.couldBeginLoading_()) {
                        return this.init_();
                    }
                    if (!this.couldBeginLoading_() || (this.state !== "READY" && this.state !== "INIT")) {
                        return;
                    }
                    this.state = "READY";
                };
                a.init_ = function a() {
                    this.state = "READY";
                    this.resetEverything();
                    return this.monitorBuffer_();
                };
                a.playlist = function i(b, d) {
                    if (d === void 0) {
                        d = {};
                    }
                    if (!b) {
                        return;
                    }
                    var c = this.playlist_;
                    var a = this.pendingSegment_;
                    this.playlist_ = b;
                    this.xhrOptions_ = d;
                    if (this.state === "INIT") {
                        b.syncInfo = {
                            mediaSequence: b.mediaSequence,
                            time: 0
                        };
                        if (this.loaderType_ === "main") {
                            this.syncController_.setDateTimeMappingForStart(b);
                        }
                    }
                    var e = null;
                    if (c) {
                        if (c.id) {
                            e = c.id;
                        } else if (c.uri) {
                            e = c.uri;
                        }
                    }
                    this.logger_("playlist update [" + e + " => " + (b.id || b.uri) + "]");
                    this.trigger("syncinfoupdate");
                    if (this.state === "INIT" && this.couldBeginLoading_()) {
                        return this.init_();
                    }
                    if (!c || c.uri !== b.uri) {
                        if (this.mediaIndex !== null) {
                            if (!b.endList) {
                                this.resetLoader();
                            } else {
                                this.resyncLoader();
                            }
                        }
                        this.currentMediaInfo_ = void 0;
                        this.trigger("playlistupdate");
                        return;
                    }
                    var f = b.mediaSequence - c.mediaSequence;
                    this.logger_("live window shift [" + f + "]");
                    if (this.mediaIndex !== null) {
                        this.mediaIndex -= f;
                        if (this.mediaIndex < 0) {
                            this.mediaIndex = null;
                            this.partIndex = null;
                        } else {
                            var g = this.playlist_.segments[this.mediaIndex];
                            if (this.partIndex && (!g.parts || !g.parts.length || !g.parts[this.partIndex])) {
                                var h = this.mediaIndex;
                                this.logger_("currently processing part (index " + this.partIndex + ") no longer exists.");
                                this.resetLoader();
                                this.mediaIndex = h;
                            }
                        }
                    }
                    if (a) {
                        a.mediaIndex -= f;
                        if (a.mediaIndex < 0) {
                            a.mediaIndex = null;
                            a.partIndex = null;
                        } else {
                            if (a.mediaIndex >= 0) {
                                a.segment = b.segments[a.mediaIndex];
                            }
                            if (a.partIndex >= 0 && a.segment.parts) {
                                a.part = a.segment.parts[a.partIndex];
                            }
                        }
                    }
                    this.syncController_.saveExpiredSegmentInfo(c, b);
                };
                a.pause = function a() {
                    if (this.checkBufferTimeout_) {
                        f().clearTimeout(this.checkBufferTimeout_);
                        this.checkBufferTimeout_ = null;
                    }
                };
                a.paused = function a() {
                    return this.checkBufferTimeout_ === null;
                };
                a.resetEverything = function b(a) {
                    this.ended_ = false;
                    this.appendInitSegment_ = {
                        audio: true,
                        video: true
                    };
                    this.resetLoader();
                    this.remove(0, Infinity, a);
                    if (this.transmuxer_) {
                        this.transmuxer_.postMessage({
                            action: "clearAllMp4Captions"
                        });
                        this.transmuxer_.postMessage({
                            action: "reset"
                        });
                    }
                };
                a.resetLoader = function a() {
                    this.fetchAtBuffer_ = false;
                    this.resyncLoader();
                };
                a.resyncLoader = function a() {
                    if (this.transmuxer_) {
                        g1.reset(this.transmuxer_);
                    }
                    this.mediaIndex = null;
                    this.partIndex = null;
                    this.syncPoint_ = null;
                    this.isPendingTimestampOffset_ = false;
                    this.callQueue_ = [];
                    this.loadQueue_ = [];
                    this.metadataQueue_.id3 = [];
                    this.metadataQueue_.caption = [];
                    this.abort();
                    if (this.transmuxer_) {
                        this.transmuxer_.postMessage({
                            action: "clearParsedMp4Captions"
                        });
                    }
                };
                a.remove = function h(b, a, e, c) {
                    if (e === void 0) {
                        e = function a() {};
                    }
                    if (c === void 0) {
                        c = false;
                    }
                    if (a === Infinity) {
                        a = this.duration_();
                    }
                    if (a <= b) {
                        this.logger_("skipping remove because end ${end} is <= start ${start}");
                        return;
                    }
                    if (!this.sourceUpdater_ || !this.getMediaInfo_()) {
                        this.logger_("skipping remove because no source updater or starting media info");
                        return;
                    }
                    var f = 1;
                    var d = function a() {
                        f--;
                        if (f === 0) {
                            e();
                        }
                    };
                    if (c || !this.audioDisabled_) {
                        f++;
                        this.sourceUpdater_.removeAudio(b, a, d);
                    }
                    if (c || this.loaderType_ === "main") {
                        this.gopBuffer_ = hH(this.gopBuffer_, b, a, this.timeMapping_);
                        f++;
                        this.sourceUpdater_.removeVideo(b, a, d);
                    }
                    for(var g in this.inbandTextTracks_){
                        hD(b, a, this.inbandTextTracks_[g]);
                    }
                    hD(b, a, this.segmentMetadataTrack_);
                    d();
                };
                a.monitorBuffer_ = function a() {
                    if (this.checkBufferTimeout_) {
                        f().clearTimeout(this.checkBufferTimeout_);
                    }
                    this.checkBufferTimeout_ = f().setTimeout(this.monitorBufferTick_.bind(this), 1);
                };
                a.monitorBufferTick_ = function a() {
                    if (this.state === "READY") {
                        this.fillBuffer_();
                    }
                    if (this.checkBufferTimeout_) {
                        f().clearTimeout(this.checkBufferTimeout_);
                    }
                    this.checkBufferTimeout_ = f().setTimeout(this.monitorBufferTick_.bind(this), hM);
                };
                a.fillBuffer_ = function b() {
                    if (this.sourceUpdater_.updating()) {
                        return;
                    }
                    var a = this.chooseNextRequest_();
                    if (!a) {
                        return;
                    }
                    if (typeof a.timestampOffset === "number") {
                        this.isPendingTimestampOffset_ = false;
                        this.timelineChangeController_.pendingTimelineChange({
                            type: this.loaderType_,
                            from: this.currentTimeline_,
                            to: a.timeline
                        });
                    }
                    this.loadSegment_(a);
                };
                a.isEndOfStream_ = function g(b, a, c) {
                    if (b === void 0) {
                        b = this.mediaIndex;
                    }
                    if (a === void 0) {
                        a = this.playlist_;
                    }
                    if (c === void 0) {
                        c = this.partIndex;
                    }
                    if (!a || !this.mediaSource_) {
                        return false;
                    }
                    var d = typeof b === "number" && a.segments[b];
                    var e = b + 1 === a.segments.length;
                    var f = !d || !d.parts || c + 1 === d.parts.length;
                    return (a.endList && this.mediaSource_.readyState === "open" && e && f);
                };
                a.chooseNextRequest_ = function s() {
                    var j = this.buffered_();
                    var e = f$(j) || 0;
                    var h = f_(j, this.currentTime_());
                    var m = !this.hasPlayed_() && h >= 1;
                    var n = h >= this.goalBufferLength_();
                    var c = this.playlist_.segments;
                    if (!c.length || m || n) {
                        return null;
                    }
                    this.syncPoint_ = this.syncPoint_ || this.syncController_.getSyncPoint(this.playlist_, this.duration_(), this.currentTimeline_, this.currentTime_());
                    var a = {
                        partIndex: null,
                        mediaIndex: null,
                        startOfSegment: null,
                        playlist: this.playlist_,
                        isSyncRequest: Boolean(!this.syncPoint_)
                    };
                    if (a.isSyncRequest) {
                        a.mediaIndex = hK(this.currentTimeline_, c, e);
                    } else if (this.mediaIndex !== null) {
                        var f = c[this.mediaIndex];
                        var k = typeof this.partIndex === "number" ? this.partIndex : -1;
                        a.startOfSegment = f.end ? f.end : e;
                        if (f.parts && f.parts[k + 1]) {
                            a.mediaIndex = this.mediaIndex;
                            a.partIndex = k + 1;
                        } else {
                            a.mediaIndex = this.mediaIndex + 1;
                        }
                    } else {
                        var i = c8.getMediaInfoForTime({
                            experimentalExactManifestTimings: this.experimentalExactManifestTimings,
                            playlist: this.playlist_,
                            currentTime: this.fetchAtBuffer_ ? e : this.currentTime_(),
                            startingPartIndex: this.syncPoint_.partIndex,
                            startingSegmentIndex: this.syncPoint_.segmentIndex,
                            startTime: this.syncPoint_.time
                        }), o = i.segmentIndex, p = i.startTime, q = i.partIndex;
                        a.getMediaInfoForTime = this.fetchAtBuffer_ ? "bufferedEnd " + e : "currentTime " + this.currentTime_();
                        a.mediaIndex = o;
                        a.startOfSegment = p;
                        a.partIndex = q;
                    }
                    var b = c[a.mediaIndex];
                    var g = b && typeof a.partIndex === "number" && b.parts && b.parts[a.partIndex];
                    if (!b || (typeof a.partIndex === "number" && !g)) {
                        return null;
                    }
                    if (typeof a.partIndex !== "number" && b.parts) {
                        a.partIndex = 0;
                        g = b.parts[0];
                    }
                    if (!h && g && !g.independent) {
                        if (a.partIndex === 0) {
                            var d = c[a.mediaIndex - 1];
                            var l = d.parts && d.parts.length && d.parts[d.parts.length - 1];
                            if (l && l.independent) {
                                a.mediaIndex -= 1;
                                a.partIndex = d.parts.length - 1;
                                a.independent = "previous segment";
                            }
                        } else if (b.parts[a.partIndex - 1].independent) {
                            a.partIndex -= 1;
                            a.independent = "previous part";
                        }
                    }
                    var r = this.mediaSource_ && this.mediaSource_.readyState === "ended";
                    if (a.mediaIndex >= c.length - 1 && r && !this.seeking_()) {
                        return null;
                    }
                    return this.generateSegmentInfo_(a);
                };
                a.generateSegmentInfo_ = function o(a) {
                    var k = a.independent, f = a.playlist, g = a.mediaIndex, h = a.startOfSegment, l = a.isSyncRequest, e = a.partIndex, i = a.forceTimestampOffset, m = a.getMediaInfoForTime;
                    var b = f.segments[g];
                    var c = typeof e === "number" && b.parts[e];
                    var d = {
                        requestId: "segment-loader-" + Math.random(),
                        uri: (c && c.resolvedUri) || b.resolvedUri,
                        mediaIndex: g,
                        partIndex: c ? e : null,
                        isSyncRequest: l,
                        startOfSegment: h,
                        playlist: f,
                        bytes: null,
                        encryptedBytes: null,
                        timestampOffset: null,
                        timeline: b.timeline,
                        duration: (c && c.duration) || b.duration,
                        segment: b,
                        part: c,
                        byteLength: 0,
                        transmuxer: this.transmuxer_,
                        getMediaInfoForTime: m,
                        independent: k
                    };
                    var n = typeof i !== "undefined" ? i : this.isPendingTimestampOffset_;
                    d.timestampOffset = this.timestampOffsetForSegment_({
                        segmentTimeline: b.timeline,
                        currentTimeline: this.currentTimeline_,
                        startOfSegment: h,
                        buffered: this.buffered_(),
                        overrideCheck: n
                    });
                    var j = f$(this.sourceUpdater_.audioBuffered());
                    if (typeof j === "number") {
                        d.audioAppendStart = j - this.sourceUpdater_.audioTimestampOffset();
                    }
                    if (this.sourceUpdater_.videoBuffered().length) {
                        d.gopsToAlignWith = hF(this.gopBuffer_, this.currentTime_() - this.sourceUpdater_.videoTimestampOffset(), this.timeMapping_);
                    }
                    return d;
                };
                a.timestampOffsetForSegment_ = function b(a) {
                    return hT(a);
                };
                a.earlyAbortWhenNeeded_ = function k(c) {
                    if (this.vhs_.tech_.paused() || !this.xhrOptions_.timeout || !this.playlist_.attributes.BANDWIDTH) {
                        return;
                    }
                    if (Date.now() - (c.firstBytesReceivedAt || Date.now()) < 1000) {
                        return;
                    }
                    var d = this.currentTime_();
                    var e = c.bandwidth;
                    var f = this.pendingSegment_.duration;
                    var g = c8.estimateSegmentRequestTime(f, e, this.playlist_, c.bytesReceived);
                    var b = fX(this.buffered_(), d, this.vhs_.tech_.playbackRate()) - 1;
                    if (g <= b) {
                        return;
                    }
                    var a = hw({
                        master: this.vhs_.playlists.master,
                        currentTime: d,
                        bandwidth: e,
                        duration: this.duration_(),
                        segmentDuration: f,
                        timeUntilRebuffer: b,
                        currentTimeline: this.currentTimeline_,
                        syncController: this.syncController_
                    });
                    if (!a) {
                        return;
                    }
                    var i = g - b;
                    var j = i - a.rebufferingImpact;
                    var h = 0.5;
                    if (b <= cT) {
                        h = 1;
                    }
                    if (!a.playlist || a.playlist.uri === this.playlist_.uri || j < h) {
                        return;
                    }
                    this.bandwidth = a.playlist.attributes.BANDWIDTH * dk.BANDWIDTH_VARIANCE + 1;
                    this.trigger("earlyabort");
                };
                a.handleAbort_ = function b(a) {
                    this.logger_("Aborting " + hR(a));
                    this.mediaRequestsAborted += 1;
                };
                a.handleProgress_ = function b(c, a) {
                    this.earlyAbortWhenNeeded_(a.stats);
                    if (this.checkForAbort_(a.requestId)) {
                        return;
                    }
                    this.trigger("progress");
                };
                a.handleTrackInfo_ = function c(b, a) {
                    this.earlyAbortWhenNeeded_(b.stats);
                    if (this.checkForAbort_(b.requestId)) {
                        return;
                    }
                    if (this.checkForIllegalMediaSwitch(a)) {
                        return;
                    }
                    a = a || {};
                    if (!hI(this.currentMediaInfo_, a)) {
                        this.appendInitSegment_ = {
                            audio: true,
                            video: true
                        };
                        this.startingMediaInfo_ = a;
                        this.currentMediaInfo_ = a;
                        this.logger_("trackinfo update", a);
                        this.trigger("trackinfo");
                    }
                    if (this.checkForAbort_(b.requestId)) {
                        return;
                    }
                    this.pendingSegment_.trackInfo = a;
                    if (this.hasEnoughInfoToAppend_()) {
                        this.processCallQueue_();
                    }
                };
                a.handleTimingInfo_ = function g(c, d, e, f) {
                    this.earlyAbortWhenNeeded_(c.stats);
                    if (this.checkForAbort_(c.requestId)) {
                        return;
                    }
                    var a = this.pendingSegment_;
                    var b = hS(d);
                    a[b] = a[b] || {};
                    a[b][e] = f;
                    this.logger_("timinginfo: " + d + " - " + e + " - " + f);
                    if (this.hasEnoughInfoToAppend_()) {
                        this.processCallQueue_();
                    }
                };
                a.handleCaptions_ = function e(a, b) {
                    var f = this;
                    this.earlyAbortWhenNeeded_(a.stats);
                    if (this.checkForAbort_(a.requestId)) {
                        return;
                    }
                    if (b.length === 0) {
                        this.logger_("SegmentLoader received no captions from a caption event");
                        return;
                    }
                    var c = this.pendingSegment_;
                    if (!c.hasAppendedData_) {
                        this.metadataQueue_.caption.push(this.handleCaptions_.bind(this, a, b));
                        return;
                    }
                    var g = this.sourceUpdater_.videoTimestampOffset() === null ? this.sourceUpdater_.audioTimestampOffset() : this.sourceUpdater_.videoTimestampOffset();
                    var d = {};
                    b.forEach(function(a) {
                        d[a.stream] = d[a.stream] || {
                            startTime: Infinity,
                            captions: [],
                            endTime: 0
                        };
                        var b = d[a.stream];
                        b.startTime = Math.min(b.startTime, a.startTime + g);
                        b.endTime = Math.max(b.endTime, a.endTime + g);
                        b.captions.push(a);
                    });
                    Object.keys(d).forEach(function(a) {
                        var b = d[a], e = b.startTime, h = b.endTime, i = b.captions;
                        var c = f.inbandTextTracks_;
                        f.logger_("adding cues from " + e + " -> " + h + " for " + a);
                        hy(c, f.vhs_.tech_, a);
                        hD(e, h, c[a]);
                        hz({
                            captionArray: i,
                            inbandTextTracks: c,
                            timestampOffset: g
                        });
                    });
                    if (this.transmuxer_) {
                        this.transmuxer_.postMessage({
                            action: "clearParsedMp4Captions"
                        });
                    }
                };
                a.handleId3_ = function f(a, b, c) {
                    this.earlyAbortWhenNeeded_(a.stats);
                    if (this.checkForAbort_(a.requestId)) {
                        return;
                    }
                    var d = this.pendingSegment_;
                    if (!d.hasAppendedData_) {
                        this.metadataQueue_.id3.push(this.handleId3_.bind(this, a, b, c));
                        return;
                    }
                    var e = this.sourceUpdater_.videoTimestampOffset() === null ? this.sourceUpdater_.audioTimestampOffset() : this.sourceUpdater_.videoTimestampOffset();
                    hC(this.inbandTextTracks_, c, this.vhs_.tech_);
                    hB({
                        inbandTextTracks: this.inbandTextTracks_,
                        metadataArray: b,
                        timestampOffset: e,
                        videoDuration: this.duration_()
                    });
                };
                a.processMetadataQueue_ = function a() {
                    this.metadataQueue_.id3.forEach(function(a) {
                        return a();
                    });
                    this.metadataQueue_.caption.forEach(function(a) {
                        return a();
                    });
                    this.metadataQueue_.id3 = [];
                    this.metadataQueue_.caption = [];
                };
                a.processCallQueue_ = function b() {
                    var a = this.callQueue_;
                    this.callQueue_ = [];
                    a.forEach(function(a) {
                        return a();
                    });
                };
                a.processLoadQueue_ = function b() {
                    var a = this.loadQueue_;
                    this.loadQueue_ = [];
                    a.forEach(function(a) {
                        return a();
                    });
                };
                a.hasEnoughInfoToLoad_ = function b() {
                    if (this.loaderType_ !== "audio") {
                        return true;
                    }
                    var a = this.pendingSegment_;
                    if (!a) {
                        return false;
                    }
                    if (!this.getCurrentMediaInfo_()) {
                        return true;
                    }
                    if (hU({
                        timelineChangeController: this.timelineChangeController_,
                        currentTimeline: this.currentTimeline_,
                        segmentTimeline: a.timeline,
                        loaderType: this.loaderType_,
                        audioDisabled: this.audioDisabled_
                    })) {
                        return false;
                    }
                    return true;
                };
                a.getCurrentMediaInfo_ = function b(a) {
                    if (a === void 0) {
                        a = this.pendingSegment_;
                    }
                    return ((a && a.trackInfo) || this.currentMediaInfo_);
                };
                a.getMediaInfo_ = function b(a) {
                    if (a === void 0) {
                        a = this.pendingSegment_;
                    }
                    return (this.getCurrentMediaInfo_(a) || this.startingMediaInfo_);
                };
                a.hasEnoughInfoToAppend_ = function f() {
                    if (!this.sourceUpdater_.ready()) {
                        return false;
                    }
                    if (this.waitingOnRemove_ || this.quotaExceededErrorRetryTimeout_) {
                        return false;
                    }
                    var a = this.pendingSegment_;
                    var b = this.getCurrentMediaInfo_();
                    if (!a || !b) {
                        return false;
                    }
                    var c = b.hasAudio, d = b.hasVideo, e = b.isMuxed;
                    if (d && !a.videoTimingInfo) {
                        return false;
                    }
                    if (c && !this.audioDisabled_ && !e && !a.audioTimingInfo) {
                        return false;
                    }
                    if (hU({
                        timelineChangeController: this.timelineChangeController_,
                        currentTimeline: this.currentTimeline_,
                        segmentTimeline: a.timeline,
                        loaderType: this.loaderType_,
                        audioDisabled: this.audioDisabled_
                    })) {
                        return false;
                    }
                    return true;
                };
                a.handleData_ = function h(b, c) {
                    this.earlyAbortWhenNeeded_(b.stats);
                    if (this.checkForAbort_(b.requestId)) {
                        return;
                    }
                    if (this.callQueue_.length || !this.hasEnoughInfoToAppend_()) {
                        this.callQueue_.push(this.handleData_.bind(this, b, c));
                        return;
                    }
                    var a = this.pendingSegment_;
                    this.setTimeMapping_(a.timeline);
                    this.updateMediaSecondsLoaded_(a.part || a.segment);
                    if (this.mediaSource_.readyState === "closed") {
                        return;
                    }
                    if (b.map) {
                        b.map = this.initSegmentForMap(b.map, true);
                        a.segment.map = b.map;
                    }
                    if (b.key) {
                        this.segmentKey(b.key, true);
                    }
                    a.isFmp4 = b.isFmp4;
                    a.timingInfo = a.timingInfo || {};
                    if (a.isFmp4) {
                        this.trigger("fmp4");
                        a.timingInfo.start = a[hS(c.type)].start;
                    } else {
                        var d = this.getCurrentMediaInfo_();
                        var e = this.loaderType_ === "main" && d && d.hasVideo;
                        var f;
                        if (e) {
                            f = a.videoTimingInfo.start;
                        }
                        a.timingInfo.start = this.trueSegmentStart_({
                            currentStart: a.timingInfo.start,
                            playlist: a.playlist,
                            mediaIndex: a.mediaIndex,
                            currentVideoTimestampOffset: this.sourceUpdater_.videoTimestampOffset(),
                            useVideoTimingInfo: e,
                            firstVideoFrameTimeForData: f,
                            videoTimingInfo: a.videoTimingInfo,
                            audioTimingInfo: a.audioTimingInfo
                        });
                    }
                    this.updateAppendInitSegmentStatus(a, c.type);
                    this.updateSourceBufferTimestampOffset_(a);
                    if (a.isSyncRequest) {
                        this.updateTimingInfoEnd_(a);
                        this.syncController_.saveSegmentTimingInfo({
                            segmentInfo: a,
                            shouldSaveTimelineMapping: this.loaderType_ === "main"
                        });
                        var g = this.chooseNextRequest_();
                        if (g.mediaIndex !== a.mediaIndex || g.partIndex !== a.partIndex) {
                            this.logger_("sync segment was incorrect, not appending");
                            return;
                        }
                        this.logger_("sync segment was correct, appending");
                    }
                    a.hasAppendedData_ = true;
                    this.processMetadataQueue_();
                    this.appendData_(a, c);
                };
                a.updateAppendInitSegmentStatus = function c(a, b) {
                    if (this.loaderType_ === "main" && typeof a.timestampOffset === "number" && !a.changedTimestampOffset) {
                        this.appendInitSegment_ = {
                            audio: true,
                            video: true
                        };
                    }
                    if (this.playlistOfLastInitSegment_[b] !== a.playlist) {
                        this.appendInitSegment_[b] = true;
                    }
                };
                a.getInitSegmentAndUpdateState_ = function g(a) {
                    var b = a.type, c = a.initSegment, d = a.map, f = a.playlist;
                    if (d) {
                        var e = dd(d);
                        if (this.activeInitSegmentId_ === e) {
                            return null;
                        }
                        c = this.initSegmentForMap(d, true).bytes;
                        this.activeInitSegmentId_ = e;
                    }
                    if (c && this.appendInitSegment_[b]) {
                        this.playlistOfLastInitSegment_[b] = f;
                        this.appendInitSegment_[b] = false;
                        this.activeInitSegmentId_ = null;
                        return c;
                    }
                    return null;
                };
                a.handleQuotaExceededError_ = function n(c, o) {
                    var p = this;
                    var g = c.segmentInfo, h = c.type, d = c.bytes;
                    var a = this.sourceUpdater_.audioBuffered();
                    var b = this.sourceUpdater_.videoBuffered();
                    if (a.length > 1) {
                        this.logger_("On QUOTA_EXCEEDED_ERR, found gaps in the audio buffer: " + fY(a).join(", "));
                    }
                    if (b.length > 1) {
                        this.logger_("On QUOTA_EXCEEDED_ERR, found gaps in the video buffer: " + fY(b).join(", "));
                    }
                    var i = a.length ? a.start(0) : 0;
                    var j = a.length ? a.end(a.length - 1) : 0;
                    var k = b.length ? b.start(0) : 0;
                    var l = b.length ? b.end(b.length - 1) : 0;
                    if (j - i <= hL && l - k <= hL) {
                        this.logger_("On QUOTA_EXCEEDED_ERR, single segment too large to append to " + "buffer, triggering an error. " + ("Appended byte length: " + d.byteLength + ", ") + ("audio buffer: " + fY(a).join(", ") + ", ") + ("video buffer: " + fY(b).join(", ") + ", "));
                        this.error({
                            message: "Quota exceeded error with append of a single segment of content",
                            excludeUntil: Infinity
                        });
                        this.trigger("error");
                        return;
                    }
                    this.waitingOnRemove_ = true;
                    this.callQueue_.push(this.appendToSourceBuffer_.bind(this, {
                        segmentInfo: g,
                        type: h,
                        bytes: d
                    }));
                    var m = this.currentTime_();
                    var e = m - hL;
                    this.logger_("On QUOTA_EXCEEDED_ERR, removing audio/video from 0 to " + e);
                    this.remove(0, e, function() {
                        p.logger_("On QUOTA_EXCEEDED_ERR, retrying append in " + hL + "s");
                        p.waitingOnRemove_ = false;
                        p.quotaExceededErrorRetryTimeout_ = f().setTimeout(function() {
                            p.logger_("On QUOTA_EXCEEDED_ERR, re-processing call queue");
                            p.quotaExceededErrorRetryTimeout_ = null;
                            p.processCallQueue_();
                        }, hL * 1000);
                    }, true);
                };
                a.handleAppendError_ = function f(a, b) {
                    var c = a.segmentInfo, d = a.type, e = a.bytes;
                    if (!b) {
                        return;
                    }
                    if (b.code === hJ) {
                        this.handleQuotaExceededError_({
                            segmentInfo: c,
                            type: d,
                            bytes: e
                        });
                        return;
                    }
                    this.logger_("Received non QUOTA_EXCEEDED_ERR on append", b);
                    this.error(d + " append of " + e.length + "b failed for segment " + ("#" + c.mediaIndex + " in playlist " + c.playlist.id));
                    this.trigger("appenderror");
                };
                a.appendToSourceBuffer_ = function i(a) {
                    var d = a.segmentInfo, e = a.type, c = a.initSegment, f = a.data, b = a.bytes;
                    if (!b) {
                        var g = [
                            f
                        ];
                        var h = f.byteLength;
                        if (c) {
                            g.unshift(c);
                            h += c.byteLength;
                        }
                        b = hx({
                            bytes: h,
                            segments: g
                        });
                    }
                    this.sourceUpdater_.appendBuffer({
                        segmentInfo: d,
                        type: e,
                        bytes: b
                    }, this.handleAppendError_.bind(this, {
                        segmentInfo: d,
                        type: e,
                        bytes: b
                    }));
                };
                a.handleSegmentTimingInfo_ = function f(d, e, c) {
                    if (!this.pendingSegment_ || e !== this.pendingSegment_.requestId) {
                        return;
                    }
                    var a = this.pendingSegment_.segment;
                    var b = d + "TimingInfo";
                    if (!a[b]) {
                        a[b] = {};
                    }
                    a[b].transmuxerPrependedSeconds = c.prependedContentDuration || 0;
                    a[b].transmuxedPresentationStart = c.start.presentation;
                    a[b].transmuxedDecodeStart = c.start.decode;
                    a[b].transmuxedPresentationEnd = c.end.presentation;
                    a[b].transmuxedDecodeEnd = c.end.decode;
                    a[b].baseMediaDecodeTime = c.baseMediaDecodeTime;
                };
                a.appendData_ = function f(a, b) {
                    var c = b.type, d = b.data;
                    if (!d || !d.byteLength) {
                        return;
                    }
                    if (c === "audio" && this.audioDisabled_) {
                        return;
                    }
                    var e = this.getInitSegmentAndUpdateState_({
                        type: c,
                        initSegment: b.initSegment,
                        playlist: a.playlist,
                        map: a.isFmp4 ? a.segment.map : null
                    });
                    this.appendToSourceBuffer_({
                        segmentInfo: a,
                        type: c,
                        initSegment: e,
                        data: d
                    });
                };
                a.loadSegment_ = function b(a) {
                    var c = this;
                    this.state = "WAITING";
                    this.pendingSegment_ = a;
                    this.trimBackBuffer_(a);
                    if (typeof a.timestampOffset === "number") {
                        if (this.transmuxer_) {
                            this.transmuxer_.postMessage({
                                action: "clearAllMp4Captions"
                            });
                        }
                    }
                    if (!this.hasEnoughInfoToLoad_()) {
                        this.loadQueue_.push(function() {
                            var b = (0, ah.Z)({}, a, {
                                forceTimestampOffset: true
                            });
                            (0, ah.Z)(a, c.generateSegmentInfo_(b));
                            c.isPendingTimestampOffset_ = false;
                            c.updateTransmuxerAndRequestSegment_(a);
                        });
                        return;
                    }
                    this.updateTransmuxerAndRequestSegment_(a);
                };
                a.updateTransmuxerAndRequestSegment_ = function g(a) {
                    var h = this;
                    if (this.shouldUpdateTransmuxerTimestampOffset_(a.timestampOffset)) {
                        this.gopBuffer_.length = 0;
                        a.gopsToAlignWith = [];
                        this.timeMapping_ = 0;
                        this.transmuxer_.postMessage({
                            action: "reset"
                        });
                        this.transmuxer_.postMessage({
                            action: "setTimestampOffset",
                            timestampOffset: a.timestampOffset
                        });
                    }
                    var b = this.createSimplifiedSegmentObj_(a);
                    var c = this.isEndOfStream_(a.mediaIndex, a.playlist, a.partIndex);
                    var d = this.mediaIndex !== null;
                    var e = a.timeline !== this.currentTimeline_ && a.timeline > 0;
                    var f = c || (d && e);
                    this.logger_("Requesting " + hR(a));
                    if (b.map && !b.map.bytes) {
                        this.logger_("going to request init segment.");
                        this.appendInitSegment_ = {
                            video: true,
                            audio: true
                        };
                    }
                    a.abortRequests = hj({
                        xhr: this.vhs_.xhr,
                        xhrOptions: this.xhrOptions_,
                        decryptionWorker: this.decrypter_,
                        segment: b,
                        abortFn: this.handleAbort_.bind(this, a),
                        progressFn: this.handleProgress_.bind(this),
                        trackInfoFn: this.handleTrackInfo_.bind(this),
                        timingInfoFn: this.handleTimingInfo_.bind(this),
                        videoSegmentTimingInfoFn: this.handleSegmentTimingInfo_.bind(this, "video", a.requestId),
                        audioSegmentTimingInfoFn: this.handleSegmentTimingInfo_.bind(this, "audio", a.requestId),
                        captionsFn: this.handleCaptions_.bind(this),
                        isEndOfTimeline: f,
                        endedTimelineFn: function a() {
                            h.logger_("received endedtimeline callback");
                        },
                        id3Fn: this.handleId3_.bind(this),
                        dataFn: this.handleData_.bind(this),
                        doneFn: this.segmentRequestFinished_.bind(this),
                        onTransmuxerLog: function f(b) {
                            var c = b.message, d = b.level, e = b.stream;
                            h.logger_(hR(a) + " logged from transmuxer stream " + e + " as a " + d + ": " + c);
                        }
                    });
                };
                a.trimBackBuffer_ = function b(c) {
                    var a = hQ(this.seekable_(), this.currentTime_(), this.playlist_.targetDuration || 10);
                    if (a > 0) {
                        this.remove(0, a);
                    }
                };
                a.createSimplifiedSegmentObj_ = function g(a) {
                    var b = a.segment;
                    var e = a.part;
                    var c = {
                        resolvedUri: e ? e.resolvedUri : b.resolvedUri,
                        byterange: e ? e.byterange : b.byterange,
                        requestId: a.requestId,
                        transmuxer: a.transmuxer,
                        audioAppendStart: a.audioAppendStart,
                        gopsToAlignWith: a.gopsToAlignWith,
                        part: a.part
                    };
                    var d = a.playlist.segments[a.mediaIndex - 1];
                    if (d && d.timeline === b.timeline) {
                        if (d.videoTimingInfo) {
                            c.baseStartTime = d.videoTimingInfo.transmuxedDecodeEnd;
                        } else if (d.audioTimingInfo) {
                            c.baseStartTime = d.audioTimingInfo.transmuxedDecodeEnd;
                        }
                    }
                    if (b.key) {
                        var f = b.key.iv || new Uint32Array([
                            0,
                            0,
                            0,
                            a.mediaIndex + a.playlist.mediaSequence, 
                        ]);
                        c.key = this.segmentKey(b.key);
                        c.key.iv = f;
                    }
                    if (b.map) {
                        c.map = this.initSegmentForMap(b.map);
                    }
                    return c;
                };
                a.saveTransferStats_ = function b(a) {
                    this.mediaRequests += 1;
                    if (a) {
                        this.mediaBytesTransferred += a.bytesReceived;
                        this.mediaTransferDuration += a.roundTripTime;
                    }
                };
                a.saveBandwidthRelatedStats_ = function c(b, a) {
                    this.pendingSegment_.byteLength = a.bytesReceived;
                    if (b < hO) {
                        this.logger_("Ignoring segment's bandwidth because its duration of " + b + (" is less than the min to record " + hO));
                        return;
                    }
                    this.bandwidth = a.bandwidth;
                    this.roundTrip = a.roundTripTime;
                };
                a.handleTimeout_ = function a() {
                    this.mediaRequestsTimedout += 1;
                    this.bandwidth = 1;
                    this.roundTrip = NaN;
                    this.trigger("bandwidthupdate");
                };
                a.segmentRequestFinished_ = function e(a, b, c) {
                    if (this.callQueue_.length) {
                        this.callQueue_.push(this.segmentRequestFinished_.bind(this, a, b, c));
                        return;
                    }
                    this.saveTransferStats_(b.stats);
                    if (!this.pendingSegment_) {
                        return;
                    }
                    if (b.requestId !== this.pendingSegment_.requestId) {
                        return;
                    }
                    if (a) {
                        this.pendingSegment_ = null;
                        this.state = "READY";
                        if (a.code === g3.ABORTED) {
                            return;
                        }
                        this.pause();
                        if (a.code === g3.TIMEOUT) {
                            this.handleTimeout_();
                            return;
                        }
                        this.mediaRequestsErrored += 1;
                        this.error(a);
                        this.trigger("error");
                        return;
                    }
                    var d = this.pendingSegment_;
                    this.saveBandwidthRelatedStats_(d.duration, b.stats);
                    d.endOfAllRequests = b.endOfAllRequests;
                    if (c.gopInfo) {
                        this.gopBuffer_ = hG(this.gopBuffer_, c.gopInfo, this.safeAppend_);
                    }
                    this.state = "APPENDING";
                    this.trigger("appending");
                    this.waitForAppendsToComplete_(d);
                };
                a.setTimeMapping_ = function c(b) {
                    var a = this.syncController_.mappingForTimeline(b);
                    if (a !== null) {
                        this.timeMapping_ = a;
                    }
                };
                a.updateMediaSecondsLoaded_ = function b(a) {
                    if (typeof a.start === "number" && typeof a.end === "number") {
                        this.mediaSecondsLoaded += a.end - a.start;
                    } else {
                        this.mediaSecondsLoaded += a.duration;
                    }
                };
                a.shouldUpdateTransmuxerTimestampOffset_ = function b(a) {
                    if (a === null) {
                        return false;
                    }
                    if (this.loaderType_ === "main" && a !== this.sourceUpdater_.videoTimestampOffset()) {
                        return true;
                    }
                    if (!this.audioDisabled_ && a !== this.sourceUpdater_.audioTimestampOffset()) {
                        return true;
                    }
                    return false;
                };
                a.trueSegmentStart_ = function k(a) {
                    var c = a.currentStart, f = a.playlist, d = a.mediaIndex, e = a.firstVideoFrameTimeForData, g = a.currentVideoTimestampOffset, h = a.useVideoTimingInfo, i = a.videoTimingInfo, j = a.audioTimingInfo;
                    if (typeof c !== "undefined") {
                        return c;
                    }
                    if (!h) {
                        return j.start;
                    }
                    var b = f.segments[d - 1];
                    if (d === 0 || !b || typeof b.start === "undefined" || b.end !== e + g) {
                        return e;
                    }
                    return i.start;
                };
                a.waitForAppendsToComplete_ = function h(a) {
                    var b = this.getCurrentMediaInfo_(a);
                    if (!b) {
                        this.error({
                            message: "No starting media returned, likely due to an unsupported media format.",
                            blacklistDuration: Infinity
                        });
                        this.trigger("error");
                        return;
                    }
                    var e = b.hasAudio, f = b.hasVideo, g = b.isMuxed;
                    var c = this.loaderType_ === "main" && f;
                    var d = !this.audioDisabled_ && e && !g;
                    a.waitingOnAppends = 0;
                    if (!a.hasAppendedData_) {
                        if (!a.timingInfo && typeof a.timestampOffset === "number") {
                            this.isPendingTimestampOffset_ = true;
                        }
                        a.timingInfo = {
                            start: 0
                        };
                        a.waitingOnAppends++;
                        if (!this.isPendingTimestampOffset_) {
                            this.updateSourceBufferTimestampOffset_(a);
                            this.processMetadataQueue_();
                        }
                        this.checkAppendsDone_(a);
                        return;
                    }
                    if (c) {
                        a.waitingOnAppends++;
                    }
                    if (d) {
                        a.waitingOnAppends++;
                    }
                    if (c) {
                        this.sourceUpdater_.videoQueueCallback(this.checkAppendsDone_.bind(this, a));
                    }
                    if (d) {
                        this.sourceUpdater_.audioQueueCallback(this.checkAppendsDone_.bind(this, a));
                    }
                };
                a.checkAppendsDone_ = function b(a) {
                    if (this.checkForAbort_(a.requestId)) {
                        return;
                    }
                    a.waitingOnAppends--;
                    if (a.waitingOnAppends === 0) {
                        this.handleAppendsDone_();
                    }
                };
                a.checkForIllegalMediaSwitch = function c(b) {
                    var a = hP(this.loaderType_, this.getCurrentMediaInfo_(), b);
                    if (a) {
                        this.error({
                            message: a,
                            blacklistDuration: Infinity
                        });
                        this.trigger("error");
                        return true;
                    }
                    return false;
                };
                a.updateSourceBufferTimestampOffset_ = function c(a) {
                    if (a.timestampOffset === null || typeof a.timingInfo.start !== "number" || a.changedTimestampOffset || this.loaderType_ !== "main") {
                        return;
                    }
                    var b = false;
                    a.timestampOffset -= a.timingInfo.start;
                    a.changedTimestampOffset = true;
                    if (a.timestampOffset !== this.sourceUpdater_.videoTimestampOffset()) {
                        this.sourceUpdater_.videoTimestampOffset(a.timestampOffset);
                        b = true;
                    }
                    if (a.timestampOffset !== this.sourceUpdater_.audioTimestampOffset()) {
                        this.sourceUpdater_.audioTimestampOffset(a.timestampOffset);
                        b = true;
                    }
                    if (b) {
                        this.trigger("timestampoffset");
                    }
                };
                a.updateTimingInfoEnd_ = function e(a) {
                    a.timingInfo = a.timingInfo || {};
                    var c = this.getMediaInfo_();
                    var d = this.loaderType_ === "main" && c && c.hasVideo;
                    var b = d && a.videoTimingInfo ? a.videoTimingInfo : a.audioTimingInfo;
                    if (!b) {
                        return;
                    }
                    a.timingInfo.end = typeof b.end === "number" ? b.end : b.start + a.duration;
                };
                a.handleAppendsDone_ = function i() {
                    if (this.pendingSegment_) {
                        this.trigger("appendsdone");
                    }
                    if (!this.pendingSegment_) {
                        this.state = "READY";
                        if (!this.paused()) {
                            this.monitorBuffer_();
                        }
                        return;
                    }
                    var a = this.pendingSegment_;
                    this.updateTimingInfoEnd_(a);
                    if (this.shouldSaveSegmentTimingInfo_) {
                        this.syncController_.saveSegmentTimingInfo({
                            segmentInfo: a,
                            shouldSaveTimelineMapping: this.loaderType_ === "main"
                        });
                    }
                    var c = hX(a, this.sourceType_);
                    if (c) {
                        if (c.severity === "warn") {
                            b.log.warn(c.message);
                        } else {
                            this.logger_(c.message);
                        }
                    }
                    this.recordThroughput_(a);
                    this.pendingSegment_ = null;
                    this.state = "READY";
                    if (a.isSyncRequest) {
                        this.trigger("syncinfoupdate");
                        if (!a.hasAppendedData_) {
                            this.logger_("Throwing away un-appended sync request " + hR(a));
                            return;
                        }
                    }
                    this.logger_("Appended " + hR(a));
                    this.addSegmentMetadataCue_(a);
                    this.fetchAtBuffer_ = true;
                    if (this.currentTimeline_ !== a.timeline) {
                        this.timelineChangeController_.lastTimelineChange({
                            type: this.loaderType_,
                            from: this.currentTimeline_,
                            to: a.timeline
                        });
                        if (this.loaderType_ === "main" && !this.audioDisabled_) {
                            this.timelineChangeController_.lastTimelineChange({
                                type: "audio",
                                from: this.currentTimeline_,
                                to: a.timeline
                            });
                        }
                    }
                    this.currentTimeline_ = a.timeline;
                    this.trigger("syncinfoupdate");
                    var e = a.segment;
                    var d = a.part;
                    var f = e.end && this.currentTime_() - e.end > a.playlist.targetDuration * 3;
                    var g = d && d.end && this.currentTime_() - d.end > a.playlist.partTargetDuration * 3;
                    if (f || g) {
                        this.logger_("bad " + (f ? "segment" : "part") + " " + hR(a));
                        this.resetEverything();
                        return;
                    }
                    var h = this.mediaIndex !== null;
                    if (h) {
                        this.trigger("bandwidthupdate");
                    }
                    this.trigger("progress");
                    this.mediaIndex = a.mediaIndex;
                    this.partIndex = a.partIndex;
                    if (this.isEndOfStream_(a.mediaIndex, a.playlist, a.partIndex)) {
                        this.endOfStream();
                    }
                    this.trigger("appended");
                    if (a.hasAppendedData_) {
                        this.mediaAppends++;
                    }
                    if (!this.paused()) {
                        this.monitorBuffer_();
                    }
                };
                a.recordThroughput_ = function e(a) {
                    if (a.duration < hO) {
                        this.logger_("Ignoring segment's throughput because its duration of " + a.duration + (" is less than the min to record " + hO));
                        return;
                    }
                    var b = this.throughput.rate;
                    var c = Date.now() - a.endOfAllRequests + 1;
                    var d = Math.floor((a.byteLength / c) * 8 * 1000);
                    this.throughput.rate += (d - b) / ++this.throughput.count;
                };
                a.addSegmentMetadataCue_ = function j(a) {
                    if (!this.segmentMetadataTrack_) {
                        return;
                    }
                    var b = a.segment;
                    var c = b.start;
                    var d = b.end;
                    if (!hN(c) || !hN(d)) {
                        return;
                    }
                    hD(c, d, this.segmentMetadataTrack_);
                    var h = f().WebKitDataCue || f().VTTCue;
                    var e = {
                        custom: b.custom,
                        dateTimeObject: b.dateTimeObject,
                        dateTimeString: b.dateTimeString,
                        bandwidth: a.playlist.attributes.BANDWIDTH,
                        resolution: a.playlist.attributes.RESOLUTION,
                        codecs: a.playlist.attributes.CODECS,
                        byteLength: a.byteLength,
                        uri: a.uri,
                        timeline: a.timeline,
                        playlist: a.playlist.id,
                        start: c,
                        end: d
                    };
                    var i = JSON.stringify(e);
                    var g = new h(c, d, i);
                    g.value = e;
                    this.segmentMetadataTrack_.addCue(g);
                };
                return c;
            })(b.EventTarget);
            function hY() {}
            var hZ = function b(a) {
                if (typeof a !== "string") {
                    return a;
                }
                return a.replace(/./, function(a) {
                    return a.toUpperCase();
                });
            };
            var h$ = [
                "video",
                "audio"
            ];
            var h_ = function d(a, b) {
                var c = b[a + "Buffer"];
                return ((c && c.updating) || b.queuePending[a]);
            };
            var h0 = function e(d, b) {
                for(var a = 0; a < b.length; a++){
                    var c = b[a];
                    if (c.type === "mediaSource") {
                        return null;
                    }
                    if (c.type === d) {
                        return a;
                    }
                }
                return null;
            };
            var h1 = function e(c, a) {
                if (a.queue.length === 0) {
                    return;
                }
                var d = 0;
                var b = a.queue[d];
                if (b.type === "mediaSource") {
                    if (!a.updating() && a.mediaSource.readyState !== "closed") {
                        a.queue.shift();
                        b.action(a);
                        if (b.doneFn) {
                            b.doneFn();
                        }
                        e("audio", a);
                        e("video", a);
                    }
                    return;
                }
                if (c === "mediaSource") {
                    return;
                }
                if (!a.ready() || a.mediaSource.readyState === "closed" || h_(c, a)) {
                    return;
                }
                if (b.type !== c) {
                    d = h0(c, a.queue);
                    if (d === null) {
                        return;
                    }
                    b = a.queue[d];
                }
                a.queue.splice(d, 1);
                a.queuePending[c] = b;
                b.action(c, a);
                if (!b.doneFn) {
                    a.queuePending[c] = null;
                    e(c, a);
                    return;
                }
            };
            var h2 = function e(b, a) {
                var c = a[b + "Buffer"];
                var d = hZ(b);
                if (!c) {
                    return;
                }
                c.removeEventListener("updateend", a["on" + d + "UpdateEnd_"]);
                c.removeEventListener("error", a["on" + d + "Error_"]);
                a.codecs[b] = null;
                a[b + "Buffer"] = null;
            };
            var h3 = function c(a, b) {
                return (a && b && Array.prototype.indexOf.call(a.sourceBuffers, b) !== -1);
            };
            var h4 = {
                appendBuffer: function a(b, c, d) {
                    return function(e, a) {
                        var g = a[e + "Buffer"];
                        if (!h3(a.mediaSource, g)) {
                            return;
                        }
                        a.logger_("Appending segment " + c.mediaIndex + "'s " + b.length + " bytes to " + e + "Buffer");
                        try {
                            g.appendBuffer(b);
                        } catch (f) {
                            a.logger_("Error with code " + f.code + " " + (f.code === hJ ? "(QUOTA_EXCEEDED_ERR) " : "") + ("when appending segment " + c.mediaIndex + " to " + e + "Buffer"));
                            a.queuePending[e] = null;
                            d(f);
                        }
                    };
                },
                remove: function a(b, c) {
                    return function(d, a) {
                        var e = a[d + "Buffer"];
                        if (!h3(a.mediaSource, e)) {
                            return;
                        }
                        a.logger_("Removing " + b + " to " + c + " from " + d + "Buffer");
                        try {
                            e.remove(b, c);
                        } catch (f) {
                            a.logger_("Remove " + b + " to " + c + " from " + d + "Buffer failed");
                        }
                    };
                },
                timestampOffset: function a(b) {
                    return function(c, a) {
                        var d = a[c + "Buffer"];
                        if (!h3(a.mediaSource, d)) {
                            return;
                        }
                        a.logger_("Setting " + c + "timestampOffset to " + b);
                        d.timestampOffset = b;
                    };
                },
                callback: function a(b) {
                    return function(a, c) {
                        b();
                    };
                },
                endOfStream: function a(c) {
                    return function(a) {
                        if (a.mediaSource.readyState !== "open") {
                            return;
                        }
                        a.logger_("Calling mediaSource endOfStream(" + (c || "") + ")");
                        try {
                            a.mediaSource.endOfStream(c);
                        } catch (d) {
                            b.log.warn("Failed to call media source endOfStream", d);
                        }
                    };
                },
                duration: function a(c) {
                    return function(a) {
                        a.logger_("Setting mediaSource duration to " + c);
                        try {
                            a.mediaSource.duration = c;
                        } catch (d) {
                            b.log.warn("Failed to set media source duration", d);
                        }
                    };
                },
                abort: function a() {
                    return function(c, a) {
                        if (a.mediaSource.readyState !== "open") {
                            return;
                        }
                        var d = a[c + "Buffer"];
                        if (!h3(a.mediaSource, d)) {
                            return;
                        }
                        a.logger_("calling abort on " + c + "Buffer");
                        try {
                            d.abort();
                        } catch (e) {
                            b.log.warn("Failed to abort on " + c + "Buffer", e);
                        }
                    };
                },
                addSourceBuffer: function a(b, c) {
                    return function(a) {
                        var e = hZ(b);
                        var f = (0, dM._5)(c);
                        a.logger_("Adding " + b + "Buffer with codec " + c + " to mediaSource");
                        var d = a.mediaSource.addSourceBuffer(f);
                        d.addEventListener("updateend", a["on" + e + "UpdateEnd_"]);
                        d.addEventListener("error", a["on" + e + "Error_"]);
                        a.codecs[b] = c;
                        a[b + "Buffer"] = d;
                    };
                },
                removeSourceBuffer: function a(c) {
                    return function(a) {
                        var d = a[c + "Buffer"];
                        h2(c, a);
                        if (!h3(a.mediaSource, d)) {
                            return;
                        }
                        a.logger_("Removing " + c + "Buffer with codec " + a.codecs[c] + " from mediaSource");
                        try {
                            a.mediaSource.removeSourceBuffer(d);
                        } catch (e) {
                            b.log.warn("Failed to removeSourceBuffer " + c + "Buffer", e);
                        }
                    };
                },
                changeType: function a(b) {
                    return function(c, a) {
                        var d = a[c + "Buffer"];
                        var e = (0, dM._5)(b);
                        if (!h3(a.mediaSource, d)) {
                            return;
                        }
                        if (a.codecs[c] === b) {
                            return;
                        }
                        a.logger_("changing " + c + "Buffer codec from " + a.codecs[c] + " to " + b);
                        d.changeType(e);
                        a.codecs[c] = b;
                    };
                }
            };
            var h5 = function g(a) {
                var b = a.type, c = a.sourceUpdater, d = a.action, e = a.doneFn, f = a.name;
                c.queue.push({
                    type: b,
                    action: d,
                    doneFn: e,
                    name: f
                });
                h1(b, c);
            };
            var h6 = function a(b, c) {
                return function(d) {
                    if (c.queuePending[b]) {
                        var a = c.queuePending[b].doneFn;
                        c.queuePending[b] = null;
                        if (a) {
                            a(c[b + "Error_"]);
                        }
                    }
                    h1(b, c);
                };
            };
            var h7 = (function(d) {
                (0, dF.Z)(c, d);
                function c(b) {
                    var a;
                    a = d.call(this) || this;
                    a.mediaSource = b;
                    a.sourceopenListener_ = function() {
                        return h1("mediaSource", (0, dE.Z)(a));
                    };
                    a.mediaSource.addEventListener("sourceopen", a.sourceopenListener_);
                    a.logger_ = a1("SourceUpdater");
                    a.audioTimestampOffset_ = 0;
                    a.videoTimestampOffset_ = 0;
                    a.queue = [];
                    a.queuePending = {
                        audio: null,
                        video: null
                    };
                    a.delayedAudioAppendQueue_ = [];
                    a.videoAppendQueued_ = false;
                    a.codecs = {};
                    a.onVideoUpdateEnd_ = h6("video", (0, dE.Z)(a));
                    a.onAudioUpdateEnd_ = h6("audio", (0, dE.Z)(a));
                    a.onVideoError_ = function(b) {
                        a.videoError_ = b;
                    };
                    a.onAudioError_ = function(b) {
                        a.audioError_ = b;
                    };
                    a.createdSourceBuffers_ = false;
                    a.initializedEme_ = false;
                    a.triggeredReady_ = false;
                    return a;
                }
                var a = c.prototype;
                a.initializedEme = function a() {
                    this.initializedEme_ = true;
                    this.triggerReady();
                };
                a.hasCreatedSourceBuffers = function a() {
                    return this.createdSourceBuffers_;
                };
                a.hasInitializedAnyEme = function a() {
                    return this.initializedEme_;
                };
                a.ready = function a() {
                    return (this.hasCreatedSourceBuffers() && this.hasInitializedAnyEme());
                };
                a.createSourceBuffers = function b(a) {
                    if (this.hasCreatedSourceBuffers()) {
                        return;
                    }
                    this.addOrChangeSourceBuffers(a);
                    this.createdSourceBuffers_ = true;
                    this.trigger("createdsourcebuffers");
                    this.triggerReady();
                };
                a.triggerReady = function a() {
                    if (this.ready() && !this.triggeredReady_) {
                        this.triggeredReady_ = true;
                        this.trigger("ready");
                    }
                };
                a.addSourceBuffer = function c(a, b) {
                    h5({
                        type: "mediaSource",
                        sourceUpdater: this,
                        action: h4.addSourceBuffer(a, b),
                        name: "addSourceBuffer"
                    });
                };
                a.abort = function b(a) {
                    h5({
                        type: a,
                        sourceUpdater: this,
                        action: h4.abort(a),
                        name: "abort"
                    });
                };
                a.removeSourceBuffer = function c(a) {
                    if (!this.canRemoveSourceBuffer()) {
                        b.log.error("removeSourceBuffer is not supported!");
                        return;
                    }
                    h5({
                        type: "mediaSource",
                        sourceUpdater: this,
                        action: h4.removeSourceBuffer(a),
                        name: "removeSourceBuffer"
                    });
                };
                a.canRemoveSourceBuffer = function a() {
                    return (!b.browser.IE_VERSION && !b.browser.IS_FIREFOX && f().MediaSource && f().MediaSource.prototype && typeof f().MediaSource.prototype.removeSourceBuffer === "function");
                };
                c.canChangeType = function a() {
                    return (f().SourceBuffer && f().SourceBuffer.prototype && typeof f().SourceBuffer.prototype.changeType === "function");
                };
                a.canChangeType = function a() {
                    return this.constructor.canChangeType();
                };
                a.changeType = function d(a, c) {
                    if (!this.canChangeType()) {
                        b.log.error("changeType is not supported!");
                        return;
                    }
                    h5({
                        type: a,
                        sourceUpdater: this,
                        action: h4.changeType(c),
                        name: "changeType"
                    });
                };
                a.addOrChangeSourceBuffers = function b(a) {
                    var c = this;
                    if (!a || typeof a !== "object" || Object.keys(a).length === 0) {
                        throw new Error("Cannot addOrChangeSourceBuffers to undefined codecs");
                    }
                    Object.keys(a).forEach(function(b) {
                        var d = a[b];
                        if (!c.hasCreatedSourceBuffers()) {
                            return c.addSourceBuffer(b, d);
                        }
                        if (c.canChangeType()) {
                            c.changeType(b, d);
                        }
                    });
                };
                a.appendBuffer = function h(a, b) {
                    var i = this;
                    var f = a.segmentInfo, c = a.type, d = a.bytes;
                    this.processedAppend_ = true;
                    if (c === "audio" && this.videoBuffer && !this.videoAppendQueued_) {
                        this.delayedAudioAppendQueue_.push([
                            a,
                            b
                        ]);
                        this.logger_("delayed audio append of " + d.length + " until video append");
                        return;
                    }
                    var g = b;
                    h5({
                        type: c,
                        sourceUpdater: this,
                        action: h4.appendBuffer(d, f || {
                            mediaIndex: -1
                        }, g),
                        doneFn: b,
                        name: "appendBuffer"
                    });
                    if (c === "video") {
                        this.videoAppendQueued_ = true;
                        if (!this.delayedAudioAppendQueue_.length) {
                            return;
                        }
                        var e = this.delayedAudioAppendQueue_.slice();
                        this.logger_("queuing delayed audio " + e.length + " appendBuffers");
                        this.delayedAudioAppendQueue_.length = 0;
                        e.forEach(function(a) {
                            i.appendBuffer.apply(i, a);
                        });
                    }
                };
                a.audioBuffered = function a() {
                    if (!h3(this.mediaSource, this.audioBuffer)) {
                        return b.createTimeRange();
                    }
                    return this.audioBuffer.buffered ? this.audioBuffer.buffered : b.createTimeRange();
                };
                a.videoBuffered = function a() {
                    if (!h3(this.mediaSource, this.videoBuffer)) {
                        return b.createTimeRange();
                    }
                    return this.videoBuffer.buffered ? this.videoBuffer.buffered : b.createTimeRange();
                };
                a.buffered = function c() {
                    var a = h3(this.mediaSource, this.videoBuffer) ? this.videoBuffer : null;
                    var b = h3(this.mediaSource, this.audioBuffer) ? this.audioBuffer : null;
                    if (b && !a) {
                        return this.audioBuffered();
                    }
                    if (a && !b) {
                        return this.videoBuffered();
                    }
                    return fV(this.audioBuffered(), this.videoBuffered());
                };
                a.setDuration = function c(b, a) {
                    if (a === void 0) {
                        a = hY;
                    }
                    h5({
                        type: "mediaSource",
                        sourceUpdater: this,
                        action: h4.duration(b),
                        name: "duration",
                        doneFn: a
                    });
                };
                a.endOfStream = function c(a, b) {
                    if (a === void 0) {
                        a = null;
                    }
                    if (b === void 0) {
                        b = hY;
                    }
                    if (typeof a !== "string") {
                        a = undefined;
                    }
                    h5({
                        type: "mediaSource",
                        sourceUpdater: this,
                        action: h4.endOfStream(a),
                        name: "endOfStream",
                        doneFn: b
                    });
                };
                a.removeAudio = function d(b, c, a) {
                    if (a === void 0) {
                        a = hY;
                    }
                    if (!this.audioBuffered().length || this.audioBuffered().end(0) === 0) {
                        a();
                        return;
                    }
                    h5({
                        type: "audio",
                        sourceUpdater: this,
                        action: h4.remove(b, c),
                        doneFn: a,
                        name: "remove"
                    });
                };
                a.removeVideo = function d(b, c, a) {
                    if (a === void 0) {
                        a = hY;
                    }
                    if (!this.videoBuffered().length || this.videoBuffered().end(0) === 0) {
                        a();
                        return;
                    }
                    h5({
                        type: "video",
                        sourceUpdater: this,
                        action: h4.remove(b, c),
                        doneFn: a,
                        name: "remove"
                    });
                };
                a.updating = function a() {
                    if (h_("audio", this) || h_("video", this)) {
                        return true;
                    }
                    return false;
                };
                a.audioTimestampOffset = function b(a) {
                    if (typeof a !== "undefined" && this.audioBuffer && this.audioTimestampOffset_ !== a) {
                        h5({
                            type: "audio",
                            sourceUpdater: this,
                            action: h4.timestampOffset(a),
                            name: "timestampOffset"
                        });
                        this.audioTimestampOffset_ = a;
                    }
                    return this.audioTimestampOffset_;
                };
                a.videoTimestampOffset = function b(a) {
                    if (typeof a !== "undefined" && this.videoBuffer && this.videoTimestampOffset !== a) {
                        h5({
                            type: "video",
                            sourceUpdater: this,
                            action: h4.timestampOffset(a),
                            name: "timestampOffset"
                        });
                        this.videoTimestampOffset_ = a;
                    }
                    return this.videoTimestampOffset_;
                };
                a.audioQueueCallback = function b(a) {
                    if (!this.audioBuffer) {
                        return;
                    }
                    h5({
                        type: "audio",
                        sourceUpdater: this,
                        action: h4.callback(a),
                        name: "callback"
                    });
                };
                a.videoQueueCallback = function b(a) {
                    if (!this.videoBuffer) {
                        return;
                    }
                    h5({
                        type: "video",
                        sourceUpdater: this,
                        action: h4.callback(a),
                        name: "callback"
                    });
                };
                a.dispose = function a() {
                    var b = this;
                    this.trigger("dispose");
                    h$.forEach(function(a) {
                        b.abort(a);
                        if (b.canRemoveSourceBuffer()) {
                            b.removeSourceBuffer(a);
                        } else {
                            b[a + "QueueCallback"](function() {
                                return h2(a, b);
                            });
                        }
                    });
                    this.videoAppendQueued_ = false;
                    this.delayedAudioAppendQueue_.length = 0;
                    if (this.sourceopenListener_) {
                        this.mediaSource.removeEventListener("sourceopen", this.sourceopenListener_);
                    }
                    this.off();
                };
                return c;
            })(b.EventTarget);
            var h8 = function b(a) {
                return decodeURIComponent(escape(String.fromCharCode.apply(null, a)));
            };
            var h9 = new Uint8Array("\n\n".split("").map(function(a) {
                return a.charCodeAt(0);
            }));
            var ia = (function(d) {
                (0, dF.Z)(c, d);
                function c(c, b) {
                    var a;
                    if (b === void 0) {
                        b = {};
                    }
                    a = d.call(this, c, b) || this;
                    a.mediaSource_ = null;
                    a.subtitlesTrack_ = null;
                    a.loaderType_ = "subtitle";
                    a.featuresNativeTextTracks_ = c.featuresNativeTextTracks;
                    a.shouldSaveSegmentTimingInfo_ = false;
                    return a;
                }
                var a = c.prototype;
                a.createTransmuxer_ = function a() {
                    return null;
                };
                a.buffered_ = function e() {
                    if (!this.subtitlesTrack_ || !this.subtitlesTrack_.cues || !this.subtitlesTrack_.cues.length) {
                        return b.createTimeRanges();
                    }
                    var a = this.subtitlesTrack_.cues;
                    var c = a[0].startTime;
                    var d = a[a.length - 1].startTime;
                    return b.createTimeRanges([
                        [
                            c,
                            d
                        ]
                    ]);
                };
                a.initSegmentForMap = function g(a, b) {
                    if (b === void 0) {
                        b = false;
                    }
                    if (!a) {
                        return null;
                    }
                    var e = dd(a);
                    var c = this.initSegments_[e];
                    if (b && !c && a.bytes) {
                        var f = h9.byteLength + a.bytes.byteLength;
                        var d = new Uint8Array(f);
                        d.set(a.bytes);
                        d.set(h9, a.bytes.byteLength);
                        this.initSegments_[e] = c = {
                            resolvedUri: a.resolvedUri,
                            byterange: a.byterange,
                            bytes: d
                        };
                    }
                    return c || a;
                };
                a.couldBeginLoading_ = function a() {
                    return (this.playlist_ && this.subtitlesTrack_ && !this.paused());
                };
                a.init_ = function a() {
                    this.state = "READY";
                    this.resetEverything();
                    return this.monitorBuffer_();
                };
                a.track = function b(a) {
                    if (typeof a === "undefined") {
                        return this.subtitlesTrack_;
                    }
                    this.subtitlesTrack_ = a;
                    if (this.state === "INIT" && this.couldBeginLoading_()) {
                        this.init_();
                    }
                    return this.subtitlesTrack_;
                };
                a.remove = function c(a, b) {
                    hD(a, b, this.subtitlesTrack_);
                };
                a.fillBuffer_ = function c() {
                    var d = this;
                    var a = this.chooseNextRequest_();
                    if (!a) {
                        return;
                    }
                    if (this.syncController_.timestampOffsetForTimeline(a.timeline) === null) {
                        var b = function a() {
                            d.state = "READY";
                            if (!d.paused()) {
                                d.monitorBuffer_();
                            }
                        };
                        this.syncController_.one("timestampoffset", b);
                        this.state = "WAITING_ON_TIMELINE";
                        return;
                    }
                    this.loadSegment_(a);
                };
                a.timestampOffsetForSegment_ = function a() {
                    return null;
                };
                a.chooseNextRequest_ = function a() {
                    return this.skipEmptySegments_(d.prototype.chooseNextRequest_.call(this));
                };
                a.skipEmptySegments_ = function b(a) {
                    while(a && a.segment.empty){
                        if (a.mediaIndex + 1 >= a.playlist.segments.length) {
                            a = null;
                            break;
                        }
                        a = this.generateSegmentInfo_({
                            playlist: a.playlist,
                            mediaIndex: a.mediaIndex + 1,
                            startOfSegment: a.startOfSegment + a.duration,
                            isSyncRequest: a.isSyncRequest
                        });
                    }
                    return a;
                };
                a.stopForError = function b(a) {
                    this.error(a);
                    this.state = "READY";
                    this.pause();
                    this.trigger("error");
                };
                a.segmentRequestFinished_ = function i(b, c, j) {
                    var k = this;
                    if (!this.subtitlesTrack_) {
                        this.state = "READY";
                        return;
                    }
                    this.saveTransferStats_(c.stats);
                    if (!this.pendingSegment_) {
                        this.state = "READY";
                        this.mediaRequestsAborted += 1;
                        return;
                    }
                    if (b) {
                        if (b.code === g3.TIMEOUT) {
                            this.handleTimeout_();
                        }
                        if (b.code === g3.ABORTED) {
                            this.mediaRequestsAborted += 1;
                        } else {
                            this.mediaRequestsErrored += 1;
                        }
                        this.stopForError(b);
                        return;
                    }
                    var a = this.pendingSegment_;
                    this.saveBandwidthRelatedStats_(a.duration, c.stats);
                    this.state = "APPENDING";
                    this.trigger("appending");
                    var d = a.segment;
                    if (d.map) {
                        d.map.bytes = c.map.bytes;
                    }
                    a.bytes = c.bytes;
                    if (typeof f().WebVTT !== "function" && this.subtitlesTrack_ && this.subtitlesTrack_.tech_) {
                        var e;
                        var g = function a() {
                            k.subtitlesTrack_.tech_.off("vttjsloaded", e);
                            k.stopForError({
                                message: "Error loading vtt.js"
                            });
                            return;
                        };
                        e = function a() {
                            k.subtitlesTrack_.tech_.off("vttjserror", g);
                            k.segmentRequestFinished_(b, c, j);
                        };
                        this.state = "WAITING_ON_VTTJS";
                        this.subtitlesTrack_.tech_.one("vttjsloaded", e);
                        this.subtitlesTrack_.tech_.one("vttjserror", g);
                        return;
                    }
                    d.requested = true;
                    try {
                        this.parseVTTCues_(a);
                    } catch (h) {
                        this.stopForError({
                            message: h.message
                        });
                        return;
                    }
                    this.updateTimeMapping_(a, this.syncController_.timelines[a.timeline], this.playlist_);
                    if (a.cues.length) {
                        a.timingInfo = {
                            start: a.cues[0].startTime,
                            end: a.cues[a.cues.length - 1].endTime
                        };
                    } else {
                        a.timingInfo = {
                            start: a.startOfSegment,
                            end: a.startOfSegment + a.duration
                        };
                    }
                    if (a.isSyncRequest) {
                        this.trigger("syncinfoupdate");
                        this.pendingSegment_ = null;
                        this.state = "READY";
                        return;
                    }
                    a.byteLength = a.bytes.byteLength;
                    this.mediaSecondsLoaded += d.duration;
                    a.cues.forEach(function(a) {
                        k.subtitlesTrack_.addCue(k.featuresNativeTextTracks_ ? new (f().VTTCue)(a.startTime, a.endTime, a.text) : a);
                    });
                    hE(this.subtitlesTrack_);
                    this.handleAppendsDone_();
                };
                a.handleData_ = function a() {};
                a.updateTimingInfoEnd_ = function a() {};
                a.parseVTTCues_ = function i(a) {
                    var d;
                    var e = false;
                    if (typeof f().TextDecoder === "function") {
                        d = new (f().TextDecoder)("utf8");
                    } else {
                        d = f().WebVTT.StringDecoder();
                        e = true;
                    }
                    var c = new (f().WebVTT.Parser)(f(), f().vttjs, d);
                    a.cues = [];
                    a.timestampmap = {
                        MPEGTS: 0,
                        LOCAL: 0
                    };
                    c.oncue = a.cues.push.bind(a.cues);
                    c.ontimestampmap = function(b) {
                        a.timestampmap = b;
                    };
                    c.onparsingerror = function(a) {
                        b.log.warn("Error encountered when parsing cues: " + a.message);
                    };
                    if (a.segment.map) {
                        var g = a.segment.map.bytes;
                        if (e) {
                            g = h8(g);
                        }
                        c.parse(g);
                    }
                    var h = a.bytes;
                    if (e) {
                        h = h8(h);
                    }
                    c.parse(h);
                    c.flush();
                };
                a.updateTimeMapping_ = function h(a, c, b) {
                    var d = a.segment;
                    if (!c) {
                        return;
                    }
                    if (!a.cues.length) {
                        d.empty = true;
                        return;
                    }
                    var e = a.timestampmap;
                    var i = e.MPEGTS / bh.ONE_SECOND_IN_TS - e.LOCAL + c.mapping;
                    a.cues.forEach(function(a) {
                        a.startTime += i;
                        a.endTime += i;
                    });
                    if (!b.syncInfo) {
                        var f = a.cues[0].startTime;
                        var g = a.cues[a.cues.length - 1].startTime;
                        b.syncInfo = {
                            mediaSequence: b.mediaSequence + a.mediaIndex,
                            time: Math.min(f, g - d.duration)
                        };
                    }
                };
                return c;
            })(dv);
            var ib = function f(e, c) {
                var d = e.cues;
                for(var a = 0; a < d.length; a++){
                    var b = d[a];
                    if (c >= b.adStartTime && c <= b.adEndTime) {
                        return b;
                    }
                }
                return null;
            };
            var ic = function l(d, e, g) {
                if (g === void 0) {
                    g = 0;
                }
                if (!d.segments) {
                    return;
                }
                var b = g;
                var a;
                for(var h = 0; h < d.segments.length; h++){
                    var c = d.segments[h];
                    if (!a) {
                        a = ib(e, b + c.duration / 2);
                    }
                    if (a) {
                        if ("cueIn" in c) {
                            a.endTime = b;
                            a.adEndTime = b;
                            b += c.duration;
                            a = null;
                            continue;
                        }
                        if (b < a.endTime) {
                            b += c.duration;
                            continue;
                        }
                        a.endTime += c.duration;
                    } else {
                        if ("cueOut" in c) {
                            a = new (f().VTTCue)(b, b + c.duration, c.cueOut);
                            a.adStartTime = b;
                            a.adEndTime = b + parseFloat(c.cueOut);
                            e.addCue(a);
                        }
                        if ("cueOutCont" in c) {
                            var i = c.cueOutCont.split("/").map(parseFloat), j = i[0], k = i[1];
                            a = new (f().VTTCue)(b, b + c.duration, "");
                            a.adStartTime = b - j;
                            a.adEndTime = a.adStartTime + k;
                            e.addCue(a);
                        }
                    }
                    b += c.duration;
                }
            };
            var id = 86400;
            var ie = [
                {
                    name: "VOD",
                    run: function c(d, e, a, f, g) {
                        if (a !== Infinity) {
                            var b = {
                                time: 0,
                                segmentIndex: 0,
                                partIndex: null
                            };
                            return b;
                        }
                        return null;
                    }
                },
                {
                    name: "ProgramDateTime",
                    run: function p(j, k, q, r, c) {
                        if (!Object.keys(j.timelineToDatetimeMappings).length) {
                            return null;
                        }
                        var l = null;
                        var e = null;
                        var f = f1(k);
                        c = c || 0;
                        for(var d = 0; d < f.length; d++){
                            var n = k.endList || c === 0 ? d : f.length - (d + 1);
                            var a = f[n];
                            var b = a.segment;
                            var m = j.timelineToDatetimeMappings[b.timeline];
                            if (!m || !b.dateTimeObject) {
                                continue;
                            }
                            var o = b.dateTimeObject.getTime() / 1000;
                            var g = o + m;
                            if (b.parts && typeof a.partIndex === "number") {
                                for(var h = 0; h < a.partIndex; h++){
                                    g += b.parts[h].duration;
                                }
                            }
                            var i = Math.abs(c - g);
                            if (e !== null && (i === 0 || e < i)) {
                                break;
                            }
                            e = i;
                            l = {
                                time: g,
                                segmentIndex: a.segmentIndex,
                                partIndex: a.partIndex
                            };
                        }
                        return l;
                    }
                },
                {
                    name: "Segment",
                    run: function m(n, j, o, k, c) {
                        var e = null;
                        var a = null;
                        c = c || 0;
                        var f = f1(j);
                        for(var d = 0; d < f.length; d++){
                            var l = j.endList || c === 0 ? d : f.length - (d + 1);
                            var b = f[l];
                            var g = b.segment;
                            var h = (b.part && b.part.start) || (g && g.start);
                            if (g.timeline === k && typeof h !== "undefined") {
                                var i = Math.abs(c - h);
                                if (a !== null && a < i) {
                                    break;
                                }
                                if (!e || a === null || a >= i) {
                                    a = i;
                                    e = {
                                        time: h,
                                        segmentIndex: b.segmentIndex,
                                        partIndex: b.partIndex
                                    };
                                }
                            }
                        }
                        return e;
                    }
                },
                {
                    name: "Discontinuity",
                    run: function k(h, a, l, m, d) {
                        var e = null;
                        d = d || 0;
                        if (a.discontinuityStarts && a.discontinuityStarts.length) {
                            var b = null;
                            for(var c = 0; c < a.discontinuityStarts.length; c++){
                                var i = a.discontinuityStarts[c];
                                var j = a.discontinuitySequence + c + 1;
                                var f = h.discontinuities[j];
                                if (f) {
                                    var g = Math.abs(d - f.time);
                                    if (b !== null && b < g) {
                                        break;
                                    }
                                    if (!e || b === null || b >= g) {
                                        b = g;
                                        e = {
                                            time: f.time,
                                            segmentIndex: i,
                                            partIndex: null
                                        };
                                    }
                                }
                            }
                        }
                        return e;
                    }
                },
                {
                    name: "Playlist",
                    run: function c(d, a, e, f, g) {
                        if (a.syncInfo) {
                            var b = {
                                time: a.syncInfo.time,
                                segmentIndex: a.syncInfo.mediaSequence - a.mediaSequence,
                                partIndex: null
                            };
                            return b;
                        }
                        return null;
                    }
                }, 
            ];
            var ig = (function(d) {
                (0, dF.Z)(c, d);
                function c(b) {
                    var a;
                    a = d.call(this) || this;
                    a.timelines = [];
                    a.discontinuities = [];
                    a.timelineToDatetimeMappings = {};
                    a.logger_ = a1("SyncController");
                    return a;
                }
                var a = c.prototype;
                a.getSyncPoint = function f(c, d, e, a) {
                    var b = this.runStrategies_(c, d, e, a);
                    if (!b.length) {
                        return null;
                    }
                    return this.selectSyncPoint_(b, {
                        key: "time",
                        value: a
                    });
                };
                a.getExpiredTime = function e(a, d) {
                    if (!a || !a.segments) {
                        return null;
                    }
                    var c = this.runStrategies_(a, d, a.discontinuitySequence, 0);
                    if (!c.length) {
                        return null;
                    }
                    var b = this.selectSyncPoint_(c, {
                        key: "segmentIndex",
                        value: 0
                    });
                    if (b.segmentIndex > 0) {
                        b.time *= -1;
                    }
                    return Math.abs(b.time + f7({
                        defaultDuration: a.targetDuration,
                        durationList: a.segments,
                        startIndex: b.segmentIndex,
                        endIndex: 0
                    }));
                };
                a.runStrategies_ = function i(e, f, g, h) {
                    var d = [];
                    for(var a = 0; a < ie.length; a++){
                        var b = ie[a];
                        var c = b.run(this, e, f, g, h);
                        if (c) {
                            c.strategy = b.name;
                            d.push({
                                strategy: b.name,
                                syncPoint: c
                            });
                        }
                    }
                    return d;
                };
                a.selectSyncPoint_ = function h(a, b) {
                    var c = a[0].syncPoint;
                    var e = Math.abs(a[0].syncPoint[b.key] - b.value);
                    var f = a[0].strategy;
                    for(var d = 1; d < a.length; d++){
                        var g = Math.abs(a[d].syncPoint[b.key] - b.value);
                        if (g < e) {
                            e = g;
                            c = a[d].syncPoint;
                            f = a[d].strategy;
                        }
                    }
                    this.logger_("syncPoint for [" + b.key + ": " + b.value + "] chosen with strategy" + (" [" + f + "]: [time:" + c.time + ",") + (" segmentIndex:" + c.segmentIndex) + (typeof c.partIndex === "number" ? ",partIndex:" + c.partIndex : "") + "]");
                    return c;
                };
                a.saveExpiredSegmentInfo = function g(d, a) {
                    var e = a.mediaSequence - d.mediaSequence;
                    if (e > id) {
                        b.log.warn("Not saving expired segment info. Media sequence gap " + e + " is too large.");
                        return;
                    }
                    for(var c = e - 1; c >= 0; c--){
                        var f = d.segments[c];
                        if (f && typeof f.start !== "undefined") {
                            a.syncInfo = {
                                mediaSequence: d.mediaSequence + c,
                                time: f.start
                            };
                            this.logger_("playlist refresh sync: [time:" + a.syncInfo.time + "," + (" mediaSequence: " + a.syncInfo.mediaSequence + "]"));
                            this.trigger("syncinfoupdate");
                            break;
                        }
                    }
                };
                a.setDateTimeMappingForStart = function d(a) {
                    this.timelineToDatetimeMappings = {};
                    if (a.segments && a.segments.length && a.segments[0].dateTimeObject) {
                        var b = a.segments[0];
                        var c = b.dateTimeObject.getTime() / 1000;
                        this.timelineToDatetimeMappings[b.timeline] = -c;
                    }
                };
                a.saveSegmentTimingInfo = function g(c) {
                    var a = c.segmentInfo, d = c.shouldSaveTimelineMapping;
                    var f = this.calculateSegmentTimeMapping_(a, a.timingInfo, d);
                    var b = a.segment;
                    if (f) {
                        this.saveDiscontinuitySyncInfo_(a);
                        if (!a.playlist.syncInfo) {
                            a.playlist.syncInfo = {
                                mediaSequence: a.playlist.mediaSequence + a.mediaIndex,
                                time: b.start
                            };
                        }
                    }
                    var e = b.dateTimeObject;
                    if (b.discontinuity && d && e) {
                        this.timelineToDatetimeMappings[b.timeline] = -(e.getTime() / 1000);
                    }
                };
                a.timestampOffsetForTimeline = function b(a) {
                    if (typeof this.timelines[a] === "undefined") {
                        return null;
                    }
                    return this.timelines[a].time;
                };
                a.mappingForTimeline = function b(a) {
                    if (typeof this.timelines[a] === "undefined") {
                        return null;
                    }
                    return this.timelines[a].mapping;
                };
                a.calculateSegmentTimeMapping_ = function i(a, d, h) {
                    var e = a.segment;
                    var g = a.part;
                    var b = this.timelines[a.timeline];
                    var c;
                    var f;
                    if (typeof a.timestampOffset === "number") {
                        b = {
                            time: a.startOfSegment,
                            mapping: a.startOfSegment - d.start
                        };
                        if (h) {
                            this.timelines[a.timeline] = b;
                            this.trigger("timestampoffset");
                            this.logger_("time mapping for timeline " + a.timeline + ": " + ("[time: " + b.time + "] [mapping: " + b.mapping + "]"));
                        }
                        c = a.startOfSegment;
                        f = d.end + b.mapping;
                    } else if (b) {
                        c = d.start + b.mapping;
                        f = d.end + b.mapping;
                    } else {
                        return false;
                    }
                    if (g) {
                        g.start = c;
                        g.end = f;
                    }
                    if (!e.start || c < e.start) {
                        e.start = c;
                    }
                    e.end = f;
                    return true;
                };
                a.saveDiscontinuitySyncInfo_ = function j(b) {
                    var a = b.playlist;
                    var c = b.segment;
                    if (c.discontinuity) {
                        this.discontinuities[c.timeline] = {
                            time: c.start,
                            accuracy: 0
                        };
                    } else if (a.discontinuityStarts && a.discontinuityStarts.length) {
                        for(var d = 0; d < a.discontinuityStarts.length; d++){
                            var e = a.discontinuityStarts[d];
                            var f = a.discontinuitySequence + d + 1;
                            var h = e - b.mediaIndex;
                            var i = Math.abs(h);
                            if (!this.discontinuities[f] || this.discontinuities[f].accuracy > i) {
                                var g = void 0;
                                if (h < 0) {
                                    g = c.start - f7({
                                        defaultDuration: a.targetDuration,
                                        durationList: a.segments,
                                        startIndex: b.mediaIndex,
                                        endIndex: e
                                    });
                                } else {
                                    g = c.end + f7({
                                        defaultDuration: a.targetDuration,
                                        durationList: a.segments,
                                        startIndex: b.mediaIndex + 1,
                                        endIndex: e
                                    });
                                }
                                this.discontinuities[f] = {
                                    time: g,
                                    accuracy: i
                                };
                            }
                        }
                    }
                };
                a.dispose = function a() {
                    this.trigger("dispose");
                    this.off();
                };
                return c;
            })(b.EventTarget);
            var ih = (function(c) {
                (0, dF.Z)(b, c);
                function b() {
                    var a;
                    a = c.call(this) || this;
                    a.pendingTimelineChanges_ = {};
                    a.lastTimelineChanges_ = {};
                    return a;
                }
                var a = b.prototype;
                a.clearPendingTimelineChange = function b(a) {
                    this.pendingTimelineChanges_[a] = null;
                    this.trigger("pendingtimelinechange");
                };
                a.pendingTimelineChange = function e(a) {
                    var b = a.type, c = a.from, d = a.to;
                    if (typeof c === "number" && typeof d === "number") {
                        this.pendingTimelineChanges_[b] = {
                            type: b,
                            from: c,
                            to: d
                        };
                        this.trigger("pendingtimelinechange");
                    }
                    return this.pendingTimelineChanges_[b];
                };
                a.lastTimelineChange = function e(b) {
                    var a = b.type, c = b.from, d = b.to;
                    if (typeof c === "number" && typeof d === "number") {
                        this.lastTimelineChanges_[a] = {
                            type: a,
                            from: c,
                            to: d
                        };
                        delete this.pendingTimelineChanges_[a];
                        this.trigger("timelinechange");
                    }
                    return this.lastTimelineChanges_[a];
                };
                a.dispose = function a() {
                    this.trigger("dispose");
                    this.pendingTimelineChanges_ = {};
                    this.lastTimelineChanges_ = {};
                    this.off();
                };
                return b;
            })(b.EventTarget);
            var dw = a3(a4(function() {
                function a(b, d, a) {
                    return ((a = {
                        path: d,
                        exports: {},
                        require: function e(d, b) {
                            return c(d, b === undefined || b === null ? a.path : b);
                        }
                    }), b(a, a.exports), a.exports);
                }
                function c() {
                    throw new Error("Dynamic requires are not currently supported by @rollup/plugin-commonjs");
                }
                var d = a(function(a) {
                    function c(d, c) {
                        for(var b = 0; b < c.length; b++){
                            var a = c[b];
                            a.enumerable = a.enumerable || false;
                            a.configurable = true;
                            if ("value" in a) a.writable = true;
                            Object.defineProperty(d, a.key, a);
                        }
                    }
                    function b(a, b, d) {
                        if (b) c(a.prototype, b);
                        if (d) c(a, d);
                        return a;
                    }
                    a.exports = b;
                    (a.exports["default"] = a.exports), (a.exports.__esModule = true);
                });
                var e = a(function(a) {
                    function b(c, d) {
                        a.exports = b = Object.setPrototypeOf || function c(a, b) {
                            a.__proto__ = b;
                            return a;
                        };
                        (a.exports["default"] = a.exports), (a.exports.__esModule = true);
                        return b(c, d);
                    }
                    a.exports = b;
                    (a.exports["default"] = a.exports), (a.exports.__esModule = true);
                });
                var f = a(function(a) {
                    function b(a, b) {
                        a.prototype = Object.create(b.prototype);
                        a.prototype.constructor = a;
                        e(a, b);
                    }
                    a.exports = b;
                    (a.exports["default"] = a.exports), (a.exports.__esModule = true);
                });
                var b = (function() {
                    function b() {
                        this.listeners = {};
                    }
                    var a = b.prototype;
                    a.on = function c(a, b) {
                        if (!this.listeners[a]) {
                            this.listeners[a] = [];
                        }
                        this.listeners[a].push(b);
                    };
                    a.off = function d(a, c) {
                        if (!this.listeners[a]) {
                            return false;
                        }
                        var b = this.listeners[a].indexOf(c);
                        this.listeners[a] = this.listeners[a].slice(0);
                        this.listeners[a].splice(b, 1);
                        return b > -1;
                    };
                    a.trigger = function h(d) {
                        var a = this.listeners[d];
                        if (!a) {
                            return;
                        }
                        if (arguments.length === 2) {
                            var e = a.length;
                            for(var b = 0; b < e; ++b){
                                a[b].call(this, arguments[1]);
                            }
                        } else {
                            var f = Array.prototype.slice.call(arguments, 1);
                            var g = a.length;
                            for(var c = 0; c < g; ++c){
                                a[c].apply(this, f);
                            }
                        }
                    };
                    a.dispose = function a() {
                        this.listeners = {};
                    };
                    a.pipe = function a(b) {
                        this.on("data", function(a) {
                            b.push(a);
                        });
                    };
                    return b;
                })();
                function g(a) {
                    return a.subarray(0, a.byteLength - a[a.byteLength - 1]);
                }
                var h = function q() {
                    var j = [
                        [
                            [],
                            [],
                            [],
                            [],
                            []
                        ],
                        [
                            [],
                            [],
                            [],
                            [],
                            []
                        ], 
                    ];
                    var f = j[0];
                    var g = j[1];
                    var l = f[4];
                    var p = g[4];
                    var a;
                    var c;
                    var d;
                    var e = [];
                    var m = [];
                    var k;
                    var n;
                    var o;
                    var b;
                    var h;
                    var i;
                    for(a = 0; a < 256; a++){
                        m[(e[a] = (a << 1) ^ ((a >> 7) * 283)) ^ a] = a;
                    }
                    for(c = d = 0; !l[c]; c ^= k || 1, d = m[d] || 1){
                        b = d ^ (d << 1) ^ (d << 2) ^ (d << 3) ^ (d << 4);
                        b = (b >> 8) ^ (b & 255) ^ 99;
                        l[c] = b;
                        p[b] = c;
                        o = e[(n = e[(k = e[c])])];
                        i = (o * 0x1010101) ^ (n * 0x10001) ^ (k * 0x101) ^ (c * 0x1010100);
                        h = (e[b] * 0x101) ^ (b * 0x1010100);
                        for(a = 0; a < 4; a++){
                            f[a][c] = h = (h << 24) ^ (h >>> 8);
                            g[a][b] = i = (i << 24) ^ (i >>> 8);
                        }
                    }
                    for(a = 0; a < 5; a++){
                        f[a] = f[a].slice(0);
                        g[a] = g[a].slice(0);
                    }
                    return j;
                };
                var i = null;
                var j = (function() {
                    function a(l) {
                        if (!i) {
                            i = h();
                        }
                        this._tables = [
                            [
                                i[0][0].slice(),
                                i[0][1].slice(),
                                i[0][2].slice(),
                                i[0][3].slice(),
                                i[0][4].slice(), 
                            ],
                            [
                                i[1][0].slice(),
                                i[1][1].slice(),
                                i[1][2].slice(),
                                i[1][3].slice(),
                                i[1][4].slice(), 
                            ], 
                        ];
                        var b;
                        var e;
                        var a;
                        var d = this._tables[0][4];
                        var g = this._tables[1];
                        var c = l.length;
                        var j = 1;
                        if (c !== 4 && c !== 6 && c !== 8) {
                            throw new Error("Invalid aes key size");
                        }
                        var f = l.slice(0);
                        var k = [];
                        this._key = [
                            f,
                            k
                        ];
                        for(b = c; b < 4 * c + 28; b++){
                            a = f[b - 1];
                            if (b % c === 0 || (c === 8 && b % c === 4)) {
                                a = (d[a >>> 24] << 24) ^ (d[(a >> 16) & 255] << 16) ^ (d[(a >> 8) & 255] << 8) ^ d[a & 255];
                                if (b % c === 0) {
                                    a = (a << 8) ^ (a >>> 24) ^ (j << 24);
                                    j = (j << 1) ^ ((j >> 7) * 283);
                                }
                            }
                            f[b] = f[b - c] ^ a;
                        }
                        for(e = 0; b; e++, b--){
                            a = f[e & 3 ? b : b - 4];
                            if (b <= 4 || e < 4) {
                                k[e] = a;
                            } else {
                                k[e] = g[0][d[a >>> 24]] ^ g[1][d[(a >> 16) & 255]] ^ g[2][d[(a >> 8) & 255]] ^ g[3][d[a & 255]];
                            }
                        }
                    }
                    var b = a.prototype;
                    b.decrypt = function x(q, r, s, t, u, v) {
                        var a = this._key[1];
                        var b = q ^ a[0];
                        var c = t ^ a[1];
                        var d = s ^ a[2];
                        var e = r ^ a[3];
                        var i;
                        var o;
                        var p;
                        var w = a.length / 4 - 2;
                        var f;
                        var g = 4;
                        var h = this._tables[1];
                        var j = h[0];
                        var k = h[1];
                        var l = h[2];
                        var m = h[3];
                        var n = h[4];
                        for(f = 0; f < w; f++){
                            i = j[b >>> 24] ^ k[(c >> 16) & 255] ^ l[(d >> 8) & 255] ^ m[e & 255] ^ a[g];
                            o = j[c >>> 24] ^ k[(d >> 16) & 255] ^ l[(e >> 8) & 255] ^ m[b & 255] ^ a[g + 1];
                            p = j[d >>> 24] ^ k[(e >> 16) & 255] ^ l[(b >> 8) & 255] ^ m[c & 255] ^ a[g + 2];
                            e = j[e >>> 24] ^ k[(b >> 16) & 255] ^ l[(c >> 8) & 255] ^ m[d & 255] ^ a[g + 3];
                            g += 4;
                            b = i;
                            c = o;
                            d = p;
                        }
                        for(f = 0; f < 4; f++){
                            u[(3 & -f) + v] = (n[b >>> 24] << 24) ^ (n[(c >> 16) & 255] << 16) ^ (n[(d >> 8) & 255] << 8) ^ n[e & 255] ^ a[g++];
                            i = b;
                            b = c;
                            c = d;
                            d = e;
                            e = i;
                        }
                    };
                    return a;
                })();
                var k = (function(d) {
                    f(a, d);
                    function a() {
                        var a;
                        a = d.call(this, b) || this;
                        a.jobs = [];
                        a.delay = 1;
                        a.timeout_ = null;
                        return a;
                    }
                    var c = a.prototype;
                    c.processJob_ = function a() {
                        this.jobs.shift()();
                        if (this.jobs.length) {
                            this.timeout_ = setTimeout(this.processJob_.bind(this), this.delay);
                        } else {
                            this.timeout_ = null;
                        }
                    };
                    c.push = function b(a) {
                        this.jobs.push(a);
                        if (!this.timeout_) {
                            this.timeout_ = setTimeout(this.processJob_.bind(this), this.delay);
                        }
                    };
                    return a;
                })(b);
                var l = function b(a) {
                    return ((a << 24) | ((a & 0xff00) << 8) | ((a & 0xff0000) >> 8) | (a >>> 24));
                };
                var m = function s(d, q, e) {
                    var c = new Int32Array(d.buffer, d.byteOffset, d.byteLength >> 2);
                    var r = new j(Array.prototype.slice.call(q));
                    var p = new Uint8Array(d.byteLength);
                    var b = new Int32Array(p.buffer);
                    var f;
                    var g;
                    var h;
                    var i;
                    var k;
                    var m;
                    var n;
                    var o;
                    var a;
                    f = e[0];
                    g = e[1];
                    h = e[2];
                    i = e[3];
                    for(a = 0; a < c.length; a += 4){
                        k = l(c[a]);
                        m = l(c[a + 1]);
                        n = l(c[a + 2]);
                        o = l(c[a + 3]);
                        r.decrypt(k, m, n, o, b, a);
                        b[a] = l(b[a] ^ f);
                        b[a + 1] = l(b[a + 1] ^ g);
                        b[a + 2] = l(b[a + 2] ^ h);
                        b[a + 3] = l(b[a + 3] ^ i);
                        f = k;
                        g = m;
                        h = n;
                        i = o;
                    }
                    return p;
                };
                var n = (function() {
                    function a(f, h, e, j) {
                        var d = a.STEP;
                        var c = new Int32Array(f.buffer);
                        var i = new Uint8Array(f.byteLength);
                        var b = 0;
                        this.asyncStream_ = new k();
                        this.asyncStream_.push(this.decryptChunk_(c.subarray(b, b + d), h, e, i));
                        for(b = d; b < c.length; b += d){
                            e = new Uint32Array([
                                l(c[b - 4]),
                                l(c[b - 3]),
                                l(c[b - 2]),
                                l(c[b - 1]), 
                            ]);
                            this.asyncStream_.push(this.decryptChunk_(c.subarray(b, b + d), h, e, i));
                        }
                        this.asyncStream_.push(function() {
                            j(null, g(i));
                        });
                    }
                    var b = a.prototype;
                    b.decryptChunk_ = function a(b, c, d, e) {
                        return function() {
                            var a = m(b, c, d);
                            e.set(a, b.byteOffset);
                        };
                    };
                    d(a, null, [
                        {
                            key: "STEP",
                            get: function a() {
                                return 32000;
                            }
                        }, 
                    ]);
                    return a;
                })();
                var o = function c(a) {
                    var b = {};
                    Object.keys(a).forEach(function(d) {
                        var c = a[d];
                        if (ArrayBuffer.isView(c)) {
                            b[d] = {
                                bytes: c.buffer,
                                byteOffset: c.byteOffset,
                                byteLength: c.byteLength
                            };
                        } else {
                            b[d] = c;
                        }
                    });
                    return b;
                };
                self.onmessage = function(b) {
                    var a = b.data;
                    var c = new Uint8Array(a.encrypted.bytes, a.encrypted.byteOffset, a.encrypted.byteLength);
                    var d = new Uint32Array(a.key.bytes, a.key.byteOffset, a.key.byteLength / 4);
                    var e = new Uint32Array(a.iv.bytes, a.iv.byteOffset, a.iv.byteLength / 4);
                    new n(c, d, e, function(c, b) {
                        self.postMessage(o({
                            source: a.source,
                            decrypted: b
                        }), [
                            b.buffer
                        ]);
                    });
                };
            }));
            var ii = a2(dw);
            var ij = function c(a) {
                var b = a["default"] ? "main" : "alternative";
                if (a.characteristics && a.characteristics.indexOf("public.accessibility.describes-video") >= 0) {
                    b = "main-desc";
                }
                return b;
            };
            var ik = function c(b, a) {
                b.abort();
                b.pause();
                if (a && a.activePlaylistLoader) {
                    a.activePlaylistLoader.pause();
                    a.activePlaylistLoader = null;
                }
            };
            var il = function c(a, b) {
                b.activePlaylistLoader = a;
                a.load();
            };
            var im = function a(b, c) {
                return function() {
                    var e = c.segmentLoaders, f = e[b], h = e.main, a = c.mediaTypes[b];
                    var i = a.activeTrack();
                    var d = a.getActiveGroup();
                    var j = a.activePlaylistLoader;
                    var g = a.lastGroup_;
                    if (d && g && d.id === g.id) {
                        return;
                    }
                    a.lastGroup_ = d;
                    a.lastTrack_ = i;
                    ik(f, a);
                    if (!d || d.isMasterPlaylist) {
                        return;
                    }
                    if (!d.playlistLoader) {
                        if (j) {
                            h.resetEverything();
                        }
                        return;
                    }
                    f.resyncLoader();
                    il(d.playlistLoader, a);
                };
            };
            var io = function a(b, c) {
                return function() {
                    var a = c.segmentLoaders[b], d = c.mediaTypes[b];
                    d.lastGroup_ = null;
                    a.abort();
                    a.pause();
                };
            };
            var ip = function a(b, c) {
                return function() {
                    var l = c.masterPlaylistLoader, j = c.segmentLoaders, f = j[b], h = j.main, a = c.mediaTypes[b];
                    var d = a.activeTrack();
                    var e = a.getActiveGroup();
                    var m = a.activePlaylistLoader;
                    var g = a.lastTrack_;
                    if (g && d && g.id === d.id) {
                        return;
                    }
                    a.lastGroup_ = e;
                    a.lastTrack_ = d;
                    ik(f, a);
                    if (!e) {
                        return;
                    }
                    if (e.isMasterPlaylist) {
                        if (!d || !g || d.id === g.id) {
                            return;
                        }
                        var i = c.vhs.masterPlaylistController_;
                        var k = i.selectPlaylist();
                        if (i.media() === k) {
                            return;
                        }
                        a.logger_("track change. Switching master audio from " + g.id + " to " + d.id);
                        l.pause();
                        h.resetEverything();
                        i.fastQualityChange_(k);
                        return;
                    }
                    if (b === "AUDIO") {
                        if (!e.playlistLoader) {
                            h.setAudio(true);
                            h.resetEverything();
                            return;
                        }
                        f.setAudio(true);
                        h.setAudio(false);
                    }
                    if (m === e.playlistLoader) {
                        il(e.playlistLoader, a);
                        return;
                    }
                    if (f.track) {
                        f.track(d);
                    }
                    f.resetEverything();
                    il(e.playlistLoader, a);
                };
            };
            var iq = {
                AUDIO: function a(c, d) {
                    return function() {
                        var h = d.segmentLoaders[c], a = d.mediaTypes[c], i = d.blacklistCurrentPlaylist;
                        ik(h, a);
                        var j = a.activeTrack();
                        var e = a.activeGroup();
                        var k = (e.filter(function(a) {
                            return a["default"];
                        })[0] || e[0]).id;
                        var f = a.tracks[k];
                        if (j === f) {
                            i({
                                message: "Problem encountered loading the default audio track."
                            });
                            return;
                        }
                        b.log.warn("Problem encountered loading the alternate audio track." + "Switching back to default.");
                        for(var g in a.tracks){
                            a.tracks[g].enabled = a.tracks[g] === f;
                        }
                        a.onTrackChanged();
                    };
                },
                SUBTITLES: function a(c, d) {
                    return function() {
                        var f = d.segmentLoaders[c], a = d.mediaTypes[c];
                        b.log.warn("Problem encountered loading the subtitle track." + "Disabling subtitle track.");
                        ik(f, a);
                        var e = a.activeTrack();
                        if (e) {
                            e.mode = "disabled";
                        }
                        a.onTrackChanged();
                    };
                }
            };
            var ir = {
                AUDIO: function d(c, a, b) {
                    if (!a) {
                        return;
                    }
                    var e = b.tech, f = b.requestOptions, g = b.segmentLoaders[c];
                    a.on("loadedmetadata", function() {
                        var b = a.media();
                        g.playlist(b, f);
                        if (!e.paused() || (b.endList && e.preload() !== "none")) {
                            g.load();
                        }
                    });
                    a.on("loadedplaylist", function() {
                        g.playlist(a.media(), f);
                        if (!e.paused()) {
                            g.load();
                        }
                    });
                    a.on("error", iq[c](c, b));
                },
                SUBTITLES: function d(b, c, a) {
                    var e = a.tech, f = a.requestOptions, g = a.segmentLoaders[b], h = a.mediaTypes[b];
                    c.on("loadedmetadata", function() {
                        var a = c.media();
                        g.playlist(a, f);
                        g.track(h.activeTrack());
                        if (!e.paused() || (a.endList && e.preload() !== "none")) {
                            g.load();
                        }
                    });
                    c.on("loadedplaylist", function() {
                        g.playlist(c.media(), f);
                        if (!e.paused()) {
                            g.load();
                        }
                    });
                    c.on("error", iq[b](b, a));
                }
            };
            var is = {
                AUDIO: function t(c, d) {
                    var i = d.vhs, n = d.sourceType, q = d.segmentLoaders[c], j = d.requestOptions, e = d.master.mediaGroups, k = d.mediaTypes[c], l = k.groups, o = k.tracks, r = k.logger_, m = d.masterPlaylistLoader;
                    var p = c7(m.master);
                    if (!e[c] || Object.keys(e[c]).length === 0) {
                        e[c] = {
                            main: {
                                default: {
                                    default: true
                                }
                            }
                        };
                        if (p) {
                            e[c].main["default"].playlists = m.master.playlists;
                        }
                    }
                    for(var g in e[c]){
                        if (!l[g]) {
                            l[g] = [];
                        }
                        for(var f in e[c][g]){
                            var a = e[c][g][f];
                            var h = void 0;
                            if (p) {
                                r("AUDIO group '" + g + "' label '" + f + "' is a master playlist");
                                a.isMasterPlaylist = true;
                                h = null;
                            } else if (n === "vhs-json" && a.playlists) {
                                h = new da(a.playlists[0], i, j);
                            } else if (a.resolvedUri) {
                                h = new da(a.resolvedUri, i, j);
                            } else if (a.playlists && n === "dash") {
                                h = new gR(a.playlists[0], i, j, m);
                            } else {
                                h = null;
                            }
                            a = b.mergeOptions({
                                id: f,
                                playlistLoader: h
                            }, a);
                            ir[c](c, a.playlistLoader, d);
                            l[g].push(a);
                            if (typeof o[f] === "undefined") {
                                var s = new b.AudioTrack({
                                    id: f,
                                    kind: ij(a),
                                    enabled: false,
                                    language: a.language,
                                    default: a["default"],
                                    label: f
                                });
                                o[f] = s;
                            }
                        }
                    }
                    q.on("error", iq[c](c, d));
                },
                SUBTITLES: function t(c, d) {
                    var o = d.tech, i = d.vhs, j = d.sourceType, p = d.segmentLoaders[c], k = d.requestOptions, g = d.master.mediaGroups, m = d.mediaTypes[c], l = m.groups, n = m.tracks, q = d.masterPlaylistLoader;
                    for(var f in g[c]){
                        if (!l[f]) {
                            l[f] = [];
                        }
                        for(var e in g[c][f]){
                            if (g[c][f][e].forced) {
                                continue;
                            }
                            var a = g[c][f][e];
                            var h = void 0;
                            if (j === "hls") {
                                h = new da(a.resolvedUri, i, k);
                            } else if (j === "dash") {
                                var r = a.playlists.filter(function(a) {
                                    return a.excludeUntil !== Infinity;
                                });
                                if (!r.length) {
                                    return;
                                }
                                h = new gR(a.playlists[0], i, k, q);
                            } else if (j === "vhs-json") {
                                h = new da(a.playlists ? a.playlists[0] : a.resolvedUri, i, k);
                            }
                            a = b.mergeOptions({
                                id: e,
                                playlistLoader: h
                            }, a);
                            ir[c](c, a.playlistLoader, d);
                            l[f].push(a);
                            if (typeof n[e] === "undefined") {
                                var s = o.addRemoteTextTrack({
                                    id: e,
                                    kind: "subtitles",
                                    default: a["default"] && a.autoselect,
                                    language: a.language,
                                    label: e
                                }, false).track;
                                n[e] = s;
                            }
                        }
                    }
                    p.on("error", iq[c](c, d));
                },
                "CLOSED-CAPTIONS": function o(f, g) {
                    var h = g.tech, i = g.master.mediaGroups, k = g.mediaTypes[f], j = k.groups, l = k.tracks;
                    for(var d in i[f]){
                        if (!j[d]) {
                            j[d] = [];
                        }
                        for(var e in i[f][d]){
                            var c = i[f][d][e];
                            if (!/^(?:CC|SERVICE)/.test(c.instreamId)) {
                                continue;
                            }
                            var m = (h.options_.vhs && h.options_.vhs.captionServices) || {};
                            var a = {
                                label: e,
                                language: c.language,
                                instreamId: c.instreamId,
                                default: c["default"] && c.autoselect
                            };
                            if (m[a.instreamId]) {
                                a = b.mergeOptions(a, m[a.instreamId]);
                            }
                            if (a["default"] === undefined) {
                                delete a["default"];
                            }
                            j[d].push(b.mergeOptions({
                                id: e
                            }, c));
                            if (typeof l[e] === "undefined") {
                                var n = h.addRemoteTextTrack({
                                    id: a.instreamId,
                                    kind: "captions",
                                    default: a["default"],
                                    language: a.language,
                                    label: a.label
                                }, false).track;
                                l[e] = n;
                            }
                        }
                    }
                }
            };
            var it = function d(b, c) {
                for(var a = 0; a < b.length; a++){
                    if (c6(c, b[a])) {
                        return true;
                    }
                    if (b[a].playlists && d(b[a].playlists, c)) {
                        return true;
                    }
                }
                return false;
            };
            var iu = function a(b, c) {
                return function(h) {
                    var j = c.masterPlaylistLoader, d = c.mediaTypes[b].groups;
                    var f = j.media();
                    if (!f) {
                        return null;
                    }
                    var a = null;
                    if (f.attributes[b]) {
                        a = d[f.attributes[b]];
                    }
                    var e = Object.keys(d);
                    if (!a) {
                        if (b === "AUDIO" && e.length > 1 && c7(c.master)) {
                            for(var g = 0; g < e.length; g++){
                                var i = d[e[g]];
                                if (it(i, f)) {
                                    a = i;
                                    break;
                                }
                            }
                        } else if (d.main) {
                            a = d.main;
                        } else if (e.length === 1) {
                            a = d[e[0]];
                        }
                    }
                    if (typeof h === "undefined") {
                        return a;
                    }
                    if (h === null || !a) {
                        return null;
                    }
                    return (a.filter(function(a) {
                        return a.id === h.id;
                    })[0] || null);
                };
            };
            var iv = {
                AUDIO: function a(b, c) {
                    return function() {
                        var a = c.mediaTypes[b].tracks;
                        for(var d in a){
                            if (a[d].enabled) {
                                return a[d];
                            }
                        }
                        return null;
                    };
                },
                SUBTITLES: function a(b, c) {
                    return function() {
                        var a = c.mediaTypes[b].tracks;
                        for(var d in a){
                            if (a[d].mode === "showing" || a[d].mode === "hidden") {
                                return a[d];
                            }
                        }
                        return null;
                    };
                }
            };
            var iw = function b(c, a) {
                var d = a.mediaTypes;
                return function() {
                    var a = d[c].activeTrack();
                    if (!a) {
                        return null;
                    }
                    return d[c].activeGroup(a);
                };
            };
            var ix = function n(b) {
                [
                    "AUDIO",
                    "SUBTITLES",
                    "CLOSED-CAPTIONS"
                ].forEach(function(a) {
                    is[a](a, b);
                });
                var a = b.mediaTypes, e = b.masterPlaylistLoader, c = b.tech, h = b.vhs, f = b.segmentLoaders, i = f["AUDIO"], g = f.main;
                [
                    "AUDIO",
                    "SUBTITLES"
                ].forEach(function(c) {
                    a[c].activeGroup = iu(c, b);
                    a[c].activeTrack = iv[c](c, b);
                    a[c].onGroupChanged = im(c, b);
                    a[c].onGroupChanging = io(c, b);
                    a[c].onTrackChanged = ip(c, b);
                    a[c].getActiveGroup = iw(c, b);
                });
                var d = a.AUDIO.activeGroup();
                if (d) {
                    var j = (d.filter(function(a) {
                        return a["default"];
                    })[0] || d[0]).id;
                    a.AUDIO.tracks[j].enabled = true;
                    a.AUDIO.onGroupChanged();
                    a.AUDIO.onTrackChanged();
                    var k = a.AUDIO.getActiveGroup();
                    if (!k.playlistLoader) {
                        g.setAudio(true);
                    } else {
                        g.setAudio(false);
                        i.setAudio(true);
                    }
                }
                e.on("mediachange", function() {
                    [
                        "AUDIO",
                        "SUBTITLES"
                    ].forEach(function(b) {
                        return a[b].onGroupChanged();
                    });
                });
                e.on("mediachanging", function() {
                    [
                        "AUDIO",
                        "SUBTITLES"
                    ].forEach(function(b) {
                        return a[b].onGroupChanging();
                    });
                });
                var l = function b() {
                    a.AUDIO.onTrackChanged();
                    c.trigger({
                        type: "usage",
                        name: "vhs-audio-change"
                    });
                    c.trigger({
                        type: "usage",
                        name: "hls-audio-change"
                    });
                };
                c.audioTracks().addEventListener("change", l);
                c.remoteTextTracks().addEventListener("change", a.SUBTITLES.onTrackChanged);
                h.on("dispose", function() {
                    c.audioTracks().removeEventListener("change", l);
                    c.remoteTextTracks().removeEventListener("change", a.SUBTITLES.onTrackChanged);
                });
                c.clearTracks("audio");
                for(var m in a.AUDIO.tracks){
                    c.audioTracks().addTrack(a.AUDIO.tracks[m]);
                }
            };
            var iy = function b() {
                var a = {};
                [
                    "AUDIO",
                    "SUBTITLES",
                    "CLOSED-CAPTIONS"
                ].forEach(function(b) {
                    a[b] = {
                        groups: {},
                        tracks: {},
                        activePlaylistLoader: null,
                        activeGroup: hY,
                        activeTrack: hY,
                        getActiveGroup: hY,
                        onGroupChanged: hY,
                        onTrackChanged: hY,
                        lastTrack_: null,
                        logger_: a1("MediaGroups[" + b + "]")
                    };
                });
                return a;
            };
            var iz = 60 * 2;
            var iA;
            var iB = [
                "mediaRequests",
                "mediaRequestsAborted",
                "mediaRequestsTimedout",
                "mediaRequestsErrored",
                "mediaTransferDuration",
                "mediaBytesTransferred",
                "mediaAppends", 
            ];
            var iC = function b(a) {
                return (this.audioSegmentLoader_[a] + this.mainSegmentLoader_[a]);
            };
            var iD = function t(a) {
                var c = a.currentPlaylist, k = a.buffered, l = a.currentTime, g = a.nextPlaylist, m = a.bufferLowWaterLine, n = a.bufferHighWaterLine, o = a.duration, f = a.experimentalBufferBasedABR, d = a.log;
                if (!g) {
                    b.log.warn("We received no playlist to switch to. Please check your stream.");
                    return false;
                }
                var e = "allowing switch " + ((c && c.id) || "null") + " -> " + g.id;
                if (!c) {
                    d(e + " as current playlist is not set");
                    return true;
                }
                if (g.id === c.id) {
                    return false;
                }
                var s = Boolean(fS(k, l).length);
                if (!c.endList) {
                    if (!s && typeof c.partTargetDuration === "number") {
                        d("not " + e + " as current playlist is live llhls, but currentTime isn't in buffered.");
                        return false;
                    }
                    d(e + " as current playlist is live");
                    return true;
                }
                var h = f_(k, l);
                var p = f ? dk.EXPERIMENTAL_MAX_BUFFER_LOW_WATER_LINE : dk.MAX_BUFFER_LOW_WATER_LINE;
                if (o < p) {
                    d(e + " as duration < max low water line (" + o + " < " + p + ")");
                    return true;
                }
                var i = g.attributes.BANDWIDTH;
                var j = c.attributes.BANDWIDTH;
                if (i < j && (!f || h < n)) {
                    var q = e + " as next bandwidth < current bandwidth (" + i + " < " + j + ")";
                    if (f) {
                        q += " and forwardBuffer < bufferHighWaterLine (" + h + " < " + n + ")";
                    }
                    d(q);
                    return true;
                }
                if ((!f || i > j) && h >= m) {
                    var r = e + " as forwardBuffer >= bufferLowWaterLine (" + h + " >= " + m + ")";
                    if (f) {
                        r += " and next bandwidth > current bandwidth (" + i + " > " + j + ")";
                    }
                    d(r);
                    return true;
                }
                d("not " + e + " as no switching criteria met");
                return false;
            };
            var iE = (function(d) {
                (0, dF.Z)(c, d);
                function c(c) {
                    var a;
                    a = d.call(this) || this;
                    var g = c.src, k = c.handleManifestRedirects, j = c.withCredentials, h = c.tech, l = c.bandwidth, m = c.externVhs, n = c.useCueTags, o = c.blacklistDuration, p = c.enableLowInitialPlaylist, q = c.sourceType, r = c.cacheEncryptionKeys, s = c.experimentalBufferBasedABR, t = c.experimentalLeastPixelDiffSelector, u = c.captionServices;
                    if (!g) {
                        throw new Error("A non-empty playlist URL or JSON manifest string is required");
                    }
                    var e = c.maxPlaylistRetries;
                    if (e === null || typeof e === "undefined") {
                        e = Infinity;
                    }
                    iA = m;
                    a.experimentalBufferBasedABR = Boolean(s);
                    a.experimentalLeastPixelDiffSelector = Boolean(t);
                    a.withCredentials = j;
                    a.tech_ = h;
                    a.vhs_ = h.vhs;
                    a.sourceType_ = q;
                    a.useCueTags_ = n;
                    a.blacklistDuration = o;
                    a.maxPlaylistRetries = e;
                    a.enableLowInitialPlaylist = p;
                    if (a.useCueTags_) {
                        a.cueTagsTrack_ = a.tech_.addTextTrack("metadata", "ad-cues");
                        a.cueTagsTrack_.inBandMetadataTrackDispatchType = "";
                    }
                    a.requestOptions_ = {
                        withCredentials: j,
                        handleManifestRedirects: k,
                        maxPlaylistRetries: e,
                        timeout: null
                    };
                    a.on("error", a.pauseLoading);
                    a.mediaTypes_ = iy();
                    a.mediaSource = new (f().MediaSource)();
                    a.handleDurationChange_ = a.handleDurationChange_.bind((0, dE.Z)(a));
                    a.handleSourceOpen_ = a.handleSourceOpen_.bind((0, dE.Z)(a));
                    a.handleSourceEnded_ = a.handleSourceEnded_.bind((0, dE.Z)(a));
                    a.mediaSource.addEventListener("durationchange", a.handleDurationChange_);
                    a.mediaSource.addEventListener("sourceopen", a.handleSourceOpen_);
                    a.mediaSource.addEventListener("sourceended", a.handleSourceEnded_);
                    a.seekable_ = b.createTimeRanges();
                    a.hasPlayed_ = false;
                    a.syncController_ = new ig(c);
                    a.segmentMetadataTrack_ = h.addRemoteTextTrack({
                        kind: "metadata",
                        label: "segment-metadata"
                    }, false).track;
                    a.decrypter_ = new ii();
                    a.sourceUpdater_ = new h7(a.mediaSource);
                    a.inbandTextTracks_ = {};
                    a.timelineChangeController_ = new ih();
                    var i = {
                        vhs: a.vhs_,
                        parse708captions: c.parse708captions,
                        captionServices: u,
                        mediaSource: a.mediaSource,
                        currentTime: a.tech_.currentTime.bind(a.tech_),
                        seekable: function b() {
                            return a.seekable();
                        },
                        seeking: function b() {
                            return a.tech_.seeking();
                        },
                        duration: function b() {
                            return a.duration();
                        },
                        hasPlayed: function b() {
                            return a.hasPlayed_;
                        },
                        goalBufferLength: function b() {
                            return a.goalBufferLength();
                        },
                        bandwidth: l,
                        syncController: a.syncController_,
                        decrypter: a.decrypter_,
                        sourceType: a.sourceType_,
                        inbandTextTracks: a.inbandTextTracks_,
                        cacheEncryptionKeys: r,
                        sourceUpdater: a.sourceUpdater_,
                        timelineChangeController: a.timelineChangeController_,
                        experimentalExactManifestTimings: c.experimentalExactManifestTimings
                    };
                    a.masterPlaylistLoader_ = a.sourceType_ === "dash" ? new gR(g, a.vhs_, a.requestOptions_) : new da(g, a.vhs_, a.requestOptions_);
                    a.setupMasterPlaylistLoaderListeners_();
                    a.mainSegmentLoader_ = new dv(b.mergeOptions(i, {
                        segmentMetadataTrack: a.segmentMetadataTrack_,
                        loaderType: "main"
                    }), c);
                    a.audioSegmentLoader_ = new dv(b.mergeOptions(i, {
                        loaderType: "audio"
                    }), c);
                    a.subtitleSegmentLoader_ = new ia(b.mergeOptions(i, {
                        loaderType: "vtt",
                        featuresNativeTextTracks: a.tech_.featuresNativeTextTracks
                    }), c);
                    a.setupSegmentLoaderListeners_();
                    if (a.experimentalBufferBasedABR) {
                        a.masterPlaylistLoader_.one("loadedplaylist", function() {
                            return a.startABRTimer_();
                        });
                        a.tech_.on("pause", function() {
                            return a.stopABRTimer_();
                        });
                        a.tech_.on("play", function() {
                            return a.startABRTimer_();
                        });
                    }
                    iB.forEach(function(b) {
                        a[b + "_"] = iC.bind((0, dE.Z)(a), b);
                    });
                    a.logger_ = a1("MPC");
                    a.triggeredFmp4Usage = false;
                    if (a.tech_.preload() === "none") {
                        a.loadOnPlay_ = function() {
                            a.loadOnPlay_ = null;
                            a.masterPlaylistLoader_.load();
                        };
                        a.tech_.one("play", a.loadOnPlay_);
                    } else {
                        a.masterPlaylistLoader_.load();
                    }
                    a.timeToLoadedData__ = -1;
                    a.mainAppendsToLoadedData__ = -1;
                    a.audioAppendsToLoadedData__ = -1;
                    var v = a.tech_.preload() === "none" ? "play" : "loadstart";
                    a.tech_.one(v, function() {
                        var b = Date.now();
                        a.tech_.one("loadeddata", function() {
                            a.timeToLoadedData__ = Date.now() - b;
                            a.mainAppendsToLoadedData__ = a.mainSegmentLoader_.mediaAppends;
                            a.audioAppendsToLoadedData__ = a.audioSegmentLoader_.mediaAppends;
                        });
                    });
                    return a;
                }
                var a = c.prototype;
                a.mainAppendsToLoadedData_ = function a() {
                    return this.mainAppendsToLoadedData__;
                };
                a.audioAppendsToLoadedData_ = function a() {
                    return this.audioAppendsToLoadedData__;
                };
                a.appendsToLoadedData_ = function c() {
                    var a = this.mainAppendsToLoadedData_();
                    var b = this.audioAppendsToLoadedData_();
                    if (a === -1 || b === -1) {
                        return -1;
                    }
                    return a + b;
                };
                a.timeToLoadedData_ = function a() {
                    return this.timeToLoadedData__;
                };
                a.checkABR_ = function b() {
                    var a = this.selectPlaylist();
                    if (a && this.shouldSwitchToMedia_(a)) {
                        this.switchMedia_(a, "abr");
                    }
                };
                a.switchMedia_ = function g(a, d, f) {
                    var b = this.media();
                    var c = b && (b.id || b.uri);
                    var e = a.id || a.uri;
                    if (c && c !== e) {
                        this.logger_("switch media " + c + " -> " + e + " from " + d);
                        this.tech_.trigger({
                            type: "usage",
                            name: "vhs-rendition-change-" + d
                        });
                    }
                    this.masterPlaylistLoader_.media(a, f);
                };
                a.startABRTimer_ = function a() {
                    var b = this;
                    this.stopABRTimer_();
                    this.abrTimer_ = f().setInterval(function() {
                        return b.checkABR_();
                    }, 250);
                };
                a.stopABRTimer_ = function a() {
                    if (this.tech_.scrubbing && this.tech_.scrubbing()) {
                        return;
                    }
                    f().clearInterval(this.abrTimer_);
                    this.abrTimer_ = null;
                };
                a.getAudioTrackPlaylists_ = function m() {
                    var a = this.master();
                    var g = (a && a.playlists) || [];
                    if (!a || !a.mediaGroups || !a.mediaGroups.AUDIO) {
                        return g;
                    }
                    var b = a.mediaGroups.AUDIO;
                    var j = Object.keys(b);
                    var d;
                    if (Object.keys(this.mediaTypes_.AUDIO.groups).length) {
                        d = this.mediaTypes_.AUDIO.activeTrack();
                    } else {
                        var k = b.main || (j.length && b[j[0]]);
                        for(var l in k){
                            if (k[l]["default"]) {
                                d = {
                                    label: l
                                };
                                break;
                            }
                        }
                    }
                    if (!d) {
                        return g;
                    }
                    var c = [];
                    for(var h in b){
                        if (b[h][d.label]) {
                            var e = b[h][d.label];
                            if (e.playlists && e.playlists.length) {
                                c.push.apply(c, e.playlists);
                            } else if (e.uri) {
                                c.push(e);
                            } else if (a.playlists.length) {
                                for(var i = 0; i < a.playlists.length; i++){
                                    var f = a.playlists[i];
                                    if (f.attributes && f.attributes.AUDIO && f.attributes.AUDIO === h) {
                                        c.push(f);
                                    }
                                }
                            }
                        }
                    }
                    if (!c.length) {
                        return g;
                    }
                    return c;
                };
                a.setupMasterPlaylistLoaderListeners_ = function a() {
                    var b = this;
                    this.masterPlaylistLoader_.on("loadedmetadata", function() {
                        var a = b.masterPlaylistLoader_.media();
                        var c = a.targetDuration * 1.5 * 1000;
                        if (c5(b.masterPlaylistLoader_.master, b.masterPlaylistLoader_.media())) {
                            b.requestOptions_.timeout = 0;
                        } else {
                            b.requestOptions_.timeout = c;
                        }
                        if (a.endList && b.tech_.preload() !== "none") {
                            b.mainSegmentLoader_.playlist(a, b.requestOptions_);
                            b.mainSegmentLoader_.load();
                        }
                        ix({
                            sourceType: b.sourceType_,
                            segmentLoaders: {
                                AUDIO: b.audioSegmentLoader_,
                                SUBTITLES: b.subtitleSegmentLoader_,
                                main: b.mainSegmentLoader_
                            },
                            tech: b.tech_,
                            requestOptions: b.requestOptions_,
                            masterPlaylistLoader: b.masterPlaylistLoader_,
                            vhs: b.vhs_,
                            master: b.master(),
                            mediaTypes: b.mediaTypes_,
                            blacklistCurrentPlaylist: b.blacklistCurrentPlaylist.bind(b)
                        });
                        b.triggerPresenceUsage_(b.master(), a);
                        b.setupFirstPlay();
                        if (!b.mediaTypes_.AUDIO.activePlaylistLoader || b.mediaTypes_.AUDIO.activePlaylistLoader.media()) {
                            b.trigger("selectedinitialmedia");
                        } else {
                            b.mediaTypes_.AUDIO.activePlaylistLoader.one("loadedmetadata", function() {
                                b.trigger("selectedinitialmedia");
                            });
                        }
                    });
                    this.masterPlaylistLoader_.on("loadedplaylist", function() {
                        if (b.loadOnPlay_) {
                            b.tech_.off("play", b.loadOnPlay_);
                        }
                        var c = b.masterPlaylistLoader_.media();
                        if (!c) {
                            b.excludeUnsupportedVariants_();
                            var a;
                            if (b.enableLowInitialPlaylist) {
                                a = b.selectInitialPlaylist();
                            }
                            if (!a) {
                                a = b.selectPlaylist();
                            }
                            if (!a || !b.shouldSwitchToMedia_(a)) {
                                return;
                            }
                            b.initialMedia_ = a;
                            b.switchMedia_(b.initialMedia_, "initial");
                            var d = b.sourceType_ === "vhs-json" && b.initialMedia_.segments;
                            if (!d) {
                                return;
                            }
                            c = b.initialMedia_;
                        }
                        b.handleUpdatedMediaPlaylist(c);
                    });
                    this.masterPlaylistLoader_.on("error", function() {
                        b.blacklistCurrentPlaylist(b.masterPlaylistLoader_.error);
                    });
                    this.masterPlaylistLoader_.on("mediachanging", function() {
                        b.mainSegmentLoader_.abort();
                        b.mainSegmentLoader_.pause();
                    });
                    this.masterPlaylistLoader_.on("mediachange", function() {
                        var a = b.masterPlaylistLoader_.media();
                        var c = a.targetDuration * 1.5 * 1000;
                        if (c5(b.masterPlaylistLoader_.master, b.masterPlaylistLoader_.media())) {
                            b.requestOptions_.timeout = 0;
                        } else {
                            b.requestOptions_.timeout = c;
                        }
                        b.mainSegmentLoader_.playlist(a, b.requestOptions_);
                        b.mainSegmentLoader_.load();
                        b.tech_.trigger({
                            type: "mediachange",
                            bubbles: true
                        });
                    });
                    this.masterPlaylistLoader_.on("playlistunchanged", function() {
                        var a = b.masterPlaylistLoader_.media();
                        if (a.lastExcludeReason_ === "playlist-unchanged") {
                            return;
                        }
                        var c = b.stuckAtPlaylistEnd_(a);
                        if (c) {
                            b.blacklistCurrentPlaylist({
                                message: "Playlist no longer updating.",
                                reason: "playlist-unchanged"
                            });
                            b.tech_.trigger("playliststuck");
                        }
                    });
                    this.masterPlaylistLoader_.on("renditiondisabled", function() {
                        b.tech_.trigger({
                            type: "usage",
                            name: "vhs-rendition-disabled"
                        });
                        b.tech_.trigger({
                            type: "usage",
                            name: "hls-rendition-disabled"
                        });
                    });
                    this.masterPlaylistLoader_.on("renditionenabled", function() {
                        b.tech_.trigger({
                            type: "usage",
                            name: "vhs-rendition-enabled"
                        });
                        b.tech_.trigger({
                            type: "usage",
                            name: "hls-rendition-enabled"
                        });
                    });
                };
                a.handleUpdatedMediaPlaylist = function b(a) {
                    if (this.useCueTags_) {
                        this.updateAdCues_(a);
                    }
                    this.mainSegmentLoader_.playlist(a, this.requestOptions_);
                    this.updateDuration(!a.endList);
                    if (!this.tech_.paused()) {
                        this.mainSegmentLoader_.load();
                        if (this.audioSegmentLoader_) {
                            this.audioSegmentLoader_.load();
                        }
                    }
                };
                a.triggerPresenceUsage_ = function i(e, f) {
                    var a = e.mediaGroups || {};
                    var b = true;
                    var c = Object.keys(a.AUDIO);
                    for(var d in a.AUDIO){
                        for(var g in a.AUDIO[d]){
                            var h = a.AUDIO[d][g];
                            if (!h.uri) {
                                b = false;
                            }
                        }
                    }
                    if (b) {
                        this.tech_.trigger({
                            type: "usage",
                            name: "vhs-demuxed"
                        });
                        this.tech_.trigger({
                            type: "usage",
                            name: "hls-demuxed"
                        });
                    }
                    if (Object.keys(a.SUBTITLES).length) {
                        this.tech_.trigger({
                            type: "usage",
                            name: "vhs-webvtt"
                        });
                        this.tech_.trigger({
                            type: "usage",
                            name: "hls-webvtt"
                        });
                    }
                    if (iA.Playlist.isAes(f)) {
                        this.tech_.trigger({
                            type: "usage",
                            name: "vhs-aes"
                        });
                        this.tech_.trigger({
                            type: "usage",
                            name: "hls-aes"
                        });
                    }
                    if (c.length && Object.keys(a.AUDIO[c[0]]).length > 1) {
                        this.tech_.trigger({
                            type: "usage",
                            name: "vhs-alternate-audio"
                        });
                        this.tech_.trigger({
                            type: "usage",
                            name: "hls-alternate-audio"
                        });
                    }
                    if (this.useCueTags_) {
                        this.tech_.trigger({
                            type: "usage",
                            name: "vhs-playlist-cue-tags"
                        });
                        this.tech_.trigger({
                            type: "usage",
                            name: "hls-playlist-cue-tags"
                        });
                    }
                };
                a.shouldSwitchToMedia_ = function g(a) {
                    var b = this.masterPlaylistLoader_.media() || this.masterPlaylistLoader_.pendingMedia_;
                    var c = this.tech_.currentTime();
                    var d = this.bufferLowWaterLine();
                    var e = this.bufferHighWaterLine();
                    var f = this.tech_.buffered();
                    return iD({
                        buffered: f,
                        currentTime: c,
                        currentPlaylist: b,
                        nextPlaylist: a,
                        bufferLowWaterLine: d,
                        bufferHighWaterLine: e,
                        duration: this.duration(),
                        experimentalBufferBasedABR: this.experimentalBufferBasedABR,
                        log: this.logger_
                    });
                };
                a.setupSegmentLoaderListeners_ = function b() {
                    var c = this;
                    if (!this.experimentalBufferBasedABR) {
                        this.mainSegmentLoader_.on("bandwidthupdate", function() {
                            var a = c.selectPlaylist();
                            if (c.shouldSwitchToMedia_(a)) {
                                c.switchMedia_(a, "bandwidthupdate");
                            }
                            c.tech_.trigger("bandwidthupdate");
                        });
                        this.mainSegmentLoader_.on("progress", function() {
                            c.trigger("progress");
                        });
                    }
                    this.mainSegmentLoader_.on("error", function() {
                        c.blacklistCurrentPlaylist(c.mainSegmentLoader_.error());
                    });
                    this.mainSegmentLoader_.on("appenderror", function() {
                        c.error = c.mainSegmentLoader_.error_;
                        c.trigger("error");
                    });
                    this.mainSegmentLoader_.on("syncinfoupdate", function() {
                        c.onSyncInfoUpdate_();
                    });
                    this.mainSegmentLoader_.on("timestampoffset", function() {
                        c.tech_.trigger({
                            type: "usage",
                            name: "vhs-timestamp-offset"
                        });
                        c.tech_.trigger({
                            type: "usage",
                            name: "hls-timestamp-offset"
                        });
                    });
                    this.audioSegmentLoader_.on("syncinfoupdate", function() {
                        c.onSyncInfoUpdate_();
                    });
                    this.audioSegmentLoader_.on("appenderror", function() {
                        c.error = c.audioSegmentLoader_.error_;
                        c.trigger("error");
                    });
                    this.mainSegmentLoader_.on("ended", function() {
                        c.logger_("main segment loader ended");
                        c.onEndOfStream();
                    });
                    this.mainSegmentLoader_.on("earlyabort", function(a) {
                        if (c.experimentalBufferBasedABR) {
                            return;
                        }
                        c.delegateLoaders_("all", [
                            "abort"
                        ]);
                        c.blacklistCurrentPlaylist({
                            message: "Aborted early because there isn't enough bandwidth to complete the " + "request without rebuffering."
                        }, iz);
                    });
                    var a = function b() {
                        if (!c.sourceUpdater_.hasCreatedSourceBuffers()) {
                            return c.tryToCreateSourceBuffers_();
                        }
                        var a = c.getCodecsOrExclude_();
                        if (!a) {
                            return;
                        }
                        c.sourceUpdater_.addOrChangeSourceBuffers(a);
                    };
                    this.mainSegmentLoader_.on("trackinfo", a);
                    this.audioSegmentLoader_.on("trackinfo", a);
                    this.mainSegmentLoader_.on("fmp4", function() {
                        if (!c.triggeredFmp4Usage) {
                            c.tech_.trigger({
                                type: "usage",
                                name: "vhs-fmp4"
                            });
                            c.tech_.trigger({
                                type: "usage",
                                name: "hls-fmp4"
                            });
                            c.triggeredFmp4Usage = true;
                        }
                    });
                    this.audioSegmentLoader_.on("fmp4", function() {
                        if (!c.triggeredFmp4Usage) {
                            c.tech_.trigger({
                                type: "usage",
                                name: "vhs-fmp4"
                            });
                            c.tech_.trigger({
                                type: "usage",
                                name: "hls-fmp4"
                            });
                            c.triggeredFmp4Usage = true;
                        }
                    });
                    this.audioSegmentLoader_.on("ended", function() {
                        c.logger_("audioSegmentLoader ended");
                        c.onEndOfStream();
                    });
                };
                a.mediaSecondsLoaded_ = function a() {
                    return Math.max(this.audioSegmentLoader_.mediaSecondsLoaded + this.mainSegmentLoader_.mediaSecondsLoaded);
                };
                a.load = function a() {
                    this.mainSegmentLoader_.load();
                    if (this.mediaTypes_.AUDIO.activePlaylistLoader) {
                        this.audioSegmentLoader_.load();
                    }
                    if (this.mediaTypes_.SUBTITLES.activePlaylistLoader) {
                        this.subtitleSegmentLoader_.load();
                    }
                };
                a.smoothQualityChange_ = function b(a) {
                    if (a === void 0) {
                        a = this.selectPlaylist();
                    }
                    this.fastQualityChange_(a);
                };
                a.fastQualityChange_ = function c(a) {
                    var d = this;
                    if (a === void 0) {
                        a = this.selectPlaylist();
                    }
                    if (a === this.masterPlaylistLoader_.media()) {
                        this.logger_("skipping fastQualityChange because new media is same as old");
                        return;
                    }
                    this.switchMedia_(a, "fast-quality");
                    this.mainSegmentLoader_.resetEverything(function() {
                        if (b.browser.IE_VERSION || b.browser.IS_EDGE) {
                            d.tech_.setCurrentTime(d.tech_.currentTime() + 0.04);
                        } else {
                            d.tech_.setCurrentTime(d.tech_.currentTime());
                        }
                    });
                };
                a.play = function b() {
                    if (this.setupFirstPlay()) {
                        return;
                    }
                    if (this.tech_.ended()) {
                        this.tech_.setCurrentTime(0);
                    }
                    if (this.hasPlayed_) {
                        this.load();
                    }
                    var a = this.tech_.seekable();
                    if (this.tech_.duration() === Infinity) {
                        if (this.tech_.currentTime() < a.start(0)) {
                            return this.tech_.setCurrentTime(a.end(a.length - 1));
                        }
                    }
                };
                a.setupFirstPlay = function d() {
                    var e = this;
                    var a = this.masterPlaylistLoader_.media();
                    if (!a || this.tech_.paused() || this.hasPlayed_) {
                        return false;
                    }
                    if (!a.endList) {
                        var c = this.seekable();
                        if (!c.length) {
                            return false;
                        }
                        if (b.browser.IE_VERSION && this.tech_.readyState() === 0) {
                            this.tech_.one("loadedmetadata", function() {
                                e.trigger("firstplay");
                                e.tech_.setCurrentTime(c.end(0));
                                e.hasPlayed_ = true;
                            });
                            return false;
                        }
                        this.trigger("firstplay");
                        this.tech_.setCurrentTime(c.end(0));
                    }
                    this.hasPlayed_ = true;
                    this.load();
                    return true;
                };
                a.handleSourceOpen_ = function b() {
                    this.tryToCreateSourceBuffers_();
                    if (this.tech_.autoplay()) {
                        var a = this.tech_.play();
                        if (typeof a !== "undefined" && typeof a.then === "function") {
                            a.then(null, function(a) {});
                        }
                    }
                    this.trigger("sourceopen");
                };
                a.handleSourceEnded_ = function c() {
                    if (!this.inbandTextTracks_.metadataTrack_) {
                        return;
                    }
                    var a = this.inbandTextTracks_.metadataTrack_.cues;
                    if (!a || !a.length) {
                        return;
                    }
                    var b = this.duration();
                    a[a.length - 1].endTime = isNaN(b) || Math.abs(b) === Infinity ? Number.MAX_VALUE : b;
                };
                a.handleDurationChange_ = function a() {
                    this.tech_.trigger("durationchange");
                };
                a.onEndOfStream = function c() {
                    var a = this.mainSegmentLoader_.ended_;
                    if (this.mediaTypes_.AUDIO.activePlaylistLoader) {
                        var b = this.mainSegmentLoader_.getCurrentMediaInfo_();
                        if (!b || b.hasVideo) {
                            a = a && this.audioSegmentLoader_.ended_;
                        } else {
                            a = this.audioSegmentLoader_.ended_;
                        }
                    }
                    if (!a) {
                        return;
                    }
                    this.stopABRTimer_();
                    this.sourceUpdater_.endOfStream();
                };
                a.stuckAtPlaylistEnd_ = function h(b) {
                    var g = this.seekable();
                    if (!g.length) {
                        return false;
                    }
                    var c = this.syncController_.getExpiredTime(b, this.duration());
                    if (c === null) {
                        return false;
                    }
                    var d = iA.Playlist.playlistEnd(b, c);
                    var e = this.tech_.currentTime();
                    var a = this.tech_.buffered();
                    if (!a.length) {
                        return (d - e <= fQ);
                    }
                    var f = a.end(a.length - 1);
                    return (f - e <= fQ && d - f <= fQ);
                };
                a.blacklistCurrentPlaylist = function o(a, e) {
                    if (a === void 0) {
                        a = {};
                    }
                    var c = a.playlist || this.masterPlaylistLoader_.media();
                    e = e || a.blacklistDuration || this.blacklistDuration;
                    if (!c) {
                        this.error = a;
                        if (this.mediaSource.readyState !== "open") {
                            this.trigger("error");
                        } else {
                            this.sourceUpdater_.endOfStream("network");
                        }
                        return;
                    }
                    c.playlistErrors_++;
                    var f = this.masterPlaylistLoader_.master.playlists;
                    var i = f.filter(c0);
                    var g = i.length === 1 && i[0] === c;
                    if (f.length === 1 && e !== Infinity) {
                        b.log.warn("Problem encountered with playlist " + c.id + ". " + "Trying again since it is the only playlist.");
                        this.tech_.trigger("retryplaylist");
                        return this.masterPlaylistLoader_.load(g);
                    }
                    if (g) {
                        var j = false;
                        f.forEach(function(a) {
                            if (a === c) {
                                return;
                            }
                            var b = a.excludeUntil;
                            if (typeof b !== "undefined" && b !== Infinity) {
                                j = true;
                                delete a.excludeUntil;
                            }
                        });
                        if (j) {
                            b.log.warn("Removing other playlists from the exclusion list because the last " + "rendition is about to be excluded.");
                            this.tech_.trigger("retryplaylist");
                        }
                    }
                    var h;
                    if (c.playlistErrors_ > this.maxPlaylistRetries) {
                        h = Infinity;
                    } else {
                        h = Date.now() + e * 1000;
                    }
                    c.excludeUntil = h;
                    if (a.reason) {
                        c.lastExcludeReason_ = a.reason;
                    }
                    this.tech_.trigger("blacklistplaylist");
                    this.tech_.trigger({
                        type: "usage",
                        name: "vhs-rendition-blacklisted"
                    });
                    this.tech_.trigger({
                        type: "usage",
                        name: "hls-rendition-blacklisted"
                    });
                    var d = this.selectPlaylist();
                    if (!d) {
                        this.error = "Playback cannot continue. No available working or supported playlists.";
                        this.trigger("error");
                        return;
                    }
                    var k = a.internal ? this.logger_ : b.log.warn;
                    var l = a.message ? " " + a.message : "";
                    k((a.internal ? "Internal problem" : "Problem") + " encountered with playlist " + c.id + "." + (l + " Switching to playlist " + d.id + "."));
                    if (d.attributes.AUDIO !== c.attributes.AUDIO) {
                        this.delegateLoaders_("audio", [
                            "abort",
                            "pause"
                        ]);
                    }
                    if (d.attributes.SUBTITLES !== c.attributes.SUBTITLES) {
                        this.delegateLoaders_("subtitle", [
                            "abort",
                            "pause", 
                        ]);
                    }
                    this.delegateLoaders_("main", [
                        "abort",
                        "pause"
                    ]);
                    var m = (d.targetDuration / 2) * 1000 || 5 * 1000;
                    var n = typeof d.lastRequest === "number" && Date.now() - d.lastRequest <= m;
                    return this.switchMedia_(d, "exclude", g || n);
                };
                a.pauseLoading = function a() {
                    this.delegateLoaders_("all", [
                        "abort",
                        "pause"
                    ]);
                    this.stopABRTimer_();
                };
                a.delegateLoaders_ = function e(a, f) {
                    var g = this;
                    var d = [];
                    var c = a === "all";
                    if (c || a === "main") {
                        d.push(this.masterPlaylistLoader_);
                    }
                    var b = [];
                    if (c || a === "audio") {
                        b.push("AUDIO");
                    }
                    if (c || a === "subtitle") {
                        b.push("CLOSED-CAPTIONS");
                        b.push("SUBTITLES");
                    }
                    b.forEach(function(a) {
                        var b = g.mediaTypes_[a] && g.mediaTypes_[a].activePlaylistLoader;
                        if (b) {
                            d.push(b);
                        }
                    });
                    [
                        "main",
                        "audio",
                        "subtitle"
                    ].forEach(function(b) {
                        var c = g[b + "SegmentLoader_"];
                        if (c && (a === b || a === "all")) {
                            d.push(c);
                        }
                    });
                    d.forEach(function(a) {
                        return f.forEach(function(b) {
                            if (typeof a[b] === "function") {
                                a[b]();
                            }
                        });
                    });
                };
                a.setCurrentTime = function c(a) {
                    var b = fS(this.tech_.buffered(), a);
                    if (!(this.masterPlaylistLoader_ && this.masterPlaylistLoader_.media())) {
                        return 0;
                    }
                    if (!this.masterPlaylistLoader_.media().segments) {
                        return 0;
                    }
                    if (b && b.length) {
                        return a;
                    }
                    this.mainSegmentLoader_.resetEverything();
                    this.mainSegmentLoader_.abort();
                    if (this.mediaTypes_.AUDIO.activePlaylistLoader) {
                        this.audioSegmentLoader_.resetEverything();
                        this.audioSegmentLoader_.abort();
                    }
                    if (this.mediaTypes_.SUBTITLES.activePlaylistLoader) {
                        this.subtitleSegmentLoader_.resetEverything();
                        this.subtitleSegmentLoader_.abort();
                    }
                    this.load();
                };
                a.duration = function b() {
                    if (!this.masterPlaylistLoader_) {
                        return 0;
                    }
                    var a = this.masterPlaylistLoader_.media();
                    if (!a) {
                        return 0;
                    }
                    if (!a.endList) {
                        return Infinity;
                    }
                    if (this.mediaSource) {
                        return this.mediaSource.duration;
                    }
                    return iA.Playlist.duration(a);
                };
                a.seekable = function a() {
                    return this.seekable_;
                };
                a.onSyncInfoUpdate_ = function i() {
                    var a;
                    if (!this.masterPlaylistLoader_ || this.sourceUpdater_.hasCreatedSourceBuffers()) {
                        return;
                    }
                    var d = this.masterPlaylistLoader_.media();
                    if (!d) {
                        return;
                    }
                    var e = this.syncController_.getExpiredTime(d, this.duration());
                    if (e === null) {
                        return;
                    }
                    var f = this.masterPlaylistLoader_.master;
                    var c = iA.Playlist.seekable(d, e, iA.Playlist.liveEdgeDelay(f, d));
                    if (c.length === 0) {
                        return;
                    }
                    if (this.mediaTypes_.AUDIO.activePlaylistLoader) {
                        d = this.mediaTypes_.AUDIO.activePlaylistLoader.media();
                        e = this.syncController_.getExpiredTime(d, this.duration());
                        if (e === null) {
                            return;
                        }
                        a = iA.Playlist.seekable(d, e, iA.Playlist.liveEdgeDelay(f, d));
                        if (a.length === 0) {
                            return;
                        }
                    }
                    var g;
                    var h;
                    if (this.seekable_ && this.seekable_.length) {
                        g = this.seekable_.end(0);
                        h = this.seekable_.start(0);
                    }
                    if (!a) {
                        this.seekable_ = c;
                    } else if (a.start(0) > c.end(0) || c.start(0) > a.end(0)) {
                        this.seekable_ = c;
                    } else {
                        this.seekable_ = b.createTimeRanges([
                            [
                                a.start(0) > c.start(0) ? a.start(0) : c.start(0),
                                a.end(0) < c.end(0) ? a.end(0) : c.end(0), 
                            ], 
                        ]);
                    }
                    if (this.seekable_ && this.seekable_.length) {
                        if (this.seekable_.end(0) === g && this.seekable_.start(0) === h) {
                            return;
                        }
                    }
                    this.logger_("seekable updated [" + fW(this.seekable_) + "]");
                    this.tech_.trigger("seekablechanged");
                };
                a.updateDuration = function e(d) {
                    if (this.updateDuration_) {
                        this.mediaSource.removeEventListener("sourceopen", this.updateDuration_);
                        this.updateDuration_ = null;
                    }
                    if (this.mediaSource.readyState !== "open") {
                        this.updateDuration_ = this.updateDuration.bind(this, d);
                        this.mediaSource.addEventListener("sourceopen", this.updateDuration_);
                        return;
                    }
                    if (d) {
                        var a = this.seekable();
                        if (!a.length) {
                            return;
                        }
                        if (isNaN(this.mediaSource.duration) || this.mediaSource.duration < a.end(a.length - 1)) {
                            this.sourceUpdater_.setDuration(a.end(a.length - 1));
                        }
                        return;
                    }
                    var c = this.tech_.buffered();
                    var b = iA.Playlist.duration(this.masterPlaylistLoader_.media());
                    if (c.length > 0) {
                        b = Math.max(b, c.end(c.length - 1));
                    }
                    if (this.mediaSource.duration !== b) {
                        this.sourceUpdater_.setDuration(b);
                    }
                };
                a.dispose = function a() {
                    var b = this;
                    this.trigger("dispose");
                    this.decrypter_.terminate();
                    this.masterPlaylistLoader_.dispose();
                    this.mainSegmentLoader_.dispose();
                    if (this.loadOnPlay_) {
                        this.tech_.off("play", this.loadOnPlay_);
                    }
                    [
                        "AUDIO",
                        "SUBTITLES"
                    ].forEach(function(c) {
                        var a = b.mediaTypes_[c].groups;
                        for(var d in a){
                            a[d].forEach(function(a) {
                                if (a.playlistLoader) {
                                    a.playlistLoader.dispose();
                                }
                            });
                        }
                    });
                    this.audioSegmentLoader_.dispose();
                    this.subtitleSegmentLoader_.dispose();
                    this.sourceUpdater_.dispose();
                    this.timelineChangeController_.dispose();
                    this.stopABRTimer_();
                    if (this.updateDuration_) {
                        this.mediaSource.removeEventListener("sourceopen", this.updateDuration_);
                    }
                    this.mediaSource.removeEventListener("durationchange", this.handleDurationChange_);
                    this.mediaSource.removeEventListener("sourceopen", this.handleSourceOpen_);
                    this.mediaSource.removeEventListener("sourceended", this.handleSourceEnded_);
                    this.off();
                };
                a.master = function a() {
                    return this.masterPlaylistLoader_.master;
                };
                a.media = function a() {
                    return (this.masterPlaylistLoader_.media() || this.initialMedia_);
                };
                a.areMediaTypesKnown_ = function d() {
                    var a = !!this.mediaTypes_.AUDIO.activePlaylistLoader;
                    var b = !!this.mainSegmentLoader_.getCurrentMediaInfo_();
                    var c = !a ? true : !!this.audioSegmentLoader_.getCurrentMediaInfo_();
                    if (!b || !c) {
                        return false;
                    }
                    return true;
                };
                a.getCodecsOrExclude_ = function j() {
                    var k = this;
                    var a = {
                        main: this.mainSegmentLoader_.getCurrentMediaInfo_() || {},
                        audio: this.audioSegmentLoader_.getCurrentMediaInfo_() || {}
                    };
                    a.video = a.main;
                    var c = hq(this.master(), this.media());
                    var b = {};
                    var d = !!this.mediaTypes_.AUDIO.activePlaylistLoader;
                    if (a.main.hasVideo) {
                        b.video = c.video || a.main.videoCodec || dM.xz;
                    }
                    if (a.main.isMuxed) {
                        b.video += "," + (c.audio || a.main.audioCodec || dM.lA);
                    }
                    if ((a.main.hasAudio && !a.main.isMuxed) || a.audio.hasAudio || d) {
                        b.audio = c.audio || a.main.audioCodec || a.audio.audioCodec || dM.lA;
                        a.audio.isFmp4 = a.main.hasAudio && !a.main.isMuxed ? a.main.isFmp4 : a.audio.isFmp4;
                    }
                    if (!b.audio && !b.video) {
                        this.blacklistCurrentPlaylist({
                            playlist: this.media(),
                            message: "Could not determine codecs for playlist.",
                            blacklistDuration: Infinity
                        });
                        return;
                    }
                    var l = function c(b, a) {
                        return b ? (0, dM.p7)(a) : (0, dM.Hi)(a);
                    };
                    var e = {};
                    var f;
                    [
                        "video",
                        "audio"
                    ].forEach(function(c) {
                        if (b.hasOwnProperty(c) && !l(a[c].isFmp4, b[c])) {
                            var d = a[c].isFmp4 ? "browser" : "muxer";
                            e[d] = e[d] || [];
                            e[d].push(b[c]);
                            if (c === "audio") {
                                f = d;
                            }
                        }
                    });
                    if (d && f && this.media().attributes.AUDIO) {
                        var h = this.media().attributes.AUDIO;
                        this.master().playlists.forEach(function(a) {
                            var b = a.attributes && a.attributes.AUDIO;
                            if (b === h && a !== k.media()) {
                                a.excludeUntil = Infinity;
                            }
                        });
                        this.logger_("excluding audio group " + h + " as " + f + ' does not support codec(s): "' + b.audio + '"');
                    }
                    if (Object.keys(e).length) {
                        var i = Object.keys(e).reduce(function(a, b) {
                            if (a) {
                                a += ", ";
                            }
                            a += b + ' does not support codec(s): "' + e[b].join(",") + '"';
                            return a;
                        }, "") + ".";
                        this.blacklistCurrentPlaylist({
                            playlist: this.media(),
                            internal: true,
                            message: i,
                            blacklistDuration: Infinity
                        });
                        return;
                    }
                    if (this.sourceUpdater_.hasCreatedSourceBuffers() && !this.sourceUpdater_.canChangeType()) {
                        var g = [];
                        [
                            "video",
                            "audio"
                        ].forEach(function(a) {
                            var c = ((0, dM.kS)(k.sourceUpdater_.codecs[a] || "")[0] || {}).type;
                            var d = ((0, dM.kS)(b[a] || "")[0] || {}).type;
                            if (c && d && c.toLowerCase() !== d.toLowerCase()) {
                                g.push('"' + k.sourceUpdater_.codecs[a] + '" -> "' + b[a] + '"');
                            }
                        });
                        if (g.length) {
                            this.blacklistCurrentPlaylist({
                                playlist: this.media(),
                                message: "Codec switching not supported: " + g.join(", ") + ".",
                                blacklistDuration: Infinity,
                                internal: true
                            });
                            return;
                        }
                    }
                    return b;
                };
                a.tryToCreateSourceBuffers_ = function c() {
                    if (this.mediaSource.readyState !== "open" || this.sourceUpdater_.hasCreatedSourceBuffers()) {
                        return;
                    }
                    if (!this.areMediaTypesKnown_()) {
                        return;
                    }
                    var a = this.getCodecsOrExclude_();
                    if (!a) {
                        return;
                    }
                    this.sourceUpdater_.createSourceBuffers(a);
                    var b = [
                        a.video,
                        a.audio
                    ].filter(Boolean).join(",");
                    this.excludeIncompatibleVariants_(b);
                };
                a.excludeUnsupportedVariants_ = function b() {
                    var c = this;
                    var a = this.master().playlists;
                    var d = [];
                    Object.keys(a).forEach(function(g) {
                        var e = a[g];
                        if (d.indexOf(e.id) !== -1) {
                            return;
                        }
                        d.push(e.id);
                        var b = hq(c.master, e);
                        var f = [];
                        if (b.audio && !(0, dM.Hi)(b.audio) && !(0, dM.p7)(b.audio)) {
                            f.push("audio codec " + b.audio);
                        }
                        if (b.video && !(0, dM.Hi)(b.video) && !(0, dM.p7)(b.video)) {
                            f.push("video codec " + b.video);
                        }
                        if (b.text && b.text === "stpp.ttml.im1t") {
                            f.push("text codec " + b.text);
                        }
                        if (f.length) {
                            e.excludeUntil = Infinity;
                            c.logger_("excluding " + e.id + " for unsupported: " + f.join(", "));
                        }
                    });
                };
                a.excludeIncompatibleVariants_ = function d(b) {
                    var e = this;
                    var f = [];
                    var c = this.master().playlists;
                    var a = ho((0, dM.kS)(b));
                    var g = hp(a);
                    var h = (a.video && (0, dM.kS)(a.video)[0]) || null;
                    var i = (a.audio && (0, dM.kS)(a.audio)[0]) || null;
                    Object.keys(c).forEach(function(m) {
                        var b = c[m];
                        if (f.indexOf(b.id) !== -1 || b.excludeUntil === Infinity) {
                            return;
                        }
                        f.push(b.id);
                        var d = [];
                        var a = hq(e.masterPlaylistLoader_.master, b);
                        var l = hp(a);
                        if (!a.audio && !a.video) {
                            return;
                        }
                        if (l !== g) {
                            d.push('codec count "' + l + '" !== "' + g + '"');
                        }
                        if (!e.sourceUpdater_.canChangeType()) {
                            var j = (a.video && (0, dM.kS)(a.video)[0]) || null;
                            var k = (a.audio && (0, dM.kS)(a.audio)[0]) || null;
                            if (j && h && j.type.toLowerCase() !== h.type.toLowerCase()) {
                                d.push('video codec "' + j.type + '" !== "' + h.type + '"');
                            }
                            if (k && i && k.type.toLowerCase() !== i.type.toLowerCase()) {
                                d.push('audio codec "' + k.type + '" !== "' + i.type + '"');
                            }
                        }
                        if (d.length) {
                            b.excludeUntil = Infinity;
                            e.logger_("blacklisting " + b.id + ": " + d.join(" && "));
                        }
                    });
                };
                a.updateAdCues_ = function d(c) {
                    var a = 0;
                    var b = this.seekable();
                    if (b.length) {
                        a = b.start(0);
                    }
                    ic(c, this.cueTagsTrack_, a);
                };
                a.goalBufferLength = function e() {
                    var b = this.tech_.currentTime();
                    var a = dk.GOAL_BUFFER_LENGTH;
                    var c = dk.GOAL_BUFFER_LENGTH_RATE;
                    var d = Math.max(a, dk.MAX_GOAL_BUFFER_LENGTH);
                    return Math.min(a + b * c, d);
                };
                a.bufferLowWaterLine = function f() {
                    var b = this.tech_.currentTime();
                    var a = dk.BUFFER_LOW_WATER_LINE;
                    var c = dk.BUFFER_LOW_WATER_LINE_RATE;
                    var d = Math.max(a, dk.MAX_BUFFER_LOW_WATER_LINE);
                    var e = Math.max(a, dk.EXPERIMENTAL_MAX_BUFFER_LOW_WATER_LINE);
                    return Math.min(a + b * c, this.experimentalBufferBasedABR ? e : d);
                };
                a.bufferHighWaterLine = function a() {
                    return dk.BUFFER_HIGH_WATER_LINE;
                };
                return c;
            })(b.EventTarget);
            var iF = function a(b, c, d) {
                return function(a) {
                    var e = b.master.playlists[c];
                    var g = c_(e);
                    var f = c0(e);
                    if (typeof a === "undefined") {
                        return f;
                    }
                    if (a) {
                        delete e.disabled;
                    } else {
                        e.disabled = true;
                    }
                    if (a !== f && !g) {
                        d();
                        if (a) {
                            b.trigger("renditionenabled");
                        } else {
                            b.trigger("renditiondisabled");
                        }
                    }
                    return a;
                };
            };
            var iG = function i(c, a, e) {
                var d = c.masterPlaylistController_, f = c.options_.smoothQualityChange;
                var g = f ? "smooth" : "fast";
                var h = d[g + "QualityChange_"].bind(d);
                if (a.attributes) {
                    var b = a.attributes.RESOLUTION;
                    this.width = b && b.width;
                    this.height = b && b.height;
                    this.bandwidth = a.attributes.BANDWIDTH;
                }
                this.codecs = hq(d.master(), a);
                this.playlist = a;
                this.id = e;
                this.enabled = iF(c.playlists, a.id, h);
            };
            var iH = function b(a) {
                a.representations = function() {
                    var b = a.masterPlaylistController_.master();
                    var c = c7(b) ? a.masterPlaylistController_.getAudioTrackPlaylists_() : b.playlists;
                    if (!c) {
                        return [];
                    }
                    return c.filter(function(a) {
                        return !c_(a);
                    }).map(function(b, c) {
                        return new iG(a, b, b.id);
                    });
                };
            };
            var iI = [
                "seeking",
                "seeked",
                "pause",
                "playing",
                "error", 
            ];
            var iJ = (function() {
                function b(a) {
                    var h = this;
                    this.masterPlaylistController_ = a.masterPlaylistController;
                    this.tech_ = a.tech;
                    this.seekable = a.seekable;
                    this.allowSeeksWithinUnsafeLiveWindow = a.allowSeeksWithinUnsafeLiveWindow;
                    this.liveRangeSafeTimeDelta = a.liveRangeSafeTimeDelta;
                    this.media = a.media;
                    this.consecutiveUpdates = 0;
                    this.lastRecordedTime = null;
                    this.timer_ = null;
                    this.checkCurrentTimeTimeout_ = null;
                    this.logger_ = a1("PlaybackWatcher");
                    this.logger_("initialize");
                    var b = function a() {
                        return h.monitorCurrentTime_();
                    };
                    var c = function a() {
                        return h.monitorCurrentTime_();
                    };
                    var d = function a() {
                        return h.techWaiting_();
                    };
                    var e = function a() {
                        return h.cancelTimer_();
                    };
                    var i = this.masterPlaylistController_;
                    var g = [
                        "main",
                        "subtitle",
                        "audio"
                    ];
                    var j = {};
                    g.forEach(function(a) {
                        j[a] = {
                            reset: function b() {
                                return h.resetSegmentDownloads_(a);
                            },
                            updateend: function b() {
                                return h.checkSegmentDownloads_(a);
                            }
                        };
                        i[a + "SegmentLoader_"].on("appendsdone", j[a].updateend);
                        i[a + "SegmentLoader_"].on("playlistupdate", j[a].reset);
                        h.tech_.on([
                            "seeked",
                            "seeking"
                        ], j[a].reset);
                    });
                    var k = function a(b) {
                        [
                            "main",
                            "audio"
                        ].forEach(function(a) {
                            i[a + "SegmentLoader_"][b]("appended", h.seekingAppendCheck_);
                        });
                    };
                    this.seekingAppendCheck_ = function() {
                        if (h.fixesBadSeeks_()) {
                            h.consecutiveUpdates = 0;
                            h.lastRecordedTime = h.tech_.currentTime();
                            k("off");
                        }
                    };
                    this.clearSeekingAppendCheck_ = function() {
                        return k("off");
                    };
                    this.watchForBadSeeking_ = function() {
                        h.clearSeekingAppendCheck_();
                        k("on");
                    };
                    this.tech_.on("seeked", this.clearSeekingAppendCheck_);
                    this.tech_.on("seeking", this.watchForBadSeeking_);
                    this.tech_.on("waiting", d);
                    this.tech_.on(iI, e);
                    this.tech_.on("canplay", c);
                    this.tech_.one("play", b);
                    this.dispose = function() {
                        h.clearSeekingAppendCheck_();
                        h.logger_("dispose");
                        h.tech_.off("waiting", d);
                        h.tech_.off(iI, e);
                        h.tech_.off("canplay", c);
                        h.tech_.off("play", b);
                        h.tech_.off("seeking", h.watchForBadSeeking_);
                        h.tech_.off("seeked", h.clearSeekingAppendCheck_);
                        g.forEach(function(a) {
                            i[a + "SegmentLoader_"].off("appendsdone", j[a].updateend);
                            i[a + "SegmentLoader_"].off("playlistupdate", j[a].reset);
                            h.tech_.off([
                                "seeked",
                                "seeking"
                            ], j[a].reset);
                        });
                        if (h.checkCurrentTimeTimeout_) {
                            f().clearTimeout(h.checkCurrentTimeTimeout_);
                        }
                        h.cancelTimer_();
                    };
                }
                var a = b.prototype;
                a.monitorCurrentTime_ = function a() {
                    this.checkCurrentTime_();
                    if (this.checkCurrentTimeTimeout_) {
                        f().clearTimeout(this.checkCurrentTimeTimeout_);
                    }
                    this.checkCurrentTimeTimeout_ = f().setTimeout(this.monitorCurrentTime_.bind(this), 250);
                };
                a.resetSegmentDownloads_ = function c(a) {
                    var b = this.masterPlaylistController_[a + "SegmentLoader_"];
                    if (this[a + "StalledDownloads_"] > 0) {
                        this.logger_("resetting possible stalled download count for " + a + " loader");
                    }
                    this[a + "StalledDownloads_"] = 0;
                    this[a + "Buffered_"] = b.buffered_();
                };
                a.checkSegmentDownloads_ = function f(a) {
                    var d = this.masterPlaylistController_;
                    var b = d[a + "SegmentLoader_"];
                    var c = b.buffered_();
                    var e = fZ(this[a + "Buffered_"], c);
                    this[a + "Buffered_"] = c;
                    if (e) {
                        this.resetSegmentDownloads_(a);
                        return;
                    }
                    this[a + "StalledDownloads_"]++;
                    this.logger_("found #" + this[a + "StalledDownloads_"] + " " + a + " appends that did not increase buffer (possible stalled download)", {
                        playlistId: b.playlist_ && b.playlist_.id,
                        buffered: fY(c)
                    });
                    if (this[a + "StalledDownloads_"] < 10) {
                        return;
                    }
                    this.logger_(a + " loader stalled download exclusion");
                    this.resetSegmentDownloads_(a);
                    this.tech_.trigger({
                        type: "usage",
                        name: "vhs-" + a + "-download-exclusion"
                    });
                    if (a === "subtitle") {
                        return;
                    }
                    d.blacklistCurrentPlaylist({
                        message: "Excessive " + a + " segment downloading detected."
                    }, Infinity);
                };
                a.checkCurrentTime_ = function c() {
                    if (this.tech_.paused() || this.tech_.seeking()) {
                        return;
                    }
                    var a = this.tech_.currentTime();
                    var b = this.tech_.buffered();
                    if (this.lastRecordedTime === a && (!b.length || a + fQ >= b.end(b.length - 1))) {
                        return this.techWaiting_();
                    }
                    if (this.consecutiveUpdates >= 5 && a === this.lastRecordedTime) {
                        this.consecutiveUpdates++;
                        this.waiting_();
                    } else if (a === this.lastRecordedTime) {
                        this.consecutiveUpdates++;
                    } else {
                        this.consecutiveUpdates = 0;
                        this.lastRecordedTime = a;
                    }
                };
                a.cancelTimer_ = function a() {
                    this.consecutiveUpdates = 0;
                    if (this.timer_) {
                        this.logger_("cancelTimer_");
                        clearTimeout(this.timer_);
                    }
                    this.timer_ = null;
                };
                a.fixesBadSeeks_ = function r() {
                    var j = this.tech_.seeking();
                    if (!j) {
                        return false;
                    }
                    var b = this.seekable();
                    var c = this.tech_.currentTime();
                    var k = this.afterSeekableWindow_(b, c, this.media(), this.allowSeeksWithinUnsafeLiveWindow);
                    var a;
                    if (k) {
                        var l = b.end(b.length - 1);
                        a = l;
                    }
                    if (this.beforeSeekableWindow_(b, c)) {
                        var i = b.start(0);
                        a = i + (i === b.end(0) ? 0 : fQ);
                    }
                    if (typeof a !== "undefined") {
                        this.logger_("Trying to seek outside of seekable at time " + c + " with " + ("seekable range " + fW(b) + ". Seeking to ") + (a + "."));
                        this.tech_.setCurrentTime(a);
                        return true;
                    }
                    var d = this.masterPlaylistController_.sourceUpdater_;
                    var m = this.tech_.buffered();
                    var n = d.audioBuffer ? d.audioBuffered() : null;
                    var o = d.videoBuffer ? d.videoBuffered() : null;
                    var f = this.media();
                    var p = f.partTargetDuration ? f.partTargetDuration : (f.targetDuration - cT) * 2;
                    var g = [
                        n,
                        o
                    ];
                    for(var e = 0; e < g.length; e++){
                        if (!g[e]) {
                            continue;
                        }
                        var q = f_(g[e], c);
                        if (q < p) {
                            return false;
                        }
                    }
                    var h = fT(m, c);
                    if (h.length === 0) {
                        return false;
                    }
                    a = h.start(0) + fQ;
                    this.logger_("Buffered region starts (" + h.start(0) + ") " + (" just beyond seek point (" + c + "). Seeking to " + a + "."));
                    this.tech_.setCurrentTime(a);
                    return true;
                };
                a.waiting_ = function d() {
                    if (this.techWaiting_()) {
                        return;
                    }
                    var a = this.tech_.currentTime();
                    var c = this.tech_.buffered();
                    var b = fS(c, a);
                    if (b.length && a + 3 <= b.end(0)) {
                        this.cancelTimer_();
                        this.tech_.setCurrentTime(a);
                        this.logger_("Stopped at " + a + " while inside a buffered region " + ("[" + b.start(0) + " -> " + b.end(0) + "]. Attempting to resume ") + "playback by seeking to the current time.");
                        this.tech_.trigger({
                            type: "usage",
                            name: "vhs-unknown-waiting"
                        });
                        this.tech_.trigger({
                            type: "usage",
                            name: "hls-unknown-waiting"
                        });
                        return;
                    }
                };
                a.techWaiting_ = function i() {
                    var b = this.seekable();
                    var a = this.tech_.currentTime();
                    if (this.tech_.seeking() || this.timer_ !== null) {
                        return true;
                    }
                    if (this.beforeSeekableWindow_(b, a)) {
                        var d = b.end(b.length - 1);
                        this.logger_("Fell out of live window at time " + a + ". Seeking to " + ("live point (seekable end) " + d));
                        this.cancelTimer_();
                        this.tech_.setCurrentTime(d);
                        this.tech_.trigger({
                            type: "usage",
                            name: "vhs-live-resync"
                        });
                        this.tech_.trigger({
                            type: "usage",
                            name: "hls-live-resync"
                        });
                        return true;
                    }
                    var e = this.tech_.vhs.masterPlaylistController_.sourceUpdater_;
                    var g = this.tech_.buffered();
                    var h = this.videoUnderflow_({
                        audioBuffered: e.audioBuffered(),
                        videoBuffered: e.videoBuffered(),
                        currentTime: a
                    });
                    if (h) {
                        this.cancelTimer_();
                        this.tech_.setCurrentTime(a);
                        this.tech_.trigger({
                            type: "usage",
                            name: "vhs-video-underflow"
                        });
                        this.tech_.trigger({
                            type: "usage",
                            name: "hls-video-underflow"
                        });
                        return true;
                    }
                    var c = fT(g, a);
                    if (c.length > 0) {
                        var f = c.start(0) - a;
                        this.logger_("Stopped at " + a + ", setting timer for " + f + ", seeking " + ("to " + c.start(0)));
                        this.cancelTimer_();
                        this.timer_ = setTimeout(this.skipTheGap_.bind(this), f * 1000, a);
                        return true;
                    }
                    return false;
                };
                a.afterSeekableWindow_ = function g(a, e, c, b) {
                    if (b === void 0) {
                        b = false;
                    }
                    if (!a.length) {
                        return false;
                    }
                    var d = a.end(a.length - 1) + fQ;
                    var f = !c.endList;
                    if (f && b) {
                        d = a.end(a.length - 1) + c.targetDuration * 3;
                    }
                    if (e > d) {
                        return true;
                    }
                    return false;
                };
                a.beforeSeekableWindow_ = function c(a, b) {
                    if (a.length && a.start(0) > 0 && b < a.start(0) - this.liveRangeSafeTimeDelta) {
                        return true;
                    }
                    return false;
                };
                a.videoUnderflow_ = function j(d) {
                    var a = d.videoBuffered, e = d.audioBuffered, b = d.currentTime;
                    if (!a) {
                        return;
                    }
                    var c;
                    if (a.length && e.length) {
                        var f = fS(a, b - 3);
                        var h = fS(a, b);
                        var g = fS(e, b);
                        if (g.length && !h.length && f.length) {
                            c = {
                                start: f.end(0),
                                end: g.end(0)
                            };
                        }
                    } else {
                        var i = fT(a, b);
                        if (!i.length) {
                            c = this.gapFromVideoUnderflow_(a, b);
                        }
                    }
                    if (c) {
                        this.logger_("Encountered a gap in video from " + c.start + " to " + c.end + ". " + ("Seeking to current time " + b));
                        return true;
                    }
                    return false;
                };
                a.skipTheGap_ = function e(c) {
                    var d = this.tech_.buffered();
                    var a = this.tech_.currentTime();
                    var b = fT(d, a);
                    this.cancelTimer_();
                    if (b.length === 0 || a !== c) {
                        return;
                    }
                    this.logger_("skipTheGap_:", "currentTime:", a, "scheduled currentTime:", c, "nextRange start:", b.start(0));
                    this.tech_.setCurrentTime(b.start(0) + cT);
                    this.tech_.trigger({
                        type: "usage",
                        name: "vhs-gap-skip"
                    });
                    this.tech_.trigger({
                        type: "usage",
                        name: "hls-gap-skip"
                    });
                };
                a.gapFromVideoUnderflow_ = function g(e, d) {
                    var b = fU(e);
                    for(var a = 0; a < b.length; a++){
                        var c = b.start(a);
                        var f = b.end(a);
                        if (d - c < 4 && d - c > 2) {
                            return {
                                start: c,
                                end: f
                            };
                        }
                    }
                    return null;
                };
                return b;
            })();
            var iK = {
                errorInterval: 30,
                getSource: function d(a) {
                    var b = this.tech({
                        IWillNotUseThisInPlugins: true
                    });
                    var c = b.currentSource_ || this.currentSource();
                    return a(c);
                }
            };
            var iL = function g(a, c) {
                var h = 0;
                var i = 0;
                var j = b.mergeOptions(iK, c);
                a.ready(function() {
                    a.trigger({
                        type: "usage",
                        name: "vhs-error-reload-initialized"
                    });
                    a.trigger({
                        type: "usage",
                        name: "hls-error-reload-initialized"
                    });
                });
                var k = function b() {
                    if (i) {
                        a.currentTime(i);
                    }
                };
                var l = function c(b) {
                    if (b === null || b === undefined) {
                        return;
                    }
                    i = (a.duration() !== Infinity && a.currentTime()) || 0;
                    a.one("loadedmetadata", k);
                    a.src(b);
                    a.trigger({
                        type: "usage",
                        name: "vhs-error-reload"
                    });
                    a.trigger({
                        type: "usage",
                        name: "hls-error-reload"
                    });
                    a.play();
                };
                var d = function c() {
                    if (Date.now() - h < j.errorInterval * 1000) {
                        a.trigger({
                            type: "usage",
                            name: "vhs-error-reload-canceled"
                        });
                        a.trigger({
                            type: "usage",
                            name: "hls-error-reload-canceled"
                        });
                        return;
                    }
                    if (!j.getSource || typeof j.getSource !== "function") {
                        b.log.error("ERROR: reloadSourceOnError - The option getSource must be a function!");
                        return;
                    }
                    h = Date.now();
                    return j.getSource.call(a, l);
                };
                var e = function b() {
                    a.off("loadedmetadata", k);
                    a.off("error", d);
                    a.off("dispose", b);
                };
                var f = function c(b) {
                    e();
                    g(a, b);
                };
                a.on("error", d);
                a.on("dispose", e);
                a.reloadSourceOnError = f;
            };
            var dx = function b(a) {
                iL(this, a);
            };
            var dy = "2.12.0";
            var iM = "5.14.1";
            var iN = "0.19.2";
            var iO = "4.7.0";
            var iP = "3.1.2";
            var m = {
                PlaylistLoader: da,
                Playlist: c8,
                utils: di,
                STANDARD_PLAYLIST_SELECTOR: a5,
                INITIAL_PLAYLIST_SELECTOR: du,
                lastBandwidthSelector: a5,
                movingAverageBandwidthSelector: dt,
                comparePlaylistBandwidth: dr,
                comparePlaylistResolution: ds,
                xhr: db()
            };
            Object.keys(dk).forEach(function(a) {
                Object.defineProperty(m, a, {
                    get: function c() {
                        b.log.warn("using Vhs." + a + " is UNSAFE be sure you know what you are doing");
                        return dk[a];
                    },
                    set: function d(c) {
                        b.log.warn("using Vhs." + a + " is UNSAFE be sure you know what you are doing");
                        if (typeof c !== "number" || c < 0) {
                            b.log.warn("value of Vhs." + a + " must be greater than or equal to 0");
                            return;
                        }
                        dk[a] = c;
                    }
                });
            });
            var iQ = "videojs-vhs";
            var iR = function f(a, d) {
                var e = d.media();
                var c = -1;
                for(var b = 0; b < a.length; b++){
                    if (a[b].id === e.id) {
                        c = b;
                        break;
                    }
                }
                a.selectedIndex_ = c;
                a.trigger({
                    selectedIndex: c,
                    type: "change"
                });
            };
            var iS = function c(b, a) {
                a.representations().forEach(function(a) {
                    b.addQualityLevel(a);
                });
                iR(b, a.playlists);
            };
            m.canPlaySource = function() {
                return b.log.warn("HLS is no longer a tech. Please remove it from " + "your player's techOrder.");
            };
            var iT = function j(d, c, f) {
                if (!d) {
                    return d;
                }
                var g = {};
                if (c && c.attributes && c.attributes.CODECS) {
                    g = ho((0, dM.kS)(c.attributes.CODECS));
                }
                if (f && f.attributes && f.attributes.CODECS) {
                    g.audio = f.attributes.CODECS;
                }
                var h = (0, dM._5)(g.video);
                var i = (0, dM._5)(g.audio);
                var e = {};
                for(var a in d){
                    e[a] = {};
                    if (i) {
                        e[a].audioContentType = i;
                    }
                    if (h) {
                        e[a].videoContentType = h;
                    }
                    if (c.contentProtection && c.contentProtection[a] && c.contentProtection[a].pssh) {
                        e[a].pssh = c.contentProtection[a].pssh;
                    }
                    if (typeof d[a] === "string") {
                        e[a].url = d[a];
                    }
                }
                return b.mergeOptions(d, e);
            };
            var iU = function b(a, c) {
                return a.reduce(function(a, d) {
                    if (!d.contentProtection) {
                        return a;
                    }
                    var b = c.reduce(function(b, c) {
                        var a = d.contentProtection[c];
                        if (a && a.pssh) {
                            b[c] = {
                                pssh: a.pssh
                            };
                        }
                        return b;
                    }, {});
                    if (Object.keys(b).length) {
                        a.push(b);
                    }
                    return a;
                }, []);
            };
            var iV = function j(a) {
                var d = a.player, e = a.sourceKeySystems, b = a.audioMedia, c = a.mainPlaylists;
                if (!d.eme.initializeMediaKeys) {
                    return Promise.resolve();
                }
                var f = b ? c.concat([
                    b
                ]) : c;
                var g = iU(f, Object.keys(e));
                var h = [];
                var i = [];
                g.forEach(function(a) {
                    i.push(new Promise(function(a, b) {
                        d.tech_.one("keysessioncreated", a);
                    }));
                    h.push(new Promise(function(b, c) {
                        d.eme.initializeMediaKeys({
                            keySystems: a
                        }, function(a) {
                            if (a) {
                                c(a);
                                return;
                            }
                            b();
                        });
                    }));
                });
                return Promise.race([
                    Promise.all(h),
                    Promise.race(i), 
                ]);
            };
            var iW = function h(a) {
                var d = a.player, e = a.sourceKeySystems, f = a.media, g = a.audioMedia;
                var c = iT(e, f, g);
                if (!c) {
                    return false;
                }
                d.currentSource().keySystems = c;
                if (c && !d.eme) {
                    b.log.warn("DRM encrypted source cannot be decrypted without a DRM plugin");
                    return false;
                }
                return true;
            };
            var iX = function b() {
                if (!f().localStorage) {
                    return null;
                }
                var a = f().localStorage.getItem(iQ);
                if (!a) {
                    return null;
                }
                try {
                    return JSON.parse(a);
                } catch (c) {
                    return null;
                }
            };
            var iY = function d(c) {
                if (!f().localStorage) {
                    return false;
                }
                var a = iX();
                a = a ? b.mergeOptions(a, c) : c;
                try {
                    f().localStorage.setItem(iQ, JSON.stringify(a));
                } catch (e) {
                    return false;
                }
                return a;
            };
            var iZ = function b(a) {
                if (a.toLowerCase().indexOf("data:application/vnd.videojs.vhs+json,") === 0) {
                    return JSON.parse(a.substring(a.indexOf(",") + 1));
                }
                return a;
            };
            m.supportsNativeHls = (function() {
                if (!J() || !J().createElement) {
                    return false;
                }
                var c = J().createElement("video");
                if (!b.getTech("Html5").isSupported()) {
                    return false;
                }
                var a = [
                    "application/vnd.apple.mpegurl",
                    "audio/mpegurl",
                    "audio/x-mpegurl",
                    "application/x-mpegurl",
                    "video/x-mpegurl",
                    "video/mpegurl",
                    "application/mpegurl", 
                ];
                return a.some(function(a) {
                    return /maybe|probably/i.test(c.canPlayType(a));
                });
            })();
            m.supportsNativeDash = (function() {
                if (!J() || !J().createElement || !b.getTech("Html5").isSupported()) {
                    return false;
                }
                return /maybe|probably/i.test(J().createElement("video").canPlayType("application/dash+xml"));
            })();
            m.supportsTypeNatively = function(a) {
                if (a === "hls") {
                    return m.supportsNativeHls;
                }
                if (a === "dash") {
                    return m.supportsNativeDash;
                }
                return false;
            };
            m.isSupported = function() {
                return b.log.warn("HLS is no longer a tech. Please remove it from " + "your player's techOrder.");
            };
            var dz = b.getComponent("Component");
            var dA = (function(d) {
                (0, dF.Z)(c, d);
                function c(g, c, f) {
                    var a;
                    a = d.call(this, c, b.mergeOptions(f.hls, f.vhs)) || this;
                    if (f.hls && Object.keys(f.hls).length) {
                        b.log.warn("Using hls options is deprecated. Use vhs instead.");
                    }
                    if (typeof f.initialBandwidth === "number") {
                        a.options_.bandwidth = f.initialBandwidth;
                    }
                    a.logger_ = a1("VhsHandler");
                    if (c.options_ && c.options_.playerId) {
                        var e = b(c.options_.playerId);
                        if (!e.hasOwnProperty("hls")) {
                            Object.defineProperty(e, "hls", {
                                get: function d() {
                                    b.log.warn("player.hls is deprecated. Use player.tech().vhs instead.");
                                    c.trigger({
                                        type: "usage",
                                        name: "hls-player-access"
                                    });
                                    return (0, dE.Z)(a);
                                },
                                configurable: true
                            });
                        }
                        if (!e.hasOwnProperty("vhs")) {
                            Object.defineProperty(e, "vhs", {
                                get: function d() {
                                    b.log.warn("player.vhs is deprecated. Use player.tech().vhs instead.");
                                    c.trigger({
                                        type: "usage",
                                        name: "vhs-player-access"
                                    });
                                    return (0, dE.Z)(a);
                                },
                                configurable: true
                            });
                        }
                        if (!e.hasOwnProperty("dash")) {
                            Object.defineProperty(e, "dash", {
                                get: function c() {
                                    b.log.warn("player.dash is deprecated. Use player.tech().vhs instead.");
                                    return (0, dE.Z)(a);
                                },
                                configurable: true
                            });
                        }
                        a.player_ = e;
                    }
                    a.tech_ = c;
                    a.source_ = g;
                    a.stats = {};
                    a.ignoreNextSeekingEvent_ = false;
                    a.setOptions_();
                    if (a.options_.overrideNative && c.overrideNativeAudioTracks && c.overrideNativeVideoTracks) {
                        c.overrideNativeAudioTracks(true);
                        c.overrideNativeVideoTracks(true);
                    } else if (a.options_.overrideNative && (c.featuresNativeVideoTracks || c.featuresNativeAudioTracks)) {
                        throw new Error("Overriding native HLS requires emulated tracks. " + "See https://git.io/vMpjB");
                    }
                    a.on(J(), [
                        "fullscreenchange",
                        "webkitfullscreenchange",
                        "mozfullscreenchange",
                        "MSFullscreenChange", 
                    ], function(c) {
                        var b = J().fullscreenElement || J().webkitFullscreenElement || J().mozFullScreenElement || J().msFullscreenElement;
                        if (b && b.contains(a.tech_.el())) {
                            a.masterPlaylistController_.fastQualityChange_();
                        } else {
                            a.masterPlaylistController_.checkABR_();
                        }
                    });
                    a.on(a.tech_, "seeking", function() {
                        if (this.ignoreNextSeekingEvent_) {
                            this.ignoreNextSeekingEvent_ = false;
                            return;
                        }
                        this.setCurrentTime(this.tech_.currentTime());
                    });
                    a.on(a.tech_, "error", function() {
                        if (this.tech_.error() && this.masterPlaylistController_) {
                            this.masterPlaylistController_.pauseLoading();
                        }
                    });
                    a.on(a.tech_, "play", a.play);
                    return a;
                }
                var a = c.prototype;
                a.setOptions_ = function b() {
                    var c = this;
                    this.options_.withCredentials = this.options_.withCredentials || false;
                    this.options_.handleManifestRedirects = this.options_.handleManifestRedirects === false ? false : true;
                    this.options_.limitRenditionByPlayerDimensions = this.options_.limitRenditionByPlayerDimensions === false ? false : true;
                    this.options_.useDevicePixelRatio = this.options_.useDevicePixelRatio || false;
                    this.options_.smoothQualityChange = this.options_.smoothQualityChange || false;
                    this.options_.useBandwidthFromLocalStorage = typeof this.source_.useBandwidthFromLocalStorage !== "undefined" ? this.source_.useBandwidthFromLocalStorage : this.options_.useBandwidthFromLocalStorage || false;
                    this.options_.useNetworkInformationApi = this.options_.useNetworkInformationApi || false;
                    this.options_.customTagParsers = this.options_.customTagParsers || [];
                    this.options_.customTagMappers = this.options_.customTagMappers || [];
                    this.options_.cacheEncryptionKeys = this.options_.cacheEncryptionKeys || false;
                    if (typeof this.options_.blacklistDuration !== "number") {
                        this.options_.blacklistDuration = 5 * 60;
                    }
                    if (typeof this.options_.bandwidth !== "number") {
                        if (this.options_.useBandwidthFromLocalStorage) {
                            var a = iX();
                            if (a && a.bandwidth) {
                                this.options_.bandwidth = a.bandwidth;
                                this.tech_.trigger({
                                    type: "usage",
                                    name: "vhs-bandwidth-from-local-storage"
                                });
                                this.tech_.trigger({
                                    type: "usage",
                                    name: "hls-bandwidth-from-local-storage"
                                });
                            }
                            if (a && a.throughput) {
                                this.options_.throughput = a.throughput;
                                this.tech_.trigger({
                                    type: "usage",
                                    name: "vhs-throughput-from-local-storage"
                                });
                                this.tech_.trigger({
                                    type: "usage",
                                    name: "hls-throughput-from-local-storage"
                                });
                            }
                        }
                    }
                    if (typeof this.options_.bandwidth !== "number") {
                        this.options_.bandwidth = dk.INITIAL_BANDWIDTH;
                    }
                    this.options_.enableLowInitialPlaylist = this.options_.enableLowInitialPlaylist && this.options_.bandwidth === dk.INITIAL_BANDWIDTH;
                    [
                        "withCredentials",
                        "useDevicePixelRatio",
                        "limitRenditionByPlayerDimensions",
                        "bandwidth",
                        "smoothQualityChange",
                        "customTagParsers",
                        "customTagMappers",
                        "handleManifestRedirects",
                        "cacheEncryptionKeys",
                        "playlistSelector",
                        "initialPlaylistSelector",
                        "experimentalBufferBasedABR",
                        "liveRangeSafeTimeDelta",
                        "experimentalLLHLS",
                        "useNetworkInformationApi",
                        "experimentalExactManifestTimings",
                        "experimentalLeastPixelDiffSelector", 
                    ].forEach(function(a) {
                        if (typeof c.source_[a] !== "undefined") {
                            c.options_[a] = c.source_[a];
                        }
                    });
                    this.limitRenditionByPlayerDimensions = this.options_.limitRenditionByPlayerDimensions;
                    this.useDevicePixelRatio = this.options_.useDevicePixelRatio;
                };
                a.src = function g(a, c) {
                    var h = this;
                    if (!a) {
                        return;
                    }
                    this.setOptions_();
                    this.options_.src = iZ(this.source_.src);
                    this.options_.tech = this.tech_;
                    this.options_.externVhs = m;
                    this.options_.sourceType = (0, dN.t)(c);
                    this.options_.seekTo = function(a) {
                        h.tech_.setCurrentTime(a);
                    };
                    if (this.options_.smoothQualityChange) {
                        b.log.warn("smoothQualityChange is deprecated and will be removed in the next major version");
                    }
                    this.masterPlaylistController_ = new iE(this.options_);
                    var d = b.mergeOptions({
                        liveRangeSafeTimeDelta: fQ
                    }, this.options_, {
                        seekable: function a() {
                            return h.seekable();
                        },
                        media: function a() {
                            return h.masterPlaylistController_.media();
                        },
                        masterPlaylistController: this.masterPlaylistController_
                    });
                    this.playbackWatcher_ = new iJ(d);
                    this.masterPlaylistController_.on("error", function() {
                        var c = b.players[h.tech_.options_.playerId];
                        var a = h.masterPlaylistController_.error;
                        if (typeof a === "object" && !a.code) {
                            a.code = 3;
                        } else if (typeof a === "string") {
                            a = {
                                message: a,
                                code: 3
                            };
                        }
                        c.error(a);
                    });
                    var e = this.options_.experimentalBufferBasedABR ? m.movingAverageBandwidthSelector(0.55) : m.STANDARD_PLAYLIST_SELECTOR;
                    this.masterPlaylistController_.selectPlaylist = this.selectPlaylist ? this.selectPlaylist.bind(this) : e.bind(this);
                    this.masterPlaylistController_.selectInitialPlaylist = m.INITIAL_PLAYLIST_SELECTOR.bind(this);
                    this.playlists = this.masterPlaylistController_.masterPlaylistLoader_;
                    this.mediaSource = this.masterPlaylistController_.mediaSource;
                    Object.defineProperties(this, {
                        selectPlaylist: {
                            get: function a() {
                                return this.masterPlaylistController_.selectPlaylist;
                            },
                            set: function b(a) {
                                this.masterPlaylistController_.selectPlaylist = a.bind(this);
                            }
                        },
                        throughput: {
                            get: function a() {
                                return this.masterPlaylistController_.mainSegmentLoader_.throughput.rate;
                            },
                            set: function b(a) {
                                this.masterPlaylistController_.mainSegmentLoader_.throughput.rate = a;
                                this.masterPlaylistController_.mainSegmentLoader_.throughput.count = 1;
                            }
                        },
                        bandwidth: {
                            get: function e() {
                                var a = this.masterPlaylistController_.mainSegmentLoader_.bandwidth;
                                var c = f().navigator.connection || f().navigator.mozConnection || f().navigator.webkitConnection;
                                var d = 10e6;
                                if (this.options_.useNetworkInformationApi && c) {
                                    var b = c.downlink * 1000 * 1000;
                                    if (b >= d && a >= d) {
                                        a = Math.max(a, b);
                                    } else {
                                        a = b;
                                    }
                                }
                                return a;
                            },
                            set: function b(a) {
                                this.masterPlaylistController_.mainSegmentLoader_.bandwidth = a;
                                this.masterPlaylistController_.mainSegmentLoader_.throughput = {
                                    rate: 0,
                                    count: 0
                                };
                            }
                        },
                        systemBandwidth: {
                            get: function d() {
                                var b = 1 / (this.bandwidth || 1);
                                var a;
                                if (this.throughput > 0) {
                                    a = 1 / this.throughput;
                                } else {
                                    a = 0;
                                }
                                var c = Math.floor(1 / (b + a));
                                return c;
                            },
                            set: function a() {
                                b.log.error('The "systemBandwidth" property is read-only');
                            }
                        }
                    });
                    if (this.options_.bandwidth) {
                        this.bandwidth = this.options_.bandwidth;
                    }
                    if (this.options_.throughput) {
                        this.throughput = this.options_.throughput;
                    }
                    Object.defineProperties(this.stats, {
                        bandwidth: {
                            get: function a() {
                                return h.bandwidth || 0;
                            },
                            enumerable: true
                        },
                        mediaRequests: {
                            get: function a() {
                                return (h.masterPlaylistController_.mediaRequests_() || 0);
                            },
                            enumerable: true
                        },
                        mediaRequestsAborted: {
                            get: function a() {
                                return (h.masterPlaylistController_.mediaRequestsAborted_() || 0);
                            },
                            enumerable: true
                        },
                        mediaRequestsTimedout: {
                            get: function a() {
                                return (h.masterPlaylistController_.mediaRequestsTimedout_() || 0);
                            },
                            enumerable: true
                        },
                        mediaRequestsErrored: {
                            get: function a() {
                                return (h.masterPlaylistController_.mediaRequestsErrored_() || 0);
                            },
                            enumerable: true
                        },
                        mediaTransferDuration: {
                            get: function a() {
                                return (h.masterPlaylistController_.mediaTransferDuration_() || 0);
                            },
                            enumerable: true
                        },
                        mediaBytesTransferred: {
                            get: function a() {
                                return (h.masterPlaylistController_.mediaBytesTransferred_() || 0);
                            },
                            enumerable: true
                        },
                        mediaSecondsLoaded: {
                            get: function a() {
                                return (h.masterPlaylistController_.mediaSecondsLoaded_() || 0);
                            },
                            enumerable: true
                        },
                        mediaAppends: {
                            get: function a() {
                                return (h.masterPlaylistController_.mediaAppends_() || 0);
                            },
                            enumerable: true
                        },
                        mainAppendsToLoadedData: {
                            get: function a() {
                                return (h.masterPlaylistController_.mainAppendsToLoadedData_() || 0);
                            },
                            enumerable: true
                        },
                        audioAppendsToLoadedData: {
                            get: function a() {
                                return (h.masterPlaylistController_.audioAppendsToLoadedData_() || 0);
                            },
                            enumerable: true
                        },
                        appendsToLoadedData: {
                            get: function a() {
                                return (h.masterPlaylistController_.appendsToLoadedData_() || 0);
                            },
                            enumerable: true
                        },
                        timeToLoadedData: {
                            get: function a() {
                                return (h.masterPlaylistController_.timeToLoadedData_() || 0);
                            },
                            enumerable: true
                        },
                        buffered: {
                            get: function a() {
                                return fY(h.tech_.buffered());
                            },
                            enumerable: true
                        },
                        currentTime: {
                            get: function a() {
                                return h.tech_.currentTime();
                            },
                            enumerable: true
                        },
                        currentSource: {
                            get: function a() {
                                return h.tech_.currentSource_;
                            },
                            enumerable: true
                        },
                        currentTech: {
                            get: function a() {
                                return h.tech_.name_;
                            },
                            enumerable: true
                        },
                        duration: {
                            get: function a() {
                                return h.tech_.duration();
                            },
                            enumerable: true
                        },
                        master: {
                            get: function a() {
                                return h.playlists.master;
                            },
                            enumerable: true
                        },
                        playerDimensions: {
                            get: function a() {
                                return h.tech_.currentDimensions();
                            },
                            enumerable: true
                        },
                        seekable: {
                            get: function a() {
                                return fY(h.tech_.seekable());
                            },
                            enumerable: true
                        },
                        timestamp: {
                            get: function a() {
                                return Date.now();
                            },
                            enumerable: true
                        },
                        videoPlaybackQuality: {
                            get: function a() {
                                return h.tech_.getVideoPlaybackQuality();
                            },
                            enumerable: true
                        }
                    });
                    this.tech_.one("canplay", this.masterPlaylistController_.setupFirstPlay.bind(this.masterPlaylistController_));
                    this.tech_.on("bandwidthupdate", function() {
                        if (h.options_.useBandwidthFromLocalStorage) {
                            iY({
                                bandwidth: h.bandwidth,
                                throughput: Math.round(h.throughput)
                            });
                        }
                    });
                    this.masterPlaylistController_.on("selectedinitialmedia", function() {
                        iH(h);
                    });
                    this.masterPlaylistController_.sourceUpdater_.on("createdsourcebuffers", function() {
                        h.setupEme_();
                    });
                    this.on(this.masterPlaylistController_, "progress", function() {
                        this.tech_.trigger("progress");
                    });
                    this.on(this.masterPlaylistController_, "firstplay", function() {
                        this.ignoreNextSeekingEvent_ = true;
                    });
                    this.setupQualityLevels_();
                    if (!this.tech_.el()) {
                        return;
                    }
                    this.mediaSourceUrl_ = f().URL.createObjectURL(this.masterPlaylistController_.mediaSource);
                    this.tech_.src(this.mediaSourceUrl_);
                };
                a.setupEme_ = function d() {
                    var e = this;
                    var a = this.masterPlaylistController_.mediaTypes_.AUDIO.activePlaylistLoader;
                    var c = iW({
                        player: this.player_,
                        sourceKeySystems: this.source_.keySystems,
                        media: this.playlists.media(),
                        audioMedia: a && a.media()
                    });
                    this.player_.tech_.on("keystatuschange", function(a) {
                        if (a.status === "output-restricted") {
                            e.masterPlaylistController_.blacklistCurrentPlaylist({
                                playlist: e.masterPlaylistController_.media(),
                                message: "DRM keystatus changed to " + a.status + ". Playlist will fail to play. Check for HDCP content.",
                                blacklistDuration: Infinity
                            });
                        }
                    });
                    if (b.browser.IE_VERSION === 11 || !c) {
                        this.masterPlaylistController_.sourceUpdater_.initializedEme();
                        return;
                    }
                    this.logger_("waiting for EME key session creation");
                    iV({
                        player: this.player_,
                        sourceKeySystems: this.source_.keySystems,
                        audioMedia: a && a.media(),
                        mainPlaylists: this.playlists.master.playlists
                    }).then(function() {
                        e.logger_("created EME key session");
                        e.masterPlaylistController_.sourceUpdater_.initializedEme();
                    })["catch"](function(a) {
                        e.logger_("error while creating EME key session", a);
                        e.player_.error({
                            message: "Failed to initialize media keys for EME",
                            code: 3
                        });
                    });
                };
                a.setupQualityLevels_ = function c() {
                    var d = this;
                    var a = b.players[this.tech_.options_.playerId];
                    if (!a || !a.qualityLevels || this.qualityLevels_) {
                        return;
                    }
                    this.qualityLevels_ = a.qualityLevels();
                    this.masterPlaylistController_.on("selectedinitialmedia", function() {
                        iS(d.qualityLevels_, d);
                    });
                    this.playlists.on("mediachange", function() {
                        iR(d.qualityLevels_, d.playlists);
                    });
                };
                c.version = function a() {
                    return {
                        "@videojs/http-streaming": dy,
                        "mux.js": iM,
                        "mpd-parser": iN,
                        "m3u8-parser": iO,
                        "aes-decrypter": iP
                    };
                };
                a.version = function a() {
                    return this.constructor.version();
                };
                a.canChangeType = function a() {
                    return h7.canChangeType();
                };
                a.play = function a() {
                    this.masterPlaylistController_.play();
                };
                a.setCurrentTime = function b(a) {
                    this.masterPlaylistController_.setCurrentTime(a);
                };
                a.duration = function a() {
                    return this.masterPlaylistController_.duration();
                };
                a.seekable = function a() {
                    return this.masterPlaylistController_.seekable();
                };
                a.dispose = function a() {
                    if (this.playbackWatcher_) {
                        this.playbackWatcher_.dispose();
                    }
                    if (this.masterPlaylistController_) {
                        this.masterPlaylistController_.dispose();
                    }
                    if (this.qualityLevels_) {
                        this.qualityLevels_.dispose();
                    }
                    if (this.player_) {
                        delete this.player_.vhs;
                        delete this.player_.dash;
                        delete this.player_.hls;
                    }
                    if (this.tech_ && this.tech_.vhs) {
                        delete this.tech_.vhs;
                    }
                    if (this.tech_) {
                        delete this.tech_.hls;
                    }
                    if (this.mediaSourceUrl_ && f().URL.revokeObjectURL) {
                        f().URL.revokeObjectURL(this.mediaSourceUrl_);
                        this.mediaSourceUrl_ = null;
                    }
                    d.prototype.dispose.call(this);
                };
                a.convertToProgramTime = function c(a, b) {
                    return gG({
                        playlist: this.masterPlaylistController_.media(),
                        time: a,
                        callback: b
                    });
                };
                a.seekToProgramTime = function e(c, d, a, b) {
                    if (a === void 0) {
                        a = true;
                    }
                    if (b === void 0) {
                        b = 2;
                    }
                    return gH({
                        programTime: c,
                        playlist: this.masterPlaylistController_.media(),
                        retryCount: b,
                        pauseAfterSeek: a,
                        seekTo: this.options_.seekTo,
                        tech: this.options_.tech,
                        callback: d
                    });
                };
                return c;
            })(dz);
            var a6 = {
                name: "videojs-http-streaming",
                VERSION: dy,
                canHandleSource: function e(c, a) {
                    if (a === void 0) {
                        a = {};
                    }
                    var d = b.mergeOptions(b.options, a);
                    return a6.canPlayType(c.type, d);
                },
                handleSource: function f(c, a, d) {
                    if (d === void 0) {
                        d = {};
                    }
                    var e = b.mergeOptions(b.options, d);
                    a.vhs = new dA(c, a, e);
                    if (!b.hasOwnProperty("hls")) {
                        Object.defineProperty(a, "hls", {
                            get: function c() {
                                b.log.warn("player.tech().hls is deprecated. Use player.tech().vhs instead.");
                                return a.vhs;
                            },
                            configurable: true
                        });
                    }
                    a.vhs.xhr = db();
                    a.vhs.src(c.src, c.type);
                    return a.vhs;
                },
                canPlayType: function i(e, a) {
                    if (a === void 0) {
                        a = {};
                    }
                    var f = b.mergeOptions(b.options, a), c = f.vhs.overrideNative, g = c === void 0 ? !b.browser.IS_ANY_SAFARI : c;
                    var d = (0, dN.t)(e);
                    var h = d && (!m.supportsTypeNatively(d) || g);
                    return h ? "maybe" : "";
                }
            };
            var dB = function a() {
                return (0, dM.p7)("avc1.4d400d,mp4a.40.2");
            };
            if (dB()) {
                b.getTech("Html5").registerSourceHandler(a6, 0);
            }
            b.VhsHandler = dA;
            Object.defineProperty(b, "HlsHandler", {
                get: function a() {
                    b.log.warn("videojs.HlsHandler is deprecated. Use videojs.VhsHandler instead.");
                    return dA;
                },
                configurable: true
            });
            b.VhsSourceHandler = a6;
            Object.defineProperty(b, "HlsSourceHandler", {
                get: function a() {
                    b.log.warn("videojs.HlsSourceHandler is deprecated. " + "Use videojs.VhsSourceHandler instead.");
                    return a6;
                },
                configurable: true
            });
            b.Vhs = m;
            Object.defineProperty(b, "Hls", {
                get: function a() {
                    b.log.warn("videojs.Hls is deprecated. Use videojs.Vhs instead.");
                    return m;
                },
                configurable: true
            });
            if (!b.use) {
                b.registerComponent("Hls", m);
                b.registerComponent("Vhs", m);
            }
            b.options.vhs = b.options.vhs || {};
            b.options.hls = b.options.hls || {};
            if (!b.getPlugin || !b.getPlugin("reloadSourceOnError")) {
                var dC = b.registerPlugin || b.plugin;
                dC("reloadSourceOnError", dx);
            }
            a7["Z"] = b;
        }
    }, 
]);
