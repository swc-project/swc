"use strict";
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([
    [
        544
    ],
    {
        5215: function(e, t, i) {
            var r = i(8908);
            var n = i.n(r);
            var a = i(9144);
            var s = i.n(a);
            var o = i(7462);
            var u = i(7326);
            var l = i(4578);
            var d = i(5974);
            var c = i.n(d);
            var h = i(7537);
            var f = i.n(h);
            var p = i(9603);
            var m = i.n(p);
            var v = i(3407);
            var g = i.n(v);
            var $ = i(8852);
            var y = i(136);
            var T = i(779);
            var b = i(9323);
            var x = i(2260);
            var S = i(8485);
            var k = i(973);
            var C = i(4221);
            var E = i.n(C);
            var w = i(8925);
            var I = i(6185);
            var P = i(562);
            var _ = i(1489);
            var L = i.n(_);
            var A = "7.17.0";
            var D = {};
            var O = function e(t, i) {
                D[t] = D[t] || [];
                if (i) {
                    D[t] = D[t].concat(i);
                }
                return D[t];
            };
            var R = function e(t, i) {
                O(t, i);
            };
            var M = function e(t, i) {
                var r = O(t).indexOf(i);
                if (r <= -1) {
                    return false;
                }
                D[t] = D[t].slice();
                D[t].splice(r, 1);
                return true;
            };
            var U = function e(t, i) {
                O(t, [].concat(i).map(function(e) {
                    var i = function i() {
                        M(t, i);
                        return e.apply(void 0, arguments);
                    };
                    return i;
                }));
            };
            var B = {
                prefixed: true
            };
            var F = [
                [
                    "requestFullscreen",
                    "exitFullscreen",
                    "fullscreenElement",
                    "fullscreenEnabled",
                    "fullscreenchange",
                    "fullscreenerror",
                    "fullscreen", 
                ],
                [
                    "webkitRequestFullscreen",
                    "webkitExitFullscreen",
                    "webkitFullscreenElement",
                    "webkitFullscreenEnabled",
                    "webkitfullscreenchange",
                    "webkitfullscreenerror",
                    "-webkit-full-screen", 
                ],
                [
                    "mozRequestFullScreen",
                    "mozCancelFullScreen",
                    "mozFullScreenElement",
                    "mozFullScreenEnabled",
                    "mozfullscreenchange",
                    "mozfullscreenerror",
                    "-moz-full-screen", 
                ],
                [
                    "msRequestFullscreen",
                    "msExitFullscreen",
                    "msFullscreenElement",
                    "msFullscreenEnabled",
                    "MSFullscreenChange",
                    "MSFullscreenError",
                    "-ms-fullscreen", 
                ], 
            ];
            var N = F[0];
            var j;
            for(var H = 0; H < F.length; H++){
                if (F[H][1] in s()) {
                    j = F[H];
                    break;
                }
            }
            if (j) {
                for(var q = 0; q < j.length; q++){
                    B[N[q]] = j[q];
                }
                B.prefixed = j[0] !== N[0];
            }
            var V = [];
            var W = function e(t, i) {
                return function(e, r, a) {
                    var s = i.levels[r];
                    var o = new RegExp("^(" + s + ")$");
                    if (e !== "log") {
                        a.unshift(e.toUpperCase() + ":");
                    }
                    a.unshift(t + ":");
                    if (V) {
                        V.push([].concat(a));
                        var u = V.length - 1000;
                        V.splice(0, u > 0 ? u : 0);
                    }
                    if (!n().console) {
                        return;
                    }
                    var l = n().console[e];
                    if (!l && e === "debug") {
                        l = n().console.info || n().console.log;
                    }
                    if (!l || !s || !o.test(e)) {
                        return;
                    }
                    l[Array.isArray(a) ? "apply" : "call"](n().console, a);
                };
            };
            function z(e) {
                var t = "info";
                var i;
                var r = function e() {
                    for(var r = arguments.length, n = new Array(r), a = 0; a < r; a++){
                        n[a] = arguments[a];
                    }
                    i("log", t, n);
                };
                i = W(e, r);
                r.createLogger = function(t) {
                    return z(e + ": " + t);
                };
                r.levels = {
                    all: "debug|log|warn|error",
                    off: "",
                    debug: "debug|log|warn|error",
                    info: "log|warn|error",
                    warn: "warn|error",
                    error: "error",
                    DEFAULT: t
                };
                r.level = function(e) {
                    if (typeof e === "string") {
                        if (!r.levels.hasOwnProperty(e)) {
                            throw new Error('"' + e + '" in not a valid log level');
                        }
                        t = e;
                    }
                    return t;
                };
                r.history = function() {
                    return V ? [].concat(V) : [];
                };
                r.history.filter = function(e) {
                    return (V || []).filter(function(t) {
                        return new RegExp(".*" + e + ".*").test(t[0]);
                    });
                };
                r.history.clear = function() {
                    if (V) {
                        V.length = 0;
                    }
                };
                r.history.disable = function() {
                    if (V !== null) {
                        V.length = 0;
                        V = null;
                    }
                };
                r.history.enable = function() {
                    if (V === null) {
                        V = [];
                    }
                };
                r.error = function() {
                    for(var e = arguments.length, r = new Array(e), n = 0; n < e; n++){
                        r[n] = arguments[n];
                    }
                    return i("error", t, r);
                };
                r.warn = function() {
                    for(var e = arguments.length, r = new Array(e), n = 0; n < e; n++){
                        r[n] = arguments[n];
                    }
                    return i("warn", t, r);
                };
                r.debug = function() {
                    for(var e = arguments.length, r = new Array(e), n = 0; n < e; n++){
                        r[n] = arguments[n];
                    }
                    return i("debug", t, r);
                };
                return r;
            }
            var G = z("VIDEOJS");
            var K = G.createLogger;
            var Z = Object.prototype.toString;
            var Q = function e(t) {
                return ee(t) ? Object.keys(t) : [];
            };
            function X(e, t) {
                Q(e).forEach(function(i) {
                    return t(e[i], i);
                });
            }
            function Y(e, t, i) {
                if (i === void 0) {
                    i = 0;
                }
                return Q(e).reduce(function(i, r) {
                    return t(i, e[r], r);
                }, i);
            }
            function J(e) {
                for(var t = arguments.length, i = new Array(t > 1 ? t - 1 : 0), r = 1; r < t; r++){
                    i[r - 1] = arguments[r];
                }
                if (Object.assign) {
                    return o.Z.apply(void 0, [
                        e
                    ].concat(i));
                }
                i.forEach(function(t) {
                    if (!t) {
                        return;
                    }
                    X(t, function(t, i) {
                        e[i] = t;
                    });
                });
                return e;
            }
            function ee(e) {
                return !!e && typeof e === "object";
            }
            function et(e) {
                return (ee(e) && Z.call(e) === "[object Object]" && e.constructor === Object);
            }
            function ei(e, t) {
                if (!e || !t) {
                    return "";
                }
                if (typeof n().getComputedStyle === "function") {
                    var i;
                    try {
                        i = n().getComputedStyle(e);
                    } catch (r) {
                        return "";
                    }
                    return i ? i.getPropertyValue(t) || i[t] : "";
                }
                return "";
            }
            var er = (n().navigator && n().navigator.userAgent) || "";
            var en = /AppleWebKit\/([\d.]+)/i.exec(er);
            var ea = en ? parseFloat(en.pop()) : null;
            var es = /iPod/i.test(er);
            var eo = (function() {
                var e = er.match(/OS (\d+)_/i);
                if (e && e[1]) {
                    return e[1];
                }
                return null;
            })();
            var eu = /Android/i.test(er);
            var el = (function() {
                var e = er.match(/Android (\d+)(?:\.(\d+))?(?:\.(\d+))*/i);
                if (!e) {
                    return null;
                }
                var t = e[1] && parseFloat(e[1]);
                var i = e[2] && parseFloat(e[2]);
                if (t && i) {
                    return parseFloat(e[1] + "." + e[2]);
                } else if (t) {
                    return t;
                }
                return null;
            })();
            var ed = eu && el < 5 && ea < 537;
            var ec = /Firefox/i.test(er);
            var eh = /Edg/i.test(er);
            var ef = !eh && (/Chrome/i.test(er) || /CriOS/i.test(er));
            var ep = (function() {
                var e = er.match(/(Chrome|CriOS)\/(\d+)/);
                if (e && e[2]) {
                    return parseFloat(e[2]);
                }
                return null;
            })();
            var em = (function() {
                var e = /MSIE\s(\d+)\.\d/.exec(er);
                var t = e && parseFloat(e[1]);
                if (!t && /Trident\/7.0/i.test(er) && /rv:11.0/.test(er)) {
                    t = 11.0;
                }
                return t;
            })();
            var ev = /Safari/i.test(er) && !ef && !eu && !eh;
            var eg = /Windows/i.test(er);
            var e$ = Boolean(eE() && ("ontouchstart" in n() || n().navigator.maxTouchPoints || (n().DocumentTouch && n().document instanceof n().DocumentTouch)));
            var e8 = /iPad/i.test(er) || (ev && e$ && !/iPhone/i.test(er));
            var ey = /iPhone/i.test(er) && !e8;
            var eT = ey || e8 || es;
            var eb = (ev || eT) && !ef;
            var ex = Object.freeze({
                __proto__: null,
                IS_IPOD: es,
                IOS_VERSION: eo,
                IS_ANDROID: eu,
                ANDROID_VERSION: el,
                IS_NATIVE_ANDROID: ed,
                IS_FIREFOX: ec,
                IS_EDGE: eh,
                IS_CHROME: ef,
                CHROME_VERSION: ep,
                IE_VERSION: em,
                IS_SAFARI: ev,
                IS_WINDOWS: eg,
                TOUCH_ENABLED: e$,
                IS_IPAD: e8,
                IS_IPHONE: ey,
                IS_IOS: eT,
                IS_ANY_SAFARI: eb
            });
            function eS(e) {
                return typeof e === "string" && Boolean(e.trim());
            }
            function ek(e) {
                if (e.indexOf(" ") >= 0) {
                    throw new Error("class has illegal whitespace characters");
                }
            }
            function eC(e) {
                return new RegExp("(^|\\s)" + e + "($|\\s)");
            }
            function eE() {
                return (s() === n().document);
            }
            function ew(e) {
                return ee(e) && e.nodeType === 1;
            }
            function eI() {
                try {
                    return (n().parent !== n().self);
                } catch (e) {
                    return true;
                }
            }
            function eP(e) {
                return function(t, i) {
                    if (!eS(t)) {
                        return s()[e](null);
                    }
                    if (eS(i)) {
                        i = s().querySelector(i);
                    }
                    var r = ew(i) ? i : s();
                    return r[e] && r[e](t);
                };
            }
            function e_(e, t, i, r) {
                if (e === void 0) {
                    e = "div";
                }
                if (t === void 0) {
                    t = {};
                }
                if (i === void 0) {
                    i = {};
                }
                var n = s().createElement(e);
                Object.getOwnPropertyNames(t).forEach(function(e) {
                    var i = t[e];
                    if (e.indexOf("aria-") !== -1 || e === "role" || e === "type") {
                        G.warn("Setting attributes in the second argument of createEl()\n" + "has been deprecated. Use the third argument instead.\n" + ("createEl(type, properties, attributes). Attempting to set " + e + " to " + i + "."));
                        n.setAttribute(e, i);
                    } else if (e === "textContent") {
                        eL(n, i);
                    } else if (n[e] !== i || e === "tabIndex") {
                        n[e] = i;
                    }
                });
                Object.getOwnPropertyNames(i).forEach(function(e) {
                    n.setAttribute(e, i[e]);
                });
                if (r) {
                    e3(n, r);
                }
                return n;
            }
            function eL(e, t) {
                if (typeof e.textContent === "undefined") {
                    e.innerText = t;
                } else {
                    e.textContent = t;
                }
                return e;
            }
            function eA(e, t) {
                if (t.firstChild) {
                    t.insertBefore(e, t.firstChild);
                } else {
                    t.appendChild(e);
                }
            }
            function eD(e, t) {
                ek(t);
                if (e.classList) {
                    return e.classList.contains(t);
                }
                return eC(t).test(e.className);
            }
            function eO(e, t) {
                if (e.classList) {
                    e.classList.add(t);
                } else if (!eD(e, t)) {
                    e.className = (e.className + " " + t).trim();
                }
                return e;
            }
            function eR(e, t) {
                if (!e) {
                    G.warn("removeClass was called with an element that doesn't exist");
                    return null;
                }
                if (e.classList) {
                    e.classList.remove(t);
                } else {
                    ek(t);
                    e.className = e.className.split(/\s+/).filter(function(e) {
                        return e !== t;
                    }).join(" ");
                }
                return e;
            }
            function eM(e, t, i) {
                var r = eD(e, t);
                if (typeof i === "function") {
                    i = i(e, t);
                }
                if (typeof i !== "boolean") {
                    i = !r;
                }
                if (i === r) {
                    return;
                }
                if (i) {
                    eO(e, t);
                } else {
                    eR(e, t);
                }
                return e;
            }
            function e0(e, t) {
                Object.getOwnPropertyNames(t).forEach(function(i) {
                    var r = t[i];
                    if (r === null || typeof r === "undefined" || r === false) {
                        e.removeAttribute(i);
                    } else {
                        e.setAttribute(i, r === true ? "" : r);
                    }
                });
            }
            function eU(e) {
                var t = {};
                var i = "," + "autoplay,controls,playsinline,loop,muted,default,defaultMuted" + ",";
                if (e && e.attributes && e.attributes.length > 0) {
                    var r = e.attributes;
                    for(var n = r.length - 1; n >= 0; n--){
                        var a = r[n].name;
                        var s = r[n].value;
                        if (typeof e[a] === "boolean" || i.indexOf("," + a + ",") !== -1) {
                            s = s !== null ? true : false;
                        }
                        t[a] = s;
                    }
                }
                return t;
            }
            function eB(e, t) {
                return e.getAttribute(t);
            }
            function eF(e, t, i) {
                e.setAttribute(t, i);
            }
            function eN(e, t) {
                e.removeAttribute(t);
            }
            function e1() {
                s().body.focus();
                s().onselectstart = function() {
                    return false;
                };
            }
            function ej() {
                s().onselectstart = function() {
                    return true;
                };
            }
            function e2(e) {
                if (e && e.getBoundingClientRect && e.parentNode) {
                    var t = e.getBoundingClientRect();
                    var i = {};
                    [
                        "bottom",
                        "height",
                        "left",
                        "right",
                        "top",
                        "width", 
                    ].forEach(function(e) {
                        if (t[e] !== undefined) {
                            i[e] = t[e];
                        }
                    });
                    if (!i.height) {
                        i.height = parseFloat(ei(e, "height"));
                    }
                    if (!i.width) {
                        i.width = parseFloat(ei(e, "width"));
                    }
                    return i;
                }
            }
            function eH(e) {
                if (!e || (e && !e.offsetParent)) {
                    return {
                        left: 0,
                        top: 0,
                        width: 0,
                        height: 0
                    };
                }
                var t = e.offsetWidth;
                var i = e.offsetHeight;
                var r = 0;
                var n = 0;
                while(e.offsetParent && e !== s()[B.fullscreenElement]){
                    r += e.offsetLeft;
                    n += e.offsetTop;
                    e = e.offsetParent;
                }
                return {
                    left: r,
                    top: n,
                    width: t,
                    height: i
                };
            }
            function e6(e, t) {
                var i = {
                    x: 0,
                    y: 0
                };
                if (eT) {
                    var r = e;
                    while(r && r.nodeName.toLowerCase() !== "html"){
                        var n = ei(r, "transform");
                        if (/^matrix/.test(n)) {
                            var a = n.slice(7, -1).split(/,\s/).map(Number);
                            i.x += a[4];
                            i.y += a[5];
                        } else if (/^matrix3d/.test(n)) {
                            var s = n.slice(9, -1).split(/,\s/).map(Number);
                            i.x += s[12];
                            i.y += s[13];
                        }
                        r = r.parentNode;
                    }
                }
                var o = {};
                var u = eH(t.target);
                var l = eH(e);
                var d = l.width;
                var c = l.height;
                var h = t.offsetY - (l.top - u.top);
                var f = t.offsetX - (l.left - u.left);
                if (t.changedTouches) {
                    f = t.changedTouches[0].pageX - l.left;
                    h = t.changedTouches[0].pageY + l.top;
                    if (eT) {
                        f -= i.x;
                        h -= i.y;
                    }
                }
                o.y = 1 - Math.max(0, Math.min(1, h / c));
                o.x = Math.max(0, Math.min(1, f / d));
                return o;
            }
            function eq(e) {
                return ee(e) && e.nodeType === 3;
            }
            function eV(e) {
                while(e.firstChild){
                    e.removeChild(e.firstChild);
                }
                return e;
            }
            function eW(e) {
                if (typeof e === "function") {
                    e = e();
                }
                return (Array.isArray(e) ? e : [
                    e
                ]).map(function(e) {
                    if (typeof e === "function") {
                        e = e();
                    }
                    if (ew(e) || eq(e)) {
                        return e;
                    }
                    if (typeof e === "string" && /\S/.test(e)) {
                        return s().createTextNode(e);
                    }
                }).filter(function(e) {
                    return e;
                });
            }
            function e3(e, t) {
                eW(t).forEach(function(t) {
                    return e.appendChild(t);
                });
                return e;
            }
            function e4(e, t) {
                return e3(eV(e), t);
            }
            function e5(e) {
                if (e.button === undefined && e.buttons === undefined) {
                    return true;
                }
                if (e.button === 0 && e.buttons === undefined) {
                    return true;
                }
                if (e.type === "mouseup" && e.button === 0 && e.buttons === 0) {
                    return true;
                }
                if (e.button !== 0 || e.buttons !== 1) {
                    return false;
                }
                return true;
            }
            var ez = eP("querySelector");
            var eG = eP("querySelectorAll");
            var eK = Object.freeze({
                __proto__: null,
                isReal: eE,
                isEl: ew,
                isInFrame: eI,
                createEl: e_,
                textContent: eL,
                prependTo: eA,
                hasClass: eD,
                addClass: eO,
                removeClass: eR,
                toggleClass: eM,
                setAttributes: e0,
                getAttributes: eU,
                getAttribute: eB,
                setAttribute: eF,
                removeAttribute: eN,
                blockTextSelection: e1,
                unblockTextSelection: ej,
                getBoundingClientRect: e2,
                findPosition: eH,
                getPointerPosition: e6,
                isTextNode: eq,
                emptyEl: eV,
                normalizeContent: eW,
                appendContent: e3,
                insertContent: e4,
                isSingleLeftClick: e5,
                $: ez,
                $$: eG
            });
            var eZ = false;
            var eQ;
            var e7 = function e() {
                if (eQ.options.autoSetup === false) {
                    return;
                }
                var t = Array.prototype.slice.call(s().getElementsByTagName("video"));
                var i = Array.prototype.slice.call(s().getElementsByTagName("audio"));
                var r = Array.prototype.slice.call(s().getElementsByTagName("video-js"));
                var n = t.concat(i, r);
                if (n && n.length > 0) {
                    for(var a = 0, o = n.length; a < o; a++){
                        var u = n[a];
                        if (u && u.getAttribute) {
                            if (u.player === undefined) {
                                var l = u.getAttribute("data-setup");
                                if (l !== null) {
                                    eQ(u);
                                }
                            }
                        } else {
                            eX(1);
                            break;
                        }
                    }
                } else if (!eZ) {
                    eX(1);
                }
            };
            function eX(e, t) {
                if (!eE()) {
                    return;
                }
                if (t) {
                    eQ = t;
                }
                n().setTimeout(e7, e);
            }
            function eY() {
                eZ = true;
                n().removeEventListener("load", eY);
            }
            if (eE()) {
                if (s().readyState === "complete") {
                    eY();
                } else {
                    n().addEventListener("load", eY);
                }
            }
            var e9 = function e(t) {
                var i = s().createElement("style");
                i.className = t;
                return i;
            };
            var eJ = function e(t, i) {
                if (t.styleSheet) {
                    t.styleSheet.cssText = i;
                } else {
                    t.textContent = i;
                }
            };
            var te = 3;
            var tt = te;
            function ti() {
                return tt++;
            }
            var tr;
            if (!n().WeakMap) {
                tr = (function() {
                    function e() {
                        this.vdata = "vdata" + Math.floor((n().performance && n().performance.now()) || Date.now());
                        this.data = {};
                    }
                    var t = e.prototype;
                    t.set = function e(t, i) {
                        var r = t[this.vdata] || ti();
                        if (!t[this.vdata]) {
                            t[this.vdata] = r;
                        }
                        this.data[r] = i;
                        return this;
                    };
                    t.get = function e(t) {
                        var i = t[this.vdata];
                        if (i) {
                            return this.data[i];
                        }
                        G("We have no data for this element", t);
                        return undefined;
                    };
                    t.has = function e(t) {
                        var i = t[this.vdata];
                        return i in this.data;
                    };
                    t["delete"] = function e(t) {
                        var i = t[this.vdata];
                        if (i) {
                            delete this.data[i];
                            delete t[this.vdata];
                        }
                    };
                    return e;
                })();
            }
            var tn = n().WeakMap ? new WeakMap() : new tr();
            function ta(e, t) {
                if (!tn.has(e)) {
                    return;
                }
                var i = tn.get(e);
                if (i.handlers[t].length === 0) {
                    delete i.handlers[t];
                    if (e.removeEventListener) {
                        e.removeEventListener(t, i.dispatcher, false);
                    } else if (e.detachEvent) {
                        e.detachEvent("on" + t, i.dispatcher);
                    }
                }
                if (Object.getOwnPropertyNames(i.handlers).length <= 0) {
                    delete i.handlers;
                    delete i.dispatcher;
                    delete i.disabled;
                }
                if (Object.getOwnPropertyNames(i).length === 0) {
                    tn["delete"](e);
                }
            }
            function ts(e, t, i, r) {
                i.forEach(function(i) {
                    e(t, i, r);
                });
            }
            function to(e) {
                if (e.fixed_) {
                    return e;
                }
                function t() {
                    return true;
                }
                function i() {
                    return false;
                }
                if (!e || !e.isPropagationStopped || !e.isImmediatePropagationStopped) {
                    var r = e || n().event;
                    e = {};
                    for(var a in r){
                        if (a !== "layerX" && a !== "layerY" && a !== "keyLocation" && a !== "webkitMovementX" && a !== "webkitMovementY") {
                            if (!(a === "returnValue" && r.preventDefault)) {
                                e[a] = r[a];
                            }
                        }
                    }
                    if (!e.target) {
                        e.target = e.srcElement || s();
                    }
                    if (!e.relatedTarget) {
                        e.relatedTarget = e.fromElement === e.target ? e.toElement : e.fromElement;
                    }
                    e.preventDefault = function() {
                        if (r.preventDefault) {
                            r.preventDefault();
                        }
                        e.returnValue = false;
                        r.returnValue = false;
                        e.defaultPrevented = true;
                    };
                    e.defaultPrevented = false;
                    e.stopPropagation = function() {
                        if (r.stopPropagation) {
                            r.stopPropagation();
                        }
                        e.cancelBubble = true;
                        r.cancelBubble = true;
                        e.isPropagationStopped = t;
                    };
                    e.isPropagationStopped = i;
                    e.stopImmediatePropagation = function() {
                        if (r.stopImmediatePropagation) {
                            r.stopImmediatePropagation();
                        }
                        e.isImmediatePropagationStopped = t;
                        e.stopPropagation();
                    };
                    e.isImmediatePropagationStopped = i;
                    if (e.clientX !== null && e.clientX !== undefined) {
                        var o = s().documentElement;
                        var u = s().body;
                        e.pageX = e.clientX + ((o && o.scrollLeft) || (u && u.scrollLeft) || 0) - ((o && o.clientLeft) || (u && u.clientLeft) || 0);
                        e.pageY = e.clientY + ((o && o.scrollTop) || (u && u.scrollTop) || 0) - ((o && o.clientTop) || (u && u.clientTop) || 0);
                    }
                    e.which = e.charCode || e.keyCode;
                    if (e.button !== null && e.button !== undefined) {
                        e.button = e.button & 1 ? 0 : e.button & 4 ? 1 : e.button & 2 ? 2 : 0;
                    }
                }
                e.fixed_ = true;
                return e;
            }
            var tu;
            var tl = function e() {
                if (typeof tu !== "boolean") {
                    tu = false;
                    try {
                        var t = Object.defineProperty({}, "passive", {
                            get: function e() {
                                tu = true;
                            }
                        });
                        n().addEventListener("test", null, t);
                        n().removeEventListener("test", null, t);
                    } catch (i) {}
                }
                return tu;
            };
            var td = [
                "touchstart",
                "touchmove"
            ];
            function tc(e, t, i) {
                if (Array.isArray(t)) {
                    return ts(tc, e, t, i);
                }
                if (!tn.has(e)) {
                    tn.set(e, {});
                }
                var r = tn.get(e);
                if (!r.handlers) {
                    r.handlers = {};
                }
                if (!r.handlers[t]) {
                    r.handlers[t] = [];
                }
                if (!i.guid) {
                    i.guid = ti();
                }
                r.handlers[t].push(i);
                if (!r.dispatcher) {
                    r.disabled = false;
                    r.dispatcher = function(t, i) {
                        if (r.disabled) {
                            return;
                        }
                        t = to(t);
                        var n = r.handlers[t.type];
                        if (n) {
                            var a = n.slice(0);
                            for(var s = 0, o = a.length; s < o; s++){
                                if (t.isImmediatePropagationStopped()) {
                                    break;
                                } else {
                                    try {
                                        a[s].call(e, t, i);
                                    } catch (u) {
                                        G.error(u);
                                    }
                                }
                            }
                        }
                    };
                }
                if (r.handlers[t].length === 1) {
                    if (e.addEventListener) {
                        var n = false;
                        if (tl() && td.indexOf(t) > -1) {
                            n = {
                                passive: true
                            };
                        }
                        e.addEventListener(t, r.dispatcher, n);
                    } else if (e.attachEvent) {
                        e.attachEvent("on" + t, r.dispatcher);
                    }
                }
            }
            function th(e, t, i) {
                if (!tn.has(e)) {
                    return;
                }
                var r = tn.get(e);
                if (!r.handlers) {
                    return;
                }
                if (Array.isArray(t)) {
                    return ts(th, e, t, i);
                }
                var n = function e(t, i) {
                    r.handlers[i] = [];
                    ta(t, i);
                };
                if (t === undefined) {
                    for(var a in r.handlers){
                        if (Object.prototype.hasOwnProperty.call(r.handlers || {}, a)) {
                            n(e, a);
                        }
                    }
                    return;
                }
                var s = r.handlers[t];
                if (!s) {
                    return;
                }
                if (!i) {
                    n(e, t);
                    return;
                }
                if (i.guid) {
                    for(var o = 0; o < s.length; o++){
                        if (s[o].guid === i.guid) {
                            s.splice(o--, 1);
                        }
                    }
                }
                ta(e, t);
            }
            function tf(e, t, i) {
                var r = tn.has(e) ? tn.get(e) : {};
                var n = e.parentNode || e.ownerDocument;
                if (typeof t === "string") {
                    t = {
                        type: t,
                        target: e
                    };
                } else if (!t.target) {
                    t.target = e;
                }
                t = to(t);
                if (r.dispatcher) {
                    r.dispatcher.call(e, t, i);
                }
                if (n && !t.isPropagationStopped() && t.bubbles === true) {
                    tf.call(null, n, t, i);
                } else if (!n && !t.defaultPrevented && t.target && t.target[t.type]) {
                    if (!tn.has(t.target)) {
                        tn.set(t.target, {});
                    }
                    var a = tn.get(t.target);
                    if (t.target[t.type]) {
                        a.disabled = true;
                        if (typeof t.target[t.type] === "function") {
                            t.target[t.type]();
                        }
                        a.disabled = false;
                    }
                }
                return !t.defaultPrevented;
            }
            function tp(e, t, i) {
                if (Array.isArray(t)) {
                    return ts(tp, e, t, i);
                }
                var r = function r() {
                    th(e, t, r);
                    i.apply(this, arguments);
                };
                r.guid = i.guid = i.guid || ti();
                tc(e, t, r);
            }
            function tm(e, t, i) {
                var r = function r() {
                    th(e, t, r);
                    i.apply(this, arguments);
                };
                r.guid = i.guid = i.guid || ti();
                tc(e, t, r);
            }
            var tv = Object.freeze({
                __proto__: null,
                fixEvent: to,
                on: tc,
                off: th,
                trigger: tf,
                one: tp,
                any: tm
            });
            var tg = 30;
            var t$ = function e(t, i, r) {
                if (!i.guid) {
                    i.guid = ti();
                }
                var n = i.bind(t);
                n.guid = r ? r + "_" + i.guid : i.guid;
                return n;
            };
            var t8 = function e(t, i) {
                var r = n().performance.now();
                var a = function e() {
                    var a = n().performance.now();
                    if (a - r >= i) {
                        t.apply(void 0, arguments);
                        r = a;
                    }
                };
                return a;
            };
            var ty = function e(t, i, r, a) {
                if (a === void 0) {
                    a = n();
                }
                var s;
                var o = function e() {
                    a.clearTimeout(s);
                    s = null;
                };
                var u = function e() {
                    var n = this;
                    var o = arguments;
                    var u = function e() {
                        s = null;
                        u = null;
                        if (!r) {
                            t.apply(n, o);
                        }
                    };
                    if (!s && r) {
                        t.apply(n, o);
                    }
                    a.clearTimeout(s);
                    s = a.setTimeout(u, i);
                };
                u.cancel = o;
                return u;
            };
            var tT = function e() {};
            tT.prototype.allowedEvents_ = {};
            tT.prototype.on = function(e, t) {
                var i = this.addEventListener;
                this.addEventListener = function() {};
                tc(this, e, t);
                this.addEventListener = i;
            };
            tT.prototype.addEventListener = tT.prototype.on;
            tT.prototype.off = function(e, t) {
                th(this, e, t);
            };
            tT.prototype.removeEventListener = tT.prototype.off;
            tT.prototype.one = function(e, t) {
                var i = this.addEventListener;
                this.addEventListener = function() {};
                tp(this, e, t);
                this.addEventListener = i;
            };
            tT.prototype.any = function(e, t) {
                var i = this.addEventListener;
                this.addEventListener = function() {};
                tm(this, e, t);
                this.addEventListener = i;
            };
            tT.prototype.trigger = function(e) {
                var t = e.type || e;
                if (typeof e === "string") {
                    e = {
                        type: t
                    };
                }
                e = to(e);
                if (this.allowedEvents_[t] && this["on" + t]) {
                    this["on" + t](e);
                }
                tf(this, e);
            };
            tT.prototype.dispatchEvent = tT.prototype.trigger;
            var tb;
            tT.prototype.queueTrigger = function(e) {
                var t = this;
                if (!tb) {
                    tb = new Map();
                }
                var i = e.type || e;
                var r = tb.get(this);
                if (!r) {
                    r = new Map();
                    tb.set(this, r);
                }
                var a = r.get(i);
                r["delete"](i);
                n().clearTimeout(a);
                var s = n().setTimeout(function() {
                    if (r.size === 0) {
                        r = null;
                        tb["delete"](t);
                    }
                    t.trigger(e);
                }, 0);
                r.set(i, s);
            };
            var tx = function e(t) {
                if (typeof t.name === "function") {
                    return t.name();
                }
                if (typeof t.name === "string") {
                    return t.name;
                }
                if (t.name_) {
                    return t.name_;
                }
                if (t.constructor && t.constructor.name) {
                    return t.constructor.name;
                }
                return typeof t;
            };
            var tS = function e(t) {
                return (t instanceof tT || (!!t.eventBusEl_ && [
                    "on",
                    "one",
                    "off",
                    "trigger"
                ].every(function(e) {
                    return typeof t[e] === "function";
                })));
            };
            var tk = function e(t, i) {
                if (tS(t)) {
                    i();
                } else {
                    if (!t.eventedCallbacks) {
                        t.eventedCallbacks = [];
                    }
                    t.eventedCallbacks.push(i);
                }
            };
            var tC = function e(t) {
                return ((typeof t === "string" && /\S/.test(t)) || (Array.isArray(t) && !!t.length));
            };
            var tE = function e(t, i, r) {
                if (!t || (!t.nodeName && !tS(t))) {
                    throw new Error("Invalid target for " + tx(i) + "#" + r + "; must be a DOM node or evented object.");
                }
            };
            var tw = function e(t, i, r) {
                if (!tC(t)) {
                    throw new Error("Invalid event type for " + tx(i) + "#" + r + "; must be a non-empty string or array.");
                }
            };
            var tI = function e(t, i, r) {
                if (typeof t !== "function") {
                    throw new Error("Invalid listener for " + tx(i) + "#" + r + "; must be a function.");
                }
            };
            var tP = function e(t, i, r) {
                var n = i.length < 3 || i[0] === t || i[0] === t.eventBusEl_;
                var a;
                var s;
                var o;
                if (n) {
                    a = t.eventBusEl_;
                    if (i.length >= 3) {
                        i.shift();
                    }
                    s = i[0];
                    o = i[1];
                } else {
                    a = i[0];
                    s = i[1];
                    o = i[2];
                }
                tE(a, t, r);
                tw(s, t, r);
                tI(o, t, r);
                o = t$(t, o);
                return {
                    isTargetingSelf: n,
                    target: a,
                    type: s,
                    listener: o
                };
            };
            var t_ = function e(t, i, r, n) {
                tE(t, t, i);
                if (t.nodeName) {
                    tv[i](t, r, n);
                } else {
                    t[i](r, n);
                }
            };
            var tL = {
                on: function e() {
                    var t = this;
                    for(var i = arguments.length, r = new Array(i), n = 0; n < i; n++){
                        r[n] = arguments[n];
                    }
                    var a = tP(this, r, "on"), s = a.isTargetingSelf, o = a.target, u = a.type, l = a.listener;
                    t_(o, "on", u, l);
                    if (!s) {
                        var d = function e() {
                            return t.off(o, u, l);
                        };
                        d.guid = l.guid;
                        var c = function e() {
                            return t.off("dispose", d);
                        };
                        c.guid = l.guid;
                        t_(this, "on", "dispose", d);
                        t_(o, "on", "dispose", c);
                    }
                },
                one: function e() {
                    var t = this;
                    for(var i = arguments.length, r = new Array(i), n = 0; n < i; n++){
                        r[n] = arguments[n];
                    }
                    var a = tP(this, r, "one"), s = a.isTargetingSelf, o = a.target, u = a.type, l = a.listener;
                    if (s) {
                        t_(o, "one", u, l);
                    } else {
                        var d = function e() {
                            t.off(o, u, e);
                            for(var i = arguments.length, r = new Array(i), n = 0; n < i; n++){
                                r[n] = arguments[n];
                            }
                            l.apply(null, r);
                        };
                        d.guid = l.guid;
                        t_(o, "one", u, d);
                    }
                },
                any: function e() {
                    var t = this;
                    for(var i = arguments.length, r = new Array(i), n = 0; n < i; n++){
                        r[n] = arguments[n];
                    }
                    var a = tP(this, r, "any"), s = a.isTargetingSelf, o = a.target, u = a.type, l = a.listener;
                    if (s) {
                        t_(o, "any", u, l);
                    } else {
                        var d = function e() {
                            t.off(o, u, e);
                            for(var i = arguments.length, r = new Array(i), n = 0; n < i; n++){
                                r[n] = arguments[n];
                            }
                            l.apply(null, r);
                        };
                        d.guid = l.guid;
                        t_(o, "any", u, d);
                    }
                },
                off: function e(t, i, r) {
                    if (!t || tC(t)) {
                        th(this.eventBusEl_, t, i);
                    } else {
                        var n = t;
                        var a = i;
                        tE(n, this, "off");
                        tw(a, this, "off");
                        tI(r, this, "off");
                        r = t$(this, r);
                        this.off("dispose", r);
                        if (n.nodeName) {
                            th(n, a, r);
                            th(n, "dispose", r);
                        } else if (tS(n)) {
                            n.off(a, r);
                            n.off("dispose", r);
                        }
                    }
                },
                trigger: function e(t, i) {
                    tE(this.eventBusEl_, this, "trigger");
                    var r = t && typeof t !== "string" ? t.type : t;
                    if (!tC(r)) {
                        var n = "Invalid event type for " + tx(this) + "#trigger; " + "must be a non-empty string or object with a type key that has a non-empty value.";
                        if (t) {
                            (this.log || G).error(n);
                        } else {
                            throw new Error(n);
                        }
                    }
                    return tf(this.eventBusEl_, t, i);
                }
            };
            function tA(e, t) {
                if (t === void 0) {
                    t = {};
                }
                var i = t, r = i.eventBusKey;
                if (r) {
                    if (!e[r].nodeName) {
                        throw new Error('The eventBusKey "' + r + '" does not refer to an element.');
                    }
                    e.eventBusEl_ = e[r];
                } else {
                    e.eventBusEl_ = e_("span", {
                        className: "vjs-event-bus"
                    });
                }
                J(e, tL);
                if (e.eventedCallbacks) {
                    e.eventedCallbacks.forEach(function(e) {
                        e();
                    });
                }
                e.on("dispose", function() {
                    e.off();
                    [
                        e,
                        e.el_,
                        e.eventBusEl_
                    ].forEach(function(e) {
                        if (e && tn.has(e)) {
                            tn["delete"](e);
                        }
                    });
                    n().setTimeout(function() {
                        e.eventBusEl_ = null;
                    }, 0);
                });
                return e;
            }
            var tD = {
                state: {},
                setState: function e(t) {
                    var i = this;
                    if (typeof t === "function") {
                        t = t();
                    }
                    var r;
                    X(t, function(e, t) {
                        if (i.state[t] !== e) {
                            r = r || {};
                            r[t] = {
                                from: i.state[t],
                                to: e
                            };
                        }
                        i.state[t] = e;
                    });
                    if (r && tS(this)) {
                        this.trigger({
                            changes: r,
                            type: "statechanged"
                        });
                    }
                    return r;
                }
            };
            function tO(e, t) {
                J(e, tD);
                e.state = J({}, e.state, t);
                if (typeof e.handleStateChanged === "function" && tS(e)) {
                    e.on("statechanged", e.handleStateChanged);
                }
                return e;
            }
            var tR = function e(t) {
                if (typeof t !== "string") {
                    return t;
                }
                return t.replace(/./, function(e) {
                    return e.toLowerCase();
                });
            };
            var tM = function e(t) {
                if (typeof t !== "string") {
                    return t;
                }
                return t.replace(/./, function(e) {
                    return e.toUpperCase();
                });
            };
            var t0 = function e(t, i) {
                return tM(t) === tM(i);
            };
            function tU() {
                var e = {};
                for(var t = arguments.length, i = new Array(t), r = 0; r < t; r++){
                    i[r] = arguments[r];
                }
                i.forEach(function(t) {
                    if (!t) {
                        return;
                    }
                    X(t, function(t, i) {
                        if (!et(t)) {
                            e[i] = t;
                            return;
                        }
                        if (!et(e[i])) {
                            e[i] = {};
                        }
                        e[i] = tU(e[i], t);
                    });
                });
                return e;
            }
            var tB = (function() {
                function e() {
                    this.map_ = {};
                }
                var t = e.prototype;
                t.has = function e(t) {
                    return t in this.map_;
                };
                t["delete"] = function e(t) {
                    var i = this.has(t);
                    delete this.map_[t];
                    return i;
                };
                t.set = function e(t, i) {
                    this.map_[t] = i;
                    return this;
                };
                t.forEach = function e(t, i) {
                    for(var r in this.map_){
                        t.call(i, this.map_[r], r, this);
                    }
                };
                return e;
            })();
            var tF = n().Map ? n().Map : tB;
            var tN = (function() {
                function e() {
                    this.set_ = {};
                }
                var t = e.prototype;
                t.has = function e(t) {
                    return t in this.set_;
                };
                t["delete"] = function e(t) {
                    var i = this.has(t);
                    delete this.set_[t];
                    return i;
                };
                t.add = function e(t) {
                    this.set_[t] = 1;
                    return this;
                };
                t.forEach = function e(t, i) {
                    for(var r in this.set_){
                        t.call(i, r, r, this);
                    }
                };
                return e;
            })();
            var t1 = n().Set ? n().Set : tN;
            var tj = (function() {
                function e(e, t, i) {
                    if (!e && this.play) {
                        this.player_ = e = this;
                    } else {
                        this.player_ = e;
                    }
                    this.isDisposed_ = false;
                    this.parentComponent_ = null;
                    this.options_ = tU({}, this.options_);
                    t = this.options_ = tU(this.options_, t);
                    this.id_ = t.id || (t.el && t.el.id);
                    if (!this.id_) {
                        var r = (e && e.id && e.id()) || "no_player";
                        this.id_ = r + "_component_" + ti();
                    }
                    this.name_ = t.name || null;
                    if (t.el) {
                        this.el_ = t.el;
                    } else if (t.createEl !== false) {
                        this.el_ = this.createEl();
                    }
                    if (t.evented !== false) {
                        tA(this, {
                            eventBusKey: this.el_ ? "el_" : null
                        });
                        this.handleLanguagechange = this.handleLanguagechange.bind(this);
                        this.on(this.player_, "languagechange", this.handleLanguagechange);
                    }
                    tO(this, this.constructor.defaultState);
                    this.children_ = [];
                    this.childIndex_ = {};
                    this.childNameIndex_ = {};
                    this.setTimeoutIds_ = new t1();
                    this.setIntervalIds_ = new t1();
                    this.rafIds_ = new t1();
                    this.namedRafs_ = new tF();
                    this.clearingTimersOnDispose_ = false;
                    if (t.initChildren !== false) {
                        this.initChildren();
                    }
                    this.ready(i);
                    if (t.reportTouchActivity !== false) {
                        this.enableTouchActivity();
                    }
                }
                var t = e.prototype;
                t.dispose = function e() {
                    if (this.isDisposed_) {
                        return;
                    }
                    if (this.readyQueue_) {
                        this.readyQueue_.length = 0;
                    }
                    this.trigger({
                        type: "dispose",
                        bubbles: false
                    });
                    this.isDisposed_ = true;
                    if (this.children_) {
                        for(var t = this.children_.length - 1; t >= 0; t--){
                            if (this.children_[t].dispose) {
                                this.children_[t].dispose();
                            }
                        }
                    }
                    this.children_ = null;
                    this.childIndex_ = null;
                    this.childNameIndex_ = null;
                    this.parentComponent_ = null;
                    if (this.el_) {
                        if (this.el_.parentNode) {
                            this.el_.parentNode.removeChild(this.el_);
                        }
                        this.el_ = null;
                    }
                    this.player_ = null;
                };
                t.isDisposed = function e() {
                    return Boolean(this.isDisposed_);
                };
                t.player = function e() {
                    return this.player_;
                };
                t.options = function e(t) {
                    if (!t) {
                        return this.options_;
                    }
                    this.options_ = tU(this.options_, t);
                    return this.options_;
                };
                t.el = function e() {
                    return this.el_;
                };
                t.createEl = function e(t, i, r) {
                    return e_(t, i, r);
                };
                t.localize = function e(t, i, r) {
                    if (r === void 0) {
                        r = t;
                    }
                    var n = this.player_.language && this.player_.language();
                    var a = this.player_.languages && this.player_.languages();
                    var s = a && a[n];
                    var o = n && n.split("-")[0];
                    var u = a && a[o];
                    var l = r;
                    if (s && s[t]) {
                        l = s[t];
                    } else if (u && u[t]) {
                        l = u[t];
                    }
                    if (i) {
                        l = l.replace(/\{(\d+)\}/g, function(e, t) {
                            var r = i[t - 1];
                            var n = r;
                            if (typeof r === "undefined") {
                                n = e;
                            }
                            return n;
                        });
                    }
                    return l;
                };
                t.handleLanguagechange = function e() {};
                t.contentEl = function e() {
                    return this.contentEl_ || this.el_;
                };
                t.id = function e() {
                    return this.id_;
                };
                t.name = function e() {
                    return this.name_;
                };
                t.children = function e() {
                    return this.children_;
                };
                t.getChildById = function e(t) {
                    return this.childIndex_[t];
                };
                t.getChild = function e(t) {
                    if (!t) {
                        return;
                    }
                    return this.childNameIndex_[t];
                };
                t.getDescendant = function e() {
                    for(var t = arguments.length, i = new Array(t), r = 0; r < t; r++){
                        i[r] = arguments[r];
                    }
                    i = i.reduce(function(e, t) {
                        return e.concat(t);
                    }, []);
                    var n = this;
                    for(var a = 0; a < i.length; a++){
                        n = n.getChild(i[a]);
                        if (!n || !n.getChild) {
                            return;
                        }
                    }
                    return n;
                };
                t.addChild = function t(i, r, n) {
                    if (r === void 0) {
                        r = {};
                    }
                    if (n === void 0) {
                        n = this.children_.length;
                    }
                    var a;
                    var s;
                    if (typeof i === "string") {
                        s = tM(i);
                        var o = r.componentClass || s;
                        r.name = s;
                        var u = e.getComponent(o);
                        if (!u) {
                            throw new Error("Component " + o + " does not exist");
                        }
                        if (typeof u !== "function") {
                            return null;
                        }
                        a = new u(this.player_ || this, r);
                    } else {
                        a = i;
                    }
                    if (a.parentComponent_) {
                        a.parentComponent_.removeChild(a);
                    }
                    this.children_.splice(n, 0, a);
                    a.parentComponent_ = this;
                    if (typeof a.id === "function") {
                        this.childIndex_[a.id()] = a;
                    }
                    s = s || (a.name && tM(a.name()));
                    if (s) {
                        this.childNameIndex_[s] = a;
                        this.childNameIndex_[tR(s)] = a;
                    }
                    if (typeof a.el === "function" && a.el()) {
                        var l = null;
                        if (this.children_[n + 1]) {
                            if (this.children_[n + 1].el_) {
                                l = this.children_[n + 1].el_;
                            } else if (ew(this.children_[n + 1])) {
                                l = this.children_[n + 1];
                            }
                        }
                        this.contentEl().insertBefore(a.el(), l);
                    }
                    return a;
                };
                t.removeChild = function e(t) {
                    if (typeof t === "string") {
                        t = this.getChild(t);
                    }
                    if (!t || !this.children_) {
                        return;
                    }
                    var i = false;
                    for(var r = this.children_.length - 1; r >= 0; r--){
                        if (this.children_[r] === t) {
                            i = true;
                            this.children_.splice(r, 1);
                            break;
                        }
                    }
                    if (!i) {
                        return;
                    }
                    t.parentComponent_ = null;
                    this.childIndex_[t.id()] = null;
                    this.childNameIndex_[tM(t.name())] = null;
                    this.childNameIndex_[tR(t.name())] = null;
                    var n = t.el();
                    if (n && n.parentNode === this.contentEl()) {
                        this.contentEl().removeChild(t.el());
                    }
                };
                t.initChildren = function t() {
                    var i = this;
                    var r = this.options_.children;
                    if (r) {
                        var n = this.options_;
                        var a = function e(t) {
                            var r = t.name;
                            var a = t.opts;
                            if (n[r] !== undefined) {
                                a = n[r];
                            }
                            if (a === false) {
                                return;
                            }
                            if (a === true) {
                                a = {};
                            }
                            a.playerOptions = i.options_.playerOptions;
                            var s = i.addChild(r, a);
                            if (s) {
                                i[r] = s;
                            }
                        };
                        var s;
                        var o = e.getComponent("Tech");
                        if (Array.isArray(r)) {
                            s = r;
                        } else {
                            s = Object.keys(r);
                        }
                        s.concat(Object.keys(this.options_).filter(function(e) {
                            return !s.some(function(t) {
                                if (typeof t === "string") {
                                    return e === t;
                                }
                                return e === t.name;
                            });
                        })).map(function(e) {
                            var t;
                            var n;
                            if (typeof e === "string") {
                                t = e;
                                n = r[t] || i.options_[t] || {};
                            } else {
                                t = e.name;
                                n = e;
                            }
                            return {
                                name: t,
                                opts: n
                            };
                        }).filter(function(t) {
                            var i = e.getComponent(t.opts.componentClass || tM(t.name));
                            return i && !o.isTech(i);
                        }).forEach(a);
                    }
                };
                t.buildCSSClass = function e() {
                    return "";
                };
                t.ready = function e(t, i) {
                    if (i === void 0) {
                        i = false;
                    }
                    if (!t) {
                        return;
                    }
                    if (!this.isReady_) {
                        this.readyQueue_ = this.readyQueue_ || [];
                        this.readyQueue_.push(t);
                        return;
                    }
                    if (i) {
                        t.call(this);
                    } else {
                        this.setTimeout(t, 1);
                    }
                };
                t.triggerReady = function e() {
                    this.isReady_ = true;
                    this.setTimeout(function() {
                        var e = this.readyQueue_;
                        this.readyQueue_ = [];
                        if (e && e.length > 0) {
                            e.forEach(function(e) {
                                e.call(this);
                            }, this);
                        }
                        this.trigger("ready");
                    }, 1);
                };
                t.$ = function e(t, i) {
                    return ez(t, i || this.contentEl());
                };
                t.$$ = function e(t, i) {
                    return eG(t, i || this.contentEl());
                };
                t.hasClass = function e(t) {
                    return eD(this.el_, t);
                };
                t.addClass = function e(t) {
                    eO(this.el_, t);
                };
                t.removeClass = function e(t) {
                    eR(this.el_, t);
                };
                t.toggleClass = function e(t, i) {
                    eM(this.el_, t, i);
                };
                t.show = function e() {
                    this.removeClass("vjs-hidden");
                };
                t.hide = function e() {
                    this.addClass("vjs-hidden");
                };
                t.lockShowing = function e() {
                    this.addClass("vjs-lock-showing");
                };
                t.unlockShowing = function e() {
                    this.removeClass("vjs-lock-showing");
                };
                t.getAttribute = function e(t) {
                    return eB(this.el_, t);
                };
                t.setAttribute = function e(t, i) {
                    eF(this.el_, t, i);
                };
                t.removeAttribute = function e(t) {
                    eN(this.el_, t);
                };
                t.width = function e(t, i) {
                    return this.dimension("width", t, i);
                };
                t.height = function e(t, i) {
                    return this.dimension("height", t, i);
                };
                t.dimensions = function e(t, i) {
                    this.width(t, true);
                    this.height(i);
                };
                t.dimension = function e(t, i, r) {
                    if (i !== undefined) {
                        if (i === null || i !== i) {
                            i = 0;
                        }
                        if (("" + i).indexOf("%") !== -1 || ("" + i).indexOf("px") !== -1) {
                            this.el_.style[t] = i;
                        } else if (i === "auto") {
                            this.el_.style[t] = "";
                        } else {
                            this.el_.style[t] = i + "px";
                        }
                        if (!r) {
                            this.trigger("componentresize");
                        }
                        return;
                    }
                    if (!this.el_) {
                        return 0;
                    }
                    var n = this.el_.style[t];
                    var a = n.indexOf("px");
                    if (a !== -1) {
                        return parseInt(n.slice(0, a), 10);
                    }
                    return parseInt(this.el_["offset" + tM(t)], 10);
                };
                t.currentDimension = function e(t) {
                    var i = 0;
                    if (t !== "width" && t !== "height") {
                        throw new Error("currentDimension only accepts width or height value");
                    }
                    i = ei(this.el_, t);
                    i = parseFloat(i);
                    if (i === 0 || isNaN(i)) {
                        var r = "offset" + tM(t);
                        i = this.el_[r];
                    }
                    return i;
                };
                t.currentDimensions = function e() {
                    return {
                        width: this.currentDimension("width"),
                        height: this.currentDimension("height")
                    };
                };
                t.currentWidth = function e() {
                    return this.currentDimension("width");
                };
                t.currentHeight = function e() {
                    return this.currentDimension("height");
                };
                t.focus = function e() {
                    this.el_.focus();
                };
                t.blur = function e() {
                    this.el_.blur();
                };
                t.handleKeyDown = function e(t) {
                    if (this.player_) {
                        t.stopPropagation();
                        this.player_.handleKeyDown(t);
                    }
                };
                t.handleKeyPress = function e(t) {
                    this.handleKeyDown(t);
                };
                t.emitTapEvents = function e() {
                    var t = 0;
                    var i = null;
                    var r = 10;
                    var a = 200;
                    var s;
                    this.on("touchstart", function(e) {
                        if (e.touches.length === 1) {
                            i = {
                                pageX: e.touches[0].pageX,
                                pageY: e.touches[0].pageY
                            };
                            t = n().performance.now();
                            s = true;
                        }
                    });
                    this.on("touchmove", function(e) {
                        if (e.touches.length > 1) {
                            s = false;
                        } else if (i) {
                            var t = e.touches[0].pageX - i.pageX;
                            var n = e.touches[0].pageY - i.pageY;
                            var a = Math.sqrt(t * t + n * n);
                            if (a > r) {
                                s = false;
                            }
                        }
                    });
                    var o = function e() {
                        s = false;
                    };
                    this.on("touchleave", o);
                    this.on("touchcancel", o);
                    this.on("touchend", function(e) {
                        i = null;
                        if (s === true) {
                            var r = n().performance.now() - t;
                            if (r < a) {
                                e.preventDefault();
                                this.trigger("tap");
                            }
                        }
                    });
                };
                t.enableTouchActivity = function e() {
                    if (!this.player() || !this.player().reportUserActivity) {
                        return;
                    }
                    var t = t$(this.player(), this.player().reportUserActivity);
                    var i;
                    this.on("touchstart", function() {
                        t();
                        this.clearInterval(i);
                        i = this.setInterval(t, 250);
                    });
                    var r = function e(r) {
                        t();
                        this.clearInterval(i);
                    };
                    this.on("touchmove", t);
                    this.on("touchend", r);
                    this.on("touchcancel", r);
                };
                t.setTimeout = function e(t, i) {
                    var r = this;
                    var a;
                    t = t$(this, t);
                    this.clearTimersOnDispose_();
                    a = n().setTimeout(function() {
                        if (r.setTimeoutIds_.has(a)) {
                            r.setTimeoutIds_["delete"](a);
                        }
                        t();
                    }, i);
                    this.setTimeoutIds_.add(a);
                    return a;
                };
                t.clearTimeout = function e(t) {
                    if (this.setTimeoutIds_.has(t)) {
                        this.setTimeoutIds_["delete"](t);
                        n().clearTimeout(t);
                    }
                    return t;
                };
                t.setInterval = function e(t, i) {
                    t = t$(this, t);
                    this.clearTimersOnDispose_();
                    var r = n().setInterval(t, i);
                    this.setIntervalIds_.add(r);
                    return r;
                };
                t.clearInterval = function e(t) {
                    if (this.setIntervalIds_.has(t)) {
                        this.setIntervalIds_["delete"](t);
                        n().clearInterval(t);
                    }
                    return t;
                };
                t.requestAnimationFrame = function e(t) {
                    var i = this;
                    if (!this.supportsRaf_) {
                        return this.setTimeout(t, 1000 / 60);
                    }
                    this.clearTimersOnDispose_();
                    var r;
                    t = t$(this, t);
                    r = n().requestAnimationFrame(function() {
                        if (i.rafIds_.has(r)) {
                            i.rafIds_["delete"](r);
                        }
                        t();
                    });
                    this.rafIds_.add(r);
                    return r;
                };
                t.requestNamedAnimationFrame = function e(t, i) {
                    var r = this;
                    if (this.namedRafs_.has(t)) {
                        return;
                    }
                    this.clearTimersOnDispose_();
                    i = t$(this, i);
                    var n = this.requestAnimationFrame(function() {
                        i();
                        if (r.namedRafs_.has(t)) {
                            r.namedRafs_["delete"](t);
                        }
                    });
                    this.namedRafs_.set(t, n);
                    return t;
                };
                t.cancelNamedAnimationFrame = function e(t) {
                    if (!this.namedRafs_.has(t)) {
                        return;
                    }
                    this.cancelAnimationFrame(this.namedRafs_.get(t));
                    this.namedRafs_["delete"](t);
                };
                t.cancelAnimationFrame = function e(t) {
                    if (!this.supportsRaf_) {
                        return this.clearTimeout(t);
                    }
                    if (this.rafIds_.has(t)) {
                        this.rafIds_["delete"](t);
                        n().cancelAnimationFrame(t);
                    }
                    return t;
                };
                t.clearTimersOnDispose_ = function e() {
                    var t = this;
                    if (this.clearingTimersOnDispose_) {
                        return;
                    }
                    this.clearingTimersOnDispose_ = true;
                    this.one("dispose", function() {
                        [
                            [
                                "namedRafs_",
                                "cancelNamedAnimationFrame"
                            ],
                            [
                                "rafIds_",
                                "cancelAnimationFrame"
                            ],
                            [
                                "setTimeoutIds_",
                                "clearTimeout"
                            ],
                            [
                                "setIntervalIds_",
                                "clearInterval"
                            ], 
                        ].forEach(function(e) {
                            var i = e[0], r = e[1];
                            t[i].forEach(function(e, i) {
                                return t[r](i);
                            });
                        });
                        t.clearingTimersOnDispose_ = false;
                    });
                };
                e.registerComponent = function t(i, r) {
                    if (typeof i !== "string" || !i) {
                        throw new Error('Illegal component name, "' + i + '"; must be a non-empty string.');
                    }
                    var n = e.getComponent("Tech");
                    var a = n && n.isTech(r);
                    var s = e === r || e.prototype.isPrototypeOf(r.prototype);
                    if (a || !s) {
                        var o;
                        if (a) {
                            o = "techs must be registered using Tech.registerTech()";
                        } else {
                            o = "must be a Component subclass";
                        }
                        throw new Error('Illegal component, "' + i + '"; ' + o + ".");
                    }
                    i = tM(i);
                    if (!e.components_) {
                        e.components_ = {};
                    }
                    var u = e.getComponent("Player");
                    if (i === "Player" && u && u.players) {
                        var l = u.players;
                        var d = Object.keys(l);
                        if (l && d.length > 0 && d.map(function(e) {
                            return l[e];
                        }).every(Boolean)) {
                            throw new Error("Can not register Player component after player has been created.");
                        }
                    }
                    e.components_[i] = r;
                    e.components_[tR(i)] = r;
                    return r;
                };
                e.getComponent = function t(i) {
                    if (!i || !e.components_) {
                        return;
                    }
                    return e.components_[i];
                };
                return e;
            })();
            tj.prototype.supportsRaf_ = typeof n().requestAnimationFrame === "function" && typeof n().cancelAnimationFrame === "function";
            tj.registerComponent("Component", tj);
            function t2(e, t, i) {
                if (typeof t !== "number" || t < 0 || t > i) {
                    throw new Error("Failed to execute '" + e + "' on 'TimeRanges': The index provided (" + t + ") is non-numeric or out of bounds (0-" + i + ").");
                }
            }
            function tH(e, t, i, r) {
                t2(e, r, i.length - 1);
                return i[r][t];
            }
            function t6(e) {
                var t;
                if (e === undefined || e.length === 0) {
                    t = {
                        length: 0,
                        start: function e() {
                            throw new Error("This TimeRanges object is empty");
                        },
                        end: function e() {
                            throw new Error("This TimeRanges object is empty");
                        }
                    };
                } else {
                    t = {
                        length: e.length,
                        start: tH.bind(null, "start", 0, e),
                        end: tH.bind(null, "end", 1, e)
                    };
                }
                if (n().Symbol && n().Symbol.iterator) {
                    t[n().Symbol.iterator] = function() {
                        return (e || []).values();
                    };
                }
                return t;
            }
            function tq(e, t) {
                if (Array.isArray(e)) {
                    return t6(e);
                } else if (e === undefined || t === undefined) {
                    return t6();
                }
                return t6([
                    [
                        e,
                        t
                    ]
                ]);
            }
            function tV(e, t) {
                var i = 0;
                var r;
                var n;
                if (!t) {
                    return 0;
                }
                if (!e || !e.length) {
                    e = tq(0, 0);
                }
                for(var a = 0; a < e.length; a++){
                    r = e.start(a);
                    n = e.end(a);
                    if (n > t) {
                        n = t;
                    }
                    i += n - r;
                }
                return i / t;
            }
            function tW(e) {
                if (e instanceof tW) {
                    return e;
                }
                if (typeof e === "number") {
                    this.code = e;
                } else if (typeof e === "string") {
                    this.message = e;
                } else if (ee(e)) {
                    if (typeof e.code === "number") {
                        this.code = e.code;
                    }
                    J(this, e);
                }
                if (!this.message) {
                    this.message = tW.defaultMessages[this.code] || "";
                }
            }
            tW.prototype.code = 0;
            tW.prototype.message = "";
            tW.prototype.status = null;
            tW.errorTypes = [
                "MEDIA_ERR_CUSTOM",
                "MEDIA_ERR_ABORTED",
                "MEDIA_ERR_NETWORK",
                "MEDIA_ERR_DECODE",
                "MEDIA_ERR_SRC_NOT_SUPPORTED",
                "MEDIA_ERR_ENCRYPTED", 
            ];
            tW.defaultMessages = {
                1: "You aborted the media playback",
                2: "A network error caused the media download to fail part-way.",
                3: "The media playback was aborted due to a corruption problem or because the media used features your browser did not support.",
                4: "The media could not be loaded, either because the server or network failed or because the format is not supported.",
                5: "The media is encrypted and we do not have the keys to decrypt it."
            };
            for(var t3 = 0; t3 < tW.errorTypes.length; t3++){
                tW[tW.errorTypes[t3]] = t3;
                tW.prototype[tW.errorTypes[t3]] = t3;
            }
            function t4(e) {
                return (e !== undefined && e !== null && typeof e.then === "function");
            }
            function t5(e) {
                if (t4(e)) {
                    e.then(null, function(e) {});
                }
            }
            var tz = function e(t) {
                var i = [
                    "kind",
                    "label",
                    "language",
                    "id",
                    "inBandMetadataTrackDispatchType",
                    "mode",
                    "src", 
                ].reduce(function(e, i, r) {
                    if (t[i]) {
                        e[i] = t[i];
                    }
                    return e;
                }, {
                    cues: t.cues && Array.prototype.map.call(t.cues, function(e) {
                        return {
                            startTime: e.startTime,
                            endTime: e.endTime,
                            text: e.text,
                            id: e.id
                        };
                    })
                });
                return i;
            };
            var tG = function e(t) {
                var i = t.$$("track");
                var r = Array.prototype.map.call(i, function(e) {
                    return e.track;
                });
                var n = Array.prototype.map.call(i, function(e) {
                    var t = tz(e.track);
                    if (e.src) {
                        t.src = e.src;
                    }
                    return t;
                });
                return n.concat(Array.prototype.filter.call(t.textTracks(), function(e) {
                    return r.indexOf(e) === -1;
                }).map(tz));
            };
            var tK = function e(t, i) {
                t.forEach(function(e) {
                    var t = i.addRemoteTextTrack(e).track;
                    if (!e.src && e.cues) {
                        e.cues.forEach(function(e) {
                            return t.addCue(e);
                        });
                    }
                });
                return i.textTracks();
            };
            var tZ = {
                textTracksToJson: tG,
                jsonToTextTracks: tK,
                trackToJson_: tz
            };
            var tQ = "vjs-modal-dialog";
            var t7 = (function(e) {
                (0, l.Z)(t, e);
                function t(t, i) {
                    var r;
                    r = e.call(this, t, i) || this;
                    r.handleKeyDown_ = function(e) {
                        return r.handleKeyDown(e);
                    };
                    r.close_ = function(e) {
                        return r.close(e);
                    };
                    r.opened_ = r.hasBeenOpened_ = r.hasBeenFilled_ = false;
                    r.closeable(!r.options_.uncloseable);
                    r.content(r.options_.content);
                    r.contentEl_ = e_("div", {
                        className: tQ + "-content"
                    }, {
                        role: "document"
                    });
                    r.descEl_ = e_("p", {
                        className: tQ + "-description vjs-control-text",
                        id: r.el().getAttribute("aria-describedby")
                    });
                    eL(r.descEl_, r.description());
                    r.el_.appendChild(r.descEl_);
                    r.el_.appendChild(r.contentEl_);
                    return r;
                }
                var i = t.prototype;
                i.createEl = function t() {
                    return e.prototype.createEl.call(this, "div", {
                        className: this.buildCSSClass(),
                        tabIndex: -1
                    }, {
                        "aria-describedby": this.id() + "_description",
                        "aria-hidden": "true",
                        "aria-label": this.label(),
                        role: "dialog"
                    });
                };
                i.dispose = function t() {
                    this.contentEl_ = null;
                    this.descEl_ = null;
                    this.previouslyActiveEl_ = null;
                    e.prototype.dispose.call(this);
                };
                i.buildCSSClass = function t() {
                    return (tQ + " vjs-hidden " + e.prototype.buildCSSClass.call(this));
                };
                i.label = function e() {
                    return this.localize(this.options_.label || "Modal Window");
                };
                i.description = function e() {
                    var t = this.options_.description || this.localize("This is a modal window.");
                    if (this.closeable()) {
                        t += " " + this.localize("This modal can be closed by pressing the Escape key or activating the close button.");
                    }
                    return t;
                };
                i.open = function e() {
                    if (!this.opened_) {
                        var t = this.player();
                        this.trigger("beforemodalopen");
                        this.opened_ = true;
                        if (this.options_.fillAlways || (!this.hasBeenOpened_ && !this.hasBeenFilled_)) {
                            this.fill();
                        }
                        this.wasPlaying_ = !t.paused();
                        if (this.options_.pauseOnOpen && this.wasPlaying_) {
                            t.pause();
                        }
                        this.on("keydown", this.handleKeyDown_);
                        this.hadControls_ = t.controls();
                        t.controls(false);
                        this.show();
                        this.conditionalFocus_();
                        this.el().setAttribute("aria-hidden", "false");
                        this.trigger("modalopen");
                        this.hasBeenOpened_ = true;
                    }
                };
                i.opened = function e(t) {
                    if (typeof t === "boolean") {
                        this[t ? "open" : "close"]();
                    }
                    return this.opened_;
                };
                i.close = function e() {
                    if (!this.opened_) {
                        return;
                    }
                    var t = this.player();
                    this.trigger("beforemodalclose");
                    this.opened_ = false;
                    if (this.wasPlaying_ && this.options_.pauseOnOpen) {
                        t.play();
                    }
                    this.off("keydown", this.handleKeyDown_);
                    if (this.hadControls_) {
                        t.controls(true);
                    }
                    this.hide();
                    this.el().setAttribute("aria-hidden", "true");
                    this.trigger("modalclose");
                    this.conditionalBlur_();
                    if (this.options_.temporary) {
                        this.dispose();
                    }
                };
                i.closeable = function e(t) {
                    if (typeof t === "boolean") {
                        var e = (this.closeable_ = !!t);
                        var i = this.getChild("closeButton");
                        if (e && !i) {
                            var r = this.contentEl_;
                            this.contentEl_ = this.el_;
                            i = this.addChild("closeButton", {
                                controlText: "Close Modal Dialog"
                            });
                            this.contentEl_ = r;
                            this.on(i, "close", this.close_);
                        }
                        if (!e && i) {
                            this.off(i, "close", this.close_);
                            this.removeChild(i);
                            i.dispose();
                        }
                    }
                    return this.closeable_;
                };
                i.fill = function e() {
                    this.fillWith(this.content());
                };
                i.fillWith = function e(t) {
                    var i = this.contentEl();
                    var r = i.parentNode;
                    var n = i.nextSibling;
                    this.trigger("beforemodalfill");
                    this.hasBeenFilled_ = true;
                    r.removeChild(i);
                    this.empty();
                    e4(i, t);
                    this.trigger("modalfill");
                    if (n) {
                        r.insertBefore(i, n);
                    } else {
                        r.appendChild(i);
                    }
                    var a = this.getChild("closeButton");
                    if (a) {
                        r.appendChild(a.el_);
                    }
                };
                i.empty = function e() {
                    this.trigger("beforemodalempty");
                    eV(this.contentEl());
                    this.trigger("modalempty");
                };
                i.content = function e(t) {
                    if (typeof t !== "undefined") {
                        this.content_ = t;
                    }
                    return this.content_;
                };
                i.conditionalFocus_ = function e() {
                    var t = s().activeElement;
                    var i = this.player_.el_;
                    this.previouslyActiveEl_ = null;
                    if (i.contains(t) || i === t) {
                        this.previouslyActiveEl_ = t;
                        this.focus();
                    }
                };
                i.conditionalBlur_ = function e() {
                    if (this.previouslyActiveEl_) {
                        this.previouslyActiveEl_.focus();
                        this.previouslyActiveEl_ = null;
                    }
                };
                i.handleKeyDown = function e(t) {
                    t.stopPropagation();
                    if (f().isEventKey(t, "Escape") && this.closeable()) {
                        t.preventDefault();
                        this.close();
                        return;
                    }
                    if (!f().isEventKey(t, "Tab")) {
                        return;
                    }
                    var i = this.focusableEls_();
                    var r = this.el_.querySelector(":focus");
                    var n;
                    for(var a = 0; a < i.length; a++){
                        if (r === i[a]) {
                            n = a;
                            break;
                        }
                    }
                    if (s().activeElement === this.el_) {
                        n = 0;
                    }
                    if (t.shiftKey && n === 0) {
                        i[i.length - 1].focus();
                        t.preventDefault();
                    } else if (!t.shiftKey && n === i.length - 1) {
                        i[0].focus();
                        t.preventDefault();
                    }
                };
                i.focusableEls_ = function e() {
                    var t = this.el_.querySelectorAll("*");
                    return Array.prototype.filter.call(t, function(e) {
                        return (((e instanceof n().HTMLAnchorElement || e instanceof n().HTMLAreaElement) && e.hasAttribute("href")) || ((e instanceof n().HTMLInputElement || e instanceof n().HTMLSelectElement || e instanceof n().HTMLTextAreaElement || e instanceof n().HTMLButtonElement) && !e.hasAttribute("disabled")) || e instanceof n().HTMLIFrameElement || e instanceof n().HTMLObjectElement || e instanceof n().HTMLEmbedElement || (e.hasAttribute("tabindex") && e.getAttribute("tabindex") !== -1) || e.hasAttribute("contenteditable"));
                    });
                };
                return t;
            })(tj);
            t7.prototype.options_ = {
                pauseOnOpen: true,
                temporary: true
            };
            tj.registerComponent("ModalDialog", t7);
            var tX = (function(e) {
                (0, l.Z)(t, e);
                function t(t) {
                    var i;
                    if (t === void 0) {
                        t = [];
                    }
                    i = e.call(this) || this;
                    i.tracks_ = [];
                    Object.defineProperty((0, u.Z)(i), "length", {
                        get: function e() {
                            return this.tracks_.length;
                        }
                    });
                    for(var r = 0; r < t.length; r++){
                        i.addTrack(t[r]);
                    }
                    return i;
                }
                var i = t.prototype;
                i.addTrack = function e(t) {
                    var i = this;
                    var r = this.tracks_.length;
                    if (!("" + r in this)) {
                        Object.defineProperty(this, r, {
                            get: function e() {
                                return this.tracks_[r];
                            }
                        });
                    }
                    if (this.tracks_.indexOf(t) === -1) {
                        this.tracks_.push(t);
                        this.trigger({
                            track: t,
                            type: "addtrack",
                            target: this
                        });
                    }
                    t.labelchange_ = function() {
                        i.trigger({
                            track: t,
                            type: "labelchange",
                            target: i
                        });
                    };
                    if (tS(t)) {
                        t.addEventListener("labelchange", t.labelchange_);
                    }
                };
                i.removeTrack = function e(t) {
                    var i;
                    for(var r = 0, n = this.length; r < n; r++){
                        if (this[r] === t) {
                            i = this[r];
                            if (i.off) {
                                i.off();
                            }
                            this.tracks_.splice(r, 1);
                            break;
                        }
                    }
                    if (!i) {
                        return;
                    }
                    this.trigger({
                        track: i,
                        type: "removetrack",
                        target: this
                    });
                };
                i.getTrackById = function e(t) {
                    var i = null;
                    for(var r = 0, n = this.length; r < n; r++){
                        var a = this[r];
                        if (a.id === t) {
                            i = a;
                            break;
                        }
                    }
                    return i;
                };
                return t;
            })(tT);
            tX.prototype.allowedEvents_ = {
                change: "change",
                addtrack: "addtrack",
                removetrack: "removetrack",
                labelchange: "labelchange"
            };
            for(var tY in tX.prototype.allowedEvents_){
                tX.prototype["on" + tY] = null;
            }
            var t9 = function e(t, i) {
                for(var r = 0; r < t.length; r++){
                    if (!Object.keys(t[r]).length || i.id === t[r].id) {
                        continue;
                    }
                    t[r].enabled = false;
                }
            };
            var tJ = (function(e) {
                (0, l.Z)(t, e);
                function t(t) {
                    var i;
                    if (t === void 0) {
                        t = [];
                    }
                    for(var r = t.length - 1; r >= 0; r--){
                        if (t[r].enabled) {
                            t9(t, t[r]);
                            break;
                        }
                    }
                    i = e.call(this, t) || this;
                    i.changing_ = false;
                    return i;
                }
                var i = t.prototype;
                i.addTrack = function t(i) {
                    var r = this;
                    if (i.enabled) {
                        t9(this, i);
                    }
                    e.prototype.addTrack.call(this, i);
                    if (!i.addEventListener) {
                        return;
                    }
                    i.enabledChange_ = function() {
                        if (r.changing_) {
                            return;
                        }
                        r.changing_ = true;
                        t9(r, i);
                        r.changing_ = false;
                        r.trigger("change");
                    };
                    i.addEventListener("enabledchange", i.enabledChange_);
                };
                i.removeTrack = function t(i) {
                    e.prototype.removeTrack.call(this, i);
                    if (i.removeEventListener && i.enabledChange_) {
                        i.removeEventListener("enabledchange", i.enabledChange_);
                        i.enabledChange_ = null;
                    }
                };
                return t;
            })(tX);
            var ie = function e(t, i) {
                for(var r = 0; r < t.length; r++){
                    if (!Object.keys(t[r]).length || i.id === t[r].id) {
                        continue;
                    }
                    t[r].selected = false;
                }
            };
            var it = (function(e) {
                (0, l.Z)(t, e);
                function t(t) {
                    var i;
                    if (t === void 0) {
                        t = [];
                    }
                    for(var r = t.length - 1; r >= 0; r--){
                        if (t[r].selected) {
                            ie(t, t[r]);
                            break;
                        }
                    }
                    i = e.call(this, t) || this;
                    i.changing_ = false;
                    Object.defineProperty((0, u.Z)(i), "selectedIndex", {
                        get: function e() {
                            for(var t = 0; t < this.length; t++){
                                if (this[t].selected) {
                                    return t;
                                }
                            }
                            return -1;
                        },
                        set: function e() {}
                    });
                    return i;
                }
                var i = t.prototype;
                i.addTrack = function t(i) {
                    var r = this;
                    if (i.selected) {
                        ie(this, i);
                    }
                    e.prototype.addTrack.call(this, i);
                    if (!i.addEventListener) {
                        return;
                    }
                    i.selectedChange_ = function() {
                        if (r.changing_) {
                            return;
                        }
                        r.changing_ = true;
                        ie(r, i);
                        r.changing_ = false;
                        r.trigger("change");
                    };
                    i.addEventListener("selectedchange", i.selectedChange_);
                };
                i.removeTrack = function t(i) {
                    e.prototype.removeTrack.call(this, i);
                    if (i.removeEventListener && i.selectedChange_) {
                        i.removeEventListener("selectedchange", i.selectedChange_);
                        i.selectedChange_ = null;
                    }
                };
                return t;
            })(tX);
            var ii = (function(e) {
                (0, l.Z)(t, e);
                function t() {
                    return e.apply(this, arguments) || this;
                }
                var i = t.prototype;
                i.addTrack = function t(i) {
                    var r = this;
                    e.prototype.addTrack.call(this, i);
                    if (!this.queueChange_) {
                        this.queueChange_ = function() {
                            return r.queueTrigger("change");
                        };
                    }
                    if (!this.triggerSelectedlanguagechange) {
                        this.triggerSelectedlanguagechange_ = function() {
                            return r.trigger("selectedlanguagechange");
                        };
                    }
                    i.addEventListener("modechange", this.queueChange_);
                    var n = [
                        "metadata",
                        "chapters"
                    ];
                    if (n.indexOf(i.kind) === -1) {
                        i.addEventListener("modechange", this.triggerSelectedlanguagechange_);
                    }
                };
                i.removeTrack = function t(i) {
                    e.prototype.removeTrack.call(this, i);
                    if (i.removeEventListener) {
                        if (this.queueChange_) {
                            i.removeEventListener("modechange", this.queueChange_);
                        }
                        if (this.selectedlanguagechange_) {
                            i.removeEventListener("modechange", this.triggerSelectedlanguagechange_);
                        }
                    }
                };
                return t;
            })(tX);
            var ir = (function() {
                function e(e) {
                    if (e === void 0) {
                        e = [];
                    }
                    this.trackElements_ = [];
                    Object.defineProperty(this, "length", {
                        get: function e() {
                            return this.trackElements_.length;
                        }
                    });
                    for(var t = 0, i = e.length; t < i; t++){
                        this.addTrackElement_(e[t]);
                    }
                }
                var t = e.prototype;
                t.addTrackElement_ = function e(t) {
                    var i = this.trackElements_.length;
                    if (!("" + i in this)) {
                        Object.defineProperty(this, i, {
                            get: function e() {
                                return this.trackElements_[i];
                            }
                        });
                    }
                    if (this.trackElements_.indexOf(t) === -1) {
                        this.trackElements_.push(t);
                    }
                };
                t.getTrackElementByTrack_ = function e(t) {
                    var i;
                    for(var r = 0, n = this.trackElements_.length; r < n; r++){
                        if (t === this.trackElements_[r].track) {
                            i = this.trackElements_[r];
                            break;
                        }
                    }
                    return i;
                };
                t.removeTrackElement_ = function e(t) {
                    for(var i = 0, r = this.trackElements_.length; i < r; i++){
                        if (t === this.trackElements_[i]) {
                            if (this.trackElements_[i].track && typeof this.trackElements_[i].track.off === "function") {
                                this.trackElements_[i].track.off();
                            }
                            if (typeof this.trackElements_[i].off === "function") {
                                this.trackElements_[i].off();
                            }
                            this.trackElements_.splice(i, 1);
                            break;
                        }
                    }
                };
                return e;
            })();
            var ia = (function() {
                function e(t) {
                    e.prototype.setCues_.call(this, t);
                    Object.defineProperty(this, "length", {
                        get: function e() {
                            return this.length_;
                        }
                    });
                }
                var t = e.prototype;
                t.setCues_ = function e(t) {
                    var i = this.length || 0;
                    var r = 0;
                    var n = t.length;
                    this.cues_ = t;
                    this.length_ = t.length;
                    var a = function e(t) {
                        if (!("" + t in this)) {
                            Object.defineProperty(this, "" + t, {
                                get: function e() {
                                    return this.cues_[t];
                                }
                            });
                        }
                    };
                    if (i < n) {
                        r = i;
                        for(; r < n; r++){
                            a.call(this, r);
                        }
                    }
                };
                t.getCueById = function e(t) {
                    var i = null;
                    for(var r = 0, n = this.length; r < n; r++){
                        var a = this[r];
                        if (a.id === t) {
                            i = a;
                            break;
                        }
                    }
                    return i;
                };
                return e;
            })();
            var is = {
                alternative: "alternative",
                captions: "captions",
                main: "main",
                sign: "sign",
                subtitles: "subtitles",
                commentary: "commentary"
            };
            var io = {
                alternative: "alternative",
                descriptions: "descriptions",
                main: "main",
                "main-desc": "main-desc",
                translation: "translation",
                commentary: "commentary"
            };
            var iu = {
                subtitles: "subtitles",
                captions: "captions",
                descriptions: "descriptions",
                chapters: "chapters",
                metadata: "metadata"
            };
            var il = {
                disabled: "disabled",
                hidden: "hidden",
                showing: "showing"
            };
            var id = (function(e) {
                (0, l.Z)(t, e);
                function t(t) {
                    var i;
                    if (t === void 0) {
                        t = {};
                    }
                    i = e.call(this) || this;
                    var r = {
                        id: t.id || "vjs_track_" + ti(),
                        kind: t.kind || "",
                        language: t.language || ""
                    };
                    var n = t.label || "";
                    var a = function e(t) {
                        Object.defineProperty((0, u.Z)(i), t, {
                            get: function e() {
                                return r[t];
                            },
                            set: function e() {}
                        });
                    };
                    for(var s in r){
                        a(s);
                    }
                    Object.defineProperty((0, u.Z)(i), "label", {
                        get: function e() {
                            return n;
                        },
                        set: function e(t) {
                            if (t !== n) {
                                n = t;
                                this.trigger("labelchange");
                            }
                        }
                    });
                    return i;
                }
                return t;
            })(tT);
            var ic = function e(t) {
                var i = [
                    "protocol",
                    "hostname",
                    "port",
                    "pathname",
                    "search",
                    "hash",
                    "host", 
                ];
                var r = s().createElement("a");
                r.href = t;
                var a = {};
                for(var o = 0; o < i.length; o++){
                    a[i[o]] = r[i[o]];
                }
                if (a.protocol === "http:") {
                    a.host = a.host.replace(/:80$/, "");
                }
                if (a.protocol === "https:") {
                    a.host = a.host.replace(/:443$/, "");
                }
                if (!a.protocol) {
                    a.protocol = n().location.protocol;
                }
                if (!a.host) {
                    a.host = n().location.host;
                }
                return a;
            };
            var ih = function e(t) {
                if (!t.match(/^https?:\/\//)) {
                    var i = s().createElement("a");
                    i.href = t;
                    t = i.href;
                }
                return t;
            };
            var ip = function e(t) {
                if (typeof t === "string") {
                    var i = /^(\/?)([\s\S]*?)((?:\.{1,2}|[^\/]+?)(\.([^\.\/\?]+)))(?:[\/]*|[\?].*)$/;
                    var r = i.exec(t);
                    if (r) {
                        return r.pop().toLowerCase();
                    }
                }
                return "";
            };
            var im = function e(t, i) {
                if (i === void 0) {
                    i = n().location;
                }
                var r = ic(t);
                var a = r.protocol === ":" ? i.protocol : r.protocol;
                var s = a + r.host !== i.protocol + i.host;
                return s;
            };
            var iv = Object.freeze({
                __proto__: null,
                parseUrl: ic,
                getAbsoluteURL: ih,
                getFileExtension: ip,
                isCrossOrigin: im
            });
            var ig = function e(t, i) {
                var r = new (n().WebVTT.Parser)(n(), n().vttjs, n().WebVTT.StringDecoder());
                var a = [];
                r.oncue = function(e) {
                    i.addCue(e);
                };
                r.onparsingerror = function(e) {
                    a.push(e);
                };
                r.onflush = function() {
                    i.trigger({
                        type: "loadeddata",
                        target: i
                    });
                };
                r.parse(t);
                if (a.length > 0) {
                    if (n().console && n().console.groupCollapsed) {
                        n().console.groupCollapsed("Text Track parsing errors for " + i.src);
                    }
                    a.forEach(function(e) {
                        return G.error(e);
                    });
                    if (n().console && n().console.groupEnd) {
                        n().console.groupEnd();
                    }
                }
                r.flush();
            };
            var i$ = function e(t, i) {
                var r = {
                    uri: t
                };
                var a = im(t);
                if (a) {
                    r.cors = a;
                }
                var s = i.tech_.crossOrigin() === "use-credentials";
                if (s) {
                    r.withCredentials = s;
                }
                m()(r, t$(this, function(e, t, r) {
                    if (e) {
                        return G.error(e, t);
                    }
                    i.loaded_ = true;
                    if (typeof n().WebVTT !== "function") {
                        if (i.tech_) {
                            i.tech_.any([
                                "vttjsloaded",
                                "vttjserror"
                            ], function(e) {
                                if (e.type === "vttjserror") {
                                    G.error("vttjs failed to load, stopping trying to process " + i.src);
                                    return;
                                }
                                return ig(r, i);
                            });
                        }
                    } else {
                        ig(r, i);
                    }
                }));
            };
            var i8 = (function(e) {
                (0, l.Z)(t, e);
                function t(t) {
                    var i;
                    if (t === void 0) {
                        t = {};
                    }
                    if (!t.tech) {
                        throw new Error("A tech was not provided.");
                    }
                    var r = tU(t, {
                        kind: iu[t.kind] || "subtitles",
                        language: t.language || t.srclang || ""
                    });
                    var n = il[r.mode] || "disabled";
                    var a = r["default"];
                    if (r.kind === "metadata" || r.kind === "chapters") {
                        n = "hidden";
                    }
                    i = e.call(this, r) || this;
                    i.tech_ = r.tech;
                    i.cues_ = [];
                    i.activeCues_ = [];
                    i.preload_ = i.tech_.preloadTextTracks !== false;
                    var s = new ia(i.cues_);
                    var o = new ia(i.activeCues_);
                    var l = false;
                    var d = t$((0, u.Z)(i), function() {
                        if (!this.tech_.isReady_ || this.tech_.isDisposed()) {
                            return;
                        }
                        this.activeCues = this.activeCues;
                        if (l) {
                            this.trigger("cuechange");
                            l = false;
                        }
                    });
                    var c = function e() {
                        i.tech_.off("timeupdate", d);
                    };
                    i.tech_.one("dispose", c);
                    if (n !== "disabled") {
                        i.tech_.on("timeupdate", d);
                    }
                    Object.defineProperties((0, u.Z)(i), {
                        default: {
                            get: function e() {
                                return a;
                            },
                            set: function e() {}
                        },
                        mode: {
                            get: function e() {
                                return n;
                            },
                            set: function e(t) {
                                if (!il[t]) {
                                    return;
                                }
                                if (n === t) {
                                    return;
                                }
                                n = t;
                                if (!this.preload_ && n !== "disabled" && this.cues.length === 0) {
                                    i$(this.src, this);
                                }
                                this.tech_.off("timeupdate", d);
                                if (n !== "disabled") {
                                    this.tech_.on("timeupdate", d);
                                }
                                this.trigger("modechange");
                            }
                        },
                        cues: {
                            get: function e() {
                                if (!this.loaded_) {
                                    return null;
                                }
                                return s;
                            },
                            set: function e() {}
                        },
                        activeCues: {
                            get: function e() {
                                if (!this.loaded_) {
                                    return null;
                                }
                                if (this.cues.length === 0) {
                                    return o;
                                }
                                var t = this.tech_.currentTime();
                                var i = [];
                                for(var r = 0, n = this.cues.length; r < n; r++){
                                    var a = this.cues[r];
                                    if (a.startTime <= t && a.endTime >= t) {
                                        i.push(a);
                                    } else if (a.startTime === a.endTime && a.startTime <= t && a.startTime + 0.5 >= t) {
                                        i.push(a);
                                    }
                                }
                                l = false;
                                if (i.length !== this.activeCues_.length) {
                                    l = true;
                                } else {
                                    for(var s = 0; s < i.length; s++){
                                        if (this.activeCues_.indexOf(i[s]) === -1) {
                                            l = true;
                                        }
                                    }
                                }
                                this.activeCues_ = i;
                                o.setCues_(this.activeCues_);
                                return o;
                            },
                            set: function e() {}
                        }
                    });
                    if (r.src) {
                        i.src = r.src;
                        if (!i.preload_) {
                            i.loaded_ = true;
                        }
                        if (i.preload_ || (r.kind !== "subtitles" && r.kind !== "captions")) {
                            i$(i.src, (0, u.Z)(i));
                        }
                    } else {
                        i.loaded_ = true;
                    }
                    return i;
                }
                var i = t.prototype;
                i.addCue = function e(t) {
                    var i = t;
                    if (n().vttjs && !(t instanceof n().vttjs.VTTCue)) {
                        i = new (n().vttjs.VTTCue)(t.startTime, t.endTime, t.text);
                        for(var r in t){
                            if (!(r in i)) {
                                i[r] = t[r];
                            }
                        }
                        i.id = t.id;
                        i.originalCue_ = t;
                    }
                    var a = this.tech_.textTracks();
                    for(var s = 0; s < a.length; s++){
                        if (a[s] !== this) {
                            a[s].removeCue(i);
                        }
                    }
                    this.cues_.push(i);
                    this.cues.setCues_(this.cues_);
                };
                i.removeCue = function e(t) {
                    var i = this.cues_.length;
                    while(i--){
                        var r = this.cues_[i];
                        if (r === t || (r.originalCue_ && r.originalCue_ === t)) {
                            this.cues_.splice(i, 1);
                            this.cues.setCues_(this.cues_);
                            break;
                        }
                    }
                };
                return t;
            })(id);
            i8.prototype.allowedEvents_ = {
                cuechange: "cuechange"
            };
            var iy = (function(e) {
                (0, l.Z)(t, e);
                function t(t) {
                    var i;
                    if (t === void 0) {
                        t = {};
                    }
                    var r = tU(t, {
                        kind: io[t.kind] || ""
                    });
                    i = e.call(this, r) || this;
                    var n = false;
                    Object.defineProperty((0, u.Z)(i), "enabled", {
                        get: function e() {
                            return n;
                        },
                        set: function e(t) {
                            if (typeof t !== "boolean" || t === n) {
                                return;
                            }
                            n = t;
                            this.trigger("enabledchange");
                        }
                    });
                    if (r.enabled) {
                        i.enabled = r.enabled;
                    }
                    i.loaded_ = true;
                    return i;
                }
                return t;
            })(id);
            var iT = (function(e) {
                (0, l.Z)(t, e);
                function t(t) {
                    var i;
                    if (t === void 0) {
                        t = {};
                    }
                    var r = tU(t, {
                        kind: is[t.kind] || ""
                    });
                    i = e.call(this, r) || this;
                    var n = false;
                    Object.defineProperty((0, u.Z)(i), "selected", {
                        get: function e() {
                            return n;
                        },
                        set: function e(t) {
                            if (typeof t !== "boolean" || t === n) {
                                return;
                            }
                            n = t;
                            this.trigger("selectedchange");
                        }
                    });
                    if (r.selected) {
                        i.selected = r.selected;
                    }
                    return i;
                }
                return t;
            })(id);
            var ib = 0;
            var ix = 1;
            var iS = 2;
            var ik = 3;
            var iC = (function(e) {
                (0, l.Z)(t, e);
                function t(t) {
                    var i;
                    if (t === void 0) {
                        t = {};
                    }
                    i = e.call(this) || this;
                    var r;
                    var n = new i8(t);
                    i.kind = n.kind;
                    i.src = n.src;
                    i.srclang = n.language;
                    i.label = n.label;
                    i["default"] = n["default"];
                    Object.defineProperties((0, u.Z)(i), {
                        readyState: {
                            get: function e() {
                                return r;
                            }
                        },
                        track: {
                            get: function e() {
                                return n;
                            }
                        }
                    });
                    r = ib;
                    n.addEventListener("loadeddata", function() {
                        r = iS;
                        i.trigger({
                            type: "load",
                            target: (0, u.Z)(i)
                        });
                    });
                    return i;
                }
                return t;
            })(tT);
            iC.prototype.allowedEvents_ = {
                load: "load"
            };
            iC.NONE = ib;
            iC.LOADING = ix;
            iC.LOADED = iS;
            iC.ERROR = ik;
            var iE = {
                audio: {
                    ListClass: tJ,
                    TrackClass: iy,
                    capitalName: "Audio"
                },
                video: {
                    ListClass: it,
                    TrackClass: iT,
                    capitalName: "Video"
                },
                text: {
                    ListClass: ii,
                    TrackClass: i8,
                    capitalName: "Text"
                }
            };
            Object.keys(iE).forEach(function(e) {
                iE[e].getterName = e + "Tracks";
                iE[e].privateName = e + "Tracks_";
            });
            var iw = {
                remoteText: {
                    ListClass: ii,
                    TrackClass: i8,
                    capitalName: "RemoteText",
                    getterName: "remoteTextTracks",
                    privateName: "remoteTextTracks_"
                },
                remoteTextEl: {
                    ListClass: ir,
                    TrackClass: iC,
                    capitalName: "RemoteTextTrackEls",
                    getterName: "remoteTextTrackEls",
                    privateName: "remoteTextTrackEls_"
                }
            };
            var iI = (0, o.Z)({}, iE, iw);
            iw.names = Object.keys(iw);
            iE.names = Object.keys(iE);
            iI.names = [].concat(iw.names).concat(iE.names);
            function iP(e, t, i, r, n) {
                if (n === void 0) {
                    n = {};
                }
                var a = e.textTracks();
                n.kind = t;
                if (i) {
                    n.label = i;
                }
                if (r) {
                    n.language = r;
                }
                n.tech = e;
                var s = new iI.text.TrackClass(n);
                a.addTrack(s);
                return s;
            }
            var i_ = (function(e) {
                (0, l.Z)(t, e);
                function t(t, i) {
                    var r;
                    if (t === void 0) {
                        t = {};
                    }
                    if (i === void 0) {
                        i = function e() {};
                    }
                    t.reportTouchActivity = false;
                    r = e.call(this, null, t, i) || this;
                    r.onDurationChange_ = function(e) {
                        return r.onDurationChange(e);
                    };
                    r.trackProgress_ = function(e) {
                        return r.trackProgress(e);
                    };
                    r.trackCurrentTime_ = function(e) {
                        return r.trackCurrentTime(e);
                    };
                    r.stopTrackingCurrentTime_ = function(e) {
                        return r.stopTrackingCurrentTime(e);
                    };
                    r.disposeSourceHandler_ = function(e) {
                        return r.disposeSourceHandler(e);
                    };
                    r.hasStarted_ = false;
                    r.on("playing", function() {
                        this.hasStarted_ = true;
                    });
                    r.on("loadstart", function() {
                        this.hasStarted_ = false;
                    });
                    iI.names.forEach(function(e) {
                        var i = iI[e];
                        if (t && t[i.getterName]) {
                            r[i.privateName] = t[i.getterName];
                        }
                    });
                    if (!r.featuresProgressEvents) {
                        r.manualProgressOn();
                    }
                    if (!r.featuresTimeupdateEvents) {
                        r.manualTimeUpdatesOn();
                    }
                    [
                        "Text",
                        "Audio",
                        "Video"
                    ].forEach(function(e) {
                        if (t["native" + e + "Tracks"] === false) {
                            r["featuresNative" + e + "Tracks"] = false;
                        }
                    });
                    if (t.nativeCaptions === false || t.nativeTextTracks === false) {
                        r.featuresNativeTextTracks = false;
                    } else if (t.nativeCaptions === true || t.nativeTextTracks === true) {
                        r.featuresNativeTextTracks = true;
                    }
                    if (!r.featuresNativeTextTracks) {
                        r.emulateTextTracks();
                    }
                    r.preloadTextTracks = t.preloadTextTracks !== false;
                    r.autoRemoteTextTracks_ = new iI.text.ListClass();
                    r.initTrackListeners();
                    if (!t.nativeControlsForTouch) {
                        r.emitTapEvents();
                    }
                    if (r.constructor) {
                        r.name_ = r.constructor.name || "Unknown Tech";
                    }
                    return r;
                }
                var i = t.prototype;
                i.triggerSourceset = function e(t) {
                    var i = this;
                    if (!this.isReady_) {
                        this.one("ready", function() {
                            return i.setTimeout(function() {
                                return i.triggerSourceset(t);
                            }, 1);
                        });
                    }
                    this.trigger({
                        src: t,
                        type: "sourceset"
                    });
                };
                i.manualProgressOn = function e() {
                    this.on("durationchange", this.onDurationChange_);
                    this.manualProgress = true;
                    this.one("ready", this.trackProgress_);
                };
                i.manualProgressOff = function e() {
                    this.manualProgress = false;
                    this.stopTrackingProgress();
                    this.off("durationchange", this.onDurationChange_);
                };
                i.trackProgress = function e(t) {
                    this.stopTrackingProgress();
                    this.progressInterval = this.setInterval(t$(this, function() {
                        var e = this.bufferedPercent();
                        if (this.bufferedPercent_ !== e) {
                            this.trigger("progress");
                        }
                        this.bufferedPercent_ = e;
                        if (e === 1) {
                            this.stopTrackingProgress();
                        }
                    }), 500);
                };
                i.onDurationChange = function e(t) {
                    this.duration_ = this.duration();
                };
                i.buffered = function e() {
                    return tq(0, 0);
                };
                i.bufferedPercent = function e() {
                    return tV(this.buffered(), this.duration_);
                };
                i.stopTrackingProgress = function e() {
                    this.clearInterval(this.progressInterval);
                };
                i.manualTimeUpdatesOn = function e() {
                    this.manualTimeUpdates = true;
                    this.on("play", this.trackCurrentTime_);
                    this.on("pause", this.stopTrackingCurrentTime_);
                };
                i.manualTimeUpdatesOff = function e() {
                    this.manualTimeUpdates = false;
                    this.stopTrackingCurrentTime();
                    this.off("play", this.trackCurrentTime_);
                    this.off("pause", this.stopTrackingCurrentTime_);
                };
                i.trackCurrentTime = function e() {
                    if (this.currentTimeInterval) {
                        this.stopTrackingCurrentTime();
                    }
                    this.currentTimeInterval = this.setInterval(function() {
                        this.trigger({
                            type: "timeupdate",
                            target: this,
                            manuallyTriggered: true
                        });
                    }, 250);
                };
                i.stopTrackingCurrentTime = function e() {
                    this.clearInterval(this.currentTimeInterval);
                    this.trigger({
                        type: "timeupdate",
                        target: this,
                        manuallyTriggered: true
                    });
                };
                i.dispose = function t() {
                    this.clearTracks(iE.names);
                    if (this.manualProgress) {
                        this.manualProgressOff();
                    }
                    if (this.manualTimeUpdates) {
                        this.manualTimeUpdatesOff();
                    }
                    e.prototype.dispose.call(this);
                };
                i.clearTracks = function e(t) {
                    var i = this;
                    t = [].concat(t);
                    t.forEach(function(e) {
                        var t = i[e + "Tracks"]() || [];
                        var r = t.length;
                        while(r--){
                            var n = t[r];
                            if (e === "text") {
                                i.removeRemoteTextTrack(n);
                            }
                            t.removeTrack(n);
                        }
                    });
                };
                i.cleanupAutoTextTracks = function e() {
                    var t = this.autoRemoteTextTracks_ || [];
                    var i = t.length;
                    while(i--){
                        var r = t[i];
                        this.removeRemoteTextTrack(r);
                    }
                };
                i.reset = function e() {};
                i.crossOrigin = function e() {};
                i.setCrossOrigin = function e() {};
                i.error = function e(t) {
                    if (t !== undefined) {
                        this.error_ = new tW(t);
                        this.trigger("error");
                    }
                    return this.error_;
                };
                i.played = function e() {
                    if (this.hasStarted_) {
                        return tq(0, 0);
                    }
                    return tq();
                };
                i.play = function e() {};
                i.setScrubbing = function e() {};
                i.scrubbing = function e() {};
                i.setCurrentTime = function e() {
                    if (this.manualTimeUpdates) {
                        this.trigger({
                            type: "timeupdate",
                            target: this,
                            manuallyTriggered: true
                        });
                    }
                };
                i.initTrackListeners = function e() {
                    var t = this;
                    iE.names.forEach(function(e) {
                        var i = iE[e];
                        var r = function i() {
                            t.trigger(e + "trackchange");
                        };
                        var n = t[i.getterName]();
                        n.addEventListener("removetrack", r);
                        n.addEventListener("addtrack", r);
                        t.on("dispose", function() {
                            n.removeEventListener("removetrack", r);
                            n.removeEventListener("addtrack", r);
                        });
                    });
                };
                i.addWebVttScript_ = function e() {
                    var t = this;
                    if (n().WebVTT) {
                        return;
                    }
                    if (s().body.contains(this.el())) {
                        if (!this.options_["vtt.js"] && et(g()) && Object.keys(g()).length > 0) {
                            this.trigger("vttjsloaded");
                            return;
                        }
                        var i = s().createElement("script");
                        i.src = this.options_["vtt.js"] || "https://vjs.zencdn.net/vttjs/0.14.1/vtt.min.js";
                        i.onload = function() {
                            t.trigger("vttjsloaded");
                        };
                        i.onerror = function() {
                            t.trigger("vttjserror");
                        };
                        this.on("dispose", function() {
                            i.onload = null;
                            i.onerror = null;
                        });
                        n().WebVTT = true;
                        this.el().parentNode.appendChild(i);
                    } else {
                        this.ready(this.addWebVttScript_);
                    }
                };
                i.emulateTextTracks = function e() {
                    var t = this;
                    var i = this.textTracks();
                    var r = this.remoteTextTracks();
                    var n = function e(t) {
                        return i.addTrack(t.track);
                    };
                    var a = function e(t) {
                        return i.removeTrack(t.track);
                    };
                    r.on("addtrack", n);
                    r.on("removetrack", a);
                    this.addWebVttScript_();
                    var s = function e() {
                        return t.trigger("texttrackchange");
                    };
                    var o = function e() {
                        s();
                        for(var t = 0; t < i.length; t++){
                            var r = i[t];
                            r.removeEventListener("cuechange", s);
                            if (r.mode === "showing") {
                                r.addEventListener("cuechange", s);
                            }
                        }
                    };
                    o();
                    i.addEventListener("change", o);
                    i.addEventListener("addtrack", o);
                    i.addEventListener("removetrack", o);
                    this.on("dispose", function() {
                        r.off("addtrack", n);
                        r.off("removetrack", a);
                        i.removeEventListener("change", o);
                        i.removeEventListener("addtrack", o);
                        i.removeEventListener("removetrack", o);
                        for(var e = 0; e < i.length; e++){
                            var t = i[e];
                            t.removeEventListener("cuechange", s);
                        }
                    });
                };
                i.addTextTrack = function e(t, i, r) {
                    if (!t) {
                        throw new Error("TextTrack kind is required but was not provided");
                    }
                    return iP(this, t, i, r);
                };
                i.createRemoteTextTrack = function e(t) {
                    var i = tU(t, {
                        tech: this
                    });
                    return new iw.remoteTextEl.TrackClass(i);
                };
                i.addRemoteTextTrack = function e(t, i) {
                    var r = this;
                    if (t === void 0) {
                        t = {};
                    }
                    var n = this.createRemoteTextTrack(t);
                    if (i !== true && i !== false) {
                        G.warn('Calling addRemoteTextTrack without explicitly setting the "manualCleanup" parameter to `true` is deprecated and default to `false` in future version of video.js');
                        i = true;
                    }
                    this.remoteTextTrackEls().addTrackElement_(n);
                    this.remoteTextTracks().addTrack(n.track);
                    if (i !== true) {
                        this.ready(function() {
                            return r.autoRemoteTextTracks_.addTrack(n.track);
                        });
                    }
                    return n;
                };
                i.removeRemoteTextTrack = function e(t) {
                    var i = this.remoteTextTrackEls().getTrackElementByTrack_(t);
                    this.remoteTextTrackEls().removeTrackElement_(i);
                    this.remoteTextTracks().removeTrack(t);
                    this.autoRemoteTextTracks_.removeTrack(t);
                };
                i.getVideoPlaybackQuality = function e() {
                    return {};
                };
                i.requestPictureInPicture = function e() {
                    var t = this.options_.Promise || n().Promise;
                    if (t) {
                        return t.reject();
                    }
                };
                i.disablePictureInPicture = function e() {
                    return true;
                };
                i.setDisablePictureInPicture = function e() {};
                i.setPoster = function e() {};
                i.playsinline = function e() {};
                i.setPlaysinline = function e() {};
                i.overrideNativeAudioTracks = function e() {};
                i.overrideNativeVideoTracks = function e() {};
                i.canPlayType = function e() {
                    return "";
                };
                t.canPlayType = function e() {
                    return "";
                };
                t.canPlaySource = function e(i, r) {
                    return t.canPlayType(i.type);
                };
                t.isTech = function e(i) {
                    return (i.prototype instanceof t || i instanceof t || i === t);
                };
                t.registerTech = function e(i, r) {
                    if (!t.techs_) {
                        t.techs_ = {};
                    }
                    if (!t.isTech(r)) {
                        throw new Error("Tech " + i + " must be a Tech");
                    }
                    if (!t.canPlayType) {
                        throw new Error("Techs must have a static canPlayType method on them");
                    }
                    if (!t.canPlaySource) {
                        throw new Error("Techs must have a static canPlaySource method on them");
                    }
                    i = tM(i);
                    t.techs_[i] = r;
                    t.techs_[tR(i)] = r;
                    if (i !== "Tech") {
                        t.defaultTechOrder_.push(i);
                    }
                    return r;
                };
                t.getTech = function e(i) {
                    if (!i) {
                        return;
                    }
                    if (t.techs_ && t.techs_[i]) {
                        return t.techs_[i];
                    }
                    i = tM(i);
                    if (n() && n().videojs && n().videojs[i]) {
                        G.warn("The " + i + " tech was added to the videojs object when it should be registered using videojs.registerTech(name, tech)");
                        return n().videojs[i];
                    }
                };
                return t;
            })(tj);
            iI.names.forEach(function(e) {
                var t = iI[e];
                i_.prototype[t.getterName] = function() {
                    this[t.privateName] = this[t.privateName] || new t.ListClass();
                    return this[t.privateName];
                };
            });
            i_.prototype.featuresVolumeControl = true;
            i_.prototype.featuresMuteControl = true;
            i_.prototype.featuresFullscreenResize = false;
            i_.prototype.featuresPlaybackRate = false;
            i_.prototype.featuresProgressEvents = false;
            i_.prototype.featuresSourceset = false;
            i_.prototype.featuresTimeupdateEvents = false;
            i_.prototype.featuresNativeTextTracks = false;
            i_.withSourceHandlers = function(e) {
                e.registerSourceHandler = function(t, i) {
                    var r = e.sourceHandlers;
                    if (!r) {
                        r = e.sourceHandlers = [];
                    }
                    if (i === undefined) {
                        i = r.length;
                    }
                    r.splice(i, 0, t);
                };
                e.canPlayType = function(t) {
                    var i = e.sourceHandlers || [];
                    var r;
                    for(var n = 0; n < i.length; n++){
                        r = i[n].canPlayType(t);
                        if (r) {
                            return r;
                        }
                    }
                    return "";
                };
                e.selectSourceHandler = function(t, i) {
                    var r = e.sourceHandlers || [];
                    var n;
                    for(var a = 0; a < r.length; a++){
                        n = r[a].canHandleSource(t, i);
                        if (n) {
                            return r[a];
                        }
                    }
                    return null;
                };
                e.canPlaySource = function(t, i) {
                    var r = e.selectSourceHandler(t, i);
                    if (r) {
                        return r.canHandleSource(t, i);
                    }
                    return "";
                };
                var t = [
                    "seekable",
                    "seeking",
                    "duration"
                ];
                t.forEach(function(e) {
                    var t = this[e];
                    if (typeof t !== "function") {
                        return;
                    }
                    this[e] = function() {
                        if (this.sourceHandler_ && this.sourceHandler_[e]) {
                            return this.sourceHandler_[e].apply(this.sourceHandler_, arguments);
                        }
                        return t.apply(this, arguments);
                    };
                }, e.prototype);
                e.prototype.setSource = function(t) {
                    var i = e.selectSourceHandler(t, this.options_);
                    if (!i) {
                        if (e.nativeSourceHandler) {
                            i = e.nativeSourceHandler;
                        } else {
                            G.error("No source handler found for the current source.");
                        }
                    }
                    this.disposeSourceHandler();
                    this.off("dispose", this.disposeSourceHandler_);
                    if (i !== e.nativeSourceHandler) {
                        this.currentSource_ = t;
                    }
                    this.sourceHandler_ = i.handleSource(t, this, this.options_);
                    this.one("dispose", this.disposeSourceHandler_);
                };
                e.prototype.disposeSourceHandler = function() {
                    if (this.currentSource_) {
                        this.clearTracks([
                            "audio",
                            "video"
                        ]);
                        this.currentSource_ = null;
                    }
                    this.cleanupAutoTextTracks();
                    if (this.sourceHandler_) {
                        if (this.sourceHandler_.dispose) {
                            this.sourceHandler_.dispose();
                        }
                        this.sourceHandler_ = null;
                    }
                };
            };
            tj.registerComponent("Tech", i_);
            i_.registerTech("Tech", i_);
            i_.defaultTechOrder_ = [];
            var iL = {};
            var iA = {};
            var iD = {};
            function iO(e, t) {
                iL[e] = iL[e] || [];
                iL[e].push(t);
            }
            function iR(e, t, i) {
                e.setTimeout(function() {
                    return iq(t, iL[t.type], i, e);
                }, 1);
            }
            function iM(e, t) {
                e.forEach(function(e) {
                    return e.setTech && e.setTech(t);
                });
            }
            function i0(e, t, i) {
                return e.reduceRight(ij(i), t[i]());
            }
            function iU(e, t, i, r) {
                return t[i](e.reduce(ij(i), r));
            }
            function iB(e, t, i, r) {
                if (r === void 0) {
                    r = null;
                }
                var n = "call" + tM(i);
                var a = e.reduce(ij(n), r);
                var s = a === iD;
                var o = s ? null : t[i](a);
                i2(e, i, o, s);
                return o;
            }
            var iF = {
                buffered: 1,
                currentTime: 1,
                duration: 1,
                muted: 1,
                played: 1,
                paused: 1,
                seekable: 1,
                volume: 1,
                ended: 1
            };
            var iN = {
                setCurrentTime: 1,
                setMuted: 1,
                setVolume: 1
            };
            var i1 = {
                play: 1,
                pause: 1
            };
            function ij(e) {
                return function(t, i) {
                    if (t === iD) {
                        return iD;
                    }
                    if (i[e]) {
                        return i[e](t);
                    }
                    return t;
                };
            }
            function i2(e, t, i, r) {
                for(var n = e.length - 1; n >= 0; n--){
                    var a = e[n];
                    if (a[t]) {
                        a[t](r, i);
                    }
                }
            }
            function iH(e) {
                iA[e.id()] = null;
            }
            function i6(e, t) {
                var i = iA[e.id()];
                var r = null;
                if (i === undefined || i === null) {
                    r = t(e);
                    iA[e.id()] = [
                        [
                            t,
                            r
                        ]
                    ];
                    return r;
                }
                for(var n = 0; n < i.length; n++){
                    var a = i[n], s = a[0], o = a[1];
                    if (s !== t) {
                        continue;
                    }
                    r = o;
                }
                if (r === null) {
                    r = t(e);
                    i.push([
                        t,
                        r
                    ]);
                }
                return r;
            }
            function iq(e, t, i, r, n, a) {
                if (e === void 0) {
                    e = {};
                }
                if (t === void 0) {
                    t = [];
                }
                if (n === void 0) {
                    n = [];
                }
                if (a === void 0) {
                    a = false;
                }
                var s = t, o = s[0], u = s.slice(1);
                if (typeof o === "string") {
                    iq(e, iL[o], i, r, n, a);
                } else if (o) {
                    var l = i6(r, o);
                    if (!l.setSource) {
                        n.push(l);
                        return iq(e, u, i, r, n, a);
                    }
                    l.setSource(J({}, e), function(t, s) {
                        if (t) {
                            return iq(e, u, i, r, n, a);
                        }
                        n.push(l);
                        iq(s, e.type === s.type ? u : iL[s.type], i, r, n, a);
                    });
                } else if (u.length) {
                    iq(e, u, i, r, n, a);
                } else if (a) {
                    i(e, n);
                } else {
                    iq(e, iL["*"], i, r, n, true);
                }
            }
            var iV = {
                opus: "video/ogg",
                ogv: "video/ogg",
                mp4: "video/mp4",
                mov: "video/mp4",
                m4v: "video/mp4",
                mkv: "video/x-matroska",
                m4a: "audio/mp4",
                mp3: "audio/mpeg",
                aac: "audio/aac",
                caf: "audio/x-caf",
                flac: "audio/flac",
                oga: "audio/ogg",
                wav: "audio/wav",
                m3u8: "application/x-mpegURL",
                jpg: "image/jpeg",
                jpeg: "image/jpeg",
                gif: "image/gif",
                png: "image/png",
                svg: "image/svg+xml",
                webp: "image/webp"
            };
            var iW = function e(t) {
                if (t === void 0) {
                    t = "";
                }
                var i = ip(t);
                var r = iV[i.toLowerCase()];
                return r || "";
            };
            var i3 = function e(t, i) {
                if (!i) {
                    return "";
                }
                if (t.cache_.source.src === i && t.cache_.source.type) {
                    return t.cache_.source.type;
                }
                var r = t.cache_.sources.filter(function(e) {
                    return e.src === i;
                });
                if (r.length) {
                    return r[0].type;
                }
                var n = t.$$("source");
                for(var a = 0; a < n.length; a++){
                    var s = n[a];
                    if (s.type && s.src && s.src === i) {
                        return s.type;
                    }
                }
                return iW(i);
            };
            var i4 = function e(t) {
                if (Array.isArray(t)) {
                    var i = [];
                    t.forEach(function(t) {
                        t = e(t);
                        if (Array.isArray(t)) {
                            i = i.concat(t);
                        } else if (ee(t)) {
                            i.push(t);
                        }
                    });
                    t = i;
                } else if (typeof t === "string" && t.trim()) {
                    t = [
                        i5({
                            src: t
                        }), 
                    ];
                } else if (ee(t) && typeof t.src === "string" && t.src && t.src.trim()) {
                    t = [
                        i5(t)
                    ];
                } else {
                    t = [];
                }
                return t;
            };
            function i5(e) {
                if (!e.type) {
                    var t = iW(e.src);
                    if (t) {
                        e.type = t;
                    }
                }
                return e;
            }
            var iz = (function(e) {
                (0, l.Z)(t, e);
                function t(t, i, r) {
                    var n;
                    var a = tU({
                        createEl: false
                    }, i);
                    n = e.call(this, t, a, r) || this;
                    if (!i.playerOptions.sources || i.playerOptions.sources.length === 0) {
                        for(var s = 0, o = i.playerOptions.techOrder; s < o.length; s++){
                            var u = tM(o[s]);
                            var l = i_.getTech(u);
                            if (!u) {
                                l = tj.getComponent(u);
                            }
                            if (l && l.isSupported()) {
                                t.loadTech_(u);
                                break;
                            }
                        }
                    } else {
                        t.src(i.playerOptions.sources);
                    }
                    return n;
                }
                return t;
            })(tj);
            tj.registerComponent("MediaLoader", iz);
            var iG = (function(e) {
                (0, l.Z)(t, e);
                function t(t, i) {
                    var r;
                    r = e.call(this, t, i) || this;
                    r.handleMouseOver_ = function(e) {
                        return r.handleMouseOver(e);
                    };
                    r.handleMouseOut_ = function(e) {
                        return r.handleMouseOut(e);
                    };
                    r.handleClick_ = function(e) {
                        return r.handleClick(e);
                    };
                    r.handleKeyDown_ = function(e) {
                        return r.handleKeyDown(e);
                    };
                    r.emitTapEvents();
                    r.enable();
                    return r;
                }
                var i = t.prototype;
                i.createEl = function e(t, i, r) {
                    if (t === void 0) {
                        t = "div";
                    }
                    if (i === void 0) {
                        i = {};
                    }
                    if (r === void 0) {
                        r = {};
                    }
                    i = J({
                        className: this.buildCSSClass(),
                        tabIndex: 0
                    }, i);
                    if (t === "button") {
                        G.error("Creating a ClickableComponent with an HTML element of " + t + " is not supported; use a Button instead.");
                    }
                    r = J({
                        role: "button"
                    }, r);
                    this.tabIndex_ = i.tabIndex;
                    var n = e_(t, i, r);
                    n.appendChild(e_("span", {
                        className: "vjs-icon-placeholder"
                    }, {
                        "aria-hidden": true
                    }));
                    this.createControlTextEl(n);
                    return n;
                };
                i.dispose = function t() {
                    this.controlTextEl_ = null;
                    e.prototype.dispose.call(this);
                };
                i.createControlTextEl = function e(t) {
                    this.controlTextEl_ = e_("span", {
                        className: "vjs-control-text"
                    }, {
                        "aria-live": "polite"
                    });
                    if (t) {
                        t.appendChild(this.controlTextEl_);
                    }
                    this.controlText(this.controlText_, t);
                    return this.controlTextEl_;
                };
                i.controlText = function e(t, i) {
                    if (i === void 0) {
                        i = this.el();
                    }
                    if (t === undefined) {
                        return this.controlText_ || "Need Text";
                    }
                    var r = this.localize(t);
                    this.controlText_ = t;
                    eL(this.controlTextEl_, r);
                    if (!this.nonIconControl && !this.player_.options_.noUITitleAttributes) {
                        i.setAttribute("title", r);
                    }
                };
                i.buildCSSClass = function t() {
                    return ("vjs-control vjs-button " + e.prototype.buildCSSClass.call(this));
                };
                i.enable = function e() {
                    if (!this.enabled_) {
                        this.enabled_ = true;
                        this.removeClass("vjs-disabled");
                        this.el_.setAttribute("aria-disabled", "false");
                        if (typeof this.tabIndex_ !== "undefined") {
                            this.el_.setAttribute("tabIndex", this.tabIndex_);
                        }
                        this.on([
                            "tap",
                            "click"
                        ], this.handleClick_);
                        this.on("keydown", this.handleKeyDown_);
                    }
                };
                i.disable = function e() {
                    this.enabled_ = false;
                    this.addClass("vjs-disabled");
                    this.el_.setAttribute("aria-disabled", "true");
                    if (typeof this.tabIndex_ !== "undefined") {
                        this.el_.removeAttribute("tabIndex");
                    }
                    this.off("mouseover", this.handleMouseOver_);
                    this.off("mouseout", this.handleMouseOut_);
                    this.off([
                        "tap",
                        "click"
                    ], this.handleClick_);
                    this.off("keydown", this.handleKeyDown_);
                };
                i.handleLanguagechange = function e() {
                    this.controlText(this.controlText_);
                };
                i.handleClick = function e(t) {
                    if (this.options_.clickHandler) {
                        this.options_.clickHandler.call(this, arguments);
                    }
                };
                i.handleKeyDown = function t(i) {
                    if (f().isEventKey(i, "Space") || f().isEventKey(i, "Enter")) {
                        i.preventDefault();
                        i.stopPropagation();
                        this.trigger("click");
                    } else {
                        e.prototype.handleKeyDown.call(this, i);
                    }
                };
                return t;
            })(tj);
            tj.registerComponent("ClickableComponent", iG);
            var iK = (function(e) {
                (0, l.Z)(t, e);
                function t(t, i) {
                    var r;
                    r = e.call(this, t, i) || this;
                    r.update();
                    r.update_ = function(e) {
                        return r.update(e);
                    };
                    t.on("posterchange", r.update_);
                    return r;
                }
                var i = t.prototype;
                i.dispose = function t() {
                    this.player().off("posterchange", this.update_);
                    e.prototype.dispose.call(this);
                };
                i.createEl = function e() {
                    var t = e_("div", {
                        className: "vjs-poster",
                        tabIndex: -1
                    });
                    return t;
                };
                i.update = function e(t) {
                    var i = this.player().poster();
                    this.setSrc(i);
                    if (i) {
                        this.show();
                    } else {
                        this.hide();
                    }
                };
                i.setSrc = function e(t) {
                    var i = "";
                    if (t) {
                        i = 'url("' + t + '")';
                    }
                    this.el_.style.backgroundImage = i;
                };
                i.handleClick = function e(t) {
                    if (!this.player_.controls()) {
                        return;
                    }
                    var i = this.player_.usingPlugin("eme") && this.player_.eme.sessions && this.player_.eme.sessions.length > 0;
                    if (this.player_.tech(true) && !((em || eh) && i)) {
                        this.player_.tech(true).focus();
                    }
                    if (this.player_.paused()) {
                        t5(this.player_.play());
                    } else {
                        this.player_.pause();
                    }
                };
                return t;
            })(iG);
            tj.registerComponent("PosterImage", iK);
            var iZ = "#222";
            var iQ = "#ccc";
            var i7 = {
                monospace: "monospace",
                sansSerif: "sans-serif",
                serif: "serif",
                monospaceSansSerif: '"Andale Mono", "Lucida Console", monospace',
                monospaceSerif: '"Courier New", monospace',
                proportionalSansSerif: "sans-serif",
                proportionalSerif: "serif",
                casual: '"Comic Sans MS", Impact, fantasy',
                script: '"Monotype Corsiva", cursive',
                smallcaps: '"Andale Mono", "Lucida Console", monospace, sans-serif'
            };
            function iX(e, t) {
                var i;
                if (e.length === 4) {
                    i = e[1] + e[1] + e[2] + e[2] + e[3] + e[3];
                } else if (e.length === 7) {
                    i = e.slice(1);
                } else {
                    throw new Error("Invalid color code provided, " + e + "; must be formatted as e.g. #f0e or #f604e2.");
                }
                return ("rgba(" + parseInt(i.slice(0, 2), 16) + "," + parseInt(i.slice(2, 4), 16) + "," + parseInt(i.slice(4, 6), 16) + "," + t + ")");
            }
            function iY(e, t, i) {
                try {
                    e.style[t] = i;
                } catch (r) {
                    return;
                }
            }
            var i9 = (function(e) {
                (0, l.Z)(t, e);
                function t(t, i, r) {
                    var a;
                    a = e.call(this, t, i, r) || this;
                    var s = function e(t) {
                        return a.updateDisplay(t);
                    };
                    t.on("loadstart", function(e) {
                        return a.toggleDisplay(e);
                    });
                    t.on("texttrackchange", s);
                    t.on("loadedmetadata", function(e) {
                        return a.preselectTrack(e);
                    });
                    t.ready(t$((0, u.Z)(a), function() {
                        if (t.tech_ && t.tech_.featuresNativeTextTracks) {
                            this.hide();
                            return;
                        }
                        t.on("fullscreenchange", s);
                        t.on("playerresize", s);
                        n().addEventListener("orientationchange", s);
                        t.on("dispose", function() {
                            return n().removeEventListener("orientationchange", s);
                        });
                        var e = this.options_.playerOptions.tracks || [];
                        for(var i = 0; i < e.length; i++){
                            this.player_.addRemoteTextTrack(e[i], true);
                        }
                        this.preselectTrack();
                    }));
                    return a;
                }
                var i = t.prototype;
                i.preselectTrack = function e() {
                    var t = {
                        captions: 1,
                        subtitles: 1
                    };
                    var i = this.player_.textTracks();
                    var r = this.player_.cache_.selectedLanguage;
                    var n;
                    var a;
                    var s;
                    for(var o = 0; o < i.length; o++){
                        var u = i[o];
                        if (r && r.enabled && r.language && r.language === u.language && u.kind in t) {
                            if (u.kind === r.kind) {
                                s = u;
                            } else if (!s) {
                                s = u;
                            }
                        } else if (r && !r.enabled) {
                            s = null;
                            n = null;
                            a = null;
                        } else if (u["default"]) {
                            if (u.kind === "descriptions" && !n) {
                                n = u;
                            } else if (u.kind in t && !a) {
                                a = u;
                            }
                        }
                    }
                    if (s) {
                        s.mode = "showing";
                    } else if (a) {
                        a.mode = "showing";
                    } else if (n) {
                        n.mode = "showing";
                    }
                };
                i.toggleDisplay = function e() {
                    if (this.player_.tech_ && this.player_.tech_.featuresNativeTextTracks) {
                        this.hide();
                    } else {
                        this.show();
                    }
                };
                i.createEl = function t() {
                    return e.prototype.createEl.call(this, "div", {
                        className: "vjs-text-track-display"
                    }, {
                        translate: "yes",
                        "aria-live": "off",
                        "aria-atomic": "true"
                    });
                };
                i.clearDisplay = function e() {
                    if (typeof n().WebVTT === "function") {
                        n().WebVTT.processCues(n(), [], this.el_);
                    }
                };
                i.updateDisplay = function e() {
                    var t = this.player_.textTracks();
                    var i = this.options_.allowMultipleShowingTracks;
                    this.clearDisplay();
                    if (i) {
                        var r = [];
                        for(var n = 0; n < t.length; ++n){
                            var a = t[n];
                            if (a.mode !== "showing") {
                                continue;
                            }
                            r.push(a);
                        }
                        this.updateForTrack(r);
                        return;
                    }
                    var s = null;
                    var o = null;
                    var u = t.length;
                    while(u--){
                        var l = t[u];
                        if (l.mode === "showing") {
                            if (l.kind === "descriptions") {
                                s = l;
                            } else {
                                o = l;
                            }
                        }
                    }
                    if (o) {
                        if (this.getAttribute("aria-live") !== "off") {
                            this.setAttribute("aria-live", "off");
                        }
                        this.updateForTrack(o);
                    } else if (s) {
                        if (this.getAttribute("aria-live") !== "assertive") {
                            this.setAttribute("aria-live", "assertive");
                        }
                        this.updateForTrack(s);
                    }
                };
                i.updateDisplayState = function e(t) {
                    var i = this.player_.textTrackSettings.getValues();
                    var r = t.activeCues;
                    var a = r.length;
                    while(a--){
                        var s = r[a];
                        if (!s) {
                            continue;
                        }
                        var o = s.displayState;
                        if (i.color) {
                            o.firstChild.style.color = i.color;
                        }
                        if (i.textOpacity) {
                            iY(o.firstChild, "color", iX(i.color || "#fff", i.textOpacity));
                        }
                        if (i.backgroundColor) {
                            o.firstChild.style.backgroundColor = i.backgroundColor;
                        }
                        if (i.backgroundOpacity) {
                            iY(o.firstChild, "backgroundColor", iX(i.backgroundColor || "#000", i.backgroundOpacity));
                        }
                        if (i.windowColor) {
                            if (i.windowOpacity) {
                                iY(o, "backgroundColor", iX(i.windowColor, i.windowOpacity));
                            } else {
                                o.style.backgroundColor = i.windowColor;
                            }
                        }
                        if (i.edgeStyle) {
                            if (i.edgeStyle === "dropshadow") {
                                o.firstChild.style.textShadow = "2px 2px 3px " + iZ + ", 2px 2px 4px " + iZ + ", 2px 2px 5px " + iZ;
                            } else if (i.edgeStyle === "raised") {
                                o.firstChild.style.textShadow = "1px 1px " + iZ + ", 2px 2px " + iZ + ", 3px 3px " + iZ;
                            } else if (i.edgeStyle === "depressed") {
                                o.firstChild.style.textShadow = "1px 1px " + iQ + ", 0 1px " + iQ + ", -1px -1px " + iZ + ", 0 -1px " + iZ;
                            } else if (i.edgeStyle === "uniform") {
                                o.firstChild.style.textShadow = "0 0 4px " + iZ + ", 0 0 4px " + iZ + ", 0 0 4px " + iZ + ", 0 0 4px " + iZ;
                            }
                        }
                        if (i.fontPercent && i.fontPercent !== 1) {
                            var u = n().parseFloat(o.style.fontSize);
                            o.style.fontSize = u * i.fontPercent + "px";
                            o.style.height = "auto";
                            o.style.top = "auto";
                        }
                        if (i.fontFamily && i.fontFamily !== "default") {
                            if (i.fontFamily === "small-caps") {
                                o.firstChild.style.fontVariant = "small-caps";
                            } else {
                                o.firstChild.style.fontFamily = i7[i.fontFamily];
                            }
                        }
                    }
                };
                i.updateForTrack = function e(t) {
                    if (!Array.isArray(t)) {
                        t = [
                            t
                        ];
                    }
                    if (typeof n().WebVTT !== "function" || t.every(function(e) {
                        return !e.activeCues;
                    })) {
                        return;
                    }
                    var i = [];
                    for(var r = 0; r < t.length; ++r){
                        var a = t[r];
                        for(var s = 0; s < a.activeCues.length; ++s){
                            i.push(a.activeCues[s]);
                        }
                    }
                    n().WebVTT.processCues(n(), i, this.el_);
                    for(var o = 0; o < t.length; ++o){
                        var u = t[o];
                        for(var l = 0; l < u.activeCues.length; ++l){
                            var d = u.activeCues[l].displayState;
                            eO(d, "vjs-text-track-cue");
                            eO(d, "vjs-text-track-cue-" + (u.language ? u.language : o));
                            if (u.language) {
                                eF(d, "lang", u.language);
                            }
                        }
                        if (this.player_.textTrackSettings) {
                            this.updateDisplayState(u);
                        }
                    }
                };
                return t;
            })(tj);
            tj.registerComponent("TextTrackDisplay", i9);
            var iJ = (function(e) {
                (0, l.Z)(t, e);
                function t() {
                    return e.apply(this, arguments) || this;
                }
                var i = t.prototype;
                i.createEl = function t() {
                    var i = this.player_.isAudio();
                    var r = this.localize(i ? "Audio Player" : "Video Player");
                    var n = e_("span", {
                        className: "vjs-control-text",
                        textContent: this.localize("{1} is loading.", [
                            r, 
                        ])
                    });
                    var a = e.prototype.createEl.call(this, "div", {
                        className: "vjs-loading-spinner",
                        dir: "ltr"
                    });
                    a.appendChild(n);
                    return a;
                };
                return t;
            })(tj);
            tj.registerComponent("LoadingSpinner", iJ);
            var re = (function(e) {
                (0, l.Z)(t, e);
                function t() {
                    return e.apply(this, arguments) || this;
                }
                var i = t.prototype;
                i.createEl = function e(t, i, r) {
                    if (i === void 0) {
                        i = {};
                    }
                    if (r === void 0) {
                        r = {};
                    }
                    t = "button";
                    i = J({
                        className: this.buildCSSClass()
                    }, i);
                    r = J({
                        type: "button"
                    }, r);
                    var n = e_(t, i, r);
                    n.appendChild(e_("span", {
                        className: "vjs-icon-placeholder"
                    }, {
                        "aria-hidden": true
                    }));
                    this.createControlTextEl(n);
                    return n;
                };
                i.addChild = function e(t, i) {
                    if (i === void 0) {
                        i = {};
                    }
                    var r = this.constructor.name;
                    G.warn("Adding an actionable (user controllable) child to a Button (" + r + ") is not supported; use a ClickableComponent instead.");
                    return tj.prototype.addChild.call(this, t, i);
                };
                i.enable = function t() {
                    e.prototype.enable.call(this);
                    this.el_.removeAttribute("disabled");
                };
                i.disable = function t() {
                    e.prototype.disable.call(this);
                    this.el_.setAttribute("disabled", "disabled");
                };
                i.handleKeyDown = function t(i) {
                    if (f().isEventKey(i, "Space") || f().isEventKey(i, "Enter")) {
                        i.stopPropagation();
                        return;
                    }
                    e.prototype.handleKeyDown.call(this, i);
                };
                return t;
            })(iG);
            tj.registerComponent("Button", re);
            var rt = (function(e) {
                (0, l.Z)(t, e);
                function t(t, i) {
                    var r;
                    r = e.call(this, t, i) || this;
                    r.mouseused_ = false;
                    r.on("mousedown", function(e) {
                        return r.handleMouseDown(e);
                    });
                    return r;
                }
                var i = t.prototype;
                i.buildCSSClass = function e() {
                    return "vjs-big-play-button";
                };
                i.handleClick = function e(t) {
                    var i = this.player_.play();
                    if (this.mouseused_ && t.clientX && t.clientY) {
                        var r = this.player_.usingPlugin("eme") && this.player_.eme.sessions && this.player_.eme.sessions.length > 0;
                        t5(i);
                        if (this.player_.tech(true) && !((em || eh) && r)) {
                            this.player_.tech(true).focus();
                        }
                        return;
                    }
                    var n = this.player_.getChild("controlBar");
                    var a = n && n.getChild("playToggle");
                    if (!a) {
                        this.player_.tech(true).focus();
                        return;
                    }
                    var s = function e() {
                        return a.focus();
                    };
                    if (t4(i)) {
                        i.then(s, function() {});
                    } else {
                        this.setTimeout(s, 1);
                    }
                };
                i.handleKeyDown = function t(i) {
                    this.mouseused_ = false;
                    e.prototype.handleKeyDown.call(this, i);
                };
                i.handleMouseDown = function e(t) {
                    this.mouseused_ = true;
                };
                return t;
            })(re);
            rt.prototype.controlText_ = "Play Video";
            tj.registerComponent("BigPlayButton", rt);
            var ri = (function(e) {
                (0, l.Z)(t, e);
                function t(t, i) {
                    var r;
                    r = e.call(this, t, i) || this;
                    r.controlText((i && i.controlText) || r.localize("Close"));
                    return r;
                }
                var i = t.prototype;
                i.buildCSSClass = function t() {
                    return ("vjs-close-button " + e.prototype.buildCSSClass.call(this));
                };
                i.handleClick = function e(t) {
                    this.trigger({
                        type: "close",
                        bubbles: false
                    });
                };
                i.handleKeyDown = function t(i) {
                    if (f().isEventKey(i, "Esc")) {
                        i.preventDefault();
                        i.stopPropagation();
                        this.trigger("click");
                    } else {
                        e.prototype.handleKeyDown.call(this, i);
                    }
                };
                return t;
            })(re);
            tj.registerComponent("CloseButton", ri);
            var rr = (function(e) {
                (0, l.Z)(t, e);
                function t(t, i) {
                    var r;
                    if (i === void 0) {
                        i = {};
                    }
                    r = e.call(this, t, i) || this;
                    i.replay = i.replay === undefined || i.replay;
                    r.on(t, "play", function(e) {
                        return r.handlePlay(e);
                    });
                    r.on(t, "pause", function(e) {
                        return r.handlePause(e);
                    });
                    if (i.replay) {
                        r.on(t, "ended", function(e) {
                            return r.handleEnded(e);
                        });
                    }
                    return r;
                }
                var i = t.prototype;
                i.buildCSSClass = function t() {
                    return ("vjs-play-control " + e.prototype.buildCSSClass.call(this));
                };
                i.handleClick = function e(t) {
                    if (this.player_.paused()) {
                        t5(this.player_.play());
                    } else {
                        this.player_.pause();
                    }
                };
                i.handleSeeked = function e(t) {
                    this.removeClass("vjs-ended");
                    if (this.player_.paused()) {
                        this.handlePause(t);
                    } else {
                        this.handlePlay(t);
                    }
                };
                i.handlePlay = function e(t) {
                    this.removeClass("vjs-ended");
                    this.removeClass("vjs-paused");
                    this.addClass("vjs-playing");
                    this.controlText("Pause");
                };
                i.handlePause = function e(t) {
                    this.removeClass("vjs-playing");
                    this.addClass("vjs-paused");
                    this.controlText("Play");
                };
                i.handleEnded = function e(t) {
                    var i = this;
                    this.removeClass("vjs-playing");
                    this.addClass("vjs-ended");
                    this.controlText("Replay");
                    this.one(this.player_, "seeked", function(e) {
                        return i.handleSeeked(e);
                    });
                };
                return t;
            })(re);
            rr.prototype.controlText_ = "Play";
            tj.registerComponent("PlayToggle", rr);
            var rn = function e(t, i) {
                t = t < 0 ? 0 : t;
                var r = Math.floor(t % 60);
                var n = Math.floor((t / 60) % 60);
                var a = Math.floor(t / 3600);
                var s = Math.floor((i / 60) % 60);
                var o = Math.floor(i / 3600);
                if (isNaN(t) || t === Infinity) {
                    a = n = r = "-";
                }
                a = a > 0 || o > 0 ? a + ":" : "";
                n = ((a || s >= 10) && n < 10 ? "0" + n : n) + ":";
                r = r < 10 ? "0" + r : r;
                return a + n + r;
            };
            var ra = rn;
            function rs(e) {
                ra = e;
            }
            function ro() {
                ra = rn;
            }
            function ru(e, t) {
                if (t === void 0) {
                    t = e;
                }
                return ra(e, t);
            }
            var rl = (function(e) {
                (0, l.Z)(t, e);
                function t(t, i) {
                    var r;
                    r = e.call(this, t, i) || this;
                    r.on(t, [
                        "timeupdate",
                        "ended"
                    ], function(e) {
                        return r.updateContent(e);
                    });
                    r.updateTextNode_();
                    return r;
                }
                var i = t.prototype;
                i.createEl = function t() {
                    var i = this.buildCSSClass();
                    var r = e.prototype.createEl.call(this, "div", {
                        className: i + " vjs-time-control vjs-control"
                    });
                    var n = e_("span", {
                        className: "vjs-control-text",
                        textContent: this.localize(this.labelText_) + "\xA0"
                    }, {
                        role: "presentation"
                    });
                    r.appendChild(n);
                    this.contentEl_ = e_("span", {
                        className: i + "-display"
                    }, {
                        "aria-live": "off",
                        role: "presentation"
                    });
                    r.appendChild(this.contentEl_);
                    return r;
                };
                i.dispose = function t() {
                    this.contentEl_ = null;
                    this.textNode_ = null;
                    e.prototype.dispose.call(this);
                };
                i.updateTextNode_ = function e(t) {
                    var i = this;
                    if (t === void 0) {
                        t = 0;
                    }
                    t = ru(t);
                    if (this.formattedTime_ === t) {
                        return;
                    }
                    this.formattedTime_ = t;
                    this.requestNamedAnimationFrame("TimeDisplay#updateTextNode_", function() {
                        if (!i.contentEl_) {
                            return;
                        }
                        var e = i.textNode_;
                        if (e && i.contentEl_.firstChild !== e) {
                            e = null;
                            G.warn("TimeDisplay#updateTextnode_: Prevented replacement of text node element since it was no longer a child of this node. Appending a new node instead.");
                        }
                        i.textNode_ = s().createTextNode(i.formattedTime_);
                        if (!i.textNode_) {
                            return;
                        }
                        if (e) {
                            i.contentEl_.replaceChild(i.textNode_, e);
                        } else {
                            i.contentEl_.appendChild(i.textNode_);
                        }
                    });
                };
                i.updateContent = function e(t) {};
                return t;
            })(tj);
            rl.prototype.labelText_ = "Time";
            rl.prototype.controlText_ = "Time";
            tj.registerComponent("TimeDisplay", rl);
            var rd = (function(e) {
                (0, l.Z)(t, e);
                function t() {
                    return e.apply(this, arguments) || this;
                }
                var i = t.prototype;
                i.buildCSSClass = function e() {
                    return "vjs-current-time";
                };
                i.updateContent = function e(t) {
                    var i;
                    if (this.player_.ended()) {
                        i = this.player_.duration();
                    } else {
                        i = this.player_.scrubbing() ? this.player_.getCache().currentTime : this.player_.currentTime();
                    }
                    this.updateTextNode_(i);
                };
                return t;
            })(rl);
            rd.prototype.labelText_ = "Current Time";
            rd.prototype.controlText_ = "Current Time";
            tj.registerComponent("CurrentTimeDisplay", rd);
            var rc = (function(e) {
                (0, l.Z)(t, e);
                function t(t, i) {
                    var r;
                    r = e.call(this, t, i) || this;
                    var n = function e(t) {
                        return r.updateContent(t);
                    };
                    r.on(t, "durationchange", n);
                    r.on(t, "loadstart", n);
                    r.on(t, "loadedmetadata", n);
                    return r;
                }
                var i = t.prototype;
                i.buildCSSClass = function e() {
                    return "vjs-duration";
                };
                i.updateContent = function e(t) {
                    var i = this.player_.duration();
                    this.updateTextNode_(i);
                };
                return t;
            })(rl);
            rc.prototype.labelText_ = "Duration";
            rc.prototype.controlText_ = "Duration";
            tj.registerComponent("DurationDisplay", rc);
            var rh = (function(e) {
                (0, l.Z)(t, e);
                function t() {
                    return e.apply(this, arguments) || this;
                }
                var i = t.prototype;
                i.createEl = function t() {
                    var i = e.prototype.createEl.call(this, "div", {
                        className: "vjs-time-control vjs-time-divider"
                    }, {
                        "aria-hidden": true
                    });
                    var r = e.prototype.createEl.call(this, "div");
                    var n = e.prototype.createEl.call(this, "span", {
                        textContent: "/"
                    });
                    r.appendChild(n);
                    i.appendChild(r);
                    return i;
                };
                return t;
            })(tj);
            tj.registerComponent("TimeDivider", rh);
            var rf = (function(e) {
                (0, l.Z)(t, e);
                function t(t, i) {
                    var r;
                    r = e.call(this, t, i) || this;
                    r.on(t, "durationchange", function(e) {
                        return r.updateContent(e);
                    });
                    return r;
                }
                var i = t.prototype;
                i.buildCSSClass = function e() {
                    return "vjs-remaining-time";
                };
                i.createEl = function t() {
                    var i = e.prototype.createEl.call(this);
                    i.insertBefore(e_("span", {}, {
                        "aria-hidden": true
                    }, "-"), this.contentEl_);
                    return i;
                };
                i.updateContent = function e(t) {
                    if (typeof this.player_.duration() !== "number") {
                        return;
                    }
                    var i;
                    if (this.player_.ended()) {
                        i = 0;
                    } else if (this.player_.remainingTimeDisplay) {
                        i = this.player_.remainingTimeDisplay();
                    } else {
                        i = this.player_.remainingTime();
                    }
                    this.updateTextNode_(i);
                };
                return t;
            })(rl);
            rf.prototype.labelText_ = "Remaining Time";
            rf.prototype.controlText_ = "Remaining Time";
            tj.registerComponent("RemainingTimeDisplay", rf);
            var rp = (function(e) {
                (0, l.Z)(t, e);
                function t(t, i) {
                    var r;
                    r = e.call(this, t, i) || this;
                    r.updateShowing();
                    r.on(r.player(), "durationchange", function(e) {
                        return r.updateShowing(e);
                    });
                    return r;
                }
                var i = t.prototype;
                i.createEl = function t() {
                    var i = e.prototype.createEl.call(this, "div", {
                        className: "vjs-live-control vjs-control"
                    });
                    this.contentEl_ = e_("div", {
                        className: "vjs-live-display"
                    }, {
                        "aria-live": "off"
                    });
                    this.contentEl_.appendChild(e_("span", {
                        className: "vjs-control-text",
                        textContent: this.localize("Stream Type") + "\xA0"
                    }));
                    this.contentEl_.appendChild(s().createTextNode(this.localize("LIVE")));
                    i.appendChild(this.contentEl_);
                    return i;
                };
                i.dispose = function t() {
                    this.contentEl_ = null;
                    e.prototype.dispose.call(this);
                };
                i.updateShowing = function e(t) {
                    if (this.player().duration() === Infinity) {
                        this.show();
                    } else {
                        this.hide();
                    }
                };
                return t;
            })(tj);
            tj.registerComponent("LiveDisplay", rp);
            var rm = (function(e) {
                (0, l.Z)(t, e);
                function t(t, i) {
                    var r;
                    r = e.call(this, t, i) || this;
                    r.updateLiveEdgeStatus();
                    if (r.player_.liveTracker) {
                        r.updateLiveEdgeStatusHandler_ = function(e) {
                            return r.updateLiveEdgeStatus(e);
                        };
                        r.on(r.player_.liveTracker, "liveedgechange", r.updateLiveEdgeStatusHandler_);
                    }
                    return r;
                }
                var i = t.prototype;
                i.createEl = function t() {
                    var i = e.prototype.createEl.call(this, "button", {
                        className: "vjs-seek-to-live-control vjs-control"
                    });
                    this.textEl_ = e_("span", {
                        className: "vjs-seek-to-live-text",
                        textContent: this.localize("LIVE")
                    }, {
                        "aria-hidden": "true"
                    });
                    i.appendChild(this.textEl_);
                    return i;
                };
                i.updateLiveEdgeStatus = function e() {
                    if (!this.player_.liveTracker || this.player_.liveTracker.atLiveEdge()) {
                        this.setAttribute("aria-disabled", true);
                        this.addClass("vjs-at-live-edge");
                        this.controlText("Seek to live, currently playing live");
                    } else {
                        this.setAttribute("aria-disabled", false);
                        this.removeClass("vjs-at-live-edge");
                        this.controlText("Seek to live, currently behind live");
                    }
                };
                i.handleClick = function e() {
                    this.player_.liveTracker.seekToLiveEdge();
                };
                i.dispose = function t() {
                    if (this.player_.liveTracker) {
                        this.off(this.player_.liveTracker, "liveedgechange", this.updateLiveEdgeStatusHandler_);
                    }
                    this.textEl_ = null;
                    e.prototype.dispose.call(this);
                };
                return t;
            })(re);
            rm.prototype.controlText_ = "Seek to live, currently playing live";
            tj.registerComponent("SeekToLive", rm);
            var rv = function e(t, i, r) {
                t = Number(t);
                return Math.min(r, Math.max(i, isNaN(t) ? i : t));
            };
            var rg = (function(e) {
                (0, l.Z)(t, e);
                function t(t, i) {
                    var r;
                    r = e.call(this, t, i) || this;
                    r.handleMouseDown_ = function(e) {
                        return r.handleMouseDown(e);
                    };
                    r.handleMouseUp_ = function(e) {
                        return r.handleMouseUp(e);
                    };
                    r.handleKeyDown_ = function(e) {
                        return r.handleKeyDown(e);
                    };
                    r.handleClick_ = function(e) {
                        return r.handleClick(e);
                    };
                    r.handleMouseMove_ = function(e) {
                        return r.handleMouseMove(e);
                    };
                    r.update_ = function(e) {
                        return r.update(e);
                    };
                    r.bar = r.getChild(r.options_.barName);
                    r.vertical(!!r.options_.vertical);
                    r.enable();
                    return r;
                }
                var i = t.prototype;
                i.enabled = function e() {
                    return this.enabled_;
                };
                i.enable = function e() {
                    if (this.enabled()) {
                        return;
                    }
                    this.on("mousedown", this.handleMouseDown_);
                    this.on("touchstart", this.handleMouseDown_);
                    this.on("keydown", this.handleKeyDown_);
                    this.on("click", this.handleClick_);
                    this.on(this.player_, "controlsvisible", this.update);
                    if (this.playerEvent) {
                        this.on(this.player_, this.playerEvent, this.update);
                    }
                    this.removeClass("disabled");
                    this.setAttribute("tabindex", 0);
                    this.enabled_ = true;
                };
                i.disable = function e() {
                    if (!this.enabled()) {
                        return;
                    }
                    var t = this.bar.el_.ownerDocument;
                    this.off("mousedown", this.handleMouseDown_);
                    this.off("touchstart", this.handleMouseDown_);
                    this.off("keydown", this.handleKeyDown_);
                    this.off("click", this.handleClick_);
                    this.off(this.player_, "controlsvisible", this.update_);
                    this.off(t, "mousemove", this.handleMouseMove_);
                    this.off(t, "mouseup", this.handleMouseUp_);
                    this.off(t, "touchmove", this.handleMouseMove_);
                    this.off(t, "touchend", this.handleMouseUp_);
                    this.removeAttribute("tabindex");
                    this.addClass("disabled");
                    if (this.playerEvent) {
                        this.off(this.player_, this.playerEvent, this.update);
                    }
                    this.enabled_ = false;
                };
                i.createEl = function t(i, r, n) {
                    if (r === void 0) {
                        r = {};
                    }
                    if (n === void 0) {
                        n = {};
                    }
                    r.className = r.className + " vjs-slider";
                    r = J({
                        tabIndex: 0
                    }, r);
                    n = J({
                        role: "slider",
                        "aria-valuenow": 0,
                        "aria-valuemin": 0,
                        "aria-valuemax": 100,
                        tabIndex: 0
                    }, n);
                    return e.prototype.createEl.call(this, i, r, n);
                };
                i.handleMouseDown = function e(t) {
                    var i = this.bar.el_.ownerDocument;
                    if (t.type === "mousedown") {
                        t.preventDefault();
                    }
                    if (t.type === "touchstart" && !ef) {
                        t.preventDefault();
                    }
                    e1();
                    this.addClass("vjs-sliding");
                    this.trigger("slideractive");
                    this.on(i, "mousemove", this.handleMouseMove_);
                    this.on(i, "mouseup", this.handleMouseUp_);
                    this.on(i, "touchmove", this.handleMouseMove_);
                    this.on(i, "touchend", this.handleMouseUp_);
                    this.handleMouseMove(t);
                };
                i.handleMouseMove = function e(t) {};
                i.handleMouseUp = function e() {
                    var t = this.bar.el_.ownerDocument;
                    ej();
                    this.removeClass("vjs-sliding");
                    this.trigger("sliderinactive");
                    this.off(t, "mousemove", this.handleMouseMove_);
                    this.off(t, "mouseup", this.handleMouseUp_);
                    this.off(t, "touchmove", this.handleMouseMove_);
                    this.off(t, "touchend", this.handleMouseUp_);
                    this.update();
                };
                i.update = function e() {
                    var t = this;
                    if (!this.el_ || !this.bar) {
                        return;
                    }
                    var i = this.getProgress();
                    if (i === this.progress_) {
                        return i;
                    }
                    this.progress_ = i;
                    this.requestNamedAnimationFrame("Slider#update", function() {
                        var e = t.vertical() ? "height" : "width";
                        t.bar.el().style[e] = (i * 100).toFixed(2) + "%";
                    });
                    return i;
                };
                i.getProgress = function e() {
                    return Number(rv(this.getPercent(), 0, 1).toFixed(4));
                };
                i.calculateDistance = function e(t) {
                    var i = e6(this.el_, t);
                    if (this.vertical()) {
                        return i.y;
                    }
                    return i.x;
                };
                i.handleKeyDown = function t(i) {
                    if (f().isEventKey(i, "Left") || f().isEventKey(i, "Down")) {
                        i.preventDefault();
                        i.stopPropagation();
                        this.stepBack();
                    } else if (f().isEventKey(i, "Right") || f().isEventKey(i, "Up")) {
                        i.preventDefault();
                        i.stopPropagation();
                        this.stepForward();
                    } else {
                        e.prototype.handleKeyDown.call(this, i);
                    }
                };
                i.handleClick = function e(t) {
                    t.stopPropagation();
                    t.preventDefault();
                };
                i.vertical = function e(t) {
                    if (t === undefined) {
                        return this.vertical_ || false;
                    }
                    this.vertical_ = !!t;
                    if (this.vertical_) {
                        this.addClass("vjs-slider-vertical");
                    } else {
                        this.addClass("vjs-slider-horizontal");
                    }
                };
                return t;
            })(tj);
            tj.registerComponent("Slider", rg);
            var r$ = function e(t, i) {
                return rv((t / i) * 100, 0, 100).toFixed(2) + "%";
            };
            var r8 = (function(e) {
                (0, l.Z)(t, e);
                function t(t, i) {
                    var r;
                    r = e.call(this, t, i) || this;
                    r.partEls_ = [];
                    r.on(t, "progress", function(e) {
                        return r.update(e);
                    });
                    return r;
                }
                var i = t.prototype;
                i.createEl = function t() {
                    var i = e.prototype.createEl.call(this, "div", {
                        className: "vjs-load-progress"
                    });
                    var r = e_("span", {
                        className: "vjs-control-text"
                    });
                    var n = e_("span", {
                        textContent: this.localize("Loaded")
                    });
                    var a = s().createTextNode(": ");
                    this.percentageEl_ = e_("span", {
                        className: "vjs-control-text-loaded-percentage",
                        textContent: "0%"
                    });
                    i.appendChild(r);
                    r.appendChild(n);
                    r.appendChild(a);
                    r.appendChild(this.percentageEl_);
                    return i;
                };
                i.dispose = function t() {
                    this.partEls_ = null;
                    this.percentageEl_ = null;
                    e.prototype.dispose.call(this);
                };
                i.update = function e(t) {
                    var i = this;
                    this.requestNamedAnimationFrame("LoadProgressBar#update", function() {
                        var e = i.player_.liveTracker;
                        var t = i.player_.buffered();
                        var r = e && e.isLive() ? e.seekableEnd() : i.player_.duration();
                        var n = i.player_.bufferedEnd();
                        var a = i.partEls_;
                        var s = r$(n, r);
                        if (i.percent_ !== s) {
                            i.el_.style.width = s;
                            eL(i.percentageEl_, s);
                            i.percent_ = s;
                        }
                        for(var o = 0; o < t.length; o++){
                            var u = t.start(o);
                            var l = t.end(o);
                            var d = a[o];
                            if (!d) {
                                d = i.el_.appendChild(e_());
                                a[o] = d;
                            }
                            if (d.dataset.start === u && d.dataset.end === l) {
                                continue;
                            }
                            d.dataset.start = u;
                            d.dataset.end = l;
                            d.style.left = r$(u, n);
                            d.style.width = r$(l - u, n);
                        }
                        for(var c = a.length; c > t.length; c--){
                            i.el_.removeChild(a[c - 1]);
                        }
                        a.length = t.length;
                    });
                };
                return t;
            })(tj);
            tj.registerComponent("LoadProgressBar", r8);
            var ry = (function(e) {
                (0, l.Z)(t, e);
                function t(t, i) {
                    var r;
                    r = e.call(this, t, i) || this;
                    r.update = t8(t$((0, u.Z)(r), r.update), tg);
                    return r;
                }
                var i = t.prototype;
                i.createEl = function t() {
                    return e.prototype.createEl.call(this, "div", {
                        className: "vjs-time-tooltip"
                    }, {
                        "aria-hidden": "true"
                    });
                };
                i.update = function e(t, i, r) {
                    var n = eH(this.el_);
                    var a = e2(this.player_.el());
                    var s = t.width * i;
                    if (!a || !n) {
                        return;
                    }
                    var o = t.left - a.left + s;
                    var u = t.width - s + (a.right - t.right);
                    var l = n.width / 2;
                    if (o < l) {
                        l += l - o;
                    } else if (u < l) {
                        l = u;
                    }
                    if (l < 0) {
                        l = 0;
                    } else if (l > n.width) {
                        l = n.width;
                    }
                    l = Math.round(l);
                    this.el_.style.right = "-" + l + "px";
                    this.write(r);
                };
                i.write = function e(t) {
                    eL(this.el_, t);
                };
                i.updateTime = function e(t, i, r, n) {
                    var a = this;
                    this.requestNamedAnimationFrame("TimeTooltip#updateTime", function() {
                        var e;
                        var s = a.player_.duration();
                        if (a.player_.liveTracker && a.player_.liveTracker.isLive()) {
                            var o = a.player_.liveTracker.liveWindow();
                            var u = o - i * o;
                            e = (u < 1 ? "" : "-") + ru(u, o);
                        } else {
                            e = ru(r, s);
                        }
                        a.update(t, i, e);
                        if (n) {
                            n();
                        }
                    });
                };
                return t;
            })(tj);
            tj.registerComponent("TimeTooltip", ry);
            var rT = (function(e) {
                (0, l.Z)(t, e);
                function t(t, i) {
                    var r;
                    r = e.call(this, t, i) || this;
                    r.update = t8(t$((0, u.Z)(r), r.update), tg);
                    return r;
                }
                var i = t.prototype;
                i.createEl = function t() {
                    return e.prototype.createEl.call(this, "div", {
                        className: "vjs-play-progress vjs-slider-bar"
                    }, {
                        "aria-hidden": "true"
                    });
                };
                i.update = function e(t, i) {
                    var r = this.getChild("timeTooltip");
                    if (!r) {
                        return;
                    }
                    var n = this.player_.scrubbing() ? this.player_.getCache().currentTime : this.player_.currentTime();
                    r.updateTime(t, i, n);
                };
                return t;
            })(tj);
            rT.prototype.options_ = {
                children: []
            };
            if (!eT && !eu) {
                rT.prototype.options_.children.push("timeTooltip");
            }
            tj.registerComponent("PlayProgressBar", rT);
            var rb = (function(e) {
                (0, l.Z)(t, e);
                function t(t, i) {
                    var r;
                    r = e.call(this, t, i) || this;
                    r.update = t8(t$((0, u.Z)(r), r.update), tg);
                    return r;
                }
                var i = t.prototype;
                i.createEl = function t() {
                    return e.prototype.createEl.call(this, "div", {
                        className: "vjs-mouse-display"
                    });
                };
                i.update = function e(t, i) {
                    var r = this;
                    var n = i * this.player_.duration();
                    this.getChild("timeTooltip").updateTime(t, i, n, function() {
                        r.el_.style.left = t.width * i + "px";
                    });
                };
                return t;
            })(tj);
            rb.prototype.options_ = {
                children: [
                    "timeTooltip"
                ]
            };
            tj.registerComponent("MouseTimeDisplay", rb);
            var rx = 5;
            var rS = 12;
            var rk = (function(e) {
                (0, l.Z)(t, e);
                function t(t, i) {
                    var r;
                    r = e.call(this, t, i) || this;
                    r.setEventHandlers_();
                    return r;
                }
                var i = t.prototype;
                i.setEventHandlers_ = function e() {
                    var t = this;
                    this.update_ = t$(this, this.update);
                    this.update = t8(this.update_, tg);
                    this.on(this.player_, [
                        "ended",
                        "durationchange",
                        "timeupdate"
                    ], this.update);
                    if (this.player_.liveTracker) {
                        this.on(this.player_.liveTracker, "liveedgechange", this.update);
                    }
                    this.updateInterval = null;
                    this.enableIntervalHandler_ = function(e) {
                        return t.enableInterval_(e);
                    };
                    this.disableIntervalHandler_ = function(e) {
                        return t.disableInterval_(e);
                    };
                    this.on(this.player_, [
                        "playing"
                    ], this.enableIntervalHandler_);
                    this.on(this.player_, [
                        "ended",
                        "pause",
                        "waiting"
                    ], this.disableIntervalHandler_);
                    if ("hidden" in s() && "visibilityState" in s()) {
                        this.on(s(), "visibilitychange", this.toggleVisibility_);
                    }
                };
                i.toggleVisibility_ = function e(t) {
                    if (s().visibilityState === "hidden") {
                        this.cancelNamedAnimationFrame("SeekBar#update");
                        this.cancelNamedAnimationFrame("Slider#update");
                        this.disableInterval_(t);
                    } else {
                        if (!this.player_.ended() && !this.player_.paused()) {
                            this.enableInterval_();
                        }
                        this.update();
                    }
                };
                i.enableInterval_ = function e() {
                    if (this.updateInterval) {
                        return;
                    }
                    this.updateInterval = this.setInterval(this.update, tg);
                };
                i.disableInterval_ = function e(t) {
                    if (this.player_.liveTracker && this.player_.liveTracker.isLive() && t && t.type !== "ended") {
                        return;
                    }
                    if (!this.updateInterval) {
                        return;
                    }
                    this.clearInterval(this.updateInterval);
                    this.updateInterval = null;
                };
                i.createEl = function t() {
                    return e.prototype.createEl.call(this, "div", {
                        className: "vjs-progress-holder"
                    }, {
                        "aria-label": this.localize("Progress Bar")
                    });
                };
                i.update = function t(i) {
                    var r = this;
                    if (s().visibilityState === "hidden") {
                        return;
                    }
                    var n = e.prototype.update.call(this);
                    this.requestNamedAnimationFrame("SeekBar#update", function() {
                        var e = r.player_.ended() ? r.player_.duration() : r.getCurrentTime_();
                        var t = r.player_.liveTracker;
                        var i = r.player_.duration();
                        if (t && t.isLive()) {
                            i = r.player_.liveTracker.liveCurrentTime();
                        }
                        if (r.percent_ !== n) {
                            r.el_.setAttribute("aria-valuenow", (n * 100).toFixed(2));
                            r.percent_ = n;
                        }
                        if (r.currentTime_ !== e || r.duration_ !== i) {
                            r.el_.setAttribute("aria-valuetext", r.localize("progress bar timing: currentTime={1} duration={2}", [
                                ru(e, i),
                                ru(i, i), 
                            ], "{1} of {2}"));
                            r.currentTime_ = e;
                            r.duration_ = i;
                        }
                        if (r.bar) {
                            r.bar.update(e2(r.el()), r.getProgress());
                        }
                    });
                    return n;
                };
                i.userSeek_ = function e(t) {
                    if (this.player_.liveTracker && this.player_.liveTracker.isLive()) {
                        this.player_.liveTracker.nextSeekedFromUser();
                    }
                    this.player_.currentTime(t);
                };
                i.getCurrentTime_ = function e() {
                    return this.player_.scrubbing() ? this.player_.getCache().currentTime : this.player_.currentTime();
                };
                i.getPercent = function e() {
                    var t = this.getCurrentTime_();
                    var i;
                    var r = this.player_.liveTracker;
                    if (r && r.isLive()) {
                        i = (t - r.seekableStart()) / r.liveWindow();
                        if (r.atLiveEdge()) {
                            i = 1;
                        }
                    } else {
                        i = t / this.player_.duration();
                    }
                    return i;
                };
                i.handleMouseDown = function t(i) {
                    if (!e5(i)) {
                        return;
                    }
                    i.stopPropagation();
                    this.player_.scrubbing(true);
                    this.videoWasPlaying = !this.player_.paused();
                    this.player_.pause();
                    e.prototype.handleMouseDown.call(this, i);
                };
                i.handleMouseMove = function e(t) {
                    if (!e5(t)) {
                        return;
                    }
                    var i;
                    var r = this.calculateDistance(t);
                    var n = this.player_.liveTracker;
                    if (!n || !n.isLive()) {
                        i = r * this.player_.duration();
                        if (i === this.player_.duration()) {
                            i = i - 0.1;
                        }
                    } else {
                        if (r >= 0.99) {
                            n.seekToLiveEdge();
                            return;
                        }
                        var a = n.seekableStart();
                        var s = n.liveCurrentTime();
                        i = a + r * n.liveWindow();
                        if (i >= s) {
                            i = s;
                        }
                        if (i <= a) {
                            i = a + 0.1;
                        }
                        if (i === Infinity) {
                            return;
                        }
                    }
                    this.userSeek_(i);
                };
                i.enable = function t() {
                    e.prototype.enable.call(this);
                    var i = this.getChild("mouseTimeDisplay");
                    if (!i) {
                        return;
                    }
                    i.show();
                };
                i.disable = function t() {
                    e.prototype.disable.call(this);
                    var i = this.getChild("mouseTimeDisplay");
                    if (!i) {
                        return;
                    }
                    i.hide();
                };
                i.handleMouseUp = function t(i) {
                    e.prototype.handleMouseUp.call(this, i);
                    if (i) {
                        i.stopPropagation();
                    }
                    this.player_.scrubbing(false);
                    this.player_.trigger({
                        type: "timeupdate",
                        target: this,
                        manuallyTriggered: true
                    });
                    if (this.videoWasPlaying) {
                        t5(this.player_.play());
                    } else {
                        this.update_();
                    }
                };
                i.stepForward = function e() {
                    this.userSeek_(this.player_.currentTime() + rx);
                };
                i.stepBack = function e() {
                    this.userSeek_(this.player_.currentTime() - rx);
                };
                i.handleAction = function e(t) {
                    if (this.player_.paused()) {
                        this.player_.play();
                    } else {
                        this.player_.pause();
                    }
                };
                i.handleKeyDown = function t(i) {
                    var r = this.player_.liveTracker;
                    if (f().isEventKey(i, "Space") || f().isEventKey(i, "Enter")) {
                        i.preventDefault();
                        i.stopPropagation();
                        this.handleAction(i);
                    } else if (f().isEventKey(i, "Home")) {
                        i.preventDefault();
                        i.stopPropagation();
                        this.userSeek_(0);
                    } else if (f().isEventKey(i, "End")) {
                        i.preventDefault();
                        i.stopPropagation();
                        if (r && r.isLive()) {
                            this.userSeek_(r.liveCurrentTime());
                        } else {
                            this.userSeek_(this.player_.duration());
                        }
                    } else if (/^[0-9]$/.test(f()(i))) {
                        i.preventDefault();
                        i.stopPropagation();
                        var n = ((f().codes[f()(i)] - f().codes[0]) * 10.0) / 100.0;
                        if (r && r.isLive()) {
                            this.userSeek_(r.seekableStart() + r.liveWindow() * n);
                        } else {
                            this.userSeek_(this.player_.duration() * n);
                        }
                    } else if (f().isEventKey(i, "PgDn")) {
                        i.preventDefault();
                        i.stopPropagation();
                        this.userSeek_(this.player_.currentTime() - rx * rS);
                    } else if (f().isEventKey(i, "PgUp")) {
                        i.preventDefault();
                        i.stopPropagation();
                        this.userSeek_(this.player_.currentTime() + rx * rS);
                    } else {
                        e.prototype.handleKeyDown.call(this, i);
                    }
                };
                i.dispose = function t() {
                    this.disableInterval_();
                    this.off(this.player_, [
                        "ended",
                        "durationchange",
                        "timeupdate"
                    ], this.update);
                    if (this.player_.liveTracker) {
                        this.off(this.player_.liveTracker, "liveedgechange", this.update);
                    }
                    this.off(this.player_, [
                        "playing"
                    ], this.enableIntervalHandler_);
                    this.off(this.player_, [
                        "ended",
                        "pause",
                        "waiting"
                    ], this.disableIntervalHandler_);
                    if ("hidden" in s() && "visibilityState" in s()) {
                        this.off(s(), "visibilitychange", this.toggleVisibility_);
                    }
                    e.prototype.dispose.call(this);
                };
                return t;
            })(rg);
            rk.prototype.options_ = {
                children: [
                    "loadProgressBar",
                    "playProgressBar"
                ],
                barName: "playProgressBar"
            };
            if (!eT && !eu) {
                rk.prototype.options_.children.splice(1, 0, "mouseTimeDisplay");
            }
            tj.registerComponent("SeekBar", rk);
            var rC = (function(e) {
                (0, l.Z)(t, e);
                function t(t, i) {
                    var r;
                    r = e.call(this, t, i) || this;
                    r.handleMouseMove = t8(t$((0, u.Z)(r), r.handleMouseMove), tg);
                    r.throttledHandleMouseSeek = t8(t$((0, u.Z)(r), r.handleMouseSeek), tg);
                    r.handleMouseUpHandler_ = function(e) {
                        return r.handleMouseUp(e);
                    };
                    r.handleMouseDownHandler_ = function(e) {
                        return r.handleMouseDown(e);
                    };
                    r.enable();
                    return r;
                }
                var i = t.prototype;
                i.createEl = function t() {
                    return e.prototype.createEl.call(this, "div", {
                        className: "vjs-progress-control vjs-control"
                    });
                };
                i.handleMouseMove = function e(t) {
                    var i = this.getChild("seekBar");
                    if (!i) {
                        return;
                    }
                    var r = i.getChild("playProgressBar");
                    var n = i.getChild("mouseTimeDisplay");
                    if (!r && !n) {
                        return;
                    }
                    var a = i.el();
                    var s = eH(a);
                    var o = e6(a, t).x;
                    o = rv(o, 0, 1);
                    if (n) {
                        n.update(s, o);
                    }
                    if (r) {
                        r.update(s, i.getProgress());
                    }
                };
                i.handleMouseSeek = function e(t) {
                    var i = this.getChild("seekBar");
                    if (i) {
                        i.handleMouseMove(t);
                    }
                };
                i.enabled = function e() {
                    return this.enabled_;
                };
                i.disable = function e() {
                    this.children().forEach(function(e) {
                        return e.disable && e.disable();
                    });
                    if (!this.enabled()) {
                        return;
                    }
                    this.off([
                        "mousedown",
                        "touchstart"
                    ], this.handleMouseDownHandler_);
                    this.off(this.el_, "mousemove", this.handleMouseMove);
                    this.removeListenersAddedOnMousedownAndTouchstart();
                    this.addClass("disabled");
                    this.enabled_ = false;
                    if (this.player_.scrubbing()) {
                        var t = this.getChild("seekBar");
                        this.player_.scrubbing(false);
                        if (t.videoWasPlaying) {
                            t5(this.player_.play());
                        }
                    }
                };
                i.enable = function e() {
                    this.children().forEach(function(e) {
                        return e.enable && e.enable();
                    });
                    if (this.enabled()) {
                        return;
                    }
                    this.on([
                        "mousedown",
                        "touchstart"
                    ], this.handleMouseDownHandler_);
                    this.on(this.el_, "mousemove", this.handleMouseMove);
                    this.removeClass("disabled");
                    this.enabled_ = true;
                };
                i.removeListenersAddedOnMousedownAndTouchstart = function e() {
                    var t = this.el_.ownerDocument;
                    this.off(t, "mousemove", this.throttledHandleMouseSeek);
                    this.off(t, "touchmove", this.throttledHandleMouseSeek);
                    this.off(t, "mouseup", this.handleMouseUpHandler_);
                    this.off(t, "touchend", this.handleMouseUpHandler_);
                };
                i.handleMouseDown = function e(t) {
                    var i = this.el_.ownerDocument;
                    var r = this.getChild("seekBar");
                    if (r) {
                        r.handleMouseDown(t);
                    }
                    this.on(i, "mousemove", this.throttledHandleMouseSeek);
                    this.on(i, "touchmove", this.throttledHandleMouseSeek);
                    this.on(i, "mouseup", this.handleMouseUpHandler_);
                    this.on(i, "touchend", this.handleMouseUpHandler_);
                };
                i.handleMouseUp = function e(t) {
                    var i = this.getChild("seekBar");
                    if (i) {
                        i.handleMouseUp(t);
                    }
                    this.removeListenersAddedOnMousedownAndTouchstart();
                };
                return t;
            })(tj);
            rC.prototype.options_ = {
                children: [
                    "seekBar"
                ]
            };
            tj.registerComponent("ProgressControl", rC);
            var rE = (function(e) {
                (0, l.Z)(t, e);
                function t(t, i) {
                    var r;
                    r = e.call(this, t, i) || this;
                    r.on(t, [
                        "enterpictureinpicture",
                        "leavepictureinpicture"
                    ], function(e) {
                        return r.handlePictureInPictureChange(e);
                    });
                    r.on(t, [
                        "disablepictureinpicturechanged",
                        "loadedmetadata"
                    ], function(e) {
                        return r.handlePictureInPictureEnabledChange(e);
                    });
                    r.disable();
                    return r;
                }
                var i = t.prototype;
                i.buildCSSClass = function t() {
                    return ("vjs-picture-in-picture-control " + e.prototype.buildCSSClass.call(this));
                };
                i.handlePictureInPictureEnabledChange = function e() {
                    if (s().pictureInPictureEnabled && this.player_.disablePictureInPicture() === false) {
                        this.enable();
                    } else {
                        this.disable();
                    }
                };
                i.handlePictureInPictureChange = function e(t) {
                    if (this.player_.isInPictureInPicture()) {
                        this.controlText("Exit Picture-in-Picture");
                    } else {
                        this.controlText("Picture-in-Picture");
                    }
                    this.handlePictureInPictureEnabledChange();
                };
                i.handleClick = function e(t) {
                    if (!this.player_.isInPictureInPicture()) {
                        this.player_.requestPictureInPicture();
                    } else {
                        this.player_.exitPictureInPicture();
                    }
                };
                return t;
            })(re);
            rE.prototype.controlText_ = "Picture-in-Picture";
            tj.registerComponent("PictureInPictureToggle", rE);
            var rw = (function(e) {
                (0, l.Z)(t, e);
                function t(t, i) {
                    var r;
                    r = e.call(this, t, i) || this;
                    r.on(t, "fullscreenchange", function(e) {
                        return r.handleFullscreenChange(e);
                    });
                    if (s()[t.fsApi_.fullscreenEnabled] === false) {
                        r.disable();
                    }
                    return r;
                }
                var i = t.prototype;
                i.buildCSSClass = function t() {
                    return ("vjs-fullscreen-control " + e.prototype.buildCSSClass.call(this));
                };
                i.handleFullscreenChange = function e(t) {
                    if (this.player_.isFullscreen()) {
                        this.controlText("Non-Fullscreen");
                    } else {
                        this.controlText("Fullscreen");
                    }
                };
                i.handleClick = function e(t) {
                    if (!this.player_.isFullscreen()) {
                        this.player_.requestFullscreen();
                    } else {
                        this.player_.exitFullscreen();
                    }
                };
                return t;
            })(re);
            rw.prototype.controlText_ = "Fullscreen";
            tj.registerComponent("FullscreenToggle", rw);
            var rI = function e(t, i) {
                if (i.tech_ && !i.tech_.featuresVolumeControl) {
                    t.addClass("vjs-hidden");
                }
                t.on(i, "loadstart", function() {
                    if (!i.tech_.featuresVolumeControl) {
                        t.addClass("vjs-hidden");
                    } else {
                        t.removeClass("vjs-hidden");
                    }
                });
            };
            var rP = (function(e) {
                (0, l.Z)(t, e);
                function t() {
                    return e.apply(this, arguments) || this;
                }
                var i = t.prototype;
                i.createEl = function t() {
                    var i = e.prototype.createEl.call(this, "div", {
                        className: "vjs-volume-level"
                    });
                    i.appendChild(e.prototype.createEl.call(this, "span", {
                        className: "vjs-control-text"
                    }));
                    return i;
                };
                return t;
            })(tj);
            tj.registerComponent("VolumeLevel", rP);
            var r_ = (function(e) {
                (0, l.Z)(t, e);
                function t(t, i) {
                    var r;
                    r = e.call(this, t, i) || this;
                    r.update = t8(t$((0, u.Z)(r), r.update), tg);
                    return r;
                }
                var i = t.prototype;
                i.createEl = function t() {
                    return e.prototype.createEl.call(this, "div", {
                        className: "vjs-volume-tooltip"
                    }, {
                        "aria-hidden": "true"
                    });
                };
                i.update = function e(t, i, r, n) {
                    if (!r) {
                        var a = e2(this.el_);
                        var s = e2(this.player_.el());
                        var o = t.width * i;
                        if (!s || !a) {
                            return;
                        }
                        var u = t.left - s.left + o;
                        var l = t.width - o + (s.right - t.right);
                        var d = a.width / 2;
                        if (u < d) {
                            d += d - u;
                        } else if (l < d) {
                            d = l;
                        }
                        if (d < 0) {
                            d = 0;
                        } else if (d > a.width) {
                            d = a.width;
                        }
                        this.el_.style.right = "-" + d + "px";
                    }
                    this.write(n + "%");
                };
                i.write = function e(t) {
                    eL(this.el_, t);
                };
                i.updateVolume = function e(t, i, r, n, a) {
                    var s = this;
                    this.requestNamedAnimationFrame("VolumeLevelTooltip#updateVolume", function() {
                        s.update(t, i, r, n.toFixed(0));
                        if (a) {
                            a();
                        }
                    });
                };
                return t;
            })(tj);
            tj.registerComponent("VolumeLevelTooltip", r_);
            var rL = (function(e) {
                (0, l.Z)(t, e);
                function t(t, i) {
                    var r;
                    r = e.call(this, t, i) || this;
                    r.update = t8(t$((0, u.Z)(r), r.update), tg);
                    return r;
                }
                var i = t.prototype;
                i.createEl = function t() {
                    return e.prototype.createEl.call(this, "div", {
                        className: "vjs-mouse-display"
                    });
                };
                i.update = function e(t, i, r) {
                    var n = this;
                    var a = 100 * i;
                    this.getChild("volumeLevelTooltip").updateVolume(t, i, r, a, function() {
                        if (r) {
                            n.el_.style.bottom = t.height * i + "px";
                        } else {
                            n.el_.style.left = t.width * i + "px";
                        }
                    });
                };
                return t;
            })(tj);
            rL.prototype.options_ = {
                children: [
                    "volumeLevelTooltip"
                ]
            };
            tj.registerComponent("MouseVolumeLevelDisplay", rL);
            var rA = (function(e) {
                (0, l.Z)(t, e);
                function t(t, i) {
                    var r;
                    r = e.call(this, t, i) || this;
                    r.on("slideractive", function(e) {
                        return r.updateLastVolume_(e);
                    });
                    r.on(t, "volumechange", function(e) {
                        return r.updateARIAAttributes(e);
                    });
                    t.ready(function() {
                        return r.updateARIAAttributes();
                    });
                    return r;
                }
                var i = t.prototype;
                i.createEl = function t() {
                    return e.prototype.createEl.call(this, "div", {
                        className: "vjs-volume-bar vjs-slider-bar"
                    }, {
                        "aria-label": this.localize("Volume Level"),
                        "aria-live": "polite"
                    });
                };
                i.handleMouseDown = function t(i) {
                    if (!e5(i)) {
                        return;
                    }
                    e.prototype.handleMouseDown.call(this, i);
                };
                i.handleMouseMove = function e(t) {
                    var i = this.getChild("mouseVolumeLevelDisplay");
                    if (i) {
                        var r = this.el();
                        var n = e2(r);
                        var a = this.vertical();
                        var s = e6(r, t);
                        s = a ? s.y : s.x;
                        s = rv(s, 0, 1);
                        i.update(n, s, a);
                    }
                    if (!e5(t)) {
                        return;
                    }
                    this.checkMuted();
                    this.player_.volume(this.calculateDistance(t));
                };
                i.checkMuted = function e() {
                    if (this.player_.muted()) {
                        this.player_.muted(false);
                    }
                };
                i.getPercent = function e() {
                    if (this.player_.muted()) {
                        return 0;
                    }
                    return this.player_.volume();
                };
                i.stepForward = function e() {
                    this.checkMuted();
                    this.player_.volume(this.player_.volume() + 0.1);
                };
                i.stepBack = function e() {
                    this.checkMuted();
                    this.player_.volume(this.player_.volume() - 0.1);
                };
                i.updateARIAAttributes = function e(t) {
                    var i = this.player_.muted() ? 0 : this.volumeAsPercentage_();
                    this.el_.setAttribute("aria-valuenow", i);
                    this.el_.setAttribute("aria-valuetext", i + "%");
                };
                i.volumeAsPercentage_ = function e() {
                    return Math.round(this.player_.volume() * 100);
                };
                i.updateLastVolume_ = function e() {
                    var t = this;
                    var i = this.player_.volume();
                    this.one("sliderinactive", function() {
                        if (t.player_.volume() === 0) {
                            t.player_.lastVolume_(i);
                        }
                    });
                };
                return t;
            })(rg);
            rA.prototype.options_ = {
                children: [
                    "volumeLevel"
                ],
                barName: "volumeLevel"
            };
            if (!eT && !eu) {
                rA.prototype.options_.children.splice(0, 0, "mouseVolumeLevelDisplay");
            }
            rA.prototype.playerEvent = "volumechange";
            tj.registerComponent("VolumeBar", rA);
            var rD = (function(e) {
                (0, l.Z)(t, e);
                function t(t, i) {
                    var r;
                    if (i === void 0) {
                        i = {};
                    }
                    i.vertical = i.vertical || false;
                    if (typeof i.volumeBar === "undefined" || et(i.volumeBar)) {
                        i.volumeBar = i.volumeBar || {};
                        i.volumeBar.vertical = i.vertical;
                    }
                    r = e.call(this, t, i) || this;
                    rI((0, u.Z)(r), t);
                    r.throttledHandleMouseMove = t8(t$((0, u.Z)(r), r.handleMouseMove), tg);
                    r.handleMouseUpHandler_ = function(e) {
                        return r.handleMouseUp(e);
                    };
                    r.on("mousedown", function(e) {
                        return r.handleMouseDown(e);
                    });
                    r.on("touchstart", function(e) {
                        return r.handleMouseDown(e);
                    });
                    r.on("mousemove", function(e) {
                        return r.handleMouseMove(e);
                    });
                    r.on(r.volumeBar, [
                        "focus",
                        "slideractive"
                    ], function() {
                        r.volumeBar.addClass("vjs-slider-active");
                        r.addClass("vjs-slider-active");
                        r.trigger("slideractive");
                    });
                    r.on(r.volumeBar, [
                        "blur",
                        "sliderinactive"
                    ], function() {
                        r.volumeBar.removeClass("vjs-slider-active");
                        r.removeClass("vjs-slider-active");
                        r.trigger("sliderinactive");
                    });
                    return r;
                }
                var i = t.prototype;
                i.createEl = function t() {
                    var i = "vjs-volume-horizontal";
                    if (this.options_.vertical) {
                        i = "vjs-volume-vertical";
                    }
                    return e.prototype.createEl.call(this, "div", {
                        className: "vjs-volume-control vjs-control " + i
                    });
                };
                i.handleMouseDown = function e(t) {
                    var i = this.el_.ownerDocument;
                    this.on(i, "mousemove", this.throttledHandleMouseMove);
                    this.on(i, "touchmove", this.throttledHandleMouseMove);
                    this.on(i, "mouseup", this.handleMouseUpHandler_);
                    this.on(i, "touchend", this.handleMouseUpHandler_);
                };
                i.handleMouseUp = function e(t) {
                    var i = this.el_.ownerDocument;
                    this.off(i, "mousemove", this.throttledHandleMouseMove);
                    this.off(i, "touchmove", this.throttledHandleMouseMove);
                    this.off(i, "mouseup", this.handleMouseUpHandler_);
                    this.off(i, "touchend", this.handleMouseUpHandler_);
                };
                i.handleMouseMove = function e(t) {
                    this.volumeBar.handleMouseMove(t);
                };
                return t;
            })(tj);
            rD.prototype.options_ = {
                children: [
                    "volumeBar"
                ]
            };
            tj.registerComponent("VolumeControl", rD);
            var rO = function e(t, i) {
                if (i.tech_ && !i.tech_.featuresMuteControl) {
                    t.addClass("vjs-hidden");
                }
                t.on(i, "loadstart", function() {
                    if (!i.tech_.featuresMuteControl) {
                        t.addClass("vjs-hidden");
                    } else {
                        t.removeClass("vjs-hidden");
                    }
                });
            };
            var rR = (function(e) {
                (0, l.Z)(t, e);
                function t(t, i) {
                    var r;
                    r = e.call(this, t, i) || this;
                    rO((0, u.Z)(r), t);
                    r.on(t, [
                        "loadstart",
                        "volumechange"
                    ], function(e) {
                        return r.update(e);
                    });
                    return r;
                }
                var i = t.prototype;
                i.buildCSSClass = function t() {
                    return ("vjs-mute-control " + e.prototype.buildCSSClass.call(this));
                };
                i.handleClick = function e(t) {
                    var i = this.player_.volume();
                    var r = this.player_.lastVolume_();
                    if (i === 0) {
                        var n = r < 0.1 ? 0.1 : r;
                        this.player_.volume(n);
                        this.player_.muted(false);
                    } else {
                        this.player_.muted(this.player_.muted() ? false : true);
                    }
                };
                i.update = function e(t) {
                    this.updateIcon_();
                    this.updateControlText_();
                };
                i.updateIcon_ = function e() {
                    var t = this.player_.volume();
                    var i = 3;
                    if (eT && this.player_.tech_ && this.player_.tech_.el_) {
                        this.player_.muted(this.player_.tech_.el_.muted);
                    }
                    if (t === 0 || this.player_.muted()) {
                        i = 0;
                    } else if (t < 0.33) {
                        i = 1;
                    } else if (t < 0.67) {
                        i = 2;
                    }
                    for(var r = 0; r < 4; r++){
                        eR(this.el_, "vjs-vol-" + r);
                    }
                    eO(this.el_, "vjs-vol-" + i);
                };
                i.updateControlText_ = function e() {
                    var t = this.player_.muted() || this.player_.volume() === 0;
                    var i = t ? "Unmute" : "Mute";
                    if (this.controlText() !== i) {
                        this.controlText(i);
                    }
                };
                return t;
            })(re);
            rR.prototype.controlText_ = "Mute";
            tj.registerComponent("MuteToggle", rR);
            var rM = (function(e) {
                (0, l.Z)(t, e);
                function t(t, i) {
                    var r;
                    if (i === void 0) {
                        i = {};
                    }
                    if (typeof i.inline !== "undefined") {
                        i.inline = i.inline;
                    } else {
                        i.inline = true;
                    }
                    if (typeof i.volumeControl === "undefined" || et(i.volumeControl)) {
                        i.volumeControl = i.volumeControl || {};
                        i.volumeControl.vertical = !i.inline;
                    }
                    r = e.call(this, t, i) || this;
                    r.handleKeyPressHandler_ = function(e) {
                        return r.handleKeyPress(e);
                    };
                    r.on(t, [
                        "loadstart"
                    ], function(e) {
                        return r.volumePanelState_(e);
                    });
                    r.on(r.muteToggle, "keyup", function(e) {
                        return r.handleKeyPress(e);
                    });
                    r.on(r.volumeControl, "keyup", function(e) {
                        return r.handleVolumeControlKeyUp(e);
                    });
                    r.on("keydown", function(e) {
                        return r.handleKeyPress(e);
                    });
                    r.on("mouseover", function(e) {
                        return r.handleMouseOver(e);
                    });
                    r.on("mouseout", function(e) {
                        return r.handleMouseOut(e);
                    });
                    r.on(r.volumeControl, [
                        "slideractive"
                    ], r.sliderActive_);
                    r.on(r.volumeControl, [
                        "sliderinactive"
                    ], r.sliderInactive_);
                    return r;
                }
                var i = t.prototype;
                i.sliderActive_ = function e() {
                    this.addClass("vjs-slider-active");
                };
                i.sliderInactive_ = function e() {
                    this.removeClass("vjs-slider-active");
                };
                i.volumePanelState_ = function e() {
                    if (this.volumeControl.hasClass("vjs-hidden") && this.muteToggle.hasClass("vjs-hidden")) {
                        this.addClass("vjs-hidden");
                    }
                    if (this.volumeControl.hasClass("vjs-hidden") && !this.muteToggle.hasClass("vjs-hidden")) {
                        this.addClass("vjs-mute-toggle-only");
                    }
                };
                i.createEl = function t() {
                    var i = "vjs-volume-panel-horizontal";
                    if (!this.options_.inline) {
                        i = "vjs-volume-panel-vertical";
                    }
                    return e.prototype.createEl.call(this, "div", {
                        className: "vjs-volume-panel vjs-control " + i
                    });
                };
                i.dispose = function t() {
                    this.handleMouseOut();
                    e.prototype.dispose.call(this);
                };
                i.handleVolumeControlKeyUp = function e(t) {
                    if (f().isEventKey(t, "Esc")) {
                        this.muteToggle.focus();
                    }
                };
                i.handleMouseOver = function e(t) {
                    this.addClass("vjs-hover");
                    tc(s(), "keyup", this.handleKeyPressHandler_);
                };
                i.handleMouseOut = function e(t) {
                    this.removeClass("vjs-hover");
                    th(s(), "keyup", this.handleKeyPressHandler_);
                };
                i.handleKeyPress = function e(t) {
                    if (f().isEventKey(t, "Esc")) {
                        this.handleMouseOut();
                    }
                };
                return t;
            })(tj);
            rM.prototype.options_ = {
                children: [
                    "muteToggle",
                    "volumeControl"
                ]
            };
            tj.registerComponent("VolumePanel", rM);
            var r0 = (function(e) {
                (0, l.Z)(t, e);
                function t(t, i) {
                    var r;
                    r = e.call(this, t, i) || this;
                    if (i) {
                        r.menuButton_ = i.menuButton;
                    }
                    r.focusedChild_ = -1;
                    r.on("keydown", function(e) {
                        return r.handleKeyDown(e);
                    });
                    r.boundHandleBlur_ = function(e) {
                        return r.handleBlur(e);
                    };
                    r.boundHandleTapClick_ = function(e) {
                        return r.handleTapClick(e);
                    };
                    return r;
                }
                var i = t.prototype;
                i.addEventListenerForItem = function e(t) {
                    if (!(t instanceof tj)) {
                        return;
                    }
                    this.on(t, "blur", this.boundHandleBlur_);
                    this.on(t, [
                        "tap",
                        "click"
                    ], this.boundHandleTapClick_);
                };
                i.removeEventListenerForItem = function e(t) {
                    if (!(t instanceof tj)) {
                        return;
                    }
                    this.off(t, "blur", this.boundHandleBlur_);
                    this.off(t, [
                        "tap",
                        "click"
                    ], this.boundHandleTapClick_);
                };
                i.removeChild = function t(i) {
                    if (typeof i === "string") {
                        i = this.getChild(i);
                    }
                    this.removeEventListenerForItem(i);
                    e.prototype.removeChild.call(this, i);
                };
                i.addItem = function e(t) {
                    var i = this.addChild(t);
                    if (i) {
                        this.addEventListenerForItem(i);
                    }
                };
                i.createEl = function t() {
                    var i = this.options_.contentElType || "ul";
                    this.contentEl_ = e_(i, {
                        className: "vjs-menu-content"
                    });
                    this.contentEl_.setAttribute("role", "menu");
                    var r = e.prototype.createEl.call(this, "div", {
                        append: this.contentEl_,
                        className: "vjs-menu"
                    });
                    r.appendChild(this.contentEl_);
                    tc(r, "click", function(e) {
                        e.preventDefault();
                        e.stopImmediatePropagation();
                    });
                    return r;
                };
                i.dispose = function t() {
                    this.contentEl_ = null;
                    this.boundHandleBlur_ = null;
                    this.boundHandleTapClick_ = null;
                    e.prototype.dispose.call(this);
                };
                i.handleBlur = function e(t) {
                    var i = t.relatedTarget || s().activeElement;
                    if (!this.children().some(function(e) {
                        return e.el() === i;
                    })) {
                        var r = this.menuButton_;
                        if (r && r.buttonPressed_ && i !== r.el().firstChild) {
                            r.unpressButton();
                        }
                    }
                };
                i.handleTapClick = function e(t) {
                    if (this.menuButton_) {
                        this.menuButton_.unpressButton();
                        var i = this.children();
                        if (!Array.isArray(i)) {
                            return;
                        }
                        var r = i.filter(function(e) {
                            return e.el() === t.target;
                        })[0];
                        if (!r) {
                            return;
                        }
                        if (r.name() !== "CaptionSettingsMenuItem") {
                            this.menuButton_.focus();
                        }
                    }
                };
                i.handleKeyDown = function e(t) {
                    if (f().isEventKey(t, "Left") || f().isEventKey(t, "Down")) {
                        t.preventDefault();
                        t.stopPropagation();
                        this.stepForward();
                    } else if (f().isEventKey(t, "Right") || f().isEventKey(t, "Up")) {
                        t.preventDefault();
                        t.stopPropagation();
                        this.stepBack();
                    }
                };
                i.stepForward = function e() {
                    var t = 0;
                    if (this.focusedChild_ !== undefined) {
                        t = this.focusedChild_ + 1;
                    }
                    this.focus(t);
                };
                i.stepBack = function e() {
                    var t = 0;
                    if (this.focusedChild_ !== undefined) {
                        t = this.focusedChild_ - 1;
                    }
                    this.focus(t);
                };
                i.focus = function e(t) {
                    if (t === void 0) {
                        t = 0;
                    }
                    var i = this.children().slice();
                    var r = i.length && i[0].hasClass("vjs-menu-title");
                    if (r) {
                        i.shift();
                    }
                    if (i.length > 0) {
                        if (t < 0) {
                            t = 0;
                        } else if (t >= i.length) {
                            t = i.length - 1;
                        }
                        this.focusedChild_ = t;
                        i[t].el_.focus();
                    }
                };
                return t;
            })(tj);
            tj.registerComponent("Menu", r0);
            var rU = (function(e) {
                (0, l.Z)(t, e);
                function t(t, i) {
                    var r;
                    if (i === void 0) {
                        i = {};
                    }
                    r = e.call(this, t, i) || this;
                    r.menuButton_ = new re(t, i);
                    r.menuButton_.controlText(r.controlText_);
                    r.menuButton_.el_.setAttribute("aria-haspopup", "true");
                    var n = re.prototype.buildCSSClass();
                    r.menuButton_.el_.className = r.buildCSSClass() + " " + n;
                    r.menuButton_.removeClass("vjs-control");
                    r.addChild(r.menuButton_);
                    r.update();
                    r.enabled_ = true;
                    var a = function e(t) {
                        return r.handleClick(t);
                    };
                    r.handleMenuKeyUp_ = function(e) {
                        return r.handleMenuKeyUp(e);
                    };
                    r.on(r.menuButton_, "tap", a);
                    r.on(r.menuButton_, "click", a);
                    r.on(r.menuButton_, "keydown", function(e) {
                        return r.handleKeyDown(e);
                    });
                    r.on(r.menuButton_, "mouseenter", function() {
                        r.addClass("vjs-hover");
                        r.menu.show();
                        tc(s(), "keyup", r.handleMenuKeyUp_);
                    });
                    r.on("mouseleave", function(e) {
                        return r.handleMouseLeave(e);
                    });
                    r.on("keydown", function(e) {
                        return r.handleSubmenuKeyDown(e);
                    });
                    return r;
                }
                var i = t.prototype;
                i.update = function e() {
                    var t = this.createMenu();
                    if (this.menu) {
                        this.menu.dispose();
                        this.removeChild(this.menu);
                    }
                    this.menu = t;
                    this.addChild(t);
                    this.buttonPressed_ = false;
                    this.menuButton_.el_.setAttribute("aria-expanded", "false");
                    if (this.items && this.items.length <= this.hideThreshold_) {
                        this.hide();
                    } else {
                        this.show();
                    }
                };
                i.createMenu = function e() {
                    var t = new r0(this.player_, {
                        menuButton: this
                    });
                    this.hideThreshold_ = 0;
                    if (this.options_.title) {
                        var i = e_("li", {
                            className: "vjs-menu-title",
                            textContent: tM(this.options_.title),
                            tabIndex: -1
                        });
                        var r = new tj(this.player_, {
                            el: i
                        });
                        t.addItem(r);
                    }
                    this.items = this.createItems();
                    if (this.items) {
                        for(var n = 0; n < this.items.length; n++){
                            t.addItem(this.items[n]);
                        }
                    }
                    return t;
                };
                i.createItems = function e() {};
                i.createEl = function t() {
                    return e.prototype.createEl.call(this, "div", {
                        className: this.buildWrapperCSSClass()
                    }, {});
                };
                i.buildWrapperCSSClass = function t() {
                    var i = "vjs-menu-button";
                    if (this.options_.inline === true) {
                        i += "-inline";
                    } else {
                        i += "-popup";
                    }
                    var r = re.prototype.buildCSSClass();
                    return ("vjs-menu-button " + i + " " + r + " " + e.prototype.buildCSSClass.call(this));
                };
                i.buildCSSClass = function t() {
                    var i = "vjs-menu-button";
                    if (this.options_.inline === true) {
                        i += "-inline";
                    } else {
                        i += "-popup";
                    }
                    return ("vjs-menu-button " + i + " " + e.prototype.buildCSSClass.call(this));
                };
                i.controlText = function e(t, i) {
                    if (i === void 0) {
                        i = this.menuButton_.el();
                    }
                    return this.menuButton_.controlText(t, i);
                };
                i.dispose = function t() {
                    this.handleMouseLeave();
                    e.prototype.dispose.call(this);
                };
                i.handleClick = function e(t) {
                    if (this.buttonPressed_) {
                        this.unpressButton();
                    } else {
                        this.pressButton();
                    }
                };
                i.handleMouseLeave = function e(t) {
                    this.removeClass("vjs-hover");
                    th(s(), "keyup", this.handleMenuKeyUp_);
                };
                i.focus = function e() {
                    this.menuButton_.focus();
                };
                i.blur = function e() {
                    this.menuButton_.blur();
                };
                i.handleKeyDown = function e(t) {
                    if (f().isEventKey(t, "Esc") || f().isEventKey(t, "Tab")) {
                        if (this.buttonPressed_) {
                            this.unpressButton();
                        }
                        if (!f().isEventKey(t, "Tab")) {
                            t.preventDefault();
                            this.menuButton_.focus();
                        }
                    } else if (f().isEventKey(t, "Up") || f().isEventKey(t, "Down")) {
                        if (!this.buttonPressed_) {
                            t.preventDefault();
                            this.pressButton();
                        }
                    }
                };
                i.handleMenuKeyUp = function e(t) {
                    if (f().isEventKey(t, "Esc") || f().isEventKey(t, "Tab")) {
                        this.removeClass("vjs-hover");
                    }
                };
                i.handleSubmenuKeyPress = function e(t) {
                    this.handleSubmenuKeyDown(t);
                };
                i.handleSubmenuKeyDown = function e(t) {
                    if (f().isEventKey(t, "Esc") || f().isEventKey(t, "Tab")) {
                        if (this.buttonPressed_) {
                            this.unpressButton();
                        }
                        if (!f().isEventKey(t, "Tab")) {
                            t.preventDefault();
                            this.menuButton_.focus();
                        }
                    }
                };
                i.pressButton = function e() {
                    if (this.enabled_) {
                        this.buttonPressed_ = true;
                        this.menu.show();
                        this.menu.lockShowing();
                        this.menuButton_.el_.setAttribute("aria-expanded", "true");
                        if (eT && eI()) {
                            return;
                        }
                        this.menu.focus();
                    }
                };
                i.unpressButton = function e() {
                    if (this.enabled_) {
                        this.buttonPressed_ = false;
                        this.menu.unlockShowing();
                        this.menu.hide();
                        this.menuButton_.el_.setAttribute("aria-expanded", "false");
                    }
                };
                i.disable = function e() {
                    this.unpressButton();
                    this.enabled_ = false;
                    this.addClass("vjs-disabled");
                    this.menuButton_.disable();
                };
                i.enable = function e() {
                    this.enabled_ = true;
                    this.removeClass("vjs-disabled");
                    this.menuButton_.enable();
                };
                return t;
            })(tj);
            tj.registerComponent("MenuButton", rU);
            var rB = (function(e) {
                (0, l.Z)(t, e);
                function t(t, i) {
                    var r;
                    var n = i.tracks;
                    r = e.call(this, t, i) || this;
                    if (r.items.length <= 1) {
                        r.hide();
                    }
                    if (!n) {
                        return (0, u.Z)(r);
                    }
                    var a = t$((0, u.Z)(r), r.update);
                    n.addEventListener("removetrack", a);
                    n.addEventListener("addtrack", a);
                    n.addEventListener("labelchange", a);
                    r.player_.on("ready", a);
                    r.player_.on("dispose", function() {
                        n.removeEventListener("removetrack", a);
                        n.removeEventListener("addtrack", a);
                        n.removeEventListener("labelchange", a);
                    });
                    return r;
                }
                return t;
            })(rU);
            tj.registerComponent("TrackButton", rB);
            var rF = [
                "Tab",
                "Esc",
                "Up",
                "Down",
                "Right",
                "Left"
            ];
            var rN = (function(e) {
                (0, l.Z)(t, e);
                function t(t, i) {
                    var r;
                    r = e.call(this, t, i) || this;
                    r.selectable = i.selectable;
                    r.isSelected_ = i.selected || false;
                    r.multiSelectable = i.multiSelectable;
                    r.selected(r.isSelected_);
                    if (r.selectable) {
                        if (r.multiSelectable) {
                            r.el_.setAttribute("role", "menuitemcheckbox");
                        } else {
                            r.el_.setAttribute("role", "menuitemradio");
                        }
                    } else {
                        r.el_.setAttribute("role", "menuitem");
                    }
                    return r;
                }
                var i = t.prototype;
                i.createEl = function t(i, r, n) {
                    this.nonIconControl = true;
                    var a = e.prototype.createEl.call(this, "li", J({
                        className: "vjs-menu-item",
                        tabIndex: -1
                    }, r), n);
                    a.replaceChild(e_("span", {
                        className: "vjs-menu-item-text",
                        textContent: this.localize(this.options_.label)
                    }), a.querySelector(".vjs-icon-placeholder"));
                    return a;
                };
                i.handleKeyDown = function t(i) {
                    if (!rF.some(function(e) {
                        return f().isEventKey(i, e);
                    })) {
                        e.prototype.handleKeyDown.call(this, i);
                    }
                };
                i.handleClick = function e(t) {
                    this.selected(true);
                };
                i.selected = function e(t) {
                    if (this.selectable) {
                        if (t) {
                            this.addClass("vjs-selected");
                            this.el_.setAttribute("aria-checked", "true");
                            this.controlText(", selected");
                            this.isSelected_ = true;
                        } else {
                            this.removeClass("vjs-selected");
                            this.el_.setAttribute("aria-checked", "false");
                            this.controlText("");
                            this.isSelected_ = false;
                        }
                    }
                };
                return t;
            })(iG);
            tj.registerComponent("MenuItem", rN);
            var r1 = (function(e) {
                (0, l.Z)(t, e);
                function t(t, i) {
                    var r;
                    var a = i.track;
                    var o = t.textTracks();
                    i.label = a.label || a.language || "Unknown";
                    i.selected = a.mode === "showing";
                    r = e.call(this, t, i) || this;
                    r.track = a;
                    r.kinds = (i.kinds || [
                        i.kind || r.track.kind
                    ]).filter(Boolean);
                    var l = function e() {
                        for(var t = arguments.length, i = new Array(t), n = 0; n < t; n++){
                            i[n] = arguments[n];
                        }
                        r.handleTracksChange.apply((0, u.Z)(r), i);
                    };
                    var d = function e() {
                        for(var t = arguments.length, i = new Array(t), n = 0; n < t; n++){
                            i[n] = arguments[n];
                        }
                        r.handleSelectedLanguageChange.apply((0, u.Z)(r), i);
                    };
                    t.on([
                        "loadstart",
                        "texttrackchange"
                    ], l);
                    o.addEventListener("change", l);
                    o.addEventListener("selectedlanguagechange", d);
                    r.on("dispose", function() {
                        t.off([
                            "loadstart",
                            "texttrackchange"
                        ], l);
                        o.removeEventListener("change", l);
                        o.removeEventListener("selectedlanguagechange", d);
                    });
                    if (o.onchange === undefined) {
                        var c;
                        r.on([
                            "tap",
                            "click"
                        ], function() {
                            if (typeof n().Event !== "object") {
                                try {
                                    c = new (n().Event)("change");
                                } catch (e) {}
                            }
                            if (!c) {
                                c = s().createEvent("Event");
                                c.initEvent("change", true, true);
                            }
                            o.dispatchEvent(c);
                        });
                    }
                    r.handleTracksChange();
                    return r;
                }
                var i = t.prototype;
                i.handleClick = function t(i) {
                    var r = this.track;
                    var n = this.player_.textTracks();
                    e.prototype.handleClick.call(this, i);
                    if (!n) {
                        return;
                    }
                    for(var a = 0; a < n.length; a++){
                        var s = n[a];
                        if (this.kinds.indexOf(s.kind) === -1) {
                            continue;
                        }
                        if (s === r) {
                            if (s.mode !== "showing") {
                                s.mode = "showing";
                            }
                        } else if (s.mode !== "disabled") {
                            s.mode = "disabled";
                        }
                    }
                };
                i.handleTracksChange = function e(t) {
                    var i = this.track.mode === "showing";
                    if (i !== this.isSelected_) {
                        this.selected(i);
                    }
                };
                i.handleSelectedLanguageChange = function e(t) {
                    if (this.track.mode === "showing") {
                        var i = this.player_.cache_.selectedLanguage;
                        if (i && i.enabled && i.language === this.track.language && i.kind !== this.track.kind) {
                            return;
                        }
                        this.player_.cache_.selectedLanguage = {
                            enabled: true,
                            language: this.track.language,
                            kind: this.track.kind
                        };
                    }
                };
                i.dispose = function t() {
                    this.track = null;
                    e.prototype.dispose.call(this);
                };
                return t;
            })(rN);
            tj.registerComponent("TextTrackMenuItem", r1);
            var rj = (function(e) {
                (0, l.Z)(t, e);
                function t(t, i) {
                    i.track = {
                        player: t,
                        kind: i.kind,
                        kinds: i.kinds,
                        default: false,
                        mode: "disabled"
                    };
                    if (!i.kinds) {
                        i.kinds = [
                            i.kind
                        ];
                    }
                    if (i.label) {
                        i.track.label = i.label;
                    } else {
                        i.track.label = i.kinds.join(" and ") + " off";
                    }
                    i.selectable = true;
                    i.multiSelectable = false;
                    return (e.call(this, t, i) || this);
                }
                var i = t.prototype;
                i.handleTracksChange = function e(t) {
                    var i = this.player().textTracks();
                    var r = true;
                    for(var n = 0, a = i.length; n < a; n++){
                        var s = i[n];
                        if (this.options_.kinds.indexOf(s.kind) > -1 && s.mode === "showing") {
                            r = false;
                            break;
                        }
                    }
                    if (r !== this.isSelected_) {
                        this.selected(r);
                    }
                };
                i.handleSelectedLanguageChange = function e(t) {
                    var i = this.player().textTracks();
                    var r = true;
                    for(var n = 0, a = i.length; n < a; n++){
                        var s = i[n];
                        if ([
                            "captions",
                            "descriptions",
                            "subtitles", 
                        ].indexOf(s.kind) > -1 && s.mode === "showing") {
                            r = false;
                            break;
                        }
                    }
                    if (r) {
                        this.player_.cache_.selectedLanguage = {
                            enabled: false
                        };
                    }
                };
                return t;
            })(r1);
            tj.registerComponent("OffTextTrackMenuItem", rj);
            var r2 = (function(e) {
                (0, l.Z)(t, e);
                function t(t, i) {
                    if (i === void 0) {
                        i = {};
                    }
                    i.tracks = t.textTracks();
                    return e.call(this, t, i) || this;
                }
                var i = t.prototype;
                i.createItems = function e(t, i) {
                    if (t === void 0) {
                        t = [];
                    }
                    if (i === void 0) {
                        i = r1;
                    }
                    var r;
                    if (this.label_) {
                        r = this.label_ + " off";
                    }
                    t.push(new rj(this.player_, {
                        kinds: this.kinds_,
                        kind: this.kind_,
                        label: r
                    }));
                    this.hideThreshold_ += 1;
                    var n = this.player_.textTracks();
                    if (!Array.isArray(this.kinds_)) {
                        this.kinds_ = [
                            this.kind_
                        ];
                    }
                    for(var a = 0; a < n.length; a++){
                        var s = n[a];
                        if (this.kinds_.indexOf(s.kind) > -1) {
                            var o = new i(this.player_, {
                                track: s,
                                kinds: this.kinds_,
                                kind: this.kind_,
                                selectable: true,
                                multiSelectable: false
                            });
                            o.addClass("vjs-" + s.kind + "-menu-item");
                            t.push(o);
                        }
                    }
                    return t;
                };
                return t;
            })(rB);
            tj.registerComponent("TextTrackButton", r2);
            var rH = (function(e) {
                (0, l.Z)(t, e);
                function t(t, i) {
                    var r;
                    var n = i.track;
                    var a = i.cue;
                    var s = t.currentTime();
                    i.selectable = true;
                    i.multiSelectable = false;
                    i.label = a.text;
                    i.selected = a.startTime <= s && s < a.endTime;
                    r = e.call(this, t, i) || this;
                    r.track = n;
                    r.cue = a;
                    n.addEventListener("cuechange", t$((0, u.Z)(r), r.update));
                    return r;
                }
                var i = t.prototype;
                i.handleClick = function t(i) {
                    e.prototype.handleClick.call(this);
                    this.player_.currentTime(this.cue.startTime);
                    this.update(this.cue.startTime);
                };
                i.update = function e(t) {
                    var i = this.cue;
                    var r = this.player_.currentTime();
                    this.selected(i.startTime <= r && r < i.endTime);
                };
                return t;
            })(rN);
            tj.registerComponent("ChaptersTrackMenuItem", rH);
            var r6 = (function(e) {
                (0, l.Z)(t, e);
                function t(t, i, r) {
                    return (e.call(this, t, i, r) || this);
                }
                var i = t.prototype;
                i.buildCSSClass = function t() {
                    return ("vjs-chapters-button " + e.prototype.buildCSSClass.call(this));
                };
                i.buildWrapperCSSClass = function t() {
                    return ("vjs-chapters-button " + e.prototype.buildWrapperCSSClass.call(this));
                };
                i.update = function t(i) {
                    if (!this.track_ || (i && (i.type === "addtrack" || i.type === "removetrack"))) {
                        this.setTrack(this.findChaptersTrack());
                    }
                    e.prototype.update.call(this);
                };
                i.setTrack = function e(t) {
                    if (this.track_ === t) {
                        return;
                    }
                    if (!this.updateHandler_) {
                        this.updateHandler_ = this.update.bind(this);
                    }
                    if (this.track_) {
                        var i = this.player_.remoteTextTrackEls().getTrackElementByTrack_(this.track_);
                        if (i) {
                            i.removeEventListener("load", this.updateHandler_);
                        }
                        this.track_ = null;
                    }
                    this.track_ = t;
                    if (this.track_) {
                        this.track_.mode = "hidden";
                        var r = this.player_.remoteTextTrackEls().getTrackElementByTrack_(this.track_);
                        if (r) {
                            r.addEventListener("load", this.updateHandler_);
                        }
                    }
                };
                i.findChaptersTrack = function e() {
                    var t = this.player_.textTracks() || [];
                    for(var i = t.length - 1; i >= 0; i--){
                        var r = t[i];
                        if (r.kind === this.kind_) {
                            return r;
                        }
                    }
                };
                i.getMenuCaption = function e() {
                    if (this.track_ && this.track_.label) {
                        return this.track_.label;
                    }
                    return this.localize(tM(this.kind_));
                };
                i.createMenu = function t() {
                    this.options_.title = this.getMenuCaption();
                    return e.prototype.createMenu.call(this);
                };
                i.createItems = function e() {
                    var t = [];
                    if (!this.track_) {
                        return t;
                    }
                    var i = this.track_.cues;
                    if (!i) {
                        return t;
                    }
                    for(var r = 0, n = i.length; r < n; r++){
                        var a = i[r];
                        var s = new rH(this.player_, {
                            track: this.track_,
                            cue: a
                        });
                        t.push(s);
                    }
                    return t;
                };
                return t;
            })(r2);
            r6.prototype.kind_ = "chapters";
            r6.prototype.controlText_ = "Chapters";
            tj.registerComponent("ChaptersButton", r6);
            var rq = (function(e) {
                (0, l.Z)(t, e);
                function t(t, i, r) {
                    var n;
                    n = e.call(this, t, i, r) || this;
                    var a = t.textTracks();
                    var s = t$((0, u.Z)(n), n.handleTracksChange);
                    a.addEventListener("change", s);
                    n.on("dispose", function() {
                        a.removeEventListener("change", s);
                    });
                    return n;
                }
                var i = t.prototype;
                i.handleTracksChange = function e(t) {
                    var i = this.player().textTracks();
                    var r = false;
                    for(var n = 0, a = i.length; n < a; n++){
                        var s = i[n];
                        if (s.kind !== this.kind_ && s.mode === "showing") {
                            r = true;
                            break;
                        }
                    }
                    if (r) {
                        this.disable();
                    } else {
                        this.enable();
                    }
                };
                i.buildCSSClass = function t() {
                    return ("vjs-descriptions-button " + e.prototype.buildCSSClass.call(this));
                };
                i.buildWrapperCSSClass = function t() {
                    return ("vjs-descriptions-button " + e.prototype.buildWrapperCSSClass.call(this));
                };
                return t;
            })(r2);
            rq.prototype.kind_ = "descriptions";
            rq.prototype.controlText_ = "Descriptions";
            tj.registerComponent("DescriptionsButton", rq);
            var rV = (function(e) {
                (0, l.Z)(t, e);
                function t(t, i, r) {
                    return (e.call(this, t, i, r) || this);
                }
                var i = t.prototype;
                i.buildCSSClass = function t() {
                    return ("vjs-subtitles-button " + e.prototype.buildCSSClass.call(this));
                };
                i.buildWrapperCSSClass = function t() {
                    return ("vjs-subtitles-button " + e.prototype.buildWrapperCSSClass.call(this));
                };
                return t;
            })(r2);
            rV.prototype.kind_ = "subtitles";
            rV.prototype.controlText_ = "Subtitles";
            tj.registerComponent("SubtitlesButton", rV);
            var rW = (function(e) {
                (0, l.Z)(t, e);
                function t(t, i) {
                    var r;
                    i.track = {
                        player: t,
                        kind: i.kind,
                        label: i.kind + " settings",
                        selectable: false,
                        default: false,
                        mode: "disabled"
                    };
                    i.selectable = false;
                    i.name = "CaptionSettingsMenuItem";
                    r = e.call(this, t, i) || this;
                    r.addClass("vjs-texttrack-settings");
                    r.controlText(", opens " + i.kind + " settings dialog");
                    return r;
                }
                var i = t.prototype;
                i.handleClick = function e(t) {
                    this.player().getChild("textTrackSettings").open();
                };
                return t;
            })(r1);
            tj.registerComponent("CaptionSettingsMenuItem", rW);
            var r3 = (function(e) {
                (0, l.Z)(t, e);
                function t(t, i, r) {
                    return (e.call(this, t, i, r) || this);
                }
                var i = t.prototype;
                i.buildCSSClass = function t() {
                    return ("vjs-captions-button " + e.prototype.buildCSSClass.call(this));
                };
                i.buildWrapperCSSClass = function t() {
                    return ("vjs-captions-button " + e.prototype.buildWrapperCSSClass.call(this));
                };
                i.createItems = function t() {
                    var i = [];
                    if (!(this.player().tech_ && this.player().tech_.featuresNativeTextTracks) && this.player().getChild("textTrackSettings")) {
                        i.push(new rW(this.player_, {
                            kind: this.kind_
                        }));
                        this.hideThreshold_ += 1;
                    }
                    return e.prototype.createItems.call(this, i);
                };
                return t;
            })(r2);
            r3.prototype.kind_ = "captions";
            r3.prototype.controlText_ = "Captions";
            tj.registerComponent("CaptionsButton", r3);
            var r4 = (function(e) {
                (0, l.Z)(t, e);
                function t() {
                    return e.apply(this, arguments) || this;
                }
                var i = t.prototype;
                i.createEl = function t(i, r, n) {
                    var a = e.prototype.createEl.call(this, i, r, n);
                    var s = a.querySelector(".vjs-menu-item-text");
                    if (this.options_.track.kind === "captions") {
                        s.appendChild(e_("span", {
                            className: "vjs-icon-placeholder"
                        }, {
                            "aria-hidden": true
                        }));
                        s.appendChild(e_("span", {
                            className: "vjs-control-text",
                            textContent: " " + this.localize("Captions")
                        }));
                    }
                    return a;
                };
                return t;
            })(r1);
            tj.registerComponent("SubsCapsMenuItem", r4);
            var r5 = (function(e) {
                (0, l.Z)(t, e);
                function t(t, i) {
                    var r;
                    if (i === void 0) {
                        i = {};
                    }
                    r = e.call(this, t, i) || this;
                    r.label_ = "subtitles";
                    if ([
                        "en",
                        "en-us",
                        "en-ca",
                        "fr-ca"
                    ].indexOf(r.player_.language_) > -1) {
                        r.label_ = "captions";
                    }
                    r.menuButton_.controlText(tM(r.label_));
                    return r;
                }
                var i = t.prototype;
                i.buildCSSClass = function t() {
                    return ("vjs-subs-caps-button " + e.prototype.buildCSSClass.call(this));
                };
                i.buildWrapperCSSClass = function t() {
                    return ("vjs-subs-caps-button " + e.prototype.buildWrapperCSSClass.call(this));
                };
                i.createItems = function t() {
                    var i = [];
                    if (!(this.player().tech_ && this.player().tech_.featuresNativeTextTracks) && this.player().getChild("textTrackSettings")) {
                        i.push(new rW(this.player_, {
                            kind: this.label_
                        }));
                        this.hideThreshold_ += 1;
                    }
                    i = e.prototype.createItems.call(this, i, r4);
                    return i;
                };
                return t;
            })(r2);
            r5.prototype.kinds_ = [
                "captions",
                "subtitles"
            ];
            r5.prototype.controlText_ = "Subtitles";
            tj.registerComponent("SubsCapsButton", r5);
            var rz = (function(e) {
                (0, l.Z)(t, e);
                function t(t, i) {
                    var r;
                    var n = i.track;
                    var a = t.audioTracks();
                    i.label = n.label || n.language || "Unknown";
                    i.selected = n.enabled;
                    r = e.call(this, t, i) || this;
                    r.track = n;
                    r.addClass("vjs-" + n.kind + "-menu-item");
                    var s = function e() {
                        for(var t = arguments.length, i = new Array(t), n = 0; n < t; n++){
                            i[n] = arguments[n];
                        }
                        r.handleTracksChange.apply((0, u.Z)(r), i);
                    };
                    a.addEventListener("change", s);
                    r.on("dispose", function() {
                        a.removeEventListener("change", s);
                    });
                    return r;
                }
                var i = t.prototype;
                i.createEl = function t(i, r, n) {
                    var a = e.prototype.createEl.call(this, i, r, n);
                    var s = a.querySelector(".vjs-menu-item-text");
                    if (this.options_.track.kind === "main-desc") {
                        s.appendChild(e.prototype.createEl.call(this, "span", {
                            className: "vjs-icon-placeholder"
                        }, {
                            "aria-hidden": true
                        }));
                        s.appendChild(e.prototype.createEl.call(this, "span", {
                            className: "vjs-control-text",
                            textContent: this.localize("Descriptions")
                        }));
                    }
                    return a;
                };
                i.handleClick = function t(i) {
                    e.prototype.handleClick.call(this, i);
                    this.track.enabled = true;
                };
                i.handleTracksChange = function e(t) {
                    this.selected(this.track.enabled);
                };
                return t;
            })(rN);
            tj.registerComponent("AudioTrackMenuItem", rz);
            var rG = (function(e) {
                (0, l.Z)(t, e);
                function t(t, i) {
                    if (i === void 0) {
                        i = {};
                    }
                    i.tracks = t.audioTracks();
                    return e.call(this, t, i) || this;
                }
                var i = t.prototype;
                i.buildCSSClass = function t() {
                    return ("vjs-audio-button " + e.prototype.buildCSSClass.call(this));
                };
                i.buildWrapperCSSClass = function t() {
                    return ("vjs-audio-button " + e.prototype.buildWrapperCSSClass.call(this));
                };
                i.createItems = function e(t) {
                    if (t === void 0) {
                        t = [];
                    }
                    this.hideThreshold_ = 1;
                    var i = this.player_.audioTracks();
                    for(var r = 0; r < i.length; r++){
                        var n = i[r];
                        t.push(new rz(this.player_, {
                            track: n,
                            selectable: true,
                            multiSelectable: false
                        }));
                    }
                    return t;
                };
                return t;
            })(rB);
            rG.prototype.controlText_ = "Audio Track";
            tj.registerComponent("AudioTrackButton", rG);
            var rK = (function(e) {
                (0, l.Z)(t, e);
                function t(t, i) {
                    var r;
                    var n = i.rate;
                    var a = parseFloat(n, 10);
                    i.label = n;
                    i.selected = a === t.playbackRate();
                    i.selectable = true;
                    i.multiSelectable = false;
                    r = e.call(this, t, i) || this;
                    r.label = n;
                    r.rate = a;
                    r.on(t, "ratechange", function(e) {
                        return r.update(e);
                    });
                    return r;
                }
                var i = t.prototype;
                i.handleClick = function t(i) {
                    e.prototype.handleClick.call(this);
                    this.player().playbackRate(this.rate);
                };
                i.update = function e(t) {
                    this.selected(this.player().playbackRate() === this.rate);
                };
                return t;
            })(rN);
            rK.prototype.contentElType = "button";
            tj.registerComponent("PlaybackRateMenuItem", rK);
            var rZ = (function(e) {
                (0, l.Z)(t, e);
                function t(t, i) {
                    var r;
                    r = e.call(this, t, i) || this;
                    r.menuButton_.el_.setAttribute("aria-describedby", r.labelElId_);
                    r.updateVisibility();
                    r.updateLabel();
                    r.on(t, "loadstart", function(e) {
                        return r.updateVisibility(e);
                    });
                    r.on(t, "ratechange", function(e) {
                        return r.updateLabel(e);
                    });
                    r.on(t, "playbackrateschange", function(e) {
                        return r.handlePlaybackRateschange(e);
                    });
                    return r;
                }
                var i = t.prototype;
                i.createEl = function t() {
                    var i = e.prototype.createEl.call(this);
                    this.labelElId_ = "vjs-playback-rate-value-label-" + this.id_;
                    this.labelEl_ = e_("div", {
                        className: "vjs-playback-rate-value",
                        id: this.labelElId_,
                        textContent: "1x"
                    });
                    i.appendChild(this.labelEl_);
                    return i;
                };
                i.dispose = function t() {
                    this.labelEl_ = null;
                    e.prototype.dispose.call(this);
                };
                i.buildCSSClass = function t() {
                    return ("vjs-playback-rate " + e.prototype.buildCSSClass.call(this));
                };
                i.buildWrapperCSSClass = function t() {
                    return ("vjs-playback-rate " + e.prototype.buildWrapperCSSClass.call(this));
                };
                i.createItems = function e() {
                    var t = this.playbackRates();
                    var i = [];
                    for(var r = t.length - 1; r >= 0; r--){
                        i.push(new rK(this.player(), {
                            rate: t[r] + "x"
                        }));
                    }
                    return i;
                };
                i.updateARIAAttributes = function e() {
                    this.el().setAttribute("aria-valuenow", this.player().playbackRate());
                };
                i.handleClick = function e(t) {
                    var i = this.player().playbackRate();
                    var r = this.playbackRates();
                    var n = r[0];
                    for(var a = 0; a < r.length; a++){
                        if (r[a] > i) {
                            n = r[a];
                            break;
                        }
                    }
                    this.player().playbackRate(n);
                };
                i.handlePlaybackRateschange = function e(t) {
                    this.update();
                };
                i.playbackRates = function e() {
                    var t = this.player();
                    return ((t.playbackRates && t.playbackRates()) || []);
                };
                i.playbackRateSupported = function e() {
                    return (this.player().tech_ && this.player().tech_.featuresPlaybackRate && this.playbackRates() && this.playbackRates().length > 0);
                };
                i.updateVisibility = function e(t) {
                    if (this.playbackRateSupported()) {
                        this.removeClass("vjs-hidden");
                    } else {
                        this.addClass("vjs-hidden");
                    }
                };
                i.updateLabel = function e(t) {
                    if (this.playbackRateSupported()) {
                        this.labelEl_.textContent = this.player().playbackRate() + "x";
                    }
                };
                return t;
            })(rU);
            rZ.prototype.controlText_ = "Playback Rate";
            tj.registerComponent("PlaybackRateMenuButton", rZ);
            var rQ = (function(e) {
                (0, l.Z)(t, e);
                function t() {
                    return e.apply(this, arguments) || this;
                }
                var i = t.prototype;
                i.buildCSSClass = function t() {
                    return ("vjs-spacer " + e.prototype.buildCSSClass.call(this));
                };
                i.createEl = function t(i, r, n) {
                    if (i === void 0) {
                        i = "div";
                    }
                    if (r === void 0) {
                        r = {};
                    }
                    if (n === void 0) {
                        n = {};
                    }
                    if (!r.className) {
                        r.className = this.buildCSSClass();
                    }
                    return e.prototype.createEl.call(this, i, r, n);
                };
                return t;
            })(tj);
            tj.registerComponent("Spacer", rQ);
            var r7 = (function(e) {
                (0, l.Z)(t, e);
                function t() {
                    return e.apply(this, arguments) || this;
                }
                var i = t.prototype;
                i.buildCSSClass = function t() {
                    return ("vjs-custom-control-spacer " + e.prototype.buildCSSClass.call(this));
                };
                i.createEl = function t() {
                    return e.prototype.createEl.call(this, "div", {
                        className: this.buildCSSClass(),
                        textContent: "\xA0"
                    });
                };
                return t;
            })(rQ);
            tj.registerComponent("CustomControlSpacer", r7);
            var rX = (function(e) {
                (0, l.Z)(t, e);
                function t() {
                    return e.apply(this, arguments) || this;
                }
                var i = t.prototype;
                i.createEl = function t() {
                    return e.prototype.createEl.call(this, "div", {
                        className: "vjs-control-bar",
                        dir: "ltr"
                    });
                };
                return t;
            })(tj);
            rX.prototype.options_ = {
                children: [
                    "playToggle",
                    "volumePanel",
                    "currentTimeDisplay",
                    "timeDivider",
                    "durationDisplay",
                    "progressControl",
                    "liveDisplay",
                    "seekToLive",
                    "remainingTimeDisplay",
                    "customControlSpacer",
                    "playbackRateMenuButton",
                    "chaptersButton",
                    "descriptionsButton",
                    "subsCapsButton",
                    "audioTrackButton",
                    "fullscreenToggle", 
                ]
            };
            if ("exitPictureInPicture" in s()) {
                rX.prototype.options_.children.splice(rX.prototype.options_.children.length - 1, 0, "pictureInPictureToggle");
            }
            tj.registerComponent("ControlBar", rX);
            var rY = (function(e) {
                (0, l.Z)(t, e);
                function t(t, i) {
                    var r;
                    r = e.call(this, t, i) || this;
                    r.on(t, "error", function(e) {
                        return r.open(e);
                    });
                    return r;
                }
                var i = t.prototype;
                i.buildCSSClass = function t() {
                    return ("vjs-error-display " + e.prototype.buildCSSClass.call(this));
                };
                i.content = function e() {
                    var t = this.player().error();
                    return t ? this.localize(t.message) : "";
                };
                return t;
            })(t7);
            rY.prototype.options_ = (0, o.Z)({}, t7.prototype.options_, {
                pauseOnOpen: false,
                fillAlways: true,
                temporary: false,
                uncloseable: true
            });
            tj.registerComponent("ErrorDisplay", rY);
            var r9 = "vjs-text-track-settings";
            var rJ = [
                "#000",
                "Black"
            ];
            var ne = [
                "#00F",
                "Blue"
            ];
            var nt = [
                "#0FF",
                "Cyan"
            ];
            var ni = [
                "#0F0",
                "Green"
            ];
            var nr = [
                "#F0F",
                "Magenta"
            ];
            var nn = [
                "#F00",
                "Red"
            ];
            var na = [
                "#FFF",
                "White"
            ];
            var ns = [
                "#FF0",
                "Yellow"
            ];
            var no = [
                "1",
                "Opaque"
            ];
            var nu = [
                "0.5",
                "Semi-Transparent"
            ];
            var nl = [
                "0",
                "Transparent"
            ];
            var nd = {
                backgroundColor: {
                    selector: ".vjs-bg-color > select",
                    id: "captions-background-color-%s",
                    label: "Color",
                    options: [
                        rJ,
                        na,
                        nn,
                        ni,
                        ne,
                        ns,
                        nr,
                        nt, 
                    ]
                },
                backgroundOpacity: {
                    selector: ".vjs-bg-opacity > select",
                    id: "captions-background-opacity-%s",
                    label: "Transparency",
                    options: [
                        no,
                        nu,
                        nl
                    ]
                },
                color: {
                    selector: ".vjs-fg-color > select",
                    id: "captions-foreground-color-%s",
                    label: "Color",
                    options: [
                        na,
                        rJ,
                        nn,
                        ni,
                        ne,
                        ns,
                        nr,
                        nt, 
                    ]
                },
                edgeStyle: {
                    selector: ".vjs-edge-style > select",
                    id: "%s",
                    label: "Text Edge Style",
                    options: [
                        [
                            "none",
                            "None"
                        ],
                        [
                            "raised",
                            "Raised"
                        ],
                        [
                            "depressed",
                            "Depressed"
                        ],
                        [
                            "uniform",
                            "Uniform"
                        ],
                        [
                            "dropshadow",
                            "Dropshadow"
                        ], 
                    ]
                },
                fontFamily: {
                    selector: ".vjs-font-family > select",
                    id: "captions-font-family-%s",
                    label: "Font Family",
                    options: [
                        [
                            "proportionalSansSerif",
                            "Proportional Sans-Serif"
                        ],
                        [
                            "monospaceSansSerif",
                            "Monospace Sans-Serif"
                        ],
                        [
                            "proportionalSerif",
                            "Proportional Serif"
                        ],
                        [
                            "monospaceSerif",
                            "Monospace Serif"
                        ],
                        [
                            "casual",
                            "Casual"
                        ],
                        [
                            "script",
                            "Script"
                        ],
                        [
                            "small-caps",
                            "Small Caps"
                        ], 
                    ]
                },
                fontPercent: {
                    selector: ".vjs-font-percent > select",
                    id: "captions-font-size-%s",
                    label: "Font Size",
                    options: [
                        [
                            "0.50",
                            "50%"
                        ],
                        [
                            "0.75",
                            "75%"
                        ],
                        [
                            "1.00",
                            "100%"
                        ],
                        [
                            "1.25",
                            "125%"
                        ],
                        [
                            "1.50",
                            "150%"
                        ],
                        [
                            "1.75",
                            "175%"
                        ],
                        [
                            "2.00",
                            "200%"
                        ],
                        [
                            "3.00",
                            "300%"
                        ],
                        [
                            "4.00",
                            "400%"
                        ], 
                    ],
                    default: 2,
                    parser: function e(t) {
                        return t === "1.00" ? null : Number(t);
                    }
                },
                textOpacity: {
                    selector: ".vjs-text-opacity > select",
                    id: "captions-foreground-opacity-%s",
                    label: "Transparency",
                    options: [
                        no,
                        nu
                    ]
                },
                windowColor: {
                    selector: ".vjs-window-color > select",
                    id: "captions-window-color-%s",
                    label: "Color"
                },
                windowOpacity: {
                    selector: ".vjs-window-opacity > select",
                    id: "captions-window-opacity-%s",
                    label: "Transparency",
                    options: [
                        nl,
                        nu,
                        no
                    ]
                }
            };
            nd.windowColor.options = nd.backgroundColor.options;
            function nc(e, t) {
                if (t) {
                    e = t(e);
                }
                if (e && e !== "none") {
                    return e;
                }
            }
            function nh(e, t) {
                var i = e.options[e.options.selectedIndex].value;
                return nc(i, t);
            }
            function nf(e, t, i) {
                if (!t) {
                    return;
                }
                for(var r = 0; r < e.options.length; r++){
                    if (nc(e.options[r].value, i) === t) {
                        e.selectedIndex = r;
                        break;
                    }
                }
            }
            var np = (function(e) {
                (0, l.Z)(t, e);
                function t(t, i) {
                    var r;
                    i.temporary = false;
                    r = e.call(this, t, i) || this;
                    r.updateDisplay = r.updateDisplay.bind((0, u.Z)(r));
                    r.fill();
                    r.hasBeenOpened_ = r.hasBeenFilled_ = true;
                    r.endDialog = e_("p", {
                        className: "vjs-control-text",
                        textContent: r.localize("End of dialog window.")
                    });
                    r.el().appendChild(r.endDialog);
                    r.setDefaults();
                    if (i.persistTextTrackSettings === undefined) {
                        r.options_.persistTextTrackSettings = r.options_.playerOptions.persistTextTrackSettings;
                    }
                    r.on(r.$(".vjs-done-button"), "click", function() {
                        r.saveSettings();
                        r.close();
                    });
                    r.on(r.$(".vjs-default-button"), "click", function() {
                        r.setDefaults();
                        r.updateDisplay();
                    });
                    X(nd, function(e) {
                        r.on(r.$(e.selector), "change", r.updateDisplay);
                    });
                    if (r.options_.persistTextTrackSettings) {
                        r.restoreSettings();
                    }
                    return r;
                }
                var i = t.prototype;
                i.dispose = function t() {
                    this.endDialog = null;
                    e.prototype.dispose.call(this);
                };
                i.createElSelect_ = function e(t, i, r) {
                    var n = this;
                    if (i === void 0) {
                        i = "";
                    }
                    if (r === void 0) {
                        r = "label";
                    }
                    var a = nd[t];
                    var s = a.id.replace("%s", this.id_);
                    var o = [
                        i,
                        s
                    ].join(" ").trim();
                    return [
                        "<" + r + ' id="' + s + '" class="' + (r === "label" ? "vjs-label" : "") + '">',
                        this.localize(a.label),
                        "</" + r + ">",
                        '<select aria-labelledby="' + o + '">', 
                    ].concat(a.options.map(function(e) {
                        var t = s + "-" + e[1].replace(/\W+/g, "");
                        return [
                            '<option id="' + t + '" value="' + e[0] + '" ',
                            'aria-labelledby="' + o + " " + t + '">',
                            n.localize(e[1]),
                            "</option>", 
                        ].join("");
                    })).concat("</select>").join("");
                };
                i.createElFgColor_ = function e() {
                    var t = "captions-text-legend-" + this.id_;
                    return [
                        '<fieldset class="vjs-fg-color vjs-track-setting">',
                        '<legend id="' + t + '">',
                        this.localize("Text"),
                        "</legend>",
                        this.createElSelect_("color", t),
                        '<span class="vjs-text-opacity vjs-opacity">',
                        this.createElSelect_("textOpacity", t),
                        "</span>",
                        "</fieldset>", 
                    ].join("");
                };
                i.createElBgColor_ = function e() {
                    var t = "captions-background-" + this.id_;
                    return [
                        '<fieldset class="vjs-bg-color vjs-track-setting">',
                        '<legend id="' + t + '">',
                        this.localize("Background"),
                        "</legend>",
                        this.createElSelect_("backgroundColor", t),
                        '<span class="vjs-bg-opacity vjs-opacity">',
                        this.createElSelect_("backgroundOpacity", t),
                        "</span>",
                        "</fieldset>", 
                    ].join("");
                };
                i.createElWinColor_ = function e() {
                    var t = "captions-window-" + this.id_;
                    return [
                        '<fieldset class="vjs-window-color vjs-track-setting">',
                        '<legend id="' + t + '">',
                        this.localize("Window"),
                        "</legend>",
                        this.createElSelect_("windowColor", t),
                        '<span class="vjs-window-opacity vjs-opacity">',
                        this.createElSelect_("windowOpacity", t),
                        "</span>",
                        "</fieldset>", 
                    ].join("");
                };
                i.createElColors_ = function e() {
                    return e_("div", {
                        className: "vjs-track-settings-colors",
                        innerHTML: [
                            this.createElFgColor_(),
                            this.createElBgColor_(),
                            this.createElWinColor_(), 
                        ].join("")
                    });
                };
                i.createElFont_ = function e() {
                    return e_("div", {
                        className: "vjs-track-settings-font",
                        innerHTML: [
                            '<fieldset class="vjs-font-percent vjs-track-setting">',
                            this.createElSelect_("fontPercent", "", "legend"),
                            "</fieldset>",
                            '<fieldset class="vjs-edge-style vjs-track-setting">',
                            this.createElSelect_("edgeStyle", "", "legend"),
                            "</fieldset>",
                            '<fieldset class="vjs-font-family vjs-track-setting">',
                            this.createElSelect_("fontFamily", "", "legend"),
                            "</fieldset>", 
                        ].join("")
                    });
                };
                i.createElControls_ = function e() {
                    var t = this.localize("restore all settings to the default values");
                    return e_("div", {
                        className: "vjs-track-settings-controls",
                        innerHTML: [
                            '<button type="button" class="vjs-default-button" title="' + t + '">',
                            this.localize("Reset"),
                            '<span class="vjs-control-text"> ' + t + "</span>",
                            "</button>",
                            '<button type="button" class="vjs-done-button">' + this.localize("Done") + "</button>", 
                        ].join("")
                    });
                };
                i.content = function e() {
                    return [
                        this.createElColors_(),
                        this.createElFont_(),
                        this.createElControls_(), 
                    ];
                };
                i.label = function e() {
                    return this.localize("Caption Settings Dialog");
                };
                i.description = function e() {
                    return this.localize("Beginning of dialog window. Escape will cancel and close the window.");
                };
                i.buildCSSClass = function t() {
                    return (e.prototype.buildCSSClass.call(this) + " vjs-text-track-settings");
                };
                i.getValues = function e() {
                    var t = this;
                    return Y(nd, function(e, i, r) {
                        var n = nh(t.$(i.selector), i.parser);
                        if (n !== undefined) {
                            e[r] = n;
                        }
                        return e;
                    }, {});
                };
                i.setValues = function e(t) {
                    var i = this;
                    X(nd, function(e, r) {
                        nf(i.$(e.selector), t[r], e.parser);
                    });
                };
                i.setDefaults = function e() {
                    var t = this;
                    X(nd, function(e) {
                        var i = e.hasOwnProperty("default") ? e["default"] : 0;
                        t.$(e.selector).selectedIndex = i;
                    });
                };
                i.restoreSettings = function e() {
                    var t;
                    try {
                        t = JSON.parse(n().localStorage.getItem(r9));
                    } catch (i) {
                        G.warn(i);
                    }
                    if (t) {
                        this.setValues(t);
                    }
                };
                i.saveSettings = function e() {
                    if (!this.options_.persistTextTrackSettings) {
                        return;
                    }
                    var t = this.getValues();
                    try {
                        if (Object.keys(t).length) {
                            n().localStorage.setItem(r9, JSON.stringify(t));
                        } else {
                            n().localStorage.removeItem(r9);
                        }
                    } catch (i) {
                        G.warn(i);
                    }
                };
                i.updateDisplay = function e() {
                    var t = this.player_.getChild("textTrackDisplay");
                    if (t) {
                        t.updateDisplay();
                    }
                };
                i.conditionalBlur_ = function e() {
                    this.previouslyActiveEl_ = null;
                    var t = this.player_.controlBar;
                    var i = t && t.subsCapsButton;
                    var r = t && t.captionsButton;
                    if (i) {
                        i.focus();
                    } else if (r) {
                        r.focus();
                    }
                };
                return t;
            })(t7);
            tj.registerComponent("TextTrackSettings", np);
            var nm = (function(e) {
                (0, l.Z)(t, e);
                function t(t, i) {
                    var r;
                    var a = i.ResizeObserver || n().ResizeObserver;
                    if (i.ResizeObserver === null) {
                        a = false;
                    }
                    var s = tU({
                        createEl: !a,
                        reportTouchActivity: false
                    }, i);
                    r = e.call(this, t, s) || this;
                    r.ResizeObserver = i.ResizeObserver || n().ResizeObserver;
                    r.loadListener_ = null;
                    r.resizeObserver_ = null;
                    r.debouncedHandler_ = ty(function() {
                        r.resizeHandler();
                    }, 100, false, (0, u.Z)(r));
                    if (a) {
                        r.resizeObserver_ = new r.ResizeObserver(r.debouncedHandler_);
                        r.resizeObserver_.observe(t.el());
                    } else {
                        r.loadListener_ = function() {
                            if (!r.el_ || !r.el_.contentWindow) {
                                return;
                            }
                            var e = r.debouncedHandler_;
                            var t = (r.unloadListener_ = function() {
                                th(this, "resize", e);
                                th(this, "unload", t);
                                t = null;
                            });
                            tc(r.el_.contentWindow, "unload", t);
                            tc(r.el_.contentWindow, "resize", e);
                        };
                        r.one("load", r.loadListener_);
                    }
                    return r;
                }
                var i = t.prototype;
                i.createEl = function t() {
                    return e.prototype.createEl.call(this, "iframe", {
                        className: "vjs-resize-manager",
                        tabIndex: -1
                    }, {
                        "aria-hidden": "true"
                    });
                };
                i.resizeHandler = function e() {
                    if (!this.player_ || !this.player_.trigger) {
                        return;
                    }
                    this.player_.trigger("playerresize");
                };
                i.dispose = function t() {
                    if (this.debouncedHandler_) {
                        this.debouncedHandler_.cancel();
                    }
                    if (this.resizeObserver_) {
                        if (this.player_.el()) {
                            this.resizeObserver_.unobserve(this.player_.el());
                        }
                        this.resizeObserver_.disconnect();
                    }
                    if (this.loadListener_) {
                        this.off("load", this.loadListener_);
                    }
                    if (this.el_ && this.el_.contentWindow && this.unloadListener_) {
                        this.unloadListener_.call(this.el_.contentWindow);
                    }
                    this.ResizeObserver = null;
                    this.resizeObserver = null;
                    this.debouncedHandler_ = null;
                    this.loadListener_ = null;
                    e.prototype.dispose.call(this);
                };
                return t;
            })(tj);
            tj.registerComponent("ResizeManager", nm);
            var nv = {
                trackingThreshold: 20,
                liveTolerance: 15
            };
            var ng = (function(e) {
                (0, l.Z)(t, e);
                function t(t, i) {
                    var r;
                    var n = tU(nv, i, {
                        createEl: false
                    });
                    r = e.call(this, t, n) || this;
                    r.handleVisibilityChange_ = function(e) {
                        return r.handleVisibilityChange(e);
                    };
                    r.trackLiveHandler_ = function() {
                        return r.trackLive_();
                    };
                    r.handlePlay_ = function(e) {
                        return r.handlePlay(e);
                    };
                    r.handleFirstTimeupdate_ = function(e) {
                        return r.handleFirstTimeupdate(e);
                    };
                    r.handleSeeked_ = function(e) {
                        return r.handleSeeked(e);
                    };
                    r.seekToLiveEdge_ = function(e) {
                        return r.seekToLiveEdge(e);
                    };
                    r.reset_();
                    r.on(r.player_, "durationchange", function(e) {
                        return r.handleDurationchange(e);
                    });
                    r.one(r.player_, "canplay", function() {
                        return r.toggleTracking();
                    });
                    if (em && "hidden" in s() && "visibilityState" in s()) {
                        r.on(s(), "visibilitychange", r.handleVisibilityChange_);
                    }
                    return r;
                }
                var i = t.prototype;
                i.handleVisibilityChange = function e() {
                    if (this.player_.duration() !== Infinity) {
                        return;
                    }
                    if (s().hidden) {
                        this.stopTracking();
                    } else {
                        this.startTracking();
                    }
                };
                i.trackLive_ = function e() {
                    var t = this.player_.seekable();
                    if (!t || !t.length) {
                        return;
                    }
                    var i = Number(n().performance.now().toFixed(4));
                    var r = this.lastTime_ === -1 ? 0 : (i - this.lastTime_) / 1000;
                    this.lastTime_ = i;
                    this.pastSeekEnd_ = this.pastSeekEnd() + r;
                    var a = this.liveCurrentTime();
                    var s = this.player_.currentTime();
                    var o = this.player_.paused() || this.seekedBehindLive_ || Math.abs(a - s) > this.options_.liveTolerance;
                    if (!this.timeupdateSeen_ || a === Infinity) {
                        o = false;
                    }
                    if (o !== this.behindLiveEdge_) {
                        this.behindLiveEdge_ = o;
                        this.trigger("liveedgechange");
                    }
                };
                i.handleDurationchange = function e() {
                    this.toggleTracking();
                };
                i.toggleTracking = function e() {
                    if (this.player_.duration() === Infinity && this.liveWindow() >= this.options_.trackingThreshold) {
                        if (this.player_.options_.liveui) {
                            this.player_.addClass("vjs-liveui");
                        }
                        this.startTracking();
                    } else {
                        this.player_.removeClass("vjs-liveui");
                        this.stopTracking();
                    }
                };
                i.startTracking = function e() {
                    if (this.isTracking()) {
                        return;
                    }
                    if (!this.timeupdateSeen_) {
                        this.timeupdateSeen_ = this.player_.hasStarted();
                    }
                    this.trackingInterval_ = this.setInterval(this.trackLiveHandler_, tg);
                    this.trackLive_();
                    this.on(this.player_, [
                        "play",
                        "pause"
                    ], this.trackLiveHandler_);
                    if (!this.timeupdateSeen_) {
                        this.one(this.player_, "play", this.handlePlay_);
                        this.one(this.player_, "timeupdate", this.handleFirstTimeupdate_);
                    } else {
                        this.on(this.player_, "seeked", this.handleSeeked_);
                    }
                };
                i.handleFirstTimeupdate = function e() {
                    this.timeupdateSeen_ = true;
                    this.on(this.player_, "seeked", this.handleSeeked_);
                };
                i.handleSeeked = function e() {
                    var t = Math.abs(this.liveCurrentTime() - this.player_.currentTime());
                    this.seekedBehindLive_ = this.nextSeekedFromUser_ && t > 2;
                    this.nextSeekedFromUser_ = false;
                    this.trackLive_();
                };
                i.handlePlay = function e() {
                    this.one(this.player_, "timeupdate", this.seekToLiveEdge_);
                };
                i.reset_ = function e() {
                    this.lastTime_ = -1;
                    this.pastSeekEnd_ = 0;
                    this.lastSeekEnd_ = -1;
                    this.behindLiveEdge_ = true;
                    this.timeupdateSeen_ = false;
                    this.seekedBehindLive_ = false;
                    this.nextSeekedFromUser_ = false;
                    this.clearInterval(this.trackingInterval_);
                    this.trackingInterval_ = null;
                    this.off(this.player_, [
                        "play",
                        "pause"
                    ], this.trackLiveHandler_);
                    this.off(this.player_, "seeked", this.handleSeeked_);
                    this.off(this.player_, "play", this.handlePlay_);
                    this.off(this.player_, "timeupdate", this.handleFirstTimeupdate_);
                    this.off(this.player_, "timeupdate", this.seekToLiveEdge_);
                };
                i.nextSeekedFromUser = function e() {
                    this.nextSeekedFromUser_ = true;
                };
                i.stopTracking = function e() {
                    if (!this.isTracking()) {
                        return;
                    }
                    this.reset_();
                    this.trigger("liveedgechange");
                };
                i.seekableEnd = function e() {
                    var t = this.player_.seekable();
                    var i = [];
                    var r = t ? t.length : 0;
                    while(r--){
                        i.push(t.end(r));
                    }
                    return i.length ? i.sort()[i.length - 1] : Infinity;
                };
                i.seekableStart = function e() {
                    var t = this.player_.seekable();
                    var i = [];
                    var r = t ? t.length : 0;
                    while(r--){
                        i.push(t.start(r));
                    }
                    return i.length ? i.sort()[0] : 0;
                };
                i.liveWindow = function e() {
                    var t = this.liveCurrentTime();
                    if (t === Infinity) {
                        return 0;
                    }
                    return t - this.seekableStart();
                };
                i.isLive = function e() {
                    return this.isTracking();
                };
                i.atLiveEdge = function e() {
                    return !this.behindLiveEdge();
                };
                i.liveCurrentTime = function e() {
                    return this.pastSeekEnd() + this.seekableEnd();
                };
                i.pastSeekEnd = function e() {
                    var t = this.seekableEnd();
                    if (this.lastSeekEnd_ !== -1 && t !== this.lastSeekEnd_) {
                        this.pastSeekEnd_ = 0;
                    }
                    this.lastSeekEnd_ = t;
                    return this.pastSeekEnd_;
                };
                i.behindLiveEdge = function e() {
                    return this.behindLiveEdge_;
                };
                i.isTracking = function e() {
                    return typeof this.trackingInterval_ === "number";
                };
                i.seekToLiveEdge = function e() {
                    this.seekedBehindLive_ = false;
                    if (this.atLiveEdge()) {
                        return;
                    }
                    this.nextSeekedFromUser_ = false;
                    this.player_.currentTime(this.liveCurrentTime());
                };
                i.dispose = function t() {
                    this.off(s(), "visibilitychange", this.handleVisibilityChange_);
                    this.stopTracking();
                    e.prototype.dispose.call(this);
                };
                return t;
            })(tj);
            tj.registerComponent("LiveTracker", ng);
            var n$ = function e(t) {
                var i = t.el();
                if (i.hasAttribute("src")) {
                    t.triggerSourceset(i.src);
                    return true;
                }
                var r = t.$$("source");
                var n = [];
                var a = "";
                if (!r.length) {
                    return false;
                }
                for(var s = 0; s < r.length; s++){
                    var o = r[s].src;
                    if (o && n.indexOf(o) === -1) {
                        n.push(o);
                    }
                }
                if (!n.length) {
                    return false;
                }
                if (n.length === 1) {
                    a = n[0];
                }
                t.triggerSourceset(a);
                return true;
            };
            var n8 = Object.defineProperty({}, "innerHTML", {
                get: function e() {
                    return this.cloneNode(true).innerHTML;
                },
                set: function e(t) {
                    var i = s().createElement(this.nodeName.toLowerCase());
                    i.innerHTML = t;
                    var r = s().createDocumentFragment();
                    while(i.childNodes.length){
                        r.appendChild(i.childNodes[0]);
                    }
                    this.innerText = "";
                    n().Element.prototype.appendChild.call(this, r);
                    return this.innerHTML;
                }
            });
            var ny = function e(t, i) {
                var r = {};
                for(var n = 0; n < t.length; n++){
                    r = Object.getOwnPropertyDescriptor(t[n], i);
                    if (r && r.set && r.get) {
                        break;
                    }
                }
                r.enumerable = true;
                r.configurable = true;
                return r;
            };
            var nT = function e(t) {
                return ny([
                    t.el(),
                    n().HTMLMediaElement.prototype,
                    n().Element.prototype,
                    n8, 
                ], "innerHTML");
            };
            var nb = function e(t) {
                var i = t.el();
                if (i.resetSourceWatch_) {
                    return;
                }
                var r = {};
                var n = nT(t);
                var a = function e(r) {
                    return function() {
                        for(var e = arguments.length, n = new Array(e), a = 0; a < e; a++){
                            n[a] = arguments[a];
                        }
                        var s = r.apply(i, n);
                        n$(t);
                        return s;
                    };
                };
                [
                    "append",
                    "appendChild",
                    "insertAdjacentHTML"
                ].forEach(function(e) {
                    if (!i[e]) {
                        return;
                    }
                    r[e] = i[e];
                    i[e] = a(r[e]);
                });
                Object.defineProperty(i, "innerHTML", tU(n, {
                    set: a(n.set)
                }));
                i.resetSourceWatch_ = function() {
                    i.resetSourceWatch_ = null;
                    Object.keys(r).forEach(function(e) {
                        i[e] = r[e];
                    });
                    Object.defineProperty(i, "innerHTML", n);
                };
                t.one("sourceset", i.resetSourceWatch_);
            };
            var nx = Object.defineProperty({}, "src", {
                get: function e() {
                    if (this.hasAttribute("src")) {
                        return ih(n().Element.prototype.getAttribute.call(this, "src"));
                    }
                    return "";
                },
                set: function e(t) {
                    n().Element.prototype.setAttribute.call(this, "src", t);
                    return t;
                }
            });
            var nS = function e(t) {
                return ny([
                    t.el(),
                    n().HTMLMediaElement.prototype,
                    nx, 
                ], "src");
            };
            var nk = function e(t) {
                if (!t.featuresSourceset) {
                    return;
                }
                var i = t.el();
                if (i.resetSourceset_) {
                    return;
                }
                var r = nS(t);
                var n = i.setAttribute;
                var a = i.load;
                Object.defineProperty(i, "src", tU(r, {
                    set: function e(n) {
                        var a = r.set.call(i, n);
                        t.triggerSourceset(i.src);
                        return a;
                    }
                }));
                i.setAttribute = function(e, r) {
                    var a = n.call(i, e, r);
                    if (/src/i.test(e)) {
                        t.triggerSourceset(i.src);
                    }
                    return a;
                };
                i.load = function() {
                    var e = a.call(i);
                    if (!n$(t)) {
                        t.triggerSourceset("");
                        nb(t);
                    }
                    return e;
                };
                if (i.currentSrc) {
                    t.triggerSourceset(i.currentSrc);
                } else if (!n$(t)) {
                    nb(t);
                }
                i.resetSourceset_ = function() {
                    i.resetSourceset_ = null;
                    i.load = a;
                    i.setAttribute = n;
                    Object.defineProperty(i, "src", r);
                    if (i.resetSourceWatch_) {
                        i.resetSourceWatch_();
                    }
                };
            };
            var nC = function e(t, i, r, n) {
                if (n === void 0) {
                    n = true;
                }
                var a = function e(r) {
                    return Object.defineProperty(t, i, {
                        value: r,
                        enumerable: true,
                        writable: true
                    });
                };
                var s = {
                    configurable: true,
                    enumerable: true,
                    get: function e() {
                        var t = r();
                        a(t);
                        return t;
                    }
                };
                if (n) {
                    s.set = a;
                }
                return Object.defineProperty(t, i, s);
            };
            var nE = (function(e) {
                (0, l.Z)(t, e);
                function t(t, i) {
                    var r;
                    r = e.call(this, t, i) || this;
                    var n = t.source;
                    var a = false;
                    if (n && (r.el_.currentSrc !== n.src || (t.tag && t.tag.initNetworkState_ === 3))) {
                        r.setSource(n);
                    } else {
                        r.handleLateInit_(r.el_);
                    }
                    if (t.enableSourceset) {
                        r.setupSourcesetHandling_();
                    }
                    r.isScrubbing_ = false;
                    if (r.el_.hasChildNodes()) {
                        var s = r.el_.childNodes;
                        var o = s.length;
                        var u = [];
                        while(o--){
                            var l = s[o];
                            var d = l.nodeName.toLowerCase();
                            if (d === "track") {
                                if (!r.featuresNativeTextTracks) {
                                    u.push(l);
                                } else {
                                    r.remoteTextTrackEls().addTrackElement_(l);
                                    r.remoteTextTracks().addTrack(l.track);
                                    r.textTracks().addTrack(l.track);
                                    if (!a && !r.el_.hasAttribute("crossorigin") && im(l.src)) {
                                        a = true;
                                    }
                                }
                            }
                        }
                        for(var c = 0; c < u.length; c++){
                            r.el_.removeChild(u[c]);
                        }
                    }
                    r.proxyNativeTracks_();
                    if (r.featuresNativeTextTracks && a) {
                        G.warn("Text Tracks are being loaded from another origin but the crossorigin attribute isn't used.\n" + "This may prevent text tracks from loading.");
                    }
                    r.restoreMetadataTracksInIOSNativePlayer_();
                    if ((e$ || ey || ed) && t.nativeControlsForTouch === true) {
                        r.setControls(true);
                    }
                    r.proxyWebkitFullscreen_();
                    r.triggerReady();
                    return r;
                }
                var i = t.prototype;
                i.dispose = function i() {
                    if (this.el_ && this.el_.resetSourceset_) {
                        this.el_.resetSourceset_();
                    }
                    t.disposeMediaElement(this.el_);
                    this.options_ = null;
                    e.prototype.dispose.call(this);
                };
                i.setupSourcesetHandling_ = function e() {
                    nk(this);
                };
                i.restoreMetadataTracksInIOSNativePlayer_ = function e() {
                    var t = this.textTracks();
                    var i;
                    var r = function e() {
                        i = [];
                        for(var r = 0; r < t.length; r++){
                            var n = t[r];
                            if (n.kind === "metadata") {
                                i.push({
                                    track: n,
                                    storedMode: n.mode
                                });
                            }
                        }
                    };
                    r();
                    t.addEventListener("change", r);
                    this.on("dispose", function() {
                        return t.removeEventListener("change", r);
                    });
                    var n = function e() {
                        for(var r = 0; r < i.length; r++){
                            var n = i[r];
                            if (n.track.mode === "disabled" && n.track.mode !== n.storedMode) {
                                n.track.mode = n.storedMode;
                            }
                        }
                        t.removeEventListener("change", e);
                    };
                    this.on("webkitbeginfullscreen", function() {
                        t.removeEventListener("change", r);
                        t.removeEventListener("change", n);
                        t.addEventListener("change", n);
                    });
                    this.on("webkitendfullscreen", function() {
                        t.removeEventListener("change", r);
                        t.addEventListener("change", r);
                        t.removeEventListener("change", n);
                    });
                };
                i.overrideNative_ = function e(t, i) {
                    var r = this;
                    if (i !== this["featuresNative" + t + "Tracks"]) {
                        return;
                    }
                    var n = t.toLowerCase();
                    if (this[n + "TracksListeners_"]) {
                        Object.keys(this[n + "TracksListeners_"]).forEach(function(e) {
                            var t = r.el()[n + "Tracks"];
                            t.removeEventListener(e, r[n + "TracksListeners_"][e]);
                        });
                    }
                    this["featuresNative" + t + "Tracks"] = !i;
                    this[n + "TracksListeners_"] = null;
                    this.proxyNativeTracksForType_(n);
                };
                i.overrideNativeAudioTracks = function e(t) {
                    this.overrideNative_("Audio", t);
                };
                i.overrideNativeVideoTracks = function e(t) {
                    this.overrideNative_("Video", t);
                };
                i.proxyNativeTracksForType_ = function e(t) {
                    var i = this;
                    var r = iE[t];
                    var n = this.el()[r.getterName];
                    var a = this[r.getterName]();
                    if (!this["featuresNative" + r.capitalName + "Tracks"] || !n || !n.addEventListener) {
                        return;
                    }
                    var s = {
                        change: function e(r) {
                            var n = {
                                type: "change",
                                target: a,
                                currentTarget: a,
                                srcElement: a
                            };
                            a.trigger(n);
                            if (t === "text") {
                                i[iw.remoteText.getterName]().trigger(n);
                            }
                        },
                        addtrack: function e(t) {
                            a.addTrack(t.track);
                        },
                        removetrack: function e(t) {
                            a.removeTrack(t.track);
                        }
                    };
                    var o = function e() {
                        var t = [];
                        for(var i = 0; i < a.length; i++){
                            var r = false;
                            for(var s = 0; s < n.length; s++){
                                if (n[s] === a[i]) {
                                    r = true;
                                    break;
                                }
                            }
                            if (!r) {
                                t.push(a[i]);
                            }
                        }
                        while(t.length){
                            a.removeTrack(t.shift());
                        }
                    };
                    this[r.getterName + "Listeners_"] = s;
                    Object.keys(s).forEach(function(e) {
                        var t = s[e];
                        n.addEventListener(e, t);
                        i.on("dispose", function(i) {
                            return n.removeEventListener(e, t);
                        });
                    });
                    this.on("loadstart", o);
                    this.on("dispose", function(e) {
                        return i.off("loadstart", o);
                    });
                };
                i.proxyNativeTracks_ = function e() {
                    var t = this;
                    iE.names.forEach(function(e) {
                        t.proxyNativeTracksForType_(e);
                    });
                };
                i.createEl = function e() {
                    var i = this.options_.tag;
                    if (!i || !(this.options_.playerElIngest || this.movingMediaElementInDOM)) {
                        if (i) {
                            var r = i.cloneNode(true);
                            if (i.parentNode) {
                                i.parentNode.insertBefore(r, i);
                            }
                            t.disposeMediaElement(i);
                            i = r;
                        } else {
                            i = s().createElement("video");
                            var n = this.options_.tag && eU(this.options_.tag);
                            var a = tU({}, n);
                            if (!e$ || this.options_.nativeControlsForTouch !== true) {
                                delete a.controls;
                            }
                            e0(i, J(a, {
                                id: this.options_.techId,
                                class: "vjs-tech"
                            }));
                        }
                        i.playerId = this.options_.playerId;
                    }
                    if (typeof this.options_.preload !== "undefined") {
                        eF(i, "preload", this.options_.preload);
                    }
                    if (this.options_.disablePictureInPicture !== undefined) {
                        i.disablePictureInPicture = this.options_.disablePictureInPicture;
                    }
                    var o = [
                        "loop",
                        "muted",
                        "playsinline",
                        "autoplay", 
                    ];
                    for(var u = 0; u < o.length; u++){
                        var l = o[u];
                        var d = this.options_[l];
                        if (typeof d !== "undefined") {
                            if (d) {
                                eF(i, l, l);
                            } else {
                                eN(i, l);
                            }
                            i[l] = d;
                        }
                    }
                    return i;
                };
                i.handleLateInit_ = function e(t) {
                    if (t.networkState === 0 || t.networkState === 3) {
                        return;
                    }
                    if (t.readyState === 0) {
                        var i = false;
                        var r = function e() {
                            i = true;
                        };
                        this.on("loadstart", r);
                        var n = function e() {
                            if (!i) {
                                this.trigger("loadstart");
                            }
                        };
                        this.on("loadedmetadata", n);
                        this.ready(function() {
                            this.off("loadstart", r);
                            this.off("loadedmetadata", n);
                            if (!i) {
                                this.trigger("loadstart");
                            }
                        });
                        return;
                    }
                    var a = [
                        "loadstart"
                    ];
                    a.push("loadedmetadata");
                    if (t.readyState >= 2) {
                        a.push("loadeddata");
                    }
                    if (t.readyState >= 3) {
                        a.push("canplay");
                    }
                    if (t.readyState >= 4) {
                        a.push("canplaythrough");
                    }
                    this.ready(function() {
                        a.forEach(function(e) {
                            this.trigger(e);
                        }, this);
                    });
                };
                i.setScrubbing = function e(t) {
                    this.isScrubbing_ = t;
                };
                i.scrubbing = function e() {
                    return this.isScrubbing_;
                };
                i.setCurrentTime = function e(t) {
                    try {
                        if (this.isScrubbing_ && this.el_.fastSeek && eb) {
                            this.el_.fastSeek(t);
                        } else {
                            this.el_.currentTime = t;
                        }
                    } catch (i) {
                        G(i, "Video is not ready. (Video.js)");
                    }
                };
                i.duration = function e() {
                    var t = this;
                    if (this.el_.duration === Infinity && eu && ef && this.el_.currentTime === 0) {
                        var i = function e() {
                            if (t.el_.currentTime > 0) {
                                if (t.el_.duration === Infinity) {
                                    t.trigger("durationchange");
                                }
                                t.off("timeupdate", e);
                            }
                        };
                        this.on("timeupdate", i);
                        return NaN;
                    }
                    return this.el_.duration || NaN;
                };
                i.width = function e() {
                    return this.el_.offsetWidth;
                };
                i.height = function e() {
                    return this.el_.offsetHeight;
                };
                i.proxyWebkitFullscreen_ = function e() {
                    var t = this;
                    if (!("webkitDisplayingFullscreen" in this.el_)) {
                        return;
                    }
                    var i = function e() {
                        this.trigger("fullscreenchange", {
                            isFullscreen: false
                        });
                    };
                    var r = function e() {
                        if ("webkitPresentationMode" in this.el_ && this.el_.webkitPresentationMode !== "picture-in-picture") {
                            this.one("webkitendfullscreen", i);
                            this.trigger("fullscreenchange", {
                                isFullscreen: true,
                                nativeIOSFullscreen: true
                            });
                        }
                    };
                    this.on("webkitbeginfullscreen", r);
                    this.on("dispose", function() {
                        t.off("webkitbeginfullscreen", r);
                        t.off("webkitendfullscreen", i);
                    });
                };
                i.supportsFullScreen = function e() {
                    if (typeof this.el_.webkitEnterFullScreen === "function") {
                        var t = (n().navigator && n().navigator.userAgent) || "";
                        if (/Android/.test(t) || !/Chrome|Mac OS X 10.5/.test(t)) {
                            return true;
                        }
                    }
                    return false;
                };
                i.enterFullScreen = function e() {
                    var t = this.el_;
                    if (t.paused && t.networkState <= t.HAVE_METADATA) {
                        t5(this.el_.play());
                        this.setTimeout(function() {
                            t.pause();
                            try {
                                t.webkitEnterFullScreen();
                            } catch (e) {
                                this.trigger("fullscreenerror", e);
                            }
                        }, 0);
                    } else {
                        try {
                            t.webkitEnterFullScreen();
                        } catch (i) {
                            this.trigger("fullscreenerror", i);
                        }
                    }
                };
                i.exitFullScreen = function e() {
                    if (!this.el_.webkitDisplayingFullscreen) {
                        this.trigger("fullscreenerror", new Error("The video is not fullscreen"));
                        return;
                    }
                    this.el_.webkitExitFullScreen();
                };
                i.requestPictureInPicture = function e() {
                    return this.el_.requestPictureInPicture();
                };
                i.src = function e(t) {
                    if (t === undefined) {
                        return this.el_.src;
                    }
                    this.setSrc(t);
                };
                i.reset = function e() {
                    t.resetMediaElement(this.el_);
                };
                i.currentSrc = function e() {
                    if (this.currentSource_) {
                        return this.currentSource_.src;
                    }
                    return this.el_.currentSrc;
                };
                i.setControls = function e(t) {
                    this.el_.controls = !!t;
                };
                i.addTextTrack = function t(i, r, n) {
                    if (!this.featuresNativeTextTracks) {
                        return e.prototype.addTextTrack.call(this, i, r, n);
                    }
                    return this.el_.addTextTrack(i, r, n);
                };
                i.createRemoteTextTrack = function t(i) {
                    if (!this.featuresNativeTextTracks) {
                        return e.prototype.createRemoteTextTrack.call(this, i);
                    }
                    var r = s().createElement("track");
                    if (i.kind) {
                        r.kind = i.kind;
                    }
                    if (i.label) {
                        r.label = i.label;
                    }
                    if (i.language || i.srclang) {
                        r.srclang = i.language || i.srclang;
                    }
                    if (i["default"]) {
                        r["default"] = i["default"];
                    }
                    if (i.id) {
                        r.id = i.id;
                    }
                    if (i.src) {
                        r.src = i.src;
                    }
                    return r;
                };
                i.addRemoteTextTrack = function t(i, r) {
                    var n = e.prototype.addRemoteTextTrack.call(this, i, r);
                    if (this.featuresNativeTextTracks) {
                        this.el().appendChild(n);
                    }
                    return n;
                };
                i.removeRemoteTextTrack = function t(i) {
                    e.prototype.removeRemoteTextTrack.call(this, i);
                    if (this.featuresNativeTextTracks) {
                        var r = this.$$("track");
                        var n = r.length;
                        while(n--){
                            if (i === r[n] || i === r[n].track) {
                                this.el().removeChild(r[n]);
                            }
                        }
                    }
                };
                i.getVideoPlaybackQuality = function e() {
                    if (typeof this.el().getVideoPlaybackQuality === "function") {
                        return this.el().getVideoPlaybackQuality();
                    }
                    var t = {};
                    if (typeof this.el().webkitDroppedFrameCount !== "undefined" && typeof this.el().webkitDecodedFrameCount !== "undefined") {
                        t.droppedVideoFrames = this.el().webkitDroppedFrameCount;
                        t.totalVideoFrames = this.el().webkitDecodedFrameCount;
                    }
                    if (n().performance && typeof n().performance.now === "function") {
                        t.creationTime = n().performance.now();
                    } else if (n().performance && n().performance.timing && typeof n().performance.timing.navigationStart === "number") {
                        t.creationTime = n().Date.now() - n().performance.timing.navigationStart;
                    }
                    return t;
                };
                return t;
            })(i_);
            nC(nE, "TEST_VID", function() {
                if (!eE()) {
                    return;
                }
                var e = s().createElement("video");
                var t = s().createElement("track");
                t.kind = "captions";
                t.srclang = "en";
                t.label = "English";
                e.appendChild(t);
                return e;
            });
            nE.isSupported = function() {
                try {
                    nE.TEST_VID.volume = 0.5;
                } catch (e) {
                    return false;
                }
                return !!(nE.TEST_VID && nE.TEST_VID.canPlayType);
            };
            nE.canPlayType = function(e) {
                return nE.TEST_VID.canPlayType(e);
            };
            nE.canPlaySource = function(e, t) {
                return nE.canPlayType(e.type);
            };
            nE.canControlVolume = function() {
                try {
                    var e = nE.TEST_VID.volume;
                    nE.TEST_VID.volume = e / 2 + 0.1;
                    return e !== nE.TEST_VID.volume;
                } catch (t) {
                    return false;
                }
            };
            nE.canMuteVolume = function() {
                try {
                    var e = nE.TEST_VID.muted;
                    nE.TEST_VID.muted = !e;
                    if (nE.TEST_VID.muted) {
                        eF(nE.TEST_VID, "muted", "muted");
                    } else {
                        eN(nE.TEST_VID, "muted", "muted");
                    }
                    return e !== nE.TEST_VID.muted;
                } catch (t) {
                    return false;
                }
            };
            nE.canControlPlaybackRate = function() {
                if (eu && ef && ep < 58) {
                    return false;
                }
                try {
                    var e = nE.TEST_VID.playbackRate;
                    nE.TEST_VID.playbackRate = e / 2 + 0.1;
                    return e !== nE.TEST_VID.playbackRate;
                } catch (t) {
                    return false;
                }
            };
            nE.canOverrideAttributes = function() {
                try {
                    var e = function e() {};
                    Object.defineProperty(s().createElement("video"), "src", {
                        get: e,
                        set: e
                    });
                    Object.defineProperty(s().createElement("audio"), "src", {
                        get: e,
                        set: e
                    });
                    Object.defineProperty(s().createElement("video"), "innerHTML", {
                        get: e,
                        set: e
                    });
                    Object.defineProperty(s().createElement("audio"), "innerHTML", {
                        get: e,
                        set: e
                    });
                } catch (t) {
                    return false;
                }
                return true;
            };
            nE.supportsNativeTextTracks = function() {
                return eb || (eT && ef);
            };
            nE.supportsNativeVideoTracks = function() {
                return !!(nE.TEST_VID && nE.TEST_VID.videoTracks);
            };
            nE.supportsNativeAudioTracks = function() {
                return !!(nE.TEST_VID && nE.TEST_VID.audioTracks);
            };
            nE.Events = [
                "loadstart",
                "suspend",
                "abort",
                "error",
                "emptied",
                "stalled",
                "loadedmetadata",
                "loadeddata",
                "canplay",
                "canplaythrough",
                "playing",
                "waiting",
                "seeking",
                "seeked",
                "ended",
                "durationchange",
                "timeupdate",
                "progress",
                "play",
                "pause",
                "ratechange",
                "resize",
                "volumechange", 
            ];
            [
                [
                    "featuresVolumeControl",
                    "canControlVolume"
                ],
                [
                    "featuresMuteControl",
                    "canMuteVolume"
                ],
                [
                    "featuresPlaybackRate",
                    "canControlPlaybackRate"
                ],
                [
                    "featuresSourceset",
                    "canOverrideAttributes"
                ],
                [
                    "featuresNativeTextTracks",
                    "supportsNativeTextTracks"
                ],
                [
                    "featuresNativeVideoTracks",
                    "supportsNativeVideoTracks"
                ],
                [
                    "featuresNativeAudioTracks",
                    "supportsNativeAudioTracks"
                ], 
            ].forEach(function(e) {
                var t = e[0], i = e[1];
                nC(nE.prototype, t, function() {
                    return nE[i]();
                }, true);
            });
            nE.prototype.movingMediaElementInDOM = !eT;
            nE.prototype.featuresFullscreenResize = true;
            nE.prototype.featuresProgressEvents = true;
            nE.prototype.featuresTimeupdateEvents = true;
            var nw;
            nE.patchCanPlayType = function() {
                if (el >= 4.0 && !ec && !ef) {
                    nw = nE.TEST_VID && nE.TEST_VID.constructor.prototype.canPlayType;
                    nE.TEST_VID.constructor.prototype.canPlayType = function(e) {
                        var t = /^application\/(?:x-|vnd\.apple\.)mpegurl/i;
                        if (e && t.test(e)) {
                            return "maybe";
                        }
                        return nw.call(this, e);
                    };
                }
            };
            nE.unpatchCanPlayType = function() {
                var e = nE.TEST_VID.constructor.prototype.canPlayType;
                if (nw) {
                    nE.TEST_VID.constructor.prototype.canPlayType = nw;
                }
                return e;
            };
            nE.patchCanPlayType();
            nE.disposeMediaElement = function(e) {
                if (!e) {
                    return;
                }
                if (e.parentNode) {
                    e.parentNode.removeChild(e);
                }
                while(e.hasChildNodes()){
                    e.removeChild(e.firstChild);
                }
                e.removeAttribute("src");
                if (typeof e.load === "function") {
                    (function() {
                        try {
                            e.load();
                        } catch (t) {}
                    })();
                }
            };
            nE.resetMediaElement = function(e) {
                if (!e) {
                    return;
                }
                var t = e.querySelectorAll("source");
                var i = t.length;
                while(i--){
                    e.removeChild(t[i]);
                }
                e.removeAttribute("src");
                if (typeof e.load === "function") {
                    (function() {
                        try {
                            e.load();
                        } catch (t) {}
                    })();
                }
            };
            [
                "muted",
                "defaultMuted",
                "autoplay",
                "controls",
                "loop",
                "playsinline", 
            ].forEach(function(e) {
                nE.prototype[e] = function() {
                    return this.el_[e] || this.el_.hasAttribute(e);
                };
            });
            [
                "muted",
                "defaultMuted",
                "autoplay",
                "loop",
                "playsinline", 
            ].forEach(function(e) {
                nE.prototype["set" + tM(e)] = function(t) {
                    this.el_[e] = t;
                    if (t) {
                        this.el_.setAttribute(e, e);
                    } else {
                        this.el_.removeAttribute(e);
                    }
                };
            });
            [
                "paused",
                "currentTime",
                "buffered",
                "volume",
                "poster",
                "preload",
                "error",
                "seeking",
                "seekable",
                "ended",
                "playbackRate",
                "defaultPlaybackRate",
                "disablePictureInPicture",
                "played",
                "networkState",
                "readyState",
                "videoWidth",
                "videoHeight",
                "crossOrigin", 
            ].forEach(function(e) {
                nE.prototype[e] = function() {
                    return this.el_[e];
                };
            });
            [
                "volume",
                "src",
                "poster",
                "preload",
                "playbackRate",
                "defaultPlaybackRate",
                "disablePictureInPicture",
                "crossOrigin", 
            ].forEach(function(e) {
                nE.prototype["set" + tM(e)] = function(t) {
                    this.el_[e] = t;
                };
            });
            [
                "pause",
                "load",
                "play", 
            ].forEach(function(e) {
                nE.prototype[e] = function() {
                    return this.el_[e]();
                };
            });
            i_.withSourceHandlers(nE);
            nE.nativeSourceHandler = {};
            nE.nativeSourceHandler.canPlayType = function(e) {
                try {
                    return nE.TEST_VID.canPlayType(e);
                } catch (t) {
                    return "";
                }
            };
            nE.nativeSourceHandler.canHandleSource = function(e, t) {
                if (e.type) {
                    return nE.nativeSourceHandler.canPlayType(e.type);
                } else if (e.src) {
                    var i = ip(e.src);
                    return nE.nativeSourceHandler.canPlayType("video/" + i);
                }
                return "";
            };
            nE.nativeSourceHandler.handleSource = function(e, t, i) {
                t.setSrc(e.src);
            };
            nE.nativeSourceHandler.dispose = function() {};
            nE.registerSourceHandler(nE.nativeSourceHandler);
            i_.registerTech("Html5", nE);
            var nI = [
                "progress",
                "abort",
                "suspend",
                "emptied",
                "stalled",
                "loadedmetadata",
                "loadeddata",
                "timeupdate",
                "resize",
                "volumechange",
                "texttrackchange", 
            ];
            var nP = {
                canplay: "CanPlay",
                canplaythrough: "CanPlayThrough",
                playing: "Playing",
                seeked: "Seeked"
            };
            var n_ = [
                "tiny",
                "xsmall",
                "small",
                "medium",
                "large",
                "xlarge",
                "huge", 
            ];
            var nL = {};
            n_.forEach(function(e) {
                var t = e.charAt(0) === "x" ? "x-" + e.substring(1) : e;
                nL[e] = "vjs-layout-" + t;
            });
            var nA = {
                tiny: 210,
                xsmall: 320,
                small: 425,
                medium: 768,
                large: 1440,
                xlarge: 2560,
                huge: Infinity
            };
            var nD = (function(e) {
                (0, l.Z)(t, e);
                function t(i, r, n) {
                    var a;
                    i.id = i.id || r.id || "vjs_video_" + ti();
                    r = J(t.getTagSettings(i), r);
                    r.initChildren = false;
                    r.createEl = false;
                    r.evented = false;
                    r.reportTouchActivity = false;
                    if (!r.language) {
                        if (typeof i.closest === "function") {
                            var o = i.closest("[lang]");
                            if (o && o.getAttribute) {
                                r.language = o.getAttribute("lang");
                            }
                        } else {
                            var l = i;
                            while(l && l.nodeType === 1){
                                if (eU(l).hasOwnProperty("lang")) {
                                    r.language = l.getAttribute("lang");
                                    break;
                                }
                                l = l.parentNode;
                            }
                        }
                    }
                    a = e.call(this, null, r, n) || this;
                    a.boundDocumentFullscreenChange_ = function(e) {
                        return a.documentFullscreenChange_(e);
                    };
                    a.boundFullWindowOnEscKey_ = function(e) {
                        return a.fullWindowOnEscKey(e);
                    };
                    a.boundUpdateStyleEl_ = function(e) {
                        return a.updateStyleEl_(e);
                    };
                    a.boundApplyInitTime_ = function(e) {
                        return a.applyInitTime_(e);
                    };
                    a.boundUpdateCurrentBreakpoint_ = function(e) {
                        return a.updateCurrentBreakpoint_(e);
                    };
                    a.boundHandleTechClick_ = function(e) {
                        return a.handleTechClick_(e);
                    };
                    a.boundHandleTechDoubleClick_ = function(e) {
                        return a.handleTechDoubleClick_(e);
                    };
                    a.boundHandleTechTouchStart_ = function(e) {
                        return a.handleTechTouchStart_(e);
                    };
                    a.boundHandleTechTouchMove_ = function(e) {
                        return a.handleTechTouchMove_(e);
                    };
                    a.boundHandleTechTouchEnd_ = function(e) {
                        return a.handleTechTouchEnd_(e);
                    };
                    a.boundHandleTechTap_ = function(e) {
                        return a.handleTechTap_(e);
                    };
                    a.isFullscreen_ = false;
                    a.log = K(a.id_);
                    a.fsApi_ = B;
                    a.isPosterFromTech_ = false;
                    a.queuedCallbacks_ = [];
                    a.isReady_ = false;
                    a.hasStarted_ = false;
                    a.userActive_ = false;
                    a.debugEnabled_ = false;
                    if (!a.options_ || !a.options_.techOrder || !a.options_.techOrder.length) {
                        throw new Error("No techOrder specified. Did you overwrite " + "videojs.options instead of just changing the " + "properties you want to override?");
                    }
                    a.tag = i;
                    a.tagAttributes = i && eU(i);
                    a.language(a.options_.language);
                    if (r.languages) {
                        var d = {};
                        Object.getOwnPropertyNames(r.languages).forEach(function(e) {
                            d[e.toLowerCase()] = r.languages[e];
                        });
                        a.languages_ = d;
                    } else {
                        a.languages_ = t.prototype.options_.languages;
                    }
                    a.resetCache_();
                    a.poster_ = r.poster || "";
                    a.controls_ = !!r.controls;
                    i.controls = false;
                    i.removeAttribute("controls");
                    a.changingSrc_ = false;
                    a.playCallbacks_ = [];
                    a.playTerminatedQueue_ = [];
                    if (i.hasAttribute("autoplay")) {
                        a.autoplay(true);
                    } else {
                        a.autoplay(a.options_.autoplay);
                    }
                    if (r.plugins) {
                        Object.keys(r.plugins).forEach(function(e) {
                            if (typeof a[e] !== "function") {
                                throw new Error('plugin "' + e + '" does not exist');
                            }
                        });
                    }
                    a.scrubbing_ = false;
                    a.el_ = a.createEl();
                    tA((0, u.Z)(a), {
                        eventBusKey: "el_"
                    });
                    if (a.fsApi_.requestFullscreen) {
                        tc(s(), a.fsApi_.fullscreenchange, a.boundDocumentFullscreenChange_);
                        a.on(a.fsApi_.fullscreenchange, a.boundDocumentFullscreenChange_);
                    }
                    if (a.fluid_) {
                        a.on([
                            "playerreset",
                            "resize"
                        ], a.boundUpdateStyleEl_);
                    }
                    var c = tU(a.options_);
                    if (r.plugins) {
                        Object.keys(r.plugins).forEach(function(e) {
                            a[e](r.plugins[e]);
                        });
                    }
                    if (r.debug) {
                        a.debug(true);
                    }
                    a.options_.playerOptions = c;
                    a.middleware_ = [];
                    a.playbackRates(r.playbackRates);
                    a.initChildren();
                    a.isAudio(i.nodeName.toLowerCase() === "audio");
                    if (a.controls()) {
                        a.addClass("vjs-controls-enabled");
                    } else {
                        a.addClass("vjs-controls-disabled");
                    }
                    a.el_.setAttribute("role", "region");
                    if (a.isAudio()) {
                        a.el_.setAttribute("aria-label", a.localize("Audio Player"));
                    } else {
                        a.el_.setAttribute("aria-label", a.localize("Video Player"));
                    }
                    if (a.isAudio()) {
                        a.addClass("vjs-audio");
                    }
                    if (a.flexNotSupported_()) {
                        a.addClass("vjs-no-flex");
                    }
                    if (e$) {
                        a.addClass("vjs-touch-enabled");
                    }
                    if (!eT) {
                        a.addClass("vjs-workinghover");
                    }
                    t.players[a.id_] = (0, u.Z)(a);
                    var h = A.split(".")[0];
                    a.addClass("vjs-v" + h);
                    a.userActive(true);
                    a.reportUserActivity();
                    a.one("play", function(e) {
                        return a.listenForUserActivity_(e);
                    });
                    a.on("stageclick", function(e) {
                        return a.handleStageClick_(e);
                    });
                    a.on("keydown", function(e) {
                        return a.handleKeyDown(e);
                    });
                    a.on("languagechange", function(e) {
                        return a.handleLanguagechange(e);
                    });
                    a.breakpoints(a.options_.breakpoints);
                    a.responsive(a.options_.responsive);
                    return a;
                }
                var i = t.prototype;
                i.dispose = function i() {
                    var r = this;
                    this.trigger("dispose");
                    this.off("dispose");
                    th(s(), this.fsApi_.fullscreenchange, this.boundDocumentFullscreenChange_);
                    th(s(), "keydown", this.boundFullWindowOnEscKey_);
                    if (this.styleEl_ && this.styleEl_.parentNode) {
                        this.styleEl_.parentNode.removeChild(this.styleEl_);
                        this.styleEl_ = null;
                    }
                    t.players[this.id_] = null;
                    if (this.tag && this.tag.player) {
                        this.tag.player = null;
                    }
                    if (this.el_ && this.el_.player) {
                        this.el_.player = null;
                    }
                    if (this.tech_) {
                        this.tech_.dispose();
                        this.isPosterFromTech_ = false;
                        this.poster_ = "";
                    }
                    if (this.playerElIngest_) {
                        this.playerElIngest_ = null;
                    }
                    if (this.tag) {
                        this.tag = null;
                    }
                    iH(this);
                    iI.names.forEach(function(e) {
                        var t = iI[e];
                        var i = r[t.getterName]();
                        if (i && i.off) {
                            i.off();
                        }
                    });
                    e.prototype.dispose.call(this);
                };
                i.createEl = function t() {
                    var i = this.tag;
                    var r;
                    var a = (this.playerElIngest_ = i.parentNode && i.parentNode.hasAttribute && i.parentNode.hasAttribute("data-vjs-player"));
                    var o = this.tag.tagName.toLowerCase() === "video-js";
                    if (a) {
                        r = this.el_ = i.parentNode;
                    } else if (!o) {
                        r = this.el_ = e.prototype.createEl.call(this, "div");
                    }
                    var u = eU(i);
                    if (o) {
                        r = this.el_ = i;
                        i = this.tag = s().createElement("video");
                        while(r.children.length){
                            i.appendChild(r.firstChild);
                        }
                        if (!eD(r, "video-js")) {
                            eO(r, "video-js");
                        }
                        r.appendChild(i);
                        a = this.playerElIngest_ = r;
                        Object.keys(r).forEach(function(e) {
                            try {
                                i[e] = r[e];
                            } catch (t) {}
                        });
                    }
                    i.setAttribute("tabindex", "-1");
                    u.tabindex = "-1";
                    if (em || (ef && eg)) {
                        i.setAttribute("role", "application");
                        u.role = "application";
                    }
                    i.removeAttribute("width");
                    i.removeAttribute("height");
                    if ("width" in u) {
                        delete u.width;
                    }
                    if ("height" in u) {
                        delete u.height;
                    }
                    Object.getOwnPropertyNames(u).forEach(function(e) {
                        if (!(o && e === "class")) {
                            r.setAttribute(e, u[e]);
                        }
                        if (o) {
                            i.setAttribute(e, u[e]);
                        }
                    });
                    i.playerId = i.id;
                    i.id += "_html5_api";
                    i.className = "vjs-tech";
                    i.player = r.player = this;
                    this.addClass("vjs-paused");
                    if (n().VIDEOJS_NO_DYNAMIC_STYLE !== true) {
                        this.styleEl_ = e9("vjs-styles-dimensions");
                        var l = ez(".vjs-styles-defaults");
                        var d = ez("head");
                        d.insertBefore(this.styleEl_, l ? l.nextSibling : d.firstChild);
                    }
                    this.fill_ = false;
                    this.fluid_ = false;
                    this.width(this.options_.width);
                    this.height(this.options_.height);
                    this.fill(this.options_.fill);
                    this.fluid(this.options_.fluid);
                    this.aspectRatio(this.options_.aspectRatio);
                    this.crossOrigin(this.options_.crossOrigin || this.options_.crossorigin);
                    var c = i.getElementsByTagName("a");
                    for(var h = 0; h < c.length; h++){
                        var f = c.item(h);
                        eO(f, "vjs-hidden");
                        f.setAttribute("hidden", "hidden");
                    }
                    i.initNetworkState_ = i.networkState;
                    if (i.parentNode && !a) {
                        i.parentNode.insertBefore(r, i);
                    }
                    eA(i, r);
                    this.children_.unshift(i);
                    this.el_.setAttribute("lang", this.language_);
                    this.el_.setAttribute("translate", "no");
                    this.el_ = r;
                    return r;
                };
                i.crossOrigin = function e(t) {
                    if (!t) {
                        return this.techGet_("crossOrigin");
                    }
                    if (t !== "anonymous" && t !== "use-credentials") {
                        G.warn('crossOrigin must be "anonymous" or "use-credentials", given "' + t + '"');
                        return;
                    }
                    this.techCall_("setCrossOrigin", t);
                    return;
                };
                i.width = function e(t) {
                    return this.dimension("width", t);
                };
                i.height = function e(t) {
                    return this.dimension("height", t);
                };
                i.dimension = function e(t, i) {
                    var r = t + "_";
                    if (i === undefined) {
                        return this[r] || 0;
                    }
                    if (i === "" || i === "auto") {
                        this[r] = undefined;
                        this.updateStyleEl_();
                        return;
                    }
                    var n = parseFloat(i);
                    if (isNaN(n)) {
                        G.error('Improper value "' + i + '" supplied for for ' + t);
                        return;
                    }
                    this[r] = n;
                    this.updateStyleEl_();
                };
                i.fluid = function e(t) {
                    var i = this;
                    if (t === undefined) {
                        return !!this.fluid_;
                    }
                    this.fluid_ = !!t;
                    if (tS(this)) {
                        this.off([
                            "playerreset",
                            "resize"
                        ], this.boundUpdateStyleEl_);
                    }
                    if (t) {
                        this.addClass("vjs-fluid");
                        this.fill(false);
                        tk(this, function() {
                            i.on([
                                "playerreset",
                                "resize"
                            ], i.boundUpdateStyleEl_);
                        });
                    } else {
                        this.removeClass("vjs-fluid");
                    }
                    this.updateStyleEl_();
                };
                i.fill = function e(t) {
                    if (t === undefined) {
                        return !!this.fill_;
                    }
                    this.fill_ = !!t;
                    if (t) {
                        this.addClass("vjs-fill");
                        this.fluid(false);
                    } else {
                        this.removeClass("vjs-fill");
                    }
                };
                i.aspectRatio = function e(t) {
                    if (t === undefined) {
                        return this.aspectRatio_;
                    }
                    if (!/^\d+\:\d+$/.test(t)) {
                        throw new Error("Improper value supplied for aspect ratio. The format should be width:height, for example 16:9.");
                    }
                    this.aspectRatio_ = t;
                    this.fluid(true);
                    this.updateStyleEl_();
                };
                i.updateStyleEl_ = function e() {
                    if (n().VIDEOJS_NO_DYNAMIC_STYLE === true) {
                        var t = typeof this.width_ === "number" ? this.width_ : this.options_.width;
                        var i = typeof this.height_ === "number" ? this.height_ : this.options_.height;
                        var r = this.tech_ && this.tech_.el();
                        if (r) {
                            if (t >= 0) {
                                r.width = t;
                            }
                            if (i >= 0) {
                                r.height = i;
                            }
                        }
                        return;
                    }
                    var a;
                    var s;
                    var o;
                    var u;
                    if (this.aspectRatio_ !== undefined && this.aspectRatio_ !== "auto") {
                        o = this.aspectRatio_;
                    } else if (this.videoWidth() > 0) {
                        o = this.videoWidth() + ":" + this.videoHeight();
                    } else {
                        o = "16:9";
                    }
                    var l = o.split(":");
                    var d = l[1] / l[0];
                    if (this.width_ !== undefined) {
                        a = this.width_;
                    } else if (this.height_ !== undefined) {
                        a = this.height_ / d;
                    } else {
                        a = this.videoWidth() || 300;
                    }
                    if (this.height_ !== undefined) {
                        s = this.height_;
                    } else {
                        s = a * d;
                    }
                    if (/^[^a-zA-Z]/.test(this.id())) {
                        u = "dimensions-" + this.id();
                    } else {
                        u = this.id() + "-dimensions";
                    }
                    this.addClass(u);
                    eJ(this.styleEl_, "\n      ." + u + " {\n        width: " + a + "px;\n        height: " + s + "px;\n      }\n\n      ." + u + ".vjs-fluid {\n        padding-top: " + d * 100 + "%;\n      }\n    ");
                };
                i.loadTech_ = function e(t, i) {
                    var r = this;
                    if (this.tech_) {
                        this.unloadTech_();
                    }
                    var n = tM(t);
                    var a = t.charAt(0).toLowerCase() + t.slice(1);
                    if (n !== "Html5" && this.tag) {
                        i_.getTech("Html5").disposeMediaElement(this.tag);
                        this.tag.player = null;
                        this.tag = null;
                    }
                    this.techName_ = n;
                    this.isReady_ = false;
                    var s = this.autoplay();
                    if (typeof this.autoplay() === "string" || (this.autoplay() === true && this.options_.normalizeAutoplay)) {
                        s = false;
                    }
                    var o = {
                        source: i,
                        autoplay: s,
                        nativeControlsForTouch: this.options_.nativeControlsForTouch,
                        playerId: this.id(),
                        techId: this.id() + "_" + a + "_api",
                        playsinline: this.options_.playsinline,
                        preload: this.options_.preload,
                        loop: this.options_.loop,
                        disablePictureInPicture: this.options_.disablePictureInPicture,
                        muted: this.options_.muted,
                        poster: this.poster(),
                        language: this.language(),
                        playerElIngest: this.playerElIngest_ || false,
                        "vtt.js": this.options_["vtt.js"],
                        canOverridePoster: !!this.options_.techCanOverridePoster,
                        enableSourceset: this.options_.enableSourceset,
                        Promise: this.options_.Promise
                    };
                    iI.names.forEach(function(e) {
                        var t = iI[e];
                        o[t.getterName] = r[t.privateName];
                    });
                    J(o, this.options_[n]);
                    J(o, this.options_[a]);
                    J(o, this.options_[t.toLowerCase()]);
                    if (this.tag) {
                        o.tag = this.tag;
                    }
                    if (i && i.src === this.cache_.src && this.cache_.currentTime > 0) {
                        o.startTime = this.cache_.currentTime;
                    }
                    var u = i_.getTech(t);
                    if (!u) {
                        throw new Error("No Tech named '" + n + "' exists! '" + n + "' should be registered using videojs.registerTech()'");
                    }
                    this.tech_ = new u(o);
                    this.tech_.ready(t$(this, this.handleTechReady_), true);
                    tZ.jsonToTextTracks(this.textTracksJson_ || [], this.tech_);
                    nI.forEach(function(e) {
                        r.on(r.tech_, e, function(t) {
                            return r["handleTech" + tM(e) + "_"](t);
                        });
                    });
                    Object.keys(nP).forEach(function(e) {
                        r.on(r.tech_, e, function(t) {
                            if (r.tech_.playbackRate() === 0 && r.tech_.seeking()) {
                                r.queuedCallbacks_.push({
                                    callback: r["handleTech" + nP[e] + "_"].bind(r),
                                    event: t
                                });
                                return;
                            }
                            r["handleTech" + nP[e] + "_"](t);
                        });
                    });
                    this.on(this.tech_, "loadstart", function(e) {
                        return r.handleTechLoadStart_(e);
                    });
                    this.on(this.tech_, "sourceset", function(e) {
                        return r.handleTechSourceset_(e);
                    });
                    this.on(this.tech_, "waiting", function(e) {
                        return r.handleTechWaiting_(e);
                    });
                    this.on(this.tech_, "ended", function(e) {
                        return r.handleTechEnded_(e);
                    });
                    this.on(this.tech_, "seeking", function(e) {
                        return r.handleTechSeeking_(e);
                    });
                    this.on(this.tech_, "play", function(e) {
                        return r.handleTechPlay_(e);
                    });
                    this.on(this.tech_, "firstplay", function(e) {
                        return r.handleTechFirstPlay_(e);
                    });
                    this.on(this.tech_, "pause", function(e) {
                        return r.handleTechPause_(e);
                    });
                    this.on(this.tech_, "durationchange", function(e) {
                        return r.handleTechDurationChange_(e);
                    });
                    this.on(this.tech_, "fullscreenchange", function(e, t) {
                        return r.handleTechFullscreenChange_(e, t);
                    });
                    this.on(this.tech_, "fullscreenerror", function(e, t) {
                        return r.handleTechFullscreenError_(e, t);
                    });
                    this.on(this.tech_, "enterpictureinpicture", function(e) {
                        return r.handleTechEnterPictureInPicture_(e);
                    });
                    this.on(this.tech_, "leavepictureinpicture", function(e) {
                        return r.handleTechLeavePictureInPicture_(e);
                    });
                    this.on(this.tech_, "error", function(e) {
                        return r.handleTechError_(e);
                    });
                    this.on(this.tech_, "posterchange", function(e) {
                        return r.handleTechPosterChange_(e);
                    });
                    this.on(this.tech_, "textdata", function(e) {
                        return r.handleTechTextData_(e);
                    });
                    this.on(this.tech_, "ratechange", function(e) {
                        return r.handleTechRateChange_(e);
                    });
                    this.on(this.tech_, "loadedmetadata", this.boundUpdateStyleEl_);
                    this.usingNativeControls(this.techGet_("controls"));
                    if (this.controls() && !this.usingNativeControls()) {
                        this.addTechControlsListeners_();
                    }
                    if (this.tech_.el().parentNode !== this.el() && (n !== "Html5" || !this.tag)) {
                        eA(this.tech_.el(), this.el());
                    }
                    if (this.tag) {
                        this.tag.player = null;
                        this.tag = null;
                    }
                };
                i.unloadTech_ = function e() {
                    var t = this;
                    iI.names.forEach(function(e) {
                        var i = iI[e];
                        t[i.privateName] = t[i.getterName]();
                    });
                    this.textTracksJson_ = tZ.textTracksToJson(this.tech_);
                    this.isReady_ = false;
                    this.tech_.dispose();
                    this.tech_ = false;
                    if (this.isPosterFromTech_) {
                        this.poster_ = "";
                        this.trigger("posterchange");
                    }
                    this.isPosterFromTech_ = false;
                };
                i.tech = function e(t) {
                    if (t === undefined) {
                        G.warn("Using the tech directly can be dangerous. I hope you know what you're doing.\n" + "See https://github.com/videojs/video.js/issues/2617 for more info.\n");
                    }
                    return this.tech_;
                };
                i.addTechControlsListeners_ = function e() {
                    this.removeTechControlsListeners_();
                    this.on(this.tech_, "click", this.boundHandleTechClick_);
                    this.on(this.tech_, "dblclick", this.boundHandleTechDoubleClick_);
                    this.on(this.tech_, "touchstart", this.boundHandleTechTouchStart_);
                    this.on(this.tech_, "touchmove", this.boundHandleTechTouchMove_);
                    this.on(this.tech_, "touchend", this.boundHandleTechTouchEnd_);
                    this.on(this.tech_, "tap", this.boundHandleTechTap_);
                };
                i.removeTechControlsListeners_ = function e() {
                    this.off(this.tech_, "tap", this.boundHandleTechTap_);
                    this.off(this.tech_, "touchstart", this.boundHandleTechTouchStart_);
                    this.off(this.tech_, "touchmove", this.boundHandleTechTouchMove_);
                    this.off(this.tech_, "touchend", this.boundHandleTechTouchEnd_);
                    this.off(this.tech_, "click", this.boundHandleTechClick_);
                    this.off(this.tech_, "dblclick", this.boundHandleTechDoubleClick_);
                };
                i.handleTechReady_ = function e() {
                    this.triggerReady();
                    if (this.cache_.volume) {
                        this.techCall_("setVolume", this.cache_.volume);
                    }
                    this.handleTechPosterChange_();
                    this.handleTechDurationChange_();
                };
                i.handleTechLoadStart_ = function e() {
                    this.removeClass("vjs-ended");
                    this.removeClass("vjs-seeking");
                    this.error(null);
                    this.handleTechDurationChange_();
                    if (!this.paused()) {
                        this.trigger("loadstart");
                        this.trigger("firstplay");
                    } else {
                        this.hasStarted(false);
                        this.trigger("loadstart");
                    }
                    this.manualAutoplay_(this.autoplay() === true && this.options_.normalizeAutoplay ? "play" : this.autoplay());
                };
                i.manualAutoplay_ = function e(t) {
                    var i = this;
                    if (!this.tech_ || typeof t !== "string") {
                        return;
                    }
                    var r = function e() {
                        var t = i.muted();
                        i.muted(true);
                        var r = function e() {
                            i.muted(t);
                        };
                        i.playTerminatedQueue_.push(r);
                        var n = i.play();
                        if (!t4(n)) {
                            return;
                        }
                        return n["catch"](function(e) {
                            r();
                            throw new Error("Rejection at manualAutoplay. Restoring muted value. " + (e ? e : ""));
                        });
                    };
                    var n;
                    if (t === "any" && !this.muted()) {
                        n = this.play();
                        if (t4(n)) {
                            n = n["catch"](r);
                        }
                    } else if (t === "muted" && !this.muted()) {
                        n = r();
                    } else {
                        n = this.play();
                    }
                    if (!t4(n)) {
                        return;
                    }
                    return n.then(function() {
                        i.trigger({
                            type: "autoplay-success",
                            autoplay: t
                        });
                    })["catch"](function() {
                        i.trigger({
                            type: "autoplay-failure",
                            autoplay: t
                        });
                    });
                };
                i.updateSourceCaches_ = function e(t) {
                    if (t === void 0) {
                        t = "";
                    }
                    var i = t;
                    var r = "";
                    if (typeof i !== "string") {
                        i = t.src;
                        r = t.type;
                    }
                    this.cache_.source = this.cache_.source || {};
                    this.cache_.sources = this.cache_.sources || [];
                    if (i && !r) {
                        r = i3(this, i);
                    }
                    this.cache_.source = tU({}, t, {
                        src: i,
                        type: r
                    });
                    var n = this.cache_.sources.filter(function(e) {
                        return e.src && e.src === i;
                    });
                    var a = [];
                    var s = this.$$("source");
                    var o = [];
                    for(var u = 0; u < s.length; u++){
                        var l = eU(s[u]);
                        a.push(l);
                        if (l.src && l.src === i) {
                            o.push(l.src);
                        }
                    }
                    if (o.length && !n.length) {
                        this.cache_.sources = a;
                    } else if (!n.length) {
                        this.cache_.sources = [
                            this.cache_.source
                        ];
                    }
                    this.cache_.src = i;
                };
                i.handleTechSourceset_ = function e(t) {
                    var i = this;
                    if (!this.changingSrc_) {
                        var r = function e(t) {
                            return i.updateSourceCaches_(t);
                        };
                        var n = this.currentSource().src;
                        var a = t.src;
                        if (n && !/^blob:/.test(n) && /^blob:/.test(a)) {
                            if (!this.lastSource_ || (this.lastSource_.tech !== a && this.lastSource_.player !== n)) {
                                r = function e() {};
                            }
                        }
                        r(a);
                        if (!t.src) {
                            this.tech_.any([
                                "sourceset",
                                "loadstart"
                            ], function(e) {
                                if (e.type === "sourceset") {
                                    return;
                                }
                                var t = i.techGet("currentSrc");
                                i.lastSource_.tech = t;
                                i.updateSourceCaches_(t);
                            });
                        }
                    }
                    this.lastSource_ = {
                        player: this.currentSource().src,
                        tech: t.src
                    };
                    this.trigger({
                        src: t.src,
                        type: "sourceset"
                    });
                };
                i.hasStarted = function e(t) {
                    if (t === undefined) {
                        return this.hasStarted_;
                    }
                    if (t === this.hasStarted_) {
                        return;
                    }
                    this.hasStarted_ = t;
                    if (this.hasStarted_) {
                        this.addClass("vjs-has-started");
                        this.trigger("firstplay");
                    } else {
                        this.removeClass("vjs-has-started");
                    }
                };
                i.handleTechPlay_ = function e() {
                    this.removeClass("vjs-ended");
                    this.removeClass("vjs-paused");
                    this.addClass("vjs-playing");
                    this.hasStarted(true);
                    this.trigger("play");
                };
                i.handleTechRateChange_ = function e() {
                    if (this.tech_.playbackRate() > 0 && this.cache_.lastPlaybackRate === 0) {
                        this.queuedCallbacks_.forEach(function(e) {
                            return e.callback(e.event);
                        });
                        this.queuedCallbacks_ = [];
                    }
                    this.cache_.lastPlaybackRate = this.tech_.playbackRate();
                    this.trigger("ratechange");
                };
                i.handleTechWaiting_ = function e() {
                    var t = this;
                    this.addClass("vjs-waiting");
                    this.trigger("waiting");
                    var i = this.currentTime();
                    var r = function e() {
                        if (i !== t.currentTime()) {
                            t.removeClass("vjs-waiting");
                            t.off("timeupdate", e);
                        }
                    };
                    this.on("timeupdate", r);
                };
                i.handleTechCanPlay_ = function e() {
                    this.removeClass("vjs-waiting");
                    this.trigger("canplay");
                };
                i.handleTechCanPlayThrough_ = function e() {
                    this.removeClass("vjs-waiting");
                    this.trigger("canplaythrough");
                };
                i.handleTechPlaying_ = function e() {
                    this.removeClass("vjs-waiting");
                    this.trigger("playing");
                };
                i.handleTechSeeking_ = function e() {
                    this.addClass("vjs-seeking");
                    this.trigger("seeking");
                };
                i.handleTechSeeked_ = function e() {
                    this.removeClass("vjs-seeking");
                    this.removeClass("vjs-ended");
                    this.trigger("seeked");
                };
                i.handleTechFirstPlay_ = function e() {
                    if (this.options_.starttime) {
                        G.warn("Passing the `starttime` option to the player will be deprecated in 6.0");
                        this.currentTime(this.options_.starttime);
                    }
                    this.addClass("vjs-has-started");
                    this.trigger("firstplay");
                };
                i.handleTechPause_ = function e() {
                    this.removeClass("vjs-playing");
                    this.addClass("vjs-paused");
                    this.trigger("pause");
                };
                i.handleTechEnded_ = function e() {
                    this.addClass("vjs-ended");
                    this.removeClass("vjs-waiting");
                    if (this.options_.loop) {
                        this.currentTime(0);
                        this.play();
                    } else if (!this.paused()) {
                        this.pause();
                    }
                    this.trigger("ended");
                };
                i.handleTechDurationChange_ = function e() {
                    this.duration(this.techGet_("duration"));
                };
                i.handleTechClick_ = function e(t) {
                    if (!this.controls_) {
                        return;
                    }
                    if (this.options_ === undefined || this.options_.userActions === undefined || this.options_.userActions.click === undefined || this.options_.userActions.click !== false) {
                        if (this.options_ !== undefined && this.options_.userActions !== undefined && typeof this.options_.userActions.click === "function") {
                            this.options_.userActions.click.call(this, t);
                        } else if (this.paused()) {
                            t5(this.play());
                        } else {
                            this.pause();
                        }
                    }
                };
                i.handleTechDoubleClick_ = function e(t) {
                    if (!this.controls_) {
                        return;
                    }
                    var i = Array.prototype.some.call(this.$$(".vjs-control-bar, .vjs-modal-dialog"), function(e) {
                        return e.contains(t.target);
                    });
                    if (!i) {
                        if (this.options_ === undefined || this.options_.userActions === undefined || this.options_.userActions.doubleClick === undefined || this.options_.userActions.doubleClick !== false) {
                            if (this.options_ !== undefined && this.options_.userActions !== undefined && typeof this.options_.userActions.doubleClick === "function") {
                                this.options_.userActions.doubleClick.call(this, t);
                            } else if (this.isFullscreen()) {
                                this.exitFullscreen();
                            } else {
                                this.requestFullscreen();
                            }
                        }
                    }
                };
                i.handleTechTap_ = function e() {
                    this.userActive(!this.userActive());
                };
                i.handleTechTouchStart_ = function e() {
                    this.userWasActive = this.userActive();
                };
                i.handleTechTouchMove_ = function e() {
                    if (this.userWasActive) {
                        this.reportUserActivity();
                    }
                };
                i.handleTechTouchEnd_ = function e(t) {
                    if (t.cancelable) {
                        t.preventDefault();
                    }
                };
                i.handleStageClick_ = function e() {
                    this.reportUserActivity();
                };
                i.toggleFullscreenClass_ = function e() {
                    if (this.isFullscreen()) {
                        this.addClass("vjs-fullscreen");
                    } else {
                        this.removeClass("vjs-fullscreen");
                    }
                };
                i.documentFullscreenChange_ = function e(t) {
                    var i = t.target.player;
                    if (i && i !== this) {
                        return;
                    }
                    var r = this.el();
                    var n = s()[this.fsApi_.fullscreenElement] === r;
                    if (!n && r.matches) {
                        n = r.matches(":" + this.fsApi_.fullscreen);
                    } else if (!n && r.msMatchesSelector) {
                        n = r.msMatchesSelector(":" + this.fsApi_.fullscreen);
                    }
                    this.isFullscreen(n);
                };
                i.handleTechFullscreenChange_ = function e(t, i) {
                    if (i) {
                        if (i.nativeIOSFullscreen) {
                            this.toggleClass("vjs-ios-native-fs");
                        }
                        this.isFullscreen(i.isFullscreen);
                    }
                };
                i.handleTechFullscreenError_ = function e(t, i) {
                    this.trigger("fullscreenerror", i);
                };
                i.togglePictureInPictureClass_ = function e() {
                    if (this.isInPictureInPicture()) {
                        this.addClass("vjs-picture-in-picture");
                    } else {
                        this.removeClass("vjs-picture-in-picture");
                    }
                };
                i.handleTechEnterPictureInPicture_ = function e(t) {
                    this.isInPictureInPicture(true);
                };
                i.handleTechLeavePictureInPicture_ = function e(t) {
                    this.isInPictureInPicture(false);
                };
                i.handleTechError_ = function e() {
                    var t = this.tech_.error();
                    this.error(t);
                };
                i.handleTechTextData_ = function e() {
                    var t = null;
                    if (arguments.length > 1) {
                        t = arguments[1];
                    }
                    this.trigger("textdata", t);
                };
                i.getCache = function e() {
                    return this.cache_;
                };
                i.resetCache_ = function e() {
                    this.cache_ = {
                        currentTime: 0,
                        initTime: 0,
                        inactivityTimeout: this.options_.inactivityTimeout,
                        duration: NaN,
                        lastVolume: 1,
                        lastPlaybackRate: this.defaultPlaybackRate(),
                        media: null,
                        src: "",
                        source: {},
                        sources: [],
                        playbackRates: [],
                        volume: 1
                    };
                };
                i.techCall_ = function e(t, i) {
                    this.ready(function() {
                        if (t in iN) {
                            return iU(this.middleware_, this.tech_, t, i);
                        } else if (t in i1) {
                            return iB(this.middleware_, this.tech_, t, i);
                        }
                        try {
                            if (this.tech_) {
                                this.tech_[t](i);
                            }
                        } catch (e) {
                            G(e);
                            throw e;
                        }
                    }, true);
                };
                i.techGet_ = function e(t) {
                    if (!this.tech_ || !this.tech_.isReady_) {
                        return;
                    }
                    if (t in iF) {
                        return i0(this.middleware_, this.tech_, t);
                    } else if (t in i1) {
                        return iB(this.middleware_, this.tech_, t);
                    }
                    try {
                        return this.tech_[t]();
                    } catch (i) {
                        if (this.tech_[t] === undefined) {
                            G("Video.js: " + t + " method not defined for " + this.techName_ + " playback technology.", i);
                            throw i;
                        }
                        if (i.name === "TypeError") {
                            G("Video.js: " + t + " unavailable on " + this.techName_ + " playback technology element.", i);
                            this.tech_.isReady_ = false;
                            throw i;
                        }
                        G(i);
                        throw i;
                    }
                };
                i.play = function e() {
                    var t = this;
                    var i = this.options_.Promise || n().Promise;
                    if (i) {
                        return new i(function(e) {
                            t.play_(e);
                        });
                    }
                    return this.play_();
                };
                i.play_ = function e(t) {
                    var i = this;
                    if (t === void 0) {
                        t = t5;
                    }
                    this.playCallbacks_.push(t);
                    var r = Boolean(!this.changingSrc_ && (this.src() || this.currentSrc()));
                    if (this.waitToPlay_) {
                        this.off([
                            "ready",
                            "loadstart"
                        ], this.waitToPlay_);
                        this.waitToPlay_ = null;
                    }
                    if (!this.isReady_ || !r) {
                        this.waitToPlay_ = function(e) {
                            i.play_();
                        };
                        this.one([
                            "ready",
                            "loadstart"
                        ], this.waitToPlay_);
                        if (!r && (eb || eT)) {
                            this.load();
                        }
                        return;
                    }
                    var n = this.techGet_("play");
                    if (n === null) {
                        this.runPlayTerminatedQueue_();
                    } else {
                        this.runPlayCallbacks_(n);
                    }
                };
                i.runPlayTerminatedQueue_ = function e() {
                    var t = this.playTerminatedQueue_.slice(0);
                    this.playTerminatedQueue_ = [];
                    t.forEach(function(e) {
                        e();
                    });
                };
                i.runPlayCallbacks_ = function e(t) {
                    var i = this.playCallbacks_.slice(0);
                    this.playCallbacks_ = [];
                    this.playTerminatedQueue_ = [];
                    i.forEach(function(e) {
                        e(t);
                    });
                };
                i.pause = function e() {
                    this.techCall_("pause");
                };
                i.paused = function e() {
                    return this.techGet_("paused") === false ? false : true;
                };
                i.played = function e() {
                    return this.techGet_("played") || tq(0, 0);
                };
                i.scrubbing = function e(t) {
                    if (typeof t === "undefined") {
                        return this.scrubbing_;
                    }
                    this.scrubbing_ = !!t;
                    this.techCall_("setScrubbing", this.scrubbing_);
                    if (t) {
                        this.addClass("vjs-scrubbing");
                    } else {
                        this.removeClass("vjs-scrubbing");
                    }
                };
                i.currentTime = function e(t) {
                    if (typeof t !== "undefined") {
                        if (t < 0) {
                            t = 0;
                        }
                        if (!this.isReady_ || this.changingSrc_ || !this.tech_ || !this.tech_.isReady_) {
                            this.cache_.initTime = t;
                            this.off("canplay", this.boundApplyInitTime_);
                            this.one("canplay", this.boundApplyInitTime_);
                            return;
                        }
                        this.techCall_("setCurrentTime", t);
                        this.cache_.initTime = 0;
                        return;
                    }
                    this.cache_.currentTime = this.techGet_("currentTime") || 0;
                    return this.cache_.currentTime;
                };
                i.applyInitTime_ = function e() {
                    this.currentTime(this.cache_.initTime);
                };
                i.duration = function e(t) {
                    if (t === undefined) {
                        return this.cache_.duration !== undefined ? this.cache_.duration : NaN;
                    }
                    t = parseFloat(t);
                    if (t < 0) {
                        t = Infinity;
                    }
                    if (t !== this.cache_.duration) {
                        this.cache_.duration = t;
                        if (t === Infinity) {
                            this.addClass("vjs-live");
                        } else {
                            this.removeClass("vjs-live");
                        }
                        if (!isNaN(t)) {
                            this.trigger("durationchange");
                        }
                    }
                };
                i.remainingTime = function e() {
                    return this.duration() - this.currentTime();
                };
                i.remainingTimeDisplay = function e() {
                    return (Math.floor(this.duration()) - Math.floor(this.currentTime()));
                };
                i.buffered = function e() {
                    var e = this.techGet_("buffered");
                    if (!e || !e.length) {
                        e = tq(0, 0);
                    }
                    return e;
                };
                i.bufferedPercent = function e() {
                    return tV(this.buffered(), this.duration());
                };
                i.bufferedEnd = function e() {
                    var t = this.buffered();
                    var i = this.duration();
                    var r = t.end(t.length - 1);
                    if (r > i) {
                        r = i;
                    }
                    return r;
                };
                i.volume = function e(t) {
                    var i;
                    if (t !== undefined) {
                        i = Math.max(0, Math.min(1, parseFloat(t)));
                        this.cache_.volume = i;
                        this.techCall_("setVolume", i);
                        if (i > 0) {
                            this.lastVolume_(i);
                        }
                        return;
                    }
                    i = parseFloat(this.techGet_("volume"));
                    return isNaN(i) ? 1 : i;
                };
                i.muted = function e(t) {
                    if (t !== undefined) {
                        this.techCall_("setMuted", t);
                        return;
                    }
                    return this.techGet_("muted") || false;
                };
                i.defaultMuted = function e(t) {
                    if (t !== undefined) {
                        return this.techCall_("setDefaultMuted", t);
                    }
                    return this.techGet_("defaultMuted") || false;
                };
                i.lastVolume_ = function e(t) {
                    if (t !== undefined && t !== 0) {
                        this.cache_.lastVolume = t;
                        return;
                    }
                    return this.cache_.lastVolume;
                };
                i.supportsFullScreen = function e() {
                    return this.techGet_("supportsFullScreen") || false;
                };
                i.isFullscreen = function e(t) {
                    if (t !== undefined) {
                        var i = this.isFullscreen_;
                        this.isFullscreen_ = Boolean(t);
                        if (this.isFullscreen_ !== i && this.fsApi_.prefixed) {
                            this.trigger("fullscreenchange");
                        }
                        this.toggleFullscreenClass_();
                        return;
                    }
                    return this.isFullscreen_;
                };
                i.requestFullscreen = function e(t) {
                    var i = this.options_.Promise || n().Promise;
                    if (i) {
                        var r = this;
                        return new i(function(e, i) {
                            function n() {
                                r.off("fullscreenerror", s);
                                r.off("fullscreenchange", a);
                            }
                            function a() {
                                n();
                                e();
                            }
                            function s(e, t) {
                                n();
                                i(t);
                            }
                            r.one("fullscreenchange", a);
                            r.one("fullscreenerror", s);
                            var o = r.requestFullscreenHelper_(t);
                            if (o) {
                                o.then(n, n);
                                o.then(e, i);
                            }
                        });
                    }
                    return this.requestFullscreenHelper_();
                };
                i.requestFullscreenHelper_ = function e(t) {
                    var i = this;
                    var r;
                    if (!this.fsApi_.prefixed) {
                        r = (this.options_.fullscreen && this.options_.fullscreen.options) || {};
                        if (t !== undefined) {
                            r = t;
                        }
                    }
                    if (this.fsApi_.requestFullscreen) {
                        var n = this.el_[this.fsApi_.requestFullscreen](r);
                        if (n) {
                            n.then(function() {
                                return i.isFullscreen(true);
                            }, function() {
                                return i.isFullscreen(false);
                            });
                        }
                        return n;
                    } else if (this.tech_.supportsFullScreen() && !this.options_.preferFullWindow === true) {
                        this.techCall_("enterFullScreen");
                    } else {
                        this.enterFullWindow();
                    }
                };
                i.exitFullscreen = function e() {
                    var t = this.options_.Promise || n().Promise;
                    if (t) {
                        var i = this;
                        return new t(function(e, t) {
                            function r() {
                                i.off("fullscreenerror", a);
                                i.off("fullscreenchange", n);
                            }
                            function n() {
                                r();
                                e();
                            }
                            function a(e, i) {
                                r();
                                t(i);
                            }
                            i.one("fullscreenchange", n);
                            i.one("fullscreenerror", a);
                            var s = i.exitFullscreenHelper_();
                            if (s) {
                                s.then(r, r);
                                s.then(e, t);
                            }
                        });
                    }
                    return this.exitFullscreenHelper_();
                };
                i.exitFullscreenHelper_ = function e() {
                    var t = this;
                    if (this.fsApi_.requestFullscreen) {
                        var i = s()[this.fsApi_.exitFullscreen]();
                        if (i) {
                            t5(i.then(function() {
                                return t.isFullscreen(false);
                            }));
                        }
                        return i;
                    } else if (this.tech_.supportsFullScreen() && !this.options_.preferFullWindow === true) {
                        this.techCall_("exitFullScreen");
                    } else {
                        this.exitFullWindow();
                    }
                };
                i.enterFullWindow = function e() {
                    this.isFullscreen(true);
                    this.isFullWindow = true;
                    this.docOrigOverflow = s().documentElement.style.overflow;
                    tc(s(), "keydown", this.boundFullWindowOnEscKey_);
                    s().documentElement.style.overflow = "hidden";
                    eO(s().body, "vjs-full-window");
                    this.trigger("enterFullWindow");
                };
                i.fullWindowOnEscKey = function e(t) {
                    if (f().isEventKey(t, "Esc")) {
                        if (this.isFullscreen() === true) {
                            if (!this.isFullWindow) {
                                this.exitFullscreen();
                            } else {
                                this.exitFullWindow();
                            }
                        }
                    }
                };
                i.exitFullWindow = function e() {
                    this.isFullscreen(false);
                    this.isFullWindow = false;
                    th(s(), "keydown", this.boundFullWindowOnEscKey_);
                    s().documentElement.style.overflow = this.docOrigOverflow;
                    eR(s().body, "vjs-full-window");
                    this.trigger("exitFullWindow");
                };
                i.disablePictureInPicture = function e(t) {
                    if (t === undefined) {
                        return this.techGet_("disablePictureInPicture");
                    }
                    this.techCall_("setDisablePictureInPicture", t);
                    this.options_.disablePictureInPicture = t;
                    this.trigger("disablepictureinpicturechanged");
                };
                i.isInPictureInPicture = function e(t) {
                    if (t !== undefined) {
                        this.isInPictureInPicture_ = !!t;
                        this.togglePictureInPictureClass_();
                        return;
                    }
                    return !!this.isInPictureInPicture_;
                };
                i.requestPictureInPicture = function e() {
                    if ("pictureInPictureEnabled" in s() && this.disablePictureInPicture() === false) {
                        return this.techGet_("requestPictureInPicture");
                    }
                };
                i.exitPictureInPicture = function e() {
                    if ("pictureInPictureEnabled" in s()) {
                        return s().exitPictureInPicture();
                    }
                };
                i.handleKeyDown = function e(t) {
                    var i = this.options_.userActions;
                    if (!i || !i.hotkeys) {
                        return;
                    }
                    var r = function e(t) {
                        var i = t.tagName.toLowerCase();
                        if (t.isContentEditable) {
                            return true;
                        }
                        var r = [
                            "button",
                            "checkbox",
                            "hidden",
                            "radio",
                            "reset",
                            "submit", 
                        ];
                        if (i === "input") {
                            return r.indexOf(t.type) === -1;
                        }
                        var n = [
                            "textarea"
                        ];
                        return n.indexOf(i) !== -1;
                    };
                    if (r(this.el_.ownerDocument.activeElement)) {
                        return;
                    }
                    if (typeof i.hotkeys === "function") {
                        i.hotkeys.call(this, t);
                    } else {
                        this.handleHotkeys(t);
                    }
                };
                i.handleHotkeys = function e(t) {
                    var i = this.options_.userActions ? this.options_.userActions.hotkeys : {};
                    var r = i.fullscreenKey, n = r === void 0 ? function(e) {
                        return f().isEventKey(e, "f");
                    } : r, a = i.muteKey, o = a === void 0 ? function(e) {
                        return f().isEventKey(e, "m");
                    } : a, u = i.playPauseKey, l = u === void 0 ? function(e) {
                        return (f().isEventKey(e, "k") || f().isEventKey(e, "Space"));
                    } : u;
                    if (n.call(this, t)) {
                        t.preventDefault();
                        t.stopPropagation();
                        var d = tj.getComponent("FullscreenToggle");
                        if (s()[this.fsApi_.fullscreenEnabled] !== false) {
                            d.prototype.handleClick.call(this, t);
                        }
                    } else if (o.call(this, t)) {
                        t.preventDefault();
                        t.stopPropagation();
                        var c = tj.getComponent("MuteToggle");
                        c.prototype.handleClick.call(this, t);
                    } else if (l.call(this, t)) {
                        t.preventDefault();
                        t.stopPropagation();
                        var h = tj.getComponent("PlayToggle");
                        h.prototype.handleClick.call(this, t);
                    }
                };
                i.canPlayType = function e(t) {
                    var i;
                    for(var r = 0, n = this.options_.techOrder; r < n.length; r++){
                        var a = n[r];
                        var s = i_.getTech(a);
                        if (!s) {
                            s = tj.getComponent(a);
                        }
                        if (!s) {
                            G.error('The "' + a + '" tech is undefined. Skipped browser support check for that tech.');
                            continue;
                        }
                        if (s.isSupported()) {
                            i = s.canPlayType(t);
                            if (i) {
                                return i;
                            }
                        }
                    }
                    return "";
                };
                i.selectSource = function e(t) {
                    var i = this;
                    var r = this.options_.techOrder.map(function(e) {
                        return [
                            e,
                            i_.getTech(e)
                        ];
                    }).filter(function(e) {
                        var t = e[0], i = e[1];
                        if (i) {
                            return i.isSupported();
                        }
                        G.error('The "' + t + '" tech is undefined. Skipped browser support check for that tech.');
                        return false;
                    });
                    var n = function e(t, i, r) {
                        var n;
                        t.some(function(e) {
                            return i.some(function(t) {
                                n = r(e, t);
                                if (n) {
                                    return true;
                                }
                            });
                        });
                        return n;
                    };
                    var a;
                    var s = function e(t) {
                        return function(e, i) {
                            return t(i, e);
                        };
                    };
                    var o = function e(t, r) {
                        var n = t[0], a = t[1];
                        if (a.canPlaySource(r, i.options_[n.toLowerCase()])) {
                            return {
                                source: r,
                                tech: n
                            };
                        }
                    };
                    if (this.options_.sourceOrder) {
                        a = n(t, r, s(o));
                    } else {
                        a = n(r, t, o);
                    }
                    return a || false;
                };
                i.handleSrc_ = function e(t, i) {
                    var r = this;
                    if (typeof t === "undefined") {
                        return this.cache_.src || "";
                    }
                    if (this.resetRetryOnError_) {
                        this.resetRetryOnError_();
                    }
                    var n = i4(t);
                    if (!n.length) {
                        this.setTimeout(function() {
                            this.error({
                                code: 4,
                                message: this.localize(this.options_.notSupportedMessage)
                            });
                        }, 0);
                        return;
                    }
                    this.changingSrc_ = true;
                    if (!i) {
                        this.cache_.sources = n;
                    }
                    this.updateSourceCaches_(n[0]);
                    iR(this, n[0], function(e, t) {
                        r.middleware_ = t;
                        if (!i) {
                            r.cache_.sources = n;
                        }
                        r.updateSourceCaches_(e);
                        var a = r.src_(e);
                        if (a) {
                            if (n.length > 1) {
                                return r.handleSrc_(n.slice(1));
                            }
                            r.changingSrc_ = false;
                            r.setTimeout(function() {
                                this.error({
                                    code: 4,
                                    message: this.localize(this.options_.notSupportedMessage)
                                });
                            }, 0);
                            r.triggerReady();
                            return;
                        }
                        iM(t, r.tech_);
                    });
                    if (this.options_.retryOnError && n.length > 1) {
                        var a = function e() {
                            r.error(null);
                            r.handleSrc_(n.slice(1), true);
                        };
                        var s = function e() {
                            r.off("error", a);
                        };
                        this.one("error", a);
                        this.one("playing", s);
                        this.resetRetryOnError_ = function() {
                            r.off("error", a);
                            r.off("playing", s);
                        };
                    }
                };
                i.src = function e(t) {
                    return this.handleSrc_(t, false);
                };
                i.src_ = function e(t) {
                    var i = this;
                    var r = this.selectSource([
                        t
                    ]);
                    if (!r) {
                        return true;
                    }
                    if (!t0(r.tech, this.techName_)) {
                        this.changingSrc_ = true;
                        this.loadTech_(r.tech, r.source);
                        this.tech_.ready(function() {
                            i.changingSrc_ = false;
                        });
                        return false;
                    }
                    this.ready(function() {
                        if (this.tech_.constructor.prototype.hasOwnProperty("setSource")) {
                            this.techCall_("setSource", t);
                        } else {
                            this.techCall_("src", t.src);
                        }
                        this.changingSrc_ = false;
                    }, true);
                    return false;
                };
                i.load = function e() {
                    this.techCall_("load");
                };
                i.reset = function e() {
                    var t = this;
                    var i = this.options_.Promise || n().Promise;
                    if (this.paused() || !i) {
                        this.doReset_();
                    } else {
                        var r = this.play();
                        t5(r.then(function() {
                            return t.doReset_();
                        }));
                    }
                };
                i.doReset_ = function e() {
                    if (this.tech_) {
                        this.tech_.clearTracks("text");
                    }
                    this.resetCache_();
                    this.poster("");
                    this.loadTech_(this.options_.techOrder[0], null);
                    this.techCall_("reset");
                    this.resetControlBarUI_();
                    if (tS(this)) {
                        this.trigger("playerreset");
                    }
                };
                i.resetControlBarUI_ = function e() {
                    this.resetProgressBar_();
                    this.resetPlaybackRate_();
                    this.resetVolumeBar_();
                };
                i.resetProgressBar_ = function e() {
                    this.currentTime(0);
                    var t = this.controlBar, i = t.durationDisplay, r = t.remainingTimeDisplay;
                    if (i) {
                        i.updateContent();
                    }
                    if (r) {
                        r.updateContent();
                    }
                };
                i.resetPlaybackRate_ = function e() {
                    this.playbackRate(this.defaultPlaybackRate());
                    this.handleTechRateChange_();
                };
                i.resetVolumeBar_ = function e() {
                    this.volume(1.0);
                    this.trigger("volumechange");
                };
                i.currentSources = function e() {
                    var t = this.currentSource();
                    var i = [];
                    if (Object.keys(t).length !== 0) {
                        i.push(t);
                    }
                    return this.cache_.sources || i;
                };
                i.currentSource = function e() {
                    return this.cache_.source || {};
                };
                i.currentSrc = function e() {
                    return ((this.currentSource() && this.currentSource().src) || "");
                };
                i.currentType = function e() {
                    return ((this.currentSource() && this.currentSource().type) || "");
                };
                i.preload = function e(t) {
                    if (t !== undefined) {
                        this.techCall_("setPreload", t);
                        this.options_.preload = t;
                        return;
                    }
                    return this.techGet_("preload");
                };
                i.autoplay = function e(t) {
                    if (t === undefined) {
                        return this.options_.autoplay || false;
                    }
                    var i;
                    if ((typeof t === "string" && /(any|play|muted)/.test(t)) || (t === true && this.options_.normalizeAutoplay)) {
                        this.options_.autoplay = t;
                        this.manualAutoplay_(typeof t === "string" ? t : "play");
                        i = false;
                    } else if (!t) {
                        this.options_.autoplay = false;
                    } else {
                        this.options_.autoplay = true;
                    }
                    i = typeof i === "undefined" ? this.options_.autoplay : i;
                    if (this.tech_) {
                        this.techCall_("setAutoplay", i);
                    }
                };
                i.playsinline = function e(t) {
                    if (t !== undefined) {
                        this.techCall_("setPlaysinline", t);
                        this.options_.playsinline = t;
                        return this;
                    }
                    return this.techGet_("playsinline");
                };
                i.loop = function e(t) {
                    if (t !== undefined) {
                        this.techCall_("setLoop", t);
                        this.options_.loop = t;
                        return;
                    }
                    return this.techGet_("loop");
                };
                i.poster = function e(t) {
                    if (t === undefined) {
                        return this.poster_;
                    }
                    if (!t) {
                        t = "";
                    }
                    if (t === this.poster_) {
                        return;
                    }
                    this.poster_ = t;
                    this.techCall_("setPoster", t);
                    this.isPosterFromTech_ = false;
                    this.trigger("posterchange");
                };
                i.handleTechPosterChange_ = function e() {
                    if ((!this.poster_ || this.options_.techCanOverridePoster) && this.tech_ && this.tech_.poster) {
                        var t = this.tech_.poster() || "";
                        if (t !== this.poster_) {
                            this.poster_ = t;
                            this.isPosterFromTech_ = true;
                            this.trigger("posterchange");
                        }
                    }
                };
                i.controls = function e(t) {
                    if (t === undefined) {
                        return !!this.controls_;
                    }
                    t = !!t;
                    if (this.controls_ === t) {
                        return;
                    }
                    this.controls_ = t;
                    if (this.usingNativeControls()) {
                        this.techCall_("setControls", t);
                    }
                    if (this.controls_) {
                        this.removeClass("vjs-controls-disabled");
                        this.addClass("vjs-controls-enabled");
                        this.trigger("controlsenabled");
                        if (!this.usingNativeControls()) {
                            this.addTechControlsListeners_();
                        }
                    } else {
                        this.removeClass("vjs-controls-enabled");
                        this.addClass("vjs-controls-disabled");
                        this.trigger("controlsdisabled");
                        if (!this.usingNativeControls()) {
                            this.removeTechControlsListeners_();
                        }
                    }
                };
                i.usingNativeControls = function e(t) {
                    if (t === undefined) {
                        return !!this.usingNativeControls_;
                    }
                    t = !!t;
                    if (this.usingNativeControls_ === t) {
                        return;
                    }
                    this.usingNativeControls_ = t;
                    if (this.usingNativeControls_) {
                        this.addClass("vjs-using-native-controls");
                        this.trigger("usingnativecontrols");
                    } else {
                        this.removeClass("vjs-using-native-controls");
                        this.trigger("usingcustomcontrols");
                    }
                };
                i.error = function e(t) {
                    var i = this;
                    if (t === undefined) {
                        return this.error_ || null;
                    }
                    O("beforeerror").forEach(function(e) {
                        var r = e(i, t);
                        if (!((ee(r) && !Array.isArray(r)) || typeof r === "string" || typeof r === "number" || r === null)) {
                            i.log.error("please return a value that MediaError expects in beforeerror hooks");
                            return;
                        }
                        t = r;
                    });
                    if (this.options_.suppressNotSupportedError && t && t.code === 4) {
                        var r = function e() {
                            this.error(t);
                        };
                        this.options_.suppressNotSupportedError = false;
                        this.any([
                            "click",
                            "touchstart"
                        ], r);
                        this.one("loadstart", function() {
                            this.off([
                                "click",
                                "touchstart"
                            ], r);
                        });
                        return;
                    }
                    if (t === null) {
                        this.error_ = t;
                        this.removeClass("vjs-error");
                        if (this.errorDisplay) {
                            this.errorDisplay.close();
                        }
                        return;
                    }
                    this.error_ = new tW(t);
                    this.addClass("vjs-error");
                    G.error("(CODE:" + this.error_.code + " " + tW.errorTypes[this.error_.code] + ")", this.error_.message, this.error_);
                    this.trigger("error");
                    O("error").forEach(function(e) {
                        return e(i, i.error_);
                    });
                    return;
                };
                i.reportUserActivity = function e(t) {
                    this.userActivity_ = true;
                };
                i.userActive = function e(t) {
                    if (t === undefined) {
                        return this.userActive_;
                    }
                    t = !!t;
                    if (t === this.userActive_) {
                        return;
                    }
                    this.userActive_ = t;
                    if (this.userActive_) {
                        this.userActivity_ = true;
                        this.removeClass("vjs-user-inactive");
                        this.addClass("vjs-user-active");
                        this.trigger("useractive");
                        return;
                    }
                    if (this.tech_) {
                        this.tech_.one("mousemove", function(e) {
                            e.stopPropagation();
                            e.preventDefault();
                        });
                    }
                    this.userActivity_ = false;
                    this.removeClass("vjs-user-active");
                    this.addClass("vjs-user-inactive");
                    this.trigger("userinactive");
                };
                i.listenForUserActivity_ = function e() {
                    var t;
                    var i;
                    var r;
                    var n = t$(this, this.reportUserActivity);
                    var a = function e(t) {
                        if (t.screenX !== i || t.screenY !== r) {
                            i = t.screenX;
                            r = t.screenY;
                            n();
                        }
                    };
                    var s = function e() {
                        n();
                        this.clearInterval(t);
                        t = this.setInterval(n, 250);
                    };
                    var o = function e(i) {
                        n();
                        this.clearInterval(t);
                    };
                    this.on("mousedown", s);
                    this.on("mousemove", a);
                    this.on("mouseup", o);
                    this.on("mouseleave", o);
                    var u = this.getChild("controlBar");
                    if (u && !eT && !eu) {
                        u.on("mouseenter", function(e) {
                            if (this.player().options_.inactivityTimeout !== 0) {
                                this.player().cache_.inactivityTimeout = this.player().options_.inactivityTimeout;
                            }
                            this.player().options_.inactivityTimeout = 0;
                        });
                        u.on("mouseleave", function(e) {
                            this.player().options_.inactivityTimeout = this.player().cache_.inactivityTimeout;
                        });
                    }
                    this.on("keydown", n);
                    this.on("keyup", n);
                    var l;
                    this.setInterval(function() {
                        if (!this.userActivity_) {
                            return;
                        }
                        this.userActivity_ = false;
                        this.userActive(true);
                        this.clearTimeout(l);
                        var e = this.options_.inactivityTimeout;
                        if (e <= 0) {
                            return;
                        }
                        l = this.setTimeout(function() {
                            if (!this.userActivity_) {
                                this.userActive(false);
                            }
                        }, e);
                    }, 250);
                };
                i.playbackRate = function e(t) {
                    if (t !== undefined) {
                        this.techCall_("setPlaybackRate", t);
                        return;
                    }
                    if (this.tech_ && this.tech_.featuresPlaybackRate) {
                        return (this.cache_.lastPlaybackRate || this.techGet_("playbackRate"));
                    }
                    return 1.0;
                };
                i.defaultPlaybackRate = function e(t) {
                    if (t !== undefined) {
                        return this.techCall_("setDefaultPlaybackRate", t);
                    }
                    if (this.tech_ && this.tech_.featuresPlaybackRate) {
                        return this.techGet_("defaultPlaybackRate");
                    }
                    return 1.0;
                };
                i.isAudio = function e(t) {
                    if (t !== undefined) {
                        this.isAudio_ = !!t;
                        return;
                    }
                    return !!this.isAudio_;
                };
                i.addTextTrack = function e(t, i, r) {
                    if (this.tech_) {
                        return this.tech_.addTextTrack(t, i, r);
                    }
                };
                i.addRemoteTextTrack = function e(t, i) {
                    if (this.tech_) {
                        return this.tech_.addRemoteTextTrack(t, i);
                    }
                };
                i.removeRemoteTextTrack = function e(t) {
                    if (t === void 0) {
                        t = {};
                    }
                    var i = t, r = i.track;
                    if (!r) {
                        r = t;
                    }
                    if (this.tech_) {
                        return this.tech_.removeRemoteTextTrack(r);
                    }
                };
                i.getVideoPlaybackQuality = function e() {
                    return this.techGet_("getVideoPlaybackQuality");
                };
                i.videoWidth = function e() {
                    return ((this.tech_ && this.tech_.videoWidth && this.tech_.videoWidth()) || 0);
                };
                i.videoHeight = function e() {
                    return ((this.tech_ && this.tech_.videoHeight && this.tech_.videoHeight()) || 0);
                };
                i.language = function e(t) {
                    if (t === undefined) {
                        return this.language_;
                    }
                    if (this.language_ !== String(t).toLowerCase()) {
                        this.language_ = String(t).toLowerCase();
                        if (tS(this)) {
                            this.trigger("languagechange");
                        }
                    }
                };
                i.languages = function e() {
                    return tU(t.prototype.options_.languages, this.languages_);
                };
                i.toJSON = function e() {
                    var t = tU(this.options_);
                    var i = t.tracks;
                    t.tracks = [];
                    for(var r = 0; r < i.length; r++){
                        var n = i[r];
                        n = tU(n);
                        n.player = undefined;
                        t.tracks[r] = n;
                    }
                    return t;
                };
                i.createModal = function e(t, i) {
                    var r = this;
                    i = i || {};
                    i.content = t || "";
                    var n = new t7(this, i);
                    this.addChild(n);
                    n.on("dispose", function() {
                        r.removeChild(n);
                    });
                    n.open();
                    return n;
                };
                i.updateCurrentBreakpoint_ = function e() {
                    if (!this.responsive()) {
                        return;
                    }
                    var t = this.currentBreakpoint();
                    var i = this.currentWidth();
                    for(var r = 0; r < n_.length; r++){
                        var n = n_[r];
                        var a = this.breakpoints_[n];
                        if (i <= a) {
                            if (t === n) {
                                return;
                            }
                            if (t) {
                                this.removeClass(nL[t]);
                            }
                            this.addClass(nL[n]);
                            this.breakpoint_ = n;
                            break;
                        }
                    }
                };
                i.removeCurrentBreakpoint_ = function e() {
                    var t = this.currentBreakpointClass();
                    this.breakpoint_ = "";
                    if (t) {
                        this.removeClass(t);
                    }
                };
                i.breakpoints = function e(t) {
                    if (t === undefined) {
                        return J(this.breakpoints_);
                    }
                    this.breakpoint_ = "";
                    this.breakpoints_ = J({}, nA, t);
                    this.updateCurrentBreakpoint_();
                    return J(this.breakpoints_);
                };
                i.responsive = function e(t) {
                    if (t === undefined) {
                        return this.responsive_;
                    }
                    t = Boolean(t);
                    var i = this.responsive_;
                    if (t === i) {
                        return;
                    }
                    this.responsive_ = t;
                    if (t) {
                        this.on("playerresize", this.boundUpdateCurrentBreakpoint_);
                        this.updateCurrentBreakpoint_();
                    } else {
                        this.off("playerresize", this.boundUpdateCurrentBreakpoint_);
                        this.removeCurrentBreakpoint_();
                    }
                    return t;
                };
                i.currentBreakpoint = function e() {
                    return this.breakpoint_;
                };
                i.currentBreakpointClass = function e() {
                    return nL[this.breakpoint_] || "";
                };
                i.loadMedia = function e(t, i) {
                    var r = this;
                    if (!t || typeof t !== "object") {
                        return;
                    }
                    this.reset();
                    this.cache_.media = tU(t);
                    var n = this.cache_.media, a = n.artwork, s = n.poster, o = n.src, u = n.textTracks;
                    if (!a && s) {
                        this.cache_.media.artwork = [
                            {
                                src: s,
                                type: iW(s)
                            }, 
                        ];
                    }
                    if (o) {
                        this.src(o);
                    }
                    if (s) {
                        this.poster(s);
                    }
                    if (Array.isArray(u)) {
                        u.forEach(function(e) {
                            return r.addRemoteTextTrack(e, false);
                        });
                    }
                    this.ready(i);
                };
                i.getMedia = function e() {
                    if (!this.cache_.media) {
                        var t = this.poster();
                        var i = this.currentSources();
                        var r = Array.prototype.map.call(this.remoteTextTracks(), function(e) {
                            return {
                                kind: e.kind,
                                label: e.label,
                                language: e.language,
                                src: e.src
                            };
                        });
                        var n = {
                            src: i,
                            textTracks: r
                        };
                        if (t) {
                            n.poster = t;
                            n.artwork = [
                                {
                                    src: n.poster,
                                    type: iW(n.poster)
                                }, 
                            ];
                        }
                        return n;
                    }
                    return tU(this.cache_.media);
                };
                t.getTagSettings = function e(t) {
                    var i = {
                        sources: [],
                        tracks: []
                    };
                    var r = eU(t);
                    var n = r["data-setup"];
                    if (eD(t, "vjs-fill")) {
                        r.fill = true;
                    }
                    if (eD(t, "vjs-fluid")) {
                        r.fluid = true;
                    }
                    if (n !== null) {
                        var a = c()(n || "{}"), s = a[0], o = a[1];
                        if (s) {
                            G.error(s);
                        }
                        J(r, o);
                    }
                    J(i, r);
                    if (t.hasChildNodes()) {
                        var u = t.childNodes;
                        for(var l = 0, d = u.length; l < d; l++){
                            var h = u[l];
                            var f = h.nodeName.toLowerCase();
                            if (f === "source") {
                                i.sources.push(eU(h));
                            } else if (f === "track") {
                                i.tracks.push(eU(h));
                            }
                        }
                    }
                    return i;
                };
                i.flexNotSupported_ = function e() {
                    var t = s().createElement("i");
                    return !("flexBasis" in t.style || "webkitFlexBasis" in t.style || "mozFlexBasis" in t.style || "msFlexBasis" in t.style || "msFlexOrder" in t.style);
                };
                i.debug = function e(t) {
                    if (t === undefined) {
                        return this.debugEnabled_;
                    }
                    if (t) {
                        this.trigger("debugon");
                        this.previousLogLevel_ = this.log.level;
                        this.log.level("debug");
                        this.debugEnabled_ = true;
                    } else {
                        this.trigger("debugoff");
                        this.log.level(this.previousLogLevel_);
                        this.previousLogLevel_ = undefined;
                        this.debugEnabled_ = false;
                    }
                };
                i.playbackRates = function e(t) {
                    if (t === undefined) {
                        return this.cache_.playbackRates;
                    }
                    if (!Array.isArray(t)) {
                        return;
                    }
                    if (!t.every(function(e) {
                        return typeof e === "number";
                    })) {
                        return;
                    }
                    this.cache_.playbackRates = t;
                    this.trigger("playbackrateschange");
                };
                return t;
            })(tj);
            iI.names.forEach(function(e) {
                var t = iI[e];
                nD.prototype[t.getterName] = function() {
                    if (this.tech_) {
                        return this.tech_[t.getterName]();
                    }
                    this[t.privateName] = this[t.privateName] || new t.ListClass();
                    return this[t.privateName];
                };
            });
            nD.prototype.crossorigin = nD.prototype.crossOrigin;
            nD.players = {};
            var nO = n().navigator;
            nD.prototype.options_ = {
                techOrder: i_.defaultTechOrder_,
                html5: {},
                inactivityTimeout: 2000,
                playbackRates: [],
                liveui: false,
                children: [
                    "mediaLoader",
                    "posterImage",
                    "textTrackDisplay",
                    "loadingSpinner",
                    "bigPlayButton",
                    "liveTracker",
                    "controlBar",
                    "errorDisplay",
                    "textTrackSettings",
                    "resizeManager", 
                ],
                language: (nO && ((nO.languages && nO.languages[0]) || nO.userLanguage || nO.language)) || "en",
                languages: {},
                notSupportedMessage: "No compatible source was found for this media.",
                normalizeAutoplay: false,
                fullscreen: {
                    options: {
                        navigationUI: "hide"
                    }
                },
                breakpoints: {},
                responsive: false
            };
            [
                "ended",
                "seeking",
                "seekable",
                "networkState",
                "readyState", 
            ].forEach(function(e) {
                nD.prototype[e] = function() {
                    return this.techGet_(e);
                };
            });
            nI.forEach(function(e) {
                nD.prototype["handleTech" + tM(e) + "_"] = function() {
                    return this.trigger(e);
                };
            });
            tj.registerComponent("Player", nD);
            var nR = "plugin";
            var nM = "activePlugins_";
            var n0 = {};
            var nU = function e(t) {
                return n0.hasOwnProperty(t);
            };
            var nB = function e(t) {
                return nU(t) ? n0[t] : undefined;
            };
            var nF = function e(t, i) {
                t[nM] = t[nM] || {};
                t[nM][i] = true;
            };
            var nN = function e(t, i, r) {
                var n = (r ? "before" : "") + "pluginsetup";
                t.trigger(n, i);
                t.trigger(n + ":" + i.name, i);
            };
            var n1 = function e(t, i) {
                var r = function e() {
                    nN(this, {
                        name: t,
                        plugin: i,
                        instance: null
                    }, true);
                    var r = i.apply(this, arguments);
                    nF(this, t);
                    nN(this, {
                        name: t,
                        plugin: i,
                        instance: r
                    });
                    return r;
                };
                Object.keys(i).forEach(function(e) {
                    r[e] = i[e];
                });
                return r;
            };
            var nj = function e(t, i) {
                i.prototype.name = t;
                return function() {
                    nN(this, {
                        name: t,
                        plugin: i,
                        instance: null
                    }, true);
                    for(var e = arguments.length, r = new Array(e), n = 0; n < e; n++){
                        r[n] = arguments[n];
                    }
                    var a = (0, $.Z)(i, [
                        this
                    ].concat(r));
                    this[t] = function() {
                        return a;
                    };
                    nN(this, a.getEventHash());
                    return a;
                };
            };
            var n2 = (function() {
                function e(t) {
                    if (this.constructor === e) {
                        throw new Error("Plugin must be sub-classed; not directly instantiated.");
                    }
                    this.player = t;
                    if (!this.log) {
                        this.log = this.player.log.createLogger(this.name);
                    }
                    tA(this);
                    delete this.trigger;
                    tO(this, this.constructor.defaultState);
                    nF(t, this.name);
                    this.dispose = this.dispose.bind(this);
                    t.on("dispose", this.dispose);
                }
                var t = e.prototype;
                t.version = function e() {
                    return this.constructor.VERSION;
                };
                t.getEventHash = function e(t) {
                    if (t === void 0) {
                        t = {};
                    }
                    t.name = this.name;
                    t.plugin = this.constructor;
                    t.instance = this;
                    return t;
                };
                t.trigger = function e(t, i) {
                    if (i === void 0) {
                        i = {};
                    }
                    return tf(this.eventBusEl_, t, this.getEventHash(i));
                };
                t.handleStateChanged = function e(t) {};
                t.dispose = function e() {
                    var t = this.name, i = this.player;
                    this.trigger("dispose");
                    this.off();
                    i.off("dispose", this.dispose);
                    i[nM][t] = false;
                    this.player = this.state = null;
                    i[t] = nj(t, n0[t]);
                };
                e.isBasic = function t(i) {
                    var r = typeof i === "string" ? nB(i) : i;
                    return (typeof r === "function" && !e.prototype.isPrototypeOf(r.prototype));
                };
                e.registerPlugin = function t(i, r) {
                    if (typeof i !== "string") {
                        throw new Error('Illegal plugin name, "' + i + '", must be a string, was ' + typeof i + ".");
                    }
                    if (nU(i)) {
                        G.warn('A plugin named "' + i + '" already exists. You may want to avoid re-registering plugins!');
                    } else if (nD.prototype.hasOwnProperty(i)) {
                        throw new Error('Illegal plugin name, "' + i + '", cannot share a name with an existing player method!');
                    }
                    if (typeof r !== "function") {
                        throw new Error('Illegal plugin for "' + i + '", must be a function, was ' + typeof r + ".");
                    }
                    n0[i] = r;
                    if (i !== nR) {
                        if (e.isBasic(r)) {
                            nD.prototype[i] = n1(i, r);
                        } else {
                            nD.prototype[i] = nj(i, r);
                        }
                    }
                    return r;
                };
                e.deregisterPlugin = function e(t) {
                    if (t === nR) {
                        throw new Error("Cannot de-register base plugin.");
                    }
                    if (nU(t)) {
                        delete n0[t];
                        delete nD.prototype[t];
                    }
                };
                e.getPlugins = function e(t) {
                    if (t === void 0) {
                        t = Object.keys(n0);
                    }
                    var i;
                    t.forEach(function(e) {
                        var t = nB(e);
                        if (t) {
                            i = i || {};
                            i[e] = t;
                        }
                    });
                    return i;
                };
                e.getPluginVersion = function e(t) {
                    var i = nB(t);
                    return (i && i.VERSION) || "";
                };
                return e;
            })();
            n2.getPlugin = nB;
            n2.BASE_PLUGIN_NAME = nR;
            n2.registerPlugin(nR, n2);
            nD.prototype.usingPlugin = function(e) {
                return (!!this[nM] && this[nM][e] === true);
            };
            nD.prototype.hasPlugin = function(e) {
                return !!nU(e);
            };
            var nH = function e(t, i) {
                if (i === void 0) {
                    i = {};
                }
                var r = function e() {
                    t.apply(this, arguments);
                };
                var n = {};
                if (typeof i === "object") {
                    if (i.constructor !== Object.prototype.constructor) {
                        r = i.constructor;
                    }
                    n = i;
                } else if (typeof i === "function") {
                    r = i;
                }
                (0, y.Z)(r, t);
                if (t) {
                    r.super_ = t;
                }
                for(var a in n){
                    if (n.hasOwnProperty(a)) {
                        r.prototype[a] = n[a];
                    }
                }
                return r;
            };
            var n6 = function e(t) {
                return t.indexOf("#") === 0 ? t.slice(1) : t;
            };
            function nq(e, t, i) {
                var r = nq.getPlayer(e);
                if (r) {
                    if (t) {
                        G.warn('Player "' + e + '" is already initialised. Options will not be applied.');
                    }
                    if (i) {
                        r.ready(i);
                    }
                    return r;
                }
                var n = typeof e === "string" ? ez("#" + n6(e)) : e;
                if (!ew(n)) {
                    throw new TypeError("The element or ID supplied is not valid. (videojs)");
                }
                if (!n.ownerDocument.defaultView || !n.ownerDocument.body.contains(n)) {
                    G.warn("The element supplied is not included in the DOM");
                }
                t = t || {};
                O("beforesetup").forEach(function(e) {
                    var i = e(n, tU(t));
                    if (!ee(i) || Array.isArray(i)) {
                        G.error("please return an object in beforesetup hooks");
                        return;
                    }
                    t = tU(t, i);
                });
                var a = tj.getComponent("Player");
                r = new a(n, t, i);
                O("setup").forEach(function(e) {
                    return e(r);
                });
                return r;
            }
            nq.hooks_ = D;
            nq.hooks = O;
            nq.hook = R;
            nq.hookOnce = U;
            nq.removeHook = M;
            if (n().VIDEOJS_NO_DYNAMIC_STYLE !== true && eE()) {
                var nV = ez(".vjs-styles-defaults");
                if (!nV) {
                    nV = e9("vjs-styles-defaults");
                    var nW = ez("head");
                    if (nW) {
                        nW.insertBefore(nV, nW.firstChild);
                    }
                    eJ(nV, "\n      .video-js {\n        width: 300px;\n        height: 150px;\n      }\n\n      .vjs-fluid {\n        padding-top: 56.25%\n      }\n    ");
                }
            }
            eX(1, nq);
            nq.VERSION = A;
            nq.options = nD.prototype.options_;
            nq.getPlayers = function() {
                return nD.players;
            };
            nq.getPlayer = function(e) {
                var t = nD.players;
                var i;
                if (typeof e === "string") {
                    var r = n6(e);
                    var n = t[r];
                    if (n) {
                        return n;
                    }
                    i = ez("#" + r);
                } else {
                    i = e;
                }
                if (ew(i)) {
                    var a = i, s = a.player, o = a.playerId;
                    if (s || t[o]) {
                        return s || t[o];
                    }
                }
            };
            nq.getAllPlayers = function() {
                return (Object.keys(nD.players).map(function(e) {
                    return nD.players[e];
                }).filter(Boolean));
            };
            nq.players = nD.players;
            nq.getComponent = tj.getComponent;
            nq.registerComponent = function(e, t) {
                if (i_.isTech(t)) {
                    G.warn("The " + e + " tech was registered as a component. It should instead be registered using videojs.registerTech(name, tech)");
                }
                tj.registerComponent.call(tj, e, t);
            };
            nq.getTech = i_.getTech;
            nq.registerTech = i_.registerTech;
            nq.use = iO;
            Object.defineProperty(nq, "middleware", {
                value: {},
                writeable: false,
                enumerable: true
            });
            Object.defineProperty(nq.middleware, "TERMINATOR", {
                value: iD,
                writeable: false,
                enumerable: true
            });
            nq.browser = ex;
            nq.TOUCH_ENABLED = e$;
            nq.extend = nH;
            nq.mergeOptions = tU;
            nq.bind = t$;
            nq.registerPlugin = n2.registerPlugin;
            nq.deregisterPlugin = n2.deregisterPlugin;
            nq.plugin = function(e, t) {
                G.warn("videojs.plugin() is deprecated; use videojs.registerPlugin() instead");
                return n2.registerPlugin(e, t);
            };
            nq.getPlugins = n2.getPlugins;
            nq.getPlugin = n2.getPlugin;
            nq.getPluginVersion = n2.getPluginVersion;
            nq.addLanguage = function(e, t) {
                var i;
                e = ("" + e).toLowerCase();
                nq.options.languages = tU(nq.options.languages, ((i = {}), (i[e] = t), i));
                return nq.options.languages[e];
            };
            nq.log = G;
            nq.createLogger = K;
            nq.createTimeRange = nq.createTimeRanges = tq;
            nq.formatTime = ru;
            nq.setFormatTime = rs;
            nq.resetFormatTime = ro;
            nq.parseUrl = ic;
            nq.isCrossOrigin = im;
            nq.EventTarget = tT;
            nq.on = tc;
            nq.one = tp;
            nq.off = th;
            nq.trigger = tf;
            nq.xhr = m();
            nq.TextTrack = i8;
            nq.AudioTrack = iy;
            nq.VideoTrack = iT;
            [
                "isEl",
                "isTextNode",
                "createEl",
                "hasClass",
                "addClass",
                "removeClass",
                "toggleClass",
                "setAttributes",
                "getAttributes",
                "emptyEl",
                "appendContent",
                "insertContent", 
            ].forEach(function(e) {
                nq[e] = function() {
                    G.warn("videojs." + e + "() is deprecated; use videojs.dom." + e + "() instead");
                    return eK[e].apply(null, arguments);
                };
            });
            nq.computedStyle = ei;
            nq.dom = eK;
            nq.url = iv;
            nq.defineLazyProperty = nC;
            nq.addLanguage("en", {
                "Non-Fullscreen": "Exit Fullscreen"
            });
            var n3 = T.Z;
            var n4 = function e(t, i, r) {
                if (t && r && r.responseURL && i !== r.responseURL) {
                    return r.responseURL;
                }
                return i;
            };
            var n5 = function e(t) {
                if (nq.log.debug) {
                    return nq.log.debug.bind(nq, "VHS:", t + " >");
                }
                return function() {};
            };
            var nz = 1 / 30;
            var nG = nz * 3;
            var nK = function e(t, i) {
                var r = [];
                var n;
                if (t && t.length) {
                    for(n = 0; n < t.length; n++){
                        if (i(t.start(n), t.end(n))) {
                            r.push([
                                t.start(n),
                                t.end(n), 
                            ]);
                        }
                    }
                }
                return nq.createTimeRanges(r);
            };
            var nZ = function e(t, i) {
                return nK(t, function(e, t) {
                    return (e - nG <= i && t + nG >= i);
                });
            };
            var nQ = function e(t, i) {
                return nK(t, function(e) {
                    return e - nz >= i;
                });
            };
            var n7 = function e(t) {
                if (t.length < 2) {
                    return nq.createTimeRanges();
                }
                var i = [];
                for(var r = 1; r < t.length; r++){
                    var n = t.end(r - 1);
                    var a = t.start(r);
                    i.push([
                        n,
                        a
                    ]);
                }
                return nq.createTimeRanges(i);
            };
            var nX = function e(t, i) {
                var r = null;
                var n = null;
                var a = 0;
                var s = [];
                var o = [];
                if (!t || !t.length || !i || !i.length) {
                    return nq.createTimeRange();
                }
                var u = t.length;
                while(u--){
                    s.push({
                        time: t.start(u),
                        type: "start"
                    });
                    s.push({
                        time: t.end(u),
                        type: "end"
                    });
                }
                u = i.length;
                while(u--){
                    s.push({
                        time: i.start(u),
                        type: "start"
                    });
                    s.push({
                        time: i.end(u),
                        type: "end"
                    });
                }
                s.sort(function(e, t) {
                    return e.time - t.time;
                });
                for(u = 0; u < s.length; u++){
                    if (s[u].type === "start") {
                        a++;
                        if (a === 2) {
                            r = s[u].time;
                        }
                    } else if (s[u].type === "end") {
                        a--;
                        if (a === 1) {
                            n = s[u].time;
                        }
                    }
                    if (r !== null && n !== null) {
                        o.push([
                            r,
                            n
                        ]);
                        r = null;
                        n = null;
                    }
                }
                return nq.createTimeRanges(o);
            };
            var nY = function e(t) {
                var i = [];
                if (!t || !t.length) {
                    return "";
                }
                for(var r = 0; r < t.length; r++){
                    i.push(t.start(r) + " => " + t.end(r));
                }
                return i.join(", ");
            };
            var n9 = function e(t, i, r) {
                if (r === void 0) {
                    r = 1;
                }
                var n = t.length ? t.end(t.length - 1) : 0;
                return (n - i) / r;
            };
            var nJ = function e(t) {
                var i = [];
                for(var r = 0; r < t.length; r++){
                    i.push({
                        start: t.start(r),
                        end: t.end(r)
                    });
                }
                return i;
            };
            var ae = function e(t, i) {
                if (t === i) {
                    return false;
                }
                if ((!t && i) || (!i && t)) {
                    return true;
                }
                if (t.length !== i.length) {
                    return true;
                }
                for(var r = 0; r < t.length; r++){
                    if (t.start(r) !== i.start(r) || t.end(r) !== i.end(r)) {
                        return true;
                    }
                }
                return false;
            };
            var at = function e(t) {
                if (!t || !t.length || !t.end) {
                    return;
                }
                return t.end(t.length - 1);
            };
            var ai = function e(t, i) {
                var r = 0;
                if (!t || !t.length) {
                    return r;
                }
                for(var n = 0; n < t.length; n++){
                    var a = t.start(n);
                    var s = t.end(n);
                    if (i > s) {
                        continue;
                    }
                    if (i > a && i <= s) {
                        r += s - i;
                        continue;
                    }
                    r += s - a;
                }
                return r;
            };
            var ar = nq.createTimeRange;
            var an = function e(t, i) {
                if (!i.preload) {
                    return i.duration;
                }
                var r = 0;
                (i.parts || []).forEach(function(e) {
                    r += e.duration;
                });
                (i.preloadHints || []).forEach(function(e) {
                    if (e.type === "PART") {
                        r += t.partTargetDuration;
                    }
                });
                return r;
            };
            var aa = function e(t) {
                return (t.segments || []).reduce(function(e, t, i) {
                    if (t.parts) {
                        t.parts.forEach(function(r, n) {
                            e.push({
                                duration: r.duration,
                                segmentIndex: i,
                                partIndex: n,
                                part: r,
                                segment: t
                            });
                        });
                    } else {
                        e.push({
                            duration: t.duration,
                            segmentIndex: i,
                            partIndex: null,
                            segment: t,
                            part: null
                        });
                    }
                    return e;
                }, []);
            };
            var as = function e(t) {
                var i = t.segments && t.segments.length && t.segments[t.segments.length - 1];
                return (i && i.parts) || [];
            };
            var ao = function e(t) {
                var i = t.preloadSegment;
                if (!i) {
                    return;
                }
                var r = i.parts, n = i.preloadHints;
                var a = (n || []).reduce(function(e, t) {
                    return e + (t.type === "PART" ? 1 : 0);
                }, 0);
                a += r && r.length ? r.length : 0;
                return a;
            };
            var au = function e(t, i) {
                if (i.endList) {
                    return 0;
                }
                if (t && t.suggestedPresentationDelay) {
                    return t.suggestedPresentationDelay;
                }
                var r = as(i).length > 0;
                if (r && i.serverControl && i.serverControl.partHoldBack) {
                    return i.serverControl.partHoldBack;
                } else if (r && i.partTargetDuration) {
                    return i.partTargetDuration * 3;
                } else if (i.serverControl && i.serverControl.holdBack) {
                    return i.serverControl.holdBack;
                } else if (i.targetDuration) {
                    return i.targetDuration * 3;
                }
                return 0;
            };
            var al = function e(t, i) {
                var r = 0;
                var n = i - t.mediaSequence;
                var a = t.segments[n];
                if (a) {
                    if (typeof a.start !== "undefined") {
                        return {
                            result: a.start,
                            precise: true
                        };
                    }
                    if (typeof a.end !== "undefined") {
                        return {
                            result: a.end - a.duration,
                            precise: true
                        };
                    }
                }
                while(n--){
                    a = t.segments[n];
                    if (typeof a.end !== "undefined") {
                        return {
                            result: r + a.end,
                            precise: true
                        };
                    }
                    r += an(t, a);
                    if (typeof a.start !== "undefined") {
                        return {
                            result: r + a.start,
                            precise: true
                        };
                    }
                }
                return {
                    result: r,
                    precise: false
                };
            };
            var ad = function e(t, i) {
                var r = 0;
                var n;
                var a = i - t.mediaSequence;
                for(; a < t.segments.length; a++){
                    n = t.segments[a];
                    if (typeof n.start !== "undefined") {
                        return {
                            result: n.start - r,
                            precise: true
                        };
                    }
                    r += an(t, n);
                    if (typeof n.end !== "undefined") {
                        return {
                            result: n.end - r,
                            precise: true
                        };
                    }
                }
                return {
                    result: -1,
                    precise: false
                };
            };
            var ac = function e(t, i, r) {
                if (typeof i === "undefined") {
                    i = t.mediaSequence + t.segments.length;
                }
                if (i < t.mediaSequence) {
                    return 0;
                }
                var n = al(t, i);
                if (n.precise) {
                    return n.result;
                }
                var a = ad(t, i);
                if (a.precise) {
                    return a.result;
                }
                return n.result + r;
            };
            var ah = function e(t, i, r) {
                if (!t) {
                    return 0;
                }
                if (typeof r !== "number") {
                    r = 0;
                }
                if (typeof i === "undefined") {
                    if (t.totalDuration) {
                        return t.totalDuration;
                    }
                    if (!t.endList) {
                        return n()[Infinity];
                    }
                }
                return ac(t, i, r);
            };
            var af = function e(t) {
                var i = t.defaultDuration, r = t.durationList, n = t.startIndex, a = t.endIndex;
                var s = 0;
                if (n > a) {
                    var o = [
                        a,
                        n
                    ];
                    n = o[0];
                    a = o[1];
                }
                if (n < 0) {
                    for(var u = n; u < Math.min(0, a); u++){
                        s += i;
                    }
                    n = 0;
                }
                for(var l = n; l < a; l++){
                    s += r[l].duration;
                }
                return s;
            };
            var ap = function e(t, i, r, n) {
                if (!t || !t.segments) {
                    return null;
                }
                if (t.endList) {
                    return ah(t);
                }
                if (i === null) {
                    return null;
                }
                i = i || 0;
                var a = ac(t, t.mediaSequence + t.segments.length, i);
                if (r) {
                    n = typeof n === "number" ? n : au(null, t);
                    a -= n;
                }
                return Math.max(0, a);
            };
            var am = function e(t, i, r) {
                var n = true;
                var a = i || 0;
                var s = ap(t, i, n, r);
                if (s === null) {
                    return ar();
                }
                return ar(a, s);
            };
            var av = function e(t) {
                var i = t.playlist, r = t.currentTime, n = t.startingSegmentIndex, a = t.startingPartIndex, s = t.startTime, o = t.experimentalExactManifestTimings;
                var u = r - s;
                var l = aa(i);
                var d = 0;
                for(var c = 0; c < l.length; c++){
                    var h = l[c];
                    if (n !== h.segmentIndex) {
                        continue;
                    }
                    if (typeof a === "number" && typeof h.partIndex === "number" && a !== h.partIndex) {
                        continue;
                    }
                    d = c;
                    break;
                }
                if (u < 0) {
                    if (d > 0) {
                        for(var f = d - 1; f >= 0; f--){
                            var p = l[f];
                            u += p.duration;
                            if (o) {
                                if (u < 0) {
                                    continue;
                                }
                            } else if (u + nz <= 0) {
                                continue;
                            }
                            return {
                                partIndex: p.partIndex,
                                segmentIndex: p.segmentIndex,
                                startTime: s - af({
                                    defaultDuration: i.targetDuration,
                                    durationList: l,
                                    startIndex: d,
                                    endIndex: f
                                })
                            };
                        }
                    }
                    return {
                        partIndex: (l[0] && l[0].partIndex) || null,
                        segmentIndex: (l[0] && l[0].segmentIndex) || 0,
                        startTime: r
                    };
                }
                if (d < 0) {
                    for(var m = d; m < 0; m++){
                        u -= i.targetDuration;
                        if (u < 0) {
                            return {
                                partIndex: (l[0] && l[0].partIndex) || null,
                                segmentIndex: (l[0] && l[0].segmentIndex) || 0,
                                startTime: r
                            };
                        }
                    }
                    d = 0;
                }
                for(var v = d; v < l.length; v++){
                    var g = l[v];
                    u -= g.duration;
                    if (o) {
                        if (u > 0) {
                            continue;
                        }
                    } else if (u - nz >= 0) {
                        continue;
                    }
                    return {
                        partIndex: g.partIndex,
                        segmentIndex: g.segmentIndex,
                        startTime: s + af({
                            defaultDuration: i.targetDuration,
                            durationList: l,
                            startIndex: d,
                            endIndex: v
                        })
                    };
                }
                return {
                    segmentIndex: l[l.length - 1].segmentIndex,
                    partIndex: l[l.length - 1].partIndex,
                    startTime: r
                };
            };
            var ag = function e(t) {
                return (t.excludeUntil && t.excludeUntil > Date.now());
            };
            var a$ = function e(t) {
                return (t.excludeUntil && t.excludeUntil === Infinity);
            };
            var a8 = function e(t) {
                var i = ag(t);
                return !t.disabled && !i;
            };
            var ay = function e(t) {
                return t.disabled;
            };
            var aT = function e(t) {
                for(var i = 0; i < t.segments.length; i++){
                    if (t.segments[i].key) {
                        return true;
                    }
                }
                return false;
            };
            var ab = function e(t, i) {
                return i.attributes && i.attributes[t];
            };
            var ax = function e(t, i, r, n) {
                if (n === void 0) {
                    n = 0;
                }
                if (!ab("BANDWIDTH", r)) {
                    return NaN;
                }
                var a = t * r.attributes.BANDWIDTH;
                return (a - n * 8) / i;
            };
            var aS = function e(t, i) {
                if (t.playlists.length === 1) {
                    return true;
                }
                var r = i.attributes.BANDWIDTH || Number.MAX_VALUE;
                return (t.playlists.filter(function(e) {
                    if (!a8(e)) {
                        return false;
                    }
                    return ((e.attributes.BANDWIDTH || 0) < r);
                }).length === 0);
            };
            var ak = function e(t, i) {
                if ((!t && !i) || (!t && i) || (t && !i)) {
                    return false;
                }
                if (t === i) {
                    return true;
                }
                if (t.id && i.id && t.id === i.id) {
                    return true;
                }
                if (t.resolvedUri && i.resolvedUri && t.resolvedUri === i.resolvedUri) {
                    return true;
                }
                if (t.uri && i.uri && t.uri === i.uri) {
                    return true;
                }
                return false;
            };
            var aC = function e(t, i) {
                var r = (t && t.mediaGroups && t.mediaGroups.AUDIO) || {};
                var n = false;
                for(var a in r){
                    for(var s in r[a]){
                        n = i(r[a][s]);
                        if (n) {
                            break;
                        }
                    }
                    if (n) {
                        break;
                    }
                }
                return !!n;
            };
            var aE = function e(t) {
                if (!t || !t.playlists || !t.playlists.length) {
                    var i = aC(t, function(e) {
                        return ((e.playlists && e.playlists.length) || e.uri);
                    });
                    return i;
                }
                var r = function e(i) {
                    var r = t.playlists[i];
                    var n = r.attributes && r.attributes.CODECS;
                    if (n && n.split(",").every(function(e) {
                        return (0, x.KL)(e);
                    })) {
                        return "continue";
                    }
                    var a = aC(t, function(e) {
                        return ak(r, e);
                    });
                    if (a) {
                        return "continue";
                    }
                    return {
                        v: false
                    };
                };
                for(var n = 0; n < t.playlists.length; n++){
                    var a = r(n);
                    if (a === "continue") continue;
                    if (typeof a === "object") return a.v;
                }
                return true;
            };
            var aw = {
                liveEdgeDelay: au,
                duration: ah,
                seekable: am,
                getMediaInfoForTime: av,
                isEnabled: a8,
                isDisabled: ay,
                isBlacklisted: ag,
                isIncompatible: a$,
                playlistEnd: ap,
                isAes: aT,
                hasAttribute: ab,
                estimateSegmentRequestTime: ax,
                isLowestEnabledRendition: aS,
                isAudioOnly: aE,
                playlistMatch: ak,
                segmentDurationWithParts: an
            };
            var aI = nq.log;
            var aP = function e(t, i) {
                return t + "-" + i;
            };
            var a_ = function e(t) {
                var i = t.onwarn, r = t.oninfo, n = t.manifestString, a = t.customTagParsers, s = a === void 0 ? [] : a, o = t.customTagMappers, u = o === void 0 ? [] : o, l = t.experimentalLLHLS;
                var d = new b._b();
                if (i) {
                    d.on("warn", i);
                }
                if (r) {
                    d.on("info", r);
                }
                s.forEach(function(e) {
                    return d.addParser(e);
                });
                u.forEach(function(e) {
                    return d.addTagMapper(e);
                });
                d.push(n);
                d.end();
                var c = d.manifest;
                if (!l) {
                    [
                        "preloadSegment",
                        "skip",
                        "serverControl",
                        "renditionReports",
                        "partInf",
                        "partTargetDuration", 
                    ].forEach(function(e) {
                        if (c.hasOwnProperty(e)) {
                            delete c[e];
                        }
                    });
                    if (c.segments) {
                        c.segments.forEach(function(e) {
                            [
                                "parts",
                                "preloadHints"
                            ].forEach(function(t) {
                                if (e.hasOwnProperty(t)) {
                                    delete e[t];
                                }
                            });
                        });
                    }
                }
                if (!c.targetDuration) {
                    var h = 10;
                    if (c.segments && c.segments.length) {
                        h = c.segments.reduce(function(e, t) {
                            return Math.max(e, t.duration);
                        }, 0);
                    }
                    if (i) {
                        i("manifest has no targetDuration defaulting to " + h);
                    }
                    c.targetDuration = h;
                }
                var f = as(c);
                if (f.length && !c.partTargetDuration) {
                    var p = f.reduce(function(e, t) {
                        return Math.max(e, t.duration);
                    }, 0);
                    if (i) {
                        i("manifest has no partTargetDuration defaulting to " + p);
                        aI.error("LL-HLS manifest has parts but lacks required #EXT-X-PART-INF:PART-TARGET value. See https://datatracker.ietf.org/doc/html/draft-pantos-hls-rfc8216bis-09#section-4.4.3.7. Playback is not guaranteed.");
                    }
                    c.partTargetDuration = p;
                }
                return c;
            };
            var aL = function e(t, i) {
                if (!t.mediaGroups) {
                    return;
                }
                [
                    "AUDIO",
                    "SUBTITLES"
                ].forEach(function(e) {
                    if (!t.mediaGroups[e]) {
                        return;
                    }
                    for(var r in t.mediaGroups[e]){
                        for(var n in t.mediaGroups[e][r]){
                            var a = t.mediaGroups[e][r][n];
                            i(a, e, r, n);
                        }
                    }
                });
            };
            var aA = function e(t) {
                var i = t.playlist, r = t.uri, n = t.id;
                i.id = n;
                i.playlistErrors_ = 0;
                if (r) {
                    i.uri = r;
                }
                i.attributes = i.attributes || {};
            };
            var aD = function e(t) {
                var i = t.playlists.length;
                while(i--){
                    var r = t.playlists[i];
                    aA({
                        playlist: r,
                        id: aP(i, r.uri)
                    });
                    r.resolvedUri = n3(t.uri, r.uri);
                    t.playlists[r.id] = r;
                    t.playlists[r.uri] = r;
                    if (!r.attributes.BANDWIDTH) {
                        aI.warn("Invalid playlist STREAM-INF detected. Missing BANDWIDTH attribute.");
                    }
                }
            };
            var aO = function e(t) {
                aL(t, function(e) {
                    if (e.uri) {
                        e.resolvedUri = n3(t.uri, e.uri);
                    }
                });
            };
            var aR = function e(t, i) {
                var r = aP(0, i);
                var a = {
                    mediaGroups: {
                        AUDIO: {},
                        VIDEO: {},
                        "CLOSED-CAPTIONS": {},
                        SUBTITLES: {}
                    },
                    uri: n().location.href,
                    resolvedUri: n().location.href,
                    playlists: [
                        {
                            uri: i,
                            id: r,
                            resolvedUri: i,
                            attributes: {}
                        }, 
                    ]
                };
                a.playlists[r] = a.playlists[0];
                a.playlists[i] = a.playlists[0];
                return a;
            };
            var aM = function e(t, i) {
                t.uri = i;
                for(var r = 0; r < t.playlists.length; r++){
                    if (!t.playlists[r].uri) {
                        var n = "placeholder-uri-" + r;
                        t.playlists[r].uri = n;
                    }
                }
                var a = aE(t);
                aL(t, function(e, i, r, n) {
                    var s = "placeholder-uri-" + i + "-" + r + "-" + n;
                    if (!e.playlists || !e.playlists.length) {
                        if (a && i === "AUDIO" && !e.uri) {
                            for(var u = 0; u < t.playlists.length; u++){
                                var l = t.playlists[u];
                                if (l.attributes && l.attributes.AUDIO && l.attributes.AUDIO === r) {
                                    return;
                                }
                            }
                        }
                        e.playlists = [
                            (0, o.Z)({}, e), 
                        ];
                    }
                    e.playlists.forEach(function(e, i) {
                        var r = aP(i, s);
                        if (e.uri) {
                            e.resolvedUri = e.resolvedUri || n3(t.uri, e.uri);
                        } else {
                            e.uri = i === 0 ? s : r;
                            e.resolvedUri = e.uri;
                        }
                        e.id = e.id || r;
                        e.attributes = e.attributes || {};
                        t.playlists[e.id] = e;
                        t.playlists[e.uri] = e;
                    });
                });
                aD(t);
                aO(t);
            };
            var a0 = nq.mergeOptions, aU = nq.EventTarget;
            var aB = function e(t, i) {
                if (i.endList || !i.serverControl) {
                    return t;
                }
                var r = {};
                if (i.serverControl.canBlockReload) {
                    var a = i.preloadSegment;
                    var s = i.mediaSequence + i.segments.length;
                    if (a) {
                        var o = a.parts || [];
                        var u = ao(i) - 1;
                        if (u > -1 && u !== o.length - 1) {
                            r._HLS_part = u;
                        }
                        if (u > -1 || o.length) {
                            s--;
                        }
                    }
                    r._HLS_msn = s;
                }
                if (i.serverControl && i.serverControl.canSkipUntil) {
                    r._HLS_skip = i.serverControl.canSkipDateranges ? "v2" : "YES";
                }
                if (Object.keys(r).length) {
                    var l = new (n().URL)(t);
                    [
                        "_HLS_skip",
                        "_HLS_msn",
                        "_HLS_part"
                    ].forEach(function(e) {
                        if (!r.hasOwnProperty(e)) {
                            return;
                        }
                        l.searchParams.set(e, r[e]);
                    });
                    t = l.toString();
                }
                return t;
            };
            var aF = function e(t, i) {
                if (!t) {
                    return i;
                }
                var r = a0(t, i);
                if (t.preloadHints && !i.preloadHints) {
                    delete r.preloadHints;
                }
                if (t.parts && !i.parts) {
                    delete r.parts;
                } else if (t.parts && i.parts) {
                    for(var n = 0; n < i.parts.length; n++){
                        if (t.parts && t.parts[n]) {
                            r.parts[n] = a0(t.parts[n], i.parts[n]);
                        }
                    }
                }
                if (!t.skipped && i.skipped) {
                    r.skipped = false;
                }
                if (t.preload && !i.preload) {
                    r.preload = false;
                }
                return r;
            };
            var aN = function e(t, i, r) {
                var n = t.slice();
                var a = i.slice();
                r = r || 0;
                var s = [];
                var o;
                for(var u = 0; u < a.length; u++){
                    var l = n[u + r];
                    var d = a[u];
                    if (l) {
                        o = l.map || o;
                        s.push(aF(l, d));
                    } else {
                        if (o && !d.map) {
                            d.map = o;
                        }
                        s.push(d);
                    }
                }
                return s;
            };
            var a1 = function e(t, i) {
                if (!t.resolvedUri && t.uri) {
                    t.resolvedUri = n3(i, t.uri);
                }
                if (t.key && !t.key.resolvedUri) {
                    t.key.resolvedUri = n3(i, t.key.uri);
                }
                if (t.map && !t.map.resolvedUri) {
                    t.map.resolvedUri = n3(i, t.map.uri);
                }
                if (t.map && t.map.key && !t.map.key.resolvedUri) {
                    t.map.key.resolvedUri = n3(i, t.map.key.uri);
                }
                if (t.parts && t.parts.length) {
                    t.parts.forEach(function(e) {
                        if (e.resolvedUri) {
                            return;
                        }
                        e.resolvedUri = n3(i, e.uri);
                    });
                }
                if (t.preloadHints && t.preloadHints.length) {
                    t.preloadHints.forEach(function(e) {
                        if (e.resolvedUri) {
                            return;
                        }
                        e.resolvedUri = n3(i, e.uri);
                    });
                }
            };
            var aj = function e(t) {
                var i = t.segments || [];
                var r = t.preloadSegment;
                if (r && r.parts && r.parts.length) {
                    if (r.preloadHints) {
                        for(var n = 0; n < r.preloadHints.length; n++){
                            if (r.preloadHints[n].type === "MAP") {
                                return i;
                            }
                        }
                    }
                    r.duration = t.targetDuration;
                    r.preload = true;
                    i.push(r);
                }
                return i;
            };
            var a2 = function e(t, i) {
                return (t === i || (t.segments && i.segments && t.segments.length === i.segments.length && t.endList === i.endList && t.mediaSequence === i.mediaSequence && t.preloadSegment === i.preloadSegment));
            };
            var aH = function e(t, i, r) {
                if (r === void 0) {
                    r = a2;
                }
                var n = a0(t, {});
                var a = n.playlists[i.id];
                if (!a) {
                    return null;
                }
                if (r(a, i)) {
                    return null;
                }
                i.segments = aj(i);
                var s = a0(a, i);
                if (s.preloadSegment && !i.preloadSegment) {
                    delete s.preloadSegment;
                }
                if (a.segments) {
                    if (i.skip) {
                        i.segments = i.segments || [];
                        for(var o = 0; o < i.skip.skippedSegments; o++){
                            i.segments.unshift({
                                skipped: true
                            });
                        }
                    }
                    s.segments = aN(a.segments, i.segments, i.mediaSequence - a.mediaSequence);
                }
                s.segments.forEach(function(e) {
                    a1(e, s.resolvedUri);
                });
                for(var u = 0; u < n.playlists.length; u++){
                    if (n.playlists[u].id === i.id) {
                        n.playlists[u] = s;
                    }
                }
                n.playlists[i.id] = s;
                n.playlists[i.uri] = s;
                aL(t, function(e, t, r, n) {
                    if (!e.playlists) {
                        return;
                    }
                    for(var a = 0; a < e.playlists.length; a++){
                        if (i.id === e.playlists[a].id) {
                            e.playlists[a] = i;
                        }
                    }
                });
                return n;
            };
            var a6 = function e(t, i) {
                var r = t.segments || [];
                var n = r[r.length - 1];
                var a = n && n.parts && n.parts[n.parts.length - 1];
                var s = (a && a.duration) || (n && n.duration);
                if (i && s) {
                    return s * 1000;
                }
                return ((t.partTargetDuration || t.targetDuration || 10) * 500);
            };
            var aq = (function(e) {
                (0, l.Z)(t, e);
                function t(t, i, r) {
                    var n;
                    if (r === void 0) {
                        r = {};
                    }
                    n = e.call(this) || this;
                    if (!t) {
                        throw new Error("A non-empty playlist URL or object is required");
                    }
                    n.logger_ = n5("PlaylistLoader");
                    var a = r, s = a.withCredentials, o = s === void 0 ? false : s, l = a.handleManifestRedirects, d = l === void 0 ? false : l;
                    n.src = t;
                    n.vhs_ = i;
                    n.withCredentials = o;
                    n.handleManifestRedirects = d;
                    var c = i.options_;
                    n.customTagParsers = (c && c.customTagParsers) || [];
                    n.customTagMappers = (c && c.customTagMappers) || [];
                    n.experimentalLLHLS = (c && c.experimentalLLHLS) || false;
                    if (nq.browser.IE_VERSION) {
                        n.experimentalLLHLS = false;
                    }
                    n.state = "HAVE_NOTHING";
                    n.handleMediaupdatetimeout_ = n.handleMediaupdatetimeout_.bind((0, u.Z)(n));
                    n.on("mediaupdatetimeout", n.handleMediaupdatetimeout_);
                    return n;
                }
                var i = t.prototype;
                i.handleMediaupdatetimeout_ = function e() {
                    var t = this;
                    if (this.state !== "HAVE_METADATA") {
                        return;
                    }
                    var i = this.media();
                    var r = n3(this.master.uri, i.uri);
                    if (this.experimentalLLHLS) {
                        r = aB(r, i);
                    }
                    this.state = "HAVE_CURRENT_METADATA";
                    this.request = this.vhs_.xhr({
                        uri: r,
                        withCredentials: this.withCredentials
                    }, function(e, i) {
                        if (!t.request) {
                            return;
                        }
                        if (e) {
                            return t.playlistRequestError(t.request, t.media(), "HAVE_METADATA");
                        }
                        t.haveMetadata({
                            playlistString: t.request.responseText,
                            url: t.media().uri,
                            id: t.media().id
                        });
                    });
                };
                i.playlistRequestError = function e(t, i, r) {
                    var n = i.uri, a = i.id;
                    this.request = null;
                    if (r) {
                        this.state = r;
                    }
                    this.error = {
                        playlist: this.master.playlists[a],
                        status: t.status,
                        message: "HLS playlist request error at URL: " + n + ".",
                        responseText: t.responseText,
                        code: t.status >= 500 ? 4 : 2
                    };
                    this.trigger("error");
                };
                i.parseManifest_ = function e(t) {
                    var i = this;
                    var r = t.url, n = t.manifestString;
                    return a_({
                        onwarn: function e(t) {
                            var n = t.message;
                            return i.logger_("m3u8-parser warn for " + r + ": " + n);
                        },
                        oninfo: function e(t) {
                            var n = t.message;
                            return i.logger_("m3u8-parser info for " + r + ": " + n);
                        },
                        manifestString: n,
                        customTagParsers: this.customTagParsers,
                        customTagMappers: this.customTagMappers,
                        experimentalLLHLS: this.experimentalLLHLS
                    });
                };
                i.haveMetadata = function e(t) {
                    var i = t.playlistString, r = t.playlistObject, n = t.url, a = t.id;
                    this.request = null;
                    this.state = "HAVE_METADATA";
                    var s = r || this.parseManifest_({
                        url: n,
                        manifestString: i
                    });
                    s.lastRequest = Date.now();
                    aA({
                        playlist: s,
                        uri: n,
                        id: a
                    });
                    var o = aH(this.master, s);
                    this.targetDuration = s.partTargetDuration || s.targetDuration;
                    this.pendingMedia_ = null;
                    if (o) {
                        this.master = o;
                        this.media_ = this.master.playlists[a];
                    } else {
                        this.trigger("playlistunchanged");
                    }
                    this.updateMediaUpdateTimeout_(a6(this.media(), !!o));
                    this.trigger("loadedplaylist");
                };
                i.dispose = function e() {
                    this.trigger("dispose");
                    this.stopRequest();
                    n().clearTimeout(this.mediaUpdateTimeout);
                    n().clearTimeout(this.finalRenditionTimeout);
                    this.off();
                };
                i.stopRequest = function e() {
                    if (this.request) {
                        var t = this.request;
                        this.request = null;
                        t.onreadystatechange = null;
                        t.abort();
                    }
                };
                i.media = function e(t, i) {
                    var r = this;
                    if (!t) {
                        return this.media_;
                    }
                    if (this.state === "HAVE_NOTHING") {
                        throw new Error("Cannot switch media playlist from " + this.state);
                    }
                    if (typeof t === "string") {
                        if (!this.master.playlists[t]) {
                            throw new Error("Unknown playlist URI: " + t);
                        }
                        t = this.master.playlists[t];
                    }
                    n().clearTimeout(this.finalRenditionTimeout);
                    if (i) {
                        var a = ((t.partTargetDuration || t.targetDuration) / 2) * 1000 || 5 * 1000;
                        this.finalRenditionTimeout = n().setTimeout(this.media.bind(this, t, false), a);
                        return;
                    }
                    var s = this.state;
                    var o = !this.media_ || t.id !== this.media_.id;
                    var u = this.master.playlists[t.id];
                    if ((u && u.endList) || (t.endList && t.segments.length)) {
                        if (this.request) {
                            this.request.onreadystatechange = null;
                            this.request.abort();
                            this.request = null;
                        }
                        this.state = "HAVE_METADATA";
                        this.media_ = t;
                        if (o) {
                            this.trigger("mediachanging");
                            if (s === "HAVE_MASTER") {
                                this.trigger("loadedmetadata");
                            } else {
                                this.trigger("mediachange");
                            }
                        }
                        return;
                    }
                    this.updateMediaUpdateTimeout_(a6(t, true));
                    if (!o) {
                        return;
                    }
                    this.state = "SWITCHING_MEDIA";
                    if (this.request) {
                        if (t.resolvedUri === this.request.url) {
                            return;
                        }
                        this.request.onreadystatechange = null;
                        this.request.abort();
                        this.request = null;
                    }
                    if (this.media_) {
                        this.trigger("mediachanging");
                    }
                    this.pendingMedia_ = t;
                    this.request = this.vhs_.xhr({
                        uri: t.resolvedUri,
                        withCredentials: this.withCredentials
                    }, function(e, i) {
                        if (!r.request) {
                            return;
                        }
                        t.lastRequest = Date.now();
                        t.resolvedUri = n4(r.handleManifestRedirects, t.resolvedUri, i);
                        if (e) {
                            return r.playlistRequestError(r.request, t, s);
                        }
                        r.haveMetadata({
                            playlistString: i.responseText,
                            url: t.uri,
                            id: t.id
                        });
                        if (s === "HAVE_MASTER") {
                            r.trigger("loadedmetadata");
                        } else {
                            r.trigger("mediachange");
                        }
                    });
                };
                i.pause = function e() {
                    if (this.mediaUpdateTimeout) {
                        n().clearTimeout(this.mediaUpdateTimeout);
                        this.mediaUpdateTimeout = null;
                    }
                    this.stopRequest();
                    if (this.state === "HAVE_NOTHING") {
                        this.started = false;
                    }
                    if (this.state === "SWITCHING_MEDIA") {
                        if (this.media_) {
                            this.state = "HAVE_METADATA";
                        } else {
                            this.state = "HAVE_MASTER";
                        }
                    } else if (this.state === "HAVE_CURRENT_METADATA") {
                        this.state = "HAVE_METADATA";
                    }
                };
                i.load = function e(t) {
                    var i = this;
                    if (this.mediaUpdateTimeout) {
                        n().clearTimeout(this.mediaUpdateTimeout);
                        this.mediaUpdateTimeout = null;
                    }
                    var r = this.media();
                    if (t) {
                        var a = r ? ((r.partTargetDuration || r.targetDuration) / 2) * 1000 : 5 * 1000;
                        this.mediaUpdateTimeout = n().setTimeout(function() {
                            i.mediaUpdateTimeout = null;
                            i.load();
                        }, a);
                        return;
                    }
                    if (!this.started) {
                        this.start();
                        return;
                    }
                    if (r && !r.endList) {
                        this.trigger("mediaupdatetimeout");
                    } else {
                        this.trigger("loadedplaylist");
                    }
                };
                i.updateMediaUpdateTimeout_ = function e(t) {
                    var i = this;
                    if (this.mediaUpdateTimeout) {
                        n().clearTimeout(this.mediaUpdateTimeout);
                        this.mediaUpdateTimeout = null;
                    }
                    if (!this.media() || this.media().endList) {
                        return;
                    }
                    this.mediaUpdateTimeout = n().setTimeout(function() {
                        i.mediaUpdateTimeout = null;
                        i.trigger("mediaupdatetimeout");
                        i.updateMediaUpdateTimeout_(t);
                    }, t);
                };
                i.start = function e() {
                    var t = this;
                    this.started = true;
                    if (typeof this.src === "object") {
                        if (!this.src.uri) {
                            this.src.uri = n().location.href;
                        }
                        this.src.resolvedUri = this.src.uri;
                        setTimeout(function() {
                            t.setupInitialPlaylist(t.src);
                        }, 0);
                        return;
                    }
                    this.request = this.vhs_.xhr({
                        uri: this.src,
                        withCredentials: this.withCredentials
                    }, function(e, i) {
                        if (!t.request) {
                            return;
                        }
                        t.request = null;
                        if (e) {
                            t.error = {
                                status: i.status,
                                message: "HLS playlist request error at URL: " + t.src + ".",
                                responseText: i.responseText,
                                code: 2
                            };
                            if (t.state === "HAVE_NOTHING") {
                                t.started = false;
                            }
                            return t.trigger("error");
                        }
                        t.src = n4(t.handleManifestRedirects, t.src, i);
                        var r = t.parseManifest_({
                            manifestString: i.responseText,
                            url: t.src
                        });
                        t.setupInitialPlaylist(r);
                    });
                };
                i.srcUri = function e() {
                    return typeof this.src === "string" ? this.src : this.src.uri;
                };
                i.setupInitialPlaylist = function e(t) {
                    this.state = "HAVE_MASTER";
                    if (t.playlists) {
                        this.master = t;
                        aM(this.master, this.srcUri());
                        t.playlists.forEach(function(e) {
                            e.segments = aj(e);
                            e.segments.forEach(function(t) {
                                a1(t, e.resolvedUri);
                            });
                        });
                        this.trigger("loadedplaylist");
                        if (!this.request) {
                            this.media(this.master.playlists[0]);
                        }
                        return;
                    }
                    var i = this.srcUri() || n().location.href;
                    this.master = aR(t, i);
                    this.haveMetadata({
                        playlistObject: t,
                        url: i,
                        id: this.master.playlists[0].id
                    });
                    this.trigger("loadedmetadata");
                };
                return t;
            })(aU);
            var aV = nq.xhr, aW = nq.mergeOptions;
            var a3 = function e(t, i, r, n) {
                var a = t.responseType === "arraybuffer" ? t.response : t.responseText;
                if (!i && a) {
                    t.responseTime = Date.now();
                    t.roundTripTime = t.responseTime - t.requestTime;
                    t.bytesReceived = a.byteLength || a.length;
                    if (!t.bandwidth) {
                        t.bandwidth = Math.floor((t.bytesReceived / t.roundTripTime) * 8 * 1000);
                    }
                }
                if (r.headers) {
                    t.responseHeaders = r.headers;
                }
                if (i && i.code === "ETIMEDOUT") {
                    t.timedout = true;
                }
                if (!i && !t.aborted && r.statusCode !== 200 && r.statusCode !== 206 && r.statusCode !== 0) {
                    i = new Error("XHR Failed with a response of: " + (t && (a || t.responseText)));
                }
                n(i, t);
            };
            var a4 = function e() {
                var t = function e(t, i) {
                    t = aW({
                        timeout: 45e3
                    }, t);
                    var r = e.beforeRequest || nq.Vhs.xhr.beforeRequest;
                    if (r && typeof r === "function") {
                        var n = r(t);
                        if (n) {
                            t = n;
                        }
                    }
                    var a = nq.Vhs.xhr.original === true ? aV : nq.Vhs.xhr;
                    var s = a(t, function(e, t) {
                        return a3(s, e, t, i);
                    });
                    var o = s.abort;
                    s.abort = function() {
                        s.aborted = true;
                        return o.apply(s, arguments);
                    };
                    s.uri = t.uri;
                    s.requestTime = Date.now();
                    return s;
                };
                t.original = true;
                return t;
            };
            var a5 = function e(t) {
                var i = t.offset + t.length - 1;
                var r = t.offset;
                return "bytes=" + r + "-" + i;
            };
            var az = function e(t) {
                var i = {};
                if (t.byterange) {
                    i.Range = a5(t.byterange);
                }
                return i;
            };
            var aG = function e(t, i) {
                return t.start(i) + "-" + t.end(i);
            };
            var aK = function e(t, i) {
                var r = t.toString(16);
                return ("00".substring(0, 2 - r.length) + r + (i % 2 ? " " : ""));
            };
            var aZ = function e(t) {
                if (t >= 0x20 && t < 0x7e) {
                    return String.fromCharCode(t);
                }
                return ".";
            };
            var aQ = function e(t) {
                var i = {};
                Object.keys(t).forEach(function(e) {
                    var r = t[e];
                    if (ArrayBuffer.isView(r)) {
                        i[e] = {
                            bytes: r.buffer,
                            byteOffset: r.byteOffset,
                            byteLength: r.byteLength
                        };
                    } else {
                        i[e] = r;
                    }
                });
                return i;
            };
            var a7 = function e(t) {
                var i = t.byterange || {
                    length: Infinity,
                    offset: 0
                };
                return [
                    i.length,
                    i.offset,
                    t.resolvedUri, 
                ].join(",");
            };
            var aX = function e(t) {
                return t.resolvedUri;
            };
            var aY = function e(t) {
                var i = Array.prototype.slice.call(t);
                var r = 16;
                var n = "";
                var a;
                var s;
                for(var o = 0; o < i.length / r; o++){
                    a = i.slice(o * r, o * r + r).map(aK).join("");
                    s = i.slice(o * r, o * r + r).map(aZ).join("");
                    n += a + " " + s + "\n";
                }
                return n;
            };
            var a9 = function e(t) {
                var i = t.bytes;
                return aY(i);
            };
            var aJ = function e(t) {
                var i = "";
                var r;
                for(r = 0; r < t.length; r++){
                    i += aG(t, r) + " ";
                }
                return i;
            };
            var se = Object.freeze({
                __proto__: null,
                createTransferableMessage: aQ,
                initSegmentId: a7,
                segmentKeyId: aX,
                hexDump: aY,
                tagDump: a9,
                textRanges: aJ
            });
            var st = 0.25;
            var si = function e(t, i) {
                if (!i.dateTimeObject) {
                    return null;
                }
                var r = i.videoTimingInfo.transmuxerPrependedSeconds;
                var n = i.videoTimingInfo.transmuxedPresentationStart;
                var a = n + r;
                var s = t - a;
                return new Date(i.dateTimeObject.getTime() + s * 1000);
            };
            var sr = function e(t) {
                return (t.transmuxedPresentationEnd - t.transmuxedPresentationStart - t.transmuxerPrependedSeconds);
            };
            var sn = function e(t, i) {
                var r;
                try {
                    r = new Date(t);
                } catch (n) {
                    return null;
                }
                if (!i || !i.segments || i.segments.length === 0) {
                    return null;
                }
                var a = i.segments[0];
                if (r < a.dateTimeObject) {
                    return null;
                }
                for(var s = 0; s < i.segments.length - 1; s++){
                    a = i.segments[s];
                    var o = i.segments[s + 1].dateTimeObject;
                    if (r < o) {
                        break;
                    }
                }
                var u = i.segments[i.segments.length - 1];
                var l = u.dateTimeObject;
                var d = u.videoTimingInfo ? sr(u.videoTimingInfo) : u.duration + u.duration * st;
                var c = new Date(l.getTime() + d * 1000);
                if (r > c) {
                    return null;
                }
                if (r > l) {
                    a = u;
                }
                return {
                    segment: a,
                    estimatedStart: a.videoTimingInfo ? a.videoTimingInfo.transmuxedPresentationStart : aw.duration(i, i.mediaSequence + i.segments.indexOf(a)),
                    type: a.videoTimingInfo ? "accurate" : "estimate"
                };
            };
            var sa = function e(t, i) {
                if (!i || !i.segments || i.segments.length === 0) {
                    return null;
                }
                var r = 0;
                var n;
                for(var a = 0; a < i.segments.length; a++){
                    n = i.segments[a];
                    r = n.videoTimingInfo ? n.videoTimingInfo.transmuxedPresentationEnd : r + n.duration;
                    if (t <= r) {
                        break;
                    }
                }
                var s = i.segments[i.segments.length - 1];
                if (s.videoTimingInfo && s.videoTimingInfo.transmuxedPresentationEnd < t) {
                    return null;
                }
                if (t > r) {
                    if (t > r + s.duration * st) {
                        return null;
                    }
                    n = s;
                }
                return {
                    segment: n,
                    estimatedStart: n.videoTimingInfo ? n.videoTimingInfo.transmuxedPresentationStart : r - n.duration,
                    type: n.videoTimingInfo ? "accurate" : "estimate"
                };
            };
            var ss = function e(t, i) {
                var r;
                var n;
                try {
                    r = new Date(t);
                    n = new Date(i);
                } catch (a) {}
                var s = r.getTime();
                var o = n.getTime();
                return (o - s) / 1000;
            };
            var so = function e(t) {
                if (!t.segments || t.segments.length === 0) {
                    return false;
                }
                for(var i = 0; i < t.segments.length; i++){
                    var r = t.segments[i];
                    if (!r.dateTimeObject) {
                        return false;
                    }
                }
                return true;
            };
            var su = function e(t) {
                var i = t.playlist, r = t.time, n = r === void 0 ? undefined : r, a = t.callback;
                if (!a) {
                    throw new Error("getProgramTime: callback must be provided");
                }
                if (!i || n === undefined) {
                    return a({
                        message: "getProgramTime: playlist and time must be provided"
                    });
                }
                var s = sa(n, i);
                if (!s) {
                    return a({
                        message: "valid programTime was not found"
                    });
                }
                if (s.type === "estimate") {
                    return a({
                        message: "Accurate programTime could not be determined." + " Please seek to e.seekTime and try again",
                        seekTime: s.estimatedStart
                    });
                }
                var o = {
                    mediaSeconds: n
                };
                var u = si(n, s.segment);
                if (u) {
                    o.programDateTime = u.toISOString();
                }
                return a(null, o);
            };
            var sl = function e(t) {
                var i = t.programTime, r = t.playlist, n = t.retryCount, a = n === void 0 ? 2 : n, s = t.seekTo, o = t.pauseAfterSeek, u = o === void 0 ? true : o, l = t.tech, d = t.callback;
                if (!d) {
                    throw new Error("seekToProgramTime: callback must be provided");
                }
                if (typeof i === "undefined" || !r || !s) {
                    return d({
                        message: "seekToProgramTime: programTime, seekTo and playlist must be provided"
                    });
                }
                if (!r.endList && !l.hasStarted_) {
                    return d({
                        message: "player must be playing a live stream to start buffering"
                    });
                }
                if (!so(r)) {
                    return d({
                        message: "programDateTime tags must be provided in the manifest " + r.resolvedUri
                    });
                }
                var c = sn(i, r);
                if (!c) {
                    return d({
                        message: i + " was not found in the stream"
                    });
                }
                var h = c.segment;
                var f = ss(h.dateTimeObject, i);
                if (c.type === "estimate") {
                    if (a === 0) {
                        return d({
                            message: i + " is not buffered yet. Try again"
                        });
                    }
                    s(c.estimatedStart + f);
                    l.one("seeked", function() {
                        e({
                            programTime: i,
                            playlist: r,
                            retryCount: a - 1,
                            seekTo: s,
                            pauseAfterSeek: u,
                            tech: l,
                            callback: d
                        });
                    });
                    return;
                }
                var p = h.start + f;
                var m = function e() {
                    return d(null, l.currentTime());
                };
                l.one("seeked", m);
                if (u) {
                    l.pause();
                }
                s(p);
            };
            var sd = function e(t, i) {
                if (t.readyState === 4) {
                    return i();
                }
                return;
            };
            var sc = function e(t, i, r) {
                var n = [];
                var a;
                var s = false;
                var o = function e(t, i, n, a) {
                    i.abort();
                    s = true;
                    return r(t, i, n, a);
                };
                var u = function e(t, i) {
                    if (s) {
                        return;
                    }
                    if (t) {
                        return o(t, i, "", n);
                    }
                    var r = i.responseText.substring((n && n.byteLength) || 0, i.responseText.length);
                    n = (0, P.lx)(n, (0, P.qX)(r, true));
                    a = a || (0, w.c)(n);
                    if (n.length < 10 || (a && n.length < a + 2)) {
                        return sd(i, function() {
                            return o(t, i, "", n);
                        });
                    }
                    var u = (0, I.Xm)(n);
                    if (u === "ts" && n.length < 188) {
                        return sd(i, function() {
                            return o(t, i, "", n);
                        });
                    }
                    if (!u && n.length < 376) {
                        return sd(i, function() {
                            return o(t, i, "", n);
                        });
                    }
                    return o(null, i, u, n);
                };
                var l = {
                    uri: t,
                    beforeSend: function e(t) {
                        t.overrideMimeType("text/plain; charset=x-user-defined");
                        t.addEventListener("progress", function(e) {
                            e.total;
                            e.loaded;
                            return a3(t, null, {
                                statusCode: t.status
                            }, u);
                        });
                    }
                };
                var d = i(l, function(e, t) {
                    return a3(d, e, t, u);
                });
                return d;
            };
            var sh = nq.EventTarget, sf = nq.mergeOptions;
            var sp = function e(t, i) {
                if (!a2(t, i)) {
                    return false;
                }
                if (t.sidx && i.sidx && (t.sidx.offset !== i.sidx.offset || t.sidx.length !== i.sidx.length)) {
                    return false;
                } else if ((!t.sidx && i.sidx) || (t.sidx && !i.sidx)) {
                    return false;
                }
                if ((t.segments && !i.segments) || (!t.segments && i.segments)) {
                    return false;
                }
                if (!t.segments && !i.segments) {
                    return true;
                }
                for(var r = 0; r < t.segments.length; r++){
                    var n = t.segments[r];
                    var a = i.segments[r];
                    if (n.uri !== a.uri) {
                        return false;
                    }
                    if (!n.byterange && !a.byterange) {
                        continue;
                    }
                    var s = n.byterange;
                    var o = a.byterange;
                    if ((s && !o) || (!s && o)) {
                        return false;
                    }
                    if (s.offset !== o.offset || s.length !== o.length) {
                        return false;
                    }
                }
                return true;
            };
            var sm = function e(t) {
                var i = t.masterXml, r = t.srcUrl, n = t.clientOffset, a = t.sidxMapping;
                var s = (0, k.Qc)(i, {
                    manifestUri: r,
                    clientOffset: n,
                    sidxMapping: a
                });
                aM(s, r);
                return s;
            };
            var sv = function e(t, i, r) {
                var n = true;
                var a = sf(t, {
                    duration: i.duration,
                    minimumUpdatePeriod: i.minimumUpdatePeriod
                });
                for(var s = 0; s < i.playlists.length; s++){
                    var o = i.playlists[s];
                    if (o.sidx) {
                        var u = (0, k.mm)(o.sidx);
                        if (r && r[u] && r[u].sidx) {
                            (0, k.jp)(o, r[u].sidx, o.sidx.resolvedUri);
                        }
                    }
                    var l = aH(a, o, sp);
                    if (l) {
                        a = l;
                        n = false;
                    }
                }
                aL(i, function(e, t, i, r) {
                    if (e.playlists && e.playlists.length) {
                        var s = e.playlists[0].id;
                        var o = aH(a, e.playlists[0], sp);
                        if (o) {
                            a = o;
                            a.mediaGroups[t][i][r].playlists[0] = a.playlists[s];
                            n = false;
                        }
                    }
                });
                if (i.minimumUpdatePeriod !== t.minimumUpdatePeriod) {
                    n = false;
                }
                if (n) {
                    return null;
                }
                return a;
            };
            var sg = function e(t, i) {
                var r = Boolean(!t.map && !i.map);
                var n = r || Boolean(t.map && i.map && t.map.byterange.offset === i.map.byterange.offset && t.map.byterange.length === i.map.byterange.length);
                return (n && t.uri === i.uri && t.byterange.offset === i.byterange.offset && t.byterange.length === i.byterange.length);
            };
            var s$ = function e(t, i) {
                var r = {};
                for(var n in t){
                    var a = t[n];
                    var s = a.sidx;
                    if (s) {
                        var o = (0, k.mm)(s);
                        if (!i[o]) {
                            break;
                        }
                        var u = i[o].sidxInfo;
                        if (sg(u, s)) {
                            r[o] = i[o];
                        }
                    }
                }
                return r;
            };
            var s8 = function e(t, i) {
                var r = s$(t.playlists, i);
                var n = r;
                aL(t, function(e, t, r, a) {
                    if (e.playlists && e.playlists.length) {
                        var s = e.playlists;
                        n = sf(n, s$(s, i));
                    }
                });
                return n;
            };
            var sy = (function(e) {
                (0, l.Z)(t, e);
                function t(t, i, r, n) {
                    var a;
                    if (r === void 0) {
                        r = {};
                    }
                    a = e.call(this) || this;
                    a.masterPlaylistLoader_ = n || (0, u.Z)(a);
                    if (!n) {
                        a.isMaster_ = true;
                    }
                    var s = r, o = s.withCredentials, l = o === void 0 ? false : o, d = s.handleManifestRedirects, c = d === void 0 ? false : d;
                    a.vhs_ = i;
                    a.withCredentials = l;
                    a.handleManifestRedirects = c;
                    if (!t) {
                        throw new Error("A non-empty playlist URL or object is required");
                    }
                    a.on("minimumUpdatePeriod", function() {
                        a.refreshXml_();
                    });
                    a.on("mediaupdatetimeout", function() {
                        a.refreshMedia_(a.media().id);
                    });
                    a.state = "HAVE_NOTHING";
                    a.loadedPlaylists_ = {};
                    a.logger_ = n5("DashPlaylistLoader");
                    if (a.isMaster_) {
                        a.masterPlaylistLoader_.srcUrl = t;
                        a.masterPlaylistLoader_.sidxMapping_ = {};
                    } else {
                        a.childPlaylist_ = t;
                    }
                    return a;
                }
                var i = t.prototype;
                i.requestErrored_ = function e(t, i, r) {
                    if (!this.request) {
                        return true;
                    }
                    this.request = null;
                    if (t) {
                        this.error = typeof t === "object" && !(t instanceof Error) ? t : {
                            status: i.status,
                            message: "DASH request error at URL: " + i.uri,
                            response: i.response,
                            code: 2
                        };
                        if (r) {
                            this.state = r;
                        }
                        this.trigger("error");
                        return true;
                    }
                };
                i.addSidxSegments_ = function e(t, i, r) {
                    var a = this;
                    var s = t.sidx && (0, k.mm)(t.sidx);
                    if (!t.sidx || !s || this.masterPlaylistLoader_.sidxMapping_[s]) {
                        this.mediaRequest_ = n().setTimeout(function() {
                            return r(false);
                        }, 0);
                        return;
                    }
                    var o = n4(this.handleManifestRedirects, t.sidx.resolvedUri);
                    var u = function e(n, o) {
                        if (a.requestErrored_(n, o, i)) {
                            return;
                        }
                        var u = a.masterPlaylistLoader_.sidxMapping_;
                        var l;
                        try {
                            l = E()((0, P.Ki)(o.response).subarray(8));
                        } catch (d) {
                            a.requestErrored_(d, o, i);
                            return;
                        }
                        u[s] = {
                            sidxInfo: t.sidx,
                            sidx: l
                        };
                        (0, k.jp)(t, l, t.sidx.resolvedUri);
                        return r(true);
                    };
                    this.request = sc(o, this.vhs_.xhr, function(e, i, r, n) {
                        if (e) {
                            return u(e, i);
                        }
                        if (!r || r !== "mp4") {
                            return u({
                                status: i.status,
                                message: "Unsupported " + (r || "unknown") + " container type for sidx segment at URL: " + o,
                                response: "",
                                playlist: t,
                                internal: true,
                                blacklistDuration: Infinity,
                                code: 2
                            }, i);
                        }
                        var s = t.sidx.byterange, l = s.offset, d = s.length;
                        if (n.length >= d + l) {
                            return u(e, {
                                response: n.subarray(l, l + d),
                                status: i.status,
                                uri: i.uri
                            });
                        }
                        a.request = a.vhs_.xhr({
                            uri: o,
                            responseType: "arraybuffer",
                            headers: az({
                                byterange: t.sidx.byterange
                            })
                        }, u);
                    });
                };
                i.dispose = function e() {
                    this.trigger("dispose");
                    this.stopRequest();
                    this.loadedPlaylists_ = {};
                    n().clearTimeout(this.minimumUpdatePeriodTimeout_);
                    n().clearTimeout(this.mediaRequest_);
                    n().clearTimeout(this.mediaUpdateTimeout);
                    this.mediaUpdateTimeout = null;
                    this.mediaRequest_ = null;
                    this.minimumUpdatePeriodTimeout_ = null;
                    if (this.masterPlaylistLoader_.createMupOnMedia_) {
                        this.off("loadedmetadata", this.masterPlaylistLoader_.createMupOnMedia_);
                        this.masterPlaylistLoader_.createMupOnMedia_ = null;
                    }
                    this.off();
                };
                i.hasPendingRequest = function e() {
                    return this.request || this.mediaRequest_;
                };
                i.stopRequest = function e() {
                    if (this.request) {
                        var t = this.request;
                        this.request = null;
                        t.onreadystatechange = null;
                        t.abort();
                    }
                };
                i.media = function e(t) {
                    var i = this;
                    if (!t) {
                        return this.media_;
                    }
                    if (this.state === "HAVE_NOTHING") {
                        throw new Error("Cannot switch media playlist from " + this.state);
                    }
                    var r = this.state;
                    if (typeof t === "string") {
                        if (!this.masterPlaylistLoader_.master.playlists[t]) {
                            throw new Error("Unknown playlist URI: " + t);
                        }
                        t = this.masterPlaylistLoader_.master.playlists[t];
                    }
                    var n = !this.media_ || t.id !== this.media_.id;
                    if (n && this.loadedPlaylists_[t.id] && this.loadedPlaylists_[t.id].endList) {
                        this.state = "HAVE_METADATA";
                        this.media_ = t;
                        if (n) {
                            this.trigger("mediachanging");
                            this.trigger("mediachange");
                        }
                        return;
                    }
                    if (!n) {
                        return;
                    }
                    if (this.media_) {
                        this.trigger("mediachanging");
                    }
                    this.addSidxSegments_(t, r, function(e) {
                        i.haveMetadata({
                            startingState: r,
                            playlist: t
                        });
                    });
                };
                i.haveMetadata = function e(t) {
                    var i = t.startingState, r = t.playlist;
                    this.state = "HAVE_METADATA";
                    this.loadedPlaylists_[r.id] = r;
                    this.mediaRequest_ = null;
                    this.refreshMedia_(r.id);
                    if (i === "HAVE_MASTER") {
                        this.trigger("loadedmetadata");
                    } else {
                        this.trigger("mediachange");
                    }
                };
                i.pause = function e() {
                    if (this.masterPlaylistLoader_.createMupOnMedia_) {
                        this.off("loadedmetadata", this.masterPlaylistLoader_.createMupOnMedia_);
                        this.masterPlaylistLoader_.createMupOnMedia_ = null;
                    }
                    this.stopRequest();
                    n().clearTimeout(this.mediaUpdateTimeout);
                    this.mediaUpdateTimeout = null;
                    if (this.isMaster_) {
                        n().clearTimeout(this.masterPlaylistLoader_.minimumUpdatePeriodTimeout_);
                        this.masterPlaylistLoader_.minimumUpdatePeriodTimeout_ = null;
                    }
                    if (this.state === "HAVE_NOTHING") {
                        this.started = false;
                    }
                };
                i.load = function e(t) {
                    var i = this;
                    n().clearTimeout(this.mediaUpdateTimeout);
                    this.mediaUpdateTimeout = null;
                    var r = this.media();
                    if (t) {
                        var a = r ? (r.targetDuration / 2) * 1000 : 5 * 1000;
                        this.mediaUpdateTimeout = n().setTimeout(function() {
                            return i.load();
                        }, a);
                        return;
                    }
                    if (!this.started) {
                        this.start();
                        return;
                    }
                    if (r && !r.endList) {
                        if (this.isMaster_ && !this.minimumUpdatePeriodTimeout_) {
                            this.trigger("minimumUpdatePeriod");
                            this.updateMinimumUpdatePeriodTimeout_();
                        }
                        this.trigger("mediaupdatetimeout");
                    } else {
                        this.trigger("loadedplaylist");
                    }
                };
                i.start = function e() {
                    var t = this;
                    this.started = true;
                    if (!this.isMaster_) {
                        this.mediaRequest_ = n().setTimeout(function() {
                            return t.haveMaster_();
                        }, 0);
                        return;
                    }
                    this.requestMaster_(function(e, i) {
                        t.haveMaster_();
                        if (!t.hasPendingRequest() && !t.media_) {
                            t.media(t.masterPlaylistLoader_.master.playlists[0]);
                        }
                    });
                };
                i.requestMaster_ = function e(t) {
                    var i = this;
                    this.request = this.vhs_.xhr({
                        uri: this.masterPlaylistLoader_.srcUrl,
                        withCredentials: this.withCredentials
                    }, function(e, r) {
                        if (i.requestErrored_(e, r)) {
                            if (i.state === "HAVE_NOTHING") {
                                i.started = false;
                            }
                            return;
                        }
                        var n = r.responseText !== i.masterPlaylistLoader_.masterXml_;
                        i.masterPlaylistLoader_.masterXml_ = r.responseText;
                        if (r.responseHeaders && r.responseHeaders.date) {
                            i.masterLoaded_ = Date.parse(r.responseHeaders.date);
                        } else {
                            i.masterLoaded_ = Date.now();
                        }
                        i.masterPlaylistLoader_.srcUrl = n4(i.handleManifestRedirects, i.masterPlaylistLoader_.srcUrl, r);
                        if (n) {
                            i.handleMaster_();
                            i.syncClientServerClock_(function() {
                                return t(r, n);
                            });
                            return;
                        }
                        return t(r, n);
                    });
                };
                i.syncClientServerClock_ = function e(t) {
                    var i = this;
                    var r = (0, k.LG)(this.masterPlaylistLoader_.masterXml_);
                    if (r === null) {
                        this.masterPlaylistLoader_.clientOffset_ = this.masterLoaded_ - Date.now();
                        return t();
                    }
                    if (r.method === "DIRECT") {
                        this.masterPlaylistLoader_.clientOffset_ = r.value - Date.now();
                        return t();
                    }
                    this.request = this.vhs_.xhr({
                        uri: n3(this.masterPlaylistLoader_.srcUrl, r.value),
                        method: r.method,
                        withCredentials: this.withCredentials
                    }, function(e, n) {
                        if (!i.request) {
                            return;
                        }
                        if (e) {
                            i.masterPlaylistLoader_.clientOffset_ = i.masterLoaded_ - Date.now();
                            return t();
                        }
                        var a;
                        if (r.method === "HEAD") {
                            if (!n.responseHeaders || !n.responseHeaders.date) {
                                a = i.masterLoaded_;
                            } else {
                                a = Date.parse(n.responseHeaders.date);
                            }
                        } else {
                            a = Date.parse(n.responseText);
                        }
                        i.masterPlaylistLoader_.clientOffset_ = a - Date.now();
                        t();
                    });
                };
                i.haveMaster_ = function e() {
                    this.state = "HAVE_MASTER";
                    if (this.isMaster_) {
                        this.trigger("loadedplaylist");
                    } else if (!this.media_) {
                        this.media(this.childPlaylist_);
                    }
                };
                i.handleMaster_ = function e() {
                    this.mediaRequest_ = null;
                    var t = sm({
                        masterXml: this.masterPlaylistLoader_.masterXml_,
                        srcUrl: this.masterPlaylistLoader_.srcUrl,
                        clientOffset: this.masterPlaylistLoader_.clientOffset_,
                        sidxMapping: this.masterPlaylistLoader_.sidxMapping_
                    });
                    var i = this.masterPlaylistLoader_.master;
                    if (i) {
                        t = sv(i, t, this.masterPlaylistLoader_.sidxMapping_);
                    }
                    this.masterPlaylistLoader_.master = t ? t : i;
                    var r = this.masterPlaylistLoader_.master.locations && this.masterPlaylistLoader_.master.locations[0];
                    if (r && r !== this.masterPlaylistLoader_.srcUrl) {
                        this.masterPlaylistLoader_.srcUrl = r;
                    }
                    if (!i || (t && t.minimumUpdatePeriod !== i.minimumUpdatePeriod)) {
                        this.updateMinimumUpdatePeriodTimeout_();
                    }
                    return Boolean(t);
                };
                i.updateMinimumUpdatePeriodTimeout_ = function e() {
                    var t = this.masterPlaylistLoader_;
                    if (t.createMupOnMedia_) {
                        t.off("loadedmetadata", t.createMupOnMedia_);
                        t.createMupOnMedia_ = null;
                    }
                    if (t.minimumUpdatePeriodTimeout_) {
                        n().clearTimeout(t.minimumUpdatePeriodTimeout_);
                        t.minimumUpdatePeriodTimeout_ = null;
                    }
                    var i = t.master && t.master.minimumUpdatePeriod;
                    if (i === 0) {
                        if (t.media()) {
                            i = t.media().targetDuration * 1000;
                        } else {
                            t.createMupOnMedia_ = t.updateMinimumUpdatePeriodTimeout_;
                            t.one("loadedmetadata", t.createMupOnMedia_);
                        }
                    }
                    if (typeof i !== "number" || i <= 0) {
                        if (i < 0) {
                            this.logger_("found invalid minimumUpdatePeriod of " + i + ", not setting a timeout");
                        }
                        return;
                    }
                    this.createMUPTimeout_(i);
                };
                i.createMUPTimeout_ = function e(t) {
                    var i = this.masterPlaylistLoader_;
                    i.minimumUpdatePeriodTimeout_ = n().setTimeout(function() {
                        i.minimumUpdatePeriodTimeout_ = null;
                        i.trigger("minimumUpdatePeriod");
                        i.createMUPTimeout_(t);
                    }, t);
                };
                i.refreshXml_ = function e() {
                    var t = this;
                    this.requestMaster_(function(e, i) {
                        if (!i) {
                            return;
                        }
                        if (t.media_) {
                            t.media_ = t.masterPlaylistLoader_.master.playlists[t.media_.id];
                        }
                        t.masterPlaylistLoader_.sidxMapping_ = s8(t.masterPlaylistLoader_.master, t.masterPlaylistLoader_.sidxMapping_);
                        t.addSidxSegments_(t.media(), t.state, function(e) {
                            t.refreshMedia_(t.media().id);
                        });
                    });
                };
                i.refreshMedia_ = function e(t) {
                    var i = this;
                    if (!t) {
                        throw new Error("refreshMedia_ must take a media id");
                    }
                    if (this.media_ && this.isMaster_) {
                        this.handleMaster_();
                    }
                    var r = this.masterPlaylistLoader_.master.playlists;
                    var a = !this.media_ || this.media_ !== r[t];
                    if (a) {
                        this.media_ = r[t];
                    } else {
                        this.trigger("playlistunchanged");
                    }
                    if (!this.mediaUpdateTimeout) {
                        var s = function e() {
                            if (i.media().endList) {
                                return;
                            }
                            i.mediaUpdateTimeout = n().setTimeout(function() {
                                i.trigger("mediaupdatetimeout");
                                e();
                            }, a6(i.media(), Boolean(a)));
                        };
                        s();
                    }
                    this.trigger("loadedplaylist");
                };
                return t;
            })(sh);
            var sT = {
                GOAL_BUFFER_LENGTH: 30,
                MAX_GOAL_BUFFER_LENGTH: 60,
                BACK_BUFFER_LENGTH: 30,
                GOAL_BUFFER_LENGTH_RATE: 1,
                INITIAL_BANDWIDTH: 4194304,
                BANDWIDTH_VARIANCE: 1.2,
                BUFFER_LOW_WATER_LINE: 0,
                MAX_BUFFER_LOW_WATER_LINE: 30,
                EXPERIMENTAL_MAX_BUFFER_LOW_WATER_LINE: 16,
                BUFFER_LOW_WATER_LINE_RATE: 1,
                BUFFER_HIGH_WATER_LINE: 30
            };
            var sb = function e(t) {
                var i = new Uint8Array(new ArrayBuffer(t.length));
                for(var r = 0; r < t.length; r++){
                    i[r] = t.charCodeAt(r);
                }
                return i.buffer;
            };
            var sx = function e(t) {
                t.on = t.addEventListener;
                t.off = t.removeEventListener;
                return t;
            };
            var sS = function e(t) {
                try {
                    return URL.createObjectURL(new Blob([
                        t
                    ], {
                        type: "application/javascript"
                    }));
                } catch (i) {
                    var r = new BlobBuilder();
                    r.append(t);
                    return URL.createObjectURL(r.getBlob());
                }
            };
            var sk = function e(t) {
                return function() {
                    var e = sS(t);
                    var i = sx(new Worker(e));
                    i.objURL = e;
                    var r = i.terminate;
                    i.on = i.addEventListener;
                    i.off = i.removeEventListener;
                    i.terminate = function() {
                        URL.revokeObjectURL(e);
                        return r.call(this);
                    };
                    return i;
                };
            };
            var sC = function e(t) {
                return ("var browserWorkerPolyFill = " + sx.toString() + ";\n" + "browserWorkerPolyFill(self);\n" + t);
            };
            var sE = function e(t) {
                return t.toString().replace(/^function.+?{/, "").slice(0, -1);
            };
            var sw = sC(sE(function() {
                var e = function e() {
                    this.init = function() {
                        var e = {};
                        this.on = function(t, i) {
                            if (!e[t]) {
                                e[t] = [];
                            }
                            e[t] = e[t].concat(i);
                        };
                        this.off = function(t, i) {
                            var r;
                            if (!e[t]) {
                                return false;
                            }
                            r = e[t].indexOf(i);
                            e[t] = e[t].slice();
                            e[t].splice(r, 1);
                            return r > -1;
                        };
                        this.trigger = function(t) {
                            var i, r, n, a;
                            i = e[t];
                            if (!i) {
                                return;
                            }
                            if (arguments.length === 2) {
                                n = i.length;
                                for(r = 0; r < n; ++r){
                                    i[r].call(this, arguments[1]);
                                }
                            } else {
                                a = [];
                                r = arguments.length;
                                for(r = 1; r < arguments.length; ++r){
                                    a.push(arguments[r]);
                                }
                                n = i.length;
                                for(r = 0; r < n; ++r){
                                    i[r].apply(this, a);
                                }
                            }
                        };
                        this.dispose = function() {
                            e = {};
                        };
                    };
                };
                e.prototype.pipe = function(e) {
                    this.on("data", function(t) {
                        e.push(t);
                    });
                    this.on("done", function(t) {
                        e.flush(t);
                    });
                    this.on("partialdone", function(t) {
                        e.partialFlush(t);
                    });
                    this.on("endedtimeline", function(t) {
                        e.endTimeline(t);
                    });
                    this.on("reset", function(t) {
                        e.reset(t);
                    });
                    return e;
                };
                e.prototype.push = function(e) {
                    this.trigger("data", e);
                };
                e.prototype.flush = function(e) {
                    this.trigger("done", e);
                };
                e.prototype.partialFlush = function(e) {
                    this.trigger("partialdone", e);
                };
                e.prototype.endTimeline = function(e) {
                    this.trigger("endedtimeline", e);
                };
                e.prototype.reset = function(e) {
                    this.trigger("reset", e);
                };
                var t = e;
                var i = Math.pow(2, 32) - 1;
                var r, n, a, s, o, u, l, d, c, h, f, p, m, v, g, $, y, T, b, x, S, k, C, E, w, I, P, _, L, A, D, O, R, M, U, B;
                (function() {
                    var e;
                    C = {
                        avc1: [],
                        avcC: [],
                        btrt: [],
                        dinf: [],
                        dref: [],
                        esds: [],
                        ftyp: [],
                        hdlr: [],
                        mdat: [],
                        mdhd: [],
                        mdia: [],
                        mfhd: [],
                        minf: [],
                        moof: [],
                        moov: [],
                        mp4a: [],
                        mvex: [],
                        mvhd: [],
                        pasp: [],
                        sdtp: [],
                        smhd: [],
                        stbl: [],
                        stco: [],
                        stsc: [],
                        stsd: [],
                        stsz: [],
                        stts: [],
                        styp: [],
                        tfdt: [],
                        tfhd: [],
                        traf: [],
                        trak: [],
                        trun: [],
                        trex: [],
                        tkhd: [],
                        vmhd: []
                    };
                    if (typeof Uint8Array === "undefined") {
                        return;
                    }
                    for(e in C){
                        if (C.hasOwnProperty(e)) {
                            C[e] = [
                                e.charCodeAt(0),
                                e.charCodeAt(1),
                                e.charCodeAt(2),
                                e.charCodeAt(3), 
                            ];
                        }
                    }
                    E = new Uint8Array([
                        "i".charCodeAt(0),
                        "s".charCodeAt(0),
                        "o".charCodeAt(0),
                        "m".charCodeAt(0), 
                    ]);
                    I = new Uint8Array([
                        "a".charCodeAt(0),
                        "v".charCodeAt(0),
                        "c".charCodeAt(0),
                        "1".charCodeAt(0), 
                    ]);
                    w = new Uint8Array([
                        0,
                        0,
                        0,
                        1
                    ]);
                    P = new Uint8Array([
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x76,
                        0x69,
                        0x64,
                        0x65,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x56,
                        0x69,
                        0x64,
                        0x65,
                        0x6f,
                        0x48,
                        0x61,
                        0x6e,
                        0x64,
                        0x6c,
                        0x65,
                        0x72,
                        0x00
                    ]);
                    _ = new Uint8Array([
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x73,
                        0x6f,
                        0x75,
                        0x6e,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x53,
                        0x6f,
                        0x75,
                        0x6e,
                        0x64,
                        0x48,
                        0x61,
                        0x6e,
                        0x64,
                        0x6c,
                        0x65,
                        0x72,
                        0x00
                    ]);
                    L = {
                        video: P,
                        audio: _
                    };
                    O = new Uint8Array([
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x01,
                        0x00,
                        0x00,
                        0x00,
                        0x0c,
                        0x75,
                        0x72,
                        0x6c,
                        0x20,
                        0x00,
                        0x00,
                        0x00,
                        0x01
                    ]);
                    D = new Uint8Array([
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00
                    ]);
                    R = new Uint8Array([
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00
                    ]);
                    M = R;
                    U = new Uint8Array([
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00
                    ]);
                    B = R;
                    A = new Uint8Array([
                        0x00,
                        0x00,
                        0x00,
                        0x01,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00
                    ]);
                })();
                r = function e(t) {
                    var i = [], r = 0, n, a, s;
                    for(n = 1; n < arguments.length; n++){
                        i.push(arguments[n]);
                    }
                    n = i.length;
                    while(n--){
                        r += i[n].byteLength;
                    }
                    a = new Uint8Array(r + 8);
                    s = new DataView(a.buffer, a.byteOffset, a.byteLength);
                    s.setUint32(0, a.byteLength);
                    a.set(t, 4);
                    for(n = 0, r = 8; n < i.length; n++){
                        a.set(i[n], r);
                        r += i[n].byteLength;
                    }
                    return a;
                };
                n = function e() {
                    return r(C.dinf, r(C.dref, O));
                };
                a = function e(t) {
                    return r(C.esds, new Uint8Array([
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x03,
                        0x19,
                        0x00,
                        0x00,
                        0x00,
                        0x04,
                        0x11,
                        0x40,
                        0x15,
                        0x00,
                        0x06,
                        0x00,
                        0x00,
                        0x00,
                        0xda,
                        0xc0,
                        0x00,
                        0x00,
                        0xda,
                        0xc0,
                        0x05,
                        0x02,
                        (t.audioobjecttype << 3) | (t.samplingfrequencyindex >>> 1),
                        (t.samplingfrequencyindex << 7) | (t.channelcount << 3),
                        0x06,
                        0x01,
                        0x02
                    ]));
                };
                s = function e() {
                    return r(C.ftyp, E, w, E, I);
                };
                $ = function e(t) {
                    return r(C.hdlr, L[t]);
                };
                o = function e(t) {
                    return r(C.mdat, t);
                };
                g = function e(t) {
                    var i = new Uint8Array([
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x02,
                        0x00,
                        0x00,
                        0x00,
                        0x03,
                        0x00,
                        0x01,
                        0x5f,
                        0x90,
                        (t.duration >>> 24) & 0xff,
                        (t.duration >>> 16) & 0xff,
                        (t.duration >>> 8) & 0xff,
                        t.duration & 0xff,
                        0x55,
                        0xc4,
                        0x00,
                        0x00, 
                    ]);
                    if (t.samplerate) {
                        i[12] = (t.samplerate >>> 24) & 0xff;
                        i[13] = (t.samplerate >>> 16) & 0xff;
                        i[14] = (t.samplerate >>> 8) & 0xff;
                        i[15] = t.samplerate & 0xff;
                    }
                    return r(C.mdhd, i);
                };
                v = function e(t) {
                    return r(C.mdia, g(t), $(t.type), l(t));
                };
                u = function e(t) {
                    return r(C.mfhd, new Uint8Array([
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        (t & 0xff000000) >> 24,
                        (t & 0xff0000) >> 16,
                        (t & 0xff00) >> 8,
                        t & 0xff
                    ]));
                };
                l = function e(t) {
                    return r(C.minf, t.type === "video" ? r(C.vmhd, A) : r(C.smhd, D), n(), T(t));
                };
                d = function e(t, i) {
                    var n = [], a = i.length;
                    while(a--){
                        n[a] = x(i[a]);
                    }
                    return r.apply(null, [
                        C.moof,
                        u(t)
                    ].concat(n));
                };
                c = function e(t) {
                    var i = t.length, n = [];
                    while(i--){
                        n[i] = p(t[i]);
                    }
                    return r.apply(null, [
                        C.moov,
                        f(0xffffffff)
                    ].concat(n).concat(h(t)));
                };
                h = function e(t) {
                    var i = t.length, n = [];
                    while(i--){
                        n[i] = S(t[i]);
                    }
                    return r.apply(null, [
                        C.mvex
                    ].concat(n));
                };
                f = function e(t) {
                    var i = new Uint8Array([
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x01,
                        0x00,
                        0x00,
                        0x00,
                        0x02,
                        0x00,
                        0x01,
                        0x5f,
                        0x90,
                        (t & 0xff000000) >> 24,
                        (t & 0xff0000) >> 16,
                        (t & 0xff00) >> 8,
                        t & 0xff,
                        0x00,
                        0x01,
                        0x00,
                        0x00,
                        0x01,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x01,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x01,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x40,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0xff,
                        0xff,
                        0xff,
                        0xff
                    ]);
                    return r(C.mvhd, i);
                };
                y = function e(t) {
                    var i = t.samples || [], n = new Uint8Array(4 + i.length), a, s;
                    for(s = 0; s < i.length; s++){
                        a = i[s].flags;
                        n[s + 4] = (a.dependsOn << 4) | (a.isDependedOn << 2) | a.hasRedundancy;
                    }
                    return r(C.sdtp, n);
                };
                T = function e(t) {
                    return r(C.stbl, b(t), r(C.stts, B), r(C.stsc, M), r(C.stsz, U), r(C.stco, R));
                };
                (function() {
                    var e, t;
                    b = function i(n) {
                        return r(C.stsd, new Uint8Array([
                            0x00,
                            0x00,
                            0x00,
                            0x00,
                            0x00,
                            0x00,
                            0x00,
                            0x01, 
                        ]), n.type === "video" ? e(n) : t(n));
                    };
                    e = function e(t) {
                        var i = t.sps || [], n = t.pps || [], a = [], s = [], o, u;
                        for(o = 0; o < i.length; o++){
                            a.push((i[o].byteLength & 0xff00) >>> 8);
                            a.push(i[o].byteLength & 0xff);
                            a = a.concat(Array.prototype.slice.call(i[o]));
                        }
                        for(o = 0; o < n.length; o++){
                            s.push((n[o].byteLength & 0xff00) >>> 8);
                            s.push(n[o].byteLength & 0xff);
                            s = s.concat(Array.prototype.slice.call(n[o]));
                        }
                        u = [
                            C.avc1,
                            new Uint8Array([
                                0x00,
                                0x00,
                                0x00,
                                0x00,
                                0x00,
                                0x00,
                                0x00,
                                0x01,
                                0x00,
                                0x00,
                                0x00,
                                0x00,
                                0x00,
                                0x00,
                                0x00,
                                0x00,
                                0x00,
                                0x00,
                                0x00,
                                0x00,
                                0x00,
                                0x00,
                                0x00,
                                0x00,
                                (t.width & 0xff00) >> 8,
                                t.width & 0xff,
                                (t.height & 0xff00) >> 8,
                                t.height & 0xff,
                                0x00,
                                0x48,
                                0x00,
                                0x00,
                                0x00,
                                0x48,
                                0x00,
                                0x00,
                                0x00,
                                0x00,
                                0x00,
                                0x00,
                                0x00,
                                0x01,
                                0x13,
                                0x76,
                                0x69,
                                0x64,
                                0x65,
                                0x6f,
                                0x6a,
                                0x73,
                                0x2d,
                                0x63,
                                0x6f,
                                0x6e,
                                0x74,
                                0x72,
                                0x69,
                                0x62,
                                0x2d,
                                0x68,
                                0x6c,
                                0x73,
                                0x00,
                                0x00,
                                0x00,
                                0x00,
                                0x00,
                                0x00,
                                0x00,
                                0x00,
                                0x00,
                                0x00,
                                0x00,
                                0x00,
                                0x00,
                                0x18,
                                0x11,
                                0x11
                            ]),
                            r(C.avcC, new Uint8Array([
                                0x01,
                                t.profileIdc,
                                t.profileCompatibility,
                                t.levelIdc,
                                0xff
                            ].concat([
                                i.length
                            ], a, [
                                n.length
                            ], s))),
                            r(C.btrt, new Uint8Array([
                                0x00,
                                0x1c,
                                0x9c,
                                0x80,
                                0x00,
                                0x2d,
                                0xc6,
                                0xc0,
                                0x00,
                                0x2d,
                                0xc6,
                                0xc0
                            ])), 
                        ];
                        if (t.sarRatio) {
                            var l = t.sarRatio[0], d = t.sarRatio[1];
                            u.push(r(C.pasp, new Uint8Array([
                                (l & 0xff000000) >> 24,
                                (l & 0xff0000) >> 16,
                                (l & 0xff00) >> 8,
                                l & 0xff,
                                (d & 0xff000000) >> 24,
                                (d & 0xff0000) >> 16,
                                (d & 0xff00) >> 8,
                                d & 0xff, 
                            ])));
                        }
                        return r.apply(null, u);
                    };
                    t = function e(t) {
                        return r(C.mp4a, new Uint8Array([
                            0x00,
                            0x00,
                            0x00,
                            0x00,
                            0x00,
                            0x00,
                            0x00,
                            0x01,
                            0x00,
                            0x00,
                            0x00,
                            0x00,
                            0x00,
                            0x00,
                            0x00,
                            0x00,
                            (t.channelcount & 0xff00) >> 8,
                            t.channelcount & 0xff,
                            (t.samplesize & 0xff00) >> 8,
                            t.samplesize & 0xff,
                            0x00,
                            0x00,
                            0x00,
                            0x00,
                            (t.samplerate & 0xff00) >> 8,
                            t.samplerate & 0xff,
                            0x00,
                            0x00
                        ]), a(t));
                    };
                })();
                m = function e(t) {
                    var i = new Uint8Array([
                        0x00,
                        0x00,
                        0x00,
                        0x07,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        (t.id & 0xff000000) >> 24,
                        (t.id & 0xff0000) >> 16,
                        (t.id & 0xff00) >> 8,
                        t.id & 0xff,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        (t.duration & 0xff000000) >> 24,
                        (t.duration & 0xff0000) >> 16,
                        (t.duration & 0xff00) >> 8,
                        t.duration & 0xff,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x01,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x01,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x01,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x40,
                        0x00,
                        0x00,
                        0x00,
                        (t.width & 0xff00) >> 8,
                        t.width & 0xff,
                        0x00,
                        0x00,
                        (t.height & 0xff00) >> 8,
                        t.height & 0xff,
                        0x00,
                        0x00
                    ]);
                    return r(C.tkhd, i);
                };
                x = function e(t) {
                    var n, a, s, o, u, l, d;
                    n = r(C.tfhd, new Uint8Array([
                        0x00,
                        0x00,
                        0x00,
                        0x3a,
                        (t.id & 0xff000000) >> 24,
                        (t.id & 0xff0000) >> 16,
                        (t.id & 0xff00) >> 8,
                        t.id & 0xff,
                        0x00,
                        0x00,
                        0x00,
                        0x01,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00
                    ]));
                    l = Math.floor(t.baseMediaDecodeTime / (i + 1));
                    d = Math.floor(t.baseMediaDecodeTime % (i + 1));
                    a = r(C.tfdt, new Uint8Array([
                        0x01,
                        0x00,
                        0x00,
                        0x00,
                        (l >>> 24) & 0xff,
                        (l >>> 16) & 0xff,
                        (l >>> 8) & 0xff,
                        l & 0xff,
                        (d >>> 24) & 0xff,
                        (d >>> 16) & 0xff,
                        (d >>> 8) & 0xff,
                        d & 0xff, 
                    ]));
                    u = 32 + 20 + 8 + 16 + 8 + 8;
                    if (t.type === "audio") {
                        s = k(t, u);
                        return r(C.traf, n, a, s);
                    }
                    o = y(t);
                    s = k(t, o.length + u);
                    return r(C.traf, n, a, s, o);
                };
                p = function e(t) {
                    t.duration = t.duration || 0xffffffff;
                    return r(C.trak, m(t), v(t));
                };
                S = function e(t) {
                    var i = new Uint8Array([
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        (t.id & 0xff000000) >> 24,
                        (t.id & 0xff0000) >> 16,
                        (t.id & 0xff00) >> 8,
                        t.id & 0xff,
                        0x00,
                        0x00,
                        0x00,
                        0x01,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x01,
                        0x00,
                        0x01
                    ]);
                    if (t.type !== "video") {
                        i[i.length - 1] = 0x00;
                    }
                    return r(C.trex, i);
                };
                (function() {
                    var e, t, i;
                    i = function e(t, i) {
                        var r = 0, n = 0, a = 0, s = 0;
                        if (t.length) {
                            if (t[0].duration !== undefined) {
                                r = 0x1;
                            }
                            if (t[0].size !== undefined) {
                                n = 0x2;
                            }
                            if (t[0].flags !== undefined) {
                                a = 0x4;
                            }
                            if (t[0].compositionTimeOffset !== undefined) {
                                s = 0x8;
                            }
                        }
                        return [
                            0x00,
                            0x00,
                            r | n | a | s,
                            0x01,
                            (t.length & 0xff000000) >>> 24,
                            (t.length & 0xff0000) >>> 16,
                            (t.length & 0xff00) >>> 8,
                            t.length & 0xff,
                            (i & 0xff000000) >>> 24,
                            (i & 0xff0000) >>> 16,
                            (i & 0xff00) >>> 8,
                            i & 0xff
                        ];
                    };
                    t = function e(t, n) {
                        var a, s, o, u, l, d;
                        u = t.samples || [];
                        n += 8 + 12 + 16 * u.length;
                        o = i(u, n);
                        s = new Uint8Array(o.length + u.length * 16);
                        s.set(o);
                        a = o.length;
                        for(d = 0; d < u.length; d++){
                            l = u[d];
                            s[a++] = (l.duration & 0xff000000) >>> 24;
                            s[a++] = (l.duration & 0xff0000) >>> 16;
                            s[a++] = (l.duration & 0xff00) >>> 8;
                            s[a++] = l.duration & 0xff;
                            s[a++] = (l.size & 0xff000000) >>> 24;
                            s[a++] = (l.size & 0xff0000) >>> 16;
                            s[a++] = (l.size & 0xff00) >>> 8;
                            s[a++] = l.size & 0xff;
                            s[a++] = (l.flags.isLeading << 2) | l.flags.dependsOn;
                            s[a++] = (l.flags.isDependedOn << 6) | (l.flags.hasRedundancy << 4) | (l.flags.paddingValue << 1) | l.flags.isNonSyncSample;
                            s[a++] = l.flags.degradationPriority & (0xf0 << 8);
                            s[a++] = l.flags.degradationPriority & 0x0f;
                            s[a++] = (l.compositionTimeOffset & 0xff000000) >>> 24;
                            s[a++] = (l.compositionTimeOffset & 0xff0000) >>> 16;
                            s[a++] = (l.compositionTimeOffset & 0xff00) >>> 8;
                            s[a++] = l.compositionTimeOffset & 0xff;
                        }
                        return r(C.trun, s);
                    };
                    e = function e(t, n) {
                        var a, s, o, u, l, d;
                        u = t.samples || [];
                        n += 8 + 12 + 8 * u.length;
                        o = i(u, n);
                        a = new Uint8Array(o.length + u.length * 8);
                        a.set(o);
                        s = o.length;
                        for(d = 0; d < u.length; d++){
                            l = u[d];
                            a[s++] = (l.duration & 0xff000000) >>> 24;
                            a[s++] = (l.duration & 0xff0000) >>> 16;
                            a[s++] = (l.duration & 0xff00) >>> 8;
                            a[s++] = l.duration & 0xff;
                            a[s++] = (l.size & 0xff000000) >>> 24;
                            a[s++] = (l.size & 0xff0000) >>> 16;
                            a[s++] = (l.size & 0xff00) >>> 8;
                            a[s++] = l.size & 0xff;
                        }
                        return r(C.trun, a);
                    };
                    k = function i(r, n) {
                        if (r.type === "audio") {
                            return e(r, n);
                        }
                        return t(r, n);
                    };
                })();
                var F = {
                    ftyp: s,
                    mdat: o,
                    moof: d,
                    moov: c,
                    initSegment: function e(t) {
                        var i = s(), r = c(t), n;
                        n = new Uint8Array(i.byteLength + r.byteLength);
                        n.set(i);
                        n.set(r, i.byteLength);
                        return n;
                    }
                };
                var N = function e(t) {
                    var i, r, n = [], a = [];
                    a.byteLength = 0;
                    a.nalCount = 0;
                    a.duration = 0;
                    n.byteLength = 0;
                    for(i = 0; i < t.length; i++){
                        r = t[i];
                        if (r.nalUnitType === "access_unit_delimiter_rbsp") {
                            if (n.length) {
                                n.duration = r.dts - n.dts;
                                a.byteLength += n.byteLength;
                                a.nalCount += n.length;
                                a.duration += n.duration;
                                a.push(n);
                            }
                            n = [
                                r
                            ];
                            n.byteLength = r.data.byteLength;
                            n.pts = r.pts;
                            n.dts = r.dts;
                        } else {
                            if (r.nalUnitType === "slice_layer_without_partitioning_rbsp_idr") {
                                n.keyFrame = true;
                            }
                            n.duration = r.dts - n.dts;
                            n.byteLength += r.data.byteLength;
                            n.push(r);
                        }
                    }
                    if (a.length && (!n.duration || n.duration <= 0)) {
                        n.duration = a[a.length - 1].duration;
                    }
                    a.byteLength += n.byteLength;
                    a.nalCount += n.length;
                    a.duration += n.duration;
                    a.push(n);
                    return a;
                };
                var j = function e(t) {
                    var i, r, n = [], a = [];
                    n.byteLength = 0;
                    n.nalCount = 0;
                    n.duration = 0;
                    n.pts = t[0].pts;
                    n.dts = t[0].dts;
                    a.byteLength = 0;
                    a.nalCount = 0;
                    a.duration = 0;
                    a.pts = t[0].pts;
                    a.dts = t[0].dts;
                    for(i = 0; i < t.length; i++){
                        r = t[i];
                        if (r.keyFrame) {
                            if (n.length) {
                                a.push(n);
                                a.byteLength += n.byteLength;
                                a.nalCount += n.nalCount;
                                a.duration += n.duration;
                            }
                            n = [
                                r
                            ];
                            n.nalCount = r.length;
                            n.byteLength = r.byteLength;
                            n.pts = r.pts;
                            n.dts = r.dts;
                            n.duration = r.duration;
                        } else {
                            n.duration += r.duration;
                            n.nalCount += r.length;
                            n.byteLength += r.byteLength;
                            n.push(r);
                        }
                    }
                    if (a.length && n.duration <= 0) {
                        n.duration = a[a.length - 1].duration;
                    }
                    a.byteLength += n.byteLength;
                    a.nalCount += n.nalCount;
                    a.duration += n.duration;
                    a.push(n);
                    return a;
                };
                var H = function e(t) {
                    var i;
                    if (!t[0][0].keyFrame && t.length > 1) {
                        i = t.shift();
                        t.byteLength -= i.byteLength;
                        t.nalCount -= i.nalCount;
                        t[0][0].dts = i.dts;
                        t[0][0].pts = i.pts;
                        t[0][0].duration += i.duration;
                    }
                    return t;
                };
                var q = function e() {
                    return {
                        size: 0,
                        flags: {
                            isLeading: 0,
                            dependsOn: 1,
                            isDependedOn: 0,
                            hasRedundancy: 0,
                            degradationPriority: 0,
                            isNonSyncSample: 1
                        }
                    };
                };
                var V = function e(t, i) {
                    var r = q();
                    r.dataOffset = i;
                    r.compositionTimeOffset = t.pts - t.dts;
                    r.duration = t.duration;
                    r.size = 4 * t.length;
                    r.size += t.byteLength;
                    if (t.keyFrame) {
                        r.flags.dependsOn = 2;
                        r.flags.isNonSyncSample = 0;
                    }
                    return r;
                };
                var W = function e(t, i) {
                    var r, n, a, s, o, u = i || 0, l = [];
                    for(r = 0; r < t.length; r++){
                        s = t[r];
                        for(n = 0; n < s.length; n++){
                            o = s[n];
                            a = V(o, u);
                            u += a.size;
                            l.push(a);
                        }
                    }
                    return l;
                };
                var z = function e(t) {
                    var i, r, n, a, s, o, u = 0, l = t.byteLength, d = t.nalCount, c = l + 4 * d, h = new Uint8Array(c), f = new DataView(h.buffer);
                    for(i = 0; i < t.length; i++){
                        a = t[i];
                        for(r = 0; r < a.length; r++){
                            s = a[r];
                            for(n = 0; n < s.length; n++){
                                o = s[n];
                                f.setUint32(u, o.data.byteLength);
                                u += 4;
                                h.set(o.data, u);
                                u += o.data.byteLength;
                            }
                        }
                    }
                    return h;
                };
                var G = function e(t, i) {
                    var r, n = i || 0, a = [];
                    r = V(t, n);
                    a.push(r);
                    return a;
                };
                var K = function e(t) {
                    var i, r, n = 0, a = t.byteLength, s = t.length, o = a + 4 * s, u = new Uint8Array(o), l = new DataView(u.buffer);
                    for(i = 0; i < t.length; i++){
                        r = t[i];
                        l.setUint32(n, r.data.byteLength);
                        n += 4;
                        u.set(r.data, n);
                        n += r.data.byteLength;
                    }
                    return u;
                };
                var Z = {
                    groupNalsIntoFrames: N,
                    groupFramesIntoGops: j,
                    extendFirstKeyFrame: H,
                    generateSampleTable: W,
                    concatenateNalData: z,
                    generateSampleTableForFrame: G,
                    concatenateNalDataForFrame: K
                };
                var Q = [
                    33,
                    16,
                    5,
                    32,
                    164,
                    27
                ];
                var X = [
                    33,
                    65,
                    108,
                    84,
                    1,
                    2,
                    4,
                    8,
                    168,
                    2,
                    4,
                    8,
                    17,
                    191,
                    252, 
                ];
                var Y = function e(t) {
                    var i = [];
                    while(t--){
                        i.push(0);
                    }
                    return i;
                };
                var J = function e(t) {
                    return Object.keys(t).reduce(function(e, i) {
                        e[i] = new Uint8Array(t[i].reduce(function(e, t) {
                            return e.concat(t);
                        }, []));
                        return e;
                    }, {});
                };
                var ee;
                var et = function e() {
                    if (!ee) {
                        var t = {
                            96000: [
                                Q,
                                [
                                    227,
                                    64
                                ],
                                Y(154),
                                [
                                    56
                                ], 
                            ],
                            88200: [
                                Q,
                                [
                                    231
                                ],
                                Y(170),
                                [
                                    56
                                ]
                            ],
                            64000: [
                                Q,
                                [
                                    248,
                                    192
                                ],
                                Y(240),
                                [
                                    56
                                ], 
                            ],
                            48000: [
                                Q,
                                [
                                    255,
                                    192
                                ],
                                Y(268),
                                [
                                    55,
                                    148,
                                    128
                                ],
                                Y(54),
                                [
                                    112
                                ], 
                            ],
                            44100: [
                                Q,
                                [
                                    255,
                                    192
                                ],
                                Y(268),
                                [
                                    55,
                                    163,
                                    128
                                ],
                                Y(84),
                                [
                                    112
                                ], 
                            ],
                            32000: [
                                Q,
                                [
                                    255,
                                    192
                                ],
                                Y(268),
                                [
                                    55,
                                    234
                                ],
                                Y(226),
                                [
                                    112
                                ], 
                            ],
                            24000: [
                                Q,
                                [
                                    255,
                                    192
                                ],
                                Y(268),
                                [
                                    55,
                                    255,
                                    128
                                ],
                                Y(268),
                                [
                                    111,
                                    112
                                ],
                                Y(126),
                                [
                                    224
                                ], 
                            ],
                            16000: [
                                Q,
                                [
                                    255,
                                    192
                                ],
                                Y(268),
                                [
                                    55,
                                    255,
                                    128
                                ],
                                Y(268),
                                [
                                    111,
                                    255
                                ],
                                Y(269),
                                [
                                    223,
                                    108
                                ],
                                Y(195),
                                [
                                    1,
                                    192
                                ], 
                            ],
                            12000: [
                                X,
                                Y(268),
                                [
                                    3,
                                    127,
                                    248
                                ],
                                Y(268),
                                [
                                    6,
                                    255,
                                    240
                                ],
                                Y(268),
                                [
                                    13,
                                    255,
                                    224
                                ],
                                Y(268),
                                [
                                    27,
                                    253,
                                    128
                                ],
                                Y(259),
                                [
                                    56
                                ], 
                            ],
                            11025: [
                                X,
                                Y(268),
                                [
                                    3,
                                    127,
                                    248
                                ],
                                Y(268),
                                [
                                    6,
                                    255,
                                    240
                                ],
                                Y(268),
                                [
                                    13,
                                    255,
                                    224
                                ],
                                Y(268),
                                [
                                    27,
                                    255,
                                    192
                                ],
                                Y(268),
                                [
                                    55,
                                    175,
                                    128
                                ],
                                Y(108),
                                [
                                    112
                                ], 
                            ],
                            8000: [
                                X,
                                Y(268),
                                [
                                    3,
                                    121,
                                    16
                                ],
                                Y(47),
                                [
                                    7
                                ], 
                            ]
                        };
                        ee = J(t);
                    }
                    return ee;
                };
                var ei = 90000, er, en, ea, es, eo, eu, el;
                er = function e(t) {
                    return t * ei;
                };
                en = function e(t, i) {
                    return t * i;
                };
                ea = function e(t) {
                    return t / ei;
                };
                es = function e(t, i) {
                    return t / i;
                };
                eo = function e(t, i) {
                    return er(es(t, i));
                };
                eu = function e(t, i) {
                    return en(ea(t), i);
                };
                el = function e(t, i, r) {
                    return ea(r ? t : t - i);
                };
                var ed = {
                    ONE_SECOND_IN_TS: ei,
                    secondsToVideoTs: er,
                    secondsToAudioTs: en,
                    videoTsToSeconds: ea,
                    audioTsToSeconds: es,
                    audioTsToVideoTs: eo,
                    videoTsToAudioTs: eu,
                    metadataTsToSeconds: el
                };
                var ec = function e(t) {
                    var i, r, n = 0;
                    for(i = 0; i < t.length; i++){
                        r = t[i];
                        n += r.data.byteLength;
                    }
                    return n;
                };
                var eh = function e(t, i, r, n) {
                    var a, s = 0, o = 0, u = 0, l = 0, d, c, h;
                    if (!i.length) {
                        return;
                    }
                    a = ed.audioTsToVideoTs(t.baseMediaDecodeTime, t.samplerate);
                    s = Math.ceil(ed.ONE_SECOND_IN_TS / (t.samplerate / 1024));
                    if (r && n) {
                        o = a - Math.max(r, n);
                        u = Math.floor(o / s);
                        l = u * s;
                    }
                    if (u < 1 || l > ed.ONE_SECOND_IN_TS / 2) {
                        return;
                    }
                    d = et()[t.samplerate];
                    if (!d) {
                        d = i[0].data;
                    }
                    for(c = 0; c < u; c++){
                        h = i[0];
                        i.splice(0, 0, {
                            data: d,
                            dts: h.dts - s,
                            pts: h.pts - s
                        });
                    }
                    t.baseMediaDecodeTime -= Math.floor(ed.videoTsToAudioTs(l, t.samplerate));
                    return l;
                };
                var ef = function e(t, i, r) {
                    if (i.minSegmentDts >= r) {
                        return t;
                    }
                    i.minSegmentDts = Infinity;
                    return t.filter(function(e) {
                        if (e.dts >= r) {
                            i.minSegmentDts = Math.min(i.minSegmentDts, e.dts);
                            i.minSegmentPts = i.minSegmentDts;
                            return true;
                        }
                        return false;
                    });
                };
                var ep = function e(t) {
                    var i, r, n = [];
                    for(i = 0; i < t.length; i++){
                        r = t[i];
                        n.push({
                            size: r.data.byteLength,
                            duration: 1024
                        });
                    }
                    return n;
                };
                var em = function e(t) {
                    var i, r, n = 0, a = new Uint8Array(ec(t));
                    for(i = 0; i < t.length; i++){
                        r = t[i];
                        a.set(r.data, n);
                        n += r.data.byteLength;
                    }
                    return a;
                };
                var ev = {
                    prefixWithSilence: eh,
                    trimAdtsFramesByEarliestDts: ef,
                    generateSampleTable: ep,
                    concatenateFrameData: em
                };
                var eg = ed.ONE_SECOND_IN_TS;
                var e$ = function e(t, i) {
                    if (typeof i.pts === "number") {
                        if (t.timelineStartInfo.pts === undefined) {
                            t.timelineStartInfo.pts = i.pts;
                        }
                        if (t.minSegmentPts === undefined) {
                            t.minSegmentPts = i.pts;
                        } else {
                            t.minSegmentPts = Math.min(t.minSegmentPts, i.pts);
                        }
                        if (t.maxSegmentPts === undefined) {
                            t.maxSegmentPts = i.pts;
                        } else {
                            t.maxSegmentPts = Math.max(t.maxSegmentPts, i.pts);
                        }
                    }
                    if (typeof i.dts === "number") {
                        if (t.timelineStartInfo.dts === undefined) {
                            t.timelineStartInfo.dts = i.dts;
                        }
                        if (t.minSegmentDts === undefined) {
                            t.minSegmentDts = i.dts;
                        } else {
                            t.minSegmentDts = Math.min(t.minSegmentDts, i.dts);
                        }
                        if (t.maxSegmentDts === undefined) {
                            t.maxSegmentDts = i.dts;
                        } else {
                            t.maxSegmentDts = Math.max(t.maxSegmentDts, i.dts);
                        }
                    }
                };
                var e8 = function e(t) {
                    delete t.minSegmentDts;
                    delete t.maxSegmentDts;
                    delete t.minSegmentPts;
                    delete t.maxSegmentPts;
                };
                var ey = function e(t, i) {
                    var r, n, a = t.minSegmentDts;
                    if (!i) {
                        a -= t.timelineStartInfo.dts;
                    }
                    r = t.timelineStartInfo.baseMediaDecodeTime;
                    r += a;
                    r = Math.max(0, r);
                    if (t.type === "audio") {
                        n = t.samplerate / eg;
                        r *= n;
                        r = Math.floor(r);
                    }
                    return r;
                };
                var eT = {
                    clearDtsInfo: e8,
                    calculateTrackBaseMediaDecodeTime: ey,
                    collectDtsInfo: e$
                };
                var eb = 4, ex = 128;
                var eS = function e(t) {
                    var i = 0, r = {
                        payloadType: -1,
                        payloadSize: 0
                    }, n = 0, a = 0;
                    while(i < t.byteLength){
                        if (t[i] === ex) {
                            break;
                        }
                        while(t[i] === 0xff){
                            n += 255;
                            i++;
                        }
                        n += t[i++];
                        while(t[i] === 0xff){
                            a += 255;
                            i++;
                        }
                        a += t[i++];
                        if (!r.payload && n === eb) {
                            var s = String.fromCharCode(t[i + 3], t[i + 4], t[i + 5], t[i + 6]);
                            if (s === "GA94") {
                                r.payloadType = n;
                                r.payloadSize = a;
                                r.payload = t.subarray(i, i + a);
                                break;
                            } else {
                                r.payload = void 0;
                            }
                        }
                        i += a;
                        n = 0;
                        a = 0;
                    }
                    return r;
                };
                var ek = function e(t) {
                    if (t.payload[0] !== 181) {
                        return null;
                    }
                    if (((t.payload[1] << 8) | t.payload[2]) !== 49) {
                        return null;
                    }
                    if (String.fromCharCode(t.payload[3], t.payload[4], t.payload[5], t.payload[6]) !== "GA94") {
                        return null;
                    }
                    if (t.payload[7] !== 0x03) {
                        return null;
                    }
                    return t.payload.subarray(8, t.payload.length - 1);
                };
                var eC = function e(t, i) {
                    var r = [], n, a, s, o;
                    if (!(i[0] & 0x40)) {
                        return r;
                    }
                    a = i[0] & 0x1f;
                    for(n = 0; n < a; n++){
                        s = n * 3;
                        o = {
                            type: i[s + 2] & 0x03,
                            pts: t
                        };
                        if (i[s + 2] & 0x04) {
                            o.ccData = (i[s + 3] << 8) | i[s + 4];
                            r.push(o);
                        }
                    }
                    return r;
                };
                var eE = function e(t) {
                    var i = t.byteLength, r = [], n = 1, a, s;
                    while(n < i - 2){
                        if (t[n] === 0 && t[n + 1] === 0 && t[n + 2] === 0x03) {
                            r.push(n + 2);
                            n += 2;
                        } else {
                            n++;
                        }
                    }
                    if (r.length === 0) {
                        return t;
                    }
                    a = i - r.length;
                    s = new Uint8Array(a);
                    var o = 0;
                    for(n = 0; n < a; o++, n++){
                        if (o === r[0]) {
                            o++;
                            r.shift();
                        }
                        s[n] = t[o];
                    }
                    return s;
                };
                var ew = {
                    parseSei: eS,
                    parseUserData: ek,
                    parseCaptionPackets: eC,
                    discardEmulationPreventionBytes: eE,
                    USER_DATA_REGISTERED_ITU_T_T35: eb
                };
                var eI = function e(t) {
                    t = t || {};
                    e.prototype.init.call(this);
                    this.parse708captions_ = typeof t.parse708captions === "boolean" ? t.parse708captions : true;
                    this.captionPackets_ = [];
                    this.ccStreams_ = [
                        new eF(0, 0),
                        new eF(0, 1),
                        new eF(1, 0),
                        new eF(1, 1)
                    ];
                    if (this.parse708captions_) {
                        this.cc708Stream_ = new eO({
                            captionServices: t.captionServices
                        });
                    }
                    this.reset();
                    this.ccStreams_.forEach(function(e) {
                        e.on("data", this.trigger.bind(this, "data"));
                        e.on("partialdone", this.trigger.bind(this, "partialdone"));
                        e.on("done", this.trigger.bind(this, "done"));
                    }, this);
                    if (this.parse708captions_) {
                        this.cc708Stream_.on("data", this.trigger.bind(this, "data"));
                        this.cc708Stream_.on("partialdone", this.trigger.bind(this, "partialdone"));
                        this.cc708Stream_.on("done", this.trigger.bind(this, "done"));
                    }
                };
                eI.prototype = new t();
                eI.prototype.push = function(e) {
                    var t, i, r;
                    if (e.nalUnitType !== "sei_rbsp") {
                        return;
                    }
                    t = ew.parseSei(e.escapedRBSP);
                    if (!t.payload) {
                        return;
                    }
                    if (t.payloadType !== ew.USER_DATA_REGISTERED_ITU_T_T35) {
                        return;
                    }
                    i = ew.parseUserData(t);
                    if (!i) {
                        return;
                    }
                    if (e.dts < this.latestDts_) {
                        this.ignoreNextEqualDts_ = true;
                        return;
                    } else if (e.dts === this.latestDts_ && this.ignoreNextEqualDts_) {
                        this.numSameDts_--;
                        if (!this.numSameDts_) {
                            this.ignoreNextEqualDts_ = false;
                        }
                        return;
                    }
                    r = ew.parseCaptionPackets(e.pts, i);
                    this.captionPackets_ = this.captionPackets_.concat(r);
                    if (this.latestDts_ !== e.dts) {
                        this.numSameDts_ = 0;
                    }
                    this.numSameDts_++;
                    this.latestDts_ = e.dts;
                };
                eI.prototype.flushCCStreams = function(e) {
                    this.ccStreams_.forEach(function(t) {
                        return e === "flush" ? t.flush() : t.partialFlush();
                    }, this);
                };
                eI.prototype.flushStream = function(e) {
                    if (!this.captionPackets_.length) {
                        this.flushCCStreams(e);
                        return;
                    }
                    this.captionPackets_.forEach(function(e, t) {
                        e.presortIndex = t;
                    });
                    this.captionPackets_.sort(function(e, t) {
                        if (e.pts === t.pts) {
                            return e.presortIndex - t.presortIndex;
                        }
                        return e.pts - t.pts;
                    });
                    this.captionPackets_.forEach(function(e) {
                        if (e.type < 2) {
                            this.dispatchCea608Packet(e);
                        } else {
                            this.dispatchCea708Packet(e);
                        }
                    }, this);
                    this.captionPackets_.length = 0;
                    this.flushCCStreams(e);
                };
                eI.prototype.flush = function() {
                    return this.flushStream("flush");
                };
                eI.prototype.partialFlush = function() {
                    return this.flushStream("partialFlush");
                };
                eI.prototype.reset = function() {
                    this.latestDts_ = null;
                    this.ignoreNextEqualDts_ = false;
                    this.numSameDts_ = 0;
                    this.activeCea608Channel_ = [
                        null,
                        null
                    ];
                    this.ccStreams_.forEach(function(e) {
                        e.reset();
                    });
                };
                eI.prototype.dispatchCea608Packet = function(e) {
                    if (this.setsTextOrXDSActive(e)) {
                        this.activeCea608Channel_[e.type] = null;
                    } else if (this.setsChannel1Active(e)) {
                        this.activeCea608Channel_[e.type] = 0;
                    } else if (this.setsChannel2Active(e)) {
                        this.activeCea608Channel_[e.type] = 1;
                    }
                    if (this.activeCea608Channel_[e.type] === null) {
                        return;
                    }
                    this.ccStreams_[(e.type << 1) + this.activeCea608Channel_[e.type]].push(e);
                };
                eI.prototype.setsChannel1Active = function(e) {
                    return (e.ccData & 0x7800) === 0x1000;
                };
                eI.prototype.setsChannel2Active = function(e) {
                    return (e.ccData & 0x7800) === 0x1800;
                };
                eI.prototype.setsTextOrXDSActive = function(e) {
                    return ((e.ccData & 0x7100) === 0x0100 || (e.ccData & 0x78fe) === 0x102a || (e.ccData & 0x78fe) === 0x182a);
                };
                eI.prototype.dispatchCea708Packet = function(e) {
                    if (this.parse708captions_) {
                        this.cc708Stream_.push(e);
                    }
                };
                var eP = {
                    0x7f: 0x266a,
                    0x1020: 0x20,
                    0x1021: 0xa0,
                    0x1025: 0x2026,
                    0x102a: 0x0160,
                    0x102c: 0x0152,
                    0x1030: 0x2588,
                    0x1031: 0x2018,
                    0x1032: 0x2019,
                    0x1033: 0x201c,
                    0x1034: 0x201d,
                    0x1035: 0x2022,
                    0x1039: 0x2122,
                    0x103a: 0x0161,
                    0x103c: 0x0153,
                    0x103d: 0x2120,
                    0x103f: 0x0178,
                    0x1076: 0x215b,
                    0x1077: 0x215c,
                    0x1078: 0x215d,
                    0x1079: 0x215e,
                    0x107a: 0x23d0,
                    0x107b: 0x23a4,
                    0x107c: 0x23a3,
                    0x107d: 0x23af,
                    0x107e: 0x23a6,
                    0x107f: 0x23a1,
                    0x10a0: 0x3138
                };
                var e_ = function e(t) {
                    var i = eP[t] || t;
                    if (t & 0x1000 && t === i) {
                        return "";
                    }
                    return String.fromCharCode(i);
                };
                var eL = function e(t) {
                    return ((0x20 <= t && t <= 0x7f) || (0xa0 <= t && t <= 0xff));
                };
                var eA = function e(t) {
                    this.windowNum = t;
                    this.reset();
                };
                eA.prototype.reset = function() {
                    this.clearText();
                    this.pendingNewLine = false;
                    this.winAttr = {};
                    this.penAttr = {};
                    this.penLoc = {};
                    this.penColor = {};
                    this.visible = 0;
                    this.rowLock = 0;
                    this.columnLock = 0;
                    this.priority = 0;
                    this.relativePositioning = 0;
                    this.anchorVertical = 0;
                    this.anchorHorizontal = 0;
                    this.anchorPoint = 0;
                    this.rowCount = 1;
                    this.virtualRowCount = this.rowCount + 1;
                    this.columnCount = 41;
                    this.windowStyle = 0;
                    this.penStyle = 0;
                };
                eA.prototype.getText = function() {
                    return this.rows.join("\n");
                };
                eA.prototype.clearText = function() {
                    this.rows = [
                        ""
                    ];
                    this.rowIdx = 0;
                };
                eA.prototype.newLine = function(e) {
                    if (this.rows.length >= this.virtualRowCount && typeof this.beforeRowOverflow === "function") {
                        this.beforeRowOverflow(e);
                    }
                    if (this.rows.length > 0) {
                        this.rows.push("");
                        this.rowIdx++;
                    }
                    while(this.rows.length > this.virtualRowCount){
                        this.rows.shift();
                        this.rowIdx--;
                    }
                };
                eA.prototype.isEmpty = function() {
                    if (this.rows.length === 0) {
                        return true;
                    } else if (this.rows.length === 1) {
                        return this.rows[0] === "";
                    }
                    return false;
                };
                eA.prototype.addText = function(e) {
                    this.rows[this.rowIdx] += e;
                };
                eA.prototype.backspace = function() {
                    if (!this.isEmpty()) {
                        var e = this.rows[this.rowIdx];
                        this.rows[this.rowIdx] = e.substr(0, e.length - 1);
                    }
                };
                var eD = function e(t, i, r) {
                    this.serviceNum = t;
                    this.text = "";
                    this.currentWindow = new eA(-1);
                    this.windows = [];
                    this.stream = r;
                    if (typeof i === "string") {
                        this.createTextDecoder(i);
                    }
                };
                eD.prototype.init = function(e, t) {
                    this.startPts = e;
                    for(var i = 0; i < 8; i++){
                        this.windows[i] = new eA(i);
                        if (typeof t === "function") {
                            this.windows[i].beforeRowOverflow = t;
                        }
                    }
                };
                eD.prototype.setCurrentWindow = function(e) {
                    this.currentWindow = this.windows[e];
                };
                eD.prototype.createTextDecoder = function(e) {
                    if (typeof TextDecoder === "undefined") {
                        this.stream.trigger("log", {
                            level: "warn",
                            message: "The `encoding` option is unsupported without TextDecoder support"
                        });
                    } else {
                        try {
                            this.textDecoder_ = new TextDecoder(e);
                        } catch (t) {
                            this.stream.trigger("log", {
                                level: "warn",
                                message: "TextDecoder could not be created with " + e + " encoding. " + t
                            });
                        }
                    }
                };
                var eO = function e(t) {
                    t = t || {};
                    e.prototype.init.call(this);
                    var i = this;
                    var r = t.captionServices || {};
                    var n = {};
                    var a;
                    Object.keys(r).forEach(function(e) {
                        a = r[e];
                        if (/^SERVICE/.test(e)) {
                            n[e] = a.encoding;
                        }
                    });
                    this.serviceEncodings = n;
                    this.current708Packet = null;
                    this.services = {};
                    this.push = function(e) {
                        if (e.type === 3) {
                            i.new708Packet();
                            i.add708Bytes(e);
                        } else {
                            if (i.current708Packet === null) {
                                i.new708Packet();
                            }
                            i.add708Bytes(e);
                        }
                    };
                };
                eO.prototype = new t();
                eO.prototype.new708Packet = function() {
                    if (this.current708Packet !== null) {
                        this.push708Packet();
                    }
                    this.current708Packet = {
                        data: [],
                        ptsVals: []
                    };
                };
                eO.prototype.add708Bytes = function(e) {
                    var t = e.ccData;
                    var i = t >>> 8;
                    var r = t & 0xff;
                    this.current708Packet.ptsVals.push(e.pts);
                    this.current708Packet.data.push(i);
                    this.current708Packet.data.push(r);
                };
                eO.prototype.push708Packet = function() {
                    var e = this.current708Packet;
                    var t = e.data;
                    var i = null;
                    var r = null;
                    var n = 0;
                    var a = t[n++];
                    e.seq = a >> 6;
                    e.sizeCode = a & 0x3f;
                    for(; n < t.length; n++){
                        a = t[n++];
                        i = a >> 5;
                        r = a & 0x1f;
                        if (i === 7 && r > 0) {
                            a = t[n++];
                            i = a;
                        }
                        this.pushServiceBlock(i, n, r);
                        if (r > 0) {
                            n += r - 1;
                        }
                    }
                };
                eO.prototype.pushServiceBlock = function(e, t, i) {
                    var r;
                    var n = t;
                    var a = this.current708Packet.data;
                    var s = this.services[e];
                    if (!s) {
                        s = this.initService(e, n);
                    }
                    for(; n < t + i && n < a.length; n++){
                        r = a[n];
                        if (eL(r)) {
                            n = this.handleText(n, s);
                        } else if (r === 0x18) {
                            n = this.multiByteCharacter(n, s);
                        } else if (r === 0x10) {
                            n = this.extendedCommands(n, s);
                        } else if (0x80 <= r && r <= 0x87) {
                            n = this.setCurrentWindow(n, s);
                        } else if (0x98 <= r && r <= 0x9f) {
                            n = this.defineWindow(n, s);
                        } else if (r === 0x88) {
                            n = this.clearWindows(n, s);
                        } else if (r === 0x8c) {
                            n = this.deleteWindows(n, s);
                        } else if (r === 0x89) {
                            n = this.displayWindows(n, s);
                        } else if (r === 0x8a) {
                            n = this.hideWindows(n, s);
                        } else if (r === 0x8b) {
                            n = this.toggleWindows(n, s);
                        } else if (r === 0x97) {
                            n = this.setWindowAttributes(n, s);
                        } else if (r === 0x90) {
                            n = this.setPenAttributes(n, s);
                        } else if (r === 0x91) {
                            n = this.setPenColor(n, s);
                        } else if (r === 0x92) {
                            n = this.setPenLocation(n, s);
                        } else if (r === 0x8f) {
                            s = this.reset(n, s);
                        } else if (r === 0x08) {
                            s.currentWindow.backspace();
                        } else if (r === 0x0c) {
                            s.currentWindow.clearText();
                        } else if (r === 0x0d) {
                            s.currentWindow.pendingNewLine = true;
                        } else if (r === 0x0e) {
                            s.currentWindow.clearText();
                        } else if (r === 0x8d) {
                            n++;
                        } else ;
                    }
                };
                eO.prototype.extendedCommands = function(e, t) {
                    var i = this.current708Packet.data;
                    var r = i[++e];
                    if (eL(r)) {
                        e = this.handleText(e, t, {
                            isExtended: true
                        });
                    }
                    return e;
                };
                eO.prototype.getPts = function(e) {
                    return this.current708Packet.ptsVals[Math.floor(e / 2)];
                };
                eO.prototype.initService = function(e, t) {
                    var i = "SERVICE" + e;
                    var r = this;
                    var i;
                    var n;
                    if (i in this.serviceEncodings) {
                        n = this.serviceEncodings[i];
                    }
                    this.services[e] = new eD(e, n, r);
                    this.services[e].init(this.getPts(t), function(t) {
                        r.flushDisplayed(t, r.services[e]);
                    });
                    return this.services[e];
                };
                eO.prototype.handleText = function(e, t, i) {
                    var r = i && i.isExtended;
                    var n = i && i.isMultiByte;
                    var a = this.current708Packet.data;
                    var s = r ? 0x1000 : 0x0000;
                    var o = a[e];
                    var u = a[e + 1];
                    var l = t.currentWindow;
                    var d;
                    var c;
                    if (t.textDecoder_ && !r) {
                        if (n) {
                            c = [
                                o,
                                u
                            ];
                            e++;
                        } else {
                            c = [
                                o
                            ];
                        }
                        d = t.textDecoder_.decode(new Uint8Array(c));
                    } else {
                        d = e_(s | o);
                    }
                    if (l.pendingNewLine && !l.isEmpty()) {
                        l.newLine(this.getPts(e));
                    }
                    l.pendingNewLine = false;
                    l.addText(d);
                    return e;
                };
                eO.prototype.multiByteCharacter = function(e, t) {
                    var i = this.current708Packet.data;
                    var r = i[e + 1];
                    var n = i[e + 2];
                    if (eL(r) && eL(n)) {
                        e = this.handleText(++e, t, {
                            isMultiByte: true
                        });
                    }
                    return e;
                };
                eO.prototype.setCurrentWindow = function(e, t) {
                    var i = this.current708Packet.data;
                    var r = i[e];
                    var n = r & 0x07;
                    t.setCurrentWindow(n);
                    return e;
                };
                eO.prototype.defineWindow = function(e, t) {
                    var i = this.current708Packet.data;
                    var r = i[e];
                    var n = r & 0x07;
                    t.setCurrentWindow(n);
                    var a = t.currentWindow;
                    r = i[++e];
                    a.visible = (r & 0x20) >> 5;
                    a.rowLock = (r & 0x10) >> 4;
                    a.columnLock = (r & 0x08) >> 3;
                    a.priority = r & 0x07;
                    r = i[++e];
                    a.relativePositioning = (r & 0x80) >> 7;
                    a.anchorVertical = r & 0x7f;
                    r = i[++e];
                    a.anchorHorizontal = r;
                    r = i[++e];
                    a.anchorPoint = (r & 0xf0) >> 4;
                    a.rowCount = r & 0x0f;
                    r = i[++e];
                    a.columnCount = r & 0x3f;
                    r = i[++e];
                    a.windowStyle = (r & 0x38) >> 3;
                    a.penStyle = r & 0x07;
                    a.virtualRowCount = a.rowCount + 1;
                    return e;
                };
                eO.prototype.setWindowAttributes = function(e, t) {
                    var i = this.current708Packet.data;
                    var r = i[e];
                    var n = t.currentWindow.winAttr;
                    r = i[++e];
                    n.fillOpacity = (r & 0xc0) >> 6;
                    n.fillRed = (r & 0x30) >> 4;
                    n.fillGreen = (r & 0x0c) >> 2;
                    n.fillBlue = r & 0x03;
                    r = i[++e];
                    n.borderType = (r & 0xc0) >> 6;
                    n.borderRed = (r & 0x30) >> 4;
                    n.borderGreen = (r & 0x0c) >> 2;
                    n.borderBlue = r & 0x03;
                    r = i[++e];
                    n.borderType += (r & 0x80) >> 5;
                    n.wordWrap = (r & 0x40) >> 6;
                    n.printDirection = (r & 0x30) >> 4;
                    n.scrollDirection = (r & 0x0c) >> 2;
                    n.justify = r & 0x03;
                    r = i[++e];
                    n.effectSpeed = (r & 0xf0) >> 4;
                    n.effectDirection = (r & 0x0c) >> 2;
                    n.displayEffect = r & 0x03;
                    return e;
                };
                eO.prototype.flushDisplayed = function(e, t) {
                    var i = [];
                    for(var r = 0; r < 8; r++){
                        if (t.windows[r].visible && !t.windows[r].isEmpty()) {
                            i.push(t.windows[r].getText());
                        }
                    }
                    t.endPts = e;
                    t.text = i.join("\n\n");
                    this.pushCaption(t);
                    t.startPts = e;
                };
                eO.prototype.pushCaption = function(e) {
                    if (e.text !== "") {
                        this.trigger("data", {
                            startPts: e.startPts,
                            endPts: e.endPts,
                            text: e.text,
                            stream: "cc708_" + e.serviceNum
                        });
                        e.text = "";
                        e.startPts = e.endPts;
                    }
                };
                eO.prototype.displayWindows = function(e, t) {
                    var i = this.current708Packet.data;
                    var r = i[++e];
                    var n = this.getPts(e);
                    this.flushDisplayed(n, t);
                    for(var a = 0; a < 8; a++){
                        if (r & (0x01 << a)) {
                            t.windows[a].visible = 1;
                        }
                    }
                    return e;
                };
                eO.prototype.hideWindows = function(e, t) {
                    var i = this.current708Packet.data;
                    var r = i[++e];
                    var n = this.getPts(e);
                    this.flushDisplayed(n, t);
                    for(var a = 0; a < 8; a++){
                        if (r & (0x01 << a)) {
                            t.windows[a].visible = 0;
                        }
                    }
                    return e;
                };
                eO.prototype.toggleWindows = function(e, t) {
                    var i = this.current708Packet.data;
                    var r = i[++e];
                    var n = this.getPts(e);
                    this.flushDisplayed(n, t);
                    for(var a = 0; a < 8; a++){
                        if (r & (0x01 << a)) {
                            t.windows[a].visible ^= 1;
                        }
                    }
                    return e;
                };
                eO.prototype.clearWindows = function(e, t) {
                    var i = this.current708Packet.data;
                    var r = i[++e];
                    var n = this.getPts(e);
                    this.flushDisplayed(n, t);
                    for(var a = 0; a < 8; a++){
                        if (r & (0x01 << a)) {
                            t.windows[a].clearText();
                        }
                    }
                    return e;
                };
                eO.prototype.deleteWindows = function(e, t) {
                    var i = this.current708Packet.data;
                    var r = i[++e];
                    var n = this.getPts(e);
                    this.flushDisplayed(n, t);
                    for(var a = 0; a < 8; a++){
                        if (r & (0x01 << a)) {
                            t.windows[a].reset();
                        }
                    }
                    return e;
                };
                eO.prototype.setPenAttributes = function(e, t) {
                    var i = this.current708Packet.data;
                    var r = i[e];
                    var n = t.currentWindow.penAttr;
                    r = i[++e];
                    n.textTag = (r & 0xf0) >> 4;
                    n.offset = (r & 0x0c) >> 2;
                    n.penSize = r & 0x03;
                    r = i[++e];
                    n.italics = (r & 0x80) >> 7;
                    n.underline = (r & 0x40) >> 6;
                    n.edgeType = (r & 0x38) >> 3;
                    n.fontStyle = r & 0x07;
                    return e;
                };
                eO.prototype.setPenColor = function(e, t) {
                    var i = this.current708Packet.data;
                    var r = i[e];
                    var n = t.currentWindow.penColor;
                    r = i[++e];
                    n.fgOpacity = (r & 0xc0) >> 6;
                    n.fgRed = (r & 0x30) >> 4;
                    n.fgGreen = (r & 0x0c) >> 2;
                    n.fgBlue = r & 0x03;
                    r = i[++e];
                    n.bgOpacity = (r & 0xc0) >> 6;
                    n.bgRed = (r & 0x30) >> 4;
                    n.bgGreen = (r & 0x0c) >> 2;
                    n.bgBlue = r & 0x03;
                    r = i[++e];
                    n.edgeRed = (r & 0x30) >> 4;
                    n.edgeGreen = (r & 0x0c) >> 2;
                    n.edgeBlue = r & 0x03;
                    return e;
                };
                eO.prototype.setPenLocation = function(e, t) {
                    var i = this.current708Packet.data;
                    var r = i[e];
                    var n = t.currentWindow.penLoc;
                    t.currentWindow.pendingNewLine = true;
                    r = i[++e];
                    n.row = r & 0x0f;
                    r = i[++e];
                    n.column = r & 0x3f;
                    return e;
                };
                eO.prototype.reset = function(e, t) {
                    var i = this.getPts(e);
                    this.flushDisplayed(i, t);
                    return this.initService(t.serviceNum, e);
                };
                var eR = {
                    0x2a: 0xe1,
                    0x5c: 0xe9,
                    0x5e: 0xed,
                    0x5f: 0xf3,
                    0x60: 0xfa,
                    0x7b: 0xe7,
                    0x7c: 0xf7,
                    0x7d: 0xd1,
                    0x7e: 0xf1,
                    0x7f: 0x2588,
                    0x0130: 0xae,
                    0x0131: 0xb0,
                    0x0132: 0xbd,
                    0x0133: 0xbf,
                    0x0134: 0x2122,
                    0x0135: 0xa2,
                    0x0136: 0xa3,
                    0x0137: 0x266a,
                    0x0138: 0xe0,
                    0x0139: 0xa0,
                    0x013a: 0xe8,
                    0x013b: 0xe2,
                    0x013c: 0xea,
                    0x013d: 0xee,
                    0x013e: 0xf4,
                    0x013f: 0xfb,
                    0x0220: 0xc1,
                    0x0221: 0xc9,
                    0x0222: 0xd3,
                    0x0223: 0xda,
                    0x0224: 0xdc,
                    0x0225: 0xfc,
                    0x0226: 0x2018,
                    0x0227: 0xa1,
                    0x0228: 0x2a,
                    0x0229: 0x27,
                    0x022a: 0x2014,
                    0x022b: 0xa9,
                    0x022c: 0x2120,
                    0x022d: 0x2022,
                    0x022e: 0x201c,
                    0x022f: 0x201d,
                    0x0230: 0xc0,
                    0x0231: 0xc2,
                    0x0232: 0xc7,
                    0x0233: 0xc8,
                    0x0234: 0xca,
                    0x0235: 0xcb,
                    0x0236: 0xeb,
                    0x0237: 0xce,
                    0x0238: 0xcf,
                    0x0239: 0xef,
                    0x023a: 0xd4,
                    0x023b: 0xd9,
                    0x023c: 0xf9,
                    0x023d: 0xdb,
                    0x023e: 0xab,
                    0x023f: 0xbb,
                    0x0320: 0xc3,
                    0x0321: 0xe3,
                    0x0322: 0xcd,
                    0x0323: 0xcc,
                    0x0324: 0xec,
                    0x0325: 0xd2,
                    0x0326: 0xf2,
                    0x0327: 0xd5,
                    0x0328: 0xf5,
                    0x0329: 0x7b,
                    0x032a: 0x7d,
                    0x032b: 0x5c,
                    0x032c: 0x5e,
                    0x032d: 0x5f,
                    0x032e: 0x7c,
                    0x032f: 0x7e,
                    0x0330: 0xc4,
                    0x0331: 0xe4,
                    0x0332: 0xd6,
                    0x0333: 0xf6,
                    0x0334: 0xdf,
                    0x0335: 0xa5,
                    0x0336: 0xa4,
                    0x0337: 0x2502,
                    0x0338: 0xc5,
                    0x0339: 0xe5,
                    0x033a: 0xd8,
                    0x033b: 0xf8,
                    0x033c: 0x250c,
                    0x033d: 0x2510,
                    0x033e: 0x2514,
                    0x033f: 0x2518
                };
                var eM = function e(t) {
                    if (t === null) {
                        return "";
                    }
                    t = eR[t] || t;
                    return String.fromCharCode(t);
                };
                var e0 = 14;
                var eU = [
                    0x1100,
                    0x1120,
                    0x1200,
                    0x1220,
                    0x1500,
                    0x1520,
                    0x1600,
                    0x1620,
                    0x1700,
                    0x1720,
                    0x1000,
                    0x1300,
                    0x1320,
                    0x1400,
                    0x1420, 
                ];
                var eB = function e() {
                    var t = [], i = e0 + 1;
                    while(i--){
                        t.push("");
                    }
                    return t;
                };
                var eF = function e(t, i) {
                    e.prototype.init.call(this);
                    this.field_ = t || 0;
                    this.dataChannel_ = i || 0;
                    this.name_ = "CC" + (((this.field_ << 1) | this.dataChannel_) + 1);
                    this.setConstants();
                    this.reset();
                    this.push = function(e) {
                        var t, i, r, n, a;
                        t = e.ccData & 0x7f7f;
                        if (t === this.lastControlCode_) {
                            this.lastControlCode_ = null;
                            return;
                        }
                        if ((t & 0xf000) === 0x1000) {
                            this.lastControlCode_ = t;
                        } else if (t !== this.PADDING_) {
                            this.lastControlCode_ = null;
                        }
                        r = t >>> 8;
                        n = t & 0xff;
                        if (t === this.PADDING_) {
                            return;
                        } else if (t === this.RESUME_CAPTION_LOADING_) {
                            this.mode_ = "popOn";
                        } else if (t === this.END_OF_CAPTION_) {
                            this.mode_ = "popOn";
                            this.clearFormatting(e.pts);
                            this.flushDisplayed(e.pts);
                            i = this.displayed_;
                            this.displayed_ = this.nonDisplayed_;
                            this.nonDisplayed_ = i;
                            this.startPts_ = e.pts;
                        } else if (t === this.ROLL_UP_2_ROWS_) {
                            this.rollUpRows_ = 2;
                            this.setRollUp(e.pts);
                        } else if (t === this.ROLL_UP_3_ROWS_) {
                            this.rollUpRows_ = 3;
                            this.setRollUp(e.pts);
                        } else if (t === this.ROLL_UP_4_ROWS_) {
                            this.rollUpRows_ = 4;
                            this.setRollUp(e.pts);
                        } else if (t === this.CARRIAGE_RETURN_) {
                            this.clearFormatting(e.pts);
                            this.flushDisplayed(e.pts);
                            this.shiftRowsUp_();
                            this.startPts_ = e.pts;
                        } else if (t === this.BACKSPACE_) {
                            if (this.mode_ === "popOn") {
                                this.nonDisplayed_[this.row_] = this.nonDisplayed_[this.row_].slice(0, -1);
                            } else {
                                this.displayed_[this.row_] = this.displayed_[this.row_].slice(0, -1);
                            }
                        } else if (t === this.ERASE_DISPLAYED_MEMORY_) {
                            this.flushDisplayed(e.pts);
                            this.displayed_ = eB();
                        } else if (t === this.ERASE_NON_DISPLAYED_MEMORY_) {
                            this.nonDisplayed_ = eB();
                        } else if (t === this.RESUME_DIRECT_CAPTIONING_) {
                            if (this.mode_ !== "paintOn") {
                                this.flushDisplayed(e.pts);
                                this.displayed_ = eB();
                            }
                            this.mode_ = "paintOn";
                            this.startPts_ = e.pts;
                        } else if (this.isSpecialCharacter(r, n)) {
                            r = (r & 0x03) << 8;
                            a = eM(r | n);
                            this[this.mode_](e.pts, a);
                            this.column_++;
                        } else if (this.isExtCharacter(r, n)) {
                            if (this.mode_ === "popOn") {
                                this.nonDisplayed_[this.row_] = this.nonDisplayed_[this.row_].slice(0, -1);
                            } else {
                                this.displayed_[this.row_] = this.displayed_[this.row_].slice(0, -1);
                            }
                            r = (r & 0x03) << 8;
                            a = eM(r | n);
                            this[this.mode_](e.pts, a);
                            this.column_++;
                        } else if (this.isMidRowCode(r, n)) {
                            this.clearFormatting(e.pts);
                            this[this.mode_](e.pts, " ");
                            this.column_++;
                            if ((n & 0xe) === 0xe) {
                                this.addFormatting(e.pts, [
                                    "i"
                                ]);
                            }
                            if ((n & 0x1) === 0x1) {
                                this.addFormatting(e.pts, [
                                    "u"
                                ]);
                            }
                        } else if (this.isOffsetControlCode(r, n)) {
                            this.column_ += n & 0x03;
                        } else if (this.isPAC(r, n)) {
                            var s = eU.indexOf(t & 0x1f20);
                            if (this.mode_ === "rollUp") {
                                if (s - this.rollUpRows_ + 1 < 0) {
                                    s = this.rollUpRows_ - 1;
                                }
                                this.setRollUp(e.pts, s);
                            }
                            if (s !== this.row_) {
                                this.clearFormatting(e.pts);
                                this.row_ = s;
                            }
                            if (n & 0x1 && this.formatting_.indexOf("u") === -1) {
                                this.addFormatting(e.pts, [
                                    "u"
                                ]);
                            }
                            if ((t & 0x10) === 0x10) {
                                this.column_ = ((t & 0xe) >> 1) * 4;
                            }
                            if (this.isColorPAC(n)) {
                                if ((n & 0xe) === 0xe) {
                                    this.addFormatting(e.pts, [
                                        "i"
                                    ]);
                                }
                            }
                        } else if (this.isNormalChar(r)) {
                            if (n === 0x00) {
                                n = null;
                            }
                            a = eM(r);
                            a += eM(n);
                            this[this.mode_](e.pts, a);
                            this.column_ += a.length;
                        }
                    };
                };
                eF.prototype = new t();
                eF.prototype.flushDisplayed = function(e) {
                    var t = this.displayed_.map(function(e, t) {
                        try {
                            return e.trim();
                        } catch (i) {
                            this.trigger("log", {
                                level: "warn",
                                message: "Skipping a malformed 608 caption at index " + t + "."
                            });
                            return "";
                        }
                    }, this).join("\n").replace(/^\n+|\n+$/g, "");
                    if (t.length) {
                        this.trigger("data", {
                            startPts: this.startPts_,
                            endPts: e,
                            text: t,
                            stream: this.name_
                        });
                    }
                };
                eF.prototype.reset = function() {
                    this.mode_ = "popOn";
                    this.topRow_ = 0;
                    this.startPts_ = 0;
                    this.displayed_ = eB();
                    this.nonDisplayed_ = eB();
                    this.lastControlCode_ = null;
                    this.column_ = 0;
                    this.row_ = e0;
                    this.rollUpRows_ = 2;
                    this.formatting_ = [];
                };
                eF.prototype.setConstants = function() {
                    if (this.dataChannel_ === 0) {
                        this.BASE_ = 0x10;
                        this.EXT_ = 0x11;
                        this.CONTROL_ = (0x14 | this.field_) << 8;
                        this.OFFSET_ = 0x17;
                    } else if (this.dataChannel_ === 1) {
                        this.BASE_ = 0x18;
                        this.EXT_ = 0x19;
                        this.CONTROL_ = (0x1c | this.field_) << 8;
                        this.OFFSET_ = 0x1f;
                    }
                    this.PADDING_ = 0x0000;
                    this.RESUME_CAPTION_LOADING_ = this.CONTROL_ | 0x20;
                    this.END_OF_CAPTION_ = this.CONTROL_ | 0x2f;
                    this.ROLL_UP_2_ROWS_ = this.CONTROL_ | 0x25;
                    this.ROLL_UP_3_ROWS_ = this.CONTROL_ | 0x26;
                    this.ROLL_UP_4_ROWS_ = this.CONTROL_ | 0x27;
                    this.CARRIAGE_RETURN_ = this.CONTROL_ | 0x2d;
                    this.RESUME_DIRECT_CAPTIONING_ = this.CONTROL_ | 0x29;
                    this.BACKSPACE_ = this.CONTROL_ | 0x21;
                    this.ERASE_DISPLAYED_MEMORY_ = this.CONTROL_ | 0x2c;
                    this.ERASE_NON_DISPLAYED_MEMORY_ = this.CONTROL_ | 0x2e;
                };
                eF.prototype.isSpecialCharacter = function(e, t) {
                    return (e === this.EXT_ && t >= 0x30 && t <= 0x3f);
                };
                eF.prototype.isExtCharacter = function(e, t) {
                    return ((e === this.EXT_ + 1 || e === this.EXT_ + 2) && t >= 0x20 && t <= 0x3f);
                };
                eF.prototype.isMidRowCode = function(e, t) {
                    return (e === this.EXT_ && t >= 0x20 && t <= 0x2f);
                };
                eF.prototype.isOffsetControlCode = function(e, t) {
                    return (e === this.OFFSET_ && t >= 0x21 && t <= 0x23);
                };
                eF.prototype.isPAC = function(e, t) {
                    return (e >= this.BASE_ && e < this.BASE_ + 8 && t >= 0x40 && t <= 0x7f);
                };
                eF.prototype.isColorPAC = function(e) {
                    return ((e >= 0x40 && e <= 0x4f) || (e >= 0x60 && e <= 0x7f));
                };
                eF.prototype.isNormalChar = function(e) {
                    return e >= 0x20 && e <= 0x7f;
                };
                eF.prototype.setRollUp = function(e, t) {
                    if (this.mode_ !== "rollUp") {
                        this.row_ = e0;
                        this.mode_ = "rollUp";
                        this.flushDisplayed(e);
                        this.nonDisplayed_ = eB();
                        this.displayed_ = eB();
                    }
                    if (t !== undefined && t !== this.row_) {
                        for(var i = 0; i < this.rollUpRows_; i++){
                            this.displayed_[t - i] = this.displayed_[this.row_ - i];
                            this.displayed_[this.row_ - i] = "";
                        }
                    }
                    if (t === undefined) {
                        t = this.row_;
                    }
                    this.topRow_ = t - this.rollUpRows_ + 1;
                };
                eF.prototype.addFormatting = function(e, t) {
                    this.formatting_ = this.formatting_.concat(t);
                    var i = t.reduce(function(e, t) {
                        return e + "<" + t + ">";
                    }, "");
                    this[this.mode_](e, i);
                };
                eF.prototype.clearFormatting = function(e) {
                    if (!this.formatting_.length) {
                        return;
                    }
                    var t = this.formatting_.reverse().reduce(function(e, t) {
                        return e + "</" + t + ">";
                    }, "");
                    this.formatting_ = [];
                    this[this.mode_](e, t);
                };
                eF.prototype.popOn = function(e, t) {
                    var i = this.nonDisplayed_[this.row_];
                    i += t;
                    this.nonDisplayed_[this.row_] = i;
                };
                eF.prototype.rollUp = function(e, t) {
                    var i = this.displayed_[this.row_];
                    i += t;
                    this.displayed_[this.row_] = i;
                };
                eF.prototype.shiftRowsUp_ = function() {
                    var e;
                    for(e = 0; e < this.topRow_; e++){
                        this.displayed_[e] = "";
                    }
                    for(e = this.row_ + 1; e < e0 + 1; e++){
                        this.displayed_[e] = "";
                    }
                    for(e = this.topRow_; e < this.row_; e++){
                        this.displayed_[e] = this.displayed_[e + 1];
                    }
                    this.displayed_[this.row_] = "";
                };
                eF.prototype.paintOn = function(e, t) {
                    var i = this.displayed_[this.row_];
                    i += t;
                    this.displayed_[this.row_] = i;
                };
                var eN = {
                    CaptionStream: eI,
                    Cea608Stream: eF,
                    Cea708Stream: eO
                };
                var e1 = {
                    H264_STREAM_TYPE: 0x1b,
                    ADTS_STREAM_TYPE: 0x0f,
                    METADATA_STREAM_TYPE: 0x15
                };
                var ej = 8589934592;
                var e2 = 4294967296;
                var eH = "shared";
                var e6 = function e(t, i) {
                    var r = 1;
                    if (t > i) {
                        r = -1;
                    }
                    while(Math.abs(i - t) > e2){
                        t += r * ej;
                    }
                    return t;
                };
                var eq = function e(t) {
                    var i, r;
                    e.prototype.init.call(this);
                    this.type_ = t || eH;
                    this.push = function(e) {
                        if (this.type_ !== eH && e.type !== this.type_) {
                            return;
                        }
                        if (r === undefined) {
                            r = e.dts;
                        }
                        e.dts = e6(e.dts, r);
                        e.pts = e6(e.pts, r);
                        i = e.dts;
                        this.trigger("data", e);
                    };
                    this.flush = function() {
                        r = i;
                        this.trigger("done");
                    };
                    this.endTimeline = function() {
                        this.flush();
                        this.trigger("endedtimeline");
                    };
                    this.discontinuity = function() {
                        r = void 0;
                        i = void 0;
                    };
                    this.reset = function() {
                        this.discontinuity();
                        this.trigger("reset");
                    };
                };
                eq.prototype = new t();
                var eV = {
                    TimestampRolloverStream: eq,
                    handleRollover: e6
                };
                var eW = function e(t, i, r) {
                    var n, a = "";
                    for(n = i; n < r; n++){
                        a += "%" + ("00" + t[n].toString(16)).slice(-2);
                    }
                    return a;
                }, e3 = function e(t, i, r) {
                    return decodeURIComponent(eW(t, i, r));
                }, e4 = function e(t, i, r) {
                    return unescape(eW(t, i, r));
                }, e5 = function e(t) {
                    return ((t[0] << 21) | (t[1] << 14) | (t[2] << 7) | t[3]);
                }, ez = {
                    TXXX: function e(t) {
                        var i;
                        if (t.data[0] !== 3) {
                            return;
                        }
                        for(i = 1; i < t.data.length; i++){
                            if (t.data[i] === 0) {
                                t.description = e3(t.data, 1, i);
                                t.value = e3(t.data, i + 1, t.data.length).replace(/\0*$/, "");
                                break;
                            }
                        }
                        t.data = t.value;
                    },
                    WXXX: function e(t) {
                        var i;
                        if (t.data[0] !== 3) {
                            return;
                        }
                        for(i = 1; i < t.data.length; i++){
                            if (t.data[i] === 0) {
                                t.description = e3(t.data, 1, i);
                                t.url = e3(t.data, i + 1, t.data.length);
                                break;
                            }
                        }
                    },
                    PRIV: function e(t) {
                        var i;
                        for(i = 0; i < t.data.length; i++){
                            if (t.data[i] === 0) {
                                t.owner = e4(t.data, 0, i);
                                break;
                            }
                        }
                        t.privateData = t.data.subarray(i + 1);
                        t.data = t.privateData;
                    }
                }, eG;
                eG = function e(t) {
                    var i = {
                        descriptor: t && t.descriptor
                    }, r = 0, n = [], a = 0, s;
                    eG.prototype.init.call(this);
                    this.dispatchType = e1.METADATA_STREAM_TYPE.toString(16);
                    if (i.descriptor) {
                        for(s = 0; s < i.descriptor.length; s++){
                            this.dispatchType += ("00" + i.descriptor[s].toString(16)).slice(-2);
                        }
                    }
                    this.push = function(e) {
                        var t, i, s, o, u, l;
                        if (e.type !== "timed-metadata") {
                            return;
                        }
                        if (e.dataAlignmentIndicator) {
                            a = 0;
                            n.length = 0;
                        }
                        if (n.length === 0 && (e.data.length < 10 || e.data[0] !== "I".charCodeAt(0) || e.data[1] !== "D".charCodeAt(0) || e.data[2] !== "3".charCodeAt(0))) {
                            this.trigger("log", {
                                level: "warn",
                                message: "Skipping unrecognized metadata packet"
                            });
                            return;
                        }
                        n.push(e);
                        a += e.data.byteLength;
                        if (n.length === 1) {
                            r = e5(e.data.subarray(6, 10));
                            r += 10;
                        }
                        if (a < r) {
                            return;
                        }
                        t = {
                            data: new Uint8Array(r),
                            frames: [],
                            pts: n[0].pts,
                            dts: n[0].dts
                        };
                        for(u = 0; u < r;){
                            t.data.set(n[0].data.subarray(0, r - u), u);
                            u += n[0].data.byteLength;
                            a -= n[0].data.byteLength;
                            n.shift();
                        }
                        i = 10;
                        if (t.data[5] & 0x40) {
                            i += 4;
                            i += e5(t.data.subarray(10, 14));
                            r -= e5(t.data.subarray(16, 20));
                        }
                        do {
                            s = e5(t.data.subarray(i + 4, i + 8));
                            if (s < 1) {
                                this.trigger("log", {
                                    level: "warn",
                                    message: "Malformed ID3 frame encountered. Skipping metadata parsing."
                                });
                                return;
                            }
                            l = String.fromCharCode(t.data[i], t.data[i + 1], t.data[i + 2], t.data[i + 3]);
                            o = {
                                id: l,
                                data: t.data.subarray(i + 10, i + s + 10)
                            };
                            o.key = o.id;
                            if (ez[o.id]) {
                                ez[o.id](o);
                                if (o.owner === "com.apple.streaming.transportStreamTimestamp") {
                                    var d = o.data, c = ((d[3] & 0x01) << 30) | (d[4] << 22) | (d[5] << 14) | (d[6] << 6) | (d[7] >>> 2);
                                    c *= 4;
                                    c += d[7] & 0x03;
                                    o.timeStamp = c;
                                    if (t.pts === undefined && t.dts === undefined) {
                                        t.pts = o.timeStamp;
                                        t.dts = o.timeStamp;
                                    }
                                    this.trigger("timestamp", o);
                                }
                            }
                            t.frames.push(o);
                            i += 10;
                            i += s;
                        }while (i < r)
                        this.trigger("data", t);
                    };
                };
                eG.prototype = new t();
                var eK = eG;
                var eZ = eV.TimestampRolloverStream;
                var eQ, e7, eX;
                var eY = 188, e9 = 0x47;
                eQ = function e() {
                    var t = new Uint8Array(eY), i = 0;
                    eQ.prototype.init.call(this);
                    this.push = function(e) {
                        var r = 0, n = eY, a;
                        if (i) {
                            a = new Uint8Array(e.byteLength + i);
                            a.set(t.subarray(0, i));
                            a.set(e, i);
                            i = 0;
                        } else {
                            a = e;
                        }
                        while(n < a.byteLength){
                            if (a[r] === e9 && a[n] === e9) {
                                this.trigger("data", a.subarray(r, n));
                                r += eY;
                                n += eY;
                                continue;
                            }
                            r++;
                            n++;
                        }
                        if (r < a.byteLength) {
                            t.set(a.subarray(r), 0);
                            i = a.byteLength - r;
                        }
                    };
                    this.flush = function() {
                        if (i === eY && t[0] === e9) {
                            this.trigger("data", t);
                            i = 0;
                        }
                        this.trigger("done");
                    };
                    this.endTimeline = function() {
                        this.flush();
                        this.trigger("endedtimeline");
                    };
                    this.reset = function() {
                        i = 0;
                        this.trigger("reset");
                    };
                };
                eQ.prototype = new t();
                e7 = function e() {
                    var t, i, r, n;
                    e7.prototype.init.call(this);
                    n = this;
                    this.packetsWaitingForPmt = [];
                    this.programMapTable = undefined;
                    t = function e(t, n) {
                        var a = 0;
                        if (n.payloadUnitStartIndicator) {
                            a += t[a] + 1;
                        }
                        if (n.type === "pat") {
                            i(t.subarray(a), n);
                        } else {
                            r(t.subarray(a), n);
                        }
                    };
                    i = function e(t, i) {
                        i.section_number = t[7];
                        i.last_section_number = t[8];
                        n.pmtPid = ((t[10] & 0x1f) << 8) | t[11];
                        i.pmtPid = n.pmtPid;
                    };
                    r = function e(t, i) {
                        var r, a, s, o;
                        if (!(t[5] & 0x01)) {
                            return;
                        }
                        n.programMapTable = {
                            video: null,
                            audio: null,
                            "timed-metadata": {}
                        };
                        r = ((t[1] & 0x0f) << 8) | t[2];
                        a = 3 + r - 4;
                        s = ((t[10] & 0x0f) << 8) | t[11];
                        o = 12 + s;
                        while(o < a){
                            var u = t[o];
                            var l = ((t[o + 1] & 0x1f) << 8) | t[o + 2];
                            if (u === e1.H264_STREAM_TYPE && n.programMapTable.video === null) {
                                n.programMapTable.video = l;
                            } else if (u === e1.ADTS_STREAM_TYPE && n.programMapTable.audio === null) {
                                n.programMapTable.audio = l;
                            } else if (u === e1.METADATA_STREAM_TYPE) {
                                n.programMapTable["timed-metadata"][l] = u;
                            }
                            o += (((t[o + 3] & 0x0f) << 8) | t[o + 4]) + 5;
                        }
                        i.programMapTable = n.programMapTable;
                    };
                    this.push = function(e) {
                        var i = {}, r = 4;
                        i.payloadUnitStartIndicator = !!(e[1] & 0x40);
                        i.pid = e[1] & 0x1f;
                        i.pid <<= 8;
                        i.pid |= e[2];
                        if ((e[3] & 0x30) >>> 4 > 0x01) {
                            r += e[r] + 1;
                        }
                        if (i.pid === 0) {
                            i.type = "pat";
                            t(e.subarray(r), i);
                            this.trigger("data", i);
                        } else if (i.pid === this.pmtPid) {
                            i.type = "pmt";
                            t(e.subarray(r), i);
                            this.trigger("data", i);
                            while(this.packetsWaitingForPmt.length){
                                this.processPes_.apply(this, this.packetsWaitingForPmt.shift());
                            }
                        } else if (this.programMapTable === undefined) {
                            this.packetsWaitingForPmt.push([
                                e,
                                r,
                                i, 
                            ]);
                        } else {
                            this.processPes_(e, r, i);
                        }
                    };
                    this.processPes_ = function(e, t, i) {
                        if (i.pid === this.programMapTable.video) {
                            i.streamType = e1.H264_STREAM_TYPE;
                        } else if (i.pid === this.programMapTable.audio) {
                            i.streamType = e1.ADTS_STREAM_TYPE;
                        } else {
                            i.streamType = this.programMapTable["timed-metadata"][i.pid];
                        }
                        i.type = "pes";
                        i.data = e.subarray(t);
                        this.trigger("data", i);
                    };
                };
                e7.prototype = new t();
                e7.STREAM_TYPES = {
                    h264: 0x1b,
                    adts: 0x0f
                };
                eX = function e() {
                    var t = this, i = false, r = {
                        data: [],
                        size: 0
                    }, n = {
                        data: [],
                        size: 0
                    }, a = {
                        data: [],
                        size: 0
                    }, s, o = function e(t, i) {
                        var r;
                        var n = (t[0] << 16) | (t[1] << 8) | t[2];
                        i.data = new Uint8Array();
                        if (n !== 1) {
                            return;
                        }
                        i.packetLength = 6 + ((t[4] << 8) | t[5]);
                        i.dataAlignmentIndicator = (t[6] & 0x04) !== 0;
                        r = t[7];
                        if (r & 0xc0) {
                            i.pts = ((t[9] & 0x0e) << 27) | ((t[10] & 0xff) << 20) | ((t[11] & 0xfe) << 12) | ((t[12] & 0xff) << 5) | ((t[13] & 0xfe) >>> 3);
                            i.pts *= 4;
                            i.pts += (t[13] & 0x06) >>> 1;
                            i.dts = i.pts;
                            if (r & 0x40) {
                                i.dts = ((t[14] & 0x0e) << 27) | ((t[15] & 0xff) << 20) | ((t[16] & 0xfe) << 12) | ((t[17] & 0xff) << 5) | ((t[18] & 0xfe) >>> 3);
                                i.dts *= 4;
                                i.dts += (t[18] & 0x06) >>> 1;
                            }
                        }
                        i.data = t.subarray(9 + t[8]);
                    }, u = function e(i, r, n) {
                        var a = new Uint8Array(i.size), s = {
                            type: r
                        }, u = 0, l = 0, d = false, c;
                        if (!i.data.length || i.size < 9) {
                            return;
                        }
                        s.trackId = i.data[0].pid;
                        for(u = 0; u < i.data.length; u++){
                            c = i.data[u];
                            a.set(c.data, l);
                            l += c.data.byteLength;
                        }
                        o(a, s);
                        d = r === "video" || s.packetLength <= i.size;
                        if (n || d) {
                            i.size = 0;
                            i.data.length = 0;
                        }
                        if (d) {
                            t.trigger("data", s);
                        }
                    };
                    eX.prototype.init.call(this);
                    this.push = function(e) {
                        ({
                            pat: function e() {},
                            pes: function t() {
                                var i, s;
                                switch(e.streamType){
                                    case e1.H264_STREAM_TYPE:
                                        i = r;
                                        s = "video";
                                        break;
                                    case e1.ADTS_STREAM_TYPE:
                                        i = n;
                                        s = "audio";
                                        break;
                                    case e1.METADATA_STREAM_TYPE:
                                        i = a;
                                        s = "timed-metadata";
                                        break;
                                    default:
                                        return;
                                }
                                if (e.payloadUnitStartIndicator) {
                                    u(i, s, true);
                                }
                                i.data.push(e);
                                i.size += e.data.byteLength;
                            },
                            pmt: function r() {
                                var n = {
                                    type: "metadata",
                                    tracks: []
                                };
                                s = e.programMapTable;
                                if (s.video !== null) {
                                    n.tracks.push({
                                        timelineStartInfo: {
                                            baseMediaDecodeTime: 0
                                        },
                                        id: +s.video,
                                        codec: "avc",
                                        type: "video"
                                    });
                                }
                                if (s.audio !== null) {
                                    n.tracks.push({
                                        timelineStartInfo: {
                                            baseMediaDecodeTime: 0
                                        },
                                        id: +s.audio,
                                        codec: "adts",
                                        type: "audio"
                                    });
                                }
                                i = true;
                                t.trigger("data", n);
                            }
                        }[e.type]());
                    };
                    this.reset = function() {
                        r.size = 0;
                        r.data.length = 0;
                        n.size = 0;
                        n.data.length = 0;
                        this.trigger("reset");
                    };
                    this.flushStreams_ = function() {
                        u(r, "video");
                        u(n, "audio");
                        u(a, "timed-metadata");
                    };
                    this.flush = function() {
                        if (!i && s) {
                            var e = {
                                type: "metadata",
                                tracks: []
                            };
                            if (s.video !== null) {
                                e.tracks.push({
                                    timelineStartInfo: {
                                        baseMediaDecodeTime: 0
                                    },
                                    id: +s.video,
                                    codec: "avc",
                                    type: "video"
                                });
                            }
                            if (s.audio !== null) {
                                e.tracks.push({
                                    timelineStartInfo: {
                                        baseMediaDecodeTime: 0
                                    },
                                    id: +s.audio,
                                    codec: "adts",
                                    type: "audio"
                                });
                            }
                            t.trigger("data", e);
                        }
                        i = false;
                        this.flushStreams_();
                        this.trigger("done");
                    };
                };
                eX.prototype = new t();
                var eJ = {
                    PAT_PID: 0x0000,
                    MP2T_PACKET_LENGTH: eY,
                    TransportPacketStream: eQ,
                    TransportParseStream: e7,
                    ElementaryStream: eX,
                    TimestampRolloverStream: eZ,
                    CaptionStream: eN.CaptionStream,
                    Cea608Stream: eN.Cea608Stream,
                    Cea708Stream: eN.Cea708Stream,
                    MetadataStream: eK
                };
                for(var te in e1){
                    if (e1.hasOwnProperty(te)) {
                        eJ[te] = e1[te];
                    }
                }
                var tt = eJ;
                var ti = ed.ONE_SECOND_IN_TS;
                var tr;
                var tn = [
                    96000,
                    88200,
                    64000,
                    48000,
                    44100,
                    32000,
                    24000,
                    22050,
                    16000,
                    12000,
                    11025,
                    8000,
                    7350, 
                ];
                tr = function e(t) {
                    var i, r = 0;
                    tr.prototype.init.call(this);
                    this.skipWarn_ = function(e, t) {
                        this.trigger("log", {
                            level: "warn",
                            message: "adts skiping bytes " + e + " to " + t + " in frame " + r + " outside syncword"
                        });
                    };
                    this.push = function(e) {
                        var n = 0, a, s, o, u, l;
                        if (!t) {
                            r = 0;
                        }
                        if (e.type !== "audio") {
                            return;
                        }
                        if (i && i.length) {
                            o = i;
                            i = new Uint8Array(o.byteLength + e.data.byteLength);
                            i.set(o);
                            i.set(e.data, o.byteLength);
                        } else {
                            i = e.data;
                        }
                        var d;
                        while(n + 7 < i.length){
                            if (i[n] !== 0xff || (i[n + 1] & 0xf6) !== 0xf0) {
                                if (typeof d !== "number") {
                                    d = n;
                                }
                                n++;
                                continue;
                            }
                            if (typeof d === "number") {
                                this.skipWarn_(d, n);
                                d = null;
                            }
                            s = (~i[n + 1] & 0x01) * 2;
                            a = ((i[n + 3] & 0x03) << 11) | (i[n + 4] << 3) | ((i[n + 5] & 0xe0) >> 5);
                            u = ((i[n + 6] & 0x03) + 1) * 1024;
                            l = (u * ti) / tn[(i[n + 2] & 0x3c) >>> 2];
                            if (i.byteLength - n < a) {
                                break;
                            }
                            this.trigger("data", {
                                pts: e.pts + r * l,
                                dts: e.dts + r * l,
                                sampleCount: u,
                                audioobjecttype: ((i[n + 2] >>> 6) & 0x03) + 1,
                                channelcount: ((i[n + 2] & 1) << 2) | ((i[n + 3] & 0xc0) >>> 6),
                                samplerate: tn[(i[n + 2] & 0x3c) >>> 2],
                                samplingfrequencyindex: (i[n + 2] & 0x3c) >>> 2,
                                samplesize: 16,
                                data: i.subarray(n + 7 + s, n + a)
                            });
                            r++;
                            n += a;
                        }
                        if (typeof d === "number") {
                            this.skipWarn_(d, n);
                            d = null;
                        }
                        i = i.subarray(n);
                    };
                    this.flush = function() {
                        r = 0;
                        this.trigger("done");
                    };
                    this.reset = function() {
                        i = void 0;
                        this.trigger("reset");
                    };
                    this.endTimeline = function() {
                        i = void 0;
                        this.trigger("endedtimeline");
                    };
                };
                tr.prototype = new t();
                var ta = tr;
                var ts;
                ts = function e(t) {
                    var i = t.byteLength, r = 0, n = 0;
                    this.length = function() {
                        return 8 * i;
                    };
                    this.bitsAvailable = function() {
                        return (8 * i + n);
                    };
                    this.loadWord = function() {
                        var e = t.byteLength - i, a = new Uint8Array(4), s = Math.min(4, i);
                        if (s === 0) {
                            throw new Error("no bytes available");
                        }
                        a.set(t.subarray(e, e + s));
                        r = new DataView(a.buffer).getUint32(0);
                        n = s * 8;
                        i -= s;
                    };
                    this.skipBits = function(e) {
                        var t;
                        if (n > e) {
                            r <<= e;
                            n -= e;
                        } else {
                            e -= n;
                            t = Math.floor(e / 8);
                            e -= t * 8;
                            i -= t;
                            this.loadWord();
                            r <<= e;
                            n -= e;
                        }
                    };
                    this.readBits = function(e) {
                        var t = Math.min(n, e), a = r >>> (32 - t);
                        n -= t;
                        if (n > 0) {
                            r <<= t;
                        } else if (i > 0) {
                            this.loadWord();
                        }
                        t = e - t;
                        if (t > 0) {
                            return (a << t) | this.readBits(t);
                        }
                        return a;
                    };
                    this.skipLeadingZeros = function() {
                        var e;
                        for(e = 0; e < n; ++e){
                            if ((r & (0x80000000 >>> e)) !== 0) {
                                r <<= e;
                                n -= e;
                                return e;
                            }
                        }
                        this.loadWord();
                        return e + this.skipLeadingZeros();
                    };
                    this.skipUnsignedExpGolomb = function() {
                        this.skipBits(1 + this.skipLeadingZeros());
                    };
                    this.skipExpGolomb = function() {
                        this.skipBits(1 + this.skipLeadingZeros());
                    };
                    this.readUnsignedExpGolomb = function() {
                        var e = this.skipLeadingZeros();
                        return this.readBits(e + 1) - 1;
                    };
                    this.readExpGolomb = function() {
                        var e = this.readUnsignedExpGolomb();
                        if (0x01 & e) {
                            return (1 + e) >>> 1;
                        }
                        return -1 * (e >>> 1);
                    };
                    this.readBoolean = function() {
                        return this.readBits(1) === 1;
                    };
                    this.readUnsignedByte = function() {
                        return this.readBits(8);
                    };
                    this.loadWord();
                };
                var to = ts;
                var tu, tl;
                var td;
                tl = function e() {
                    var t = 0, i, r;
                    tl.prototype.init.call(this);
                    this.push = function(e) {
                        var n;
                        if (!r) {
                            r = e.data;
                        } else {
                            n = new Uint8Array(r.byteLength + e.data.byteLength);
                            n.set(r);
                            n.set(e.data, r.byteLength);
                            r = n;
                        }
                        var a = r.byteLength;
                        for(; t < a - 3; t++){
                            if (r[t + 2] === 1) {
                                i = t + 5;
                                break;
                            }
                        }
                        while(i < a){
                            switch(r[i]){
                                case 0:
                                    if (r[i - 1] !== 0) {
                                        i += 2;
                                        break;
                                    } else if (r[i - 2] !== 0) {
                                        i++;
                                        break;
                                    }
                                    if (t + 3 !== i - 2) {
                                        this.trigger("data", r.subarray(t + 3, i - 2));
                                    }
                                    do {
                                        i++;
                                    }while (r[i] !== 1 && i < a)
                                    t = i - 2;
                                    i += 3;
                                    break;
                                case 1:
                                    if (r[i - 1] !== 0 || r[i - 2] !== 0) {
                                        i += 3;
                                        break;
                                    }
                                    this.trigger("data", r.subarray(t + 3, i - 2));
                                    t = i - 2;
                                    i += 3;
                                    break;
                                default:
                                    i += 3;
                                    break;
                            }
                        }
                        r = r.subarray(t);
                        i -= t;
                        t = 0;
                    };
                    this.reset = function() {
                        r = null;
                        t = 0;
                        this.trigger("reset");
                    };
                    this.flush = function() {
                        if (r && r.byteLength > 3) {
                            this.trigger("data", r.subarray(t + 3));
                        }
                        r = null;
                        t = 0;
                        this.trigger("done");
                    };
                    this.endTimeline = function() {
                        this.flush();
                        this.trigger("endedtimeline");
                    };
                };
                tl.prototype = new t();
                td = {
                    100: true,
                    110: true,
                    122: true,
                    244: true,
                    44: true,
                    83: true,
                    86: true,
                    118: true,
                    128: true,
                    138: true,
                    139: true,
                    134: true
                };
                tu = function e() {
                    var t = new tl(), i, r, n, a, s, o, u;
                    tu.prototype.init.call(this);
                    i = this;
                    this.push = function(e) {
                        if (e.type !== "video") {
                            return;
                        }
                        r = e.trackId;
                        n = e.pts;
                        a = e.dts;
                        t.push(e);
                    };
                    t.on("data", function(e) {
                        var t = {
                            trackId: r,
                            pts: n,
                            dts: a,
                            data: e,
                            nalUnitTypeCode: e[0] & 0x1f
                        };
                        switch(t.nalUnitTypeCode){
                            case 0x05:
                                t.nalUnitType = "slice_layer_without_partitioning_rbsp_idr";
                                break;
                            case 0x06:
                                t.nalUnitType = "sei_rbsp";
                                t.escapedRBSP = s(e.subarray(1));
                                break;
                            case 0x07:
                                t.nalUnitType = "seq_parameter_set_rbsp";
                                t.escapedRBSP = s(e.subarray(1));
                                t.config = o(t.escapedRBSP);
                                break;
                            case 0x08:
                                t.nalUnitType = "pic_parameter_set_rbsp";
                                break;
                            case 0x09:
                                t.nalUnitType = "access_unit_delimiter_rbsp";
                                break;
                        }
                        i.trigger("data", t);
                    });
                    t.on("done", function() {
                        i.trigger("done");
                    });
                    t.on("partialdone", function() {
                        i.trigger("partialdone");
                    });
                    t.on("reset", function() {
                        i.trigger("reset");
                    });
                    t.on("endedtimeline", function() {
                        i.trigger("endedtimeline");
                    });
                    this.flush = function() {
                        t.flush();
                    };
                    this.partialFlush = function() {
                        t.partialFlush();
                    };
                    this.reset = function() {
                        t.reset();
                    };
                    this.endTimeline = function() {
                        t.endTimeline();
                    };
                    u = function e(t, i) {
                        var r = 8, n = 8, a, s;
                        for(a = 0; a < t; a++){
                            if (n !== 0) {
                                s = i.readExpGolomb();
                                n = (r + s + 256) % 256;
                            }
                            r = n === 0 ? r : n;
                        }
                    };
                    s = function e(t) {
                        var i = t.byteLength, r = [], n = 1, a, s;
                        while(n < i - 2){
                            if (t[n] === 0 && t[n + 1] === 0 && t[n + 2] === 0x03) {
                                r.push(n + 2);
                                n += 2;
                            } else {
                                n++;
                            }
                        }
                        if (r.length === 0) {
                            return t;
                        }
                        a = i - r.length;
                        s = new Uint8Array(a);
                        var o = 0;
                        for(n = 0; n < a; o++, n++){
                            if (o === r[0]) {
                                o++;
                                r.shift();
                            }
                            s[n] = t[o];
                        }
                        return s;
                    };
                    o = function e(t) {
                        var i = 0, r = 0, n = 0, a = 0, s, o, l, d, c, h, f, p, m, v, g, $ = [
                            1,
                            1
                        ], y, T;
                        s = new to(t);
                        o = s.readUnsignedByte();
                        d = s.readUnsignedByte();
                        l = s.readUnsignedByte();
                        s.skipUnsignedExpGolomb();
                        if (td[o]) {
                            c = s.readUnsignedExpGolomb();
                            if (c === 3) {
                                s.skipBits(1);
                            }
                            s.skipUnsignedExpGolomb();
                            s.skipUnsignedExpGolomb();
                            s.skipBits(1);
                            if (s.readBoolean()) {
                                g = c !== 3 ? 8 : 12;
                                for(T = 0; T < g; T++){
                                    if (s.readBoolean()) {
                                        if (T < 6) {
                                            u(16, s);
                                        } else {
                                            u(64, s);
                                        }
                                    }
                                }
                            }
                        }
                        s.skipUnsignedExpGolomb();
                        h = s.readUnsignedExpGolomb();
                        if (h === 0) {
                            s.readUnsignedExpGolomb();
                        } else if (h === 1) {
                            s.skipBits(1);
                            s.skipExpGolomb();
                            s.skipExpGolomb();
                            f = s.readUnsignedExpGolomb();
                            for(T = 0; T < f; T++){
                                s.skipExpGolomb();
                            }
                        }
                        s.skipUnsignedExpGolomb();
                        s.skipBits(1);
                        p = s.readUnsignedExpGolomb();
                        m = s.readUnsignedExpGolomb();
                        v = s.readBits(1);
                        if (v === 0) {
                            s.skipBits(1);
                        }
                        s.skipBits(1);
                        if (s.readBoolean()) {
                            i = s.readUnsignedExpGolomb();
                            r = s.readUnsignedExpGolomb();
                            n = s.readUnsignedExpGolomb();
                            a = s.readUnsignedExpGolomb();
                        }
                        if (s.readBoolean()) {
                            if (s.readBoolean()) {
                                y = s.readUnsignedByte();
                                switch(y){
                                    case 1:
                                        $ = [
                                            1,
                                            1
                                        ];
                                        break;
                                    case 2:
                                        $ = [
                                            12,
                                            11
                                        ];
                                        break;
                                    case 3:
                                        $ = [
                                            10,
                                            11
                                        ];
                                        break;
                                    case 4:
                                        $ = [
                                            16,
                                            11
                                        ];
                                        break;
                                    case 5:
                                        $ = [
                                            40,
                                            33
                                        ];
                                        break;
                                    case 6:
                                        $ = [
                                            24,
                                            11
                                        ];
                                        break;
                                    case 7:
                                        $ = [
                                            20,
                                            11
                                        ];
                                        break;
                                    case 8:
                                        $ = [
                                            32,
                                            11
                                        ];
                                        break;
                                    case 9:
                                        $ = [
                                            80,
                                            33
                                        ];
                                        break;
                                    case 10:
                                        $ = [
                                            18,
                                            11
                                        ];
                                        break;
                                    case 11:
                                        $ = [
                                            15,
                                            11
                                        ];
                                        break;
                                    case 12:
                                        $ = [
                                            64,
                                            33
                                        ];
                                        break;
                                    case 13:
                                        $ = [
                                            160,
                                            99
                                        ];
                                        break;
                                    case 14:
                                        $ = [
                                            4,
                                            3
                                        ];
                                        break;
                                    case 15:
                                        $ = [
                                            3,
                                            2
                                        ];
                                        break;
                                    case 16:
                                        $ = [
                                            2,
                                            1
                                        ];
                                        break;
                                    case 255:
                                        {
                                            $ = [
                                                (s.readUnsignedByte() << 8) | s.readUnsignedByte(),
                                                (s.readUnsignedByte() << 8) | s.readUnsignedByte(), 
                                            ];
                                            break;
                                        }
                                }
                                if ($) {
                                    $[0] / $[1];
                                }
                            }
                        }
                        return {
                            profileIdc: o,
                            levelIdc: l,
                            profileCompatibility: d,
                            width: (p + 1) * 16 - i * 2 - r * 2,
                            height: (2 - v) * (m + 1) * 16 - n * 2 - a * 2,
                            sarRatio: $
                        };
                    };
                };
                tu.prototype = new t();
                var tc = {
                    H264Stream: tu,
                    NalByteStream: tl
                };
                var th = [
                    96000,
                    88200,
                    64000,
                    48000,
                    44100,
                    32000,
                    24000,
                    22050,
                    16000,
                    12000,
                    11025,
                    8000,
                    7350, 
                ];
                var tf = function e(t, i) {
                    var r = (t[i + 6] << 21) | (t[i + 7] << 14) | (t[i + 8] << 7) | t[i + 9], n = t[i + 5], a = (n & 16) >> 4;
                    r = r >= 0 ? r : 0;
                    if (a) {
                        return r + 20;
                    }
                    return r + 10;
                };
                var tp = function e(t, i) {
                    if (t.length - i < 10 || t[i] !== "I".charCodeAt(0) || t[i + 1] !== "D".charCodeAt(0) || t[i + 2] !== "3".charCodeAt(0)) {
                        return i;
                    }
                    i += tf(t, i);
                    return e(t, i);
                };
                var tm = function e(t) {
                    var i = tp(t, 0);
                    return (t.length >= i + 2 && (t[i] & 0xff) === 0xff && (t[i + 1] & 0xf0) === 0xf0 && (t[i + 1] & 0x16) === 0x10);
                };
                var tv = function e(t) {
                    return ((t[0] << 21) | (t[1] << 14) | (t[2] << 7) | t[3]);
                };
                var tg = function e(t, i, r) {
                    var n, a = "";
                    for(n = i; n < r; n++){
                        a += "%" + ("00" + t[n].toString(16)).slice(-2);
                    }
                    return a;
                };
                var t$ = function e(t, i, r) {
                    return unescape(tg(t, i, r));
                };
                var t8 = function e(t, i) {
                    var r = (t[i + 5] & 0xe0) >> 5, n = t[i + 4] << 3, a = t[i + 3] & (0x3 << 11);
                    return a | n | r;
                };
                var ty = function e(t, i) {
                    if (t[i] === "I".charCodeAt(0) && t[i + 1] === "D".charCodeAt(0) && t[i + 2] === "3".charCodeAt(0)) {
                        return "timed-metadata";
                    } else if (t[i] & (0xff === 0xff) && (t[i + 1] & 0xf0) === 0xf0) {
                        return "audio";
                    }
                    return null;
                };
                var tT = function e(t) {
                    var i = 0;
                    while(i + 5 < t.length){
                        if (t[i] !== 0xff || (t[i + 1] & 0xf6) !== 0xf0) {
                            i++;
                            continue;
                        }
                        return th[(t[i + 2] & 0x3c) >>> 2];
                    }
                    return null;
                };
                var tb = function e(t) {
                    var i, r, n, a;
                    i = 10;
                    if (t[5] & 0x40) {
                        i += 4;
                        i += tv(t.subarray(10, 14));
                    }
                    do {
                        r = tv(t.subarray(i + 4, i + 8));
                        if (r < 1) {
                            return null;
                        }
                        a = String.fromCharCode(t[i], t[i + 1], t[i + 2], t[i + 3]);
                        if (a === "PRIV") {
                            n = t.subarray(i + 10, i + r + 10);
                            for(var s = 0; s < n.byteLength; s++){
                                if (n[s] === 0) {
                                    var o = t$(n, 0, s);
                                    if (o === "com.apple.streaming.transportStreamTimestamp") {
                                        var u = n.subarray(s + 1);
                                        var l = ((u[3] & 0x01) << 30) | (u[4] << 22) | (u[5] << 14) | (u[6] << 6) | (u[7] >>> 2);
                                        l *= 4;
                                        l += u[7] & 0x03;
                                        return l;
                                    }
                                    break;
                                }
                            }
                        }
                        i += 10;
                        i += r;
                    }while (i < t.byteLength)
                    return null;
                };
                var tx = {
                    isLikelyAacData: tm,
                    parseId3TagSize: tf,
                    parseAdtsSize: t8,
                    parseType: ty,
                    parseSampleRate: tT,
                    parseAacTimestamp: tb
                };
                var tS;
                tS = function e() {
                    var t = new Uint8Array(), i = 0;
                    tS.prototype.init.call(this);
                    this.setTimestamp = function(e) {
                        i = e;
                    };
                    this.push = function(e) {
                        var r = 0, n = 0, a, s, o, u;
                        if (t.length) {
                            u = t.length;
                            t = new Uint8Array(e.byteLength + u);
                            t.set(t.subarray(0, u));
                            t.set(e, u);
                        } else {
                            t = e;
                        }
                        while(t.length - n >= 3){
                            if (t[n] === "I".charCodeAt(0) && t[n + 1] === "D".charCodeAt(0) && t[n + 2] === "3".charCodeAt(0)) {
                                if (t.length - n < 10) {
                                    break;
                                }
                                r = tx.parseId3TagSize(t, n);
                                if (n + r > t.length) {
                                    break;
                                }
                                s = {
                                    type: "timed-metadata",
                                    data: t.subarray(n, n + r)
                                };
                                this.trigger("data", s);
                                n += r;
                                continue;
                            } else if ((t[n] & 0xff) === 0xff && (t[n + 1] & 0xf0) === 0xf0) {
                                if (t.length - n < 7) {
                                    break;
                                }
                                r = tx.parseAdtsSize(t, n);
                                if (n + r > t.length) {
                                    break;
                                }
                                o = {
                                    type: "audio",
                                    data: t.subarray(n, n + r),
                                    pts: i,
                                    dts: i
                                };
                                this.trigger("data", o);
                                n += r;
                                continue;
                            }
                            n++;
                        }
                        a = t.length - n;
                        if (a > 0) {
                            t = t.subarray(n);
                        } else {
                            t = new Uint8Array();
                        }
                    };
                    this.reset = function() {
                        t = new Uint8Array();
                        this.trigger("reset");
                    };
                    this.endTimeline = function() {
                        t = new Uint8Array();
                        this.trigger("endedtimeline");
                    };
                };
                tS.prototype = new t();
                var tk = tS;
                var tC = [
                    "audioobjecttype",
                    "channelcount",
                    "samplerate",
                    "samplingfrequencyindex",
                    "samplesize", 
                ];
                var tE = tC;
                var tw = [
                    "width",
                    "height",
                    "profileIdc",
                    "levelIdc",
                    "profileCompatibility",
                    "sarRatio", 
                ];
                var tI = tw;
                var tP = tc.H264Stream;
                var t_ = tx.isLikelyAacData;
                var tL = ed.ONE_SECOND_IN_TS;
                var tA, tD, tO, tR;
                var tM = function e(t, i) {
                    i.stream = t;
                    this.trigger("log", i);
                };
                var t0 = function e(t, i) {
                    var r = Object.keys(i);
                    for(var n = 0; n < r.length; n++){
                        var a = r[n];
                        if (a === "headOfPipeline" || !i[a].on) {
                            continue;
                        }
                        i[a].on("log", tM.bind(t, a));
                    }
                };
                var tU = function e(t, i) {
                    var r;
                    if (t.length !== i.length) {
                        return false;
                    }
                    for(r = 0; r < t.length; r++){
                        if (t[r] !== i[r]) {
                            return false;
                        }
                    }
                    return true;
                };
                var tB = function e(t, i, r, n, a, s) {
                    var o = r - i, u = n - i, l = a - r;
                    return {
                        start: {
                            dts: t,
                            pts: t + o
                        },
                        end: {
                            dts: t + u,
                            pts: t + l
                        },
                        prependedContentDuration: s,
                        baseMediaDecodeTime: t
                    };
                };
                tD = function e(t, i) {
                    var r = [], n, a = 0, s = 0, o = Infinity;
                    i = i || {};
                    n = i.firstSequenceNumber || 0;
                    tD.prototype.init.call(this);
                    this.push = function(e) {
                        eT.collectDtsInfo(t, e);
                        if (t) {
                            tE.forEach(function(i) {
                                t[i] = e[i];
                            });
                        }
                        r.push(e);
                    };
                    this.setEarliestDts = function(e) {
                        a = e;
                    };
                    this.setVideoBaseMediaDecodeTime = function(e) {
                        o = e;
                    };
                    this.setAudioAppendStart = function(e) {
                        s = e;
                    };
                    this.flush = function() {
                        var e, u, l, d, c, h, f;
                        if (r.length === 0) {
                            this.trigger("done", "AudioSegmentStream");
                            return;
                        }
                        e = ev.trimAdtsFramesByEarliestDts(r, t, a);
                        t.baseMediaDecodeTime = eT.calculateTrackBaseMediaDecodeTime(t, i.keepOriginalTimestamps);
                        f = ev.prefixWithSilence(t, e, s, o);
                        t.samples = ev.generateSampleTable(e);
                        l = F.mdat(ev.concatenateFrameData(e));
                        r = [];
                        u = F.moof(n, [
                            t
                        ]);
                        d = new Uint8Array(u.byteLength + l.byteLength);
                        n++;
                        d.set(u);
                        d.set(l, u.byteLength);
                        eT.clearDtsInfo(t);
                        c = Math.ceil((tL * 1024) / t.samplerate);
                        if (e.length) {
                            h = e.length * c;
                            this.trigger("segmentTimingInfo", tB(ed.audioTsToVideoTs(t.baseMediaDecodeTime, t.samplerate), e[0].dts, e[0].pts, e[0].dts + h, e[0].pts + h, f || 0));
                            this.trigger("timingInfo", {
                                start: e[0].pts,
                                end: e[0].pts + h
                            });
                        }
                        this.trigger("data", {
                            track: t,
                            boxes: d
                        });
                        this.trigger("done", "AudioSegmentStream");
                    };
                    this.reset = function() {
                        eT.clearDtsInfo(t);
                        r = [];
                        this.trigger("reset");
                    };
                };
                tD.prototype = new t();
                tA = function e(t, i) {
                    var r, n = [], a = [], s, o;
                    i = i || {};
                    r = i.firstSequenceNumber || 0;
                    tA.prototype.init.call(this);
                    delete t.minPTS;
                    this.gopCache_ = [];
                    this.push = function(e) {
                        eT.collectDtsInfo(t, e);
                        if (e.nalUnitType === "seq_parameter_set_rbsp" && !s) {
                            s = e.config;
                            t.sps = [
                                e.data
                            ];
                            tI.forEach(function(e) {
                                t[e] = s[e];
                            }, this);
                        }
                        if (e.nalUnitType === "pic_parameter_set_rbsp" && !o) {
                            o = e.data;
                            t.pps = [
                                e.data
                            ];
                        }
                        n.push(e);
                    };
                    this.flush = function() {
                        var e, s, o, u, l, d, c = 0, h, f;
                        while(n.length){
                            if (n[0].nalUnitType === "access_unit_delimiter_rbsp") {
                                break;
                            }
                            n.shift();
                        }
                        if (n.length === 0) {
                            this.resetStream_();
                            this.trigger("done", "VideoSegmentStream");
                            return;
                        }
                        e = Z.groupNalsIntoFrames(n);
                        o = Z.groupFramesIntoGops(e);
                        if (!o[0][0].keyFrame) {
                            s = this.getGopForFusion_(n[0], t);
                            if (s) {
                                c = s.duration;
                                o.unshift(s);
                                o.byteLength += s.byteLength;
                                o.nalCount += s.nalCount;
                                o.pts = s.pts;
                                o.dts = s.dts;
                                o.duration += s.duration;
                            } else {
                                o = Z.extendFirstKeyFrame(o);
                            }
                        }
                        if (a.length) {
                            var p;
                            if (i.alignGopsAtEnd) {
                                p = this.alignGopsAtEnd_(o);
                            } else {
                                p = this.alignGopsAtStart_(o);
                            }
                            if (!p) {
                                this.gopCache_.unshift({
                                    gop: o.pop(),
                                    pps: t.pps,
                                    sps: t.sps
                                });
                                this.gopCache_.length = Math.min(6, this.gopCache_.length);
                                n = [];
                                this.resetStream_();
                                this.trigger("done", "VideoSegmentStream");
                                return;
                            }
                            eT.clearDtsInfo(t);
                            o = p;
                        }
                        eT.collectDtsInfo(t, o);
                        t.samples = Z.generateSampleTable(o);
                        l = F.mdat(Z.concatenateNalData(o));
                        t.baseMediaDecodeTime = eT.calculateTrackBaseMediaDecodeTime(t, i.keepOriginalTimestamps);
                        this.trigger("processedGopsInfo", o.map(function(e) {
                            return {
                                pts: e.pts,
                                dts: e.dts,
                                byteLength: e.byteLength
                            };
                        }));
                        h = o[0];
                        f = o[o.length - 1];
                        this.trigger("segmentTimingInfo", tB(t.baseMediaDecodeTime, h.dts, h.pts, f.dts + f.duration, f.pts + f.duration, c));
                        this.trigger("timingInfo", {
                            start: o[0].pts,
                            end: o[o.length - 1].pts + o[o.length - 1].duration
                        });
                        this.gopCache_.unshift({
                            gop: o.pop(),
                            pps: t.pps,
                            sps: t.sps
                        });
                        this.gopCache_.length = Math.min(6, this.gopCache_.length);
                        n = [];
                        this.trigger("baseMediaDecodeTime", t.baseMediaDecodeTime);
                        this.trigger("timelineStartInfo", t.timelineStartInfo);
                        u = F.moof(r, [
                            t
                        ]);
                        d = new Uint8Array(u.byteLength + l.byteLength);
                        r++;
                        d.set(u);
                        d.set(l, u.byteLength);
                        this.trigger("data", {
                            track: t,
                            boxes: d
                        });
                        this.resetStream_();
                        this.trigger("done", "VideoSegmentStream");
                    };
                    this.reset = function() {
                        this.resetStream_();
                        n = [];
                        this.gopCache_.length = 0;
                        a.length = 0;
                        this.trigger("reset");
                    };
                    this.resetStream_ = function() {
                        eT.clearDtsInfo(t);
                        s = undefined;
                        o = undefined;
                    };
                    this.getGopForFusion_ = function(e) {
                        var i = 45000, r = 10000, n = Infinity, a, s, o, u, l;
                        for(l = 0; l < this.gopCache_.length; l++){
                            u = this.gopCache_[l];
                            o = u.gop;
                            if (!(t.pps && tU(t.pps[0], u.pps[0])) || !(t.sps && tU(t.sps[0], u.sps[0]))) {
                                continue;
                            }
                            if (o.dts < t.timelineStartInfo.dts) {
                                continue;
                            }
                            a = e.dts - o.dts - o.duration;
                            if (a >= -r && a <= i) {
                                if (!s || n > a) {
                                    s = u;
                                    n = a;
                                }
                            }
                        }
                        if (s) {
                            return s.gop;
                        }
                        return null;
                    };
                    this.alignGopsAtStart_ = function(e) {
                        var t, i, r, n, s, o, u, l;
                        s = e.byteLength;
                        o = e.nalCount;
                        u = e.duration;
                        t = i = 0;
                        while(t < a.length && i < e.length){
                            r = a[t];
                            n = e[i];
                            if (r.pts === n.pts) {
                                break;
                            }
                            if (n.pts > r.pts) {
                                t++;
                                continue;
                            }
                            i++;
                            s -= n.byteLength;
                            o -= n.nalCount;
                            u -= n.duration;
                        }
                        if (i === 0) {
                            return e;
                        }
                        if (i === e.length) {
                            return null;
                        }
                        l = e.slice(i);
                        l.byteLength = s;
                        l.duration = u;
                        l.nalCount = o;
                        l.pts = l[0].pts;
                        l.dts = l[0].dts;
                        return l;
                    };
                    this.alignGopsAtEnd_ = function(e) {
                        var t, i, r, n, s, o;
                        t = a.length - 1;
                        i = e.length - 1;
                        s = null;
                        o = false;
                        while(t >= 0 && i >= 0){
                            r = a[t];
                            n = e[i];
                            if (r.pts === n.pts) {
                                o = true;
                                break;
                            }
                            if (r.pts > n.pts) {
                                t--;
                                continue;
                            }
                            if (t === a.length - 1) {
                                s = i;
                            }
                            i--;
                        }
                        if (!o && s === null) {
                            return null;
                        }
                        var u;
                        if (o) {
                            u = i;
                        } else {
                            u = s;
                        }
                        if (u === 0) {
                            return e;
                        }
                        var l = e.slice(u);
                        var d = l.reduce(function(e, t) {
                            e.byteLength += t.byteLength;
                            e.duration += t.duration;
                            e.nalCount += t.nalCount;
                            return e;
                        }, {
                            byteLength: 0,
                            duration: 0,
                            nalCount: 0
                        });
                        l.byteLength = d.byteLength;
                        l.duration = d.duration;
                        l.nalCount = d.nalCount;
                        l.pts = l[0].pts;
                        l.dts = l[0].dts;
                        return l;
                    };
                    this.alignGopsWith = function(e) {
                        a = e;
                    };
                };
                tA.prototype = new t();
                tR = function e(t, i) {
                    this.numberOfTracks = 0;
                    this.metadataStream = i;
                    t = t || {};
                    if (typeof t.remux !== "undefined") {
                        this.remuxTracks = !!t.remux;
                    } else {
                        this.remuxTracks = true;
                    }
                    if (typeof t.keepOriginalTimestamps === "boolean") {
                        this.keepOriginalTimestamps = t.keepOriginalTimestamps;
                    } else {
                        this.keepOriginalTimestamps = false;
                    }
                    this.pendingTracks = [];
                    this.videoTrack = null;
                    this.pendingBoxes = [];
                    this.pendingCaptions = [];
                    this.pendingMetadata = [];
                    this.pendingBytes = 0;
                    this.emittedTracks = 0;
                    tR.prototype.init.call(this);
                    this.push = function(e) {
                        if (e.text) {
                            return this.pendingCaptions.push(e);
                        }
                        if (e.frames) {
                            return this.pendingMetadata.push(e);
                        }
                        this.pendingTracks.push(e.track);
                        this.pendingBytes += e.boxes.byteLength;
                        if (e.track.type === "video") {
                            this.videoTrack = e.track;
                            this.pendingBoxes.push(e.boxes);
                        }
                        if (e.track.type === "audio") {
                            this.audioTrack = e.track;
                            this.pendingBoxes.unshift(e.boxes);
                        }
                    };
                };
                tR.prototype = new t();
                tR.prototype.flush = function(e) {
                    var t = 0, i = {
                        captions: [],
                        captionStreams: {},
                        metadata: [],
                        info: {}
                    }, r, n, a, s = 0, o;
                    if (this.pendingTracks.length < this.numberOfTracks) {
                        if (e !== "VideoSegmentStream" && e !== "AudioSegmentStream") {
                            return;
                        } else if (this.remuxTracks) {
                            return;
                        } else if (this.pendingTracks.length === 0) {
                            this.emittedTracks++;
                            if (this.emittedTracks >= this.numberOfTracks) {
                                this.trigger("done");
                                this.emittedTracks = 0;
                            }
                            return;
                        }
                    }
                    if (this.videoTrack) {
                        s = this.videoTrack.timelineStartInfo.pts;
                        tI.forEach(function(e) {
                            i.info[e] = this.videoTrack[e];
                        }, this);
                    } else if (this.audioTrack) {
                        s = this.audioTrack.timelineStartInfo.pts;
                        tE.forEach(function(e) {
                            i.info[e] = this.audioTrack[e];
                        }, this);
                    }
                    if (this.videoTrack || this.audioTrack) {
                        if (this.pendingTracks.length === 1) {
                            i.type = this.pendingTracks[0].type;
                        } else {
                            i.type = "combined";
                        }
                        this.emittedTracks += this.pendingTracks.length;
                        a = F.initSegment(this.pendingTracks);
                        i.initSegment = new Uint8Array(a.byteLength);
                        i.initSegment.set(a);
                        i.data = new Uint8Array(this.pendingBytes);
                        for(o = 0; o < this.pendingBoxes.length; o++){
                            i.data.set(this.pendingBoxes[o], t);
                            t += this.pendingBoxes[o].byteLength;
                        }
                        for(o = 0; o < this.pendingCaptions.length; o++){
                            r = this.pendingCaptions[o];
                            r.startTime = ed.metadataTsToSeconds(r.startPts, s, this.keepOriginalTimestamps);
                            r.endTime = ed.metadataTsToSeconds(r.endPts, s, this.keepOriginalTimestamps);
                            i.captionStreams[r.stream] = true;
                            i.captions.push(r);
                        }
                        for(o = 0; o < this.pendingMetadata.length; o++){
                            n = this.pendingMetadata[o];
                            n.cueTime = ed.metadataTsToSeconds(n.pts, s, this.keepOriginalTimestamps);
                            i.metadata.push(n);
                        }
                        i.metadata.dispatchType = this.metadataStream.dispatchType;
                        this.pendingTracks.length = 0;
                        this.videoTrack = null;
                        this.pendingBoxes.length = 0;
                        this.pendingCaptions.length = 0;
                        this.pendingBytes = 0;
                        this.pendingMetadata.length = 0;
                        this.trigger("data", i);
                        for(o = 0; o < i.captions.length; o++){
                            r = i.captions[o];
                            this.trigger("caption", r);
                        }
                        for(o = 0; o < i.metadata.length; o++){
                            n = i.metadata[o];
                            this.trigger("id3Frame", n);
                        }
                    }
                    if (this.emittedTracks >= this.numberOfTracks) {
                        this.trigger("done");
                        this.emittedTracks = 0;
                    }
                };
                tR.prototype.setRemux = function(e) {
                    this.remuxTracks = e;
                };
                tO = function e(t) {
                    var i = this, r = true, n, a;
                    tO.prototype.init.call(this);
                    t = t || {};
                    this.baseMediaDecodeTime = t.baseMediaDecodeTime || 0;
                    this.transmuxPipeline_ = {};
                    this.setupAacPipeline = function() {
                        var e = {};
                        this.transmuxPipeline_ = e;
                        e.type = "aac";
                        e.metadataStream = new tt.MetadataStream();
                        e.aacStream = new tk();
                        e.audioTimestampRolloverStream = new tt.TimestampRolloverStream("audio");
                        e.timedMetadataTimestampRolloverStream = new tt.TimestampRolloverStream("timed-metadata");
                        e.adtsStream = new ta();
                        e.coalesceStream = new tR(t, e.metadataStream);
                        e.headOfPipeline = e.aacStream;
                        e.aacStream.pipe(e.audioTimestampRolloverStream).pipe(e.adtsStream);
                        e.aacStream.pipe(e.timedMetadataTimestampRolloverStream).pipe(e.metadataStream).pipe(e.coalesceStream);
                        e.metadataStream.on("timestamp", function(t) {
                            e.aacStream.setTimestamp(t.timeStamp);
                        });
                        e.aacStream.on("data", function(r) {
                            if ((r.type !== "timed-metadata" && r.type !== "audio") || e.audioSegmentStream) {
                                return;
                            }
                            a = a || {
                                timelineStartInfo: {
                                    baseMediaDecodeTime: i.baseMediaDecodeTime
                                },
                                codec: "adts",
                                type: "audio"
                            };
                            e.coalesceStream.numberOfTracks++;
                            e.audioSegmentStream = new tD(a, t);
                            e.audioSegmentStream.on("log", i.getLogTrigger_("audioSegmentStream"));
                            e.audioSegmentStream.on("timingInfo", i.trigger.bind(i, "audioTimingInfo"));
                            e.adtsStream.pipe(e.audioSegmentStream).pipe(e.coalesceStream);
                            i.trigger("trackinfo", {
                                hasAudio: !!a,
                                hasVideo: !!n
                            });
                        });
                        e.coalesceStream.on("data", this.trigger.bind(this, "data"));
                        e.coalesceStream.on("done", this.trigger.bind(this, "done"));
                        t0(this, e);
                    };
                    this.setupTsPipeline = function() {
                        var e = {};
                        this.transmuxPipeline_ = e;
                        e.type = "ts";
                        e.metadataStream = new tt.MetadataStream();
                        e.packetStream = new tt.TransportPacketStream();
                        e.parseStream = new tt.TransportParseStream();
                        e.elementaryStream = new tt.ElementaryStream();
                        e.timestampRolloverStream = new tt.TimestampRolloverStream();
                        e.adtsStream = new ta();
                        e.h264Stream = new tP();
                        e.captionStream = new tt.CaptionStream(t);
                        e.coalesceStream = new tR(t, e.metadataStream);
                        e.headOfPipeline = e.packetStream;
                        e.packetStream.pipe(e.parseStream).pipe(e.elementaryStream).pipe(e.timestampRolloverStream);
                        e.timestampRolloverStream.pipe(e.h264Stream);
                        e.timestampRolloverStream.pipe(e.adtsStream);
                        e.timestampRolloverStream.pipe(e.metadataStream).pipe(e.coalesceStream);
                        e.h264Stream.pipe(e.captionStream).pipe(e.coalesceStream);
                        e.elementaryStream.on("data", function(r) {
                            var s;
                            if (r.type === "metadata") {
                                s = r.tracks.length;
                                while(s--){
                                    if (!n && r.tracks[s].type === "video") {
                                        n = r.tracks[s];
                                        n.timelineStartInfo.baseMediaDecodeTime = i.baseMediaDecodeTime;
                                    } else if (!a && r.tracks[s].type === "audio") {
                                        a = r.tracks[s];
                                        a.timelineStartInfo.baseMediaDecodeTime = i.baseMediaDecodeTime;
                                    }
                                }
                                if (n && !e.videoSegmentStream) {
                                    e.coalesceStream.numberOfTracks++;
                                    e.videoSegmentStream = new tA(n, t);
                                    e.videoSegmentStream.on("log", i.getLogTrigger_("videoSegmentStream"));
                                    e.videoSegmentStream.on("timelineStartInfo", function(r) {
                                        if (a && !t.keepOriginalTimestamps) {
                                            a.timelineStartInfo = r;
                                            e.audioSegmentStream.setEarliestDts(r.dts - i.baseMediaDecodeTime);
                                        }
                                    });
                                    e.videoSegmentStream.on("processedGopsInfo", i.trigger.bind(i, "gopInfo"));
                                    e.videoSegmentStream.on("segmentTimingInfo", i.trigger.bind(i, "videoSegmentTimingInfo"));
                                    e.videoSegmentStream.on("baseMediaDecodeTime", function(t) {
                                        if (a) {
                                            e.audioSegmentStream.setVideoBaseMediaDecodeTime(t);
                                        }
                                    });
                                    e.videoSegmentStream.on("timingInfo", i.trigger.bind(i, "videoTimingInfo"));
                                    e.h264Stream.pipe(e.videoSegmentStream).pipe(e.coalesceStream);
                                }
                                if (a && !e.audioSegmentStream) {
                                    e.coalesceStream.numberOfTracks++;
                                    e.audioSegmentStream = new tD(a, t);
                                    e.audioSegmentStream.on("log", i.getLogTrigger_("audioSegmentStream"));
                                    e.audioSegmentStream.on("timingInfo", i.trigger.bind(i, "audioTimingInfo"));
                                    e.audioSegmentStream.on("segmentTimingInfo", i.trigger.bind(i, "audioSegmentTimingInfo"));
                                    e.adtsStream.pipe(e.audioSegmentStream).pipe(e.coalesceStream);
                                }
                                i.trigger("trackinfo", {
                                    hasAudio: !!a,
                                    hasVideo: !!n
                                });
                            }
                        });
                        e.coalesceStream.on("data", this.trigger.bind(this, "data"));
                        e.coalesceStream.on("id3Frame", function(t) {
                            t.dispatchType = e.metadataStream.dispatchType;
                            i.trigger("id3Frame", t);
                        });
                        e.coalesceStream.on("caption", this.trigger.bind(this, "caption"));
                        e.coalesceStream.on("done", this.trigger.bind(this, "done"));
                        t0(this, e);
                    };
                    this.setBaseMediaDecodeTime = function(e) {
                        var i = this.transmuxPipeline_;
                        if (!t.keepOriginalTimestamps) {
                            this.baseMediaDecodeTime = e;
                        }
                        if (a) {
                            a.timelineStartInfo.dts = undefined;
                            a.timelineStartInfo.pts = undefined;
                            eT.clearDtsInfo(a);
                            if (i.audioTimestampRolloverStream) {
                                i.audioTimestampRolloverStream.discontinuity();
                            }
                        }
                        if (n) {
                            if (i.videoSegmentStream) {
                                i.videoSegmentStream.gopCache_ = [];
                            }
                            n.timelineStartInfo.dts = undefined;
                            n.timelineStartInfo.pts = undefined;
                            eT.clearDtsInfo(n);
                            i.captionStream.reset();
                        }
                        if (i.timestampRolloverStream) {
                            i.timestampRolloverStream.discontinuity();
                        }
                    };
                    this.setAudioAppendStart = function(e) {
                        if (a) {
                            this.transmuxPipeline_.audioSegmentStream.setAudioAppendStart(e);
                        }
                    };
                    this.setRemux = function(e) {
                        var i = this.transmuxPipeline_;
                        t.remux = e;
                        if (i && i.coalesceStream) {
                            i.coalesceStream.setRemux(e);
                        }
                    };
                    this.alignGopsWith = function(e) {
                        if (n && this.transmuxPipeline_.videoSegmentStream) {
                            this.transmuxPipeline_.videoSegmentStream.alignGopsWith(e);
                        }
                    };
                    this.getLogTrigger_ = function(e) {
                        var t = this;
                        return function(i) {
                            i.stream = e;
                            t.trigger("log", i);
                        };
                    };
                    this.push = function(e) {
                        if (r) {
                            var t = t_(e);
                            if (t && this.transmuxPipeline_.type !== "aac") {
                                this.setupAacPipeline();
                            } else if (!t && this.transmuxPipeline_.type !== "ts") {
                                this.setupTsPipeline();
                            }
                            r = false;
                        }
                        this.transmuxPipeline_.headOfPipeline.push(e);
                    };
                    this.flush = function() {
                        r = true;
                        this.transmuxPipeline_.headOfPipeline.flush();
                    };
                    this.endTimeline = function() {
                        this.transmuxPipeline_.headOfPipeline.endTimeline();
                    };
                    this.reset = function() {
                        if (this.transmuxPipeline_.headOfPipeline) {
                            this.transmuxPipeline_.headOfPipeline.reset();
                        }
                    };
                    this.resetCaptions = function() {
                        if (this.transmuxPipeline_.captionStream) {
                            this.transmuxPipeline_.captionStream.reset();
                        }
                    };
                };
                tO.prototype = new t();
                var tF = {
                    Transmuxer: tO,
                    VideoSegmentStream: tA,
                    AudioSegmentStream: tD,
                    AUDIO_PROPERTIES: tE,
                    VIDEO_PROPERTIES: tI,
                    generateSegmentTimingInfo: tB
                };
                var tN = function e(t) {
                    return t >>> 0;
                };
                var t1 = function e(t) {
                    return ("00" + t.toString(16)).slice(-2);
                };
                var tj = {
                    toUnsigned: tN,
                    toHexString: t1
                };
                var t2 = function e(t) {
                    var i = "";
                    i += String.fromCharCode(t[0]);
                    i += String.fromCharCode(t[1]);
                    i += String.fromCharCode(t[2]);
                    i += String.fromCharCode(t[3]);
                    return i;
                };
                var tH = t2;
                var t6 = tj.toUnsigned;
                var tq = function e(t, i) {
                    var r = [], n, a, s, o, u;
                    if (!i.length) {
                        return null;
                    }
                    for(n = 0; n < t.byteLength;){
                        a = t6((t[n] << 24) | (t[n + 1] << 16) | (t[n + 2] << 8) | t[n + 3]);
                        s = tH(t.subarray(n + 4, n + 8));
                        o = a > 1 ? n + a : t.byteLength;
                        if (s === i[0]) {
                            if (i.length === 1) {
                                r.push(t.subarray(n + 8, o));
                            } else {
                                u = e(t.subarray(n + 8, o), i.slice(1));
                                if (u.length) {
                                    r = r.concat(u);
                                }
                            }
                        }
                        n = o;
                    }
                    return r;
                };
                var tV = tq;
                var tW = tj.toUnsigned;
                var t3 = function e(t) {
                    var i = {
                        version: t[0],
                        flags: new Uint8Array(t.subarray(1, 4)),
                        baseMediaDecodeTime: tW((t[4] << 24) | (t[5] << 16) | (t[6] << 8) | t[7])
                    };
                    if (i.version === 1) {
                        i.baseMediaDecodeTime *= Math.pow(2, 32);
                        i.baseMediaDecodeTime += tW((t[8] << 24) | (t[9] << 16) | (t[10] << 8) | t[11]);
                    }
                    return i;
                };
                var t4 = t3;
                var t5 = function e(t) {
                    return {
                        isLeading: (t[0] & 0x0c) >>> 2,
                        dependsOn: t[0] & 0x03,
                        isDependedOn: (t[1] & 0xc0) >>> 6,
                        hasRedundancy: (t[1] & 0x30) >>> 4,
                        paddingValue: (t[1] & 0x0e) >>> 1,
                        isNonSyncSample: t[1] & 0x01,
                        degradationPriority: (t[2] << 8) | t[3]
                    };
                };
                var tz = t5;
                var tG = function e(t) {
                    var i = {
                        version: t[0],
                        flags: new Uint8Array(t.subarray(1, 4)),
                        samples: []
                    }, r = new DataView(t.buffer, t.byteOffset, t.byteLength), n = i.flags[2] & 0x01, a = i.flags[2] & 0x04, s = i.flags[1] & 0x01, o = i.flags[1] & 0x02, u = i.flags[1] & 0x04, l = i.flags[1] & 0x08, d = r.getUint32(4), c = 8, h;
                    if (n) {
                        i.dataOffset = r.getInt32(c);
                        c += 4;
                    }
                    if (a && d) {
                        h = {
                            flags: tz(t.subarray(c, c + 4))
                        };
                        c += 4;
                        if (s) {
                            h.duration = r.getUint32(c);
                            c += 4;
                        }
                        if (o) {
                            h.size = r.getUint32(c);
                            c += 4;
                        }
                        if (l) {
                            if (i.version === 1) {
                                h.compositionTimeOffset = r.getInt32(c);
                            } else {
                                h.compositionTimeOffset = r.getUint32(c);
                            }
                            c += 4;
                        }
                        i.samples.push(h);
                        d--;
                    }
                    while(d--){
                        h = {};
                        if (s) {
                            h.duration = r.getUint32(c);
                            c += 4;
                        }
                        if (o) {
                            h.size = r.getUint32(c);
                            c += 4;
                        }
                        if (u) {
                            h.flags = tz(t.subarray(c, c + 4));
                            c += 4;
                        }
                        if (l) {
                            if (i.version === 1) {
                                h.compositionTimeOffset = r.getInt32(c);
                            } else {
                                h.compositionTimeOffset = r.getUint32(c);
                            }
                            c += 4;
                        }
                        i.samples.push(h);
                    }
                    return i;
                };
                var tK = tG;
                var tZ = function e(t) {
                    var i = new DataView(t.buffer, t.byteOffset, t.byteLength), r = {
                        version: t[0],
                        flags: new Uint8Array(t.subarray(1, 4)),
                        trackId: i.getUint32(4)
                    }, n = r.flags[2] & 0x01, a = r.flags[2] & 0x02, s = r.flags[2] & 0x08, o = r.flags[2] & 0x10, u = r.flags[2] & 0x20, l = r.flags[0] & 0x010000, d = r.flags[0] & 0x020000, c;
                    c = 8;
                    if (n) {
                        c += 4;
                        r.baseDataOffset = i.getUint32(12);
                        c += 4;
                    }
                    if (a) {
                        r.sampleDescriptionIndex = i.getUint32(c);
                        c += 4;
                    }
                    if (s) {
                        r.defaultSampleDuration = i.getUint32(c);
                        c += 4;
                    }
                    if (o) {
                        r.defaultSampleSize = i.getUint32(c);
                        c += 4;
                    }
                    if (u) {
                        r.defaultSampleFlags = i.getUint32(c);
                    }
                    if (l) {
                        r.durationIsEmpty = true;
                    }
                    if (!n && d) {
                        r.baseDataOffsetIsMoof = true;
                    }
                    return r;
                };
                var tQ = tZ;
                var t7 = ew.discardEmulationPreventionBytes;
                var tX = eN.CaptionStream;
                var tY = function e(t, i) {
                    var r = t;
                    for(var n = 0; n < i.length; n++){
                        var a = i[n];
                        if (r < a.size) {
                            return a;
                        }
                        r -= a.size;
                    }
                    return null;
                };
                var t9 = function e(t, i, r) {
                    var n = new DataView(t.buffer, t.byteOffset, t.byteLength), a = {
                        logs: [],
                        seiNals: []
                    }, s, o, u, l;
                    for(o = 0; o + 4 < t.length; o += u){
                        u = n.getUint32(o);
                        o += 4;
                        if (u <= 0) {
                            continue;
                        }
                        switch(t[o] & 0x1f){
                            case 0x06:
                                var d = t.subarray(o + 1, o + 1 + u);
                                var c = tY(o, i);
                                s = {
                                    nalUnitType: "sei_rbsp",
                                    size: u,
                                    data: d,
                                    escapedRBSP: t7(d),
                                    trackId: r
                                };
                                if (c) {
                                    s.pts = c.pts;
                                    s.dts = c.dts;
                                    l = c;
                                } else if (l) {
                                    s.pts = l.pts;
                                    s.dts = l.dts;
                                } else {
                                    a.logs.push({
                                        level: "warn",
                                        message: "We've encountered a nal unit without data at " + o + " for trackId " + r + ". See mux.js#223."
                                    });
                                    break;
                                }
                                a.seiNals.push(s);
                                break;
                        }
                    }
                    return a;
                };
                var tJ = function e(t, i, r) {
                    var n = i;
                    var a = r.defaultSampleDuration || 0;
                    var s = r.defaultSampleSize || 0;
                    var o = r.trackId;
                    var u = [];
                    t.forEach(function(e) {
                        var t = tK(e);
                        var i = t.samples;
                        i.forEach(function(e) {
                            if (e.duration === undefined) {
                                e.duration = a;
                            }
                            if (e.size === undefined) {
                                e.size = s;
                            }
                            e.trackId = o;
                            e.dts = n;
                            if (e.compositionTimeOffset === undefined) {
                                e.compositionTimeOffset = 0;
                            }
                            e.pts = n + e.compositionTimeOffset;
                            n += e.duration;
                        });
                        u = u.concat(i);
                    });
                    return u;
                };
                var ie = function e(t, i) {
                    var r = tV(t, [
                        "moof",
                        "traf"
                    ]);
                    var n = tV(t, [
                        "mdat"
                    ]);
                    var a = {};
                    var s = [];
                    n.forEach(function(e, t) {
                        var i = r[t];
                        s.push({
                            mdat: e,
                            traf: i
                        });
                    });
                    s.forEach(function(e) {
                        var t = e.mdat;
                        var r = e.traf;
                        var n = tV(r, [
                            "tfhd"
                        ]);
                        var s = tQ(n[0]);
                        var o = s.trackId;
                        var u = tV(r, [
                            "tfdt"
                        ]);
                        var l = u.length > 0 ? t4(u[0]).baseMediaDecodeTime : 0;
                        var d = tV(r, [
                            "trun"
                        ]);
                        var c;
                        var h;
                        if (i === o && d.length > 0) {
                            c = tJ(d, l, s);
                            h = t9(t, c, o);
                            if (!a[o]) {
                                a[o] = {
                                    seiNals: [],
                                    logs: []
                                };
                            }
                            a[o].seiNals = a[o].seiNals.concat(h.seiNals);
                            a[o].logs = a[o].logs.concat(h.logs);
                        }
                    });
                    return a;
                };
                var it = function e(t, i, r) {
                    var n;
                    if (i === null) {
                        return null;
                    }
                    n = ie(t, i);
                    var a = n[i] || {};
                    return {
                        seiNals: a.seiNals,
                        logs: a.logs,
                        timescale: r
                    };
                };
                var ii = function e() {
                    var t = false;
                    var i;
                    var r;
                    var n;
                    var a;
                    var s;
                    var o;
                    this.isInitialized = function() {
                        return t;
                    };
                    this.init = function(e) {
                        i = new tX();
                        t = true;
                        o = e ? e.isPartial : false;
                        i.on("data", function(e) {
                            e.startTime = e.startPts / a;
                            e.endTime = e.endPts / a;
                            s.captions.push(e);
                            s.captionStreams[e.stream] = true;
                        });
                        i.on("log", function(e) {
                            s.logs.push(e);
                        });
                    };
                    this.isNewInit = function(e, t) {
                        if ((e && e.length === 0) || (t && typeof t === "object" && Object.keys(t).length === 0)) {
                            return false;
                        }
                        return (n !== e[0] || a !== t[n]);
                    };
                    this.parse = function(e, t, i) {
                        var o;
                        if (!this.isInitialized()) {
                            return null;
                        } else if (!t || !i) {
                            return null;
                        } else if (this.isNewInit(t, i)) {
                            n = t[0];
                            a = i[n];
                        } else if (n === null || !a) {
                            r.push(e);
                            return null;
                        }
                        while(r.length > 0){
                            var u = r.shift();
                            this.parse(u, t, i);
                        }
                        o = it(e, n, a);
                        if (o && o.logs) {
                            s.logs = s.logs.concat(o.logs);
                        }
                        if (o === null || !o.seiNals) {
                            if (s.logs.length) {
                                return {
                                    logs: s.logs,
                                    captions: [],
                                    captionStreams: []
                                };
                            }
                            return null;
                        }
                        this.pushNals(o.seiNals);
                        this.flushStream();
                        return s;
                    };
                    this.pushNals = function(e) {
                        if (!this.isInitialized() || !e || e.length === 0) {
                            return null;
                        }
                        e.forEach(function(e) {
                            i.push(e);
                        });
                    };
                    this.flushStream = function() {
                        if (!this.isInitialized()) {
                            return null;
                        }
                        if (!o) {
                            i.flush();
                        } else {
                            i.partialFlush();
                        }
                    };
                    this.clearParsedCaptions = function() {
                        s.captions = [];
                        s.captionStreams = {};
                        s.logs = [];
                    };
                    this.resetCaptionStream = function() {
                        if (!this.isInitialized()) {
                            return null;
                        }
                        i.reset();
                    };
                    this.clearAllCaptions = function() {
                        this.clearParsedCaptions();
                        this.resetCaptionStream();
                    };
                    this.reset = function() {
                        r = [];
                        n = null;
                        a = null;
                        if (!s) {
                            s = {
                                captions: [],
                                captionStreams: {},
                                logs: []
                            };
                        } else {
                            this.clearParsedCaptions();
                        }
                        this.resetCaptionStream();
                    };
                    this.reset();
                };
                var ir = ii;
                var ia = tj.toUnsigned;
                var is = tj.toHexString;
                var io, iu, il, id, ic, ih;
                io = function e(t) {
                    var i = {}, r = tV(t, [
                        "moov",
                        "trak"
                    ]);
                    return r.reduce(function(e, t) {
                        var i, r, n, a, s;
                        i = tV(t, [
                            "tkhd"
                        ])[0];
                        if (!i) {
                            return null;
                        }
                        r = i[0];
                        n = r === 0 ? 12 : 20;
                        a = ia((i[n] << 24) | (i[n + 1] << 16) | (i[n + 2] << 8) | i[n + 3]);
                        s = tV(t, [
                            "mdia",
                            "mdhd"
                        ])[0];
                        if (!s) {
                            return null;
                        }
                        r = s[0];
                        n = r === 0 ? 12 : 20;
                        e[a] = ia((s[n] << 24) | (s[n + 1] << 16) | (s[n + 2] << 8) | s[n + 3]);
                        return e;
                    }, i);
                };
                iu = function e(t, i) {
                    var r, n, a;
                    r = tV(i, [
                        "moof",
                        "traf"
                    ]);
                    n = [].concat.apply([], r.map(function(e) {
                        return tV(e, [
                            "tfhd"
                        ]).map(function(i) {
                            var r, n, a;
                            r = ia((i[4] << 24) | (i[5] << 16) | (i[6] << 8) | i[7]);
                            n = t[r] || 90e3;
                            a = tV(e, [
                                "tfdt"
                            ]).map(function(e) {
                                var t, i;
                                t = e[0];
                                i = ia((e[4] << 24) | (e[5] << 16) | (e[6] << 8) | e[7]);
                                if (t === 1) {
                                    i *= Math.pow(2, 32);
                                    i += ia((e[8] << 24) | (e[9] << 16) | (e[10] << 8) | e[11]);
                                }
                                return i;
                            })[0];
                            a = typeof a === "number" && !isNaN(a) ? a : Infinity;
                            return a / n;
                        });
                    }));
                    a = Math.min.apply(null, n);
                    return isFinite(a) ? a : 0;
                };
                il = function e(t, i) {
                    var r = tV(i, [
                        "moof",
                        "traf"
                    ]);
                    var n = 0;
                    var a = 0;
                    var s;
                    if (r && r.length) {
                        var o = tV(r[0], [
                            "tfhd"
                        ])[0];
                        var u = tV(r[0], [
                            "trun"
                        ])[0];
                        var l = tV(r[0], [
                            "tfdt"
                        ])[0];
                        if (o) {
                            var d = tQ(o);
                            s = d.trackId;
                        }
                        if (l) {
                            var c = t4(l);
                            n = c.baseMediaDecodeTime;
                        }
                        if (u) {
                            var h = tK(u);
                            if (h.samples && h.samples.length) {
                                a = h.samples[0].compositionTimeOffset || 0;
                            }
                        }
                    }
                    var f = t[s] || 90e3;
                    return ((n + a) / f);
                };
                id = function e(t) {
                    var i = tV(t, [
                        "moov",
                        "trak"
                    ]);
                    var r = [];
                    i.forEach(function(e) {
                        var t = tV(e, [
                            "mdia",
                            "hdlr"
                        ]);
                        var i = tV(e, [
                            "tkhd"
                        ]);
                        t.forEach(function(e, t) {
                            var n = tH(e.subarray(8, 12));
                            var a = i[t];
                            var s;
                            var o;
                            var u;
                            if (n === "vide") {
                                s = new DataView(a.buffer, a.byteOffset, a.byteLength);
                                o = s.getUint8(0);
                                u = o === 0 ? s.getUint32(12) : s.getUint32(20);
                                r.push(u);
                            }
                        });
                    });
                    return r;
                };
                ih = function e(t) {
                    var i = t[0];
                    var r = i === 0 ? 12 : 20;
                    return ia((t[r] << 24) | (t[r + 1] << 16) | (t[r + 2] << 8) | t[r + 3]);
                };
                ic = function e(t) {
                    var i = tV(t, [
                        "moov",
                        "trak"
                    ]);
                    var r = [];
                    i.forEach(function(e) {
                        var t = {};
                        var i = tV(e, [
                            "tkhd"
                        ])[0];
                        var n, a;
                        if (i) {
                            n = new DataView(i.buffer, i.byteOffset, i.byteLength);
                            a = n.getUint8(0);
                            t.id = a === 0 ? n.getUint32(12) : n.getUint32(20);
                        }
                        var s = tV(e, [
                            "mdia",
                            "hdlr"
                        ])[0];
                        if (s) {
                            var o = tH(s.subarray(8, 12));
                            if (o === "vide") {
                                t.type = "video";
                            } else if (o === "soun") {
                                t.type = "audio";
                            } else {
                                t.type = o;
                            }
                        }
                        var u = tV(e, [
                            "mdia",
                            "minf",
                            "stbl",
                            "stsd", 
                        ])[0];
                        if (u) {
                            var l = u.subarray(8);
                            t.codec = tH(l.subarray(4, 8));
                            var d = tV(l, [
                                t.codec, 
                            ])[0];
                            var c, h;
                            if (d) {
                                if (/^[asm]vc[1-9]$/i.test(t.codec)) {
                                    c = d.subarray(78);
                                    h = tH(c.subarray(4, 8));
                                    if (h === "avcC" && c.length > 11) {
                                        t.codec += ".";
                                        t.codec += is(c[9]);
                                        t.codec += is(c[10]);
                                        t.codec += is(c[11]);
                                    } else {
                                        t.codec = "avc1.4d400d";
                                    }
                                } else if (/^mp4[a,v]$/i.test(t.codec)) {
                                    c = d.subarray(28);
                                    h = tH(c.subarray(4, 8));
                                    if (h === "esds" && c.length > 20 && c[19] !== 0) {
                                        t.codec += "." + is(c[19]);
                                        t.codec += "." + is((c[20] >>> 2) & 0x3f).replace(/^0/, "");
                                    } else {
                                        t.codec = "mp4a.40.2";
                                    }
                                } else {
                                    t.codec = t.codec.toLowerCase();
                                }
                            }
                        }
                        var f = tV(e, [
                            "mdia",
                            "mdhd"
                        ])[0];
                        if (f) {
                            t.timescale = ih(f);
                        }
                        r.push(t);
                    });
                    return r;
                };
                var ip = {
                    findBox: tV,
                    parseType: tH,
                    timescale: io,
                    startTime: iu,
                    compositionStartTime: il,
                    videoTrackIds: id,
                    tracks: ic,
                    getTimescaleFromMediaHeader: ih
                };
                var im = function e(t) {
                    var i = t[1] & 0x1f;
                    i <<= 8;
                    i |= t[2];
                    return i;
                };
                var iv = function e(t) {
                    return !!(t[1] & 0x40);
                };
                var ig = function e(t) {
                    var i = 0;
                    if ((t[3] & 0x30) >>> 4 > 0x01) {
                        i += t[4] + 1;
                    }
                    return i;
                };
                var i$ = function e(t, i) {
                    var r = im(t);
                    if (r === 0) {
                        return "pat";
                    } else if (r === i) {
                        return "pmt";
                    } else if (i) {
                        return "pes";
                    }
                    return null;
                };
                var i8 = function e(t) {
                    var i = iv(t);
                    var r = 4 + ig(t);
                    if (i) {
                        r += t[r] + 1;
                    }
                    return (((t[r + 10] & 0x1f) << 8) | t[r + 11]);
                };
                var iy = function e(t) {
                    var i = {};
                    var r = iv(t);
                    var n = 4 + ig(t);
                    if (r) {
                        n += t[n] + 1;
                    }
                    if (!(t[n + 5] & 0x01)) {
                        return;
                    }
                    var a, s, o;
                    a = ((t[n + 1] & 0x0f) << 8) | t[n + 2];
                    s = 3 + a - 4;
                    o = ((t[n + 10] & 0x0f) << 8) | t[n + 11];
                    var u = 12 + o;
                    while(u < s){
                        var l = n + u;
                        i[((t[l + 1] & 0x1f) << 8) | t[l + 2]] = t[l];
                        u += (((t[l + 3] & 0x0f) << 8) | t[l + 4]) + 5;
                    }
                    return i;
                };
                var iT = function e(t, i) {
                    var r = im(t);
                    var n = i[r];
                    switch(n){
                        case e1.H264_STREAM_TYPE:
                            return "video";
                        case e1.ADTS_STREAM_TYPE:
                            return "audio";
                        case e1.METADATA_STREAM_TYPE:
                            return "timed-metadata";
                        default:
                            return null;
                    }
                };
                var ib = function e(t) {
                    var i = iv(t);
                    if (!i) {
                        return null;
                    }
                    var r = 4 + ig(t);
                    if (r >= t.byteLength) {
                        return null;
                    }
                    var n = null;
                    var a;
                    a = t[r + 7];
                    if (a & 0xc0) {
                        n = {};
                        n.pts = ((t[r + 9] & 0x0e) << 27) | ((t[r + 10] & 0xff) << 20) | ((t[r + 11] & 0xfe) << 12) | ((t[r + 12] & 0xff) << 5) | ((t[r + 13] & 0xfe) >>> 3);
                        n.pts *= 4;
                        n.pts += (t[r + 13] & 0x06) >>> 1;
                        n.dts = n.pts;
                        if (a & 0x40) {
                            n.dts = ((t[r + 14] & 0x0e) << 27) | ((t[r + 15] & 0xff) << 20) | ((t[r + 16] & 0xfe) << 12) | ((t[r + 17] & 0xff) << 5) | ((t[r + 18] & 0xfe) >>> 3);
                            n.dts *= 4;
                            n.dts += (t[r + 18] & 0x06) >>> 1;
                        }
                    }
                    return n;
                };
                var ix = function e(t) {
                    switch(t){
                        case 0x05:
                            return "slice_layer_without_partitioning_rbsp_idr";
                        case 0x06:
                            return "sei_rbsp";
                        case 0x07:
                            return "seq_parameter_set_rbsp";
                        case 0x08:
                            return "pic_parameter_set_rbsp";
                        case 0x09:
                            return "access_unit_delimiter_rbsp";
                        default:
                            return null;
                    }
                };
                var iS = function e(t) {
                    var i = 4 + ig(t);
                    var r = t.subarray(i);
                    var n = 0;
                    var a = 0;
                    var s = false;
                    var o;
                    for(; a < r.byteLength - 3; a++){
                        if (r[a + 2] === 1) {
                            n = a + 5;
                            break;
                        }
                    }
                    while(n < r.byteLength){
                        switch(r[n]){
                            case 0:
                                if (r[n - 1] !== 0) {
                                    n += 2;
                                    break;
                                } else if (r[n - 2] !== 0) {
                                    n++;
                                    break;
                                }
                                if (a + 3 !== n - 2) {
                                    o = ix(r[a + 3] & 0x1f);
                                    if (o === "slice_layer_without_partitioning_rbsp_idr") {
                                        s = true;
                                    }
                                }
                                do {
                                    n++;
                                }while (r[n] !== 1 && n < r.length)
                                a = n - 2;
                                n += 3;
                                break;
                            case 1:
                                if (r[n - 1] !== 0 || r[n - 2] !== 0) {
                                    n += 3;
                                    break;
                                }
                                o = ix(r[a + 3] & 0x1f);
                                if (o === "slice_layer_without_partitioning_rbsp_idr") {
                                    s = true;
                                }
                                a = n - 2;
                                n += 3;
                                break;
                            default:
                                n += 3;
                                break;
                        }
                    }
                    r = r.subarray(a);
                    n -= a;
                    a = 0;
                    if (r && r.byteLength > 3) {
                        o = ix(r[a + 3] & 0x1f);
                        if (o === "slice_layer_without_partitioning_rbsp_idr") {
                            s = true;
                        }
                    }
                    return s;
                };
                var ik = {
                    parseType: i$,
                    parsePat: i8,
                    parsePmt: iy,
                    parsePayloadUnitStartIndicator: iv,
                    parsePesType: iT,
                    parsePesTime: ib,
                    videoPacketContainsKeyFrame: iS
                };
                var iC = eV.handleRollover;
                var iE = {};
                iE.ts = ik;
                iE.aac = tx;
                var iw = ed.ONE_SECOND_IN_TS;
                var iI = 188, iP = 0x47;
                var i_ = function e(t, i) {
                    var r = 0, n = iI, a, s;
                    while(n < t.byteLength){
                        if (t[r] === iP && t[n] === iP) {
                            a = t.subarray(r, n);
                            s = iE.ts.parseType(a, i.pid);
                            switch(s){
                                case "pat":
                                    i.pid = iE.ts.parsePat(a);
                                    break;
                                case "pmt":
                                    var o = iE.ts.parsePmt(a);
                                    i.table = i.table || {};
                                    Object.keys(o).forEach(function(e) {
                                        i.table[e] = o[e];
                                    });
                                    break;
                            }
                            r += iI;
                            n += iI;
                            continue;
                        }
                        r++;
                        n++;
                    }
                };
                var iL = function e(t, i, r) {
                    var n = 0, a = iI, s, o, u, l, d;
                    var c = false;
                    while(a <= t.byteLength){
                        if (t[n] === iP && (t[a] === iP || a === t.byteLength)) {
                            s = t.subarray(n, a);
                            o = iE.ts.parseType(s, i.pid);
                            switch(o){
                                case "pes":
                                    u = iE.ts.parsePesType(s, i.table);
                                    l = iE.ts.parsePayloadUnitStartIndicator(s);
                                    if (u === "audio" && l) {
                                        d = iE.ts.parsePesTime(s);
                                        if (d) {
                                            d.type = "audio";
                                            r.audio.push(d);
                                            c = true;
                                        }
                                    }
                                    break;
                            }
                            if (c) {
                                break;
                            }
                            n += iI;
                            a += iI;
                            continue;
                        }
                        n++;
                        a++;
                    }
                    a = t.byteLength;
                    n = a - iI;
                    c = false;
                    while(n >= 0){
                        if (t[n] === iP && (t[a] === iP || a === t.byteLength)) {
                            s = t.subarray(n, a);
                            o = iE.ts.parseType(s, i.pid);
                            switch(o){
                                case "pes":
                                    u = iE.ts.parsePesType(s, i.table);
                                    l = iE.ts.parsePayloadUnitStartIndicator(s);
                                    if (u === "audio" && l) {
                                        d = iE.ts.parsePesTime(s);
                                        if (d) {
                                            d.type = "audio";
                                            r.audio.push(d);
                                            c = true;
                                        }
                                    }
                                    break;
                            }
                            if (c) {
                                break;
                            }
                            n -= iI;
                            a -= iI;
                            continue;
                        }
                        n--;
                        a--;
                    }
                };
                var iA = function e(t, i, r) {
                    var n = 0, a = iI, s, o, u, l, d, c, h, f;
                    var p = false;
                    var m = {
                        data: [],
                        size: 0
                    };
                    while(a < t.byteLength){
                        if (t[n] === iP && t[a] === iP) {
                            s = t.subarray(n, a);
                            o = iE.ts.parseType(s, i.pid);
                            switch(o){
                                case "pes":
                                    u = iE.ts.parsePesType(s, i.table);
                                    l = iE.ts.parsePayloadUnitStartIndicator(s);
                                    if (u === "video") {
                                        if (l && !p) {
                                            d = iE.ts.parsePesTime(s);
                                            if (d) {
                                                d.type = "video";
                                                r.video.push(d);
                                                p = true;
                                            }
                                        }
                                        if (!r.firstKeyFrame) {
                                            if (l) {
                                                if (m.size !== 0) {
                                                    c = new Uint8Array(m.size);
                                                    h = 0;
                                                    while(m.data.length){
                                                        f = m.data.shift();
                                                        c.set(f, h);
                                                        h += f.byteLength;
                                                    }
                                                    if (iE.ts.videoPacketContainsKeyFrame(c)) {
                                                        var v = iE.ts.parsePesTime(c);
                                                        if (v) {
                                                            r.firstKeyFrame = v;
                                                            r.firstKeyFrame.type = "video";
                                                        } else {
                                                            console.warn("Failed to extract PTS/DTS from PES at first keyframe. " + "This could be an unusual TS segment, or else mux.js did not " + "parse your TS segment correctly. If you know your TS " + "segments do contain PTS/DTS on keyframes please file a bug " + "report! You can try ffprobe to double check for yourself.");
                                                        }
                                                    }
                                                    m.size = 0;
                                                }
                                            }
                                            m.data.push(s);
                                            m.size += s.byteLength;
                                        }
                                    }
                                    break;
                            }
                            if (p && r.firstKeyFrame) {
                                break;
                            }
                            n += iI;
                            a += iI;
                            continue;
                        }
                        n++;
                        a++;
                    }
                    a = t.byteLength;
                    n = a - iI;
                    p = false;
                    while(n >= 0){
                        if (t[n] === iP && t[a] === iP) {
                            s = t.subarray(n, a);
                            o = iE.ts.parseType(s, i.pid);
                            switch(o){
                                case "pes":
                                    u = iE.ts.parsePesType(s, i.table);
                                    l = iE.ts.parsePayloadUnitStartIndicator(s);
                                    if (u === "video" && l) {
                                        d = iE.ts.parsePesTime(s);
                                        if (d) {
                                            d.type = "video";
                                            r.video.push(d);
                                            p = true;
                                        }
                                    }
                                    break;
                            }
                            if (p) {
                                break;
                            }
                            n -= iI;
                            a -= iI;
                            continue;
                        }
                        n--;
                        a--;
                    }
                };
                var iD = function e(t, i) {
                    if (t.audio && t.audio.length) {
                        var r = i;
                        if (typeof r === "undefined" || isNaN(r)) {
                            r = t.audio[0].dts;
                        }
                        t.audio.forEach(function(e) {
                            e.dts = iC(e.dts, r);
                            e.pts = iC(e.pts, r);
                            e.dtsTime = e.dts / iw;
                            e.ptsTime = e.pts / iw;
                        });
                    }
                    if (t.video && t.video.length) {
                        var n = i;
                        if (typeof n === "undefined" || isNaN(n)) {
                            n = t.video[0].dts;
                        }
                        t.video.forEach(function(e) {
                            e.dts = iC(e.dts, n);
                            e.pts = iC(e.pts, n);
                            e.dtsTime = e.dts / iw;
                            e.ptsTime = e.pts / iw;
                        });
                        if (t.firstKeyFrame) {
                            var a = t.firstKeyFrame;
                            a.dts = iC(a.dts, n);
                            a.pts = iC(a.pts, n);
                            a.dtsTime = a.dts / iw;
                            a.ptsTime = a.pts / iw;
                        }
                    }
                };
                var iO = function e(t) {
                    var i = false, r = 0, n = null, a = null, s = 0, o = 0, u;
                    while(t.length - o >= 3){
                        var l = iE.aac.parseType(t, o);
                        switch(l){
                            case "timed-metadata":
                                if (t.length - o < 10) {
                                    i = true;
                                    break;
                                }
                                s = iE.aac.parseId3TagSize(t, o);
                                if (s > t.length) {
                                    i = true;
                                    break;
                                }
                                if (a === null) {
                                    u = t.subarray(o, o + s);
                                    a = iE.aac.parseAacTimestamp(u);
                                }
                                o += s;
                                break;
                            case "audio":
                                if (t.length - o < 7) {
                                    i = true;
                                    break;
                                }
                                s = iE.aac.parseAdtsSize(t, o);
                                if (s > t.length) {
                                    i = true;
                                    break;
                                }
                                if (n === null) {
                                    u = t.subarray(o, o + s);
                                    n = iE.aac.parseSampleRate(u);
                                }
                                r++;
                                o += s;
                                break;
                            default:
                                o++;
                                break;
                        }
                        if (i) {
                            return null;
                        }
                    }
                    if (n === null || a === null) {
                        return null;
                    }
                    var d = iw / n;
                    var c = {
                        audio: [
                            {
                                type: "audio",
                                dts: a,
                                pts: a
                            },
                            {
                                type: "audio",
                                dts: a + r * 1024 * d,
                                pts: a + r * 1024 * d
                            }, 
                        ]
                    };
                    return c;
                };
                var iR = function e(t) {
                    var i = {
                        pid: null,
                        table: null
                    };
                    var r = {};
                    i_(t, i);
                    for(var n in i.table){
                        if (i.table.hasOwnProperty(n)) {
                            var a = i.table[n];
                            switch(a){
                                case e1.H264_STREAM_TYPE:
                                    r.video = [];
                                    iA(t, i, r);
                                    if (r.video.length === 0) {
                                        delete r.video;
                                    }
                                    break;
                                case e1.ADTS_STREAM_TYPE:
                                    r.audio = [];
                                    iL(t, i, r);
                                    if (r.audio.length === 0) {
                                        delete r.audio;
                                    }
                                    break;
                            }
                        }
                    }
                    return r;
                };
                var iM = function e(t, i) {
                    var r = iE.aac.isLikelyAacData(t);
                    var n;
                    if (r) {
                        n = iO(t);
                    } else {
                        n = iR(t);
                    }
                    if (!n || (!n.audio && !n.video)) {
                        return null;
                    }
                    iD(n, i);
                    return n;
                };
                var i0 = {
                    inspect: iM,
                    parseAudioPes_: iL
                };
                var iU = function e(t, i) {
                    i.on("data", function(e) {
                        var i = e.initSegment;
                        e.initSegment = {
                            data: i.buffer,
                            byteOffset: i.byteOffset,
                            byteLength: i.byteLength
                        };
                        var r = e.data;
                        e.data = r.buffer;
                        t.postMessage({
                            action: "data",
                            segment: e,
                            byteOffset: r.byteOffset,
                            byteLength: r.byteLength
                        }, [
                            e.data
                        ]);
                    });
                    i.on("done", function(e) {
                        t.postMessage({
                            action: "done"
                        });
                    });
                    i.on("gopInfo", function(e) {
                        t.postMessage({
                            action: "gopInfo",
                            gopInfo: e
                        });
                    });
                    i.on("videoSegmentTimingInfo", function(e) {
                        var i = {
                            start: {
                                decode: ed.videoTsToSeconds(e.start.dts),
                                presentation: ed.videoTsToSeconds(e.start.pts)
                            },
                            end: {
                                decode: ed.videoTsToSeconds(e.end.dts),
                                presentation: ed.videoTsToSeconds(e.end.pts)
                            },
                            baseMediaDecodeTime: ed.videoTsToSeconds(e.baseMediaDecodeTime)
                        };
                        if (e.prependedContentDuration) {
                            i.prependedContentDuration = ed.videoTsToSeconds(e.prependedContentDuration);
                        }
                        t.postMessage({
                            action: "videoSegmentTimingInfo",
                            videoSegmentTimingInfo: i
                        });
                    });
                    i.on("audioSegmentTimingInfo", function(e) {
                        var i = {
                            start: {
                                decode: ed.videoTsToSeconds(e.start.dts),
                                presentation: ed.videoTsToSeconds(e.start.pts)
                            },
                            end: {
                                decode: ed.videoTsToSeconds(e.end.dts),
                                presentation: ed.videoTsToSeconds(e.end.pts)
                            },
                            baseMediaDecodeTime: ed.videoTsToSeconds(e.baseMediaDecodeTime)
                        };
                        if (e.prependedContentDuration) {
                            i.prependedContentDuration = ed.videoTsToSeconds(e.prependedContentDuration);
                        }
                        t.postMessage({
                            action: "audioSegmentTimingInfo",
                            audioSegmentTimingInfo: i
                        });
                    });
                    i.on("id3Frame", function(e) {
                        t.postMessage({
                            action: "id3Frame",
                            id3Frame: e
                        });
                    });
                    i.on("caption", function(e) {
                        t.postMessage({
                            action: "caption",
                            caption: e
                        });
                    });
                    i.on("trackinfo", function(e) {
                        t.postMessage({
                            action: "trackinfo",
                            trackInfo: e
                        });
                    });
                    i.on("audioTimingInfo", function(e) {
                        t.postMessage({
                            action: "audioTimingInfo",
                            audioTimingInfo: {
                                start: ed.videoTsToSeconds(e.start),
                                end: ed.videoTsToSeconds(e.end)
                            }
                        });
                    });
                    i.on("videoTimingInfo", function(e) {
                        t.postMessage({
                            action: "videoTimingInfo",
                            videoTimingInfo: {
                                start: ed.videoTsToSeconds(e.start),
                                end: ed.videoTsToSeconds(e.end)
                            }
                        });
                    });
                    i.on("log", function(e) {
                        t.postMessage({
                            action: "log",
                            log: e
                        });
                    });
                };
                var iB = (function() {
                    function e(e, t) {
                        this.options = t || {};
                        this.self = e;
                        this.init();
                    }
                    var t = e.prototype;
                    t.init = function e() {
                        if (this.transmuxer) {
                            this.transmuxer.dispose();
                        }
                        this.transmuxer = new tF.Transmuxer(this.options);
                        iU(this.self, this.transmuxer);
                    };
                    t.pushMp4Captions = function e(t) {
                        if (!this.captionParser) {
                            this.captionParser = new ir();
                            this.captionParser.init();
                        }
                        var i = new Uint8Array(t.data, t.byteOffset, t.byteLength);
                        var r = this.captionParser.parse(i, t.trackIds, t.timescales);
                        this.self.postMessage({
                            action: "mp4Captions",
                            captions: (r && r.captions) || [],
                            logs: (r && r.logs) || [],
                            data: i.buffer
                        }, [
                            i.buffer
                        ]);
                    };
                    t.probeMp4StartTime = function e(t) {
                        var i = t.timescales, r = t.data;
                        var n = ip.startTime(i, r);
                        this.self.postMessage({
                            action: "probeMp4StartTime",
                            startTime: n,
                            data: r
                        }, [
                            r.buffer
                        ]);
                    };
                    t.probeMp4Tracks = function e(t) {
                        var i = t.data;
                        var r = ip.tracks(i);
                        this.self.postMessage({
                            action: "probeMp4Tracks",
                            tracks: r,
                            data: i
                        }, [
                            i.buffer
                        ]);
                    };
                    t.probeTs = function e(t) {
                        var i = t.data, r = t.baseStartTime;
                        var n = typeof r === "number" && !isNaN(r) ? r * ed.ONE_SECOND_IN_TS : void 0;
                        var a = i0.inspect(i, n);
                        var s = null;
                        if (a) {
                            s = {
                                hasVideo: (a.video && a.video.length === 2) || false,
                                hasAudio: (a.audio && a.audio.length === 2) || false
                            };
                            if (s.hasVideo) {
                                s.videoStart = a.video[0].ptsTime;
                            }
                            if (s.hasAudio) {
                                s.audioStart = a.audio[0].ptsTime;
                            }
                        }
                        this.self.postMessage({
                            action: "probeTs",
                            result: s,
                            data: i
                        }, [
                            i.buffer
                        ]);
                    };
                    t.clearAllMp4Captions = function e() {
                        if (this.captionParser) {
                            this.captionParser.clearAllCaptions();
                        }
                    };
                    t.clearParsedMp4Captions = function e() {
                        if (this.captionParser) {
                            this.captionParser.clearParsedCaptions();
                        }
                    };
                    t.push = function e(t) {
                        var i = new Uint8Array(t.data, t.byteOffset, t.byteLength);
                        this.transmuxer.push(i);
                    };
                    t.reset = function e() {
                        this.transmuxer.reset();
                    };
                    t.setTimestampOffset = function e(t) {
                        var i = t.timestampOffset || 0;
                        this.transmuxer.setBaseMediaDecodeTime(Math.round(ed.secondsToVideoTs(i)));
                    };
                    t.setAudioAppendStart = function e(t) {
                        this.transmuxer.setAudioAppendStart(Math.ceil(ed.secondsToVideoTs(t.appendStart)));
                    };
                    t.setRemux = function e(t) {
                        this.transmuxer.setRemux(t.remux);
                    };
                    t.flush = function e(t) {
                        this.transmuxer.flush();
                        self.postMessage({
                            action: "done",
                            type: "transmuxed"
                        });
                    };
                    t.endTimeline = function e() {
                        this.transmuxer.endTimeline();
                        self.postMessage({
                            action: "endedtimeline",
                            type: "transmuxed"
                        });
                    };
                    t.alignGopsWith = function e(t) {
                        this.transmuxer.alignGopsWith(t.gopsToAlignWith.slice());
                    };
                    return e;
                })();
                self.onmessage = function(e) {
                    if (e.data.action === "init" && e.data.options) {
                        this.messageHandlers = new iB(self, e.data.options);
                        return;
                    }
                    if (!this.messageHandlers) {
                        this.messageHandlers = new iB(self);
                    }
                    if (e.data && e.data.action && e.data.action !== "init") {
                        if (this.messageHandlers[e.data.action]) {
                            this.messageHandlers[e.data.action](e.data);
                        }
                    }
                };
            }));
            var sI = sk(sw);
            var sP = function e(t, i, r) {
                var n = t.data.segment, a = n.type, s = n.initSegment, o = n.captions, u = n.captionStreams, l = n.metadata, d = n.videoFrameDtsTime, c = n.videoFramePtsTime;
                i.buffer.push({
                    captions: o,
                    captionStreams: u,
                    metadata: l
                });
                var h = t.data.segment.boxes || {
                    data: t.data.segment.data
                };
                var f = {
                    type: a,
                    data: new Uint8Array(h.data, h.data.byteOffset, h.data.byteLength),
                    initSegment: new Uint8Array(s.data, s.byteOffset, s.byteLength)
                };
                if (typeof d !== "undefined") {
                    f.videoFrameDtsTime = d;
                }
                if (typeof c !== "undefined") {
                    f.videoFramePtsTime = c;
                }
                r(f);
            };
            var s_ = function e(t) {
                var i = t.transmuxedData, r = t.callback;
                i.buffer = [];
                r(i);
            };
            var sL = function e(t, i) {
                i.gopInfo = t.data.gopInfo;
            };
            var sA = function e(t) {
                var i = t.transmuxer, r = t.bytes, n = t.audioAppendStart, a = t.gopsToAlignWith, s = t.remux, o = t.onData, u = t.onTrackInfo, l = t.onAudioTimingInfo, d = t.onVideoTimingInfo, c = t.onVideoSegmentTimingInfo, h = t.onAudioSegmentTimingInfo, f = t.onId3, p = t.onCaptions, m = t.onDone, v = t.onEndedTimeline, g = t.onTransmuxerLog, $ = t.isEndOfTimeline;
                var y = {
                    buffer: []
                };
                var T = $;
                var b = function e(r) {
                    if (i.currentTransmux !== t) {
                        return;
                    }
                    if (r.data.action === "data") {
                        sP(r, y, o);
                    }
                    if (r.data.action === "trackinfo") {
                        u(r.data.trackInfo);
                    }
                    if (r.data.action === "gopInfo") {
                        sL(r, y);
                    }
                    if (r.data.action === "audioTimingInfo") {
                        l(r.data.audioTimingInfo);
                    }
                    if (r.data.action === "videoTimingInfo") {
                        d(r.data.videoTimingInfo);
                    }
                    if (r.data.action === "videoSegmentTimingInfo") {
                        c(r.data.videoSegmentTimingInfo);
                    }
                    if (r.data.action === "audioSegmentTimingInfo") {
                        h(r.data.audioSegmentTimingInfo);
                    }
                    if (r.data.action === "id3Frame") {
                        f([
                            r.data.id3Frame
                        ], r.data.id3Frame.dispatchType);
                    }
                    if (r.data.action === "caption") {
                        p(r.data.caption);
                    }
                    if (r.data.action === "endedtimeline") {
                        T = false;
                        v();
                    }
                    if (r.data.action === "log") {
                        g(r.data.log);
                    }
                    if (r.data.type !== "transmuxed") {
                        return;
                    }
                    if (T) {
                        return;
                    }
                    i.onmessage = null;
                    s_({
                        transmuxedData: y,
                        callback: m
                    });
                    sD(i);
                };
                i.onmessage = b;
                if (n) {
                    i.postMessage({
                        action: "setAudioAppendStart",
                        appendStart: n
                    });
                }
                if (Array.isArray(a)) {
                    i.postMessage({
                        action: "alignGopsWith",
                        gopsToAlignWith: a
                    });
                }
                if (typeof s !== "undefined") {
                    i.postMessage({
                        action: "setRemux",
                        remux: s
                    });
                }
                if (r.byteLength) {
                    var x = r instanceof ArrayBuffer ? r : r.buffer;
                    var S = r instanceof ArrayBuffer ? 0 : r.byteOffset;
                    i.postMessage({
                        action: "push",
                        data: x,
                        byteOffset: S,
                        byteLength: r.byteLength
                    }, [
                        x
                    ]);
                }
                if ($) {
                    i.postMessage({
                        action: "endTimeline"
                    });
                }
                i.postMessage({
                    action: "flush"
                });
            };
            var sD = function e(t) {
                t.currentTransmux = null;
                if (t.transmuxQueue.length) {
                    t.currentTransmux = t.transmuxQueue.shift();
                    if (typeof t.currentTransmux === "function") {
                        t.currentTransmux();
                    } else {
                        sA(t.currentTransmux);
                    }
                }
            };
            var sO = function e(t, i) {
                t.postMessage({
                    action: i
                });
                sD(t);
            };
            var sR = function e(t, i) {
                if (!i.currentTransmux) {
                    i.currentTransmux = t;
                    sO(i, t);
                    return;
                }
                i.transmuxQueue.push(sO.bind(null, i, t));
            };
            var sM = function e(t) {
                sR("reset", t);
            };
            var s0 = function e(t) {
                sR("endTimeline", t);
            };
            var sU = function e(t) {
                if (!t.transmuxer.currentTransmux) {
                    t.transmuxer.currentTransmux = t;
                    sA(t);
                    return;
                }
                t.transmuxer.transmuxQueue.push(t);
            };
            var sB = function e(t) {
                var i = new sI();
                i.currentTransmux = null;
                i.transmuxQueue = [];
                var r = i.terminate;
                i.terminate = function() {
                    i.currentTransmux = null;
                    i.transmuxQueue.length = 0;
                    return r.call(i);
                };
                i.postMessage({
                    action: "init",
                    options: t
                });
                return i;
            };
            var sF = {
                reset: sM,
                endTimeline: s0,
                transmux: sU,
                createTransmuxer: sB
            };
            var sN = function e(t) {
                var i = t.transmuxer;
                var r = t.endAction || t.action;
                var n = t.callback;
                var a = (0, o.Z)({}, t, {
                    endAction: null,
                    transmuxer: null,
                    callback: null
                });
                var s = function e(a) {
                    if (a.data.action !== r) {
                        return;
                    }
                    i.removeEventListener("message", e);
                    if (a.data.data) {
                        a.data.data = new Uint8Array(a.data.data, t.byteOffset || 0, t.byteLength || a.data.data.byteLength);
                        if (t.data) {
                            t.data = a.data.data;
                        }
                    }
                    n(a.data);
                };
                i.addEventListener("message", s);
                if (t.data) {
                    var u = t.data instanceof ArrayBuffer;
                    a.byteOffset = u ? 0 : t.data.byteOffset;
                    a.byteLength = t.data.byteLength;
                    var l = [
                        u ? t.data : t.data.buffer, 
                    ];
                    i.postMessage(a, l);
                } else {
                    i.postMessage(a);
                }
            };
            var s1 = {
                FAILURE: 2,
                TIMEOUT: -101,
                ABORTED: -102
            };
            var sj = function e(t) {
                t.forEach(function(e) {
                    e.abort();
                });
            };
            var s2 = function e(t) {
                return {
                    bandwidth: t.bandwidth,
                    bytesReceived: t.bytesReceived || 0,
                    roundTripTime: t.roundTripTime || 0
                };
            };
            var sH = function e(t) {
                var i = t.target;
                var r = Date.now() - i.requestTime;
                var n = {
                    bandwidth: Infinity,
                    bytesReceived: 0,
                    roundTripTime: r || 0
                };
                n.bytesReceived = t.loaded;
                n.bandwidth = Math.floor((n.bytesReceived / n.roundTripTime) * 8 * 1000);
                return n;
            };
            var s6 = function e(t, i) {
                if (i.timedout) {
                    return {
                        status: i.status,
                        message: "HLS request timed-out at URL: " + i.uri,
                        code: s1.TIMEOUT,
                        xhr: i
                    };
                }
                if (i.aborted) {
                    return {
                        status: i.status,
                        message: "HLS request aborted at URL: " + i.uri,
                        code: s1.ABORTED,
                        xhr: i
                    };
                }
                if (t) {
                    return {
                        status: i.status,
                        message: "HLS request errored at URL: " + i.uri,
                        code: s1.FAILURE,
                        xhr: i
                    };
                }
                if (i.responseType === "arraybuffer" && i.response.byteLength === 0) {
                    return {
                        status: i.status,
                        message: "Empty HLS response at URL: " + i.uri,
                        code: s1.FAILURE,
                        xhr: i
                    };
                }
                return null;
            };
            var sq = function e(t, i, r) {
                return function(e, n) {
                    var a = n.response;
                    var s = s6(e, n);
                    if (s) {
                        return r(s, t);
                    }
                    if (a.byteLength !== 16) {
                        return r({
                            status: n.status,
                            message: "Invalid HLS key at URL: " + n.uri,
                            code: s1.FAILURE,
                            xhr: n
                        }, t);
                    }
                    var o = new DataView(a);
                    var u = new Uint32Array([
                        o.getUint32(0),
                        o.getUint32(4),
                        o.getUint32(8),
                        o.getUint32(12), 
                    ]);
                    for(var l = 0; l < i.length; l++){
                        i[l].bytes = u;
                    }
                    return r(null, t);
                };
            };
            var sV = function e(t, i) {
                var r = (0, I.Xm)(t.map.bytes);
                if (r !== "mp4") {
                    var n = t.map.resolvedUri || t.map.uri;
                    return i({
                        internal: true,
                        message: "Found unsupported " + (r || "unknown") + " container for initialization segment at URL: " + n,
                        code: s1.FAILURE
                    });
                }
                sN({
                    action: "probeMp4Tracks",
                    data: t.map.bytes,
                    transmuxer: t.transmuxer,
                    callback: function e(r) {
                        var n = r.tracks, a = r.data;
                        t.map.bytes = a;
                        n.forEach(function(e) {
                            t.map.tracks = t.map.tracks || {};
                            if (t.map.tracks[e.type]) {
                                return;
                            }
                            t.map.tracks[e.type] = e;
                            if (typeof e.id === "number" && e.timescale) {
                                t.map.timescales = t.map.timescales || {};
                                t.map.timescales[e.id] = e.timescale;
                            }
                        });
                        return i(null);
                    }
                });
            };
            var sW = function e(t) {
                var i = t.segment, r = t.finishProcessingFn;
                return function(e, t) {
                    var n = s6(e, t);
                    if (n) {
                        return r(n, i);
                    }
                    var a = new Uint8Array(t.response);
                    if (i.map.key) {
                        i.map.encryptedBytes = a;
                        return r(null, i);
                    }
                    i.map.bytes = a;
                    sV(i, function(e) {
                        if (e) {
                            e.xhr = t;
                            e.status = t.status;
                            return r(e, i);
                        }
                        r(null, i);
                    });
                };
            };
            var s3 = function e(t) {
                var i = t.segment, r = t.finishProcessingFn, n = t.responseType;
                return function(e, t) {
                    var a = s6(e, t);
                    if (a) {
                        return r(a, i);
                    }
                    var s = n === "arraybuffer" || !t.responseText ? t.response : sb(t.responseText.substring(i.lastReachedChar || 0));
                    i.stats = s2(t);
                    if (i.key) {
                        i.encryptedBytes = new Uint8Array(s);
                    } else {
                        i.bytes = new Uint8Array(s);
                    }
                    return r(null, i);
                };
            };
            var s4 = function e(t) {
                var i = t.segment, r = t.bytes, n = t.trackInfoFn, a = t.timingInfoFn, s = t.videoSegmentTimingInfoFn, o = t.audioSegmentTimingInfoFn, u = t.id3Fn, l = t.captionsFn, d = t.isEndOfTimeline, c = t.endedTimelineFn, h = t.dataFn, f = t.doneFn, p = t.onTransmuxerLog;
                var m = (i.map && i.map.tracks) || {};
                var v = Boolean(m.audio && m.video);
                var g = a.bind(null, i, "audio", "start");
                var $ = a.bind(null, i, "audio", "end");
                var y = a.bind(null, i, "video", "start");
                var T = a.bind(null, i, "video", "end");
                var b = function e() {
                    return sU({
                        bytes: r,
                        transmuxer: i.transmuxer,
                        audioAppendStart: i.audioAppendStart,
                        gopsToAlignWith: i.gopsToAlignWith,
                        remux: v,
                        onData: function e(t) {
                            t.type = t.type === "combined" ? "video" : t.type;
                            h(i, t);
                        },
                        onTrackInfo: function e(t) {
                            if (n) {
                                if (v) {
                                    t.isMuxed = true;
                                }
                                n(i, t);
                            }
                        },
                        onAudioTimingInfo: function e(t) {
                            if (g && typeof t.start !== "undefined") {
                                g(t.start);
                                g = null;
                            }
                            if ($ && typeof t.end !== "undefined") {
                                $(t.end);
                            }
                        },
                        onVideoTimingInfo: function e(t) {
                            if (y && typeof t.start !== "undefined") {
                                y(t.start);
                                y = null;
                            }
                            if (T && typeof t.end !== "undefined") {
                                T(t.end);
                            }
                        },
                        onVideoSegmentTimingInfo: function e(t) {
                            s(t);
                        },
                        onAudioSegmentTimingInfo: function e(t) {
                            o(t);
                        },
                        onId3: function e(t, r) {
                            u(i, t, r);
                        },
                        onCaptions: function e(t) {
                            l(i, [
                                t
                            ]);
                        },
                        isEndOfTimeline: d,
                        onEndedTimeline: function e() {
                            c();
                        },
                        onTransmuxerLog: p,
                        onDone: function e(t) {
                            if (!f) {
                                return;
                            }
                            t.type = t.type === "combined" ? "video" : t.type;
                            f(null, i, t);
                        }
                    });
                };
                sN({
                    action: "probeTs",
                    transmuxer: i.transmuxer,
                    data: r,
                    baseStartTime: i.baseStartTime,
                    callback: function e(t) {
                        i.bytes = r = t.data;
                        var a = t.result;
                        if (a) {
                            n(i, {
                                hasAudio: a.hasAudio,
                                hasVideo: a.hasVideo,
                                isMuxed: v
                            });
                            n = null;
                            if (a.hasAudio && !v) {
                                g(a.audioStart);
                            }
                            if (a.hasVideo) {
                                y(a.videoStart);
                            }
                            g = null;
                            y = null;
                        }
                        b();
                    }
                });
            };
            var s5 = function e(t) {
                var i = t.segment, r = t.bytes, n = t.trackInfoFn, a = t.timingInfoFn, s = t.videoSegmentTimingInfoFn, o = t.audioSegmentTimingInfoFn, u = t.id3Fn, l = t.captionsFn, d = t.isEndOfTimeline, c = t.endedTimelineFn, h = t.dataFn, f = t.doneFn, p = t.onTransmuxerLog;
                var m = new Uint8Array(r);
                if ((0, I.cz)(m)) {
                    i.isFmp4 = true;
                    var v = i.map.tracks;
                    var g = {
                        isFmp4: true,
                        hasVideo: !!v.video,
                        hasAudio: !!v.audio
                    };
                    if (v.audio && v.audio.codec && v.audio.codec !== "enca") {
                        g.audioCodec = v.audio.codec;
                    }
                    if (v.video && v.video.codec && v.video.codec !== "encv") {
                        g.videoCodec = v.video.codec;
                    }
                    if (v.video && v.audio) {
                        g.isMuxed = true;
                    }
                    n(i, g);
                    var $ = function e(t) {
                        h(i, {
                            data: m,
                            type: g.hasAudio && !g.isMuxed ? "audio" : "video"
                        });
                        if (t && t.length) {
                            l(i, t);
                        }
                        f(null, i, {});
                    };
                    sN({
                        action: "probeMp4StartTime",
                        timescales: i.map.timescales,
                        data: m,
                        transmuxer: i.transmuxer,
                        callback: function e(t) {
                            var n = t.data, s = t.startTime;
                            r = n.buffer;
                            i.bytes = m = n;
                            if (g.hasAudio && !g.isMuxed) {
                                a(i, "audio", "start", s);
                            }
                            if (g.hasVideo) {
                                a(i, "video", "start", s);
                            }
                            if (!v.video || !n.byteLength || !i.transmuxer) {
                                $();
                                return;
                            }
                            sN({
                                action: "pushMp4Captions",
                                endAction: "mp4Captions",
                                transmuxer: i.transmuxer,
                                data: m,
                                timescales: i.map.timescales,
                                trackIds: [
                                    v.video.id
                                ],
                                callback: function e(t) {
                                    r = t.data.buffer;
                                    i.bytes = m = t.data;
                                    t.logs.forEach(function(e) {
                                        p(nq.mergeOptions(e, {
                                            stream: "mp4CaptionParser"
                                        }));
                                    });
                                    $(t.captions);
                                }
                            });
                        }
                    });
                    return;
                }
                if (!i.transmuxer) {
                    f(null, i, {});
                    return;
                }
                if (typeof i.container === "undefined") {
                    i.container = (0, I.Xm)(m);
                }
                if (i.container !== "ts" && i.container !== "aac") {
                    n(i, {
                        hasAudio: false,
                        hasVideo: false
                    });
                    f(null, i, {});
                    return;
                }
                s4({
                    segment: i,
                    bytes: r,
                    trackInfoFn: n,
                    timingInfoFn: a,
                    videoSegmentTimingInfoFn: s,
                    audioSegmentTimingInfoFn: o,
                    id3Fn: u,
                    captionsFn: l,
                    isEndOfTimeline: d,
                    endedTimelineFn: c,
                    dataFn: h,
                    doneFn: f,
                    onTransmuxerLog: p
                });
            };
            var sz = function e(t, i) {
                var r = t.id, n = t.key, a = t.encryptedBytes, s = t.decryptionWorker;
                var o = function e(t) {
                    if (t.data.source === r) {
                        s.removeEventListener("message", e);
                        var n = t.data.decrypted;
                        i(new Uint8Array(n.bytes, n.byteOffset, n.byteLength));
                    }
                };
                s.addEventListener("message", o);
                var u;
                if (n.bytes.slice) {
                    u = n.bytes.slice();
                } else {
                    u = new Uint32Array(Array.prototype.slice.call(n.bytes));
                }
                s.postMessage(aQ({
                    source: r,
                    encrypted: a,
                    key: u,
                    iv: n.iv
                }), [
                    a.buffer,
                    u.buffer
                ]);
            };
            var sG = function e(t) {
                var i = t.decryptionWorker, r = t.segment, n = t.trackInfoFn, a = t.timingInfoFn, s = t.videoSegmentTimingInfoFn, o = t.audioSegmentTimingInfoFn, u = t.id3Fn, l = t.captionsFn, d = t.isEndOfTimeline, c = t.endedTimelineFn, h = t.dataFn, f = t.doneFn, p = t.onTransmuxerLog;
                sz({
                    id: r.requestId,
                    key: r.key,
                    encryptedBytes: r.encryptedBytes,
                    decryptionWorker: i
                }, function(e) {
                    r.bytes = e;
                    s5({
                        segment: r,
                        bytes: r.bytes,
                        trackInfoFn: n,
                        timingInfoFn: a,
                        videoSegmentTimingInfoFn: s,
                        audioSegmentTimingInfoFn: o,
                        id3Fn: u,
                        captionsFn: l,
                        isEndOfTimeline: d,
                        endedTimelineFn: c,
                        dataFn: h,
                        doneFn: f,
                        onTransmuxerLog: p
                    });
                });
            };
            var sK = function e(t) {
                var i = t.activeXhrs, r = t.decryptionWorker, n = t.trackInfoFn, a = t.timingInfoFn, s = t.videoSegmentTimingInfoFn, o = t.audioSegmentTimingInfoFn, u = t.id3Fn, l = t.captionsFn, d = t.isEndOfTimeline, c = t.endedTimelineFn, h = t.dataFn, f = t.doneFn, p = t.onTransmuxerLog;
                var m = 0;
                var v = false;
                return function(e, t) {
                    if (v) {
                        return;
                    }
                    if (e) {
                        v = true;
                        sj(i);
                        return f(e, t);
                    }
                    m += 1;
                    if (m === i.length) {
                        var g = function e() {
                            if (t.encryptedBytes) {
                                return sG({
                                    decryptionWorker: r,
                                    segment: t,
                                    trackInfoFn: n,
                                    timingInfoFn: a,
                                    videoSegmentTimingInfoFn: s,
                                    audioSegmentTimingInfoFn: o,
                                    id3Fn: u,
                                    captionsFn: l,
                                    isEndOfTimeline: d,
                                    endedTimelineFn: c,
                                    dataFn: h,
                                    doneFn: f,
                                    onTransmuxerLog: p
                                });
                            }
                            s5({
                                segment: t,
                                bytes: t.bytes,
                                trackInfoFn: n,
                                timingInfoFn: a,
                                videoSegmentTimingInfoFn: s,
                                audioSegmentTimingInfoFn: o,
                                id3Fn: u,
                                captionsFn: l,
                                isEndOfTimeline: d,
                                endedTimelineFn: c,
                                dataFn: h,
                                doneFn: f,
                                onTransmuxerLog: p
                            });
                        };
                        t.endOfAllRequests = Date.now();
                        if (t.map && t.map.encryptedBytes && !t.map.bytes) {
                            return sz({
                                decryptionWorker: r,
                                id: t.requestId + "-init",
                                encryptedBytes: t.map.encryptedBytes,
                                key: t.map.key
                            }, function(e) {
                                t.map.bytes = e;
                                sV(t, function(e) {
                                    if (e) {
                                        sj(i);
                                        return f(e, t);
                                    }
                                    g();
                                });
                            });
                        }
                        g();
                    }
                };
            };
            var sZ = function e(t) {
                var i = t.loadendState, r = t.abortFn;
                return function(e) {
                    var t = e.target;
                    if (t.aborted && r && !i.calledAbortFn) {
                        r();
                        i.calledAbortFn = true;
                    }
                };
            };
            var sQ = function e(t) {
                var i = t.segment, r = t.progressFn;
                t.trackInfoFn;
                t.timingInfoFn;
                t.videoSegmentTimingInfoFn;
                t.audioSegmentTimingInfoFn;
                t.id3Fn;
                t.captionsFn;
                t.isEndOfTimeline;
                t.endedTimelineFn;
                t.dataFn;
                return function(e) {
                    var t = e.target;
                    if (t.aborted) {
                        return;
                    }
                    i.stats = nq.mergeOptions(i.stats, sH(e));
                    if (!i.stats.firstBytesReceivedAt && i.stats.bytesReceived) {
                        i.stats.firstBytesReceivedAt = Date.now();
                    }
                    return r(e, i);
                };
            };
            var s7 = function e(t) {
                var i = t.xhr, r = t.xhrOptions, n = t.decryptionWorker, a = t.segment, s = t.abortFn, o = t.progressFn, u = t.trackInfoFn, l = t.timingInfoFn, d = t.videoSegmentTimingInfoFn, c = t.audioSegmentTimingInfoFn, h = t.id3Fn, f = t.captionsFn, p = t.isEndOfTimeline, m = t.endedTimelineFn, v = t.dataFn, g = t.doneFn, $ = t.onTransmuxerLog;
                var y = [];
                var T = sK({
                    activeXhrs: y,
                    decryptionWorker: n,
                    trackInfoFn: u,
                    timingInfoFn: l,
                    videoSegmentTimingInfoFn: d,
                    audioSegmentTimingInfoFn: c,
                    id3Fn: h,
                    captionsFn: f,
                    isEndOfTimeline: p,
                    endedTimelineFn: m,
                    dataFn: v,
                    doneFn: g,
                    onTransmuxerLog: $
                });
                if (a.key && !a.key.bytes) {
                    var b = [
                        a.key
                    ];
                    if (a.map && !a.map.bytes && a.map.key && a.map.key.resolvedUri === a.key.resolvedUri) {
                        b.push(a.map.key);
                    }
                    var x = nq.mergeOptions(r, {
                        uri: a.key.resolvedUri,
                        responseType: "arraybuffer"
                    });
                    var S = sq(a, b, T);
                    var k = i(x, S);
                    y.push(k);
                }
                if (a.map && !a.map.bytes) {
                    var C = a.map.key && (!a.key || a.key.resolvedUri !== a.map.key.resolvedUri);
                    if (C) {
                        var E = nq.mergeOptions(r, {
                            uri: a.map.key.resolvedUri,
                            responseType: "arraybuffer"
                        });
                        var w = sq(a, [
                            a.map.key
                        ], T);
                        var I = i(E, w);
                        y.push(I);
                    }
                    var P = nq.mergeOptions(r, {
                        uri: a.map.resolvedUri,
                        responseType: "arraybuffer",
                        headers: az(a.map)
                    });
                    var _ = sW({
                        segment: a,
                        finishProcessingFn: T
                    });
                    var L = i(P, _);
                    y.push(L);
                }
                var A = nq.mergeOptions(r, {
                    uri: (a.part && a.part.resolvedUri) || a.resolvedUri,
                    responseType: "arraybuffer",
                    headers: az(a)
                });
                var D = s3({
                    segment: a,
                    finishProcessingFn: T,
                    responseType: A.responseType
                });
                var O = i(A, D);
                O.addEventListener("progress", sQ({
                    segment: a,
                    progressFn: o,
                    trackInfoFn: u,
                    timingInfoFn: l,
                    videoSegmentTimingInfoFn: d,
                    audioSegmentTimingInfoFn: c,
                    id3Fn: h,
                    captionsFn: f,
                    isEndOfTimeline: p,
                    endedTimelineFn: m,
                    dataFn: v
                }));
                y.push(O);
                var R = {};
                y.forEach(function(e) {
                    e.addEventListener("loadend", sZ({
                        loadendState: R,
                        abortFn: s
                    }));
                });
                return function() {
                    return sj(y);
                };
            };
            var sX = n5("CodecUtils");
            var sY = function e(t) {
                var i = t.attributes || {};
                if (i.CODECS) {
                    return (0, x.kS)(i.CODECS);
                }
            };
            var s9 = function e(t, i) {
                var r = i.attributes || {};
                return (t && t.mediaGroups && t.mediaGroups.AUDIO && r.AUDIO && t.mediaGroups.AUDIO[r.AUDIO]);
            };
            var sJ = function e(t, i) {
                if (!s9(t, i)) {
                    return true;
                }
                var r = i.attributes || {};
                var n = t.mediaGroups.AUDIO[r.AUDIO];
                for(var a in n){
                    if (!n[a].uri && !n[a].playlists) {
                        return true;
                    }
                }
                return false;
            };
            var oe = function e(t) {
                var i = {};
                t.forEach(function(e) {
                    var t = e.mediaType, r = e.type, n = e.details;
                    i[t] = i[t] || [];
                    i[t].push((0, x.ws)("" + r + n));
                });
                Object.keys(i).forEach(function(e) {
                    if (i[e].length > 1) {
                        sX("multiple " + e + " codecs found as attributes: " + i[e].join(", ") + ". Setting playlist codecs to null so that we wait for mux.js to probe segments for real codecs.");
                        i[e] = null;
                        return;
                    }
                    i[e] = i[e][0];
                });
                return i;
            };
            var ot = function e(t) {
                var i = 0;
                if (t.audio) {
                    i++;
                }
                if (t.video) {
                    i++;
                }
                return i;
            };
            var oi = function e(t, i) {
                var r = i.attributes || {};
                var n = oe(sY(i) || []);
                if (s9(t, i) && !n.audio) {
                    if (!sJ(t, i)) {
                        var a = oe((0, x.Jg)(t, r.AUDIO) || []);
                        if (a.audio) {
                            n.audio = a.audio;
                        }
                    }
                }
                return n;
            };
            var or = n5("PlaylistSelector");
            var on = function e(t) {
                if (!t || !t.playlist) {
                    return;
                }
                var i = t.playlist;
                return JSON.stringify({
                    id: i.id,
                    bandwidth: t.bandwidth,
                    width: t.width,
                    height: t.height,
                    codecs: (i.attributes && i.attributes.CODECS) || ""
                });
            };
            var oa = function e(t, i) {
                if (!t) {
                    return "";
                }
                var r = n().getComputedStyle(t);
                if (!r) {
                    return "";
                }
                return r[i];
            };
            var os = function e(t, i) {
                var r = t.slice();
                t.sort(function(e, t) {
                    var n = i(e, t);
                    if (n === 0) {
                        return r.indexOf(e) - r.indexOf(t);
                    }
                    return n;
                });
            };
            var oo = function e(t, i) {
                var r;
                var a;
                if (t.attributes.BANDWIDTH) {
                    r = t.attributes.BANDWIDTH;
                }
                r = r || n().Number.MAX_VALUE;
                if (i.attributes.BANDWIDTH) {
                    a = i.attributes.BANDWIDTH;
                }
                a = a || n().Number.MAX_VALUE;
                return r - a;
            };
            var ou = function e(t, i) {
                var r;
                var a;
                if (t.attributes.RESOLUTION && t.attributes.RESOLUTION.width) {
                    r = t.attributes.RESOLUTION.width;
                }
                r = r || n().Number.MAX_VALUE;
                if (i.attributes.RESOLUTION && i.attributes.RESOLUTION.width) {
                    a = i.attributes.RESOLUTION.width;
                }
                a = a || n().Number.MAX_VALUE;
                if (r === a && t.attributes.BANDWIDTH && i.attributes.BANDWIDTH) {
                    return (t.attributes.BANDWIDTH - i.attributes.BANDWIDTH);
                }
                return r - a;
            };
            var ol = function e(t, i, r, a, s, o) {
                if (!t) {
                    return;
                }
                var u = {
                    bandwidth: i,
                    width: r,
                    height: a,
                    limitRenditionByPlayerDimensions: s
                };
                var l = t.playlists;
                if (aw.isAudioOnly(t)) {
                    l = o.getAudioTrackPlaylists_();
                    u.audioOnly = true;
                }
                var d = l.map(function(e) {
                    var t;
                    var i = e.attributes && e.attributes.RESOLUTION && e.attributes.RESOLUTION.width;
                    var r = e.attributes && e.attributes.RESOLUTION && e.attributes.RESOLUTION.height;
                    t = e.attributes && e.attributes.BANDWIDTH;
                    t = t || n().Number.MAX_VALUE;
                    return {
                        bandwidth: t,
                        width: i,
                        height: r,
                        playlist: e
                    };
                });
                os(d, function(e, t) {
                    return e.bandwidth - t.bandwidth;
                });
                d = d.filter(function(e) {
                    return !aw.isIncompatible(e.playlist);
                });
                var c = d.filter(function(e) {
                    return aw.isEnabled(e.playlist);
                });
                if (!c.length) {
                    c = d.filter(function(e) {
                        return !aw.isDisabled(e.playlist);
                    });
                }
                var h = c.filter(function(e) {
                    return (e.bandwidth * sT.BANDWIDTH_VARIANCE < i);
                });
                var f = h[h.length - 1];
                var p = h.filter(function(e) {
                    return (e.bandwidth === f.bandwidth);
                })[0];
                if (s === false) {
                    var m = p || c[0] || d[0];
                    if (m && m.playlist) {
                        var v = "sortedPlaylistReps";
                        if (p) {
                            v = "bandwidthBestRep";
                        }
                        if (c[0]) {
                            v = "enabledPlaylistReps";
                        }
                        or("choosing " + on(m) + " using " + v + " with options", u);
                        return m.playlist;
                    }
                    or("could not choose a playlist with options", u);
                    return null;
                }
                var g = h.filter(function(e) {
                    return e.width && e.height;
                });
                os(g, function(e, t) {
                    return e.width - t.width;
                });
                var $ = g.filter(function(e) {
                    return (e.width === r && e.height === a);
                });
                f = $[$.length - 1];
                var y = $.filter(function(e) {
                    return (e.bandwidth === f.bandwidth);
                })[0];
                var T;
                var b;
                var x;
                if (!y) {
                    T = g.filter(function(e) {
                        return (e.width > r || e.height > a);
                    });
                    b = T.filter(function(e) {
                        return (e.width === T[0].width && e.height === T[0].height);
                    });
                    f = b[b.length - 1];
                    x = b.filter(function(e) {
                        return (e.bandwidth === f.bandwidth);
                    })[0];
                }
                var S;
                if (o.experimentalLeastPixelDiffSelector) {
                    var k = g.map(function(e) {
                        e.pixelDiff = Math.abs(e.width - r) + Math.abs(e.height - a);
                        return e;
                    });
                    os(k, function(e, t) {
                        if (e.pixelDiff === t.pixelDiff) {
                            return t.bandwidth - e.bandwidth;
                        }
                        return e.pixelDiff - t.pixelDiff;
                    });
                    S = k[0];
                }
                var C = S || x || y || p || c[0] || d[0];
                if (C && C.playlist) {
                    var E = "sortedPlaylistReps";
                    if (S) {
                        E = "leastPixelDiffRep";
                    } else if (x) {
                        E = "resolutionPlusOneRep";
                    } else if (y) {
                        E = "resolutionBestRep";
                    } else if (p) {
                        E = "bandwidthBestRep";
                    } else if (c[0]) {
                        E = "enabledPlaylistReps";
                    }
                    or("choosing " + on(C) + " using " + E + " with options", u);
                    return C.playlist;
                }
                or("could not choose a playlist with options", u);
                return null;
            };
            var od = function e() {
                var t = this.useDevicePixelRatio ? n().devicePixelRatio || 1 : 1;
                return ol(this.playlists.master, this.systemBandwidth, parseInt(oa(this.tech_.el(), "width"), 10) * t, parseInt(oa(this.tech_.el(), "height"), 10) * t, this.limitRenditionByPlayerDimensions, this.masterPlaylistController_);
            };
            var oc = function e(t) {
                var i = -1;
                var r = -1;
                if (t < 0 || t > 1) {
                    throw new Error("Moving average bandwidth decay must be between 0 and 1.");
                }
                return function() {
                    var e = this.useDevicePixelRatio ? n().devicePixelRatio || 1 : 1;
                    if (i < 0) {
                        i = this.systemBandwidth;
                        r = this.systemBandwidth;
                    }
                    if (this.systemBandwidth > 0 && this.systemBandwidth !== r) {
                        i = t * this.systemBandwidth + (1 - t) * i;
                        r = this.systemBandwidth;
                    }
                    return ol(this.playlists.master, i, parseInt(oa(this.tech_.el(), "width"), 10) * e, parseInt(oa(this.tech_.el(), "height"), 10) * e, this.limitRenditionByPlayerDimensions, this.masterPlaylistController_);
                };
            };
            var oh = function e(t) {
                var i = t.master, r = t.currentTime, n = t.bandwidth, a = t.duration, s = t.segmentDuration, o = t.timeUntilRebuffer, u = t.currentTimeline, l = t.syncController;
                var d = i.playlists.filter(function(e) {
                    return !aw.isIncompatible(e);
                });
                var c = d.filter(aw.isEnabled);
                if (!c.length) {
                    c = d.filter(function(e) {
                        return !aw.isDisabled(e);
                    });
                }
                var h = c.filter(aw.hasAttribute.bind(null, "BANDWIDTH"));
                var f = h.map(function(e) {
                    var t = l.getSyncPoint(e, a, u, r);
                    var i = t ? 1 : 2;
                    var d = aw.estimateSegmentRequestTime(s, n, e);
                    var c = d * i - o;
                    return {
                        playlist: e,
                        rebufferingImpact: c
                    };
                });
                var p = f.filter(function(e) {
                    return e.rebufferingImpact <= 0;
                });
                os(p, function(e, t) {
                    return oo(t.playlist, e.playlist);
                });
                if (p.length) {
                    return p[0];
                }
                os(f, function(e, t) {
                    return e.rebufferingImpact - t.rebufferingImpact;
                });
                return f[0] || null;
            };
            var of = function e() {
                var t = this;
                var i = this.playlists.master.playlists.filter(aw.isEnabled);
                os(i, function(e, t) {
                    return oo(e, t);
                });
                var r = i.filter(function(e) {
                    return !!oi(t.playlists.master, e).video;
                });
                return r[0] || null;
            };
            var op = function e(t) {
                var i = 0;
                var r;
                if (t.bytes) {
                    r = new Uint8Array(t.bytes);
                    t.segments.forEach(function(e) {
                        r.set(e, i);
                        i += e.byteLength;
                    });
                }
                return r;
            };
            var om = function e(t, i, r) {
                if (!t[r]) {
                    i.trigger({
                        type: "usage",
                        name: "vhs-608"
                    });
                    i.trigger({
                        type: "usage",
                        name: "hls-608"
                    });
                    var n = r;
                    if (/^cc708_/.test(r)) {
                        n = "SERVICE" + r.split("_")[1];
                    }
                    var a = i.textTracks().getTrackById(n);
                    if (a) {
                        t[r] = a;
                    } else {
                        var s = (i.options_.vhs && i.options_.vhs.captionServices) || {};
                        var o = r;
                        var u = r;
                        var l = false;
                        var d = s[n];
                        if (d) {
                            o = d.label;
                            u = d.language;
                            l = d["default"];
                        }
                        t[r] = i.addRemoteTextTrack({
                            kind: "captions",
                            id: n,
                            default: l,
                            label: o,
                            language: u
                        }, false).track;
                    }
                }
            };
            var ov = function e(t) {
                var i = t.inbandTextTracks, r = t.captionArray, a = t.timestampOffset;
                if (!r) {
                    return;
                }
                var s = n().WebKitDataCue || n().VTTCue;
                r.forEach(function(e) {
                    var t = e.stream;
                    i[t].addCue(new s(e.startTime + a, e.endTime + a, e.text));
                });
            };
            var og = function e(t) {
                Object.defineProperties(t.frame, {
                    id: {
                        get: function e() {
                            nq.log.warn("cue.frame.id is deprecated. Use cue.value.key instead.");
                            return t.value.key;
                        }
                    },
                    value: {
                        get: function e() {
                            nq.log.warn("cue.frame.value is deprecated. Use cue.value.data instead.");
                            return t.value.data;
                        }
                    },
                    privateData: {
                        get: function e() {
                            nq.log.warn("cue.frame.privateData is deprecated. Use cue.value.data instead.");
                            return t.value.data;
                        }
                    }
                });
            };
            var o$ = function e(t) {
                var i = t.inbandTextTracks, r = t.metadataArray, a = t.timestampOffset, s = t.videoDuration;
                if (!r) {
                    return;
                }
                var o = n().WebKitDataCue || n().VTTCue;
                var u = i.metadataTrack_;
                if (!u) {
                    return;
                }
                r.forEach(function(e) {
                    var t = e.cueTime + a;
                    if (typeof t !== "number" || n().isNaN(t) || t < 0 || !(t < Infinity)) {
                        return;
                    }
                    e.frames.forEach(function(e) {
                        var i = new o(t, t, e.value || e.url || e.data || "");
                        i.frame = e;
                        i.value = e;
                        og(i);
                        u.addCue(i);
                    });
                });
                if (!u.cues || !u.cues.length) {
                    return;
                }
                var l = u.cues;
                var d = [];
                for(var c = 0; c < l.length; c++){
                    if (l[c]) {
                        d.push(l[c]);
                    }
                }
                var h = d.reduce(function(e, t) {
                    var i = e[t.startTime] || [];
                    i.push(t);
                    e[t.startTime] = i;
                    return e;
                }, {});
                var f = Object.keys(h).sort(function(e, t) {
                    return Number(e) - Number(t);
                });
                f.forEach(function(e, t) {
                    var i = h[e];
                    var r = Number(f[t + 1]) || s;
                    i.forEach(function(e) {
                        e.endTime = r;
                    });
                });
            };
            var o8 = function e(t, i, r) {
                if (t.metadataTrack_) {
                    return;
                }
                t.metadataTrack_ = r.addRemoteTextTrack({
                    kind: "metadata",
                    label: "Timed Metadata"
                }, false).track;
                t.metadataTrack_.inBandMetadataTrackDispatchType = i;
            };
            var oy = function e(t, i, r) {
                var n;
                var a;
                if (!r) {
                    return;
                }
                if (!r.cues) {
                    return;
                }
                n = r.cues.length;
                while(n--){
                    a = r.cues[n];
                    if (a.startTime >= t && a.endTime <= i) {
                        r.removeCue(a);
                    }
                }
            };
            var oT = function e(t) {
                var i = t.cues;
                if (!i) {
                    return;
                }
                for(var r = 0; r < i.length; r++){
                    var n = [];
                    var a = 0;
                    for(var s = 0; s < i.length; s++){
                        if (i[r].startTime === i[s].startTime && i[r].endTime === i[s].endTime && i[r].text === i[s].text) {
                            a++;
                            if (a > 1) {
                                n.push(i[s]);
                            }
                        }
                    }
                    if (n.length) {
                        n.forEach(function(e) {
                            return t.removeCue(e);
                        });
                    }
                }
            };
            var ob = function e(t, i, r) {
                if (typeof i === "undefined" || i === null || !t.length) {
                    return [];
                }
                var n = Math.ceil((i - r + 3) * _.ONE_SECOND_IN_TS);
                var a;
                for(a = 0; a < t.length; a++){
                    if (t[a].pts > n) {
                        break;
                    }
                }
                return t.slice(a);
            };
            var ox = function e(t, i, r) {
                if (!i.length) {
                    return t;
                }
                if (r) {
                    return i.slice();
                }
                var n = i[0].pts;
                var a = 0;
                for(a; a < t.length; a++){
                    if (t[a].pts >= n) {
                        break;
                    }
                }
                return t.slice(0, a).concat(i);
            };
            var oS = function e(t, i, r, n) {
                var a = Math.ceil((i - n) * _.ONE_SECOND_IN_TS);
                var s = Math.ceil((r - n) * _.ONE_SECOND_IN_TS);
                var o = t.slice();
                var u = t.length;
                while(u--){
                    if (t[u].pts <= s) {
                        break;
                    }
                }
                if (u === -1) {
                    return o;
                }
                var l = u + 1;
                while(l--){
                    if (t[l].pts <= a) {
                        break;
                    }
                }
                l = Math.max(l, 0);
                o.splice(l, u - l + 1);
                return o;
            };
            var ok = function e(t, i) {
                if ((!t && !i) || (!t && i) || (t && !i)) {
                    return false;
                }
                if (t === i) {
                    return true;
                }
                var r = Object.keys(t).sort();
                var n = Object.keys(i).sort();
                if (r.length !== n.length) {
                    return false;
                }
                for(var a = 0; a < r.length; a++){
                    var s = r[a];
                    if (s !== n[a]) {
                        return false;
                    }
                    if (t[s] !== i[s]) {
                        return false;
                    }
                }
                return true;
            };
            var oC = 22;
            var oE = function e(t, i, r) {
                i = i || [];
                var n = [];
                var a = 0;
                for(var s = 0; s < i.length; s++){
                    var o = i[s];
                    if (t === o.timeline) {
                        n.push(s);
                        a += o.duration;
                        if (a > r) {
                            return s;
                        }
                    }
                }
                if (n.length === 0) {
                    return 0;
                }
                return n[n.length - 1];
            };
            var ow = 1;
            var oI = 500;
            var oP = function e(t) {
                return typeof t === "number" && isFinite(t);
            };
            var o_ = 1 / 60;
            var oL = function e(t, i, r) {
                if (t !== "main" || !i || !r) {
                    return null;
                }
                if (!r.hasAudio && !r.hasVideo) {
                    return "Neither audio nor video found in segment.";
                }
                if (i.hasVideo && !r.hasVideo) {
                    return ("Only audio found in segment when we expected video." + " We can't switch to audio only from a stream that had video." + " To get rid of this message, please add codec information to the manifest.");
                }
                if (!i.hasVideo && r.hasVideo) {
                    return ("Video found in segment when we expected only audio." + " We can't switch to a stream with video from an audio only stream." + " To get rid of this message, please add codec information to the manifest.");
                }
                return null;
            };
            var oA = function e(t, i, r) {
                var n = i - sT.BACK_BUFFER_LENGTH;
                if (t.length) {
                    n = Math.max(n, t.start(0));
                }
                var a = i - r;
                return Math.min(a, n);
            };
            var oD = function e(t) {
                var i = t.startOfSegment, r = t.duration, n = t.segment, a = t.part, s = t.playlist, o = s.mediaSequence, u = s.id, l = s.segments, d = l === void 0 ? [] : l, c = t.mediaIndex, h = t.partIndex, f = t.timeline;
                var p = d.length - 1;
                var m = "mediaIndex/partIndex increment";
                if (t.getMediaInfoForTime) {
                    m = "getMediaInfoForTime (" + t.getMediaInfoForTime + ")";
                } else if (t.isSyncRequest) {
                    m = "getSyncSegmentCandidate (isSyncRequest)";
                }
                if (t.independent) {
                    m += " with independent " + t.independent;
                }
                var v = typeof h === "number";
                var g = t.segment.uri ? "segment" : "pre-segment";
                var $ = v ? ao({
                    preloadSegment: n
                }) - 1 : 0;
                return (g + " [" + (o + c) + "/" + (o + p) + "]" + (v ? " part [" + h + "/" + $ + "]" : "") + (" segment start/end [" + n.start + " => " + n.end + "]") + (v ? " part start/end [" + a.start + " => " + a.end + "]" : "") + (" startOfSegment [" + i + "]") + (" duration [" + r + "]") + (" timeline [" + f + "]") + (" selected by [" + m + "]") + (" playlist [" + u + "]"));
            };
            var oO = function e(t) {
                return t + "TimingInfo";
            };
            var oR = function e(t) {
                var i = t.segmentTimeline, r = t.currentTimeline, n = t.startOfSegment, a = t.buffered, s = t.overrideCheck;
                if (!s && i === r) {
                    return null;
                }
                if (i < r) {
                    return n;
                }
                return a.length ? a.end(a.length - 1) : n;
            };
            var oM = function e(t) {
                var i = t.timelineChangeController, r = t.currentTimeline, n = t.segmentTimeline, a = t.loaderType, s = t.audioDisabled;
                if (r === n) {
                    return false;
                }
                if (a === "audio") {
                    var o = i.lastTimelineChange({
                        type: "main"
                    });
                    return (!o || o.to !== n);
                }
                if (a === "main" && s) {
                    var u = i.pendingTimelineChange({
                        type: "audio"
                    });
                    if (u && u.to === n) {
                        return false;
                    }
                    return true;
                }
                return false;
            };
            var o0 = function e(t, i) {
                var r = t && typeof t.start === "number" && typeof t.end === "number" ? t.end - t.start : 0;
                var n = i && typeof i.start === "number" && typeof i.end === "number" ? i.end - i.start : 0;
                return Math.max(r, n);
            };
            var oU = function e(t) {
                var i = t.segmentDuration, r = t.maxDuration;
                if (!i) {
                    return false;
                }
                return (Math.round(i) > r + nz);
            };
            var oB = function e(t, i) {
                if (i !== "hls") {
                    return null;
                }
                var r = o0(t.audioTimingInfo, t.videoTimingInfo);
                if (!r) {
                    return null;
                }
                var n = t.playlist.targetDuration;
                var a = oU({
                    segmentDuration: r,
                    maxDuration: n * 2
                });
                var s = oU({
                    segmentDuration: r,
                    maxDuration: n
                });
                var o = "Segment with index " + t.mediaIndex + " " + ("from playlist " + t.playlist.id + " ") + ("has a duration of " + r + " ") + ("when the reported duration is " + t.duration + " ") + ("and the target duration is " + n + ". ") + "For HLS content, a duration in excess of the target duration may result in " + "playback issues. See the HLS specification section on EXT-X-TARGETDURATION for " + "more details: " + "https://tools.ietf.org/html/draft-pantos-http-live-streaming-23#section-4.3.3.1";
                if (a || s) {
                    return {
                        severity: a ? "warn" : "info",
                        message: o
                    };
                }
                return null;
            };
            var oF = (function(e) {
                (0, l.Z)(t, e);
                function t(t, i) {
                    var r;
                    r = e.call(this) || this;
                    if (!t) {
                        throw new TypeError("Initialization settings are required");
                    }
                    if (typeof t.currentTime !== "function") {
                        throw new TypeError("No currentTime getter specified");
                    }
                    if (!t.mediaSource) {
                        throw new TypeError("No MediaSource specified");
                    }
                    r.bandwidth = t.bandwidth;
                    r.throughput = {
                        rate: 0,
                        count: 0
                    };
                    r.roundTrip = NaN;
                    r.resetStats_();
                    r.mediaIndex = null;
                    r.partIndex = null;
                    r.hasPlayed_ = t.hasPlayed;
                    r.currentTime_ = t.currentTime;
                    r.seekable_ = t.seekable;
                    r.seeking_ = t.seeking;
                    r.duration_ = t.duration;
                    r.mediaSource_ = t.mediaSource;
                    r.vhs_ = t.vhs;
                    r.loaderType_ = t.loaderType;
                    r.currentMediaInfo_ = void 0;
                    r.startingMediaInfo_ = void 0;
                    r.segmentMetadataTrack_ = t.segmentMetadataTrack;
                    r.goalBufferLength_ = t.goalBufferLength;
                    r.sourceType_ = t.sourceType;
                    r.sourceUpdater_ = t.sourceUpdater;
                    r.inbandTextTracks_ = t.inbandTextTracks;
                    r.state_ = "INIT";
                    r.timelineChangeController_ = t.timelineChangeController;
                    r.shouldSaveSegmentTimingInfo_ = true;
                    r.parse708captions_ = t.parse708captions;
                    r.captionServices_ = t.captionServices;
                    r.experimentalExactManifestTimings = t.experimentalExactManifestTimings;
                    r.checkBufferTimeout_ = null;
                    r.error_ = void 0;
                    r.currentTimeline_ = -1;
                    r.pendingSegment_ = null;
                    r.xhrOptions_ = null;
                    r.pendingSegments_ = [];
                    r.audioDisabled_ = false;
                    r.isPendingTimestampOffset_ = false;
                    r.gopBuffer_ = [];
                    r.timeMapping_ = 0;
                    r.safeAppend_ = nq.browser.IE_VERSION >= 11;
                    r.appendInitSegment_ = {
                        audio: true,
                        video: true
                    };
                    r.playlistOfLastInitSegment_ = {
                        audio: null,
                        video: null
                    };
                    r.callQueue_ = [];
                    r.loadQueue_ = [];
                    r.metadataQueue_ = {
                        id3: [],
                        caption: []
                    };
                    r.waitingOnRemove_ = false;
                    r.quotaExceededErrorRetryTimeout_ = null;
                    r.activeInitSegmentId_ = null;
                    r.initSegments_ = {};
                    r.cacheEncryptionKeys_ = t.cacheEncryptionKeys;
                    r.keyCache_ = {};
                    r.decrypter_ = t.decrypter;
                    r.syncController_ = t.syncController;
                    r.syncPoint_ = {
                        segmentIndex: 0,
                        time: 0
                    };
                    r.transmuxer_ = r.createTransmuxer_();
                    r.triggerSyncInfoUpdate_ = function() {
                        return r.trigger("syncinfoupdate");
                    };
                    r.syncController_.on("syncinfoupdate", r.triggerSyncInfoUpdate_);
                    r.mediaSource_.addEventListener("sourceopen", function() {
                        if (!r.isEndOfStream_()) {
                            r.ended_ = false;
                        }
                    });
                    r.fetchAtBuffer_ = false;
                    r.logger_ = n5("SegmentLoader[" + r.loaderType_ + "]");
                    Object.defineProperty((0, u.Z)(r), "state", {
                        get: function e() {
                            return this.state_;
                        },
                        set: function e(t) {
                            if (t !== this.state_) {
                                this.logger_(this.state_ + " -> " + t);
                                this.state_ = t;
                                this.trigger("statechange");
                            }
                        }
                    });
                    r.sourceUpdater_.on("ready", function() {
                        if (r.hasEnoughInfoToAppend_()) {
                            r.processCallQueue_();
                        }
                    });
                    if (r.loaderType_ === "main") {
                        r.timelineChangeController_.on("pendingtimelinechange", function() {
                            if (r.hasEnoughInfoToAppend_()) {
                                r.processCallQueue_();
                            }
                        });
                    }
                    if (r.loaderType_ === "audio") {
                        r.timelineChangeController_.on("timelinechange", function() {
                            if (r.hasEnoughInfoToLoad_()) {
                                r.processLoadQueue_();
                            }
                            if (r.hasEnoughInfoToAppend_()) {
                                r.processCallQueue_();
                            }
                        });
                    }
                    return r;
                }
                var i = t.prototype;
                i.createTransmuxer_ = function e() {
                    return sF.createTransmuxer({
                        remux: false,
                        alignGopsAtEnd: this.safeAppend_,
                        keepOriginalTimestamps: true,
                        parse708captions: this.parse708captions_,
                        captionServices: this.captionServices_
                    });
                };
                i.resetStats_ = function e() {
                    this.mediaBytesTransferred = 0;
                    this.mediaRequests = 0;
                    this.mediaRequestsAborted = 0;
                    this.mediaRequestsTimedout = 0;
                    this.mediaRequestsErrored = 0;
                    this.mediaTransferDuration = 0;
                    this.mediaSecondsLoaded = 0;
                    this.mediaAppends = 0;
                };
                i.dispose = function e() {
                    this.trigger("dispose");
                    this.state = "DISPOSED";
                    this.pause();
                    this.abort_();
                    if (this.transmuxer_) {
                        this.transmuxer_.terminate();
                    }
                    this.resetStats_();
                    if (this.checkBufferTimeout_) {
                        n().clearTimeout(this.checkBufferTimeout_);
                    }
                    if (this.syncController_ && this.triggerSyncInfoUpdate_) {
                        this.syncController_.off("syncinfoupdate", this.triggerSyncInfoUpdate_);
                    }
                    this.off();
                };
                i.setAudio = function e(t) {
                    this.audioDisabled_ = !t;
                    if (t) {
                        this.appendInitSegment_.audio = true;
                    } else {
                        this.sourceUpdater_.removeAudio(0, this.duration_());
                    }
                };
                i.abort = function e() {
                    if (this.state !== "WAITING") {
                        if (this.pendingSegment_) {
                            this.pendingSegment_ = null;
                        }
                        return;
                    }
                    this.abort_();
                    this.state = "READY";
                    if (!this.paused()) {
                        this.monitorBuffer_();
                    }
                };
                i.abort_ = function e() {
                    if (this.pendingSegment_ && this.pendingSegment_.abortRequests) {
                        this.pendingSegment_.abortRequests();
                    }
                    this.pendingSegment_ = null;
                    this.callQueue_ = [];
                    this.loadQueue_ = [];
                    this.metadataQueue_.id3 = [];
                    this.metadataQueue_.caption = [];
                    this.timelineChangeController_.clearPendingTimelineChange(this.loaderType_);
                    this.waitingOnRemove_ = false;
                    n().clearTimeout(this.quotaExceededErrorRetryTimeout_);
                    this.quotaExceededErrorRetryTimeout_ = null;
                };
                i.checkForAbort_ = function e(t) {
                    if (this.state === "APPENDING" && !this.pendingSegment_) {
                        this.state = "READY";
                        return true;
                    }
                    if (!this.pendingSegment_ || this.pendingSegment_.requestId !== t) {
                        return true;
                    }
                    return false;
                };
                i.error = function e(t) {
                    if (typeof t !== "undefined") {
                        this.logger_("error occurred:", t);
                        this.error_ = t;
                    }
                    this.pendingSegment_ = null;
                    return this.error_;
                };
                i.endOfStream = function e() {
                    this.ended_ = true;
                    if (this.transmuxer_) {
                        sF.reset(this.transmuxer_);
                    }
                    this.gopBuffer_.length = 0;
                    this.pause();
                    this.trigger("ended");
                };
                i.buffered_ = function e() {
                    var t = this.getMediaInfo_();
                    if (!this.sourceUpdater_ || !t) {
                        return nq.createTimeRanges();
                    }
                    if (this.loaderType_ === "main") {
                        var i = t.hasAudio, r = t.hasVideo, n = t.isMuxed;
                        if (r && i && !this.audioDisabled_ && !n) {
                            return this.sourceUpdater_.buffered();
                        }
                        if (r) {
                            return this.sourceUpdater_.videoBuffered();
                        }
                    }
                    return this.sourceUpdater_.audioBuffered();
                };
                i.initSegmentForMap = function e(t, i) {
                    if (i === void 0) {
                        i = false;
                    }
                    if (!t) {
                        return null;
                    }
                    var r = a7(t);
                    var n = this.initSegments_[r];
                    if (i && !n && t.bytes) {
                        this.initSegments_[r] = n = {
                            resolvedUri: t.resolvedUri,
                            byterange: t.byterange,
                            bytes: t.bytes,
                            tracks: t.tracks,
                            timescales: t.timescales
                        };
                    }
                    return n || t;
                };
                i.segmentKey = function e(t, i) {
                    if (i === void 0) {
                        i = false;
                    }
                    if (!t) {
                        return null;
                    }
                    var r = aX(t);
                    var n = this.keyCache_[r];
                    if (this.cacheEncryptionKeys_ && i && !n && t.bytes) {
                        this.keyCache_[r] = n = {
                            resolvedUri: t.resolvedUri,
                            bytes: t.bytes
                        };
                    }
                    var a = {
                        resolvedUri: (n || t).resolvedUri
                    };
                    if (n) {
                        a.bytes = n.bytes;
                    }
                    return a;
                };
                i.couldBeginLoading_ = function e() {
                    return this.playlist_ && !this.paused();
                };
                i.load = function e() {
                    this.monitorBuffer_();
                    if (!this.playlist_) {
                        return;
                    }
                    if (this.state === "INIT" && this.couldBeginLoading_()) {
                        return this.init_();
                    }
                    if (!this.couldBeginLoading_() || (this.state !== "READY" && this.state !== "INIT")) {
                        return;
                    }
                    this.state = "READY";
                };
                i.init_ = function e() {
                    this.state = "READY";
                    this.resetEverything();
                    return this.monitorBuffer_();
                };
                i.playlist = function e(t, i) {
                    if (i === void 0) {
                        i = {};
                    }
                    if (!t) {
                        return;
                    }
                    var r = this.playlist_;
                    var n = this.pendingSegment_;
                    this.playlist_ = t;
                    this.xhrOptions_ = i;
                    if (this.state === "INIT") {
                        t.syncInfo = {
                            mediaSequence: t.mediaSequence,
                            time: 0
                        };
                        if (this.loaderType_ === "main") {
                            this.syncController_.setDateTimeMappingForStart(t);
                        }
                    }
                    var a = null;
                    if (r) {
                        if (r.id) {
                            a = r.id;
                        } else if (r.uri) {
                            a = r.uri;
                        }
                    }
                    this.logger_("playlist update [" + a + " => " + (t.id || t.uri) + "]");
                    this.trigger("syncinfoupdate");
                    if (this.state === "INIT" && this.couldBeginLoading_()) {
                        return this.init_();
                    }
                    if (!r || r.uri !== t.uri) {
                        if (this.mediaIndex !== null) {
                            if (!t.endList) {
                                this.resetLoader();
                            } else {
                                this.resyncLoader();
                            }
                        }
                        this.currentMediaInfo_ = void 0;
                        this.trigger("playlistupdate");
                        return;
                    }
                    var s = t.mediaSequence - r.mediaSequence;
                    this.logger_("live window shift [" + s + "]");
                    if (this.mediaIndex !== null) {
                        this.mediaIndex -= s;
                        if (this.mediaIndex < 0) {
                            this.mediaIndex = null;
                            this.partIndex = null;
                        } else {
                            var o = this.playlist_.segments[this.mediaIndex];
                            if (this.partIndex && (!o.parts || !o.parts.length || !o.parts[this.partIndex])) {
                                var u = this.mediaIndex;
                                this.logger_("currently processing part (index " + this.partIndex + ") no longer exists.");
                                this.resetLoader();
                                this.mediaIndex = u;
                            }
                        }
                    }
                    if (n) {
                        n.mediaIndex -= s;
                        if (n.mediaIndex < 0) {
                            n.mediaIndex = null;
                            n.partIndex = null;
                        } else {
                            if (n.mediaIndex >= 0) {
                                n.segment = t.segments[n.mediaIndex];
                            }
                            if (n.partIndex >= 0 && n.segment.parts) {
                                n.part = n.segment.parts[n.partIndex];
                            }
                        }
                    }
                    this.syncController_.saveExpiredSegmentInfo(r, t);
                };
                i.pause = function e() {
                    if (this.checkBufferTimeout_) {
                        n().clearTimeout(this.checkBufferTimeout_);
                        this.checkBufferTimeout_ = null;
                    }
                };
                i.paused = function e() {
                    return this.checkBufferTimeout_ === null;
                };
                i.resetEverything = function e(t) {
                    this.ended_ = false;
                    this.appendInitSegment_ = {
                        audio: true,
                        video: true
                    };
                    this.resetLoader();
                    this.remove(0, Infinity, t);
                    if (this.transmuxer_) {
                        this.transmuxer_.postMessage({
                            action: "clearAllMp4Captions"
                        });
                        this.transmuxer_.postMessage({
                            action: "reset"
                        });
                    }
                };
                i.resetLoader = function e() {
                    this.fetchAtBuffer_ = false;
                    this.resyncLoader();
                };
                i.resyncLoader = function e() {
                    if (this.transmuxer_) {
                        sF.reset(this.transmuxer_);
                    }
                    this.mediaIndex = null;
                    this.partIndex = null;
                    this.syncPoint_ = null;
                    this.isPendingTimestampOffset_ = false;
                    this.callQueue_ = [];
                    this.loadQueue_ = [];
                    this.metadataQueue_.id3 = [];
                    this.metadataQueue_.caption = [];
                    this.abort();
                    if (this.transmuxer_) {
                        this.transmuxer_.postMessage({
                            action: "clearParsedMp4Captions"
                        });
                    }
                };
                i.remove = function e(t, i, r, n) {
                    if (r === void 0) {
                        r = function e() {};
                    }
                    if (n === void 0) {
                        n = false;
                    }
                    if (i === Infinity) {
                        i = this.duration_();
                    }
                    if (i <= t) {
                        this.logger_("skipping remove because end ${end} is <= start ${start}");
                        return;
                    }
                    if (!this.sourceUpdater_ || !this.getMediaInfo_()) {
                        this.logger_("skipping remove because no source updater or starting media info");
                        return;
                    }
                    var a = 1;
                    var s = function e() {
                        a--;
                        if (a === 0) {
                            r();
                        }
                    };
                    if (n || !this.audioDisabled_) {
                        a++;
                        this.sourceUpdater_.removeAudio(t, i, s);
                    }
                    if (n || this.loaderType_ === "main") {
                        this.gopBuffer_ = oS(this.gopBuffer_, t, i, this.timeMapping_);
                        a++;
                        this.sourceUpdater_.removeVideo(t, i, s);
                    }
                    for(var o in this.inbandTextTracks_){
                        oy(t, i, this.inbandTextTracks_[o]);
                    }
                    oy(t, i, this.segmentMetadataTrack_);
                    s();
                };
                i.monitorBuffer_ = function e() {
                    if (this.checkBufferTimeout_) {
                        n().clearTimeout(this.checkBufferTimeout_);
                    }
                    this.checkBufferTimeout_ = n().setTimeout(this.monitorBufferTick_.bind(this), 1);
                };
                i.monitorBufferTick_ = function e() {
                    if (this.state === "READY") {
                        this.fillBuffer_();
                    }
                    if (this.checkBufferTimeout_) {
                        n().clearTimeout(this.checkBufferTimeout_);
                    }
                    this.checkBufferTimeout_ = n().setTimeout(this.monitorBufferTick_.bind(this), oI);
                };
                i.fillBuffer_ = function e() {
                    if (this.sourceUpdater_.updating()) {
                        return;
                    }
                    var t = this.chooseNextRequest_();
                    if (!t) {
                        return;
                    }
                    if (typeof t.timestampOffset === "number") {
                        this.isPendingTimestampOffset_ = false;
                        this.timelineChangeController_.pendingTimelineChange({
                            type: this.loaderType_,
                            from: this.currentTimeline_,
                            to: t.timeline
                        });
                    }
                    this.loadSegment_(t);
                };
                i.isEndOfStream_ = function e(t, i, r) {
                    if (t === void 0) {
                        t = this.mediaIndex;
                    }
                    if (i === void 0) {
                        i = this.playlist_;
                    }
                    if (r === void 0) {
                        r = this.partIndex;
                    }
                    if (!i || !this.mediaSource_) {
                        return false;
                    }
                    var n = typeof t === "number" && i.segments[t];
                    var a = t + 1 === i.segments.length;
                    var s = !n || !n.parts || r + 1 === n.parts.length;
                    return (i.endList && this.mediaSource_.readyState === "open" && a && s);
                };
                i.chooseNextRequest_ = function e() {
                    var t = this.buffered_();
                    var i = at(t) || 0;
                    var r = ai(t, this.currentTime_());
                    var n = !this.hasPlayed_() && r >= 1;
                    var a = r >= this.goalBufferLength_();
                    var s = this.playlist_.segments;
                    if (!s.length || n || a) {
                        return null;
                    }
                    this.syncPoint_ = this.syncPoint_ || this.syncController_.getSyncPoint(this.playlist_, this.duration_(), this.currentTimeline_, this.currentTime_());
                    var o = {
                        partIndex: null,
                        mediaIndex: null,
                        startOfSegment: null,
                        playlist: this.playlist_,
                        isSyncRequest: Boolean(!this.syncPoint_)
                    };
                    if (o.isSyncRequest) {
                        o.mediaIndex = oE(this.currentTimeline_, s, i);
                    } else if (this.mediaIndex !== null) {
                        var u = s[this.mediaIndex];
                        var l = typeof this.partIndex === "number" ? this.partIndex : -1;
                        o.startOfSegment = u.end ? u.end : i;
                        if (u.parts && u.parts[l + 1]) {
                            o.mediaIndex = this.mediaIndex;
                            o.partIndex = l + 1;
                        } else {
                            o.mediaIndex = this.mediaIndex + 1;
                        }
                    } else {
                        var d = aw.getMediaInfoForTime({
                            experimentalExactManifestTimings: this.experimentalExactManifestTimings,
                            playlist: this.playlist_,
                            currentTime: this.fetchAtBuffer_ ? i : this.currentTime_(),
                            startingPartIndex: this.syncPoint_.partIndex,
                            startingSegmentIndex: this.syncPoint_.segmentIndex,
                            startTime: this.syncPoint_.time
                        }), c = d.segmentIndex, h = d.startTime, f = d.partIndex;
                        o.getMediaInfoForTime = this.fetchAtBuffer_ ? "bufferedEnd " + i : "currentTime " + this.currentTime_();
                        o.mediaIndex = c;
                        o.startOfSegment = h;
                        o.partIndex = f;
                    }
                    var p = s[o.mediaIndex];
                    var m = p && typeof o.partIndex === "number" && p.parts && p.parts[o.partIndex];
                    if (!p || (typeof o.partIndex === "number" && !m)) {
                        return null;
                    }
                    if (typeof o.partIndex !== "number" && p.parts) {
                        o.partIndex = 0;
                        m = p.parts[0];
                    }
                    if (!r && m && !m.independent) {
                        if (o.partIndex === 0) {
                            var v = s[o.mediaIndex - 1];
                            var g = v.parts && v.parts.length && v.parts[v.parts.length - 1];
                            if (g && g.independent) {
                                o.mediaIndex -= 1;
                                o.partIndex = v.parts.length - 1;
                                o.independent = "previous segment";
                            }
                        } else if (p.parts[o.partIndex - 1].independent) {
                            o.partIndex -= 1;
                            o.independent = "previous part";
                        }
                    }
                    var $ = this.mediaSource_ && this.mediaSource_.readyState === "ended";
                    if (o.mediaIndex >= s.length - 1 && $ && !this.seeking_()) {
                        return null;
                    }
                    return this.generateSegmentInfo_(o);
                };
                i.generateSegmentInfo_ = function e(t) {
                    var i = t.independent, r = t.playlist, n = t.mediaIndex, a = t.startOfSegment, s = t.isSyncRequest, o = t.partIndex, u = t.forceTimestampOffset, l = t.getMediaInfoForTime;
                    var d = r.segments[n];
                    var c = typeof o === "number" && d.parts[o];
                    var h = {
                        requestId: "segment-loader-" + Math.random(),
                        uri: (c && c.resolvedUri) || d.resolvedUri,
                        mediaIndex: n,
                        partIndex: c ? o : null,
                        isSyncRequest: s,
                        startOfSegment: a,
                        playlist: r,
                        bytes: null,
                        encryptedBytes: null,
                        timestampOffset: null,
                        timeline: d.timeline,
                        duration: (c && c.duration) || d.duration,
                        segment: d,
                        part: c,
                        byteLength: 0,
                        transmuxer: this.transmuxer_,
                        getMediaInfoForTime: l,
                        independent: i
                    };
                    var f = typeof u !== "undefined" ? u : this.isPendingTimestampOffset_;
                    h.timestampOffset = this.timestampOffsetForSegment_({
                        segmentTimeline: d.timeline,
                        currentTimeline: this.currentTimeline_,
                        startOfSegment: a,
                        buffered: this.buffered_(),
                        overrideCheck: f
                    });
                    var p = at(this.sourceUpdater_.audioBuffered());
                    if (typeof p === "number") {
                        h.audioAppendStart = p - this.sourceUpdater_.audioTimestampOffset();
                    }
                    if (this.sourceUpdater_.videoBuffered().length) {
                        h.gopsToAlignWith = ob(this.gopBuffer_, this.currentTime_() - this.sourceUpdater_.videoTimestampOffset(), this.timeMapping_);
                    }
                    return h;
                };
                i.timestampOffsetForSegment_ = function e(t) {
                    return oR(t);
                };
                i.earlyAbortWhenNeeded_ = function e(t) {
                    if (this.vhs_.tech_.paused() || !this.xhrOptions_.timeout || !this.playlist_.attributes.BANDWIDTH) {
                        return;
                    }
                    if (Date.now() - (t.firstBytesReceivedAt || Date.now()) < 1000) {
                        return;
                    }
                    var i = this.currentTime_();
                    var r = t.bandwidth;
                    var n = this.pendingSegment_.duration;
                    var a = aw.estimateSegmentRequestTime(n, r, this.playlist_, t.bytesReceived);
                    var s = n9(this.buffered_(), i, this.vhs_.tech_.playbackRate()) - 1;
                    if (a <= s) {
                        return;
                    }
                    var o = oh({
                        master: this.vhs_.playlists.master,
                        currentTime: i,
                        bandwidth: r,
                        duration: this.duration_(),
                        segmentDuration: n,
                        timeUntilRebuffer: s,
                        currentTimeline: this.currentTimeline_,
                        syncController: this.syncController_
                    });
                    if (!o) {
                        return;
                    }
                    var u = a - s;
                    var l = u - o.rebufferingImpact;
                    var d = 0.5;
                    if (s <= nz) {
                        d = 1;
                    }
                    if (!o.playlist || o.playlist.uri === this.playlist_.uri || l < d) {
                        return;
                    }
                    this.bandwidth = o.playlist.attributes.BANDWIDTH * sT.BANDWIDTH_VARIANCE + 1;
                    this.trigger("earlyabort");
                };
                i.handleAbort_ = function e(t) {
                    this.logger_("Aborting " + oD(t));
                    this.mediaRequestsAborted += 1;
                };
                i.handleProgress_ = function e(t, i) {
                    this.earlyAbortWhenNeeded_(i.stats);
                    if (this.checkForAbort_(i.requestId)) {
                        return;
                    }
                    this.trigger("progress");
                };
                i.handleTrackInfo_ = function e(t, i) {
                    this.earlyAbortWhenNeeded_(t.stats);
                    if (this.checkForAbort_(t.requestId)) {
                        return;
                    }
                    if (this.checkForIllegalMediaSwitch(i)) {
                        return;
                    }
                    i = i || {};
                    if (!ok(this.currentMediaInfo_, i)) {
                        this.appendInitSegment_ = {
                            audio: true,
                            video: true
                        };
                        this.startingMediaInfo_ = i;
                        this.currentMediaInfo_ = i;
                        this.logger_("trackinfo update", i);
                        this.trigger("trackinfo");
                    }
                    if (this.checkForAbort_(t.requestId)) {
                        return;
                    }
                    this.pendingSegment_.trackInfo = i;
                    if (this.hasEnoughInfoToAppend_()) {
                        this.processCallQueue_();
                    }
                };
                i.handleTimingInfo_ = function e(t, i, r, n) {
                    this.earlyAbortWhenNeeded_(t.stats);
                    if (this.checkForAbort_(t.requestId)) {
                        return;
                    }
                    var a = this.pendingSegment_;
                    var s = oO(i);
                    a[s] = a[s] || {};
                    a[s][r] = n;
                    this.logger_("timinginfo: " + i + " - " + r + " - " + n);
                    if (this.hasEnoughInfoToAppend_()) {
                        this.processCallQueue_();
                    }
                };
                i.handleCaptions_ = function e(t, i) {
                    var r = this;
                    this.earlyAbortWhenNeeded_(t.stats);
                    if (this.checkForAbort_(t.requestId)) {
                        return;
                    }
                    if (i.length === 0) {
                        this.logger_("SegmentLoader received no captions from a caption event");
                        return;
                    }
                    var n = this.pendingSegment_;
                    if (!n.hasAppendedData_) {
                        this.metadataQueue_.caption.push(this.handleCaptions_.bind(this, t, i));
                        return;
                    }
                    var a = this.sourceUpdater_.videoTimestampOffset() === null ? this.sourceUpdater_.audioTimestampOffset() : this.sourceUpdater_.videoTimestampOffset();
                    var s = {};
                    i.forEach(function(e) {
                        s[e.stream] = s[e.stream] || {
                            startTime: Infinity,
                            captions: [],
                            endTime: 0
                        };
                        var t = s[e.stream];
                        t.startTime = Math.min(t.startTime, e.startTime + a);
                        t.endTime = Math.max(t.endTime, e.endTime + a);
                        t.captions.push(e);
                    });
                    Object.keys(s).forEach(function(e) {
                        var t = s[e], i = t.startTime, n = t.endTime, o = t.captions;
                        var u = r.inbandTextTracks_;
                        r.logger_("adding cues from " + i + " -> " + n + " for " + e);
                        om(u, r.vhs_.tech_, e);
                        oy(i, n, u[e]);
                        ov({
                            captionArray: o,
                            inbandTextTracks: u,
                            timestampOffset: a
                        });
                    });
                    if (this.transmuxer_) {
                        this.transmuxer_.postMessage({
                            action: "clearParsedMp4Captions"
                        });
                    }
                };
                i.handleId3_ = function e(t, i, r) {
                    this.earlyAbortWhenNeeded_(t.stats);
                    if (this.checkForAbort_(t.requestId)) {
                        return;
                    }
                    var n = this.pendingSegment_;
                    if (!n.hasAppendedData_) {
                        this.metadataQueue_.id3.push(this.handleId3_.bind(this, t, i, r));
                        return;
                    }
                    var a = this.sourceUpdater_.videoTimestampOffset() === null ? this.sourceUpdater_.audioTimestampOffset() : this.sourceUpdater_.videoTimestampOffset();
                    o8(this.inbandTextTracks_, r, this.vhs_.tech_);
                    o$({
                        inbandTextTracks: this.inbandTextTracks_,
                        metadataArray: i,
                        timestampOffset: a,
                        videoDuration: this.duration_()
                    });
                };
                i.processMetadataQueue_ = function e() {
                    this.metadataQueue_.id3.forEach(function(e) {
                        return e();
                    });
                    this.metadataQueue_.caption.forEach(function(e) {
                        return e();
                    });
                    this.metadataQueue_.id3 = [];
                    this.metadataQueue_.caption = [];
                };
                i.processCallQueue_ = function e() {
                    var t = this.callQueue_;
                    this.callQueue_ = [];
                    t.forEach(function(e) {
                        return e();
                    });
                };
                i.processLoadQueue_ = function e() {
                    var t = this.loadQueue_;
                    this.loadQueue_ = [];
                    t.forEach(function(e) {
                        return e();
                    });
                };
                i.hasEnoughInfoToLoad_ = function e() {
                    if (this.loaderType_ !== "audio") {
                        return true;
                    }
                    var t = this.pendingSegment_;
                    if (!t) {
                        return false;
                    }
                    if (!this.getCurrentMediaInfo_()) {
                        return true;
                    }
                    if (oM({
                        timelineChangeController: this.timelineChangeController_,
                        currentTimeline: this.currentTimeline_,
                        segmentTimeline: t.timeline,
                        loaderType: this.loaderType_,
                        audioDisabled: this.audioDisabled_
                    })) {
                        return false;
                    }
                    return true;
                };
                i.getCurrentMediaInfo_ = function e(t) {
                    if (t === void 0) {
                        t = this.pendingSegment_;
                    }
                    return ((t && t.trackInfo) || this.currentMediaInfo_);
                };
                i.getMediaInfo_ = function e(t) {
                    if (t === void 0) {
                        t = this.pendingSegment_;
                    }
                    return (this.getCurrentMediaInfo_(t) || this.startingMediaInfo_);
                };
                i.hasEnoughInfoToAppend_ = function e() {
                    if (!this.sourceUpdater_.ready()) {
                        return false;
                    }
                    if (this.waitingOnRemove_ || this.quotaExceededErrorRetryTimeout_) {
                        return false;
                    }
                    var t = this.pendingSegment_;
                    var i = this.getCurrentMediaInfo_();
                    if (!t || !i) {
                        return false;
                    }
                    var r = i.hasAudio, n = i.hasVideo, a = i.isMuxed;
                    if (n && !t.videoTimingInfo) {
                        return false;
                    }
                    if (r && !this.audioDisabled_ && !a && !t.audioTimingInfo) {
                        return false;
                    }
                    if (oM({
                        timelineChangeController: this.timelineChangeController_,
                        currentTimeline: this.currentTimeline_,
                        segmentTimeline: t.timeline,
                        loaderType: this.loaderType_,
                        audioDisabled: this.audioDisabled_
                    })) {
                        return false;
                    }
                    return true;
                };
                i.handleData_ = function e(t, i) {
                    this.earlyAbortWhenNeeded_(t.stats);
                    if (this.checkForAbort_(t.requestId)) {
                        return;
                    }
                    if (this.callQueue_.length || !this.hasEnoughInfoToAppend_()) {
                        this.callQueue_.push(this.handleData_.bind(this, t, i));
                        return;
                    }
                    var r = this.pendingSegment_;
                    this.setTimeMapping_(r.timeline);
                    this.updateMediaSecondsLoaded_(r.part || r.segment);
                    if (this.mediaSource_.readyState === "closed") {
                        return;
                    }
                    if (t.map) {
                        t.map = this.initSegmentForMap(t.map, true);
                        r.segment.map = t.map;
                    }
                    if (t.key) {
                        this.segmentKey(t.key, true);
                    }
                    r.isFmp4 = t.isFmp4;
                    r.timingInfo = r.timingInfo || {};
                    if (r.isFmp4) {
                        this.trigger("fmp4");
                        r.timingInfo.start = r[oO(i.type)].start;
                    } else {
                        var n = this.getCurrentMediaInfo_();
                        var a = this.loaderType_ === "main" && n && n.hasVideo;
                        var s;
                        if (a) {
                            s = r.videoTimingInfo.start;
                        }
                        r.timingInfo.start = this.trueSegmentStart_({
                            currentStart: r.timingInfo.start,
                            playlist: r.playlist,
                            mediaIndex: r.mediaIndex,
                            currentVideoTimestampOffset: this.sourceUpdater_.videoTimestampOffset(),
                            useVideoTimingInfo: a,
                            firstVideoFrameTimeForData: s,
                            videoTimingInfo: r.videoTimingInfo,
                            audioTimingInfo: r.audioTimingInfo
                        });
                    }
                    this.updateAppendInitSegmentStatus(r, i.type);
                    this.updateSourceBufferTimestampOffset_(r);
                    if (r.isSyncRequest) {
                        this.updateTimingInfoEnd_(r);
                        this.syncController_.saveSegmentTimingInfo({
                            segmentInfo: r,
                            shouldSaveTimelineMapping: this.loaderType_ === "main"
                        });
                        var o = this.chooseNextRequest_();
                        if (o.mediaIndex !== r.mediaIndex || o.partIndex !== r.partIndex) {
                            this.logger_("sync segment was incorrect, not appending");
                            return;
                        }
                        this.logger_("sync segment was correct, appending");
                    }
                    r.hasAppendedData_ = true;
                    this.processMetadataQueue_();
                    this.appendData_(r, i);
                };
                i.updateAppendInitSegmentStatus = function e(t, i) {
                    if (this.loaderType_ === "main" && typeof t.timestampOffset === "number" && !t.changedTimestampOffset) {
                        this.appendInitSegment_ = {
                            audio: true,
                            video: true
                        };
                    }
                    if (this.playlistOfLastInitSegment_[i] !== t.playlist) {
                        this.appendInitSegment_[i] = true;
                    }
                };
                i.getInitSegmentAndUpdateState_ = function e(t) {
                    var i = t.type, r = t.initSegment, n = t.map, a = t.playlist;
                    if (n) {
                        var s = a7(n);
                        if (this.activeInitSegmentId_ === s) {
                            return null;
                        }
                        r = this.initSegmentForMap(n, true).bytes;
                        this.activeInitSegmentId_ = s;
                    }
                    if (r && this.appendInitSegment_[i]) {
                        this.playlistOfLastInitSegment_[i] = a;
                        this.appendInitSegment_[i] = false;
                        this.activeInitSegmentId_ = null;
                        return r;
                    }
                    return null;
                };
                i.handleQuotaExceededError_ = function e(t, i) {
                    var r = this;
                    var a = t.segmentInfo, s = t.type, o = t.bytes;
                    var u = this.sourceUpdater_.audioBuffered();
                    var l = this.sourceUpdater_.videoBuffered();
                    if (u.length > 1) {
                        this.logger_("On QUOTA_EXCEEDED_ERR, found gaps in the audio buffer: " + nJ(u).join(", "));
                    }
                    if (l.length > 1) {
                        this.logger_("On QUOTA_EXCEEDED_ERR, found gaps in the video buffer: " + nJ(l).join(", "));
                    }
                    var d = u.length ? u.start(0) : 0;
                    var c = u.length ? u.end(u.length - 1) : 0;
                    var h = l.length ? l.start(0) : 0;
                    var f = l.length ? l.end(l.length - 1) : 0;
                    if (c - d <= ow && f - h <= ow) {
                        this.logger_("On QUOTA_EXCEEDED_ERR, single segment too large to append to " + "buffer, triggering an error. " + ("Appended byte length: " + o.byteLength + ", ") + ("audio buffer: " + nJ(u).join(", ") + ", ") + ("video buffer: " + nJ(l).join(", ") + ", "));
                        this.error({
                            message: "Quota exceeded error with append of a single segment of content",
                            excludeUntil: Infinity
                        });
                        this.trigger("error");
                        return;
                    }
                    this.waitingOnRemove_ = true;
                    this.callQueue_.push(this.appendToSourceBuffer_.bind(this, {
                        segmentInfo: a,
                        type: s,
                        bytes: o
                    }));
                    var p = this.currentTime_();
                    var m = p - ow;
                    this.logger_("On QUOTA_EXCEEDED_ERR, removing audio/video from 0 to " + m);
                    this.remove(0, m, function() {
                        r.logger_("On QUOTA_EXCEEDED_ERR, retrying append in " + ow + "s");
                        r.waitingOnRemove_ = false;
                        r.quotaExceededErrorRetryTimeout_ = n().setTimeout(function() {
                            r.logger_("On QUOTA_EXCEEDED_ERR, re-processing call queue");
                            r.quotaExceededErrorRetryTimeout_ = null;
                            r.processCallQueue_();
                        }, ow * 1000);
                    }, true);
                };
                i.handleAppendError_ = function e(t, i) {
                    var r = t.segmentInfo, n = t.type, a = t.bytes;
                    if (!i) {
                        return;
                    }
                    if (i.code === oC) {
                        this.handleQuotaExceededError_({
                            segmentInfo: r,
                            type: n,
                            bytes: a
                        });
                        return;
                    }
                    this.logger_("Received non QUOTA_EXCEEDED_ERR on append", i);
                    this.error(n + " append of " + a.length + "b failed for segment " + ("#" + r.mediaIndex + " in playlist " + r.playlist.id));
                    this.trigger("appenderror");
                };
                i.appendToSourceBuffer_ = function e(t) {
                    var i = t.segmentInfo, r = t.type, n = t.initSegment, a = t.data, s = t.bytes;
                    if (!s) {
                        var o = [
                            a
                        ];
                        var u = a.byteLength;
                        if (n) {
                            o.unshift(n);
                            u += n.byteLength;
                        }
                        s = op({
                            bytes: u,
                            segments: o
                        });
                    }
                    this.sourceUpdater_.appendBuffer({
                        segmentInfo: i,
                        type: r,
                        bytes: s
                    }, this.handleAppendError_.bind(this, {
                        segmentInfo: i,
                        type: r,
                        bytes: s
                    }));
                };
                i.handleSegmentTimingInfo_ = function e(t, i, r) {
                    if (!this.pendingSegment_ || i !== this.pendingSegment_.requestId) {
                        return;
                    }
                    var n = this.pendingSegment_.segment;
                    var a = t + "TimingInfo";
                    if (!n[a]) {
                        n[a] = {};
                    }
                    n[a].transmuxerPrependedSeconds = r.prependedContentDuration || 0;
                    n[a].transmuxedPresentationStart = r.start.presentation;
                    n[a].transmuxedDecodeStart = r.start.decode;
                    n[a].transmuxedPresentationEnd = r.end.presentation;
                    n[a].transmuxedDecodeEnd = r.end.decode;
                    n[a].baseMediaDecodeTime = r.baseMediaDecodeTime;
                };
                i.appendData_ = function e(t, i) {
                    var r = i.type, n = i.data;
                    if (!n || !n.byteLength) {
                        return;
                    }
                    if (r === "audio" && this.audioDisabled_) {
                        return;
                    }
                    var a = this.getInitSegmentAndUpdateState_({
                        type: r,
                        initSegment: i.initSegment,
                        playlist: t.playlist,
                        map: t.isFmp4 ? t.segment.map : null
                    });
                    this.appendToSourceBuffer_({
                        segmentInfo: t,
                        type: r,
                        initSegment: a,
                        data: n
                    });
                };
                i.loadSegment_ = function e(t) {
                    var i = this;
                    this.state = "WAITING";
                    this.pendingSegment_ = t;
                    this.trimBackBuffer_(t);
                    if (typeof t.timestampOffset === "number") {
                        if (this.transmuxer_) {
                            this.transmuxer_.postMessage({
                                action: "clearAllMp4Captions"
                            });
                        }
                    }
                    if (!this.hasEnoughInfoToLoad_()) {
                        this.loadQueue_.push(function() {
                            var e = (0, o.Z)({}, t, {
                                forceTimestampOffset: true
                            });
                            (0, o.Z)(t, i.generateSegmentInfo_(e));
                            i.isPendingTimestampOffset_ = false;
                            i.updateTransmuxerAndRequestSegment_(t);
                        });
                        return;
                    }
                    this.updateTransmuxerAndRequestSegment_(t);
                };
                i.updateTransmuxerAndRequestSegment_ = function e(t) {
                    var i = this;
                    if (this.shouldUpdateTransmuxerTimestampOffset_(t.timestampOffset)) {
                        this.gopBuffer_.length = 0;
                        t.gopsToAlignWith = [];
                        this.timeMapping_ = 0;
                        this.transmuxer_.postMessage({
                            action: "reset"
                        });
                        this.transmuxer_.postMessage({
                            action: "setTimestampOffset",
                            timestampOffset: t.timestampOffset
                        });
                    }
                    var r = this.createSimplifiedSegmentObj_(t);
                    var n = this.isEndOfStream_(t.mediaIndex, t.playlist, t.partIndex);
                    var a = this.mediaIndex !== null;
                    var s = t.timeline !== this.currentTimeline_ && t.timeline > 0;
                    var o = n || (a && s);
                    this.logger_("Requesting " + oD(t));
                    if (r.map && !r.map.bytes) {
                        this.logger_("going to request init segment.");
                        this.appendInitSegment_ = {
                            video: true,
                            audio: true
                        };
                    }
                    t.abortRequests = s7({
                        xhr: this.vhs_.xhr,
                        xhrOptions: this.xhrOptions_,
                        decryptionWorker: this.decrypter_,
                        segment: r,
                        abortFn: this.handleAbort_.bind(this, t),
                        progressFn: this.handleProgress_.bind(this),
                        trackInfoFn: this.handleTrackInfo_.bind(this),
                        timingInfoFn: this.handleTimingInfo_.bind(this),
                        videoSegmentTimingInfoFn: this.handleSegmentTimingInfo_.bind(this, "video", t.requestId),
                        audioSegmentTimingInfoFn: this.handleSegmentTimingInfo_.bind(this, "audio", t.requestId),
                        captionsFn: this.handleCaptions_.bind(this),
                        isEndOfTimeline: o,
                        endedTimelineFn: function e() {
                            i.logger_("received endedtimeline callback");
                        },
                        id3Fn: this.handleId3_.bind(this),
                        dataFn: this.handleData_.bind(this),
                        doneFn: this.segmentRequestFinished_.bind(this),
                        onTransmuxerLog: function e(r) {
                            var n = r.message, a = r.level, s = r.stream;
                            i.logger_(oD(t) + " logged from transmuxer stream " + s + " as a " + a + ": " + n);
                        }
                    });
                };
                i.trimBackBuffer_ = function e(t) {
                    var i = oA(this.seekable_(), this.currentTime_(), this.playlist_.targetDuration || 10);
                    if (i > 0) {
                        this.remove(0, i);
                    }
                };
                i.createSimplifiedSegmentObj_ = function e(t) {
                    var i = t.segment;
                    var r = t.part;
                    var n = {
                        resolvedUri: r ? r.resolvedUri : i.resolvedUri,
                        byterange: r ? r.byterange : i.byterange,
                        requestId: t.requestId,
                        transmuxer: t.transmuxer,
                        audioAppendStart: t.audioAppendStart,
                        gopsToAlignWith: t.gopsToAlignWith,
                        part: t.part
                    };
                    var a = t.playlist.segments[t.mediaIndex - 1];
                    if (a && a.timeline === i.timeline) {
                        if (a.videoTimingInfo) {
                            n.baseStartTime = a.videoTimingInfo.transmuxedDecodeEnd;
                        } else if (a.audioTimingInfo) {
                            n.baseStartTime = a.audioTimingInfo.transmuxedDecodeEnd;
                        }
                    }
                    if (i.key) {
                        var s = i.key.iv || new Uint32Array([
                            0,
                            0,
                            0,
                            t.mediaIndex + t.playlist.mediaSequence, 
                        ]);
                        n.key = this.segmentKey(i.key);
                        n.key.iv = s;
                    }
                    if (i.map) {
                        n.map = this.initSegmentForMap(i.map);
                    }
                    return n;
                };
                i.saveTransferStats_ = function e(t) {
                    this.mediaRequests += 1;
                    if (t) {
                        this.mediaBytesTransferred += t.bytesReceived;
                        this.mediaTransferDuration += t.roundTripTime;
                    }
                };
                i.saveBandwidthRelatedStats_ = function e(t, i) {
                    this.pendingSegment_.byteLength = i.bytesReceived;
                    if (t < o_) {
                        this.logger_("Ignoring segment's bandwidth because its duration of " + t + (" is less than the min to record " + o_));
                        return;
                    }
                    this.bandwidth = i.bandwidth;
                    this.roundTrip = i.roundTripTime;
                };
                i.handleTimeout_ = function e() {
                    this.mediaRequestsTimedout += 1;
                    this.bandwidth = 1;
                    this.roundTrip = NaN;
                    this.trigger("bandwidthupdate");
                };
                i.segmentRequestFinished_ = function e(t, i, r) {
                    if (this.callQueue_.length) {
                        this.callQueue_.push(this.segmentRequestFinished_.bind(this, t, i, r));
                        return;
                    }
                    this.saveTransferStats_(i.stats);
                    if (!this.pendingSegment_) {
                        return;
                    }
                    if (i.requestId !== this.pendingSegment_.requestId) {
                        return;
                    }
                    if (t) {
                        this.pendingSegment_ = null;
                        this.state = "READY";
                        if (t.code === s1.ABORTED) {
                            return;
                        }
                        this.pause();
                        if (t.code === s1.TIMEOUT) {
                            this.handleTimeout_();
                            return;
                        }
                        this.mediaRequestsErrored += 1;
                        this.error(t);
                        this.trigger("error");
                        return;
                    }
                    var n = this.pendingSegment_;
                    this.saveBandwidthRelatedStats_(n.duration, i.stats);
                    n.endOfAllRequests = i.endOfAllRequests;
                    if (r.gopInfo) {
                        this.gopBuffer_ = ox(this.gopBuffer_, r.gopInfo, this.safeAppend_);
                    }
                    this.state = "APPENDING";
                    this.trigger("appending");
                    this.waitForAppendsToComplete_(n);
                };
                i.setTimeMapping_ = function e(t) {
                    var i = this.syncController_.mappingForTimeline(t);
                    if (i !== null) {
                        this.timeMapping_ = i;
                    }
                };
                i.updateMediaSecondsLoaded_ = function e(t) {
                    if (typeof t.start === "number" && typeof t.end === "number") {
                        this.mediaSecondsLoaded += t.end - t.start;
                    } else {
                        this.mediaSecondsLoaded += t.duration;
                    }
                };
                i.shouldUpdateTransmuxerTimestampOffset_ = function e(t) {
                    if (t === null) {
                        return false;
                    }
                    if (this.loaderType_ === "main" && t !== this.sourceUpdater_.videoTimestampOffset()) {
                        return true;
                    }
                    if (!this.audioDisabled_ && t !== this.sourceUpdater_.audioTimestampOffset()) {
                        return true;
                    }
                    return false;
                };
                i.trueSegmentStart_ = function e(t) {
                    var i = t.currentStart, r = t.playlist, n = t.mediaIndex, a = t.firstVideoFrameTimeForData, s = t.currentVideoTimestampOffset, o = t.useVideoTimingInfo, u = t.videoTimingInfo, l = t.audioTimingInfo;
                    if (typeof i !== "undefined") {
                        return i;
                    }
                    if (!o) {
                        return l.start;
                    }
                    var d = r.segments[n - 1];
                    if (n === 0 || !d || typeof d.start === "undefined" || d.end !== a + s) {
                        return a;
                    }
                    return u.start;
                };
                i.waitForAppendsToComplete_ = function e(t) {
                    var i = this.getCurrentMediaInfo_(t);
                    if (!i) {
                        this.error({
                            message: "No starting media returned, likely due to an unsupported media format.",
                            blacklistDuration: Infinity
                        });
                        this.trigger("error");
                        return;
                    }
                    var r = i.hasAudio, n = i.hasVideo, a = i.isMuxed;
                    var s = this.loaderType_ === "main" && n;
                    var o = !this.audioDisabled_ && r && !a;
                    t.waitingOnAppends = 0;
                    if (!t.hasAppendedData_) {
                        if (!t.timingInfo && typeof t.timestampOffset === "number") {
                            this.isPendingTimestampOffset_ = true;
                        }
                        t.timingInfo = {
                            start: 0
                        };
                        t.waitingOnAppends++;
                        if (!this.isPendingTimestampOffset_) {
                            this.updateSourceBufferTimestampOffset_(t);
                            this.processMetadataQueue_();
                        }
                        this.checkAppendsDone_(t);
                        return;
                    }
                    if (s) {
                        t.waitingOnAppends++;
                    }
                    if (o) {
                        t.waitingOnAppends++;
                    }
                    if (s) {
                        this.sourceUpdater_.videoQueueCallback(this.checkAppendsDone_.bind(this, t));
                    }
                    if (o) {
                        this.sourceUpdater_.audioQueueCallback(this.checkAppendsDone_.bind(this, t));
                    }
                };
                i.checkAppendsDone_ = function e(t) {
                    if (this.checkForAbort_(t.requestId)) {
                        return;
                    }
                    t.waitingOnAppends--;
                    if (t.waitingOnAppends === 0) {
                        this.handleAppendsDone_();
                    }
                };
                i.checkForIllegalMediaSwitch = function e(t) {
                    var i = oL(this.loaderType_, this.getCurrentMediaInfo_(), t);
                    if (i) {
                        this.error({
                            message: i,
                            blacklistDuration: Infinity
                        });
                        this.trigger("error");
                        return true;
                    }
                    return false;
                };
                i.updateSourceBufferTimestampOffset_ = function e(t) {
                    if (t.timestampOffset === null || typeof t.timingInfo.start !== "number" || t.changedTimestampOffset || this.loaderType_ !== "main") {
                        return;
                    }
                    var i = false;
                    t.timestampOffset -= t.timingInfo.start;
                    t.changedTimestampOffset = true;
                    if (t.timestampOffset !== this.sourceUpdater_.videoTimestampOffset()) {
                        this.sourceUpdater_.videoTimestampOffset(t.timestampOffset);
                        i = true;
                    }
                    if (t.timestampOffset !== this.sourceUpdater_.audioTimestampOffset()) {
                        this.sourceUpdater_.audioTimestampOffset(t.timestampOffset);
                        i = true;
                    }
                    if (i) {
                        this.trigger("timestampoffset");
                    }
                };
                i.updateTimingInfoEnd_ = function e(t) {
                    t.timingInfo = t.timingInfo || {};
                    var i = this.getMediaInfo_();
                    var r = this.loaderType_ === "main" && i && i.hasVideo;
                    var n = r && t.videoTimingInfo ? t.videoTimingInfo : t.audioTimingInfo;
                    if (!n) {
                        return;
                    }
                    t.timingInfo.end = typeof n.end === "number" ? n.end : n.start + t.duration;
                };
                i.handleAppendsDone_ = function e() {
                    if (this.pendingSegment_) {
                        this.trigger("appendsdone");
                    }
                    if (!this.pendingSegment_) {
                        this.state = "READY";
                        if (!this.paused()) {
                            this.monitorBuffer_();
                        }
                        return;
                    }
                    var t = this.pendingSegment_;
                    this.updateTimingInfoEnd_(t);
                    if (this.shouldSaveSegmentTimingInfo_) {
                        this.syncController_.saveSegmentTimingInfo({
                            segmentInfo: t,
                            shouldSaveTimelineMapping: this.loaderType_ === "main"
                        });
                    }
                    var i = oB(t, this.sourceType_);
                    if (i) {
                        if (i.severity === "warn") {
                            nq.log.warn(i.message);
                        } else {
                            this.logger_(i.message);
                        }
                    }
                    this.recordThroughput_(t);
                    this.pendingSegment_ = null;
                    this.state = "READY";
                    if (t.isSyncRequest) {
                        this.trigger("syncinfoupdate");
                        if (!t.hasAppendedData_) {
                            this.logger_("Throwing away un-appended sync request " + oD(t));
                            return;
                        }
                    }
                    this.logger_("Appended " + oD(t));
                    this.addSegmentMetadataCue_(t);
                    this.fetchAtBuffer_ = true;
                    if (this.currentTimeline_ !== t.timeline) {
                        this.timelineChangeController_.lastTimelineChange({
                            type: this.loaderType_,
                            from: this.currentTimeline_,
                            to: t.timeline
                        });
                        if (this.loaderType_ === "main" && !this.audioDisabled_) {
                            this.timelineChangeController_.lastTimelineChange({
                                type: "audio",
                                from: this.currentTimeline_,
                                to: t.timeline
                            });
                        }
                    }
                    this.currentTimeline_ = t.timeline;
                    this.trigger("syncinfoupdate");
                    var r = t.segment;
                    var n = t.part;
                    var a = r.end && this.currentTime_() - r.end > t.playlist.targetDuration * 3;
                    var s = n && n.end && this.currentTime_() - n.end > t.playlist.partTargetDuration * 3;
                    if (a || s) {
                        this.logger_("bad " + (a ? "segment" : "part") + " " + oD(t));
                        this.resetEverything();
                        return;
                    }
                    var o = this.mediaIndex !== null;
                    if (o) {
                        this.trigger("bandwidthupdate");
                    }
                    this.trigger("progress");
                    this.mediaIndex = t.mediaIndex;
                    this.partIndex = t.partIndex;
                    if (this.isEndOfStream_(t.mediaIndex, t.playlist, t.partIndex)) {
                        this.endOfStream();
                    }
                    this.trigger("appended");
                    if (t.hasAppendedData_) {
                        this.mediaAppends++;
                    }
                    if (!this.paused()) {
                        this.monitorBuffer_();
                    }
                };
                i.recordThroughput_ = function e(t) {
                    if (t.duration < o_) {
                        this.logger_("Ignoring segment's throughput because its duration of " + t.duration + (" is less than the min to record " + o_));
                        return;
                    }
                    var i = this.throughput.rate;
                    var r = Date.now() - t.endOfAllRequests + 1;
                    var n = Math.floor((t.byteLength / r) * 8 * 1000);
                    this.throughput.rate += (n - i) / ++this.throughput.count;
                };
                i.addSegmentMetadataCue_ = function e(t) {
                    if (!this.segmentMetadataTrack_) {
                        return;
                    }
                    var i = t.segment;
                    var r = i.start;
                    var a = i.end;
                    if (!oP(r) || !oP(a)) {
                        return;
                    }
                    oy(r, a, this.segmentMetadataTrack_);
                    var s = n().WebKitDataCue || n().VTTCue;
                    var o = {
                        custom: i.custom,
                        dateTimeObject: i.dateTimeObject,
                        dateTimeString: i.dateTimeString,
                        bandwidth: t.playlist.attributes.BANDWIDTH,
                        resolution: t.playlist.attributes.RESOLUTION,
                        codecs: t.playlist.attributes.CODECS,
                        byteLength: t.byteLength,
                        uri: t.uri,
                        timeline: t.timeline,
                        playlist: t.playlist.id,
                        start: r,
                        end: a
                    };
                    var u = JSON.stringify(o);
                    var l = new s(r, a, u);
                    l.value = o;
                    this.segmentMetadataTrack_.addCue(l);
                };
                return t;
            })(nq.EventTarget);
            function oN() {}
            var o1 = function e(t) {
                if (typeof t !== "string") {
                    return t;
                }
                return t.replace(/./, function(e) {
                    return e.toUpperCase();
                });
            };
            var oj = [
                "video",
                "audio"
            ];
            var o2 = function e(t, i) {
                var r = i[t + "Buffer"];
                return ((r && r.updating) || i.queuePending[t]);
            };
            var oH = function e(t, i) {
                for(var r = 0; r < i.length; r++){
                    var n = i[r];
                    if (n.type === "mediaSource") {
                        return null;
                    }
                    if (n.type === t) {
                        return r;
                    }
                }
                return null;
            };
            var o6 = function e(t, i) {
                if (i.queue.length === 0) {
                    return;
                }
                var r = 0;
                var n = i.queue[r];
                if (n.type === "mediaSource") {
                    if (!i.updating() && i.mediaSource.readyState !== "closed") {
                        i.queue.shift();
                        n.action(i);
                        if (n.doneFn) {
                            n.doneFn();
                        }
                        e("audio", i);
                        e("video", i);
                    }
                    return;
                }
                if (t === "mediaSource") {
                    return;
                }
                if (!i.ready() || i.mediaSource.readyState === "closed" || o2(t, i)) {
                    return;
                }
                if (n.type !== t) {
                    r = oH(t, i.queue);
                    if (r === null) {
                        return;
                    }
                    n = i.queue[r];
                }
                i.queue.splice(r, 1);
                i.queuePending[t] = n;
                n.action(t, i);
                if (!n.doneFn) {
                    i.queuePending[t] = null;
                    e(t, i);
                    return;
                }
            };
            var oq = function e(t, i) {
                var r = i[t + "Buffer"];
                var n = o1(t);
                if (!r) {
                    return;
                }
                r.removeEventListener("updateend", i["on" + n + "UpdateEnd_"]);
                r.removeEventListener("error", i["on" + n + "Error_"]);
                i.codecs[t] = null;
                i[t + "Buffer"] = null;
            };
            var oV = function e(t, i) {
                return (t && i && Array.prototype.indexOf.call(t.sourceBuffers, i) !== -1);
            };
            var oW = {
                appendBuffer: function e(t, i, r) {
                    return function(e, n) {
                        var a = n[e + "Buffer"];
                        if (!oV(n.mediaSource, a)) {
                            return;
                        }
                        n.logger_("Appending segment " + i.mediaIndex + "'s " + t.length + " bytes to " + e + "Buffer");
                        try {
                            a.appendBuffer(t);
                        } catch (s) {
                            n.logger_("Error with code " + s.code + " " + (s.code === oC ? "(QUOTA_EXCEEDED_ERR) " : "") + ("when appending segment " + i.mediaIndex + " to " + e + "Buffer"));
                            n.queuePending[e] = null;
                            r(s);
                        }
                    };
                },
                remove: function e(t, i) {
                    return function(e, r) {
                        var n = r[e + "Buffer"];
                        if (!oV(r.mediaSource, n)) {
                            return;
                        }
                        r.logger_("Removing " + t + " to " + i + " from " + e + "Buffer");
                        try {
                            n.remove(t, i);
                        } catch (a) {
                            r.logger_("Remove " + t + " to " + i + " from " + e + "Buffer failed");
                        }
                    };
                },
                timestampOffset: function e(t) {
                    return function(e, i) {
                        var r = i[e + "Buffer"];
                        if (!oV(i.mediaSource, r)) {
                            return;
                        }
                        i.logger_("Setting " + e + "timestampOffset to " + t);
                        r.timestampOffset = t;
                    };
                },
                callback: function e(t) {
                    return function(e, i) {
                        t();
                    };
                },
                endOfStream: function e(t) {
                    return function(e) {
                        if (e.mediaSource.readyState !== "open") {
                            return;
                        }
                        e.logger_("Calling mediaSource endOfStream(" + (t || "") + ")");
                        try {
                            e.mediaSource.endOfStream(t);
                        } catch (i) {
                            nq.log.warn("Failed to call media source endOfStream", i);
                        }
                    };
                },
                duration: function e(t) {
                    return function(e) {
                        e.logger_("Setting mediaSource duration to " + t);
                        try {
                            e.mediaSource.duration = t;
                        } catch (i) {
                            nq.log.warn("Failed to set media source duration", i);
                        }
                    };
                },
                abort: function e() {
                    return function(e, t) {
                        if (t.mediaSource.readyState !== "open") {
                            return;
                        }
                        var i = t[e + "Buffer"];
                        if (!oV(t.mediaSource, i)) {
                            return;
                        }
                        t.logger_("calling abort on " + e + "Buffer");
                        try {
                            i.abort();
                        } catch (r) {
                            nq.log.warn("Failed to abort on " + e + "Buffer", r);
                        }
                    };
                },
                addSourceBuffer: function e(t, i) {
                    return function(e) {
                        var r = o1(t);
                        var n = (0, x._5)(i);
                        e.logger_("Adding " + t + "Buffer with codec " + i + " to mediaSource");
                        var a = e.mediaSource.addSourceBuffer(n);
                        a.addEventListener("updateend", e["on" + r + "UpdateEnd_"]);
                        a.addEventListener("error", e["on" + r + "Error_"]);
                        e.codecs[t] = i;
                        e[t + "Buffer"] = a;
                    };
                },
                removeSourceBuffer: function e(t) {
                    return function(e) {
                        var i = e[t + "Buffer"];
                        oq(t, e);
                        if (!oV(e.mediaSource, i)) {
                            return;
                        }
                        e.logger_("Removing " + t + "Buffer with codec " + e.codecs[t] + " from mediaSource");
                        try {
                            e.mediaSource.removeSourceBuffer(i);
                        } catch (r) {
                            nq.log.warn("Failed to removeSourceBuffer " + t + "Buffer", r);
                        }
                    };
                },
                changeType: function e(t) {
                    return function(e, i) {
                        var r = i[e + "Buffer"];
                        var n = (0, x._5)(t);
                        if (!oV(i.mediaSource, r)) {
                            return;
                        }
                        if (i.codecs[e] === t) {
                            return;
                        }
                        i.logger_("changing " + e + "Buffer codec from " + i.codecs[e] + " to " + t);
                        r.changeType(n);
                        i.codecs[e] = t;
                    };
                }
            };
            var o3 = function e(t) {
                var i = t.type, r = t.sourceUpdater, n = t.action, a = t.doneFn, s = t.name;
                r.queue.push({
                    type: i,
                    action: n,
                    doneFn: a,
                    name: s
                });
                o6(i, r);
            };
            var o4 = function e(t, i) {
                return function(e) {
                    if (i.queuePending[t]) {
                        var r = i.queuePending[t].doneFn;
                        i.queuePending[t] = null;
                        if (r) {
                            r(i[t + "Error_"]);
                        }
                    }
                    o6(t, i);
                };
            };
            var o5 = (function(e) {
                (0, l.Z)(t, e);
                function t(t) {
                    var i;
                    i = e.call(this) || this;
                    i.mediaSource = t;
                    i.sourceopenListener_ = function() {
                        return o6("mediaSource", (0, u.Z)(i));
                    };
                    i.mediaSource.addEventListener("sourceopen", i.sourceopenListener_);
                    i.logger_ = n5("SourceUpdater");
                    i.audioTimestampOffset_ = 0;
                    i.videoTimestampOffset_ = 0;
                    i.queue = [];
                    i.queuePending = {
                        audio: null,
                        video: null
                    };
                    i.delayedAudioAppendQueue_ = [];
                    i.videoAppendQueued_ = false;
                    i.codecs = {};
                    i.onVideoUpdateEnd_ = o4("video", (0, u.Z)(i));
                    i.onAudioUpdateEnd_ = o4("audio", (0, u.Z)(i));
                    i.onVideoError_ = function(e) {
                        i.videoError_ = e;
                    };
                    i.onAudioError_ = function(e) {
                        i.audioError_ = e;
                    };
                    i.createdSourceBuffers_ = false;
                    i.initializedEme_ = false;
                    i.triggeredReady_ = false;
                    return i;
                }
                var i = t.prototype;
                i.initializedEme = function e() {
                    this.initializedEme_ = true;
                    this.triggerReady();
                };
                i.hasCreatedSourceBuffers = function e() {
                    return this.createdSourceBuffers_;
                };
                i.hasInitializedAnyEme = function e() {
                    return this.initializedEme_;
                };
                i.ready = function e() {
                    return (this.hasCreatedSourceBuffers() && this.hasInitializedAnyEme());
                };
                i.createSourceBuffers = function e(t) {
                    if (this.hasCreatedSourceBuffers()) {
                        return;
                    }
                    this.addOrChangeSourceBuffers(t);
                    this.createdSourceBuffers_ = true;
                    this.trigger("createdsourcebuffers");
                    this.triggerReady();
                };
                i.triggerReady = function e() {
                    if (this.ready() && !this.triggeredReady_) {
                        this.triggeredReady_ = true;
                        this.trigger("ready");
                    }
                };
                i.addSourceBuffer = function e(t, i) {
                    o3({
                        type: "mediaSource",
                        sourceUpdater: this,
                        action: oW.addSourceBuffer(t, i),
                        name: "addSourceBuffer"
                    });
                };
                i.abort = function e(t) {
                    o3({
                        type: t,
                        sourceUpdater: this,
                        action: oW.abort(t),
                        name: "abort"
                    });
                };
                i.removeSourceBuffer = function e(t) {
                    if (!this.canRemoveSourceBuffer()) {
                        nq.log.error("removeSourceBuffer is not supported!");
                        return;
                    }
                    o3({
                        type: "mediaSource",
                        sourceUpdater: this,
                        action: oW.removeSourceBuffer(t),
                        name: "removeSourceBuffer"
                    });
                };
                i.canRemoveSourceBuffer = function e() {
                    return (!nq.browser.IE_VERSION && !nq.browser.IS_FIREFOX && n().MediaSource && n().MediaSource.prototype && typeof n().MediaSource.prototype.removeSourceBuffer === "function");
                };
                t.canChangeType = function e() {
                    return (n().SourceBuffer && n().SourceBuffer.prototype && typeof n().SourceBuffer.prototype.changeType === "function");
                };
                i.canChangeType = function e() {
                    return this.constructor.canChangeType();
                };
                i.changeType = function e(t, i) {
                    if (!this.canChangeType()) {
                        nq.log.error("changeType is not supported!");
                        return;
                    }
                    o3({
                        type: t,
                        sourceUpdater: this,
                        action: oW.changeType(i),
                        name: "changeType"
                    });
                };
                i.addOrChangeSourceBuffers = function e(t) {
                    var i = this;
                    if (!t || typeof t !== "object" || Object.keys(t).length === 0) {
                        throw new Error("Cannot addOrChangeSourceBuffers to undefined codecs");
                    }
                    Object.keys(t).forEach(function(e) {
                        var r = t[e];
                        if (!i.hasCreatedSourceBuffers()) {
                            return i.addSourceBuffer(e, r);
                        }
                        if (i.canChangeType()) {
                            i.changeType(e, r);
                        }
                    });
                };
                i.appendBuffer = function e(t, i) {
                    var r = this;
                    var n = t.segmentInfo, a = t.type, s = t.bytes;
                    this.processedAppend_ = true;
                    if (a === "audio" && this.videoBuffer && !this.videoAppendQueued_) {
                        this.delayedAudioAppendQueue_.push([
                            t,
                            i
                        ]);
                        this.logger_("delayed audio append of " + s.length + " until video append");
                        return;
                    }
                    var o = i;
                    o3({
                        type: a,
                        sourceUpdater: this,
                        action: oW.appendBuffer(s, n || {
                            mediaIndex: -1
                        }, o),
                        doneFn: i,
                        name: "appendBuffer"
                    });
                    if (a === "video") {
                        this.videoAppendQueued_ = true;
                        if (!this.delayedAudioAppendQueue_.length) {
                            return;
                        }
                        var u = this.delayedAudioAppendQueue_.slice();
                        this.logger_("queuing delayed audio " + u.length + " appendBuffers");
                        this.delayedAudioAppendQueue_.length = 0;
                        u.forEach(function(e) {
                            r.appendBuffer.apply(r, e);
                        });
                    }
                };
                i.audioBuffered = function e() {
                    if (!oV(this.mediaSource, this.audioBuffer)) {
                        return nq.createTimeRange();
                    }
                    return this.audioBuffer.buffered ? this.audioBuffer.buffered : nq.createTimeRange();
                };
                i.videoBuffered = function e() {
                    if (!oV(this.mediaSource, this.videoBuffer)) {
                        return nq.createTimeRange();
                    }
                    return this.videoBuffer.buffered ? this.videoBuffer.buffered : nq.createTimeRange();
                };
                i.buffered = function e() {
                    var t = oV(this.mediaSource, this.videoBuffer) ? this.videoBuffer : null;
                    var i = oV(this.mediaSource, this.audioBuffer) ? this.audioBuffer : null;
                    if (i && !t) {
                        return this.audioBuffered();
                    }
                    if (t && !i) {
                        return this.videoBuffered();
                    }
                    return nX(this.audioBuffered(), this.videoBuffered());
                };
                i.setDuration = function e(t, i) {
                    if (i === void 0) {
                        i = oN;
                    }
                    o3({
                        type: "mediaSource",
                        sourceUpdater: this,
                        action: oW.duration(t),
                        name: "duration",
                        doneFn: i
                    });
                };
                i.endOfStream = function e(t, i) {
                    if (t === void 0) {
                        t = null;
                    }
                    if (i === void 0) {
                        i = oN;
                    }
                    if (typeof t !== "string") {
                        t = undefined;
                    }
                    o3({
                        type: "mediaSource",
                        sourceUpdater: this,
                        action: oW.endOfStream(t),
                        name: "endOfStream",
                        doneFn: i
                    });
                };
                i.removeAudio = function e(t, i, r) {
                    if (r === void 0) {
                        r = oN;
                    }
                    if (!this.audioBuffered().length || this.audioBuffered().end(0) === 0) {
                        r();
                        return;
                    }
                    o3({
                        type: "audio",
                        sourceUpdater: this,
                        action: oW.remove(t, i),
                        doneFn: r,
                        name: "remove"
                    });
                };
                i.removeVideo = function e(t, i, r) {
                    if (r === void 0) {
                        r = oN;
                    }
                    if (!this.videoBuffered().length || this.videoBuffered().end(0) === 0) {
                        r();
                        return;
                    }
                    o3({
                        type: "video",
                        sourceUpdater: this,
                        action: oW.remove(t, i),
                        doneFn: r,
                        name: "remove"
                    });
                };
                i.updating = function e() {
                    if (o2("audio", this) || o2("video", this)) {
                        return true;
                    }
                    return false;
                };
                i.audioTimestampOffset = function e(t) {
                    if (typeof t !== "undefined" && this.audioBuffer && this.audioTimestampOffset_ !== t) {
                        o3({
                            type: "audio",
                            sourceUpdater: this,
                            action: oW.timestampOffset(t),
                            name: "timestampOffset"
                        });
                        this.audioTimestampOffset_ = t;
                    }
                    return this.audioTimestampOffset_;
                };
                i.videoTimestampOffset = function e(t) {
                    if (typeof t !== "undefined" && this.videoBuffer && this.videoTimestampOffset !== t) {
                        o3({
                            type: "video",
                            sourceUpdater: this,
                            action: oW.timestampOffset(t),
                            name: "timestampOffset"
                        });
                        this.videoTimestampOffset_ = t;
                    }
                    return this.videoTimestampOffset_;
                };
                i.audioQueueCallback = function e(t) {
                    if (!this.audioBuffer) {
                        return;
                    }
                    o3({
                        type: "audio",
                        sourceUpdater: this,
                        action: oW.callback(t),
                        name: "callback"
                    });
                };
                i.videoQueueCallback = function e(t) {
                    if (!this.videoBuffer) {
                        return;
                    }
                    o3({
                        type: "video",
                        sourceUpdater: this,
                        action: oW.callback(t),
                        name: "callback"
                    });
                };
                i.dispose = function e() {
                    var t = this;
                    this.trigger("dispose");
                    oj.forEach(function(e) {
                        t.abort(e);
                        if (t.canRemoveSourceBuffer()) {
                            t.removeSourceBuffer(e);
                        } else {
                            t[e + "QueueCallback"](function() {
                                return oq(e, t);
                            });
                        }
                    });
                    this.videoAppendQueued_ = false;
                    this.delayedAudioAppendQueue_.length = 0;
                    if (this.sourceopenListener_) {
                        this.mediaSource.removeEventListener("sourceopen", this.sourceopenListener_);
                    }
                    this.off();
                };
                return t;
            })(nq.EventTarget);
            var oz = function e(t) {
                return decodeURIComponent(escape(String.fromCharCode.apply(null, t)));
            };
            var oG = new Uint8Array("\n\n".split("").map(function(e) {
                return e.charCodeAt(0);
            }));
            var oK = (function(e) {
                (0, l.Z)(t, e);
                function t(t, i) {
                    var r;
                    if (i === void 0) {
                        i = {};
                    }
                    r = e.call(this, t, i) || this;
                    r.mediaSource_ = null;
                    r.subtitlesTrack_ = null;
                    r.loaderType_ = "subtitle";
                    r.featuresNativeTextTracks_ = t.featuresNativeTextTracks;
                    r.shouldSaveSegmentTimingInfo_ = false;
                    return r;
                }
                var i = t.prototype;
                i.createTransmuxer_ = function e() {
                    return null;
                };
                i.buffered_ = function e() {
                    if (!this.subtitlesTrack_ || !this.subtitlesTrack_.cues || !this.subtitlesTrack_.cues.length) {
                        return nq.createTimeRanges();
                    }
                    var t = this.subtitlesTrack_.cues;
                    var i = t[0].startTime;
                    var r = t[t.length - 1].startTime;
                    return nq.createTimeRanges([
                        [
                            i,
                            r
                        ]
                    ]);
                };
                i.initSegmentForMap = function e(t, i) {
                    if (i === void 0) {
                        i = false;
                    }
                    if (!t) {
                        return null;
                    }
                    var r = a7(t);
                    var n = this.initSegments_[r];
                    if (i && !n && t.bytes) {
                        var a = oG.byteLength + t.bytes.byteLength;
                        var s = new Uint8Array(a);
                        s.set(t.bytes);
                        s.set(oG, t.bytes.byteLength);
                        this.initSegments_[r] = n = {
                            resolvedUri: t.resolvedUri,
                            byterange: t.byterange,
                            bytes: s
                        };
                    }
                    return n || t;
                };
                i.couldBeginLoading_ = function e() {
                    return (this.playlist_ && this.subtitlesTrack_ && !this.paused());
                };
                i.init_ = function e() {
                    this.state = "READY";
                    this.resetEverything();
                    return this.monitorBuffer_();
                };
                i.track = function e(t) {
                    if (typeof t === "undefined") {
                        return this.subtitlesTrack_;
                    }
                    this.subtitlesTrack_ = t;
                    if (this.state === "INIT" && this.couldBeginLoading_()) {
                        this.init_();
                    }
                    return this.subtitlesTrack_;
                };
                i.remove = function e(t, i) {
                    oy(t, i, this.subtitlesTrack_);
                };
                i.fillBuffer_ = function e() {
                    var t = this;
                    var i = this.chooseNextRequest_();
                    if (!i) {
                        return;
                    }
                    if (this.syncController_.timestampOffsetForTimeline(i.timeline) === null) {
                        var r = function e() {
                            t.state = "READY";
                            if (!t.paused()) {
                                t.monitorBuffer_();
                            }
                        };
                        this.syncController_.one("timestampoffset", r);
                        this.state = "WAITING_ON_TIMELINE";
                        return;
                    }
                    this.loadSegment_(i);
                };
                i.timestampOffsetForSegment_ = function e() {
                    return null;
                };
                i.chooseNextRequest_ = function t() {
                    return this.skipEmptySegments_(e.prototype.chooseNextRequest_.call(this));
                };
                i.skipEmptySegments_ = function e(t) {
                    while(t && t.segment.empty){
                        if (t.mediaIndex + 1 >= t.playlist.segments.length) {
                            t = null;
                            break;
                        }
                        t = this.generateSegmentInfo_({
                            playlist: t.playlist,
                            mediaIndex: t.mediaIndex + 1,
                            startOfSegment: t.startOfSegment + t.duration,
                            isSyncRequest: t.isSyncRequest
                        });
                    }
                    return t;
                };
                i.stopForError = function e(t) {
                    this.error(t);
                    this.state = "READY";
                    this.pause();
                    this.trigger("error");
                };
                i.segmentRequestFinished_ = function e(t, i, r) {
                    var a = this;
                    if (!this.subtitlesTrack_) {
                        this.state = "READY";
                        return;
                    }
                    this.saveTransferStats_(i.stats);
                    if (!this.pendingSegment_) {
                        this.state = "READY";
                        this.mediaRequestsAborted += 1;
                        return;
                    }
                    if (t) {
                        if (t.code === s1.TIMEOUT) {
                            this.handleTimeout_();
                        }
                        if (t.code === s1.ABORTED) {
                            this.mediaRequestsAborted += 1;
                        } else {
                            this.mediaRequestsErrored += 1;
                        }
                        this.stopForError(t);
                        return;
                    }
                    var s = this.pendingSegment_;
                    this.saveBandwidthRelatedStats_(s.duration, i.stats);
                    this.state = "APPENDING";
                    this.trigger("appending");
                    var o = s.segment;
                    if (o.map) {
                        o.map.bytes = i.map.bytes;
                    }
                    s.bytes = i.bytes;
                    if (typeof n().WebVTT !== "function" && this.subtitlesTrack_ && this.subtitlesTrack_.tech_) {
                        var u;
                        var l = function e() {
                            a.subtitlesTrack_.tech_.off("vttjsloaded", u);
                            a.stopForError({
                                message: "Error loading vtt.js"
                            });
                            return;
                        };
                        u = function e() {
                            a.subtitlesTrack_.tech_.off("vttjserror", l);
                            a.segmentRequestFinished_(t, i, r);
                        };
                        this.state = "WAITING_ON_VTTJS";
                        this.subtitlesTrack_.tech_.one("vttjsloaded", u);
                        this.subtitlesTrack_.tech_.one("vttjserror", l);
                        return;
                    }
                    o.requested = true;
                    try {
                        this.parseVTTCues_(s);
                    } catch (d) {
                        this.stopForError({
                            message: d.message
                        });
                        return;
                    }
                    this.updateTimeMapping_(s, this.syncController_.timelines[s.timeline], this.playlist_);
                    if (s.cues.length) {
                        s.timingInfo = {
                            start: s.cues[0].startTime,
                            end: s.cues[s.cues.length - 1].endTime
                        };
                    } else {
                        s.timingInfo = {
                            start: s.startOfSegment,
                            end: s.startOfSegment + s.duration
                        };
                    }
                    if (s.isSyncRequest) {
                        this.trigger("syncinfoupdate");
                        this.pendingSegment_ = null;
                        this.state = "READY";
                        return;
                    }
                    s.byteLength = s.bytes.byteLength;
                    this.mediaSecondsLoaded += o.duration;
                    s.cues.forEach(function(e) {
                        a.subtitlesTrack_.addCue(a.featuresNativeTextTracks_ ? new (n().VTTCue)(e.startTime, e.endTime, e.text) : e);
                    });
                    oT(this.subtitlesTrack_);
                    this.handleAppendsDone_();
                };
                i.handleData_ = function e() {};
                i.updateTimingInfoEnd_ = function e() {};
                i.parseVTTCues_ = function e(t) {
                    var i;
                    var r = false;
                    if (typeof n().TextDecoder === "function") {
                        i = new (n().TextDecoder)("utf8");
                    } else {
                        i = n().WebVTT.StringDecoder();
                        r = true;
                    }
                    var a = new (n().WebVTT.Parser)(n(), n().vttjs, i);
                    t.cues = [];
                    t.timestampmap = {
                        MPEGTS: 0,
                        LOCAL: 0
                    };
                    a.oncue = t.cues.push.bind(t.cues);
                    a.ontimestampmap = function(e) {
                        t.timestampmap = e;
                    };
                    a.onparsingerror = function(e) {
                        nq.log.warn("Error encountered when parsing cues: " + e.message);
                    };
                    if (t.segment.map) {
                        var s = t.segment.map.bytes;
                        if (r) {
                            s = oz(s);
                        }
                        a.parse(s);
                    }
                    var o = t.bytes;
                    if (r) {
                        o = oz(o);
                    }
                    a.parse(o);
                    a.flush();
                };
                i.updateTimeMapping_ = function e(t, i, r) {
                    var n = t.segment;
                    if (!i) {
                        return;
                    }
                    if (!t.cues.length) {
                        n.empty = true;
                        return;
                    }
                    var a = t.timestampmap;
                    var s = a.MPEGTS / _.ONE_SECOND_IN_TS - a.LOCAL + i.mapping;
                    t.cues.forEach(function(e) {
                        e.startTime += s;
                        e.endTime += s;
                    });
                    if (!r.syncInfo) {
                        var o = t.cues[0].startTime;
                        var u = t.cues[t.cues.length - 1].startTime;
                        r.syncInfo = {
                            mediaSequence: r.mediaSequence + t.mediaIndex,
                            time: Math.min(o, u - n.duration)
                        };
                    }
                };
                return t;
            })(oF);
            var oZ = function e(t, i) {
                var r = t.cues;
                for(var n = 0; n < r.length; n++){
                    var a = r[n];
                    if (i >= a.adStartTime && i <= a.adEndTime) {
                        return a;
                    }
                }
                return null;
            };
            var oQ = function e(t, i, r) {
                if (r === void 0) {
                    r = 0;
                }
                if (!t.segments) {
                    return;
                }
                var a = r;
                var s;
                for(var o = 0; o < t.segments.length; o++){
                    var u = t.segments[o];
                    if (!s) {
                        s = oZ(i, a + u.duration / 2);
                    }
                    if (s) {
                        if ("cueIn" in u) {
                            s.endTime = a;
                            s.adEndTime = a;
                            a += u.duration;
                            s = null;
                            continue;
                        }
                        if (a < s.endTime) {
                            a += u.duration;
                            continue;
                        }
                        s.endTime += u.duration;
                    } else {
                        if ("cueOut" in u) {
                            s = new (n().VTTCue)(a, a + u.duration, u.cueOut);
                            s.adStartTime = a;
                            s.adEndTime = a + parseFloat(u.cueOut);
                            i.addCue(s);
                        }
                        if ("cueOutCont" in u) {
                            var l = u.cueOutCont.split("/").map(parseFloat), d = l[0], c = l[1];
                            s = new (n().VTTCue)(a, a + u.duration, "");
                            s.adStartTime = a - d;
                            s.adEndTime = s.adStartTime + c;
                            i.addCue(s);
                        }
                    }
                    a += u.duration;
                }
            };
            var o7 = 86400;
            var oX = [
                {
                    name: "VOD",
                    run: function e(t, i, r, n, a) {
                        if (r !== Infinity) {
                            var s = {
                                time: 0,
                                segmentIndex: 0,
                                partIndex: null
                            };
                            return s;
                        }
                        return null;
                    }
                },
                {
                    name: "ProgramDateTime",
                    run: function e(t, i, r, n, a) {
                        if (!Object.keys(t.timelineToDatetimeMappings).length) {
                            return null;
                        }
                        var s = null;
                        var o = null;
                        var u = aa(i);
                        a = a || 0;
                        for(var l = 0; l < u.length; l++){
                            var d = i.endList || a === 0 ? l : u.length - (l + 1);
                            var c = u[d];
                            var h = c.segment;
                            var f = t.timelineToDatetimeMappings[h.timeline];
                            if (!f || !h.dateTimeObject) {
                                continue;
                            }
                            var p = h.dateTimeObject.getTime() / 1000;
                            var m = p + f;
                            if (h.parts && typeof c.partIndex === "number") {
                                for(var v = 0; v < c.partIndex; v++){
                                    m += h.parts[v].duration;
                                }
                            }
                            var g = Math.abs(a - m);
                            if (o !== null && (g === 0 || o < g)) {
                                break;
                            }
                            o = g;
                            s = {
                                time: m,
                                segmentIndex: c.segmentIndex,
                                partIndex: c.partIndex
                            };
                        }
                        return s;
                    }
                },
                {
                    name: "Segment",
                    run: function e(t, i, r, n, a) {
                        var s = null;
                        var o = null;
                        a = a || 0;
                        var u = aa(i);
                        for(var l = 0; l < u.length; l++){
                            var d = i.endList || a === 0 ? l : u.length - (l + 1);
                            var c = u[d];
                            var h = c.segment;
                            var f = (c.part && c.part.start) || (h && h.start);
                            if (h.timeline === n && typeof f !== "undefined") {
                                var p = Math.abs(a - f);
                                if (o !== null && o < p) {
                                    break;
                                }
                                if (!s || o === null || o >= p) {
                                    o = p;
                                    s = {
                                        time: f,
                                        segmentIndex: c.segmentIndex,
                                        partIndex: c.partIndex
                                    };
                                }
                            }
                        }
                        return s;
                    }
                },
                {
                    name: "Discontinuity",
                    run: function e(t, i, r, n, a) {
                        var s = null;
                        a = a || 0;
                        if (i.discontinuityStarts && i.discontinuityStarts.length) {
                            var o = null;
                            for(var u = 0; u < i.discontinuityStarts.length; u++){
                                var l = i.discontinuityStarts[u];
                                var d = i.discontinuitySequence + u + 1;
                                var c = t.discontinuities[d];
                                if (c) {
                                    var h = Math.abs(a - c.time);
                                    if (o !== null && o < h) {
                                        break;
                                    }
                                    if (!s || o === null || o >= h) {
                                        o = h;
                                        s = {
                                            time: c.time,
                                            segmentIndex: l,
                                            partIndex: null
                                        };
                                    }
                                }
                            }
                        }
                        return s;
                    }
                },
                {
                    name: "Playlist",
                    run: function e(t, i, r, n, a) {
                        if (i.syncInfo) {
                            var s = {
                                time: i.syncInfo.time,
                                segmentIndex: i.syncInfo.mediaSequence - i.mediaSequence,
                                partIndex: null
                            };
                            return s;
                        }
                        return null;
                    }
                }, 
            ];
            var oY = (function(e) {
                (0, l.Z)(t, e);
                function t(t) {
                    var i;
                    i = e.call(this) || this;
                    i.timelines = [];
                    i.discontinuities = [];
                    i.timelineToDatetimeMappings = {};
                    i.logger_ = n5("SyncController");
                    return i;
                }
                var i = t.prototype;
                i.getSyncPoint = function e(t, i, r, n) {
                    var a = this.runStrategies_(t, i, r, n);
                    if (!a.length) {
                        return null;
                    }
                    return this.selectSyncPoint_(a, {
                        key: "time",
                        value: n
                    });
                };
                i.getExpiredTime = function e(t, i) {
                    if (!t || !t.segments) {
                        return null;
                    }
                    var r = this.runStrategies_(t, i, t.discontinuitySequence, 0);
                    if (!r.length) {
                        return null;
                    }
                    var n = this.selectSyncPoint_(r, {
                        key: "segmentIndex",
                        value: 0
                    });
                    if (n.segmentIndex > 0) {
                        n.time *= -1;
                    }
                    return Math.abs(n.time + af({
                        defaultDuration: t.targetDuration,
                        durationList: t.segments,
                        startIndex: n.segmentIndex,
                        endIndex: 0
                    }));
                };
                i.runStrategies_ = function e(t, i, r, n) {
                    var a = [];
                    for(var s = 0; s < oX.length; s++){
                        var o = oX[s];
                        var u = o.run(this, t, i, r, n);
                        if (u) {
                            u.strategy = o.name;
                            a.push({
                                strategy: o.name,
                                syncPoint: u
                            });
                        }
                    }
                    return a;
                };
                i.selectSyncPoint_ = function e(t, i) {
                    var r = t[0].syncPoint;
                    var n = Math.abs(t[0].syncPoint[i.key] - i.value);
                    var a = t[0].strategy;
                    for(var s = 1; s < t.length; s++){
                        var o = Math.abs(t[s].syncPoint[i.key] - i.value);
                        if (o < n) {
                            n = o;
                            r = t[s].syncPoint;
                            a = t[s].strategy;
                        }
                    }
                    this.logger_("syncPoint for [" + i.key + ": " + i.value + "] chosen with strategy" + (" [" + a + "]: [time:" + r.time + ",") + (" segmentIndex:" + r.segmentIndex) + (typeof r.partIndex === "number" ? ",partIndex:" + r.partIndex : "") + "]");
                    return r;
                };
                i.saveExpiredSegmentInfo = function e(t, i) {
                    var r = i.mediaSequence - t.mediaSequence;
                    if (r > o7) {
                        nq.log.warn("Not saving expired segment info. Media sequence gap " + r + " is too large.");
                        return;
                    }
                    for(var n = r - 1; n >= 0; n--){
                        var a = t.segments[n];
                        if (a && typeof a.start !== "undefined") {
                            i.syncInfo = {
                                mediaSequence: t.mediaSequence + n,
                                time: a.start
                            };
                            this.logger_("playlist refresh sync: [time:" + i.syncInfo.time + "," + (" mediaSequence: " + i.syncInfo.mediaSequence + "]"));
                            this.trigger("syncinfoupdate");
                            break;
                        }
                    }
                };
                i.setDateTimeMappingForStart = function e(t) {
                    this.timelineToDatetimeMappings = {};
                    if (t.segments && t.segments.length && t.segments[0].dateTimeObject) {
                        var i = t.segments[0];
                        var r = i.dateTimeObject.getTime() / 1000;
                        this.timelineToDatetimeMappings[i.timeline] = -r;
                    }
                };
                i.saveSegmentTimingInfo = function e(t) {
                    var i = t.segmentInfo, r = t.shouldSaveTimelineMapping;
                    var n = this.calculateSegmentTimeMapping_(i, i.timingInfo, r);
                    var a = i.segment;
                    if (n) {
                        this.saveDiscontinuitySyncInfo_(i);
                        if (!i.playlist.syncInfo) {
                            i.playlist.syncInfo = {
                                mediaSequence: i.playlist.mediaSequence + i.mediaIndex,
                                time: a.start
                            };
                        }
                    }
                    var s = a.dateTimeObject;
                    if (a.discontinuity && r && s) {
                        this.timelineToDatetimeMappings[a.timeline] = -(s.getTime() / 1000);
                    }
                };
                i.timestampOffsetForTimeline = function e(t) {
                    if (typeof this.timelines[t] === "undefined") {
                        return null;
                    }
                    return this.timelines[t].time;
                };
                i.mappingForTimeline = function e(t) {
                    if (typeof this.timelines[t] === "undefined") {
                        return null;
                    }
                    return this.timelines[t].mapping;
                };
                i.calculateSegmentTimeMapping_ = function e(t, i, r) {
                    var n = t.segment;
                    var a = t.part;
                    var s = this.timelines[t.timeline];
                    var o;
                    var u;
                    if (typeof t.timestampOffset === "number") {
                        s = {
                            time: t.startOfSegment,
                            mapping: t.startOfSegment - i.start
                        };
                        if (r) {
                            this.timelines[t.timeline] = s;
                            this.trigger("timestampoffset");
                            this.logger_("time mapping for timeline " + t.timeline + ": " + ("[time: " + s.time + "] [mapping: " + s.mapping + "]"));
                        }
                        o = t.startOfSegment;
                        u = i.end + s.mapping;
                    } else if (s) {
                        o = i.start + s.mapping;
                        u = i.end + s.mapping;
                    } else {
                        return false;
                    }
                    if (a) {
                        a.start = o;
                        a.end = u;
                    }
                    if (!n.start || o < n.start) {
                        n.start = o;
                    }
                    n.end = u;
                    return true;
                };
                i.saveDiscontinuitySyncInfo_ = function e(t) {
                    var i = t.playlist;
                    var r = t.segment;
                    if (r.discontinuity) {
                        this.discontinuities[r.timeline] = {
                            time: r.start,
                            accuracy: 0
                        };
                    } else if (i.discontinuityStarts && i.discontinuityStarts.length) {
                        for(var n = 0; n < i.discontinuityStarts.length; n++){
                            var a = i.discontinuityStarts[n];
                            var s = i.discontinuitySequence + n + 1;
                            var o = a - t.mediaIndex;
                            var u = Math.abs(o);
                            if (!this.discontinuities[s] || this.discontinuities[s].accuracy > u) {
                                var l = void 0;
                                if (o < 0) {
                                    l = r.start - af({
                                        defaultDuration: i.targetDuration,
                                        durationList: i.segments,
                                        startIndex: t.mediaIndex,
                                        endIndex: a
                                    });
                                } else {
                                    l = r.end + af({
                                        defaultDuration: i.targetDuration,
                                        durationList: i.segments,
                                        startIndex: t.mediaIndex + 1,
                                        endIndex: a
                                    });
                                }
                                this.discontinuities[s] = {
                                    time: l,
                                    accuracy: u
                                };
                            }
                        }
                    }
                };
                i.dispose = function e() {
                    this.trigger("dispose");
                    this.off();
                };
                return t;
            })(nq.EventTarget);
            var o9 = (function(e) {
                (0, l.Z)(t, e);
                function t() {
                    var t;
                    t = e.call(this) || this;
                    t.pendingTimelineChanges_ = {};
                    t.lastTimelineChanges_ = {};
                    return t;
                }
                var i = t.prototype;
                i.clearPendingTimelineChange = function e(t) {
                    this.pendingTimelineChanges_[t] = null;
                    this.trigger("pendingtimelinechange");
                };
                i.pendingTimelineChange = function e(t) {
                    var i = t.type, r = t.from, n = t.to;
                    if (typeof r === "number" && typeof n === "number") {
                        this.pendingTimelineChanges_[i] = {
                            type: i,
                            from: r,
                            to: n
                        };
                        this.trigger("pendingtimelinechange");
                    }
                    return this.pendingTimelineChanges_[i];
                };
                i.lastTimelineChange = function e(t) {
                    var i = t.type, r = t.from, n = t.to;
                    if (typeof r === "number" && typeof n === "number") {
                        this.lastTimelineChanges_[i] = {
                            type: i,
                            from: r,
                            to: n
                        };
                        delete this.pendingTimelineChanges_[i];
                        this.trigger("timelinechange");
                    }
                    return this.lastTimelineChanges_[i];
                };
                i.dispose = function e() {
                    this.trigger("dispose");
                    this.pendingTimelineChanges_ = {};
                    this.lastTimelineChanges_ = {};
                    this.off();
                };
                return t;
            })(nq.EventTarget);
            var oJ = sC(sE(function() {
                function e(e, i, r) {
                    return ((r = {
                        path: i,
                        exports: {},
                        require: function e(i, n) {
                            return t(i, n === undefined || n === null ? r.path : n);
                        }
                    }), e(r, r.exports), r.exports);
                }
                function t() {
                    throw new Error("Dynamic requires are not currently supported by @rollup/plugin-commonjs");
                }
                var i = e(function(e) {
                    function t(e, t) {
                        for(var i = 0; i < t.length; i++){
                            var r = t[i];
                            r.enumerable = r.enumerable || false;
                            r.configurable = true;
                            if ("value" in r) r.writable = true;
                            Object.defineProperty(e, r.key, r);
                        }
                    }
                    function i(e, i, r) {
                        if (i) t(e.prototype, i);
                        if (r) t(e, r);
                        return e;
                    }
                    e.exports = i;
                    (e.exports["default"] = e.exports), (e.exports.__esModule = true);
                });
                var r = e(function(e) {
                    function t(i, r) {
                        e.exports = t = Object.setPrototypeOf || function e(t, i) {
                            t.__proto__ = i;
                            return t;
                        };
                        (e.exports["default"] = e.exports), (e.exports.__esModule = true);
                        return t(i, r);
                    }
                    e.exports = t;
                    (e.exports["default"] = e.exports), (e.exports.__esModule = true);
                });
                var n = e(function(e) {
                    function t(e, t) {
                        e.prototype = Object.create(t.prototype);
                        e.prototype.constructor = e;
                        r(e, t);
                    }
                    e.exports = t;
                    (e.exports["default"] = e.exports), (e.exports.__esModule = true);
                });
                var a = (function() {
                    function e() {
                        this.listeners = {};
                    }
                    var t = e.prototype;
                    t.on = function e(t, i) {
                        if (!this.listeners[t]) {
                            this.listeners[t] = [];
                        }
                        this.listeners[t].push(i);
                    };
                    t.off = function e(t, i) {
                        if (!this.listeners[t]) {
                            return false;
                        }
                        var r = this.listeners[t].indexOf(i);
                        this.listeners[t] = this.listeners[t].slice(0);
                        this.listeners[t].splice(r, 1);
                        return r > -1;
                    };
                    t.trigger = function e(t) {
                        var i = this.listeners[t];
                        if (!i) {
                            return;
                        }
                        if (arguments.length === 2) {
                            var r = i.length;
                            for(var n = 0; n < r; ++n){
                                i[n].call(this, arguments[1]);
                            }
                        } else {
                            var a = Array.prototype.slice.call(arguments, 1);
                            var s = i.length;
                            for(var o = 0; o < s; ++o){
                                i[o].apply(this, a);
                            }
                        }
                    };
                    t.dispose = function e() {
                        this.listeners = {};
                    };
                    t.pipe = function e(t) {
                        this.on("data", function(e) {
                            t.push(e);
                        });
                    };
                    return e;
                })();
                function s(e) {
                    return e.subarray(0, e.byteLength - e[e.byteLength - 1]);
                }
                var o = function e() {
                    var t = [
                        [
                            [],
                            [],
                            [],
                            [],
                            []
                        ],
                        [
                            [],
                            [],
                            [],
                            [],
                            []
                        ], 
                    ];
                    var i = t[0];
                    var r = t[1];
                    var n = i[4];
                    var a = r[4];
                    var s;
                    var o;
                    var u;
                    var l = [];
                    var d = [];
                    var c;
                    var h;
                    var f;
                    var p;
                    var m;
                    var v;
                    for(s = 0; s < 256; s++){
                        d[(l[s] = (s << 1) ^ ((s >> 7) * 283)) ^ s] = s;
                    }
                    for(o = u = 0; !n[o]; o ^= c || 1, u = d[u] || 1){
                        p = u ^ (u << 1) ^ (u << 2) ^ (u << 3) ^ (u << 4);
                        p = (p >> 8) ^ (p & 255) ^ 99;
                        n[o] = p;
                        a[p] = o;
                        f = l[(h = l[(c = l[o])])];
                        v = (f * 0x1010101) ^ (h * 0x10001) ^ (c * 0x101) ^ (o * 0x1010100);
                        m = (l[p] * 0x101) ^ (p * 0x1010100);
                        for(s = 0; s < 4; s++){
                            i[s][o] = m = (m << 24) ^ (m >>> 8);
                            r[s][p] = v = (v << 24) ^ (v >>> 8);
                        }
                    }
                    for(s = 0; s < 5; s++){
                        i[s] = i[s].slice(0);
                        r[s] = r[s].slice(0);
                    }
                    return t;
                };
                var u = null;
                var l = (function() {
                    function e(e) {
                        if (!u) {
                            u = o();
                        }
                        this._tables = [
                            [
                                u[0][0].slice(),
                                u[0][1].slice(),
                                u[0][2].slice(),
                                u[0][3].slice(),
                                u[0][4].slice(), 
                            ],
                            [
                                u[1][0].slice(),
                                u[1][1].slice(),
                                u[1][2].slice(),
                                u[1][3].slice(),
                                u[1][4].slice(), 
                            ], 
                        ];
                        var t;
                        var i;
                        var r;
                        var n = this._tables[0][4];
                        var a = this._tables[1];
                        var s = e.length;
                        var l = 1;
                        if (s !== 4 && s !== 6 && s !== 8) {
                            throw new Error("Invalid aes key size");
                        }
                        var d = e.slice(0);
                        var c = [];
                        this._key = [
                            d,
                            c
                        ];
                        for(t = s; t < 4 * s + 28; t++){
                            r = d[t - 1];
                            if (t % s === 0 || (s === 8 && t % s === 4)) {
                                r = (n[r >>> 24] << 24) ^ (n[(r >> 16) & 255] << 16) ^ (n[(r >> 8) & 255] << 8) ^ n[r & 255];
                                if (t % s === 0) {
                                    r = (r << 8) ^ (r >>> 24) ^ (l << 24);
                                    l = (l << 1) ^ ((l >> 7) * 283);
                                }
                            }
                            d[t] = d[t - s] ^ r;
                        }
                        for(i = 0; t; i++, t--){
                            r = d[i & 3 ? t : t - 4];
                            if (t <= 4 || i < 4) {
                                c[i] = r;
                            } else {
                                c[i] = a[0][n[r >>> 24]] ^ a[1][n[(r >> 16) & 255]] ^ a[2][n[(r >> 8) & 255]] ^ a[3][n[r & 255]];
                            }
                        }
                    }
                    var t = e.prototype;
                    t.decrypt = function e(t, i, r, n, a, s) {
                        var o = this._key[1];
                        var u = t ^ o[0];
                        var l = n ^ o[1];
                        var d = r ^ o[2];
                        var c = i ^ o[3];
                        var h;
                        var f;
                        var p;
                        var m = o.length / 4 - 2;
                        var v;
                        var g = 4;
                        var $ = this._tables[1];
                        var y = $[0];
                        var T = $[1];
                        var b = $[2];
                        var x = $[3];
                        var S = $[4];
                        for(v = 0; v < m; v++){
                            h = y[u >>> 24] ^ T[(l >> 16) & 255] ^ b[(d >> 8) & 255] ^ x[c & 255] ^ o[g];
                            f = y[l >>> 24] ^ T[(d >> 16) & 255] ^ b[(c >> 8) & 255] ^ x[u & 255] ^ o[g + 1];
                            p = y[d >>> 24] ^ T[(c >> 16) & 255] ^ b[(u >> 8) & 255] ^ x[l & 255] ^ o[g + 2];
                            c = y[c >>> 24] ^ T[(u >> 16) & 255] ^ b[(l >> 8) & 255] ^ x[d & 255] ^ o[g + 3];
                            g += 4;
                            u = h;
                            l = f;
                            d = p;
                        }
                        for(v = 0; v < 4; v++){
                            a[(3 & -v) + s] = (S[u >>> 24] << 24) ^ (S[(l >> 16) & 255] << 16) ^ (S[(d >> 8) & 255] << 8) ^ S[c & 255] ^ o[g++];
                            h = u;
                            u = l;
                            l = d;
                            d = c;
                            c = h;
                        }
                    };
                    return e;
                })();
                var d = (function(e) {
                    n(t, e);
                    function t() {
                        var t;
                        t = e.call(this, a) || this;
                        t.jobs = [];
                        t.delay = 1;
                        t.timeout_ = null;
                        return t;
                    }
                    var i = t.prototype;
                    i.processJob_ = function e() {
                        this.jobs.shift()();
                        if (this.jobs.length) {
                            this.timeout_ = setTimeout(this.processJob_.bind(this), this.delay);
                        } else {
                            this.timeout_ = null;
                        }
                    };
                    i.push = function e(t) {
                        this.jobs.push(t);
                        if (!this.timeout_) {
                            this.timeout_ = setTimeout(this.processJob_.bind(this), this.delay);
                        }
                    };
                    return t;
                })(a);
                var c = function e(t) {
                    return ((t << 24) | ((t & 0xff00) << 8) | ((t & 0xff0000) >> 8) | (t >>> 24));
                };
                var h = function e(t, i, r) {
                    var n = new Int32Array(t.buffer, t.byteOffset, t.byteLength >> 2);
                    var a = new l(Array.prototype.slice.call(i));
                    var s = new Uint8Array(t.byteLength);
                    var o = new Int32Array(s.buffer);
                    var u;
                    var d;
                    var h;
                    var f;
                    var p;
                    var m;
                    var v;
                    var g;
                    var $;
                    u = r[0];
                    d = r[1];
                    h = r[2];
                    f = r[3];
                    for($ = 0; $ < n.length; $ += 4){
                        p = c(n[$]);
                        m = c(n[$ + 1]);
                        v = c(n[$ + 2]);
                        g = c(n[$ + 3]);
                        a.decrypt(p, m, v, g, o, $);
                        o[$] = c(o[$] ^ u);
                        o[$ + 1] = c(o[$ + 1] ^ d);
                        o[$ + 2] = c(o[$ + 2] ^ h);
                        o[$ + 3] = c(o[$ + 3] ^ f);
                        u = p;
                        d = m;
                        h = v;
                        f = g;
                    }
                    return s;
                };
                var f = (function() {
                    function e(t, i, r, n) {
                        var a = e.STEP;
                        var o = new Int32Array(t.buffer);
                        var u = new Uint8Array(t.byteLength);
                        var l = 0;
                        this.asyncStream_ = new d();
                        this.asyncStream_.push(this.decryptChunk_(o.subarray(l, l + a), i, r, u));
                        for(l = a; l < o.length; l += a){
                            r = new Uint32Array([
                                c(o[l - 4]),
                                c(o[l - 3]),
                                c(o[l - 2]),
                                c(o[l - 1]), 
                            ]);
                            this.asyncStream_.push(this.decryptChunk_(o.subarray(l, l + a), i, r, u));
                        }
                        this.asyncStream_.push(function() {
                            n(null, s(u));
                        });
                    }
                    var t = e.prototype;
                    t.decryptChunk_ = function e(t, i, r, n) {
                        return function() {
                            var e = h(t, i, r);
                            n.set(e, t.byteOffset);
                        };
                    };
                    i(e, null, [
                        {
                            key: "STEP",
                            get: function e() {
                                return 32000;
                            }
                        }, 
                    ]);
                    return e;
                })();
                var p = function e(t) {
                    var i = {};
                    Object.keys(t).forEach(function(e) {
                        var r = t[e];
                        if (ArrayBuffer.isView(r)) {
                            i[e] = {
                                bytes: r.buffer,
                                byteOffset: r.byteOffset,
                                byteLength: r.byteLength
                            };
                        } else {
                            i[e] = r;
                        }
                    });
                    return i;
                };
                self.onmessage = function(e) {
                    var t = e.data;
                    var i = new Uint8Array(t.encrypted.bytes, t.encrypted.byteOffset, t.encrypted.byteLength);
                    var r = new Uint32Array(t.key.bytes, t.key.byteOffset, t.key.byteLength / 4);
                    var n = new Uint32Array(t.iv.bytes, t.iv.byteOffset, t.iv.byteLength / 4);
                    new f(i, r, n, function(e, i) {
                        self.postMessage(p({
                            source: t.source,
                            decrypted: i
                        }), [
                            i.buffer
                        ]);
                    });
                };
            }));
            var ue = sk(oJ);
            var ut = function e(t) {
                var i = t["default"] ? "main" : "alternative";
                if (t.characteristics && t.characteristics.indexOf("public.accessibility.describes-video") >= 0) {
                    i = "main-desc";
                }
                return i;
            };
            var ui = function e(t, i) {
                t.abort();
                t.pause();
                if (i && i.activePlaylistLoader) {
                    i.activePlaylistLoader.pause();
                    i.activePlaylistLoader = null;
                }
            };
            var ur = function e(t, i) {
                i.activePlaylistLoader = t;
                t.load();
            };
            var un = function e(t, i) {
                return function() {
                    var e = i.segmentLoaders, r = e[t], n = e.main, a = i.mediaTypes[t];
                    var s = a.activeTrack();
                    var o = a.getActiveGroup();
                    var u = a.activePlaylistLoader;
                    var l = a.lastGroup_;
                    if (o && l && o.id === l.id) {
                        return;
                    }
                    a.lastGroup_ = o;
                    a.lastTrack_ = s;
                    ui(r, a);
                    if (!o || o.isMasterPlaylist) {
                        return;
                    }
                    if (!o.playlistLoader) {
                        if (u) {
                            n.resetEverything();
                        }
                        return;
                    }
                    r.resyncLoader();
                    ur(o.playlistLoader, a);
                };
            };
            var ua = function e(t, i) {
                return function() {
                    var e = i.segmentLoaders[t], r = i.mediaTypes[t];
                    r.lastGroup_ = null;
                    e.abort();
                    e.pause();
                };
            };
            var us = function e(t, i) {
                return function() {
                    var e = i.masterPlaylistLoader, r = i.segmentLoaders, n = r[t], a = r.main, s = i.mediaTypes[t];
                    var o = s.activeTrack();
                    var u = s.getActiveGroup();
                    var l = s.activePlaylistLoader;
                    var d = s.lastTrack_;
                    if (d && o && d.id === o.id) {
                        return;
                    }
                    s.lastGroup_ = u;
                    s.lastTrack_ = o;
                    ui(n, s);
                    if (!u) {
                        return;
                    }
                    if (u.isMasterPlaylist) {
                        if (!o || !d || o.id === d.id) {
                            return;
                        }
                        var c = i.vhs.masterPlaylistController_;
                        var h = c.selectPlaylist();
                        if (c.media() === h) {
                            return;
                        }
                        s.logger_("track change. Switching master audio from " + d.id + " to " + o.id);
                        e.pause();
                        a.resetEverything();
                        c.fastQualityChange_(h);
                        return;
                    }
                    if (t === "AUDIO") {
                        if (!u.playlistLoader) {
                            a.setAudio(true);
                            a.resetEverything();
                            return;
                        }
                        n.setAudio(true);
                        a.setAudio(false);
                    }
                    if (l === u.playlistLoader) {
                        ur(u.playlistLoader, s);
                        return;
                    }
                    if (n.track) {
                        n.track(o);
                    }
                    n.resetEverything();
                    ur(u.playlistLoader, s);
                };
            };
            var uo = {
                AUDIO: function e(t, i) {
                    return function() {
                        var e = i.segmentLoaders[t], r = i.mediaTypes[t], n = i.blacklistCurrentPlaylist;
                        ui(e, r);
                        var a = r.activeTrack();
                        var s = r.activeGroup();
                        var o = (s.filter(function(e) {
                            return e["default"];
                        })[0] || s[0]).id;
                        var u = r.tracks[o];
                        if (a === u) {
                            n({
                                message: "Problem encountered loading the default audio track."
                            });
                            return;
                        }
                        nq.log.warn("Problem encountered loading the alternate audio track." + "Switching back to default.");
                        for(var l in r.tracks){
                            r.tracks[l].enabled = r.tracks[l] === u;
                        }
                        r.onTrackChanged();
                    };
                },
                SUBTITLES: function e(t, i) {
                    return function() {
                        var e = i.segmentLoaders[t], r = i.mediaTypes[t];
                        nq.log.warn("Problem encountered loading the subtitle track." + "Disabling subtitle track.");
                        ui(e, r);
                        var n = r.activeTrack();
                        if (n) {
                            n.mode = "disabled";
                        }
                        r.onTrackChanged();
                    };
                }
            };
            var uu = {
                AUDIO: function e(t, i, r) {
                    if (!i) {
                        return;
                    }
                    var n = r.tech, a = r.requestOptions, s = r.segmentLoaders[t];
                    i.on("loadedmetadata", function() {
                        var e = i.media();
                        s.playlist(e, a);
                        if (!n.paused() || (e.endList && n.preload() !== "none")) {
                            s.load();
                        }
                    });
                    i.on("loadedplaylist", function() {
                        s.playlist(i.media(), a);
                        if (!n.paused()) {
                            s.load();
                        }
                    });
                    i.on("error", uo[t](t, r));
                },
                SUBTITLES: function e(t, i, r) {
                    var n = r.tech, a = r.requestOptions, s = r.segmentLoaders[t], o = r.mediaTypes[t];
                    i.on("loadedmetadata", function() {
                        var e = i.media();
                        s.playlist(e, a);
                        s.track(o.activeTrack());
                        if (!n.paused() || (e.endList && n.preload() !== "none")) {
                            s.load();
                        }
                    });
                    i.on("loadedplaylist", function() {
                        s.playlist(i.media(), a);
                        if (!n.paused()) {
                            s.load();
                        }
                    });
                    i.on("error", uo[t](t, r));
                }
            };
            var ul = {
                AUDIO: function e(t, i) {
                    var r = i.vhs, n = i.sourceType, a = i.segmentLoaders[t], s = i.requestOptions, o = i.master.mediaGroups, u = i.mediaTypes[t], l = u.groups, d = u.tracks, c = u.logger_, h = i.masterPlaylistLoader;
                    var f = aE(h.master);
                    if (!o[t] || Object.keys(o[t]).length === 0) {
                        o[t] = {
                            main: {
                                default: {
                                    default: true
                                }
                            }
                        };
                        if (f) {
                            o[t].main["default"].playlists = h.master.playlists;
                        }
                    }
                    for(var p in o[t]){
                        if (!l[p]) {
                            l[p] = [];
                        }
                        for(var m in o[t][p]){
                            var v = o[t][p][m];
                            var g = void 0;
                            if (f) {
                                c("AUDIO group '" + p + "' label '" + m + "' is a master playlist");
                                v.isMasterPlaylist = true;
                                g = null;
                            } else if (n === "vhs-json" && v.playlists) {
                                g = new aq(v.playlists[0], r, s);
                            } else if (v.resolvedUri) {
                                g = new aq(v.resolvedUri, r, s);
                            } else if (v.playlists && n === "dash") {
                                g = new sy(v.playlists[0], r, s, h);
                            } else {
                                g = null;
                            }
                            v = nq.mergeOptions({
                                id: m,
                                playlistLoader: g
                            }, v);
                            uu[t](t, v.playlistLoader, i);
                            l[p].push(v);
                            if (typeof d[m] === "undefined") {
                                var $ = new nq.AudioTrack({
                                    id: m,
                                    kind: ut(v),
                                    enabled: false,
                                    language: v.language,
                                    default: v["default"],
                                    label: m
                                });
                                d[m] = $;
                            }
                        }
                    }
                    a.on("error", uo[t](t, i));
                },
                SUBTITLES: function e(t, i) {
                    var r = i.tech, n = i.vhs, a = i.sourceType, s = i.segmentLoaders[t], o = i.requestOptions, u = i.master.mediaGroups, l = i.mediaTypes[t], d = l.groups, c = l.tracks, h = i.masterPlaylistLoader;
                    for(var f in u[t]){
                        if (!d[f]) {
                            d[f] = [];
                        }
                        for(var p in u[t][f]){
                            if (u[t][f][p].forced) {
                                continue;
                            }
                            var m = u[t][f][p];
                            var v = void 0;
                            if (a === "hls") {
                                v = new aq(m.resolvedUri, n, o);
                            } else if (a === "dash") {
                                var g = m.playlists.filter(function(e) {
                                    return e.excludeUntil !== Infinity;
                                });
                                if (!g.length) {
                                    return;
                                }
                                v = new sy(m.playlists[0], n, o, h);
                            } else if (a === "vhs-json") {
                                v = new aq(m.playlists ? m.playlists[0] : m.resolvedUri, n, o);
                            }
                            m = nq.mergeOptions({
                                id: p,
                                playlistLoader: v
                            }, m);
                            uu[t](t, m.playlistLoader, i);
                            d[f].push(m);
                            if (typeof c[p] === "undefined") {
                                var $ = r.addRemoteTextTrack({
                                    id: p,
                                    kind: "subtitles",
                                    default: m["default"] && m.autoselect,
                                    language: m.language,
                                    label: p
                                }, false).track;
                                c[p] = $;
                            }
                        }
                    }
                    s.on("error", uo[t](t, i));
                },
                "CLOSED-CAPTIONS": function e(t, i) {
                    var r = i.tech, n = i.master.mediaGroups, a = i.mediaTypes[t], s = a.groups, o = a.tracks;
                    for(var u in n[t]){
                        if (!s[u]) {
                            s[u] = [];
                        }
                        for(var l in n[t][u]){
                            var d = n[t][u][l];
                            if (!/^(?:CC|SERVICE)/.test(d.instreamId)) {
                                continue;
                            }
                            var c = (r.options_.vhs && r.options_.vhs.captionServices) || {};
                            var h = {
                                label: l,
                                language: d.language,
                                instreamId: d.instreamId,
                                default: d["default"] && d.autoselect
                            };
                            if (c[h.instreamId]) {
                                h = nq.mergeOptions(h, c[h.instreamId]);
                            }
                            if (h["default"] === undefined) {
                                delete h["default"];
                            }
                            s[u].push(nq.mergeOptions({
                                id: l
                            }, d));
                            if (typeof o[l] === "undefined") {
                                var f = r.addRemoteTextTrack({
                                    id: h.instreamId,
                                    kind: "captions",
                                    default: h["default"],
                                    language: h.language,
                                    label: h.label
                                }, false).track;
                                o[l] = f;
                            }
                        }
                    }
                }
            };
            var ud = function e(t, i) {
                for(var r = 0; r < t.length; r++){
                    if (ak(i, t[r])) {
                        return true;
                    }
                    if (t[r].playlists && e(t[r].playlists, i)) {
                        return true;
                    }
                }
                return false;
            };
            var uc = function e(t, i) {
                return function(e) {
                    var r = i.masterPlaylistLoader, n = i.mediaTypes[t].groups;
                    var a = r.media();
                    if (!a) {
                        return null;
                    }
                    var s = null;
                    if (a.attributes[t]) {
                        s = n[a.attributes[t]];
                    }
                    var o = Object.keys(n);
                    if (!s) {
                        if (t === "AUDIO" && o.length > 1 && aE(i.master)) {
                            for(var u = 0; u < o.length; u++){
                                var l = n[o[u]];
                                if (ud(l, a)) {
                                    s = l;
                                    break;
                                }
                            }
                        } else if (n.main) {
                            s = n.main;
                        } else if (o.length === 1) {
                            s = n[o[0]];
                        }
                    }
                    if (typeof e === "undefined") {
                        return s;
                    }
                    if (e === null || !s) {
                        return null;
                    }
                    return (s.filter(function(t) {
                        return t.id === e.id;
                    })[0] || null);
                };
            };
            var uh = {
                AUDIO: function e(t, i) {
                    return function() {
                        var e = i.mediaTypes[t].tracks;
                        for(var r in e){
                            if (e[r].enabled) {
                                return e[r];
                            }
                        }
                        return null;
                    };
                },
                SUBTITLES: function e(t, i) {
                    return function() {
                        var e = i.mediaTypes[t].tracks;
                        for(var r in e){
                            if (e[r].mode === "showing" || e[r].mode === "hidden") {
                                return e[r];
                            }
                        }
                        return null;
                    };
                }
            };
            var uf = function e(t, i) {
                var r = i.mediaTypes;
                return function() {
                    var e = r[t].activeTrack();
                    if (!e) {
                        return null;
                    }
                    return r[t].activeGroup(e);
                };
            };
            var up = function e(t) {
                [
                    "AUDIO",
                    "SUBTITLES",
                    "CLOSED-CAPTIONS"
                ].forEach(function(e) {
                    ul[e](e, t);
                });
                var i = t.mediaTypes, r = t.masterPlaylistLoader, n = t.tech, a = t.vhs, s = t.segmentLoaders, o = s["AUDIO"], u = s.main;
                [
                    "AUDIO",
                    "SUBTITLES"
                ].forEach(function(e) {
                    i[e].activeGroup = uc(e, t);
                    i[e].activeTrack = uh[e](e, t);
                    i[e].onGroupChanged = un(e, t);
                    i[e].onGroupChanging = ua(e, t);
                    i[e].onTrackChanged = us(e, t);
                    i[e].getActiveGroup = uf(e, t);
                });
                var l = i.AUDIO.activeGroup();
                if (l) {
                    var d = (l.filter(function(e) {
                        return e["default"];
                    })[0] || l[0]).id;
                    i.AUDIO.tracks[d].enabled = true;
                    i.AUDIO.onGroupChanged();
                    i.AUDIO.onTrackChanged();
                    var c = i.AUDIO.getActiveGroup();
                    if (!c.playlistLoader) {
                        u.setAudio(true);
                    } else {
                        u.setAudio(false);
                        o.setAudio(true);
                    }
                }
                r.on("mediachange", function() {
                    [
                        "AUDIO",
                        "SUBTITLES"
                    ].forEach(function(e) {
                        return i[e].onGroupChanged();
                    });
                });
                r.on("mediachanging", function() {
                    [
                        "AUDIO",
                        "SUBTITLES"
                    ].forEach(function(e) {
                        return i[e].onGroupChanging();
                    });
                });
                var h = function e() {
                    i.AUDIO.onTrackChanged();
                    n.trigger({
                        type: "usage",
                        name: "vhs-audio-change"
                    });
                    n.trigger({
                        type: "usage",
                        name: "hls-audio-change"
                    });
                };
                n.audioTracks().addEventListener("change", h);
                n.remoteTextTracks().addEventListener("change", i.SUBTITLES.onTrackChanged);
                a.on("dispose", function() {
                    n.audioTracks().removeEventListener("change", h);
                    n.remoteTextTracks().removeEventListener("change", i.SUBTITLES.onTrackChanged);
                });
                n.clearTracks("audio");
                for(var f in i.AUDIO.tracks){
                    n.audioTracks().addTrack(i.AUDIO.tracks[f]);
                }
            };
            var um = function e() {
                var t = {};
                [
                    "AUDIO",
                    "SUBTITLES",
                    "CLOSED-CAPTIONS"
                ].forEach(function(e) {
                    t[e] = {
                        groups: {},
                        tracks: {},
                        activePlaylistLoader: null,
                        activeGroup: oN,
                        activeTrack: oN,
                        getActiveGroup: oN,
                        onGroupChanged: oN,
                        onTrackChanged: oN,
                        lastTrack_: null,
                        logger_: n5("MediaGroups[" + e + "]")
                    };
                });
                return t;
            };
            var uv = 60 * 2;
            var ug;
            var u$ = [
                "mediaRequests",
                "mediaRequestsAborted",
                "mediaRequestsTimedout",
                "mediaRequestsErrored",
                "mediaTransferDuration",
                "mediaBytesTransferred",
                "mediaAppends", 
            ];
            var u8 = function e(t) {
                return (this.audioSegmentLoader_[t] + this.mainSegmentLoader_[t]);
            };
            var uy = function e(t) {
                var i = t.currentPlaylist, r = t.buffered, n = t.currentTime, a = t.nextPlaylist, s = t.bufferLowWaterLine, o = t.bufferHighWaterLine, u = t.duration, l = t.experimentalBufferBasedABR, d = t.log;
                if (!a) {
                    nq.log.warn("We received no playlist to switch to. Please check your stream.");
                    return false;
                }
                var c = "allowing switch " + ((i && i.id) || "null") + " -> " + a.id;
                if (!i) {
                    d(c + " as current playlist is not set");
                    return true;
                }
                if (a.id === i.id) {
                    return false;
                }
                var h = Boolean(nZ(r, n).length);
                if (!i.endList) {
                    if (!h && typeof i.partTargetDuration === "number") {
                        d("not " + c + " as current playlist is live llhls, but currentTime isn't in buffered.");
                        return false;
                    }
                    d(c + " as current playlist is live");
                    return true;
                }
                var f = ai(r, n);
                var p = l ? sT.EXPERIMENTAL_MAX_BUFFER_LOW_WATER_LINE : sT.MAX_BUFFER_LOW_WATER_LINE;
                if (u < p) {
                    d(c + " as duration < max low water line (" + u + " < " + p + ")");
                    return true;
                }
                var m = a.attributes.BANDWIDTH;
                var v = i.attributes.BANDWIDTH;
                if (m < v && (!l || f < o)) {
                    var g = c + " as next bandwidth < current bandwidth (" + m + " < " + v + ")";
                    if (l) {
                        g += " and forwardBuffer < bufferHighWaterLine (" + f + " < " + o + ")";
                    }
                    d(g);
                    return true;
                }
                if ((!l || m > v) && f >= s) {
                    var $ = c + " as forwardBuffer >= bufferLowWaterLine (" + f + " >= " + s + ")";
                    if (l) {
                        $ += " and next bandwidth > current bandwidth (" + m + " > " + v + ")";
                    }
                    d($);
                    return true;
                }
                d("not " + c + " as no switching criteria met");
                return false;
            };
            var uT = (function(e) {
                (0, l.Z)(t, e);
                function t(t) {
                    var i;
                    i = e.call(this) || this;
                    var r = t.src, a = t.handleManifestRedirects, s = t.withCredentials, o = t.tech, l = t.bandwidth, d = t.externVhs, c = t.useCueTags, h = t.blacklistDuration, f = t.enableLowInitialPlaylist, p = t.sourceType, m = t.cacheEncryptionKeys, v = t.experimentalBufferBasedABR, g = t.experimentalLeastPixelDiffSelector, $ = t.captionServices;
                    if (!r) {
                        throw new Error("A non-empty playlist URL or JSON manifest string is required");
                    }
                    var y = t.maxPlaylistRetries;
                    if (y === null || typeof y === "undefined") {
                        y = Infinity;
                    }
                    ug = d;
                    i.experimentalBufferBasedABR = Boolean(v);
                    i.experimentalLeastPixelDiffSelector = Boolean(g);
                    i.withCredentials = s;
                    i.tech_ = o;
                    i.vhs_ = o.vhs;
                    i.sourceType_ = p;
                    i.useCueTags_ = c;
                    i.blacklistDuration = h;
                    i.maxPlaylistRetries = y;
                    i.enableLowInitialPlaylist = f;
                    if (i.useCueTags_) {
                        i.cueTagsTrack_ = i.tech_.addTextTrack("metadata", "ad-cues");
                        i.cueTagsTrack_.inBandMetadataTrackDispatchType = "";
                    }
                    i.requestOptions_ = {
                        withCredentials: s,
                        handleManifestRedirects: a,
                        maxPlaylistRetries: y,
                        timeout: null
                    };
                    i.on("error", i.pauseLoading);
                    i.mediaTypes_ = um();
                    i.mediaSource = new (n().MediaSource)();
                    i.handleDurationChange_ = i.handleDurationChange_.bind((0, u.Z)(i));
                    i.handleSourceOpen_ = i.handleSourceOpen_.bind((0, u.Z)(i));
                    i.handleSourceEnded_ = i.handleSourceEnded_.bind((0, u.Z)(i));
                    i.mediaSource.addEventListener("durationchange", i.handleDurationChange_);
                    i.mediaSource.addEventListener("sourceopen", i.handleSourceOpen_);
                    i.mediaSource.addEventListener("sourceended", i.handleSourceEnded_);
                    i.seekable_ = nq.createTimeRanges();
                    i.hasPlayed_ = false;
                    i.syncController_ = new oY(t);
                    i.segmentMetadataTrack_ = o.addRemoteTextTrack({
                        kind: "metadata",
                        label: "segment-metadata"
                    }, false).track;
                    i.decrypter_ = new ue();
                    i.sourceUpdater_ = new o5(i.mediaSource);
                    i.inbandTextTracks_ = {};
                    i.timelineChangeController_ = new o9();
                    var T = {
                        vhs: i.vhs_,
                        parse708captions: t.parse708captions,
                        captionServices: $,
                        mediaSource: i.mediaSource,
                        currentTime: i.tech_.currentTime.bind(i.tech_),
                        seekable: function e() {
                            return i.seekable();
                        },
                        seeking: function e() {
                            return i.tech_.seeking();
                        },
                        duration: function e() {
                            return i.duration();
                        },
                        hasPlayed: function e() {
                            return i.hasPlayed_;
                        },
                        goalBufferLength: function e() {
                            return i.goalBufferLength();
                        },
                        bandwidth: l,
                        syncController: i.syncController_,
                        decrypter: i.decrypter_,
                        sourceType: i.sourceType_,
                        inbandTextTracks: i.inbandTextTracks_,
                        cacheEncryptionKeys: m,
                        sourceUpdater: i.sourceUpdater_,
                        timelineChangeController: i.timelineChangeController_,
                        experimentalExactManifestTimings: t.experimentalExactManifestTimings
                    };
                    i.masterPlaylistLoader_ = i.sourceType_ === "dash" ? new sy(r, i.vhs_, i.requestOptions_) : new aq(r, i.vhs_, i.requestOptions_);
                    i.setupMasterPlaylistLoaderListeners_();
                    i.mainSegmentLoader_ = new oF(nq.mergeOptions(T, {
                        segmentMetadataTrack: i.segmentMetadataTrack_,
                        loaderType: "main"
                    }), t);
                    i.audioSegmentLoader_ = new oF(nq.mergeOptions(T, {
                        loaderType: "audio"
                    }), t);
                    i.subtitleSegmentLoader_ = new oK(nq.mergeOptions(T, {
                        loaderType: "vtt",
                        featuresNativeTextTracks: i.tech_.featuresNativeTextTracks
                    }), t);
                    i.setupSegmentLoaderListeners_();
                    if (i.experimentalBufferBasedABR) {
                        i.masterPlaylistLoader_.one("loadedplaylist", function() {
                            return i.startABRTimer_();
                        });
                        i.tech_.on("pause", function() {
                            return i.stopABRTimer_();
                        });
                        i.tech_.on("play", function() {
                            return i.startABRTimer_();
                        });
                    }
                    u$.forEach(function(e) {
                        i[e + "_"] = u8.bind((0, u.Z)(i), e);
                    });
                    i.logger_ = n5("MPC");
                    i.triggeredFmp4Usage = false;
                    if (i.tech_.preload() === "none") {
                        i.loadOnPlay_ = function() {
                            i.loadOnPlay_ = null;
                            i.masterPlaylistLoader_.load();
                        };
                        i.tech_.one("play", i.loadOnPlay_);
                    } else {
                        i.masterPlaylistLoader_.load();
                    }
                    i.timeToLoadedData__ = -1;
                    i.mainAppendsToLoadedData__ = -1;
                    i.audioAppendsToLoadedData__ = -1;
                    var b = i.tech_.preload() === "none" ? "play" : "loadstart";
                    i.tech_.one(b, function() {
                        var e = Date.now();
                        i.tech_.one("loadeddata", function() {
                            i.timeToLoadedData__ = Date.now() - e;
                            i.mainAppendsToLoadedData__ = i.mainSegmentLoader_.mediaAppends;
                            i.audioAppendsToLoadedData__ = i.audioSegmentLoader_.mediaAppends;
                        });
                    });
                    return i;
                }
                var i = t.prototype;
                i.mainAppendsToLoadedData_ = function e() {
                    return this.mainAppendsToLoadedData__;
                };
                i.audioAppendsToLoadedData_ = function e() {
                    return this.audioAppendsToLoadedData__;
                };
                i.appendsToLoadedData_ = function e() {
                    var t = this.mainAppendsToLoadedData_();
                    var i = this.audioAppendsToLoadedData_();
                    if (t === -1 || i === -1) {
                        return -1;
                    }
                    return t + i;
                };
                i.timeToLoadedData_ = function e() {
                    return this.timeToLoadedData__;
                };
                i.checkABR_ = function e() {
                    var t = this.selectPlaylist();
                    if (t && this.shouldSwitchToMedia_(t)) {
                        this.switchMedia_(t, "abr");
                    }
                };
                i.switchMedia_ = function e(t, i, r) {
                    var n = this.media();
                    var a = n && (n.id || n.uri);
                    var s = t.id || t.uri;
                    if (a && a !== s) {
                        this.logger_("switch media " + a + " -> " + s + " from " + i);
                        this.tech_.trigger({
                            type: "usage",
                            name: "vhs-rendition-change-" + i
                        });
                    }
                    this.masterPlaylistLoader_.media(t, r);
                };
                i.startABRTimer_ = function e() {
                    var t = this;
                    this.stopABRTimer_();
                    this.abrTimer_ = n().setInterval(function() {
                        return t.checkABR_();
                    }, 250);
                };
                i.stopABRTimer_ = function e() {
                    if (this.tech_.scrubbing && this.tech_.scrubbing()) {
                        return;
                    }
                    n().clearInterval(this.abrTimer_);
                    this.abrTimer_ = null;
                };
                i.getAudioTrackPlaylists_ = function e() {
                    var t = this.master();
                    var i = (t && t.playlists) || [];
                    if (!t || !t.mediaGroups || !t.mediaGroups.AUDIO) {
                        return i;
                    }
                    var r = t.mediaGroups.AUDIO;
                    var n = Object.keys(r);
                    var a;
                    if (Object.keys(this.mediaTypes_.AUDIO.groups).length) {
                        a = this.mediaTypes_.AUDIO.activeTrack();
                    } else {
                        var s = r.main || (n.length && r[n[0]]);
                        for(var o in s){
                            if (s[o]["default"]) {
                                a = {
                                    label: o
                                };
                                break;
                            }
                        }
                    }
                    if (!a) {
                        return i;
                    }
                    var u = [];
                    for(var l in r){
                        if (r[l][a.label]) {
                            var d = r[l][a.label];
                            if (d.playlists && d.playlists.length) {
                                u.push.apply(u, d.playlists);
                            } else if (d.uri) {
                                u.push(d);
                            } else if (t.playlists.length) {
                                for(var c = 0; c < t.playlists.length; c++){
                                    var h = t.playlists[c];
                                    if (h.attributes && h.attributes.AUDIO && h.attributes.AUDIO === l) {
                                        u.push(h);
                                    }
                                }
                            }
                        }
                    }
                    if (!u.length) {
                        return i;
                    }
                    return u;
                };
                i.setupMasterPlaylistLoaderListeners_ = function e() {
                    var t = this;
                    this.masterPlaylistLoader_.on("loadedmetadata", function() {
                        var e = t.masterPlaylistLoader_.media();
                        var i = e.targetDuration * 1.5 * 1000;
                        if (aS(t.masterPlaylistLoader_.master, t.masterPlaylistLoader_.media())) {
                            t.requestOptions_.timeout = 0;
                        } else {
                            t.requestOptions_.timeout = i;
                        }
                        if (e.endList && t.tech_.preload() !== "none") {
                            t.mainSegmentLoader_.playlist(e, t.requestOptions_);
                            t.mainSegmentLoader_.load();
                        }
                        up({
                            sourceType: t.sourceType_,
                            segmentLoaders: {
                                AUDIO: t.audioSegmentLoader_,
                                SUBTITLES: t.subtitleSegmentLoader_,
                                main: t.mainSegmentLoader_
                            },
                            tech: t.tech_,
                            requestOptions: t.requestOptions_,
                            masterPlaylistLoader: t.masterPlaylistLoader_,
                            vhs: t.vhs_,
                            master: t.master(),
                            mediaTypes: t.mediaTypes_,
                            blacklistCurrentPlaylist: t.blacklistCurrentPlaylist.bind(t)
                        });
                        t.triggerPresenceUsage_(t.master(), e);
                        t.setupFirstPlay();
                        if (!t.mediaTypes_.AUDIO.activePlaylistLoader || t.mediaTypes_.AUDIO.activePlaylistLoader.media()) {
                            t.trigger("selectedinitialmedia");
                        } else {
                            t.mediaTypes_.AUDIO.activePlaylistLoader.one("loadedmetadata", function() {
                                t.trigger("selectedinitialmedia");
                            });
                        }
                    });
                    this.masterPlaylistLoader_.on("loadedplaylist", function() {
                        if (t.loadOnPlay_) {
                            t.tech_.off("play", t.loadOnPlay_);
                        }
                        var e = t.masterPlaylistLoader_.media();
                        if (!e) {
                            t.excludeUnsupportedVariants_();
                            var i;
                            if (t.enableLowInitialPlaylist) {
                                i = t.selectInitialPlaylist();
                            }
                            if (!i) {
                                i = t.selectPlaylist();
                            }
                            if (!i || !t.shouldSwitchToMedia_(i)) {
                                return;
                            }
                            t.initialMedia_ = i;
                            t.switchMedia_(t.initialMedia_, "initial");
                            var r = t.sourceType_ === "vhs-json" && t.initialMedia_.segments;
                            if (!r) {
                                return;
                            }
                            e = t.initialMedia_;
                        }
                        t.handleUpdatedMediaPlaylist(e);
                    });
                    this.masterPlaylistLoader_.on("error", function() {
                        t.blacklistCurrentPlaylist(t.masterPlaylistLoader_.error);
                    });
                    this.masterPlaylistLoader_.on("mediachanging", function() {
                        t.mainSegmentLoader_.abort();
                        t.mainSegmentLoader_.pause();
                    });
                    this.masterPlaylistLoader_.on("mediachange", function() {
                        var e = t.masterPlaylistLoader_.media();
                        var i = e.targetDuration * 1.5 * 1000;
                        if (aS(t.masterPlaylistLoader_.master, t.masterPlaylistLoader_.media())) {
                            t.requestOptions_.timeout = 0;
                        } else {
                            t.requestOptions_.timeout = i;
                        }
                        t.mainSegmentLoader_.playlist(e, t.requestOptions_);
                        t.mainSegmentLoader_.load();
                        t.tech_.trigger({
                            type: "mediachange",
                            bubbles: true
                        });
                    });
                    this.masterPlaylistLoader_.on("playlistunchanged", function() {
                        var e = t.masterPlaylistLoader_.media();
                        if (e.lastExcludeReason_ === "playlist-unchanged") {
                            return;
                        }
                        var i = t.stuckAtPlaylistEnd_(e);
                        if (i) {
                            t.blacklistCurrentPlaylist({
                                message: "Playlist no longer updating.",
                                reason: "playlist-unchanged"
                            });
                            t.tech_.trigger("playliststuck");
                        }
                    });
                    this.masterPlaylistLoader_.on("renditiondisabled", function() {
                        t.tech_.trigger({
                            type: "usage",
                            name: "vhs-rendition-disabled"
                        });
                        t.tech_.trigger({
                            type: "usage",
                            name: "hls-rendition-disabled"
                        });
                    });
                    this.masterPlaylistLoader_.on("renditionenabled", function() {
                        t.tech_.trigger({
                            type: "usage",
                            name: "vhs-rendition-enabled"
                        });
                        t.tech_.trigger({
                            type: "usage",
                            name: "hls-rendition-enabled"
                        });
                    });
                };
                i.handleUpdatedMediaPlaylist = function e(t) {
                    if (this.useCueTags_) {
                        this.updateAdCues_(t);
                    }
                    this.mainSegmentLoader_.playlist(t, this.requestOptions_);
                    this.updateDuration(!t.endList);
                    if (!this.tech_.paused()) {
                        this.mainSegmentLoader_.load();
                        if (this.audioSegmentLoader_) {
                            this.audioSegmentLoader_.load();
                        }
                    }
                };
                i.triggerPresenceUsage_ = function e(t, i) {
                    var r = t.mediaGroups || {};
                    var n = true;
                    var a = Object.keys(r.AUDIO);
                    for(var s in r.AUDIO){
                        for(var o in r.AUDIO[s]){
                            var u = r.AUDIO[s][o];
                            if (!u.uri) {
                                n = false;
                            }
                        }
                    }
                    if (n) {
                        this.tech_.trigger({
                            type: "usage",
                            name: "vhs-demuxed"
                        });
                        this.tech_.trigger({
                            type: "usage",
                            name: "hls-demuxed"
                        });
                    }
                    if (Object.keys(r.SUBTITLES).length) {
                        this.tech_.trigger({
                            type: "usage",
                            name: "vhs-webvtt"
                        });
                        this.tech_.trigger({
                            type: "usage",
                            name: "hls-webvtt"
                        });
                    }
                    if (ug.Playlist.isAes(i)) {
                        this.tech_.trigger({
                            type: "usage",
                            name: "vhs-aes"
                        });
                        this.tech_.trigger({
                            type: "usage",
                            name: "hls-aes"
                        });
                    }
                    if (a.length && Object.keys(r.AUDIO[a[0]]).length > 1) {
                        this.tech_.trigger({
                            type: "usage",
                            name: "vhs-alternate-audio"
                        });
                        this.tech_.trigger({
                            type: "usage",
                            name: "hls-alternate-audio"
                        });
                    }
                    if (this.useCueTags_) {
                        this.tech_.trigger({
                            type: "usage",
                            name: "vhs-playlist-cue-tags"
                        });
                        this.tech_.trigger({
                            type: "usage",
                            name: "hls-playlist-cue-tags"
                        });
                    }
                };
                i.shouldSwitchToMedia_ = function e(t) {
                    var i = this.masterPlaylistLoader_.media() || this.masterPlaylistLoader_.pendingMedia_;
                    var r = this.tech_.currentTime();
                    var n = this.bufferLowWaterLine();
                    var a = this.bufferHighWaterLine();
                    var s = this.tech_.buffered();
                    return uy({
                        buffered: s,
                        currentTime: r,
                        currentPlaylist: i,
                        nextPlaylist: t,
                        bufferLowWaterLine: n,
                        bufferHighWaterLine: a,
                        duration: this.duration(),
                        experimentalBufferBasedABR: this.experimentalBufferBasedABR,
                        log: this.logger_
                    });
                };
                i.setupSegmentLoaderListeners_ = function e() {
                    var t = this;
                    if (!this.experimentalBufferBasedABR) {
                        this.mainSegmentLoader_.on("bandwidthupdate", function() {
                            var e = t.selectPlaylist();
                            if (t.shouldSwitchToMedia_(e)) {
                                t.switchMedia_(e, "bandwidthupdate");
                            }
                            t.tech_.trigger("bandwidthupdate");
                        });
                        this.mainSegmentLoader_.on("progress", function() {
                            t.trigger("progress");
                        });
                    }
                    this.mainSegmentLoader_.on("error", function() {
                        t.blacklistCurrentPlaylist(t.mainSegmentLoader_.error());
                    });
                    this.mainSegmentLoader_.on("appenderror", function() {
                        t.error = t.mainSegmentLoader_.error_;
                        t.trigger("error");
                    });
                    this.mainSegmentLoader_.on("syncinfoupdate", function() {
                        t.onSyncInfoUpdate_();
                    });
                    this.mainSegmentLoader_.on("timestampoffset", function() {
                        t.tech_.trigger({
                            type: "usage",
                            name: "vhs-timestamp-offset"
                        });
                        t.tech_.trigger({
                            type: "usage",
                            name: "hls-timestamp-offset"
                        });
                    });
                    this.audioSegmentLoader_.on("syncinfoupdate", function() {
                        t.onSyncInfoUpdate_();
                    });
                    this.audioSegmentLoader_.on("appenderror", function() {
                        t.error = t.audioSegmentLoader_.error_;
                        t.trigger("error");
                    });
                    this.mainSegmentLoader_.on("ended", function() {
                        t.logger_("main segment loader ended");
                        t.onEndOfStream();
                    });
                    this.mainSegmentLoader_.on("earlyabort", function(e) {
                        if (t.experimentalBufferBasedABR) {
                            return;
                        }
                        t.delegateLoaders_("all", [
                            "abort"
                        ]);
                        t.blacklistCurrentPlaylist({
                            message: "Aborted early because there isn't enough bandwidth to complete the " + "request without rebuffering."
                        }, uv);
                    });
                    var i = function e() {
                        if (!t.sourceUpdater_.hasCreatedSourceBuffers()) {
                            return t.tryToCreateSourceBuffers_();
                        }
                        var i = t.getCodecsOrExclude_();
                        if (!i) {
                            return;
                        }
                        t.sourceUpdater_.addOrChangeSourceBuffers(i);
                    };
                    this.mainSegmentLoader_.on("trackinfo", i);
                    this.audioSegmentLoader_.on("trackinfo", i);
                    this.mainSegmentLoader_.on("fmp4", function() {
                        if (!t.triggeredFmp4Usage) {
                            t.tech_.trigger({
                                type: "usage",
                                name: "vhs-fmp4"
                            });
                            t.tech_.trigger({
                                type: "usage",
                                name: "hls-fmp4"
                            });
                            t.triggeredFmp4Usage = true;
                        }
                    });
                    this.audioSegmentLoader_.on("fmp4", function() {
                        if (!t.triggeredFmp4Usage) {
                            t.tech_.trigger({
                                type: "usage",
                                name: "vhs-fmp4"
                            });
                            t.tech_.trigger({
                                type: "usage",
                                name: "hls-fmp4"
                            });
                            t.triggeredFmp4Usage = true;
                        }
                    });
                    this.audioSegmentLoader_.on("ended", function() {
                        t.logger_("audioSegmentLoader ended");
                        t.onEndOfStream();
                    });
                };
                i.mediaSecondsLoaded_ = function e() {
                    return Math.max(this.audioSegmentLoader_.mediaSecondsLoaded + this.mainSegmentLoader_.mediaSecondsLoaded);
                };
                i.load = function e() {
                    this.mainSegmentLoader_.load();
                    if (this.mediaTypes_.AUDIO.activePlaylistLoader) {
                        this.audioSegmentLoader_.load();
                    }
                    if (this.mediaTypes_.SUBTITLES.activePlaylistLoader) {
                        this.subtitleSegmentLoader_.load();
                    }
                };
                i.smoothQualityChange_ = function e(t) {
                    if (t === void 0) {
                        t = this.selectPlaylist();
                    }
                    this.fastQualityChange_(t);
                };
                i.fastQualityChange_ = function e(t) {
                    var i = this;
                    if (t === void 0) {
                        t = this.selectPlaylist();
                    }
                    if (t === this.masterPlaylistLoader_.media()) {
                        this.logger_("skipping fastQualityChange because new media is same as old");
                        return;
                    }
                    this.switchMedia_(t, "fast-quality");
                    this.mainSegmentLoader_.resetEverything(function() {
                        if (nq.browser.IE_VERSION || nq.browser.IS_EDGE) {
                            i.tech_.setCurrentTime(i.tech_.currentTime() + 0.04);
                        } else {
                            i.tech_.setCurrentTime(i.tech_.currentTime());
                        }
                    });
                };
                i.play = function e() {
                    if (this.setupFirstPlay()) {
                        return;
                    }
                    if (this.tech_.ended()) {
                        this.tech_.setCurrentTime(0);
                    }
                    if (this.hasPlayed_) {
                        this.load();
                    }
                    var t = this.tech_.seekable();
                    if (this.tech_.duration() === Infinity) {
                        if (this.tech_.currentTime() < t.start(0)) {
                            return this.tech_.setCurrentTime(t.end(t.length - 1));
                        }
                    }
                };
                i.setupFirstPlay = function e() {
                    var t = this;
                    var i = this.masterPlaylistLoader_.media();
                    if (!i || this.tech_.paused() || this.hasPlayed_) {
                        return false;
                    }
                    if (!i.endList) {
                        var r = this.seekable();
                        if (!r.length) {
                            return false;
                        }
                        if (nq.browser.IE_VERSION && this.tech_.readyState() === 0) {
                            this.tech_.one("loadedmetadata", function() {
                                t.trigger("firstplay");
                                t.tech_.setCurrentTime(r.end(0));
                                t.hasPlayed_ = true;
                            });
                            return false;
                        }
                        this.trigger("firstplay");
                        this.tech_.setCurrentTime(r.end(0));
                    }
                    this.hasPlayed_ = true;
                    this.load();
                    return true;
                };
                i.handleSourceOpen_ = function e() {
                    this.tryToCreateSourceBuffers_();
                    if (this.tech_.autoplay()) {
                        var t = this.tech_.play();
                        if (typeof t !== "undefined" && typeof t.then === "function") {
                            t.then(null, function(e) {});
                        }
                    }
                    this.trigger("sourceopen");
                };
                i.handleSourceEnded_ = function e() {
                    if (!this.inbandTextTracks_.metadataTrack_) {
                        return;
                    }
                    var t = this.inbandTextTracks_.metadataTrack_.cues;
                    if (!t || !t.length) {
                        return;
                    }
                    var i = this.duration();
                    t[t.length - 1].endTime = isNaN(i) || Math.abs(i) === Infinity ? Number.MAX_VALUE : i;
                };
                i.handleDurationChange_ = function e() {
                    this.tech_.trigger("durationchange");
                };
                i.onEndOfStream = function e() {
                    var t = this.mainSegmentLoader_.ended_;
                    if (this.mediaTypes_.AUDIO.activePlaylistLoader) {
                        var i = this.mainSegmentLoader_.getCurrentMediaInfo_();
                        if (!i || i.hasVideo) {
                            t = t && this.audioSegmentLoader_.ended_;
                        } else {
                            t = this.audioSegmentLoader_.ended_;
                        }
                    }
                    if (!t) {
                        return;
                    }
                    this.stopABRTimer_();
                    this.sourceUpdater_.endOfStream();
                };
                i.stuckAtPlaylistEnd_ = function e(t) {
                    var i = this.seekable();
                    if (!i.length) {
                        return false;
                    }
                    var r = this.syncController_.getExpiredTime(t, this.duration());
                    if (r === null) {
                        return false;
                    }
                    var n = ug.Playlist.playlistEnd(t, r);
                    var a = this.tech_.currentTime();
                    var s = this.tech_.buffered();
                    if (!s.length) {
                        return (n - a <= nG);
                    }
                    var o = s.end(s.length - 1);
                    return (o - a <= nG && n - o <= nG);
                };
                i.blacklistCurrentPlaylist = function e(t, i) {
                    if (t === void 0) {
                        t = {};
                    }
                    var r = t.playlist || this.masterPlaylistLoader_.media();
                    i = i || t.blacklistDuration || this.blacklistDuration;
                    if (!r) {
                        this.error = t;
                        if (this.mediaSource.readyState !== "open") {
                            this.trigger("error");
                        } else {
                            this.sourceUpdater_.endOfStream("network");
                        }
                        return;
                    }
                    r.playlistErrors_++;
                    var n = this.masterPlaylistLoader_.master.playlists;
                    var a = n.filter(a8);
                    var s = a.length === 1 && a[0] === r;
                    if (n.length === 1 && i !== Infinity) {
                        nq.log.warn("Problem encountered with playlist " + r.id + ". " + "Trying again since it is the only playlist.");
                        this.tech_.trigger("retryplaylist");
                        return this.masterPlaylistLoader_.load(s);
                    }
                    if (s) {
                        var o = false;
                        n.forEach(function(e) {
                            if (e === r) {
                                return;
                            }
                            var t = e.excludeUntil;
                            if (typeof t !== "undefined" && t !== Infinity) {
                                o = true;
                                delete e.excludeUntil;
                            }
                        });
                        if (o) {
                            nq.log.warn("Removing other playlists from the exclusion list because the last " + "rendition is about to be excluded.");
                            this.tech_.trigger("retryplaylist");
                        }
                    }
                    var u;
                    if (r.playlistErrors_ > this.maxPlaylistRetries) {
                        u = Infinity;
                    } else {
                        u = Date.now() + i * 1000;
                    }
                    r.excludeUntil = u;
                    if (t.reason) {
                        r.lastExcludeReason_ = t.reason;
                    }
                    this.tech_.trigger("blacklistplaylist");
                    this.tech_.trigger({
                        type: "usage",
                        name: "vhs-rendition-blacklisted"
                    });
                    this.tech_.trigger({
                        type: "usage",
                        name: "hls-rendition-blacklisted"
                    });
                    var l = this.selectPlaylist();
                    if (!l) {
                        this.error = "Playback cannot continue. No available working or supported playlists.";
                        this.trigger("error");
                        return;
                    }
                    var d = t.internal ? this.logger_ : nq.log.warn;
                    var c = t.message ? " " + t.message : "";
                    d((t.internal ? "Internal problem" : "Problem") + " encountered with playlist " + r.id + "." + (c + " Switching to playlist " + l.id + "."));
                    if (l.attributes.AUDIO !== r.attributes.AUDIO) {
                        this.delegateLoaders_("audio", [
                            "abort",
                            "pause"
                        ]);
                    }
                    if (l.attributes.SUBTITLES !== r.attributes.SUBTITLES) {
                        this.delegateLoaders_("subtitle", [
                            "abort",
                            "pause", 
                        ]);
                    }
                    this.delegateLoaders_("main", [
                        "abort",
                        "pause"
                    ]);
                    var h = (l.targetDuration / 2) * 1000 || 5 * 1000;
                    var f = typeof l.lastRequest === "number" && Date.now() - l.lastRequest <= h;
                    return this.switchMedia_(l, "exclude", s || f);
                };
                i.pauseLoading = function e() {
                    this.delegateLoaders_("all", [
                        "abort",
                        "pause"
                    ]);
                    this.stopABRTimer_();
                };
                i.delegateLoaders_ = function e(t, i) {
                    var r = this;
                    var n = [];
                    var a = t === "all";
                    if (a || t === "main") {
                        n.push(this.masterPlaylistLoader_);
                    }
                    var s = [];
                    if (a || t === "audio") {
                        s.push("AUDIO");
                    }
                    if (a || t === "subtitle") {
                        s.push("CLOSED-CAPTIONS");
                        s.push("SUBTITLES");
                    }
                    s.forEach(function(e) {
                        var t = r.mediaTypes_[e] && r.mediaTypes_[e].activePlaylistLoader;
                        if (t) {
                            n.push(t);
                        }
                    });
                    [
                        "main",
                        "audio",
                        "subtitle"
                    ].forEach(function(e) {
                        var i = r[e + "SegmentLoader_"];
                        if (i && (t === e || t === "all")) {
                            n.push(i);
                        }
                    });
                    n.forEach(function(e) {
                        return i.forEach(function(t) {
                            if (typeof e[t] === "function") {
                                e[t]();
                            }
                        });
                    });
                };
                i.setCurrentTime = function e(t) {
                    var i = nZ(this.tech_.buffered(), t);
                    if (!(this.masterPlaylistLoader_ && this.masterPlaylistLoader_.media())) {
                        return 0;
                    }
                    if (!this.masterPlaylistLoader_.media().segments) {
                        return 0;
                    }
                    if (i && i.length) {
                        return t;
                    }
                    this.mainSegmentLoader_.resetEverything();
                    this.mainSegmentLoader_.abort();
                    if (this.mediaTypes_.AUDIO.activePlaylistLoader) {
                        this.audioSegmentLoader_.resetEverything();
                        this.audioSegmentLoader_.abort();
                    }
                    if (this.mediaTypes_.SUBTITLES.activePlaylistLoader) {
                        this.subtitleSegmentLoader_.resetEverything();
                        this.subtitleSegmentLoader_.abort();
                    }
                    this.load();
                };
                i.duration = function e() {
                    if (!this.masterPlaylistLoader_) {
                        return 0;
                    }
                    var t = this.masterPlaylistLoader_.media();
                    if (!t) {
                        return 0;
                    }
                    if (!t.endList) {
                        return Infinity;
                    }
                    if (this.mediaSource) {
                        return this.mediaSource.duration;
                    }
                    return ug.Playlist.duration(t);
                };
                i.seekable = function e() {
                    return this.seekable_;
                };
                i.onSyncInfoUpdate_ = function e() {
                    var t;
                    if (!this.masterPlaylistLoader_ || this.sourceUpdater_.hasCreatedSourceBuffers()) {
                        return;
                    }
                    var i = this.masterPlaylistLoader_.media();
                    if (!i) {
                        return;
                    }
                    var r = this.syncController_.getExpiredTime(i, this.duration());
                    if (r === null) {
                        return;
                    }
                    var n = this.masterPlaylistLoader_.master;
                    var a = ug.Playlist.seekable(i, r, ug.Playlist.liveEdgeDelay(n, i));
                    if (a.length === 0) {
                        return;
                    }
                    if (this.mediaTypes_.AUDIO.activePlaylistLoader) {
                        i = this.mediaTypes_.AUDIO.activePlaylistLoader.media();
                        r = this.syncController_.getExpiredTime(i, this.duration());
                        if (r === null) {
                            return;
                        }
                        t = ug.Playlist.seekable(i, r, ug.Playlist.liveEdgeDelay(n, i));
                        if (t.length === 0) {
                            return;
                        }
                    }
                    var s;
                    var o;
                    if (this.seekable_ && this.seekable_.length) {
                        s = this.seekable_.end(0);
                        o = this.seekable_.start(0);
                    }
                    if (!t) {
                        this.seekable_ = a;
                    } else if (t.start(0) > a.end(0) || a.start(0) > t.end(0)) {
                        this.seekable_ = a;
                    } else {
                        this.seekable_ = nq.createTimeRanges([
                            [
                                t.start(0) > a.start(0) ? t.start(0) : a.start(0),
                                t.end(0) < a.end(0) ? t.end(0) : a.end(0), 
                            ], 
                        ]);
                    }
                    if (this.seekable_ && this.seekable_.length) {
                        if (this.seekable_.end(0) === s && this.seekable_.start(0) === o) {
                            return;
                        }
                    }
                    this.logger_("seekable updated [" + nY(this.seekable_) + "]");
                    this.tech_.trigger("seekablechanged");
                };
                i.updateDuration = function e(t) {
                    if (this.updateDuration_) {
                        this.mediaSource.removeEventListener("sourceopen", this.updateDuration_);
                        this.updateDuration_ = null;
                    }
                    if (this.mediaSource.readyState !== "open") {
                        this.updateDuration_ = this.updateDuration.bind(this, t);
                        this.mediaSource.addEventListener("sourceopen", this.updateDuration_);
                        return;
                    }
                    if (t) {
                        var i = this.seekable();
                        if (!i.length) {
                            return;
                        }
                        if (isNaN(this.mediaSource.duration) || this.mediaSource.duration < i.end(i.length - 1)) {
                            this.sourceUpdater_.setDuration(i.end(i.length - 1));
                        }
                        return;
                    }
                    var r = this.tech_.buffered();
                    var n = ug.Playlist.duration(this.masterPlaylistLoader_.media());
                    if (r.length > 0) {
                        n = Math.max(n, r.end(r.length - 1));
                    }
                    if (this.mediaSource.duration !== n) {
                        this.sourceUpdater_.setDuration(n);
                    }
                };
                i.dispose = function e() {
                    var t = this;
                    this.trigger("dispose");
                    this.decrypter_.terminate();
                    this.masterPlaylistLoader_.dispose();
                    this.mainSegmentLoader_.dispose();
                    if (this.loadOnPlay_) {
                        this.tech_.off("play", this.loadOnPlay_);
                    }
                    [
                        "AUDIO",
                        "SUBTITLES"
                    ].forEach(function(e) {
                        var i = t.mediaTypes_[e].groups;
                        for(var r in i){
                            i[r].forEach(function(e) {
                                if (e.playlistLoader) {
                                    e.playlistLoader.dispose();
                                }
                            });
                        }
                    });
                    this.audioSegmentLoader_.dispose();
                    this.subtitleSegmentLoader_.dispose();
                    this.sourceUpdater_.dispose();
                    this.timelineChangeController_.dispose();
                    this.stopABRTimer_();
                    if (this.updateDuration_) {
                        this.mediaSource.removeEventListener("sourceopen", this.updateDuration_);
                    }
                    this.mediaSource.removeEventListener("durationchange", this.handleDurationChange_);
                    this.mediaSource.removeEventListener("sourceopen", this.handleSourceOpen_);
                    this.mediaSource.removeEventListener("sourceended", this.handleSourceEnded_);
                    this.off();
                };
                i.master = function e() {
                    return this.masterPlaylistLoader_.master;
                };
                i.media = function e() {
                    return (this.masterPlaylistLoader_.media() || this.initialMedia_);
                };
                i.areMediaTypesKnown_ = function e() {
                    var t = !!this.mediaTypes_.AUDIO.activePlaylistLoader;
                    var i = !!this.mainSegmentLoader_.getCurrentMediaInfo_();
                    var r = !t ? true : !!this.audioSegmentLoader_.getCurrentMediaInfo_();
                    if (!i || !r) {
                        return false;
                    }
                    return true;
                };
                i.getCodecsOrExclude_ = function e() {
                    var t = this;
                    var i = {
                        main: this.mainSegmentLoader_.getCurrentMediaInfo_() || {},
                        audio: this.audioSegmentLoader_.getCurrentMediaInfo_() || {}
                    };
                    i.video = i.main;
                    var r = oi(this.master(), this.media());
                    var n = {};
                    var a = !!this.mediaTypes_.AUDIO.activePlaylistLoader;
                    if (i.main.hasVideo) {
                        n.video = r.video || i.main.videoCodec || x.xz;
                    }
                    if (i.main.isMuxed) {
                        n.video += "," + (r.audio || i.main.audioCodec || x.lA);
                    }
                    if ((i.main.hasAudio && !i.main.isMuxed) || i.audio.hasAudio || a) {
                        n.audio = r.audio || i.main.audioCodec || i.audio.audioCodec || x.lA;
                        i.audio.isFmp4 = i.main.hasAudio && !i.main.isMuxed ? i.main.isFmp4 : i.audio.isFmp4;
                    }
                    if (!n.audio && !n.video) {
                        this.blacklistCurrentPlaylist({
                            playlist: this.media(),
                            message: "Could not determine codecs for playlist.",
                            blacklistDuration: Infinity
                        });
                        return;
                    }
                    var s = function e(t, i) {
                        return t ? (0, x.p7)(i) : (0, x.Hi)(i);
                    };
                    var o = {};
                    var u;
                    [
                        "video",
                        "audio"
                    ].forEach(function(e) {
                        if (n.hasOwnProperty(e) && !s(i[e].isFmp4, n[e])) {
                            var t = i[e].isFmp4 ? "browser" : "muxer";
                            o[t] = o[t] || [];
                            o[t].push(n[e]);
                            if (e === "audio") {
                                u = t;
                            }
                        }
                    });
                    if (a && u && this.media().attributes.AUDIO) {
                        var l = this.media().attributes.AUDIO;
                        this.master().playlists.forEach(function(e) {
                            var i = e.attributes && e.attributes.AUDIO;
                            if (i === l && e !== t.media()) {
                                e.excludeUntil = Infinity;
                            }
                        });
                        this.logger_("excluding audio group " + l + " as " + u + ' does not support codec(s): "' + n.audio + '"');
                    }
                    if (Object.keys(o).length) {
                        var d = Object.keys(o).reduce(function(e, t) {
                            if (e) {
                                e += ", ";
                            }
                            e += t + ' does not support codec(s): "' + o[t].join(",") + '"';
                            return e;
                        }, "") + ".";
                        this.blacklistCurrentPlaylist({
                            playlist: this.media(),
                            internal: true,
                            message: d,
                            blacklistDuration: Infinity
                        });
                        return;
                    }
                    if (this.sourceUpdater_.hasCreatedSourceBuffers() && !this.sourceUpdater_.canChangeType()) {
                        var c = [];
                        [
                            "video",
                            "audio"
                        ].forEach(function(e) {
                            var i = ((0, x.kS)(t.sourceUpdater_.codecs[e] || "")[0] || {}).type;
                            var r = ((0, x.kS)(n[e] || "")[0] || {}).type;
                            if (i && r && i.toLowerCase() !== r.toLowerCase()) {
                                c.push('"' + t.sourceUpdater_.codecs[e] + '" -> "' + n[e] + '"');
                            }
                        });
                        if (c.length) {
                            this.blacklistCurrentPlaylist({
                                playlist: this.media(),
                                message: "Codec switching not supported: " + c.join(", ") + ".",
                                blacklistDuration: Infinity,
                                internal: true
                            });
                            return;
                        }
                    }
                    return n;
                };
                i.tryToCreateSourceBuffers_ = function e() {
                    if (this.mediaSource.readyState !== "open" || this.sourceUpdater_.hasCreatedSourceBuffers()) {
                        return;
                    }
                    if (!this.areMediaTypesKnown_()) {
                        return;
                    }
                    var t = this.getCodecsOrExclude_();
                    if (!t) {
                        return;
                    }
                    this.sourceUpdater_.createSourceBuffers(t);
                    var i = [
                        t.video,
                        t.audio
                    ].filter(Boolean).join(",");
                    this.excludeIncompatibleVariants_(i);
                };
                i.excludeUnsupportedVariants_ = function e() {
                    var t = this;
                    var i = this.master().playlists;
                    var r = [];
                    Object.keys(i).forEach(function(e) {
                        var n = i[e];
                        if (r.indexOf(n.id) !== -1) {
                            return;
                        }
                        r.push(n.id);
                        var a = oi(t.master, n);
                        var s = [];
                        if (a.audio && !(0, x.Hi)(a.audio) && !(0, x.p7)(a.audio)) {
                            s.push("audio codec " + a.audio);
                        }
                        if (a.video && !(0, x.Hi)(a.video) && !(0, x.p7)(a.video)) {
                            s.push("video codec " + a.video);
                        }
                        if (a.text && a.text === "stpp.ttml.im1t") {
                            s.push("text codec " + a.text);
                        }
                        if (s.length) {
                            n.excludeUntil = Infinity;
                            t.logger_("excluding " + n.id + " for unsupported: " + s.join(", "));
                        }
                    });
                };
                i.excludeIncompatibleVariants_ = function e(t) {
                    var i = this;
                    var r = [];
                    var n = this.master().playlists;
                    var a = oe((0, x.kS)(t));
                    var s = ot(a);
                    var o = (a.video && (0, x.kS)(a.video)[0]) || null;
                    var u = (a.audio && (0, x.kS)(a.audio)[0]) || null;
                    Object.keys(n).forEach(function(e) {
                        var t = n[e];
                        if (r.indexOf(t.id) !== -1 || t.excludeUntil === Infinity) {
                            return;
                        }
                        r.push(t.id);
                        var a = [];
                        var l = oi(i.masterPlaylistLoader_.master, t);
                        var d = ot(l);
                        if (!l.audio && !l.video) {
                            return;
                        }
                        if (d !== s) {
                            a.push('codec count "' + d + '" !== "' + s + '"');
                        }
                        if (!i.sourceUpdater_.canChangeType()) {
                            var c = (l.video && (0, x.kS)(l.video)[0]) || null;
                            var h = (l.audio && (0, x.kS)(l.audio)[0]) || null;
                            if (c && o && c.type.toLowerCase() !== o.type.toLowerCase()) {
                                a.push('video codec "' + c.type + '" !== "' + o.type + '"');
                            }
                            if (h && u && h.type.toLowerCase() !== u.type.toLowerCase()) {
                                a.push('audio codec "' + h.type + '" !== "' + u.type + '"');
                            }
                        }
                        if (a.length) {
                            t.excludeUntil = Infinity;
                            i.logger_("blacklisting " + t.id + ": " + a.join(" && "));
                        }
                    });
                };
                i.updateAdCues_ = function e(t) {
                    var i = 0;
                    var r = this.seekable();
                    if (r.length) {
                        i = r.start(0);
                    }
                    oQ(t, this.cueTagsTrack_, i);
                };
                i.goalBufferLength = function e() {
                    var t = this.tech_.currentTime();
                    var i = sT.GOAL_BUFFER_LENGTH;
                    var r = sT.GOAL_BUFFER_LENGTH_RATE;
                    var n = Math.max(i, sT.MAX_GOAL_BUFFER_LENGTH);
                    return Math.min(i + t * r, n);
                };
                i.bufferLowWaterLine = function e() {
                    var t = this.tech_.currentTime();
                    var i = sT.BUFFER_LOW_WATER_LINE;
                    var r = sT.BUFFER_LOW_WATER_LINE_RATE;
                    var n = Math.max(i, sT.MAX_BUFFER_LOW_WATER_LINE);
                    var a = Math.max(i, sT.EXPERIMENTAL_MAX_BUFFER_LOW_WATER_LINE);
                    return Math.min(i + t * r, this.experimentalBufferBasedABR ? a : n);
                };
                i.bufferHighWaterLine = function e() {
                    return sT.BUFFER_HIGH_WATER_LINE;
                };
                return t;
            })(nq.EventTarget);
            var ub = function e(t, i, r) {
                return function(e) {
                    var n = t.master.playlists[i];
                    var a = a$(n);
                    var s = a8(n);
                    if (typeof e === "undefined") {
                        return s;
                    }
                    if (e) {
                        delete n.disabled;
                    } else {
                        n.disabled = true;
                    }
                    if (e !== s && !a) {
                        r();
                        if (e) {
                            t.trigger("renditionenabled");
                        } else {
                            t.trigger("renditiondisabled");
                        }
                    }
                    return e;
                };
            };
            var ux = function e(t, i, r) {
                var n = t.masterPlaylistController_, a = t.options_.smoothQualityChange;
                var s = a ? "smooth" : "fast";
                var o = n[s + "QualityChange_"].bind(n);
                if (i.attributes) {
                    var u = i.attributes.RESOLUTION;
                    this.width = u && u.width;
                    this.height = u && u.height;
                    this.bandwidth = i.attributes.BANDWIDTH;
                }
                this.codecs = oi(n.master(), i);
                this.playlist = i;
                this.id = r;
                this.enabled = ub(t.playlists, i.id, o);
            };
            var uS = function e(t) {
                t.representations = function() {
                    var e = t.masterPlaylistController_.master();
                    var i = aE(e) ? t.masterPlaylistController_.getAudioTrackPlaylists_() : e.playlists;
                    if (!i) {
                        return [];
                    }
                    return i.filter(function(e) {
                        return !a$(e);
                    }).map(function(e, i) {
                        return new ux(t, e, e.id);
                    });
                };
            };
            var uk = [
                "seeking",
                "seeked",
                "pause",
                "playing",
                "error", 
            ];
            var uC = (function() {
                function e(e) {
                    var t = this;
                    this.masterPlaylistController_ = e.masterPlaylistController;
                    this.tech_ = e.tech;
                    this.seekable = e.seekable;
                    this.allowSeeksWithinUnsafeLiveWindow = e.allowSeeksWithinUnsafeLiveWindow;
                    this.liveRangeSafeTimeDelta = e.liveRangeSafeTimeDelta;
                    this.media = e.media;
                    this.consecutiveUpdates = 0;
                    this.lastRecordedTime = null;
                    this.timer_ = null;
                    this.checkCurrentTimeTimeout_ = null;
                    this.logger_ = n5("PlaybackWatcher");
                    this.logger_("initialize");
                    var i = function e() {
                        return t.monitorCurrentTime_();
                    };
                    var r = function e() {
                        return t.monitorCurrentTime_();
                    };
                    var a = function e() {
                        return t.techWaiting_();
                    };
                    var s = function e() {
                        return t.cancelTimer_();
                    };
                    var o = this.masterPlaylistController_;
                    var u = [
                        "main",
                        "subtitle",
                        "audio"
                    ];
                    var l = {};
                    u.forEach(function(e) {
                        l[e] = {
                            reset: function i() {
                                return t.resetSegmentDownloads_(e);
                            },
                            updateend: function i() {
                                return t.checkSegmentDownloads_(e);
                            }
                        };
                        o[e + "SegmentLoader_"].on("appendsdone", l[e].updateend);
                        o[e + "SegmentLoader_"].on("playlistupdate", l[e].reset);
                        t.tech_.on([
                            "seeked",
                            "seeking"
                        ], l[e].reset);
                    });
                    var d = function e(i) {
                        [
                            "main",
                            "audio"
                        ].forEach(function(e) {
                            o[e + "SegmentLoader_"][i]("appended", t.seekingAppendCheck_);
                        });
                    };
                    this.seekingAppendCheck_ = function() {
                        if (t.fixesBadSeeks_()) {
                            t.consecutiveUpdates = 0;
                            t.lastRecordedTime = t.tech_.currentTime();
                            d("off");
                        }
                    };
                    this.clearSeekingAppendCheck_ = function() {
                        return d("off");
                    };
                    this.watchForBadSeeking_ = function() {
                        t.clearSeekingAppendCheck_();
                        d("on");
                    };
                    this.tech_.on("seeked", this.clearSeekingAppendCheck_);
                    this.tech_.on("seeking", this.watchForBadSeeking_);
                    this.tech_.on("waiting", a);
                    this.tech_.on(uk, s);
                    this.tech_.on("canplay", r);
                    this.tech_.one("play", i);
                    this.dispose = function() {
                        t.clearSeekingAppendCheck_();
                        t.logger_("dispose");
                        t.tech_.off("waiting", a);
                        t.tech_.off(uk, s);
                        t.tech_.off("canplay", r);
                        t.tech_.off("play", i);
                        t.tech_.off("seeking", t.watchForBadSeeking_);
                        t.tech_.off("seeked", t.clearSeekingAppendCheck_);
                        u.forEach(function(e) {
                            o[e + "SegmentLoader_"].off("appendsdone", l[e].updateend);
                            o[e + "SegmentLoader_"].off("playlistupdate", l[e].reset);
                            t.tech_.off([
                                "seeked",
                                "seeking"
                            ], l[e].reset);
                        });
                        if (t.checkCurrentTimeTimeout_) {
                            n().clearTimeout(t.checkCurrentTimeTimeout_);
                        }
                        t.cancelTimer_();
                    };
                }
                var t = e.prototype;
                t.monitorCurrentTime_ = function e() {
                    this.checkCurrentTime_();
                    if (this.checkCurrentTimeTimeout_) {
                        n().clearTimeout(this.checkCurrentTimeTimeout_);
                    }
                    this.checkCurrentTimeTimeout_ = n().setTimeout(this.monitorCurrentTime_.bind(this), 250);
                };
                t.resetSegmentDownloads_ = function e(t) {
                    var i = this.masterPlaylistController_[t + "SegmentLoader_"];
                    if (this[t + "StalledDownloads_"] > 0) {
                        this.logger_("resetting possible stalled download count for " + t + " loader");
                    }
                    this[t + "StalledDownloads_"] = 0;
                    this[t + "Buffered_"] = i.buffered_();
                };
                t.checkSegmentDownloads_ = function e(t) {
                    var i = this.masterPlaylistController_;
                    var r = i[t + "SegmentLoader_"];
                    var n = r.buffered_();
                    var a = ae(this[t + "Buffered_"], n);
                    this[t + "Buffered_"] = n;
                    if (a) {
                        this.resetSegmentDownloads_(t);
                        return;
                    }
                    this[t + "StalledDownloads_"]++;
                    this.logger_("found #" + this[t + "StalledDownloads_"] + " " + t + " appends that did not increase buffer (possible stalled download)", {
                        playlistId: r.playlist_ && r.playlist_.id,
                        buffered: nJ(n)
                    });
                    if (this[t + "StalledDownloads_"] < 10) {
                        return;
                    }
                    this.logger_(t + " loader stalled download exclusion");
                    this.resetSegmentDownloads_(t);
                    this.tech_.trigger({
                        type: "usage",
                        name: "vhs-" + t + "-download-exclusion"
                    });
                    if (t === "subtitle") {
                        return;
                    }
                    i.blacklistCurrentPlaylist({
                        message: "Excessive " + t + " segment downloading detected."
                    }, Infinity);
                };
                t.checkCurrentTime_ = function e() {
                    if (this.tech_.paused() || this.tech_.seeking()) {
                        return;
                    }
                    var t = this.tech_.currentTime();
                    var i = this.tech_.buffered();
                    if (this.lastRecordedTime === t && (!i.length || t + nG >= i.end(i.length - 1))) {
                        return this.techWaiting_();
                    }
                    if (this.consecutiveUpdates >= 5 && t === this.lastRecordedTime) {
                        this.consecutiveUpdates++;
                        this.waiting_();
                    } else if (t === this.lastRecordedTime) {
                        this.consecutiveUpdates++;
                    } else {
                        this.consecutiveUpdates = 0;
                        this.lastRecordedTime = t;
                    }
                };
                t.cancelTimer_ = function e() {
                    this.consecutiveUpdates = 0;
                    if (this.timer_) {
                        this.logger_("cancelTimer_");
                        clearTimeout(this.timer_);
                    }
                    this.timer_ = null;
                };
                t.fixesBadSeeks_ = function e() {
                    var t = this.tech_.seeking();
                    if (!t) {
                        return false;
                    }
                    var i = this.seekable();
                    var r = this.tech_.currentTime();
                    var n = this.afterSeekableWindow_(i, r, this.media(), this.allowSeeksWithinUnsafeLiveWindow);
                    var a;
                    if (n) {
                        var s = i.end(i.length - 1);
                        a = s;
                    }
                    if (this.beforeSeekableWindow_(i, r)) {
                        var o = i.start(0);
                        a = o + (o === i.end(0) ? 0 : nG);
                    }
                    if (typeof a !== "undefined") {
                        this.logger_("Trying to seek outside of seekable at time " + r + " with " + ("seekable range " + nY(i) + ". Seeking to ") + (a + "."));
                        this.tech_.setCurrentTime(a);
                        return true;
                    }
                    var u = this.masterPlaylistController_.sourceUpdater_;
                    var l = this.tech_.buffered();
                    var d = u.audioBuffer ? u.audioBuffered() : null;
                    var c = u.videoBuffer ? u.videoBuffered() : null;
                    var h = this.media();
                    var f = h.partTargetDuration ? h.partTargetDuration : (h.targetDuration - nz) * 2;
                    var p = [
                        d,
                        c
                    ];
                    for(var m = 0; m < p.length; m++){
                        if (!p[m]) {
                            continue;
                        }
                        var v = ai(p[m], r);
                        if (v < f) {
                            return false;
                        }
                    }
                    var g = nQ(l, r);
                    if (g.length === 0) {
                        return false;
                    }
                    a = g.start(0) + nG;
                    this.logger_("Buffered region starts (" + g.start(0) + ") " + (" just beyond seek point (" + r + "). Seeking to " + a + "."));
                    this.tech_.setCurrentTime(a);
                    return true;
                };
                t.waiting_ = function e() {
                    if (this.techWaiting_()) {
                        return;
                    }
                    var t = this.tech_.currentTime();
                    var i = this.tech_.buffered();
                    var r = nZ(i, t);
                    if (r.length && t + 3 <= r.end(0)) {
                        this.cancelTimer_();
                        this.tech_.setCurrentTime(t);
                        this.logger_("Stopped at " + t + " while inside a buffered region " + ("[" + r.start(0) + " -> " + r.end(0) + "]. Attempting to resume ") + "playback by seeking to the current time.");
                        this.tech_.trigger({
                            type: "usage",
                            name: "vhs-unknown-waiting"
                        });
                        this.tech_.trigger({
                            type: "usage",
                            name: "hls-unknown-waiting"
                        });
                        return;
                    }
                };
                t.techWaiting_ = function e() {
                    var t = this.seekable();
                    var i = this.tech_.currentTime();
                    if (this.tech_.seeking() || this.timer_ !== null) {
                        return true;
                    }
                    if (this.beforeSeekableWindow_(t, i)) {
                        var r = t.end(t.length - 1);
                        this.logger_("Fell out of live window at time " + i + ". Seeking to " + ("live point (seekable end) " + r));
                        this.cancelTimer_();
                        this.tech_.setCurrentTime(r);
                        this.tech_.trigger({
                            type: "usage",
                            name: "vhs-live-resync"
                        });
                        this.tech_.trigger({
                            type: "usage",
                            name: "hls-live-resync"
                        });
                        return true;
                    }
                    var n = this.tech_.vhs.masterPlaylistController_.sourceUpdater_;
                    var a = this.tech_.buffered();
                    var s = this.videoUnderflow_({
                        audioBuffered: n.audioBuffered(),
                        videoBuffered: n.videoBuffered(),
                        currentTime: i
                    });
                    if (s) {
                        this.cancelTimer_();
                        this.tech_.setCurrentTime(i);
                        this.tech_.trigger({
                            type: "usage",
                            name: "vhs-video-underflow"
                        });
                        this.tech_.trigger({
                            type: "usage",
                            name: "hls-video-underflow"
                        });
                        return true;
                    }
                    var o = nQ(a, i);
                    if (o.length > 0) {
                        var u = o.start(0) - i;
                        this.logger_("Stopped at " + i + ", setting timer for " + u + ", seeking " + ("to " + o.start(0)));
                        this.cancelTimer_();
                        this.timer_ = setTimeout(this.skipTheGap_.bind(this), u * 1000, i);
                        return true;
                    }
                    return false;
                };
                t.afterSeekableWindow_ = function e(t, i, r, n) {
                    if (n === void 0) {
                        n = false;
                    }
                    if (!t.length) {
                        return false;
                    }
                    var a = t.end(t.length - 1) + nG;
                    var s = !r.endList;
                    if (s && n) {
                        a = t.end(t.length - 1) + r.targetDuration * 3;
                    }
                    if (i > a) {
                        return true;
                    }
                    return false;
                };
                t.beforeSeekableWindow_ = function e(t, i) {
                    if (t.length && t.start(0) > 0 && i < t.start(0) - this.liveRangeSafeTimeDelta) {
                        return true;
                    }
                    return false;
                };
                t.videoUnderflow_ = function e(t) {
                    var i = t.videoBuffered, r = t.audioBuffered, n = t.currentTime;
                    if (!i) {
                        return;
                    }
                    var a;
                    if (i.length && r.length) {
                        var s = nZ(i, n - 3);
                        var o = nZ(i, n);
                        var u = nZ(r, n);
                        if (u.length && !o.length && s.length) {
                            a = {
                                start: s.end(0),
                                end: u.end(0)
                            };
                        }
                    } else {
                        var l = nQ(i, n);
                        if (!l.length) {
                            a = this.gapFromVideoUnderflow_(i, n);
                        }
                    }
                    if (a) {
                        this.logger_("Encountered a gap in video from " + a.start + " to " + a.end + ". " + ("Seeking to current time " + n));
                        return true;
                    }
                    return false;
                };
                t.skipTheGap_ = function e(t) {
                    var i = this.tech_.buffered();
                    var r = this.tech_.currentTime();
                    var n = nQ(i, r);
                    this.cancelTimer_();
                    if (n.length === 0 || r !== t) {
                        return;
                    }
                    this.logger_("skipTheGap_:", "currentTime:", r, "scheduled currentTime:", t, "nextRange start:", n.start(0));
                    this.tech_.setCurrentTime(n.start(0) + nz);
                    this.tech_.trigger({
                        type: "usage",
                        name: "vhs-gap-skip"
                    });
                    this.tech_.trigger({
                        type: "usage",
                        name: "hls-gap-skip"
                    });
                };
                t.gapFromVideoUnderflow_ = function e(t, i) {
                    var r = n7(t);
                    for(var n = 0; n < r.length; n++){
                        var a = r.start(n);
                        var s = r.end(n);
                        if (i - a < 4 && i - a > 2) {
                            return {
                                start: a,
                                end: s
                            };
                        }
                    }
                    return null;
                };
                return e;
            })();
            var uE = {
                errorInterval: 30,
                getSource: function e(t) {
                    var i = this.tech({
                        IWillNotUseThisInPlugins: true
                    });
                    var r = i.currentSource_ || this.currentSource();
                    return t(r);
                }
            };
            var uw = function e(t, i) {
                var r = 0;
                var n = 0;
                var a = nq.mergeOptions(uE, i);
                t.ready(function() {
                    t.trigger({
                        type: "usage",
                        name: "vhs-error-reload-initialized"
                    });
                    t.trigger({
                        type: "usage",
                        name: "hls-error-reload-initialized"
                    });
                });
                var s = function e() {
                    if (n) {
                        t.currentTime(n);
                    }
                };
                var o = function e(i) {
                    if (i === null || i === undefined) {
                        return;
                    }
                    n = (t.duration() !== Infinity && t.currentTime()) || 0;
                    t.one("loadedmetadata", s);
                    t.src(i);
                    t.trigger({
                        type: "usage",
                        name: "vhs-error-reload"
                    });
                    t.trigger({
                        type: "usage",
                        name: "hls-error-reload"
                    });
                    t.play();
                };
                var u = function e() {
                    if (Date.now() - r < a.errorInterval * 1000) {
                        t.trigger({
                            type: "usage",
                            name: "vhs-error-reload-canceled"
                        });
                        t.trigger({
                            type: "usage",
                            name: "hls-error-reload-canceled"
                        });
                        return;
                    }
                    if (!a.getSource || typeof a.getSource !== "function") {
                        nq.log.error("ERROR: reloadSourceOnError - The option getSource must be a function!");
                        return;
                    }
                    r = Date.now();
                    return a.getSource.call(t, o);
                };
                var l = function e() {
                    t.off("loadedmetadata", s);
                    t.off("error", u);
                    t.off("dispose", e);
                };
                var d = function i(r) {
                    l();
                    e(t, r);
                };
                t.on("error", u);
                t.on("dispose", l);
                t.reloadSourceOnError = d;
            };
            var uI = function e(t) {
                uw(this, t);
            };
            var uP = "2.12.0";
            var u_ = "5.14.1";
            var uL = "0.19.2";
            var uA = "4.7.0";
            var uD = "3.1.2";
            var uO = {
                PlaylistLoader: aq,
                Playlist: aw,
                utils: se,
                STANDARD_PLAYLIST_SELECTOR: od,
                INITIAL_PLAYLIST_SELECTOR: of,
                lastBandwidthSelector: od,
                movingAverageBandwidthSelector: oc,
                comparePlaylistBandwidth: oo,
                comparePlaylistResolution: ou,
                xhr: a4()
            };
            Object.keys(sT).forEach(function(e) {
                Object.defineProperty(uO, e, {
                    get: function t() {
                        nq.log.warn("using Vhs." + e + " is UNSAFE be sure you know what you are doing");
                        return sT[e];
                    },
                    set: function t(i) {
                        nq.log.warn("using Vhs." + e + " is UNSAFE be sure you know what you are doing");
                        if (typeof i !== "number" || i < 0) {
                            nq.log.warn("value of Vhs." + e + " must be greater than or equal to 0");
                            return;
                        }
                        sT[e] = i;
                    }
                });
            });
            var uR = "videojs-vhs";
            var uM = function e(t, i) {
                var r = i.media();
                var n = -1;
                for(var a = 0; a < t.length; a++){
                    if (t[a].id === r.id) {
                        n = a;
                        break;
                    }
                }
                t.selectedIndex_ = n;
                t.trigger({
                    selectedIndex: n,
                    type: "change"
                });
            };
            var u0 = function e(t, i) {
                i.representations().forEach(function(e) {
                    t.addQualityLevel(e);
                });
                uM(t, i.playlists);
            };
            uO.canPlaySource = function() {
                return nq.log.warn("HLS is no longer a tech. Please remove it from " + "your player's techOrder.");
            };
            var uU = function e(t, i, r) {
                if (!t) {
                    return t;
                }
                var n = {};
                if (i && i.attributes && i.attributes.CODECS) {
                    n = oe((0, x.kS)(i.attributes.CODECS));
                }
                if (r && r.attributes && r.attributes.CODECS) {
                    n.audio = r.attributes.CODECS;
                }
                var a = (0, x._5)(n.video);
                var s = (0, x._5)(n.audio);
                var o = {};
                for(var u in t){
                    o[u] = {};
                    if (s) {
                        o[u].audioContentType = s;
                    }
                    if (a) {
                        o[u].videoContentType = a;
                    }
                    if (i.contentProtection && i.contentProtection[u] && i.contentProtection[u].pssh) {
                        o[u].pssh = i.contentProtection[u].pssh;
                    }
                    if (typeof t[u] === "string") {
                        o[u].url = t[u];
                    }
                }
                return nq.mergeOptions(t, o);
            };
            var uB = function e(t, i) {
                return t.reduce(function(e, t) {
                    if (!t.contentProtection) {
                        return e;
                    }
                    var r = i.reduce(function(e, i) {
                        var r = t.contentProtection[i];
                        if (r && r.pssh) {
                            e[i] = {
                                pssh: r.pssh
                            };
                        }
                        return e;
                    }, {});
                    if (Object.keys(r).length) {
                        e.push(r);
                    }
                    return e;
                }, []);
            };
            var uF = function e(t) {
                var i = t.player, r = t.sourceKeySystems, n = t.audioMedia, a = t.mainPlaylists;
                if (!i.eme.initializeMediaKeys) {
                    return Promise.resolve();
                }
                var s = n ? a.concat([
                    n
                ]) : a;
                var o = uB(s, Object.keys(r));
                var u = [];
                var l = [];
                o.forEach(function(e) {
                    l.push(new Promise(function(e, t) {
                        i.tech_.one("keysessioncreated", e);
                    }));
                    u.push(new Promise(function(t, r) {
                        i.eme.initializeMediaKeys({
                            keySystems: e
                        }, function(e) {
                            if (e) {
                                r(e);
                                return;
                            }
                            t();
                        });
                    }));
                });
                return Promise.race([
                    Promise.all(u),
                    Promise.race(l), 
                ]);
            };
            var uN = function e(t) {
                var i = t.player, r = t.sourceKeySystems, n = t.media, a = t.audioMedia;
                var s = uU(r, n, a);
                if (!s) {
                    return false;
                }
                i.currentSource().keySystems = s;
                if (s && !i.eme) {
                    nq.log.warn("DRM encrypted source cannot be decrypted without a DRM plugin");
                    return false;
                }
                return true;
            };
            var u1 = function e() {
                if (!n().localStorage) {
                    return null;
                }
                var t = n().localStorage.getItem(uR);
                if (!t) {
                    return null;
                }
                try {
                    return JSON.parse(t);
                } catch (i) {
                    return null;
                }
            };
            var uj = function e(t) {
                if (!n().localStorage) {
                    return false;
                }
                var i = u1();
                i = i ? nq.mergeOptions(i, t) : t;
                try {
                    n().localStorage.setItem(uR, JSON.stringify(i));
                } catch (r) {
                    return false;
                }
                return i;
            };
            var u2 = function e(t) {
                if (t.toLowerCase().indexOf("data:application/vnd.videojs.vhs+json,") === 0) {
                    return JSON.parse(t.substring(t.indexOf(",") + 1));
                }
                return t;
            };
            uO.supportsNativeHls = (function() {
                if (!s() || !s().createElement) {
                    return false;
                }
                var e = s().createElement("video");
                if (!nq.getTech("Html5").isSupported()) {
                    return false;
                }
                var t = [
                    "application/vnd.apple.mpegurl",
                    "audio/mpegurl",
                    "audio/x-mpegurl",
                    "application/x-mpegurl",
                    "video/x-mpegurl",
                    "video/mpegurl",
                    "application/mpegurl", 
                ];
                return t.some(function(t) {
                    return /maybe|probably/i.test(e.canPlayType(t));
                });
            })();
            uO.supportsNativeDash = (function() {
                if (!s() || !s().createElement || !nq.getTech("Html5").isSupported()) {
                    return false;
                }
                return /maybe|probably/i.test(s().createElement("video").canPlayType("application/dash+xml"));
            })();
            uO.supportsTypeNatively = function(e) {
                if (e === "hls") {
                    return uO.supportsNativeHls;
                }
                if (e === "dash") {
                    return uO.supportsNativeDash;
                }
                return false;
            };
            uO.isSupported = function() {
                return nq.log.warn("HLS is no longer a tech. Please remove it from " + "your player's techOrder.");
            };
            var uH = nq.getComponent("Component");
            var u6 = (function(e) {
                (0, l.Z)(t, e);
                function t(t, i, r) {
                    var n;
                    n = e.call(this, i, nq.mergeOptions(r.hls, r.vhs)) || this;
                    if (r.hls && Object.keys(r.hls).length) {
                        nq.log.warn("Using hls options is deprecated. Use vhs instead.");
                    }
                    if (typeof r.initialBandwidth === "number") {
                        n.options_.bandwidth = r.initialBandwidth;
                    }
                    n.logger_ = n5("VhsHandler");
                    if (i.options_ && i.options_.playerId) {
                        var a = nq(i.options_.playerId);
                        if (!a.hasOwnProperty("hls")) {
                            Object.defineProperty(a, "hls", {
                                get: function e() {
                                    nq.log.warn("player.hls is deprecated. Use player.tech().vhs instead.");
                                    i.trigger({
                                        type: "usage",
                                        name: "hls-player-access"
                                    });
                                    return (0, u.Z)(n);
                                },
                                configurable: true
                            });
                        }
                        if (!a.hasOwnProperty("vhs")) {
                            Object.defineProperty(a, "vhs", {
                                get: function e() {
                                    nq.log.warn("player.vhs is deprecated. Use player.tech().vhs instead.");
                                    i.trigger({
                                        type: "usage",
                                        name: "vhs-player-access"
                                    });
                                    return (0, u.Z)(n);
                                },
                                configurable: true
                            });
                        }
                        if (!a.hasOwnProperty("dash")) {
                            Object.defineProperty(a, "dash", {
                                get: function e() {
                                    nq.log.warn("player.dash is deprecated. Use player.tech().vhs instead.");
                                    return (0, u.Z)(n);
                                },
                                configurable: true
                            });
                        }
                        n.player_ = a;
                    }
                    n.tech_ = i;
                    n.source_ = t;
                    n.stats = {};
                    n.ignoreNextSeekingEvent_ = false;
                    n.setOptions_();
                    if (n.options_.overrideNative && i.overrideNativeAudioTracks && i.overrideNativeVideoTracks) {
                        i.overrideNativeAudioTracks(true);
                        i.overrideNativeVideoTracks(true);
                    } else if (n.options_.overrideNative && (i.featuresNativeVideoTracks || i.featuresNativeAudioTracks)) {
                        throw new Error("Overriding native HLS requires emulated tracks. " + "See https://git.io/vMpjB");
                    }
                    n.on(s(), [
                        "fullscreenchange",
                        "webkitfullscreenchange",
                        "mozfullscreenchange",
                        "MSFullscreenChange", 
                    ], function(e) {
                        var t = s().fullscreenElement || s().webkitFullscreenElement || s().mozFullScreenElement || s().msFullscreenElement;
                        if (t && t.contains(n.tech_.el())) {
                            n.masterPlaylistController_.fastQualityChange_();
                        } else {
                            n.masterPlaylistController_.checkABR_();
                        }
                    });
                    n.on(n.tech_, "seeking", function() {
                        if (this.ignoreNextSeekingEvent_) {
                            this.ignoreNextSeekingEvent_ = false;
                            return;
                        }
                        this.setCurrentTime(this.tech_.currentTime());
                    });
                    n.on(n.tech_, "error", function() {
                        if (this.tech_.error() && this.masterPlaylistController_) {
                            this.masterPlaylistController_.pauseLoading();
                        }
                    });
                    n.on(n.tech_, "play", n.play);
                    return n;
                }
                var i = t.prototype;
                i.setOptions_ = function e() {
                    var t = this;
                    this.options_.withCredentials = this.options_.withCredentials || false;
                    this.options_.handleManifestRedirects = this.options_.handleManifestRedirects === false ? false : true;
                    this.options_.limitRenditionByPlayerDimensions = this.options_.limitRenditionByPlayerDimensions === false ? false : true;
                    this.options_.useDevicePixelRatio = this.options_.useDevicePixelRatio || false;
                    this.options_.smoothQualityChange = this.options_.smoothQualityChange || false;
                    this.options_.useBandwidthFromLocalStorage = typeof this.source_.useBandwidthFromLocalStorage !== "undefined" ? this.source_.useBandwidthFromLocalStorage : this.options_.useBandwidthFromLocalStorage || false;
                    this.options_.useNetworkInformationApi = this.options_.useNetworkInformationApi || false;
                    this.options_.customTagParsers = this.options_.customTagParsers || [];
                    this.options_.customTagMappers = this.options_.customTagMappers || [];
                    this.options_.cacheEncryptionKeys = this.options_.cacheEncryptionKeys || false;
                    if (typeof this.options_.blacklistDuration !== "number") {
                        this.options_.blacklistDuration = 5 * 60;
                    }
                    if (typeof this.options_.bandwidth !== "number") {
                        if (this.options_.useBandwidthFromLocalStorage) {
                            var i = u1();
                            if (i && i.bandwidth) {
                                this.options_.bandwidth = i.bandwidth;
                                this.tech_.trigger({
                                    type: "usage",
                                    name: "vhs-bandwidth-from-local-storage"
                                });
                                this.tech_.trigger({
                                    type: "usage",
                                    name: "hls-bandwidth-from-local-storage"
                                });
                            }
                            if (i && i.throughput) {
                                this.options_.throughput = i.throughput;
                                this.tech_.trigger({
                                    type: "usage",
                                    name: "vhs-throughput-from-local-storage"
                                });
                                this.tech_.trigger({
                                    type: "usage",
                                    name: "hls-throughput-from-local-storage"
                                });
                            }
                        }
                    }
                    if (typeof this.options_.bandwidth !== "number") {
                        this.options_.bandwidth = sT.INITIAL_BANDWIDTH;
                    }
                    this.options_.enableLowInitialPlaylist = this.options_.enableLowInitialPlaylist && this.options_.bandwidth === sT.INITIAL_BANDWIDTH;
                    [
                        "withCredentials",
                        "useDevicePixelRatio",
                        "limitRenditionByPlayerDimensions",
                        "bandwidth",
                        "smoothQualityChange",
                        "customTagParsers",
                        "customTagMappers",
                        "handleManifestRedirects",
                        "cacheEncryptionKeys",
                        "playlistSelector",
                        "initialPlaylistSelector",
                        "experimentalBufferBasedABR",
                        "liveRangeSafeTimeDelta",
                        "experimentalLLHLS",
                        "useNetworkInformationApi",
                        "experimentalExactManifestTimings",
                        "experimentalLeastPixelDiffSelector", 
                    ].forEach(function(e) {
                        if (typeof t.source_[e] !== "undefined") {
                            t.options_[e] = t.source_[e];
                        }
                    });
                    this.limitRenditionByPlayerDimensions = this.options_.limitRenditionByPlayerDimensions;
                    this.useDevicePixelRatio = this.options_.useDevicePixelRatio;
                };
                i.src = function e(t, i) {
                    var r = this;
                    if (!t) {
                        return;
                    }
                    this.setOptions_();
                    this.options_.src = u2(this.source_.src);
                    this.options_.tech = this.tech_;
                    this.options_.externVhs = uO;
                    this.options_.sourceType = (0, S.t)(i);
                    this.options_.seekTo = function(e) {
                        r.tech_.setCurrentTime(e);
                    };
                    if (this.options_.smoothQualityChange) {
                        nq.log.warn("smoothQualityChange is deprecated and will be removed in the next major version");
                    }
                    this.masterPlaylistController_ = new uT(this.options_);
                    var a = nq.mergeOptions({
                        liveRangeSafeTimeDelta: nG
                    }, this.options_, {
                        seekable: function e() {
                            return r.seekable();
                        },
                        media: function e() {
                            return r.masterPlaylistController_.media();
                        },
                        masterPlaylistController: this.masterPlaylistController_
                    });
                    this.playbackWatcher_ = new uC(a);
                    this.masterPlaylistController_.on("error", function() {
                        var e = nq.players[r.tech_.options_.playerId];
                        var t = r.masterPlaylistController_.error;
                        if (typeof t === "object" && !t.code) {
                            t.code = 3;
                        } else if (typeof t === "string") {
                            t = {
                                message: t,
                                code: 3
                            };
                        }
                        e.error(t);
                    });
                    var s = this.options_.experimentalBufferBasedABR ? uO.movingAverageBandwidthSelector(0.55) : uO.STANDARD_PLAYLIST_SELECTOR;
                    this.masterPlaylistController_.selectPlaylist = this.selectPlaylist ? this.selectPlaylist.bind(this) : s.bind(this);
                    this.masterPlaylistController_.selectInitialPlaylist = uO.INITIAL_PLAYLIST_SELECTOR.bind(this);
                    this.playlists = this.masterPlaylistController_.masterPlaylistLoader_;
                    this.mediaSource = this.masterPlaylistController_.mediaSource;
                    Object.defineProperties(this, {
                        selectPlaylist: {
                            get: function e() {
                                return this.masterPlaylistController_.selectPlaylist;
                            },
                            set: function e(t) {
                                this.masterPlaylistController_.selectPlaylist = t.bind(this);
                            }
                        },
                        throughput: {
                            get: function e() {
                                return this.masterPlaylistController_.mainSegmentLoader_.throughput.rate;
                            },
                            set: function e(t) {
                                this.masterPlaylistController_.mainSegmentLoader_.throughput.rate = t;
                                this.masterPlaylistController_.mainSegmentLoader_.throughput.count = 1;
                            }
                        },
                        bandwidth: {
                            get: function e() {
                                var t = this.masterPlaylistController_.mainSegmentLoader_.bandwidth;
                                var i = n().navigator.connection || n().navigator.mozConnection || n().navigator.webkitConnection;
                                var r = 10e6;
                                if (this.options_.useNetworkInformationApi && i) {
                                    var a = i.downlink * 1000 * 1000;
                                    if (a >= r && t >= r) {
                                        t = Math.max(t, a);
                                    } else {
                                        t = a;
                                    }
                                }
                                return t;
                            },
                            set: function e(t) {
                                this.masterPlaylistController_.mainSegmentLoader_.bandwidth = t;
                                this.masterPlaylistController_.mainSegmentLoader_.throughput = {
                                    rate: 0,
                                    count: 0
                                };
                            }
                        },
                        systemBandwidth: {
                            get: function e() {
                                var t = 1 / (this.bandwidth || 1);
                                var i;
                                if (this.throughput > 0) {
                                    i = 1 / this.throughput;
                                } else {
                                    i = 0;
                                }
                                var r = Math.floor(1 / (t + i));
                                return r;
                            },
                            set: function e() {
                                nq.log.error('The "systemBandwidth" property is read-only');
                            }
                        }
                    });
                    if (this.options_.bandwidth) {
                        this.bandwidth = this.options_.bandwidth;
                    }
                    if (this.options_.throughput) {
                        this.throughput = this.options_.throughput;
                    }
                    Object.defineProperties(this.stats, {
                        bandwidth: {
                            get: function e() {
                                return r.bandwidth || 0;
                            },
                            enumerable: true
                        },
                        mediaRequests: {
                            get: function e() {
                                return (r.masterPlaylistController_.mediaRequests_() || 0);
                            },
                            enumerable: true
                        },
                        mediaRequestsAborted: {
                            get: function e() {
                                return (r.masterPlaylistController_.mediaRequestsAborted_() || 0);
                            },
                            enumerable: true
                        },
                        mediaRequestsTimedout: {
                            get: function e() {
                                return (r.masterPlaylistController_.mediaRequestsTimedout_() || 0);
                            },
                            enumerable: true
                        },
                        mediaRequestsErrored: {
                            get: function e() {
                                return (r.masterPlaylistController_.mediaRequestsErrored_() || 0);
                            },
                            enumerable: true
                        },
                        mediaTransferDuration: {
                            get: function e() {
                                return (r.masterPlaylistController_.mediaTransferDuration_() || 0);
                            },
                            enumerable: true
                        },
                        mediaBytesTransferred: {
                            get: function e() {
                                return (r.masterPlaylistController_.mediaBytesTransferred_() || 0);
                            },
                            enumerable: true
                        },
                        mediaSecondsLoaded: {
                            get: function e() {
                                return (r.masterPlaylistController_.mediaSecondsLoaded_() || 0);
                            },
                            enumerable: true
                        },
                        mediaAppends: {
                            get: function e() {
                                return (r.masterPlaylistController_.mediaAppends_() || 0);
                            },
                            enumerable: true
                        },
                        mainAppendsToLoadedData: {
                            get: function e() {
                                return (r.masterPlaylistController_.mainAppendsToLoadedData_() || 0);
                            },
                            enumerable: true
                        },
                        audioAppendsToLoadedData: {
                            get: function e() {
                                return (r.masterPlaylistController_.audioAppendsToLoadedData_() || 0);
                            },
                            enumerable: true
                        },
                        appendsToLoadedData: {
                            get: function e() {
                                return (r.masterPlaylistController_.appendsToLoadedData_() || 0);
                            },
                            enumerable: true
                        },
                        timeToLoadedData: {
                            get: function e() {
                                return (r.masterPlaylistController_.timeToLoadedData_() || 0);
                            },
                            enumerable: true
                        },
                        buffered: {
                            get: function e() {
                                return nJ(r.tech_.buffered());
                            },
                            enumerable: true
                        },
                        currentTime: {
                            get: function e() {
                                return r.tech_.currentTime();
                            },
                            enumerable: true
                        },
                        currentSource: {
                            get: function e() {
                                return r.tech_.currentSource_;
                            },
                            enumerable: true
                        },
                        currentTech: {
                            get: function e() {
                                return r.tech_.name_;
                            },
                            enumerable: true
                        },
                        duration: {
                            get: function e() {
                                return r.tech_.duration();
                            },
                            enumerable: true
                        },
                        master: {
                            get: function e() {
                                return r.playlists.master;
                            },
                            enumerable: true
                        },
                        playerDimensions: {
                            get: function e() {
                                return r.tech_.currentDimensions();
                            },
                            enumerable: true
                        },
                        seekable: {
                            get: function e() {
                                return nJ(r.tech_.seekable());
                            },
                            enumerable: true
                        },
                        timestamp: {
                            get: function e() {
                                return Date.now();
                            },
                            enumerable: true
                        },
                        videoPlaybackQuality: {
                            get: function e() {
                                return r.tech_.getVideoPlaybackQuality();
                            },
                            enumerable: true
                        }
                    });
                    this.tech_.one("canplay", this.masterPlaylistController_.setupFirstPlay.bind(this.masterPlaylistController_));
                    this.tech_.on("bandwidthupdate", function() {
                        if (r.options_.useBandwidthFromLocalStorage) {
                            uj({
                                bandwidth: r.bandwidth,
                                throughput: Math.round(r.throughput)
                            });
                        }
                    });
                    this.masterPlaylistController_.on("selectedinitialmedia", function() {
                        uS(r);
                    });
                    this.masterPlaylistController_.sourceUpdater_.on("createdsourcebuffers", function() {
                        r.setupEme_();
                    });
                    this.on(this.masterPlaylistController_, "progress", function() {
                        this.tech_.trigger("progress");
                    });
                    this.on(this.masterPlaylistController_, "firstplay", function() {
                        this.ignoreNextSeekingEvent_ = true;
                    });
                    this.setupQualityLevels_();
                    if (!this.tech_.el()) {
                        return;
                    }
                    this.mediaSourceUrl_ = n().URL.createObjectURL(this.masterPlaylistController_.mediaSource);
                    this.tech_.src(this.mediaSourceUrl_);
                };
                i.setupEme_ = function e() {
                    var t = this;
                    var i = this.masterPlaylistController_.mediaTypes_.AUDIO.activePlaylistLoader;
                    var r = uN({
                        player: this.player_,
                        sourceKeySystems: this.source_.keySystems,
                        media: this.playlists.media(),
                        audioMedia: i && i.media()
                    });
                    this.player_.tech_.on("keystatuschange", function(e) {
                        if (e.status === "output-restricted") {
                            t.masterPlaylistController_.blacklistCurrentPlaylist({
                                playlist: t.masterPlaylistController_.media(),
                                message: "DRM keystatus changed to " + e.status + ". Playlist will fail to play. Check for HDCP content.",
                                blacklistDuration: Infinity
                            });
                        }
                    });
                    if (nq.browser.IE_VERSION === 11 || !r) {
                        this.masterPlaylistController_.sourceUpdater_.initializedEme();
                        return;
                    }
                    this.logger_("waiting for EME key session creation");
                    uF({
                        player: this.player_,
                        sourceKeySystems: this.source_.keySystems,
                        audioMedia: i && i.media(),
                        mainPlaylists: this.playlists.master.playlists
                    }).then(function() {
                        t.logger_("created EME key session");
                        t.masterPlaylistController_.sourceUpdater_.initializedEme();
                    })["catch"](function(e) {
                        t.logger_("error while creating EME key session", e);
                        t.player_.error({
                            message: "Failed to initialize media keys for EME",
                            code: 3
                        });
                    });
                };
                i.setupQualityLevels_ = function e() {
                    var t = this;
                    var i = nq.players[this.tech_.options_.playerId];
                    if (!i || !i.qualityLevels || this.qualityLevels_) {
                        return;
                    }
                    this.qualityLevels_ = i.qualityLevels();
                    this.masterPlaylistController_.on("selectedinitialmedia", function() {
                        u0(t.qualityLevels_, t);
                    });
                    this.playlists.on("mediachange", function() {
                        uM(t.qualityLevels_, t.playlists);
                    });
                };
                t.version = function e() {
                    return {
                        "@videojs/http-streaming": uP,
                        "mux.js": u_,
                        "mpd-parser": uL,
                        "m3u8-parser": uA,
                        "aes-decrypter": uD
                    };
                };
                i.version = function e() {
                    return this.constructor.version();
                };
                i.canChangeType = function e() {
                    return o5.canChangeType();
                };
                i.play = function e() {
                    this.masterPlaylistController_.play();
                };
                i.setCurrentTime = function e(t) {
                    this.masterPlaylistController_.setCurrentTime(t);
                };
                i.duration = function e() {
                    return this.masterPlaylistController_.duration();
                };
                i.seekable = function e() {
                    return this.masterPlaylistController_.seekable();
                };
                i.dispose = function t() {
                    if (this.playbackWatcher_) {
                        this.playbackWatcher_.dispose();
                    }
                    if (this.masterPlaylistController_) {
                        this.masterPlaylistController_.dispose();
                    }
                    if (this.qualityLevels_) {
                        this.qualityLevels_.dispose();
                    }
                    if (this.player_) {
                        delete this.player_.vhs;
                        delete this.player_.dash;
                        delete this.player_.hls;
                    }
                    if (this.tech_ && this.tech_.vhs) {
                        delete this.tech_.vhs;
                    }
                    if (this.tech_) {
                        delete this.tech_.hls;
                    }
                    if (this.mediaSourceUrl_ && n().URL.revokeObjectURL) {
                        n().URL.revokeObjectURL(this.mediaSourceUrl_);
                        this.mediaSourceUrl_ = null;
                    }
                    e.prototype.dispose.call(this);
                };
                i.convertToProgramTime = function e(t, i) {
                    return su({
                        playlist: this.masterPlaylistController_.media(),
                        time: t,
                        callback: i
                    });
                };
                i.seekToProgramTime = function e(t, i, r, n) {
                    if (r === void 0) {
                        r = true;
                    }
                    if (n === void 0) {
                        n = 2;
                    }
                    return sl({
                        programTime: t,
                        playlist: this.masterPlaylistController_.media(),
                        retryCount: n,
                        pauseAfterSeek: r,
                        seekTo: this.options_.seekTo,
                        tech: this.options_.tech,
                        callback: i
                    });
                };
                return t;
            })(uH);
            var uq = {
                name: "videojs-http-streaming",
                VERSION: uP,
                canHandleSource: function e(t, i) {
                    if (i === void 0) {
                        i = {};
                    }
                    var r = nq.mergeOptions(nq.options, i);
                    return uq.canPlayType(t.type, r);
                },
                handleSource: function e(t, i, r) {
                    if (r === void 0) {
                        r = {};
                    }
                    var n = nq.mergeOptions(nq.options, r);
                    i.vhs = new u6(t, i, n);
                    if (!nq.hasOwnProperty("hls")) {
                        Object.defineProperty(i, "hls", {
                            get: function e() {
                                nq.log.warn("player.tech().hls is deprecated. Use player.tech().vhs instead.");
                                return i.vhs;
                            },
                            configurable: true
                        });
                    }
                    i.vhs.xhr = a4();
                    i.vhs.src(t.src, t.type);
                    return i.vhs;
                },
                canPlayType: function e(t, i) {
                    if (i === void 0) {
                        i = {};
                    }
                    var r = nq.mergeOptions(nq.options, i), n = r.vhs.overrideNative, a = n === void 0 ? !nq.browser.IS_ANY_SAFARI : n;
                    var s = (0, S.t)(t);
                    var o = s && (!uO.supportsTypeNatively(s) || a);
                    return o ? "maybe" : "";
                }
            };
            var uV = function e() {
                return (0, x.p7)("avc1.4d400d,mp4a.40.2");
            };
            if (uV()) {
                nq.getTech("Html5").registerSourceHandler(uq, 0);
            }
            nq.VhsHandler = u6;
            Object.defineProperty(nq, "HlsHandler", {
                get: function e() {
                    nq.log.warn("videojs.HlsHandler is deprecated. Use videojs.VhsHandler instead.");
                    return u6;
                },
                configurable: true
            });
            nq.VhsSourceHandler = uq;
            Object.defineProperty(nq, "HlsSourceHandler", {
                get: function e() {
                    nq.log.warn("videojs.HlsSourceHandler is deprecated. " + "Use videojs.VhsSourceHandler instead.");
                    return uq;
                },
                configurable: true
            });
            nq.Vhs = uO;
            Object.defineProperty(nq, "Hls", {
                get: function e() {
                    nq.log.warn("videojs.Hls is deprecated. Use videojs.Vhs instead.");
                    return uO;
                },
                configurable: true
            });
            if (!nq.use) {
                nq.registerComponent("Hls", uO);
                nq.registerComponent("Vhs", uO);
            }
            nq.options.vhs = nq.options.vhs || {};
            nq.options.hls = nq.options.hls || {};
            if (!nq.getPlugin || !nq.getPlugin("reloadSourceOnError")) {
                var uW = nq.registerPlugin || nq.plugin;
                uW("reloadSourceOnError", uI);
            }
            t["Z"] = nq;
        }
    }, 
]);
