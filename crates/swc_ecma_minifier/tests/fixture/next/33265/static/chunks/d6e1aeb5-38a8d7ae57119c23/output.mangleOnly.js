"use strict";
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([
    [
        544
    ],
    {
        5215: function(a, b, c) {
            var d = c(8908);
            var e = c.n(d);
            var f = c(9144);
            var g = c.n(f);
            var h = c(7462);
            var i = c(7326);
            var j = c(4578);
            var k = c(5974);
            var l = c.n(k);
            var m = c(7537);
            var n = c.n(m);
            var o = c(9603);
            var p = c.n(o);
            var q = c(3407);
            var r = c.n(q);
            var s = c(8852);
            var t = c(136);
            var u = c(779);
            var v = c(9323);
            var w = c(2260);
            var x = c(8485);
            var y = c(973);
            var z = c(4221);
            var A = c.n(z);
            var B = c(8925);
            var C = c(6185);
            var D = c(562);
            var E = c(1489);
            var F = c.n(E);
            var G = "7.17.0";
            var H = {};
            var I = function a(b, c) {
                H[b] = H[b] || [];
                if (c) {
                    H[b] = H[b].concat(c);
                }
                return H[b];
            };
            var J = function a(b, c) {
                I(b, c);
            };
            var K = function a(b, c) {
                var d = I(b).indexOf(c);
                if (d <= -1) {
                    return false;
                }
                H[b] = H[b].slice();
                H[b].splice(d, 1);
                return true;
            };
            var L = function a(b, c) {
                I(b, [].concat(c).map(function(a) {
                    var c = function c() {
                        K(b, c);
                        return a.apply(void 0, arguments);
                    };
                    return c;
                }));
            };
            var M = {
                prefixed: true
            };
            var N = [
                [
                    "requestFullscreen",
                    "exitFullscreen",
                    "fullscreenElement",
                    "fullscreenEnabled",
                    "fullscreenchange",
                    "fullscreenerror",
                    "fullscreen", 
                ],
                [
                    "webkitRequestFullscreen",
                    "webkitExitFullscreen",
                    "webkitFullscreenElement",
                    "webkitFullscreenEnabled",
                    "webkitfullscreenchange",
                    "webkitfullscreenerror",
                    "-webkit-full-screen", 
                ],
                [
                    "mozRequestFullScreen",
                    "mozCancelFullScreen",
                    "mozFullScreenElement",
                    "mozFullScreenEnabled",
                    "mozfullscreenchange",
                    "mozfullscreenerror",
                    "-moz-full-screen", 
                ],
                [
                    "msRequestFullscreen",
                    "msExitFullscreen",
                    "msFullscreenElement",
                    "msFullscreenEnabled",
                    "MSFullscreenChange",
                    "MSFullscreenError",
                    "-ms-fullscreen", 
                ], 
            ];
            var O = N[0];
            var P;
            for(var Q = 0; Q < N.length; Q++){
                if (N[Q][1] in g()) {
                    P = N[Q];
                    break;
                }
            }
            if (P) {
                for(var R = 0; R < P.length; R++){
                    M[O[R]] = P[R];
                }
                M.prefixed = P[0] !== O[0];
            }
            var S = [];
            var T = function a(b, c) {
                return function(a, d, f) {
                    var g = c.levels[d];
                    var h = new RegExp("^(" + g + ")$");
                    if (a !== "log") {
                        f.unshift(a.toUpperCase() + ":");
                    }
                    f.unshift(b + ":");
                    if (S) {
                        S.push([].concat(f));
                        var i = S.length - 1000;
                        S.splice(0, i > 0 ? i : 0);
                    }
                    if (!e().console) {
                        return;
                    }
                    var j = e().console[a];
                    if (!j && a === "debug") {
                        j = e().console.info || e().console.log;
                    }
                    if (!j || !g || !h.test(a)) {
                        return;
                    }
                    j[Array.isArray(f) ? "apply" : "call"](e().console, f);
                };
            };
            function U(a) {
                var b = "info";
                var c;
                var d = function a() {
                    for(var d = arguments.length, e = new Array(d), f = 0; f < d; f++){
                        e[f] = arguments[f];
                    }
                    c("log", b, e);
                };
                c = T(a, d);
                d.createLogger = function(b) {
                    return U(a + ": " + b);
                };
                d.levels = {
                    all: "debug|log|warn|error",
                    off: "",
                    debug: "debug|log|warn|error",
                    info: "log|warn|error",
                    warn: "warn|error",
                    error: "error",
                    DEFAULT: b
                };
                d.level = function(a) {
                    if (typeof a === "string") {
                        if (!d.levels.hasOwnProperty(a)) {
                            throw new Error('"' + a + '" in not a valid log level');
                        }
                        b = a;
                    }
                    return b;
                };
                d.history = function() {
                    return S ? [].concat(S) : [];
                };
                d.history.filter = function(a) {
                    return (S || []).filter(function(b) {
                        return new RegExp(".*" + a + ".*").test(b[0]);
                    });
                };
                d.history.clear = function() {
                    if (S) {
                        S.length = 0;
                    }
                };
                d.history.disable = function() {
                    if (S !== null) {
                        S.length = 0;
                        S = null;
                    }
                };
                d.history.enable = function() {
                    if (S === null) {
                        S = [];
                    }
                };
                d.error = function() {
                    for(var a = arguments.length, d = new Array(a), e = 0; e < a; e++){
                        d[e] = arguments[e];
                    }
                    return c("error", b, d);
                };
                d.warn = function() {
                    for(var a = arguments.length, d = new Array(a), e = 0; e < a; e++){
                        d[e] = arguments[e];
                    }
                    return c("warn", b, d);
                };
                d.debug = function() {
                    for(var a = arguments.length, d = new Array(a), e = 0; e < a; e++){
                        d[e] = arguments[e];
                    }
                    return c("debug", b, d);
                };
                return d;
            }
            var V = U("VIDEOJS");
            var W = V.createLogger;
            var X = Object.prototype.toString;
            var Y = function a(b) {
                return aa(b) ? Object.keys(b) : [];
            };
            function Z(a, b) {
                Y(a).forEach(function(c) {
                    return b(a[c], c);
                });
            }
            function $(a, b, c) {
                if (c === void 0) {
                    c = 0;
                }
                return Y(a).reduce(function(c, d) {
                    return b(c, a[d], d);
                }, c);
            }
            function _(a) {
                for(var b = arguments.length, c = new Array(b > 1 ? b - 1 : 0), d = 1; d < b; d++){
                    c[d - 1] = arguments[d];
                }
                if (Object.assign) {
                    return h.Z.apply(void 0, [
                        a
                    ].concat(c));
                }
                c.forEach(function(b) {
                    if (!b) {
                        return;
                    }
                    Z(b, function(b, c) {
                        a[c] = b;
                    });
                });
                return a;
            }
            function aa(a) {
                return !!a && typeof a === "object";
            }
            function ab(a) {
                return (aa(a) && X.call(a) === "[object Object]" && a.constructor === Object);
            }
            function ac(a, b) {
                if (!a || !b) {
                    return "";
                }
                if (typeof e().getComputedStyle === "function") {
                    var c;
                    try {
                        c = e().getComputedStyle(a);
                    } catch (d) {
                        return "";
                    }
                    return c ? c.getPropertyValue(b) || c[b] : "";
                }
                return "";
            }
            var ad = (e().navigator && e().navigator.userAgent) || "";
            var ae = /AppleWebKit\/([\d.]+)/i.exec(ad);
            var af = ae ? parseFloat(ae.pop()) : null;
            var ag = /iPod/i.test(ad);
            var ah = (function() {
                var a = ad.match(/OS (\d+)_/i);
                if (a && a[1]) {
                    return a[1];
                }
                return null;
            })();
            var ai = /Android/i.test(ad);
            var aj = (function() {
                var a = ad.match(/Android (\d+)(?:\.(\d+))?(?:\.(\d+))*/i);
                if (!a) {
                    return null;
                }
                var b = a[1] && parseFloat(a[1]);
                var c = a[2] && parseFloat(a[2]);
                if (b && c) {
                    return parseFloat(a[1] + "." + a[2]);
                } else if (b) {
                    return b;
                }
                return null;
            })();
            var ak = ai && aj < 5 && af < 537;
            var al = /Firefox/i.test(ad);
            var am = /Edg/i.test(ad);
            var an = !am && (/Chrome/i.test(ad) || /CriOS/i.test(ad));
            var ao = (function() {
                var a = ad.match(/(Chrome|CriOS)\/(\d+)/);
                if (a && a[2]) {
                    return parseFloat(a[2]);
                }
                return null;
            })();
            var ap = (function() {
                var a = /MSIE\s(\d+)\.\d/.exec(ad);
                var b = a && parseFloat(a[1]);
                if (!b && /Trident\/7.0/i.test(ad) && /rv:11.0/.test(ad)) {
                    b = 11.0;
                }
                return b;
            })();
            var aq = /Safari/i.test(ad) && !an && !ai && !am;
            var ar = /Windows/i.test(ad);
            var as = Boolean(aB() && ("ontouchstart" in e() || e().navigator.maxTouchPoints || (e().DocumentTouch && e().document instanceof e().DocumentTouch)));
            var at = /iPad/i.test(ad) || (aq && as && !/iPhone/i.test(ad));
            var au = /iPhone/i.test(ad) && !at;
            var av = au || at || ag;
            var aw = (aq || av) && !an;
            var ax = Object.freeze({
                __proto__: null,
                IS_IPOD: ag,
                IOS_VERSION: ah,
                IS_ANDROID: ai,
                ANDROID_VERSION: aj,
                IS_NATIVE_ANDROID: ak,
                IS_FIREFOX: al,
                IS_EDGE: am,
                IS_CHROME: an,
                CHROME_VERSION: ao,
                IE_VERSION: ap,
                IS_SAFARI: aq,
                IS_WINDOWS: ar,
                TOUCH_ENABLED: as,
                IS_IPAD: at,
                IS_IPHONE: au,
                IS_IOS: av,
                IS_ANY_SAFARI: aw
            });
            function ay(a) {
                return typeof a === "string" && Boolean(a.trim());
            }
            function az(a) {
                if (a.indexOf(" ") >= 0) {
                    throw new Error("class has illegal whitespace characters");
                }
            }
            function aA(a) {
                return new RegExp("(^|\\s)" + a + "($|\\s)");
            }
            function aB() {
                return (g() === e().document);
            }
            function aC(a) {
                return aa(a) && a.nodeType === 1;
            }
            function aD() {
                try {
                    return (e().parent !== e().self);
                } catch (a) {
                    return true;
                }
            }
            function aE(a) {
                return function(b, c) {
                    if (!ay(b)) {
                        return g()[a](null);
                    }
                    if (ay(c)) {
                        c = g().querySelector(c);
                    }
                    var d = aC(c) ? c : g();
                    return d[a] && d[a](b);
                };
            }
            function aF(a, b, c, d) {
                if (a === void 0) {
                    a = "div";
                }
                if (b === void 0) {
                    b = {};
                }
                if (c === void 0) {
                    c = {};
                }
                var e = g().createElement(a);
                Object.getOwnPropertyNames(b).forEach(function(a) {
                    var c = b[a];
                    if (a.indexOf("aria-") !== -1 || a === "role" || a === "type") {
                        V.warn("Setting attributes in the second argument of createEl()\n" + "has been deprecated. Use the third argument instead.\n" + ("createEl(type, properties, attributes). Attempting to set " + a + " to " + c + "."));
                        e.setAttribute(a, c);
                    } else if (a === "textContent") {
                        aG(e, c);
                    } else if (e[a] !== c || a === "tabIndex") {
                        e[a] = c;
                    }
                });
                Object.getOwnPropertyNames(c).forEach(function(a) {
                    e.setAttribute(a, c[a]);
                });
                if (d) {
                    aZ(e, d);
                }
                return e;
            }
            function aG(a, b) {
                if (typeof a.textContent === "undefined") {
                    a.innerText = b;
                } else {
                    a.textContent = b;
                }
                return a;
            }
            function aH(a, b) {
                if (b.firstChild) {
                    b.insertBefore(a, b.firstChild);
                } else {
                    b.appendChild(a);
                }
            }
            function aI(a, b) {
                az(b);
                if (a.classList) {
                    return a.classList.contains(b);
                }
                return aA(b).test(a.className);
            }
            function aJ(a, b) {
                if (a.classList) {
                    a.classList.add(b);
                } else if (!aI(a, b)) {
                    a.className = (a.className + " " + b).trim();
                }
                return a;
            }
            function aK(a, b) {
                if (!a) {
                    V.warn("removeClass was called with an element that doesn't exist");
                    return null;
                }
                if (a.classList) {
                    a.classList.remove(b);
                } else {
                    az(b);
                    a.className = a.className.split(/\s+/).filter(function(a) {
                        return a !== b;
                    }).join(" ");
                }
                return a;
            }
            function aL(a, b, c) {
                var d = aI(a, b);
                if (typeof c === "function") {
                    c = c(a, b);
                }
                if (typeof c !== "boolean") {
                    c = !d;
                }
                if (c === d) {
                    return;
                }
                if (c) {
                    aJ(a, b);
                } else {
                    aK(a, b);
                }
                return a;
            }
            function aM(a, b) {
                Object.getOwnPropertyNames(b).forEach(function(c) {
                    var d = b[c];
                    if (d === null || typeof d === "undefined" || d === false) {
                        a.removeAttribute(c);
                    } else {
                        a.setAttribute(c, d === true ? "" : d);
                    }
                });
            }
            function aN(a) {
                var b = {};
                var c = "," + "autoplay,controls,playsinline,loop,muted,default,defaultMuted" + ",";
                if (a && a.attributes && a.attributes.length > 0) {
                    var d = a.attributes;
                    for(var e = d.length - 1; e >= 0; e--){
                        var f = d[e].name;
                        var g = d[e].value;
                        if (typeof a[f] === "boolean" || c.indexOf("," + f + ",") !== -1) {
                            g = g !== null ? true : false;
                        }
                        b[f] = g;
                    }
                }
                return b;
            }
            function aO(a, b) {
                return a.getAttribute(b);
            }
            function aP(a, b, c) {
                a.setAttribute(b, c);
            }
            function aQ(a, b) {
                a.removeAttribute(b);
            }
            function aR() {
                g().body.focus();
                g().onselectstart = function() {
                    return false;
                };
            }
            function aS() {
                g().onselectstart = function() {
                    return true;
                };
            }
            function aT(a) {
                if (a && a.getBoundingClientRect && a.parentNode) {
                    var b = a.getBoundingClientRect();
                    var c = {};
                    [
                        "bottom",
                        "height",
                        "left",
                        "right",
                        "top",
                        "width", 
                    ].forEach(function(a) {
                        if (b[a] !== undefined) {
                            c[a] = b[a];
                        }
                    });
                    if (!c.height) {
                        c.height = parseFloat(ac(a, "height"));
                    }
                    if (!c.width) {
                        c.width = parseFloat(ac(a, "width"));
                    }
                    return c;
                }
            }
            function aU(a) {
                if (!a || (a && !a.offsetParent)) {
                    return {
                        left: 0,
                        top: 0,
                        width: 0,
                        height: 0
                    };
                }
                var b = a.offsetWidth;
                var c = a.offsetHeight;
                var d = 0;
                var e = 0;
                while(a.offsetParent && a !== g()[M.fullscreenElement]){
                    d += a.offsetLeft;
                    e += a.offsetTop;
                    a = a.offsetParent;
                }
                return {
                    left: d,
                    top: e,
                    width: b,
                    height: c
                };
            }
            function aV(a, b) {
                var c = {
                    x: 0,
                    y: 0
                };
                if (av) {
                    var d = a;
                    while(d && d.nodeName.toLowerCase() !== "html"){
                        var e = ac(d, "transform");
                        if (/^matrix/.test(e)) {
                            var f = e.slice(7, -1).split(/,\s/).map(Number);
                            c.x += f[4];
                            c.y += f[5];
                        } else if (/^matrix3d/.test(e)) {
                            var g = e.slice(9, -1).split(/,\s/).map(Number);
                            c.x += g[12];
                            c.y += g[13];
                        }
                        d = d.parentNode;
                    }
                }
                var h = {};
                var i = aU(b.target);
                var j = aU(a);
                var k = j.width;
                var l = j.height;
                var m = b.offsetY - (j.top - i.top);
                var n = b.offsetX - (j.left - i.left);
                if (b.changedTouches) {
                    n = b.changedTouches[0].pageX - j.left;
                    m = b.changedTouches[0].pageY + j.top;
                    if (av) {
                        n -= c.x;
                        m -= c.y;
                    }
                }
                h.y = 1 - Math.max(0, Math.min(1, m / l));
                h.x = Math.max(0, Math.min(1, n / k));
                return h;
            }
            function aW(a) {
                return aa(a) && a.nodeType === 3;
            }
            function aX(a) {
                while(a.firstChild){
                    a.removeChild(a.firstChild);
                }
                return a;
            }
            function aY(a) {
                if (typeof a === "function") {
                    a = a();
                }
                return (Array.isArray(a) ? a : [
                    a
                ]).map(function(a) {
                    if (typeof a === "function") {
                        a = a();
                    }
                    if (aC(a) || aW(a)) {
                        return a;
                    }
                    if (typeof a === "string" && /\S/.test(a)) {
                        return g().createTextNode(a);
                    }
                }).filter(function(a) {
                    return a;
                });
            }
            function aZ(a, b) {
                aY(b).forEach(function(b) {
                    return a.appendChild(b);
                });
                return a;
            }
            function a$(a, b) {
                return aZ(aX(a), b);
            }
            function a_(a) {
                if (a.button === undefined && a.buttons === undefined) {
                    return true;
                }
                if (a.button === 0 && a.buttons === undefined) {
                    return true;
                }
                if (a.type === "mouseup" && a.button === 0 && a.buttons === 0) {
                    return true;
                }
                if (a.button !== 0 || a.buttons !== 1) {
                    return false;
                }
                return true;
            }
            var a0 = aE("querySelector");
            var a1 = aE("querySelectorAll");
            var a2 = Object.freeze({
                __proto__: null,
                isReal: aB,
                isEl: aC,
                isInFrame: aD,
                createEl: aF,
                textContent: aG,
                prependTo: aH,
                hasClass: aI,
                addClass: aJ,
                removeClass: aK,
                toggleClass: aL,
                setAttributes: aM,
                getAttributes: aN,
                getAttribute: aO,
                setAttribute: aP,
                removeAttribute: aQ,
                blockTextSelection: aR,
                unblockTextSelection: aS,
                getBoundingClientRect: aT,
                findPosition: aU,
                getPointerPosition: aV,
                isTextNode: aW,
                emptyEl: aX,
                normalizeContent: aY,
                appendContent: aZ,
                insertContent: a$,
                isSingleLeftClick: a_,
                $: a0,
                $$: a1
            });
            var a3 = false;
            var a4;
            var a5 = function a() {
                if (a4.options.autoSetup === false) {
                    return;
                }
                var b = Array.prototype.slice.call(g().getElementsByTagName("video"));
                var c = Array.prototype.slice.call(g().getElementsByTagName("audio"));
                var d = Array.prototype.slice.call(g().getElementsByTagName("video-js"));
                var e = b.concat(c, d);
                if (e && e.length > 0) {
                    for(var f = 0, h = e.length; f < h; f++){
                        var i = e[f];
                        if (i && i.getAttribute) {
                            if (i.player === undefined) {
                                var j = i.getAttribute("data-setup");
                                if (j !== null) {
                                    a4(i);
                                }
                            }
                        } else {
                            a6(1);
                            break;
                        }
                    }
                } else if (!a3) {
                    a6(1);
                }
            };
            function a6(a, b) {
                if (!aB()) {
                    return;
                }
                if (b) {
                    a4 = b;
                }
                e().setTimeout(a5, a);
            }
            function a7() {
                a3 = true;
                e().removeEventListener("load", a7);
            }
            if (aB()) {
                if (g().readyState === "complete") {
                    a7();
                } else {
                    e().addEventListener("load", a7);
                }
            }
            var a8 = function a(b) {
                var c = g().createElement("style");
                c.className = b;
                return c;
            };
            var a9 = function a(b, c) {
                if (b.styleSheet) {
                    b.styleSheet.cssText = c;
                } else {
                    b.textContent = c;
                }
            };
            var ba = 3;
            var bb = ba;
            function bc() {
                return bb++;
            }
            var bd;
            if (!e().WeakMap) {
                bd = (function() {
                    function a() {
                        this.vdata = "vdata" + Math.floor((e().performance && e().performance.now()) || Date.now());
                        this.data = {};
                    }
                    var b = a.prototype;
                    b.set = function a(b, c) {
                        var d = b[this.vdata] || bc();
                        if (!b[this.vdata]) {
                            b[this.vdata] = d;
                        }
                        this.data[d] = c;
                        return this;
                    };
                    b.get = function a(b) {
                        var c = b[this.vdata];
                        if (c) {
                            return this.data[c];
                        }
                        V("We have no data for this element", b);
                        return undefined;
                    };
                    b.has = function a(b) {
                        var c = b[this.vdata];
                        return c in this.data;
                    };
                    b["delete"] = function a(b) {
                        var c = b[this.vdata];
                        if (c) {
                            delete this.data[c];
                            delete b[this.vdata];
                        }
                    };
                    return a;
                })();
            }
            var be = e().WeakMap ? new WeakMap() : new bd();
            function bf(a, b) {
                if (!be.has(a)) {
                    return;
                }
                var c = be.get(a);
                if (c.handlers[b].length === 0) {
                    delete c.handlers[b];
                    if (a.removeEventListener) {
                        a.removeEventListener(b, c.dispatcher, false);
                    } else if (a.detachEvent) {
                        a.detachEvent("on" + b, c.dispatcher);
                    }
                }
                if (Object.getOwnPropertyNames(c.handlers).length <= 0) {
                    delete c.handlers;
                    delete c.dispatcher;
                    delete c.disabled;
                }
                if (Object.getOwnPropertyNames(c).length === 0) {
                    be["delete"](a);
                }
            }
            function bg(a, b, c, d) {
                c.forEach(function(c) {
                    a(b, c, d);
                });
            }
            function bh(a) {
                if (a.fixed_) {
                    return a;
                }
                function b() {
                    return true;
                }
                function c() {
                    return false;
                }
                if (!a || !a.isPropagationStopped || !a.isImmediatePropagationStopped) {
                    var d = a || e().event;
                    a = {};
                    for(var f in d){
                        if (f !== "layerX" && f !== "layerY" && f !== "keyLocation" && f !== "webkitMovementX" && f !== "webkitMovementY") {
                            if (!(f === "returnValue" && d.preventDefault)) {
                                a[f] = d[f];
                            }
                        }
                    }
                    if (!a.target) {
                        a.target = a.srcElement || g();
                    }
                    if (!a.relatedTarget) {
                        a.relatedTarget = a.fromElement === a.target ? a.toElement : a.fromElement;
                    }
                    a.preventDefault = function() {
                        if (d.preventDefault) {
                            d.preventDefault();
                        }
                        a.returnValue = false;
                        d.returnValue = false;
                        a.defaultPrevented = true;
                    };
                    a.defaultPrevented = false;
                    a.stopPropagation = function() {
                        if (d.stopPropagation) {
                            d.stopPropagation();
                        }
                        a.cancelBubble = true;
                        d.cancelBubble = true;
                        a.isPropagationStopped = b;
                    };
                    a.isPropagationStopped = c;
                    a.stopImmediatePropagation = function() {
                        if (d.stopImmediatePropagation) {
                            d.stopImmediatePropagation();
                        }
                        a.isImmediatePropagationStopped = b;
                        a.stopPropagation();
                    };
                    a.isImmediatePropagationStopped = c;
                    if (a.clientX !== null && a.clientX !== undefined) {
                        var h = g().documentElement;
                        var i = g().body;
                        a.pageX = a.clientX + ((h && h.scrollLeft) || (i && i.scrollLeft) || 0) - ((h && h.clientLeft) || (i && i.clientLeft) || 0);
                        a.pageY = a.clientY + ((h && h.scrollTop) || (i && i.scrollTop) || 0) - ((h && h.clientTop) || (i && i.clientTop) || 0);
                    }
                    a.which = a.charCode || a.keyCode;
                    if (a.button !== null && a.button !== undefined) {
                        a.button = a.button & 1 ? 0 : a.button & 4 ? 1 : a.button & 2 ? 2 : 0;
                    }
                }
                a.fixed_ = true;
                return a;
            }
            var bi;
            var bj = function a() {
                if (typeof bi !== "boolean") {
                    bi = false;
                    try {
                        var b = Object.defineProperty({}, "passive", {
                            get: function a() {
                                bi = true;
                            }
                        });
                        e().addEventListener("test", null, b);
                        e().removeEventListener("test", null, b);
                    } catch (c) {}
                }
                return bi;
            };
            var bk = [
                "touchstart",
                "touchmove"
            ];
            function bl(a, b, c) {
                if (Array.isArray(b)) {
                    return bg(bl, a, b, c);
                }
                if (!be.has(a)) {
                    be.set(a, {});
                }
                var d = be.get(a);
                if (!d.handlers) {
                    d.handlers = {};
                }
                if (!d.handlers[b]) {
                    d.handlers[b] = [];
                }
                if (!c.guid) {
                    c.guid = bc();
                }
                d.handlers[b].push(c);
                if (!d.dispatcher) {
                    d.disabled = false;
                    d.dispatcher = function(b, c) {
                        if (d.disabled) {
                            return;
                        }
                        b = bh(b);
                        var e = d.handlers[b.type];
                        if (e) {
                            var f = e.slice(0);
                            for(var g = 0, h = f.length; g < h; g++){
                                if (b.isImmediatePropagationStopped()) {
                                    break;
                                } else {
                                    try {
                                        f[g].call(a, b, c);
                                    } catch (i) {
                                        V.error(i);
                                    }
                                }
                            }
                        }
                    };
                }
                if (d.handlers[b].length === 1) {
                    if (a.addEventListener) {
                        var e = false;
                        if (bj() && bk.indexOf(b) > -1) {
                            e = {
                                passive: true
                            };
                        }
                        a.addEventListener(b, d.dispatcher, e);
                    } else if (a.attachEvent) {
                        a.attachEvent("on" + b, d.dispatcher);
                    }
                }
            }
            function bm(a, b, c) {
                if (!be.has(a)) {
                    return;
                }
                var d = be.get(a);
                if (!d.handlers) {
                    return;
                }
                if (Array.isArray(b)) {
                    return bg(bm, a, b, c);
                }
                var e = function a(b, c) {
                    d.handlers[c] = [];
                    bf(b, c);
                };
                if (b === undefined) {
                    for(var f in d.handlers){
                        if (Object.prototype.hasOwnProperty.call(d.handlers || {}, f)) {
                            e(a, f);
                        }
                    }
                    return;
                }
                var g = d.handlers[b];
                if (!g) {
                    return;
                }
                if (!c) {
                    e(a, b);
                    return;
                }
                if (c.guid) {
                    for(var h = 0; h < g.length; h++){
                        if (g[h].guid === c.guid) {
                            g.splice(h--, 1);
                        }
                    }
                }
                bf(a, b);
            }
            function bn(a, b, c) {
                var d = be.has(a) ? be.get(a) : {};
                var e = a.parentNode || a.ownerDocument;
                if (typeof b === "string") {
                    b = {
                        type: b,
                        target: a
                    };
                } else if (!b.target) {
                    b.target = a;
                }
                b = bh(b);
                if (d.dispatcher) {
                    d.dispatcher.call(a, b, c);
                }
                if (e && !b.isPropagationStopped() && b.bubbles === true) {
                    bn.call(null, e, b, c);
                } else if (!e && !b.defaultPrevented && b.target && b.target[b.type]) {
                    if (!be.has(b.target)) {
                        be.set(b.target, {});
                    }
                    var f = be.get(b.target);
                    if (b.target[b.type]) {
                        f.disabled = true;
                        if (typeof b.target[b.type] === "function") {
                            b.target[b.type]();
                        }
                        f.disabled = false;
                    }
                }
                return !b.defaultPrevented;
            }
            function bo(a, b, c) {
                if (Array.isArray(b)) {
                    return bg(bo, a, b, c);
                }
                var d = function d() {
                    bm(a, b, d);
                    c.apply(this, arguments);
                };
                d.guid = c.guid = c.guid || bc();
                bl(a, b, d);
            }
            function bp(a, b, c) {
                var d = function d() {
                    bm(a, b, d);
                    c.apply(this, arguments);
                };
                d.guid = c.guid = c.guid || bc();
                bl(a, b, d);
            }
            var bq = Object.freeze({
                __proto__: null,
                fixEvent: bh,
                on: bl,
                off: bm,
                trigger: bn,
                one: bo,
                any: bp
            });
            var br = 30;
            var bs = function a(b, c, d) {
                if (!c.guid) {
                    c.guid = bc();
                }
                var e = c.bind(b);
                e.guid = d ? d + "_" + c.guid : c.guid;
                return e;
            };
            var bt = function a(b, c) {
                var d = e().performance.now();
                var f = function a() {
                    var f = e().performance.now();
                    if (f - d >= c) {
                        b.apply(void 0, arguments);
                        d = f;
                    }
                };
                return f;
            };
            var bu = function a(b, c, d, f) {
                if (f === void 0) {
                    f = e();
                }
                var g;
                var h = function a() {
                    f.clearTimeout(g);
                    g = null;
                };
                var i = function a() {
                    var e = this;
                    var h = arguments;
                    var i = function a() {
                        g = null;
                        i = null;
                        if (!d) {
                            b.apply(e, h);
                        }
                    };
                    if (!g && d) {
                        b.apply(e, h);
                    }
                    f.clearTimeout(g);
                    g = f.setTimeout(i, c);
                };
                i.cancel = h;
                return i;
            };
            var bv = function a() {};
            bv.prototype.allowedEvents_ = {};
            bv.prototype.on = function(a, b) {
                var c = this.addEventListener;
                this.addEventListener = function() {};
                bl(this, a, b);
                this.addEventListener = c;
            };
            bv.prototype.addEventListener = bv.prototype.on;
            bv.prototype.off = function(a, b) {
                bm(this, a, b);
            };
            bv.prototype.removeEventListener = bv.prototype.off;
            bv.prototype.one = function(a, b) {
                var c = this.addEventListener;
                this.addEventListener = function() {};
                bo(this, a, b);
                this.addEventListener = c;
            };
            bv.prototype.any = function(a, b) {
                var c = this.addEventListener;
                this.addEventListener = function() {};
                bp(this, a, b);
                this.addEventListener = c;
            };
            bv.prototype.trigger = function(a) {
                var b = a.type || a;
                if (typeof a === "string") {
                    a = {
                        type: b
                    };
                }
                a = bh(a);
                if (this.allowedEvents_[b] && this["on" + b]) {
                    this["on" + b](a);
                }
                bn(this, a);
            };
            bv.prototype.dispatchEvent = bv.prototype.trigger;
            var bw;
            bv.prototype.queueTrigger = function(a) {
                var b = this;
                if (!bw) {
                    bw = new Map();
                }
                var c = a.type || a;
                var d = bw.get(this);
                if (!d) {
                    d = new Map();
                    bw.set(this, d);
                }
                var f = d.get(c);
                d["delete"](c);
                e().clearTimeout(f);
                var g = e().setTimeout(function() {
                    if (d.size === 0) {
                        d = null;
                        bw["delete"](b);
                    }
                    b.trigger(a);
                }, 0);
                d.set(c, g);
            };
            var bx = function a(b) {
                if (typeof b.name === "function") {
                    return b.name();
                }
                if (typeof b.name === "string") {
                    return b.name;
                }
                if (b.name_) {
                    return b.name_;
                }
                if (b.constructor && b.constructor.name) {
                    return b.constructor.name;
                }
                return typeof b;
            };
            var by = function a(b) {
                return (b instanceof bv || (!!b.eventBusEl_ && [
                    "on",
                    "one",
                    "off",
                    "trigger"
                ].every(function(a) {
                    return typeof b[a] === "function";
                })));
            };
            var bz = function a(b, c) {
                if (by(b)) {
                    c();
                } else {
                    if (!b.eventedCallbacks) {
                        b.eventedCallbacks = [];
                    }
                    b.eventedCallbacks.push(c);
                }
            };
            var bA = function a(b) {
                return ((typeof b === "string" && /\S/.test(b)) || (Array.isArray(b) && !!b.length));
            };
            var bB = function a(b, c, d) {
                if (!b || (!b.nodeName && !by(b))) {
                    throw new Error("Invalid target for " + bx(c) + "#" + d + "; must be a DOM node or evented object.");
                }
            };
            var bC = function a(b, c, d) {
                if (!bA(b)) {
                    throw new Error("Invalid event type for " + bx(c) + "#" + d + "; must be a non-empty string or array.");
                }
            };
            var bD = function a(b, c, d) {
                if (typeof b !== "function") {
                    throw new Error("Invalid listener for " + bx(c) + "#" + d + "; must be a function.");
                }
            };
            var bE = function a(b, c, d) {
                var e = c.length < 3 || c[0] === b || c[0] === b.eventBusEl_;
                var f;
                var g;
                var h;
                if (e) {
                    f = b.eventBusEl_;
                    if (c.length >= 3) {
                        c.shift();
                    }
                    g = c[0];
                    h = c[1];
                } else {
                    f = c[0];
                    g = c[1];
                    h = c[2];
                }
                bB(f, b, d);
                bC(g, b, d);
                bD(h, b, d);
                h = bs(b, h);
                return {
                    isTargetingSelf: e,
                    target: f,
                    type: g,
                    listener: h
                };
            };
            var bF = function a(b, c, d, e) {
                bB(b, b, c);
                if (b.nodeName) {
                    bq[c](b, d, e);
                } else {
                    b[c](d, e);
                }
            };
            var bG = {
                on: function a() {
                    var b = this;
                    for(var c = arguments.length, d = new Array(c), e = 0; e < c; e++){
                        d[e] = arguments[e];
                    }
                    var f = bE(this, d, "on"), g = f.isTargetingSelf, h = f.target, i = f.type, j = f.listener;
                    bF(h, "on", i, j);
                    if (!g) {
                        var k = function a() {
                            return b.off(h, i, j);
                        };
                        k.guid = j.guid;
                        var l = function a() {
                            return b.off("dispose", k);
                        };
                        l.guid = j.guid;
                        bF(this, "on", "dispose", k);
                        bF(h, "on", "dispose", l);
                    }
                },
                one: function a() {
                    var b = this;
                    for(var c = arguments.length, d = new Array(c), e = 0; e < c; e++){
                        d[e] = arguments[e];
                    }
                    var f = bE(this, d, "one"), g = f.isTargetingSelf, h = f.target, i = f.type, j = f.listener;
                    if (g) {
                        bF(h, "one", i, j);
                    } else {
                        var k = function a() {
                            b.off(h, i, a);
                            for(var c = arguments.length, d = new Array(c), e = 0; e < c; e++){
                                d[e] = arguments[e];
                            }
                            j.apply(null, d);
                        };
                        k.guid = j.guid;
                        bF(h, "one", i, k);
                    }
                },
                any: function a() {
                    var b = this;
                    for(var c = arguments.length, d = new Array(c), e = 0; e < c; e++){
                        d[e] = arguments[e];
                    }
                    var f = bE(this, d, "any"), g = f.isTargetingSelf, h = f.target, i = f.type, j = f.listener;
                    if (g) {
                        bF(h, "any", i, j);
                    } else {
                        var k = function a() {
                            b.off(h, i, a);
                            for(var c = arguments.length, d = new Array(c), e = 0; e < c; e++){
                                d[e] = arguments[e];
                            }
                            j.apply(null, d);
                        };
                        k.guid = j.guid;
                        bF(h, "any", i, k);
                    }
                },
                off: function a(b, c, d) {
                    if (!b || bA(b)) {
                        bm(this.eventBusEl_, b, c);
                    } else {
                        var e = b;
                        var f = c;
                        bB(e, this, "off");
                        bC(f, this, "off");
                        bD(d, this, "off");
                        d = bs(this, d);
                        this.off("dispose", d);
                        if (e.nodeName) {
                            bm(e, f, d);
                            bm(e, "dispose", d);
                        } else if (by(e)) {
                            e.off(f, d);
                            e.off("dispose", d);
                        }
                    }
                },
                trigger: function a(b, c) {
                    bB(this.eventBusEl_, this, "trigger");
                    var d = b && typeof b !== "string" ? b.type : b;
                    if (!bA(d)) {
                        var e = "Invalid event type for " + bx(this) + "#trigger; " + "must be a non-empty string or object with a type key that has a non-empty value.";
                        if (b) {
                            (this.log || V).error(e);
                        } else {
                            throw new Error(e);
                        }
                    }
                    return bn(this.eventBusEl_, b, c);
                }
            };
            function bH(a, b) {
                if (b === void 0) {
                    b = {};
                }
                var c = b, d = c.eventBusKey;
                if (d) {
                    if (!a[d].nodeName) {
                        throw new Error('The eventBusKey "' + d + '" does not refer to an element.');
                    }
                    a.eventBusEl_ = a[d];
                } else {
                    a.eventBusEl_ = aF("span", {
                        className: "vjs-event-bus"
                    });
                }
                _(a, bG);
                if (a.eventedCallbacks) {
                    a.eventedCallbacks.forEach(function(a) {
                        a();
                    });
                }
                a.on("dispose", function() {
                    a.off();
                    [
                        a,
                        a.el_,
                        a.eventBusEl_
                    ].forEach(function(a) {
                        if (a && be.has(a)) {
                            be["delete"](a);
                        }
                    });
                    e().setTimeout(function() {
                        a.eventBusEl_ = null;
                    }, 0);
                });
                return a;
            }
            var bI = {
                state: {},
                setState: function a(b) {
                    var c = this;
                    if (typeof b === "function") {
                        b = b();
                    }
                    var d;
                    Z(b, function(a, b) {
                        if (c.state[b] !== a) {
                            d = d || {};
                            d[b] = {
                                from: c.state[b],
                                to: a
                            };
                        }
                        c.state[b] = a;
                    });
                    if (d && by(this)) {
                        this.trigger({
                            changes: d,
                            type: "statechanged"
                        });
                    }
                    return d;
                }
            };
            function bJ(a, b) {
                _(a, bI);
                a.state = _({}, a.state, b);
                if (typeof a.handleStateChanged === "function" && by(a)) {
                    a.on("statechanged", a.handleStateChanged);
                }
                return a;
            }
            var bK = function a(b) {
                if (typeof b !== "string") {
                    return b;
                }
                return b.replace(/./, function(a) {
                    return a.toLowerCase();
                });
            };
            var bL = function a(b) {
                if (typeof b !== "string") {
                    return b;
                }
                return b.replace(/./, function(a) {
                    return a.toUpperCase();
                });
            };
            var bM = function a(b, c) {
                return bL(b) === bL(c);
            };
            function bN() {
                var a = {};
                for(var b = arguments.length, c = new Array(b), d = 0; d < b; d++){
                    c[d] = arguments[d];
                }
                c.forEach(function(b) {
                    if (!b) {
                        return;
                    }
                    Z(b, function(b, c) {
                        if (!ab(b)) {
                            a[c] = b;
                            return;
                        }
                        if (!ab(a[c])) {
                            a[c] = {};
                        }
                        a[c] = bN(a[c], b);
                    });
                });
                return a;
            }
            var bO = (function() {
                function a() {
                    this.map_ = {};
                }
                var b = a.prototype;
                b.has = function a(b) {
                    return b in this.map_;
                };
                b["delete"] = function a(b) {
                    var c = this.has(b);
                    delete this.map_[b];
                    return c;
                };
                b.set = function a(b, c) {
                    this.map_[b] = c;
                    return this;
                };
                b.forEach = function a(b, c) {
                    for(var d in this.map_){
                        b.call(c, this.map_[d], d, this);
                    }
                };
                return a;
            })();
            var bP = e().Map ? e().Map : bO;
            var bQ = (function() {
                function a() {
                    this.set_ = {};
                }
                var b = a.prototype;
                b.has = function a(b) {
                    return b in this.set_;
                };
                b["delete"] = function a(b) {
                    var c = this.has(b);
                    delete this.set_[b];
                    return c;
                };
                b.add = function a(b) {
                    this.set_[b] = 1;
                    return this;
                };
                b.forEach = function a(b, c) {
                    for(var d in this.set_){
                        b.call(c, d, d, this);
                    }
                };
                return a;
            })();
            var bR = e().Set ? e().Set : bQ;
            var bS = (function() {
                function a(a, b, c) {
                    if (!a && this.play) {
                        this.player_ = a = this;
                    } else {
                        this.player_ = a;
                    }
                    this.isDisposed_ = false;
                    this.parentComponent_ = null;
                    this.options_ = bN({}, this.options_);
                    b = this.options_ = bN(this.options_, b);
                    this.id_ = b.id || (b.el && b.el.id);
                    if (!this.id_) {
                        var d = (a && a.id && a.id()) || "no_player";
                        this.id_ = d + "_component_" + bc();
                    }
                    this.name_ = b.name || null;
                    if (b.el) {
                        this.el_ = b.el;
                    } else if (b.createEl !== false) {
                        this.el_ = this.createEl();
                    }
                    if (b.evented !== false) {
                        bH(this, {
                            eventBusKey: this.el_ ? "el_" : null
                        });
                        this.handleLanguagechange = this.handleLanguagechange.bind(this);
                        this.on(this.player_, "languagechange", this.handleLanguagechange);
                    }
                    bJ(this, this.constructor.defaultState);
                    this.children_ = [];
                    this.childIndex_ = {};
                    this.childNameIndex_ = {};
                    this.setTimeoutIds_ = new bR();
                    this.setIntervalIds_ = new bR();
                    this.rafIds_ = new bR();
                    this.namedRafs_ = new bP();
                    this.clearingTimersOnDispose_ = false;
                    if (b.initChildren !== false) {
                        this.initChildren();
                    }
                    this.ready(c);
                    if (b.reportTouchActivity !== false) {
                        this.enableTouchActivity();
                    }
                }
                var b = a.prototype;
                b.dispose = function a() {
                    if (this.isDisposed_) {
                        return;
                    }
                    if (this.readyQueue_) {
                        this.readyQueue_.length = 0;
                    }
                    this.trigger({
                        type: "dispose",
                        bubbles: false
                    });
                    this.isDisposed_ = true;
                    if (this.children_) {
                        for(var b = this.children_.length - 1; b >= 0; b--){
                            if (this.children_[b].dispose) {
                                this.children_[b].dispose();
                            }
                        }
                    }
                    this.children_ = null;
                    this.childIndex_ = null;
                    this.childNameIndex_ = null;
                    this.parentComponent_ = null;
                    if (this.el_) {
                        if (this.el_.parentNode) {
                            this.el_.parentNode.removeChild(this.el_);
                        }
                        this.el_ = null;
                    }
                    this.player_ = null;
                };
                b.isDisposed = function a() {
                    return Boolean(this.isDisposed_);
                };
                b.player = function a() {
                    return this.player_;
                };
                b.options = function a(b) {
                    if (!b) {
                        return this.options_;
                    }
                    this.options_ = bN(this.options_, b);
                    return this.options_;
                };
                b.el = function a() {
                    return this.el_;
                };
                b.createEl = function a(b, c, d) {
                    return aF(b, c, d);
                };
                b.localize = function a(b, c, d) {
                    if (d === void 0) {
                        d = b;
                    }
                    var e = this.player_.language && this.player_.language();
                    var f = this.player_.languages && this.player_.languages();
                    var g = f && f[e];
                    var h = e && e.split("-")[0];
                    var i = f && f[h];
                    var j = d;
                    if (g && g[b]) {
                        j = g[b];
                    } else if (i && i[b]) {
                        j = i[b];
                    }
                    if (c) {
                        j = j.replace(/\{(\d+)\}/g, function(a, b) {
                            var d = c[b - 1];
                            var e = d;
                            if (typeof d === "undefined") {
                                e = a;
                            }
                            return e;
                        });
                    }
                    return j;
                };
                b.handleLanguagechange = function a() {};
                b.contentEl = function a() {
                    return this.contentEl_ || this.el_;
                };
                b.id = function a() {
                    return this.id_;
                };
                b.name = function a() {
                    return this.name_;
                };
                b.children = function a() {
                    return this.children_;
                };
                b.getChildById = function a(b) {
                    return this.childIndex_[b];
                };
                b.getChild = function a(b) {
                    if (!b) {
                        return;
                    }
                    return this.childNameIndex_[b];
                };
                b.getDescendant = function a() {
                    for(var b = arguments.length, c = new Array(b), d = 0; d < b; d++){
                        c[d] = arguments[d];
                    }
                    c = c.reduce(function(a, b) {
                        return a.concat(b);
                    }, []);
                    var e = this;
                    for(var f = 0; f < c.length; f++){
                        e = e.getChild(c[f]);
                        if (!e || !e.getChild) {
                            return;
                        }
                    }
                    return e;
                };
                b.addChild = function b(c, d, e) {
                    if (d === void 0) {
                        d = {};
                    }
                    if (e === void 0) {
                        e = this.children_.length;
                    }
                    var f;
                    var g;
                    if (typeof c === "string") {
                        g = bL(c);
                        var h = d.componentClass || g;
                        d.name = g;
                        var i = a.getComponent(h);
                        if (!i) {
                            throw new Error("Component " + h + " does not exist");
                        }
                        if (typeof i !== "function") {
                            return null;
                        }
                        f = new i(this.player_ || this, d);
                    } else {
                        f = c;
                    }
                    if (f.parentComponent_) {
                        f.parentComponent_.removeChild(f);
                    }
                    this.children_.splice(e, 0, f);
                    f.parentComponent_ = this;
                    if (typeof f.id === "function") {
                        this.childIndex_[f.id()] = f;
                    }
                    g = g || (f.name && bL(f.name()));
                    if (g) {
                        this.childNameIndex_[g] = f;
                        this.childNameIndex_[bK(g)] = f;
                    }
                    if (typeof f.el === "function" && f.el()) {
                        var j = null;
                        if (this.children_[e + 1]) {
                            if (this.children_[e + 1].el_) {
                                j = this.children_[e + 1].el_;
                            } else if (aC(this.children_[e + 1])) {
                                j = this.children_[e + 1];
                            }
                        }
                        this.contentEl().insertBefore(f.el(), j);
                    }
                    return f;
                };
                b.removeChild = function a(b) {
                    if (typeof b === "string") {
                        b = this.getChild(b);
                    }
                    if (!b || !this.children_) {
                        return;
                    }
                    var c = false;
                    for(var d = this.children_.length - 1; d >= 0; d--){
                        if (this.children_[d] === b) {
                            c = true;
                            this.children_.splice(d, 1);
                            break;
                        }
                    }
                    if (!c) {
                        return;
                    }
                    b.parentComponent_ = null;
                    this.childIndex_[b.id()] = null;
                    this.childNameIndex_[bL(b.name())] = null;
                    this.childNameIndex_[bK(b.name())] = null;
                    var e = b.el();
                    if (e && e.parentNode === this.contentEl()) {
                        this.contentEl().removeChild(b.el());
                    }
                };
                b.initChildren = function b() {
                    var c = this;
                    var d = this.options_.children;
                    if (d) {
                        var e = this.options_;
                        var f = function a(b) {
                            var d = b.name;
                            var f = b.opts;
                            if (e[d] !== undefined) {
                                f = e[d];
                            }
                            if (f === false) {
                                return;
                            }
                            if (f === true) {
                                f = {};
                            }
                            f.playerOptions = c.options_.playerOptions;
                            var g = c.addChild(d, f);
                            if (g) {
                                c[d] = g;
                            }
                        };
                        var g;
                        var h = a.getComponent("Tech");
                        if (Array.isArray(d)) {
                            g = d;
                        } else {
                            g = Object.keys(d);
                        }
                        g.concat(Object.keys(this.options_).filter(function(a) {
                            return !g.some(function(b) {
                                if (typeof b === "string") {
                                    return a === b;
                                }
                                return a === b.name;
                            });
                        })).map(function(a) {
                            var b;
                            var e;
                            if (typeof a === "string") {
                                b = a;
                                e = d[b] || c.options_[b] || {};
                            } else {
                                b = a.name;
                                e = a;
                            }
                            return {
                                name: b,
                                opts: e
                            };
                        }).filter(function(b) {
                            var c = a.getComponent(b.opts.componentClass || bL(b.name));
                            return c && !h.isTech(c);
                        }).forEach(f);
                    }
                };
                b.buildCSSClass = function a() {
                    return "";
                };
                b.ready = function a(b, c) {
                    if (c === void 0) {
                        c = false;
                    }
                    if (!b) {
                        return;
                    }
                    if (!this.isReady_) {
                        this.readyQueue_ = this.readyQueue_ || [];
                        this.readyQueue_.push(b);
                        return;
                    }
                    if (c) {
                        b.call(this);
                    } else {
                        this.setTimeout(b, 1);
                    }
                };
                b.triggerReady = function a() {
                    this.isReady_ = true;
                    this.setTimeout(function() {
                        var a = this.readyQueue_;
                        this.readyQueue_ = [];
                        if (a && a.length > 0) {
                            a.forEach(function(a) {
                                a.call(this);
                            }, this);
                        }
                        this.trigger("ready");
                    }, 1);
                };
                b.$ = function a(b, c) {
                    return a0(b, c || this.contentEl());
                };
                b.$$ = function a(b, c) {
                    return a1(b, c || this.contentEl());
                };
                b.hasClass = function a(b) {
                    return aI(this.el_, b);
                };
                b.addClass = function a(b) {
                    aJ(this.el_, b);
                };
                b.removeClass = function a(b) {
                    aK(this.el_, b);
                };
                b.toggleClass = function a(b, c) {
                    aL(this.el_, b, c);
                };
                b.show = function a() {
                    this.removeClass("vjs-hidden");
                };
                b.hide = function a() {
                    this.addClass("vjs-hidden");
                };
                b.lockShowing = function a() {
                    this.addClass("vjs-lock-showing");
                };
                b.unlockShowing = function a() {
                    this.removeClass("vjs-lock-showing");
                };
                b.getAttribute = function a(b) {
                    return aO(this.el_, b);
                };
                b.setAttribute = function a(b, c) {
                    aP(this.el_, b, c);
                };
                b.removeAttribute = function a(b) {
                    aQ(this.el_, b);
                };
                b.width = function a(b, c) {
                    return this.dimension("width", b, c);
                };
                b.height = function a(b, c) {
                    return this.dimension("height", b, c);
                };
                b.dimensions = function a(b, c) {
                    this.width(b, true);
                    this.height(c);
                };
                b.dimension = function a(b, c, d) {
                    if (c !== undefined) {
                        if (c === null || c !== c) {
                            c = 0;
                        }
                        if (("" + c).indexOf("%") !== -1 || ("" + c).indexOf("px") !== -1) {
                            this.el_.style[b] = c;
                        } else if (c === "auto") {
                            this.el_.style[b] = "";
                        } else {
                            this.el_.style[b] = c + "px";
                        }
                        if (!d) {
                            this.trigger("componentresize");
                        }
                        return;
                    }
                    if (!this.el_) {
                        return 0;
                    }
                    var e = this.el_.style[b];
                    var f = e.indexOf("px");
                    if (f !== -1) {
                        return parseInt(e.slice(0, f), 10);
                    }
                    return parseInt(this.el_["offset" + bL(b)], 10);
                };
                b.currentDimension = function a(b) {
                    var c = 0;
                    if (b !== "width" && b !== "height") {
                        throw new Error("currentDimension only accepts width or height value");
                    }
                    c = ac(this.el_, b);
                    c = parseFloat(c);
                    if (c === 0 || isNaN(c)) {
                        var d = "offset" + bL(b);
                        c = this.el_[d];
                    }
                    return c;
                };
                b.currentDimensions = function a() {
                    return {
                        width: this.currentDimension("width"),
                        height: this.currentDimension("height")
                    };
                };
                b.currentWidth = function a() {
                    return this.currentDimension("width");
                };
                b.currentHeight = function a() {
                    return this.currentDimension("height");
                };
                b.focus = function a() {
                    this.el_.focus();
                };
                b.blur = function a() {
                    this.el_.blur();
                };
                b.handleKeyDown = function a(b) {
                    if (this.player_) {
                        b.stopPropagation();
                        this.player_.handleKeyDown(b);
                    }
                };
                b.handleKeyPress = function a(b) {
                    this.handleKeyDown(b);
                };
                b.emitTapEvents = function a() {
                    var b = 0;
                    var c = null;
                    var d = 10;
                    var f = 200;
                    var g;
                    this.on("touchstart", function(a) {
                        if (a.touches.length === 1) {
                            c = {
                                pageX: a.touches[0].pageX,
                                pageY: a.touches[0].pageY
                            };
                            b = e().performance.now();
                            g = true;
                        }
                    });
                    this.on("touchmove", function(a) {
                        if (a.touches.length > 1) {
                            g = false;
                        } else if (c) {
                            var b = a.touches[0].pageX - c.pageX;
                            var e = a.touches[0].pageY - c.pageY;
                            var f = Math.sqrt(b * b + e * e);
                            if (f > d) {
                                g = false;
                            }
                        }
                    });
                    var h = function a() {
                        g = false;
                    };
                    this.on("touchleave", h);
                    this.on("touchcancel", h);
                    this.on("touchend", function(a) {
                        c = null;
                        if (g === true) {
                            var d = e().performance.now() - b;
                            if (d < f) {
                                a.preventDefault();
                                this.trigger("tap");
                            }
                        }
                    });
                };
                b.enableTouchActivity = function a() {
                    if (!this.player() || !this.player().reportUserActivity) {
                        return;
                    }
                    var b = bs(this.player(), this.player().reportUserActivity);
                    var c;
                    this.on("touchstart", function() {
                        b();
                        this.clearInterval(c);
                        c = this.setInterval(b, 250);
                    });
                    var d = function a(d) {
                        b();
                        this.clearInterval(c);
                    };
                    this.on("touchmove", b);
                    this.on("touchend", d);
                    this.on("touchcancel", d);
                };
                b.setTimeout = function a(b, c) {
                    var d = this;
                    var f;
                    b = bs(this, b);
                    this.clearTimersOnDispose_();
                    f = e().setTimeout(function() {
                        if (d.setTimeoutIds_.has(f)) {
                            d.setTimeoutIds_["delete"](f);
                        }
                        b();
                    }, c);
                    this.setTimeoutIds_.add(f);
                    return f;
                };
                b.clearTimeout = function a(b) {
                    if (this.setTimeoutIds_.has(b)) {
                        this.setTimeoutIds_["delete"](b);
                        e().clearTimeout(b);
                    }
                    return b;
                };
                b.setInterval = function a(b, c) {
                    b = bs(this, b);
                    this.clearTimersOnDispose_();
                    var d = e().setInterval(b, c);
                    this.setIntervalIds_.add(d);
                    return d;
                };
                b.clearInterval = function a(b) {
                    if (this.setIntervalIds_.has(b)) {
                        this.setIntervalIds_["delete"](b);
                        e().clearInterval(b);
                    }
                    return b;
                };
                b.requestAnimationFrame = function a(b) {
                    var c = this;
                    if (!this.supportsRaf_) {
                        return this.setTimeout(b, 1000 / 60);
                    }
                    this.clearTimersOnDispose_();
                    var d;
                    b = bs(this, b);
                    d = e().requestAnimationFrame(function() {
                        if (c.rafIds_.has(d)) {
                            c.rafIds_["delete"](d);
                        }
                        b();
                    });
                    this.rafIds_.add(d);
                    return d;
                };
                b.requestNamedAnimationFrame = function a(b, c) {
                    var d = this;
                    if (this.namedRafs_.has(b)) {
                        return;
                    }
                    this.clearTimersOnDispose_();
                    c = bs(this, c);
                    var e = this.requestAnimationFrame(function() {
                        c();
                        if (d.namedRafs_.has(b)) {
                            d.namedRafs_["delete"](b);
                        }
                    });
                    this.namedRafs_.set(b, e);
                    return b;
                };
                b.cancelNamedAnimationFrame = function a(b) {
                    if (!this.namedRafs_.has(b)) {
                        return;
                    }
                    this.cancelAnimationFrame(this.namedRafs_.get(b));
                    this.namedRafs_["delete"](b);
                };
                b.cancelAnimationFrame = function a(b) {
                    if (!this.supportsRaf_) {
                        return this.clearTimeout(b);
                    }
                    if (this.rafIds_.has(b)) {
                        this.rafIds_["delete"](b);
                        e().cancelAnimationFrame(b);
                    }
                    return b;
                };
                b.clearTimersOnDispose_ = function a() {
                    var b = this;
                    if (this.clearingTimersOnDispose_) {
                        return;
                    }
                    this.clearingTimersOnDispose_ = true;
                    this.one("dispose", function() {
                        [
                            [
                                "namedRafs_",
                                "cancelNamedAnimationFrame"
                            ],
                            [
                                "rafIds_",
                                "cancelAnimationFrame"
                            ],
                            [
                                "setTimeoutIds_",
                                "clearTimeout"
                            ],
                            [
                                "setIntervalIds_",
                                "clearInterval"
                            ], 
                        ].forEach(function(a) {
                            var c = a[0], d = a[1];
                            b[c].forEach(function(a, c) {
                                return b[d](c);
                            });
                        });
                        b.clearingTimersOnDispose_ = false;
                    });
                };
                a.registerComponent = function b(c, d) {
                    if (typeof c !== "string" || !c) {
                        throw new Error('Illegal component name, "' + c + '"; must be a non-empty string.');
                    }
                    var e = a.getComponent("Tech");
                    var f = e && e.isTech(d);
                    var g = a === d || a.prototype.isPrototypeOf(d.prototype);
                    if (f || !g) {
                        var h;
                        if (f) {
                            h = "techs must be registered using Tech.registerTech()";
                        } else {
                            h = "must be a Component subclass";
                        }
                        throw new Error('Illegal component, "' + c + '"; ' + h + ".");
                    }
                    c = bL(c);
                    if (!a.components_) {
                        a.components_ = {};
                    }
                    var i = a.getComponent("Player");
                    if (c === "Player" && i && i.players) {
                        var j = i.players;
                        var k = Object.keys(j);
                        if (j && k.length > 0 && k.map(function(a) {
                            return j[a];
                        }).every(Boolean)) {
                            throw new Error("Can not register Player component after player has been created.");
                        }
                    }
                    a.components_[c] = d;
                    a.components_[bK(c)] = d;
                    return d;
                };
                a.getComponent = function b(c) {
                    if (!c || !a.components_) {
                        return;
                    }
                    return a.components_[c];
                };
                return a;
            })();
            bS.prototype.supportsRaf_ = typeof e().requestAnimationFrame === "function" && typeof e().cancelAnimationFrame === "function";
            bS.registerComponent("Component", bS);
            function bT(a, b, c) {
                if (typeof b !== "number" || b < 0 || b > c) {
                    throw new Error("Failed to execute '" + a + "' on 'TimeRanges': The index provided (" + b + ") is non-numeric or out of bounds (0-" + c + ").");
                }
            }
            function bU(a, b, c, d) {
                bT(a, d, c.length - 1);
                return c[d][b];
            }
            function bV(a) {
                var b;
                if (a === undefined || a.length === 0) {
                    b = {
                        length: 0,
                        start: function a() {
                            throw new Error("This TimeRanges object is empty");
                        },
                        end: function a() {
                            throw new Error("This TimeRanges object is empty");
                        }
                    };
                } else {
                    b = {
                        length: a.length,
                        start: bU.bind(null, "start", 0, a),
                        end: bU.bind(null, "end", 1, a)
                    };
                }
                if (e().Symbol && e().Symbol.iterator) {
                    b[e().Symbol.iterator] = function() {
                        return (a || []).values();
                    };
                }
                return b;
            }
            function bW(a, b) {
                if (Array.isArray(a)) {
                    return bV(a);
                } else if (a === undefined || b === undefined) {
                    return bV();
                }
                return bV([
                    [
                        a,
                        b
                    ]
                ]);
            }
            function bX(a, b) {
                var c = 0;
                var d;
                var e;
                if (!b) {
                    return 0;
                }
                if (!a || !a.length) {
                    a = bW(0, 0);
                }
                for(var f = 0; f < a.length; f++){
                    d = a.start(f);
                    e = a.end(f);
                    if (e > b) {
                        e = b;
                    }
                    c += e - d;
                }
                return c / b;
            }
            function bY(a) {
                if (a instanceof bY) {
                    return a;
                }
                if (typeof a === "number") {
                    this.code = a;
                } else if (typeof a === "string") {
                    this.message = a;
                } else if (aa(a)) {
                    if (typeof a.code === "number") {
                        this.code = a.code;
                    }
                    _(this, a);
                }
                if (!this.message) {
                    this.message = bY.defaultMessages[this.code] || "";
                }
            }
            bY.prototype.code = 0;
            bY.prototype.message = "";
            bY.prototype.status = null;
            bY.errorTypes = [
                "MEDIA_ERR_CUSTOM",
                "MEDIA_ERR_ABORTED",
                "MEDIA_ERR_NETWORK",
                "MEDIA_ERR_DECODE",
                "MEDIA_ERR_SRC_NOT_SUPPORTED",
                "MEDIA_ERR_ENCRYPTED", 
            ];
            bY.defaultMessages = {
                1: "You aborted the media playback",
                2: "A network error caused the media download to fail part-way.",
                3: "The media playback was aborted due to a corruption problem or because the media used features your browser did not support.",
                4: "The media could not be loaded, either because the server or network failed or because the format is not supported.",
                5: "The media is encrypted and we do not have the keys to decrypt it."
            };
            for(var bZ = 0; bZ < bY.errorTypes.length; bZ++){
                bY[bY.errorTypes[bZ]] = bZ;
                bY.prototype[bY.errorTypes[bZ]] = bZ;
            }
            function b$(a) {
                return (a !== undefined && a !== null && typeof a.then === "function");
            }
            function b_(a) {
                if (b$(a)) {
                    a.then(null, function(a) {});
                }
            }
            var b0 = function a(b) {
                var c = [
                    "kind",
                    "label",
                    "language",
                    "id",
                    "inBandMetadataTrackDispatchType",
                    "mode",
                    "src", 
                ].reduce(function(a, c, d) {
                    if (b[c]) {
                        a[c] = b[c];
                    }
                    return a;
                }, {
                    cues: b.cues && Array.prototype.map.call(b.cues, function(a) {
                        return {
                            startTime: a.startTime,
                            endTime: a.endTime,
                            text: a.text,
                            id: a.id
                        };
                    })
                });
                return c;
            };
            var b1 = function a(b) {
                var c = b.$$("track");
                var d = Array.prototype.map.call(c, function(a) {
                    return a.track;
                });
                var e = Array.prototype.map.call(c, function(a) {
                    var b = b0(a.track);
                    if (a.src) {
                        b.src = a.src;
                    }
                    return b;
                });
                return e.concat(Array.prototype.filter.call(b.textTracks(), function(a) {
                    return d.indexOf(a) === -1;
                }).map(b0));
            };
            var b2 = function a(b, c) {
                b.forEach(function(a) {
                    var b = c.addRemoteTextTrack(a).track;
                    if (!a.src && a.cues) {
                        a.cues.forEach(function(a) {
                            return b.addCue(a);
                        });
                    }
                });
                return c.textTracks();
            };
            var b3 = {
                textTracksToJson: b1,
                jsonToTextTracks: b2,
                trackToJson_: b0
            };
            var b4 = "vjs-modal-dialog";
            var b5 = (function(a) {
                (0, j.Z)(b, a);
                function b(b, c) {
                    var d;
                    d = a.call(this, b, c) || this;
                    d.handleKeyDown_ = function(a) {
                        return d.handleKeyDown(a);
                    };
                    d.close_ = function(a) {
                        return d.close(a);
                    };
                    d.opened_ = d.hasBeenOpened_ = d.hasBeenFilled_ = false;
                    d.closeable(!d.options_.uncloseable);
                    d.content(d.options_.content);
                    d.contentEl_ = aF("div", {
                        className: b4 + "-content"
                    }, {
                        role: "document"
                    });
                    d.descEl_ = aF("p", {
                        className: b4 + "-description vjs-control-text",
                        id: d.el().getAttribute("aria-describedby")
                    });
                    aG(d.descEl_, d.description());
                    d.el_.appendChild(d.descEl_);
                    d.el_.appendChild(d.contentEl_);
                    return d;
                }
                var c = b.prototype;
                c.createEl = function b() {
                    return a.prototype.createEl.call(this, "div", {
                        className: this.buildCSSClass(),
                        tabIndex: -1
                    }, {
                        "aria-describedby": this.id() + "_description",
                        "aria-hidden": "true",
                        "aria-label": this.label(),
                        role: "dialog"
                    });
                };
                c.dispose = function b() {
                    this.contentEl_ = null;
                    this.descEl_ = null;
                    this.previouslyActiveEl_ = null;
                    a.prototype.dispose.call(this);
                };
                c.buildCSSClass = function b() {
                    return (b4 + " vjs-hidden " + a.prototype.buildCSSClass.call(this));
                };
                c.label = function a() {
                    return this.localize(this.options_.label || "Modal Window");
                };
                c.description = function a() {
                    var b = this.options_.description || this.localize("This is a modal window.");
                    if (this.closeable()) {
                        b += " " + this.localize("This modal can be closed by pressing the Escape key or activating the close button.");
                    }
                    return b;
                };
                c.open = function a() {
                    if (!this.opened_) {
                        var b = this.player();
                        this.trigger("beforemodalopen");
                        this.opened_ = true;
                        if (this.options_.fillAlways || (!this.hasBeenOpened_ && !this.hasBeenFilled_)) {
                            this.fill();
                        }
                        this.wasPlaying_ = !b.paused();
                        if (this.options_.pauseOnOpen && this.wasPlaying_) {
                            b.pause();
                        }
                        this.on("keydown", this.handleKeyDown_);
                        this.hadControls_ = b.controls();
                        b.controls(false);
                        this.show();
                        this.conditionalFocus_();
                        this.el().setAttribute("aria-hidden", "false");
                        this.trigger("modalopen");
                        this.hasBeenOpened_ = true;
                    }
                };
                c.opened = function a(b) {
                    if (typeof b === "boolean") {
                        this[b ? "open" : "close"]();
                    }
                    return this.opened_;
                };
                c.close = function a() {
                    if (!this.opened_) {
                        return;
                    }
                    var b = this.player();
                    this.trigger("beforemodalclose");
                    this.opened_ = false;
                    if (this.wasPlaying_ && this.options_.pauseOnOpen) {
                        b.play();
                    }
                    this.off("keydown", this.handleKeyDown_);
                    if (this.hadControls_) {
                        b.controls(true);
                    }
                    this.hide();
                    this.el().setAttribute("aria-hidden", "true");
                    this.trigger("modalclose");
                    this.conditionalBlur_();
                    if (this.options_.temporary) {
                        this.dispose();
                    }
                };
                c.closeable = function a(b) {
                    if (typeof b === "boolean") {
                        var a = (this.closeable_ = !!b);
                        var c = this.getChild("closeButton");
                        if (a && !c) {
                            var d = this.contentEl_;
                            this.contentEl_ = this.el_;
                            c = this.addChild("closeButton", {
                                controlText: "Close Modal Dialog"
                            });
                            this.contentEl_ = d;
                            this.on(c, "close", this.close_);
                        }
                        if (!a && c) {
                            this.off(c, "close", this.close_);
                            this.removeChild(c);
                            c.dispose();
                        }
                    }
                    return this.closeable_;
                };
                c.fill = function a() {
                    this.fillWith(this.content());
                };
                c.fillWith = function a(b) {
                    var c = this.contentEl();
                    var d = c.parentNode;
                    var e = c.nextSibling;
                    this.trigger("beforemodalfill");
                    this.hasBeenFilled_ = true;
                    d.removeChild(c);
                    this.empty();
                    a$(c, b);
                    this.trigger("modalfill");
                    if (e) {
                        d.insertBefore(c, e);
                    } else {
                        d.appendChild(c);
                    }
                    var f = this.getChild("closeButton");
                    if (f) {
                        d.appendChild(f.el_);
                    }
                };
                c.empty = function a() {
                    this.trigger("beforemodalempty");
                    aX(this.contentEl());
                    this.trigger("modalempty");
                };
                c.content = function a(b) {
                    if (typeof b !== "undefined") {
                        this.content_ = b;
                    }
                    return this.content_;
                };
                c.conditionalFocus_ = function a() {
                    var b = g().activeElement;
                    var c = this.player_.el_;
                    this.previouslyActiveEl_ = null;
                    if (c.contains(b) || c === b) {
                        this.previouslyActiveEl_ = b;
                        this.focus();
                    }
                };
                c.conditionalBlur_ = function a() {
                    if (this.previouslyActiveEl_) {
                        this.previouslyActiveEl_.focus();
                        this.previouslyActiveEl_ = null;
                    }
                };
                c.handleKeyDown = function a(b) {
                    b.stopPropagation();
                    if (n().isEventKey(b, "Escape") && this.closeable()) {
                        b.preventDefault();
                        this.close();
                        return;
                    }
                    if (!n().isEventKey(b, "Tab")) {
                        return;
                    }
                    var c = this.focusableEls_();
                    var d = this.el_.querySelector(":focus");
                    var e;
                    for(var f = 0; f < c.length; f++){
                        if (d === c[f]) {
                            e = f;
                            break;
                        }
                    }
                    if (g().activeElement === this.el_) {
                        e = 0;
                    }
                    if (b.shiftKey && e === 0) {
                        c[c.length - 1].focus();
                        b.preventDefault();
                    } else if (!b.shiftKey && e === c.length - 1) {
                        c[0].focus();
                        b.preventDefault();
                    }
                };
                c.focusableEls_ = function a() {
                    var b = this.el_.querySelectorAll("*");
                    return Array.prototype.filter.call(b, function(a) {
                        return (((a instanceof e().HTMLAnchorElement || a instanceof e().HTMLAreaElement) && a.hasAttribute("href")) || ((a instanceof e().HTMLInputElement || a instanceof e().HTMLSelectElement || a instanceof e().HTMLTextAreaElement || a instanceof e().HTMLButtonElement) && !a.hasAttribute("disabled")) || a instanceof e().HTMLIFrameElement || a instanceof e().HTMLObjectElement || a instanceof e().HTMLEmbedElement || (a.hasAttribute("tabindex") && a.getAttribute("tabindex") !== -1) || a.hasAttribute("contenteditable"));
                    });
                };
                return b;
            })(bS);
            b5.prototype.options_ = {
                pauseOnOpen: true,
                temporary: true
            };
            bS.registerComponent("ModalDialog", b5);
            var b6 = (function(a) {
                (0, j.Z)(b, a);
                function b(b) {
                    var c;
                    if (b === void 0) {
                        b = [];
                    }
                    c = a.call(this) || this;
                    c.tracks_ = [];
                    Object.defineProperty((0, i.Z)(c), "length", {
                        get: function a() {
                            return this.tracks_.length;
                        }
                    });
                    for(var d = 0; d < b.length; d++){
                        c.addTrack(b[d]);
                    }
                    return c;
                }
                var c = b.prototype;
                c.addTrack = function a(b) {
                    var c = this;
                    var d = this.tracks_.length;
                    if (!("" + d in this)) {
                        Object.defineProperty(this, d, {
                            get: function a() {
                                return this.tracks_[d];
                            }
                        });
                    }
                    if (this.tracks_.indexOf(b) === -1) {
                        this.tracks_.push(b);
                        this.trigger({
                            track: b,
                            type: "addtrack",
                            target: this
                        });
                    }
                    b.labelchange_ = function() {
                        c.trigger({
                            track: b,
                            type: "labelchange",
                            target: c
                        });
                    };
                    if (by(b)) {
                        b.addEventListener("labelchange", b.labelchange_);
                    }
                };
                c.removeTrack = function a(b) {
                    var c;
                    for(var d = 0, e = this.length; d < e; d++){
                        if (this[d] === b) {
                            c = this[d];
                            if (c.off) {
                                c.off();
                            }
                            this.tracks_.splice(d, 1);
                            break;
                        }
                    }
                    if (!c) {
                        return;
                    }
                    this.trigger({
                        track: c,
                        type: "removetrack",
                        target: this
                    });
                };
                c.getTrackById = function a(b) {
                    var c = null;
                    for(var d = 0, e = this.length; d < e; d++){
                        var f = this[d];
                        if (f.id === b) {
                            c = f;
                            break;
                        }
                    }
                    return c;
                };
                return b;
            })(bv);
            b6.prototype.allowedEvents_ = {
                change: "change",
                addtrack: "addtrack",
                removetrack: "removetrack",
                labelchange: "labelchange"
            };
            for(var b7 in b6.prototype.allowedEvents_){
                b6.prototype["on" + b7] = null;
            }
            var b8 = function a(b, c) {
                for(var d = 0; d < b.length; d++){
                    if (!Object.keys(b[d]).length || c.id === b[d].id) {
                        continue;
                    }
                    b[d].enabled = false;
                }
            };
            var b9 = (function(a) {
                (0, j.Z)(b, a);
                function b(b) {
                    var c;
                    if (b === void 0) {
                        b = [];
                    }
                    for(var d = b.length - 1; d >= 0; d--){
                        if (b[d].enabled) {
                            b8(b, b[d]);
                            break;
                        }
                    }
                    c = a.call(this, b) || this;
                    c.changing_ = false;
                    return c;
                }
                var c = b.prototype;
                c.addTrack = function b(c) {
                    var d = this;
                    if (c.enabled) {
                        b8(this, c);
                    }
                    a.prototype.addTrack.call(this, c);
                    if (!c.addEventListener) {
                        return;
                    }
                    c.enabledChange_ = function() {
                        if (d.changing_) {
                            return;
                        }
                        d.changing_ = true;
                        b8(d, c);
                        d.changing_ = false;
                        d.trigger("change");
                    };
                    c.addEventListener("enabledchange", c.enabledChange_);
                };
                c.removeTrack = function b(c) {
                    a.prototype.removeTrack.call(this, c);
                    if (c.removeEventListener && c.enabledChange_) {
                        c.removeEventListener("enabledchange", c.enabledChange_);
                        c.enabledChange_ = null;
                    }
                };
                return b;
            })(b6);
            var ca = function a(b, c) {
                for(var d = 0; d < b.length; d++){
                    if (!Object.keys(b[d]).length || c.id === b[d].id) {
                        continue;
                    }
                    b[d].selected = false;
                }
            };
            var cb = (function(a) {
                (0, j.Z)(b, a);
                function b(b) {
                    var c;
                    if (b === void 0) {
                        b = [];
                    }
                    for(var d = b.length - 1; d >= 0; d--){
                        if (b[d].selected) {
                            ca(b, b[d]);
                            break;
                        }
                    }
                    c = a.call(this, b) || this;
                    c.changing_ = false;
                    Object.defineProperty((0, i.Z)(c), "selectedIndex", {
                        get: function a() {
                            for(var b = 0; b < this.length; b++){
                                if (this[b].selected) {
                                    return b;
                                }
                            }
                            return -1;
                        },
                        set: function a() {}
                    });
                    return c;
                }
                var c = b.prototype;
                c.addTrack = function b(c) {
                    var d = this;
                    if (c.selected) {
                        ca(this, c);
                    }
                    a.prototype.addTrack.call(this, c);
                    if (!c.addEventListener) {
                        return;
                    }
                    c.selectedChange_ = function() {
                        if (d.changing_) {
                            return;
                        }
                        d.changing_ = true;
                        ca(d, c);
                        d.changing_ = false;
                        d.trigger("change");
                    };
                    c.addEventListener("selectedchange", c.selectedChange_);
                };
                c.removeTrack = function b(c) {
                    a.prototype.removeTrack.call(this, c);
                    if (c.removeEventListener && c.selectedChange_) {
                        c.removeEventListener("selectedchange", c.selectedChange_);
                        c.selectedChange_ = null;
                    }
                };
                return b;
            })(b6);
            var cc = (function(a) {
                (0, j.Z)(b, a);
                function b() {
                    return a.apply(this, arguments) || this;
                }
                var c = b.prototype;
                c.addTrack = function b(c) {
                    var d = this;
                    a.prototype.addTrack.call(this, c);
                    if (!this.queueChange_) {
                        this.queueChange_ = function() {
                            return d.queueTrigger("change");
                        };
                    }
                    if (!this.triggerSelectedlanguagechange) {
                        this.triggerSelectedlanguagechange_ = function() {
                            return d.trigger("selectedlanguagechange");
                        };
                    }
                    c.addEventListener("modechange", this.queueChange_);
                    var e = [
                        "metadata",
                        "chapters"
                    ];
                    if (e.indexOf(c.kind) === -1) {
                        c.addEventListener("modechange", this.triggerSelectedlanguagechange_);
                    }
                };
                c.removeTrack = function b(c) {
                    a.prototype.removeTrack.call(this, c);
                    if (c.removeEventListener) {
                        if (this.queueChange_) {
                            c.removeEventListener("modechange", this.queueChange_);
                        }
                        if (this.selectedlanguagechange_) {
                            c.removeEventListener("modechange", this.triggerSelectedlanguagechange_);
                        }
                    }
                };
                return b;
            })(b6);
            var cd = (function() {
                function a(a) {
                    if (a === void 0) {
                        a = [];
                    }
                    this.trackElements_ = [];
                    Object.defineProperty(this, "length", {
                        get: function a() {
                            return this.trackElements_.length;
                        }
                    });
                    for(var b = 0, c = a.length; b < c; b++){
                        this.addTrackElement_(a[b]);
                    }
                }
                var b = a.prototype;
                b.addTrackElement_ = function a(b) {
                    var c = this.trackElements_.length;
                    if (!("" + c in this)) {
                        Object.defineProperty(this, c, {
                            get: function a() {
                                return this.trackElements_[c];
                            }
                        });
                    }
                    if (this.trackElements_.indexOf(b) === -1) {
                        this.trackElements_.push(b);
                    }
                };
                b.getTrackElementByTrack_ = function a(b) {
                    var c;
                    for(var d = 0, e = this.trackElements_.length; d < e; d++){
                        if (b === this.trackElements_[d].track) {
                            c = this.trackElements_[d];
                            break;
                        }
                    }
                    return c;
                };
                b.removeTrackElement_ = function a(b) {
                    for(var c = 0, d = this.trackElements_.length; c < d; c++){
                        if (b === this.trackElements_[c]) {
                            if (this.trackElements_[c].track && typeof this.trackElements_[c].track.off === "function") {
                                this.trackElements_[c].track.off();
                            }
                            if (typeof this.trackElements_[c].off === "function") {
                                this.trackElements_[c].off();
                            }
                            this.trackElements_.splice(c, 1);
                            break;
                        }
                    }
                };
                return a;
            })();
            var ce = (function() {
                function a(b) {
                    a.prototype.setCues_.call(this, b);
                    Object.defineProperty(this, "length", {
                        get: function a() {
                            return this.length_;
                        }
                    });
                }
                var b = a.prototype;
                b.setCues_ = function a(b) {
                    var c = this.length || 0;
                    var d = 0;
                    var e = b.length;
                    this.cues_ = b;
                    this.length_ = b.length;
                    var f = function a(b) {
                        if (!("" + b in this)) {
                            Object.defineProperty(this, "" + b, {
                                get: function a() {
                                    return this.cues_[b];
                                }
                            });
                        }
                    };
                    if (c < e) {
                        d = c;
                        for(; d < e; d++){
                            f.call(this, d);
                        }
                    }
                };
                b.getCueById = function a(b) {
                    var c = null;
                    for(var d = 0, e = this.length; d < e; d++){
                        var f = this[d];
                        if (f.id === b) {
                            c = f;
                            break;
                        }
                    }
                    return c;
                };
                return a;
            })();
            var cf = {
                alternative: "alternative",
                captions: "captions",
                main: "main",
                sign: "sign",
                subtitles: "subtitles",
                commentary: "commentary"
            };
            var cg = {
                alternative: "alternative",
                descriptions: "descriptions",
                main: "main",
                "main-desc": "main-desc",
                translation: "translation",
                commentary: "commentary"
            };
            var ch = {
                subtitles: "subtitles",
                captions: "captions",
                descriptions: "descriptions",
                chapters: "chapters",
                metadata: "metadata"
            };
            var ci = {
                disabled: "disabled",
                hidden: "hidden",
                showing: "showing"
            };
            var cj = (function(a) {
                (0, j.Z)(b, a);
                function b(b) {
                    var c;
                    if (b === void 0) {
                        b = {};
                    }
                    c = a.call(this) || this;
                    var d = {
                        id: b.id || "vjs_track_" + bc(),
                        kind: b.kind || "",
                        language: b.language || ""
                    };
                    var e = b.label || "";
                    var f = function a(b) {
                        Object.defineProperty((0, i.Z)(c), b, {
                            get: function a() {
                                return d[b];
                            },
                            set: function a() {}
                        });
                    };
                    for(var g in d){
                        f(g);
                    }
                    Object.defineProperty((0, i.Z)(c), "label", {
                        get: function a() {
                            return e;
                        },
                        set: function a(b) {
                            if (b !== e) {
                                e = b;
                                this.trigger("labelchange");
                            }
                        }
                    });
                    return c;
                }
                return b;
            })(bv);
            var ck = function a(b) {
                var c = [
                    "protocol",
                    "hostname",
                    "port",
                    "pathname",
                    "search",
                    "hash",
                    "host", 
                ];
                var d = g().createElement("a");
                d.href = b;
                var f = {};
                for(var h = 0; h < c.length; h++){
                    f[c[h]] = d[c[h]];
                }
                if (f.protocol === "http:") {
                    f.host = f.host.replace(/:80$/, "");
                }
                if (f.protocol === "https:") {
                    f.host = f.host.replace(/:443$/, "");
                }
                if (!f.protocol) {
                    f.protocol = e().location.protocol;
                }
                if (!f.host) {
                    f.host = e().location.host;
                }
                return f;
            };
            var cl = function a(b) {
                if (!b.match(/^https?:\/\//)) {
                    var c = g().createElement("a");
                    c.href = b;
                    b = c.href;
                }
                return b;
            };
            var cm = function a(b) {
                if (typeof b === "string") {
                    var c = /^(\/?)([\s\S]*?)((?:\.{1,2}|[^\/]+?)(\.([^\.\/\?]+)))(?:[\/]*|[\?].*)$/;
                    var d = c.exec(b);
                    if (d) {
                        return d.pop().toLowerCase();
                    }
                }
                return "";
            };
            var cn = function a(b, c) {
                if (c === void 0) {
                    c = e().location;
                }
                var d = ck(b);
                var f = d.protocol === ":" ? c.protocol : d.protocol;
                var g = f + d.host !== c.protocol + c.host;
                return g;
            };
            var co = Object.freeze({
                __proto__: null,
                parseUrl: ck,
                getAbsoluteURL: cl,
                getFileExtension: cm,
                isCrossOrigin: cn
            });
            var cp = function a(b, c) {
                var d = new (e().WebVTT.Parser)(e(), e().vttjs, e().WebVTT.StringDecoder());
                var f = [];
                d.oncue = function(a) {
                    c.addCue(a);
                };
                d.onparsingerror = function(a) {
                    f.push(a);
                };
                d.onflush = function() {
                    c.trigger({
                        type: "loadeddata",
                        target: c
                    });
                };
                d.parse(b);
                if (f.length > 0) {
                    if (e().console && e().console.groupCollapsed) {
                        e().console.groupCollapsed("Text Track parsing errors for " + c.src);
                    }
                    f.forEach(function(a) {
                        return V.error(a);
                    });
                    if (e().console && e().console.groupEnd) {
                        e().console.groupEnd();
                    }
                }
                d.flush();
            };
            var cq = function a(b, c) {
                var d = {
                    uri: b
                };
                var f = cn(b);
                if (f) {
                    d.cors = f;
                }
                var g = c.tech_.crossOrigin() === "use-credentials";
                if (g) {
                    d.withCredentials = g;
                }
                p()(d, bs(this, function(a, b, d) {
                    if (a) {
                        return V.error(a, b);
                    }
                    c.loaded_ = true;
                    if (typeof e().WebVTT !== "function") {
                        if (c.tech_) {
                            c.tech_.any([
                                "vttjsloaded",
                                "vttjserror"
                            ], function(a) {
                                if (a.type === "vttjserror") {
                                    V.error("vttjs failed to load, stopping trying to process " + c.src);
                                    return;
                                }
                                return cp(d, c);
                            });
                        }
                    } else {
                        cp(d, c);
                    }
                }));
            };
            var cr = (function(a) {
                (0, j.Z)(b, a);
                function b(b) {
                    var c;
                    if (b === void 0) {
                        b = {};
                    }
                    if (!b.tech) {
                        throw new Error("A tech was not provided.");
                    }
                    var d = bN(b, {
                        kind: ch[b.kind] || "subtitles",
                        language: b.language || b.srclang || ""
                    });
                    var e = ci[d.mode] || "disabled";
                    var f = d["default"];
                    if (d.kind === "metadata" || d.kind === "chapters") {
                        e = "hidden";
                    }
                    c = a.call(this, d) || this;
                    c.tech_ = d.tech;
                    c.cues_ = [];
                    c.activeCues_ = [];
                    c.preload_ = c.tech_.preloadTextTracks !== false;
                    var g = new ce(c.cues_);
                    var h = new ce(c.activeCues_);
                    var j = false;
                    var k = bs((0, i.Z)(c), function() {
                        if (!this.tech_.isReady_ || this.tech_.isDisposed()) {
                            return;
                        }
                        this.activeCues = this.activeCues;
                        if (j) {
                            this.trigger("cuechange");
                            j = false;
                        }
                    });
                    var l = function a() {
                        c.tech_.off("timeupdate", k);
                    };
                    c.tech_.one("dispose", l);
                    if (e !== "disabled") {
                        c.tech_.on("timeupdate", k);
                    }
                    Object.defineProperties((0, i.Z)(c), {
                        default: {
                            get: function a() {
                                return f;
                            },
                            set: function a() {}
                        },
                        mode: {
                            get: function a() {
                                return e;
                            },
                            set: function a(b) {
                                if (!ci[b]) {
                                    return;
                                }
                                if (e === b) {
                                    return;
                                }
                                e = b;
                                if (!this.preload_ && e !== "disabled" && this.cues.length === 0) {
                                    cq(this.src, this);
                                }
                                this.tech_.off("timeupdate", k);
                                if (e !== "disabled") {
                                    this.tech_.on("timeupdate", k);
                                }
                                this.trigger("modechange");
                            }
                        },
                        cues: {
                            get: function a() {
                                if (!this.loaded_) {
                                    return null;
                                }
                                return g;
                            },
                            set: function a() {}
                        },
                        activeCues: {
                            get: function a() {
                                if (!this.loaded_) {
                                    return null;
                                }
                                if (this.cues.length === 0) {
                                    return h;
                                }
                                var b = this.tech_.currentTime();
                                var c = [];
                                for(var d = 0, e = this.cues.length; d < e; d++){
                                    var f = this.cues[d];
                                    if (f.startTime <= b && f.endTime >= b) {
                                        c.push(f);
                                    } else if (f.startTime === f.endTime && f.startTime <= b && f.startTime + 0.5 >= b) {
                                        c.push(f);
                                    }
                                }
                                j = false;
                                if (c.length !== this.activeCues_.length) {
                                    j = true;
                                } else {
                                    for(var g = 0; g < c.length; g++){
                                        if (this.activeCues_.indexOf(c[g]) === -1) {
                                            j = true;
                                        }
                                    }
                                }
                                this.activeCues_ = c;
                                h.setCues_(this.activeCues_);
                                return h;
                            },
                            set: function a() {}
                        }
                    });
                    if (d.src) {
                        c.src = d.src;
                        if (!c.preload_) {
                            c.loaded_ = true;
                        }
                        if (c.preload_ || (d.kind !== "subtitles" && d.kind !== "captions")) {
                            cq(c.src, (0, i.Z)(c));
                        }
                    } else {
                        c.loaded_ = true;
                    }
                    return c;
                }
                var c = b.prototype;
                c.addCue = function a(b) {
                    var c = b;
                    if (e().vttjs && !(b instanceof e().vttjs.VTTCue)) {
                        c = new (e().vttjs.VTTCue)(b.startTime, b.endTime, b.text);
                        for(var d in b){
                            if (!(d in c)) {
                                c[d] = b[d];
                            }
                        }
                        c.id = b.id;
                        c.originalCue_ = b;
                    }
                    var f = this.tech_.textTracks();
                    for(var g = 0; g < f.length; g++){
                        if (f[g] !== this) {
                            f[g].removeCue(c);
                        }
                    }
                    this.cues_.push(c);
                    this.cues.setCues_(this.cues_);
                };
                c.removeCue = function a(b) {
                    var c = this.cues_.length;
                    while(c--){
                        var d = this.cues_[c];
                        if (d === b || (d.originalCue_ && d.originalCue_ === b)) {
                            this.cues_.splice(c, 1);
                            this.cues.setCues_(this.cues_);
                            break;
                        }
                    }
                };
                return b;
            })(cj);
            cr.prototype.allowedEvents_ = {
                cuechange: "cuechange"
            };
            var cs = (function(a) {
                (0, j.Z)(b, a);
                function b(b) {
                    var c;
                    if (b === void 0) {
                        b = {};
                    }
                    var d = bN(b, {
                        kind: cg[b.kind] || ""
                    });
                    c = a.call(this, d) || this;
                    var e = false;
                    Object.defineProperty((0, i.Z)(c), "enabled", {
                        get: function a() {
                            return e;
                        },
                        set: function a(b) {
                            if (typeof b !== "boolean" || b === e) {
                                return;
                            }
                            e = b;
                            this.trigger("enabledchange");
                        }
                    });
                    if (d.enabled) {
                        c.enabled = d.enabled;
                    }
                    c.loaded_ = true;
                    return c;
                }
                return b;
            })(cj);
            var ct = (function(a) {
                (0, j.Z)(b, a);
                function b(b) {
                    var c;
                    if (b === void 0) {
                        b = {};
                    }
                    var d = bN(b, {
                        kind: cf[b.kind] || ""
                    });
                    c = a.call(this, d) || this;
                    var e = false;
                    Object.defineProperty((0, i.Z)(c), "selected", {
                        get: function a() {
                            return e;
                        },
                        set: function a(b) {
                            if (typeof b !== "boolean" || b === e) {
                                return;
                            }
                            e = b;
                            this.trigger("selectedchange");
                        }
                    });
                    if (d.selected) {
                        c.selected = d.selected;
                    }
                    return c;
                }
                return b;
            })(cj);
            var cu = 0;
            var cv = 1;
            var cw = 2;
            var cx = 3;
            var cy = (function(a) {
                (0, j.Z)(b, a);
                function b(b) {
                    var c;
                    if (b === void 0) {
                        b = {};
                    }
                    c = a.call(this) || this;
                    var d;
                    var e = new cr(b);
                    c.kind = e.kind;
                    c.src = e.src;
                    c.srclang = e.language;
                    c.label = e.label;
                    c["default"] = e["default"];
                    Object.defineProperties((0, i.Z)(c), {
                        readyState: {
                            get: function a() {
                                return d;
                            }
                        },
                        track: {
                            get: function a() {
                                return e;
                            }
                        }
                    });
                    d = cu;
                    e.addEventListener("loadeddata", function() {
                        d = cw;
                        c.trigger({
                            type: "load",
                            target: (0, i.Z)(c)
                        });
                    });
                    return c;
                }
                return b;
            })(bv);
            cy.prototype.allowedEvents_ = {
                load: "load"
            };
            cy.NONE = cu;
            cy.LOADING = cv;
            cy.LOADED = cw;
            cy.ERROR = cx;
            var cz = {
                audio: {
                    ListClass: b9,
                    TrackClass: cs,
                    capitalName: "Audio"
                },
                video: {
                    ListClass: cb,
                    TrackClass: ct,
                    capitalName: "Video"
                },
                text: {
                    ListClass: cc,
                    TrackClass: cr,
                    capitalName: "Text"
                }
            };
            Object.keys(cz).forEach(function(a) {
                cz[a].getterName = a + "Tracks";
                cz[a].privateName = a + "Tracks_";
            });
            var cA = {
                remoteText: {
                    ListClass: cc,
                    TrackClass: cr,
                    capitalName: "RemoteText",
                    getterName: "remoteTextTracks",
                    privateName: "remoteTextTracks_"
                },
                remoteTextEl: {
                    ListClass: cd,
                    TrackClass: cy,
                    capitalName: "RemoteTextTrackEls",
                    getterName: "remoteTextTrackEls",
                    privateName: "remoteTextTrackEls_"
                }
            };
            var cB = (0, h.Z)({}, cz, cA);
            cA.names = Object.keys(cA);
            cz.names = Object.keys(cz);
            cB.names = [].concat(cA.names).concat(cz.names);
            function cC(a, b, c, d, e) {
                if (e === void 0) {
                    e = {};
                }
                var f = a.textTracks();
                e.kind = b;
                if (c) {
                    e.label = c;
                }
                if (d) {
                    e.language = d;
                }
                e.tech = a;
                var g = new cB.text.TrackClass(e);
                f.addTrack(g);
                return g;
            }
            var cD = (function(a) {
                (0, j.Z)(b, a);
                function b(b, c) {
                    var d;
                    if (b === void 0) {
                        b = {};
                    }
                    if (c === void 0) {
                        c = function a() {};
                    }
                    b.reportTouchActivity = false;
                    d = a.call(this, null, b, c) || this;
                    d.onDurationChange_ = function(a) {
                        return d.onDurationChange(a);
                    };
                    d.trackProgress_ = function(a) {
                        return d.trackProgress(a);
                    };
                    d.trackCurrentTime_ = function(a) {
                        return d.trackCurrentTime(a);
                    };
                    d.stopTrackingCurrentTime_ = function(a) {
                        return d.stopTrackingCurrentTime(a);
                    };
                    d.disposeSourceHandler_ = function(a) {
                        return d.disposeSourceHandler(a);
                    };
                    d.hasStarted_ = false;
                    d.on("playing", function() {
                        this.hasStarted_ = true;
                    });
                    d.on("loadstart", function() {
                        this.hasStarted_ = false;
                    });
                    cB.names.forEach(function(a) {
                        var c = cB[a];
                        if (b && b[c.getterName]) {
                            d[c.privateName] = b[c.getterName];
                        }
                    });
                    if (!d.featuresProgressEvents) {
                        d.manualProgressOn();
                    }
                    if (!d.featuresTimeupdateEvents) {
                        d.manualTimeUpdatesOn();
                    }
                    [
                        "Text",
                        "Audio",
                        "Video"
                    ].forEach(function(a) {
                        if (b["native" + a + "Tracks"] === false) {
                            d["featuresNative" + a + "Tracks"] = false;
                        }
                    });
                    if (b.nativeCaptions === false || b.nativeTextTracks === false) {
                        d.featuresNativeTextTracks = false;
                    } else if (b.nativeCaptions === true || b.nativeTextTracks === true) {
                        d.featuresNativeTextTracks = true;
                    }
                    if (!d.featuresNativeTextTracks) {
                        d.emulateTextTracks();
                    }
                    d.preloadTextTracks = b.preloadTextTracks !== false;
                    d.autoRemoteTextTracks_ = new cB.text.ListClass();
                    d.initTrackListeners();
                    if (!b.nativeControlsForTouch) {
                        d.emitTapEvents();
                    }
                    if (d.constructor) {
                        d.name_ = d.constructor.name || "Unknown Tech";
                    }
                    return d;
                }
                var c = b.prototype;
                c.triggerSourceset = function a(b) {
                    var c = this;
                    if (!this.isReady_) {
                        this.one("ready", function() {
                            return c.setTimeout(function() {
                                return c.triggerSourceset(b);
                            }, 1);
                        });
                    }
                    this.trigger({
                        src: b,
                        type: "sourceset"
                    });
                };
                c.manualProgressOn = function a() {
                    this.on("durationchange", this.onDurationChange_);
                    this.manualProgress = true;
                    this.one("ready", this.trackProgress_);
                };
                c.manualProgressOff = function a() {
                    this.manualProgress = false;
                    this.stopTrackingProgress();
                    this.off("durationchange", this.onDurationChange_);
                };
                c.trackProgress = function a(b) {
                    this.stopTrackingProgress();
                    this.progressInterval = this.setInterval(bs(this, function() {
                        var a = this.bufferedPercent();
                        if (this.bufferedPercent_ !== a) {
                            this.trigger("progress");
                        }
                        this.bufferedPercent_ = a;
                        if (a === 1) {
                            this.stopTrackingProgress();
                        }
                    }), 500);
                };
                c.onDurationChange = function a(b) {
                    this.duration_ = this.duration();
                };
                c.buffered = function a() {
                    return bW(0, 0);
                };
                c.bufferedPercent = function a() {
                    return bX(this.buffered(), this.duration_);
                };
                c.stopTrackingProgress = function a() {
                    this.clearInterval(this.progressInterval);
                };
                c.manualTimeUpdatesOn = function a() {
                    this.manualTimeUpdates = true;
                    this.on("play", this.trackCurrentTime_);
                    this.on("pause", this.stopTrackingCurrentTime_);
                };
                c.manualTimeUpdatesOff = function a() {
                    this.manualTimeUpdates = false;
                    this.stopTrackingCurrentTime();
                    this.off("play", this.trackCurrentTime_);
                    this.off("pause", this.stopTrackingCurrentTime_);
                };
                c.trackCurrentTime = function a() {
                    if (this.currentTimeInterval) {
                        this.stopTrackingCurrentTime();
                    }
                    this.currentTimeInterval = this.setInterval(function() {
                        this.trigger({
                            type: "timeupdate",
                            target: this,
                            manuallyTriggered: true
                        });
                    }, 250);
                };
                c.stopTrackingCurrentTime = function a() {
                    this.clearInterval(this.currentTimeInterval);
                    this.trigger({
                        type: "timeupdate",
                        target: this,
                        manuallyTriggered: true
                    });
                };
                c.dispose = function b() {
                    this.clearTracks(cz.names);
                    if (this.manualProgress) {
                        this.manualProgressOff();
                    }
                    if (this.manualTimeUpdates) {
                        this.manualTimeUpdatesOff();
                    }
                    a.prototype.dispose.call(this);
                };
                c.clearTracks = function a(b) {
                    var c = this;
                    b = [].concat(b);
                    b.forEach(function(a) {
                        var b = c[a + "Tracks"]() || [];
                        var d = b.length;
                        while(d--){
                            var e = b[d];
                            if (a === "text") {
                                c.removeRemoteTextTrack(e);
                            }
                            b.removeTrack(e);
                        }
                    });
                };
                c.cleanupAutoTextTracks = function a() {
                    var b = this.autoRemoteTextTracks_ || [];
                    var c = b.length;
                    while(c--){
                        var d = b[c];
                        this.removeRemoteTextTrack(d);
                    }
                };
                c.reset = function a() {};
                c.crossOrigin = function a() {};
                c.setCrossOrigin = function a() {};
                c.error = function a(b) {
                    if (b !== undefined) {
                        this.error_ = new bY(b);
                        this.trigger("error");
                    }
                    return this.error_;
                };
                c.played = function a() {
                    if (this.hasStarted_) {
                        return bW(0, 0);
                    }
                    return bW();
                };
                c.play = function a() {};
                c.setScrubbing = function a() {};
                c.scrubbing = function a() {};
                c.setCurrentTime = function a() {
                    if (this.manualTimeUpdates) {
                        this.trigger({
                            type: "timeupdate",
                            target: this,
                            manuallyTriggered: true
                        });
                    }
                };
                c.initTrackListeners = function a() {
                    var b = this;
                    cz.names.forEach(function(a) {
                        var c = cz[a];
                        var d = function c() {
                            b.trigger(a + "trackchange");
                        };
                        var e = b[c.getterName]();
                        e.addEventListener("removetrack", d);
                        e.addEventListener("addtrack", d);
                        b.on("dispose", function() {
                            e.removeEventListener("removetrack", d);
                            e.removeEventListener("addtrack", d);
                        });
                    });
                };
                c.addWebVttScript_ = function a() {
                    var b = this;
                    if (e().WebVTT) {
                        return;
                    }
                    if (g().body.contains(this.el())) {
                        if (!this.options_["vtt.js"] && ab(r()) && Object.keys(r()).length > 0) {
                            this.trigger("vttjsloaded");
                            return;
                        }
                        var c = g().createElement("script");
                        c.src = this.options_["vtt.js"] || "https://vjs.zencdn.net/vttjs/0.14.1/vtt.min.js";
                        c.onload = function() {
                            b.trigger("vttjsloaded");
                        };
                        c.onerror = function() {
                            b.trigger("vttjserror");
                        };
                        this.on("dispose", function() {
                            c.onload = null;
                            c.onerror = null;
                        });
                        e().WebVTT = true;
                        this.el().parentNode.appendChild(c);
                    } else {
                        this.ready(this.addWebVttScript_);
                    }
                };
                c.emulateTextTracks = function a() {
                    var b = this;
                    var c = this.textTracks();
                    var d = this.remoteTextTracks();
                    var e = function a(b) {
                        return c.addTrack(b.track);
                    };
                    var f = function a(b) {
                        return c.removeTrack(b.track);
                    };
                    d.on("addtrack", e);
                    d.on("removetrack", f);
                    this.addWebVttScript_();
                    var g = function a() {
                        return b.trigger("texttrackchange");
                    };
                    var h = function a() {
                        g();
                        for(var b = 0; b < c.length; b++){
                            var d = c[b];
                            d.removeEventListener("cuechange", g);
                            if (d.mode === "showing") {
                                d.addEventListener("cuechange", g);
                            }
                        }
                    };
                    h();
                    c.addEventListener("change", h);
                    c.addEventListener("addtrack", h);
                    c.addEventListener("removetrack", h);
                    this.on("dispose", function() {
                        d.off("addtrack", e);
                        d.off("removetrack", f);
                        c.removeEventListener("change", h);
                        c.removeEventListener("addtrack", h);
                        c.removeEventListener("removetrack", h);
                        for(var a = 0; a < c.length; a++){
                            var b = c[a];
                            b.removeEventListener("cuechange", g);
                        }
                    });
                };
                c.addTextTrack = function a(b, c, d) {
                    if (!b) {
                        throw new Error("TextTrack kind is required but was not provided");
                    }
                    return cC(this, b, c, d);
                };
                c.createRemoteTextTrack = function a(b) {
                    var c = bN(b, {
                        tech: this
                    });
                    return new cA.remoteTextEl.TrackClass(c);
                };
                c.addRemoteTextTrack = function a(b, c) {
                    var d = this;
                    if (b === void 0) {
                        b = {};
                    }
                    var e = this.createRemoteTextTrack(b);
                    if (c !== true && c !== false) {
                        V.warn('Calling addRemoteTextTrack without explicitly setting the "manualCleanup" parameter to `true` is deprecated and default to `false` in future version of video.js');
                        c = true;
                    }
                    this.remoteTextTrackEls().addTrackElement_(e);
                    this.remoteTextTracks().addTrack(e.track);
                    if (c !== true) {
                        this.ready(function() {
                            return d.autoRemoteTextTracks_.addTrack(e.track);
                        });
                    }
                    return e;
                };
                c.removeRemoteTextTrack = function a(b) {
                    var c = this.remoteTextTrackEls().getTrackElementByTrack_(b);
                    this.remoteTextTrackEls().removeTrackElement_(c);
                    this.remoteTextTracks().removeTrack(b);
                    this.autoRemoteTextTracks_.removeTrack(b);
                };
                c.getVideoPlaybackQuality = function a() {
                    return {};
                };
                c.requestPictureInPicture = function a() {
                    var b = this.options_.Promise || e().Promise;
                    if (b) {
                        return b.reject();
                    }
                };
                c.disablePictureInPicture = function a() {
                    return true;
                };
                c.setDisablePictureInPicture = function a() {};
                c.setPoster = function a() {};
                c.playsinline = function a() {};
                c.setPlaysinline = function a() {};
                c.overrideNativeAudioTracks = function a() {};
                c.overrideNativeVideoTracks = function a() {};
                c.canPlayType = function a() {
                    return "";
                };
                b.canPlayType = function a() {
                    return "";
                };
                b.canPlaySource = function a(c, d) {
                    return b.canPlayType(c.type);
                };
                b.isTech = function a(c) {
                    return (c.prototype instanceof b || c instanceof b || c === b);
                };
                b.registerTech = function a(c, d) {
                    if (!b.techs_) {
                        b.techs_ = {};
                    }
                    if (!b.isTech(d)) {
                        throw new Error("Tech " + c + " must be a Tech");
                    }
                    if (!b.canPlayType) {
                        throw new Error("Techs must have a static canPlayType method on them");
                    }
                    if (!b.canPlaySource) {
                        throw new Error("Techs must have a static canPlaySource method on them");
                    }
                    c = bL(c);
                    b.techs_[c] = d;
                    b.techs_[bK(c)] = d;
                    if (c !== "Tech") {
                        b.defaultTechOrder_.push(c);
                    }
                    return d;
                };
                b.getTech = function a(c) {
                    if (!c) {
                        return;
                    }
                    if (b.techs_ && b.techs_[c]) {
                        return b.techs_[c];
                    }
                    c = bL(c);
                    if (e() && e().videojs && e().videojs[c]) {
                        V.warn("The " + c + " tech was added to the videojs object when it should be registered using videojs.registerTech(name, tech)");
                        return e().videojs[c];
                    }
                };
                return b;
            })(bS);
            cB.names.forEach(function(a) {
                var b = cB[a];
                cD.prototype[b.getterName] = function() {
                    this[b.privateName] = this[b.privateName] || new b.ListClass();
                    return this[b.privateName];
                };
            });
            cD.prototype.featuresVolumeControl = true;
            cD.prototype.featuresMuteControl = true;
            cD.prototype.featuresFullscreenResize = false;
            cD.prototype.featuresPlaybackRate = false;
            cD.prototype.featuresProgressEvents = false;
            cD.prototype.featuresSourceset = false;
            cD.prototype.featuresTimeupdateEvents = false;
            cD.prototype.featuresNativeTextTracks = false;
            cD.withSourceHandlers = function(a) {
                a.registerSourceHandler = function(b, c) {
                    var d = a.sourceHandlers;
                    if (!d) {
                        d = a.sourceHandlers = [];
                    }
                    if (c === undefined) {
                        c = d.length;
                    }
                    d.splice(c, 0, b);
                };
                a.canPlayType = function(b) {
                    var c = a.sourceHandlers || [];
                    var d;
                    for(var e = 0; e < c.length; e++){
                        d = c[e].canPlayType(b);
                        if (d) {
                            return d;
                        }
                    }
                    return "";
                };
                a.selectSourceHandler = function(b, c) {
                    var d = a.sourceHandlers || [];
                    var e;
                    for(var f = 0; f < d.length; f++){
                        e = d[f].canHandleSource(b, c);
                        if (e) {
                            return d[f];
                        }
                    }
                    return null;
                };
                a.canPlaySource = function(b, c) {
                    var d = a.selectSourceHandler(b, c);
                    if (d) {
                        return d.canHandleSource(b, c);
                    }
                    return "";
                };
                var b = [
                    "seekable",
                    "seeking",
                    "duration"
                ];
                b.forEach(function(a) {
                    var b = this[a];
                    if (typeof b !== "function") {
                        return;
                    }
                    this[a] = function() {
                        if (this.sourceHandler_ && this.sourceHandler_[a]) {
                            return this.sourceHandler_[a].apply(this.sourceHandler_, arguments);
                        }
                        return b.apply(this, arguments);
                    };
                }, a.prototype);
                a.prototype.setSource = function(b) {
                    var c = a.selectSourceHandler(b, this.options_);
                    if (!c) {
                        if (a.nativeSourceHandler) {
                            c = a.nativeSourceHandler;
                        } else {
                            V.error("No source handler found for the current source.");
                        }
                    }
                    this.disposeSourceHandler();
                    this.off("dispose", this.disposeSourceHandler_);
                    if (c !== a.nativeSourceHandler) {
                        this.currentSource_ = b;
                    }
                    this.sourceHandler_ = c.handleSource(b, this, this.options_);
                    this.one("dispose", this.disposeSourceHandler_);
                };
                a.prototype.disposeSourceHandler = function() {
                    if (this.currentSource_) {
                        this.clearTracks([
                            "audio",
                            "video"
                        ]);
                        this.currentSource_ = null;
                    }
                    this.cleanupAutoTextTracks();
                    if (this.sourceHandler_) {
                        if (this.sourceHandler_.dispose) {
                            this.sourceHandler_.dispose();
                        }
                        this.sourceHandler_ = null;
                    }
                };
            };
            bS.registerComponent("Tech", cD);
            cD.registerTech("Tech", cD);
            cD.defaultTechOrder_ = [];
            var cE = {};
            var cF = {};
            var cG = {};
            function cH(a, b) {
                cE[a] = cE[a] || [];
                cE[a].push(b);
            }
            function cI(a, b, c) {
                a.setTimeout(function() {
                    return cU(b, cE[b.type], c, a);
                }, 1);
            }
            function cJ(a, b) {
                a.forEach(function(a) {
                    return a.setTech && a.setTech(b);
                });
            }
            function cK(a, b, c) {
                return a.reduceRight(cQ(c), b[c]());
            }
            function cL(a, b, c, d) {
                return b[c](a.reduce(cQ(c), d));
            }
            function cM(a, b, c, d) {
                if (d === void 0) {
                    d = null;
                }
                var e = "call" + bL(c);
                var f = a.reduce(cQ(e), d);
                var g = f === cG;
                var h = g ? null : b[c](f);
                cR(a, c, h, g);
                return h;
            }
            var cN = {
                buffered: 1,
                currentTime: 1,
                duration: 1,
                muted: 1,
                played: 1,
                paused: 1,
                seekable: 1,
                volume: 1,
                ended: 1
            };
            var cO = {
                setCurrentTime: 1,
                setMuted: 1,
                setVolume: 1
            };
            var cP = {
                play: 1,
                pause: 1
            };
            function cQ(a) {
                return function(b, c) {
                    if (b === cG) {
                        return cG;
                    }
                    if (c[a]) {
                        return c[a](b);
                    }
                    return b;
                };
            }
            function cR(a, b, c, d) {
                for(var e = a.length - 1; e >= 0; e--){
                    var f = a[e];
                    if (f[b]) {
                        f[b](d, c);
                    }
                }
            }
            function cS(a) {
                cF[a.id()] = null;
            }
            function cT(a, b) {
                var c = cF[a.id()];
                var d = null;
                if (c === undefined || c === null) {
                    d = b(a);
                    cF[a.id()] = [
                        [
                            b,
                            d
                        ]
                    ];
                    return d;
                }
                for(var e = 0; e < c.length; e++){
                    var f = c[e], g = f[0], h = f[1];
                    if (g !== b) {
                        continue;
                    }
                    d = h;
                }
                if (d === null) {
                    d = b(a);
                    c.push([
                        b,
                        d
                    ]);
                }
                return d;
            }
            function cU(a, b, c, d, e, f) {
                if (a === void 0) {
                    a = {};
                }
                if (b === void 0) {
                    b = [];
                }
                if (e === void 0) {
                    e = [];
                }
                if (f === void 0) {
                    f = false;
                }
                var g = b, h = g[0], i = g.slice(1);
                if (typeof h === "string") {
                    cU(a, cE[h], c, d, e, f);
                } else if (h) {
                    var j = cT(d, h);
                    if (!j.setSource) {
                        e.push(j);
                        return cU(a, i, c, d, e, f);
                    }
                    j.setSource(_({}, a), function(b, g) {
                        if (b) {
                            return cU(a, i, c, d, e, f);
                        }
                        e.push(j);
                        cU(g, a.type === g.type ? i : cE[g.type], c, d, e, f);
                    });
                } else if (i.length) {
                    cU(a, i, c, d, e, f);
                } else if (f) {
                    c(a, e);
                } else {
                    cU(a, cE["*"], c, d, e, true);
                }
            }
            var cV = {
                opus: "video/ogg",
                ogv: "video/ogg",
                mp4: "video/mp4",
                mov: "video/mp4",
                m4v: "video/mp4",
                mkv: "video/x-matroska",
                m4a: "audio/mp4",
                mp3: "audio/mpeg",
                aac: "audio/aac",
                caf: "audio/x-caf",
                flac: "audio/flac",
                oga: "audio/ogg",
                wav: "audio/wav",
                m3u8: "application/x-mpegURL",
                jpg: "image/jpeg",
                jpeg: "image/jpeg",
                gif: "image/gif",
                png: "image/png",
                svg: "image/svg+xml",
                webp: "image/webp"
            };
            var cW = function a(b) {
                if (b === void 0) {
                    b = "";
                }
                var c = cm(b);
                var d = cV[c.toLowerCase()];
                return d || "";
            };
            var cX = function a(b, c) {
                if (!c) {
                    return "";
                }
                if (b.cache_.source.src === c && b.cache_.source.type) {
                    return b.cache_.source.type;
                }
                var d = b.cache_.sources.filter(function(a) {
                    return a.src === c;
                });
                if (d.length) {
                    return d[0].type;
                }
                var e = b.$$("source");
                for(var f = 0; f < e.length; f++){
                    var g = e[f];
                    if (g.type && g.src && g.src === c) {
                        return g.type;
                    }
                }
                return cW(c);
            };
            var cY = function a(b) {
                if (Array.isArray(b)) {
                    var c = [];
                    b.forEach(function(b) {
                        b = a(b);
                        if (Array.isArray(b)) {
                            c = c.concat(b);
                        } else if (aa(b)) {
                            c.push(b);
                        }
                    });
                    b = c;
                } else if (typeof b === "string" && b.trim()) {
                    b = [
                        cZ({
                            src: b
                        }), 
                    ];
                } else if (aa(b) && typeof b.src === "string" && b.src && b.src.trim()) {
                    b = [
                        cZ(b)
                    ];
                } else {
                    b = [];
                }
                return b;
            };
            function cZ(a) {
                if (!a.type) {
                    var b = cW(a.src);
                    if (b) {
                        a.type = b;
                    }
                }
                return a;
            }
            var c$ = (function(a) {
                (0, j.Z)(b, a);
                function b(b, c, d) {
                    var e;
                    var f = bN({
                        createEl: false
                    }, c);
                    e = a.call(this, b, f, d) || this;
                    if (!c.playerOptions.sources || c.playerOptions.sources.length === 0) {
                        for(var g = 0, h = c.playerOptions.techOrder; g < h.length; g++){
                            var i = bL(h[g]);
                            var j = cD.getTech(i);
                            if (!i) {
                                j = bS.getComponent(i);
                            }
                            if (j && j.isSupported()) {
                                b.loadTech_(i);
                                break;
                            }
                        }
                    } else {
                        b.src(c.playerOptions.sources);
                    }
                    return e;
                }
                return b;
            })(bS);
            bS.registerComponent("MediaLoader", c$);
            var c_ = (function(a) {
                (0, j.Z)(b, a);
                function b(b, c) {
                    var d;
                    d = a.call(this, b, c) || this;
                    d.handleMouseOver_ = function(a) {
                        return d.handleMouseOver(a);
                    };
                    d.handleMouseOut_ = function(a) {
                        return d.handleMouseOut(a);
                    };
                    d.handleClick_ = function(a) {
                        return d.handleClick(a);
                    };
                    d.handleKeyDown_ = function(a) {
                        return d.handleKeyDown(a);
                    };
                    d.emitTapEvents();
                    d.enable();
                    return d;
                }
                var c = b.prototype;
                c.createEl = function a(b, c, d) {
                    if (b === void 0) {
                        b = "div";
                    }
                    if (c === void 0) {
                        c = {};
                    }
                    if (d === void 0) {
                        d = {};
                    }
                    c = _({
                        className: this.buildCSSClass(),
                        tabIndex: 0
                    }, c);
                    if (b === "button") {
                        V.error("Creating a ClickableComponent with an HTML element of " + b + " is not supported; use a Button instead.");
                    }
                    d = _({
                        role: "button"
                    }, d);
                    this.tabIndex_ = c.tabIndex;
                    var e = aF(b, c, d);
                    e.appendChild(aF("span", {
                        className: "vjs-icon-placeholder"
                    }, {
                        "aria-hidden": true
                    }));
                    this.createControlTextEl(e);
                    return e;
                };
                c.dispose = function b() {
                    this.controlTextEl_ = null;
                    a.prototype.dispose.call(this);
                };
                c.createControlTextEl = function a(b) {
                    this.controlTextEl_ = aF("span", {
                        className: "vjs-control-text"
                    }, {
                        "aria-live": "polite"
                    });
                    if (b) {
                        b.appendChild(this.controlTextEl_);
                    }
                    this.controlText(this.controlText_, b);
                    return this.controlTextEl_;
                };
                c.controlText = function a(b, c) {
                    if (c === void 0) {
                        c = this.el();
                    }
                    if (b === undefined) {
                        return this.controlText_ || "Need Text";
                    }
                    var d = this.localize(b);
                    this.controlText_ = b;
                    aG(this.controlTextEl_, d);
                    if (!this.nonIconControl && !this.player_.options_.noUITitleAttributes) {
                        c.setAttribute("title", d);
                    }
                };
                c.buildCSSClass = function b() {
                    return ("vjs-control vjs-button " + a.prototype.buildCSSClass.call(this));
                };
                c.enable = function a() {
                    if (!this.enabled_) {
                        this.enabled_ = true;
                        this.removeClass("vjs-disabled");
                        this.el_.setAttribute("aria-disabled", "false");
                        if (typeof this.tabIndex_ !== "undefined") {
                            this.el_.setAttribute("tabIndex", this.tabIndex_);
                        }
                        this.on([
                            "tap",
                            "click"
                        ], this.handleClick_);
                        this.on("keydown", this.handleKeyDown_);
                    }
                };
                c.disable = function a() {
                    this.enabled_ = false;
                    this.addClass("vjs-disabled");
                    this.el_.setAttribute("aria-disabled", "true");
                    if (typeof this.tabIndex_ !== "undefined") {
                        this.el_.removeAttribute("tabIndex");
                    }
                    this.off("mouseover", this.handleMouseOver_);
                    this.off("mouseout", this.handleMouseOut_);
                    this.off([
                        "tap",
                        "click"
                    ], this.handleClick_);
                    this.off("keydown", this.handleKeyDown_);
                };
                c.handleLanguagechange = function a() {
                    this.controlText(this.controlText_);
                };
                c.handleClick = function a(b) {
                    if (this.options_.clickHandler) {
                        this.options_.clickHandler.call(this, arguments);
                    }
                };
                c.handleKeyDown = function b(c) {
                    if (n().isEventKey(c, "Space") || n().isEventKey(c, "Enter")) {
                        c.preventDefault();
                        c.stopPropagation();
                        this.trigger("click");
                    } else {
                        a.prototype.handleKeyDown.call(this, c);
                    }
                };
                return b;
            })(bS);
            bS.registerComponent("ClickableComponent", c_);
            var c0 = (function(a) {
                (0, j.Z)(b, a);
                function b(b, c) {
                    var d;
                    d = a.call(this, b, c) || this;
                    d.update();
                    d.update_ = function(a) {
                        return d.update(a);
                    };
                    b.on("posterchange", d.update_);
                    return d;
                }
                var c = b.prototype;
                c.dispose = function b() {
                    this.player().off("posterchange", this.update_);
                    a.prototype.dispose.call(this);
                };
                c.createEl = function a() {
                    var b = aF("div", {
                        className: "vjs-poster",
                        tabIndex: -1
                    });
                    return b;
                };
                c.update = function a(b) {
                    var c = this.player().poster();
                    this.setSrc(c);
                    if (c) {
                        this.show();
                    } else {
                        this.hide();
                    }
                };
                c.setSrc = function a(b) {
                    var c = "";
                    if (b) {
                        c = 'url("' + b + '")';
                    }
                    this.el_.style.backgroundImage = c;
                };
                c.handleClick = function a(b) {
                    if (!this.player_.controls()) {
                        return;
                    }
                    var c = this.player_.usingPlugin("eme") && this.player_.eme.sessions && this.player_.eme.sessions.length > 0;
                    if (this.player_.tech(true) && !((ap || am) && c)) {
                        this.player_.tech(true).focus();
                    }
                    if (this.player_.paused()) {
                        b_(this.player_.play());
                    } else {
                        this.player_.pause();
                    }
                };
                return b;
            })(c_);
            bS.registerComponent("PosterImage", c0);
            var c1 = "#222";
            var c2 = "#ccc";
            var c3 = {
                monospace: "monospace",
                sansSerif: "sans-serif",
                serif: "serif",
                monospaceSansSerif: '"Andale Mono", "Lucida Console", monospace',
                monospaceSerif: '"Courier New", monospace',
                proportionalSansSerif: "sans-serif",
                proportionalSerif: "serif",
                casual: '"Comic Sans MS", Impact, fantasy',
                script: '"Monotype Corsiva", cursive',
                smallcaps: '"Andale Mono", "Lucida Console", monospace, sans-serif'
            };
            function c4(a, b) {
                var c;
                if (a.length === 4) {
                    c = a[1] + a[1] + a[2] + a[2] + a[3] + a[3];
                } else if (a.length === 7) {
                    c = a.slice(1);
                } else {
                    throw new Error("Invalid color code provided, " + a + "; must be formatted as e.g. #f0e or #f604e2.");
                }
                return ("rgba(" + parseInt(c.slice(0, 2), 16) + "," + parseInt(c.slice(2, 4), 16) + "," + parseInt(c.slice(4, 6), 16) + "," + b + ")");
            }
            function c5(a, b, c) {
                try {
                    a.style[b] = c;
                } catch (d) {
                    return;
                }
            }
            var c6 = (function(a) {
                (0, j.Z)(b, a);
                function b(b, c, d) {
                    var f;
                    f = a.call(this, b, c, d) || this;
                    var g = function a(b) {
                        return f.updateDisplay(b);
                    };
                    b.on("loadstart", function(a) {
                        return f.toggleDisplay(a);
                    });
                    b.on("texttrackchange", g);
                    b.on("loadedmetadata", function(a) {
                        return f.preselectTrack(a);
                    });
                    b.ready(bs((0, i.Z)(f), function() {
                        if (b.tech_ && b.tech_.featuresNativeTextTracks) {
                            this.hide();
                            return;
                        }
                        b.on("fullscreenchange", g);
                        b.on("playerresize", g);
                        e().addEventListener("orientationchange", g);
                        b.on("dispose", function() {
                            return e().removeEventListener("orientationchange", g);
                        });
                        var a = this.options_.playerOptions.tracks || [];
                        for(var c = 0; c < a.length; c++){
                            this.player_.addRemoteTextTrack(a[c], true);
                        }
                        this.preselectTrack();
                    }));
                    return f;
                }
                var c = b.prototype;
                c.preselectTrack = function a() {
                    var b = {
                        captions: 1,
                        subtitles: 1
                    };
                    var c = this.player_.textTracks();
                    var d = this.player_.cache_.selectedLanguage;
                    var e;
                    var f;
                    var g;
                    for(var h = 0; h < c.length; h++){
                        var i = c[h];
                        if (d && d.enabled && d.language && d.language === i.language && i.kind in b) {
                            if (i.kind === d.kind) {
                                g = i;
                            } else if (!g) {
                                g = i;
                            }
                        } else if (d && !d.enabled) {
                            g = null;
                            e = null;
                            f = null;
                        } else if (i["default"]) {
                            if (i.kind === "descriptions" && !e) {
                                e = i;
                            } else if (i.kind in b && !f) {
                                f = i;
                            }
                        }
                    }
                    if (g) {
                        g.mode = "showing";
                    } else if (f) {
                        f.mode = "showing";
                    } else if (e) {
                        e.mode = "showing";
                    }
                };
                c.toggleDisplay = function a() {
                    if (this.player_.tech_ && this.player_.tech_.featuresNativeTextTracks) {
                        this.hide();
                    } else {
                        this.show();
                    }
                };
                c.createEl = function b() {
                    return a.prototype.createEl.call(this, "div", {
                        className: "vjs-text-track-display"
                    }, {
                        translate: "yes",
                        "aria-live": "off",
                        "aria-atomic": "true"
                    });
                };
                c.clearDisplay = function a() {
                    if (typeof e().WebVTT === "function") {
                        e().WebVTT.processCues(e(), [], this.el_);
                    }
                };
                c.updateDisplay = function a() {
                    var b = this.player_.textTracks();
                    var c = this.options_.allowMultipleShowingTracks;
                    this.clearDisplay();
                    if (c) {
                        var d = [];
                        for(var e = 0; e < b.length; ++e){
                            var f = b[e];
                            if (f.mode !== "showing") {
                                continue;
                            }
                            d.push(f);
                        }
                        this.updateForTrack(d);
                        return;
                    }
                    var g = null;
                    var h = null;
                    var i = b.length;
                    while(i--){
                        var j = b[i];
                        if (j.mode === "showing") {
                            if (j.kind === "descriptions") {
                                g = j;
                            } else {
                                h = j;
                            }
                        }
                    }
                    if (h) {
                        if (this.getAttribute("aria-live") !== "off") {
                            this.setAttribute("aria-live", "off");
                        }
                        this.updateForTrack(h);
                    } else if (g) {
                        if (this.getAttribute("aria-live") !== "assertive") {
                            this.setAttribute("aria-live", "assertive");
                        }
                        this.updateForTrack(g);
                    }
                };
                c.updateDisplayState = function a(b) {
                    var c = this.player_.textTrackSettings.getValues();
                    var d = b.activeCues;
                    var f = d.length;
                    while(f--){
                        var g = d[f];
                        if (!g) {
                            continue;
                        }
                        var h = g.displayState;
                        if (c.color) {
                            h.firstChild.style.color = c.color;
                        }
                        if (c.textOpacity) {
                            c5(h.firstChild, "color", c4(c.color || "#fff", c.textOpacity));
                        }
                        if (c.backgroundColor) {
                            h.firstChild.style.backgroundColor = c.backgroundColor;
                        }
                        if (c.backgroundOpacity) {
                            c5(h.firstChild, "backgroundColor", c4(c.backgroundColor || "#000", c.backgroundOpacity));
                        }
                        if (c.windowColor) {
                            if (c.windowOpacity) {
                                c5(h, "backgroundColor", c4(c.windowColor, c.windowOpacity));
                            } else {
                                h.style.backgroundColor = c.windowColor;
                            }
                        }
                        if (c.edgeStyle) {
                            if (c.edgeStyle === "dropshadow") {
                                h.firstChild.style.textShadow = "2px 2px 3px " + c1 + ", 2px 2px 4px " + c1 + ", 2px 2px 5px " + c1;
                            } else if (c.edgeStyle === "raised") {
                                h.firstChild.style.textShadow = "1px 1px " + c1 + ", 2px 2px " + c1 + ", 3px 3px " + c1;
                            } else if (c.edgeStyle === "depressed") {
                                h.firstChild.style.textShadow = "1px 1px " + c2 + ", 0 1px " + c2 + ", -1px -1px " + c1 + ", 0 -1px " + c1;
                            } else if (c.edgeStyle === "uniform") {
                                h.firstChild.style.textShadow = "0 0 4px " + c1 + ", 0 0 4px " + c1 + ", 0 0 4px " + c1 + ", 0 0 4px " + c1;
                            }
                        }
                        if (c.fontPercent && c.fontPercent !== 1) {
                            var i = e().parseFloat(h.style.fontSize);
                            h.style.fontSize = i * c.fontPercent + "px";
                            h.style.height = "auto";
                            h.style.top = "auto";
                        }
                        if (c.fontFamily && c.fontFamily !== "default") {
                            if (c.fontFamily === "small-caps") {
                                h.firstChild.style.fontVariant = "small-caps";
                            } else {
                                h.firstChild.style.fontFamily = c3[c.fontFamily];
                            }
                        }
                    }
                };
                c.updateForTrack = function a(b) {
                    if (!Array.isArray(b)) {
                        b = [
                            b
                        ];
                    }
                    if (typeof e().WebVTT !== "function" || b.every(function(a) {
                        return !a.activeCues;
                    })) {
                        return;
                    }
                    var c = [];
                    for(var d = 0; d < b.length; ++d){
                        var f = b[d];
                        for(var g = 0; g < f.activeCues.length; ++g){
                            c.push(f.activeCues[g]);
                        }
                    }
                    e().WebVTT.processCues(e(), c, this.el_);
                    for(var h = 0; h < b.length; ++h){
                        var i = b[h];
                        for(var j = 0; j < i.activeCues.length; ++j){
                            var k = i.activeCues[j].displayState;
                            aJ(k, "vjs-text-track-cue");
                            aJ(k, "vjs-text-track-cue-" + (i.language ? i.language : h));
                            if (i.language) {
                                aP(k, "lang", i.language);
                            }
                        }
                        if (this.player_.textTrackSettings) {
                            this.updateDisplayState(i);
                        }
                    }
                };
                return b;
            })(bS);
            bS.registerComponent("TextTrackDisplay", c6);
            var c7 = (function(a) {
                (0, j.Z)(b, a);
                function b() {
                    return a.apply(this, arguments) || this;
                }
                var c = b.prototype;
                c.createEl = function b() {
                    var c = this.player_.isAudio();
                    var d = this.localize(c ? "Audio Player" : "Video Player");
                    var e = aF("span", {
                        className: "vjs-control-text",
                        textContent: this.localize("{1} is loading.", [
                            d, 
                        ])
                    });
                    var f = a.prototype.createEl.call(this, "div", {
                        className: "vjs-loading-spinner",
                        dir: "ltr"
                    });
                    f.appendChild(e);
                    return f;
                };
                return b;
            })(bS);
            bS.registerComponent("LoadingSpinner", c7);
            var c8 = (function(a) {
                (0, j.Z)(b, a);
                function b() {
                    return a.apply(this, arguments) || this;
                }
                var c = b.prototype;
                c.createEl = function a(b, c, d) {
                    if (c === void 0) {
                        c = {};
                    }
                    if (d === void 0) {
                        d = {};
                    }
                    b = "button";
                    c = _({
                        className: this.buildCSSClass()
                    }, c);
                    d = _({
                        type: "button"
                    }, d);
                    var e = aF(b, c, d);
                    e.appendChild(aF("span", {
                        className: "vjs-icon-placeholder"
                    }, {
                        "aria-hidden": true
                    }));
                    this.createControlTextEl(e);
                    return e;
                };
                c.addChild = function a(b, c) {
                    if (c === void 0) {
                        c = {};
                    }
                    var d = this.constructor.name;
                    V.warn("Adding an actionable (user controllable) child to a Button (" + d + ") is not supported; use a ClickableComponent instead.");
                    return bS.prototype.addChild.call(this, b, c);
                };
                c.enable = function b() {
                    a.prototype.enable.call(this);
                    this.el_.removeAttribute("disabled");
                };
                c.disable = function b() {
                    a.prototype.disable.call(this);
                    this.el_.setAttribute("disabled", "disabled");
                };
                c.handleKeyDown = function b(c) {
                    if (n().isEventKey(c, "Space") || n().isEventKey(c, "Enter")) {
                        c.stopPropagation();
                        return;
                    }
                    a.prototype.handleKeyDown.call(this, c);
                };
                return b;
            })(c_);
            bS.registerComponent("Button", c8);
            var c9 = (function(a) {
                (0, j.Z)(b, a);
                function b(b, c) {
                    var d;
                    d = a.call(this, b, c) || this;
                    d.mouseused_ = false;
                    d.on("mousedown", function(a) {
                        return d.handleMouseDown(a);
                    });
                    return d;
                }
                var c = b.prototype;
                c.buildCSSClass = function a() {
                    return "vjs-big-play-button";
                };
                c.handleClick = function a(b) {
                    var c = this.player_.play();
                    if (this.mouseused_ && b.clientX && b.clientY) {
                        var d = this.player_.usingPlugin("eme") && this.player_.eme.sessions && this.player_.eme.sessions.length > 0;
                        b_(c);
                        if (this.player_.tech(true) && !((ap || am) && d)) {
                            this.player_.tech(true).focus();
                        }
                        return;
                    }
                    var e = this.player_.getChild("controlBar");
                    var f = e && e.getChild("playToggle");
                    if (!f) {
                        this.player_.tech(true).focus();
                        return;
                    }
                    var g = function a() {
                        return f.focus();
                    };
                    if (b$(c)) {
                        c.then(g, function() {});
                    } else {
                        this.setTimeout(g, 1);
                    }
                };
                c.handleKeyDown = function b(c) {
                    this.mouseused_ = false;
                    a.prototype.handleKeyDown.call(this, c);
                };
                c.handleMouseDown = function a(b) {
                    this.mouseused_ = true;
                };
                return b;
            })(c8);
            c9.prototype.controlText_ = "Play Video";
            bS.registerComponent("BigPlayButton", c9);
            var da = (function(a) {
                (0, j.Z)(b, a);
                function b(b, c) {
                    var d;
                    d = a.call(this, b, c) || this;
                    d.controlText((c && c.controlText) || d.localize("Close"));
                    return d;
                }
                var c = b.prototype;
                c.buildCSSClass = function b() {
                    return ("vjs-close-button " + a.prototype.buildCSSClass.call(this));
                };
                c.handleClick = function a(b) {
                    this.trigger({
                        type: "close",
                        bubbles: false
                    });
                };
                c.handleKeyDown = function b(c) {
                    if (n().isEventKey(c, "Esc")) {
                        c.preventDefault();
                        c.stopPropagation();
                        this.trigger("click");
                    } else {
                        a.prototype.handleKeyDown.call(this, c);
                    }
                };
                return b;
            })(c8);
            bS.registerComponent("CloseButton", da);
            var db = (function(a) {
                (0, j.Z)(b, a);
                function b(b, c) {
                    var d;
                    if (c === void 0) {
                        c = {};
                    }
                    d = a.call(this, b, c) || this;
                    c.replay = c.replay === undefined || c.replay;
                    d.on(b, "play", function(a) {
                        return d.handlePlay(a);
                    });
                    d.on(b, "pause", function(a) {
                        return d.handlePause(a);
                    });
                    if (c.replay) {
                        d.on(b, "ended", function(a) {
                            return d.handleEnded(a);
                        });
                    }
                    return d;
                }
                var c = b.prototype;
                c.buildCSSClass = function b() {
                    return ("vjs-play-control " + a.prototype.buildCSSClass.call(this));
                };
                c.handleClick = function a(b) {
                    if (this.player_.paused()) {
                        b_(this.player_.play());
                    } else {
                        this.player_.pause();
                    }
                };
                c.handleSeeked = function a(b) {
                    this.removeClass("vjs-ended");
                    if (this.player_.paused()) {
                        this.handlePause(b);
                    } else {
                        this.handlePlay(b);
                    }
                };
                c.handlePlay = function a(b) {
                    this.removeClass("vjs-ended");
                    this.removeClass("vjs-paused");
                    this.addClass("vjs-playing");
                    this.controlText("Pause");
                };
                c.handlePause = function a(b) {
                    this.removeClass("vjs-playing");
                    this.addClass("vjs-paused");
                    this.controlText("Play");
                };
                c.handleEnded = function a(b) {
                    var c = this;
                    this.removeClass("vjs-playing");
                    this.addClass("vjs-ended");
                    this.controlText("Replay");
                    this.one(this.player_, "seeked", function(a) {
                        return c.handleSeeked(a);
                    });
                };
                return b;
            })(c8);
            db.prototype.controlText_ = "Play";
            bS.registerComponent("PlayToggle", db);
            var dc = function a(b, c) {
                b = b < 0 ? 0 : b;
                var d = Math.floor(b % 60);
                var e = Math.floor((b / 60) % 60);
                var f = Math.floor(b / 3600);
                var g = Math.floor((c / 60) % 60);
                var h = Math.floor(c / 3600);
                if (isNaN(b) || b === Infinity) {
                    f = e = d = "-";
                }
                f = f > 0 || h > 0 ? f + ":" : "";
                e = ((f || g >= 10) && e < 10 ? "0" + e : e) + ":";
                d = d < 10 ? "0" + d : d;
                return f + e + d;
            };
            var dd = dc;
            function de(a) {
                dd = a;
            }
            function df() {
                dd = dc;
            }
            function dg(a, b) {
                if (b === void 0) {
                    b = a;
                }
                return dd(a, b);
            }
            var dh = (function(a) {
                (0, j.Z)(b, a);
                function b(b, c) {
                    var d;
                    d = a.call(this, b, c) || this;
                    d.on(b, [
                        "timeupdate",
                        "ended"
                    ], function(a) {
                        return d.updateContent(a);
                    });
                    d.updateTextNode_();
                    return d;
                }
                var c = b.prototype;
                c.createEl = function b() {
                    var c = this.buildCSSClass();
                    var d = a.prototype.createEl.call(this, "div", {
                        className: c + " vjs-time-control vjs-control"
                    });
                    var e = aF("span", {
                        className: "vjs-control-text",
                        textContent: this.localize(this.labelText_) + "\xA0"
                    }, {
                        role: "presentation"
                    });
                    d.appendChild(e);
                    this.contentEl_ = aF("span", {
                        className: c + "-display"
                    }, {
                        "aria-live": "off",
                        role: "presentation"
                    });
                    d.appendChild(this.contentEl_);
                    return d;
                };
                c.dispose = function b() {
                    this.contentEl_ = null;
                    this.textNode_ = null;
                    a.prototype.dispose.call(this);
                };
                c.updateTextNode_ = function a(b) {
                    var c = this;
                    if (b === void 0) {
                        b = 0;
                    }
                    b = dg(b);
                    if (this.formattedTime_ === b) {
                        return;
                    }
                    this.formattedTime_ = b;
                    this.requestNamedAnimationFrame("TimeDisplay#updateTextNode_", function() {
                        if (!c.contentEl_) {
                            return;
                        }
                        var a = c.textNode_;
                        if (a && c.contentEl_.firstChild !== a) {
                            a = null;
                            V.warn("TimeDisplay#updateTextnode_: Prevented replacement of text node element since it was no longer a child of this node. Appending a new node instead.");
                        }
                        c.textNode_ = g().createTextNode(c.formattedTime_);
                        if (!c.textNode_) {
                            return;
                        }
                        if (a) {
                            c.contentEl_.replaceChild(c.textNode_, a);
                        } else {
                            c.contentEl_.appendChild(c.textNode_);
                        }
                    });
                };
                c.updateContent = function a(b) {};
                return b;
            })(bS);
            dh.prototype.labelText_ = "Time";
            dh.prototype.controlText_ = "Time";
            bS.registerComponent("TimeDisplay", dh);
            var di = (function(a) {
                (0, j.Z)(b, a);
                function b() {
                    return a.apply(this, arguments) || this;
                }
                var c = b.prototype;
                c.buildCSSClass = function a() {
                    return "vjs-current-time";
                };
                c.updateContent = function a(b) {
                    var c;
                    if (this.player_.ended()) {
                        c = this.player_.duration();
                    } else {
                        c = this.player_.scrubbing() ? this.player_.getCache().currentTime : this.player_.currentTime();
                    }
                    this.updateTextNode_(c);
                };
                return b;
            })(dh);
            di.prototype.labelText_ = "Current Time";
            di.prototype.controlText_ = "Current Time";
            bS.registerComponent("CurrentTimeDisplay", di);
            var dj = (function(a) {
                (0, j.Z)(b, a);
                function b(b, c) {
                    var d;
                    d = a.call(this, b, c) || this;
                    var e = function a(b) {
                        return d.updateContent(b);
                    };
                    d.on(b, "durationchange", e);
                    d.on(b, "loadstart", e);
                    d.on(b, "loadedmetadata", e);
                    return d;
                }
                var c = b.prototype;
                c.buildCSSClass = function a() {
                    return "vjs-duration";
                };
                c.updateContent = function a(b) {
                    var c = this.player_.duration();
                    this.updateTextNode_(c);
                };
                return b;
            })(dh);
            dj.prototype.labelText_ = "Duration";
            dj.prototype.controlText_ = "Duration";
            bS.registerComponent("DurationDisplay", dj);
            var dk = (function(a) {
                (0, j.Z)(b, a);
                function b() {
                    return a.apply(this, arguments) || this;
                }
                var c = b.prototype;
                c.createEl = function b() {
                    var c = a.prototype.createEl.call(this, "div", {
                        className: "vjs-time-control vjs-time-divider"
                    }, {
                        "aria-hidden": true
                    });
                    var d = a.prototype.createEl.call(this, "div");
                    var e = a.prototype.createEl.call(this, "span", {
                        textContent: "/"
                    });
                    d.appendChild(e);
                    c.appendChild(d);
                    return c;
                };
                return b;
            })(bS);
            bS.registerComponent("TimeDivider", dk);
            var dl = (function(a) {
                (0, j.Z)(b, a);
                function b(b, c) {
                    var d;
                    d = a.call(this, b, c) || this;
                    d.on(b, "durationchange", function(a) {
                        return d.updateContent(a);
                    });
                    return d;
                }
                var c = b.prototype;
                c.buildCSSClass = function a() {
                    return "vjs-remaining-time";
                };
                c.createEl = function b() {
                    var c = a.prototype.createEl.call(this);
                    c.insertBefore(aF("span", {}, {
                        "aria-hidden": true
                    }, "-"), this.contentEl_);
                    return c;
                };
                c.updateContent = function a(b) {
                    if (typeof this.player_.duration() !== "number") {
                        return;
                    }
                    var c;
                    if (this.player_.ended()) {
                        c = 0;
                    } else if (this.player_.remainingTimeDisplay) {
                        c = this.player_.remainingTimeDisplay();
                    } else {
                        c = this.player_.remainingTime();
                    }
                    this.updateTextNode_(c);
                };
                return b;
            })(dh);
            dl.prototype.labelText_ = "Remaining Time";
            dl.prototype.controlText_ = "Remaining Time";
            bS.registerComponent("RemainingTimeDisplay", dl);
            var dm = (function(a) {
                (0, j.Z)(b, a);
                function b(b, c) {
                    var d;
                    d = a.call(this, b, c) || this;
                    d.updateShowing();
                    d.on(d.player(), "durationchange", function(a) {
                        return d.updateShowing(a);
                    });
                    return d;
                }
                var c = b.prototype;
                c.createEl = function b() {
                    var c = a.prototype.createEl.call(this, "div", {
                        className: "vjs-live-control vjs-control"
                    });
                    this.contentEl_ = aF("div", {
                        className: "vjs-live-display"
                    }, {
                        "aria-live": "off"
                    });
                    this.contentEl_.appendChild(aF("span", {
                        className: "vjs-control-text",
                        textContent: this.localize("Stream Type") + "\xA0"
                    }));
                    this.contentEl_.appendChild(g().createTextNode(this.localize("LIVE")));
                    c.appendChild(this.contentEl_);
                    return c;
                };
                c.dispose = function b() {
                    this.contentEl_ = null;
                    a.prototype.dispose.call(this);
                };
                c.updateShowing = function a(b) {
                    if (this.player().duration() === Infinity) {
                        this.show();
                    } else {
                        this.hide();
                    }
                };
                return b;
            })(bS);
            bS.registerComponent("LiveDisplay", dm);
            var dn = (function(a) {
                (0, j.Z)(b, a);
                function b(b, c) {
                    var d;
                    d = a.call(this, b, c) || this;
                    d.updateLiveEdgeStatus();
                    if (d.player_.liveTracker) {
                        d.updateLiveEdgeStatusHandler_ = function(a) {
                            return d.updateLiveEdgeStatus(a);
                        };
                        d.on(d.player_.liveTracker, "liveedgechange", d.updateLiveEdgeStatusHandler_);
                    }
                    return d;
                }
                var c = b.prototype;
                c.createEl = function b() {
                    var c = a.prototype.createEl.call(this, "button", {
                        className: "vjs-seek-to-live-control vjs-control"
                    });
                    this.textEl_ = aF("span", {
                        className: "vjs-seek-to-live-text",
                        textContent: this.localize("LIVE")
                    }, {
                        "aria-hidden": "true"
                    });
                    c.appendChild(this.textEl_);
                    return c;
                };
                c.updateLiveEdgeStatus = function a() {
                    if (!this.player_.liveTracker || this.player_.liveTracker.atLiveEdge()) {
                        this.setAttribute("aria-disabled", true);
                        this.addClass("vjs-at-live-edge");
                        this.controlText("Seek to live, currently playing live");
                    } else {
                        this.setAttribute("aria-disabled", false);
                        this.removeClass("vjs-at-live-edge");
                        this.controlText("Seek to live, currently behind live");
                    }
                };
                c.handleClick = function a() {
                    this.player_.liveTracker.seekToLiveEdge();
                };
                c.dispose = function b() {
                    if (this.player_.liveTracker) {
                        this.off(this.player_.liveTracker, "liveedgechange", this.updateLiveEdgeStatusHandler_);
                    }
                    this.textEl_ = null;
                    a.prototype.dispose.call(this);
                };
                return b;
            })(c8);
            dn.prototype.controlText_ = "Seek to live, currently playing live";
            bS.registerComponent("SeekToLive", dn);
            var dp = function a(b, c, d) {
                b = Number(b);
                return Math.min(d, Math.max(c, isNaN(b) ? c : b));
            };
            var dq = (function(a) {
                (0, j.Z)(b, a);
                function b(b, c) {
                    var d;
                    d = a.call(this, b, c) || this;
                    d.handleMouseDown_ = function(a) {
                        return d.handleMouseDown(a);
                    };
                    d.handleMouseUp_ = function(a) {
                        return d.handleMouseUp(a);
                    };
                    d.handleKeyDown_ = function(a) {
                        return d.handleKeyDown(a);
                    };
                    d.handleClick_ = function(a) {
                        return d.handleClick(a);
                    };
                    d.handleMouseMove_ = function(a) {
                        return d.handleMouseMove(a);
                    };
                    d.update_ = function(a) {
                        return d.update(a);
                    };
                    d.bar = d.getChild(d.options_.barName);
                    d.vertical(!!d.options_.vertical);
                    d.enable();
                    return d;
                }
                var c = b.prototype;
                c.enabled = function a() {
                    return this.enabled_;
                };
                c.enable = function a() {
                    if (this.enabled()) {
                        return;
                    }
                    this.on("mousedown", this.handleMouseDown_);
                    this.on("touchstart", this.handleMouseDown_);
                    this.on("keydown", this.handleKeyDown_);
                    this.on("click", this.handleClick_);
                    this.on(this.player_, "controlsvisible", this.update);
                    if (this.playerEvent) {
                        this.on(this.player_, this.playerEvent, this.update);
                    }
                    this.removeClass("disabled");
                    this.setAttribute("tabindex", 0);
                    this.enabled_ = true;
                };
                c.disable = function a() {
                    if (!this.enabled()) {
                        return;
                    }
                    var b = this.bar.el_.ownerDocument;
                    this.off("mousedown", this.handleMouseDown_);
                    this.off("touchstart", this.handleMouseDown_);
                    this.off("keydown", this.handleKeyDown_);
                    this.off("click", this.handleClick_);
                    this.off(this.player_, "controlsvisible", this.update_);
                    this.off(b, "mousemove", this.handleMouseMove_);
                    this.off(b, "mouseup", this.handleMouseUp_);
                    this.off(b, "touchmove", this.handleMouseMove_);
                    this.off(b, "touchend", this.handleMouseUp_);
                    this.removeAttribute("tabindex");
                    this.addClass("disabled");
                    if (this.playerEvent) {
                        this.off(this.player_, this.playerEvent, this.update);
                    }
                    this.enabled_ = false;
                };
                c.createEl = function b(c, d, e) {
                    if (d === void 0) {
                        d = {};
                    }
                    if (e === void 0) {
                        e = {};
                    }
                    d.className = d.className + " vjs-slider";
                    d = _({
                        tabIndex: 0
                    }, d);
                    e = _({
                        role: "slider",
                        "aria-valuenow": 0,
                        "aria-valuemin": 0,
                        "aria-valuemax": 100,
                        tabIndex: 0
                    }, e);
                    return a.prototype.createEl.call(this, c, d, e);
                };
                c.handleMouseDown = function a(b) {
                    var c = this.bar.el_.ownerDocument;
                    if (b.type === "mousedown") {
                        b.preventDefault();
                    }
                    if (b.type === "touchstart" && !an) {
                        b.preventDefault();
                    }
                    aR();
                    this.addClass("vjs-sliding");
                    this.trigger("slideractive");
                    this.on(c, "mousemove", this.handleMouseMove_);
                    this.on(c, "mouseup", this.handleMouseUp_);
                    this.on(c, "touchmove", this.handleMouseMove_);
                    this.on(c, "touchend", this.handleMouseUp_);
                    this.handleMouseMove(b);
                };
                c.handleMouseMove = function a(b) {};
                c.handleMouseUp = function a() {
                    var b = this.bar.el_.ownerDocument;
                    aS();
                    this.removeClass("vjs-sliding");
                    this.trigger("sliderinactive");
                    this.off(b, "mousemove", this.handleMouseMove_);
                    this.off(b, "mouseup", this.handleMouseUp_);
                    this.off(b, "touchmove", this.handleMouseMove_);
                    this.off(b, "touchend", this.handleMouseUp_);
                    this.update();
                };
                c.update = function a() {
                    var b = this;
                    if (!this.el_ || !this.bar) {
                        return;
                    }
                    var c = this.getProgress();
                    if (c === this.progress_) {
                        return c;
                    }
                    this.progress_ = c;
                    this.requestNamedAnimationFrame("Slider#update", function() {
                        var a = b.vertical() ? "height" : "width";
                        b.bar.el().style[a] = (c * 100).toFixed(2) + "%";
                    });
                    return c;
                };
                c.getProgress = function a() {
                    return Number(dp(this.getPercent(), 0, 1).toFixed(4));
                };
                c.calculateDistance = function a(b) {
                    var c = aV(this.el_, b);
                    if (this.vertical()) {
                        return c.y;
                    }
                    return c.x;
                };
                c.handleKeyDown = function b(c) {
                    if (n().isEventKey(c, "Left") || n().isEventKey(c, "Down")) {
                        c.preventDefault();
                        c.stopPropagation();
                        this.stepBack();
                    } else if (n().isEventKey(c, "Right") || n().isEventKey(c, "Up")) {
                        c.preventDefault();
                        c.stopPropagation();
                        this.stepForward();
                    } else {
                        a.prototype.handleKeyDown.call(this, c);
                    }
                };
                c.handleClick = function a(b) {
                    b.stopPropagation();
                    b.preventDefault();
                };
                c.vertical = function a(b) {
                    if (b === undefined) {
                        return this.vertical_ || false;
                    }
                    this.vertical_ = !!b;
                    if (this.vertical_) {
                        this.addClass("vjs-slider-vertical");
                    } else {
                        this.addClass("vjs-slider-horizontal");
                    }
                };
                return b;
            })(bS);
            bS.registerComponent("Slider", dq);
            var dr = function a(b, c) {
                return dp((b / c) * 100, 0, 100).toFixed(2) + "%";
            };
            var ds = (function(a) {
                (0, j.Z)(b, a);
                function b(b, c) {
                    var d;
                    d = a.call(this, b, c) || this;
                    d.partEls_ = [];
                    d.on(b, "progress", function(a) {
                        return d.update(a);
                    });
                    return d;
                }
                var c = b.prototype;
                c.createEl = function b() {
                    var c = a.prototype.createEl.call(this, "div", {
                        className: "vjs-load-progress"
                    });
                    var d = aF("span", {
                        className: "vjs-control-text"
                    });
                    var e = aF("span", {
                        textContent: this.localize("Loaded")
                    });
                    var f = g().createTextNode(": ");
                    this.percentageEl_ = aF("span", {
                        className: "vjs-control-text-loaded-percentage",
                        textContent: "0%"
                    });
                    c.appendChild(d);
                    d.appendChild(e);
                    d.appendChild(f);
                    d.appendChild(this.percentageEl_);
                    return c;
                };
                c.dispose = function b() {
                    this.partEls_ = null;
                    this.percentageEl_ = null;
                    a.prototype.dispose.call(this);
                };
                c.update = function a(b) {
                    var c = this;
                    this.requestNamedAnimationFrame("LoadProgressBar#update", function() {
                        var a = c.player_.liveTracker;
                        var b = c.player_.buffered();
                        var d = a && a.isLive() ? a.seekableEnd() : c.player_.duration();
                        var e = c.player_.bufferedEnd();
                        var f = c.partEls_;
                        var g = dr(e, d);
                        if (c.percent_ !== g) {
                            c.el_.style.width = g;
                            aG(c.percentageEl_, g);
                            c.percent_ = g;
                        }
                        for(var h = 0; h < b.length; h++){
                            var i = b.start(h);
                            var j = b.end(h);
                            var k = f[h];
                            if (!k) {
                                k = c.el_.appendChild(aF());
                                f[h] = k;
                            }
                            if (k.dataset.start === i && k.dataset.end === j) {
                                continue;
                            }
                            k.dataset.start = i;
                            k.dataset.end = j;
                            k.style.left = dr(i, e);
                            k.style.width = dr(j - i, e);
                        }
                        for(var l = f.length; l > b.length; l--){
                            c.el_.removeChild(f[l - 1]);
                        }
                        f.length = b.length;
                    });
                };
                return b;
            })(bS);
            bS.registerComponent("LoadProgressBar", ds);
            var dt = (function(a) {
                (0, j.Z)(b, a);
                function b(b, c) {
                    var d;
                    d = a.call(this, b, c) || this;
                    d.update = bt(bs((0, i.Z)(d), d.update), br);
                    return d;
                }
                var c = b.prototype;
                c.createEl = function b() {
                    return a.prototype.createEl.call(this, "div", {
                        className: "vjs-time-tooltip"
                    }, {
                        "aria-hidden": "true"
                    });
                };
                c.update = function a(b, c, d) {
                    var e = aU(this.el_);
                    var f = aT(this.player_.el());
                    var g = b.width * c;
                    if (!f || !e) {
                        return;
                    }
                    var h = b.left - f.left + g;
                    var i = b.width - g + (f.right - b.right);
                    var j = e.width / 2;
                    if (h < j) {
                        j += j - h;
                    } else if (i < j) {
                        j = i;
                    }
                    if (j < 0) {
                        j = 0;
                    } else if (j > e.width) {
                        j = e.width;
                    }
                    j = Math.round(j);
                    this.el_.style.right = "-" + j + "px";
                    this.write(d);
                };
                c.write = function a(b) {
                    aG(this.el_, b);
                };
                c.updateTime = function a(b, c, d, e) {
                    var f = this;
                    this.requestNamedAnimationFrame("TimeTooltip#updateTime", function() {
                        var a;
                        var g = f.player_.duration();
                        if (f.player_.liveTracker && f.player_.liveTracker.isLive()) {
                            var h = f.player_.liveTracker.liveWindow();
                            var i = h - c * h;
                            a = (i < 1 ? "" : "-") + dg(i, h);
                        } else {
                            a = dg(d, g);
                        }
                        f.update(b, c, a);
                        if (e) {
                            e();
                        }
                    });
                };
                return b;
            })(bS);
            bS.registerComponent("TimeTooltip", dt);
            var du = (function(a) {
                (0, j.Z)(b, a);
                function b(b, c) {
                    var d;
                    d = a.call(this, b, c) || this;
                    d.update = bt(bs((0, i.Z)(d), d.update), br);
                    return d;
                }
                var c = b.prototype;
                c.createEl = function b() {
                    return a.prototype.createEl.call(this, "div", {
                        className: "vjs-play-progress vjs-slider-bar"
                    }, {
                        "aria-hidden": "true"
                    });
                };
                c.update = function a(b, c) {
                    var d = this.getChild("timeTooltip");
                    if (!d) {
                        return;
                    }
                    var e = this.player_.scrubbing() ? this.player_.getCache().currentTime : this.player_.currentTime();
                    d.updateTime(b, c, e);
                };
                return b;
            })(bS);
            du.prototype.options_ = {
                children: []
            };
            if (!av && !ai) {
                du.prototype.options_.children.push("timeTooltip");
            }
            bS.registerComponent("PlayProgressBar", du);
            var dv = (function(a) {
                (0, j.Z)(b, a);
                function b(b, c) {
                    var d;
                    d = a.call(this, b, c) || this;
                    d.update = bt(bs((0, i.Z)(d), d.update), br);
                    return d;
                }
                var c = b.prototype;
                c.createEl = function b() {
                    return a.prototype.createEl.call(this, "div", {
                        className: "vjs-mouse-display"
                    });
                };
                c.update = function a(b, c) {
                    var d = this;
                    var e = c * this.player_.duration();
                    this.getChild("timeTooltip").updateTime(b, c, e, function() {
                        d.el_.style.left = b.width * c + "px";
                    });
                };
                return b;
            })(bS);
            dv.prototype.options_ = {
                children: [
                    "timeTooltip"
                ]
            };
            bS.registerComponent("MouseTimeDisplay", dv);
            var dw = 5;
            var dx = 12;
            var dy = (function(a) {
                (0, j.Z)(b, a);
                function b(b, c) {
                    var d;
                    d = a.call(this, b, c) || this;
                    d.setEventHandlers_();
                    return d;
                }
                var c = b.prototype;
                c.setEventHandlers_ = function a() {
                    var b = this;
                    this.update_ = bs(this, this.update);
                    this.update = bt(this.update_, br);
                    this.on(this.player_, [
                        "ended",
                        "durationchange",
                        "timeupdate"
                    ], this.update);
                    if (this.player_.liveTracker) {
                        this.on(this.player_.liveTracker, "liveedgechange", this.update);
                    }
                    this.updateInterval = null;
                    this.enableIntervalHandler_ = function(a) {
                        return b.enableInterval_(a);
                    };
                    this.disableIntervalHandler_ = function(a) {
                        return b.disableInterval_(a);
                    };
                    this.on(this.player_, [
                        "playing"
                    ], this.enableIntervalHandler_);
                    this.on(this.player_, [
                        "ended",
                        "pause",
                        "waiting"
                    ], this.disableIntervalHandler_);
                    if ("hidden" in g() && "visibilityState" in g()) {
                        this.on(g(), "visibilitychange", this.toggleVisibility_);
                    }
                };
                c.toggleVisibility_ = function a(b) {
                    if (g().visibilityState === "hidden") {
                        this.cancelNamedAnimationFrame("SeekBar#update");
                        this.cancelNamedAnimationFrame("Slider#update");
                        this.disableInterval_(b);
                    } else {
                        if (!this.player_.ended() && !this.player_.paused()) {
                            this.enableInterval_();
                        }
                        this.update();
                    }
                };
                c.enableInterval_ = function a() {
                    if (this.updateInterval) {
                        return;
                    }
                    this.updateInterval = this.setInterval(this.update, br);
                };
                c.disableInterval_ = function a(b) {
                    if (this.player_.liveTracker && this.player_.liveTracker.isLive() && b && b.type !== "ended") {
                        return;
                    }
                    if (!this.updateInterval) {
                        return;
                    }
                    this.clearInterval(this.updateInterval);
                    this.updateInterval = null;
                };
                c.createEl = function b() {
                    return a.prototype.createEl.call(this, "div", {
                        className: "vjs-progress-holder"
                    }, {
                        "aria-label": this.localize("Progress Bar")
                    });
                };
                c.update = function b(c) {
                    var d = this;
                    if (g().visibilityState === "hidden") {
                        return;
                    }
                    var e = a.prototype.update.call(this);
                    this.requestNamedAnimationFrame("SeekBar#update", function() {
                        var a = d.player_.ended() ? d.player_.duration() : d.getCurrentTime_();
                        var b = d.player_.liveTracker;
                        var c = d.player_.duration();
                        if (b && b.isLive()) {
                            c = d.player_.liveTracker.liveCurrentTime();
                        }
                        if (d.percent_ !== e) {
                            d.el_.setAttribute("aria-valuenow", (e * 100).toFixed(2));
                            d.percent_ = e;
                        }
                        if (d.currentTime_ !== a || d.duration_ !== c) {
                            d.el_.setAttribute("aria-valuetext", d.localize("progress bar timing: currentTime={1} duration={2}", [
                                dg(a, c),
                                dg(c, c), 
                            ], "{1} of {2}"));
                            d.currentTime_ = a;
                            d.duration_ = c;
                        }
                        if (d.bar) {
                            d.bar.update(aT(d.el()), d.getProgress());
                        }
                    });
                    return e;
                };
                c.userSeek_ = function a(b) {
                    if (this.player_.liveTracker && this.player_.liveTracker.isLive()) {
                        this.player_.liveTracker.nextSeekedFromUser();
                    }
                    this.player_.currentTime(b);
                };
                c.getCurrentTime_ = function a() {
                    return this.player_.scrubbing() ? this.player_.getCache().currentTime : this.player_.currentTime();
                };
                c.getPercent = function a() {
                    var b = this.getCurrentTime_();
                    var c;
                    var d = this.player_.liveTracker;
                    if (d && d.isLive()) {
                        c = (b - d.seekableStart()) / d.liveWindow();
                        if (d.atLiveEdge()) {
                            c = 1;
                        }
                    } else {
                        c = b / this.player_.duration();
                    }
                    return c;
                };
                c.handleMouseDown = function b(c) {
                    if (!a_(c)) {
                        return;
                    }
                    c.stopPropagation();
                    this.player_.scrubbing(true);
                    this.videoWasPlaying = !this.player_.paused();
                    this.player_.pause();
                    a.prototype.handleMouseDown.call(this, c);
                };
                c.handleMouseMove = function a(b) {
                    if (!a_(b)) {
                        return;
                    }
                    var c;
                    var d = this.calculateDistance(b);
                    var e = this.player_.liveTracker;
                    if (!e || !e.isLive()) {
                        c = d * this.player_.duration();
                        if (c === this.player_.duration()) {
                            c = c - 0.1;
                        }
                    } else {
                        if (d >= 0.99) {
                            e.seekToLiveEdge();
                            return;
                        }
                        var f = e.seekableStart();
                        var g = e.liveCurrentTime();
                        c = f + d * e.liveWindow();
                        if (c >= g) {
                            c = g;
                        }
                        if (c <= f) {
                            c = f + 0.1;
                        }
                        if (c === Infinity) {
                            return;
                        }
                    }
                    this.userSeek_(c);
                };
                c.enable = function b() {
                    a.prototype.enable.call(this);
                    var c = this.getChild("mouseTimeDisplay");
                    if (!c) {
                        return;
                    }
                    c.show();
                };
                c.disable = function b() {
                    a.prototype.disable.call(this);
                    var c = this.getChild("mouseTimeDisplay");
                    if (!c) {
                        return;
                    }
                    c.hide();
                };
                c.handleMouseUp = function b(c) {
                    a.prototype.handleMouseUp.call(this, c);
                    if (c) {
                        c.stopPropagation();
                    }
                    this.player_.scrubbing(false);
                    this.player_.trigger({
                        type: "timeupdate",
                        target: this,
                        manuallyTriggered: true
                    });
                    if (this.videoWasPlaying) {
                        b_(this.player_.play());
                    } else {
                        this.update_();
                    }
                };
                c.stepForward = function a() {
                    this.userSeek_(this.player_.currentTime() + dw);
                };
                c.stepBack = function a() {
                    this.userSeek_(this.player_.currentTime() - dw);
                };
                c.handleAction = function a(b) {
                    if (this.player_.paused()) {
                        this.player_.play();
                    } else {
                        this.player_.pause();
                    }
                };
                c.handleKeyDown = function b(c) {
                    var d = this.player_.liveTracker;
                    if (n().isEventKey(c, "Space") || n().isEventKey(c, "Enter")) {
                        c.preventDefault();
                        c.stopPropagation();
                        this.handleAction(c);
                    } else if (n().isEventKey(c, "Home")) {
                        c.preventDefault();
                        c.stopPropagation();
                        this.userSeek_(0);
                    } else if (n().isEventKey(c, "End")) {
                        c.preventDefault();
                        c.stopPropagation();
                        if (d && d.isLive()) {
                            this.userSeek_(d.liveCurrentTime());
                        } else {
                            this.userSeek_(this.player_.duration());
                        }
                    } else if (/^[0-9]$/.test(n()(c))) {
                        c.preventDefault();
                        c.stopPropagation();
                        var e = ((n().codes[n()(c)] - n().codes[0]) * 10.0) / 100.0;
                        if (d && d.isLive()) {
                            this.userSeek_(d.seekableStart() + d.liveWindow() * e);
                        } else {
                            this.userSeek_(this.player_.duration() * e);
                        }
                    } else if (n().isEventKey(c, "PgDn")) {
                        c.preventDefault();
                        c.stopPropagation();
                        this.userSeek_(this.player_.currentTime() - dw * dx);
                    } else if (n().isEventKey(c, "PgUp")) {
                        c.preventDefault();
                        c.stopPropagation();
                        this.userSeek_(this.player_.currentTime() + dw * dx);
                    } else {
                        a.prototype.handleKeyDown.call(this, c);
                    }
                };
                c.dispose = function b() {
                    this.disableInterval_();
                    this.off(this.player_, [
                        "ended",
                        "durationchange",
                        "timeupdate"
                    ], this.update);
                    if (this.player_.liveTracker) {
                        this.off(this.player_.liveTracker, "liveedgechange", this.update);
                    }
                    this.off(this.player_, [
                        "playing"
                    ], this.enableIntervalHandler_);
                    this.off(this.player_, [
                        "ended",
                        "pause",
                        "waiting"
                    ], this.disableIntervalHandler_);
                    if ("hidden" in g() && "visibilityState" in g()) {
                        this.off(g(), "visibilitychange", this.toggleVisibility_);
                    }
                    a.prototype.dispose.call(this);
                };
                return b;
            })(dq);
            dy.prototype.options_ = {
                children: [
                    "loadProgressBar",
                    "playProgressBar"
                ],
                barName: "playProgressBar"
            };
            if (!av && !ai) {
                dy.prototype.options_.children.splice(1, 0, "mouseTimeDisplay");
            }
            bS.registerComponent("SeekBar", dy);
            var dz = (function(a) {
                (0, j.Z)(b, a);
                function b(b, c) {
                    var d;
                    d = a.call(this, b, c) || this;
                    d.handleMouseMove = bt(bs((0, i.Z)(d), d.handleMouseMove), br);
                    d.throttledHandleMouseSeek = bt(bs((0, i.Z)(d), d.handleMouseSeek), br);
                    d.handleMouseUpHandler_ = function(a) {
                        return d.handleMouseUp(a);
                    };
                    d.handleMouseDownHandler_ = function(a) {
                        return d.handleMouseDown(a);
                    };
                    d.enable();
                    return d;
                }
                var c = b.prototype;
                c.createEl = function b() {
                    return a.prototype.createEl.call(this, "div", {
                        className: "vjs-progress-control vjs-control"
                    });
                };
                c.handleMouseMove = function a(b) {
                    var c = this.getChild("seekBar");
                    if (!c) {
                        return;
                    }
                    var d = c.getChild("playProgressBar");
                    var e = c.getChild("mouseTimeDisplay");
                    if (!d && !e) {
                        return;
                    }
                    var f = c.el();
                    var g = aU(f);
                    var h = aV(f, b).x;
                    h = dp(h, 0, 1);
                    if (e) {
                        e.update(g, h);
                    }
                    if (d) {
                        d.update(g, c.getProgress());
                    }
                };
                c.handleMouseSeek = function a(b) {
                    var c = this.getChild("seekBar");
                    if (c) {
                        c.handleMouseMove(b);
                    }
                };
                c.enabled = function a() {
                    return this.enabled_;
                };
                c.disable = function a() {
                    this.children().forEach(function(a) {
                        return a.disable && a.disable();
                    });
                    if (!this.enabled()) {
                        return;
                    }
                    this.off([
                        "mousedown",
                        "touchstart"
                    ], this.handleMouseDownHandler_);
                    this.off(this.el_, "mousemove", this.handleMouseMove);
                    this.removeListenersAddedOnMousedownAndTouchstart();
                    this.addClass("disabled");
                    this.enabled_ = false;
                    if (this.player_.scrubbing()) {
                        var b = this.getChild("seekBar");
                        this.player_.scrubbing(false);
                        if (b.videoWasPlaying) {
                            b_(this.player_.play());
                        }
                    }
                };
                c.enable = function a() {
                    this.children().forEach(function(a) {
                        return a.enable && a.enable();
                    });
                    if (this.enabled()) {
                        return;
                    }
                    this.on([
                        "mousedown",
                        "touchstart"
                    ], this.handleMouseDownHandler_);
                    this.on(this.el_, "mousemove", this.handleMouseMove);
                    this.removeClass("disabled");
                    this.enabled_ = true;
                };
                c.removeListenersAddedOnMousedownAndTouchstart = function a() {
                    var b = this.el_.ownerDocument;
                    this.off(b, "mousemove", this.throttledHandleMouseSeek);
                    this.off(b, "touchmove", this.throttledHandleMouseSeek);
                    this.off(b, "mouseup", this.handleMouseUpHandler_);
                    this.off(b, "touchend", this.handleMouseUpHandler_);
                };
                c.handleMouseDown = function a(b) {
                    var c = this.el_.ownerDocument;
                    var d = this.getChild("seekBar");
                    if (d) {
                        d.handleMouseDown(b);
                    }
                    this.on(c, "mousemove", this.throttledHandleMouseSeek);
                    this.on(c, "touchmove", this.throttledHandleMouseSeek);
                    this.on(c, "mouseup", this.handleMouseUpHandler_);
                    this.on(c, "touchend", this.handleMouseUpHandler_);
                };
                c.handleMouseUp = function a(b) {
                    var c = this.getChild("seekBar");
                    if (c) {
                        c.handleMouseUp(b);
                    }
                    this.removeListenersAddedOnMousedownAndTouchstart();
                };
                return b;
            })(bS);
            dz.prototype.options_ = {
                children: [
                    "seekBar"
                ]
            };
            bS.registerComponent("ProgressControl", dz);
            var dA = (function(a) {
                (0, j.Z)(b, a);
                function b(b, c) {
                    var d;
                    d = a.call(this, b, c) || this;
                    d.on(b, [
                        "enterpictureinpicture",
                        "leavepictureinpicture"
                    ], function(a) {
                        return d.handlePictureInPictureChange(a);
                    });
                    d.on(b, [
                        "disablepictureinpicturechanged",
                        "loadedmetadata"
                    ], function(a) {
                        return d.handlePictureInPictureEnabledChange(a);
                    });
                    d.disable();
                    return d;
                }
                var c = b.prototype;
                c.buildCSSClass = function b() {
                    return ("vjs-picture-in-picture-control " + a.prototype.buildCSSClass.call(this));
                };
                c.handlePictureInPictureEnabledChange = function a() {
                    if (g().pictureInPictureEnabled && this.player_.disablePictureInPicture() === false) {
                        this.enable();
                    } else {
                        this.disable();
                    }
                };
                c.handlePictureInPictureChange = function a(b) {
                    if (this.player_.isInPictureInPicture()) {
                        this.controlText("Exit Picture-in-Picture");
                    } else {
                        this.controlText("Picture-in-Picture");
                    }
                    this.handlePictureInPictureEnabledChange();
                };
                c.handleClick = function a(b) {
                    if (!this.player_.isInPictureInPicture()) {
                        this.player_.requestPictureInPicture();
                    } else {
                        this.player_.exitPictureInPicture();
                    }
                };
                return b;
            })(c8);
            dA.prototype.controlText_ = "Picture-in-Picture";
            bS.registerComponent("PictureInPictureToggle", dA);
            var dB = (function(a) {
                (0, j.Z)(b, a);
                function b(b, c) {
                    var d;
                    d = a.call(this, b, c) || this;
                    d.on(b, "fullscreenchange", function(a) {
                        return d.handleFullscreenChange(a);
                    });
                    if (g()[b.fsApi_.fullscreenEnabled] === false) {
                        d.disable();
                    }
                    return d;
                }
                var c = b.prototype;
                c.buildCSSClass = function b() {
                    return ("vjs-fullscreen-control " + a.prototype.buildCSSClass.call(this));
                };
                c.handleFullscreenChange = function a(b) {
                    if (this.player_.isFullscreen()) {
                        this.controlText("Non-Fullscreen");
                    } else {
                        this.controlText("Fullscreen");
                    }
                };
                c.handleClick = function a(b) {
                    if (!this.player_.isFullscreen()) {
                        this.player_.requestFullscreen();
                    } else {
                        this.player_.exitFullscreen();
                    }
                };
                return b;
            })(c8);
            dB.prototype.controlText_ = "Fullscreen";
            bS.registerComponent("FullscreenToggle", dB);
            var dC = function a(b, c) {
                if (c.tech_ && !c.tech_.featuresVolumeControl) {
                    b.addClass("vjs-hidden");
                }
                b.on(c, "loadstart", function() {
                    if (!c.tech_.featuresVolumeControl) {
                        b.addClass("vjs-hidden");
                    } else {
                        b.removeClass("vjs-hidden");
                    }
                });
            };
            var dD = (function(a) {
                (0, j.Z)(b, a);
                function b() {
                    return a.apply(this, arguments) || this;
                }
                var c = b.prototype;
                c.createEl = function b() {
                    var c = a.prototype.createEl.call(this, "div", {
                        className: "vjs-volume-level"
                    });
                    c.appendChild(a.prototype.createEl.call(this, "span", {
                        className: "vjs-control-text"
                    }));
                    return c;
                };
                return b;
            })(bS);
            bS.registerComponent("VolumeLevel", dD);
            var dE = (function(a) {
                (0, j.Z)(b, a);
                function b(b, c) {
                    var d;
                    d = a.call(this, b, c) || this;
                    d.update = bt(bs((0, i.Z)(d), d.update), br);
                    return d;
                }
                var c = b.prototype;
                c.createEl = function b() {
                    return a.prototype.createEl.call(this, "div", {
                        className: "vjs-volume-tooltip"
                    }, {
                        "aria-hidden": "true"
                    });
                };
                c.update = function a(b, c, d, e) {
                    if (!d) {
                        var f = aT(this.el_);
                        var g = aT(this.player_.el());
                        var h = b.width * c;
                        if (!g || !f) {
                            return;
                        }
                        var i = b.left - g.left + h;
                        var j = b.width - h + (g.right - b.right);
                        var k = f.width / 2;
                        if (i < k) {
                            k += k - i;
                        } else if (j < k) {
                            k = j;
                        }
                        if (k < 0) {
                            k = 0;
                        } else if (k > f.width) {
                            k = f.width;
                        }
                        this.el_.style.right = "-" + k + "px";
                    }
                    this.write(e + "%");
                };
                c.write = function a(b) {
                    aG(this.el_, b);
                };
                c.updateVolume = function a(b, c, d, e, f) {
                    var g = this;
                    this.requestNamedAnimationFrame("VolumeLevelTooltip#updateVolume", function() {
                        g.update(b, c, d, e.toFixed(0));
                        if (f) {
                            f();
                        }
                    });
                };
                return b;
            })(bS);
            bS.registerComponent("VolumeLevelTooltip", dE);
            var dF = (function(a) {
                (0, j.Z)(b, a);
                function b(b, c) {
                    var d;
                    d = a.call(this, b, c) || this;
                    d.update = bt(bs((0, i.Z)(d), d.update), br);
                    return d;
                }
                var c = b.prototype;
                c.createEl = function b() {
                    return a.prototype.createEl.call(this, "div", {
                        className: "vjs-mouse-display"
                    });
                };
                c.update = function a(b, c, d) {
                    var e = this;
                    var f = 100 * c;
                    this.getChild("volumeLevelTooltip").updateVolume(b, c, d, f, function() {
                        if (d) {
                            e.el_.style.bottom = b.height * c + "px";
                        } else {
                            e.el_.style.left = b.width * c + "px";
                        }
                    });
                };
                return b;
            })(bS);
            dF.prototype.options_ = {
                children: [
                    "volumeLevelTooltip"
                ]
            };
            bS.registerComponent("MouseVolumeLevelDisplay", dF);
            var dG = (function(a) {
                (0, j.Z)(b, a);
                function b(b, c) {
                    var d;
                    d = a.call(this, b, c) || this;
                    d.on("slideractive", function(a) {
                        return d.updateLastVolume_(a);
                    });
                    d.on(b, "volumechange", function(a) {
                        return d.updateARIAAttributes(a);
                    });
                    b.ready(function() {
                        return d.updateARIAAttributes();
                    });
                    return d;
                }
                var c = b.prototype;
                c.createEl = function b() {
                    return a.prototype.createEl.call(this, "div", {
                        className: "vjs-volume-bar vjs-slider-bar"
                    }, {
                        "aria-label": this.localize("Volume Level"),
                        "aria-live": "polite"
                    });
                };
                c.handleMouseDown = function b(c) {
                    if (!a_(c)) {
                        return;
                    }
                    a.prototype.handleMouseDown.call(this, c);
                };
                c.handleMouseMove = function a(b) {
                    var c = this.getChild("mouseVolumeLevelDisplay");
                    if (c) {
                        var d = this.el();
                        var e = aT(d);
                        var f = this.vertical();
                        var g = aV(d, b);
                        g = f ? g.y : g.x;
                        g = dp(g, 0, 1);
                        c.update(e, g, f);
                    }
                    if (!a_(b)) {
                        return;
                    }
                    this.checkMuted();
                    this.player_.volume(this.calculateDistance(b));
                };
                c.checkMuted = function a() {
                    if (this.player_.muted()) {
                        this.player_.muted(false);
                    }
                };
                c.getPercent = function a() {
                    if (this.player_.muted()) {
                        return 0;
                    }
                    return this.player_.volume();
                };
                c.stepForward = function a() {
                    this.checkMuted();
                    this.player_.volume(this.player_.volume() + 0.1);
                };
                c.stepBack = function a() {
                    this.checkMuted();
                    this.player_.volume(this.player_.volume() - 0.1);
                };
                c.updateARIAAttributes = function a(b) {
                    var c = this.player_.muted() ? 0 : this.volumeAsPercentage_();
                    this.el_.setAttribute("aria-valuenow", c);
                    this.el_.setAttribute("aria-valuetext", c + "%");
                };
                c.volumeAsPercentage_ = function a() {
                    return Math.round(this.player_.volume() * 100);
                };
                c.updateLastVolume_ = function a() {
                    var b = this;
                    var c = this.player_.volume();
                    this.one("sliderinactive", function() {
                        if (b.player_.volume() === 0) {
                            b.player_.lastVolume_(c);
                        }
                    });
                };
                return b;
            })(dq);
            dG.prototype.options_ = {
                children: [
                    "volumeLevel"
                ],
                barName: "volumeLevel"
            };
            if (!av && !ai) {
                dG.prototype.options_.children.splice(0, 0, "mouseVolumeLevelDisplay");
            }
            dG.prototype.playerEvent = "volumechange";
            bS.registerComponent("VolumeBar", dG);
            var dH = (function(a) {
                (0, j.Z)(b, a);
                function b(b, c) {
                    var d;
                    if (c === void 0) {
                        c = {};
                    }
                    c.vertical = c.vertical || false;
                    if (typeof c.volumeBar === "undefined" || ab(c.volumeBar)) {
                        c.volumeBar = c.volumeBar || {};
                        c.volumeBar.vertical = c.vertical;
                    }
                    d = a.call(this, b, c) || this;
                    dC((0, i.Z)(d), b);
                    d.throttledHandleMouseMove = bt(bs((0, i.Z)(d), d.handleMouseMove), br);
                    d.handleMouseUpHandler_ = function(a) {
                        return d.handleMouseUp(a);
                    };
                    d.on("mousedown", function(a) {
                        return d.handleMouseDown(a);
                    });
                    d.on("touchstart", function(a) {
                        return d.handleMouseDown(a);
                    });
                    d.on("mousemove", function(a) {
                        return d.handleMouseMove(a);
                    });
                    d.on(d.volumeBar, [
                        "focus",
                        "slideractive"
                    ], function() {
                        d.volumeBar.addClass("vjs-slider-active");
                        d.addClass("vjs-slider-active");
                        d.trigger("slideractive");
                    });
                    d.on(d.volumeBar, [
                        "blur",
                        "sliderinactive"
                    ], function() {
                        d.volumeBar.removeClass("vjs-slider-active");
                        d.removeClass("vjs-slider-active");
                        d.trigger("sliderinactive");
                    });
                    return d;
                }
                var c = b.prototype;
                c.createEl = function b() {
                    var c = "vjs-volume-horizontal";
                    if (this.options_.vertical) {
                        c = "vjs-volume-vertical";
                    }
                    return a.prototype.createEl.call(this, "div", {
                        className: "vjs-volume-control vjs-control " + c
                    });
                };
                c.handleMouseDown = function a(b) {
                    var c = this.el_.ownerDocument;
                    this.on(c, "mousemove", this.throttledHandleMouseMove);
                    this.on(c, "touchmove", this.throttledHandleMouseMove);
                    this.on(c, "mouseup", this.handleMouseUpHandler_);
                    this.on(c, "touchend", this.handleMouseUpHandler_);
                };
                c.handleMouseUp = function a(b) {
                    var c = this.el_.ownerDocument;
                    this.off(c, "mousemove", this.throttledHandleMouseMove);
                    this.off(c, "touchmove", this.throttledHandleMouseMove);
                    this.off(c, "mouseup", this.handleMouseUpHandler_);
                    this.off(c, "touchend", this.handleMouseUpHandler_);
                };
                c.handleMouseMove = function a(b) {
                    this.volumeBar.handleMouseMove(b);
                };
                return b;
            })(bS);
            dH.prototype.options_ = {
                children: [
                    "volumeBar"
                ]
            };
            bS.registerComponent("VolumeControl", dH);
            var dI = function a(b, c) {
                if (c.tech_ && !c.tech_.featuresMuteControl) {
                    b.addClass("vjs-hidden");
                }
                b.on(c, "loadstart", function() {
                    if (!c.tech_.featuresMuteControl) {
                        b.addClass("vjs-hidden");
                    } else {
                        b.removeClass("vjs-hidden");
                    }
                });
            };
            var dJ = (function(a) {
                (0, j.Z)(b, a);
                function b(b, c) {
                    var d;
                    d = a.call(this, b, c) || this;
                    dI((0, i.Z)(d), b);
                    d.on(b, [
                        "loadstart",
                        "volumechange"
                    ], function(a) {
                        return d.update(a);
                    });
                    return d;
                }
                var c = b.prototype;
                c.buildCSSClass = function b() {
                    return ("vjs-mute-control " + a.prototype.buildCSSClass.call(this));
                };
                c.handleClick = function a(b) {
                    var c = this.player_.volume();
                    var d = this.player_.lastVolume_();
                    if (c === 0) {
                        var e = d < 0.1 ? 0.1 : d;
                        this.player_.volume(e);
                        this.player_.muted(false);
                    } else {
                        this.player_.muted(this.player_.muted() ? false : true);
                    }
                };
                c.update = function a(b) {
                    this.updateIcon_();
                    this.updateControlText_();
                };
                c.updateIcon_ = function a() {
                    var b = this.player_.volume();
                    var c = 3;
                    if (av && this.player_.tech_ && this.player_.tech_.el_) {
                        this.player_.muted(this.player_.tech_.el_.muted);
                    }
                    if (b === 0 || this.player_.muted()) {
                        c = 0;
                    } else if (b < 0.33) {
                        c = 1;
                    } else if (b < 0.67) {
                        c = 2;
                    }
                    for(var d = 0; d < 4; d++){
                        aK(this.el_, "vjs-vol-" + d);
                    }
                    aJ(this.el_, "vjs-vol-" + c);
                };
                c.updateControlText_ = function a() {
                    var b = this.player_.muted() || this.player_.volume() === 0;
                    var c = b ? "Unmute" : "Mute";
                    if (this.controlText() !== c) {
                        this.controlText(c);
                    }
                };
                return b;
            })(c8);
            dJ.prototype.controlText_ = "Mute";
            bS.registerComponent("MuteToggle", dJ);
            var dK = (function(a) {
                (0, j.Z)(b, a);
                function b(b, c) {
                    var d;
                    if (c === void 0) {
                        c = {};
                    }
                    if (typeof c.inline !== "undefined") {
                        c.inline = c.inline;
                    } else {
                        c.inline = true;
                    }
                    if (typeof c.volumeControl === "undefined" || ab(c.volumeControl)) {
                        c.volumeControl = c.volumeControl || {};
                        c.volumeControl.vertical = !c.inline;
                    }
                    d = a.call(this, b, c) || this;
                    d.handleKeyPressHandler_ = function(a) {
                        return d.handleKeyPress(a);
                    };
                    d.on(b, [
                        "loadstart"
                    ], function(a) {
                        return d.volumePanelState_(a);
                    });
                    d.on(d.muteToggle, "keyup", function(a) {
                        return d.handleKeyPress(a);
                    });
                    d.on(d.volumeControl, "keyup", function(a) {
                        return d.handleVolumeControlKeyUp(a);
                    });
                    d.on("keydown", function(a) {
                        return d.handleKeyPress(a);
                    });
                    d.on("mouseover", function(a) {
                        return d.handleMouseOver(a);
                    });
                    d.on("mouseout", function(a) {
                        return d.handleMouseOut(a);
                    });
                    d.on(d.volumeControl, [
                        "slideractive"
                    ], d.sliderActive_);
                    d.on(d.volumeControl, [
                        "sliderinactive"
                    ], d.sliderInactive_);
                    return d;
                }
                var c = b.prototype;
                c.sliderActive_ = function a() {
                    this.addClass("vjs-slider-active");
                };
                c.sliderInactive_ = function a() {
                    this.removeClass("vjs-slider-active");
                };
                c.volumePanelState_ = function a() {
                    if (this.volumeControl.hasClass("vjs-hidden") && this.muteToggle.hasClass("vjs-hidden")) {
                        this.addClass("vjs-hidden");
                    }
                    if (this.volumeControl.hasClass("vjs-hidden") && !this.muteToggle.hasClass("vjs-hidden")) {
                        this.addClass("vjs-mute-toggle-only");
                    }
                };
                c.createEl = function b() {
                    var c = "vjs-volume-panel-horizontal";
                    if (!this.options_.inline) {
                        c = "vjs-volume-panel-vertical";
                    }
                    return a.prototype.createEl.call(this, "div", {
                        className: "vjs-volume-panel vjs-control " + c
                    });
                };
                c.dispose = function b() {
                    this.handleMouseOut();
                    a.prototype.dispose.call(this);
                };
                c.handleVolumeControlKeyUp = function a(b) {
                    if (n().isEventKey(b, "Esc")) {
                        this.muteToggle.focus();
                    }
                };
                c.handleMouseOver = function a(b) {
                    this.addClass("vjs-hover");
                    bl(g(), "keyup", this.handleKeyPressHandler_);
                };
                c.handleMouseOut = function a(b) {
                    this.removeClass("vjs-hover");
                    bm(g(), "keyup", this.handleKeyPressHandler_);
                };
                c.handleKeyPress = function a(b) {
                    if (n().isEventKey(b, "Esc")) {
                        this.handleMouseOut();
                    }
                };
                return b;
            })(bS);
            dK.prototype.options_ = {
                children: [
                    "muteToggle",
                    "volumeControl"
                ]
            };
            bS.registerComponent("VolumePanel", dK);
            var dL = (function(a) {
                (0, j.Z)(b, a);
                function b(b, c) {
                    var d;
                    d = a.call(this, b, c) || this;
                    if (c) {
                        d.menuButton_ = c.menuButton;
                    }
                    d.focusedChild_ = -1;
                    d.on("keydown", function(a) {
                        return d.handleKeyDown(a);
                    });
                    d.boundHandleBlur_ = function(a) {
                        return d.handleBlur(a);
                    };
                    d.boundHandleTapClick_ = function(a) {
                        return d.handleTapClick(a);
                    };
                    return d;
                }
                var c = b.prototype;
                c.addEventListenerForItem = function a(b) {
                    if (!(b instanceof bS)) {
                        return;
                    }
                    this.on(b, "blur", this.boundHandleBlur_);
                    this.on(b, [
                        "tap",
                        "click"
                    ], this.boundHandleTapClick_);
                };
                c.removeEventListenerForItem = function a(b) {
                    if (!(b instanceof bS)) {
                        return;
                    }
                    this.off(b, "blur", this.boundHandleBlur_);
                    this.off(b, [
                        "tap",
                        "click"
                    ], this.boundHandleTapClick_);
                };
                c.removeChild = function b(c) {
                    if (typeof c === "string") {
                        c = this.getChild(c);
                    }
                    this.removeEventListenerForItem(c);
                    a.prototype.removeChild.call(this, c);
                };
                c.addItem = function a(b) {
                    var c = this.addChild(b);
                    if (c) {
                        this.addEventListenerForItem(c);
                    }
                };
                c.createEl = function b() {
                    var c = this.options_.contentElType || "ul";
                    this.contentEl_ = aF(c, {
                        className: "vjs-menu-content"
                    });
                    this.contentEl_.setAttribute("role", "menu");
                    var d = a.prototype.createEl.call(this, "div", {
                        append: this.contentEl_,
                        className: "vjs-menu"
                    });
                    d.appendChild(this.contentEl_);
                    bl(d, "click", function(a) {
                        a.preventDefault();
                        a.stopImmediatePropagation();
                    });
                    return d;
                };
                c.dispose = function b() {
                    this.contentEl_ = null;
                    this.boundHandleBlur_ = null;
                    this.boundHandleTapClick_ = null;
                    a.prototype.dispose.call(this);
                };
                c.handleBlur = function a(b) {
                    var c = b.relatedTarget || g().activeElement;
                    if (!this.children().some(function(a) {
                        return a.el() === c;
                    })) {
                        var d = this.menuButton_;
                        if (d && d.buttonPressed_ && c !== d.el().firstChild) {
                            d.unpressButton();
                        }
                    }
                };
                c.handleTapClick = function a(b) {
                    if (this.menuButton_) {
                        this.menuButton_.unpressButton();
                        var c = this.children();
                        if (!Array.isArray(c)) {
                            return;
                        }
                        var d = c.filter(function(a) {
                            return a.el() === b.target;
                        })[0];
                        if (!d) {
                            return;
                        }
                        if (d.name() !== "CaptionSettingsMenuItem") {
                            this.menuButton_.focus();
                        }
                    }
                };
                c.handleKeyDown = function a(b) {
                    if (n().isEventKey(b, "Left") || n().isEventKey(b, "Down")) {
                        b.preventDefault();
                        b.stopPropagation();
                        this.stepForward();
                    } else if (n().isEventKey(b, "Right") || n().isEventKey(b, "Up")) {
                        b.preventDefault();
                        b.stopPropagation();
                        this.stepBack();
                    }
                };
                c.stepForward = function a() {
                    var b = 0;
                    if (this.focusedChild_ !== undefined) {
                        b = this.focusedChild_ + 1;
                    }
                    this.focus(b);
                };
                c.stepBack = function a() {
                    var b = 0;
                    if (this.focusedChild_ !== undefined) {
                        b = this.focusedChild_ - 1;
                    }
                    this.focus(b);
                };
                c.focus = function a(b) {
                    if (b === void 0) {
                        b = 0;
                    }
                    var c = this.children().slice();
                    var d = c.length && c[0].hasClass("vjs-menu-title");
                    if (d) {
                        c.shift();
                    }
                    if (c.length > 0) {
                        if (b < 0) {
                            b = 0;
                        } else if (b >= c.length) {
                            b = c.length - 1;
                        }
                        this.focusedChild_ = b;
                        c[b].el_.focus();
                    }
                };
                return b;
            })(bS);
            bS.registerComponent("Menu", dL);
            var dM = (function(a) {
                (0, j.Z)(b, a);
                function b(b, c) {
                    var d;
                    if (c === void 0) {
                        c = {};
                    }
                    d = a.call(this, b, c) || this;
                    d.menuButton_ = new c8(b, c);
                    d.menuButton_.controlText(d.controlText_);
                    d.menuButton_.el_.setAttribute("aria-haspopup", "true");
                    var e = c8.prototype.buildCSSClass();
                    d.menuButton_.el_.className = d.buildCSSClass() + " " + e;
                    d.menuButton_.removeClass("vjs-control");
                    d.addChild(d.menuButton_);
                    d.update();
                    d.enabled_ = true;
                    var f = function a(b) {
                        return d.handleClick(b);
                    };
                    d.handleMenuKeyUp_ = function(a) {
                        return d.handleMenuKeyUp(a);
                    };
                    d.on(d.menuButton_, "tap", f);
                    d.on(d.menuButton_, "click", f);
                    d.on(d.menuButton_, "keydown", function(a) {
                        return d.handleKeyDown(a);
                    });
                    d.on(d.menuButton_, "mouseenter", function() {
                        d.addClass("vjs-hover");
                        d.menu.show();
                        bl(g(), "keyup", d.handleMenuKeyUp_);
                    });
                    d.on("mouseleave", function(a) {
                        return d.handleMouseLeave(a);
                    });
                    d.on("keydown", function(a) {
                        return d.handleSubmenuKeyDown(a);
                    });
                    return d;
                }
                var c = b.prototype;
                c.update = function a() {
                    var b = this.createMenu();
                    if (this.menu) {
                        this.menu.dispose();
                        this.removeChild(this.menu);
                    }
                    this.menu = b;
                    this.addChild(b);
                    this.buttonPressed_ = false;
                    this.menuButton_.el_.setAttribute("aria-expanded", "false");
                    if (this.items && this.items.length <= this.hideThreshold_) {
                        this.hide();
                    } else {
                        this.show();
                    }
                };
                c.createMenu = function a() {
                    var b = new dL(this.player_, {
                        menuButton: this
                    });
                    this.hideThreshold_ = 0;
                    if (this.options_.title) {
                        var c = aF("li", {
                            className: "vjs-menu-title",
                            textContent: bL(this.options_.title),
                            tabIndex: -1
                        });
                        var d = new bS(this.player_, {
                            el: c
                        });
                        b.addItem(d);
                    }
                    this.items = this.createItems();
                    if (this.items) {
                        for(var e = 0; e < this.items.length; e++){
                            b.addItem(this.items[e]);
                        }
                    }
                    return b;
                };
                c.createItems = function a() {};
                c.createEl = function b() {
                    return a.prototype.createEl.call(this, "div", {
                        className: this.buildWrapperCSSClass()
                    }, {});
                };
                c.buildWrapperCSSClass = function b() {
                    var c = "vjs-menu-button";
                    if (this.options_.inline === true) {
                        c += "-inline";
                    } else {
                        c += "-popup";
                    }
                    var d = c8.prototype.buildCSSClass();
                    return ("vjs-menu-button " + c + " " + d + " " + a.prototype.buildCSSClass.call(this));
                };
                c.buildCSSClass = function b() {
                    var c = "vjs-menu-button";
                    if (this.options_.inline === true) {
                        c += "-inline";
                    } else {
                        c += "-popup";
                    }
                    return ("vjs-menu-button " + c + " " + a.prototype.buildCSSClass.call(this));
                };
                c.controlText = function a(b, c) {
                    if (c === void 0) {
                        c = this.menuButton_.el();
                    }
                    return this.menuButton_.controlText(b, c);
                };
                c.dispose = function b() {
                    this.handleMouseLeave();
                    a.prototype.dispose.call(this);
                };
                c.handleClick = function a(b) {
                    if (this.buttonPressed_) {
                        this.unpressButton();
                    } else {
                        this.pressButton();
                    }
                };
                c.handleMouseLeave = function a(b) {
                    this.removeClass("vjs-hover");
                    bm(g(), "keyup", this.handleMenuKeyUp_);
                };
                c.focus = function a() {
                    this.menuButton_.focus();
                };
                c.blur = function a() {
                    this.menuButton_.blur();
                };
                c.handleKeyDown = function a(b) {
                    if (n().isEventKey(b, "Esc") || n().isEventKey(b, "Tab")) {
                        if (this.buttonPressed_) {
                            this.unpressButton();
                        }
                        if (!n().isEventKey(b, "Tab")) {
                            b.preventDefault();
                            this.menuButton_.focus();
                        }
                    } else if (n().isEventKey(b, "Up") || n().isEventKey(b, "Down")) {
                        if (!this.buttonPressed_) {
                            b.preventDefault();
                            this.pressButton();
                        }
                    }
                };
                c.handleMenuKeyUp = function a(b) {
                    if (n().isEventKey(b, "Esc") || n().isEventKey(b, "Tab")) {
                        this.removeClass("vjs-hover");
                    }
                };
                c.handleSubmenuKeyPress = function a(b) {
                    this.handleSubmenuKeyDown(b);
                };
                c.handleSubmenuKeyDown = function a(b) {
                    if (n().isEventKey(b, "Esc") || n().isEventKey(b, "Tab")) {
                        if (this.buttonPressed_) {
                            this.unpressButton();
                        }
                        if (!n().isEventKey(b, "Tab")) {
                            b.preventDefault();
                            this.menuButton_.focus();
                        }
                    }
                };
                c.pressButton = function a() {
                    if (this.enabled_) {
                        this.buttonPressed_ = true;
                        this.menu.show();
                        this.menu.lockShowing();
                        this.menuButton_.el_.setAttribute("aria-expanded", "true");
                        if (av && aD()) {
                            return;
                        }
                        this.menu.focus();
                    }
                };
                c.unpressButton = function a() {
                    if (this.enabled_) {
                        this.buttonPressed_ = false;
                        this.menu.unlockShowing();
                        this.menu.hide();
                        this.menuButton_.el_.setAttribute("aria-expanded", "false");
                    }
                };
                c.disable = function a() {
                    this.unpressButton();
                    this.enabled_ = false;
                    this.addClass("vjs-disabled");
                    this.menuButton_.disable();
                };
                c.enable = function a() {
                    this.enabled_ = true;
                    this.removeClass("vjs-disabled");
                    this.menuButton_.enable();
                };
                return b;
            })(bS);
            bS.registerComponent("MenuButton", dM);
            var dN = (function(a) {
                (0, j.Z)(b, a);
                function b(b, c) {
                    var d;
                    var e = c.tracks;
                    d = a.call(this, b, c) || this;
                    if (d.items.length <= 1) {
                        d.hide();
                    }
                    if (!e) {
                        return (0, i.Z)(d);
                    }
                    var f = bs((0, i.Z)(d), d.update);
                    e.addEventListener("removetrack", f);
                    e.addEventListener("addtrack", f);
                    e.addEventListener("labelchange", f);
                    d.player_.on("ready", f);
                    d.player_.on("dispose", function() {
                        e.removeEventListener("removetrack", f);
                        e.removeEventListener("addtrack", f);
                        e.removeEventListener("labelchange", f);
                    });
                    return d;
                }
                return b;
            })(dM);
            bS.registerComponent("TrackButton", dN);
            var dO = [
                "Tab",
                "Esc",
                "Up",
                "Down",
                "Right",
                "Left"
            ];
            var dP = (function(a) {
                (0, j.Z)(b, a);
                function b(b, c) {
                    var d;
                    d = a.call(this, b, c) || this;
                    d.selectable = c.selectable;
                    d.isSelected_ = c.selected || false;
                    d.multiSelectable = c.multiSelectable;
                    d.selected(d.isSelected_);
                    if (d.selectable) {
                        if (d.multiSelectable) {
                            d.el_.setAttribute("role", "menuitemcheckbox");
                        } else {
                            d.el_.setAttribute("role", "menuitemradio");
                        }
                    } else {
                        d.el_.setAttribute("role", "menuitem");
                    }
                    return d;
                }
                var c = b.prototype;
                c.createEl = function b(c, d, e) {
                    this.nonIconControl = true;
                    var f = a.prototype.createEl.call(this, "li", _({
                        className: "vjs-menu-item",
                        tabIndex: -1
                    }, d), e);
                    f.replaceChild(aF("span", {
                        className: "vjs-menu-item-text",
                        textContent: this.localize(this.options_.label)
                    }), f.querySelector(".vjs-icon-placeholder"));
                    return f;
                };
                c.handleKeyDown = function b(c) {
                    if (!dO.some(function(a) {
                        return n().isEventKey(c, a);
                    })) {
                        a.prototype.handleKeyDown.call(this, c);
                    }
                };
                c.handleClick = function a(b) {
                    this.selected(true);
                };
                c.selected = function a(b) {
                    if (this.selectable) {
                        if (b) {
                            this.addClass("vjs-selected");
                            this.el_.setAttribute("aria-checked", "true");
                            this.controlText(", selected");
                            this.isSelected_ = true;
                        } else {
                            this.removeClass("vjs-selected");
                            this.el_.setAttribute("aria-checked", "false");
                            this.controlText("");
                            this.isSelected_ = false;
                        }
                    }
                };
                return b;
            })(c_);
            bS.registerComponent("MenuItem", dP);
            var dQ = (function(a) {
                (0, j.Z)(b, a);
                function b(b, c) {
                    var d;
                    var f = c.track;
                    var h = b.textTracks();
                    c.label = f.label || f.language || "Unknown";
                    c.selected = f.mode === "showing";
                    d = a.call(this, b, c) || this;
                    d.track = f;
                    d.kinds = (c.kinds || [
                        c.kind || d.track.kind
                    ]).filter(Boolean);
                    var j = function a() {
                        for(var b = arguments.length, c = new Array(b), e = 0; e < b; e++){
                            c[e] = arguments[e];
                        }
                        d.handleTracksChange.apply((0, i.Z)(d), c);
                    };
                    var k = function a() {
                        for(var b = arguments.length, c = new Array(b), e = 0; e < b; e++){
                            c[e] = arguments[e];
                        }
                        d.handleSelectedLanguageChange.apply((0, i.Z)(d), c);
                    };
                    b.on([
                        "loadstart",
                        "texttrackchange"
                    ], j);
                    h.addEventListener("change", j);
                    h.addEventListener("selectedlanguagechange", k);
                    d.on("dispose", function() {
                        b.off([
                            "loadstart",
                            "texttrackchange"
                        ], j);
                        h.removeEventListener("change", j);
                        h.removeEventListener("selectedlanguagechange", k);
                    });
                    if (h.onchange === undefined) {
                        var l;
                        d.on([
                            "tap",
                            "click"
                        ], function() {
                            if (typeof e().Event !== "object") {
                                try {
                                    l = new (e().Event)("change");
                                } catch (a) {}
                            }
                            if (!l) {
                                l = g().createEvent("Event");
                                l.initEvent("change", true, true);
                            }
                            h.dispatchEvent(l);
                        });
                    }
                    d.handleTracksChange();
                    return d;
                }
                var c = b.prototype;
                c.handleClick = function b(c) {
                    var d = this.track;
                    var e = this.player_.textTracks();
                    a.prototype.handleClick.call(this, c);
                    if (!e) {
                        return;
                    }
                    for(var f = 0; f < e.length; f++){
                        var g = e[f];
                        if (this.kinds.indexOf(g.kind) === -1) {
                            continue;
                        }
                        if (g === d) {
                            if (g.mode !== "showing") {
                                g.mode = "showing";
                            }
                        } else if (g.mode !== "disabled") {
                            g.mode = "disabled";
                        }
                    }
                };
                c.handleTracksChange = function a(b) {
                    var c = this.track.mode === "showing";
                    if (c !== this.isSelected_) {
                        this.selected(c);
                    }
                };
                c.handleSelectedLanguageChange = function a(b) {
                    if (this.track.mode === "showing") {
                        var c = this.player_.cache_.selectedLanguage;
                        if (c && c.enabled && c.language === this.track.language && c.kind !== this.track.kind) {
                            return;
                        }
                        this.player_.cache_.selectedLanguage = {
                            enabled: true,
                            language: this.track.language,
                            kind: this.track.kind
                        };
                    }
                };
                c.dispose = function b() {
                    this.track = null;
                    a.prototype.dispose.call(this);
                };
                return b;
            })(dP);
            bS.registerComponent("TextTrackMenuItem", dQ);
            var dR = (function(a) {
                (0, j.Z)(b, a);
                function b(b, c) {
                    c.track = {
                        player: b,
                        kind: c.kind,
                        kinds: c.kinds,
                        default: false,
                        mode: "disabled"
                    };
                    if (!c.kinds) {
                        c.kinds = [
                            c.kind
                        ];
                    }
                    if (c.label) {
                        c.track.label = c.label;
                    } else {
                        c.track.label = c.kinds.join(" and ") + " off";
                    }
                    c.selectable = true;
                    c.multiSelectable = false;
                    return (a.call(this, b, c) || this);
                }
                var c = b.prototype;
                c.handleTracksChange = function a(b) {
                    var c = this.player().textTracks();
                    var d = true;
                    for(var e = 0, f = c.length; e < f; e++){
                        var g = c[e];
                        if (this.options_.kinds.indexOf(g.kind) > -1 && g.mode === "showing") {
                            d = false;
                            break;
                        }
                    }
                    if (d !== this.isSelected_) {
                        this.selected(d);
                    }
                };
                c.handleSelectedLanguageChange = function a(b) {
                    var c = this.player().textTracks();
                    var d = true;
                    for(var e = 0, f = c.length; e < f; e++){
                        var g = c[e];
                        if ([
                            "captions",
                            "descriptions",
                            "subtitles", 
                        ].indexOf(g.kind) > -1 && g.mode === "showing") {
                            d = false;
                            break;
                        }
                    }
                    if (d) {
                        this.player_.cache_.selectedLanguage = {
                            enabled: false
                        };
                    }
                };
                return b;
            })(dQ);
            bS.registerComponent("OffTextTrackMenuItem", dR);
            var dS = (function(a) {
                (0, j.Z)(b, a);
                function b(b, c) {
                    if (c === void 0) {
                        c = {};
                    }
                    c.tracks = b.textTracks();
                    return a.call(this, b, c) || this;
                }
                var c = b.prototype;
                c.createItems = function a(b, c) {
                    if (b === void 0) {
                        b = [];
                    }
                    if (c === void 0) {
                        c = dQ;
                    }
                    var d;
                    if (this.label_) {
                        d = this.label_ + " off";
                    }
                    b.push(new dR(this.player_, {
                        kinds: this.kinds_,
                        kind: this.kind_,
                        label: d
                    }));
                    this.hideThreshold_ += 1;
                    var e = this.player_.textTracks();
                    if (!Array.isArray(this.kinds_)) {
                        this.kinds_ = [
                            this.kind_
                        ];
                    }
                    for(var f = 0; f < e.length; f++){
                        var g = e[f];
                        if (this.kinds_.indexOf(g.kind) > -1) {
                            var h = new c(this.player_, {
                                track: g,
                                kinds: this.kinds_,
                                kind: this.kind_,
                                selectable: true,
                                multiSelectable: false
                            });
                            h.addClass("vjs-" + g.kind + "-menu-item");
                            b.push(h);
                        }
                    }
                    return b;
                };
                return b;
            })(dN);
            bS.registerComponent("TextTrackButton", dS);
            var dT = (function(a) {
                (0, j.Z)(b, a);
                function b(b, c) {
                    var d;
                    var e = c.track;
                    var f = c.cue;
                    var g = b.currentTime();
                    c.selectable = true;
                    c.multiSelectable = false;
                    c.label = f.text;
                    c.selected = f.startTime <= g && g < f.endTime;
                    d = a.call(this, b, c) || this;
                    d.track = e;
                    d.cue = f;
                    e.addEventListener("cuechange", bs((0, i.Z)(d), d.update));
                    return d;
                }
                var c = b.prototype;
                c.handleClick = function b(c) {
                    a.prototype.handleClick.call(this);
                    this.player_.currentTime(this.cue.startTime);
                    this.update(this.cue.startTime);
                };
                c.update = function a(b) {
                    var c = this.cue;
                    var d = this.player_.currentTime();
                    this.selected(c.startTime <= d && d < c.endTime);
                };
                return b;
            })(dP);
            bS.registerComponent("ChaptersTrackMenuItem", dT);
            var dU = (function(a) {
                (0, j.Z)(b, a);
                function b(b, c, d) {
                    return (a.call(this, b, c, d) || this);
                }
                var c = b.prototype;
                c.buildCSSClass = function b() {
                    return ("vjs-chapters-button " + a.prototype.buildCSSClass.call(this));
                };
                c.buildWrapperCSSClass = function b() {
                    return ("vjs-chapters-button " + a.prototype.buildWrapperCSSClass.call(this));
                };
                c.update = function b(c) {
                    if (!this.track_ || (c && (c.type === "addtrack" || c.type === "removetrack"))) {
                        this.setTrack(this.findChaptersTrack());
                    }
                    a.prototype.update.call(this);
                };
                c.setTrack = function a(b) {
                    if (this.track_ === b) {
                        return;
                    }
                    if (!this.updateHandler_) {
                        this.updateHandler_ = this.update.bind(this);
                    }
                    if (this.track_) {
                        var c = this.player_.remoteTextTrackEls().getTrackElementByTrack_(this.track_);
                        if (c) {
                            c.removeEventListener("load", this.updateHandler_);
                        }
                        this.track_ = null;
                    }
                    this.track_ = b;
                    if (this.track_) {
                        this.track_.mode = "hidden";
                        var d = this.player_.remoteTextTrackEls().getTrackElementByTrack_(this.track_);
                        if (d) {
                            d.addEventListener("load", this.updateHandler_);
                        }
                    }
                };
                c.findChaptersTrack = function a() {
                    var b = this.player_.textTracks() || [];
                    for(var c = b.length - 1; c >= 0; c--){
                        var d = b[c];
                        if (d.kind === this.kind_) {
                            return d;
                        }
                    }
                };
                c.getMenuCaption = function a() {
                    if (this.track_ && this.track_.label) {
                        return this.track_.label;
                    }
                    return this.localize(bL(this.kind_));
                };
                c.createMenu = function b() {
                    this.options_.title = this.getMenuCaption();
                    return a.prototype.createMenu.call(this);
                };
                c.createItems = function a() {
                    var b = [];
                    if (!this.track_) {
                        return b;
                    }
                    var c = this.track_.cues;
                    if (!c) {
                        return b;
                    }
                    for(var d = 0, e = c.length; d < e; d++){
                        var f = c[d];
                        var g = new dT(this.player_, {
                            track: this.track_,
                            cue: f
                        });
                        b.push(g);
                    }
                    return b;
                };
                return b;
            })(dS);
            dU.prototype.kind_ = "chapters";
            dU.prototype.controlText_ = "Chapters";
            bS.registerComponent("ChaptersButton", dU);
            var dV = (function(a) {
                (0, j.Z)(b, a);
                function b(b, c, d) {
                    var e;
                    e = a.call(this, b, c, d) || this;
                    var f = b.textTracks();
                    var g = bs((0, i.Z)(e), e.handleTracksChange);
                    f.addEventListener("change", g);
                    e.on("dispose", function() {
                        f.removeEventListener("change", g);
                    });
                    return e;
                }
                var c = b.prototype;
                c.handleTracksChange = function a(b) {
                    var c = this.player().textTracks();
                    var d = false;
                    for(var e = 0, f = c.length; e < f; e++){
                        var g = c[e];
                        if (g.kind !== this.kind_ && g.mode === "showing") {
                            d = true;
                            break;
                        }
                    }
                    if (d) {
                        this.disable();
                    } else {
                        this.enable();
                    }
                };
                c.buildCSSClass = function b() {
                    return ("vjs-descriptions-button " + a.prototype.buildCSSClass.call(this));
                };
                c.buildWrapperCSSClass = function b() {
                    return ("vjs-descriptions-button " + a.prototype.buildWrapperCSSClass.call(this));
                };
                return b;
            })(dS);
            dV.prototype.kind_ = "descriptions";
            dV.prototype.controlText_ = "Descriptions";
            bS.registerComponent("DescriptionsButton", dV);
            var dW = (function(a) {
                (0, j.Z)(b, a);
                function b(b, c, d) {
                    return (a.call(this, b, c, d) || this);
                }
                var c = b.prototype;
                c.buildCSSClass = function b() {
                    return ("vjs-subtitles-button " + a.prototype.buildCSSClass.call(this));
                };
                c.buildWrapperCSSClass = function b() {
                    return ("vjs-subtitles-button " + a.prototype.buildWrapperCSSClass.call(this));
                };
                return b;
            })(dS);
            dW.prototype.kind_ = "subtitles";
            dW.prototype.controlText_ = "Subtitles";
            bS.registerComponent("SubtitlesButton", dW);
            var dX = (function(a) {
                (0, j.Z)(b, a);
                function b(b, c) {
                    var d;
                    c.track = {
                        player: b,
                        kind: c.kind,
                        label: c.kind + " settings",
                        selectable: false,
                        default: false,
                        mode: "disabled"
                    };
                    c.selectable = false;
                    c.name = "CaptionSettingsMenuItem";
                    d = a.call(this, b, c) || this;
                    d.addClass("vjs-texttrack-settings");
                    d.controlText(", opens " + c.kind + " settings dialog");
                    return d;
                }
                var c = b.prototype;
                c.handleClick = function a(b) {
                    this.player().getChild("textTrackSettings").open();
                };
                return b;
            })(dQ);
            bS.registerComponent("CaptionSettingsMenuItem", dX);
            var dY = (function(a) {
                (0, j.Z)(b, a);
                function b(b, c, d) {
                    return (a.call(this, b, c, d) || this);
                }
                var c = b.prototype;
                c.buildCSSClass = function b() {
                    return ("vjs-captions-button " + a.prototype.buildCSSClass.call(this));
                };
                c.buildWrapperCSSClass = function b() {
                    return ("vjs-captions-button " + a.prototype.buildWrapperCSSClass.call(this));
                };
                c.createItems = function b() {
                    var c = [];
                    if (!(this.player().tech_ && this.player().tech_.featuresNativeTextTracks) && this.player().getChild("textTrackSettings")) {
                        c.push(new dX(this.player_, {
                            kind: this.kind_
                        }));
                        this.hideThreshold_ += 1;
                    }
                    return a.prototype.createItems.call(this, c);
                };
                return b;
            })(dS);
            dY.prototype.kind_ = "captions";
            dY.prototype.controlText_ = "Captions";
            bS.registerComponent("CaptionsButton", dY);
            var dZ = (function(a) {
                (0, j.Z)(b, a);
                function b() {
                    return a.apply(this, arguments) || this;
                }
                var c = b.prototype;
                c.createEl = function b(c, d, e) {
                    var f = a.prototype.createEl.call(this, c, d, e);
                    var g = f.querySelector(".vjs-menu-item-text");
                    if (this.options_.track.kind === "captions") {
                        g.appendChild(aF("span", {
                            className: "vjs-icon-placeholder"
                        }, {
                            "aria-hidden": true
                        }));
                        g.appendChild(aF("span", {
                            className: "vjs-control-text",
                            textContent: " " + this.localize("Captions")
                        }));
                    }
                    return f;
                };
                return b;
            })(dQ);
            bS.registerComponent("SubsCapsMenuItem", dZ);
            var d$ = (function(a) {
                (0, j.Z)(b, a);
                function b(b, c) {
                    var d;
                    if (c === void 0) {
                        c = {};
                    }
                    d = a.call(this, b, c) || this;
                    d.label_ = "subtitles";
                    if ([
                        "en",
                        "en-us",
                        "en-ca",
                        "fr-ca"
                    ].indexOf(d.player_.language_) > -1) {
                        d.label_ = "captions";
                    }
                    d.menuButton_.controlText(bL(d.label_));
                    return d;
                }
                var c = b.prototype;
                c.buildCSSClass = function b() {
                    return ("vjs-subs-caps-button " + a.prototype.buildCSSClass.call(this));
                };
                c.buildWrapperCSSClass = function b() {
                    return ("vjs-subs-caps-button " + a.prototype.buildWrapperCSSClass.call(this));
                };
                c.createItems = function b() {
                    var c = [];
                    if (!(this.player().tech_ && this.player().tech_.featuresNativeTextTracks) && this.player().getChild("textTrackSettings")) {
                        c.push(new dX(this.player_, {
                            kind: this.label_
                        }));
                        this.hideThreshold_ += 1;
                    }
                    c = a.prototype.createItems.call(this, c, dZ);
                    return c;
                };
                return b;
            })(dS);
            d$.prototype.kinds_ = [
                "captions",
                "subtitles"
            ];
            d$.prototype.controlText_ = "Subtitles";
            bS.registerComponent("SubsCapsButton", d$);
            var d_ = (function(a) {
                (0, j.Z)(b, a);
                function b(b, c) {
                    var d;
                    var e = c.track;
                    var f = b.audioTracks();
                    c.label = e.label || e.language || "Unknown";
                    c.selected = e.enabled;
                    d = a.call(this, b, c) || this;
                    d.track = e;
                    d.addClass("vjs-" + e.kind + "-menu-item");
                    var g = function a() {
                        for(var b = arguments.length, c = new Array(b), e = 0; e < b; e++){
                            c[e] = arguments[e];
                        }
                        d.handleTracksChange.apply((0, i.Z)(d), c);
                    };
                    f.addEventListener("change", g);
                    d.on("dispose", function() {
                        f.removeEventListener("change", g);
                    });
                    return d;
                }
                var c = b.prototype;
                c.createEl = function b(c, d, e) {
                    var f = a.prototype.createEl.call(this, c, d, e);
                    var g = f.querySelector(".vjs-menu-item-text");
                    if (this.options_.track.kind === "main-desc") {
                        g.appendChild(a.prototype.createEl.call(this, "span", {
                            className: "vjs-icon-placeholder"
                        }, {
                            "aria-hidden": true
                        }));
                        g.appendChild(a.prototype.createEl.call(this, "span", {
                            className: "vjs-control-text",
                            textContent: this.localize("Descriptions")
                        }));
                    }
                    return f;
                };
                c.handleClick = function b(c) {
                    a.prototype.handleClick.call(this, c);
                    this.track.enabled = true;
                };
                c.handleTracksChange = function a(b) {
                    this.selected(this.track.enabled);
                };
                return b;
            })(dP);
            bS.registerComponent("AudioTrackMenuItem", d_);
            var d0 = (function(a) {
                (0, j.Z)(b, a);
                function b(b, c) {
                    if (c === void 0) {
                        c = {};
                    }
                    c.tracks = b.audioTracks();
                    return a.call(this, b, c) || this;
                }
                var c = b.prototype;
                c.buildCSSClass = function b() {
                    return ("vjs-audio-button " + a.prototype.buildCSSClass.call(this));
                };
                c.buildWrapperCSSClass = function b() {
                    return ("vjs-audio-button " + a.prototype.buildWrapperCSSClass.call(this));
                };
                c.createItems = function a(b) {
                    if (b === void 0) {
                        b = [];
                    }
                    this.hideThreshold_ = 1;
                    var c = this.player_.audioTracks();
                    for(var d = 0; d < c.length; d++){
                        var e = c[d];
                        b.push(new d_(this.player_, {
                            track: e,
                            selectable: true,
                            multiSelectable: false
                        }));
                    }
                    return b;
                };
                return b;
            })(dN);
            d0.prototype.controlText_ = "Audio Track";
            bS.registerComponent("AudioTrackButton", d0);
            var d1 = (function(a) {
                (0, j.Z)(b, a);
                function b(b, c) {
                    var d;
                    var e = c.rate;
                    var f = parseFloat(e, 10);
                    c.label = e;
                    c.selected = f === b.playbackRate();
                    c.selectable = true;
                    c.multiSelectable = false;
                    d = a.call(this, b, c) || this;
                    d.label = e;
                    d.rate = f;
                    d.on(b, "ratechange", function(a) {
                        return d.update(a);
                    });
                    return d;
                }
                var c = b.prototype;
                c.handleClick = function b(c) {
                    a.prototype.handleClick.call(this);
                    this.player().playbackRate(this.rate);
                };
                c.update = function a(b) {
                    this.selected(this.player().playbackRate() === this.rate);
                };
                return b;
            })(dP);
            d1.prototype.contentElType = "button";
            bS.registerComponent("PlaybackRateMenuItem", d1);
            var d2 = (function(a) {
                (0, j.Z)(b, a);
                function b(b, c) {
                    var d;
                    d = a.call(this, b, c) || this;
                    d.menuButton_.el_.setAttribute("aria-describedby", d.labelElId_);
                    d.updateVisibility();
                    d.updateLabel();
                    d.on(b, "loadstart", function(a) {
                        return d.updateVisibility(a);
                    });
                    d.on(b, "ratechange", function(a) {
                        return d.updateLabel(a);
                    });
                    d.on(b, "playbackrateschange", function(a) {
                        return d.handlePlaybackRateschange(a);
                    });
                    return d;
                }
                var c = b.prototype;
                c.createEl = function b() {
                    var c = a.prototype.createEl.call(this);
                    this.labelElId_ = "vjs-playback-rate-value-label-" + this.id_;
                    this.labelEl_ = aF("div", {
                        className: "vjs-playback-rate-value",
                        id: this.labelElId_,
                        textContent: "1x"
                    });
                    c.appendChild(this.labelEl_);
                    return c;
                };
                c.dispose = function b() {
                    this.labelEl_ = null;
                    a.prototype.dispose.call(this);
                };
                c.buildCSSClass = function b() {
                    return ("vjs-playback-rate " + a.prototype.buildCSSClass.call(this));
                };
                c.buildWrapperCSSClass = function b() {
                    return ("vjs-playback-rate " + a.prototype.buildWrapperCSSClass.call(this));
                };
                c.createItems = function a() {
                    var b = this.playbackRates();
                    var c = [];
                    for(var d = b.length - 1; d >= 0; d--){
                        c.push(new d1(this.player(), {
                            rate: b[d] + "x"
                        }));
                    }
                    return c;
                };
                c.updateARIAAttributes = function a() {
                    this.el().setAttribute("aria-valuenow", this.player().playbackRate());
                };
                c.handleClick = function a(b) {
                    var c = this.player().playbackRate();
                    var d = this.playbackRates();
                    var e = d[0];
                    for(var f = 0; f < d.length; f++){
                        if (d[f] > c) {
                            e = d[f];
                            break;
                        }
                    }
                    this.player().playbackRate(e);
                };
                c.handlePlaybackRateschange = function a(b) {
                    this.update();
                };
                c.playbackRates = function a() {
                    var b = this.player();
                    return ((b.playbackRates && b.playbackRates()) || []);
                };
                c.playbackRateSupported = function a() {
                    return (this.player().tech_ && this.player().tech_.featuresPlaybackRate && this.playbackRates() && this.playbackRates().length > 0);
                };
                c.updateVisibility = function a(b) {
                    if (this.playbackRateSupported()) {
                        this.removeClass("vjs-hidden");
                    } else {
                        this.addClass("vjs-hidden");
                    }
                };
                c.updateLabel = function a(b) {
                    if (this.playbackRateSupported()) {
                        this.labelEl_.textContent = this.player().playbackRate() + "x";
                    }
                };
                return b;
            })(dM);
            d2.prototype.controlText_ = "Playback Rate";
            bS.registerComponent("PlaybackRateMenuButton", d2);
            var d3 = (function(a) {
                (0, j.Z)(b, a);
                function b() {
                    return a.apply(this, arguments) || this;
                }
                var c = b.prototype;
                c.buildCSSClass = function b() {
                    return ("vjs-spacer " + a.prototype.buildCSSClass.call(this));
                };
                c.createEl = function b(c, d, e) {
                    if (c === void 0) {
                        c = "div";
                    }
                    if (d === void 0) {
                        d = {};
                    }
                    if (e === void 0) {
                        e = {};
                    }
                    if (!d.className) {
                        d.className = this.buildCSSClass();
                    }
                    return a.prototype.createEl.call(this, c, d, e);
                };
                return b;
            })(bS);
            bS.registerComponent("Spacer", d3);
            var d4 = (function(a) {
                (0, j.Z)(b, a);
                function b() {
                    return a.apply(this, arguments) || this;
                }
                var c = b.prototype;
                c.buildCSSClass = function b() {
                    return ("vjs-custom-control-spacer " + a.prototype.buildCSSClass.call(this));
                };
                c.createEl = function b() {
                    return a.prototype.createEl.call(this, "div", {
                        className: this.buildCSSClass(),
                        textContent: "\xA0"
                    });
                };
                return b;
            })(d3);
            bS.registerComponent("CustomControlSpacer", d4);
            var d5 = (function(a) {
                (0, j.Z)(b, a);
                function b() {
                    return a.apply(this, arguments) || this;
                }
                var c = b.prototype;
                c.createEl = function b() {
                    return a.prototype.createEl.call(this, "div", {
                        className: "vjs-control-bar",
                        dir: "ltr"
                    });
                };
                return b;
            })(bS);
            d5.prototype.options_ = {
                children: [
                    "playToggle",
                    "volumePanel",
                    "currentTimeDisplay",
                    "timeDivider",
                    "durationDisplay",
                    "progressControl",
                    "liveDisplay",
                    "seekToLive",
                    "remainingTimeDisplay",
                    "customControlSpacer",
                    "playbackRateMenuButton",
                    "chaptersButton",
                    "descriptionsButton",
                    "subsCapsButton",
                    "audioTrackButton",
                    "fullscreenToggle", 
                ]
            };
            if ("exitPictureInPicture" in g()) {
                d5.prototype.options_.children.splice(d5.prototype.options_.children.length - 1, 0, "pictureInPictureToggle");
            }
            bS.registerComponent("ControlBar", d5);
            var d6 = (function(a) {
                (0, j.Z)(b, a);
                function b(b, c) {
                    var d;
                    d = a.call(this, b, c) || this;
                    d.on(b, "error", function(a) {
                        return d.open(a);
                    });
                    return d;
                }
                var c = b.prototype;
                c.buildCSSClass = function b() {
                    return ("vjs-error-display " + a.prototype.buildCSSClass.call(this));
                };
                c.content = function a() {
                    var b = this.player().error();
                    return b ? this.localize(b.message) : "";
                };
                return b;
            })(b5);
            d6.prototype.options_ = (0, h.Z)({}, b5.prototype.options_, {
                pauseOnOpen: false,
                fillAlways: true,
                temporary: false,
                uncloseable: true
            });
            bS.registerComponent("ErrorDisplay", d6);
            var d7 = "vjs-text-track-settings";
            var d8 = [
                "#000",
                "Black"
            ];
            var d9 = [
                "#00F",
                "Blue"
            ];
            var ea = [
                "#0FF",
                "Cyan"
            ];
            var eb = [
                "#0F0",
                "Green"
            ];
            var ec = [
                "#F0F",
                "Magenta"
            ];
            var ed = [
                "#F00",
                "Red"
            ];
            var ee = [
                "#FFF",
                "White"
            ];
            var ef = [
                "#FF0",
                "Yellow"
            ];
            var eg = [
                "1",
                "Opaque"
            ];
            var eh = [
                "0.5",
                "Semi-Transparent"
            ];
            var ei = [
                "0",
                "Transparent"
            ];
            var ej = {
                backgroundColor: {
                    selector: ".vjs-bg-color > select",
                    id: "captions-background-color-%s",
                    label: "Color",
                    options: [
                        d8,
                        ee,
                        ed,
                        eb,
                        d9,
                        ef,
                        ec,
                        ea, 
                    ]
                },
                backgroundOpacity: {
                    selector: ".vjs-bg-opacity > select",
                    id: "captions-background-opacity-%s",
                    label: "Transparency",
                    options: [
                        eg,
                        eh,
                        ei
                    ]
                },
                color: {
                    selector: ".vjs-fg-color > select",
                    id: "captions-foreground-color-%s",
                    label: "Color",
                    options: [
                        ee,
                        d8,
                        ed,
                        eb,
                        d9,
                        ef,
                        ec,
                        ea, 
                    ]
                },
                edgeStyle: {
                    selector: ".vjs-edge-style > select",
                    id: "%s",
                    label: "Text Edge Style",
                    options: [
                        [
                            "none",
                            "None"
                        ],
                        [
                            "raised",
                            "Raised"
                        ],
                        [
                            "depressed",
                            "Depressed"
                        ],
                        [
                            "uniform",
                            "Uniform"
                        ],
                        [
                            "dropshadow",
                            "Dropshadow"
                        ], 
                    ]
                },
                fontFamily: {
                    selector: ".vjs-font-family > select",
                    id: "captions-font-family-%s",
                    label: "Font Family",
                    options: [
                        [
                            "proportionalSansSerif",
                            "Proportional Sans-Serif"
                        ],
                        [
                            "monospaceSansSerif",
                            "Monospace Sans-Serif"
                        ],
                        [
                            "proportionalSerif",
                            "Proportional Serif"
                        ],
                        [
                            "monospaceSerif",
                            "Monospace Serif"
                        ],
                        [
                            "casual",
                            "Casual"
                        ],
                        [
                            "script",
                            "Script"
                        ],
                        [
                            "small-caps",
                            "Small Caps"
                        ], 
                    ]
                },
                fontPercent: {
                    selector: ".vjs-font-percent > select",
                    id: "captions-font-size-%s",
                    label: "Font Size",
                    options: [
                        [
                            "0.50",
                            "50%"
                        ],
                        [
                            "0.75",
                            "75%"
                        ],
                        [
                            "1.00",
                            "100%"
                        ],
                        [
                            "1.25",
                            "125%"
                        ],
                        [
                            "1.50",
                            "150%"
                        ],
                        [
                            "1.75",
                            "175%"
                        ],
                        [
                            "2.00",
                            "200%"
                        ],
                        [
                            "3.00",
                            "300%"
                        ],
                        [
                            "4.00",
                            "400%"
                        ], 
                    ],
                    default: 2,
                    parser: function a(b) {
                        return b === "1.00" ? null : Number(b);
                    }
                },
                textOpacity: {
                    selector: ".vjs-text-opacity > select",
                    id: "captions-foreground-opacity-%s",
                    label: "Transparency",
                    options: [
                        eg,
                        eh
                    ]
                },
                windowColor: {
                    selector: ".vjs-window-color > select",
                    id: "captions-window-color-%s",
                    label: "Color"
                },
                windowOpacity: {
                    selector: ".vjs-window-opacity > select",
                    id: "captions-window-opacity-%s",
                    label: "Transparency",
                    options: [
                        ei,
                        eh,
                        eg
                    ]
                }
            };
            ej.windowColor.options = ej.backgroundColor.options;
            function ek(a, b) {
                if (b) {
                    a = b(a);
                }
                if (a && a !== "none") {
                    return a;
                }
            }
            function el(a, b) {
                var c = a.options[a.options.selectedIndex].value;
                return ek(c, b);
            }
            function em(a, b, c) {
                if (!b) {
                    return;
                }
                for(var d = 0; d < a.options.length; d++){
                    if (ek(a.options[d].value, c) === b) {
                        a.selectedIndex = d;
                        break;
                    }
                }
            }
            var en = (function(a) {
                (0, j.Z)(b, a);
                function b(b, c) {
                    var d;
                    c.temporary = false;
                    d = a.call(this, b, c) || this;
                    d.updateDisplay = d.updateDisplay.bind((0, i.Z)(d));
                    d.fill();
                    d.hasBeenOpened_ = d.hasBeenFilled_ = true;
                    d.endDialog = aF("p", {
                        className: "vjs-control-text",
                        textContent: d.localize("End of dialog window.")
                    });
                    d.el().appendChild(d.endDialog);
                    d.setDefaults();
                    if (c.persistTextTrackSettings === undefined) {
                        d.options_.persistTextTrackSettings = d.options_.playerOptions.persistTextTrackSettings;
                    }
                    d.on(d.$(".vjs-done-button"), "click", function() {
                        d.saveSettings();
                        d.close();
                    });
                    d.on(d.$(".vjs-default-button"), "click", function() {
                        d.setDefaults();
                        d.updateDisplay();
                    });
                    Z(ej, function(a) {
                        d.on(d.$(a.selector), "change", d.updateDisplay);
                    });
                    if (d.options_.persistTextTrackSettings) {
                        d.restoreSettings();
                    }
                    return d;
                }
                var c = b.prototype;
                c.dispose = function b() {
                    this.endDialog = null;
                    a.prototype.dispose.call(this);
                };
                c.createElSelect_ = function a(b, c, d) {
                    var e = this;
                    if (c === void 0) {
                        c = "";
                    }
                    if (d === void 0) {
                        d = "label";
                    }
                    var f = ej[b];
                    var g = f.id.replace("%s", this.id_);
                    var h = [
                        c,
                        g
                    ].join(" ").trim();
                    return [
                        "<" + d + ' id="' + g + '" class="' + (d === "label" ? "vjs-label" : "") + '">',
                        this.localize(f.label),
                        "</" + d + ">",
                        '<select aria-labelledby="' + h + '">', 
                    ].concat(f.options.map(function(a) {
                        var b = g + "-" + a[1].replace(/\W+/g, "");
                        return [
                            '<option id="' + b + '" value="' + a[0] + '" ',
                            'aria-labelledby="' + h + " " + b + '">',
                            e.localize(a[1]),
                            "</option>", 
                        ].join("");
                    })).concat("</select>").join("");
                };
                c.createElFgColor_ = function a() {
                    var b = "captions-text-legend-" + this.id_;
                    return [
                        '<fieldset class="vjs-fg-color vjs-track-setting">',
                        '<legend id="' + b + '">',
                        this.localize("Text"),
                        "</legend>",
                        this.createElSelect_("color", b),
                        '<span class="vjs-text-opacity vjs-opacity">',
                        this.createElSelect_("textOpacity", b),
                        "</span>",
                        "</fieldset>", 
                    ].join("");
                };
                c.createElBgColor_ = function a() {
                    var b = "captions-background-" + this.id_;
                    return [
                        '<fieldset class="vjs-bg-color vjs-track-setting">',
                        '<legend id="' + b + '">',
                        this.localize("Background"),
                        "</legend>",
                        this.createElSelect_("backgroundColor", b),
                        '<span class="vjs-bg-opacity vjs-opacity">',
                        this.createElSelect_("backgroundOpacity", b),
                        "</span>",
                        "</fieldset>", 
                    ].join("");
                };
                c.createElWinColor_ = function a() {
                    var b = "captions-window-" + this.id_;
                    return [
                        '<fieldset class="vjs-window-color vjs-track-setting">',
                        '<legend id="' + b + '">',
                        this.localize("Window"),
                        "</legend>",
                        this.createElSelect_("windowColor", b),
                        '<span class="vjs-window-opacity vjs-opacity">',
                        this.createElSelect_("windowOpacity", b),
                        "</span>",
                        "</fieldset>", 
                    ].join("");
                };
                c.createElColors_ = function a() {
                    return aF("div", {
                        className: "vjs-track-settings-colors",
                        innerHTML: [
                            this.createElFgColor_(),
                            this.createElBgColor_(),
                            this.createElWinColor_(), 
                        ].join("")
                    });
                };
                c.createElFont_ = function a() {
                    return aF("div", {
                        className: "vjs-track-settings-font",
                        innerHTML: [
                            '<fieldset class="vjs-font-percent vjs-track-setting">',
                            this.createElSelect_("fontPercent", "", "legend"),
                            "</fieldset>",
                            '<fieldset class="vjs-edge-style vjs-track-setting">',
                            this.createElSelect_("edgeStyle", "", "legend"),
                            "</fieldset>",
                            '<fieldset class="vjs-font-family vjs-track-setting">',
                            this.createElSelect_("fontFamily", "", "legend"),
                            "</fieldset>", 
                        ].join("")
                    });
                };
                c.createElControls_ = function a() {
                    var b = this.localize("restore all settings to the default values");
                    return aF("div", {
                        className: "vjs-track-settings-controls",
                        innerHTML: [
                            '<button type="button" class="vjs-default-button" title="' + b + '">',
                            this.localize("Reset"),
                            '<span class="vjs-control-text"> ' + b + "</span>",
                            "</button>",
                            '<button type="button" class="vjs-done-button">' + this.localize("Done") + "</button>", 
                        ].join("")
                    });
                };
                c.content = function a() {
                    return [
                        this.createElColors_(),
                        this.createElFont_(),
                        this.createElControls_(), 
                    ];
                };
                c.label = function a() {
                    return this.localize("Caption Settings Dialog");
                };
                c.description = function a() {
                    return this.localize("Beginning of dialog window. Escape will cancel and close the window.");
                };
                c.buildCSSClass = function b() {
                    return (a.prototype.buildCSSClass.call(this) + " vjs-text-track-settings");
                };
                c.getValues = function a() {
                    var b = this;
                    return $(ej, function(a, c, d) {
                        var e = el(b.$(c.selector), c.parser);
                        if (e !== undefined) {
                            a[d] = e;
                        }
                        return a;
                    }, {});
                };
                c.setValues = function a(b) {
                    var c = this;
                    Z(ej, function(a, d) {
                        em(c.$(a.selector), b[d], a.parser);
                    });
                };
                c.setDefaults = function a() {
                    var b = this;
                    Z(ej, function(a) {
                        var c = a.hasOwnProperty("default") ? a["default"] : 0;
                        b.$(a.selector).selectedIndex = c;
                    });
                };
                c.restoreSettings = function a() {
                    var b;
                    try {
                        b = JSON.parse(e().localStorage.getItem(d7));
                    } catch (c) {
                        V.warn(c);
                    }
                    if (b) {
                        this.setValues(b);
                    }
                };
                c.saveSettings = function a() {
                    if (!this.options_.persistTextTrackSettings) {
                        return;
                    }
                    var b = this.getValues();
                    try {
                        if (Object.keys(b).length) {
                            e().localStorage.setItem(d7, JSON.stringify(b));
                        } else {
                            e().localStorage.removeItem(d7);
                        }
                    } catch (c) {
                        V.warn(c);
                    }
                };
                c.updateDisplay = function a() {
                    var b = this.player_.getChild("textTrackDisplay");
                    if (b) {
                        b.updateDisplay();
                    }
                };
                c.conditionalBlur_ = function a() {
                    this.previouslyActiveEl_ = null;
                    var b = this.player_.controlBar;
                    var c = b && b.subsCapsButton;
                    var d = b && b.captionsButton;
                    if (c) {
                        c.focus();
                    } else if (d) {
                        d.focus();
                    }
                };
                return b;
            })(b5);
            bS.registerComponent("TextTrackSettings", en);
            var eo = (function(a) {
                (0, j.Z)(b, a);
                function b(b, c) {
                    var d;
                    var f = c.ResizeObserver || e().ResizeObserver;
                    if (c.ResizeObserver === null) {
                        f = false;
                    }
                    var g = bN({
                        createEl: !f,
                        reportTouchActivity: false
                    }, c);
                    d = a.call(this, b, g) || this;
                    d.ResizeObserver = c.ResizeObserver || e().ResizeObserver;
                    d.loadListener_ = null;
                    d.resizeObserver_ = null;
                    d.debouncedHandler_ = bu(function() {
                        d.resizeHandler();
                    }, 100, false, (0, i.Z)(d));
                    if (f) {
                        d.resizeObserver_ = new d.ResizeObserver(d.debouncedHandler_);
                        d.resizeObserver_.observe(b.el());
                    } else {
                        d.loadListener_ = function() {
                            if (!d.el_ || !d.el_.contentWindow) {
                                return;
                            }
                            var a = d.debouncedHandler_;
                            var b = (d.unloadListener_ = function() {
                                bm(this, "resize", a);
                                bm(this, "unload", b);
                                b = null;
                            });
                            bl(d.el_.contentWindow, "unload", b);
                            bl(d.el_.contentWindow, "resize", a);
                        };
                        d.one("load", d.loadListener_);
                    }
                    return d;
                }
                var c = b.prototype;
                c.createEl = function b() {
                    return a.prototype.createEl.call(this, "iframe", {
                        className: "vjs-resize-manager",
                        tabIndex: -1
                    }, {
                        "aria-hidden": "true"
                    });
                };
                c.resizeHandler = function a() {
                    if (!this.player_ || !this.player_.trigger) {
                        return;
                    }
                    this.player_.trigger("playerresize");
                };
                c.dispose = function b() {
                    if (this.debouncedHandler_) {
                        this.debouncedHandler_.cancel();
                    }
                    if (this.resizeObserver_) {
                        if (this.player_.el()) {
                            this.resizeObserver_.unobserve(this.player_.el());
                        }
                        this.resizeObserver_.disconnect();
                    }
                    if (this.loadListener_) {
                        this.off("load", this.loadListener_);
                    }
                    if (this.el_ && this.el_.contentWindow && this.unloadListener_) {
                        this.unloadListener_.call(this.el_.contentWindow);
                    }
                    this.ResizeObserver = null;
                    this.resizeObserver = null;
                    this.debouncedHandler_ = null;
                    this.loadListener_ = null;
                    a.prototype.dispose.call(this);
                };
                return b;
            })(bS);
            bS.registerComponent("ResizeManager", eo);
            var ep = {
                trackingThreshold: 20,
                liveTolerance: 15
            };
            var eq = (function(a) {
                (0, j.Z)(b, a);
                function b(b, c) {
                    var d;
                    var e = bN(ep, c, {
                        createEl: false
                    });
                    d = a.call(this, b, e) || this;
                    d.handleVisibilityChange_ = function(a) {
                        return d.handleVisibilityChange(a);
                    };
                    d.trackLiveHandler_ = function() {
                        return d.trackLive_();
                    };
                    d.handlePlay_ = function(a) {
                        return d.handlePlay(a);
                    };
                    d.handleFirstTimeupdate_ = function(a) {
                        return d.handleFirstTimeupdate(a);
                    };
                    d.handleSeeked_ = function(a) {
                        return d.handleSeeked(a);
                    };
                    d.seekToLiveEdge_ = function(a) {
                        return d.seekToLiveEdge(a);
                    };
                    d.reset_();
                    d.on(d.player_, "durationchange", function(a) {
                        return d.handleDurationchange(a);
                    });
                    d.one(d.player_, "canplay", function() {
                        return d.toggleTracking();
                    });
                    if (ap && "hidden" in g() && "visibilityState" in g()) {
                        d.on(g(), "visibilitychange", d.handleVisibilityChange_);
                    }
                    return d;
                }
                var c = b.prototype;
                c.handleVisibilityChange = function a() {
                    if (this.player_.duration() !== Infinity) {
                        return;
                    }
                    if (g().hidden) {
                        this.stopTracking();
                    } else {
                        this.startTracking();
                    }
                };
                c.trackLive_ = function a() {
                    var b = this.player_.seekable();
                    if (!b || !b.length) {
                        return;
                    }
                    var c = Number(e().performance.now().toFixed(4));
                    var d = this.lastTime_ === -1 ? 0 : (c - this.lastTime_) / 1000;
                    this.lastTime_ = c;
                    this.pastSeekEnd_ = this.pastSeekEnd() + d;
                    var f = this.liveCurrentTime();
                    var g = this.player_.currentTime();
                    var h = this.player_.paused() || this.seekedBehindLive_ || Math.abs(f - g) > this.options_.liveTolerance;
                    if (!this.timeupdateSeen_ || f === Infinity) {
                        h = false;
                    }
                    if (h !== this.behindLiveEdge_) {
                        this.behindLiveEdge_ = h;
                        this.trigger("liveedgechange");
                    }
                };
                c.handleDurationchange = function a() {
                    this.toggleTracking();
                };
                c.toggleTracking = function a() {
                    if (this.player_.duration() === Infinity && this.liveWindow() >= this.options_.trackingThreshold) {
                        if (this.player_.options_.liveui) {
                            this.player_.addClass("vjs-liveui");
                        }
                        this.startTracking();
                    } else {
                        this.player_.removeClass("vjs-liveui");
                        this.stopTracking();
                    }
                };
                c.startTracking = function a() {
                    if (this.isTracking()) {
                        return;
                    }
                    if (!this.timeupdateSeen_) {
                        this.timeupdateSeen_ = this.player_.hasStarted();
                    }
                    this.trackingInterval_ = this.setInterval(this.trackLiveHandler_, br);
                    this.trackLive_();
                    this.on(this.player_, [
                        "play",
                        "pause"
                    ], this.trackLiveHandler_);
                    if (!this.timeupdateSeen_) {
                        this.one(this.player_, "play", this.handlePlay_);
                        this.one(this.player_, "timeupdate", this.handleFirstTimeupdate_);
                    } else {
                        this.on(this.player_, "seeked", this.handleSeeked_);
                    }
                };
                c.handleFirstTimeupdate = function a() {
                    this.timeupdateSeen_ = true;
                    this.on(this.player_, "seeked", this.handleSeeked_);
                };
                c.handleSeeked = function a() {
                    var b = Math.abs(this.liveCurrentTime() - this.player_.currentTime());
                    this.seekedBehindLive_ = this.nextSeekedFromUser_ && b > 2;
                    this.nextSeekedFromUser_ = false;
                    this.trackLive_();
                };
                c.handlePlay = function a() {
                    this.one(this.player_, "timeupdate", this.seekToLiveEdge_);
                };
                c.reset_ = function a() {
                    this.lastTime_ = -1;
                    this.pastSeekEnd_ = 0;
                    this.lastSeekEnd_ = -1;
                    this.behindLiveEdge_ = true;
                    this.timeupdateSeen_ = false;
                    this.seekedBehindLive_ = false;
                    this.nextSeekedFromUser_ = false;
                    this.clearInterval(this.trackingInterval_);
                    this.trackingInterval_ = null;
                    this.off(this.player_, [
                        "play",
                        "pause"
                    ], this.trackLiveHandler_);
                    this.off(this.player_, "seeked", this.handleSeeked_);
                    this.off(this.player_, "play", this.handlePlay_);
                    this.off(this.player_, "timeupdate", this.handleFirstTimeupdate_);
                    this.off(this.player_, "timeupdate", this.seekToLiveEdge_);
                };
                c.nextSeekedFromUser = function a() {
                    this.nextSeekedFromUser_ = true;
                };
                c.stopTracking = function a() {
                    if (!this.isTracking()) {
                        return;
                    }
                    this.reset_();
                    this.trigger("liveedgechange");
                };
                c.seekableEnd = function a() {
                    var b = this.player_.seekable();
                    var c = [];
                    var d = b ? b.length : 0;
                    while(d--){
                        c.push(b.end(d));
                    }
                    return c.length ? c.sort()[c.length - 1] : Infinity;
                };
                c.seekableStart = function a() {
                    var b = this.player_.seekable();
                    var c = [];
                    var d = b ? b.length : 0;
                    while(d--){
                        c.push(b.start(d));
                    }
                    return c.length ? c.sort()[0] : 0;
                };
                c.liveWindow = function a() {
                    var b = this.liveCurrentTime();
                    if (b === Infinity) {
                        return 0;
                    }
                    return b - this.seekableStart();
                };
                c.isLive = function a() {
                    return this.isTracking();
                };
                c.atLiveEdge = function a() {
                    return !this.behindLiveEdge();
                };
                c.liveCurrentTime = function a() {
                    return this.pastSeekEnd() + this.seekableEnd();
                };
                c.pastSeekEnd = function a() {
                    var b = this.seekableEnd();
                    if (this.lastSeekEnd_ !== -1 && b !== this.lastSeekEnd_) {
                        this.pastSeekEnd_ = 0;
                    }
                    this.lastSeekEnd_ = b;
                    return this.pastSeekEnd_;
                };
                c.behindLiveEdge = function a() {
                    return this.behindLiveEdge_;
                };
                c.isTracking = function a() {
                    return typeof this.trackingInterval_ === "number";
                };
                c.seekToLiveEdge = function a() {
                    this.seekedBehindLive_ = false;
                    if (this.atLiveEdge()) {
                        return;
                    }
                    this.nextSeekedFromUser_ = false;
                    this.player_.currentTime(this.liveCurrentTime());
                };
                c.dispose = function b() {
                    this.off(g(), "visibilitychange", this.handleVisibilityChange_);
                    this.stopTracking();
                    a.prototype.dispose.call(this);
                };
                return b;
            })(bS);
            bS.registerComponent("LiveTracker", eq);
            var er = function a(b) {
                var c = b.el();
                if (c.hasAttribute("src")) {
                    b.triggerSourceset(c.src);
                    return true;
                }
                var d = b.$$("source");
                var e = [];
                var f = "";
                if (!d.length) {
                    return false;
                }
                for(var g = 0; g < d.length; g++){
                    var h = d[g].src;
                    if (h && e.indexOf(h) === -1) {
                        e.push(h);
                    }
                }
                if (!e.length) {
                    return false;
                }
                if (e.length === 1) {
                    f = e[0];
                }
                b.triggerSourceset(f);
                return true;
            };
            var es = Object.defineProperty({}, "innerHTML", {
                get: function a() {
                    return this.cloneNode(true).innerHTML;
                },
                set: function a(b) {
                    var c = g().createElement(this.nodeName.toLowerCase());
                    c.innerHTML = b;
                    var d = g().createDocumentFragment();
                    while(c.childNodes.length){
                        d.appendChild(c.childNodes[0]);
                    }
                    this.innerText = "";
                    e().Element.prototype.appendChild.call(this, d);
                    return this.innerHTML;
                }
            });
            var et = function a(b, c) {
                var d = {};
                for(var e = 0; e < b.length; e++){
                    d = Object.getOwnPropertyDescriptor(b[e], c);
                    if (d && d.set && d.get) {
                        break;
                    }
                }
                d.enumerable = true;
                d.configurable = true;
                return d;
            };
            var eu = function a(b) {
                return et([
                    b.el(),
                    e().HTMLMediaElement.prototype,
                    e().Element.prototype,
                    es, 
                ], "innerHTML");
            };
            var ev = function a(b) {
                var c = b.el();
                if (c.resetSourceWatch_) {
                    return;
                }
                var d = {};
                var e = eu(b);
                var f = function a(d) {
                    return function() {
                        for(var a = arguments.length, e = new Array(a), f = 0; f < a; f++){
                            e[f] = arguments[f];
                        }
                        var g = d.apply(c, e);
                        er(b);
                        return g;
                    };
                };
                [
                    "append",
                    "appendChild",
                    "insertAdjacentHTML"
                ].forEach(function(a) {
                    if (!c[a]) {
                        return;
                    }
                    d[a] = c[a];
                    c[a] = f(d[a]);
                });
                Object.defineProperty(c, "innerHTML", bN(e, {
                    set: f(e.set)
                }));
                c.resetSourceWatch_ = function() {
                    c.resetSourceWatch_ = null;
                    Object.keys(d).forEach(function(a) {
                        c[a] = d[a];
                    });
                    Object.defineProperty(c, "innerHTML", e);
                };
                b.one("sourceset", c.resetSourceWatch_);
            };
            var ew = Object.defineProperty({}, "src", {
                get: function a() {
                    if (this.hasAttribute("src")) {
                        return cl(e().Element.prototype.getAttribute.call(this, "src"));
                    }
                    return "";
                },
                set: function a(b) {
                    e().Element.prototype.setAttribute.call(this, "src", b);
                    return b;
                }
            });
            var ex = function a(b) {
                return et([
                    b.el(),
                    e().HTMLMediaElement.prototype,
                    ew, 
                ], "src");
            };
            var ey = function a(b) {
                if (!b.featuresSourceset) {
                    return;
                }
                var c = b.el();
                if (c.resetSourceset_) {
                    return;
                }
                var d = ex(b);
                var e = c.setAttribute;
                var f = c.load;
                Object.defineProperty(c, "src", bN(d, {
                    set: function a(e) {
                        var f = d.set.call(c, e);
                        b.triggerSourceset(c.src);
                        return f;
                    }
                }));
                c.setAttribute = function(a, d) {
                    var f = e.call(c, a, d);
                    if (/src/i.test(a)) {
                        b.triggerSourceset(c.src);
                    }
                    return f;
                };
                c.load = function() {
                    var a = f.call(c);
                    if (!er(b)) {
                        b.triggerSourceset("");
                        ev(b);
                    }
                    return a;
                };
                if (c.currentSrc) {
                    b.triggerSourceset(c.currentSrc);
                } else if (!er(b)) {
                    ev(b);
                }
                c.resetSourceset_ = function() {
                    c.resetSourceset_ = null;
                    c.load = f;
                    c.setAttribute = e;
                    Object.defineProperty(c, "src", d);
                    if (c.resetSourceWatch_) {
                        c.resetSourceWatch_();
                    }
                };
            };
            var ez = function a(b, c, d, e) {
                if (e === void 0) {
                    e = true;
                }
                var f = function a(d) {
                    return Object.defineProperty(b, c, {
                        value: d,
                        enumerable: true,
                        writable: true
                    });
                };
                var g = {
                    configurable: true,
                    enumerable: true,
                    get: function a() {
                        var b = d();
                        f(b);
                        return b;
                    }
                };
                if (e) {
                    g.set = f;
                }
                return Object.defineProperty(b, c, g);
            };
            var eA = (function(a) {
                (0, j.Z)(b, a);
                function b(b, c) {
                    var d;
                    d = a.call(this, b, c) || this;
                    var e = b.source;
                    var f = false;
                    if (e && (d.el_.currentSrc !== e.src || (b.tag && b.tag.initNetworkState_ === 3))) {
                        d.setSource(e);
                    } else {
                        d.handleLateInit_(d.el_);
                    }
                    if (b.enableSourceset) {
                        d.setupSourcesetHandling_();
                    }
                    d.isScrubbing_ = false;
                    if (d.el_.hasChildNodes()) {
                        var g = d.el_.childNodes;
                        var h = g.length;
                        var i = [];
                        while(h--){
                            var j = g[h];
                            var k = j.nodeName.toLowerCase();
                            if (k === "track") {
                                if (!d.featuresNativeTextTracks) {
                                    i.push(j);
                                } else {
                                    d.remoteTextTrackEls().addTrackElement_(j);
                                    d.remoteTextTracks().addTrack(j.track);
                                    d.textTracks().addTrack(j.track);
                                    if (!f && !d.el_.hasAttribute("crossorigin") && cn(j.src)) {
                                        f = true;
                                    }
                                }
                            }
                        }
                        for(var l = 0; l < i.length; l++){
                            d.el_.removeChild(i[l]);
                        }
                    }
                    d.proxyNativeTracks_();
                    if (d.featuresNativeTextTracks && f) {
                        V.warn("Text Tracks are being loaded from another origin but the crossorigin attribute isn't used.\n" + "This may prevent text tracks from loading.");
                    }
                    d.restoreMetadataTracksInIOSNativePlayer_();
                    if ((as || au || ak) && b.nativeControlsForTouch === true) {
                        d.setControls(true);
                    }
                    d.proxyWebkitFullscreen_();
                    d.triggerReady();
                    return d;
                }
                var c = b.prototype;
                c.dispose = function c() {
                    if (this.el_ && this.el_.resetSourceset_) {
                        this.el_.resetSourceset_();
                    }
                    b.disposeMediaElement(this.el_);
                    this.options_ = null;
                    a.prototype.dispose.call(this);
                };
                c.setupSourcesetHandling_ = function a() {
                    ey(this);
                };
                c.restoreMetadataTracksInIOSNativePlayer_ = function a() {
                    var b = this.textTracks();
                    var c;
                    var d = function a() {
                        c = [];
                        for(var d = 0; d < b.length; d++){
                            var e = b[d];
                            if (e.kind === "metadata") {
                                c.push({
                                    track: e,
                                    storedMode: e.mode
                                });
                            }
                        }
                    };
                    d();
                    b.addEventListener("change", d);
                    this.on("dispose", function() {
                        return b.removeEventListener("change", d);
                    });
                    var e = function a() {
                        for(var d = 0; d < c.length; d++){
                            var e = c[d];
                            if (e.track.mode === "disabled" && e.track.mode !== e.storedMode) {
                                e.track.mode = e.storedMode;
                            }
                        }
                        b.removeEventListener("change", a);
                    };
                    this.on("webkitbeginfullscreen", function() {
                        b.removeEventListener("change", d);
                        b.removeEventListener("change", e);
                        b.addEventListener("change", e);
                    });
                    this.on("webkitendfullscreen", function() {
                        b.removeEventListener("change", d);
                        b.addEventListener("change", d);
                        b.removeEventListener("change", e);
                    });
                };
                c.overrideNative_ = function a(b, c) {
                    var d = this;
                    if (c !== this["featuresNative" + b + "Tracks"]) {
                        return;
                    }
                    var e = b.toLowerCase();
                    if (this[e + "TracksListeners_"]) {
                        Object.keys(this[e + "TracksListeners_"]).forEach(function(a) {
                            var b = d.el()[e + "Tracks"];
                            b.removeEventListener(a, d[e + "TracksListeners_"][a]);
                        });
                    }
                    this["featuresNative" + b + "Tracks"] = !c;
                    this[e + "TracksListeners_"] = null;
                    this.proxyNativeTracksForType_(e);
                };
                c.overrideNativeAudioTracks = function a(b) {
                    this.overrideNative_("Audio", b);
                };
                c.overrideNativeVideoTracks = function a(b) {
                    this.overrideNative_("Video", b);
                };
                c.proxyNativeTracksForType_ = function a(b) {
                    var c = this;
                    var d = cz[b];
                    var e = this.el()[d.getterName];
                    var f = this[d.getterName]();
                    if (!this["featuresNative" + d.capitalName + "Tracks"] || !e || !e.addEventListener) {
                        return;
                    }
                    var g = {
                        change: function a(d) {
                            var e = {
                                type: "change",
                                target: f,
                                currentTarget: f,
                                srcElement: f
                            };
                            f.trigger(e);
                            if (b === "text") {
                                c[cA.remoteText.getterName]().trigger(e);
                            }
                        },
                        addtrack: function a(b) {
                            f.addTrack(b.track);
                        },
                        removetrack: function a(b) {
                            f.removeTrack(b.track);
                        }
                    };
                    var h = function a() {
                        var b = [];
                        for(var c = 0; c < f.length; c++){
                            var d = false;
                            for(var g = 0; g < e.length; g++){
                                if (e[g] === f[c]) {
                                    d = true;
                                    break;
                                }
                            }
                            if (!d) {
                                b.push(f[c]);
                            }
                        }
                        while(b.length){
                            f.removeTrack(b.shift());
                        }
                    };
                    this[d.getterName + "Listeners_"] = g;
                    Object.keys(g).forEach(function(a) {
                        var b = g[a];
                        e.addEventListener(a, b);
                        c.on("dispose", function(c) {
                            return e.removeEventListener(a, b);
                        });
                    });
                    this.on("loadstart", h);
                    this.on("dispose", function(a) {
                        return c.off("loadstart", h);
                    });
                };
                c.proxyNativeTracks_ = function a() {
                    var b = this;
                    cz.names.forEach(function(a) {
                        b.proxyNativeTracksForType_(a);
                    });
                };
                c.createEl = function a() {
                    var c = this.options_.tag;
                    if (!c || !(this.options_.playerElIngest || this.movingMediaElementInDOM)) {
                        if (c) {
                            var d = c.cloneNode(true);
                            if (c.parentNode) {
                                c.parentNode.insertBefore(d, c);
                            }
                            b.disposeMediaElement(c);
                            c = d;
                        } else {
                            c = g().createElement("video");
                            var e = this.options_.tag && aN(this.options_.tag);
                            var f = bN({}, e);
                            if (!as || this.options_.nativeControlsForTouch !== true) {
                                delete f.controls;
                            }
                            aM(c, _(f, {
                                id: this.options_.techId,
                                class: "vjs-tech"
                            }));
                        }
                        c.playerId = this.options_.playerId;
                    }
                    if (typeof this.options_.preload !== "undefined") {
                        aP(c, "preload", this.options_.preload);
                    }
                    if (this.options_.disablePictureInPicture !== undefined) {
                        c.disablePictureInPicture = this.options_.disablePictureInPicture;
                    }
                    var h = [
                        "loop",
                        "muted",
                        "playsinline",
                        "autoplay", 
                    ];
                    for(var i = 0; i < h.length; i++){
                        var j = h[i];
                        var k = this.options_[j];
                        if (typeof k !== "undefined") {
                            if (k) {
                                aP(c, j, j);
                            } else {
                                aQ(c, j);
                            }
                            c[j] = k;
                        }
                    }
                    return c;
                };
                c.handleLateInit_ = function a(b) {
                    if (b.networkState === 0 || b.networkState === 3) {
                        return;
                    }
                    if (b.readyState === 0) {
                        var c = false;
                        var d = function a() {
                            c = true;
                        };
                        this.on("loadstart", d);
                        var e = function a() {
                            if (!c) {
                                this.trigger("loadstart");
                            }
                        };
                        this.on("loadedmetadata", e);
                        this.ready(function() {
                            this.off("loadstart", d);
                            this.off("loadedmetadata", e);
                            if (!c) {
                                this.trigger("loadstart");
                            }
                        });
                        return;
                    }
                    var f = [
                        "loadstart"
                    ];
                    f.push("loadedmetadata");
                    if (b.readyState >= 2) {
                        f.push("loadeddata");
                    }
                    if (b.readyState >= 3) {
                        f.push("canplay");
                    }
                    if (b.readyState >= 4) {
                        f.push("canplaythrough");
                    }
                    this.ready(function() {
                        f.forEach(function(a) {
                            this.trigger(a);
                        }, this);
                    });
                };
                c.setScrubbing = function a(b) {
                    this.isScrubbing_ = b;
                };
                c.scrubbing = function a() {
                    return this.isScrubbing_;
                };
                c.setCurrentTime = function a(b) {
                    try {
                        if (this.isScrubbing_ && this.el_.fastSeek && aw) {
                            this.el_.fastSeek(b);
                        } else {
                            this.el_.currentTime = b;
                        }
                    } catch (c) {
                        V(c, "Video is not ready. (Video.js)");
                    }
                };
                c.duration = function a() {
                    var b = this;
                    if (this.el_.duration === Infinity && ai && an && this.el_.currentTime === 0) {
                        var c = function a() {
                            if (b.el_.currentTime > 0) {
                                if (b.el_.duration === Infinity) {
                                    b.trigger("durationchange");
                                }
                                b.off("timeupdate", a);
                            }
                        };
                        this.on("timeupdate", c);
                        return NaN;
                    }
                    return this.el_.duration || NaN;
                };
                c.width = function a() {
                    return this.el_.offsetWidth;
                };
                c.height = function a() {
                    return this.el_.offsetHeight;
                };
                c.proxyWebkitFullscreen_ = function a() {
                    var b = this;
                    if (!("webkitDisplayingFullscreen" in this.el_)) {
                        return;
                    }
                    var c = function a() {
                        this.trigger("fullscreenchange", {
                            isFullscreen: false
                        });
                    };
                    var d = function a() {
                        if ("webkitPresentationMode" in this.el_ && this.el_.webkitPresentationMode !== "picture-in-picture") {
                            this.one("webkitendfullscreen", c);
                            this.trigger("fullscreenchange", {
                                isFullscreen: true,
                                nativeIOSFullscreen: true
                            });
                        }
                    };
                    this.on("webkitbeginfullscreen", d);
                    this.on("dispose", function() {
                        b.off("webkitbeginfullscreen", d);
                        b.off("webkitendfullscreen", c);
                    });
                };
                c.supportsFullScreen = function a() {
                    if (typeof this.el_.webkitEnterFullScreen === "function") {
                        var b = (e().navigator && e().navigator.userAgent) || "";
                        if (/Android/.test(b) || !/Chrome|Mac OS X 10.5/.test(b)) {
                            return true;
                        }
                    }
                    return false;
                };
                c.enterFullScreen = function a() {
                    var b = this.el_;
                    if (b.paused && b.networkState <= b.HAVE_METADATA) {
                        b_(this.el_.play());
                        this.setTimeout(function() {
                            b.pause();
                            try {
                                b.webkitEnterFullScreen();
                            } catch (a) {
                                this.trigger("fullscreenerror", a);
                            }
                        }, 0);
                    } else {
                        try {
                            b.webkitEnterFullScreen();
                        } catch (c) {
                            this.trigger("fullscreenerror", c);
                        }
                    }
                };
                c.exitFullScreen = function a() {
                    if (!this.el_.webkitDisplayingFullscreen) {
                        this.trigger("fullscreenerror", new Error("The video is not fullscreen"));
                        return;
                    }
                    this.el_.webkitExitFullScreen();
                };
                c.requestPictureInPicture = function a() {
                    return this.el_.requestPictureInPicture();
                };
                c.src = function a(b) {
                    if (b === undefined) {
                        return this.el_.src;
                    }
                    this.setSrc(b);
                };
                c.reset = function a() {
                    b.resetMediaElement(this.el_);
                };
                c.currentSrc = function a() {
                    if (this.currentSource_) {
                        return this.currentSource_.src;
                    }
                    return this.el_.currentSrc;
                };
                c.setControls = function a(b) {
                    this.el_.controls = !!b;
                };
                c.addTextTrack = function b(c, d, e) {
                    if (!this.featuresNativeTextTracks) {
                        return a.prototype.addTextTrack.call(this, c, d, e);
                    }
                    return this.el_.addTextTrack(c, d, e);
                };
                c.createRemoteTextTrack = function b(c) {
                    if (!this.featuresNativeTextTracks) {
                        return a.prototype.createRemoteTextTrack.call(this, c);
                    }
                    var d = g().createElement("track");
                    if (c.kind) {
                        d.kind = c.kind;
                    }
                    if (c.label) {
                        d.label = c.label;
                    }
                    if (c.language || c.srclang) {
                        d.srclang = c.language || c.srclang;
                    }
                    if (c["default"]) {
                        d["default"] = c["default"];
                    }
                    if (c.id) {
                        d.id = c.id;
                    }
                    if (c.src) {
                        d.src = c.src;
                    }
                    return d;
                };
                c.addRemoteTextTrack = function b(c, d) {
                    var e = a.prototype.addRemoteTextTrack.call(this, c, d);
                    if (this.featuresNativeTextTracks) {
                        this.el().appendChild(e);
                    }
                    return e;
                };
                c.removeRemoteTextTrack = function b(c) {
                    a.prototype.removeRemoteTextTrack.call(this, c);
                    if (this.featuresNativeTextTracks) {
                        var d = this.$$("track");
                        var e = d.length;
                        while(e--){
                            if (c === d[e] || c === d[e].track) {
                                this.el().removeChild(d[e]);
                            }
                        }
                    }
                };
                c.getVideoPlaybackQuality = function a() {
                    if (typeof this.el().getVideoPlaybackQuality === "function") {
                        return this.el().getVideoPlaybackQuality();
                    }
                    var b = {};
                    if (typeof this.el().webkitDroppedFrameCount !== "undefined" && typeof this.el().webkitDecodedFrameCount !== "undefined") {
                        b.droppedVideoFrames = this.el().webkitDroppedFrameCount;
                        b.totalVideoFrames = this.el().webkitDecodedFrameCount;
                    }
                    if (e().performance && typeof e().performance.now === "function") {
                        b.creationTime = e().performance.now();
                    } else if (e().performance && e().performance.timing && typeof e().performance.timing.navigationStart === "number") {
                        b.creationTime = e().Date.now() - e().performance.timing.navigationStart;
                    }
                    return b;
                };
                return b;
            })(cD);
            ez(eA, "TEST_VID", function() {
                if (!aB()) {
                    return;
                }
                var a = g().createElement("video");
                var b = g().createElement("track");
                b.kind = "captions";
                b.srclang = "en";
                b.label = "English";
                a.appendChild(b);
                return a;
            });
            eA.isSupported = function() {
                try {
                    eA.TEST_VID.volume = 0.5;
                } catch (a) {
                    return false;
                }
                return !!(eA.TEST_VID && eA.TEST_VID.canPlayType);
            };
            eA.canPlayType = function(a) {
                return eA.TEST_VID.canPlayType(a);
            };
            eA.canPlaySource = function(a, b) {
                return eA.canPlayType(a.type);
            };
            eA.canControlVolume = function() {
                try {
                    var a = eA.TEST_VID.volume;
                    eA.TEST_VID.volume = a / 2 + 0.1;
                    return a !== eA.TEST_VID.volume;
                } catch (b) {
                    return false;
                }
            };
            eA.canMuteVolume = function() {
                try {
                    var a = eA.TEST_VID.muted;
                    eA.TEST_VID.muted = !a;
                    if (eA.TEST_VID.muted) {
                        aP(eA.TEST_VID, "muted", "muted");
                    } else {
                        aQ(eA.TEST_VID, "muted", "muted");
                    }
                    return a !== eA.TEST_VID.muted;
                } catch (b) {
                    return false;
                }
            };
            eA.canControlPlaybackRate = function() {
                if (ai && an && ao < 58) {
                    return false;
                }
                try {
                    var a = eA.TEST_VID.playbackRate;
                    eA.TEST_VID.playbackRate = a / 2 + 0.1;
                    return a !== eA.TEST_VID.playbackRate;
                } catch (b) {
                    return false;
                }
            };
            eA.canOverrideAttributes = function() {
                try {
                    var a = function a() {};
                    Object.defineProperty(g().createElement("video"), "src", {
                        get: a,
                        set: a
                    });
                    Object.defineProperty(g().createElement("audio"), "src", {
                        get: a,
                        set: a
                    });
                    Object.defineProperty(g().createElement("video"), "innerHTML", {
                        get: a,
                        set: a
                    });
                    Object.defineProperty(g().createElement("audio"), "innerHTML", {
                        get: a,
                        set: a
                    });
                } catch (b) {
                    return false;
                }
                return true;
            };
            eA.supportsNativeTextTracks = function() {
                return aw || (av && an);
            };
            eA.supportsNativeVideoTracks = function() {
                return !!(eA.TEST_VID && eA.TEST_VID.videoTracks);
            };
            eA.supportsNativeAudioTracks = function() {
                return !!(eA.TEST_VID && eA.TEST_VID.audioTracks);
            };
            eA.Events = [
                "loadstart",
                "suspend",
                "abort",
                "error",
                "emptied",
                "stalled",
                "loadedmetadata",
                "loadeddata",
                "canplay",
                "canplaythrough",
                "playing",
                "waiting",
                "seeking",
                "seeked",
                "ended",
                "durationchange",
                "timeupdate",
                "progress",
                "play",
                "pause",
                "ratechange",
                "resize",
                "volumechange", 
            ];
            [
                [
                    "featuresVolumeControl",
                    "canControlVolume"
                ],
                [
                    "featuresMuteControl",
                    "canMuteVolume"
                ],
                [
                    "featuresPlaybackRate",
                    "canControlPlaybackRate"
                ],
                [
                    "featuresSourceset",
                    "canOverrideAttributes"
                ],
                [
                    "featuresNativeTextTracks",
                    "supportsNativeTextTracks"
                ],
                [
                    "featuresNativeVideoTracks",
                    "supportsNativeVideoTracks"
                ],
                [
                    "featuresNativeAudioTracks",
                    "supportsNativeAudioTracks"
                ], 
            ].forEach(function(a) {
                var b = a[0], c = a[1];
                ez(eA.prototype, b, function() {
                    return eA[c]();
                }, true);
            });
            eA.prototype.movingMediaElementInDOM = !av;
            eA.prototype.featuresFullscreenResize = true;
            eA.prototype.featuresProgressEvents = true;
            eA.prototype.featuresTimeupdateEvents = true;
            var eB;
            eA.patchCanPlayType = function() {
                if (aj >= 4.0 && !al && !an) {
                    eB = eA.TEST_VID && eA.TEST_VID.constructor.prototype.canPlayType;
                    eA.TEST_VID.constructor.prototype.canPlayType = function(a) {
                        var b = /^application\/(?:x-|vnd\.apple\.)mpegurl/i;
                        if (a && b.test(a)) {
                            return "maybe";
                        }
                        return eB.call(this, a);
                    };
                }
            };
            eA.unpatchCanPlayType = function() {
                var a = eA.TEST_VID.constructor.prototype.canPlayType;
                if (eB) {
                    eA.TEST_VID.constructor.prototype.canPlayType = eB;
                }
                return a;
            };
            eA.patchCanPlayType();
            eA.disposeMediaElement = function(a) {
                if (!a) {
                    return;
                }
                if (a.parentNode) {
                    a.parentNode.removeChild(a);
                }
                while(a.hasChildNodes()){
                    a.removeChild(a.firstChild);
                }
                a.removeAttribute("src");
                if (typeof a.load === "function") {
                    (function() {
                        try {
                            a.load();
                        } catch (b) {}
                    })();
                }
            };
            eA.resetMediaElement = function(a) {
                if (!a) {
                    return;
                }
                var b = a.querySelectorAll("source");
                var c = b.length;
                while(c--){
                    a.removeChild(b[c]);
                }
                a.removeAttribute("src");
                if (typeof a.load === "function") {
                    (function() {
                        try {
                            a.load();
                        } catch (b) {}
                    })();
                }
            };
            [
                "muted",
                "defaultMuted",
                "autoplay",
                "controls",
                "loop",
                "playsinline", 
            ].forEach(function(a) {
                eA.prototype[a] = function() {
                    return this.el_[a] || this.el_.hasAttribute(a);
                };
            });
            [
                "muted",
                "defaultMuted",
                "autoplay",
                "loop",
                "playsinline", 
            ].forEach(function(a) {
                eA.prototype["set" + bL(a)] = function(b) {
                    this.el_[a] = b;
                    if (b) {
                        this.el_.setAttribute(a, a);
                    } else {
                        this.el_.removeAttribute(a);
                    }
                };
            });
            [
                "paused",
                "currentTime",
                "buffered",
                "volume",
                "poster",
                "preload",
                "error",
                "seeking",
                "seekable",
                "ended",
                "playbackRate",
                "defaultPlaybackRate",
                "disablePictureInPicture",
                "played",
                "networkState",
                "readyState",
                "videoWidth",
                "videoHeight",
                "crossOrigin", 
            ].forEach(function(a) {
                eA.prototype[a] = function() {
                    return this.el_[a];
                };
            });
            [
                "volume",
                "src",
                "poster",
                "preload",
                "playbackRate",
                "defaultPlaybackRate",
                "disablePictureInPicture",
                "crossOrigin", 
            ].forEach(function(a) {
                eA.prototype["set" + bL(a)] = function(b) {
                    this.el_[a] = b;
                };
            });
            [
                "pause",
                "load",
                "play", 
            ].forEach(function(a) {
                eA.prototype[a] = function() {
                    return this.el_[a]();
                };
            });
            cD.withSourceHandlers(eA);
            eA.nativeSourceHandler = {};
            eA.nativeSourceHandler.canPlayType = function(a) {
                try {
                    return eA.TEST_VID.canPlayType(a);
                } catch (b) {
                    return "";
                }
            };
            eA.nativeSourceHandler.canHandleSource = function(a, b) {
                if (a.type) {
                    return eA.nativeSourceHandler.canPlayType(a.type);
                } else if (a.src) {
                    var c = cm(a.src);
                    return eA.nativeSourceHandler.canPlayType("video/" + c);
                }
                return "";
            };
            eA.nativeSourceHandler.handleSource = function(a, b, c) {
                b.setSrc(a.src);
            };
            eA.nativeSourceHandler.dispose = function() {};
            eA.registerSourceHandler(eA.nativeSourceHandler);
            cD.registerTech("Html5", eA);
            var eC = [
                "progress",
                "abort",
                "suspend",
                "emptied",
                "stalled",
                "loadedmetadata",
                "loadeddata",
                "timeupdate",
                "resize",
                "volumechange",
                "texttrackchange", 
            ];
            var eD = {
                canplay: "CanPlay",
                canplaythrough: "CanPlayThrough",
                playing: "Playing",
                seeked: "Seeked"
            };
            var eE = [
                "tiny",
                "xsmall",
                "small",
                "medium",
                "large",
                "xlarge",
                "huge", 
            ];
            var eF = {};
            eE.forEach(function(a) {
                var b = a.charAt(0) === "x" ? "x-" + a.substring(1) : a;
                eF[a] = "vjs-layout-" + b;
            });
            var eG = {
                tiny: 210,
                xsmall: 320,
                small: 425,
                medium: 768,
                large: 1440,
                xlarge: 2560,
                huge: Infinity
            };
            var eH = (function(a) {
                (0, j.Z)(b, a);
                function b(c, d, e) {
                    var f;
                    c.id = c.id || d.id || "vjs_video_" + bc();
                    d = _(b.getTagSettings(c), d);
                    d.initChildren = false;
                    d.createEl = false;
                    d.evented = false;
                    d.reportTouchActivity = false;
                    if (!d.language) {
                        if (typeof c.closest === "function") {
                            var h = c.closest("[lang]");
                            if (h && h.getAttribute) {
                                d.language = h.getAttribute("lang");
                            }
                        } else {
                            var j = c;
                            while(j && j.nodeType === 1){
                                if (aN(j).hasOwnProperty("lang")) {
                                    d.language = j.getAttribute("lang");
                                    break;
                                }
                                j = j.parentNode;
                            }
                        }
                    }
                    f = a.call(this, null, d, e) || this;
                    f.boundDocumentFullscreenChange_ = function(a) {
                        return f.documentFullscreenChange_(a);
                    };
                    f.boundFullWindowOnEscKey_ = function(a) {
                        return f.fullWindowOnEscKey(a);
                    };
                    f.boundUpdateStyleEl_ = function(a) {
                        return f.updateStyleEl_(a);
                    };
                    f.boundApplyInitTime_ = function(a) {
                        return f.applyInitTime_(a);
                    };
                    f.boundUpdateCurrentBreakpoint_ = function(a) {
                        return f.updateCurrentBreakpoint_(a);
                    };
                    f.boundHandleTechClick_ = function(a) {
                        return f.handleTechClick_(a);
                    };
                    f.boundHandleTechDoubleClick_ = function(a) {
                        return f.handleTechDoubleClick_(a);
                    };
                    f.boundHandleTechTouchStart_ = function(a) {
                        return f.handleTechTouchStart_(a);
                    };
                    f.boundHandleTechTouchMove_ = function(a) {
                        return f.handleTechTouchMove_(a);
                    };
                    f.boundHandleTechTouchEnd_ = function(a) {
                        return f.handleTechTouchEnd_(a);
                    };
                    f.boundHandleTechTap_ = function(a) {
                        return f.handleTechTap_(a);
                    };
                    f.isFullscreen_ = false;
                    f.log = W(f.id_);
                    f.fsApi_ = M;
                    f.isPosterFromTech_ = false;
                    f.queuedCallbacks_ = [];
                    f.isReady_ = false;
                    f.hasStarted_ = false;
                    f.userActive_ = false;
                    f.debugEnabled_ = false;
                    if (!f.options_ || !f.options_.techOrder || !f.options_.techOrder.length) {
                        throw new Error("No techOrder specified. Did you overwrite " + "videojs.options instead of just changing the " + "properties you want to override?");
                    }
                    f.tag = c;
                    f.tagAttributes = c && aN(c);
                    f.language(f.options_.language);
                    if (d.languages) {
                        var k = {};
                        Object.getOwnPropertyNames(d.languages).forEach(function(a) {
                            k[a.toLowerCase()] = d.languages[a];
                        });
                        f.languages_ = k;
                    } else {
                        f.languages_ = b.prototype.options_.languages;
                    }
                    f.resetCache_();
                    f.poster_ = d.poster || "";
                    f.controls_ = !!d.controls;
                    c.controls = false;
                    c.removeAttribute("controls");
                    f.changingSrc_ = false;
                    f.playCallbacks_ = [];
                    f.playTerminatedQueue_ = [];
                    if (c.hasAttribute("autoplay")) {
                        f.autoplay(true);
                    } else {
                        f.autoplay(f.options_.autoplay);
                    }
                    if (d.plugins) {
                        Object.keys(d.plugins).forEach(function(a) {
                            if (typeof f[a] !== "function") {
                                throw new Error('plugin "' + a + '" does not exist');
                            }
                        });
                    }
                    f.scrubbing_ = false;
                    f.el_ = f.createEl();
                    bH((0, i.Z)(f), {
                        eventBusKey: "el_"
                    });
                    if (f.fsApi_.requestFullscreen) {
                        bl(g(), f.fsApi_.fullscreenchange, f.boundDocumentFullscreenChange_);
                        f.on(f.fsApi_.fullscreenchange, f.boundDocumentFullscreenChange_);
                    }
                    if (f.fluid_) {
                        f.on([
                            "playerreset",
                            "resize"
                        ], f.boundUpdateStyleEl_);
                    }
                    var l = bN(f.options_);
                    if (d.plugins) {
                        Object.keys(d.plugins).forEach(function(a) {
                            f[a](d.plugins[a]);
                        });
                    }
                    if (d.debug) {
                        f.debug(true);
                    }
                    f.options_.playerOptions = l;
                    f.middleware_ = [];
                    f.playbackRates(d.playbackRates);
                    f.initChildren();
                    f.isAudio(c.nodeName.toLowerCase() === "audio");
                    if (f.controls()) {
                        f.addClass("vjs-controls-enabled");
                    } else {
                        f.addClass("vjs-controls-disabled");
                    }
                    f.el_.setAttribute("role", "region");
                    if (f.isAudio()) {
                        f.el_.setAttribute("aria-label", f.localize("Audio Player"));
                    } else {
                        f.el_.setAttribute("aria-label", f.localize("Video Player"));
                    }
                    if (f.isAudio()) {
                        f.addClass("vjs-audio");
                    }
                    if (f.flexNotSupported_()) {
                        f.addClass("vjs-no-flex");
                    }
                    if (as) {
                        f.addClass("vjs-touch-enabled");
                    }
                    if (!av) {
                        f.addClass("vjs-workinghover");
                    }
                    b.players[f.id_] = (0, i.Z)(f);
                    var m = G.split(".")[0];
                    f.addClass("vjs-v" + m);
                    f.userActive(true);
                    f.reportUserActivity();
                    f.one("play", function(a) {
                        return f.listenForUserActivity_(a);
                    });
                    f.on("stageclick", function(a) {
                        return f.handleStageClick_(a);
                    });
                    f.on("keydown", function(a) {
                        return f.handleKeyDown(a);
                    });
                    f.on("languagechange", function(a) {
                        return f.handleLanguagechange(a);
                    });
                    f.breakpoints(f.options_.breakpoints);
                    f.responsive(f.options_.responsive);
                    return f;
                }
                var c = b.prototype;
                c.dispose = function c() {
                    var d = this;
                    this.trigger("dispose");
                    this.off("dispose");
                    bm(g(), this.fsApi_.fullscreenchange, this.boundDocumentFullscreenChange_);
                    bm(g(), "keydown", this.boundFullWindowOnEscKey_);
                    if (this.styleEl_ && this.styleEl_.parentNode) {
                        this.styleEl_.parentNode.removeChild(this.styleEl_);
                        this.styleEl_ = null;
                    }
                    b.players[this.id_] = null;
                    if (this.tag && this.tag.player) {
                        this.tag.player = null;
                    }
                    if (this.el_ && this.el_.player) {
                        this.el_.player = null;
                    }
                    if (this.tech_) {
                        this.tech_.dispose();
                        this.isPosterFromTech_ = false;
                        this.poster_ = "";
                    }
                    if (this.playerElIngest_) {
                        this.playerElIngest_ = null;
                    }
                    if (this.tag) {
                        this.tag = null;
                    }
                    cS(this);
                    cB.names.forEach(function(a) {
                        var b = cB[a];
                        var c = d[b.getterName]();
                        if (c && c.off) {
                            c.off();
                        }
                    });
                    a.prototype.dispose.call(this);
                };
                c.createEl = function b() {
                    var c = this.tag;
                    var d;
                    var f = (this.playerElIngest_ = c.parentNode && c.parentNode.hasAttribute && c.parentNode.hasAttribute("data-vjs-player"));
                    var h = this.tag.tagName.toLowerCase() === "video-js";
                    if (f) {
                        d = this.el_ = c.parentNode;
                    } else if (!h) {
                        d = this.el_ = a.prototype.createEl.call(this, "div");
                    }
                    var i = aN(c);
                    if (h) {
                        d = this.el_ = c;
                        c = this.tag = g().createElement("video");
                        while(d.children.length){
                            c.appendChild(d.firstChild);
                        }
                        if (!aI(d, "video-js")) {
                            aJ(d, "video-js");
                        }
                        d.appendChild(c);
                        f = this.playerElIngest_ = d;
                        Object.keys(d).forEach(function(a) {
                            try {
                                c[a] = d[a];
                            } catch (b) {}
                        });
                    }
                    c.setAttribute("tabindex", "-1");
                    i.tabindex = "-1";
                    if (ap || (an && ar)) {
                        c.setAttribute("role", "application");
                        i.role = "application";
                    }
                    c.removeAttribute("width");
                    c.removeAttribute("height");
                    if ("width" in i) {
                        delete i.width;
                    }
                    if ("height" in i) {
                        delete i.height;
                    }
                    Object.getOwnPropertyNames(i).forEach(function(a) {
                        if (!(h && a === "class")) {
                            d.setAttribute(a, i[a]);
                        }
                        if (h) {
                            c.setAttribute(a, i[a]);
                        }
                    });
                    c.playerId = c.id;
                    c.id += "_html5_api";
                    c.className = "vjs-tech";
                    c.player = d.player = this;
                    this.addClass("vjs-paused");
                    if (e().VIDEOJS_NO_DYNAMIC_STYLE !== true) {
                        this.styleEl_ = a8("vjs-styles-dimensions");
                        var j = a0(".vjs-styles-defaults");
                        var k = a0("head");
                        k.insertBefore(this.styleEl_, j ? j.nextSibling : k.firstChild);
                    }
                    this.fill_ = false;
                    this.fluid_ = false;
                    this.width(this.options_.width);
                    this.height(this.options_.height);
                    this.fill(this.options_.fill);
                    this.fluid(this.options_.fluid);
                    this.aspectRatio(this.options_.aspectRatio);
                    this.crossOrigin(this.options_.crossOrigin || this.options_.crossorigin);
                    var l = c.getElementsByTagName("a");
                    for(var m = 0; m < l.length; m++){
                        var n = l.item(m);
                        aJ(n, "vjs-hidden");
                        n.setAttribute("hidden", "hidden");
                    }
                    c.initNetworkState_ = c.networkState;
                    if (c.parentNode && !f) {
                        c.parentNode.insertBefore(d, c);
                    }
                    aH(c, d);
                    this.children_.unshift(c);
                    this.el_.setAttribute("lang", this.language_);
                    this.el_.setAttribute("translate", "no");
                    this.el_ = d;
                    return d;
                };
                c.crossOrigin = function a(b) {
                    if (!b) {
                        return this.techGet_("crossOrigin");
                    }
                    if (b !== "anonymous" && b !== "use-credentials") {
                        V.warn('crossOrigin must be "anonymous" or "use-credentials", given "' + b + '"');
                        return;
                    }
                    this.techCall_("setCrossOrigin", b);
                    return;
                };
                c.width = function a(b) {
                    return this.dimension("width", b);
                };
                c.height = function a(b) {
                    return this.dimension("height", b);
                };
                c.dimension = function a(b, c) {
                    var d = b + "_";
                    if (c === undefined) {
                        return this[d] || 0;
                    }
                    if (c === "" || c === "auto") {
                        this[d] = undefined;
                        this.updateStyleEl_();
                        return;
                    }
                    var e = parseFloat(c);
                    if (isNaN(e)) {
                        V.error('Improper value "' + c + '" supplied for for ' + b);
                        return;
                    }
                    this[d] = e;
                    this.updateStyleEl_();
                };
                c.fluid = function a(b) {
                    var c = this;
                    if (b === undefined) {
                        return !!this.fluid_;
                    }
                    this.fluid_ = !!b;
                    if (by(this)) {
                        this.off([
                            "playerreset",
                            "resize"
                        ], this.boundUpdateStyleEl_);
                    }
                    if (b) {
                        this.addClass("vjs-fluid");
                        this.fill(false);
                        bz(this, function() {
                            c.on([
                                "playerreset",
                                "resize"
                            ], c.boundUpdateStyleEl_);
                        });
                    } else {
                        this.removeClass("vjs-fluid");
                    }
                    this.updateStyleEl_();
                };
                c.fill = function a(b) {
                    if (b === undefined) {
                        return !!this.fill_;
                    }
                    this.fill_ = !!b;
                    if (b) {
                        this.addClass("vjs-fill");
                        this.fluid(false);
                    } else {
                        this.removeClass("vjs-fill");
                    }
                };
                c.aspectRatio = function a(b) {
                    if (b === undefined) {
                        return this.aspectRatio_;
                    }
                    if (!/^\d+\:\d+$/.test(b)) {
                        throw new Error("Improper value supplied for aspect ratio. The format should be width:height, for example 16:9.");
                    }
                    this.aspectRatio_ = b;
                    this.fluid(true);
                    this.updateStyleEl_();
                };
                c.updateStyleEl_ = function a() {
                    if (e().VIDEOJS_NO_DYNAMIC_STYLE === true) {
                        var b = typeof this.width_ === "number" ? this.width_ : this.options_.width;
                        var c = typeof this.height_ === "number" ? this.height_ : this.options_.height;
                        var d = this.tech_ && this.tech_.el();
                        if (d) {
                            if (b >= 0) {
                                d.width = b;
                            }
                            if (c >= 0) {
                                d.height = c;
                            }
                        }
                        return;
                    }
                    var f;
                    var g;
                    var h;
                    var i;
                    if (this.aspectRatio_ !== undefined && this.aspectRatio_ !== "auto") {
                        h = this.aspectRatio_;
                    } else if (this.videoWidth() > 0) {
                        h = this.videoWidth() + ":" + this.videoHeight();
                    } else {
                        h = "16:9";
                    }
                    var j = h.split(":");
                    var k = j[1] / j[0];
                    if (this.width_ !== undefined) {
                        f = this.width_;
                    } else if (this.height_ !== undefined) {
                        f = this.height_ / k;
                    } else {
                        f = this.videoWidth() || 300;
                    }
                    if (this.height_ !== undefined) {
                        g = this.height_;
                    } else {
                        g = f * k;
                    }
                    if (/^[^a-zA-Z]/.test(this.id())) {
                        i = "dimensions-" + this.id();
                    } else {
                        i = this.id() + "-dimensions";
                    }
                    this.addClass(i);
                    a9(this.styleEl_, "\n      ." + i + " {\n        width: " + f + "px;\n        height: " + g + "px;\n      }\n\n      ." + i + ".vjs-fluid {\n        padding-top: " + k * 100 + "%;\n      }\n    ");
                };
                c.loadTech_ = function a(b, c) {
                    var d = this;
                    if (this.tech_) {
                        this.unloadTech_();
                    }
                    var e = bL(b);
                    var f = b.charAt(0).toLowerCase() + b.slice(1);
                    if (e !== "Html5" && this.tag) {
                        cD.getTech("Html5").disposeMediaElement(this.tag);
                        this.tag.player = null;
                        this.tag = null;
                    }
                    this.techName_ = e;
                    this.isReady_ = false;
                    var g = this.autoplay();
                    if (typeof this.autoplay() === "string" || (this.autoplay() === true && this.options_.normalizeAutoplay)) {
                        g = false;
                    }
                    var h = {
                        source: c,
                        autoplay: g,
                        nativeControlsForTouch: this.options_.nativeControlsForTouch,
                        playerId: this.id(),
                        techId: this.id() + "_" + f + "_api",
                        playsinline: this.options_.playsinline,
                        preload: this.options_.preload,
                        loop: this.options_.loop,
                        disablePictureInPicture: this.options_.disablePictureInPicture,
                        muted: this.options_.muted,
                        poster: this.poster(),
                        language: this.language(),
                        playerElIngest: this.playerElIngest_ || false,
                        "vtt.js": this.options_["vtt.js"],
                        canOverridePoster: !!this.options_.techCanOverridePoster,
                        enableSourceset: this.options_.enableSourceset,
                        Promise: this.options_.Promise
                    };
                    cB.names.forEach(function(a) {
                        var b = cB[a];
                        h[b.getterName] = d[b.privateName];
                    });
                    _(h, this.options_[e]);
                    _(h, this.options_[f]);
                    _(h, this.options_[b.toLowerCase()]);
                    if (this.tag) {
                        h.tag = this.tag;
                    }
                    if (c && c.src === this.cache_.src && this.cache_.currentTime > 0) {
                        h.startTime = this.cache_.currentTime;
                    }
                    var i = cD.getTech(b);
                    if (!i) {
                        throw new Error("No Tech named '" + e + "' exists! '" + e + "' should be registered using videojs.registerTech()'");
                    }
                    this.tech_ = new i(h);
                    this.tech_.ready(bs(this, this.handleTechReady_), true);
                    b3.jsonToTextTracks(this.textTracksJson_ || [], this.tech_);
                    eC.forEach(function(a) {
                        d.on(d.tech_, a, function(b) {
                            return d["handleTech" + bL(a) + "_"](b);
                        });
                    });
                    Object.keys(eD).forEach(function(a) {
                        d.on(d.tech_, a, function(b) {
                            if (d.tech_.playbackRate() === 0 && d.tech_.seeking()) {
                                d.queuedCallbacks_.push({
                                    callback: d["handleTech" + eD[a] + "_"].bind(d),
                                    event: b
                                });
                                return;
                            }
                            d["handleTech" + eD[a] + "_"](b);
                        });
                    });
                    this.on(this.tech_, "loadstart", function(a) {
                        return d.handleTechLoadStart_(a);
                    });
                    this.on(this.tech_, "sourceset", function(a) {
                        return d.handleTechSourceset_(a);
                    });
                    this.on(this.tech_, "waiting", function(a) {
                        return d.handleTechWaiting_(a);
                    });
                    this.on(this.tech_, "ended", function(a) {
                        return d.handleTechEnded_(a);
                    });
                    this.on(this.tech_, "seeking", function(a) {
                        return d.handleTechSeeking_(a);
                    });
                    this.on(this.tech_, "play", function(a) {
                        return d.handleTechPlay_(a);
                    });
                    this.on(this.tech_, "firstplay", function(a) {
                        return d.handleTechFirstPlay_(a);
                    });
                    this.on(this.tech_, "pause", function(a) {
                        return d.handleTechPause_(a);
                    });
                    this.on(this.tech_, "durationchange", function(a) {
                        return d.handleTechDurationChange_(a);
                    });
                    this.on(this.tech_, "fullscreenchange", function(a, b) {
                        return d.handleTechFullscreenChange_(a, b);
                    });
                    this.on(this.tech_, "fullscreenerror", function(a, b) {
                        return d.handleTechFullscreenError_(a, b);
                    });
                    this.on(this.tech_, "enterpictureinpicture", function(a) {
                        return d.handleTechEnterPictureInPicture_(a);
                    });
                    this.on(this.tech_, "leavepictureinpicture", function(a) {
                        return d.handleTechLeavePictureInPicture_(a);
                    });
                    this.on(this.tech_, "error", function(a) {
                        return d.handleTechError_(a);
                    });
                    this.on(this.tech_, "posterchange", function(a) {
                        return d.handleTechPosterChange_(a);
                    });
                    this.on(this.tech_, "textdata", function(a) {
                        return d.handleTechTextData_(a);
                    });
                    this.on(this.tech_, "ratechange", function(a) {
                        return d.handleTechRateChange_(a);
                    });
                    this.on(this.tech_, "loadedmetadata", this.boundUpdateStyleEl_);
                    this.usingNativeControls(this.techGet_("controls"));
                    if (this.controls() && !this.usingNativeControls()) {
                        this.addTechControlsListeners_();
                    }
                    if (this.tech_.el().parentNode !== this.el() && (e !== "Html5" || !this.tag)) {
                        aH(this.tech_.el(), this.el());
                    }
                    if (this.tag) {
                        this.tag.player = null;
                        this.tag = null;
                    }
                };
                c.unloadTech_ = function a() {
                    var b = this;
                    cB.names.forEach(function(a) {
                        var c = cB[a];
                        b[c.privateName] = b[c.getterName]();
                    });
                    this.textTracksJson_ = b3.textTracksToJson(this.tech_);
                    this.isReady_ = false;
                    this.tech_.dispose();
                    this.tech_ = false;
                    if (this.isPosterFromTech_) {
                        this.poster_ = "";
                        this.trigger("posterchange");
                    }
                    this.isPosterFromTech_ = false;
                };
                c.tech = function a(b) {
                    if (b === undefined) {
                        V.warn("Using the tech directly can be dangerous. I hope you know what you're doing.\n" + "See https://github.com/videojs/video.js/issues/2617 for more info.\n");
                    }
                    return this.tech_;
                };
                c.addTechControlsListeners_ = function a() {
                    this.removeTechControlsListeners_();
                    this.on(this.tech_, "click", this.boundHandleTechClick_);
                    this.on(this.tech_, "dblclick", this.boundHandleTechDoubleClick_);
                    this.on(this.tech_, "touchstart", this.boundHandleTechTouchStart_);
                    this.on(this.tech_, "touchmove", this.boundHandleTechTouchMove_);
                    this.on(this.tech_, "touchend", this.boundHandleTechTouchEnd_);
                    this.on(this.tech_, "tap", this.boundHandleTechTap_);
                };
                c.removeTechControlsListeners_ = function a() {
                    this.off(this.tech_, "tap", this.boundHandleTechTap_);
                    this.off(this.tech_, "touchstart", this.boundHandleTechTouchStart_);
                    this.off(this.tech_, "touchmove", this.boundHandleTechTouchMove_);
                    this.off(this.tech_, "touchend", this.boundHandleTechTouchEnd_);
                    this.off(this.tech_, "click", this.boundHandleTechClick_);
                    this.off(this.tech_, "dblclick", this.boundHandleTechDoubleClick_);
                };
                c.handleTechReady_ = function a() {
                    this.triggerReady();
                    if (this.cache_.volume) {
                        this.techCall_("setVolume", this.cache_.volume);
                    }
                    this.handleTechPosterChange_();
                    this.handleTechDurationChange_();
                };
                c.handleTechLoadStart_ = function a() {
                    this.removeClass("vjs-ended");
                    this.removeClass("vjs-seeking");
                    this.error(null);
                    this.handleTechDurationChange_();
                    if (!this.paused()) {
                        this.trigger("loadstart");
                        this.trigger("firstplay");
                    } else {
                        this.hasStarted(false);
                        this.trigger("loadstart");
                    }
                    this.manualAutoplay_(this.autoplay() === true && this.options_.normalizeAutoplay ? "play" : this.autoplay());
                };
                c.manualAutoplay_ = function a(b) {
                    var c = this;
                    if (!this.tech_ || typeof b !== "string") {
                        return;
                    }
                    var d = function a() {
                        var b = c.muted();
                        c.muted(true);
                        var d = function a() {
                            c.muted(b);
                        };
                        c.playTerminatedQueue_.push(d);
                        var e = c.play();
                        if (!b$(e)) {
                            return;
                        }
                        return e["catch"](function(a) {
                            d();
                            throw new Error("Rejection at manualAutoplay. Restoring muted value. " + (a ? a : ""));
                        });
                    };
                    var e;
                    if (b === "any" && !this.muted()) {
                        e = this.play();
                        if (b$(e)) {
                            e = e["catch"](d);
                        }
                    } else if (b === "muted" && !this.muted()) {
                        e = d();
                    } else {
                        e = this.play();
                    }
                    if (!b$(e)) {
                        return;
                    }
                    return e.then(function() {
                        c.trigger({
                            type: "autoplay-success",
                            autoplay: b
                        });
                    })["catch"](function() {
                        c.trigger({
                            type: "autoplay-failure",
                            autoplay: b
                        });
                    });
                };
                c.updateSourceCaches_ = function a(b) {
                    if (b === void 0) {
                        b = "";
                    }
                    var c = b;
                    var d = "";
                    if (typeof c !== "string") {
                        c = b.src;
                        d = b.type;
                    }
                    this.cache_.source = this.cache_.source || {};
                    this.cache_.sources = this.cache_.sources || [];
                    if (c && !d) {
                        d = cX(this, c);
                    }
                    this.cache_.source = bN({}, b, {
                        src: c,
                        type: d
                    });
                    var e = this.cache_.sources.filter(function(a) {
                        return a.src && a.src === c;
                    });
                    var f = [];
                    var g = this.$$("source");
                    var h = [];
                    for(var i = 0; i < g.length; i++){
                        var j = aN(g[i]);
                        f.push(j);
                        if (j.src && j.src === c) {
                            h.push(j.src);
                        }
                    }
                    if (h.length && !e.length) {
                        this.cache_.sources = f;
                    } else if (!e.length) {
                        this.cache_.sources = [
                            this.cache_.source
                        ];
                    }
                    this.cache_.src = c;
                };
                c.handleTechSourceset_ = function a(b) {
                    var c = this;
                    if (!this.changingSrc_) {
                        var d = function a(b) {
                            return c.updateSourceCaches_(b);
                        };
                        var e = this.currentSource().src;
                        var f = b.src;
                        if (e && !/^blob:/.test(e) && /^blob:/.test(f)) {
                            if (!this.lastSource_ || (this.lastSource_.tech !== f && this.lastSource_.player !== e)) {
                                d = function a() {};
                            }
                        }
                        d(f);
                        if (!b.src) {
                            this.tech_.any([
                                "sourceset",
                                "loadstart"
                            ], function(a) {
                                if (a.type === "sourceset") {
                                    return;
                                }
                                var b = c.techGet("currentSrc");
                                c.lastSource_.tech = b;
                                c.updateSourceCaches_(b);
                            });
                        }
                    }
                    this.lastSource_ = {
                        player: this.currentSource().src,
                        tech: b.src
                    };
                    this.trigger({
                        src: b.src,
                        type: "sourceset"
                    });
                };
                c.hasStarted = function a(b) {
                    if (b === undefined) {
                        return this.hasStarted_;
                    }
                    if (b === this.hasStarted_) {
                        return;
                    }
                    this.hasStarted_ = b;
                    if (this.hasStarted_) {
                        this.addClass("vjs-has-started");
                        this.trigger("firstplay");
                    } else {
                        this.removeClass("vjs-has-started");
                    }
                };
                c.handleTechPlay_ = function a() {
                    this.removeClass("vjs-ended");
                    this.removeClass("vjs-paused");
                    this.addClass("vjs-playing");
                    this.hasStarted(true);
                    this.trigger("play");
                };
                c.handleTechRateChange_ = function a() {
                    if (this.tech_.playbackRate() > 0 && this.cache_.lastPlaybackRate === 0) {
                        this.queuedCallbacks_.forEach(function(a) {
                            return a.callback(a.event);
                        });
                        this.queuedCallbacks_ = [];
                    }
                    this.cache_.lastPlaybackRate = this.tech_.playbackRate();
                    this.trigger("ratechange");
                };
                c.handleTechWaiting_ = function a() {
                    var b = this;
                    this.addClass("vjs-waiting");
                    this.trigger("waiting");
                    var c = this.currentTime();
                    var d = function a() {
                        if (c !== b.currentTime()) {
                            b.removeClass("vjs-waiting");
                            b.off("timeupdate", a);
                        }
                    };
                    this.on("timeupdate", d);
                };
                c.handleTechCanPlay_ = function a() {
                    this.removeClass("vjs-waiting");
                    this.trigger("canplay");
                };
                c.handleTechCanPlayThrough_ = function a() {
                    this.removeClass("vjs-waiting");
                    this.trigger("canplaythrough");
                };
                c.handleTechPlaying_ = function a() {
                    this.removeClass("vjs-waiting");
                    this.trigger("playing");
                };
                c.handleTechSeeking_ = function a() {
                    this.addClass("vjs-seeking");
                    this.trigger("seeking");
                };
                c.handleTechSeeked_ = function a() {
                    this.removeClass("vjs-seeking");
                    this.removeClass("vjs-ended");
                    this.trigger("seeked");
                };
                c.handleTechFirstPlay_ = function a() {
                    if (this.options_.starttime) {
                        V.warn("Passing the `starttime` option to the player will be deprecated in 6.0");
                        this.currentTime(this.options_.starttime);
                    }
                    this.addClass("vjs-has-started");
                    this.trigger("firstplay");
                };
                c.handleTechPause_ = function a() {
                    this.removeClass("vjs-playing");
                    this.addClass("vjs-paused");
                    this.trigger("pause");
                };
                c.handleTechEnded_ = function a() {
                    this.addClass("vjs-ended");
                    this.removeClass("vjs-waiting");
                    if (this.options_.loop) {
                        this.currentTime(0);
                        this.play();
                    } else if (!this.paused()) {
                        this.pause();
                    }
                    this.trigger("ended");
                };
                c.handleTechDurationChange_ = function a() {
                    this.duration(this.techGet_("duration"));
                };
                c.handleTechClick_ = function a(b) {
                    if (!this.controls_) {
                        return;
                    }
                    if (this.options_ === undefined || this.options_.userActions === undefined || this.options_.userActions.click === undefined || this.options_.userActions.click !== false) {
                        if (this.options_ !== undefined && this.options_.userActions !== undefined && typeof this.options_.userActions.click === "function") {
                            this.options_.userActions.click.call(this, b);
                        } else if (this.paused()) {
                            b_(this.play());
                        } else {
                            this.pause();
                        }
                    }
                };
                c.handleTechDoubleClick_ = function a(b) {
                    if (!this.controls_) {
                        return;
                    }
                    var c = Array.prototype.some.call(this.$$(".vjs-control-bar, .vjs-modal-dialog"), function(a) {
                        return a.contains(b.target);
                    });
                    if (!c) {
                        if (this.options_ === undefined || this.options_.userActions === undefined || this.options_.userActions.doubleClick === undefined || this.options_.userActions.doubleClick !== false) {
                            if (this.options_ !== undefined && this.options_.userActions !== undefined && typeof this.options_.userActions.doubleClick === "function") {
                                this.options_.userActions.doubleClick.call(this, b);
                            } else if (this.isFullscreen()) {
                                this.exitFullscreen();
                            } else {
                                this.requestFullscreen();
                            }
                        }
                    }
                };
                c.handleTechTap_ = function a() {
                    this.userActive(!this.userActive());
                };
                c.handleTechTouchStart_ = function a() {
                    this.userWasActive = this.userActive();
                };
                c.handleTechTouchMove_ = function a() {
                    if (this.userWasActive) {
                        this.reportUserActivity();
                    }
                };
                c.handleTechTouchEnd_ = function a(b) {
                    if (b.cancelable) {
                        b.preventDefault();
                    }
                };
                c.handleStageClick_ = function a() {
                    this.reportUserActivity();
                };
                c.toggleFullscreenClass_ = function a() {
                    if (this.isFullscreen()) {
                        this.addClass("vjs-fullscreen");
                    } else {
                        this.removeClass("vjs-fullscreen");
                    }
                };
                c.documentFullscreenChange_ = function a(b) {
                    var c = b.target.player;
                    if (c && c !== this) {
                        return;
                    }
                    var d = this.el();
                    var e = g()[this.fsApi_.fullscreenElement] === d;
                    if (!e && d.matches) {
                        e = d.matches(":" + this.fsApi_.fullscreen);
                    } else if (!e && d.msMatchesSelector) {
                        e = d.msMatchesSelector(":" + this.fsApi_.fullscreen);
                    }
                    this.isFullscreen(e);
                };
                c.handleTechFullscreenChange_ = function a(b, c) {
                    if (c) {
                        if (c.nativeIOSFullscreen) {
                            this.toggleClass("vjs-ios-native-fs");
                        }
                        this.isFullscreen(c.isFullscreen);
                    }
                };
                c.handleTechFullscreenError_ = function a(b, c) {
                    this.trigger("fullscreenerror", c);
                };
                c.togglePictureInPictureClass_ = function a() {
                    if (this.isInPictureInPicture()) {
                        this.addClass("vjs-picture-in-picture");
                    } else {
                        this.removeClass("vjs-picture-in-picture");
                    }
                };
                c.handleTechEnterPictureInPicture_ = function a(b) {
                    this.isInPictureInPicture(true);
                };
                c.handleTechLeavePictureInPicture_ = function a(b) {
                    this.isInPictureInPicture(false);
                };
                c.handleTechError_ = function a() {
                    var b = this.tech_.error();
                    this.error(b);
                };
                c.handleTechTextData_ = function a() {
                    var b = null;
                    if (arguments.length > 1) {
                        b = arguments[1];
                    }
                    this.trigger("textdata", b);
                };
                c.getCache = function a() {
                    return this.cache_;
                };
                c.resetCache_ = function a() {
                    this.cache_ = {
                        currentTime: 0,
                        initTime: 0,
                        inactivityTimeout: this.options_.inactivityTimeout,
                        duration: NaN,
                        lastVolume: 1,
                        lastPlaybackRate: this.defaultPlaybackRate(),
                        media: null,
                        src: "",
                        source: {},
                        sources: [],
                        playbackRates: [],
                        volume: 1
                    };
                };
                c.techCall_ = function a(b, c) {
                    this.ready(function() {
                        if (b in cO) {
                            return cL(this.middleware_, this.tech_, b, c);
                        } else if (b in cP) {
                            return cM(this.middleware_, this.tech_, b, c);
                        }
                        try {
                            if (this.tech_) {
                                this.tech_[b](c);
                            }
                        } catch (a) {
                            V(a);
                            throw a;
                        }
                    }, true);
                };
                c.techGet_ = function a(b) {
                    if (!this.tech_ || !this.tech_.isReady_) {
                        return;
                    }
                    if (b in cN) {
                        return cK(this.middleware_, this.tech_, b);
                    } else if (b in cP) {
                        return cM(this.middleware_, this.tech_, b);
                    }
                    try {
                        return this.tech_[b]();
                    } catch (c) {
                        if (this.tech_[b] === undefined) {
                            V("Video.js: " + b + " method not defined for " + this.techName_ + " playback technology.", c);
                            throw c;
                        }
                        if (c.name === "TypeError") {
                            V("Video.js: " + b + " unavailable on " + this.techName_ + " playback technology element.", c);
                            this.tech_.isReady_ = false;
                            throw c;
                        }
                        V(c);
                        throw c;
                    }
                };
                c.play = function a() {
                    var b = this;
                    var c = this.options_.Promise || e().Promise;
                    if (c) {
                        return new c(function(a) {
                            b.play_(a);
                        });
                    }
                    return this.play_();
                };
                c.play_ = function a(b) {
                    var c = this;
                    if (b === void 0) {
                        b = b_;
                    }
                    this.playCallbacks_.push(b);
                    var d = Boolean(!this.changingSrc_ && (this.src() || this.currentSrc()));
                    if (this.waitToPlay_) {
                        this.off([
                            "ready",
                            "loadstart"
                        ], this.waitToPlay_);
                        this.waitToPlay_ = null;
                    }
                    if (!this.isReady_ || !d) {
                        this.waitToPlay_ = function(a) {
                            c.play_();
                        };
                        this.one([
                            "ready",
                            "loadstart"
                        ], this.waitToPlay_);
                        if (!d && (aw || av)) {
                            this.load();
                        }
                        return;
                    }
                    var e = this.techGet_("play");
                    if (e === null) {
                        this.runPlayTerminatedQueue_();
                    } else {
                        this.runPlayCallbacks_(e);
                    }
                };
                c.runPlayTerminatedQueue_ = function a() {
                    var b = this.playTerminatedQueue_.slice(0);
                    this.playTerminatedQueue_ = [];
                    b.forEach(function(a) {
                        a();
                    });
                };
                c.runPlayCallbacks_ = function a(b) {
                    var c = this.playCallbacks_.slice(0);
                    this.playCallbacks_ = [];
                    this.playTerminatedQueue_ = [];
                    c.forEach(function(a) {
                        a(b);
                    });
                };
                c.pause = function a() {
                    this.techCall_("pause");
                };
                c.paused = function a() {
                    return this.techGet_("paused") === false ? false : true;
                };
                c.played = function a() {
                    return this.techGet_("played") || bW(0, 0);
                };
                c.scrubbing = function a(b) {
                    if (typeof b === "undefined") {
                        return this.scrubbing_;
                    }
                    this.scrubbing_ = !!b;
                    this.techCall_("setScrubbing", this.scrubbing_);
                    if (b) {
                        this.addClass("vjs-scrubbing");
                    } else {
                        this.removeClass("vjs-scrubbing");
                    }
                };
                c.currentTime = function a(b) {
                    if (typeof b !== "undefined") {
                        if (b < 0) {
                            b = 0;
                        }
                        if (!this.isReady_ || this.changingSrc_ || !this.tech_ || !this.tech_.isReady_) {
                            this.cache_.initTime = b;
                            this.off("canplay", this.boundApplyInitTime_);
                            this.one("canplay", this.boundApplyInitTime_);
                            return;
                        }
                        this.techCall_("setCurrentTime", b);
                        this.cache_.initTime = 0;
                        return;
                    }
                    this.cache_.currentTime = this.techGet_("currentTime") || 0;
                    return this.cache_.currentTime;
                };
                c.applyInitTime_ = function a() {
                    this.currentTime(this.cache_.initTime);
                };
                c.duration = function a(b) {
                    if (b === undefined) {
                        return this.cache_.duration !== undefined ? this.cache_.duration : NaN;
                    }
                    b = parseFloat(b);
                    if (b < 0) {
                        b = Infinity;
                    }
                    if (b !== this.cache_.duration) {
                        this.cache_.duration = b;
                        if (b === Infinity) {
                            this.addClass("vjs-live");
                        } else {
                            this.removeClass("vjs-live");
                        }
                        if (!isNaN(b)) {
                            this.trigger("durationchange");
                        }
                    }
                };
                c.remainingTime = function a() {
                    return this.duration() - this.currentTime();
                };
                c.remainingTimeDisplay = function a() {
                    return (Math.floor(this.duration()) - Math.floor(this.currentTime()));
                };
                c.buffered = function a() {
                    var a = this.techGet_("buffered");
                    if (!a || !a.length) {
                        a = bW(0, 0);
                    }
                    return a;
                };
                c.bufferedPercent = function a() {
                    return bX(this.buffered(), this.duration());
                };
                c.bufferedEnd = function a() {
                    var b = this.buffered();
                    var c = this.duration();
                    var d = b.end(b.length - 1);
                    if (d > c) {
                        d = c;
                    }
                    return d;
                };
                c.volume = function a(b) {
                    var c;
                    if (b !== undefined) {
                        c = Math.max(0, Math.min(1, parseFloat(b)));
                        this.cache_.volume = c;
                        this.techCall_("setVolume", c);
                        if (c > 0) {
                            this.lastVolume_(c);
                        }
                        return;
                    }
                    c = parseFloat(this.techGet_("volume"));
                    return isNaN(c) ? 1 : c;
                };
                c.muted = function a(b) {
                    if (b !== undefined) {
                        this.techCall_("setMuted", b);
                        return;
                    }
                    return this.techGet_("muted") || false;
                };
                c.defaultMuted = function a(b) {
                    if (b !== undefined) {
                        return this.techCall_("setDefaultMuted", b);
                    }
                    return this.techGet_("defaultMuted") || false;
                };
                c.lastVolume_ = function a(b) {
                    if (b !== undefined && b !== 0) {
                        this.cache_.lastVolume = b;
                        return;
                    }
                    return this.cache_.lastVolume;
                };
                c.supportsFullScreen = function a() {
                    return this.techGet_("supportsFullScreen") || false;
                };
                c.isFullscreen = function a(b) {
                    if (b !== undefined) {
                        var c = this.isFullscreen_;
                        this.isFullscreen_ = Boolean(b);
                        if (this.isFullscreen_ !== c && this.fsApi_.prefixed) {
                            this.trigger("fullscreenchange");
                        }
                        this.toggleFullscreenClass_();
                        return;
                    }
                    return this.isFullscreen_;
                };
                c.requestFullscreen = function a(b) {
                    var c = this.options_.Promise || e().Promise;
                    if (c) {
                        var d = this;
                        return new c(function(a, c) {
                            function e() {
                                d.off("fullscreenerror", g);
                                d.off("fullscreenchange", f);
                            }
                            function f() {
                                e();
                                a();
                            }
                            function g(a, b) {
                                e();
                                c(b);
                            }
                            d.one("fullscreenchange", f);
                            d.one("fullscreenerror", g);
                            var h = d.requestFullscreenHelper_(b);
                            if (h) {
                                h.then(e, e);
                                h.then(a, c);
                            }
                        });
                    }
                    return this.requestFullscreenHelper_();
                };
                c.requestFullscreenHelper_ = function a(b) {
                    var c = this;
                    var d;
                    if (!this.fsApi_.prefixed) {
                        d = (this.options_.fullscreen && this.options_.fullscreen.options) || {};
                        if (b !== undefined) {
                            d = b;
                        }
                    }
                    if (this.fsApi_.requestFullscreen) {
                        var e = this.el_[this.fsApi_.requestFullscreen](d);
                        if (e) {
                            e.then(function() {
                                return c.isFullscreen(true);
                            }, function() {
                                return c.isFullscreen(false);
                            });
                        }
                        return e;
                    } else if (this.tech_.supportsFullScreen() && !this.options_.preferFullWindow === true) {
                        this.techCall_("enterFullScreen");
                    } else {
                        this.enterFullWindow();
                    }
                };
                c.exitFullscreen = function a() {
                    var b = this.options_.Promise || e().Promise;
                    if (b) {
                        var c = this;
                        return new b(function(a, b) {
                            function d() {
                                c.off("fullscreenerror", f);
                                c.off("fullscreenchange", e);
                            }
                            function e() {
                                d();
                                a();
                            }
                            function f(a, c) {
                                d();
                                b(c);
                            }
                            c.one("fullscreenchange", e);
                            c.one("fullscreenerror", f);
                            var g = c.exitFullscreenHelper_();
                            if (g) {
                                g.then(d, d);
                                g.then(a, b);
                            }
                        });
                    }
                    return this.exitFullscreenHelper_();
                };
                c.exitFullscreenHelper_ = function a() {
                    var b = this;
                    if (this.fsApi_.requestFullscreen) {
                        var c = g()[this.fsApi_.exitFullscreen]();
                        if (c) {
                            b_(c.then(function() {
                                return b.isFullscreen(false);
                            }));
                        }
                        return c;
                    } else if (this.tech_.supportsFullScreen() && !this.options_.preferFullWindow === true) {
                        this.techCall_("exitFullScreen");
                    } else {
                        this.exitFullWindow();
                    }
                };
                c.enterFullWindow = function a() {
                    this.isFullscreen(true);
                    this.isFullWindow = true;
                    this.docOrigOverflow = g().documentElement.style.overflow;
                    bl(g(), "keydown", this.boundFullWindowOnEscKey_);
                    g().documentElement.style.overflow = "hidden";
                    aJ(g().body, "vjs-full-window");
                    this.trigger("enterFullWindow");
                };
                c.fullWindowOnEscKey = function a(b) {
                    if (n().isEventKey(b, "Esc")) {
                        if (this.isFullscreen() === true) {
                            if (!this.isFullWindow) {
                                this.exitFullscreen();
                            } else {
                                this.exitFullWindow();
                            }
                        }
                    }
                };
                c.exitFullWindow = function a() {
                    this.isFullscreen(false);
                    this.isFullWindow = false;
                    bm(g(), "keydown", this.boundFullWindowOnEscKey_);
                    g().documentElement.style.overflow = this.docOrigOverflow;
                    aK(g().body, "vjs-full-window");
                    this.trigger("exitFullWindow");
                };
                c.disablePictureInPicture = function a(b) {
                    if (b === undefined) {
                        return this.techGet_("disablePictureInPicture");
                    }
                    this.techCall_("setDisablePictureInPicture", b);
                    this.options_.disablePictureInPicture = b;
                    this.trigger("disablepictureinpicturechanged");
                };
                c.isInPictureInPicture = function a(b) {
                    if (b !== undefined) {
                        this.isInPictureInPicture_ = !!b;
                        this.togglePictureInPictureClass_();
                        return;
                    }
                    return !!this.isInPictureInPicture_;
                };
                c.requestPictureInPicture = function a() {
                    if ("pictureInPictureEnabled" in g() && this.disablePictureInPicture() === false) {
                        return this.techGet_("requestPictureInPicture");
                    }
                };
                c.exitPictureInPicture = function a() {
                    if ("pictureInPictureEnabled" in g()) {
                        return g().exitPictureInPicture();
                    }
                };
                c.handleKeyDown = function a(b) {
                    var c = this.options_.userActions;
                    if (!c || !c.hotkeys) {
                        return;
                    }
                    var d = function a(b) {
                        var c = b.tagName.toLowerCase();
                        if (b.isContentEditable) {
                            return true;
                        }
                        var d = [
                            "button",
                            "checkbox",
                            "hidden",
                            "radio",
                            "reset",
                            "submit", 
                        ];
                        if (c === "input") {
                            return d.indexOf(b.type) === -1;
                        }
                        var e = [
                            "textarea"
                        ];
                        return e.indexOf(c) !== -1;
                    };
                    if (d(this.el_.ownerDocument.activeElement)) {
                        return;
                    }
                    if (typeof c.hotkeys === "function") {
                        c.hotkeys.call(this, b);
                    } else {
                        this.handleHotkeys(b);
                    }
                };
                c.handleHotkeys = function a(b) {
                    var c = this.options_.userActions ? this.options_.userActions.hotkeys : {};
                    var d = c.fullscreenKey, e = d === void 0 ? function(a) {
                        return n().isEventKey(a, "f");
                    } : d, f = c.muteKey, h = f === void 0 ? function(a) {
                        return n().isEventKey(a, "m");
                    } : f, i = c.playPauseKey, j = i === void 0 ? function(a) {
                        return (n().isEventKey(a, "k") || n().isEventKey(a, "Space"));
                    } : i;
                    if (e.call(this, b)) {
                        b.preventDefault();
                        b.stopPropagation();
                        var k = bS.getComponent("FullscreenToggle");
                        if (g()[this.fsApi_.fullscreenEnabled] !== false) {
                            k.prototype.handleClick.call(this, b);
                        }
                    } else if (h.call(this, b)) {
                        b.preventDefault();
                        b.stopPropagation();
                        var l = bS.getComponent("MuteToggle");
                        l.prototype.handleClick.call(this, b);
                    } else if (j.call(this, b)) {
                        b.preventDefault();
                        b.stopPropagation();
                        var m = bS.getComponent("PlayToggle");
                        m.prototype.handleClick.call(this, b);
                    }
                };
                c.canPlayType = function a(b) {
                    var c;
                    for(var d = 0, e = this.options_.techOrder; d < e.length; d++){
                        var f = e[d];
                        var g = cD.getTech(f);
                        if (!g) {
                            g = bS.getComponent(f);
                        }
                        if (!g) {
                            V.error('The "' + f + '" tech is undefined. Skipped browser support check for that tech.');
                            continue;
                        }
                        if (g.isSupported()) {
                            c = g.canPlayType(b);
                            if (c) {
                                return c;
                            }
                        }
                    }
                    return "";
                };
                c.selectSource = function a(b) {
                    var c = this;
                    var d = this.options_.techOrder.map(function(a) {
                        return [
                            a,
                            cD.getTech(a)
                        ];
                    }).filter(function(a) {
                        var b = a[0], c = a[1];
                        if (c) {
                            return c.isSupported();
                        }
                        V.error('The "' + b + '" tech is undefined. Skipped browser support check for that tech.');
                        return false;
                    });
                    var e = function a(b, c, d) {
                        var e;
                        b.some(function(a) {
                            return c.some(function(b) {
                                e = d(a, b);
                                if (e) {
                                    return true;
                                }
                            });
                        });
                        return e;
                    };
                    var f;
                    var g = function a(b) {
                        return function(a, c) {
                            return b(c, a);
                        };
                    };
                    var h = function a(b, d) {
                        var e = b[0], f = b[1];
                        if (f.canPlaySource(d, c.options_[e.toLowerCase()])) {
                            return {
                                source: d,
                                tech: e
                            };
                        }
                    };
                    if (this.options_.sourceOrder) {
                        f = e(b, d, g(h));
                    } else {
                        f = e(d, b, h);
                    }
                    return f || false;
                };
                c.handleSrc_ = function a(b, c) {
                    var d = this;
                    if (typeof b === "undefined") {
                        return this.cache_.src || "";
                    }
                    if (this.resetRetryOnError_) {
                        this.resetRetryOnError_();
                    }
                    var e = cY(b);
                    if (!e.length) {
                        this.setTimeout(function() {
                            this.error({
                                code: 4,
                                message: this.localize(this.options_.notSupportedMessage)
                            });
                        }, 0);
                        return;
                    }
                    this.changingSrc_ = true;
                    if (!c) {
                        this.cache_.sources = e;
                    }
                    this.updateSourceCaches_(e[0]);
                    cI(this, e[0], function(a, b) {
                        d.middleware_ = b;
                        if (!c) {
                            d.cache_.sources = e;
                        }
                        d.updateSourceCaches_(a);
                        var f = d.src_(a);
                        if (f) {
                            if (e.length > 1) {
                                return d.handleSrc_(e.slice(1));
                            }
                            d.changingSrc_ = false;
                            d.setTimeout(function() {
                                this.error({
                                    code: 4,
                                    message: this.localize(this.options_.notSupportedMessage)
                                });
                            }, 0);
                            d.triggerReady();
                            return;
                        }
                        cJ(b, d.tech_);
                    });
                    if (this.options_.retryOnError && e.length > 1) {
                        var f = function a() {
                            d.error(null);
                            d.handleSrc_(e.slice(1), true);
                        };
                        var g = function a() {
                            d.off("error", f);
                        };
                        this.one("error", f);
                        this.one("playing", g);
                        this.resetRetryOnError_ = function() {
                            d.off("error", f);
                            d.off("playing", g);
                        };
                    }
                };
                c.src = function a(b) {
                    return this.handleSrc_(b, false);
                };
                c.src_ = function a(b) {
                    var c = this;
                    var d = this.selectSource([
                        b
                    ]);
                    if (!d) {
                        return true;
                    }
                    if (!bM(d.tech, this.techName_)) {
                        this.changingSrc_ = true;
                        this.loadTech_(d.tech, d.source);
                        this.tech_.ready(function() {
                            c.changingSrc_ = false;
                        });
                        return false;
                    }
                    this.ready(function() {
                        if (this.tech_.constructor.prototype.hasOwnProperty("setSource")) {
                            this.techCall_("setSource", b);
                        } else {
                            this.techCall_("src", b.src);
                        }
                        this.changingSrc_ = false;
                    }, true);
                    return false;
                };
                c.load = function a() {
                    this.techCall_("load");
                };
                c.reset = function a() {
                    var b = this;
                    var c = this.options_.Promise || e().Promise;
                    if (this.paused() || !c) {
                        this.doReset_();
                    } else {
                        var d = this.play();
                        b_(d.then(function() {
                            return b.doReset_();
                        }));
                    }
                };
                c.doReset_ = function a() {
                    if (this.tech_) {
                        this.tech_.clearTracks("text");
                    }
                    this.resetCache_();
                    this.poster("");
                    this.loadTech_(this.options_.techOrder[0], null);
                    this.techCall_("reset");
                    this.resetControlBarUI_();
                    if (by(this)) {
                        this.trigger("playerreset");
                    }
                };
                c.resetControlBarUI_ = function a() {
                    this.resetProgressBar_();
                    this.resetPlaybackRate_();
                    this.resetVolumeBar_();
                };
                c.resetProgressBar_ = function a() {
                    this.currentTime(0);
                    var b = this.controlBar, c = b.durationDisplay, d = b.remainingTimeDisplay;
                    if (c) {
                        c.updateContent();
                    }
                    if (d) {
                        d.updateContent();
                    }
                };
                c.resetPlaybackRate_ = function a() {
                    this.playbackRate(this.defaultPlaybackRate());
                    this.handleTechRateChange_();
                };
                c.resetVolumeBar_ = function a() {
                    this.volume(1.0);
                    this.trigger("volumechange");
                };
                c.currentSources = function a() {
                    var b = this.currentSource();
                    var c = [];
                    if (Object.keys(b).length !== 0) {
                        c.push(b);
                    }
                    return this.cache_.sources || c;
                };
                c.currentSource = function a() {
                    return this.cache_.source || {};
                };
                c.currentSrc = function a() {
                    return ((this.currentSource() && this.currentSource().src) || "");
                };
                c.currentType = function a() {
                    return ((this.currentSource() && this.currentSource().type) || "");
                };
                c.preload = function a(b) {
                    if (b !== undefined) {
                        this.techCall_("setPreload", b);
                        this.options_.preload = b;
                        return;
                    }
                    return this.techGet_("preload");
                };
                c.autoplay = function a(b) {
                    if (b === undefined) {
                        return this.options_.autoplay || false;
                    }
                    var c;
                    if ((typeof b === "string" && /(any|play|muted)/.test(b)) || (b === true && this.options_.normalizeAutoplay)) {
                        this.options_.autoplay = b;
                        this.manualAutoplay_(typeof b === "string" ? b : "play");
                        c = false;
                    } else if (!b) {
                        this.options_.autoplay = false;
                    } else {
                        this.options_.autoplay = true;
                    }
                    c = typeof c === "undefined" ? this.options_.autoplay : c;
                    if (this.tech_) {
                        this.techCall_("setAutoplay", c);
                    }
                };
                c.playsinline = function a(b) {
                    if (b !== undefined) {
                        this.techCall_("setPlaysinline", b);
                        this.options_.playsinline = b;
                        return this;
                    }
                    return this.techGet_("playsinline");
                };
                c.loop = function a(b) {
                    if (b !== undefined) {
                        this.techCall_("setLoop", b);
                        this.options_.loop = b;
                        return;
                    }
                    return this.techGet_("loop");
                };
                c.poster = function a(b) {
                    if (b === undefined) {
                        return this.poster_;
                    }
                    if (!b) {
                        b = "";
                    }
                    if (b === this.poster_) {
                        return;
                    }
                    this.poster_ = b;
                    this.techCall_("setPoster", b);
                    this.isPosterFromTech_ = false;
                    this.trigger("posterchange");
                };
                c.handleTechPosterChange_ = function a() {
                    if ((!this.poster_ || this.options_.techCanOverridePoster) && this.tech_ && this.tech_.poster) {
                        var b = this.tech_.poster() || "";
                        if (b !== this.poster_) {
                            this.poster_ = b;
                            this.isPosterFromTech_ = true;
                            this.trigger("posterchange");
                        }
                    }
                };
                c.controls = function a(b) {
                    if (b === undefined) {
                        return !!this.controls_;
                    }
                    b = !!b;
                    if (this.controls_ === b) {
                        return;
                    }
                    this.controls_ = b;
                    if (this.usingNativeControls()) {
                        this.techCall_("setControls", b);
                    }
                    if (this.controls_) {
                        this.removeClass("vjs-controls-disabled");
                        this.addClass("vjs-controls-enabled");
                        this.trigger("controlsenabled");
                        if (!this.usingNativeControls()) {
                            this.addTechControlsListeners_();
                        }
                    } else {
                        this.removeClass("vjs-controls-enabled");
                        this.addClass("vjs-controls-disabled");
                        this.trigger("controlsdisabled");
                        if (!this.usingNativeControls()) {
                            this.removeTechControlsListeners_();
                        }
                    }
                };
                c.usingNativeControls = function a(b) {
                    if (b === undefined) {
                        return !!this.usingNativeControls_;
                    }
                    b = !!b;
                    if (this.usingNativeControls_ === b) {
                        return;
                    }
                    this.usingNativeControls_ = b;
                    if (this.usingNativeControls_) {
                        this.addClass("vjs-using-native-controls");
                        this.trigger("usingnativecontrols");
                    } else {
                        this.removeClass("vjs-using-native-controls");
                        this.trigger("usingcustomcontrols");
                    }
                };
                c.error = function a(b) {
                    var c = this;
                    if (b === undefined) {
                        return this.error_ || null;
                    }
                    I("beforeerror").forEach(function(a) {
                        var d = a(c, b);
                        if (!((aa(d) && !Array.isArray(d)) || typeof d === "string" || typeof d === "number" || d === null)) {
                            c.log.error("please return a value that MediaError expects in beforeerror hooks");
                            return;
                        }
                        b = d;
                    });
                    if (this.options_.suppressNotSupportedError && b && b.code === 4) {
                        var d = function a() {
                            this.error(b);
                        };
                        this.options_.suppressNotSupportedError = false;
                        this.any([
                            "click",
                            "touchstart"
                        ], d);
                        this.one("loadstart", function() {
                            this.off([
                                "click",
                                "touchstart"
                            ], d);
                        });
                        return;
                    }
                    if (b === null) {
                        this.error_ = b;
                        this.removeClass("vjs-error");
                        if (this.errorDisplay) {
                            this.errorDisplay.close();
                        }
                        return;
                    }
                    this.error_ = new bY(b);
                    this.addClass("vjs-error");
                    V.error("(CODE:" + this.error_.code + " " + bY.errorTypes[this.error_.code] + ")", this.error_.message, this.error_);
                    this.trigger("error");
                    I("error").forEach(function(a) {
                        return a(c, c.error_);
                    });
                    return;
                };
                c.reportUserActivity = function a(b) {
                    this.userActivity_ = true;
                };
                c.userActive = function a(b) {
                    if (b === undefined) {
                        return this.userActive_;
                    }
                    b = !!b;
                    if (b === this.userActive_) {
                        return;
                    }
                    this.userActive_ = b;
                    if (this.userActive_) {
                        this.userActivity_ = true;
                        this.removeClass("vjs-user-inactive");
                        this.addClass("vjs-user-active");
                        this.trigger("useractive");
                        return;
                    }
                    if (this.tech_) {
                        this.tech_.one("mousemove", function(a) {
                            a.stopPropagation();
                            a.preventDefault();
                        });
                    }
                    this.userActivity_ = false;
                    this.removeClass("vjs-user-active");
                    this.addClass("vjs-user-inactive");
                    this.trigger("userinactive");
                };
                c.listenForUserActivity_ = function a() {
                    var b;
                    var c;
                    var d;
                    var e = bs(this, this.reportUserActivity);
                    var f = function a(b) {
                        if (b.screenX !== c || b.screenY !== d) {
                            c = b.screenX;
                            d = b.screenY;
                            e();
                        }
                    };
                    var g = function a() {
                        e();
                        this.clearInterval(b);
                        b = this.setInterval(e, 250);
                    };
                    var h = function a(c) {
                        e();
                        this.clearInterval(b);
                    };
                    this.on("mousedown", g);
                    this.on("mousemove", f);
                    this.on("mouseup", h);
                    this.on("mouseleave", h);
                    var i = this.getChild("controlBar");
                    if (i && !av && !ai) {
                        i.on("mouseenter", function(a) {
                            if (this.player().options_.inactivityTimeout !== 0) {
                                this.player().cache_.inactivityTimeout = this.player().options_.inactivityTimeout;
                            }
                            this.player().options_.inactivityTimeout = 0;
                        });
                        i.on("mouseleave", function(a) {
                            this.player().options_.inactivityTimeout = this.player().cache_.inactivityTimeout;
                        });
                    }
                    this.on("keydown", e);
                    this.on("keyup", e);
                    var j;
                    this.setInterval(function() {
                        if (!this.userActivity_) {
                            return;
                        }
                        this.userActivity_ = false;
                        this.userActive(true);
                        this.clearTimeout(j);
                        var a = this.options_.inactivityTimeout;
                        if (a <= 0) {
                            return;
                        }
                        j = this.setTimeout(function() {
                            if (!this.userActivity_) {
                                this.userActive(false);
                            }
                        }, a);
                    }, 250);
                };
                c.playbackRate = function a(b) {
                    if (b !== undefined) {
                        this.techCall_("setPlaybackRate", b);
                        return;
                    }
                    if (this.tech_ && this.tech_.featuresPlaybackRate) {
                        return (this.cache_.lastPlaybackRate || this.techGet_("playbackRate"));
                    }
                    return 1.0;
                };
                c.defaultPlaybackRate = function a(b) {
                    if (b !== undefined) {
                        return this.techCall_("setDefaultPlaybackRate", b);
                    }
                    if (this.tech_ && this.tech_.featuresPlaybackRate) {
                        return this.techGet_("defaultPlaybackRate");
                    }
                    return 1.0;
                };
                c.isAudio = function a(b) {
                    if (b !== undefined) {
                        this.isAudio_ = !!b;
                        return;
                    }
                    return !!this.isAudio_;
                };
                c.addTextTrack = function a(b, c, d) {
                    if (this.tech_) {
                        return this.tech_.addTextTrack(b, c, d);
                    }
                };
                c.addRemoteTextTrack = function a(b, c) {
                    if (this.tech_) {
                        return this.tech_.addRemoteTextTrack(b, c);
                    }
                };
                c.removeRemoteTextTrack = function a(b) {
                    if (b === void 0) {
                        b = {};
                    }
                    var c = b, d = c.track;
                    if (!d) {
                        d = b;
                    }
                    if (this.tech_) {
                        return this.tech_.removeRemoteTextTrack(d);
                    }
                };
                c.getVideoPlaybackQuality = function a() {
                    return this.techGet_("getVideoPlaybackQuality");
                };
                c.videoWidth = function a() {
                    return ((this.tech_ && this.tech_.videoWidth && this.tech_.videoWidth()) || 0);
                };
                c.videoHeight = function a() {
                    return ((this.tech_ && this.tech_.videoHeight && this.tech_.videoHeight()) || 0);
                };
                c.language = function a(b) {
                    if (b === undefined) {
                        return this.language_;
                    }
                    if (this.language_ !== String(b).toLowerCase()) {
                        this.language_ = String(b).toLowerCase();
                        if (by(this)) {
                            this.trigger("languagechange");
                        }
                    }
                };
                c.languages = function a() {
                    return bN(b.prototype.options_.languages, this.languages_);
                };
                c.toJSON = function a() {
                    var b = bN(this.options_);
                    var c = b.tracks;
                    b.tracks = [];
                    for(var d = 0; d < c.length; d++){
                        var e = c[d];
                        e = bN(e);
                        e.player = undefined;
                        b.tracks[d] = e;
                    }
                    return b;
                };
                c.createModal = function a(b, c) {
                    var d = this;
                    c = c || {};
                    c.content = b || "";
                    var e = new b5(this, c);
                    this.addChild(e);
                    e.on("dispose", function() {
                        d.removeChild(e);
                    });
                    e.open();
                    return e;
                };
                c.updateCurrentBreakpoint_ = function a() {
                    if (!this.responsive()) {
                        return;
                    }
                    var b = this.currentBreakpoint();
                    var c = this.currentWidth();
                    for(var d = 0; d < eE.length; d++){
                        var e = eE[d];
                        var f = this.breakpoints_[e];
                        if (c <= f) {
                            if (b === e) {
                                return;
                            }
                            if (b) {
                                this.removeClass(eF[b]);
                            }
                            this.addClass(eF[e]);
                            this.breakpoint_ = e;
                            break;
                        }
                    }
                };
                c.removeCurrentBreakpoint_ = function a() {
                    var b = this.currentBreakpointClass();
                    this.breakpoint_ = "";
                    if (b) {
                        this.removeClass(b);
                    }
                };
                c.breakpoints = function a(b) {
                    if (b === undefined) {
                        return _(this.breakpoints_);
                    }
                    this.breakpoint_ = "";
                    this.breakpoints_ = _({}, eG, b);
                    this.updateCurrentBreakpoint_();
                    return _(this.breakpoints_);
                };
                c.responsive = function a(b) {
                    if (b === undefined) {
                        return this.responsive_;
                    }
                    b = Boolean(b);
                    var c = this.responsive_;
                    if (b === c) {
                        return;
                    }
                    this.responsive_ = b;
                    if (b) {
                        this.on("playerresize", this.boundUpdateCurrentBreakpoint_);
                        this.updateCurrentBreakpoint_();
                    } else {
                        this.off("playerresize", this.boundUpdateCurrentBreakpoint_);
                        this.removeCurrentBreakpoint_();
                    }
                    return b;
                };
                c.currentBreakpoint = function a() {
                    return this.breakpoint_;
                };
                c.currentBreakpointClass = function a() {
                    return eF[this.breakpoint_] || "";
                };
                c.loadMedia = function a(b, c) {
                    var d = this;
                    if (!b || typeof b !== "object") {
                        return;
                    }
                    this.reset();
                    this.cache_.media = bN(b);
                    var e = this.cache_.media, f = e.artwork, g = e.poster, h = e.src, i = e.textTracks;
                    if (!f && g) {
                        this.cache_.media.artwork = [
                            {
                                src: g,
                                type: cW(g)
                            }, 
                        ];
                    }
                    if (h) {
                        this.src(h);
                    }
                    if (g) {
                        this.poster(g);
                    }
                    if (Array.isArray(i)) {
                        i.forEach(function(a) {
                            return d.addRemoteTextTrack(a, false);
                        });
                    }
                    this.ready(c);
                };
                c.getMedia = function a() {
                    if (!this.cache_.media) {
                        var b = this.poster();
                        var c = this.currentSources();
                        var d = Array.prototype.map.call(this.remoteTextTracks(), function(a) {
                            return {
                                kind: a.kind,
                                label: a.label,
                                language: a.language,
                                src: a.src
                            };
                        });
                        var e = {
                            src: c,
                            textTracks: d
                        };
                        if (b) {
                            e.poster = b;
                            e.artwork = [
                                {
                                    src: e.poster,
                                    type: cW(e.poster)
                                }, 
                            ];
                        }
                        return e;
                    }
                    return bN(this.cache_.media);
                };
                b.getTagSettings = function a(b) {
                    var c = {
                        sources: [],
                        tracks: []
                    };
                    var d = aN(b);
                    var e = d["data-setup"];
                    if (aI(b, "vjs-fill")) {
                        d.fill = true;
                    }
                    if (aI(b, "vjs-fluid")) {
                        d.fluid = true;
                    }
                    if (e !== null) {
                        var f = l()(e || "{}"), g = f[0], h = f[1];
                        if (g) {
                            V.error(g);
                        }
                        _(d, h);
                    }
                    _(c, d);
                    if (b.hasChildNodes()) {
                        var i = b.childNodes;
                        for(var j = 0, k = i.length; j < k; j++){
                            var m = i[j];
                            var n = m.nodeName.toLowerCase();
                            if (n === "source") {
                                c.sources.push(aN(m));
                            } else if (n === "track") {
                                c.tracks.push(aN(m));
                            }
                        }
                    }
                    return c;
                };
                c.flexNotSupported_ = function a() {
                    var b = g().createElement("i");
                    return !("flexBasis" in b.style || "webkitFlexBasis" in b.style || "mozFlexBasis" in b.style || "msFlexBasis" in b.style || "msFlexOrder" in b.style);
                };
                c.debug = function a(b) {
                    if (b === undefined) {
                        return this.debugEnabled_;
                    }
                    if (b) {
                        this.trigger("debugon");
                        this.previousLogLevel_ = this.log.level;
                        this.log.level("debug");
                        this.debugEnabled_ = true;
                    } else {
                        this.trigger("debugoff");
                        this.log.level(this.previousLogLevel_);
                        this.previousLogLevel_ = undefined;
                        this.debugEnabled_ = false;
                    }
                };
                c.playbackRates = function a(b) {
                    if (b === undefined) {
                        return this.cache_.playbackRates;
                    }
                    if (!Array.isArray(b)) {
                        return;
                    }
                    if (!b.every(function(a) {
                        return typeof a === "number";
                    })) {
                        return;
                    }
                    this.cache_.playbackRates = b;
                    this.trigger("playbackrateschange");
                };
                return b;
            })(bS);
            cB.names.forEach(function(a) {
                var b = cB[a];
                eH.prototype[b.getterName] = function() {
                    if (this.tech_) {
                        return this.tech_[b.getterName]();
                    }
                    this[b.privateName] = this[b.privateName] || new b.ListClass();
                    return this[b.privateName];
                };
            });
            eH.prototype.crossorigin = eH.prototype.crossOrigin;
            eH.players = {};
            var eI = e().navigator;
            eH.prototype.options_ = {
                techOrder: cD.defaultTechOrder_,
                html5: {},
                inactivityTimeout: 2000,
                playbackRates: [],
                liveui: false,
                children: [
                    "mediaLoader",
                    "posterImage",
                    "textTrackDisplay",
                    "loadingSpinner",
                    "bigPlayButton",
                    "liveTracker",
                    "controlBar",
                    "errorDisplay",
                    "textTrackSettings",
                    "resizeManager", 
                ],
                language: (eI && ((eI.languages && eI.languages[0]) || eI.userLanguage || eI.language)) || "en",
                languages: {},
                notSupportedMessage: "No compatible source was found for this media.",
                normalizeAutoplay: false,
                fullscreen: {
                    options: {
                        navigationUI: "hide"
                    }
                },
                breakpoints: {},
                responsive: false
            };
            [
                "ended",
                "seeking",
                "seekable",
                "networkState",
                "readyState", 
            ].forEach(function(a) {
                eH.prototype[a] = function() {
                    return this.techGet_(a);
                };
            });
            eC.forEach(function(a) {
                eH.prototype["handleTech" + bL(a) + "_"] = function() {
                    return this.trigger(a);
                };
            });
            bS.registerComponent("Player", eH);
            var eJ = "plugin";
            var eK = "activePlugins_";
            var eL = {};
            var eM = function a(b) {
                return eL.hasOwnProperty(b);
            };
            var eN = function a(b) {
                return eM(b) ? eL[b] : undefined;
            };
            var eO = function a(b, c) {
                b[eK] = b[eK] || {};
                b[eK][c] = true;
            };
            var eP = function a(b, c, d) {
                var e = (d ? "before" : "") + "pluginsetup";
                b.trigger(e, c);
                b.trigger(e + ":" + c.name, c);
            };
            var eQ = function a(b, c) {
                var d = function a() {
                    eP(this, {
                        name: b,
                        plugin: c,
                        instance: null
                    }, true);
                    var d = c.apply(this, arguments);
                    eO(this, b);
                    eP(this, {
                        name: b,
                        plugin: c,
                        instance: d
                    });
                    return d;
                };
                Object.keys(c).forEach(function(a) {
                    d[a] = c[a];
                });
                return d;
            };
            var eR = function a(b, c) {
                c.prototype.name = b;
                return function() {
                    eP(this, {
                        name: b,
                        plugin: c,
                        instance: null
                    }, true);
                    for(var a = arguments.length, d = new Array(a), e = 0; e < a; e++){
                        d[e] = arguments[e];
                    }
                    var f = (0, s.Z)(c, [
                        this
                    ].concat(d));
                    this[b] = function() {
                        return f;
                    };
                    eP(this, f.getEventHash());
                    return f;
                };
            };
            var eS = (function() {
                function a(b) {
                    if (this.constructor === a) {
                        throw new Error("Plugin must be sub-classed; not directly instantiated.");
                    }
                    this.player = b;
                    if (!this.log) {
                        this.log = this.player.log.createLogger(this.name);
                    }
                    bH(this);
                    delete this.trigger;
                    bJ(this, this.constructor.defaultState);
                    eO(b, this.name);
                    this.dispose = this.dispose.bind(this);
                    b.on("dispose", this.dispose);
                }
                var b = a.prototype;
                b.version = function a() {
                    return this.constructor.VERSION;
                };
                b.getEventHash = function a(b) {
                    if (b === void 0) {
                        b = {};
                    }
                    b.name = this.name;
                    b.plugin = this.constructor;
                    b.instance = this;
                    return b;
                };
                b.trigger = function a(b, c) {
                    if (c === void 0) {
                        c = {};
                    }
                    return bn(this.eventBusEl_, b, this.getEventHash(c));
                };
                b.handleStateChanged = function a(b) {};
                b.dispose = function a() {
                    var b = this.name, c = this.player;
                    this.trigger("dispose");
                    this.off();
                    c.off("dispose", this.dispose);
                    c[eK][b] = false;
                    this.player = this.state = null;
                    c[b] = eR(b, eL[b]);
                };
                a.isBasic = function b(c) {
                    var d = typeof c === "string" ? eN(c) : c;
                    return (typeof d === "function" && !a.prototype.isPrototypeOf(d.prototype));
                };
                a.registerPlugin = function b(c, d) {
                    if (typeof c !== "string") {
                        throw new Error('Illegal plugin name, "' + c + '", must be a string, was ' + typeof c + ".");
                    }
                    if (eM(c)) {
                        V.warn('A plugin named "' + c + '" already exists. You may want to avoid re-registering plugins!');
                    } else if (eH.prototype.hasOwnProperty(c)) {
                        throw new Error('Illegal plugin name, "' + c + '", cannot share a name with an existing player method!');
                    }
                    if (typeof d !== "function") {
                        throw new Error('Illegal plugin for "' + c + '", must be a function, was ' + typeof d + ".");
                    }
                    eL[c] = d;
                    if (c !== eJ) {
                        if (a.isBasic(d)) {
                            eH.prototype[c] = eQ(c, d);
                        } else {
                            eH.prototype[c] = eR(c, d);
                        }
                    }
                    return d;
                };
                a.deregisterPlugin = function a(b) {
                    if (b === eJ) {
                        throw new Error("Cannot de-register base plugin.");
                    }
                    if (eM(b)) {
                        delete eL[b];
                        delete eH.prototype[b];
                    }
                };
                a.getPlugins = function a(b) {
                    if (b === void 0) {
                        b = Object.keys(eL);
                    }
                    var c;
                    b.forEach(function(a) {
                        var b = eN(a);
                        if (b) {
                            c = c || {};
                            c[a] = b;
                        }
                    });
                    return c;
                };
                a.getPluginVersion = function a(b) {
                    var c = eN(b);
                    return (c && c.VERSION) || "";
                };
                return a;
            })();
            eS.getPlugin = eN;
            eS.BASE_PLUGIN_NAME = eJ;
            eS.registerPlugin(eJ, eS);
            eH.prototype.usingPlugin = function(a) {
                return (!!this[eK] && this[eK][a] === true);
            };
            eH.prototype.hasPlugin = function(a) {
                return !!eM(a);
            };
            var eT = function a(b, c) {
                if (c === void 0) {
                    c = {};
                }
                var d = function a() {
                    b.apply(this, arguments);
                };
                var e = {};
                if (typeof c === "object") {
                    if (c.constructor !== Object.prototype.constructor) {
                        d = c.constructor;
                    }
                    e = c;
                } else if (typeof c === "function") {
                    d = c;
                }
                (0, t.Z)(d, b);
                if (b) {
                    d.super_ = b;
                }
                for(var f in e){
                    if (e.hasOwnProperty(f)) {
                        d.prototype[f] = e[f];
                    }
                }
                return d;
            };
            var eU = function a(b) {
                return b.indexOf("#") === 0 ? b.slice(1) : b;
            };
            function eV(a, b, c) {
                var d = eV.getPlayer(a);
                if (d) {
                    if (b) {
                        V.warn('Player "' + a + '" is already initialised. Options will not be applied.');
                    }
                    if (c) {
                        d.ready(c);
                    }
                    return d;
                }
                var e = typeof a === "string" ? a0("#" + eU(a)) : a;
                if (!aC(e)) {
                    throw new TypeError("The element or ID supplied is not valid. (videojs)");
                }
                if (!e.ownerDocument.defaultView || !e.ownerDocument.body.contains(e)) {
                    V.warn("The element supplied is not included in the DOM");
                }
                b = b || {};
                I("beforesetup").forEach(function(a) {
                    var c = a(e, bN(b));
                    if (!aa(c) || Array.isArray(c)) {
                        V.error("please return an object in beforesetup hooks");
                        return;
                    }
                    b = bN(b, c);
                });
                var f = bS.getComponent("Player");
                d = new f(e, b, c);
                I("setup").forEach(function(a) {
                    return a(d);
                });
                return d;
            }
            eV.hooks_ = H;
            eV.hooks = I;
            eV.hook = J;
            eV.hookOnce = L;
            eV.removeHook = K;
            if (e().VIDEOJS_NO_DYNAMIC_STYLE !== true && aB()) {
                var eW = a0(".vjs-styles-defaults");
                if (!eW) {
                    eW = a8("vjs-styles-defaults");
                    var eX = a0("head");
                    if (eX) {
                        eX.insertBefore(eW, eX.firstChild);
                    }
                    a9(eW, "\n      .video-js {\n        width: 300px;\n        height: 150px;\n      }\n\n      .vjs-fluid {\n        padding-top: 56.25%\n      }\n    ");
                }
            }
            a6(1, eV);
            eV.VERSION = G;
            eV.options = eH.prototype.options_;
            eV.getPlayers = function() {
                return eH.players;
            };
            eV.getPlayer = function(a) {
                var b = eH.players;
                var c;
                if (typeof a === "string") {
                    var d = eU(a);
                    var e = b[d];
                    if (e) {
                        return e;
                    }
                    c = a0("#" + d);
                } else {
                    c = a;
                }
                if (aC(c)) {
                    var f = c, g = f.player, h = f.playerId;
                    if (g || b[h]) {
                        return g || b[h];
                    }
                }
            };
            eV.getAllPlayers = function() {
                return (Object.keys(eH.players).map(function(a) {
                    return eH.players[a];
                }).filter(Boolean));
            };
            eV.players = eH.players;
            eV.getComponent = bS.getComponent;
            eV.registerComponent = function(a, b) {
                if (cD.isTech(b)) {
                    V.warn("The " + a + " tech was registered as a component. It should instead be registered using videojs.registerTech(name, tech)");
                }
                bS.registerComponent.call(bS, a, b);
            };
            eV.getTech = cD.getTech;
            eV.registerTech = cD.registerTech;
            eV.use = cH;
            Object.defineProperty(eV, "middleware", {
                value: {},
                writeable: false,
                enumerable: true
            });
            Object.defineProperty(eV.middleware, "TERMINATOR", {
                value: cG,
                writeable: false,
                enumerable: true
            });
            eV.browser = ax;
            eV.TOUCH_ENABLED = as;
            eV.extend = eT;
            eV.mergeOptions = bN;
            eV.bind = bs;
            eV.registerPlugin = eS.registerPlugin;
            eV.deregisterPlugin = eS.deregisterPlugin;
            eV.plugin = function(a, b) {
                V.warn("videojs.plugin() is deprecated; use videojs.registerPlugin() instead");
                return eS.registerPlugin(a, b);
            };
            eV.getPlugins = eS.getPlugins;
            eV.getPlugin = eS.getPlugin;
            eV.getPluginVersion = eS.getPluginVersion;
            eV.addLanguage = function(a, b) {
                var c;
                a = ("" + a).toLowerCase();
                eV.options.languages = bN(eV.options.languages, ((c = {}), (c[a] = b), c));
                return eV.options.languages[a];
            };
            eV.log = V;
            eV.createLogger = W;
            eV.createTimeRange = eV.createTimeRanges = bW;
            eV.formatTime = dg;
            eV.setFormatTime = de;
            eV.resetFormatTime = df;
            eV.parseUrl = ck;
            eV.isCrossOrigin = cn;
            eV.EventTarget = bv;
            eV.on = bl;
            eV.one = bo;
            eV.off = bm;
            eV.trigger = bn;
            eV.xhr = p();
            eV.TextTrack = cr;
            eV.AudioTrack = cs;
            eV.VideoTrack = ct;
            [
                "isEl",
                "isTextNode",
                "createEl",
                "hasClass",
                "addClass",
                "removeClass",
                "toggleClass",
                "setAttributes",
                "getAttributes",
                "emptyEl",
                "appendContent",
                "insertContent", 
            ].forEach(function(a) {
                eV[a] = function() {
                    V.warn("videojs." + a + "() is deprecated; use videojs.dom." + a + "() instead");
                    return a2[a].apply(null, arguments);
                };
            });
            eV.computedStyle = ac;
            eV.dom = a2;
            eV.url = co;
            eV.defineLazyProperty = ez;
            eV.addLanguage("en", {
                "Non-Fullscreen": "Exit Fullscreen"
            });
            var eY = u.Z;
            var eZ = function a(b, c, d) {
                if (b && d && d.responseURL && c !== d.responseURL) {
                    return d.responseURL;
                }
                return c;
            };
            var e$ = function a(b) {
                if (eV.log.debug) {
                    return eV.log.debug.bind(eV, "VHS:", b + " >");
                }
                return function() {};
            };
            var e_ = 1 / 30;
            var e0 = e_ * 3;
            var e1 = function a(b, c) {
                var d = [];
                var e;
                if (b && b.length) {
                    for(e = 0; e < b.length; e++){
                        if (c(b.start(e), b.end(e))) {
                            d.push([
                                b.start(e),
                                b.end(e), 
                            ]);
                        }
                    }
                }
                return eV.createTimeRanges(d);
            };
            var e2 = function a(b, c) {
                return e1(b, function(a, b) {
                    return (a - e0 <= c && b + e0 >= c);
                });
            };
            var e3 = function a(b, c) {
                return e1(b, function(a) {
                    return a - e_ >= c;
                });
            };
            var e4 = function a(b) {
                if (b.length < 2) {
                    return eV.createTimeRanges();
                }
                var c = [];
                for(var d = 1; d < b.length; d++){
                    var e = b.end(d - 1);
                    var f = b.start(d);
                    c.push([
                        e,
                        f
                    ]);
                }
                return eV.createTimeRanges(c);
            };
            var e5 = function a(b, c) {
                var d = null;
                var e = null;
                var f = 0;
                var g = [];
                var h = [];
                if (!b || !b.length || !c || !c.length) {
                    return eV.createTimeRange();
                }
                var i = b.length;
                while(i--){
                    g.push({
                        time: b.start(i),
                        type: "start"
                    });
                    g.push({
                        time: b.end(i),
                        type: "end"
                    });
                }
                i = c.length;
                while(i--){
                    g.push({
                        time: c.start(i),
                        type: "start"
                    });
                    g.push({
                        time: c.end(i),
                        type: "end"
                    });
                }
                g.sort(function(a, b) {
                    return a.time - b.time;
                });
                for(i = 0; i < g.length; i++){
                    if (g[i].type === "start") {
                        f++;
                        if (f === 2) {
                            d = g[i].time;
                        }
                    } else if (g[i].type === "end") {
                        f--;
                        if (f === 1) {
                            e = g[i].time;
                        }
                    }
                    if (d !== null && e !== null) {
                        h.push([
                            d,
                            e
                        ]);
                        d = null;
                        e = null;
                    }
                }
                return eV.createTimeRanges(h);
            };
            var e6 = function a(b) {
                var c = [];
                if (!b || !b.length) {
                    return "";
                }
                for(var d = 0; d < b.length; d++){
                    c.push(b.start(d) + " => " + b.end(d));
                }
                return c.join(", ");
            };
            var e7 = function a(b, c, d) {
                if (d === void 0) {
                    d = 1;
                }
                var e = b.length ? b.end(b.length - 1) : 0;
                return (e - c) / d;
            };
            var e8 = function a(b) {
                var c = [];
                for(var d = 0; d < b.length; d++){
                    c.push({
                        start: b.start(d),
                        end: b.end(d)
                    });
                }
                return c;
            };
            var e9 = function a(b, c) {
                if (b === c) {
                    return false;
                }
                if ((!b && c) || (!c && b)) {
                    return true;
                }
                if (b.length !== c.length) {
                    return true;
                }
                for(var d = 0; d < b.length; d++){
                    if (b.start(d) !== c.start(d) || b.end(d) !== c.end(d)) {
                        return true;
                    }
                }
                return false;
            };
            var fa = function a(b) {
                if (!b || !b.length || !b.end) {
                    return;
                }
                return b.end(b.length - 1);
            };
            var fb = function a(b, c) {
                var d = 0;
                if (!b || !b.length) {
                    return d;
                }
                for(var e = 0; e < b.length; e++){
                    var f = b.start(e);
                    var g = b.end(e);
                    if (c > g) {
                        continue;
                    }
                    if (c > f && c <= g) {
                        d += g - c;
                        continue;
                    }
                    d += g - f;
                }
                return d;
            };
            var fc = eV.createTimeRange;
            var fd = function a(b, c) {
                if (!c.preload) {
                    return c.duration;
                }
                var d = 0;
                (c.parts || []).forEach(function(a) {
                    d += a.duration;
                });
                (c.preloadHints || []).forEach(function(a) {
                    if (a.type === "PART") {
                        d += b.partTargetDuration;
                    }
                });
                return d;
            };
            var fe = function a(b) {
                return (b.segments || []).reduce(function(a, b, c) {
                    if (b.parts) {
                        b.parts.forEach(function(d, e) {
                            a.push({
                                duration: d.duration,
                                segmentIndex: c,
                                partIndex: e,
                                part: d,
                                segment: b
                            });
                        });
                    } else {
                        a.push({
                            duration: b.duration,
                            segmentIndex: c,
                            partIndex: null,
                            segment: b,
                            part: null
                        });
                    }
                    return a;
                }, []);
            };
            var ff = function a(b) {
                var c = b.segments && b.segments.length && b.segments[b.segments.length - 1];
                return (c && c.parts) || [];
            };
            var fg = function a(b) {
                var c = b.preloadSegment;
                if (!c) {
                    return;
                }
                var d = c.parts, e = c.preloadHints;
                var f = (e || []).reduce(function(a, b) {
                    return a + (b.type === "PART" ? 1 : 0);
                }, 0);
                f += d && d.length ? d.length : 0;
                return f;
            };
            var fh = function a(b, c) {
                if (c.endList) {
                    return 0;
                }
                if (b && b.suggestedPresentationDelay) {
                    return b.suggestedPresentationDelay;
                }
                var d = ff(c).length > 0;
                if (d && c.serverControl && c.serverControl.partHoldBack) {
                    return c.serverControl.partHoldBack;
                } else if (d && c.partTargetDuration) {
                    return c.partTargetDuration * 3;
                } else if (c.serverControl && c.serverControl.holdBack) {
                    return c.serverControl.holdBack;
                } else if (c.targetDuration) {
                    return c.targetDuration * 3;
                }
                return 0;
            };
            var fi = function a(b, c) {
                var d = 0;
                var e = c - b.mediaSequence;
                var f = b.segments[e];
                if (f) {
                    if (typeof f.start !== "undefined") {
                        return {
                            result: f.start,
                            precise: true
                        };
                    }
                    if (typeof f.end !== "undefined") {
                        return {
                            result: f.end - f.duration,
                            precise: true
                        };
                    }
                }
                while(e--){
                    f = b.segments[e];
                    if (typeof f.end !== "undefined") {
                        return {
                            result: d + f.end,
                            precise: true
                        };
                    }
                    d += fd(b, f);
                    if (typeof f.start !== "undefined") {
                        return {
                            result: d + f.start,
                            precise: true
                        };
                    }
                }
                return {
                    result: d,
                    precise: false
                };
            };
            var fj = function a(b, c) {
                var d = 0;
                var e;
                var f = c - b.mediaSequence;
                for(; f < b.segments.length; f++){
                    e = b.segments[f];
                    if (typeof e.start !== "undefined") {
                        return {
                            result: e.start - d,
                            precise: true
                        };
                    }
                    d += fd(b, e);
                    if (typeof e.end !== "undefined") {
                        return {
                            result: e.end - d,
                            precise: true
                        };
                    }
                }
                return {
                    result: -1,
                    precise: false
                };
            };
            var fk = function a(b, c, d) {
                if (typeof c === "undefined") {
                    c = b.mediaSequence + b.segments.length;
                }
                if (c < b.mediaSequence) {
                    return 0;
                }
                var e = fi(b, c);
                if (e.precise) {
                    return e.result;
                }
                var f = fj(b, c);
                if (f.precise) {
                    return f.result;
                }
                return e.result + d;
            };
            var fl = function a(b, c, d) {
                if (!b) {
                    return 0;
                }
                if (typeof d !== "number") {
                    d = 0;
                }
                if (typeof c === "undefined") {
                    if (b.totalDuration) {
                        return b.totalDuration;
                    }
                    if (!b.endList) {
                        return e()[Infinity];
                    }
                }
                return fk(b, c, d);
            };
            var fm = function a(b) {
                var c = b.defaultDuration, d = b.durationList, e = b.startIndex, f = b.endIndex;
                var g = 0;
                if (e > f) {
                    var h = [
                        f,
                        e
                    ];
                    e = h[0];
                    f = h[1];
                }
                if (e < 0) {
                    for(var i = e; i < Math.min(0, f); i++){
                        g += c;
                    }
                    e = 0;
                }
                for(var j = e; j < f; j++){
                    g += d[j].duration;
                }
                return g;
            };
            var fn = function a(b, c, d, e) {
                if (!b || !b.segments) {
                    return null;
                }
                if (b.endList) {
                    return fl(b);
                }
                if (c === null) {
                    return null;
                }
                c = c || 0;
                var f = fk(b, b.mediaSequence + b.segments.length, c);
                if (d) {
                    e = typeof e === "number" ? e : fh(null, b);
                    f -= e;
                }
                return Math.max(0, f);
            };
            var fo = function a(b, c, d) {
                var e = true;
                var f = c || 0;
                var g = fn(b, c, e, d);
                if (g === null) {
                    return fc();
                }
                return fc(f, g);
            };
            var fp = function a(b) {
                var c = b.playlist, d = b.currentTime, e = b.startingSegmentIndex, f = b.startingPartIndex, g = b.startTime, h = b.experimentalExactManifestTimings;
                var i = d - g;
                var j = fe(c);
                var k = 0;
                for(var l = 0; l < j.length; l++){
                    var m = j[l];
                    if (e !== m.segmentIndex) {
                        continue;
                    }
                    if (typeof f === "number" && typeof m.partIndex === "number" && f !== m.partIndex) {
                        continue;
                    }
                    k = l;
                    break;
                }
                if (i < 0) {
                    if (k > 0) {
                        for(var n = k - 1; n >= 0; n--){
                            var o = j[n];
                            i += o.duration;
                            if (h) {
                                if (i < 0) {
                                    continue;
                                }
                            } else if (i + e_ <= 0) {
                                continue;
                            }
                            return {
                                partIndex: o.partIndex,
                                segmentIndex: o.segmentIndex,
                                startTime: g - fm({
                                    defaultDuration: c.targetDuration,
                                    durationList: j,
                                    startIndex: k,
                                    endIndex: n
                                })
                            };
                        }
                    }
                    return {
                        partIndex: (j[0] && j[0].partIndex) || null,
                        segmentIndex: (j[0] && j[0].segmentIndex) || 0,
                        startTime: d
                    };
                }
                if (k < 0) {
                    for(var p = k; p < 0; p++){
                        i -= c.targetDuration;
                        if (i < 0) {
                            return {
                                partIndex: (j[0] && j[0].partIndex) || null,
                                segmentIndex: (j[0] && j[0].segmentIndex) || 0,
                                startTime: d
                            };
                        }
                    }
                    k = 0;
                }
                for(var q = k; q < j.length; q++){
                    var r = j[q];
                    i -= r.duration;
                    if (h) {
                        if (i > 0) {
                            continue;
                        }
                    } else if (i - e_ >= 0) {
                        continue;
                    }
                    return {
                        partIndex: r.partIndex,
                        segmentIndex: r.segmentIndex,
                        startTime: g + fm({
                            defaultDuration: c.targetDuration,
                            durationList: j,
                            startIndex: k,
                            endIndex: q
                        })
                    };
                }
                return {
                    segmentIndex: j[j.length - 1].segmentIndex,
                    partIndex: j[j.length - 1].partIndex,
                    startTime: d
                };
            };
            var fq = function a(b) {
                return (b.excludeUntil && b.excludeUntil > Date.now());
            };
            var fr = function a(b) {
                return (b.excludeUntil && b.excludeUntil === Infinity);
            };
            var fs = function a(b) {
                var c = fq(b);
                return !b.disabled && !c;
            };
            var ft = function a(b) {
                return b.disabled;
            };
            var fu = function a(b) {
                for(var c = 0; c < b.segments.length; c++){
                    if (b.segments[c].key) {
                        return true;
                    }
                }
                return false;
            };
            var fv = function a(b, c) {
                return c.attributes && c.attributes[b];
            };
            var fw = function a(b, c, d, e) {
                if (e === void 0) {
                    e = 0;
                }
                if (!fv("BANDWIDTH", d)) {
                    return NaN;
                }
                var f = b * d.attributes.BANDWIDTH;
                return (f - e * 8) / c;
            };
            var fx = function a(b, c) {
                if (b.playlists.length === 1) {
                    return true;
                }
                var d = c.attributes.BANDWIDTH || Number.MAX_VALUE;
                return (b.playlists.filter(function(a) {
                    if (!fs(a)) {
                        return false;
                    }
                    return ((a.attributes.BANDWIDTH || 0) < d);
                }).length === 0);
            };
            var fy = function a(b, c) {
                if ((!b && !c) || (!b && c) || (b && !c)) {
                    return false;
                }
                if (b === c) {
                    return true;
                }
                if (b.id && c.id && b.id === c.id) {
                    return true;
                }
                if (b.resolvedUri && c.resolvedUri && b.resolvedUri === c.resolvedUri) {
                    return true;
                }
                if (b.uri && c.uri && b.uri === c.uri) {
                    return true;
                }
                return false;
            };
            var fz = function a(b, c) {
                var d = (b && b.mediaGroups && b.mediaGroups.AUDIO) || {};
                var e = false;
                for(var f in d){
                    for(var g in d[f]){
                        e = c(d[f][g]);
                        if (e) {
                            break;
                        }
                    }
                    if (e) {
                        break;
                    }
                }
                return !!e;
            };
            var fA = function a(b) {
                if (!b || !b.playlists || !b.playlists.length) {
                    var c = fz(b, function(a) {
                        return ((a.playlists && a.playlists.length) || a.uri);
                    });
                    return c;
                }
                var d = function a(c) {
                    var d = b.playlists[c];
                    var e = d.attributes && d.attributes.CODECS;
                    if (e && e.split(",").every(function(a) {
                        return (0, w.KL)(a);
                    })) {
                        return "continue";
                    }
                    var f = fz(b, function(a) {
                        return fy(d, a);
                    });
                    if (f) {
                        return "continue";
                    }
                    return {
                        v: false
                    };
                };
                for(var e = 0; e < b.playlists.length; e++){
                    var f = d(e);
                    if (f === "continue") continue;
                    if (typeof f === "object") return f.v;
                }
                return true;
            };
            var fB = {
                liveEdgeDelay: fh,
                duration: fl,
                seekable: fo,
                getMediaInfoForTime: fp,
                isEnabled: fs,
                isDisabled: ft,
                isBlacklisted: fq,
                isIncompatible: fr,
                playlistEnd: fn,
                isAes: fu,
                hasAttribute: fv,
                estimateSegmentRequestTime: fw,
                isLowestEnabledRendition: fx,
                isAudioOnly: fA,
                playlistMatch: fy,
                segmentDurationWithParts: fd
            };
            var fC = eV.log;
            var fD = function a(b, c) {
                return b + "-" + c;
            };
            var fE = function a(b) {
                var c = b.onwarn, d = b.oninfo, e = b.manifestString, f = b.customTagParsers, g = f === void 0 ? [] : f, h = b.customTagMappers, i = h === void 0 ? [] : h, j = b.experimentalLLHLS;
                var k = new v._b();
                if (c) {
                    k.on("warn", c);
                }
                if (d) {
                    k.on("info", d);
                }
                g.forEach(function(a) {
                    return k.addParser(a);
                });
                i.forEach(function(a) {
                    return k.addTagMapper(a);
                });
                k.push(e);
                k.end();
                var l = k.manifest;
                if (!j) {
                    [
                        "preloadSegment",
                        "skip",
                        "serverControl",
                        "renditionReports",
                        "partInf",
                        "partTargetDuration", 
                    ].forEach(function(a) {
                        if (l.hasOwnProperty(a)) {
                            delete l[a];
                        }
                    });
                    if (l.segments) {
                        l.segments.forEach(function(a) {
                            [
                                "parts",
                                "preloadHints"
                            ].forEach(function(b) {
                                if (a.hasOwnProperty(b)) {
                                    delete a[b];
                                }
                            });
                        });
                    }
                }
                if (!l.targetDuration) {
                    var m = 10;
                    if (l.segments && l.segments.length) {
                        m = l.segments.reduce(function(a, b) {
                            return Math.max(a, b.duration);
                        }, 0);
                    }
                    if (c) {
                        c("manifest has no targetDuration defaulting to " + m);
                    }
                    l.targetDuration = m;
                }
                var n = ff(l);
                if (n.length && !l.partTargetDuration) {
                    var o = n.reduce(function(a, b) {
                        return Math.max(a, b.duration);
                    }, 0);
                    if (c) {
                        c("manifest has no partTargetDuration defaulting to " + o);
                        fC.error("LL-HLS manifest has parts but lacks required #EXT-X-PART-INF:PART-TARGET value. See https://datatracker.ietf.org/doc/html/draft-pantos-hls-rfc8216bis-09#section-4.4.3.7. Playback is not guaranteed.");
                    }
                    l.partTargetDuration = o;
                }
                return l;
            };
            var fF = function a(b, c) {
                if (!b.mediaGroups) {
                    return;
                }
                [
                    "AUDIO",
                    "SUBTITLES"
                ].forEach(function(a) {
                    if (!b.mediaGroups[a]) {
                        return;
                    }
                    for(var d in b.mediaGroups[a]){
                        for(var e in b.mediaGroups[a][d]){
                            var f = b.mediaGroups[a][d][e];
                            c(f, a, d, e);
                        }
                    }
                });
            };
            var fG = function a(b) {
                var c = b.playlist, d = b.uri, e = b.id;
                c.id = e;
                c.playlistErrors_ = 0;
                if (d) {
                    c.uri = d;
                }
                c.attributes = c.attributes || {};
            };
            var fH = function a(b) {
                var c = b.playlists.length;
                while(c--){
                    var d = b.playlists[c];
                    fG({
                        playlist: d,
                        id: fD(c, d.uri)
                    });
                    d.resolvedUri = eY(b.uri, d.uri);
                    b.playlists[d.id] = d;
                    b.playlists[d.uri] = d;
                    if (!d.attributes.BANDWIDTH) {
                        fC.warn("Invalid playlist STREAM-INF detected. Missing BANDWIDTH attribute.");
                    }
                }
            };
            var fI = function a(b) {
                fF(b, function(a) {
                    if (a.uri) {
                        a.resolvedUri = eY(b.uri, a.uri);
                    }
                });
            };
            var fJ = function a(b, c) {
                var d = fD(0, c);
                var f = {
                    mediaGroups: {
                        AUDIO: {},
                        VIDEO: {},
                        "CLOSED-CAPTIONS": {},
                        SUBTITLES: {}
                    },
                    uri: e().location.href,
                    resolvedUri: e().location.href,
                    playlists: [
                        {
                            uri: c,
                            id: d,
                            resolvedUri: c,
                            attributes: {}
                        }, 
                    ]
                };
                f.playlists[d] = f.playlists[0];
                f.playlists[c] = f.playlists[0];
                return f;
            };
            var fK = function a(b, c) {
                b.uri = c;
                for(var d = 0; d < b.playlists.length; d++){
                    if (!b.playlists[d].uri) {
                        var e = "placeholder-uri-" + d;
                        b.playlists[d].uri = e;
                    }
                }
                var f = fA(b);
                fF(b, function(a, c, d, e) {
                    var g = "placeholder-uri-" + c + "-" + d + "-" + e;
                    if (!a.playlists || !a.playlists.length) {
                        if (f && c === "AUDIO" && !a.uri) {
                            for(var i = 0; i < b.playlists.length; i++){
                                var j = b.playlists[i];
                                if (j.attributes && j.attributes.AUDIO && j.attributes.AUDIO === d) {
                                    return;
                                }
                            }
                        }
                        a.playlists = [
                            (0, h.Z)({}, a), 
                        ];
                    }
                    a.playlists.forEach(function(a, c) {
                        var d = fD(c, g);
                        if (a.uri) {
                            a.resolvedUri = a.resolvedUri || eY(b.uri, a.uri);
                        } else {
                            a.uri = c === 0 ? g : d;
                            a.resolvedUri = a.uri;
                        }
                        a.id = a.id || d;
                        a.attributes = a.attributes || {};
                        b.playlists[a.id] = a;
                        b.playlists[a.uri] = a;
                    });
                });
                fH(b);
                fI(b);
            };
            var fL = eV.mergeOptions, fM = eV.EventTarget;
            var fN = function a(b, c) {
                if (c.endList || !c.serverControl) {
                    return b;
                }
                var d = {};
                if (c.serverControl.canBlockReload) {
                    var f = c.preloadSegment;
                    var g = c.mediaSequence + c.segments.length;
                    if (f) {
                        var h = f.parts || [];
                        var i = fg(c) - 1;
                        if (i > -1 && i !== h.length - 1) {
                            d._HLS_part = i;
                        }
                        if (i > -1 || h.length) {
                            g--;
                        }
                    }
                    d._HLS_msn = g;
                }
                if (c.serverControl && c.serverControl.canSkipUntil) {
                    d._HLS_skip = c.serverControl.canSkipDateranges ? "v2" : "YES";
                }
                if (Object.keys(d).length) {
                    var j = new (e().URL)(b);
                    [
                        "_HLS_skip",
                        "_HLS_msn",
                        "_HLS_part"
                    ].forEach(function(a) {
                        if (!d.hasOwnProperty(a)) {
                            return;
                        }
                        j.searchParams.set(a, d[a]);
                    });
                    b = j.toString();
                }
                return b;
            };
            var fO = function a(b, c) {
                if (!b) {
                    return c;
                }
                var d = fL(b, c);
                if (b.preloadHints && !c.preloadHints) {
                    delete d.preloadHints;
                }
                if (b.parts && !c.parts) {
                    delete d.parts;
                } else if (b.parts && c.parts) {
                    for(var e = 0; e < c.parts.length; e++){
                        if (b.parts && b.parts[e]) {
                            d.parts[e] = fL(b.parts[e], c.parts[e]);
                        }
                    }
                }
                if (!b.skipped && c.skipped) {
                    d.skipped = false;
                }
                if (b.preload && !c.preload) {
                    d.preload = false;
                }
                return d;
            };
            var fP = function a(b, c, d) {
                var e = b.slice();
                var f = c.slice();
                d = d || 0;
                var g = [];
                var h;
                for(var i = 0; i < f.length; i++){
                    var j = e[i + d];
                    var k = f[i];
                    if (j) {
                        h = j.map || h;
                        g.push(fO(j, k));
                    } else {
                        if (h && !k.map) {
                            k.map = h;
                        }
                        g.push(k);
                    }
                }
                return g;
            };
            var fQ = function a(b, c) {
                if (!b.resolvedUri && b.uri) {
                    b.resolvedUri = eY(c, b.uri);
                }
                if (b.key && !b.key.resolvedUri) {
                    b.key.resolvedUri = eY(c, b.key.uri);
                }
                if (b.map && !b.map.resolvedUri) {
                    b.map.resolvedUri = eY(c, b.map.uri);
                }
                if (b.map && b.map.key && !b.map.key.resolvedUri) {
                    b.map.key.resolvedUri = eY(c, b.map.key.uri);
                }
                if (b.parts && b.parts.length) {
                    b.parts.forEach(function(a) {
                        if (a.resolvedUri) {
                            return;
                        }
                        a.resolvedUri = eY(c, a.uri);
                    });
                }
                if (b.preloadHints && b.preloadHints.length) {
                    b.preloadHints.forEach(function(a) {
                        if (a.resolvedUri) {
                            return;
                        }
                        a.resolvedUri = eY(c, a.uri);
                    });
                }
            };
            var fR = function a(b) {
                var c = b.segments || [];
                var d = b.preloadSegment;
                if (d && d.parts && d.parts.length) {
                    if (d.preloadHints) {
                        for(var e = 0; e < d.preloadHints.length; e++){
                            if (d.preloadHints[e].type === "MAP") {
                                return c;
                            }
                        }
                    }
                    d.duration = b.targetDuration;
                    d.preload = true;
                    c.push(d);
                }
                return c;
            };
            var fS = function a(b, c) {
                return (b === c || (b.segments && c.segments && b.segments.length === c.segments.length && b.endList === c.endList && b.mediaSequence === c.mediaSequence && b.preloadSegment === c.preloadSegment));
            };
            var fT = function a(b, c, d) {
                if (d === void 0) {
                    d = fS;
                }
                var e = fL(b, {});
                var f = e.playlists[c.id];
                if (!f) {
                    return null;
                }
                if (d(f, c)) {
                    return null;
                }
                c.segments = fR(c);
                var g = fL(f, c);
                if (g.preloadSegment && !c.preloadSegment) {
                    delete g.preloadSegment;
                }
                if (f.segments) {
                    if (c.skip) {
                        c.segments = c.segments || [];
                        for(var h = 0; h < c.skip.skippedSegments; h++){
                            c.segments.unshift({
                                skipped: true
                            });
                        }
                    }
                    g.segments = fP(f.segments, c.segments, c.mediaSequence - f.mediaSequence);
                }
                g.segments.forEach(function(a) {
                    fQ(a, g.resolvedUri);
                });
                for(var i = 0; i < e.playlists.length; i++){
                    if (e.playlists[i].id === c.id) {
                        e.playlists[i] = g;
                    }
                }
                e.playlists[c.id] = g;
                e.playlists[c.uri] = g;
                fF(b, function(a, b, d, e) {
                    if (!a.playlists) {
                        return;
                    }
                    for(var f = 0; f < a.playlists.length; f++){
                        if (c.id === a.playlists[f].id) {
                            a.playlists[f] = c;
                        }
                    }
                });
                return e;
            };
            var fU = function a(b, c) {
                var d = b.segments || [];
                var e = d[d.length - 1];
                var f = e && e.parts && e.parts[e.parts.length - 1];
                var g = (f && f.duration) || (e && e.duration);
                if (c && g) {
                    return g * 1000;
                }
                return ((b.partTargetDuration || b.targetDuration || 10) * 500);
            };
            var fV = (function(a) {
                (0, j.Z)(b, a);
                function b(b, c, d) {
                    var e;
                    if (d === void 0) {
                        d = {};
                    }
                    e = a.call(this) || this;
                    if (!b) {
                        throw new Error("A non-empty playlist URL or object is required");
                    }
                    e.logger_ = e$("PlaylistLoader");
                    var f = d, g = f.withCredentials, h = g === void 0 ? false : g, j = f.handleManifestRedirects, k = j === void 0 ? false : j;
                    e.src = b;
                    e.vhs_ = c;
                    e.withCredentials = h;
                    e.handleManifestRedirects = k;
                    var l = c.options_;
                    e.customTagParsers = (l && l.customTagParsers) || [];
                    e.customTagMappers = (l && l.customTagMappers) || [];
                    e.experimentalLLHLS = (l && l.experimentalLLHLS) || false;
                    if (eV.browser.IE_VERSION) {
                        e.experimentalLLHLS = false;
                    }
                    e.state = "HAVE_NOTHING";
                    e.handleMediaupdatetimeout_ = e.handleMediaupdatetimeout_.bind((0, i.Z)(e));
                    e.on("mediaupdatetimeout", e.handleMediaupdatetimeout_);
                    return e;
                }
                var c = b.prototype;
                c.handleMediaupdatetimeout_ = function a() {
                    var b = this;
                    if (this.state !== "HAVE_METADATA") {
                        return;
                    }
                    var c = this.media();
                    var d = eY(this.master.uri, c.uri);
                    if (this.experimentalLLHLS) {
                        d = fN(d, c);
                    }
                    this.state = "HAVE_CURRENT_METADATA";
                    this.request = this.vhs_.xhr({
                        uri: d,
                        withCredentials: this.withCredentials
                    }, function(a, c) {
                        if (!b.request) {
                            return;
                        }
                        if (a) {
                            return b.playlistRequestError(b.request, b.media(), "HAVE_METADATA");
                        }
                        b.haveMetadata({
                            playlistString: b.request.responseText,
                            url: b.media().uri,
                            id: b.media().id
                        });
                    });
                };
                c.playlistRequestError = function a(b, c, d) {
                    var e = c.uri, f = c.id;
                    this.request = null;
                    if (d) {
                        this.state = d;
                    }
                    this.error = {
                        playlist: this.master.playlists[f],
                        status: b.status,
                        message: "HLS playlist request error at URL: " + e + ".",
                        responseText: b.responseText,
                        code: b.status >= 500 ? 4 : 2
                    };
                    this.trigger("error");
                };
                c.parseManifest_ = function a(b) {
                    var c = this;
                    var d = b.url, e = b.manifestString;
                    return fE({
                        onwarn: function a(b) {
                            var e = b.message;
                            return c.logger_("m3u8-parser warn for " + d + ": " + e);
                        },
                        oninfo: function a(b) {
                            var e = b.message;
                            return c.logger_("m3u8-parser info for " + d + ": " + e);
                        },
                        manifestString: e,
                        customTagParsers: this.customTagParsers,
                        customTagMappers: this.customTagMappers,
                        experimentalLLHLS: this.experimentalLLHLS
                    });
                };
                c.haveMetadata = function a(b) {
                    var c = b.playlistString, d = b.playlistObject, e = b.url, f = b.id;
                    this.request = null;
                    this.state = "HAVE_METADATA";
                    var g = d || this.parseManifest_({
                        url: e,
                        manifestString: c
                    });
                    g.lastRequest = Date.now();
                    fG({
                        playlist: g,
                        uri: e,
                        id: f
                    });
                    var h = fT(this.master, g);
                    this.targetDuration = g.partTargetDuration || g.targetDuration;
                    this.pendingMedia_ = null;
                    if (h) {
                        this.master = h;
                        this.media_ = this.master.playlists[f];
                    } else {
                        this.trigger("playlistunchanged");
                    }
                    this.updateMediaUpdateTimeout_(fU(this.media(), !!h));
                    this.trigger("loadedplaylist");
                };
                c.dispose = function a() {
                    this.trigger("dispose");
                    this.stopRequest();
                    e().clearTimeout(this.mediaUpdateTimeout);
                    e().clearTimeout(this.finalRenditionTimeout);
                    this.off();
                };
                c.stopRequest = function a() {
                    if (this.request) {
                        var b = this.request;
                        this.request = null;
                        b.onreadystatechange = null;
                        b.abort();
                    }
                };
                c.media = function a(b, c) {
                    var d = this;
                    if (!b) {
                        return this.media_;
                    }
                    if (this.state === "HAVE_NOTHING") {
                        throw new Error("Cannot switch media playlist from " + this.state);
                    }
                    if (typeof b === "string") {
                        if (!this.master.playlists[b]) {
                            throw new Error("Unknown playlist URI: " + b);
                        }
                        b = this.master.playlists[b];
                    }
                    e().clearTimeout(this.finalRenditionTimeout);
                    if (c) {
                        var f = ((b.partTargetDuration || b.targetDuration) / 2) * 1000 || 5 * 1000;
                        this.finalRenditionTimeout = e().setTimeout(this.media.bind(this, b, false), f);
                        return;
                    }
                    var g = this.state;
                    var h = !this.media_ || b.id !== this.media_.id;
                    var i = this.master.playlists[b.id];
                    if ((i && i.endList) || (b.endList && b.segments.length)) {
                        if (this.request) {
                            this.request.onreadystatechange = null;
                            this.request.abort();
                            this.request = null;
                        }
                        this.state = "HAVE_METADATA";
                        this.media_ = b;
                        if (h) {
                            this.trigger("mediachanging");
                            if (g === "HAVE_MASTER") {
                                this.trigger("loadedmetadata");
                            } else {
                                this.trigger("mediachange");
                            }
                        }
                        return;
                    }
                    this.updateMediaUpdateTimeout_(fU(b, true));
                    if (!h) {
                        return;
                    }
                    this.state = "SWITCHING_MEDIA";
                    if (this.request) {
                        if (b.resolvedUri === this.request.url) {
                            return;
                        }
                        this.request.onreadystatechange = null;
                        this.request.abort();
                        this.request = null;
                    }
                    if (this.media_) {
                        this.trigger("mediachanging");
                    }
                    this.pendingMedia_ = b;
                    this.request = this.vhs_.xhr({
                        uri: b.resolvedUri,
                        withCredentials: this.withCredentials
                    }, function(a, c) {
                        if (!d.request) {
                            return;
                        }
                        b.lastRequest = Date.now();
                        b.resolvedUri = eZ(d.handleManifestRedirects, b.resolvedUri, c);
                        if (a) {
                            return d.playlistRequestError(d.request, b, g);
                        }
                        d.haveMetadata({
                            playlistString: c.responseText,
                            url: b.uri,
                            id: b.id
                        });
                        if (g === "HAVE_MASTER") {
                            d.trigger("loadedmetadata");
                        } else {
                            d.trigger("mediachange");
                        }
                    });
                };
                c.pause = function a() {
                    if (this.mediaUpdateTimeout) {
                        e().clearTimeout(this.mediaUpdateTimeout);
                        this.mediaUpdateTimeout = null;
                    }
                    this.stopRequest();
                    if (this.state === "HAVE_NOTHING") {
                        this.started = false;
                    }
                    if (this.state === "SWITCHING_MEDIA") {
                        if (this.media_) {
                            this.state = "HAVE_METADATA";
                        } else {
                            this.state = "HAVE_MASTER";
                        }
                    } else if (this.state === "HAVE_CURRENT_METADATA") {
                        this.state = "HAVE_METADATA";
                    }
                };
                c.load = function a(b) {
                    var c = this;
                    if (this.mediaUpdateTimeout) {
                        e().clearTimeout(this.mediaUpdateTimeout);
                        this.mediaUpdateTimeout = null;
                    }
                    var d = this.media();
                    if (b) {
                        var f = d ? ((d.partTargetDuration || d.targetDuration) / 2) * 1000 : 5 * 1000;
                        this.mediaUpdateTimeout = e().setTimeout(function() {
                            c.mediaUpdateTimeout = null;
                            c.load();
                        }, f);
                        return;
                    }
                    if (!this.started) {
                        this.start();
                        return;
                    }
                    if (d && !d.endList) {
                        this.trigger("mediaupdatetimeout");
                    } else {
                        this.trigger("loadedplaylist");
                    }
                };
                c.updateMediaUpdateTimeout_ = function a(b) {
                    var c = this;
                    if (this.mediaUpdateTimeout) {
                        e().clearTimeout(this.mediaUpdateTimeout);
                        this.mediaUpdateTimeout = null;
                    }
                    if (!this.media() || this.media().endList) {
                        return;
                    }
                    this.mediaUpdateTimeout = e().setTimeout(function() {
                        c.mediaUpdateTimeout = null;
                        c.trigger("mediaupdatetimeout");
                        c.updateMediaUpdateTimeout_(b);
                    }, b);
                };
                c.start = function a() {
                    var b = this;
                    this.started = true;
                    if (typeof this.src === "object") {
                        if (!this.src.uri) {
                            this.src.uri = e().location.href;
                        }
                        this.src.resolvedUri = this.src.uri;
                        setTimeout(function() {
                            b.setupInitialPlaylist(b.src);
                        }, 0);
                        return;
                    }
                    this.request = this.vhs_.xhr({
                        uri: this.src,
                        withCredentials: this.withCredentials
                    }, function(a, c) {
                        if (!b.request) {
                            return;
                        }
                        b.request = null;
                        if (a) {
                            b.error = {
                                status: c.status,
                                message: "HLS playlist request error at URL: " + b.src + ".",
                                responseText: c.responseText,
                                code: 2
                            };
                            if (b.state === "HAVE_NOTHING") {
                                b.started = false;
                            }
                            return b.trigger("error");
                        }
                        b.src = eZ(b.handleManifestRedirects, b.src, c);
                        var d = b.parseManifest_({
                            manifestString: c.responseText,
                            url: b.src
                        });
                        b.setupInitialPlaylist(d);
                    });
                };
                c.srcUri = function a() {
                    return typeof this.src === "string" ? this.src : this.src.uri;
                };
                c.setupInitialPlaylist = function a(b) {
                    this.state = "HAVE_MASTER";
                    if (b.playlists) {
                        this.master = b;
                        fK(this.master, this.srcUri());
                        b.playlists.forEach(function(a) {
                            a.segments = fR(a);
                            a.segments.forEach(function(b) {
                                fQ(b, a.resolvedUri);
                            });
                        });
                        this.trigger("loadedplaylist");
                        if (!this.request) {
                            this.media(this.master.playlists[0]);
                        }
                        return;
                    }
                    var c = this.srcUri() || e().location.href;
                    this.master = fJ(b, c);
                    this.haveMetadata({
                        playlistObject: b,
                        url: c,
                        id: this.master.playlists[0].id
                    });
                    this.trigger("loadedmetadata");
                };
                return b;
            })(fM);
            var fW = eV.xhr, fX = eV.mergeOptions;
            var fY = function a(b, c, d, e) {
                var f = b.responseType === "arraybuffer" ? b.response : b.responseText;
                if (!c && f) {
                    b.responseTime = Date.now();
                    b.roundTripTime = b.responseTime - b.requestTime;
                    b.bytesReceived = f.byteLength || f.length;
                    if (!b.bandwidth) {
                        b.bandwidth = Math.floor((b.bytesReceived / b.roundTripTime) * 8 * 1000);
                    }
                }
                if (d.headers) {
                    b.responseHeaders = d.headers;
                }
                if (c && c.code === "ETIMEDOUT") {
                    b.timedout = true;
                }
                if (!c && !b.aborted && d.statusCode !== 200 && d.statusCode !== 206 && d.statusCode !== 0) {
                    c = new Error("XHR Failed with a response of: " + (b && (f || b.responseText)));
                }
                e(c, b);
            };
            var fZ = function a() {
                var b = function a(b, c) {
                    b = fX({
                        timeout: 45e3
                    }, b);
                    var d = a.beforeRequest || eV.Vhs.xhr.beforeRequest;
                    if (d && typeof d === "function") {
                        var e = d(b);
                        if (e) {
                            b = e;
                        }
                    }
                    var f = eV.Vhs.xhr.original === true ? fW : eV.Vhs.xhr;
                    var g = f(b, function(a, b) {
                        return fY(g, a, b, c);
                    });
                    var h = g.abort;
                    g.abort = function() {
                        g.aborted = true;
                        return h.apply(g, arguments);
                    };
                    g.uri = b.uri;
                    g.requestTime = Date.now();
                    return g;
                };
                b.original = true;
                return b;
            };
            var f$ = function a(b) {
                var c = b.offset + b.length - 1;
                var d = b.offset;
                return "bytes=" + d + "-" + c;
            };
            var f_ = function a(b) {
                var c = {};
                if (b.byterange) {
                    c.Range = f$(b.byterange);
                }
                return c;
            };
            var f0 = function a(b, c) {
                return b.start(c) + "-" + b.end(c);
            };
            var f1 = function a(b, c) {
                var d = b.toString(16);
                return ("00".substring(0, 2 - d.length) + d + (c % 2 ? " " : ""));
            };
            var f2 = function a(b) {
                if (b >= 0x20 && b < 0x7e) {
                    return String.fromCharCode(b);
                }
                return ".";
            };
            var f3 = function a(b) {
                var c = {};
                Object.keys(b).forEach(function(a) {
                    var d = b[a];
                    if (ArrayBuffer.isView(d)) {
                        c[a] = {
                            bytes: d.buffer,
                            byteOffset: d.byteOffset,
                            byteLength: d.byteLength
                        };
                    } else {
                        c[a] = d;
                    }
                });
                return c;
            };
            var f4 = function a(b) {
                var c = b.byterange || {
                    length: Infinity,
                    offset: 0
                };
                return [
                    c.length,
                    c.offset,
                    b.resolvedUri, 
                ].join(",");
            };
            var f5 = function a(b) {
                return b.resolvedUri;
            };
            var f6 = function a(b) {
                var c = Array.prototype.slice.call(b);
                var d = 16;
                var e = "";
                var f;
                var g;
                for(var h = 0; h < c.length / d; h++){
                    f = c.slice(h * d, h * d + d).map(f1).join("");
                    g = c.slice(h * d, h * d + d).map(f2).join("");
                    e += f + " " + g + "\n";
                }
                return e;
            };
            var f7 = function a(b) {
                var c = b.bytes;
                return f6(c);
            };
            var f8 = function a(b) {
                var c = "";
                var d;
                for(d = 0; d < b.length; d++){
                    c += f0(b, d) + " ";
                }
                return c;
            };
            var f9 = Object.freeze({
                __proto__: null,
                createTransferableMessage: f3,
                initSegmentId: f4,
                segmentKeyId: f5,
                hexDump: f6,
                tagDump: f7,
                textRanges: f8
            });
            var ga = 0.25;
            var gb = function a(b, c) {
                if (!c.dateTimeObject) {
                    return null;
                }
                var d = c.videoTimingInfo.transmuxerPrependedSeconds;
                var e = c.videoTimingInfo.transmuxedPresentationStart;
                var f = e + d;
                var g = b - f;
                return new Date(c.dateTimeObject.getTime() + g * 1000);
            };
            var gc = function a(b) {
                return (b.transmuxedPresentationEnd - b.transmuxedPresentationStart - b.transmuxerPrependedSeconds);
            };
            var gd = function a(b, c) {
                var d;
                try {
                    d = new Date(b);
                } catch (e) {
                    return null;
                }
                if (!c || !c.segments || c.segments.length === 0) {
                    return null;
                }
                var f = c.segments[0];
                if (d < f.dateTimeObject) {
                    return null;
                }
                for(var g = 0; g < c.segments.length - 1; g++){
                    f = c.segments[g];
                    var h = c.segments[g + 1].dateTimeObject;
                    if (d < h) {
                        break;
                    }
                }
                var i = c.segments[c.segments.length - 1];
                var j = i.dateTimeObject;
                var k = i.videoTimingInfo ? gc(i.videoTimingInfo) : i.duration + i.duration * ga;
                var l = new Date(j.getTime() + k * 1000);
                if (d > l) {
                    return null;
                }
                if (d > j) {
                    f = i;
                }
                return {
                    segment: f,
                    estimatedStart: f.videoTimingInfo ? f.videoTimingInfo.transmuxedPresentationStart : fB.duration(c, c.mediaSequence + c.segments.indexOf(f)),
                    type: f.videoTimingInfo ? "accurate" : "estimate"
                };
            };
            var ge = function a(b, c) {
                if (!c || !c.segments || c.segments.length === 0) {
                    return null;
                }
                var d = 0;
                var e;
                for(var f = 0; f < c.segments.length; f++){
                    e = c.segments[f];
                    d = e.videoTimingInfo ? e.videoTimingInfo.transmuxedPresentationEnd : d + e.duration;
                    if (b <= d) {
                        break;
                    }
                }
                var g = c.segments[c.segments.length - 1];
                if (g.videoTimingInfo && g.videoTimingInfo.transmuxedPresentationEnd < b) {
                    return null;
                }
                if (b > d) {
                    if (b > d + g.duration * ga) {
                        return null;
                    }
                    e = g;
                }
                return {
                    segment: e,
                    estimatedStart: e.videoTimingInfo ? e.videoTimingInfo.transmuxedPresentationStart : d - e.duration,
                    type: e.videoTimingInfo ? "accurate" : "estimate"
                };
            };
            var gf = function a(b, c) {
                var d;
                var e;
                try {
                    d = new Date(b);
                    e = new Date(c);
                } catch (f) {}
                var g = d.getTime();
                var h = e.getTime();
                return (h - g) / 1000;
            };
            var gg = function a(b) {
                if (!b.segments || b.segments.length === 0) {
                    return false;
                }
                for(var c = 0; c < b.segments.length; c++){
                    var d = b.segments[c];
                    if (!d.dateTimeObject) {
                        return false;
                    }
                }
                return true;
            };
            var gh = function a(b) {
                var c = b.playlist, d = b.time, e = d === void 0 ? undefined : d, f = b.callback;
                if (!f) {
                    throw new Error("getProgramTime: callback must be provided");
                }
                if (!c || e === undefined) {
                    return f({
                        message: "getProgramTime: playlist and time must be provided"
                    });
                }
                var g = ge(e, c);
                if (!g) {
                    return f({
                        message: "valid programTime was not found"
                    });
                }
                if (g.type === "estimate") {
                    return f({
                        message: "Accurate programTime could not be determined." + " Please seek to e.seekTime and try again",
                        seekTime: g.estimatedStart
                    });
                }
                var h = {
                    mediaSeconds: e
                };
                var i = gb(e, g.segment);
                if (i) {
                    h.programDateTime = i.toISOString();
                }
                return f(null, h);
            };
            var gi = function a(b) {
                var c = b.programTime, d = b.playlist, e = b.retryCount, f = e === void 0 ? 2 : e, g = b.seekTo, h = b.pauseAfterSeek, i = h === void 0 ? true : h, j = b.tech, k = b.callback;
                if (!k) {
                    throw new Error("seekToProgramTime: callback must be provided");
                }
                if (typeof c === "undefined" || !d || !g) {
                    return k({
                        message: "seekToProgramTime: programTime, seekTo and playlist must be provided"
                    });
                }
                if (!d.endList && !j.hasStarted_) {
                    return k({
                        message: "player must be playing a live stream to start buffering"
                    });
                }
                if (!gg(d)) {
                    return k({
                        message: "programDateTime tags must be provided in the manifest " + d.resolvedUri
                    });
                }
                var l = gd(c, d);
                if (!l) {
                    return k({
                        message: c + " was not found in the stream"
                    });
                }
                var m = l.segment;
                var n = gf(m.dateTimeObject, c);
                if (l.type === "estimate") {
                    if (f === 0) {
                        return k({
                            message: c + " is not buffered yet. Try again"
                        });
                    }
                    g(l.estimatedStart + n);
                    j.one("seeked", function() {
                        a({
                            programTime: c,
                            playlist: d,
                            retryCount: f - 1,
                            seekTo: g,
                            pauseAfterSeek: i,
                            tech: j,
                            callback: k
                        });
                    });
                    return;
                }
                var o = m.start + n;
                var p = function a() {
                    return k(null, j.currentTime());
                };
                j.one("seeked", p);
                if (i) {
                    j.pause();
                }
                g(o);
            };
            var gj = function a(b, c) {
                if (b.readyState === 4) {
                    return c();
                }
                return;
            };
            var gk = function a(b, c, d) {
                var e = [];
                var f;
                var g = false;
                var h = function a(b, c, e, f) {
                    c.abort();
                    g = true;
                    return d(b, c, e, f);
                };
                var i = function a(b, c) {
                    if (g) {
                        return;
                    }
                    if (b) {
                        return h(b, c, "", e);
                    }
                    var d = c.responseText.substring((e && e.byteLength) || 0, c.responseText.length);
                    e = (0, D.lx)(e, (0, D.qX)(d, true));
                    f = f || (0, B.c)(e);
                    if (e.length < 10 || (f && e.length < f + 2)) {
                        return gj(c, function() {
                            return h(b, c, "", e);
                        });
                    }
                    var i = (0, C.Xm)(e);
                    if (i === "ts" && e.length < 188) {
                        return gj(c, function() {
                            return h(b, c, "", e);
                        });
                    }
                    if (!i && e.length < 376) {
                        return gj(c, function() {
                            return h(b, c, "", e);
                        });
                    }
                    return h(null, c, i, e);
                };
                var j = {
                    uri: b,
                    beforeSend: function a(b) {
                        b.overrideMimeType("text/plain; charset=x-user-defined");
                        b.addEventListener("progress", function(a) {
                            a.total;
                            a.loaded;
                            return fY(b, null, {
                                statusCode: b.status
                            }, i);
                        });
                    }
                };
                var k = c(j, function(a, b) {
                    return fY(k, a, b, i);
                });
                return k;
            };
            var gl = eV.EventTarget, gm = eV.mergeOptions;
            var gn = function a(b, c) {
                if (!fS(b, c)) {
                    return false;
                }
                if (b.sidx && c.sidx && (b.sidx.offset !== c.sidx.offset || b.sidx.length !== c.sidx.length)) {
                    return false;
                } else if ((!b.sidx && c.sidx) || (b.sidx && !c.sidx)) {
                    return false;
                }
                if ((b.segments && !c.segments) || (!b.segments && c.segments)) {
                    return false;
                }
                if (!b.segments && !c.segments) {
                    return true;
                }
                for(var d = 0; d < b.segments.length; d++){
                    var e = b.segments[d];
                    var f = c.segments[d];
                    if (e.uri !== f.uri) {
                        return false;
                    }
                    if (!e.byterange && !f.byterange) {
                        continue;
                    }
                    var g = e.byterange;
                    var h = f.byterange;
                    if ((g && !h) || (!g && h)) {
                        return false;
                    }
                    if (g.offset !== h.offset || g.length !== h.length) {
                        return false;
                    }
                }
                return true;
            };
            var go = function a(b) {
                var c = b.masterXml, d = b.srcUrl, e = b.clientOffset, f = b.sidxMapping;
                var g = (0, y.Qc)(c, {
                    manifestUri: d,
                    clientOffset: e,
                    sidxMapping: f
                });
                fK(g, d);
                return g;
            };
            var gp = function a(b, c, d) {
                var e = true;
                var f = gm(b, {
                    duration: c.duration,
                    minimumUpdatePeriod: c.minimumUpdatePeriod
                });
                for(var g = 0; g < c.playlists.length; g++){
                    var h = c.playlists[g];
                    if (h.sidx) {
                        var i = (0, y.mm)(h.sidx);
                        if (d && d[i] && d[i].sidx) {
                            (0, y.jp)(h, d[i].sidx, h.sidx.resolvedUri);
                        }
                    }
                    var j = fT(f, h, gn);
                    if (j) {
                        f = j;
                        e = false;
                    }
                }
                fF(c, function(a, b, c, d) {
                    if (a.playlists && a.playlists.length) {
                        var g = a.playlists[0].id;
                        var h = fT(f, a.playlists[0], gn);
                        if (h) {
                            f = h;
                            f.mediaGroups[b][c][d].playlists[0] = f.playlists[g];
                            e = false;
                        }
                    }
                });
                if (c.minimumUpdatePeriod !== b.minimumUpdatePeriod) {
                    e = false;
                }
                if (e) {
                    return null;
                }
                return f;
            };
            var gq = function a(b, c) {
                var d = Boolean(!b.map && !c.map);
                var e = d || Boolean(b.map && c.map && b.map.byterange.offset === c.map.byterange.offset && b.map.byterange.length === c.map.byterange.length);
                return (e && b.uri === c.uri && b.byterange.offset === c.byterange.offset && b.byterange.length === c.byterange.length);
            };
            var gr = function a(b, c) {
                var d = {};
                for(var e in b){
                    var f = b[e];
                    var g = f.sidx;
                    if (g) {
                        var h = (0, y.mm)(g);
                        if (!c[h]) {
                            break;
                        }
                        var i = c[h].sidxInfo;
                        if (gq(i, g)) {
                            d[h] = c[h];
                        }
                    }
                }
                return d;
            };
            var gs = function a(b, c) {
                var d = gr(b.playlists, c);
                var e = d;
                fF(b, function(a, b, d, f) {
                    if (a.playlists && a.playlists.length) {
                        var g = a.playlists;
                        e = gm(e, gr(g, c));
                    }
                });
                return e;
            };
            var gt = (function(a) {
                (0, j.Z)(b, a);
                function b(b, c, d, e) {
                    var f;
                    if (d === void 0) {
                        d = {};
                    }
                    f = a.call(this) || this;
                    f.masterPlaylistLoader_ = e || (0, i.Z)(f);
                    if (!e) {
                        f.isMaster_ = true;
                    }
                    var g = d, h = g.withCredentials, j = h === void 0 ? false : h, k = g.handleManifestRedirects, l = k === void 0 ? false : k;
                    f.vhs_ = c;
                    f.withCredentials = j;
                    f.handleManifestRedirects = l;
                    if (!b) {
                        throw new Error("A non-empty playlist URL or object is required");
                    }
                    f.on("minimumUpdatePeriod", function() {
                        f.refreshXml_();
                    });
                    f.on("mediaupdatetimeout", function() {
                        f.refreshMedia_(f.media().id);
                    });
                    f.state = "HAVE_NOTHING";
                    f.loadedPlaylists_ = {};
                    f.logger_ = e$("DashPlaylistLoader");
                    if (f.isMaster_) {
                        f.masterPlaylistLoader_.srcUrl = b;
                        f.masterPlaylistLoader_.sidxMapping_ = {};
                    } else {
                        f.childPlaylist_ = b;
                    }
                    return f;
                }
                var c = b.prototype;
                c.requestErrored_ = function a(b, c, d) {
                    if (!this.request) {
                        return true;
                    }
                    this.request = null;
                    if (b) {
                        this.error = typeof b === "object" && !(b instanceof Error) ? b : {
                            status: c.status,
                            message: "DASH request error at URL: " + c.uri,
                            response: c.response,
                            code: 2
                        };
                        if (d) {
                            this.state = d;
                        }
                        this.trigger("error");
                        return true;
                    }
                };
                c.addSidxSegments_ = function a(b, c, d) {
                    var f = this;
                    var g = b.sidx && (0, y.mm)(b.sidx);
                    if (!b.sidx || !g || this.masterPlaylistLoader_.sidxMapping_[g]) {
                        this.mediaRequest_ = e().setTimeout(function() {
                            return d(false);
                        }, 0);
                        return;
                    }
                    var h = eZ(this.handleManifestRedirects, b.sidx.resolvedUri);
                    var i = function a(e, h) {
                        if (f.requestErrored_(e, h, c)) {
                            return;
                        }
                        var i = f.masterPlaylistLoader_.sidxMapping_;
                        var j;
                        try {
                            j = A()((0, D.Ki)(h.response).subarray(8));
                        } catch (k) {
                            f.requestErrored_(k, h, c);
                            return;
                        }
                        i[g] = {
                            sidxInfo: b.sidx,
                            sidx: j
                        };
                        (0, y.jp)(b, j, b.sidx.resolvedUri);
                        return d(true);
                    };
                    this.request = gk(h, this.vhs_.xhr, function(a, c, d, e) {
                        if (a) {
                            return i(a, c);
                        }
                        if (!d || d !== "mp4") {
                            return i({
                                status: c.status,
                                message: "Unsupported " + (d || "unknown") + " container type for sidx segment at URL: " + h,
                                response: "",
                                playlist: b,
                                internal: true,
                                blacklistDuration: Infinity,
                                code: 2
                            }, c);
                        }
                        var g = b.sidx.byterange, j = g.offset, k = g.length;
                        if (e.length >= k + j) {
                            return i(a, {
                                response: e.subarray(j, j + k),
                                status: c.status,
                                uri: c.uri
                            });
                        }
                        f.request = f.vhs_.xhr({
                            uri: h,
                            responseType: "arraybuffer",
                            headers: f_({
                                byterange: b.sidx.byterange
                            })
                        }, i);
                    });
                };
                c.dispose = function a() {
                    this.trigger("dispose");
                    this.stopRequest();
                    this.loadedPlaylists_ = {};
                    e().clearTimeout(this.minimumUpdatePeriodTimeout_);
                    e().clearTimeout(this.mediaRequest_);
                    e().clearTimeout(this.mediaUpdateTimeout);
                    this.mediaUpdateTimeout = null;
                    this.mediaRequest_ = null;
                    this.minimumUpdatePeriodTimeout_ = null;
                    if (this.masterPlaylistLoader_.createMupOnMedia_) {
                        this.off("loadedmetadata", this.masterPlaylistLoader_.createMupOnMedia_);
                        this.masterPlaylistLoader_.createMupOnMedia_ = null;
                    }
                    this.off();
                };
                c.hasPendingRequest = function a() {
                    return this.request || this.mediaRequest_;
                };
                c.stopRequest = function a() {
                    if (this.request) {
                        var b = this.request;
                        this.request = null;
                        b.onreadystatechange = null;
                        b.abort();
                    }
                };
                c.media = function a(b) {
                    var c = this;
                    if (!b) {
                        return this.media_;
                    }
                    if (this.state === "HAVE_NOTHING") {
                        throw new Error("Cannot switch media playlist from " + this.state);
                    }
                    var d = this.state;
                    if (typeof b === "string") {
                        if (!this.masterPlaylistLoader_.master.playlists[b]) {
                            throw new Error("Unknown playlist URI: " + b);
                        }
                        b = this.masterPlaylistLoader_.master.playlists[b];
                    }
                    var e = !this.media_ || b.id !== this.media_.id;
                    if (e && this.loadedPlaylists_[b.id] && this.loadedPlaylists_[b.id].endList) {
                        this.state = "HAVE_METADATA";
                        this.media_ = b;
                        if (e) {
                            this.trigger("mediachanging");
                            this.trigger("mediachange");
                        }
                        return;
                    }
                    if (!e) {
                        return;
                    }
                    if (this.media_) {
                        this.trigger("mediachanging");
                    }
                    this.addSidxSegments_(b, d, function(a) {
                        c.haveMetadata({
                            startingState: d,
                            playlist: b
                        });
                    });
                };
                c.haveMetadata = function a(b) {
                    var c = b.startingState, d = b.playlist;
                    this.state = "HAVE_METADATA";
                    this.loadedPlaylists_[d.id] = d;
                    this.mediaRequest_ = null;
                    this.refreshMedia_(d.id);
                    if (c === "HAVE_MASTER") {
                        this.trigger("loadedmetadata");
                    } else {
                        this.trigger("mediachange");
                    }
                };
                c.pause = function a() {
                    if (this.masterPlaylistLoader_.createMupOnMedia_) {
                        this.off("loadedmetadata", this.masterPlaylistLoader_.createMupOnMedia_);
                        this.masterPlaylistLoader_.createMupOnMedia_ = null;
                    }
                    this.stopRequest();
                    e().clearTimeout(this.mediaUpdateTimeout);
                    this.mediaUpdateTimeout = null;
                    if (this.isMaster_) {
                        e().clearTimeout(this.masterPlaylistLoader_.minimumUpdatePeriodTimeout_);
                        this.masterPlaylistLoader_.minimumUpdatePeriodTimeout_ = null;
                    }
                    if (this.state === "HAVE_NOTHING") {
                        this.started = false;
                    }
                };
                c.load = function a(b) {
                    var c = this;
                    e().clearTimeout(this.mediaUpdateTimeout);
                    this.mediaUpdateTimeout = null;
                    var d = this.media();
                    if (b) {
                        var f = d ? (d.targetDuration / 2) * 1000 : 5 * 1000;
                        this.mediaUpdateTimeout = e().setTimeout(function() {
                            return c.load();
                        }, f);
                        return;
                    }
                    if (!this.started) {
                        this.start();
                        return;
                    }
                    if (d && !d.endList) {
                        if (this.isMaster_ && !this.minimumUpdatePeriodTimeout_) {
                            this.trigger("minimumUpdatePeriod");
                            this.updateMinimumUpdatePeriodTimeout_();
                        }
                        this.trigger("mediaupdatetimeout");
                    } else {
                        this.trigger("loadedplaylist");
                    }
                };
                c.start = function a() {
                    var b = this;
                    this.started = true;
                    if (!this.isMaster_) {
                        this.mediaRequest_ = e().setTimeout(function() {
                            return b.haveMaster_();
                        }, 0);
                        return;
                    }
                    this.requestMaster_(function(a, c) {
                        b.haveMaster_();
                        if (!b.hasPendingRequest() && !b.media_) {
                            b.media(b.masterPlaylistLoader_.master.playlists[0]);
                        }
                    });
                };
                c.requestMaster_ = function a(b) {
                    var c = this;
                    this.request = this.vhs_.xhr({
                        uri: this.masterPlaylistLoader_.srcUrl,
                        withCredentials: this.withCredentials
                    }, function(a, d) {
                        if (c.requestErrored_(a, d)) {
                            if (c.state === "HAVE_NOTHING") {
                                c.started = false;
                            }
                            return;
                        }
                        var e = d.responseText !== c.masterPlaylistLoader_.masterXml_;
                        c.masterPlaylistLoader_.masterXml_ = d.responseText;
                        if (d.responseHeaders && d.responseHeaders.date) {
                            c.masterLoaded_ = Date.parse(d.responseHeaders.date);
                        } else {
                            c.masterLoaded_ = Date.now();
                        }
                        c.masterPlaylistLoader_.srcUrl = eZ(c.handleManifestRedirects, c.masterPlaylistLoader_.srcUrl, d);
                        if (e) {
                            c.handleMaster_();
                            c.syncClientServerClock_(function() {
                                return b(d, e);
                            });
                            return;
                        }
                        return b(d, e);
                    });
                };
                c.syncClientServerClock_ = function a(b) {
                    var c = this;
                    var d = (0, y.LG)(this.masterPlaylistLoader_.masterXml_);
                    if (d === null) {
                        this.masterPlaylistLoader_.clientOffset_ = this.masterLoaded_ - Date.now();
                        return b();
                    }
                    if (d.method === "DIRECT") {
                        this.masterPlaylistLoader_.clientOffset_ = d.value - Date.now();
                        return b();
                    }
                    this.request = this.vhs_.xhr({
                        uri: eY(this.masterPlaylistLoader_.srcUrl, d.value),
                        method: d.method,
                        withCredentials: this.withCredentials
                    }, function(a, e) {
                        if (!c.request) {
                            return;
                        }
                        if (a) {
                            c.masterPlaylistLoader_.clientOffset_ = c.masterLoaded_ - Date.now();
                            return b();
                        }
                        var f;
                        if (d.method === "HEAD") {
                            if (!e.responseHeaders || !e.responseHeaders.date) {
                                f = c.masterLoaded_;
                            } else {
                                f = Date.parse(e.responseHeaders.date);
                            }
                        } else {
                            f = Date.parse(e.responseText);
                        }
                        c.masterPlaylistLoader_.clientOffset_ = f - Date.now();
                        b();
                    });
                };
                c.haveMaster_ = function a() {
                    this.state = "HAVE_MASTER";
                    if (this.isMaster_) {
                        this.trigger("loadedplaylist");
                    } else if (!this.media_) {
                        this.media(this.childPlaylist_);
                    }
                };
                c.handleMaster_ = function a() {
                    this.mediaRequest_ = null;
                    var b = go({
                        masterXml: this.masterPlaylistLoader_.masterXml_,
                        srcUrl: this.masterPlaylistLoader_.srcUrl,
                        clientOffset: this.masterPlaylistLoader_.clientOffset_,
                        sidxMapping: this.masterPlaylistLoader_.sidxMapping_
                    });
                    var c = this.masterPlaylistLoader_.master;
                    if (c) {
                        b = gp(c, b, this.masterPlaylistLoader_.sidxMapping_);
                    }
                    this.masterPlaylistLoader_.master = b ? b : c;
                    var d = this.masterPlaylistLoader_.master.locations && this.masterPlaylistLoader_.master.locations[0];
                    if (d && d !== this.masterPlaylistLoader_.srcUrl) {
                        this.masterPlaylistLoader_.srcUrl = d;
                    }
                    if (!c || (b && b.minimumUpdatePeriod !== c.minimumUpdatePeriod)) {
                        this.updateMinimumUpdatePeriodTimeout_();
                    }
                    return Boolean(b);
                };
                c.updateMinimumUpdatePeriodTimeout_ = function a() {
                    var b = this.masterPlaylistLoader_;
                    if (b.createMupOnMedia_) {
                        b.off("loadedmetadata", b.createMupOnMedia_);
                        b.createMupOnMedia_ = null;
                    }
                    if (b.minimumUpdatePeriodTimeout_) {
                        e().clearTimeout(b.minimumUpdatePeriodTimeout_);
                        b.minimumUpdatePeriodTimeout_ = null;
                    }
                    var c = b.master && b.master.minimumUpdatePeriod;
                    if (c === 0) {
                        if (b.media()) {
                            c = b.media().targetDuration * 1000;
                        } else {
                            b.createMupOnMedia_ = b.updateMinimumUpdatePeriodTimeout_;
                            b.one("loadedmetadata", b.createMupOnMedia_);
                        }
                    }
                    if (typeof c !== "number" || c <= 0) {
                        if (c < 0) {
                            this.logger_("found invalid minimumUpdatePeriod of " + c + ", not setting a timeout");
                        }
                        return;
                    }
                    this.createMUPTimeout_(c);
                };
                c.createMUPTimeout_ = function a(b) {
                    var c = this.masterPlaylistLoader_;
                    c.minimumUpdatePeriodTimeout_ = e().setTimeout(function() {
                        c.minimumUpdatePeriodTimeout_ = null;
                        c.trigger("minimumUpdatePeriod");
                        c.createMUPTimeout_(b);
                    }, b);
                };
                c.refreshXml_ = function a() {
                    var b = this;
                    this.requestMaster_(function(a, c) {
                        if (!c) {
                            return;
                        }
                        if (b.media_) {
                            b.media_ = b.masterPlaylistLoader_.master.playlists[b.media_.id];
                        }
                        b.masterPlaylistLoader_.sidxMapping_ = gs(b.masterPlaylistLoader_.master, b.masterPlaylistLoader_.sidxMapping_);
                        b.addSidxSegments_(b.media(), b.state, function(a) {
                            b.refreshMedia_(b.media().id);
                        });
                    });
                };
                c.refreshMedia_ = function a(b) {
                    var c = this;
                    if (!b) {
                        throw new Error("refreshMedia_ must take a media id");
                    }
                    if (this.media_ && this.isMaster_) {
                        this.handleMaster_();
                    }
                    var d = this.masterPlaylistLoader_.master.playlists;
                    var f = !this.media_ || this.media_ !== d[b];
                    if (f) {
                        this.media_ = d[b];
                    } else {
                        this.trigger("playlistunchanged");
                    }
                    if (!this.mediaUpdateTimeout) {
                        var g = function a() {
                            if (c.media().endList) {
                                return;
                            }
                            c.mediaUpdateTimeout = e().setTimeout(function() {
                                c.trigger("mediaupdatetimeout");
                                a();
                            }, fU(c.media(), Boolean(f)));
                        };
                        g();
                    }
                    this.trigger("loadedplaylist");
                };
                return b;
            })(gl);
            var gu = {
                GOAL_BUFFER_LENGTH: 30,
                MAX_GOAL_BUFFER_LENGTH: 60,
                BACK_BUFFER_LENGTH: 30,
                GOAL_BUFFER_LENGTH_RATE: 1,
                INITIAL_BANDWIDTH: 4194304,
                BANDWIDTH_VARIANCE: 1.2,
                BUFFER_LOW_WATER_LINE: 0,
                MAX_BUFFER_LOW_WATER_LINE: 30,
                EXPERIMENTAL_MAX_BUFFER_LOW_WATER_LINE: 16,
                BUFFER_LOW_WATER_LINE_RATE: 1,
                BUFFER_HIGH_WATER_LINE: 30
            };
            var gv = function a(b) {
                var c = new Uint8Array(new ArrayBuffer(b.length));
                for(var d = 0; d < b.length; d++){
                    c[d] = b.charCodeAt(d);
                }
                return c.buffer;
            };
            var gw = function a(b) {
                b.on = b.addEventListener;
                b.off = b.removeEventListener;
                return b;
            };
            var gx = function a(b) {
                try {
                    return URL.createObjectURL(new Blob([
                        b
                    ], {
                        type: "application/javascript"
                    }));
                } catch (c) {
                    var d = new BlobBuilder();
                    d.append(b);
                    return URL.createObjectURL(d.getBlob());
                }
            };
            var gy = function a(b) {
                return function() {
                    var a = gx(b);
                    var c = gw(new Worker(a));
                    c.objURL = a;
                    var d = c.terminate;
                    c.on = c.addEventListener;
                    c.off = c.removeEventListener;
                    c.terminate = function() {
                        URL.revokeObjectURL(a);
                        return d.call(this);
                    };
                    return c;
                };
            };
            var gz = function a(b) {
                return ("var browserWorkerPolyFill = " + gw.toString() + ";\n" + "browserWorkerPolyFill(self);\n" + b);
            };
            var gA = function a(b) {
                return b.toString().replace(/^function.+?{/, "").slice(0, -1);
            };
            var gB = gz(gA(function() {
                var a = function a() {
                    this.init = function() {
                        var a = {};
                        this.on = function(b, c) {
                            if (!a[b]) {
                                a[b] = [];
                            }
                            a[b] = a[b].concat(c);
                        };
                        this.off = function(b, c) {
                            var d;
                            if (!a[b]) {
                                return false;
                            }
                            d = a[b].indexOf(c);
                            a[b] = a[b].slice();
                            a[b].splice(d, 1);
                            return d > -1;
                        };
                        this.trigger = function(b) {
                            var c, d, e, f;
                            c = a[b];
                            if (!c) {
                                return;
                            }
                            if (arguments.length === 2) {
                                e = c.length;
                                for(d = 0; d < e; ++d){
                                    c[d].call(this, arguments[1]);
                                }
                            } else {
                                f = [];
                                d = arguments.length;
                                for(d = 1; d < arguments.length; ++d){
                                    f.push(arguments[d]);
                                }
                                e = c.length;
                                for(d = 0; d < e; ++d){
                                    c[d].apply(this, f);
                                }
                            }
                        };
                        this.dispose = function() {
                            a = {};
                        };
                    };
                };
                a.prototype.pipe = function(a) {
                    this.on("data", function(b) {
                        a.push(b);
                    });
                    this.on("done", function(b) {
                        a.flush(b);
                    });
                    this.on("partialdone", function(b) {
                        a.partialFlush(b);
                    });
                    this.on("endedtimeline", function(b) {
                        a.endTimeline(b);
                    });
                    this.on("reset", function(b) {
                        a.reset(b);
                    });
                    return a;
                };
                a.prototype.push = function(a) {
                    this.trigger("data", a);
                };
                a.prototype.flush = function(a) {
                    this.trigger("done", a);
                };
                a.prototype.partialFlush = function(a) {
                    this.trigger("partialdone", a);
                };
                a.prototype.endTimeline = function(a) {
                    this.trigger("endedtimeline", a);
                };
                a.prototype.reset = function(a) {
                    this.trigger("reset", a);
                };
                var b = a;
                var c = Math.pow(2, 32) - 1;
                var d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, A, B, C, D, E, F, G, H, I, J, K, L, M;
                (function() {
                    var a;
                    z = {
                        avc1: [],
                        avcC: [],
                        btrt: [],
                        dinf: [],
                        dref: [],
                        esds: [],
                        ftyp: [],
                        hdlr: [],
                        mdat: [],
                        mdhd: [],
                        mdia: [],
                        mfhd: [],
                        minf: [],
                        moof: [],
                        moov: [],
                        mp4a: [],
                        mvex: [],
                        mvhd: [],
                        pasp: [],
                        sdtp: [],
                        smhd: [],
                        stbl: [],
                        stco: [],
                        stsc: [],
                        stsd: [],
                        stsz: [],
                        stts: [],
                        styp: [],
                        tfdt: [],
                        tfhd: [],
                        traf: [],
                        trak: [],
                        trun: [],
                        trex: [],
                        tkhd: [],
                        vmhd: []
                    };
                    if (typeof Uint8Array === "undefined") {
                        return;
                    }
                    for(a in z){
                        if (z.hasOwnProperty(a)) {
                            z[a] = [
                                a.charCodeAt(0),
                                a.charCodeAt(1),
                                a.charCodeAt(2),
                                a.charCodeAt(3), 
                            ];
                        }
                    }
                    A = new Uint8Array([
                        "i".charCodeAt(0),
                        "s".charCodeAt(0),
                        "o".charCodeAt(0),
                        "m".charCodeAt(0), 
                    ]);
                    C = new Uint8Array([
                        "a".charCodeAt(0),
                        "v".charCodeAt(0),
                        "c".charCodeAt(0),
                        "1".charCodeAt(0), 
                    ]);
                    B = new Uint8Array([
                        0,
                        0,
                        0,
                        1
                    ]);
                    D = new Uint8Array([
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x76,
                        0x69,
                        0x64,
                        0x65,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x56,
                        0x69,
                        0x64,
                        0x65,
                        0x6f,
                        0x48,
                        0x61,
                        0x6e,
                        0x64,
                        0x6c,
                        0x65,
                        0x72,
                        0x00
                    ]);
                    E = new Uint8Array([
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x73,
                        0x6f,
                        0x75,
                        0x6e,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x53,
                        0x6f,
                        0x75,
                        0x6e,
                        0x64,
                        0x48,
                        0x61,
                        0x6e,
                        0x64,
                        0x6c,
                        0x65,
                        0x72,
                        0x00
                    ]);
                    F = {
                        video: D,
                        audio: E
                    };
                    I = new Uint8Array([
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x01,
                        0x00,
                        0x00,
                        0x00,
                        0x0c,
                        0x75,
                        0x72,
                        0x6c,
                        0x20,
                        0x00,
                        0x00,
                        0x00,
                        0x01
                    ]);
                    H = new Uint8Array([
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00
                    ]);
                    J = new Uint8Array([
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00
                    ]);
                    K = J;
                    L = new Uint8Array([
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00
                    ]);
                    M = J;
                    G = new Uint8Array([
                        0x00,
                        0x00,
                        0x00,
                        0x01,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00
                    ]);
                })();
                d = function a(b) {
                    var c = [], d = 0, e, f, g;
                    for(e = 1; e < arguments.length; e++){
                        c.push(arguments[e]);
                    }
                    e = c.length;
                    while(e--){
                        d += c[e].byteLength;
                    }
                    f = new Uint8Array(d + 8);
                    g = new DataView(f.buffer, f.byteOffset, f.byteLength);
                    g.setUint32(0, f.byteLength);
                    f.set(b, 4);
                    for(e = 0, d = 8; e < c.length; e++){
                        f.set(c[e], d);
                        d += c[e].byteLength;
                    }
                    return f;
                };
                e = function a() {
                    return d(z.dinf, d(z.dref, I));
                };
                f = function a(b) {
                    return d(z.esds, new Uint8Array([
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x03,
                        0x19,
                        0x00,
                        0x00,
                        0x00,
                        0x04,
                        0x11,
                        0x40,
                        0x15,
                        0x00,
                        0x06,
                        0x00,
                        0x00,
                        0x00,
                        0xda,
                        0xc0,
                        0x00,
                        0x00,
                        0xda,
                        0xc0,
                        0x05,
                        0x02,
                        (b.audioobjecttype << 3) | (b.samplingfrequencyindex >>> 1),
                        (b.samplingfrequencyindex << 7) | (b.channelcount << 3),
                        0x06,
                        0x01,
                        0x02
                    ]));
                };
                g = function a() {
                    return d(z.ftyp, A, B, A, C);
                };
                s = function a(b) {
                    return d(z.hdlr, F[b]);
                };
                h = function a(b) {
                    return d(z.mdat, b);
                };
                r = function a(b) {
                    var c = new Uint8Array([
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x02,
                        0x00,
                        0x00,
                        0x00,
                        0x03,
                        0x00,
                        0x01,
                        0x5f,
                        0x90,
                        (b.duration >>> 24) & 0xff,
                        (b.duration >>> 16) & 0xff,
                        (b.duration >>> 8) & 0xff,
                        b.duration & 0xff,
                        0x55,
                        0xc4,
                        0x00,
                        0x00, 
                    ]);
                    if (b.samplerate) {
                        c[12] = (b.samplerate >>> 24) & 0xff;
                        c[13] = (b.samplerate >>> 16) & 0xff;
                        c[14] = (b.samplerate >>> 8) & 0xff;
                        c[15] = b.samplerate & 0xff;
                    }
                    return d(z.mdhd, c);
                };
                q = function a(b) {
                    return d(z.mdia, r(b), s(b.type), j(b));
                };
                i = function a(b) {
                    return d(z.mfhd, new Uint8Array([
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        (b & 0xff000000) >> 24,
                        (b & 0xff0000) >> 16,
                        (b & 0xff00) >> 8,
                        b & 0xff
                    ]));
                };
                j = function a(b) {
                    return d(z.minf, b.type === "video" ? d(z.vmhd, G) : d(z.smhd, H), e(), u(b));
                };
                k = function a(b, c) {
                    var e = [], f = c.length;
                    while(f--){
                        e[f] = w(c[f]);
                    }
                    return d.apply(null, [
                        z.moof,
                        i(b)
                    ].concat(e));
                };
                l = function a(b) {
                    var c = b.length, e = [];
                    while(c--){
                        e[c] = o(b[c]);
                    }
                    return d.apply(null, [
                        z.moov,
                        n(0xffffffff)
                    ].concat(e).concat(m(b)));
                };
                m = function a(b) {
                    var c = b.length, e = [];
                    while(c--){
                        e[c] = x(b[c]);
                    }
                    return d.apply(null, [
                        z.mvex
                    ].concat(e));
                };
                n = function a(b) {
                    var c = new Uint8Array([
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x01,
                        0x00,
                        0x00,
                        0x00,
                        0x02,
                        0x00,
                        0x01,
                        0x5f,
                        0x90,
                        (b & 0xff000000) >> 24,
                        (b & 0xff0000) >> 16,
                        (b & 0xff00) >> 8,
                        b & 0xff,
                        0x00,
                        0x01,
                        0x00,
                        0x00,
                        0x01,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x01,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x01,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x40,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0xff,
                        0xff,
                        0xff,
                        0xff
                    ]);
                    return d(z.mvhd, c);
                };
                t = function a(b) {
                    var c = b.samples || [], e = new Uint8Array(4 + c.length), f, g;
                    for(g = 0; g < c.length; g++){
                        f = c[g].flags;
                        e[g + 4] = (f.dependsOn << 4) | (f.isDependedOn << 2) | f.hasRedundancy;
                    }
                    return d(z.sdtp, e);
                };
                u = function a(b) {
                    return d(z.stbl, v(b), d(z.stts, M), d(z.stsc, K), d(z.stsz, L), d(z.stco, J));
                };
                (function() {
                    var a, b;
                    v = function c(e) {
                        return d(z.stsd, new Uint8Array([
                            0x00,
                            0x00,
                            0x00,
                            0x00,
                            0x00,
                            0x00,
                            0x00,
                            0x01, 
                        ]), e.type === "video" ? a(e) : b(e));
                    };
                    a = function a(b) {
                        var c = b.sps || [], e = b.pps || [], f = [], g = [], h, i;
                        for(h = 0; h < c.length; h++){
                            f.push((c[h].byteLength & 0xff00) >>> 8);
                            f.push(c[h].byteLength & 0xff);
                            f = f.concat(Array.prototype.slice.call(c[h]));
                        }
                        for(h = 0; h < e.length; h++){
                            g.push((e[h].byteLength & 0xff00) >>> 8);
                            g.push(e[h].byteLength & 0xff);
                            g = g.concat(Array.prototype.slice.call(e[h]));
                        }
                        i = [
                            z.avc1,
                            new Uint8Array([
                                0x00,
                                0x00,
                                0x00,
                                0x00,
                                0x00,
                                0x00,
                                0x00,
                                0x01,
                                0x00,
                                0x00,
                                0x00,
                                0x00,
                                0x00,
                                0x00,
                                0x00,
                                0x00,
                                0x00,
                                0x00,
                                0x00,
                                0x00,
                                0x00,
                                0x00,
                                0x00,
                                0x00,
                                (b.width & 0xff00) >> 8,
                                b.width & 0xff,
                                (b.height & 0xff00) >> 8,
                                b.height & 0xff,
                                0x00,
                                0x48,
                                0x00,
                                0x00,
                                0x00,
                                0x48,
                                0x00,
                                0x00,
                                0x00,
                                0x00,
                                0x00,
                                0x00,
                                0x00,
                                0x01,
                                0x13,
                                0x76,
                                0x69,
                                0x64,
                                0x65,
                                0x6f,
                                0x6a,
                                0x73,
                                0x2d,
                                0x63,
                                0x6f,
                                0x6e,
                                0x74,
                                0x72,
                                0x69,
                                0x62,
                                0x2d,
                                0x68,
                                0x6c,
                                0x73,
                                0x00,
                                0x00,
                                0x00,
                                0x00,
                                0x00,
                                0x00,
                                0x00,
                                0x00,
                                0x00,
                                0x00,
                                0x00,
                                0x00,
                                0x00,
                                0x18,
                                0x11,
                                0x11
                            ]),
                            d(z.avcC, new Uint8Array([
                                0x01,
                                b.profileIdc,
                                b.profileCompatibility,
                                b.levelIdc,
                                0xff
                            ].concat([
                                c.length
                            ], f, [
                                e.length
                            ], g))),
                            d(z.btrt, new Uint8Array([
                                0x00,
                                0x1c,
                                0x9c,
                                0x80,
                                0x00,
                                0x2d,
                                0xc6,
                                0xc0,
                                0x00,
                                0x2d,
                                0xc6,
                                0xc0
                            ])), 
                        ];
                        if (b.sarRatio) {
                            var j = b.sarRatio[0], k = b.sarRatio[1];
                            i.push(d(z.pasp, new Uint8Array([
                                (j & 0xff000000) >> 24,
                                (j & 0xff0000) >> 16,
                                (j & 0xff00) >> 8,
                                j & 0xff,
                                (k & 0xff000000) >> 24,
                                (k & 0xff0000) >> 16,
                                (k & 0xff00) >> 8,
                                k & 0xff, 
                            ])));
                        }
                        return d.apply(null, i);
                    };
                    b = function a(b) {
                        return d(z.mp4a, new Uint8Array([
                            0x00,
                            0x00,
                            0x00,
                            0x00,
                            0x00,
                            0x00,
                            0x00,
                            0x01,
                            0x00,
                            0x00,
                            0x00,
                            0x00,
                            0x00,
                            0x00,
                            0x00,
                            0x00,
                            (b.channelcount & 0xff00) >> 8,
                            b.channelcount & 0xff,
                            (b.samplesize & 0xff00) >> 8,
                            b.samplesize & 0xff,
                            0x00,
                            0x00,
                            0x00,
                            0x00,
                            (b.samplerate & 0xff00) >> 8,
                            b.samplerate & 0xff,
                            0x00,
                            0x00
                        ]), f(b));
                    };
                })();
                p = function a(b) {
                    var c = new Uint8Array([
                        0x00,
                        0x00,
                        0x00,
                        0x07,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        (b.id & 0xff000000) >> 24,
                        (b.id & 0xff0000) >> 16,
                        (b.id & 0xff00) >> 8,
                        b.id & 0xff,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        (b.duration & 0xff000000) >> 24,
                        (b.duration & 0xff0000) >> 16,
                        (b.duration & 0xff00) >> 8,
                        b.duration & 0xff,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x01,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x01,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x01,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x40,
                        0x00,
                        0x00,
                        0x00,
                        (b.width & 0xff00) >> 8,
                        b.width & 0xff,
                        0x00,
                        0x00,
                        (b.height & 0xff00) >> 8,
                        b.height & 0xff,
                        0x00,
                        0x00
                    ]);
                    return d(z.tkhd, c);
                };
                w = function a(b) {
                    var e, f, g, h, i, j, k;
                    e = d(z.tfhd, new Uint8Array([
                        0x00,
                        0x00,
                        0x00,
                        0x3a,
                        (b.id & 0xff000000) >> 24,
                        (b.id & 0xff0000) >> 16,
                        (b.id & 0xff00) >> 8,
                        b.id & 0xff,
                        0x00,
                        0x00,
                        0x00,
                        0x01,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00
                    ]));
                    j = Math.floor(b.baseMediaDecodeTime / (c + 1));
                    k = Math.floor(b.baseMediaDecodeTime % (c + 1));
                    f = d(z.tfdt, new Uint8Array([
                        0x01,
                        0x00,
                        0x00,
                        0x00,
                        (j >>> 24) & 0xff,
                        (j >>> 16) & 0xff,
                        (j >>> 8) & 0xff,
                        j & 0xff,
                        (k >>> 24) & 0xff,
                        (k >>> 16) & 0xff,
                        (k >>> 8) & 0xff,
                        k & 0xff, 
                    ]));
                    i = 32 + 20 + 8 + 16 + 8 + 8;
                    if (b.type === "audio") {
                        g = y(b, i);
                        return d(z.traf, e, f, g);
                    }
                    h = t(b);
                    g = y(b, h.length + i);
                    return d(z.traf, e, f, g, h);
                };
                o = function a(b) {
                    b.duration = b.duration || 0xffffffff;
                    return d(z.trak, p(b), q(b));
                };
                x = function a(b) {
                    var c = new Uint8Array([
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        (b.id & 0xff000000) >> 24,
                        (b.id & 0xff0000) >> 16,
                        (b.id & 0xff00) >> 8,
                        b.id & 0xff,
                        0x00,
                        0x00,
                        0x00,
                        0x01,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x00,
                        0x01,
                        0x00,
                        0x01
                    ]);
                    if (b.type !== "video") {
                        c[c.length - 1] = 0x00;
                    }
                    return d(z.trex, c);
                };
                (function() {
                    var a, b, c;
                    c = function a(b, c) {
                        var d = 0, e = 0, f = 0, g = 0;
                        if (b.length) {
                            if (b[0].duration !== undefined) {
                                d = 0x1;
                            }
                            if (b[0].size !== undefined) {
                                e = 0x2;
                            }
                            if (b[0].flags !== undefined) {
                                f = 0x4;
                            }
                            if (b[0].compositionTimeOffset !== undefined) {
                                g = 0x8;
                            }
                        }
                        return [
                            0x00,
                            0x00,
                            d | e | f | g,
                            0x01,
                            (b.length & 0xff000000) >>> 24,
                            (b.length & 0xff0000) >>> 16,
                            (b.length & 0xff00) >>> 8,
                            b.length & 0xff,
                            (c & 0xff000000) >>> 24,
                            (c & 0xff0000) >>> 16,
                            (c & 0xff00) >>> 8,
                            c & 0xff
                        ];
                    };
                    b = function a(b, e) {
                        var f, g, h, i, j, k;
                        i = b.samples || [];
                        e += 8 + 12 + 16 * i.length;
                        h = c(i, e);
                        g = new Uint8Array(h.length + i.length * 16);
                        g.set(h);
                        f = h.length;
                        for(k = 0; k < i.length; k++){
                            j = i[k];
                            g[f++] = (j.duration & 0xff000000) >>> 24;
                            g[f++] = (j.duration & 0xff0000) >>> 16;
                            g[f++] = (j.duration & 0xff00) >>> 8;
                            g[f++] = j.duration & 0xff;
                            g[f++] = (j.size & 0xff000000) >>> 24;
                            g[f++] = (j.size & 0xff0000) >>> 16;
                            g[f++] = (j.size & 0xff00) >>> 8;
                            g[f++] = j.size & 0xff;
                            g[f++] = (j.flags.isLeading << 2) | j.flags.dependsOn;
                            g[f++] = (j.flags.isDependedOn << 6) | (j.flags.hasRedundancy << 4) | (j.flags.paddingValue << 1) | j.flags.isNonSyncSample;
                            g[f++] = j.flags.degradationPriority & (0xf0 << 8);
                            g[f++] = j.flags.degradationPriority & 0x0f;
                            g[f++] = (j.compositionTimeOffset & 0xff000000) >>> 24;
                            g[f++] = (j.compositionTimeOffset & 0xff0000) >>> 16;
                            g[f++] = (j.compositionTimeOffset & 0xff00) >>> 8;
                            g[f++] = j.compositionTimeOffset & 0xff;
                        }
                        return d(z.trun, g);
                    };
                    a = function a(b, e) {
                        var f, g, h, i, j, k;
                        i = b.samples || [];
                        e += 8 + 12 + 8 * i.length;
                        h = c(i, e);
                        f = new Uint8Array(h.length + i.length * 8);
                        f.set(h);
                        g = h.length;
                        for(k = 0; k < i.length; k++){
                            j = i[k];
                            f[g++] = (j.duration & 0xff000000) >>> 24;
                            f[g++] = (j.duration & 0xff0000) >>> 16;
                            f[g++] = (j.duration & 0xff00) >>> 8;
                            f[g++] = j.duration & 0xff;
                            f[g++] = (j.size & 0xff000000) >>> 24;
                            f[g++] = (j.size & 0xff0000) >>> 16;
                            f[g++] = (j.size & 0xff00) >>> 8;
                            f[g++] = j.size & 0xff;
                        }
                        return d(z.trun, f);
                    };
                    y = function c(d, e) {
                        if (d.type === "audio") {
                            return a(d, e);
                        }
                        return b(d, e);
                    };
                })();
                var N = {
                    ftyp: g,
                    mdat: h,
                    moof: k,
                    moov: l,
                    initSegment: function a(b) {
                        var c = g(), d = l(b), e;
                        e = new Uint8Array(c.byteLength + d.byteLength);
                        e.set(c);
                        e.set(d, c.byteLength);
                        return e;
                    }
                };
                var O = function a(b) {
                    var c, d, e = [], f = [];
                    f.byteLength = 0;
                    f.nalCount = 0;
                    f.duration = 0;
                    e.byteLength = 0;
                    for(c = 0; c < b.length; c++){
                        d = b[c];
                        if (d.nalUnitType === "access_unit_delimiter_rbsp") {
                            if (e.length) {
                                e.duration = d.dts - e.dts;
                                f.byteLength += e.byteLength;
                                f.nalCount += e.length;
                                f.duration += e.duration;
                                f.push(e);
                            }
                            e = [
                                d
                            ];
                            e.byteLength = d.data.byteLength;
                            e.pts = d.pts;
                            e.dts = d.dts;
                        } else {
                            if (d.nalUnitType === "slice_layer_without_partitioning_rbsp_idr") {
                                e.keyFrame = true;
                            }
                            e.duration = d.dts - e.dts;
                            e.byteLength += d.data.byteLength;
                            e.push(d);
                        }
                    }
                    if (f.length && (!e.duration || e.duration <= 0)) {
                        e.duration = f[f.length - 1].duration;
                    }
                    f.byteLength += e.byteLength;
                    f.nalCount += e.length;
                    f.duration += e.duration;
                    f.push(e);
                    return f;
                };
                var P = function a(b) {
                    var c, d, e = [], f = [];
                    e.byteLength = 0;
                    e.nalCount = 0;
                    e.duration = 0;
                    e.pts = b[0].pts;
                    e.dts = b[0].dts;
                    f.byteLength = 0;
                    f.nalCount = 0;
                    f.duration = 0;
                    f.pts = b[0].pts;
                    f.dts = b[0].dts;
                    for(c = 0; c < b.length; c++){
                        d = b[c];
                        if (d.keyFrame) {
                            if (e.length) {
                                f.push(e);
                                f.byteLength += e.byteLength;
                                f.nalCount += e.nalCount;
                                f.duration += e.duration;
                            }
                            e = [
                                d
                            ];
                            e.nalCount = d.length;
                            e.byteLength = d.byteLength;
                            e.pts = d.pts;
                            e.dts = d.dts;
                            e.duration = d.duration;
                        } else {
                            e.duration += d.duration;
                            e.nalCount += d.length;
                            e.byteLength += d.byteLength;
                            e.push(d);
                        }
                    }
                    if (f.length && e.duration <= 0) {
                        e.duration = f[f.length - 1].duration;
                    }
                    f.byteLength += e.byteLength;
                    f.nalCount += e.nalCount;
                    f.duration += e.duration;
                    f.push(e);
                    return f;
                };
                var Q = function a(b) {
                    var c;
                    if (!b[0][0].keyFrame && b.length > 1) {
                        c = b.shift();
                        b.byteLength -= c.byteLength;
                        b.nalCount -= c.nalCount;
                        b[0][0].dts = c.dts;
                        b[0][0].pts = c.pts;
                        b[0][0].duration += c.duration;
                    }
                    return b;
                };
                var R = function a() {
                    return {
                        size: 0,
                        flags: {
                            isLeading: 0,
                            dependsOn: 1,
                            isDependedOn: 0,
                            hasRedundancy: 0,
                            degradationPriority: 0,
                            isNonSyncSample: 1
                        }
                    };
                };
                var S = function a(b, c) {
                    var d = R();
                    d.dataOffset = c;
                    d.compositionTimeOffset = b.pts - b.dts;
                    d.duration = b.duration;
                    d.size = 4 * b.length;
                    d.size += b.byteLength;
                    if (b.keyFrame) {
                        d.flags.dependsOn = 2;
                        d.flags.isNonSyncSample = 0;
                    }
                    return d;
                };
                var T = function a(b, c) {
                    var d, e, f, g, h, i = c || 0, j = [];
                    for(d = 0; d < b.length; d++){
                        g = b[d];
                        for(e = 0; e < g.length; e++){
                            h = g[e];
                            f = S(h, i);
                            i += f.size;
                            j.push(f);
                        }
                    }
                    return j;
                };
                var U = function a(b) {
                    var c, d, e, f, g, h, i = 0, j = b.byteLength, k = b.nalCount, l = j + 4 * k, m = new Uint8Array(l), n = new DataView(m.buffer);
                    for(c = 0; c < b.length; c++){
                        f = b[c];
                        for(d = 0; d < f.length; d++){
                            g = f[d];
                            for(e = 0; e < g.length; e++){
                                h = g[e];
                                n.setUint32(i, h.data.byteLength);
                                i += 4;
                                m.set(h.data, i);
                                i += h.data.byteLength;
                            }
                        }
                    }
                    return m;
                };
                var V = function a(b, c) {
                    var d, e = c || 0, f = [];
                    d = S(b, e);
                    f.push(d);
                    return f;
                };
                var W = function a(b) {
                    var c, d, e = 0, f = b.byteLength, g = b.length, h = f + 4 * g, i = new Uint8Array(h), j = new DataView(i.buffer);
                    for(c = 0; c < b.length; c++){
                        d = b[c];
                        j.setUint32(e, d.data.byteLength);
                        e += 4;
                        i.set(d.data, e);
                        e += d.data.byteLength;
                    }
                    return i;
                };
                var X = {
                    groupNalsIntoFrames: O,
                    groupFramesIntoGops: P,
                    extendFirstKeyFrame: Q,
                    generateSampleTable: T,
                    concatenateNalData: U,
                    generateSampleTableForFrame: V,
                    concatenateNalDataForFrame: W
                };
                var Y = [
                    33,
                    16,
                    5,
                    32,
                    164,
                    27
                ];
                var Z = [
                    33,
                    65,
                    108,
                    84,
                    1,
                    2,
                    4,
                    8,
                    168,
                    2,
                    4,
                    8,
                    17,
                    191,
                    252, 
                ];
                var $ = function a(b) {
                    var c = [];
                    while(b--){
                        c.push(0);
                    }
                    return c;
                };
                var _ = function a(b) {
                    return Object.keys(b).reduce(function(a, c) {
                        a[c] = new Uint8Array(b[c].reduce(function(a, b) {
                            return a.concat(b);
                        }, []));
                        return a;
                    }, {});
                };
                var aa;
                var ab = function a() {
                    if (!aa) {
                        var b = {
                            96000: [
                                Y,
                                [
                                    227,
                                    64
                                ],
                                $(154),
                                [
                                    56
                                ], 
                            ],
                            88200: [
                                Y,
                                [
                                    231
                                ],
                                $(170),
                                [
                                    56
                                ]
                            ],
                            64000: [
                                Y,
                                [
                                    248,
                                    192
                                ],
                                $(240),
                                [
                                    56
                                ], 
                            ],
                            48000: [
                                Y,
                                [
                                    255,
                                    192
                                ],
                                $(268),
                                [
                                    55,
                                    148,
                                    128
                                ],
                                $(54),
                                [
                                    112
                                ], 
                            ],
                            44100: [
                                Y,
                                [
                                    255,
                                    192
                                ],
                                $(268),
                                [
                                    55,
                                    163,
                                    128
                                ],
                                $(84),
                                [
                                    112
                                ], 
                            ],
                            32000: [
                                Y,
                                [
                                    255,
                                    192
                                ],
                                $(268),
                                [
                                    55,
                                    234
                                ],
                                $(226),
                                [
                                    112
                                ], 
                            ],
                            24000: [
                                Y,
                                [
                                    255,
                                    192
                                ],
                                $(268),
                                [
                                    55,
                                    255,
                                    128
                                ],
                                $(268),
                                [
                                    111,
                                    112
                                ],
                                $(126),
                                [
                                    224
                                ], 
                            ],
                            16000: [
                                Y,
                                [
                                    255,
                                    192
                                ],
                                $(268),
                                [
                                    55,
                                    255,
                                    128
                                ],
                                $(268),
                                [
                                    111,
                                    255
                                ],
                                $(269),
                                [
                                    223,
                                    108
                                ],
                                $(195),
                                [
                                    1,
                                    192
                                ], 
                            ],
                            12000: [
                                Z,
                                $(268),
                                [
                                    3,
                                    127,
                                    248
                                ],
                                $(268),
                                [
                                    6,
                                    255,
                                    240
                                ],
                                $(268),
                                [
                                    13,
                                    255,
                                    224
                                ],
                                $(268),
                                [
                                    27,
                                    253,
                                    128
                                ],
                                $(259),
                                [
                                    56
                                ], 
                            ],
                            11025: [
                                Z,
                                $(268),
                                [
                                    3,
                                    127,
                                    248
                                ],
                                $(268),
                                [
                                    6,
                                    255,
                                    240
                                ],
                                $(268),
                                [
                                    13,
                                    255,
                                    224
                                ],
                                $(268),
                                [
                                    27,
                                    255,
                                    192
                                ],
                                $(268),
                                [
                                    55,
                                    175,
                                    128
                                ],
                                $(108),
                                [
                                    112
                                ], 
                            ],
                            8000: [
                                Z,
                                $(268),
                                [
                                    3,
                                    121,
                                    16
                                ],
                                $(47),
                                [
                                    7
                                ], 
                            ]
                        };
                        aa = _(b);
                    }
                    return aa;
                };
                var ac = 90000, ad, ae, af, ag, ah, ai, aj;
                ad = function a(b) {
                    return b * ac;
                };
                ae = function a(b, c) {
                    return b * c;
                };
                af = function a(b) {
                    return b / ac;
                };
                ag = function a(b, c) {
                    return b / c;
                };
                ah = function a(b, c) {
                    return ad(ag(b, c));
                };
                ai = function a(b, c) {
                    return ae(af(b), c);
                };
                aj = function a(b, c, d) {
                    return af(d ? b : b - c);
                };
                var ak = {
                    ONE_SECOND_IN_TS: ac,
                    secondsToVideoTs: ad,
                    secondsToAudioTs: ae,
                    videoTsToSeconds: af,
                    audioTsToSeconds: ag,
                    audioTsToVideoTs: ah,
                    videoTsToAudioTs: ai,
                    metadataTsToSeconds: aj
                };
                var al = function a(b) {
                    var c, d, e = 0;
                    for(c = 0; c < b.length; c++){
                        d = b[c];
                        e += d.data.byteLength;
                    }
                    return e;
                };
                var am = function a(b, c, d, e) {
                    var f, g = 0, h = 0, i = 0, j = 0, k, l, m;
                    if (!c.length) {
                        return;
                    }
                    f = ak.audioTsToVideoTs(b.baseMediaDecodeTime, b.samplerate);
                    g = Math.ceil(ak.ONE_SECOND_IN_TS / (b.samplerate / 1024));
                    if (d && e) {
                        h = f - Math.max(d, e);
                        i = Math.floor(h / g);
                        j = i * g;
                    }
                    if (i < 1 || j > ak.ONE_SECOND_IN_TS / 2) {
                        return;
                    }
                    k = ab()[b.samplerate];
                    if (!k) {
                        k = c[0].data;
                    }
                    for(l = 0; l < i; l++){
                        m = c[0];
                        c.splice(0, 0, {
                            data: k,
                            dts: m.dts - g,
                            pts: m.pts - g
                        });
                    }
                    b.baseMediaDecodeTime -= Math.floor(ak.videoTsToAudioTs(j, b.samplerate));
                    return j;
                };
                var an = function a(b, c, d) {
                    if (c.minSegmentDts >= d) {
                        return b;
                    }
                    c.minSegmentDts = Infinity;
                    return b.filter(function(a) {
                        if (a.dts >= d) {
                            c.minSegmentDts = Math.min(c.minSegmentDts, a.dts);
                            c.minSegmentPts = c.minSegmentDts;
                            return true;
                        }
                        return false;
                    });
                };
                var ao = function a(b) {
                    var c, d, e = [];
                    for(c = 0; c < b.length; c++){
                        d = b[c];
                        e.push({
                            size: d.data.byteLength,
                            duration: 1024
                        });
                    }
                    return e;
                };
                var ap = function a(b) {
                    var c, d, e = 0, f = new Uint8Array(al(b));
                    for(c = 0; c < b.length; c++){
                        d = b[c];
                        f.set(d.data, e);
                        e += d.data.byteLength;
                    }
                    return f;
                };
                var aq = {
                    prefixWithSilence: am,
                    trimAdtsFramesByEarliestDts: an,
                    generateSampleTable: ao,
                    concatenateFrameData: ap
                };
                var ar = ak.ONE_SECOND_IN_TS;
                var as = function a(b, c) {
                    if (typeof c.pts === "number") {
                        if (b.timelineStartInfo.pts === undefined) {
                            b.timelineStartInfo.pts = c.pts;
                        }
                        if (b.minSegmentPts === undefined) {
                            b.minSegmentPts = c.pts;
                        } else {
                            b.minSegmentPts = Math.min(b.minSegmentPts, c.pts);
                        }
                        if (b.maxSegmentPts === undefined) {
                            b.maxSegmentPts = c.pts;
                        } else {
                            b.maxSegmentPts = Math.max(b.maxSegmentPts, c.pts);
                        }
                    }
                    if (typeof c.dts === "number") {
                        if (b.timelineStartInfo.dts === undefined) {
                            b.timelineStartInfo.dts = c.dts;
                        }
                        if (b.minSegmentDts === undefined) {
                            b.minSegmentDts = c.dts;
                        } else {
                            b.minSegmentDts = Math.min(b.minSegmentDts, c.dts);
                        }
                        if (b.maxSegmentDts === undefined) {
                            b.maxSegmentDts = c.dts;
                        } else {
                            b.maxSegmentDts = Math.max(b.maxSegmentDts, c.dts);
                        }
                    }
                };
                var at = function a(b) {
                    delete b.minSegmentDts;
                    delete b.maxSegmentDts;
                    delete b.minSegmentPts;
                    delete b.maxSegmentPts;
                };
                var au = function a(b, c) {
                    var d, e, f = b.minSegmentDts;
                    if (!c) {
                        f -= b.timelineStartInfo.dts;
                    }
                    d = b.timelineStartInfo.baseMediaDecodeTime;
                    d += f;
                    d = Math.max(0, d);
                    if (b.type === "audio") {
                        e = b.samplerate / ar;
                        d *= e;
                        d = Math.floor(d);
                    }
                    return d;
                };
                var av = {
                    clearDtsInfo: at,
                    calculateTrackBaseMediaDecodeTime: au,
                    collectDtsInfo: as
                };
                var aw = 4, ax = 128;
                var ay = function a(b) {
                    var c = 0, d = {
                        payloadType: -1,
                        payloadSize: 0
                    }, e = 0, f = 0;
                    while(c < b.byteLength){
                        if (b[c] === ax) {
                            break;
                        }
                        while(b[c] === 0xff){
                            e += 255;
                            c++;
                        }
                        e += b[c++];
                        while(b[c] === 0xff){
                            f += 255;
                            c++;
                        }
                        f += b[c++];
                        if (!d.payload && e === aw) {
                            var g = String.fromCharCode(b[c + 3], b[c + 4], b[c + 5], b[c + 6]);
                            if (g === "GA94") {
                                d.payloadType = e;
                                d.payloadSize = f;
                                d.payload = b.subarray(c, c + f);
                                break;
                            } else {
                                d.payload = void 0;
                            }
                        }
                        c += f;
                        e = 0;
                        f = 0;
                    }
                    return d;
                };
                var az = function a(b) {
                    if (b.payload[0] !== 181) {
                        return null;
                    }
                    if (((b.payload[1] << 8) | b.payload[2]) !== 49) {
                        return null;
                    }
                    if (String.fromCharCode(b.payload[3], b.payload[4], b.payload[5], b.payload[6]) !== "GA94") {
                        return null;
                    }
                    if (b.payload[7] !== 0x03) {
                        return null;
                    }
                    return b.payload.subarray(8, b.payload.length - 1);
                };
                var aA = function a(b, c) {
                    var d = [], e, f, g, h;
                    if (!(c[0] & 0x40)) {
                        return d;
                    }
                    f = c[0] & 0x1f;
                    for(e = 0; e < f; e++){
                        g = e * 3;
                        h = {
                            type: c[g + 2] & 0x03,
                            pts: b
                        };
                        if (c[g + 2] & 0x04) {
                            h.ccData = (c[g + 3] << 8) | c[g + 4];
                            d.push(h);
                        }
                    }
                    return d;
                };
                var aB = function a(b) {
                    var c = b.byteLength, d = [], e = 1, f, g;
                    while(e < c - 2){
                        if (b[e] === 0 && b[e + 1] === 0 && b[e + 2] === 0x03) {
                            d.push(e + 2);
                            e += 2;
                        } else {
                            e++;
                        }
                    }
                    if (d.length === 0) {
                        return b;
                    }
                    f = c - d.length;
                    g = new Uint8Array(f);
                    var h = 0;
                    for(e = 0; e < f; h++, e++){
                        if (h === d[0]) {
                            h++;
                            d.shift();
                        }
                        g[e] = b[h];
                    }
                    return g;
                };
                var aC = {
                    parseSei: ay,
                    parseUserData: az,
                    parseCaptionPackets: aA,
                    discardEmulationPreventionBytes: aB,
                    USER_DATA_REGISTERED_ITU_T_T35: aw
                };
                var aD = function a(b) {
                    b = b || {};
                    a.prototype.init.call(this);
                    this.parse708captions_ = typeof b.parse708captions === "boolean" ? b.parse708captions : true;
                    this.captionPackets_ = [];
                    this.ccStreams_ = [
                        new aP(0, 0),
                        new aP(0, 1),
                        new aP(1, 0),
                        new aP(1, 1)
                    ];
                    if (this.parse708captions_) {
                        this.cc708Stream_ = new aJ({
                            captionServices: b.captionServices
                        });
                    }
                    this.reset();
                    this.ccStreams_.forEach(function(a) {
                        a.on("data", this.trigger.bind(this, "data"));
                        a.on("partialdone", this.trigger.bind(this, "partialdone"));
                        a.on("done", this.trigger.bind(this, "done"));
                    }, this);
                    if (this.parse708captions_) {
                        this.cc708Stream_.on("data", this.trigger.bind(this, "data"));
                        this.cc708Stream_.on("partialdone", this.trigger.bind(this, "partialdone"));
                        this.cc708Stream_.on("done", this.trigger.bind(this, "done"));
                    }
                };
                aD.prototype = new b();
                aD.prototype.push = function(a) {
                    var b, c, d;
                    if (a.nalUnitType !== "sei_rbsp") {
                        return;
                    }
                    b = aC.parseSei(a.escapedRBSP);
                    if (!b.payload) {
                        return;
                    }
                    if (b.payloadType !== aC.USER_DATA_REGISTERED_ITU_T_T35) {
                        return;
                    }
                    c = aC.parseUserData(b);
                    if (!c) {
                        return;
                    }
                    if (a.dts < this.latestDts_) {
                        this.ignoreNextEqualDts_ = true;
                        return;
                    } else if (a.dts === this.latestDts_ && this.ignoreNextEqualDts_) {
                        this.numSameDts_--;
                        if (!this.numSameDts_) {
                            this.ignoreNextEqualDts_ = false;
                        }
                        return;
                    }
                    d = aC.parseCaptionPackets(a.pts, c);
                    this.captionPackets_ = this.captionPackets_.concat(d);
                    if (this.latestDts_ !== a.dts) {
                        this.numSameDts_ = 0;
                    }
                    this.numSameDts_++;
                    this.latestDts_ = a.dts;
                };
                aD.prototype.flushCCStreams = function(a) {
                    this.ccStreams_.forEach(function(b) {
                        return a === "flush" ? b.flush() : b.partialFlush();
                    }, this);
                };
                aD.prototype.flushStream = function(a) {
                    if (!this.captionPackets_.length) {
                        this.flushCCStreams(a);
                        return;
                    }
                    this.captionPackets_.forEach(function(a, b) {
                        a.presortIndex = b;
                    });
                    this.captionPackets_.sort(function(a, b) {
                        if (a.pts === b.pts) {
                            return a.presortIndex - b.presortIndex;
                        }
                        return a.pts - b.pts;
                    });
                    this.captionPackets_.forEach(function(a) {
                        if (a.type < 2) {
                            this.dispatchCea608Packet(a);
                        } else {
                            this.dispatchCea708Packet(a);
                        }
                    }, this);
                    this.captionPackets_.length = 0;
                    this.flushCCStreams(a);
                };
                aD.prototype.flush = function() {
                    return this.flushStream("flush");
                };
                aD.prototype.partialFlush = function() {
                    return this.flushStream("partialFlush");
                };
                aD.prototype.reset = function() {
                    this.latestDts_ = null;
                    this.ignoreNextEqualDts_ = false;
                    this.numSameDts_ = 0;
                    this.activeCea608Channel_ = [
                        null,
                        null
                    ];
                    this.ccStreams_.forEach(function(a) {
                        a.reset();
                    });
                };
                aD.prototype.dispatchCea608Packet = function(a) {
                    if (this.setsTextOrXDSActive(a)) {
                        this.activeCea608Channel_[a.type] = null;
                    } else if (this.setsChannel1Active(a)) {
                        this.activeCea608Channel_[a.type] = 0;
                    } else if (this.setsChannel2Active(a)) {
                        this.activeCea608Channel_[a.type] = 1;
                    }
                    if (this.activeCea608Channel_[a.type] === null) {
                        return;
                    }
                    this.ccStreams_[(a.type << 1) + this.activeCea608Channel_[a.type]].push(a);
                };
                aD.prototype.setsChannel1Active = function(a) {
                    return (a.ccData & 0x7800) === 0x1000;
                };
                aD.prototype.setsChannel2Active = function(a) {
                    return (a.ccData & 0x7800) === 0x1800;
                };
                aD.prototype.setsTextOrXDSActive = function(a) {
                    return ((a.ccData & 0x7100) === 0x0100 || (a.ccData & 0x78fe) === 0x102a || (a.ccData & 0x78fe) === 0x182a);
                };
                aD.prototype.dispatchCea708Packet = function(a) {
                    if (this.parse708captions_) {
                        this.cc708Stream_.push(a);
                    }
                };
                var aE = {
                    0x7f: 0x266a,
                    0x1020: 0x20,
                    0x1021: 0xa0,
                    0x1025: 0x2026,
                    0x102a: 0x0160,
                    0x102c: 0x0152,
                    0x1030: 0x2588,
                    0x1031: 0x2018,
                    0x1032: 0x2019,
                    0x1033: 0x201c,
                    0x1034: 0x201d,
                    0x1035: 0x2022,
                    0x1039: 0x2122,
                    0x103a: 0x0161,
                    0x103c: 0x0153,
                    0x103d: 0x2120,
                    0x103f: 0x0178,
                    0x1076: 0x215b,
                    0x1077: 0x215c,
                    0x1078: 0x215d,
                    0x1079: 0x215e,
                    0x107a: 0x23d0,
                    0x107b: 0x23a4,
                    0x107c: 0x23a3,
                    0x107d: 0x23af,
                    0x107e: 0x23a6,
                    0x107f: 0x23a1,
                    0x10a0: 0x3138
                };
                var aF = function a(b) {
                    var c = aE[b] || b;
                    if (b & 0x1000 && b === c) {
                        return "";
                    }
                    return String.fromCharCode(c);
                };
                var aG = function a(b) {
                    return ((0x20 <= b && b <= 0x7f) || (0xa0 <= b && b <= 0xff));
                };
                var aH = function a(b) {
                    this.windowNum = b;
                    this.reset();
                };
                aH.prototype.reset = function() {
                    this.clearText();
                    this.pendingNewLine = false;
                    this.winAttr = {};
                    this.penAttr = {};
                    this.penLoc = {};
                    this.penColor = {};
                    this.visible = 0;
                    this.rowLock = 0;
                    this.columnLock = 0;
                    this.priority = 0;
                    this.relativePositioning = 0;
                    this.anchorVertical = 0;
                    this.anchorHorizontal = 0;
                    this.anchorPoint = 0;
                    this.rowCount = 1;
                    this.virtualRowCount = this.rowCount + 1;
                    this.columnCount = 41;
                    this.windowStyle = 0;
                    this.penStyle = 0;
                };
                aH.prototype.getText = function() {
                    return this.rows.join("\n");
                };
                aH.prototype.clearText = function() {
                    this.rows = [
                        ""
                    ];
                    this.rowIdx = 0;
                };
                aH.prototype.newLine = function(a) {
                    if (this.rows.length >= this.virtualRowCount && typeof this.beforeRowOverflow === "function") {
                        this.beforeRowOverflow(a);
                    }
                    if (this.rows.length > 0) {
                        this.rows.push("");
                        this.rowIdx++;
                    }
                    while(this.rows.length > this.virtualRowCount){
                        this.rows.shift();
                        this.rowIdx--;
                    }
                };
                aH.prototype.isEmpty = function() {
                    if (this.rows.length === 0) {
                        return true;
                    } else if (this.rows.length === 1) {
                        return this.rows[0] === "";
                    }
                    return false;
                };
                aH.prototype.addText = function(a) {
                    this.rows[this.rowIdx] += a;
                };
                aH.prototype.backspace = function() {
                    if (!this.isEmpty()) {
                        var a = this.rows[this.rowIdx];
                        this.rows[this.rowIdx] = a.substr(0, a.length - 1);
                    }
                };
                var aI = function a(b, c, d) {
                    this.serviceNum = b;
                    this.text = "";
                    this.currentWindow = new aH(-1);
                    this.windows = [];
                    this.stream = d;
                    if (typeof c === "string") {
                        this.createTextDecoder(c);
                    }
                };
                aI.prototype.init = function(a, b) {
                    this.startPts = a;
                    for(var c = 0; c < 8; c++){
                        this.windows[c] = new aH(c);
                        if (typeof b === "function") {
                            this.windows[c].beforeRowOverflow = b;
                        }
                    }
                };
                aI.prototype.setCurrentWindow = function(a) {
                    this.currentWindow = this.windows[a];
                };
                aI.prototype.createTextDecoder = function(a) {
                    if (typeof TextDecoder === "undefined") {
                        this.stream.trigger("log", {
                            level: "warn",
                            message: "The `encoding` option is unsupported without TextDecoder support"
                        });
                    } else {
                        try {
                            this.textDecoder_ = new TextDecoder(a);
                        } catch (b) {
                            this.stream.trigger("log", {
                                level: "warn",
                                message: "TextDecoder could not be created with " + a + " encoding. " + b
                            });
                        }
                    }
                };
                var aJ = function a(b) {
                    b = b || {};
                    a.prototype.init.call(this);
                    var c = this;
                    var d = b.captionServices || {};
                    var e = {};
                    var f;
                    Object.keys(d).forEach(function(a) {
                        f = d[a];
                        if (/^SERVICE/.test(a)) {
                            e[a] = f.encoding;
                        }
                    });
                    this.serviceEncodings = e;
                    this.current708Packet = null;
                    this.services = {};
                    this.push = function(a) {
                        if (a.type === 3) {
                            c.new708Packet();
                            c.add708Bytes(a);
                        } else {
                            if (c.current708Packet === null) {
                                c.new708Packet();
                            }
                            c.add708Bytes(a);
                        }
                    };
                };
                aJ.prototype = new b();
                aJ.prototype.new708Packet = function() {
                    if (this.current708Packet !== null) {
                        this.push708Packet();
                    }
                    this.current708Packet = {
                        data: [],
                        ptsVals: []
                    };
                };
                aJ.prototype.add708Bytes = function(a) {
                    var b = a.ccData;
                    var c = b >>> 8;
                    var d = b & 0xff;
                    this.current708Packet.ptsVals.push(a.pts);
                    this.current708Packet.data.push(c);
                    this.current708Packet.data.push(d);
                };
                aJ.prototype.push708Packet = function() {
                    var a = this.current708Packet;
                    var b = a.data;
                    var c = null;
                    var d = null;
                    var e = 0;
                    var f = b[e++];
                    a.seq = f >> 6;
                    a.sizeCode = f & 0x3f;
                    for(; e < b.length; e++){
                        f = b[e++];
                        c = f >> 5;
                        d = f & 0x1f;
                        if (c === 7 && d > 0) {
                            f = b[e++];
                            c = f;
                        }
                        this.pushServiceBlock(c, e, d);
                        if (d > 0) {
                            e += d - 1;
                        }
                    }
                };
                aJ.prototype.pushServiceBlock = function(a, b, c) {
                    var d;
                    var e = b;
                    var f = this.current708Packet.data;
                    var g = this.services[a];
                    if (!g) {
                        g = this.initService(a, e);
                    }
                    for(; e < b + c && e < f.length; e++){
                        d = f[e];
                        if (aG(d)) {
                            e = this.handleText(e, g);
                        } else if (d === 0x18) {
                            e = this.multiByteCharacter(e, g);
                        } else if (d === 0x10) {
                            e = this.extendedCommands(e, g);
                        } else if (0x80 <= d && d <= 0x87) {
                            e = this.setCurrentWindow(e, g);
                        } else if (0x98 <= d && d <= 0x9f) {
                            e = this.defineWindow(e, g);
                        } else if (d === 0x88) {
                            e = this.clearWindows(e, g);
                        } else if (d === 0x8c) {
                            e = this.deleteWindows(e, g);
                        } else if (d === 0x89) {
                            e = this.displayWindows(e, g);
                        } else if (d === 0x8a) {
                            e = this.hideWindows(e, g);
                        } else if (d === 0x8b) {
                            e = this.toggleWindows(e, g);
                        } else if (d === 0x97) {
                            e = this.setWindowAttributes(e, g);
                        } else if (d === 0x90) {
                            e = this.setPenAttributes(e, g);
                        } else if (d === 0x91) {
                            e = this.setPenColor(e, g);
                        } else if (d === 0x92) {
                            e = this.setPenLocation(e, g);
                        } else if (d === 0x8f) {
                            g = this.reset(e, g);
                        } else if (d === 0x08) {
                            g.currentWindow.backspace();
                        } else if (d === 0x0c) {
                            g.currentWindow.clearText();
                        } else if (d === 0x0d) {
                            g.currentWindow.pendingNewLine = true;
                        } else if (d === 0x0e) {
                            g.currentWindow.clearText();
                        } else if (d === 0x8d) {
                            e++;
                        } else ;
                    }
                };
                aJ.prototype.extendedCommands = function(a, b) {
                    var c = this.current708Packet.data;
                    var d = c[++a];
                    if (aG(d)) {
                        a = this.handleText(a, b, {
                            isExtended: true
                        });
                    }
                    return a;
                };
                aJ.prototype.getPts = function(a) {
                    return this.current708Packet.ptsVals[Math.floor(a / 2)];
                };
                aJ.prototype.initService = function(a, b) {
                    var c = "SERVICE" + a;
                    var d = this;
                    var c;
                    var e;
                    if (c in this.serviceEncodings) {
                        e = this.serviceEncodings[c];
                    }
                    this.services[a] = new aI(a, e, d);
                    this.services[a].init(this.getPts(b), function(b) {
                        d.flushDisplayed(b, d.services[a]);
                    });
                    return this.services[a];
                };
                aJ.prototype.handleText = function(a, b, c) {
                    var d = c && c.isExtended;
                    var e = c && c.isMultiByte;
                    var f = this.current708Packet.data;
                    var g = d ? 0x1000 : 0x0000;
                    var h = f[a];
                    var i = f[a + 1];
                    var j = b.currentWindow;
                    var k;
                    var l;
                    if (b.textDecoder_ && !d) {
                        if (e) {
                            l = [
                                h,
                                i
                            ];
                            a++;
                        } else {
                            l = [
                                h
                            ];
                        }
                        k = b.textDecoder_.decode(new Uint8Array(l));
                    } else {
                        k = aF(g | h);
                    }
                    if (j.pendingNewLine && !j.isEmpty()) {
                        j.newLine(this.getPts(a));
                    }
                    j.pendingNewLine = false;
                    j.addText(k);
                    return a;
                };
                aJ.prototype.multiByteCharacter = function(a, b) {
                    var c = this.current708Packet.data;
                    var d = c[a + 1];
                    var e = c[a + 2];
                    if (aG(d) && aG(e)) {
                        a = this.handleText(++a, b, {
                            isMultiByte: true
                        });
                    }
                    return a;
                };
                aJ.prototype.setCurrentWindow = function(a, b) {
                    var c = this.current708Packet.data;
                    var d = c[a];
                    var e = d & 0x07;
                    b.setCurrentWindow(e);
                    return a;
                };
                aJ.prototype.defineWindow = function(a, b) {
                    var c = this.current708Packet.data;
                    var d = c[a];
                    var e = d & 0x07;
                    b.setCurrentWindow(e);
                    var f = b.currentWindow;
                    d = c[++a];
                    f.visible = (d & 0x20) >> 5;
                    f.rowLock = (d & 0x10) >> 4;
                    f.columnLock = (d & 0x08) >> 3;
                    f.priority = d & 0x07;
                    d = c[++a];
                    f.relativePositioning = (d & 0x80) >> 7;
                    f.anchorVertical = d & 0x7f;
                    d = c[++a];
                    f.anchorHorizontal = d;
                    d = c[++a];
                    f.anchorPoint = (d & 0xf0) >> 4;
                    f.rowCount = d & 0x0f;
                    d = c[++a];
                    f.columnCount = d & 0x3f;
                    d = c[++a];
                    f.windowStyle = (d & 0x38) >> 3;
                    f.penStyle = d & 0x07;
                    f.virtualRowCount = f.rowCount + 1;
                    return a;
                };
                aJ.prototype.setWindowAttributes = function(a, b) {
                    var c = this.current708Packet.data;
                    var d = c[a];
                    var e = b.currentWindow.winAttr;
                    d = c[++a];
                    e.fillOpacity = (d & 0xc0) >> 6;
                    e.fillRed = (d & 0x30) >> 4;
                    e.fillGreen = (d & 0x0c) >> 2;
                    e.fillBlue = d & 0x03;
                    d = c[++a];
                    e.borderType = (d & 0xc0) >> 6;
                    e.borderRed = (d & 0x30) >> 4;
                    e.borderGreen = (d & 0x0c) >> 2;
                    e.borderBlue = d & 0x03;
                    d = c[++a];
                    e.borderType += (d & 0x80) >> 5;
                    e.wordWrap = (d & 0x40) >> 6;
                    e.printDirection = (d & 0x30) >> 4;
                    e.scrollDirection = (d & 0x0c) >> 2;
                    e.justify = d & 0x03;
                    d = c[++a];
                    e.effectSpeed = (d & 0xf0) >> 4;
                    e.effectDirection = (d & 0x0c) >> 2;
                    e.displayEffect = d & 0x03;
                    return a;
                };
                aJ.prototype.flushDisplayed = function(a, b) {
                    var c = [];
                    for(var d = 0; d < 8; d++){
                        if (b.windows[d].visible && !b.windows[d].isEmpty()) {
                            c.push(b.windows[d].getText());
                        }
                    }
                    b.endPts = a;
                    b.text = c.join("\n\n");
                    this.pushCaption(b);
                    b.startPts = a;
                };
                aJ.prototype.pushCaption = function(a) {
                    if (a.text !== "") {
                        this.trigger("data", {
                            startPts: a.startPts,
                            endPts: a.endPts,
                            text: a.text,
                            stream: "cc708_" + a.serviceNum
                        });
                        a.text = "";
                        a.startPts = a.endPts;
                    }
                };
                aJ.prototype.displayWindows = function(a, b) {
                    var c = this.current708Packet.data;
                    var d = c[++a];
                    var e = this.getPts(a);
                    this.flushDisplayed(e, b);
                    for(var f = 0; f < 8; f++){
                        if (d & (0x01 << f)) {
                            b.windows[f].visible = 1;
                        }
                    }
                    return a;
                };
                aJ.prototype.hideWindows = function(a, b) {
                    var c = this.current708Packet.data;
                    var d = c[++a];
                    var e = this.getPts(a);
                    this.flushDisplayed(e, b);
                    for(var f = 0; f < 8; f++){
                        if (d & (0x01 << f)) {
                            b.windows[f].visible = 0;
                        }
                    }
                    return a;
                };
                aJ.prototype.toggleWindows = function(a, b) {
                    var c = this.current708Packet.data;
                    var d = c[++a];
                    var e = this.getPts(a);
                    this.flushDisplayed(e, b);
                    for(var f = 0; f < 8; f++){
                        if (d & (0x01 << f)) {
                            b.windows[f].visible ^= 1;
                        }
                    }
                    return a;
                };
                aJ.prototype.clearWindows = function(a, b) {
                    var c = this.current708Packet.data;
                    var d = c[++a];
                    var e = this.getPts(a);
                    this.flushDisplayed(e, b);
                    for(var f = 0; f < 8; f++){
                        if (d & (0x01 << f)) {
                            b.windows[f].clearText();
                        }
                    }
                    return a;
                };
                aJ.prototype.deleteWindows = function(a, b) {
                    var c = this.current708Packet.data;
                    var d = c[++a];
                    var e = this.getPts(a);
                    this.flushDisplayed(e, b);
                    for(var f = 0; f < 8; f++){
                        if (d & (0x01 << f)) {
                            b.windows[f].reset();
                        }
                    }
                    return a;
                };
                aJ.prototype.setPenAttributes = function(a, b) {
                    var c = this.current708Packet.data;
                    var d = c[a];
                    var e = b.currentWindow.penAttr;
                    d = c[++a];
                    e.textTag = (d & 0xf0) >> 4;
                    e.offset = (d & 0x0c) >> 2;
                    e.penSize = d & 0x03;
                    d = c[++a];
                    e.italics = (d & 0x80) >> 7;
                    e.underline = (d & 0x40) >> 6;
                    e.edgeType = (d & 0x38) >> 3;
                    e.fontStyle = d & 0x07;
                    return a;
                };
                aJ.prototype.setPenColor = function(a, b) {
                    var c = this.current708Packet.data;
                    var d = c[a];
                    var e = b.currentWindow.penColor;
                    d = c[++a];
                    e.fgOpacity = (d & 0xc0) >> 6;
                    e.fgRed = (d & 0x30) >> 4;
                    e.fgGreen = (d & 0x0c) >> 2;
                    e.fgBlue = d & 0x03;
                    d = c[++a];
                    e.bgOpacity = (d & 0xc0) >> 6;
                    e.bgRed = (d & 0x30) >> 4;
                    e.bgGreen = (d & 0x0c) >> 2;
                    e.bgBlue = d & 0x03;
                    d = c[++a];
                    e.edgeRed = (d & 0x30) >> 4;
                    e.edgeGreen = (d & 0x0c) >> 2;
                    e.edgeBlue = d & 0x03;
                    return a;
                };
                aJ.prototype.setPenLocation = function(a, b) {
                    var c = this.current708Packet.data;
                    var d = c[a];
                    var e = b.currentWindow.penLoc;
                    b.currentWindow.pendingNewLine = true;
                    d = c[++a];
                    e.row = d & 0x0f;
                    d = c[++a];
                    e.column = d & 0x3f;
                    return a;
                };
                aJ.prototype.reset = function(a, b) {
                    var c = this.getPts(a);
                    this.flushDisplayed(c, b);
                    return this.initService(b.serviceNum, a);
                };
                var aK = {
                    0x2a: 0xe1,
                    0x5c: 0xe9,
                    0x5e: 0xed,
                    0x5f: 0xf3,
                    0x60: 0xfa,
                    0x7b: 0xe7,
                    0x7c: 0xf7,
                    0x7d: 0xd1,
                    0x7e: 0xf1,
                    0x7f: 0x2588,
                    0x0130: 0xae,
                    0x0131: 0xb0,
                    0x0132: 0xbd,
                    0x0133: 0xbf,
                    0x0134: 0x2122,
                    0x0135: 0xa2,
                    0x0136: 0xa3,
                    0x0137: 0x266a,
                    0x0138: 0xe0,
                    0x0139: 0xa0,
                    0x013a: 0xe8,
                    0x013b: 0xe2,
                    0x013c: 0xea,
                    0x013d: 0xee,
                    0x013e: 0xf4,
                    0x013f: 0xfb,
                    0x0220: 0xc1,
                    0x0221: 0xc9,
                    0x0222: 0xd3,
                    0x0223: 0xda,
                    0x0224: 0xdc,
                    0x0225: 0xfc,
                    0x0226: 0x2018,
                    0x0227: 0xa1,
                    0x0228: 0x2a,
                    0x0229: 0x27,
                    0x022a: 0x2014,
                    0x022b: 0xa9,
                    0x022c: 0x2120,
                    0x022d: 0x2022,
                    0x022e: 0x201c,
                    0x022f: 0x201d,
                    0x0230: 0xc0,
                    0x0231: 0xc2,
                    0x0232: 0xc7,
                    0x0233: 0xc8,
                    0x0234: 0xca,
                    0x0235: 0xcb,
                    0x0236: 0xeb,
                    0x0237: 0xce,
                    0x0238: 0xcf,
                    0x0239: 0xef,
                    0x023a: 0xd4,
                    0x023b: 0xd9,
                    0x023c: 0xf9,
                    0x023d: 0xdb,
                    0x023e: 0xab,
                    0x023f: 0xbb,
                    0x0320: 0xc3,
                    0x0321: 0xe3,
                    0x0322: 0xcd,
                    0x0323: 0xcc,
                    0x0324: 0xec,
                    0x0325: 0xd2,
                    0x0326: 0xf2,
                    0x0327: 0xd5,
                    0x0328: 0xf5,
                    0x0329: 0x7b,
                    0x032a: 0x7d,
                    0x032b: 0x5c,
                    0x032c: 0x5e,
                    0x032d: 0x5f,
                    0x032e: 0x7c,
                    0x032f: 0x7e,
                    0x0330: 0xc4,
                    0x0331: 0xe4,
                    0x0332: 0xd6,
                    0x0333: 0xf6,
                    0x0334: 0xdf,
                    0x0335: 0xa5,
                    0x0336: 0xa4,
                    0x0337: 0x2502,
                    0x0338: 0xc5,
                    0x0339: 0xe5,
                    0x033a: 0xd8,
                    0x033b: 0xf8,
                    0x033c: 0x250c,
                    0x033d: 0x2510,
                    0x033e: 0x2514,
                    0x033f: 0x2518
                };
                var aL = function a(b) {
                    if (b === null) {
                        return "";
                    }
                    b = aK[b] || b;
                    return String.fromCharCode(b);
                };
                var aM = 14;
                var aN = [
                    0x1100,
                    0x1120,
                    0x1200,
                    0x1220,
                    0x1500,
                    0x1520,
                    0x1600,
                    0x1620,
                    0x1700,
                    0x1720,
                    0x1000,
                    0x1300,
                    0x1320,
                    0x1400,
                    0x1420, 
                ];
                var aO = function a() {
                    var b = [], c = aM + 1;
                    while(c--){
                        b.push("");
                    }
                    return b;
                };
                var aP = function a(b, c) {
                    a.prototype.init.call(this);
                    this.field_ = b || 0;
                    this.dataChannel_ = c || 0;
                    this.name_ = "CC" + (((this.field_ << 1) | this.dataChannel_) + 1);
                    this.setConstants();
                    this.reset();
                    this.push = function(a) {
                        var b, c, d, e, f;
                        b = a.ccData & 0x7f7f;
                        if (b === this.lastControlCode_) {
                            this.lastControlCode_ = null;
                            return;
                        }
                        if ((b & 0xf000) === 0x1000) {
                            this.lastControlCode_ = b;
                        } else if (b !== this.PADDING_) {
                            this.lastControlCode_ = null;
                        }
                        d = b >>> 8;
                        e = b & 0xff;
                        if (b === this.PADDING_) {
                            return;
                        } else if (b === this.RESUME_CAPTION_LOADING_) {
                            this.mode_ = "popOn";
                        } else if (b === this.END_OF_CAPTION_) {
                            this.mode_ = "popOn";
                            this.clearFormatting(a.pts);
                            this.flushDisplayed(a.pts);
                            c = this.displayed_;
                            this.displayed_ = this.nonDisplayed_;
                            this.nonDisplayed_ = c;
                            this.startPts_ = a.pts;
                        } else if (b === this.ROLL_UP_2_ROWS_) {
                            this.rollUpRows_ = 2;
                            this.setRollUp(a.pts);
                        } else if (b === this.ROLL_UP_3_ROWS_) {
                            this.rollUpRows_ = 3;
                            this.setRollUp(a.pts);
                        } else if (b === this.ROLL_UP_4_ROWS_) {
                            this.rollUpRows_ = 4;
                            this.setRollUp(a.pts);
                        } else if (b === this.CARRIAGE_RETURN_) {
                            this.clearFormatting(a.pts);
                            this.flushDisplayed(a.pts);
                            this.shiftRowsUp_();
                            this.startPts_ = a.pts;
                        } else if (b === this.BACKSPACE_) {
                            if (this.mode_ === "popOn") {
                                this.nonDisplayed_[this.row_] = this.nonDisplayed_[this.row_].slice(0, -1);
                            } else {
                                this.displayed_[this.row_] = this.displayed_[this.row_].slice(0, -1);
                            }
                        } else if (b === this.ERASE_DISPLAYED_MEMORY_) {
                            this.flushDisplayed(a.pts);
                            this.displayed_ = aO();
                        } else if (b === this.ERASE_NON_DISPLAYED_MEMORY_) {
                            this.nonDisplayed_ = aO();
                        } else if (b === this.RESUME_DIRECT_CAPTIONING_) {
                            if (this.mode_ !== "paintOn") {
                                this.flushDisplayed(a.pts);
                                this.displayed_ = aO();
                            }
                            this.mode_ = "paintOn";
                            this.startPts_ = a.pts;
                        } else if (this.isSpecialCharacter(d, e)) {
                            d = (d & 0x03) << 8;
                            f = aL(d | e);
                            this[this.mode_](a.pts, f);
                            this.column_++;
                        } else if (this.isExtCharacter(d, e)) {
                            if (this.mode_ === "popOn") {
                                this.nonDisplayed_[this.row_] = this.nonDisplayed_[this.row_].slice(0, -1);
                            } else {
                                this.displayed_[this.row_] = this.displayed_[this.row_].slice(0, -1);
                            }
                            d = (d & 0x03) << 8;
                            f = aL(d | e);
                            this[this.mode_](a.pts, f);
                            this.column_++;
                        } else if (this.isMidRowCode(d, e)) {
                            this.clearFormatting(a.pts);
                            this[this.mode_](a.pts, " ");
                            this.column_++;
                            if ((e & 0xe) === 0xe) {
                                this.addFormatting(a.pts, [
                                    "i"
                                ]);
                            }
                            if ((e & 0x1) === 0x1) {
                                this.addFormatting(a.pts, [
                                    "u"
                                ]);
                            }
                        } else if (this.isOffsetControlCode(d, e)) {
                            this.column_ += e & 0x03;
                        } else if (this.isPAC(d, e)) {
                            var g = aN.indexOf(b & 0x1f20);
                            if (this.mode_ === "rollUp") {
                                if (g - this.rollUpRows_ + 1 < 0) {
                                    g = this.rollUpRows_ - 1;
                                }
                                this.setRollUp(a.pts, g);
                            }
                            if (g !== this.row_) {
                                this.clearFormatting(a.pts);
                                this.row_ = g;
                            }
                            if (e & 0x1 && this.formatting_.indexOf("u") === -1) {
                                this.addFormatting(a.pts, [
                                    "u"
                                ]);
                            }
                            if ((b & 0x10) === 0x10) {
                                this.column_ = ((b & 0xe) >> 1) * 4;
                            }
                            if (this.isColorPAC(e)) {
                                if ((e & 0xe) === 0xe) {
                                    this.addFormatting(a.pts, [
                                        "i"
                                    ]);
                                }
                            }
                        } else if (this.isNormalChar(d)) {
                            if (e === 0x00) {
                                e = null;
                            }
                            f = aL(d);
                            f += aL(e);
                            this[this.mode_](a.pts, f);
                            this.column_ += f.length;
                        }
                    };
                };
                aP.prototype = new b();
                aP.prototype.flushDisplayed = function(a) {
                    var b = this.displayed_.map(function(a, b) {
                        try {
                            return a.trim();
                        } catch (c) {
                            this.trigger("log", {
                                level: "warn",
                                message: "Skipping a malformed 608 caption at index " + b + "."
                            });
                            return "";
                        }
                    }, this).join("\n").replace(/^\n+|\n+$/g, "");
                    if (b.length) {
                        this.trigger("data", {
                            startPts: this.startPts_,
                            endPts: a,
                            text: b,
                            stream: this.name_
                        });
                    }
                };
                aP.prototype.reset = function() {
                    this.mode_ = "popOn";
                    this.topRow_ = 0;
                    this.startPts_ = 0;
                    this.displayed_ = aO();
                    this.nonDisplayed_ = aO();
                    this.lastControlCode_ = null;
                    this.column_ = 0;
                    this.row_ = aM;
                    this.rollUpRows_ = 2;
                    this.formatting_ = [];
                };
                aP.prototype.setConstants = function() {
                    if (this.dataChannel_ === 0) {
                        this.BASE_ = 0x10;
                        this.EXT_ = 0x11;
                        this.CONTROL_ = (0x14 | this.field_) << 8;
                        this.OFFSET_ = 0x17;
                    } else if (this.dataChannel_ === 1) {
                        this.BASE_ = 0x18;
                        this.EXT_ = 0x19;
                        this.CONTROL_ = (0x1c | this.field_) << 8;
                        this.OFFSET_ = 0x1f;
                    }
                    this.PADDING_ = 0x0000;
                    this.RESUME_CAPTION_LOADING_ = this.CONTROL_ | 0x20;
                    this.END_OF_CAPTION_ = this.CONTROL_ | 0x2f;
                    this.ROLL_UP_2_ROWS_ = this.CONTROL_ | 0x25;
                    this.ROLL_UP_3_ROWS_ = this.CONTROL_ | 0x26;
                    this.ROLL_UP_4_ROWS_ = this.CONTROL_ | 0x27;
                    this.CARRIAGE_RETURN_ = this.CONTROL_ | 0x2d;
                    this.RESUME_DIRECT_CAPTIONING_ = this.CONTROL_ | 0x29;
                    this.BACKSPACE_ = this.CONTROL_ | 0x21;
                    this.ERASE_DISPLAYED_MEMORY_ = this.CONTROL_ | 0x2c;
                    this.ERASE_NON_DISPLAYED_MEMORY_ = this.CONTROL_ | 0x2e;
                };
                aP.prototype.isSpecialCharacter = function(a, b) {
                    return (a === this.EXT_ && b >= 0x30 && b <= 0x3f);
                };
                aP.prototype.isExtCharacter = function(a, b) {
                    return ((a === this.EXT_ + 1 || a === this.EXT_ + 2) && b >= 0x20 && b <= 0x3f);
                };
                aP.prototype.isMidRowCode = function(a, b) {
                    return (a === this.EXT_ && b >= 0x20 && b <= 0x2f);
                };
                aP.prototype.isOffsetControlCode = function(a, b) {
                    return (a === this.OFFSET_ && b >= 0x21 && b <= 0x23);
                };
                aP.prototype.isPAC = function(a, b) {
                    return (a >= this.BASE_ && a < this.BASE_ + 8 && b >= 0x40 && b <= 0x7f);
                };
                aP.prototype.isColorPAC = function(a) {
                    return ((a >= 0x40 && a <= 0x4f) || (a >= 0x60 && a <= 0x7f));
                };
                aP.prototype.isNormalChar = function(a) {
                    return a >= 0x20 && a <= 0x7f;
                };
                aP.prototype.setRollUp = function(a, b) {
                    if (this.mode_ !== "rollUp") {
                        this.row_ = aM;
                        this.mode_ = "rollUp";
                        this.flushDisplayed(a);
                        this.nonDisplayed_ = aO();
                        this.displayed_ = aO();
                    }
                    if (b !== undefined && b !== this.row_) {
                        for(var c = 0; c < this.rollUpRows_; c++){
                            this.displayed_[b - c] = this.displayed_[this.row_ - c];
                            this.displayed_[this.row_ - c] = "";
                        }
                    }
                    if (b === undefined) {
                        b = this.row_;
                    }
                    this.topRow_ = b - this.rollUpRows_ + 1;
                };
                aP.prototype.addFormatting = function(a, b) {
                    this.formatting_ = this.formatting_.concat(b);
                    var c = b.reduce(function(a, b) {
                        return a + "<" + b + ">";
                    }, "");
                    this[this.mode_](a, c);
                };
                aP.prototype.clearFormatting = function(a) {
                    if (!this.formatting_.length) {
                        return;
                    }
                    var b = this.formatting_.reverse().reduce(function(a, b) {
                        return a + "</" + b + ">";
                    }, "");
                    this.formatting_ = [];
                    this[this.mode_](a, b);
                };
                aP.prototype.popOn = function(a, b) {
                    var c = this.nonDisplayed_[this.row_];
                    c += b;
                    this.nonDisplayed_[this.row_] = c;
                };
                aP.prototype.rollUp = function(a, b) {
                    var c = this.displayed_[this.row_];
                    c += b;
                    this.displayed_[this.row_] = c;
                };
                aP.prototype.shiftRowsUp_ = function() {
                    var a;
                    for(a = 0; a < this.topRow_; a++){
                        this.displayed_[a] = "";
                    }
                    for(a = this.row_ + 1; a < aM + 1; a++){
                        this.displayed_[a] = "";
                    }
                    for(a = this.topRow_; a < this.row_; a++){
                        this.displayed_[a] = this.displayed_[a + 1];
                    }
                    this.displayed_[this.row_] = "";
                };
                aP.prototype.paintOn = function(a, b) {
                    var c = this.displayed_[this.row_];
                    c += b;
                    this.displayed_[this.row_] = c;
                };
                var aQ = {
                    CaptionStream: aD,
                    Cea608Stream: aP,
                    Cea708Stream: aJ
                };
                var aR = {
                    H264_STREAM_TYPE: 0x1b,
                    ADTS_STREAM_TYPE: 0x0f,
                    METADATA_STREAM_TYPE: 0x15
                };
                var aS = 8589934592;
                var aT = 4294967296;
                var aU = "shared";
                var aV = function a(b, c) {
                    var d = 1;
                    if (b > c) {
                        d = -1;
                    }
                    while(Math.abs(c - b) > aT){
                        b += d * aS;
                    }
                    return b;
                };
                var aW = function a(b) {
                    var c, d;
                    a.prototype.init.call(this);
                    this.type_ = b || aU;
                    this.push = function(a) {
                        if (this.type_ !== aU && a.type !== this.type_) {
                            return;
                        }
                        if (d === undefined) {
                            d = a.dts;
                        }
                        a.dts = aV(a.dts, d);
                        a.pts = aV(a.pts, d);
                        c = a.dts;
                        this.trigger("data", a);
                    };
                    this.flush = function() {
                        d = c;
                        this.trigger("done");
                    };
                    this.endTimeline = function() {
                        this.flush();
                        this.trigger("endedtimeline");
                    };
                    this.discontinuity = function() {
                        d = void 0;
                        c = void 0;
                    };
                    this.reset = function() {
                        this.discontinuity();
                        this.trigger("reset");
                    };
                };
                aW.prototype = new b();
                var aX = {
                    TimestampRolloverStream: aW,
                    handleRollover: aV
                };
                var aY = function a(b, c, d) {
                    var e, f = "";
                    for(e = c; e < d; e++){
                        f += "%" + ("00" + b[e].toString(16)).slice(-2);
                    }
                    return f;
                }, aZ = function a(b, c, d) {
                    return decodeURIComponent(aY(b, c, d));
                }, a$ = function a(b, c, d) {
                    return unescape(aY(b, c, d));
                }, a_ = function a(b) {
                    return ((b[0] << 21) | (b[1] << 14) | (b[2] << 7) | b[3]);
                }, a0 = {
                    TXXX: function a(b) {
                        var c;
                        if (b.data[0] !== 3) {
                            return;
                        }
                        for(c = 1; c < b.data.length; c++){
                            if (b.data[c] === 0) {
                                b.description = aZ(b.data, 1, c);
                                b.value = aZ(b.data, c + 1, b.data.length).replace(/\0*$/, "");
                                break;
                            }
                        }
                        b.data = b.value;
                    },
                    WXXX: function a(b) {
                        var c;
                        if (b.data[0] !== 3) {
                            return;
                        }
                        for(c = 1; c < b.data.length; c++){
                            if (b.data[c] === 0) {
                                b.description = aZ(b.data, 1, c);
                                b.url = aZ(b.data, c + 1, b.data.length);
                                break;
                            }
                        }
                    },
                    PRIV: function a(b) {
                        var c;
                        for(c = 0; c < b.data.length; c++){
                            if (b.data[c] === 0) {
                                b.owner = a$(b.data, 0, c);
                                break;
                            }
                        }
                        b.privateData = b.data.subarray(c + 1);
                        b.data = b.privateData;
                    }
                }, a1;
                a1 = function a(b) {
                    var c = {
                        descriptor: b && b.descriptor
                    }, d = 0, e = [], f = 0, g;
                    a1.prototype.init.call(this);
                    this.dispatchType = aR.METADATA_STREAM_TYPE.toString(16);
                    if (c.descriptor) {
                        for(g = 0; g < c.descriptor.length; g++){
                            this.dispatchType += ("00" + c.descriptor[g].toString(16)).slice(-2);
                        }
                    }
                    this.push = function(a) {
                        var b, c, g, h, i, j;
                        if (a.type !== "timed-metadata") {
                            return;
                        }
                        if (a.dataAlignmentIndicator) {
                            f = 0;
                            e.length = 0;
                        }
                        if (e.length === 0 && (a.data.length < 10 || a.data[0] !== "I".charCodeAt(0) || a.data[1] !== "D".charCodeAt(0) || a.data[2] !== "3".charCodeAt(0))) {
                            this.trigger("log", {
                                level: "warn",
                                message: "Skipping unrecognized metadata packet"
                            });
                            return;
                        }
                        e.push(a);
                        f += a.data.byteLength;
                        if (e.length === 1) {
                            d = a_(a.data.subarray(6, 10));
                            d += 10;
                        }
                        if (f < d) {
                            return;
                        }
                        b = {
                            data: new Uint8Array(d),
                            frames: [],
                            pts: e[0].pts,
                            dts: e[0].dts
                        };
                        for(i = 0; i < d;){
                            b.data.set(e[0].data.subarray(0, d - i), i);
                            i += e[0].data.byteLength;
                            f -= e[0].data.byteLength;
                            e.shift();
                        }
                        c = 10;
                        if (b.data[5] & 0x40) {
                            c += 4;
                            c += a_(b.data.subarray(10, 14));
                            d -= a_(b.data.subarray(16, 20));
                        }
                        do {
                            g = a_(b.data.subarray(c + 4, c + 8));
                            if (g < 1) {
                                this.trigger("log", {
                                    level: "warn",
                                    message: "Malformed ID3 frame encountered. Skipping metadata parsing."
                                });
                                return;
                            }
                            j = String.fromCharCode(b.data[c], b.data[c + 1], b.data[c + 2], b.data[c + 3]);
                            h = {
                                id: j,
                                data: b.data.subarray(c + 10, c + g + 10)
                            };
                            h.key = h.id;
                            if (a0[h.id]) {
                                a0[h.id](h);
                                if (h.owner === "com.apple.streaming.transportStreamTimestamp") {
                                    var k = h.data, l = ((k[3] & 0x01) << 30) | (k[4] << 22) | (k[5] << 14) | (k[6] << 6) | (k[7] >>> 2);
                                    l *= 4;
                                    l += k[7] & 0x03;
                                    h.timeStamp = l;
                                    if (b.pts === undefined && b.dts === undefined) {
                                        b.pts = h.timeStamp;
                                        b.dts = h.timeStamp;
                                    }
                                    this.trigger("timestamp", h);
                                }
                            }
                            b.frames.push(h);
                            c += 10;
                            c += g;
                        }while (c < d)
                        this.trigger("data", b);
                    };
                };
                a1.prototype = new b();
                var a2 = a1;
                var a3 = aX.TimestampRolloverStream;
                var a4, a5, a6;
                var a7 = 188, a8 = 0x47;
                a4 = function a() {
                    var b = new Uint8Array(a7), c = 0;
                    a4.prototype.init.call(this);
                    this.push = function(a) {
                        var d = 0, e = a7, f;
                        if (c) {
                            f = new Uint8Array(a.byteLength + c);
                            f.set(b.subarray(0, c));
                            f.set(a, c);
                            c = 0;
                        } else {
                            f = a;
                        }
                        while(e < f.byteLength){
                            if (f[d] === a8 && f[e] === a8) {
                                this.trigger("data", f.subarray(d, e));
                                d += a7;
                                e += a7;
                                continue;
                            }
                            d++;
                            e++;
                        }
                        if (d < f.byteLength) {
                            b.set(f.subarray(d), 0);
                            c = f.byteLength - d;
                        }
                    };
                    this.flush = function() {
                        if (c === a7 && b[0] === a8) {
                            this.trigger("data", b);
                            c = 0;
                        }
                        this.trigger("done");
                    };
                    this.endTimeline = function() {
                        this.flush();
                        this.trigger("endedtimeline");
                    };
                    this.reset = function() {
                        c = 0;
                        this.trigger("reset");
                    };
                };
                a4.prototype = new b();
                a5 = function a() {
                    var b, c, d, e;
                    a5.prototype.init.call(this);
                    e = this;
                    this.packetsWaitingForPmt = [];
                    this.programMapTable = undefined;
                    b = function a(b, e) {
                        var f = 0;
                        if (e.payloadUnitStartIndicator) {
                            f += b[f] + 1;
                        }
                        if (e.type === "pat") {
                            c(b.subarray(f), e);
                        } else {
                            d(b.subarray(f), e);
                        }
                    };
                    c = function a(b, c) {
                        c.section_number = b[7];
                        c.last_section_number = b[8];
                        e.pmtPid = ((b[10] & 0x1f) << 8) | b[11];
                        c.pmtPid = e.pmtPid;
                    };
                    d = function a(b, c) {
                        var d, f, g, h;
                        if (!(b[5] & 0x01)) {
                            return;
                        }
                        e.programMapTable = {
                            video: null,
                            audio: null,
                            "timed-metadata": {}
                        };
                        d = ((b[1] & 0x0f) << 8) | b[2];
                        f = 3 + d - 4;
                        g = ((b[10] & 0x0f) << 8) | b[11];
                        h = 12 + g;
                        while(h < f){
                            var i = b[h];
                            var j = ((b[h + 1] & 0x1f) << 8) | b[h + 2];
                            if (i === aR.H264_STREAM_TYPE && e.programMapTable.video === null) {
                                e.programMapTable.video = j;
                            } else if (i === aR.ADTS_STREAM_TYPE && e.programMapTable.audio === null) {
                                e.programMapTable.audio = j;
                            } else if (i === aR.METADATA_STREAM_TYPE) {
                                e.programMapTable["timed-metadata"][j] = i;
                            }
                            h += (((b[h + 3] & 0x0f) << 8) | b[h + 4]) + 5;
                        }
                        c.programMapTable = e.programMapTable;
                    };
                    this.push = function(a) {
                        var c = {}, d = 4;
                        c.payloadUnitStartIndicator = !!(a[1] & 0x40);
                        c.pid = a[1] & 0x1f;
                        c.pid <<= 8;
                        c.pid |= a[2];
                        if ((a[3] & 0x30) >>> 4 > 0x01) {
                            d += a[d] + 1;
                        }
                        if (c.pid === 0) {
                            c.type = "pat";
                            b(a.subarray(d), c);
                            this.trigger("data", c);
                        } else if (c.pid === this.pmtPid) {
                            c.type = "pmt";
                            b(a.subarray(d), c);
                            this.trigger("data", c);
                            while(this.packetsWaitingForPmt.length){
                                this.processPes_.apply(this, this.packetsWaitingForPmt.shift());
                            }
                        } else if (this.programMapTable === undefined) {
                            this.packetsWaitingForPmt.push([
                                a,
                                d,
                                c, 
                            ]);
                        } else {
                            this.processPes_(a, d, c);
                        }
                    };
                    this.processPes_ = function(a, b, c) {
                        if (c.pid === this.programMapTable.video) {
                            c.streamType = aR.H264_STREAM_TYPE;
                        } else if (c.pid === this.programMapTable.audio) {
                            c.streamType = aR.ADTS_STREAM_TYPE;
                        } else {
                            c.streamType = this.programMapTable["timed-metadata"][c.pid];
                        }
                        c.type = "pes";
                        c.data = a.subarray(b);
                        this.trigger("data", c);
                    };
                };
                a5.prototype = new b();
                a5.STREAM_TYPES = {
                    h264: 0x1b,
                    adts: 0x0f
                };
                a6 = function a() {
                    var b = this, c = false, d = {
                        data: [],
                        size: 0
                    }, e = {
                        data: [],
                        size: 0
                    }, f = {
                        data: [],
                        size: 0
                    }, g, h = function a(b, c) {
                        var d;
                        var e = (b[0] << 16) | (b[1] << 8) | b[2];
                        c.data = new Uint8Array();
                        if (e !== 1) {
                            return;
                        }
                        c.packetLength = 6 + ((b[4] << 8) | b[5]);
                        c.dataAlignmentIndicator = (b[6] & 0x04) !== 0;
                        d = b[7];
                        if (d & 0xc0) {
                            c.pts = ((b[9] & 0x0e) << 27) | ((b[10] & 0xff) << 20) | ((b[11] & 0xfe) << 12) | ((b[12] & 0xff) << 5) | ((b[13] & 0xfe) >>> 3);
                            c.pts *= 4;
                            c.pts += (b[13] & 0x06) >>> 1;
                            c.dts = c.pts;
                            if (d & 0x40) {
                                c.dts = ((b[14] & 0x0e) << 27) | ((b[15] & 0xff) << 20) | ((b[16] & 0xfe) << 12) | ((b[17] & 0xff) << 5) | ((b[18] & 0xfe) >>> 3);
                                c.dts *= 4;
                                c.dts += (b[18] & 0x06) >>> 1;
                            }
                        }
                        c.data = b.subarray(9 + b[8]);
                    }, i = function a(c, d, e) {
                        var f = new Uint8Array(c.size), g = {
                            type: d
                        }, i = 0, j = 0, k = false, l;
                        if (!c.data.length || c.size < 9) {
                            return;
                        }
                        g.trackId = c.data[0].pid;
                        for(i = 0; i < c.data.length; i++){
                            l = c.data[i];
                            f.set(l.data, j);
                            j += l.data.byteLength;
                        }
                        h(f, g);
                        k = d === "video" || g.packetLength <= c.size;
                        if (e || k) {
                            c.size = 0;
                            c.data.length = 0;
                        }
                        if (k) {
                            b.trigger("data", g);
                        }
                    };
                    a6.prototype.init.call(this);
                    this.push = function(a) {
                        ({
                            pat: function a() {},
                            pes: function b() {
                                var c, g;
                                switch(a.streamType){
                                    case aR.H264_STREAM_TYPE:
                                        c = d;
                                        g = "video";
                                        break;
                                    case aR.ADTS_STREAM_TYPE:
                                        c = e;
                                        g = "audio";
                                        break;
                                    case aR.METADATA_STREAM_TYPE:
                                        c = f;
                                        g = "timed-metadata";
                                        break;
                                    default:
                                        return;
                                }
                                if (a.payloadUnitStartIndicator) {
                                    i(c, g, true);
                                }
                                c.data.push(a);
                                c.size += a.data.byteLength;
                            },
                            pmt: function d() {
                                var e = {
                                    type: "metadata",
                                    tracks: []
                                };
                                g = a.programMapTable;
                                if (g.video !== null) {
                                    e.tracks.push({
                                        timelineStartInfo: {
                                            baseMediaDecodeTime: 0
                                        },
                                        id: +g.video,
                                        codec: "avc",
                                        type: "video"
                                    });
                                }
                                if (g.audio !== null) {
                                    e.tracks.push({
                                        timelineStartInfo: {
                                            baseMediaDecodeTime: 0
                                        },
                                        id: +g.audio,
                                        codec: "adts",
                                        type: "audio"
                                    });
                                }
                                c = true;
                                b.trigger("data", e);
                            }
                        }[a.type]());
                    };
                    this.reset = function() {
                        d.size = 0;
                        d.data.length = 0;
                        e.size = 0;
                        e.data.length = 0;
                        this.trigger("reset");
                    };
                    this.flushStreams_ = function() {
                        i(d, "video");
                        i(e, "audio");
                        i(f, "timed-metadata");
                    };
                    this.flush = function() {
                        if (!c && g) {
                            var a = {
                                type: "metadata",
                                tracks: []
                            };
                            if (g.video !== null) {
                                a.tracks.push({
                                    timelineStartInfo: {
                                        baseMediaDecodeTime: 0
                                    },
                                    id: +g.video,
                                    codec: "avc",
                                    type: "video"
                                });
                            }
                            if (g.audio !== null) {
                                a.tracks.push({
                                    timelineStartInfo: {
                                        baseMediaDecodeTime: 0
                                    },
                                    id: +g.audio,
                                    codec: "adts",
                                    type: "audio"
                                });
                            }
                            b.trigger("data", a);
                        }
                        c = false;
                        this.flushStreams_();
                        this.trigger("done");
                    };
                };
                a6.prototype = new b();
                var a9 = {
                    PAT_PID: 0x0000,
                    MP2T_PACKET_LENGTH: a7,
                    TransportPacketStream: a4,
                    TransportParseStream: a5,
                    ElementaryStream: a6,
                    TimestampRolloverStream: a3,
                    CaptionStream: aQ.CaptionStream,
                    Cea608Stream: aQ.Cea608Stream,
                    Cea708Stream: aQ.Cea708Stream,
                    MetadataStream: a2
                };
                for(var ba in aR){
                    if (aR.hasOwnProperty(ba)) {
                        a9[ba] = aR[ba];
                    }
                }
                var bb = a9;
                var bc = ak.ONE_SECOND_IN_TS;
                var bd;
                var be = [
                    96000,
                    88200,
                    64000,
                    48000,
                    44100,
                    32000,
                    24000,
                    22050,
                    16000,
                    12000,
                    11025,
                    8000,
                    7350, 
                ];
                bd = function a(b) {
                    var c, d = 0;
                    bd.prototype.init.call(this);
                    this.skipWarn_ = function(a, b) {
                        this.trigger("log", {
                            level: "warn",
                            message: "adts skiping bytes " + a + " to " + b + " in frame " + d + " outside syncword"
                        });
                    };
                    this.push = function(a) {
                        var e = 0, f, g, h, i, j;
                        if (!b) {
                            d = 0;
                        }
                        if (a.type !== "audio") {
                            return;
                        }
                        if (c && c.length) {
                            h = c;
                            c = new Uint8Array(h.byteLength + a.data.byteLength);
                            c.set(h);
                            c.set(a.data, h.byteLength);
                        } else {
                            c = a.data;
                        }
                        var k;
                        while(e + 7 < c.length){
                            if (c[e] !== 0xff || (c[e + 1] & 0xf6) !== 0xf0) {
                                if (typeof k !== "number") {
                                    k = e;
                                }
                                e++;
                                continue;
                            }
                            if (typeof k === "number") {
                                this.skipWarn_(k, e);
                                k = null;
                            }
                            g = (~c[e + 1] & 0x01) * 2;
                            f = ((c[e + 3] & 0x03) << 11) | (c[e + 4] << 3) | ((c[e + 5] & 0xe0) >> 5);
                            i = ((c[e + 6] & 0x03) + 1) * 1024;
                            j = (i * bc) / be[(c[e + 2] & 0x3c) >>> 2];
                            if (c.byteLength - e < f) {
                                break;
                            }
                            this.trigger("data", {
                                pts: a.pts + d * j,
                                dts: a.dts + d * j,
                                sampleCount: i,
                                audioobjecttype: ((c[e + 2] >>> 6) & 0x03) + 1,
                                channelcount: ((c[e + 2] & 1) << 2) | ((c[e + 3] & 0xc0) >>> 6),
                                samplerate: be[(c[e + 2] & 0x3c) >>> 2],
                                samplingfrequencyindex: (c[e + 2] & 0x3c) >>> 2,
                                samplesize: 16,
                                data: c.subarray(e + 7 + g, e + f)
                            });
                            d++;
                            e += f;
                        }
                        if (typeof k === "number") {
                            this.skipWarn_(k, e);
                            k = null;
                        }
                        c = c.subarray(e);
                    };
                    this.flush = function() {
                        d = 0;
                        this.trigger("done");
                    };
                    this.reset = function() {
                        c = void 0;
                        this.trigger("reset");
                    };
                    this.endTimeline = function() {
                        c = void 0;
                        this.trigger("endedtimeline");
                    };
                };
                bd.prototype = new b();
                var bf = bd;
                var bg;
                bg = function a(b) {
                    var c = b.byteLength, d = 0, e = 0;
                    this.length = function() {
                        return 8 * c;
                    };
                    this.bitsAvailable = function() {
                        return (8 * c + e);
                    };
                    this.loadWord = function() {
                        var a = b.byteLength - c, f = new Uint8Array(4), g = Math.min(4, c);
                        if (g === 0) {
                            throw new Error("no bytes available");
                        }
                        f.set(b.subarray(a, a + g));
                        d = new DataView(f.buffer).getUint32(0);
                        e = g * 8;
                        c -= g;
                    };
                    this.skipBits = function(a) {
                        var b;
                        if (e > a) {
                            d <<= a;
                            e -= a;
                        } else {
                            a -= e;
                            b = Math.floor(a / 8);
                            a -= b * 8;
                            c -= b;
                            this.loadWord();
                            d <<= a;
                            e -= a;
                        }
                    };
                    this.readBits = function(a) {
                        var b = Math.min(e, a), f = d >>> (32 - b);
                        e -= b;
                        if (e > 0) {
                            d <<= b;
                        } else if (c > 0) {
                            this.loadWord();
                        }
                        b = a - b;
                        if (b > 0) {
                            return (f << b) | this.readBits(b);
                        }
                        return f;
                    };
                    this.skipLeadingZeros = function() {
                        var a;
                        for(a = 0; a < e; ++a){
                            if ((d & (0x80000000 >>> a)) !== 0) {
                                d <<= a;
                                e -= a;
                                return a;
                            }
                        }
                        this.loadWord();
                        return a + this.skipLeadingZeros();
                    };
                    this.skipUnsignedExpGolomb = function() {
                        this.skipBits(1 + this.skipLeadingZeros());
                    };
                    this.skipExpGolomb = function() {
                        this.skipBits(1 + this.skipLeadingZeros());
                    };
                    this.readUnsignedExpGolomb = function() {
                        var a = this.skipLeadingZeros();
                        return this.readBits(a + 1) - 1;
                    };
                    this.readExpGolomb = function() {
                        var a = this.readUnsignedExpGolomb();
                        if (0x01 & a) {
                            return (1 + a) >>> 1;
                        }
                        return -1 * (a >>> 1);
                    };
                    this.readBoolean = function() {
                        return this.readBits(1) === 1;
                    };
                    this.readUnsignedByte = function() {
                        return this.readBits(8);
                    };
                    this.loadWord();
                };
                var bh = bg;
                var bi, bj;
                var bk;
                bj = function a() {
                    var b = 0, c, d;
                    bj.prototype.init.call(this);
                    this.push = function(a) {
                        var e;
                        if (!d) {
                            d = a.data;
                        } else {
                            e = new Uint8Array(d.byteLength + a.data.byteLength);
                            e.set(d);
                            e.set(a.data, d.byteLength);
                            d = e;
                        }
                        var f = d.byteLength;
                        for(; b < f - 3; b++){
                            if (d[b + 2] === 1) {
                                c = b + 5;
                                break;
                            }
                        }
                        while(c < f){
                            switch(d[c]){
                                case 0:
                                    if (d[c - 1] !== 0) {
                                        c += 2;
                                        break;
                                    } else if (d[c - 2] !== 0) {
                                        c++;
                                        break;
                                    }
                                    if (b + 3 !== c - 2) {
                                        this.trigger("data", d.subarray(b + 3, c - 2));
                                    }
                                    do {
                                        c++;
                                    }while (d[c] !== 1 && c < f)
                                    b = c - 2;
                                    c += 3;
                                    break;
                                case 1:
                                    if (d[c - 1] !== 0 || d[c - 2] !== 0) {
                                        c += 3;
                                        break;
                                    }
                                    this.trigger("data", d.subarray(b + 3, c - 2));
                                    b = c - 2;
                                    c += 3;
                                    break;
                                default:
                                    c += 3;
                                    break;
                            }
                        }
                        d = d.subarray(b);
                        c -= b;
                        b = 0;
                    };
                    this.reset = function() {
                        d = null;
                        b = 0;
                        this.trigger("reset");
                    };
                    this.flush = function() {
                        if (d && d.byteLength > 3) {
                            this.trigger("data", d.subarray(b + 3));
                        }
                        d = null;
                        b = 0;
                        this.trigger("done");
                    };
                    this.endTimeline = function() {
                        this.flush();
                        this.trigger("endedtimeline");
                    };
                };
                bj.prototype = new b();
                bk = {
                    100: true,
                    110: true,
                    122: true,
                    244: true,
                    44: true,
                    83: true,
                    86: true,
                    118: true,
                    128: true,
                    138: true,
                    139: true,
                    134: true
                };
                bi = function a() {
                    var b = new bj(), c, d, e, f, g, h, i;
                    bi.prototype.init.call(this);
                    c = this;
                    this.push = function(a) {
                        if (a.type !== "video") {
                            return;
                        }
                        d = a.trackId;
                        e = a.pts;
                        f = a.dts;
                        b.push(a);
                    };
                    b.on("data", function(a) {
                        var b = {
                            trackId: d,
                            pts: e,
                            dts: f,
                            data: a,
                            nalUnitTypeCode: a[0] & 0x1f
                        };
                        switch(b.nalUnitTypeCode){
                            case 0x05:
                                b.nalUnitType = "slice_layer_without_partitioning_rbsp_idr";
                                break;
                            case 0x06:
                                b.nalUnitType = "sei_rbsp";
                                b.escapedRBSP = g(a.subarray(1));
                                break;
                            case 0x07:
                                b.nalUnitType = "seq_parameter_set_rbsp";
                                b.escapedRBSP = g(a.subarray(1));
                                b.config = h(b.escapedRBSP);
                                break;
                            case 0x08:
                                b.nalUnitType = "pic_parameter_set_rbsp";
                                break;
                            case 0x09:
                                b.nalUnitType = "access_unit_delimiter_rbsp";
                                break;
                        }
                        c.trigger("data", b);
                    });
                    b.on("done", function() {
                        c.trigger("done");
                    });
                    b.on("partialdone", function() {
                        c.trigger("partialdone");
                    });
                    b.on("reset", function() {
                        c.trigger("reset");
                    });
                    b.on("endedtimeline", function() {
                        c.trigger("endedtimeline");
                    });
                    this.flush = function() {
                        b.flush();
                    };
                    this.partialFlush = function() {
                        b.partialFlush();
                    };
                    this.reset = function() {
                        b.reset();
                    };
                    this.endTimeline = function() {
                        b.endTimeline();
                    };
                    i = function a(b, c) {
                        var d = 8, e = 8, f, g;
                        for(f = 0; f < b; f++){
                            if (e !== 0) {
                                g = c.readExpGolomb();
                                e = (d + g + 256) % 256;
                            }
                            d = e === 0 ? d : e;
                        }
                    };
                    g = function a(b) {
                        var c = b.byteLength, d = [], e = 1, f, g;
                        while(e < c - 2){
                            if (b[e] === 0 && b[e + 1] === 0 && b[e + 2] === 0x03) {
                                d.push(e + 2);
                                e += 2;
                            } else {
                                e++;
                            }
                        }
                        if (d.length === 0) {
                            return b;
                        }
                        f = c - d.length;
                        g = new Uint8Array(f);
                        var h = 0;
                        for(e = 0; e < f; h++, e++){
                            if (h === d[0]) {
                                h++;
                                d.shift();
                            }
                            g[e] = b[h];
                        }
                        return g;
                    };
                    h = function a(b) {
                        var c = 0, d = 0, e = 0, f = 0, g, h, j, k, l, m, n, o, p, q, r, s = [
                            1,
                            1
                        ], t, u;
                        g = new bh(b);
                        h = g.readUnsignedByte();
                        k = g.readUnsignedByte();
                        j = g.readUnsignedByte();
                        g.skipUnsignedExpGolomb();
                        if (bk[h]) {
                            l = g.readUnsignedExpGolomb();
                            if (l === 3) {
                                g.skipBits(1);
                            }
                            g.skipUnsignedExpGolomb();
                            g.skipUnsignedExpGolomb();
                            g.skipBits(1);
                            if (g.readBoolean()) {
                                r = l !== 3 ? 8 : 12;
                                for(u = 0; u < r; u++){
                                    if (g.readBoolean()) {
                                        if (u < 6) {
                                            i(16, g);
                                        } else {
                                            i(64, g);
                                        }
                                    }
                                }
                            }
                        }
                        g.skipUnsignedExpGolomb();
                        m = g.readUnsignedExpGolomb();
                        if (m === 0) {
                            g.readUnsignedExpGolomb();
                        } else if (m === 1) {
                            g.skipBits(1);
                            g.skipExpGolomb();
                            g.skipExpGolomb();
                            n = g.readUnsignedExpGolomb();
                            for(u = 0; u < n; u++){
                                g.skipExpGolomb();
                            }
                        }
                        g.skipUnsignedExpGolomb();
                        g.skipBits(1);
                        o = g.readUnsignedExpGolomb();
                        p = g.readUnsignedExpGolomb();
                        q = g.readBits(1);
                        if (q === 0) {
                            g.skipBits(1);
                        }
                        g.skipBits(1);
                        if (g.readBoolean()) {
                            c = g.readUnsignedExpGolomb();
                            d = g.readUnsignedExpGolomb();
                            e = g.readUnsignedExpGolomb();
                            f = g.readUnsignedExpGolomb();
                        }
                        if (g.readBoolean()) {
                            if (g.readBoolean()) {
                                t = g.readUnsignedByte();
                                switch(t){
                                    case 1:
                                        s = [
                                            1,
                                            1
                                        ];
                                        break;
                                    case 2:
                                        s = [
                                            12,
                                            11
                                        ];
                                        break;
                                    case 3:
                                        s = [
                                            10,
                                            11
                                        ];
                                        break;
                                    case 4:
                                        s = [
                                            16,
                                            11
                                        ];
                                        break;
                                    case 5:
                                        s = [
                                            40,
                                            33
                                        ];
                                        break;
                                    case 6:
                                        s = [
                                            24,
                                            11
                                        ];
                                        break;
                                    case 7:
                                        s = [
                                            20,
                                            11
                                        ];
                                        break;
                                    case 8:
                                        s = [
                                            32,
                                            11
                                        ];
                                        break;
                                    case 9:
                                        s = [
                                            80,
                                            33
                                        ];
                                        break;
                                    case 10:
                                        s = [
                                            18,
                                            11
                                        ];
                                        break;
                                    case 11:
                                        s = [
                                            15,
                                            11
                                        ];
                                        break;
                                    case 12:
                                        s = [
                                            64,
                                            33
                                        ];
                                        break;
                                    case 13:
                                        s = [
                                            160,
                                            99
                                        ];
                                        break;
                                    case 14:
                                        s = [
                                            4,
                                            3
                                        ];
                                        break;
                                    case 15:
                                        s = [
                                            3,
                                            2
                                        ];
                                        break;
                                    case 16:
                                        s = [
                                            2,
                                            1
                                        ];
                                        break;
                                    case 255:
                                        {
                                            s = [
                                                (g.readUnsignedByte() << 8) | g.readUnsignedByte(),
                                                (g.readUnsignedByte() << 8) | g.readUnsignedByte(), 
                                            ];
                                            break;
                                        }
                                }
                                if (s) {
                                    s[0] / s[1];
                                }
                            }
                        }
                        return {
                            profileIdc: h,
                            levelIdc: j,
                            profileCompatibility: k,
                            width: (o + 1) * 16 - c * 2 - d * 2,
                            height: (2 - q) * (p + 1) * 16 - e * 2 - f * 2,
                            sarRatio: s
                        };
                    };
                };
                bi.prototype = new b();
                var bl = {
                    H264Stream: bi,
                    NalByteStream: bj
                };
                var bm = [
                    96000,
                    88200,
                    64000,
                    48000,
                    44100,
                    32000,
                    24000,
                    22050,
                    16000,
                    12000,
                    11025,
                    8000,
                    7350, 
                ];
                var bn = function a(b, c) {
                    var d = (b[c + 6] << 21) | (b[c + 7] << 14) | (b[c + 8] << 7) | b[c + 9], e = b[c + 5], f = (e & 16) >> 4;
                    d = d >= 0 ? d : 0;
                    if (f) {
                        return d + 20;
                    }
                    return d + 10;
                };
                var bo = function a(b, c) {
                    if (b.length - c < 10 || b[c] !== "I".charCodeAt(0) || b[c + 1] !== "D".charCodeAt(0) || b[c + 2] !== "3".charCodeAt(0)) {
                        return c;
                    }
                    c += bn(b, c);
                    return a(b, c);
                };
                var bp = function a(b) {
                    var c = bo(b, 0);
                    return (b.length >= c + 2 && (b[c] & 0xff) === 0xff && (b[c + 1] & 0xf0) === 0xf0 && (b[c + 1] & 0x16) === 0x10);
                };
                var bq = function a(b) {
                    return ((b[0] << 21) | (b[1] << 14) | (b[2] << 7) | b[3]);
                };
                var br = function a(b, c, d) {
                    var e, f = "";
                    for(e = c; e < d; e++){
                        f += "%" + ("00" + b[e].toString(16)).slice(-2);
                    }
                    return f;
                };
                var bs = function a(b, c, d) {
                    return unescape(br(b, c, d));
                };
                var bt = function a(b, c) {
                    var d = (b[c + 5] & 0xe0) >> 5, e = b[c + 4] << 3, f = b[c + 3] & (0x3 << 11);
                    return f | e | d;
                };
                var bu = function a(b, c) {
                    if (b[c] === "I".charCodeAt(0) && b[c + 1] === "D".charCodeAt(0) && b[c + 2] === "3".charCodeAt(0)) {
                        return "timed-metadata";
                    } else if (b[c] & (0xff === 0xff) && (b[c + 1] & 0xf0) === 0xf0) {
                        return "audio";
                    }
                    return null;
                };
                var bv = function a(b) {
                    var c = 0;
                    while(c + 5 < b.length){
                        if (b[c] !== 0xff || (b[c + 1] & 0xf6) !== 0xf0) {
                            c++;
                            continue;
                        }
                        return bm[(b[c + 2] & 0x3c) >>> 2];
                    }
                    return null;
                };
                var bw = function a(b) {
                    var c, d, e, f;
                    c = 10;
                    if (b[5] & 0x40) {
                        c += 4;
                        c += bq(b.subarray(10, 14));
                    }
                    do {
                        d = bq(b.subarray(c + 4, c + 8));
                        if (d < 1) {
                            return null;
                        }
                        f = String.fromCharCode(b[c], b[c + 1], b[c + 2], b[c + 3]);
                        if (f === "PRIV") {
                            e = b.subarray(c + 10, c + d + 10);
                            for(var g = 0; g < e.byteLength; g++){
                                if (e[g] === 0) {
                                    var h = bs(e, 0, g);
                                    if (h === "com.apple.streaming.transportStreamTimestamp") {
                                        var i = e.subarray(g + 1);
                                        var j = ((i[3] & 0x01) << 30) | (i[4] << 22) | (i[5] << 14) | (i[6] << 6) | (i[7] >>> 2);
                                        j *= 4;
                                        j += i[7] & 0x03;
                                        return j;
                                    }
                                    break;
                                }
                            }
                        }
                        c += 10;
                        c += d;
                    }while (c < b.byteLength)
                    return null;
                };
                var bx = {
                    isLikelyAacData: bp,
                    parseId3TagSize: bn,
                    parseAdtsSize: bt,
                    parseType: bu,
                    parseSampleRate: bv,
                    parseAacTimestamp: bw
                };
                var by;
                by = function a() {
                    var b = new Uint8Array(), c = 0;
                    by.prototype.init.call(this);
                    this.setTimestamp = function(a) {
                        c = a;
                    };
                    this.push = function(a) {
                        var d = 0, e = 0, f, g, h, i;
                        if (b.length) {
                            i = b.length;
                            b = new Uint8Array(a.byteLength + i);
                            b.set(b.subarray(0, i));
                            b.set(a, i);
                        } else {
                            b = a;
                        }
                        while(b.length - e >= 3){
                            if (b[e] === "I".charCodeAt(0) && b[e + 1] === "D".charCodeAt(0) && b[e + 2] === "3".charCodeAt(0)) {
                                if (b.length - e < 10) {
                                    break;
                                }
                                d = bx.parseId3TagSize(b, e);
                                if (e + d > b.length) {
                                    break;
                                }
                                g = {
                                    type: "timed-metadata",
                                    data: b.subarray(e, e + d)
                                };
                                this.trigger("data", g);
                                e += d;
                                continue;
                            } else if ((b[e] & 0xff) === 0xff && (b[e + 1] & 0xf0) === 0xf0) {
                                if (b.length - e < 7) {
                                    break;
                                }
                                d = bx.parseAdtsSize(b, e);
                                if (e + d > b.length) {
                                    break;
                                }
                                h = {
                                    type: "audio",
                                    data: b.subarray(e, e + d),
                                    pts: c,
                                    dts: c
                                };
                                this.trigger("data", h);
                                e += d;
                                continue;
                            }
                            e++;
                        }
                        f = b.length - e;
                        if (f > 0) {
                            b = b.subarray(e);
                        } else {
                            b = new Uint8Array();
                        }
                    };
                    this.reset = function() {
                        b = new Uint8Array();
                        this.trigger("reset");
                    };
                    this.endTimeline = function() {
                        b = new Uint8Array();
                        this.trigger("endedtimeline");
                    };
                };
                by.prototype = new b();
                var bz = by;
                var bA = [
                    "audioobjecttype",
                    "channelcount",
                    "samplerate",
                    "samplingfrequencyindex",
                    "samplesize", 
                ];
                var bB = bA;
                var bC = [
                    "width",
                    "height",
                    "profileIdc",
                    "levelIdc",
                    "profileCompatibility",
                    "sarRatio", 
                ];
                var bD = bC;
                var bE = bl.H264Stream;
                var bF = bx.isLikelyAacData;
                var bG = ak.ONE_SECOND_IN_TS;
                var bH, bI, bJ, bK;
                var bL = function a(b, c) {
                    c.stream = b;
                    this.trigger("log", c);
                };
                var bM = function a(b, c) {
                    var d = Object.keys(c);
                    for(var e = 0; e < d.length; e++){
                        var f = d[e];
                        if (f === "headOfPipeline" || !c[f].on) {
                            continue;
                        }
                        c[f].on("log", bL.bind(b, f));
                    }
                };
                var bN = function a(b, c) {
                    var d;
                    if (b.length !== c.length) {
                        return false;
                    }
                    for(d = 0; d < b.length; d++){
                        if (b[d] !== c[d]) {
                            return false;
                        }
                    }
                    return true;
                };
                var bO = function a(b, c, d, e, f, g) {
                    var h = d - c, i = e - c, j = f - d;
                    return {
                        start: {
                            dts: b,
                            pts: b + h
                        },
                        end: {
                            dts: b + i,
                            pts: b + j
                        },
                        prependedContentDuration: g,
                        baseMediaDecodeTime: b
                    };
                };
                bI = function a(b, c) {
                    var d = [], e, f = 0, g = 0, h = Infinity;
                    c = c || {};
                    e = c.firstSequenceNumber || 0;
                    bI.prototype.init.call(this);
                    this.push = function(a) {
                        av.collectDtsInfo(b, a);
                        if (b) {
                            bB.forEach(function(c) {
                                b[c] = a[c];
                            });
                        }
                        d.push(a);
                    };
                    this.setEarliestDts = function(a) {
                        f = a;
                    };
                    this.setVideoBaseMediaDecodeTime = function(a) {
                        h = a;
                    };
                    this.setAudioAppendStart = function(a) {
                        g = a;
                    };
                    this.flush = function() {
                        var a, i, j, k, l, m, n;
                        if (d.length === 0) {
                            this.trigger("done", "AudioSegmentStream");
                            return;
                        }
                        a = aq.trimAdtsFramesByEarliestDts(d, b, f);
                        b.baseMediaDecodeTime = av.calculateTrackBaseMediaDecodeTime(b, c.keepOriginalTimestamps);
                        n = aq.prefixWithSilence(b, a, g, h);
                        b.samples = aq.generateSampleTable(a);
                        j = N.mdat(aq.concatenateFrameData(a));
                        d = [];
                        i = N.moof(e, [
                            b
                        ]);
                        k = new Uint8Array(i.byteLength + j.byteLength);
                        e++;
                        k.set(i);
                        k.set(j, i.byteLength);
                        av.clearDtsInfo(b);
                        l = Math.ceil((bG * 1024) / b.samplerate);
                        if (a.length) {
                            m = a.length * l;
                            this.trigger("segmentTimingInfo", bO(ak.audioTsToVideoTs(b.baseMediaDecodeTime, b.samplerate), a[0].dts, a[0].pts, a[0].dts + m, a[0].pts + m, n || 0));
                            this.trigger("timingInfo", {
                                start: a[0].pts,
                                end: a[0].pts + m
                            });
                        }
                        this.trigger("data", {
                            track: b,
                            boxes: k
                        });
                        this.trigger("done", "AudioSegmentStream");
                    };
                    this.reset = function() {
                        av.clearDtsInfo(b);
                        d = [];
                        this.trigger("reset");
                    };
                };
                bI.prototype = new b();
                bH = function a(b, c) {
                    var d, e = [], f = [], g, h;
                    c = c || {};
                    d = c.firstSequenceNumber || 0;
                    bH.prototype.init.call(this);
                    delete b.minPTS;
                    this.gopCache_ = [];
                    this.push = function(a) {
                        av.collectDtsInfo(b, a);
                        if (a.nalUnitType === "seq_parameter_set_rbsp" && !g) {
                            g = a.config;
                            b.sps = [
                                a.data
                            ];
                            bD.forEach(function(a) {
                                b[a] = g[a];
                            }, this);
                        }
                        if (a.nalUnitType === "pic_parameter_set_rbsp" && !h) {
                            h = a.data;
                            b.pps = [
                                a.data
                            ];
                        }
                        e.push(a);
                    };
                    this.flush = function() {
                        var a, g, h, i, j, k, l = 0, m, n;
                        while(e.length){
                            if (e[0].nalUnitType === "access_unit_delimiter_rbsp") {
                                break;
                            }
                            e.shift();
                        }
                        if (e.length === 0) {
                            this.resetStream_();
                            this.trigger("done", "VideoSegmentStream");
                            return;
                        }
                        a = X.groupNalsIntoFrames(e);
                        h = X.groupFramesIntoGops(a);
                        if (!h[0][0].keyFrame) {
                            g = this.getGopForFusion_(e[0], b);
                            if (g) {
                                l = g.duration;
                                h.unshift(g);
                                h.byteLength += g.byteLength;
                                h.nalCount += g.nalCount;
                                h.pts = g.pts;
                                h.dts = g.dts;
                                h.duration += g.duration;
                            } else {
                                h = X.extendFirstKeyFrame(h);
                            }
                        }
                        if (f.length) {
                            var o;
                            if (c.alignGopsAtEnd) {
                                o = this.alignGopsAtEnd_(h);
                            } else {
                                o = this.alignGopsAtStart_(h);
                            }
                            if (!o) {
                                this.gopCache_.unshift({
                                    gop: h.pop(),
                                    pps: b.pps,
                                    sps: b.sps
                                });
                                this.gopCache_.length = Math.min(6, this.gopCache_.length);
                                e = [];
                                this.resetStream_();
                                this.trigger("done", "VideoSegmentStream");
                                return;
                            }
                            av.clearDtsInfo(b);
                            h = o;
                        }
                        av.collectDtsInfo(b, h);
                        b.samples = X.generateSampleTable(h);
                        j = N.mdat(X.concatenateNalData(h));
                        b.baseMediaDecodeTime = av.calculateTrackBaseMediaDecodeTime(b, c.keepOriginalTimestamps);
                        this.trigger("processedGopsInfo", h.map(function(a) {
                            return {
                                pts: a.pts,
                                dts: a.dts,
                                byteLength: a.byteLength
                            };
                        }));
                        m = h[0];
                        n = h[h.length - 1];
                        this.trigger("segmentTimingInfo", bO(b.baseMediaDecodeTime, m.dts, m.pts, n.dts + n.duration, n.pts + n.duration, l));
                        this.trigger("timingInfo", {
                            start: h[0].pts,
                            end: h[h.length - 1].pts + h[h.length - 1].duration
                        });
                        this.gopCache_.unshift({
                            gop: h.pop(),
                            pps: b.pps,
                            sps: b.sps
                        });
                        this.gopCache_.length = Math.min(6, this.gopCache_.length);
                        e = [];
                        this.trigger("baseMediaDecodeTime", b.baseMediaDecodeTime);
                        this.trigger("timelineStartInfo", b.timelineStartInfo);
                        i = N.moof(d, [
                            b
                        ]);
                        k = new Uint8Array(i.byteLength + j.byteLength);
                        d++;
                        k.set(i);
                        k.set(j, i.byteLength);
                        this.trigger("data", {
                            track: b,
                            boxes: k
                        });
                        this.resetStream_();
                        this.trigger("done", "VideoSegmentStream");
                    };
                    this.reset = function() {
                        this.resetStream_();
                        e = [];
                        this.gopCache_.length = 0;
                        f.length = 0;
                        this.trigger("reset");
                    };
                    this.resetStream_ = function() {
                        av.clearDtsInfo(b);
                        g = undefined;
                        h = undefined;
                    };
                    this.getGopForFusion_ = function(a) {
                        var c = 45000, d = 10000, e = Infinity, f, g, h, i, j;
                        for(j = 0; j < this.gopCache_.length; j++){
                            i = this.gopCache_[j];
                            h = i.gop;
                            if (!(b.pps && bN(b.pps[0], i.pps[0])) || !(b.sps && bN(b.sps[0], i.sps[0]))) {
                                continue;
                            }
                            if (h.dts < b.timelineStartInfo.dts) {
                                continue;
                            }
                            f = a.dts - h.dts - h.duration;
                            if (f >= -d && f <= c) {
                                if (!g || e > f) {
                                    g = i;
                                    e = f;
                                }
                            }
                        }
                        if (g) {
                            return g.gop;
                        }
                        return null;
                    };
                    this.alignGopsAtStart_ = function(a) {
                        var b, c, d, e, g, h, i, j;
                        g = a.byteLength;
                        h = a.nalCount;
                        i = a.duration;
                        b = c = 0;
                        while(b < f.length && c < a.length){
                            d = f[b];
                            e = a[c];
                            if (d.pts === e.pts) {
                                break;
                            }
                            if (e.pts > d.pts) {
                                b++;
                                continue;
                            }
                            c++;
                            g -= e.byteLength;
                            h -= e.nalCount;
                            i -= e.duration;
                        }
                        if (c === 0) {
                            return a;
                        }
                        if (c === a.length) {
                            return null;
                        }
                        j = a.slice(c);
                        j.byteLength = g;
                        j.duration = i;
                        j.nalCount = h;
                        j.pts = j[0].pts;
                        j.dts = j[0].dts;
                        return j;
                    };
                    this.alignGopsAtEnd_ = function(a) {
                        var b, c, d, e, g, h;
                        b = f.length - 1;
                        c = a.length - 1;
                        g = null;
                        h = false;
                        while(b >= 0 && c >= 0){
                            d = f[b];
                            e = a[c];
                            if (d.pts === e.pts) {
                                h = true;
                                break;
                            }
                            if (d.pts > e.pts) {
                                b--;
                                continue;
                            }
                            if (b === f.length - 1) {
                                g = c;
                            }
                            c--;
                        }
                        if (!h && g === null) {
                            return null;
                        }
                        var i;
                        if (h) {
                            i = c;
                        } else {
                            i = g;
                        }
                        if (i === 0) {
                            return a;
                        }
                        var j = a.slice(i);
                        var k = j.reduce(function(a, b) {
                            a.byteLength += b.byteLength;
                            a.duration += b.duration;
                            a.nalCount += b.nalCount;
                            return a;
                        }, {
                            byteLength: 0,
                            duration: 0,
                            nalCount: 0
                        });
                        j.byteLength = k.byteLength;
                        j.duration = k.duration;
                        j.nalCount = k.nalCount;
                        j.pts = j[0].pts;
                        j.dts = j[0].dts;
                        return j;
                    };
                    this.alignGopsWith = function(a) {
                        f = a;
                    };
                };
                bH.prototype = new b();
                bK = function a(b, c) {
                    this.numberOfTracks = 0;
                    this.metadataStream = c;
                    b = b || {};
                    if (typeof b.remux !== "undefined") {
                        this.remuxTracks = !!b.remux;
                    } else {
                        this.remuxTracks = true;
                    }
                    if (typeof b.keepOriginalTimestamps === "boolean") {
                        this.keepOriginalTimestamps = b.keepOriginalTimestamps;
                    } else {
                        this.keepOriginalTimestamps = false;
                    }
                    this.pendingTracks = [];
                    this.videoTrack = null;
                    this.pendingBoxes = [];
                    this.pendingCaptions = [];
                    this.pendingMetadata = [];
                    this.pendingBytes = 0;
                    this.emittedTracks = 0;
                    bK.prototype.init.call(this);
                    this.push = function(a) {
                        if (a.text) {
                            return this.pendingCaptions.push(a);
                        }
                        if (a.frames) {
                            return this.pendingMetadata.push(a);
                        }
                        this.pendingTracks.push(a.track);
                        this.pendingBytes += a.boxes.byteLength;
                        if (a.track.type === "video") {
                            this.videoTrack = a.track;
                            this.pendingBoxes.push(a.boxes);
                        }
                        if (a.track.type === "audio") {
                            this.audioTrack = a.track;
                            this.pendingBoxes.unshift(a.boxes);
                        }
                    };
                };
                bK.prototype = new b();
                bK.prototype.flush = function(a) {
                    var b = 0, c = {
                        captions: [],
                        captionStreams: {},
                        metadata: [],
                        info: {}
                    }, d, e, f, g = 0, h;
                    if (this.pendingTracks.length < this.numberOfTracks) {
                        if (a !== "VideoSegmentStream" && a !== "AudioSegmentStream") {
                            return;
                        } else if (this.remuxTracks) {
                            return;
                        } else if (this.pendingTracks.length === 0) {
                            this.emittedTracks++;
                            if (this.emittedTracks >= this.numberOfTracks) {
                                this.trigger("done");
                                this.emittedTracks = 0;
                            }
                            return;
                        }
                    }
                    if (this.videoTrack) {
                        g = this.videoTrack.timelineStartInfo.pts;
                        bD.forEach(function(a) {
                            c.info[a] = this.videoTrack[a];
                        }, this);
                    } else if (this.audioTrack) {
                        g = this.audioTrack.timelineStartInfo.pts;
                        bB.forEach(function(a) {
                            c.info[a] = this.audioTrack[a];
                        }, this);
                    }
                    if (this.videoTrack || this.audioTrack) {
                        if (this.pendingTracks.length === 1) {
                            c.type = this.pendingTracks[0].type;
                        } else {
                            c.type = "combined";
                        }
                        this.emittedTracks += this.pendingTracks.length;
                        f = N.initSegment(this.pendingTracks);
                        c.initSegment = new Uint8Array(f.byteLength);
                        c.initSegment.set(f);
                        c.data = new Uint8Array(this.pendingBytes);
                        for(h = 0; h < this.pendingBoxes.length; h++){
                            c.data.set(this.pendingBoxes[h], b);
                            b += this.pendingBoxes[h].byteLength;
                        }
                        for(h = 0; h < this.pendingCaptions.length; h++){
                            d = this.pendingCaptions[h];
                            d.startTime = ak.metadataTsToSeconds(d.startPts, g, this.keepOriginalTimestamps);
                            d.endTime = ak.metadataTsToSeconds(d.endPts, g, this.keepOriginalTimestamps);
                            c.captionStreams[d.stream] = true;
                            c.captions.push(d);
                        }
                        for(h = 0; h < this.pendingMetadata.length; h++){
                            e = this.pendingMetadata[h];
                            e.cueTime = ak.metadataTsToSeconds(e.pts, g, this.keepOriginalTimestamps);
                            c.metadata.push(e);
                        }
                        c.metadata.dispatchType = this.metadataStream.dispatchType;
                        this.pendingTracks.length = 0;
                        this.videoTrack = null;
                        this.pendingBoxes.length = 0;
                        this.pendingCaptions.length = 0;
                        this.pendingBytes = 0;
                        this.pendingMetadata.length = 0;
                        this.trigger("data", c);
                        for(h = 0; h < c.captions.length; h++){
                            d = c.captions[h];
                            this.trigger("caption", d);
                        }
                        for(h = 0; h < c.metadata.length; h++){
                            e = c.metadata[h];
                            this.trigger("id3Frame", e);
                        }
                    }
                    if (this.emittedTracks >= this.numberOfTracks) {
                        this.trigger("done");
                        this.emittedTracks = 0;
                    }
                };
                bK.prototype.setRemux = function(a) {
                    this.remuxTracks = a;
                };
                bJ = function a(b) {
                    var c = this, d = true, e, f;
                    bJ.prototype.init.call(this);
                    b = b || {};
                    this.baseMediaDecodeTime = b.baseMediaDecodeTime || 0;
                    this.transmuxPipeline_ = {};
                    this.setupAacPipeline = function() {
                        var a = {};
                        this.transmuxPipeline_ = a;
                        a.type = "aac";
                        a.metadataStream = new bb.MetadataStream();
                        a.aacStream = new bz();
                        a.audioTimestampRolloverStream = new bb.TimestampRolloverStream("audio");
                        a.timedMetadataTimestampRolloverStream = new bb.TimestampRolloverStream("timed-metadata");
                        a.adtsStream = new bf();
                        a.coalesceStream = new bK(b, a.metadataStream);
                        a.headOfPipeline = a.aacStream;
                        a.aacStream.pipe(a.audioTimestampRolloverStream).pipe(a.adtsStream);
                        a.aacStream.pipe(a.timedMetadataTimestampRolloverStream).pipe(a.metadataStream).pipe(a.coalesceStream);
                        a.metadataStream.on("timestamp", function(b) {
                            a.aacStream.setTimestamp(b.timeStamp);
                        });
                        a.aacStream.on("data", function(d) {
                            if ((d.type !== "timed-metadata" && d.type !== "audio") || a.audioSegmentStream) {
                                return;
                            }
                            f = f || {
                                timelineStartInfo: {
                                    baseMediaDecodeTime: c.baseMediaDecodeTime
                                },
                                codec: "adts",
                                type: "audio"
                            };
                            a.coalesceStream.numberOfTracks++;
                            a.audioSegmentStream = new bI(f, b);
                            a.audioSegmentStream.on("log", c.getLogTrigger_("audioSegmentStream"));
                            a.audioSegmentStream.on("timingInfo", c.trigger.bind(c, "audioTimingInfo"));
                            a.adtsStream.pipe(a.audioSegmentStream).pipe(a.coalesceStream);
                            c.trigger("trackinfo", {
                                hasAudio: !!f,
                                hasVideo: !!e
                            });
                        });
                        a.coalesceStream.on("data", this.trigger.bind(this, "data"));
                        a.coalesceStream.on("done", this.trigger.bind(this, "done"));
                        bM(this, a);
                    };
                    this.setupTsPipeline = function() {
                        var a = {};
                        this.transmuxPipeline_ = a;
                        a.type = "ts";
                        a.metadataStream = new bb.MetadataStream();
                        a.packetStream = new bb.TransportPacketStream();
                        a.parseStream = new bb.TransportParseStream();
                        a.elementaryStream = new bb.ElementaryStream();
                        a.timestampRolloverStream = new bb.TimestampRolloverStream();
                        a.adtsStream = new bf();
                        a.h264Stream = new bE();
                        a.captionStream = new bb.CaptionStream(b);
                        a.coalesceStream = new bK(b, a.metadataStream);
                        a.headOfPipeline = a.packetStream;
                        a.packetStream.pipe(a.parseStream).pipe(a.elementaryStream).pipe(a.timestampRolloverStream);
                        a.timestampRolloverStream.pipe(a.h264Stream);
                        a.timestampRolloverStream.pipe(a.adtsStream);
                        a.timestampRolloverStream.pipe(a.metadataStream).pipe(a.coalesceStream);
                        a.h264Stream.pipe(a.captionStream).pipe(a.coalesceStream);
                        a.elementaryStream.on("data", function(d) {
                            var g;
                            if (d.type === "metadata") {
                                g = d.tracks.length;
                                while(g--){
                                    if (!e && d.tracks[g].type === "video") {
                                        e = d.tracks[g];
                                        e.timelineStartInfo.baseMediaDecodeTime = c.baseMediaDecodeTime;
                                    } else if (!f && d.tracks[g].type === "audio") {
                                        f = d.tracks[g];
                                        f.timelineStartInfo.baseMediaDecodeTime = c.baseMediaDecodeTime;
                                    }
                                }
                                if (e && !a.videoSegmentStream) {
                                    a.coalesceStream.numberOfTracks++;
                                    a.videoSegmentStream = new bH(e, b);
                                    a.videoSegmentStream.on("log", c.getLogTrigger_("videoSegmentStream"));
                                    a.videoSegmentStream.on("timelineStartInfo", function(d) {
                                        if (f && !b.keepOriginalTimestamps) {
                                            f.timelineStartInfo = d;
                                            a.audioSegmentStream.setEarliestDts(d.dts - c.baseMediaDecodeTime);
                                        }
                                    });
                                    a.videoSegmentStream.on("processedGopsInfo", c.trigger.bind(c, "gopInfo"));
                                    a.videoSegmentStream.on("segmentTimingInfo", c.trigger.bind(c, "videoSegmentTimingInfo"));
                                    a.videoSegmentStream.on("baseMediaDecodeTime", function(b) {
                                        if (f) {
                                            a.audioSegmentStream.setVideoBaseMediaDecodeTime(b);
                                        }
                                    });
                                    a.videoSegmentStream.on("timingInfo", c.trigger.bind(c, "videoTimingInfo"));
                                    a.h264Stream.pipe(a.videoSegmentStream).pipe(a.coalesceStream);
                                }
                                if (f && !a.audioSegmentStream) {
                                    a.coalesceStream.numberOfTracks++;
                                    a.audioSegmentStream = new bI(f, b);
                                    a.audioSegmentStream.on("log", c.getLogTrigger_("audioSegmentStream"));
                                    a.audioSegmentStream.on("timingInfo", c.trigger.bind(c, "audioTimingInfo"));
                                    a.audioSegmentStream.on("segmentTimingInfo", c.trigger.bind(c, "audioSegmentTimingInfo"));
                                    a.adtsStream.pipe(a.audioSegmentStream).pipe(a.coalesceStream);
                                }
                                c.trigger("trackinfo", {
                                    hasAudio: !!f,
                                    hasVideo: !!e
                                });
                            }
                        });
                        a.coalesceStream.on("data", this.trigger.bind(this, "data"));
                        a.coalesceStream.on("id3Frame", function(b) {
                            b.dispatchType = a.metadataStream.dispatchType;
                            c.trigger("id3Frame", b);
                        });
                        a.coalesceStream.on("caption", this.trigger.bind(this, "caption"));
                        a.coalesceStream.on("done", this.trigger.bind(this, "done"));
                        bM(this, a);
                    };
                    this.setBaseMediaDecodeTime = function(a) {
                        var c = this.transmuxPipeline_;
                        if (!b.keepOriginalTimestamps) {
                            this.baseMediaDecodeTime = a;
                        }
                        if (f) {
                            f.timelineStartInfo.dts = undefined;
                            f.timelineStartInfo.pts = undefined;
                            av.clearDtsInfo(f);
                            if (c.audioTimestampRolloverStream) {
                                c.audioTimestampRolloverStream.discontinuity();
                            }
                        }
                        if (e) {
                            if (c.videoSegmentStream) {
                                c.videoSegmentStream.gopCache_ = [];
                            }
                            e.timelineStartInfo.dts = undefined;
                            e.timelineStartInfo.pts = undefined;
                            av.clearDtsInfo(e);
                            c.captionStream.reset();
                        }
                        if (c.timestampRolloverStream) {
                            c.timestampRolloverStream.discontinuity();
                        }
                    };
                    this.setAudioAppendStart = function(a) {
                        if (f) {
                            this.transmuxPipeline_.audioSegmentStream.setAudioAppendStart(a);
                        }
                    };
                    this.setRemux = function(a) {
                        var c = this.transmuxPipeline_;
                        b.remux = a;
                        if (c && c.coalesceStream) {
                            c.coalesceStream.setRemux(a);
                        }
                    };
                    this.alignGopsWith = function(a) {
                        if (e && this.transmuxPipeline_.videoSegmentStream) {
                            this.transmuxPipeline_.videoSegmentStream.alignGopsWith(a);
                        }
                    };
                    this.getLogTrigger_ = function(a) {
                        var b = this;
                        return function(c) {
                            c.stream = a;
                            b.trigger("log", c);
                        };
                    };
                    this.push = function(a) {
                        if (d) {
                            var b = bF(a);
                            if (b && this.transmuxPipeline_.type !== "aac") {
                                this.setupAacPipeline();
                            } else if (!b && this.transmuxPipeline_.type !== "ts") {
                                this.setupTsPipeline();
                            }
                            d = false;
                        }
                        this.transmuxPipeline_.headOfPipeline.push(a);
                    };
                    this.flush = function() {
                        d = true;
                        this.transmuxPipeline_.headOfPipeline.flush();
                    };
                    this.endTimeline = function() {
                        this.transmuxPipeline_.headOfPipeline.endTimeline();
                    };
                    this.reset = function() {
                        if (this.transmuxPipeline_.headOfPipeline) {
                            this.transmuxPipeline_.headOfPipeline.reset();
                        }
                    };
                    this.resetCaptions = function() {
                        if (this.transmuxPipeline_.captionStream) {
                            this.transmuxPipeline_.captionStream.reset();
                        }
                    };
                };
                bJ.prototype = new b();
                var bP = {
                    Transmuxer: bJ,
                    VideoSegmentStream: bH,
                    AudioSegmentStream: bI,
                    AUDIO_PROPERTIES: bB,
                    VIDEO_PROPERTIES: bD,
                    generateSegmentTimingInfo: bO
                };
                var bQ = function a(b) {
                    return b >>> 0;
                };
                var bR = function a(b) {
                    return ("00" + b.toString(16)).slice(-2);
                };
                var bS = {
                    toUnsigned: bQ,
                    toHexString: bR
                };
                var bT = function a(b) {
                    var c = "";
                    c += String.fromCharCode(b[0]);
                    c += String.fromCharCode(b[1]);
                    c += String.fromCharCode(b[2]);
                    c += String.fromCharCode(b[3]);
                    return c;
                };
                var bU = bT;
                var bV = bS.toUnsigned;
                var bW = function a(b, c) {
                    var d = [], e, f, g, h, i;
                    if (!c.length) {
                        return null;
                    }
                    for(e = 0; e < b.byteLength;){
                        f = bV((b[e] << 24) | (b[e + 1] << 16) | (b[e + 2] << 8) | b[e + 3]);
                        g = bU(b.subarray(e + 4, e + 8));
                        h = f > 1 ? e + f : b.byteLength;
                        if (g === c[0]) {
                            if (c.length === 1) {
                                d.push(b.subarray(e + 8, h));
                            } else {
                                i = a(b.subarray(e + 8, h), c.slice(1));
                                if (i.length) {
                                    d = d.concat(i);
                                }
                            }
                        }
                        e = h;
                    }
                    return d;
                };
                var bX = bW;
                var bY = bS.toUnsigned;
                var bZ = function a(b) {
                    var c = {
                        version: b[0],
                        flags: new Uint8Array(b.subarray(1, 4)),
                        baseMediaDecodeTime: bY((b[4] << 24) | (b[5] << 16) | (b[6] << 8) | b[7])
                    };
                    if (c.version === 1) {
                        c.baseMediaDecodeTime *= Math.pow(2, 32);
                        c.baseMediaDecodeTime += bY((b[8] << 24) | (b[9] << 16) | (b[10] << 8) | b[11]);
                    }
                    return c;
                };
                var b$ = bZ;
                var b_ = function a(b) {
                    return {
                        isLeading: (b[0] & 0x0c) >>> 2,
                        dependsOn: b[0] & 0x03,
                        isDependedOn: (b[1] & 0xc0) >>> 6,
                        hasRedundancy: (b[1] & 0x30) >>> 4,
                        paddingValue: (b[1] & 0x0e) >>> 1,
                        isNonSyncSample: b[1] & 0x01,
                        degradationPriority: (b[2] << 8) | b[3]
                    };
                };
                var b0 = b_;
                var b1 = function a(b) {
                    var c = {
                        version: b[0],
                        flags: new Uint8Array(b.subarray(1, 4)),
                        samples: []
                    }, d = new DataView(b.buffer, b.byteOffset, b.byteLength), e = c.flags[2] & 0x01, f = c.flags[2] & 0x04, g = c.flags[1] & 0x01, h = c.flags[1] & 0x02, i = c.flags[1] & 0x04, j = c.flags[1] & 0x08, k = d.getUint32(4), l = 8, m;
                    if (e) {
                        c.dataOffset = d.getInt32(l);
                        l += 4;
                    }
                    if (f && k) {
                        m = {
                            flags: b0(b.subarray(l, l + 4))
                        };
                        l += 4;
                        if (g) {
                            m.duration = d.getUint32(l);
                            l += 4;
                        }
                        if (h) {
                            m.size = d.getUint32(l);
                            l += 4;
                        }
                        if (j) {
                            if (c.version === 1) {
                                m.compositionTimeOffset = d.getInt32(l);
                            } else {
                                m.compositionTimeOffset = d.getUint32(l);
                            }
                            l += 4;
                        }
                        c.samples.push(m);
                        k--;
                    }
                    while(k--){
                        m = {};
                        if (g) {
                            m.duration = d.getUint32(l);
                            l += 4;
                        }
                        if (h) {
                            m.size = d.getUint32(l);
                            l += 4;
                        }
                        if (i) {
                            m.flags = b0(b.subarray(l, l + 4));
                            l += 4;
                        }
                        if (j) {
                            if (c.version === 1) {
                                m.compositionTimeOffset = d.getInt32(l);
                            } else {
                                m.compositionTimeOffset = d.getUint32(l);
                            }
                            l += 4;
                        }
                        c.samples.push(m);
                    }
                    return c;
                };
                var b2 = b1;
                var b3 = function a(b) {
                    var c = new DataView(b.buffer, b.byteOffset, b.byteLength), d = {
                        version: b[0],
                        flags: new Uint8Array(b.subarray(1, 4)),
                        trackId: c.getUint32(4)
                    }, e = d.flags[2] & 0x01, f = d.flags[2] & 0x02, g = d.flags[2] & 0x08, h = d.flags[2] & 0x10, i = d.flags[2] & 0x20, j = d.flags[0] & 0x010000, k = d.flags[0] & 0x020000, l;
                    l = 8;
                    if (e) {
                        l += 4;
                        d.baseDataOffset = c.getUint32(12);
                        l += 4;
                    }
                    if (f) {
                        d.sampleDescriptionIndex = c.getUint32(l);
                        l += 4;
                    }
                    if (g) {
                        d.defaultSampleDuration = c.getUint32(l);
                        l += 4;
                    }
                    if (h) {
                        d.defaultSampleSize = c.getUint32(l);
                        l += 4;
                    }
                    if (i) {
                        d.defaultSampleFlags = c.getUint32(l);
                    }
                    if (j) {
                        d.durationIsEmpty = true;
                    }
                    if (!e && k) {
                        d.baseDataOffsetIsMoof = true;
                    }
                    return d;
                };
                var b4 = b3;
                var b5 = aC.discardEmulationPreventionBytes;
                var b6 = aQ.CaptionStream;
                var b7 = function a(b, c) {
                    var d = b;
                    for(var e = 0; e < c.length; e++){
                        var f = c[e];
                        if (d < f.size) {
                            return f;
                        }
                        d -= f.size;
                    }
                    return null;
                };
                var b8 = function a(b, c, d) {
                    var e = new DataView(b.buffer, b.byteOffset, b.byteLength), f = {
                        logs: [],
                        seiNals: []
                    }, g, h, i, j;
                    for(h = 0; h + 4 < b.length; h += i){
                        i = e.getUint32(h);
                        h += 4;
                        if (i <= 0) {
                            continue;
                        }
                        switch(b[h] & 0x1f){
                            case 0x06:
                                var k = b.subarray(h + 1, h + 1 + i);
                                var l = b7(h, c);
                                g = {
                                    nalUnitType: "sei_rbsp",
                                    size: i,
                                    data: k,
                                    escapedRBSP: b5(k),
                                    trackId: d
                                };
                                if (l) {
                                    g.pts = l.pts;
                                    g.dts = l.dts;
                                    j = l;
                                } else if (j) {
                                    g.pts = j.pts;
                                    g.dts = j.dts;
                                } else {
                                    f.logs.push({
                                        level: "warn",
                                        message: "We've encountered a nal unit without data at " + h + " for trackId " + d + ". See mux.js#223."
                                    });
                                    break;
                                }
                                f.seiNals.push(g);
                                break;
                        }
                    }
                    return f;
                };
                var b9 = function a(b, c, d) {
                    var e = c;
                    var f = d.defaultSampleDuration || 0;
                    var g = d.defaultSampleSize || 0;
                    var h = d.trackId;
                    var i = [];
                    b.forEach(function(a) {
                        var b = b2(a);
                        var c = b.samples;
                        c.forEach(function(a) {
                            if (a.duration === undefined) {
                                a.duration = f;
                            }
                            if (a.size === undefined) {
                                a.size = g;
                            }
                            a.trackId = h;
                            a.dts = e;
                            if (a.compositionTimeOffset === undefined) {
                                a.compositionTimeOffset = 0;
                            }
                            a.pts = e + a.compositionTimeOffset;
                            e += a.duration;
                        });
                        i = i.concat(c);
                    });
                    return i;
                };
                var ca = function a(b, c) {
                    var d = bX(b, [
                        "moof",
                        "traf"
                    ]);
                    var e = bX(b, [
                        "mdat"
                    ]);
                    var f = {};
                    var g = [];
                    e.forEach(function(a, b) {
                        var c = d[b];
                        g.push({
                            mdat: a,
                            traf: c
                        });
                    });
                    g.forEach(function(a) {
                        var b = a.mdat;
                        var d = a.traf;
                        var e = bX(d, [
                            "tfhd"
                        ]);
                        var g = b4(e[0]);
                        var h = g.trackId;
                        var i = bX(d, [
                            "tfdt"
                        ]);
                        var j = i.length > 0 ? b$(i[0]).baseMediaDecodeTime : 0;
                        var k = bX(d, [
                            "trun"
                        ]);
                        var l;
                        var m;
                        if (c === h && k.length > 0) {
                            l = b9(k, j, g);
                            m = b8(b, l, h);
                            if (!f[h]) {
                                f[h] = {
                                    seiNals: [],
                                    logs: []
                                };
                            }
                            f[h].seiNals = f[h].seiNals.concat(m.seiNals);
                            f[h].logs = f[h].logs.concat(m.logs);
                        }
                    });
                    return f;
                };
                var cb = function a(b, c, d) {
                    var e;
                    if (c === null) {
                        return null;
                    }
                    e = ca(b, c);
                    var f = e[c] || {};
                    return {
                        seiNals: f.seiNals,
                        logs: f.logs,
                        timescale: d
                    };
                };
                var cc = function a() {
                    var b = false;
                    var c;
                    var d;
                    var e;
                    var f;
                    var g;
                    var h;
                    this.isInitialized = function() {
                        return b;
                    };
                    this.init = function(a) {
                        c = new b6();
                        b = true;
                        h = a ? a.isPartial : false;
                        c.on("data", function(a) {
                            a.startTime = a.startPts / f;
                            a.endTime = a.endPts / f;
                            g.captions.push(a);
                            g.captionStreams[a.stream] = true;
                        });
                        c.on("log", function(a) {
                            g.logs.push(a);
                        });
                    };
                    this.isNewInit = function(a, b) {
                        if ((a && a.length === 0) || (b && typeof b === "object" && Object.keys(b).length === 0)) {
                            return false;
                        }
                        return (e !== a[0] || f !== b[e]);
                    };
                    this.parse = function(a, b, c) {
                        var h;
                        if (!this.isInitialized()) {
                            return null;
                        } else if (!b || !c) {
                            return null;
                        } else if (this.isNewInit(b, c)) {
                            e = b[0];
                            f = c[e];
                        } else if (e === null || !f) {
                            d.push(a);
                            return null;
                        }
                        while(d.length > 0){
                            var i = d.shift();
                            this.parse(i, b, c);
                        }
                        h = cb(a, e, f);
                        if (h && h.logs) {
                            g.logs = g.logs.concat(h.logs);
                        }
                        if (h === null || !h.seiNals) {
                            if (g.logs.length) {
                                return {
                                    logs: g.logs,
                                    captions: [],
                                    captionStreams: []
                                };
                            }
                            return null;
                        }
                        this.pushNals(h.seiNals);
                        this.flushStream();
                        return g;
                    };
                    this.pushNals = function(a) {
                        if (!this.isInitialized() || !a || a.length === 0) {
                            return null;
                        }
                        a.forEach(function(a) {
                            c.push(a);
                        });
                    };
                    this.flushStream = function() {
                        if (!this.isInitialized()) {
                            return null;
                        }
                        if (!h) {
                            c.flush();
                        } else {
                            c.partialFlush();
                        }
                    };
                    this.clearParsedCaptions = function() {
                        g.captions = [];
                        g.captionStreams = {};
                        g.logs = [];
                    };
                    this.resetCaptionStream = function() {
                        if (!this.isInitialized()) {
                            return null;
                        }
                        c.reset();
                    };
                    this.clearAllCaptions = function() {
                        this.clearParsedCaptions();
                        this.resetCaptionStream();
                    };
                    this.reset = function() {
                        d = [];
                        e = null;
                        f = null;
                        if (!g) {
                            g = {
                                captions: [],
                                captionStreams: {},
                                logs: []
                            };
                        } else {
                            this.clearParsedCaptions();
                        }
                        this.resetCaptionStream();
                    };
                    this.reset();
                };
                var cd = cc;
                var ce = bS.toUnsigned;
                var cf = bS.toHexString;
                var cg, ch, ci, cj, ck, cl;
                cg = function a(b) {
                    var c = {}, d = bX(b, [
                        "moov",
                        "trak"
                    ]);
                    return d.reduce(function(a, b) {
                        var c, d, e, f, g;
                        c = bX(b, [
                            "tkhd"
                        ])[0];
                        if (!c) {
                            return null;
                        }
                        d = c[0];
                        e = d === 0 ? 12 : 20;
                        f = ce((c[e] << 24) | (c[e + 1] << 16) | (c[e + 2] << 8) | c[e + 3]);
                        g = bX(b, [
                            "mdia",
                            "mdhd"
                        ])[0];
                        if (!g) {
                            return null;
                        }
                        d = g[0];
                        e = d === 0 ? 12 : 20;
                        a[f] = ce((g[e] << 24) | (g[e + 1] << 16) | (g[e + 2] << 8) | g[e + 3]);
                        return a;
                    }, c);
                };
                ch = function a(b, c) {
                    var d, e, f;
                    d = bX(c, [
                        "moof",
                        "traf"
                    ]);
                    e = [].concat.apply([], d.map(function(a) {
                        return bX(a, [
                            "tfhd"
                        ]).map(function(c) {
                            var d, e, f;
                            d = ce((c[4] << 24) | (c[5] << 16) | (c[6] << 8) | c[7]);
                            e = b[d] || 90e3;
                            f = bX(a, [
                                "tfdt"
                            ]).map(function(a) {
                                var b, c;
                                b = a[0];
                                c = ce((a[4] << 24) | (a[5] << 16) | (a[6] << 8) | a[7]);
                                if (b === 1) {
                                    c *= Math.pow(2, 32);
                                    c += ce((a[8] << 24) | (a[9] << 16) | (a[10] << 8) | a[11]);
                                }
                                return c;
                            })[0];
                            f = typeof f === "number" && !isNaN(f) ? f : Infinity;
                            return f / e;
                        });
                    }));
                    f = Math.min.apply(null, e);
                    return isFinite(f) ? f : 0;
                };
                ci = function a(b, c) {
                    var d = bX(c, [
                        "moof",
                        "traf"
                    ]);
                    var e = 0;
                    var f = 0;
                    var g;
                    if (d && d.length) {
                        var h = bX(d[0], [
                            "tfhd"
                        ])[0];
                        var i = bX(d[0], [
                            "trun"
                        ])[0];
                        var j = bX(d[0], [
                            "tfdt"
                        ])[0];
                        if (h) {
                            var k = b4(h);
                            g = k.trackId;
                        }
                        if (j) {
                            var l = b$(j);
                            e = l.baseMediaDecodeTime;
                        }
                        if (i) {
                            var m = b2(i);
                            if (m.samples && m.samples.length) {
                                f = m.samples[0].compositionTimeOffset || 0;
                            }
                        }
                    }
                    var n = b[g] || 90e3;
                    return ((e + f) / n);
                };
                cj = function a(b) {
                    var c = bX(b, [
                        "moov",
                        "trak"
                    ]);
                    var d = [];
                    c.forEach(function(a) {
                        var b = bX(a, [
                            "mdia",
                            "hdlr"
                        ]);
                        var c = bX(a, [
                            "tkhd"
                        ]);
                        b.forEach(function(a, b) {
                            var e = bU(a.subarray(8, 12));
                            var f = c[b];
                            var g;
                            var h;
                            var i;
                            if (e === "vide") {
                                g = new DataView(f.buffer, f.byteOffset, f.byteLength);
                                h = g.getUint8(0);
                                i = h === 0 ? g.getUint32(12) : g.getUint32(20);
                                d.push(i);
                            }
                        });
                    });
                    return d;
                };
                cl = function a(b) {
                    var c = b[0];
                    var d = c === 0 ? 12 : 20;
                    return ce((b[d] << 24) | (b[d + 1] << 16) | (b[d + 2] << 8) | b[d + 3]);
                };
                ck = function a(b) {
                    var c = bX(b, [
                        "moov",
                        "trak"
                    ]);
                    var d = [];
                    c.forEach(function(a) {
                        var b = {};
                        var c = bX(a, [
                            "tkhd"
                        ])[0];
                        var e, f;
                        if (c) {
                            e = new DataView(c.buffer, c.byteOffset, c.byteLength);
                            f = e.getUint8(0);
                            b.id = f === 0 ? e.getUint32(12) : e.getUint32(20);
                        }
                        var g = bX(a, [
                            "mdia",
                            "hdlr"
                        ])[0];
                        if (g) {
                            var h = bU(g.subarray(8, 12));
                            if (h === "vide") {
                                b.type = "video";
                            } else if (h === "soun") {
                                b.type = "audio";
                            } else {
                                b.type = h;
                            }
                        }
                        var i = bX(a, [
                            "mdia",
                            "minf",
                            "stbl",
                            "stsd", 
                        ])[0];
                        if (i) {
                            var j = i.subarray(8);
                            b.codec = bU(j.subarray(4, 8));
                            var k = bX(j, [
                                b.codec, 
                            ])[0];
                            var l, m;
                            if (k) {
                                if (/^[asm]vc[1-9]$/i.test(b.codec)) {
                                    l = k.subarray(78);
                                    m = bU(l.subarray(4, 8));
                                    if (m === "avcC" && l.length > 11) {
                                        b.codec += ".";
                                        b.codec += cf(l[9]);
                                        b.codec += cf(l[10]);
                                        b.codec += cf(l[11]);
                                    } else {
                                        b.codec = "avc1.4d400d";
                                    }
                                } else if (/^mp4[a,v]$/i.test(b.codec)) {
                                    l = k.subarray(28);
                                    m = bU(l.subarray(4, 8));
                                    if (m === "esds" && l.length > 20 && l[19] !== 0) {
                                        b.codec += "." + cf(l[19]);
                                        b.codec += "." + cf((l[20] >>> 2) & 0x3f).replace(/^0/, "");
                                    } else {
                                        b.codec = "mp4a.40.2";
                                    }
                                } else {
                                    b.codec = b.codec.toLowerCase();
                                }
                            }
                        }
                        var n = bX(a, [
                            "mdia",
                            "mdhd"
                        ])[0];
                        if (n) {
                            b.timescale = cl(n);
                        }
                        d.push(b);
                    });
                    return d;
                };
                var cm = {
                    findBox: bX,
                    parseType: bU,
                    timescale: cg,
                    startTime: ch,
                    compositionStartTime: ci,
                    videoTrackIds: cj,
                    tracks: ck,
                    getTimescaleFromMediaHeader: cl
                };
                var cn = function a(b) {
                    var c = b[1] & 0x1f;
                    c <<= 8;
                    c |= b[2];
                    return c;
                };
                var co = function a(b) {
                    return !!(b[1] & 0x40);
                };
                var cp = function a(b) {
                    var c = 0;
                    if ((b[3] & 0x30) >>> 4 > 0x01) {
                        c += b[4] + 1;
                    }
                    return c;
                };
                var cq = function a(b, c) {
                    var d = cn(b);
                    if (d === 0) {
                        return "pat";
                    } else if (d === c) {
                        return "pmt";
                    } else if (c) {
                        return "pes";
                    }
                    return null;
                };
                var cr = function a(b) {
                    var c = co(b);
                    var d = 4 + cp(b);
                    if (c) {
                        d += b[d] + 1;
                    }
                    return (((b[d + 10] & 0x1f) << 8) | b[d + 11]);
                };
                var cs = function a(b) {
                    var c = {};
                    var d = co(b);
                    var e = 4 + cp(b);
                    if (d) {
                        e += b[e] + 1;
                    }
                    if (!(b[e + 5] & 0x01)) {
                        return;
                    }
                    var f, g, h;
                    f = ((b[e + 1] & 0x0f) << 8) | b[e + 2];
                    g = 3 + f - 4;
                    h = ((b[e + 10] & 0x0f) << 8) | b[e + 11];
                    var i = 12 + h;
                    while(i < g){
                        var j = e + i;
                        c[((b[j + 1] & 0x1f) << 8) | b[j + 2]] = b[j];
                        i += (((b[j + 3] & 0x0f) << 8) | b[j + 4]) + 5;
                    }
                    return c;
                };
                var ct = function a(b, c) {
                    var d = cn(b);
                    var e = c[d];
                    switch(e){
                        case aR.H264_STREAM_TYPE:
                            return "video";
                        case aR.ADTS_STREAM_TYPE:
                            return "audio";
                        case aR.METADATA_STREAM_TYPE:
                            return "timed-metadata";
                        default:
                            return null;
                    }
                };
                var cu = function a(b) {
                    var c = co(b);
                    if (!c) {
                        return null;
                    }
                    var d = 4 + cp(b);
                    if (d >= b.byteLength) {
                        return null;
                    }
                    var e = null;
                    var f;
                    f = b[d + 7];
                    if (f & 0xc0) {
                        e = {};
                        e.pts = ((b[d + 9] & 0x0e) << 27) | ((b[d + 10] & 0xff) << 20) | ((b[d + 11] & 0xfe) << 12) | ((b[d + 12] & 0xff) << 5) | ((b[d + 13] & 0xfe) >>> 3);
                        e.pts *= 4;
                        e.pts += (b[d + 13] & 0x06) >>> 1;
                        e.dts = e.pts;
                        if (f & 0x40) {
                            e.dts = ((b[d + 14] & 0x0e) << 27) | ((b[d + 15] & 0xff) << 20) | ((b[d + 16] & 0xfe) << 12) | ((b[d + 17] & 0xff) << 5) | ((b[d + 18] & 0xfe) >>> 3);
                            e.dts *= 4;
                            e.dts += (b[d + 18] & 0x06) >>> 1;
                        }
                    }
                    return e;
                };
                var cv = function a(b) {
                    switch(b){
                        case 0x05:
                            return "slice_layer_without_partitioning_rbsp_idr";
                        case 0x06:
                            return "sei_rbsp";
                        case 0x07:
                            return "seq_parameter_set_rbsp";
                        case 0x08:
                            return "pic_parameter_set_rbsp";
                        case 0x09:
                            return "access_unit_delimiter_rbsp";
                        default:
                            return null;
                    }
                };
                var cw = function a(b) {
                    var c = 4 + cp(b);
                    var d = b.subarray(c);
                    var e = 0;
                    var f = 0;
                    var g = false;
                    var h;
                    for(; f < d.byteLength - 3; f++){
                        if (d[f + 2] === 1) {
                            e = f + 5;
                            break;
                        }
                    }
                    while(e < d.byteLength){
                        switch(d[e]){
                            case 0:
                                if (d[e - 1] !== 0) {
                                    e += 2;
                                    break;
                                } else if (d[e - 2] !== 0) {
                                    e++;
                                    break;
                                }
                                if (f + 3 !== e - 2) {
                                    h = cv(d[f + 3] & 0x1f);
                                    if (h === "slice_layer_without_partitioning_rbsp_idr") {
                                        g = true;
                                    }
                                }
                                do {
                                    e++;
                                }while (d[e] !== 1 && e < d.length)
                                f = e - 2;
                                e += 3;
                                break;
                            case 1:
                                if (d[e - 1] !== 0 || d[e - 2] !== 0) {
                                    e += 3;
                                    break;
                                }
                                h = cv(d[f + 3] & 0x1f);
                                if (h === "slice_layer_without_partitioning_rbsp_idr") {
                                    g = true;
                                }
                                f = e - 2;
                                e += 3;
                                break;
                            default:
                                e += 3;
                                break;
                        }
                    }
                    d = d.subarray(f);
                    e -= f;
                    f = 0;
                    if (d && d.byteLength > 3) {
                        h = cv(d[f + 3] & 0x1f);
                        if (h === "slice_layer_without_partitioning_rbsp_idr") {
                            g = true;
                        }
                    }
                    return g;
                };
                var cx = {
                    parseType: cq,
                    parsePat: cr,
                    parsePmt: cs,
                    parsePayloadUnitStartIndicator: co,
                    parsePesType: ct,
                    parsePesTime: cu,
                    videoPacketContainsKeyFrame: cw
                };
                var cy = aX.handleRollover;
                var cz = {};
                cz.ts = cx;
                cz.aac = bx;
                var cA = ak.ONE_SECOND_IN_TS;
                var cB = 188, cC = 0x47;
                var cD = function a(b, c) {
                    var d = 0, e = cB, f, g;
                    while(e < b.byteLength){
                        if (b[d] === cC && b[e] === cC) {
                            f = b.subarray(d, e);
                            g = cz.ts.parseType(f, c.pid);
                            switch(g){
                                case "pat":
                                    c.pid = cz.ts.parsePat(f);
                                    break;
                                case "pmt":
                                    var h = cz.ts.parsePmt(f);
                                    c.table = c.table || {};
                                    Object.keys(h).forEach(function(a) {
                                        c.table[a] = h[a];
                                    });
                                    break;
                            }
                            d += cB;
                            e += cB;
                            continue;
                        }
                        d++;
                        e++;
                    }
                };
                var cE = function a(b, c, d) {
                    var e = 0, f = cB, g, h, i, j, k;
                    var l = false;
                    while(f <= b.byteLength){
                        if (b[e] === cC && (b[f] === cC || f === b.byteLength)) {
                            g = b.subarray(e, f);
                            h = cz.ts.parseType(g, c.pid);
                            switch(h){
                                case "pes":
                                    i = cz.ts.parsePesType(g, c.table);
                                    j = cz.ts.parsePayloadUnitStartIndicator(g);
                                    if (i === "audio" && j) {
                                        k = cz.ts.parsePesTime(g);
                                        if (k) {
                                            k.type = "audio";
                                            d.audio.push(k);
                                            l = true;
                                        }
                                    }
                                    break;
                            }
                            if (l) {
                                break;
                            }
                            e += cB;
                            f += cB;
                            continue;
                        }
                        e++;
                        f++;
                    }
                    f = b.byteLength;
                    e = f - cB;
                    l = false;
                    while(e >= 0){
                        if (b[e] === cC && (b[f] === cC || f === b.byteLength)) {
                            g = b.subarray(e, f);
                            h = cz.ts.parseType(g, c.pid);
                            switch(h){
                                case "pes":
                                    i = cz.ts.parsePesType(g, c.table);
                                    j = cz.ts.parsePayloadUnitStartIndicator(g);
                                    if (i === "audio" && j) {
                                        k = cz.ts.parsePesTime(g);
                                        if (k) {
                                            k.type = "audio";
                                            d.audio.push(k);
                                            l = true;
                                        }
                                    }
                                    break;
                            }
                            if (l) {
                                break;
                            }
                            e -= cB;
                            f -= cB;
                            continue;
                        }
                        e--;
                        f--;
                    }
                };
                var cF = function a(b, c, d) {
                    var e = 0, f = cB, g, h, i, j, k, l, m, n;
                    var o = false;
                    var p = {
                        data: [],
                        size: 0
                    };
                    while(f < b.byteLength){
                        if (b[e] === cC && b[f] === cC) {
                            g = b.subarray(e, f);
                            h = cz.ts.parseType(g, c.pid);
                            switch(h){
                                case "pes":
                                    i = cz.ts.parsePesType(g, c.table);
                                    j = cz.ts.parsePayloadUnitStartIndicator(g);
                                    if (i === "video") {
                                        if (j && !o) {
                                            k = cz.ts.parsePesTime(g);
                                            if (k) {
                                                k.type = "video";
                                                d.video.push(k);
                                                o = true;
                                            }
                                        }
                                        if (!d.firstKeyFrame) {
                                            if (j) {
                                                if (p.size !== 0) {
                                                    l = new Uint8Array(p.size);
                                                    m = 0;
                                                    while(p.data.length){
                                                        n = p.data.shift();
                                                        l.set(n, m);
                                                        m += n.byteLength;
                                                    }
                                                    if (cz.ts.videoPacketContainsKeyFrame(l)) {
                                                        var q = cz.ts.parsePesTime(l);
                                                        if (q) {
                                                            d.firstKeyFrame = q;
                                                            d.firstKeyFrame.type = "video";
                                                        } else {
                                                            console.warn("Failed to extract PTS/DTS from PES at first keyframe. " + "This could be an unusual TS segment, or else mux.js did not " + "parse your TS segment correctly. If you know your TS " + "segments do contain PTS/DTS on keyframes please file a bug " + "report! You can try ffprobe to double check for yourself.");
                                                        }
                                                    }
                                                    p.size = 0;
                                                }
                                            }
                                            p.data.push(g);
                                            p.size += g.byteLength;
                                        }
                                    }
                                    break;
                            }
                            if (o && d.firstKeyFrame) {
                                break;
                            }
                            e += cB;
                            f += cB;
                            continue;
                        }
                        e++;
                        f++;
                    }
                    f = b.byteLength;
                    e = f - cB;
                    o = false;
                    while(e >= 0){
                        if (b[e] === cC && b[f] === cC) {
                            g = b.subarray(e, f);
                            h = cz.ts.parseType(g, c.pid);
                            switch(h){
                                case "pes":
                                    i = cz.ts.parsePesType(g, c.table);
                                    j = cz.ts.parsePayloadUnitStartIndicator(g);
                                    if (i === "video" && j) {
                                        k = cz.ts.parsePesTime(g);
                                        if (k) {
                                            k.type = "video";
                                            d.video.push(k);
                                            o = true;
                                        }
                                    }
                                    break;
                            }
                            if (o) {
                                break;
                            }
                            e -= cB;
                            f -= cB;
                            continue;
                        }
                        e--;
                        f--;
                    }
                };
                var cG = function a(b, c) {
                    if (b.audio && b.audio.length) {
                        var d = c;
                        if (typeof d === "undefined" || isNaN(d)) {
                            d = b.audio[0].dts;
                        }
                        b.audio.forEach(function(a) {
                            a.dts = cy(a.dts, d);
                            a.pts = cy(a.pts, d);
                            a.dtsTime = a.dts / cA;
                            a.ptsTime = a.pts / cA;
                        });
                    }
                    if (b.video && b.video.length) {
                        var e = c;
                        if (typeof e === "undefined" || isNaN(e)) {
                            e = b.video[0].dts;
                        }
                        b.video.forEach(function(a) {
                            a.dts = cy(a.dts, e);
                            a.pts = cy(a.pts, e);
                            a.dtsTime = a.dts / cA;
                            a.ptsTime = a.pts / cA;
                        });
                        if (b.firstKeyFrame) {
                            var f = b.firstKeyFrame;
                            f.dts = cy(f.dts, e);
                            f.pts = cy(f.pts, e);
                            f.dtsTime = f.dts / cA;
                            f.ptsTime = f.pts / cA;
                        }
                    }
                };
                var cH = function a(b) {
                    var c = false, d = 0, e = null, f = null, g = 0, h = 0, i;
                    while(b.length - h >= 3){
                        var j = cz.aac.parseType(b, h);
                        switch(j){
                            case "timed-metadata":
                                if (b.length - h < 10) {
                                    c = true;
                                    break;
                                }
                                g = cz.aac.parseId3TagSize(b, h);
                                if (g > b.length) {
                                    c = true;
                                    break;
                                }
                                if (f === null) {
                                    i = b.subarray(h, h + g);
                                    f = cz.aac.parseAacTimestamp(i);
                                }
                                h += g;
                                break;
                            case "audio":
                                if (b.length - h < 7) {
                                    c = true;
                                    break;
                                }
                                g = cz.aac.parseAdtsSize(b, h);
                                if (g > b.length) {
                                    c = true;
                                    break;
                                }
                                if (e === null) {
                                    i = b.subarray(h, h + g);
                                    e = cz.aac.parseSampleRate(i);
                                }
                                d++;
                                h += g;
                                break;
                            default:
                                h++;
                                break;
                        }
                        if (c) {
                            return null;
                        }
                    }
                    if (e === null || f === null) {
                        return null;
                    }
                    var k = cA / e;
                    var l = {
                        audio: [
                            {
                                type: "audio",
                                dts: f,
                                pts: f
                            },
                            {
                                type: "audio",
                                dts: f + d * 1024 * k,
                                pts: f + d * 1024 * k
                            }, 
                        ]
                    };
                    return l;
                };
                var cI = function a(b) {
                    var c = {
                        pid: null,
                        table: null
                    };
                    var d = {};
                    cD(b, c);
                    for(var e in c.table){
                        if (c.table.hasOwnProperty(e)) {
                            var f = c.table[e];
                            switch(f){
                                case aR.H264_STREAM_TYPE:
                                    d.video = [];
                                    cF(b, c, d);
                                    if (d.video.length === 0) {
                                        delete d.video;
                                    }
                                    break;
                                case aR.ADTS_STREAM_TYPE:
                                    d.audio = [];
                                    cE(b, c, d);
                                    if (d.audio.length === 0) {
                                        delete d.audio;
                                    }
                                    break;
                            }
                        }
                    }
                    return d;
                };
                var cJ = function a(b, c) {
                    var d = cz.aac.isLikelyAacData(b);
                    var e;
                    if (d) {
                        e = cH(b);
                    } else {
                        e = cI(b);
                    }
                    if (!e || (!e.audio && !e.video)) {
                        return null;
                    }
                    cG(e, c);
                    return e;
                };
                var cK = {
                    inspect: cJ,
                    parseAudioPes_: cE
                };
                var cL = function a(b, c) {
                    c.on("data", function(a) {
                        var c = a.initSegment;
                        a.initSegment = {
                            data: c.buffer,
                            byteOffset: c.byteOffset,
                            byteLength: c.byteLength
                        };
                        var d = a.data;
                        a.data = d.buffer;
                        b.postMessage({
                            action: "data",
                            segment: a,
                            byteOffset: d.byteOffset,
                            byteLength: d.byteLength
                        }, [
                            a.data
                        ]);
                    });
                    c.on("done", function(a) {
                        b.postMessage({
                            action: "done"
                        });
                    });
                    c.on("gopInfo", function(a) {
                        b.postMessage({
                            action: "gopInfo",
                            gopInfo: a
                        });
                    });
                    c.on("videoSegmentTimingInfo", function(a) {
                        var c = {
                            start: {
                                decode: ak.videoTsToSeconds(a.start.dts),
                                presentation: ak.videoTsToSeconds(a.start.pts)
                            },
                            end: {
                                decode: ak.videoTsToSeconds(a.end.dts),
                                presentation: ak.videoTsToSeconds(a.end.pts)
                            },
                            baseMediaDecodeTime: ak.videoTsToSeconds(a.baseMediaDecodeTime)
                        };
                        if (a.prependedContentDuration) {
                            c.prependedContentDuration = ak.videoTsToSeconds(a.prependedContentDuration);
                        }
                        b.postMessage({
                            action: "videoSegmentTimingInfo",
                            videoSegmentTimingInfo: c
                        });
                    });
                    c.on("audioSegmentTimingInfo", function(a) {
                        var c = {
                            start: {
                                decode: ak.videoTsToSeconds(a.start.dts),
                                presentation: ak.videoTsToSeconds(a.start.pts)
                            },
                            end: {
                                decode: ak.videoTsToSeconds(a.end.dts),
                                presentation: ak.videoTsToSeconds(a.end.pts)
                            },
                            baseMediaDecodeTime: ak.videoTsToSeconds(a.baseMediaDecodeTime)
                        };
                        if (a.prependedContentDuration) {
                            c.prependedContentDuration = ak.videoTsToSeconds(a.prependedContentDuration);
                        }
                        b.postMessage({
                            action: "audioSegmentTimingInfo",
                            audioSegmentTimingInfo: c
                        });
                    });
                    c.on("id3Frame", function(a) {
                        b.postMessage({
                            action: "id3Frame",
                            id3Frame: a
                        });
                    });
                    c.on("caption", function(a) {
                        b.postMessage({
                            action: "caption",
                            caption: a
                        });
                    });
                    c.on("trackinfo", function(a) {
                        b.postMessage({
                            action: "trackinfo",
                            trackInfo: a
                        });
                    });
                    c.on("audioTimingInfo", function(a) {
                        b.postMessage({
                            action: "audioTimingInfo",
                            audioTimingInfo: {
                                start: ak.videoTsToSeconds(a.start),
                                end: ak.videoTsToSeconds(a.end)
                            }
                        });
                    });
                    c.on("videoTimingInfo", function(a) {
                        b.postMessage({
                            action: "videoTimingInfo",
                            videoTimingInfo: {
                                start: ak.videoTsToSeconds(a.start),
                                end: ak.videoTsToSeconds(a.end)
                            }
                        });
                    });
                    c.on("log", function(a) {
                        b.postMessage({
                            action: "log",
                            log: a
                        });
                    });
                };
                var cM = (function() {
                    function a(a, b) {
                        this.options = b || {};
                        this.self = a;
                        this.init();
                    }
                    var b = a.prototype;
                    b.init = function a() {
                        if (this.transmuxer) {
                            this.transmuxer.dispose();
                        }
                        this.transmuxer = new bP.Transmuxer(this.options);
                        cL(this.self, this.transmuxer);
                    };
                    b.pushMp4Captions = function a(b) {
                        if (!this.captionParser) {
                            this.captionParser = new cd();
                            this.captionParser.init();
                        }
                        var c = new Uint8Array(b.data, b.byteOffset, b.byteLength);
                        var d = this.captionParser.parse(c, b.trackIds, b.timescales);
                        this.self.postMessage({
                            action: "mp4Captions",
                            captions: (d && d.captions) || [],
                            logs: (d && d.logs) || [],
                            data: c.buffer
                        }, [
                            c.buffer
                        ]);
                    };
                    b.probeMp4StartTime = function a(b) {
                        var c = b.timescales, d = b.data;
                        var e = cm.startTime(c, d);
                        this.self.postMessage({
                            action: "probeMp4StartTime",
                            startTime: e,
                            data: d
                        }, [
                            d.buffer
                        ]);
                    };
                    b.probeMp4Tracks = function a(b) {
                        var c = b.data;
                        var d = cm.tracks(c);
                        this.self.postMessage({
                            action: "probeMp4Tracks",
                            tracks: d,
                            data: c
                        }, [
                            c.buffer
                        ]);
                    };
                    b.probeTs = function a(b) {
                        var c = b.data, d = b.baseStartTime;
                        var e = typeof d === "number" && !isNaN(d) ? d * ak.ONE_SECOND_IN_TS : void 0;
                        var f = cK.inspect(c, e);
                        var g = null;
                        if (f) {
                            g = {
                                hasVideo: (f.video && f.video.length === 2) || false,
                                hasAudio: (f.audio && f.audio.length === 2) || false
                            };
                            if (g.hasVideo) {
                                g.videoStart = f.video[0].ptsTime;
                            }
                            if (g.hasAudio) {
                                g.audioStart = f.audio[0].ptsTime;
                            }
                        }
                        this.self.postMessage({
                            action: "probeTs",
                            result: g,
                            data: c
                        }, [
                            c.buffer
                        ]);
                    };
                    b.clearAllMp4Captions = function a() {
                        if (this.captionParser) {
                            this.captionParser.clearAllCaptions();
                        }
                    };
                    b.clearParsedMp4Captions = function a() {
                        if (this.captionParser) {
                            this.captionParser.clearParsedCaptions();
                        }
                    };
                    b.push = function a(b) {
                        var c = new Uint8Array(b.data, b.byteOffset, b.byteLength);
                        this.transmuxer.push(c);
                    };
                    b.reset = function a() {
                        this.transmuxer.reset();
                    };
                    b.setTimestampOffset = function a(b) {
                        var c = b.timestampOffset || 0;
                        this.transmuxer.setBaseMediaDecodeTime(Math.round(ak.secondsToVideoTs(c)));
                    };
                    b.setAudioAppendStart = function a(b) {
                        this.transmuxer.setAudioAppendStart(Math.ceil(ak.secondsToVideoTs(b.appendStart)));
                    };
                    b.setRemux = function a(b) {
                        this.transmuxer.setRemux(b.remux);
                    };
                    b.flush = function a(b) {
                        this.transmuxer.flush();
                        self.postMessage({
                            action: "done",
                            type: "transmuxed"
                        });
                    };
                    b.endTimeline = function a() {
                        this.transmuxer.endTimeline();
                        self.postMessage({
                            action: "endedtimeline",
                            type: "transmuxed"
                        });
                    };
                    b.alignGopsWith = function a(b) {
                        this.transmuxer.alignGopsWith(b.gopsToAlignWith.slice());
                    };
                    return a;
                })();
                self.onmessage = function(a) {
                    if (a.data.action === "init" && a.data.options) {
                        this.messageHandlers = new cM(self, a.data.options);
                        return;
                    }
                    if (!this.messageHandlers) {
                        this.messageHandlers = new cM(self);
                    }
                    if (a.data && a.data.action && a.data.action !== "init") {
                        if (this.messageHandlers[a.data.action]) {
                            this.messageHandlers[a.data.action](a.data);
                        }
                    }
                };
            }));
            var gC = gy(gB);
            var gD = function a(b, c, d) {
                var e = b.data.segment, f = e.type, g = e.initSegment, h = e.captions, i = e.captionStreams, j = e.metadata, k = e.videoFrameDtsTime, l = e.videoFramePtsTime;
                c.buffer.push({
                    captions: h,
                    captionStreams: i,
                    metadata: j
                });
                var m = b.data.segment.boxes || {
                    data: b.data.segment.data
                };
                var n = {
                    type: f,
                    data: new Uint8Array(m.data, m.data.byteOffset, m.data.byteLength),
                    initSegment: new Uint8Array(g.data, g.byteOffset, g.byteLength)
                };
                if (typeof k !== "undefined") {
                    n.videoFrameDtsTime = k;
                }
                if (typeof l !== "undefined") {
                    n.videoFramePtsTime = l;
                }
                d(n);
            };
            var gE = function a(b) {
                var c = b.transmuxedData, d = b.callback;
                c.buffer = [];
                d(c);
            };
            var gF = function a(b, c) {
                c.gopInfo = b.data.gopInfo;
            };
            var gG = function a(b) {
                var c = b.transmuxer, d = b.bytes, e = b.audioAppendStart, f = b.gopsToAlignWith, g = b.remux, h = b.onData, i = b.onTrackInfo, j = b.onAudioTimingInfo, k = b.onVideoTimingInfo, l = b.onVideoSegmentTimingInfo, m = b.onAudioSegmentTimingInfo, n = b.onId3, o = b.onCaptions, p = b.onDone, q = b.onEndedTimeline, r = b.onTransmuxerLog, s = b.isEndOfTimeline;
                var t = {
                    buffer: []
                };
                var u = s;
                var v = function a(d) {
                    if (c.currentTransmux !== b) {
                        return;
                    }
                    if (d.data.action === "data") {
                        gD(d, t, h);
                    }
                    if (d.data.action === "trackinfo") {
                        i(d.data.trackInfo);
                    }
                    if (d.data.action === "gopInfo") {
                        gF(d, t);
                    }
                    if (d.data.action === "audioTimingInfo") {
                        j(d.data.audioTimingInfo);
                    }
                    if (d.data.action === "videoTimingInfo") {
                        k(d.data.videoTimingInfo);
                    }
                    if (d.data.action === "videoSegmentTimingInfo") {
                        l(d.data.videoSegmentTimingInfo);
                    }
                    if (d.data.action === "audioSegmentTimingInfo") {
                        m(d.data.audioSegmentTimingInfo);
                    }
                    if (d.data.action === "id3Frame") {
                        n([
                            d.data.id3Frame
                        ], d.data.id3Frame.dispatchType);
                    }
                    if (d.data.action === "caption") {
                        o(d.data.caption);
                    }
                    if (d.data.action === "endedtimeline") {
                        u = false;
                        q();
                    }
                    if (d.data.action === "log") {
                        r(d.data.log);
                    }
                    if (d.data.type !== "transmuxed") {
                        return;
                    }
                    if (u) {
                        return;
                    }
                    c.onmessage = null;
                    gE({
                        transmuxedData: t,
                        callback: p
                    });
                    gH(c);
                };
                c.onmessage = v;
                if (e) {
                    c.postMessage({
                        action: "setAudioAppendStart",
                        appendStart: e
                    });
                }
                if (Array.isArray(f)) {
                    c.postMessage({
                        action: "alignGopsWith",
                        gopsToAlignWith: f
                    });
                }
                if (typeof g !== "undefined") {
                    c.postMessage({
                        action: "setRemux",
                        remux: g
                    });
                }
                if (d.byteLength) {
                    var w = d instanceof ArrayBuffer ? d : d.buffer;
                    var x = d instanceof ArrayBuffer ? 0 : d.byteOffset;
                    c.postMessage({
                        action: "push",
                        data: w,
                        byteOffset: x,
                        byteLength: d.byteLength
                    }, [
                        w
                    ]);
                }
                if (s) {
                    c.postMessage({
                        action: "endTimeline"
                    });
                }
                c.postMessage({
                    action: "flush"
                });
            };
            var gH = function a(b) {
                b.currentTransmux = null;
                if (b.transmuxQueue.length) {
                    b.currentTransmux = b.transmuxQueue.shift();
                    if (typeof b.currentTransmux === "function") {
                        b.currentTransmux();
                    } else {
                        gG(b.currentTransmux);
                    }
                }
            };
            var gI = function a(b, c) {
                b.postMessage({
                    action: c
                });
                gH(b);
            };
            var gJ = function a(b, c) {
                if (!c.currentTransmux) {
                    c.currentTransmux = b;
                    gI(c, b);
                    return;
                }
                c.transmuxQueue.push(gI.bind(null, c, b));
            };
            var gK = function a(b) {
                gJ("reset", b);
            };
            var gL = function a(b) {
                gJ("endTimeline", b);
            };
            var gM = function a(b) {
                if (!b.transmuxer.currentTransmux) {
                    b.transmuxer.currentTransmux = b;
                    gG(b);
                    return;
                }
                b.transmuxer.transmuxQueue.push(b);
            };
            var gN = function a(b) {
                var c = new gC();
                c.currentTransmux = null;
                c.transmuxQueue = [];
                var d = c.terminate;
                c.terminate = function() {
                    c.currentTransmux = null;
                    c.transmuxQueue.length = 0;
                    return d.call(c);
                };
                c.postMessage({
                    action: "init",
                    options: b
                });
                return c;
            };
            var gO = {
                reset: gK,
                endTimeline: gL,
                transmux: gM,
                createTransmuxer: gN
            };
            var gP = function a(b) {
                var c = b.transmuxer;
                var d = b.endAction || b.action;
                var e = b.callback;
                var f = (0, h.Z)({}, b, {
                    endAction: null,
                    transmuxer: null,
                    callback: null
                });
                var g = function a(f) {
                    if (f.data.action !== d) {
                        return;
                    }
                    c.removeEventListener("message", a);
                    if (f.data.data) {
                        f.data.data = new Uint8Array(f.data.data, b.byteOffset || 0, b.byteLength || f.data.data.byteLength);
                        if (b.data) {
                            b.data = f.data.data;
                        }
                    }
                    e(f.data);
                };
                c.addEventListener("message", g);
                if (b.data) {
                    var i = b.data instanceof ArrayBuffer;
                    f.byteOffset = i ? 0 : b.data.byteOffset;
                    f.byteLength = b.data.byteLength;
                    var j = [
                        i ? b.data : b.data.buffer, 
                    ];
                    c.postMessage(f, j);
                } else {
                    c.postMessage(f);
                }
            };
            var gQ = {
                FAILURE: 2,
                TIMEOUT: -101,
                ABORTED: -102
            };
            var gR = function a(b) {
                b.forEach(function(a) {
                    a.abort();
                });
            };
            var gS = function a(b) {
                return {
                    bandwidth: b.bandwidth,
                    bytesReceived: b.bytesReceived || 0,
                    roundTripTime: b.roundTripTime || 0
                };
            };
            var gT = function a(b) {
                var c = b.target;
                var d = Date.now() - c.requestTime;
                var e = {
                    bandwidth: Infinity,
                    bytesReceived: 0,
                    roundTripTime: d || 0
                };
                e.bytesReceived = b.loaded;
                e.bandwidth = Math.floor((e.bytesReceived / e.roundTripTime) * 8 * 1000);
                return e;
            };
            var gU = function a(b, c) {
                if (c.timedout) {
                    return {
                        status: c.status,
                        message: "HLS request timed-out at URL: " + c.uri,
                        code: gQ.TIMEOUT,
                        xhr: c
                    };
                }
                if (c.aborted) {
                    return {
                        status: c.status,
                        message: "HLS request aborted at URL: " + c.uri,
                        code: gQ.ABORTED,
                        xhr: c
                    };
                }
                if (b) {
                    return {
                        status: c.status,
                        message: "HLS request errored at URL: " + c.uri,
                        code: gQ.FAILURE,
                        xhr: c
                    };
                }
                if (c.responseType === "arraybuffer" && c.response.byteLength === 0) {
                    return {
                        status: c.status,
                        message: "Empty HLS response at URL: " + c.uri,
                        code: gQ.FAILURE,
                        xhr: c
                    };
                }
                return null;
            };
            var gV = function a(b, c, d) {
                return function(a, e) {
                    var f = e.response;
                    var g = gU(a, e);
                    if (g) {
                        return d(g, b);
                    }
                    if (f.byteLength !== 16) {
                        return d({
                            status: e.status,
                            message: "Invalid HLS key at URL: " + e.uri,
                            code: gQ.FAILURE,
                            xhr: e
                        }, b);
                    }
                    var h = new DataView(f);
                    var i = new Uint32Array([
                        h.getUint32(0),
                        h.getUint32(4),
                        h.getUint32(8),
                        h.getUint32(12), 
                    ]);
                    for(var j = 0; j < c.length; j++){
                        c[j].bytes = i;
                    }
                    return d(null, b);
                };
            };
            var gW = function a(b, c) {
                var d = (0, C.Xm)(b.map.bytes);
                if (d !== "mp4") {
                    var e = b.map.resolvedUri || b.map.uri;
                    return c({
                        internal: true,
                        message: "Found unsupported " + (d || "unknown") + " container for initialization segment at URL: " + e,
                        code: gQ.FAILURE
                    });
                }
                gP({
                    action: "probeMp4Tracks",
                    data: b.map.bytes,
                    transmuxer: b.transmuxer,
                    callback: function a(d) {
                        var e = d.tracks, f = d.data;
                        b.map.bytes = f;
                        e.forEach(function(a) {
                            b.map.tracks = b.map.tracks || {};
                            if (b.map.tracks[a.type]) {
                                return;
                            }
                            b.map.tracks[a.type] = a;
                            if (typeof a.id === "number" && a.timescale) {
                                b.map.timescales = b.map.timescales || {};
                                b.map.timescales[a.id] = a.timescale;
                            }
                        });
                        return c(null);
                    }
                });
            };
            var gX = function a(b) {
                var c = b.segment, d = b.finishProcessingFn;
                return function(a, b) {
                    var e = gU(a, b);
                    if (e) {
                        return d(e, c);
                    }
                    var f = new Uint8Array(b.response);
                    if (c.map.key) {
                        c.map.encryptedBytes = f;
                        return d(null, c);
                    }
                    c.map.bytes = f;
                    gW(c, function(a) {
                        if (a) {
                            a.xhr = b;
                            a.status = b.status;
                            return d(a, c);
                        }
                        d(null, c);
                    });
                };
            };
            var gY = function a(b) {
                var c = b.segment, d = b.finishProcessingFn, e = b.responseType;
                return function(a, b) {
                    var f = gU(a, b);
                    if (f) {
                        return d(f, c);
                    }
                    var g = e === "arraybuffer" || !b.responseText ? b.response : gv(b.responseText.substring(c.lastReachedChar || 0));
                    c.stats = gS(b);
                    if (c.key) {
                        c.encryptedBytes = new Uint8Array(g);
                    } else {
                        c.bytes = new Uint8Array(g);
                    }
                    return d(null, c);
                };
            };
            var gZ = function a(b) {
                var c = b.segment, d = b.bytes, e = b.trackInfoFn, f = b.timingInfoFn, g = b.videoSegmentTimingInfoFn, h = b.audioSegmentTimingInfoFn, i = b.id3Fn, j = b.captionsFn, k = b.isEndOfTimeline, l = b.endedTimelineFn, m = b.dataFn, n = b.doneFn, o = b.onTransmuxerLog;
                var p = (c.map && c.map.tracks) || {};
                var q = Boolean(p.audio && p.video);
                var r = f.bind(null, c, "audio", "start");
                var s = f.bind(null, c, "audio", "end");
                var t = f.bind(null, c, "video", "start");
                var u = f.bind(null, c, "video", "end");
                var v = function a() {
                    return gM({
                        bytes: d,
                        transmuxer: c.transmuxer,
                        audioAppendStart: c.audioAppendStart,
                        gopsToAlignWith: c.gopsToAlignWith,
                        remux: q,
                        onData: function a(b) {
                            b.type = b.type === "combined" ? "video" : b.type;
                            m(c, b);
                        },
                        onTrackInfo: function a(b) {
                            if (e) {
                                if (q) {
                                    b.isMuxed = true;
                                }
                                e(c, b);
                            }
                        },
                        onAudioTimingInfo: function a(b) {
                            if (r && typeof b.start !== "undefined") {
                                r(b.start);
                                r = null;
                            }
                            if (s && typeof b.end !== "undefined") {
                                s(b.end);
                            }
                        },
                        onVideoTimingInfo: function a(b) {
                            if (t && typeof b.start !== "undefined") {
                                t(b.start);
                                t = null;
                            }
                            if (u && typeof b.end !== "undefined") {
                                u(b.end);
                            }
                        },
                        onVideoSegmentTimingInfo: function a(b) {
                            g(b);
                        },
                        onAudioSegmentTimingInfo: function a(b) {
                            h(b);
                        },
                        onId3: function a(b, d) {
                            i(c, b, d);
                        },
                        onCaptions: function a(b) {
                            j(c, [
                                b
                            ]);
                        },
                        isEndOfTimeline: k,
                        onEndedTimeline: function a() {
                            l();
                        },
                        onTransmuxerLog: o,
                        onDone: function a(b) {
                            if (!n) {
                                return;
                            }
                            b.type = b.type === "combined" ? "video" : b.type;
                            n(null, c, b);
                        }
                    });
                };
                gP({
                    action: "probeTs",
                    transmuxer: c.transmuxer,
                    data: d,
                    baseStartTime: c.baseStartTime,
                    callback: function a(b) {
                        c.bytes = d = b.data;
                        var f = b.result;
                        if (f) {
                            e(c, {
                                hasAudio: f.hasAudio,
                                hasVideo: f.hasVideo,
                                isMuxed: q
                            });
                            e = null;
                            if (f.hasAudio && !q) {
                                r(f.audioStart);
                            }
                            if (f.hasVideo) {
                                t(f.videoStart);
                            }
                            r = null;
                            t = null;
                        }
                        v();
                    }
                });
            };
            var g$ = function a(b) {
                var c = b.segment, d = b.bytes, e = b.trackInfoFn, f = b.timingInfoFn, g = b.videoSegmentTimingInfoFn, h = b.audioSegmentTimingInfoFn, i = b.id3Fn, j = b.captionsFn, k = b.isEndOfTimeline, l = b.endedTimelineFn, m = b.dataFn, n = b.doneFn, o = b.onTransmuxerLog;
                var p = new Uint8Array(d);
                if ((0, C.cz)(p)) {
                    c.isFmp4 = true;
                    var q = c.map.tracks;
                    var r = {
                        isFmp4: true,
                        hasVideo: !!q.video,
                        hasAudio: !!q.audio
                    };
                    if (q.audio && q.audio.codec && q.audio.codec !== "enca") {
                        r.audioCodec = q.audio.codec;
                    }
                    if (q.video && q.video.codec && q.video.codec !== "encv") {
                        r.videoCodec = q.video.codec;
                    }
                    if (q.video && q.audio) {
                        r.isMuxed = true;
                    }
                    e(c, r);
                    var s = function a(b) {
                        m(c, {
                            data: p,
                            type: r.hasAudio && !r.isMuxed ? "audio" : "video"
                        });
                        if (b && b.length) {
                            j(c, b);
                        }
                        n(null, c, {});
                    };
                    gP({
                        action: "probeMp4StartTime",
                        timescales: c.map.timescales,
                        data: p,
                        transmuxer: c.transmuxer,
                        callback: function a(b) {
                            var e = b.data, g = b.startTime;
                            d = e.buffer;
                            c.bytes = p = e;
                            if (r.hasAudio && !r.isMuxed) {
                                f(c, "audio", "start", g);
                            }
                            if (r.hasVideo) {
                                f(c, "video", "start", g);
                            }
                            if (!q.video || !e.byteLength || !c.transmuxer) {
                                s();
                                return;
                            }
                            gP({
                                action: "pushMp4Captions",
                                endAction: "mp4Captions",
                                transmuxer: c.transmuxer,
                                data: p,
                                timescales: c.map.timescales,
                                trackIds: [
                                    q.video.id
                                ],
                                callback: function a(b) {
                                    d = b.data.buffer;
                                    c.bytes = p = b.data;
                                    b.logs.forEach(function(a) {
                                        o(eV.mergeOptions(a, {
                                            stream: "mp4CaptionParser"
                                        }));
                                    });
                                    s(b.captions);
                                }
                            });
                        }
                    });
                    return;
                }
                if (!c.transmuxer) {
                    n(null, c, {});
                    return;
                }
                if (typeof c.container === "undefined") {
                    c.container = (0, C.Xm)(p);
                }
                if (c.container !== "ts" && c.container !== "aac") {
                    e(c, {
                        hasAudio: false,
                        hasVideo: false
                    });
                    n(null, c, {});
                    return;
                }
                gZ({
                    segment: c,
                    bytes: d,
                    trackInfoFn: e,
                    timingInfoFn: f,
                    videoSegmentTimingInfoFn: g,
                    audioSegmentTimingInfoFn: h,
                    id3Fn: i,
                    captionsFn: j,
                    isEndOfTimeline: k,
                    endedTimelineFn: l,
                    dataFn: m,
                    doneFn: n,
                    onTransmuxerLog: o
                });
            };
            var g_ = function a(b, c) {
                var d = b.id, e = b.key, f = b.encryptedBytes, g = b.decryptionWorker;
                var h = function a(b) {
                    if (b.data.source === d) {
                        g.removeEventListener("message", a);
                        var e = b.data.decrypted;
                        c(new Uint8Array(e.bytes, e.byteOffset, e.byteLength));
                    }
                };
                g.addEventListener("message", h);
                var i;
                if (e.bytes.slice) {
                    i = e.bytes.slice();
                } else {
                    i = new Uint32Array(Array.prototype.slice.call(e.bytes));
                }
                g.postMessage(f3({
                    source: d,
                    encrypted: f,
                    key: i,
                    iv: e.iv
                }), [
                    f.buffer,
                    i.buffer
                ]);
            };
            var g0 = function a(b) {
                var c = b.decryptionWorker, d = b.segment, e = b.trackInfoFn, f = b.timingInfoFn, g = b.videoSegmentTimingInfoFn, h = b.audioSegmentTimingInfoFn, i = b.id3Fn, j = b.captionsFn, k = b.isEndOfTimeline, l = b.endedTimelineFn, m = b.dataFn, n = b.doneFn, o = b.onTransmuxerLog;
                g_({
                    id: d.requestId,
                    key: d.key,
                    encryptedBytes: d.encryptedBytes,
                    decryptionWorker: c
                }, function(a) {
                    d.bytes = a;
                    g$({
                        segment: d,
                        bytes: d.bytes,
                        trackInfoFn: e,
                        timingInfoFn: f,
                        videoSegmentTimingInfoFn: g,
                        audioSegmentTimingInfoFn: h,
                        id3Fn: i,
                        captionsFn: j,
                        isEndOfTimeline: k,
                        endedTimelineFn: l,
                        dataFn: m,
                        doneFn: n,
                        onTransmuxerLog: o
                    });
                });
            };
            var g1 = function a(b) {
                var c = b.activeXhrs, d = b.decryptionWorker, e = b.trackInfoFn, f = b.timingInfoFn, g = b.videoSegmentTimingInfoFn, h = b.audioSegmentTimingInfoFn, i = b.id3Fn, j = b.captionsFn, k = b.isEndOfTimeline, l = b.endedTimelineFn, m = b.dataFn, n = b.doneFn, o = b.onTransmuxerLog;
                var p = 0;
                var q = false;
                return function(a, b) {
                    if (q) {
                        return;
                    }
                    if (a) {
                        q = true;
                        gR(c);
                        return n(a, b);
                    }
                    p += 1;
                    if (p === c.length) {
                        var r = function a() {
                            if (b.encryptedBytes) {
                                return g0({
                                    decryptionWorker: d,
                                    segment: b,
                                    trackInfoFn: e,
                                    timingInfoFn: f,
                                    videoSegmentTimingInfoFn: g,
                                    audioSegmentTimingInfoFn: h,
                                    id3Fn: i,
                                    captionsFn: j,
                                    isEndOfTimeline: k,
                                    endedTimelineFn: l,
                                    dataFn: m,
                                    doneFn: n,
                                    onTransmuxerLog: o
                                });
                            }
                            g$({
                                segment: b,
                                bytes: b.bytes,
                                trackInfoFn: e,
                                timingInfoFn: f,
                                videoSegmentTimingInfoFn: g,
                                audioSegmentTimingInfoFn: h,
                                id3Fn: i,
                                captionsFn: j,
                                isEndOfTimeline: k,
                                endedTimelineFn: l,
                                dataFn: m,
                                doneFn: n,
                                onTransmuxerLog: o
                            });
                        };
                        b.endOfAllRequests = Date.now();
                        if (b.map && b.map.encryptedBytes && !b.map.bytes) {
                            return g_({
                                decryptionWorker: d,
                                id: b.requestId + "-init",
                                encryptedBytes: b.map.encryptedBytes,
                                key: b.map.key
                            }, function(a) {
                                b.map.bytes = a;
                                gW(b, function(a) {
                                    if (a) {
                                        gR(c);
                                        return n(a, b);
                                    }
                                    r();
                                });
                            });
                        }
                        r();
                    }
                };
            };
            var g2 = function a(b) {
                var c = b.loadendState, d = b.abortFn;
                return function(a) {
                    var b = a.target;
                    if (b.aborted && d && !c.calledAbortFn) {
                        d();
                        c.calledAbortFn = true;
                    }
                };
            };
            var g3 = function a(b) {
                var c = b.segment, d = b.progressFn;
                b.trackInfoFn;
                b.timingInfoFn;
                b.videoSegmentTimingInfoFn;
                b.audioSegmentTimingInfoFn;
                b.id3Fn;
                b.captionsFn;
                b.isEndOfTimeline;
                b.endedTimelineFn;
                b.dataFn;
                return function(a) {
                    var b = a.target;
                    if (b.aborted) {
                        return;
                    }
                    c.stats = eV.mergeOptions(c.stats, gT(a));
                    if (!c.stats.firstBytesReceivedAt && c.stats.bytesReceived) {
                        c.stats.firstBytesReceivedAt = Date.now();
                    }
                    return d(a, c);
                };
            };
            var g4 = function a(b) {
                var c = b.xhr, d = b.xhrOptions, e = b.decryptionWorker, f = b.segment, g = b.abortFn, h = b.progressFn, i = b.trackInfoFn, j = b.timingInfoFn, k = b.videoSegmentTimingInfoFn, l = b.audioSegmentTimingInfoFn, m = b.id3Fn, n = b.captionsFn, o = b.isEndOfTimeline, p = b.endedTimelineFn, q = b.dataFn, r = b.doneFn, s = b.onTransmuxerLog;
                var t = [];
                var u = g1({
                    activeXhrs: t,
                    decryptionWorker: e,
                    trackInfoFn: i,
                    timingInfoFn: j,
                    videoSegmentTimingInfoFn: k,
                    audioSegmentTimingInfoFn: l,
                    id3Fn: m,
                    captionsFn: n,
                    isEndOfTimeline: o,
                    endedTimelineFn: p,
                    dataFn: q,
                    doneFn: r,
                    onTransmuxerLog: s
                });
                if (f.key && !f.key.bytes) {
                    var v = [
                        f.key
                    ];
                    if (f.map && !f.map.bytes && f.map.key && f.map.key.resolvedUri === f.key.resolvedUri) {
                        v.push(f.map.key);
                    }
                    var w = eV.mergeOptions(d, {
                        uri: f.key.resolvedUri,
                        responseType: "arraybuffer"
                    });
                    var x = gV(f, v, u);
                    var y = c(w, x);
                    t.push(y);
                }
                if (f.map && !f.map.bytes) {
                    var z = f.map.key && (!f.key || f.key.resolvedUri !== f.map.key.resolvedUri);
                    if (z) {
                        var A = eV.mergeOptions(d, {
                            uri: f.map.key.resolvedUri,
                            responseType: "arraybuffer"
                        });
                        var B = gV(f, [
                            f.map.key
                        ], u);
                        var C = c(A, B);
                        t.push(C);
                    }
                    var D = eV.mergeOptions(d, {
                        uri: f.map.resolvedUri,
                        responseType: "arraybuffer",
                        headers: f_(f.map)
                    });
                    var E = gX({
                        segment: f,
                        finishProcessingFn: u
                    });
                    var F = c(D, E);
                    t.push(F);
                }
                var G = eV.mergeOptions(d, {
                    uri: (f.part && f.part.resolvedUri) || f.resolvedUri,
                    responseType: "arraybuffer",
                    headers: f_(f)
                });
                var H = gY({
                    segment: f,
                    finishProcessingFn: u,
                    responseType: G.responseType
                });
                var I = c(G, H);
                I.addEventListener("progress", g3({
                    segment: f,
                    progressFn: h,
                    trackInfoFn: i,
                    timingInfoFn: j,
                    videoSegmentTimingInfoFn: k,
                    audioSegmentTimingInfoFn: l,
                    id3Fn: m,
                    captionsFn: n,
                    isEndOfTimeline: o,
                    endedTimelineFn: p,
                    dataFn: q
                }));
                t.push(I);
                var J = {};
                t.forEach(function(a) {
                    a.addEventListener("loadend", g2({
                        loadendState: J,
                        abortFn: g
                    }));
                });
                return function() {
                    return gR(t);
                };
            };
            var g5 = e$("CodecUtils");
            var g6 = function a(b) {
                var c = b.attributes || {};
                if (c.CODECS) {
                    return (0, w.kS)(c.CODECS);
                }
            };
            var g7 = function a(b, c) {
                var d = c.attributes || {};
                return (b && b.mediaGroups && b.mediaGroups.AUDIO && d.AUDIO && b.mediaGroups.AUDIO[d.AUDIO]);
            };
            var g8 = function a(b, c) {
                if (!g7(b, c)) {
                    return true;
                }
                var d = c.attributes || {};
                var e = b.mediaGroups.AUDIO[d.AUDIO];
                for(var f in e){
                    if (!e[f].uri && !e[f].playlists) {
                        return true;
                    }
                }
                return false;
            };
            var g9 = function a(b) {
                var c = {};
                b.forEach(function(a) {
                    var b = a.mediaType, d = a.type, e = a.details;
                    c[b] = c[b] || [];
                    c[b].push((0, w.ws)("" + d + e));
                });
                Object.keys(c).forEach(function(a) {
                    if (c[a].length > 1) {
                        g5("multiple " + a + " codecs found as attributes: " + c[a].join(", ") + ". Setting playlist codecs to null so that we wait for mux.js to probe segments for real codecs.");
                        c[a] = null;
                        return;
                    }
                    c[a] = c[a][0];
                });
                return c;
            };
            var ha = function a(b) {
                var c = 0;
                if (b.audio) {
                    c++;
                }
                if (b.video) {
                    c++;
                }
                return c;
            };
            var hb = function a(b, c) {
                var d = c.attributes || {};
                var e = g9(g6(c) || []);
                if (g7(b, c) && !e.audio) {
                    if (!g8(b, c)) {
                        var f = g9((0, w.Jg)(b, d.AUDIO) || []);
                        if (f.audio) {
                            e.audio = f.audio;
                        }
                    }
                }
                return e;
            };
            var hc = e$("PlaylistSelector");
            var hd = function a(b) {
                if (!b || !b.playlist) {
                    return;
                }
                var c = b.playlist;
                return JSON.stringify({
                    id: c.id,
                    bandwidth: b.bandwidth,
                    width: b.width,
                    height: b.height,
                    codecs: (c.attributes && c.attributes.CODECS) || ""
                });
            };
            var he = function a(b, c) {
                if (!b) {
                    return "";
                }
                var d = e().getComputedStyle(b);
                if (!d) {
                    return "";
                }
                return d[c];
            };
            var hf = function a(b, c) {
                var d = b.slice();
                b.sort(function(a, b) {
                    var e = c(a, b);
                    if (e === 0) {
                        return d.indexOf(a) - d.indexOf(b);
                    }
                    return e;
                });
            };
            var hg = function a(b, c) {
                var d;
                var f;
                if (b.attributes.BANDWIDTH) {
                    d = b.attributes.BANDWIDTH;
                }
                d = d || e().Number.MAX_VALUE;
                if (c.attributes.BANDWIDTH) {
                    f = c.attributes.BANDWIDTH;
                }
                f = f || e().Number.MAX_VALUE;
                return d - f;
            };
            var hh = function a(b, c) {
                var d;
                var f;
                if (b.attributes.RESOLUTION && b.attributes.RESOLUTION.width) {
                    d = b.attributes.RESOLUTION.width;
                }
                d = d || e().Number.MAX_VALUE;
                if (c.attributes.RESOLUTION && c.attributes.RESOLUTION.width) {
                    f = c.attributes.RESOLUTION.width;
                }
                f = f || e().Number.MAX_VALUE;
                if (d === f && b.attributes.BANDWIDTH && c.attributes.BANDWIDTH) {
                    return (b.attributes.BANDWIDTH - c.attributes.BANDWIDTH);
                }
                return d - f;
            };
            var hi = function a(b, c, d, f, g, h) {
                if (!b) {
                    return;
                }
                var i = {
                    bandwidth: c,
                    width: d,
                    height: f,
                    limitRenditionByPlayerDimensions: g
                };
                var j = b.playlists;
                if (fB.isAudioOnly(b)) {
                    j = h.getAudioTrackPlaylists_();
                    i.audioOnly = true;
                }
                var k = j.map(function(a) {
                    var b;
                    var c = a.attributes && a.attributes.RESOLUTION && a.attributes.RESOLUTION.width;
                    var d = a.attributes && a.attributes.RESOLUTION && a.attributes.RESOLUTION.height;
                    b = a.attributes && a.attributes.BANDWIDTH;
                    b = b || e().Number.MAX_VALUE;
                    return {
                        bandwidth: b,
                        width: c,
                        height: d,
                        playlist: a
                    };
                });
                hf(k, function(a, b) {
                    return a.bandwidth - b.bandwidth;
                });
                k = k.filter(function(a) {
                    return !fB.isIncompatible(a.playlist);
                });
                var l = k.filter(function(a) {
                    return fB.isEnabled(a.playlist);
                });
                if (!l.length) {
                    l = k.filter(function(a) {
                        return !fB.isDisabled(a.playlist);
                    });
                }
                var m = l.filter(function(a) {
                    return (a.bandwidth * gu.BANDWIDTH_VARIANCE < c);
                });
                var n = m[m.length - 1];
                var o = m.filter(function(a) {
                    return (a.bandwidth === n.bandwidth);
                })[0];
                if (g === false) {
                    var p = o || l[0] || k[0];
                    if (p && p.playlist) {
                        var q = "sortedPlaylistReps";
                        if (o) {
                            q = "bandwidthBestRep";
                        }
                        if (l[0]) {
                            q = "enabledPlaylistReps";
                        }
                        hc("choosing " + hd(p) + " using " + q + " with options", i);
                        return p.playlist;
                    }
                    hc("could not choose a playlist with options", i);
                    return null;
                }
                var r = m.filter(function(a) {
                    return a.width && a.height;
                });
                hf(r, function(a, b) {
                    return a.width - b.width;
                });
                var s = r.filter(function(a) {
                    return (a.width === d && a.height === f);
                });
                n = s[s.length - 1];
                var t = s.filter(function(a) {
                    return (a.bandwidth === n.bandwidth);
                })[0];
                var u;
                var v;
                var w;
                if (!t) {
                    u = r.filter(function(a) {
                        return (a.width > d || a.height > f);
                    });
                    v = u.filter(function(a) {
                        return (a.width === u[0].width && a.height === u[0].height);
                    });
                    n = v[v.length - 1];
                    w = v.filter(function(a) {
                        return (a.bandwidth === n.bandwidth);
                    })[0];
                }
                var x;
                if (h.experimentalLeastPixelDiffSelector) {
                    var y = r.map(function(a) {
                        a.pixelDiff = Math.abs(a.width - d) + Math.abs(a.height - f);
                        return a;
                    });
                    hf(y, function(a, b) {
                        if (a.pixelDiff === b.pixelDiff) {
                            return b.bandwidth - a.bandwidth;
                        }
                        return a.pixelDiff - b.pixelDiff;
                    });
                    x = y[0];
                }
                var z = x || w || t || o || l[0] || k[0];
                if (z && z.playlist) {
                    var A = "sortedPlaylistReps";
                    if (x) {
                        A = "leastPixelDiffRep";
                    } else if (w) {
                        A = "resolutionPlusOneRep";
                    } else if (t) {
                        A = "resolutionBestRep";
                    } else if (o) {
                        A = "bandwidthBestRep";
                    } else if (l[0]) {
                        A = "enabledPlaylistReps";
                    }
                    hc("choosing " + hd(z) + " using " + A + " with options", i);
                    return z.playlist;
                }
                hc("could not choose a playlist with options", i);
                return null;
            };
            var hj = function a() {
                var b = this.useDevicePixelRatio ? e().devicePixelRatio || 1 : 1;
                return hi(this.playlists.master, this.systemBandwidth, parseInt(he(this.tech_.el(), "width"), 10) * b, parseInt(he(this.tech_.el(), "height"), 10) * b, this.limitRenditionByPlayerDimensions, this.masterPlaylistController_);
            };
            var hk = function a(b) {
                var c = -1;
                var d = -1;
                if (b < 0 || b > 1) {
                    throw new Error("Moving average bandwidth decay must be between 0 and 1.");
                }
                return function() {
                    var a = this.useDevicePixelRatio ? e().devicePixelRatio || 1 : 1;
                    if (c < 0) {
                        c = this.systemBandwidth;
                        d = this.systemBandwidth;
                    }
                    if (this.systemBandwidth > 0 && this.systemBandwidth !== d) {
                        c = b * this.systemBandwidth + (1 - b) * c;
                        d = this.systemBandwidth;
                    }
                    return hi(this.playlists.master, c, parseInt(he(this.tech_.el(), "width"), 10) * a, parseInt(he(this.tech_.el(), "height"), 10) * a, this.limitRenditionByPlayerDimensions, this.masterPlaylistController_);
                };
            };
            var hl = function a(b) {
                var c = b.master, d = b.currentTime, e = b.bandwidth, f = b.duration, g = b.segmentDuration, h = b.timeUntilRebuffer, i = b.currentTimeline, j = b.syncController;
                var k = c.playlists.filter(function(a) {
                    return !fB.isIncompatible(a);
                });
                var l = k.filter(fB.isEnabled);
                if (!l.length) {
                    l = k.filter(function(a) {
                        return !fB.isDisabled(a);
                    });
                }
                var m = l.filter(fB.hasAttribute.bind(null, "BANDWIDTH"));
                var n = m.map(function(a) {
                    var b = j.getSyncPoint(a, f, i, d);
                    var c = b ? 1 : 2;
                    var k = fB.estimateSegmentRequestTime(g, e, a);
                    var l = k * c - h;
                    return {
                        playlist: a,
                        rebufferingImpact: l
                    };
                });
                var o = n.filter(function(a) {
                    return a.rebufferingImpact <= 0;
                });
                hf(o, function(a, b) {
                    return hg(b.playlist, a.playlist);
                });
                if (o.length) {
                    return o[0];
                }
                hf(n, function(a, b) {
                    return a.rebufferingImpact - b.rebufferingImpact;
                });
                return n[0] || null;
            };
            var hm = function a() {
                var b = this;
                var c = this.playlists.master.playlists.filter(fB.isEnabled);
                hf(c, function(a, b) {
                    return hg(a, b);
                });
                var d = c.filter(function(a) {
                    return !!hb(b.playlists.master, a).video;
                });
                return d[0] || null;
            };
            var hn = function a(b) {
                var c = 0;
                var d;
                if (b.bytes) {
                    d = new Uint8Array(b.bytes);
                    b.segments.forEach(function(a) {
                        d.set(a, c);
                        c += a.byteLength;
                    });
                }
                return d;
            };
            var ho = function a(b, c, d) {
                if (!b[d]) {
                    c.trigger({
                        type: "usage",
                        name: "vhs-608"
                    });
                    c.trigger({
                        type: "usage",
                        name: "hls-608"
                    });
                    var e = d;
                    if (/^cc708_/.test(d)) {
                        e = "SERVICE" + d.split("_")[1];
                    }
                    var f = c.textTracks().getTrackById(e);
                    if (f) {
                        b[d] = f;
                    } else {
                        var g = (c.options_.vhs && c.options_.vhs.captionServices) || {};
                        var h = d;
                        var i = d;
                        var j = false;
                        var k = g[e];
                        if (k) {
                            h = k.label;
                            i = k.language;
                            j = k["default"];
                        }
                        b[d] = c.addRemoteTextTrack({
                            kind: "captions",
                            id: e,
                            default: j,
                            label: h,
                            language: i
                        }, false).track;
                    }
                }
            };
            var hp = function a(b) {
                var c = b.inbandTextTracks, d = b.captionArray, f = b.timestampOffset;
                if (!d) {
                    return;
                }
                var g = e().WebKitDataCue || e().VTTCue;
                d.forEach(function(a) {
                    var b = a.stream;
                    c[b].addCue(new g(a.startTime + f, a.endTime + f, a.text));
                });
            };
            var hq = function a(b) {
                Object.defineProperties(b.frame, {
                    id: {
                        get: function a() {
                            eV.log.warn("cue.frame.id is deprecated. Use cue.value.key instead.");
                            return b.value.key;
                        }
                    },
                    value: {
                        get: function a() {
                            eV.log.warn("cue.frame.value is deprecated. Use cue.value.data instead.");
                            return b.value.data;
                        }
                    },
                    privateData: {
                        get: function a() {
                            eV.log.warn("cue.frame.privateData is deprecated. Use cue.value.data instead.");
                            return b.value.data;
                        }
                    }
                });
            };
            var hr = function a(b) {
                var c = b.inbandTextTracks, d = b.metadataArray, f = b.timestampOffset, g = b.videoDuration;
                if (!d) {
                    return;
                }
                var h = e().WebKitDataCue || e().VTTCue;
                var i = c.metadataTrack_;
                if (!i) {
                    return;
                }
                d.forEach(function(a) {
                    var b = a.cueTime + f;
                    if (typeof b !== "number" || e().isNaN(b) || b < 0 || !(b < Infinity)) {
                        return;
                    }
                    a.frames.forEach(function(a) {
                        var c = new h(b, b, a.value || a.url || a.data || "");
                        c.frame = a;
                        c.value = a;
                        hq(c);
                        i.addCue(c);
                    });
                });
                if (!i.cues || !i.cues.length) {
                    return;
                }
                var j = i.cues;
                var k = [];
                for(var l = 0; l < j.length; l++){
                    if (j[l]) {
                        k.push(j[l]);
                    }
                }
                var m = k.reduce(function(a, b) {
                    var c = a[b.startTime] || [];
                    c.push(b);
                    a[b.startTime] = c;
                    return a;
                }, {});
                var n = Object.keys(m).sort(function(a, b) {
                    return Number(a) - Number(b);
                });
                n.forEach(function(a, b) {
                    var c = m[a];
                    var d = Number(n[b + 1]) || g;
                    c.forEach(function(a) {
                        a.endTime = d;
                    });
                });
            };
            var hs = function a(b, c, d) {
                if (b.metadataTrack_) {
                    return;
                }
                b.metadataTrack_ = d.addRemoteTextTrack({
                    kind: "metadata",
                    label: "Timed Metadata"
                }, false).track;
                b.metadataTrack_.inBandMetadataTrackDispatchType = c;
            };
            var ht = function a(b, c, d) {
                var e;
                var f;
                if (!d) {
                    return;
                }
                if (!d.cues) {
                    return;
                }
                e = d.cues.length;
                while(e--){
                    f = d.cues[e];
                    if (f.startTime >= b && f.endTime <= c) {
                        d.removeCue(f);
                    }
                }
            };
            var hu = function a(b) {
                var c = b.cues;
                if (!c) {
                    return;
                }
                for(var d = 0; d < c.length; d++){
                    var e = [];
                    var f = 0;
                    for(var g = 0; g < c.length; g++){
                        if (c[d].startTime === c[g].startTime && c[d].endTime === c[g].endTime && c[d].text === c[g].text) {
                            f++;
                            if (f > 1) {
                                e.push(c[g]);
                            }
                        }
                    }
                    if (e.length) {
                        e.forEach(function(a) {
                            return b.removeCue(a);
                        });
                    }
                }
            };
            var hv = function a(b, c, d) {
                if (typeof c === "undefined" || c === null || !b.length) {
                    return [];
                }
                var e = Math.ceil((c - d + 3) * E.ONE_SECOND_IN_TS);
                var f;
                for(f = 0; f < b.length; f++){
                    if (b[f].pts > e) {
                        break;
                    }
                }
                return b.slice(f);
            };
            var hw = function a(b, c, d) {
                if (!c.length) {
                    return b;
                }
                if (d) {
                    return c.slice();
                }
                var e = c[0].pts;
                var f = 0;
                for(f; f < b.length; f++){
                    if (b[f].pts >= e) {
                        break;
                    }
                }
                return b.slice(0, f).concat(c);
            };
            var hx = function a(b, c, d, e) {
                var f = Math.ceil((c - e) * E.ONE_SECOND_IN_TS);
                var g = Math.ceil((d - e) * E.ONE_SECOND_IN_TS);
                var h = b.slice();
                var i = b.length;
                while(i--){
                    if (b[i].pts <= g) {
                        break;
                    }
                }
                if (i === -1) {
                    return h;
                }
                var j = i + 1;
                while(j--){
                    if (b[j].pts <= f) {
                        break;
                    }
                }
                j = Math.max(j, 0);
                h.splice(j, i - j + 1);
                return h;
            };
            var hy = function a(b, c) {
                if ((!b && !c) || (!b && c) || (b && !c)) {
                    return false;
                }
                if (b === c) {
                    return true;
                }
                var d = Object.keys(b).sort();
                var e = Object.keys(c).sort();
                if (d.length !== e.length) {
                    return false;
                }
                for(var f = 0; f < d.length; f++){
                    var g = d[f];
                    if (g !== e[f]) {
                        return false;
                    }
                    if (b[g] !== c[g]) {
                        return false;
                    }
                }
                return true;
            };
            var hz = 22;
            var hA = function a(b, c, d) {
                c = c || [];
                var e = [];
                var f = 0;
                for(var g = 0; g < c.length; g++){
                    var h = c[g];
                    if (b === h.timeline) {
                        e.push(g);
                        f += h.duration;
                        if (f > d) {
                            return g;
                        }
                    }
                }
                if (e.length === 0) {
                    return 0;
                }
                return e[e.length - 1];
            };
            var hB = 1;
            var hC = 500;
            var hD = function a(b) {
                return typeof b === "number" && isFinite(b);
            };
            var hE = 1 / 60;
            var hF = function a(b, c, d) {
                if (b !== "main" || !c || !d) {
                    return null;
                }
                if (!d.hasAudio && !d.hasVideo) {
                    return "Neither audio nor video found in segment.";
                }
                if (c.hasVideo && !d.hasVideo) {
                    return ("Only audio found in segment when we expected video." + " We can't switch to audio only from a stream that had video." + " To get rid of this message, please add codec information to the manifest.");
                }
                if (!c.hasVideo && d.hasVideo) {
                    return ("Video found in segment when we expected only audio." + " We can't switch to a stream with video from an audio only stream." + " To get rid of this message, please add codec information to the manifest.");
                }
                return null;
            };
            var hG = function a(b, c, d) {
                var e = c - gu.BACK_BUFFER_LENGTH;
                if (b.length) {
                    e = Math.max(e, b.start(0));
                }
                var f = c - d;
                return Math.min(f, e);
            };
            var hH = function a(b) {
                var c = b.startOfSegment, d = b.duration, e = b.segment, f = b.part, g = b.playlist, h = g.mediaSequence, i = g.id, j = g.segments, k = j === void 0 ? [] : j, l = b.mediaIndex, m = b.partIndex, n = b.timeline;
                var o = k.length - 1;
                var p = "mediaIndex/partIndex increment";
                if (b.getMediaInfoForTime) {
                    p = "getMediaInfoForTime (" + b.getMediaInfoForTime + ")";
                } else if (b.isSyncRequest) {
                    p = "getSyncSegmentCandidate (isSyncRequest)";
                }
                if (b.independent) {
                    p += " with independent " + b.independent;
                }
                var q = typeof m === "number";
                var r = b.segment.uri ? "segment" : "pre-segment";
                var s = q ? fg({
                    preloadSegment: e
                }) - 1 : 0;
                return (r + " [" + (h + l) + "/" + (h + o) + "]" + (q ? " part [" + m + "/" + s + "]" : "") + (" segment start/end [" + e.start + " => " + e.end + "]") + (q ? " part start/end [" + f.start + " => " + f.end + "]" : "") + (" startOfSegment [" + c + "]") + (" duration [" + d + "]") + (" timeline [" + n + "]") + (" selected by [" + p + "]") + (" playlist [" + i + "]"));
            };
            var hI = function a(b) {
                return b + "TimingInfo";
            };
            var hJ = function a(b) {
                var c = b.segmentTimeline, d = b.currentTimeline, e = b.startOfSegment, f = b.buffered, g = b.overrideCheck;
                if (!g && c === d) {
                    return null;
                }
                if (c < d) {
                    return e;
                }
                return f.length ? f.end(f.length - 1) : e;
            };
            var hK = function a(b) {
                var c = b.timelineChangeController, d = b.currentTimeline, e = b.segmentTimeline, f = b.loaderType, g = b.audioDisabled;
                if (d === e) {
                    return false;
                }
                if (f === "audio") {
                    var h = c.lastTimelineChange({
                        type: "main"
                    });
                    return (!h || h.to !== e);
                }
                if (f === "main" && g) {
                    var i = c.pendingTimelineChange({
                        type: "audio"
                    });
                    if (i && i.to === e) {
                        return false;
                    }
                    return true;
                }
                return false;
            };
            var hL = function a(b, c) {
                var d = b && typeof b.start === "number" && typeof b.end === "number" ? b.end - b.start : 0;
                var e = c && typeof c.start === "number" && typeof c.end === "number" ? c.end - c.start : 0;
                return Math.max(d, e);
            };
            var hM = function a(b) {
                var c = b.segmentDuration, d = b.maxDuration;
                if (!c) {
                    return false;
                }
                return (Math.round(c) > d + e_);
            };
            var hN = function a(b, c) {
                if (c !== "hls") {
                    return null;
                }
                var d = hL(b.audioTimingInfo, b.videoTimingInfo);
                if (!d) {
                    return null;
                }
                var e = b.playlist.targetDuration;
                var f = hM({
                    segmentDuration: d,
                    maxDuration: e * 2
                });
                var g = hM({
                    segmentDuration: d,
                    maxDuration: e
                });
                var h = "Segment with index " + b.mediaIndex + " " + ("from playlist " + b.playlist.id + " ") + ("has a duration of " + d + " ") + ("when the reported duration is " + b.duration + " ") + ("and the target duration is " + e + ". ") + "For HLS content, a duration in excess of the target duration may result in " + "playback issues. See the HLS specification section on EXT-X-TARGETDURATION for " + "more details: " + "https://tools.ietf.org/html/draft-pantos-http-live-streaming-23#section-4.3.3.1";
                if (f || g) {
                    return {
                        severity: f ? "warn" : "info",
                        message: h
                    };
                }
                return null;
            };
            var hO = (function(a) {
                (0, j.Z)(b, a);
                function b(b, c) {
                    var d;
                    d = a.call(this) || this;
                    if (!b) {
                        throw new TypeError("Initialization settings are required");
                    }
                    if (typeof b.currentTime !== "function") {
                        throw new TypeError("No currentTime getter specified");
                    }
                    if (!b.mediaSource) {
                        throw new TypeError("No MediaSource specified");
                    }
                    d.bandwidth = b.bandwidth;
                    d.throughput = {
                        rate: 0,
                        count: 0
                    };
                    d.roundTrip = NaN;
                    d.resetStats_();
                    d.mediaIndex = null;
                    d.partIndex = null;
                    d.hasPlayed_ = b.hasPlayed;
                    d.currentTime_ = b.currentTime;
                    d.seekable_ = b.seekable;
                    d.seeking_ = b.seeking;
                    d.duration_ = b.duration;
                    d.mediaSource_ = b.mediaSource;
                    d.vhs_ = b.vhs;
                    d.loaderType_ = b.loaderType;
                    d.currentMediaInfo_ = void 0;
                    d.startingMediaInfo_ = void 0;
                    d.segmentMetadataTrack_ = b.segmentMetadataTrack;
                    d.goalBufferLength_ = b.goalBufferLength;
                    d.sourceType_ = b.sourceType;
                    d.sourceUpdater_ = b.sourceUpdater;
                    d.inbandTextTracks_ = b.inbandTextTracks;
                    d.state_ = "INIT";
                    d.timelineChangeController_ = b.timelineChangeController;
                    d.shouldSaveSegmentTimingInfo_ = true;
                    d.parse708captions_ = b.parse708captions;
                    d.captionServices_ = b.captionServices;
                    d.experimentalExactManifestTimings = b.experimentalExactManifestTimings;
                    d.checkBufferTimeout_ = null;
                    d.error_ = void 0;
                    d.currentTimeline_ = -1;
                    d.pendingSegment_ = null;
                    d.xhrOptions_ = null;
                    d.pendingSegments_ = [];
                    d.audioDisabled_ = false;
                    d.isPendingTimestampOffset_ = false;
                    d.gopBuffer_ = [];
                    d.timeMapping_ = 0;
                    d.safeAppend_ = eV.browser.IE_VERSION >= 11;
                    d.appendInitSegment_ = {
                        audio: true,
                        video: true
                    };
                    d.playlistOfLastInitSegment_ = {
                        audio: null,
                        video: null
                    };
                    d.callQueue_ = [];
                    d.loadQueue_ = [];
                    d.metadataQueue_ = {
                        id3: [],
                        caption: []
                    };
                    d.waitingOnRemove_ = false;
                    d.quotaExceededErrorRetryTimeout_ = null;
                    d.activeInitSegmentId_ = null;
                    d.initSegments_ = {};
                    d.cacheEncryptionKeys_ = b.cacheEncryptionKeys;
                    d.keyCache_ = {};
                    d.decrypter_ = b.decrypter;
                    d.syncController_ = b.syncController;
                    d.syncPoint_ = {
                        segmentIndex: 0,
                        time: 0
                    };
                    d.transmuxer_ = d.createTransmuxer_();
                    d.triggerSyncInfoUpdate_ = function() {
                        return d.trigger("syncinfoupdate");
                    };
                    d.syncController_.on("syncinfoupdate", d.triggerSyncInfoUpdate_);
                    d.mediaSource_.addEventListener("sourceopen", function() {
                        if (!d.isEndOfStream_()) {
                            d.ended_ = false;
                        }
                    });
                    d.fetchAtBuffer_ = false;
                    d.logger_ = e$("SegmentLoader[" + d.loaderType_ + "]");
                    Object.defineProperty((0, i.Z)(d), "state", {
                        get: function a() {
                            return this.state_;
                        },
                        set: function a(b) {
                            if (b !== this.state_) {
                                this.logger_(this.state_ + " -> " + b);
                                this.state_ = b;
                                this.trigger("statechange");
                            }
                        }
                    });
                    d.sourceUpdater_.on("ready", function() {
                        if (d.hasEnoughInfoToAppend_()) {
                            d.processCallQueue_();
                        }
                    });
                    if (d.loaderType_ === "main") {
                        d.timelineChangeController_.on("pendingtimelinechange", function() {
                            if (d.hasEnoughInfoToAppend_()) {
                                d.processCallQueue_();
                            }
                        });
                    }
                    if (d.loaderType_ === "audio") {
                        d.timelineChangeController_.on("timelinechange", function() {
                            if (d.hasEnoughInfoToLoad_()) {
                                d.processLoadQueue_();
                            }
                            if (d.hasEnoughInfoToAppend_()) {
                                d.processCallQueue_();
                            }
                        });
                    }
                    return d;
                }
                var c = b.prototype;
                c.createTransmuxer_ = function a() {
                    return gO.createTransmuxer({
                        remux: false,
                        alignGopsAtEnd: this.safeAppend_,
                        keepOriginalTimestamps: true,
                        parse708captions: this.parse708captions_,
                        captionServices: this.captionServices_
                    });
                };
                c.resetStats_ = function a() {
                    this.mediaBytesTransferred = 0;
                    this.mediaRequests = 0;
                    this.mediaRequestsAborted = 0;
                    this.mediaRequestsTimedout = 0;
                    this.mediaRequestsErrored = 0;
                    this.mediaTransferDuration = 0;
                    this.mediaSecondsLoaded = 0;
                    this.mediaAppends = 0;
                };
                c.dispose = function a() {
                    this.trigger("dispose");
                    this.state = "DISPOSED";
                    this.pause();
                    this.abort_();
                    if (this.transmuxer_) {
                        this.transmuxer_.terminate();
                    }
                    this.resetStats_();
                    if (this.checkBufferTimeout_) {
                        e().clearTimeout(this.checkBufferTimeout_);
                    }
                    if (this.syncController_ && this.triggerSyncInfoUpdate_) {
                        this.syncController_.off("syncinfoupdate", this.triggerSyncInfoUpdate_);
                    }
                    this.off();
                };
                c.setAudio = function a(b) {
                    this.audioDisabled_ = !b;
                    if (b) {
                        this.appendInitSegment_.audio = true;
                    } else {
                        this.sourceUpdater_.removeAudio(0, this.duration_());
                    }
                };
                c.abort = function a() {
                    if (this.state !== "WAITING") {
                        if (this.pendingSegment_) {
                            this.pendingSegment_ = null;
                        }
                        return;
                    }
                    this.abort_();
                    this.state = "READY";
                    if (!this.paused()) {
                        this.monitorBuffer_();
                    }
                };
                c.abort_ = function a() {
                    if (this.pendingSegment_ && this.pendingSegment_.abortRequests) {
                        this.pendingSegment_.abortRequests();
                    }
                    this.pendingSegment_ = null;
                    this.callQueue_ = [];
                    this.loadQueue_ = [];
                    this.metadataQueue_.id3 = [];
                    this.metadataQueue_.caption = [];
                    this.timelineChangeController_.clearPendingTimelineChange(this.loaderType_);
                    this.waitingOnRemove_ = false;
                    e().clearTimeout(this.quotaExceededErrorRetryTimeout_);
                    this.quotaExceededErrorRetryTimeout_ = null;
                };
                c.checkForAbort_ = function a(b) {
                    if (this.state === "APPENDING" && !this.pendingSegment_) {
                        this.state = "READY";
                        return true;
                    }
                    if (!this.pendingSegment_ || this.pendingSegment_.requestId !== b) {
                        return true;
                    }
                    return false;
                };
                c.error = function a(b) {
                    if (typeof b !== "undefined") {
                        this.logger_("error occurred:", b);
                        this.error_ = b;
                    }
                    this.pendingSegment_ = null;
                    return this.error_;
                };
                c.endOfStream = function a() {
                    this.ended_ = true;
                    if (this.transmuxer_) {
                        gO.reset(this.transmuxer_);
                    }
                    this.gopBuffer_.length = 0;
                    this.pause();
                    this.trigger("ended");
                };
                c.buffered_ = function a() {
                    var b = this.getMediaInfo_();
                    if (!this.sourceUpdater_ || !b) {
                        return eV.createTimeRanges();
                    }
                    if (this.loaderType_ === "main") {
                        var c = b.hasAudio, d = b.hasVideo, e = b.isMuxed;
                        if (d && c && !this.audioDisabled_ && !e) {
                            return this.sourceUpdater_.buffered();
                        }
                        if (d) {
                            return this.sourceUpdater_.videoBuffered();
                        }
                    }
                    return this.sourceUpdater_.audioBuffered();
                };
                c.initSegmentForMap = function a(b, c) {
                    if (c === void 0) {
                        c = false;
                    }
                    if (!b) {
                        return null;
                    }
                    var d = f4(b);
                    var e = this.initSegments_[d];
                    if (c && !e && b.bytes) {
                        this.initSegments_[d] = e = {
                            resolvedUri: b.resolvedUri,
                            byterange: b.byterange,
                            bytes: b.bytes,
                            tracks: b.tracks,
                            timescales: b.timescales
                        };
                    }
                    return e || b;
                };
                c.segmentKey = function a(b, c) {
                    if (c === void 0) {
                        c = false;
                    }
                    if (!b) {
                        return null;
                    }
                    var d = f5(b);
                    var e = this.keyCache_[d];
                    if (this.cacheEncryptionKeys_ && c && !e && b.bytes) {
                        this.keyCache_[d] = e = {
                            resolvedUri: b.resolvedUri,
                            bytes: b.bytes
                        };
                    }
                    var f = {
                        resolvedUri: (e || b).resolvedUri
                    };
                    if (e) {
                        f.bytes = e.bytes;
                    }
                    return f;
                };
                c.couldBeginLoading_ = function a() {
                    return this.playlist_ && !this.paused();
                };
                c.load = function a() {
                    this.monitorBuffer_();
                    if (!this.playlist_) {
                        return;
                    }
                    if (this.state === "INIT" && this.couldBeginLoading_()) {
                        return this.init_();
                    }
                    if (!this.couldBeginLoading_() || (this.state !== "READY" && this.state !== "INIT")) {
                        return;
                    }
                    this.state = "READY";
                };
                c.init_ = function a() {
                    this.state = "READY";
                    this.resetEverything();
                    return this.monitorBuffer_();
                };
                c.playlist = function a(b, c) {
                    if (c === void 0) {
                        c = {};
                    }
                    if (!b) {
                        return;
                    }
                    var d = this.playlist_;
                    var e = this.pendingSegment_;
                    this.playlist_ = b;
                    this.xhrOptions_ = c;
                    if (this.state === "INIT") {
                        b.syncInfo = {
                            mediaSequence: b.mediaSequence,
                            time: 0
                        };
                        if (this.loaderType_ === "main") {
                            this.syncController_.setDateTimeMappingForStart(b);
                        }
                    }
                    var f = null;
                    if (d) {
                        if (d.id) {
                            f = d.id;
                        } else if (d.uri) {
                            f = d.uri;
                        }
                    }
                    this.logger_("playlist update [" + f + " => " + (b.id || b.uri) + "]");
                    this.trigger("syncinfoupdate");
                    if (this.state === "INIT" && this.couldBeginLoading_()) {
                        return this.init_();
                    }
                    if (!d || d.uri !== b.uri) {
                        if (this.mediaIndex !== null) {
                            if (!b.endList) {
                                this.resetLoader();
                            } else {
                                this.resyncLoader();
                            }
                        }
                        this.currentMediaInfo_ = void 0;
                        this.trigger("playlistupdate");
                        return;
                    }
                    var g = b.mediaSequence - d.mediaSequence;
                    this.logger_("live window shift [" + g + "]");
                    if (this.mediaIndex !== null) {
                        this.mediaIndex -= g;
                        if (this.mediaIndex < 0) {
                            this.mediaIndex = null;
                            this.partIndex = null;
                        } else {
                            var h = this.playlist_.segments[this.mediaIndex];
                            if (this.partIndex && (!h.parts || !h.parts.length || !h.parts[this.partIndex])) {
                                var i = this.mediaIndex;
                                this.logger_("currently processing part (index " + this.partIndex + ") no longer exists.");
                                this.resetLoader();
                                this.mediaIndex = i;
                            }
                        }
                    }
                    if (e) {
                        e.mediaIndex -= g;
                        if (e.mediaIndex < 0) {
                            e.mediaIndex = null;
                            e.partIndex = null;
                        } else {
                            if (e.mediaIndex >= 0) {
                                e.segment = b.segments[e.mediaIndex];
                            }
                            if (e.partIndex >= 0 && e.segment.parts) {
                                e.part = e.segment.parts[e.partIndex];
                            }
                        }
                    }
                    this.syncController_.saveExpiredSegmentInfo(d, b);
                };
                c.pause = function a() {
                    if (this.checkBufferTimeout_) {
                        e().clearTimeout(this.checkBufferTimeout_);
                        this.checkBufferTimeout_ = null;
                    }
                };
                c.paused = function a() {
                    return this.checkBufferTimeout_ === null;
                };
                c.resetEverything = function a(b) {
                    this.ended_ = false;
                    this.appendInitSegment_ = {
                        audio: true,
                        video: true
                    };
                    this.resetLoader();
                    this.remove(0, Infinity, b);
                    if (this.transmuxer_) {
                        this.transmuxer_.postMessage({
                            action: "clearAllMp4Captions"
                        });
                        this.transmuxer_.postMessage({
                            action: "reset"
                        });
                    }
                };
                c.resetLoader = function a() {
                    this.fetchAtBuffer_ = false;
                    this.resyncLoader();
                };
                c.resyncLoader = function a() {
                    if (this.transmuxer_) {
                        gO.reset(this.transmuxer_);
                    }
                    this.mediaIndex = null;
                    this.partIndex = null;
                    this.syncPoint_ = null;
                    this.isPendingTimestampOffset_ = false;
                    this.callQueue_ = [];
                    this.loadQueue_ = [];
                    this.metadataQueue_.id3 = [];
                    this.metadataQueue_.caption = [];
                    this.abort();
                    if (this.transmuxer_) {
                        this.transmuxer_.postMessage({
                            action: "clearParsedMp4Captions"
                        });
                    }
                };
                c.remove = function a(b, c, d, e) {
                    if (d === void 0) {
                        d = function a() {};
                    }
                    if (e === void 0) {
                        e = false;
                    }
                    if (c === Infinity) {
                        c = this.duration_();
                    }
                    if (c <= b) {
                        this.logger_("skipping remove because end ${end} is <= start ${start}");
                        return;
                    }
                    if (!this.sourceUpdater_ || !this.getMediaInfo_()) {
                        this.logger_("skipping remove because no source updater or starting media info");
                        return;
                    }
                    var f = 1;
                    var g = function a() {
                        f--;
                        if (f === 0) {
                            d();
                        }
                    };
                    if (e || !this.audioDisabled_) {
                        f++;
                        this.sourceUpdater_.removeAudio(b, c, g);
                    }
                    if (e || this.loaderType_ === "main") {
                        this.gopBuffer_ = hx(this.gopBuffer_, b, c, this.timeMapping_);
                        f++;
                        this.sourceUpdater_.removeVideo(b, c, g);
                    }
                    for(var h in this.inbandTextTracks_){
                        ht(b, c, this.inbandTextTracks_[h]);
                    }
                    ht(b, c, this.segmentMetadataTrack_);
                    g();
                };
                c.monitorBuffer_ = function a() {
                    if (this.checkBufferTimeout_) {
                        e().clearTimeout(this.checkBufferTimeout_);
                    }
                    this.checkBufferTimeout_ = e().setTimeout(this.monitorBufferTick_.bind(this), 1);
                };
                c.monitorBufferTick_ = function a() {
                    if (this.state === "READY") {
                        this.fillBuffer_();
                    }
                    if (this.checkBufferTimeout_) {
                        e().clearTimeout(this.checkBufferTimeout_);
                    }
                    this.checkBufferTimeout_ = e().setTimeout(this.monitorBufferTick_.bind(this), hC);
                };
                c.fillBuffer_ = function a() {
                    if (this.sourceUpdater_.updating()) {
                        return;
                    }
                    var b = this.chooseNextRequest_();
                    if (!b) {
                        return;
                    }
                    if (typeof b.timestampOffset === "number") {
                        this.isPendingTimestampOffset_ = false;
                        this.timelineChangeController_.pendingTimelineChange({
                            type: this.loaderType_,
                            from: this.currentTimeline_,
                            to: b.timeline
                        });
                    }
                    this.loadSegment_(b);
                };
                c.isEndOfStream_ = function a(b, c, d) {
                    if (b === void 0) {
                        b = this.mediaIndex;
                    }
                    if (c === void 0) {
                        c = this.playlist_;
                    }
                    if (d === void 0) {
                        d = this.partIndex;
                    }
                    if (!c || !this.mediaSource_) {
                        return false;
                    }
                    var e = typeof b === "number" && c.segments[b];
                    var f = b + 1 === c.segments.length;
                    var g = !e || !e.parts || d + 1 === e.parts.length;
                    return (c.endList && this.mediaSource_.readyState === "open" && f && g);
                };
                c.chooseNextRequest_ = function a() {
                    var b = this.buffered_();
                    var c = fa(b) || 0;
                    var d = fb(b, this.currentTime_());
                    var e = !this.hasPlayed_() && d >= 1;
                    var f = d >= this.goalBufferLength_();
                    var g = this.playlist_.segments;
                    if (!g.length || e || f) {
                        return null;
                    }
                    this.syncPoint_ = this.syncPoint_ || this.syncController_.getSyncPoint(this.playlist_, this.duration_(), this.currentTimeline_, this.currentTime_());
                    var h = {
                        partIndex: null,
                        mediaIndex: null,
                        startOfSegment: null,
                        playlist: this.playlist_,
                        isSyncRequest: Boolean(!this.syncPoint_)
                    };
                    if (h.isSyncRequest) {
                        h.mediaIndex = hA(this.currentTimeline_, g, c);
                    } else if (this.mediaIndex !== null) {
                        var i = g[this.mediaIndex];
                        var j = typeof this.partIndex === "number" ? this.partIndex : -1;
                        h.startOfSegment = i.end ? i.end : c;
                        if (i.parts && i.parts[j + 1]) {
                            h.mediaIndex = this.mediaIndex;
                            h.partIndex = j + 1;
                        } else {
                            h.mediaIndex = this.mediaIndex + 1;
                        }
                    } else {
                        var k = fB.getMediaInfoForTime({
                            experimentalExactManifestTimings: this.experimentalExactManifestTimings,
                            playlist: this.playlist_,
                            currentTime: this.fetchAtBuffer_ ? c : this.currentTime_(),
                            startingPartIndex: this.syncPoint_.partIndex,
                            startingSegmentIndex: this.syncPoint_.segmentIndex,
                            startTime: this.syncPoint_.time
                        }), l = k.segmentIndex, m = k.startTime, n = k.partIndex;
                        h.getMediaInfoForTime = this.fetchAtBuffer_ ? "bufferedEnd " + c : "currentTime " + this.currentTime_();
                        h.mediaIndex = l;
                        h.startOfSegment = m;
                        h.partIndex = n;
                    }
                    var o = g[h.mediaIndex];
                    var p = o && typeof h.partIndex === "number" && o.parts && o.parts[h.partIndex];
                    if (!o || (typeof h.partIndex === "number" && !p)) {
                        return null;
                    }
                    if (typeof h.partIndex !== "number" && o.parts) {
                        h.partIndex = 0;
                        p = o.parts[0];
                    }
                    if (!d && p && !p.independent) {
                        if (h.partIndex === 0) {
                            var q = g[h.mediaIndex - 1];
                            var r = q.parts && q.parts.length && q.parts[q.parts.length - 1];
                            if (r && r.independent) {
                                h.mediaIndex -= 1;
                                h.partIndex = q.parts.length - 1;
                                h.independent = "previous segment";
                            }
                        } else if (o.parts[h.partIndex - 1].independent) {
                            h.partIndex -= 1;
                            h.independent = "previous part";
                        }
                    }
                    var s = this.mediaSource_ && this.mediaSource_.readyState === "ended";
                    if (h.mediaIndex >= g.length - 1 && s && !this.seeking_()) {
                        return null;
                    }
                    return this.generateSegmentInfo_(h);
                };
                c.generateSegmentInfo_ = function a(b) {
                    var c = b.independent, d = b.playlist, e = b.mediaIndex, f = b.startOfSegment, g = b.isSyncRequest, h = b.partIndex, i = b.forceTimestampOffset, j = b.getMediaInfoForTime;
                    var k = d.segments[e];
                    var l = typeof h === "number" && k.parts[h];
                    var m = {
                        requestId: "segment-loader-" + Math.random(),
                        uri: (l && l.resolvedUri) || k.resolvedUri,
                        mediaIndex: e,
                        partIndex: l ? h : null,
                        isSyncRequest: g,
                        startOfSegment: f,
                        playlist: d,
                        bytes: null,
                        encryptedBytes: null,
                        timestampOffset: null,
                        timeline: k.timeline,
                        duration: (l && l.duration) || k.duration,
                        segment: k,
                        part: l,
                        byteLength: 0,
                        transmuxer: this.transmuxer_,
                        getMediaInfoForTime: j,
                        independent: c
                    };
                    var n = typeof i !== "undefined" ? i : this.isPendingTimestampOffset_;
                    m.timestampOffset = this.timestampOffsetForSegment_({
                        segmentTimeline: k.timeline,
                        currentTimeline: this.currentTimeline_,
                        startOfSegment: f,
                        buffered: this.buffered_(),
                        overrideCheck: n
                    });
                    var o = fa(this.sourceUpdater_.audioBuffered());
                    if (typeof o === "number") {
                        m.audioAppendStart = o - this.sourceUpdater_.audioTimestampOffset();
                    }
                    if (this.sourceUpdater_.videoBuffered().length) {
                        m.gopsToAlignWith = hv(this.gopBuffer_, this.currentTime_() - this.sourceUpdater_.videoTimestampOffset(), this.timeMapping_);
                    }
                    return m;
                };
                c.timestampOffsetForSegment_ = function a(b) {
                    return hJ(b);
                };
                c.earlyAbortWhenNeeded_ = function a(b) {
                    if (this.vhs_.tech_.paused() || !this.xhrOptions_.timeout || !this.playlist_.attributes.BANDWIDTH) {
                        return;
                    }
                    if (Date.now() - (b.firstBytesReceivedAt || Date.now()) < 1000) {
                        return;
                    }
                    var c = this.currentTime_();
                    var d = b.bandwidth;
                    var e = this.pendingSegment_.duration;
                    var f = fB.estimateSegmentRequestTime(e, d, this.playlist_, b.bytesReceived);
                    var g = e7(this.buffered_(), c, this.vhs_.tech_.playbackRate()) - 1;
                    if (f <= g) {
                        return;
                    }
                    var h = hl({
                        master: this.vhs_.playlists.master,
                        currentTime: c,
                        bandwidth: d,
                        duration: this.duration_(),
                        segmentDuration: e,
                        timeUntilRebuffer: g,
                        currentTimeline: this.currentTimeline_,
                        syncController: this.syncController_
                    });
                    if (!h) {
                        return;
                    }
                    var i = f - g;
                    var j = i - h.rebufferingImpact;
                    var k = 0.5;
                    if (g <= e_) {
                        k = 1;
                    }
                    if (!h.playlist || h.playlist.uri === this.playlist_.uri || j < k) {
                        return;
                    }
                    this.bandwidth = h.playlist.attributes.BANDWIDTH * gu.BANDWIDTH_VARIANCE + 1;
                    this.trigger("earlyabort");
                };
                c.handleAbort_ = function a(b) {
                    this.logger_("Aborting " + hH(b));
                    this.mediaRequestsAborted += 1;
                };
                c.handleProgress_ = function a(b, c) {
                    this.earlyAbortWhenNeeded_(c.stats);
                    if (this.checkForAbort_(c.requestId)) {
                        return;
                    }
                    this.trigger("progress");
                };
                c.handleTrackInfo_ = function a(b, c) {
                    this.earlyAbortWhenNeeded_(b.stats);
                    if (this.checkForAbort_(b.requestId)) {
                        return;
                    }
                    if (this.checkForIllegalMediaSwitch(c)) {
                        return;
                    }
                    c = c || {};
                    if (!hy(this.currentMediaInfo_, c)) {
                        this.appendInitSegment_ = {
                            audio: true,
                            video: true
                        };
                        this.startingMediaInfo_ = c;
                        this.currentMediaInfo_ = c;
                        this.logger_("trackinfo update", c);
                        this.trigger("trackinfo");
                    }
                    if (this.checkForAbort_(b.requestId)) {
                        return;
                    }
                    this.pendingSegment_.trackInfo = c;
                    if (this.hasEnoughInfoToAppend_()) {
                        this.processCallQueue_();
                    }
                };
                c.handleTimingInfo_ = function a(b, c, d, e) {
                    this.earlyAbortWhenNeeded_(b.stats);
                    if (this.checkForAbort_(b.requestId)) {
                        return;
                    }
                    var f = this.pendingSegment_;
                    var g = hI(c);
                    f[g] = f[g] || {};
                    f[g][d] = e;
                    this.logger_("timinginfo: " + c + " - " + d + " - " + e);
                    if (this.hasEnoughInfoToAppend_()) {
                        this.processCallQueue_();
                    }
                };
                c.handleCaptions_ = function a(b, c) {
                    var d = this;
                    this.earlyAbortWhenNeeded_(b.stats);
                    if (this.checkForAbort_(b.requestId)) {
                        return;
                    }
                    if (c.length === 0) {
                        this.logger_("SegmentLoader received no captions from a caption event");
                        return;
                    }
                    var e = this.pendingSegment_;
                    if (!e.hasAppendedData_) {
                        this.metadataQueue_.caption.push(this.handleCaptions_.bind(this, b, c));
                        return;
                    }
                    var f = this.sourceUpdater_.videoTimestampOffset() === null ? this.sourceUpdater_.audioTimestampOffset() : this.sourceUpdater_.videoTimestampOffset();
                    var g = {};
                    c.forEach(function(a) {
                        g[a.stream] = g[a.stream] || {
                            startTime: Infinity,
                            captions: [],
                            endTime: 0
                        };
                        var b = g[a.stream];
                        b.startTime = Math.min(b.startTime, a.startTime + f);
                        b.endTime = Math.max(b.endTime, a.endTime + f);
                        b.captions.push(a);
                    });
                    Object.keys(g).forEach(function(a) {
                        var b = g[a], c = b.startTime, e = b.endTime, h = b.captions;
                        var i = d.inbandTextTracks_;
                        d.logger_("adding cues from " + c + " -> " + e + " for " + a);
                        ho(i, d.vhs_.tech_, a);
                        ht(c, e, i[a]);
                        hp({
                            captionArray: h,
                            inbandTextTracks: i,
                            timestampOffset: f
                        });
                    });
                    if (this.transmuxer_) {
                        this.transmuxer_.postMessage({
                            action: "clearParsedMp4Captions"
                        });
                    }
                };
                c.handleId3_ = function a(b, c, d) {
                    this.earlyAbortWhenNeeded_(b.stats);
                    if (this.checkForAbort_(b.requestId)) {
                        return;
                    }
                    var e = this.pendingSegment_;
                    if (!e.hasAppendedData_) {
                        this.metadataQueue_.id3.push(this.handleId3_.bind(this, b, c, d));
                        return;
                    }
                    var f = this.sourceUpdater_.videoTimestampOffset() === null ? this.sourceUpdater_.audioTimestampOffset() : this.sourceUpdater_.videoTimestampOffset();
                    hs(this.inbandTextTracks_, d, this.vhs_.tech_);
                    hr({
                        inbandTextTracks: this.inbandTextTracks_,
                        metadataArray: c,
                        timestampOffset: f,
                        videoDuration: this.duration_()
                    });
                };
                c.processMetadataQueue_ = function a() {
                    this.metadataQueue_.id3.forEach(function(a) {
                        return a();
                    });
                    this.metadataQueue_.caption.forEach(function(a) {
                        return a();
                    });
                    this.metadataQueue_.id3 = [];
                    this.metadataQueue_.caption = [];
                };
                c.processCallQueue_ = function a() {
                    var b = this.callQueue_;
                    this.callQueue_ = [];
                    b.forEach(function(a) {
                        return a();
                    });
                };
                c.processLoadQueue_ = function a() {
                    var b = this.loadQueue_;
                    this.loadQueue_ = [];
                    b.forEach(function(a) {
                        return a();
                    });
                };
                c.hasEnoughInfoToLoad_ = function a() {
                    if (this.loaderType_ !== "audio") {
                        return true;
                    }
                    var b = this.pendingSegment_;
                    if (!b) {
                        return false;
                    }
                    if (!this.getCurrentMediaInfo_()) {
                        return true;
                    }
                    if (hK({
                        timelineChangeController: this.timelineChangeController_,
                        currentTimeline: this.currentTimeline_,
                        segmentTimeline: b.timeline,
                        loaderType: this.loaderType_,
                        audioDisabled: this.audioDisabled_
                    })) {
                        return false;
                    }
                    return true;
                };
                c.getCurrentMediaInfo_ = function a(b) {
                    if (b === void 0) {
                        b = this.pendingSegment_;
                    }
                    return ((b && b.trackInfo) || this.currentMediaInfo_);
                };
                c.getMediaInfo_ = function a(b) {
                    if (b === void 0) {
                        b = this.pendingSegment_;
                    }
                    return (this.getCurrentMediaInfo_(b) || this.startingMediaInfo_);
                };
                c.hasEnoughInfoToAppend_ = function a() {
                    if (!this.sourceUpdater_.ready()) {
                        return false;
                    }
                    if (this.waitingOnRemove_ || this.quotaExceededErrorRetryTimeout_) {
                        return false;
                    }
                    var b = this.pendingSegment_;
                    var c = this.getCurrentMediaInfo_();
                    if (!b || !c) {
                        return false;
                    }
                    var d = c.hasAudio, e = c.hasVideo, f = c.isMuxed;
                    if (e && !b.videoTimingInfo) {
                        return false;
                    }
                    if (d && !this.audioDisabled_ && !f && !b.audioTimingInfo) {
                        return false;
                    }
                    if (hK({
                        timelineChangeController: this.timelineChangeController_,
                        currentTimeline: this.currentTimeline_,
                        segmentTimeline: b.timeline,
                        loaderType: this.loaderType_,
                        audioDisabled: this.audioDisabled_
                    })) {
                        return false;
                    }
                    return true;
                };
                c.handleData_ = function a(b, c) {
                    this.earlyAbortWhenNeeded_(b.stats);
                    if (this.checkForAbort_(b.requestId)) {
                        return;
                    }
                    if (this.callQueue_.length || !this.hasEnoughInfoToAppend_()) {
                        this.callQueue_.push(this.handleData_.bind(this, b, c));
                        return;
                    }
                    var d = this.pendingSegment_;
                    this.setTimeMapping_(d.timeline);
                    this.updateMediaSecondsLoaded_(d.part || d.segment);
                    if (this.mediaSource_.readyState === "closed") {
                        return;
                    }
                    if (b.map) {
                        b.map = this.initSegmentForMap(b.map, true);
                        d.segment.map = b.map;
                    }
                    if (b.key) {
                        this.segmentKey(b.key, true);
                    }
                    d.isFmp4 = b.isFmp4;
                    d.timingInfo = d.timingInfo || {};
                    if (d.isFmp4) {
                        this.trigger("fmp4");
                        d.timingInfo.start = d[hI(c.type)].start;
                    } else {
                        var e = this.getCurrentMediaInfo_();
                        var f = this.loaderType_ === "main" && e && e.hasVideo;
                        var g;
                        if (f) {
                            g = d.videoTimingInfo.start;
                        }
                        d.timingInfo.start = this.trueSegmentStart_({
                            currentStart: d.timingInfo.start,
                            playlist: d.playlist,
                            mediaIndex: d.mediaIndex,
                            currentVideoTimestampOffset: this.sourceUpdater_.videoTimestampOffset(),
                            useVideoTimingInfo: f,
                            firstVideoFrameTimeForData: g,
                            videoTimingInfo: d.videoTimingInfo,
                            audioTimingInfo: d.audioTimingInfo
                        });
                    }
                    this.updateAppendInitSegmentStatus(d, c.type);
                    this.updateSourceBufferTimestampOffset_(d);
                    if (d.isSyncRequest) {
                        this.updateTimingInfoEnd_(d);
                        this.syncController_.saveSegmentTimingInfo({
                            segmentInfo: d,
                            shouldSaveTimelineMapping: this.loaderType_ === "main"
                        });
                        var h = this.chooseNextRequest_();
                        if (h.mediaIndex !== d.mediaIndex || h.partIndex !== d.partIndex) {
                            this.logger_("sync segment was incorrect, not appending");
                            return;
                        }
                        this.logger_("sync segment was correct, appending");
                    }
                    d.hasAppendedData_ = true;
                    this.processMetadataQueue_();
                    this.appendData_(d, c);
                };
                c.updateAppendInitSegmentStatus = function a(b, c) {
                    if (this.loaderType_ === "main" && typeof b.timestampOffset === "number" && !b.changedTimestampOffset) {
                        this.appendInitSegment_ = {
                            audio: true,
                            video: true
                        };
                    }
                    if (this.playlistOfLastInitSegment_[c] !== b.playlist) {
                        this.appendInitSegment_[c] = true;
                    }
                };
                c.getInitSegmentAndUpdateState_ = function a(b) {
                    var c = b.type, d = b.initSegment, e = b.map, f = b.playlist;
                    if (e) {
                        var g = f4(e);
                        if (this.activeInitSegmentId_ === g) {
                            return null;
                        }
                        d = this.initSegmentForMap(e, true).bytes;
                        this.activeInitSegmentId_ = g;
                    }
                    if (d && this.appendInitSegment_[c]) {
                        this.playlistOfLastInitSegment_[c] = f;
                        this.appendInitSegment_[c] = false;
                        this.activeInitSegmentId_ = null;
                        return d;
                    }
                    return null;
                };
                c.handleQuotaExceededError_ = function a(b, c) {
                    var d = this;
                    var f = b.segmentInfo, g = b.type, h = b.bytes;
                    var i = this.sourceUpdater_.audioBuffered();
                    var j = this.sourceUpdater_.videoBuffered();
                    if (i.length > 1) {
                        this.logger_("On QUOTA_EXCEEDED_ERR, found gaps in the audio buffer: " + e8(i).join(", "));
                    }
                    if (j.length > 1) {
                        this.logger_("On QUOTA_EXCEEDED_ERR, found gaps in the video buffer: " + e8(j).join(", "));
                    }
                    var k = i.length ? i.start(0) : 0;
                    var l = i.length ? i.end(i.length - 1) : 0;
                    var m = j.length ? j.start(0) : 0;
                    var n = j.length ? j.end(j.length - 1) : 0;
                    if (l - k <= hB && n - m <= hB) {
                        this.logger_("On QUOTA_EXCEEDED_ERR, single segment too large to append to " + "buffer, triggering an error. " + ("Appended byte length: " + h.byteLength + ", ") + ("audio buffer: " + e8(i).join(", ") + ", ") + ("video buffer: " + e8(j).join(", ") + ", "));
                        this.error({
                            message: "Quota exceeded error with append of a single segment of content",
                            excludeUntil: Infinity
                        });
                        this.trigger("error");
                        return;
                    }
                    this.waitingOnRemove_ = true;
                    this.callQueue_.push(this.appendToSourceBuffer_.bind(this, {
                        segmentInfo: f,
                        type: g,
                        bytes: h
                    }));
                    var o = this.currentTime_();
                    var p = o - hB;
                    this.logger_("On QUOTA_EXCEEDED_ERR, removing audio/video from 0 to " + p);
                    this.remove(0, p, function() {
                        d.logger_("On QUOTA_EXCEEDED_ERR, retrying append in " + hB + "s");
                        d.waitingOnRemove_ = false;
                        d.quotaExceededErrorRetryTimeout_ = e().setTimeout(function() {
                            d.logger_("On QUOTA_EXCEEDED_ERR, re-processing call queue");
                            d.quotaExceededErrorRetryTimeout_ = null;
                            d.processCallQueue_();
                        }, hB * 1000);
                    }, true);
                };
                c.handleAppendError_ = function a(b, c) {
                    var d = b.segmentInfo, e = b.type, f = b.bytes;
                    if (!c) {
                        return;
                    }
                    if (c.code === hz) {
                        this.handleQuotaExceededError_({
                            segmentInfo: d,
                            type: e,
                            bytes: f
                        });
                        return;
                    }
                    this.logger_("Received non QUOTA_EXCEEDED_ERR on append", c);
                    this.error(e + " append of " + f.length + "b failed for segment " + ("#" + d.mediaIndex + " in playlist " + d.playlist.id));
                    this.trigger("appenderror");
                };
                c.appendToSourceBuffer_ = function a(b) {
                    var c = b.segmentInfo, d = b.type, e = b.initSegment, f = b.data, g = b.bytes;
                    if (!g) {
                        var h = [
                            f
                        ];
                        var i = f.byteLength;
                        if (e) {
                            h.unshift(e);
                            i += e.byteLength;
                        }
                        g = hn({
                            bytes: i,
                            segments: h
                        });
                    }
                    this.sourceUpdater_.appendBuffer({
                        segmentInfo: c,
                        type: d,
                        bytes: g
                    }, this.handleAppendError_.bind(this, {
                        segmentInfo: c,
                        type: d,
                        bytes: g
                    }));
                };
                c.handleSegmentTimingInfo_ = function a(b, c, d) {
                    if (!this.pendingSegment_ || c !== this.pendingSegment_.requestId) {
                        return;
                    }
                    var e = this.pendingSegment_.segment;
                    var f = b + "TimingInfo";
                    if (!e[f]) {
                        e[f] = {};
                    }
                    e[f].transmuxerPrependedSeconds = d.prependedContentDuration || 0;
                    e[f].transmuxedPresentationStart = d.start.presentation;
                    e[f].transmuxedDecodeStart = d.start.decode;
                    e[f].transmuxedPresentationEnd = d.end.presentation;
                    e[f].transmuxedDecodeEnd = d.end.decode;
                    e[f].baseMediaDecodeTime = d.baseMediaDecodeTime;
                };
                c.appendData_ = function a(b, c) {
                    var d = c.type, e = c.data;
                    if (!e || !e.byteLength) {
                        return;
                    }
                    if (d === "audio" && this.audioDisabled_) {
                        return;
                    }
                    var f = this.getInitSegmentAndUpdateState_({
                        type: d,
                        initSegment: c.initSegment,
                        playlist: b.playlist,
                        map: b.isFmp4 ? b.segment.map : null
                    });
                    this.appendToSourceBuffer_({
                        segmentInfo: b,
                        type: d,
                        initSegment: f,
                        data: e
                    });
                };
                c.loadSegment_ = function a(b) {
                    var c = this;
                    this.state = "WAITING";
                    this.pendingSegment_ = b;
                    this.trimBackBuffer_(b);
                    if (typeof b.timestampOffset === "number") {
                        if (this.transmuxer_) {
                            this.transmuxer_.postMessage({
                                action: "clearAllMp4Captions"
                            });
                        }
                    }
                    if (!this.hasEnoughInfoToLoad_()) {
                        this.loadQueue_.push(function() {
                            var a = (0, h.Z)({}, b, {
                                forceTimestampOffset: true
                            });
                            (0, h.Z)(b, c.generateSegmentInfo_(a));
                            c.isPendingTimestampOffset_ = false;
                            c.updateTransmuxerAndRequestSegment_(b);
                        });
                        return;
                    }
                    this.updateTransmuxerAndRequestSegment_(b);
                };
                c.updateTransmuxerAndRequestSegment_ = function a(b) {
                    var c = this;
                    if (this.shouldUpdateTransmuxerTimestampOffset_(b.timestampOffset)) {
                        this.gopBuffer_.length = 0;
                        b.gopsToAlignWith = [];
                        this.timeMapping_ = 0;
                        this.transmuxer_.postMessage({
                            action: "reset"
                        });
                        this.transmuxer_.postMessage({
                            action: "setTimestampOffset",
                            timestampOffset: b.timestampOffset
                        });
                    }
                    var d = this.createSimplifiedSegmentObj_(b);
                    var e = this.isEndOfStream_(b.mediaIndex, b.playlist, b.partIndex);
                    var f = this.mediaIndex !== null;
                    var g = b.timeline !== this.currentTimeline_ && b.timeline > 0;
                    var h = e || (f && g);
                    this.logger_("Requesting " + hH(b));
                    if (d.map && !d.map.bytes) {
                        this.logger_("going to request init segment.");
                        this.appendInitSegment_ = {
                            video: true,
                            audio: true
                        };
                    }
                    b.abortRequests = g4({
                        xhr: this.vhs_.xhr,
                        xhrOptions: this.xhrOptions_,
                        decryptionWorker: this.decrypter_,
                        segment: d,
                        abortFn: this.handleAbort_.bind(this, b),
                        progressFn: this.handleProgress_.bind(this),
                        trackInfoFn: this.handleTrackInfo_.bind(this),
                        timingInfoFn: this.handleTimingInfo_.bind(this),
                        videoSegmentTimingInfoFn: this.handleSegmentTimingInfo_.bind(this, "video", b.requestId),
                        audioSegmentTimingInfoFn: this.handleSegmentTimingInfo_.bind(this, "audio", b.requestId),
                        captionsFn: this.handleCaptions_.bind(this),
                        isEndOfTimeline: h,
                        endedTimelineFn: function a() {
                            c.logger_("received endedtimeline callback");
                        },
                        id3Fn: this.handleId3_.bind(this),
                        dataFn: this.handleData_.bind(this),
                        doneFn: this.segmentRequestFinished_.bind(this),
                        onTransmuxerLog: function a(d) {
                            var e = d.message, f = d.level, g = d.stream;
                            c.logger_(hH(b) + " logged from transmuxer stream " + g + " as a " + f + ": " + e);
                        }
                    });
                };
                c.trimBackBuffer_ = function a(b) {
                    var c = hG(this.seekable_(), this.currentTime_(), this.playlist_.targetDuration || 10);
                    if (c > 0) {
                        this.remove(0, c);
                    }
                };
                c.createSimplifiedSegmentObj_ = function a(b) {
                    var c = b.segment;
                    var d = b.part;
                    var e = {
                        resolvedUri: d ? d.resolvedUri : c.resolvedUri,
                        byterange: d ? d.byterange : c.byterange,
                        requestId: b.requestId,
                        transmuxer: b.transmuxer,
                        audioAppendStart: b.audioAppendStart,
                        gopsToAlignWith: b.gopsToAlignWith,
                        part: b.part
                    };
                    var f = b.playlist.segments[b.mediaIndex - 1];
                    if (f && f.timeline === c.timeline) {
                        if (f.videoTimingInfo) {
                            e.baseStartTime = f.videoTimingInfo.transmuxedDecodeEnd;
                        } else if (f.audioTimingInfo) {
                            e.baseStartTime = f.audioTimingInfo.transmuxedDecodeEnd;
                        }
                    }
                    if (c.key) {
                        var g = c.key.iv || new Uint32Array([
                            0,
                            0,
                            0,
                            b.mediaIndex + b.playlist.mediaSequence, 
                        ]);
                        e.key = this.segmentKey(c.key);
                        e.key.iv = g;
                    }
                    if (c.map) {
                        e.map = this.initSegmentForMap(c.map);
                    }
                    return e;
                };
                c.saveTransferStats_ = function a(b) {
                    this.mediaRequests += 1;
                    if (b) {
                        this.mediaBytesTransferred += b.bytesReceived;
                        this.mediaTransferDuration += b.roundTripTime;
                    }
                };
                c.saveBandwidthRelatedStats_ = function a(b, c) {
                    this.pendingSegment_.byteLength = c.bytesReceived;
                    if (b < hE) {
                        this.logger_("Ignoring segment's bandwidth because its duration of " + b + (" is less than the min to record " + hE));
                        return;
                    }
                    this.bandwidth = c.bandwidth;
                    this.roundTrip = c.roundTripTime;
                };
                c.handleTimeout_ = function a() {
                    this.mediaRequestsTimedout += 1;
                    this.bandwidth = 1;
                    this.roundTrip = NaN;
                    this.trigger("bandwidthupdate");
                };
                c.segmentRequestFinished_ = function a(b, c, d) {
                    if (this.callQueue_.length) {
                        this.callQueue_.push(this.segmentRequestFinished_.bind(this, b, c, d));
                        return;
                    }
                    this.saveTransferStats_(c.stats);
                    if (!this.pendingSegment_) {
                        return;
                    }
                    if (c.requestId !== this.pendingSegment_.requestId) {
                        return;
                    }
                    if (b) {
                        this.pendingSegment_ = null;
                        this.state = "READY";
                        if (b.code === gQ.ABORTED) {
                            return;
                        }
                        this.pause();
                        if (b.code === gQ.TIMEOUT) {
                            this.handleTimeout_();
                            return;
                        }
                        this.mediaRequestsErrored += 1;
                        this.error(b);
                        this.trigger("error");
                        return;
                    }
                    var e = this.pendingSegment_;
                    this.saveBandwidthRelatedStats_(e.duration, c.stats);
                    e.endOfAllRequests = c.endOfAllRequests;
                    if (d.gopInfo) {
                        this.gopBuffer_ = hw(this.gopBuffer_, d.gopInfo, this.safeAppend_);
                    }
                    this.state = "APPENDING";
                    this.trigger("appending");
                    this.waitForAppendsToComplete_(e);
                };
                c.setTimeMapping_ = function a(b) {
                    var c = this.syncController_.mappingForTimeline(b);
                    if (c !== null) {
                        this.timeMapping_ = c;
                    }
                };
                c.updateMediaSecondsLoaded_ = function a(b) {
                    if (typeof b.start === "number" && typeof b.end === "number") {
                        this.mediaSecondsLoaded += b.end - b.start;
                    } else {
                        this.mediaSecondsLoaded += b.duration;
                    }
                };
                c.shouldUpdateTransmuxerTimestampOffset_ = function a(b) {
                    if (b === null) {
                        return false;
                    }
                    if (this.loaderType_ === "main" && b !== this.sourceUpdater_.videoTimestampOffset()) {
                        return true;
                    }
                    if (!this.audioDisabled_ && b !== this.sourceUpdater_.audioTimestampOffset()) {
                        return true;
                    }
                    return false;
                };
                c.trueSegmentStart_ = function a(b) {
                    var c = b.currentStart, d = b.playlist, e = b.mediaIndex, f = b.firstVideoFrameTimeForData, g = b.currentVideoTimestampOffset, h = b.useVideoTimingInfo, i = b.videoTimingInfo, j = b.audioTimingInfo;
                    if (typeof c !== "undefined") {
                        return c;
                    }
                    if (!h) {
                        return j.start;
                    }
                    var k = d.segments[e - 1];
                    if (e === 0 || !k || typeof k.start === "undefined" || k.end !== f + g) {
                        return f;
                    }
                    return i.start;
                };
                c.waitForAppendsToComplete_ = function a(b) {
                    var c = this.getCurrentMediaInfo_(b);
                    if (!c) {
                        this.error({
                            message: "No starting media returned, likely due to an unsupported media format.",
                            blacklistDuration: Infinity
                        });
                        this.trigger("error");
                        return;
                    }
                    var d = c.hasAudio, e = c.hasVideo, f = c.isMuxed;
                    var g = this.loaderType_ === "main" && e;
                    var h = !this.audioDisabled_ && d && !f;
                    b.waitingOnAppends = 0;
                    if (!b.hasAppendedData_) {
                        if (!b.timingInfo && typeof b.timestampOffset === "number") {
                            this.isPendingTimestampOffset_ = true;
                        }
                        b.timingInfo = {
                            start: 0
                        };
                        b.waitingOnAppends++;
                        if (!this.isPendingTimestampOffset_) {
                            this.updateSourceBufferTimestampOffset_(b);
                            this.processMetadataQueue_();
                        }
                        this.checkAppendsDone_(b);
                        return;
                    }
                    if (g) {
                        b.waitingOnAppends++;
                    }
                    if (h) {
                        b.waitingOnAppends++;
                    }
                    if (g) {
                        this.sourceUpdater_.videoQueueCallback(this.checkAppendsDone_.bind(this, b));
                    }
                    if (h) {
                        this.sourceUpdater_.audioQueueCallback(this.checkAppendsDone_.bind(this, b));
                    }
                };
                c.checkAppendsDone_ = function a(b) {
                    if (this.checkForAbort_(b.requestId)) {
                        return;
                    }
                    b.waitingOnAppends--;
                    if (b.waitingOnAppends === 0) {
                        this.handleAppendsDone_();
                    }
                };
                c.checkForIllegalMediaSwitch = function a(b) {
                    var c = hF(this.loaderType_, this.getCurrentMediaInfo_(), b);
                    if (c) {
                        this.error({
                            message: c,
                            blacklistDuration: Infinity
                        });
                        this.trigger("error");
                        return true;
                    }
                    return false;
                };
                c.updateSourceBufferTimestampOffset_ = function a(b) {
                    if (b.timestampOffset === null || typeof b.timingInfo.start !== "number" || b.changedTimestampOffset || this.loaderType_ !== "main") {
                        return;
                    }
                    var c = false;
                    b.timestampOffset -= b.timingInfo.start;
                    b.changedTimestampOffset = true;
                    if (b.timestampOffset !== this.sourceUpdater_.videoTimestampOffset()) {
                        this.sourceUpdater_.videoTimestampOffset(b.timestampOffset);
                        c = true;
                    }
                    if (b.timestampOffset !== this.sourceUpdater_.audioTimestampOffset()) {
                        this.sourceUpdater_.audioTimestampOffset(b.timestampOffset);
                        c = true;
                    }
                    if (c) {
                        this.trigger("timestampoffset");
                    }
                };
                c.updateTimingInfoEnd_ = function a(b) {
                    b.timingInfo = b.timingInfo || {};
                    var c = this.getMediaInfo_();
                    var d = this.loaderType_ === "main" && c && c.hasVideo;
                    var e = d && b.videoTimingInfo ? b.videoTimingInfo : b.audioTimingInfo;
                    if (!e) {
                        return;
                    }
                    b.timingInfo.end = typeof e.end === "number" ? e.end : e.start + b.duration;
                };
                c.handleAppendsDone_ = function a() {
                    if (this.pendingSegment_) {
                        this.trigger("appendsdone");
                    }
                    if (!this.pendingSegment_) {
                        this.state = "READY";
                        if (!this.paused()) {
                            this.monitorBuffer_();
                        }
                        return;
                    }
                    var b = this.pendingSegment_;
                    this.updateTimingInfoEnd_(b);
                    if (this.shouldSaveSegmentTimingInfo_) {
                        this.syncController_.saveSegmentTimingInfo({
                            segmentInfo: b,
                            shouldSaveTimelineMapping: this.loaderType_ === "main"
                        });
                    }
                    var c = hN(b, this.sourceType_);
                    if (c) {
                        if (c.severity === "warn") {
                            eV.log.warn(c.message);
                        } else {
                            this.logger_(c.message);
                        }
                    }
                    this.recordThroughput_(b);
                    this.pendingSegment_ = null;
                    this.state = "READY";
                    if (b.isSyncRequest) {
                        this.trigger("syncinfoupdate");
                        if (!b.hasAppendedData_) {
                            this.logger_("Throwing away un-appended sync request " + hH(b));
                            return;
                        }
                    }
                    this.logger_("Appended " + hH(b));
                    this.addSegmentMetadataCue_(b);
                    this.fetchAtBuffer_ = true;
                    if (this.currentTimeline_ !== b.timeline) {
                        this.timelineChangeController_.lastTimelineChange({
                            type: this.loaderType_,
                            from: this.currentTimeline_,
                            to: b.timeline
                        });
                        if (this.loaderType_ === "main" && !this.audioDisabled_) {
                            this.timelineChangeController_.lastTimelineChange({
                                type: "audio",
                                from: this.currentTimeline_,
                                to: b.timeline
                            });
                        }
                    }
                    this.currentTimeline_ = b.timeline;
                    this.trigger("syncinfoupdate");
                    var d = b.segment;
                    var e = b.part;
                    var f = d.end && this.currentTime_() - d.end > b.playlist.targetDuration * 3;
                    var g = e && e.end && this.currentTime_() - e.end > b.playlist.partTargetDuration * 3;
                    if (f || g) {
                        this.logger_("bad " + (f ? "segment" : "part") + " " + hH(b));
                        this.resetEverything();
                        return;
                    }
                    var h = this.mediaIndex !== null;
                    if (h) {
                        this.trigger("bandwidthupdate");
                    }
                    this.trigger("progress");
                    this.mediaIndex = b.mediaIndex;
                    this.partIndex = b.partIndex;
                    if (this.isEndOfStream_(b.mediaIndex, b.playlist, b.partIndex)) {
                        this.endOfStream();
                    }
                    this.trigger("appended");
                    if (b.hasAppendedData_) {
                        this.mediaAppends++;
                    }
                    if (!this.paused()) {
                        this.monitorBuffer_();
                    }
                };
                c.recordThroughput_ = function a(b) {
                    if (b.duration < hE) {
                        this.logger_("Ignoring segment's throughput because its duration of " + b.duration + (" is less than the min to record " + hE));
                        return;
                    }
                    var c = this.throughput.rate;
                    var d = Date.now() - b.endOfAllRequests + 1;
                    var e = Math.floor((b.byteLength / d) * 8 * 1000);
                    this.throughput.rate += (e - c) / ++this.throughput.count;
                };
                c.addSegmentMetadataCue_ = function a(b) {
                    if (!this.segmentMetadataTrack_) {
                        return;
                    }
                    var c = b.segment;
                    var d = c.start;
                    var f = c.end;
                    if (!hD(d) || !hD(f)) {
                        return;
                    }
                    ht(d, f, this.segmentMetadataTrack_);
                    var g = e().WebKitDataCue || e().VTTCue;
                    var h = {
                        custom: c.custom,
                        dateTimeObject: c.dateTimeObject,
                        dateTimeString: c.dateTimeString,
                        bandwidth: b.playlist.attributes.BANDWIDTH,
                        resolution: b.playlist.attributes.RESOLUTION,
                        codecs: b.playlist.attributes.CODECS,
                        byteLength: b.byteLength,
                        uri: b.uri,
                        timeline: b.timeline,
                        playlist: b.playlist.id,
                        start: d,
                        end: f
                    };
                    var i = JSON.stringify(h);
                    var j = new g(d, f, i);
                    j.value = h;
                    this.segmentMetadataTrack_.addCue(j);
                };
                return b;
            })(eV.EventTarget);
            function hP() {}
            var hQ = function a(b) {
                if (typeof b !== "string") {
                    return b;
                }
                return b.replace(/./, function(a) {
                    return a.toUpperCase();
                });
            };
            var hR = [
                "video",
                "audio"
            ];
            var hS = function a(b, c) {
                var d = c[b + "Buffer"];
                return ((d && d.updating) || c.queuePending[b]);
            };
            var hT = function a(b, c) {
                for(var d = 0; d < c.length; d++){
                    var e = c[d];
                    if (e.type === "mediaSource") {
                        return null;
                    }
                    if (e.type === b) {
                        return d;
                    }
                }
                return null;
            };
            var hU = function a(b, c) {
                if (c.queue.length === 0) {
                    return;
                }
                var d = 0;
                var e = c.queue[d];
                if (e.type === "mediaSource") {
                    if (!c.updating() && c.mediaSource.readyState !== "closed") {
                        c.queue.shift();
                        e.action(c);
                        if (e.doneFn) {
                            e.doneFn();
                        }
                        a("audio", c);
                        a("video", c);
                    }
                    return;
                }
                if (b === "mediaSource") {
                    return;
                }
                if (!c.ready() || c.mediaSource.readyState === "closed" || hS(b, c)) {
                    return;
                }
                if (e.type !== b) {
                    d = hT(b, c.queue);
                    if (d === null) {
                        return;
                    }
                    e = c.queue[d];
                }
                c.queue.splice(d, 1);
                c.queuePending[b] = e;
                e.action(b, c);
                if (!e.doneFn) {
                    c.queuePending[b] = null;
                    a(b, c);
                    return;
                }
            };
            var hV = function a(b, c) {
                var d = c[b + "Buffer"];
                var e = hQ(b);
                if (!d) {
                    return;
                }
                d.removeEventListener("updateend", c["on" + e + "UpdateEnd_"]);
                d.removeEventListener("error", c["on" + e + "Error_"]);
                c.codecs[b] = null;
                c[b + "Buffer"] = null;
            };
            var hW = function a(b, c) {
                return (b && c && Array.prototype.indexOf.call(b.sourceBuffers, c) !== -1);
            };
            var hX = {
                appendBuffer: function a(b, c, d) {
                    return function(a, e) {
                        var f = e[a + "Buffer"];
                        if (!hW(e.mediaSource, f)) {
                            return;
                        }
                        e.logger_("Appending segment " + c.mediaIndex + "'s " + b.length + " bytes to " + a + "Buffer");
                        try {
                            f.appendBuffer(b);
                        } catch (g) {
                            e.logger_("Error with code " + g.code + " " + (g.code === hz ? "(QUOTA_EXCEEDED_ERR) " : "") + ("when appending segment " + c.mediaIndex + " to " + a + "Buffer"));
                            e.queuePending[a] = null;
                            d(g);
                        }
                    };
                },
                remove: function a(b, c) {
                    return function(a, d) {
                        var e = d[a + "Buffer"];
                        if (!hW(d.mediaSource, e)) {
                            return;
                        }
                        d.logger_("Removing " + b + " to " + c + " from " + a + "Buffer");
                        try {
                            e.remove(b, c);
                        } catch (f) {
                            d.logger_("Remove " + b + " to " + c + " from " + a + "Buffer failed");
                        }
                    };
                },
                timestampOffset: function a(b) {
                    return function(a, c) {
                        var d = c[a + "Buffer"];
                        if (!hW(c.mediaSource, d)) {
                            return;
                        }
                        c.logger_("Setting " + a + "timestampOffset to " + b);
                        d.timestampOffset = b;
                    };
                },
                callback: function a(b) {
                    return function(a, c) {
                        b();
                    };
                },
                endOfStream: function a(b) {
                    return function(a) {
                        if (a.mediaSource.readyState !== "open") {
                            return;
                        }
                        a.logger_("Calling mediaSource endOfStream(" + (b || "") + ")");
                        try {
                            a.mediaSource.endOfStream(b);
                        } catch (c) {
                            eV.log.warn("Failed to call media source endOfStream", c);
                        }
                    };
                },
                duration: function a(b) {
                    return function(a) {
                        a.logger_("Setting mediaSource duration to " + b);
                        try {
                            a.mediaSource.duration = b;
                        } catch (c) {
                            eV.log.warn("Failed to set media source duration", c);
                        }
                    };
                },
                abort: function a() {
                    return function(a, b) {
                        if (b.mediaSource.readyState !== "open") {
                            return;
                        }
                        var c = b[a + "Buffer"];
                        if (!hW(b.mediaSource, c)) {
                            return;
                        }
                        b.logger_("calling abort on " + a + "Buffer");
                        try {
                            c.abort();
                        } catch (d) {
                            eV.log.warn("Failed to abort on " + a + "Buffer", d);
                        }
                    };
                },
                addSourceBuffer: function a(b, c) {
                    return function(a) {
                        var d = hQ(b);
                        var e = (0, w._5)(c);
                        a.logger_("Adding " + b + "Buffer with codec " + c + " to mediaSource");
                        var f = a.mediaSource.addSourceBuffer(e);
                        f.addEventListener("updateend", a["on" + d + "UpdateEnd_"]);
                        f.addEventListener("error", a["on" + d + "Error_"]);
                        a.codecs[b] = c;
                        a[b + "Buffer"] = f;
                    };
                },
                removeSourceBuffer: function a(b) {
                    return function(a) {
                        var c = a[b + "Buffer"];
                        hV(b, a);
                        if (!hW(a.mediaSource, c)) {
                            return;
                        }
                        a.logger_("Removing " + b + "Buffer with codec " + a.codecs[b] + " from mediaSource");
                        try {
                            a.mediaSource.removeSourceBuffer(c);
                        } catch (d) {
                            eV.log.warn("Failed to removeSourceBuffer " + b + "Buffer", d);
                        }
                    };
                },
                changeType: function a(b) {
                    return function(a, c) {
                        var d = c[a + "Buffer"];
                        var e = (0, w._5)(b);
                        if (!hW(c.mediaSource, d)) {
                            return;
                        }
                        if (c.codecs[a] === b) {
                            return;
                        }
                        c.logger_("changing " + a + "Buffer codec from " + c.codecs[a] + " to " + b);
                        d.changeType(e);
                        c.codecs[a] = b;
                    };
                }
            };
            var hY = function a(b) {
                var c = b.type, d = b.sourceUpdater, e = b.action, f = b.doneFn, g = b.name;
                d.queue.push({
                    type: c,
                    action: e,
                    doneFn: f,
                    name: g
                });
                hU(c, d);
            };
            var hZ = function a(b, c) {
                return function(a) {
                    if (c.queuePending[b]) {
                        var d = c.queuePending[b].doneFn;
                        c.queuePending[b] = null;
                        if (d) {
                            d(c[b + "Error_"]);
                        }
                    }
                    hU(b, c);
                };
            };
            var h$ = (function(a) {
                (0, j.Z)(b, a);
                function b(b) {
                    var c;
                    c = a.call(this) || this;
                    c.mediaSource = b;
                    c.sourceopenListener_ = function() {
                        return hU("mediaSource", (0, i.Z)(c));
                    };
                    c.mediaSource.addEventListener("sourceopen", c.sourceopenListener_);
                    c.logger_ = e$("SourceUpdater");
                    c.audioTimestampOffset_ = 0;
                    c.videoTimestampOffset_ = 0;
                    c.queue = [];
                    c.queuePending = {
                        audio: null,
                        video: null
                    };
                    c.delayedAudioAppendQueue_ = [];
                    c.videoAppendQueued_ = false;
                    c.codecs = {};
                    c.onVideoUpdateEnd_ = hZ("video", (0, i.Z)(c));
                    c.onAudioUpdateEnd_ = hZ("audio", (0, i.Z)(c));
                    c.onVideoError_ = function(a) {
                        c.videoError_ = a;
                    };
                    c.onAudioError_ = function(a) {
                        c.audioError_ = a;
                    };
                    c.createdSourceBuffers_ = false;
                    c.initializedEme_ = false;
                    c.triggeredReady_ = false;
                    return c;
                }
                var c = b.prototype;
                c.initializedEme = function a() {
                    this.initializedEme_ = true;
                    this.triggerReady();
                };
                c.hasCreatedSourceBuffers = function a() {
                    return this.createdSourceBuffers_;
                };
                c.hasInitializedAnyEme = function a() {
                    return this.initializedEme_;
                };
                c.ready = function a() {
                    return (this.hasCreatedSourceBuffers() && this.hasInitializedAnyEme());
                };
                c.createSourceBuffers = function a(b) {
                    if (this.hasCreatedSourceBuffers()) {
                        return;
                    }
                    this.addOrChangeSourceBuffers(b);
                    this.createdSourceBuffers_ = true;
                    this.trigger("createdsourcebuffers");
                    this.triggerReady();
                };
                c.triggerReady = function a() {
                    if (this.ready() && !this.triggeredReady_) {
                        this.triggeredReady_ = true;
                        this.trigger("ready");
                    }
                };
                c.addSourceBuffer = function a(b, c) {
                    hY({
                        type: "mediaSource",
                        sourceUpdater: this,
                        action: hX.addSourceBuffer(b, c),
                        name: "addSourceBuffer"
                    });
                };
                c.abort = function a(b) {
                    hY({
                        type: b,
                        sourceUpdater: this,
                        action: hX.abort(b),
                        name: "abort"
                    });
                };
                c.removeSourceBuffer = function a(b) {
                    if (!this.canRemoveSourceBuffer()) {
                        eV.log.error("removeSourceBuffer is not supported!");
                        return;
                    }
                    hY({
                        type: "mediaSource",
                        sourceUpdater: this,
                        action: hX.removeSourceBuffer(b),
                        name: "removeSourceBuffer"
                    });
                };
                c.canRemoveSourceBuffer = function a() {
                    return (!eV.browser.IE_VERSION && !eV.browser.IS_FIREFOX && e().MediaSource && e().MediaSource.prototype && typeof e().MediaSource.prototype.removeSourceBuffer === "function");
                };
                b.canChangeType = function a() {
                    return (e().SourceBuffer && e().SourceBuffer.prototype && typeof e().SourceBuffer.prototype.changeType === "function");
                };
                c.canChangeType = function a() {
                    return this.constructor.canChangeType();
                };
                c.changeType = function a(b, c) {
                    if (!this.canChangeType()) {
                        eV.log.error("changeType is not supported!");
                        return;
                    }
                    hY({
                        type: b,
                        sourceUpdater: this,
                        action: hX.changeType(c),
                        name: "changeType"
                    });
                };
                c.addOrChangeSourceBuffers = function a(b) {
                    var c = this;
                    if (!b || typeof b !== "object" || Object.keys(b).length === 0) {
                        throw new Error("Cannot addOrChangeSourceBuffers to undefined codecs");
                    }
                    Object.keys(b).forEach(function(a) {
                        var d = b[a];
                        if (!c.hasCreatedSourceBuffers()) {
                            return c.addSourceBuffer(a, d);
                        }
                        if (c.canChangeType()) {
                            c.changeType(a, d);
                        }
                    });
                };
                c.appendBuffer = function a(b, c) {
                    var d = this;
                    var e = b.segmentInfo, f = b.type, g = b.bytes;
                    this.processedAppend_ = true;
                    if (f === "audio" && this.videoBuffer && !this.videoAppendQueued_) {
                        this.delayedAudioAppendQueue_.push([
                            b,
                            c
                        ]);
                        this.logger_("delayed audio append of " + g.length + " until video append");
                        return;
                    }
                    var h = c;
                    hY({
                        type: f,
                        sourceUpdater: this,
                        action: hX.appendBuffer(g, e || {
                            mediaIndex: -1
                        }, h),
                        doneFn: c,
                        name: "appendBuffer"
                    });
                    if (f === "video") {
                        this.videoAppendQueued_ = true;
                        if (!this.delayedAudioAppendQueue_.length) {
                            return;
                        }
                        var i = this.delayedAudioAppendQueue_.slice();
                        this.logger_("queuing delayed audio " + i.length + " appendBuffers");
                        this.delayedAudioAppendQueue_.length = 0;
                        i.forEach(function(a) {
                            d.appendBuffer.apply(d, a);
                        });
                    }
                };
                c.audioBuffered = function a() {
                    if (!hW(this.mediaSource, this.audioBuffer)) {
                        return eV.createTimeRange();
                    }
                    return this.audioBuffer.buffered ? this.audioBuffer.buffered : eV.createTimeRange();
                };
                c.videoBuffered = function a() {
                    if (!hW(this.mediaSource, this.videoBuffer)) {
                        return eV.createTimeRange();
                    }
                    return this.videoBuffer.buffered ? this.videoBuffer.buffered : eV.createTimeRange();
                };
                c.buffered = function a() {
                    var b = hW(this.mediaSource, this.videoBuffer) ? this.videoBuffer : null;
                    var c = hW(this.mediaSource, this.audioBuffer) ? this.audioBuffer : null;
                    if (c && !b) {
                        return this.audioBuffered();
                    }
                    if (b && !c) {
                        return this.videoBuffered();
                    }
                    return e5(this.audioBuffered(), this.videoBuffered());
                };
                c.setDuration = function a(b, c) {
                    if (c === void 0) {
                        c = hP;
                    }
                    hY({
                        type: "mediaSource",
                        sourceUpdater: this,
                        action: hX.duration(b),
                        name: "duration",
                        doneFn: c
                    });
                };
                c.endOfStream = function a(b, c) {
                    if (b === void 0) {
                        b = null;
                    }
                    if (c === void 0) {
                        c = hP;
                    }
                    if (typeof b !== "string") {
                        b = undefined;
                    }
                    hY({
                        type: "mediaSource",
                        sourceUpdater: this,
                        action: hX.endOfStream(b),
                        name: "endOfStream",
                        doneFn: c
                    });
                };
                c.removeAudio = function a(b, c, d) {
                    if (d === void 0) {
                        d = hP;
                    }
                    if (!this.audioBuffered().length || this.audioBuffered().end(0) === 0) {
                        d();
                        return;
                    }
                    hY({
                        type: "audio",
                        sourceUpdater: this,
                        action: hX.remove(b, c),
                        doneFn: d,
                        name: "remove"
                    });
                };
                c.removeVideo = function a(b, c, d) {
                    if (d === void 0) {
                        d = hP;
                    }
                    if (!this.videoBuffered().length || this.videoBuffered().end(0) === 0) {
                        d();
                        return;
                    }
                    hY({
                        type: "video",
                        sourceUpdater: this,
                        action: hX.remove(b, c),
                        doneFn: d,
                        name: "remove"
                    });
                };
                c.updating = function a() {
                    if (hS("audio", this) || hS("video", this)) {
                        return true;
                    }
                    return false;
                };
                c.audioTimestampOffset = function a(b) {
                    if (typeof b !== "undefined" && this.audioBuffer && this.audioTimestampOffset_ !== b) {
                        hY({
                            type: "audio",
                            sourceUpdater: this,
                            action: hX.timestampOffset(b),
                            name: "timestampOffset"
                        });
                        this.audioTimestampOffset_ = b;
                    }
                    return this.audioTimestampOffset_;
                };
                c.videoTimestampOffset = function a(b) {
                    if (typeof b !== "undefined" && this.videoBuffer && this.videoTimestampOffset !== b) {
                        hY({
                            type: "video",
                            sourceUpdater: this,
                            action: hX.timestampOffset(b),
                            name: "timestampOffset"
                        });
                        this.videoTimestampOffset_ = b;
                    }
                    return this.videoTimestampOffset_;
                };
                c.audioQueueCallback = function a(b) {
                    if (!this.audioBuffer) {
                        return;
                    }
                    hY({
                        type: "audio",
                        sourceUpdater: this,
                        action: hX.callback(b),
                        name: "callback"
                    });
                };
                c.videoQueueCallback = function a(b) {
                    if (!this.videoBuffer) {
                        return;
                    }
                    hY({
                        type: "video",
                        sourceUpdater: this,
                        action: hX.callback(b),
                        name: "callback"
                    });
                };
                c.dispose = function a() {
                    var b = this;
                    this.trigger("dispose");
                    hR.forEach(function(a) {
                        b.abort(a);
                        if (b.canRemoveSourceBuffer()) {
                            b.removeSourceBuffer(a);
                        } else {
                            b[a + "QueueCallback"](function() {
                                return hV(a, b);
                            });
                        }
                    });
                    this.videoAppendQueued_ = false;
                    this.delayedAudioAppendQueue_.length = 0;
                    if (this.sourceopenListener_) {
                        this.mediaSource.removeEventListener("sourceopen", this.sourceopenListener_);
                    }
                    this.off();
                };
                return b;
            })(eV.EventTarget);
            var h_ = function a(b) {
                return decodeURIComponent(escape(String.fromCharCode.apply(null, b)));
            };
            var h0 = new Uint8Array("\n\n".split("").map(function(a) {
                return a.charCodeAt(0);
            }));
            var h1 = (function(a) {
                (0, j.Z)(b, a);
                function b(b, c) {
                    var d;
                    if (c === void 0) {
                        c = {};
                    }
                    d = a.call(this, b, c) || this;
                    d.mediaSource_ = null;
                    d.subtitlesTrack_ = null;
                    d.loaderType_ = "subtitle";
                    d.featuresNativeTextTracks_ = b.featuresNativeTextTracks;
                    d.shouldSaveSegmentTimingInfo_ = false;
                    return d;
                }
                var c = b.prototype;
                c.createTransmuxer_ = function a() {
                    return null;
                };
                c.buffered_ = function a() {
                    if (!this.subtitlesTrack_ || !this.subtitlesTrack_.cues || !this.subtitlesTrack_.cues.length) {
                        return eV.createTimeRanges();
                    }
                    var b = this.subtitlesTrack_.cues;
                    var c = b[0].startTime;
                    var d = b[b.length - 1].startTime;
                    return eV.createTimeRanges([
                        [
                            c,
                            d
                        ]
                    ]);
                };
                c.initSegmentForMap = function a(b, c) {
                    if (c === void 0) {
                        c = false;
                    }
                    if (!b) {
                        return null;
                    }
                    var d = f4(b);
                    var e = this.initSegments_[d];
                    if (c && !e && b.bytes) {
                        var f = h0.byteLength + b.bytes.byteLength;
                        var g = new Uint8Array(f);
                        g.set(b.bytes);
                        g.set(h0, b.bytes.byteLength);
                        this.initSegments_[d] = e = {
                            resolvedUri: b.resolvedUri,
                            byterange: b.byterange,
                            bytes: g
                        };
                    }
                    return e || b;
                };
                c.couldBeginLoading_ = function a() {
                    return (this.playlist_ && this.subtitlesTrack_ && !this.paused());
                };
                c.init_ = function a() {
                    this.state = "READY";
                    this.resetEverything();
                    return this.monitorBuffer_();
                };
                c.track = function a(b) {
                    if (typeof b === "undefined") {
                        return this.subtitlesTrack_;
                    }
                    this.subtitlesTrack_ = b;
                    if (this.state === "INIT" && this.couldBeginLoading_()) {
                        this.init_();
                    }
                    return this.subtitlesTrack_;
                };
                c.remove = function a(b, c) {
                    ht(b, c, this.subtitlesTrack_);
                };
                c.fillBuffer_ = function a() {
                    var b = this;
                    var c = this.chooseNextRequest_();
                    if (!c) {
                        return;
                    }
                    if (this.syncController_.timestampOffsetForTimeline(c.timeline) === null) {
                        var d = function a() {
                            b.state = "READY";
                            if (!b.paused()) {
                                b.monitorBuffer_();
                            }
                        };
                        this.syncController_.one("timestampoffset", d);
                        this.state = "WAITING_ON_TIMELINE";
                        return;
                    }
                    this.loadSegment_(c);
                };
                c.timestampOffsetForSegment_ = function a() {
                    return null;
                };
                c.chooseNextRequest_ = function b() {
                    return this.skipEmptySegments_(a.prototype.chooseNextRequest_.call(this));
                };
                c.skipEmptySegments_ = function a(b) {
                    while(b && b.segment.empty){
                        if (b.mediaIndex + 1 >= b.playlist.segments.length) {
                            b = null;
                            break;
                        }
                        b = this.generateSegmentInfo_({
                            playlist: b.playlist,
                            mediaIndex: b.mediaIndex + 1,
                            startOfSegment: b.startOfSegment + b.duration,
                            isSyncRequest: b.isSyncRequest
                        });
                    }
                    return b;
                };
                c.stopForError = function a(b) {
                    this.error(b);
                    this.state = "READY";
                    this.pause();
                    this.trigger("error");
                };
                c.segmentRequestFinished_ = function a(b, c, d) {
                    var f = this;
                    if (!this.subtitlesTrack_) {
                        this.state = "READY";
                        return;
                    }
                    this.saveTransferStats_(c.stats);
                    if (!this.pendingSegment_) {
                        this.state = "READY";
                        this.mediaRequestsAborted += 1;
                        return;
                    }
                    if (b) {
                        if (b.code === gQ.TIMEOUT) {
                            this.handleTimeout_();
                        }
                        if (b.code === gQ.ABORTED) {
                            this.mediaRequestsAborted += 1;
                        } else {
                            this.mediaRequestsErrored += 1;
                        }
                        this.stopForError(b);
                        return;
                    }
                    var g = this.pendingSegment_;
                    this.saveBandwidthRelatedStats_(g.duration, c.stats);
                    this.state = "APPENDING";
                    this.trigger("appending");
                    var h = g.segment;
                    if (h.map) {
                        h.map.bytes = c.map.bytes;
                    }
                    g.bytes = c.bytes;
                    if (typeof e().WebVTT !== "function" && this.subtitlesTrack_ && this.subtitlesTrack_.tech_) {
                        var i;
                        var j = function a() {
                            f.subtitlesTrack_.tech_.off("vttjsloaded", i);
                            f.stopForError({
                                message: "Error loading vtt.js"
                            });
                            return;
                        };
                        i = function a() {
                            f.subtitlesTrack_.tech_.off("vttjserror", j);
                            f.segmentRequestFinished_(b, c, d);
                        };
                        this.state = "WAITING_ON_VTTJS";
                        this.subtitlesTrack_.tech_.one("vttjsloaded", i);
                        this.subtitlesTrack_.tech_.one("vttjserror", j);
                        return;
                    }
                    h.requested = true;
                    try {
                        this.parseVTTCues_(g);
                    } catch (k) {
                        this.stopForError({
                            message: k.message
                        });
                        return;
                    }
                    this.updateTimeMapping_(g, this.syncController_.timelines[g.timeline], this.playlist_);
                    if (g.cues.length) {
                        g.timingInfo = {
                            start: g.cues[0].startTime,
                            end: g.cues[g.cues.length - 1].endTime
                        };
                    } else {
                        g.timingInfo = {
                            start: g.startOfSegment,
                            end: g.startOfSegment + g.duration
                        };
                    }
                    if (g.isSyncRequest) {
                        this.trigger("syncinfoupdate");
                        this.pendingSegment_ = null;
                        this.state = "READY";
                        return;
                    }
                    g.byteLength = g.bytes.byteLength;
                    this.mediaSecondsLoaded += h.duration;
                    g.cues.forEach(function(a) {
                        f.subtitlesTrack_.addCue(f.featuresNativeTextTracks_ ? new (e().VTTCue)(a.startTime, a.endTime, a.text) : a);
                    });
                    hu(this.subtitlesTrack_);
                    this.handleAppendsDone_();
                };
                c.handleData_ = function a() {};
                c.updateTimingInfoEnd_ = function a() {};
                c.parseVTTCues_ = function a(b) {
                    var c;
                    var d = false;
                    if (typeof e().TextDecoder === "function") {
                        c = new (e().TextDecoder)("utf8");
                    } else {
                        c = e().WebVTT.StringDecoder();
                        d = true;
                    }
                    var f = new (e().WebVTT.Parser)(e(), e().vttjs, c);
                    b.cues = [];
                    b.timestampmap = {
                        MPEGTS: 0,
                        LOCAL: 0
                    };
                    f.oncue = b.cues.push.bind(b.cues);
                    f.ontimestampmap = function(a) {
                        b.timestampmap = a;
                    };
                    f.onparsingerror = function(a) {
                        eV.log.warn("Error encountered when parsing cues: " + a.message);
                    };
                    if (b.segment.map) {
                        var g = b.segment.map.bytes;
                        if (d) {
                            g = h_(g);
                        }
                        f.parse(g);
                    }
                    var h = b.bytes;
                    if (d) {
                        h = h_(h);
                    }
                    f.parse(h);
                    f.flush();
                };
                c.updateTimeMapping_ = function a(b, c, d) {
                    var e = b.segment;
                    if (!c) {
                        return;
                    }
                    if (!b.cues.length) {
                        e.empty = true;
                        return;
                    }
                    var f = b.timestampmap;
                    var g = f.MPEGTS / E.ONE_SECOND_IN_TS - f.LOCAL + c.mapping;
                    b.cues.forEach(function(a) {
                        a.startTime += g;
                        a.endTime += g;
                    });
                    if (!d.syncInfo) {
                        var h = b.cues[0].startTime;
                        var i = b.cues[b.cues.length - 1].startTime;
                        d.syncInfo = {
                            mediaSequence: d.mediaSequence + b.mediaIndex,
                            time: Math.min(h, i - e.duration)
                        };
                    }
                };
                return b;
            })(hO);
            var h2 = function a(b, c) {
                var d = b.cues;
                for(var e = 0; e < d.length; e++){
                    var f = d[e];
                    if (c >= f.adStartTime && c <= f.adEndTime) {
                        return f;
                    }
                }
                return null;
            };
            var h3 = function a(b, c, d) {
                if (d === void 0) {
                    d = 0;
                }
                if (!b.segments) {
                    return;
                }
                var f = d;
                var g;
                for(var h = 0; h < b.segments.length; h++){
                    var i = b.segments[h];
                    if (!g) {
                        g = h2(c, f + i.duration / 2);
                    }
                    if (g) {
                        if ("cueIn" in i) {
                            g.endTime = f;
                            g.adEndTime = f;
                            f += i.duration;
                            g = null;
                            continue;
                        }
                        if (f < g.endTime) {
                            f += i.duration;
                            continue;
                        }
                        g.endTime += i.duration;
                    } else {
                        if ("cueOut" in i) {
                            g = new (e().VTTCue)(f, f + i.duration, i.cueOut);
                            g.adStartTime = f;
                            g.adEndTime = f + parseFloat(i.cueOut);
                            c.addCue(g);
                        }
                        if ("cueOutCont" in i) {
                            var j = i.cueOutCont.split("/").map(parseFloat), k = j[0], l = j[1];
                            g = new (e().VTTCue)(f, f + i.duration, "");
                            g.adStartTime = f - k;
                            g.adEndTime = g.adStartTime + l;
                            c.addCue(g);
                        }
                    }
                    f += i.duration;
                }
            };
            var h4 = 86400;
            var h5 = [
                {
                    name: "VOD",
                    run: function a(b, c, d, e, f) {
                        if (d !== Infinity) {
                            var g = {
                                time: 0,
                                segmentIndex: 0,
                                partIndex: null
                            };
                            return g;
                        }
                        return null;
                    }
                },
                {
                    name: "ProgramDateTime",
                    run: function a(b, c, d, e, f) {
                        if (!Object.keys(b.timelineToDatetimeMappings).length) {
                            return null;
                        }
                        var g = null;
                        var h = null;
                        var i = fe(c);
                        f = f || 0;
                        for(var j = 0; j < i.length; j++){
                            var k = c.endList || f === 0 ? j : i.length - (j + 1);
                            var l = i[k];
                            var m = l.segment;
                            var n = b.timelineToDatetimeMappings[m.timeline];
                            if (!n || !m.dateTimeObject) {
                                continue;
                            }
                            var o = m.dateTimeObject.getTime() / 1000;
                            var p = o + n;
                            if (m.parts && typeof l.partIndex === "number") {
                                for(var q = 0; q < l.partIndex; q++){
                                    p += m.parts[q].duration;
                                }
                            }
                            var r = Math.abs(f - p);
                            if (h !== null && (r === 0 || h < r)) {
                                break;
                            }
                            h = r;
                            g = {
                                time: p,
                                segmentIndex: l.segmentIndex,
                                partIndex: l.partIndex
                            };
                        }
                        return g;
                    }
                },
                {
                    name: "Segment",
                    run: function a(b, c, d, e, f) {
                        var g = null;
                        var h = null;
                        f = f || 0;
                        var i = fe(c);
                        for(var j = 0; j < i.length; j++){
                            var k = c.endList || f === 0 ? j : i.length - (j + 1);
                            var l = i[k];
                            var m = l.segment;
                            var n = (l.part && l.part.start) || (m && m.start);
                            if (m.timeline === e && typeof n !== "undefined") {
                                var o = Math.abs(f - n);
                                if (h !== null && h < o) {
                                    break;
                                }
                                if (!g || h === null || h >= o) {
                                    h = o;
                                    g = {
                                        time: n,
                                        segmentIndex: l.segmentIndex,
                                        partIndex: l.partIndex
                                    };
                                }
                            }
                        }
                        return g;
                    }
                },
                {
                    name: "Discontinuity",
                    run: function a(b, c, d, e, f) {
                        var g = null;
                        f = f || 0;
                        if (c.discontinuityStarts && c.discontinuityStarts.length) {
                            var h = null;
                            for(var i = 0; i < c.discontinuityStarts.length; i++){
                                var j = c.discontinuityStarts[i];
                                var k = c.discontinuitySequence + i + 1;
                                var l = b.discontinuities[k];
                                if (l) {
                                    var m = Math.abs(f - l.time);
                                    if (h !== null && h < m) {
                                        break;
                                    }
                                    if (!g || h === null || h >= m) {
                                        h = m;
                                        g = {
                                            time: l.time,
                                            segmentIndex: j,
                                            partIndex: null
                                        };
                                    }
                                }
                            }
                        }
                        return g;
                    }
                },
                {
                    name: "Playlist",
                    run: function a(b, c, d, e, f) {
                        if (c.syncInfo) {
                            var g = {
                                time: c.syncInfo.time,
                                segmentIndex: c.syncInfo.mediaSequence - c.mediaSequence,
                                partIndex: null
                            };
                            return g;
                        }
                        return null;
                    }
                }, 
            ];
            var h6 = (function(a) {
                (0, j.Z)(b, a);
                function b(b) {
                    var c;
                    c = a.call(this) || this;
                    c.timelines = [];
                    c.discontinuities = [];
                    c.timelineToDatetimeMappings = {};
                    c.logger_ = e$("SyncController");
                    return c;
                }
                var c = b.prototype;
                c.getSyncPoint = function a(b, c, d, e) {
                    var f = this.runStrategies_(b, c, d, e);
                    if (!f.length) {
                        return null;
                    }
                    return this.selectSyncPoint_(f, {
                        key: "time",
                        value: e
                    });
                };
                c.getExpiredTime = function a(b, c) {
                    if (!b || !b.segments) {
                        return null;
                    }
                    var d = this.runStrategies_(b, c, b.discontinuitySequence, 0);
                    if (!d.length) {
                        return null;
                    }
                    var e = this.selectSyncPoint_(d, {
                        key: "segmentIndex",
                        value: 0
                    });
                    if (e.segmentIndex > 0) {
                        e.time *= -1;
                    }
                    return Math.abs(e.time + fm({
                        defaultDuration: b.targetDuration,
                        durationList: b.segments,
                        startIndex: e.segmentIndex,
                        endIndex: 0
                    }));
                };
                c.runStrategies_ = function a(b, c, d, e) {
                    var f = [];
                    for(var g = 0; g < h5.length; g++){
                        var h = h5[g];
                        var i = h.run(this, b, c, d, e);
                        if (i) {
                            i.strategy = h.name;
                            f.push({
                                strategy: h.name,
                                syncPoint: i
                            });
                        }
                    }
                    return f;
                };
                c.selectSyncPoint_ = function a(b, c) {
                    var d = b[0].syncPoint;
                    var e = Math.abs(b[0].syncPoint[c.key] - c.value);
                    var f = b[0].strategy;
                    for(var g = 1; g < b.length; g++){
                        var h = Math.abs(b[g].syncPoint[c.key] - c.value);
                        if (h < e) {
                            e = h;
                            d = b[g].syncPoint;
                            f = b[g].strategy;
                        }
                    }
                    this.logger_("syncPoint for [" + c.key + ": " + c.value + "] chosen with strategy" + (" [" + f + "]: [time:" + d.time + ",") + (" segmentIndex:" + d.segmentIndex) + (typeof d.partIndex === "number" ? ",partIndex:" + d.partIndex : "") + "]");
                    return d;
                };
                c.saveExpiredSegmentInfo = function a(b, c) {
                    var d = c.mediaSequence - b.mediaSequence;
                    if (d > h4) {
                        eV.log.warn("Not saving expired segment info. Media sequence gap " + d + " is too large.");
                        return;
                    }
                    for(var e = d - 1; e >= 0; e--){
                        var f = b.segments[e];
                        if (f && typeof f.start !== "undefined") {
                            c.syncInfo = {
                                mediaSequence: b.mediaSequence + e,
                                time: f.start
                            };
                            this.logger_("playlist refresh sync: [time:" + c.syncInfo.time + "," + (" mediaSequence: " + c.syncInfo.mediaSequence + "]"));
                            this.trigger("syncinfoupdate");
                            break;
                        }
                    }
                };
                c.setDateTimeMappingForStart = function a(b) {
                    this.timelineToDatetimeMappings = {};
                    if (b.segments && b.segments.length && b.segments[0].dateTimeObject) {
                        var c = b.segments[0];
                        var d = c.dateTimeObject.getTime() / 1000;
                        this.timelineToDatetimeMappings[c.timeline] = -d;
                    }
                };
                c.saveSegmentTimingInfo = function a(b) {
                    var c = b.segmentInfo, d = b.shouldSaveTimelineMapping;
                    var e = this.calculateSegmentTimeMapping_(c, c.timingInfo, d);
                    var f = c.segment;
                    if (e) {
                        this.saveDiscontinuitySyncInfo_(c);
                        if (!c.playlist.syncInfo) {
                            c.playlist.syncInfo = {
                                mediaSequence: c.playlist.mediaSequence + c.mediaIndex,
                                time: f.start
                            };
                        }
                    }
                    var g = f.dateTimeObject;
                    if (f.discontinuity && d && g) {
                        this.timelineToDatetimeMappings[f.timeline] = -(g.getTime() / 1000);
                    }
                };
                c.timestampOffsetForTimeline = function a(b) {
                    if (typeof this.timelines[b] === "undefined") {
                        return null;
                    }
                    return this.timelines[b].time;
                };
                c.mappingForTimeline = function a(b) {
                    if (typeof this.timelines[b] === "undefined") {
                        return null;
                    }
                    return this.timelines[b].mapping;
                };
                c.calculateSegmentTimeMapping_ = function a(b, c, d) {
                    var e = b.segment;
                    var f = b.part;
                    var g = this.timelines[b.timeline];
                    var h;
                    var i;
                    if (typeof b.timestampOffset === "number") {
                        g = {
                            time: b.startOfSegment,
                            mapping: b.startOfSegment - c.start
                        };
                        if (d) {
                            this.timelines[b.timeline] = g;
                            this.trigger("timestampoffset");
                            this.logger_("time mapping for timeline " + b.timeline + ": " + ("[time: " + g.time + "] [mapping: " + g.mapping + "]"));
                        }
                        h = b.startOfSegment;
                        i = c.end + g.mapping;
                    } else if (g) {
                        h = c.start + g.mapping;
                        i = c.end + g.mapping;
                    } else {
                        return false;
                    }
                    if (f) {
                        f.start = h;
                        f.end = i;
                    }
                    if (!e.start || h < e.start) {
                        e.start = h;
                    }
                    e.end = i;
                    return true;
                };
                c.saveDiscontinuitySyncInfo_ = function a(b) {
                    var c = b.playlist;
                    var d = b.segment;
                    if (d.discontinuity) {
                        this.discontinuities[d.timeline] = {
                            time: d.start,
                            accuracy: 0
                        };
                    } else if (c.discontinuityStarts && c.discontinuityStarts.length) {
                        for(var e = 0; e < c.discontinuityStarts.length; e++){
                            var f = c.discontinuityStarts[e];
                            var g = c.discontinuitySequence + e + 1;
                            var h = f - b.mediaIndex;
                            var i = Math.abs(h);
                            if (!this.discontinuities[g] || this.discontinuities[g].accuracy > i) {
                                var j = void 0;
                                if (h < 0) {
                                    j = d.start - fm({
                                        defaultDuration: c.targetDuration,
                                        durationList: c.segments,
                                        startIndex: b.mediaIndex,
                                        endIndex: f
                                    });
                                } else {
                                    j = d.end + fm({
                                        defaultDuration: c.targetDuration,
                                        durationList: c.segments,
                                        startIndex: b.mediaIndex + 1,
                                        endIndex: f
                                    });
                                }
                                this.discontinuities[g] = {
                                    time: j,
                                    accuracy: i
                                };
                            }
                        }
                    }
                };
                c.dispose = function a() {
                    this.trigger("dispose");
                    this.off();
                };
                return b;
            })(eV.EventTarget);
            var h7 = (function(a) {
                (0, j.Z)(b, a);
                function b() {
                    var b;
                    b = a.call(this) || this;
                    b.pendingTimelineChanges_ = {};
                    b.lastTimelineChanges_ = {};
                    return b;
                }
                var c = b.prototype;
                c.clearPendingTimelineChange = function a(b) {
                    this.pendingTimelineChanges_[b] = null;
                    this.trigger("pendingtimelinechange");
                };
                c.pendingTimelineChange = function a(b) {
                    var c = b.type, d = b.from, e = b.to;
                    if (typeof d === "number" && typeof e === "number") {
                        this.pendingTimelineChanges_[c] = {
                            type: c,
                            from: d,
                            to: e
                        };
                        this.trigger("pendingtimelinechange");
                    }
                    return this.pendingTimelineChanges_[c];
                };
                c.lastTimelineChange = function a(b) {
                    var c = b.type, d = b.from, e = b.to;
                    if (typeof d === "number" && typeof e === "number") {
                        this.lastTimelineChanges_[c] = {
                            type: c,
                            from: d,
                            to: e
                        };
                        delete this.pendingTimelineChanges_[c];
                        this.trigger("timelinechange");
                    }
                    return this.lastTimelineChanges_[c];
                };
                c.dispose = function a() {
                    this.trigger("dispose");
                    this.pendingTimelineChanges_ = {};
                    this.lastTimelineChanges_ = {};
                    this.off();
                };
                return b;
            })(eV.EventTarget);
            var h8 = gz(gA(function() {
                function a(a, c, d) {
                    return ((d = {
                        path: c,
                        exports: {},
                        require: function a(c, e) {
                            return b(c, e === undefined || e === null ? d.path : e);
                        }
                    }), a(d, d.exports), d.exports);
                }
                function b() {
                    throw new Error("Dynamic requires are not currently supported by @rollup/plugin-commonjs");
                }
                var c = a(function(a) {
                    function b(a, b) {
                        for(var c = 0; c < b.length; c++){
                            var d = b[c];
                            d.enumerable = d.enumerable || false;
                            d.configurable = true;
                            if ("value" in d) d.writable = true;
                            Object.defineProperty(a, d.key, d);
                        }
                    }
                    function c(a, c, d) {
                        if (c) b(a.prototype, c);
                        if (d) b(a, d);
                        return a;
                    }
                    a.exports = c;
                    (a.exports["default"] = a.exports), (a.exports.__esModule = true);
                });
                var d = a(function(a) {
                    function b(c, d) {
                        a.exports = b = Object.setPrototypeOf || function a(b, c) {
                            b.__proto__ = c;
                            return b;
                        };
                        (a.exports["default"] = a.exports), (a.exports.__esModule = true);
                        return b(c, d);
                    }
                    a.exports = b;
                    (a.exports["default"] = a.exports), (a.exports.__esModule = true);
                });
                var e = a(function(a) {
                    function b(a, b) {
                        a.prototype = Object.create(b.prototype);
                        a.prototype.constructor = a;
                        d(a, b);
                    }
                    a.exports = b;
                    (a.exports["default"] = a.exports), (a.exports.__esModule = true);
                });
                var f = (function() {
                    function a() {
                        this.listeners = {};
                    }
                    var b = a.prototype;
                    b.on = function a(b, c) {
                        if (!this.listeners[b]) {
                            this.listeners[b] = [];
                        }
                        this.listeners[b].push(c);
                    };
                    b.off = function a(b, c) {
                        if (!this.listeners[b]) {
                            return false;
                        }
                        var d = this.listeners[b].indexOf(c);
                        this.listeners[b] = this.listeners[b].slice(0);
                        this.listeners[b].splice(d, 1);
                        return d > -1;
                    };
                    b.trigger = function a(b) {
                        var c = this.listeners[b];
                        if (!c) {
                            return;
                        }
                        if (arguments.length === 2) {
                            var d = c.length;
                            for(var e = 0; e < d; ++e){
                                c[e].call(this, arguments[1]);
                            }
                        } else {
                            var f = Array.prototype.slice.call(arguments, 1);
                            var g = c.length;
                            for(var h = 0; h < g; ++h){
                                c[h].apply(this, f);
                            }
                        }
                    };
                    b.dispose = function a() {
                        this.listeners = {};
                    };
                    b.pipe = function a(b) {
                        this.on("data", function(a) {
                            b.push(a);
                        });
                    };
                    return a;
                })();
                function g(a) {
                    return a.subarray(0, a.byteLength - a[a.byteLength - 1]);
                }
                var h = function a() {
                    var b = [
                        [
                            [],
                            [],
                            [],
                            [],
                            []
                        ],
                        [
                            [],
                            [],
                            [],
                            [],
                            []
                        ], 
                    ];
                    var c = b[0];
                    var d = b[1];
                    var e = c[4];
                    var f = d[4];
                    var g;
                    var h;
                    var i;
                    var j = [];
                    var k = [];
                    var l;
                    var m;
                    var n;
                    var o;
                    var p;
                    var q;
                    for(g = 0; g < 256; g++){
                        k[(j[g] = (g << 1) ^ ((g >> 7) * 283)) ^ g] = g;
                    }
                    for(h = i = 0; !e[h]; h ^= l || 1, i = k[i] || 1){
                        o = i ^ (i << 1) ^ (i << 2) ^ (i << 3) ^ (i << 4);
                        o = (o >> 8) ^ (o & 255) ^ 99;
                        e[h] = o;
                        f[o] = h;
                        n = j[(m = j[(l = j[h])])];
                        q = (n * 0x1010101) ^ (m * 0x10001) ^ (l * 0x101) ^ (h * 0x1010100);
                        p = (j[o] * 0x101) ^ (o * 0x1010100);
                        for(g = 0; g < 4; g++){
                            c[g][h] = p = (p << 24) ^ (p >>> 8);
                            d[g][o] = q = (q << 24) ^ (q >>> 8);
                        }
                    }
                    for(g = 0; g < 5; g++){
                        c[g] = c[g].slice(0);
                        d[g] = d[g].slice(0);
                    }
                    return b;
                };
                var i = null;
                var j = (function() {
                    function a(a) {
                        if (!i) {
                            i = h();
                        }
                        this._tables = [
                            [
                                i[0][0].slice(),
                                i[0][1].slice(),
                                i[0][2].slice(),
                                i[0][3].slice(),
                                i[0][4].slice(), 
                            ],
                            [
                                i[1][0].slice(),
                                i[1][1].slice(),
                                i[1][2].slice(),
                                i[1][3].slice(),
                                i[1][4].slice(), 
                            ], 
                        ];
                        var b;
                        var c;
                        var d;
                        var e = this._tables[0][4];
                        var f = this._tables[1];
                        var g = a.length;
                        var j = 1;
                        if (g !== 4 && g !== 6 && g !== 8) {
                            throw new Error("Invalid aes key size");
                        }
                        var k = a.slice(0);
                        var l = [];
                        this._key = [
                            k,
                            l
                        ];
                        for(b = g; b < 4 * g + 28; b++){
                            d = k[b - 1];
                            if (b % g === 0 || (g === 8 && b % g === 4)) {
                                d = (e[d >>> 24] << 24) ^ (e[(d >> 16) & 255] << 16) ^ (e[(d >> 8) & 255] << 8) ^ e[d & 255];
                                if (b % g === 0) {
                                    d = (d << 8) ^ (d >>> 24) ^ (j << 24);
                                    j = (j << 1) ^ ((j >> 7) * 283);
                                }
                            }
                            k[b] = k[b - g] ^ d;
                        }
                        for(c = 0; b; c++, b--){
                            d = k[c & 3 ? b : b - 4];
                            if (b <= 4 || c < 4) {
                                l[c] = d;
                            } else {
                                l[c] = f[0][e[d >>> 24]] ^ f[1][e[(d >> 16) & 255]] ^ f[2][e[(d >> 8) & 255]] ^ f[3][e[d & 255]];
                            }
                        }
                    }
                    var b = a.prototype;
                    b.decrypt = function a(b, c, d, e, f, g) {
                        var h = this._key[1];
                        var i = b ^ h[0];
                        var j = e ^ h[1];
                        var k = d ^ h[2];
                        var l = c ^ h[3];
                        var m;
                        var n;
                        var o;
                        var p = h.length / 4 - 2;
                        var q;
                        var r = 4;
                        var s = this._tables[1];
                        var t = s[0];
                        var u = s[1];
                        var v = s[2];
                        var w = s[3];
                        var x = s[4];
                        for(q = 0; q < p; q++){
                            m = t[i >>> 24] ^ u[(j >> 16) & 255] ^ v[(k >> 8) & 255] ^ w[l & 255] ^ h[r];
                            n = t[j >>> 24] ^ u[(k >> 16) & 255] ^ v[(l >> 8) & 255] ^ w[i & 255] ^ h[r + 1];
                            o = t[k >>> 24] ^ u[(l >> 16) & 255] ^ v[(i >> 8) & 255] ^ w[j & 255] ^ h[r + 2];
                            l = t[l >>> 24] ^ u[(i >> 16) & 255] ^ v[(j >> 8) & 255] ^ w[k & 255] ^ h[r + 3];
                            r += 4;
                            i = m;
                            j = n;
                            k = o;
                        }
                        for(q = 0; q < 4; q++){
                            f[(3 & -q) + g] = (x[i >>> 24] << 24) ^ (x[(j >> 16) & 255] << 16) ^ (x[(k >> 8) & 255] << 8) ^ x[l & 255] ^ h[r++];
                            m = i;
                            i = j;
                            j = k;
                            k = l;
                            l = m;
                        }
                    };
                    return a;
                })();
                var k = (function(a) {
                    e(b, a);
                    function b() {
                        var b;
                        b = a.call(this, f) || this;
                        b.jobs = [];
                        b.delay = 1;
                        b.timeout_ = null;
                        return b;
                    }
                    var c = b.prototype;
                    c.processJob_ = function a() {
                        this.jobs.shift()();
                        if (this.jobs.length) {
                            this.timeout_ = setTimeout(this.processJob_.bind(this), this.delay);
                        } else {
                            this.timeout_ = null;
                        }
                    };
                    c.push = function a(b) {
                        this.jobs.push(b);
                        if (!this.timeout_) {
                            this.timeout_ = setTimeout(this.processJob_.bind(this), this.delay);
                        }
                    };
                    return b;
                })(f);
                var l = function a(b) {
                    return ((b << 24) | ((b & 0xff00) << 8) | ((b & 0xff0000) >> 8) | (b >>> 24));
                };
                var m = function a(b, c, d) {
                    var e = new Int32Array(b.buffer, b.byteOffset, b.byteLength >> 2);
                    var f = new j(Array.prototype.slice.call(c));
                    var g = new Uint8Array(b.byteLength);
                    var h = new Int32Array(g.buffer);
                    var i;
                    var k;
                    var m;
                    var n;
                    var o;
                    var p;
                    var q;
                    var r;
                    var s;
                    i = d[0];
                    k = d[1];
                    m = d[2];
                    n = d[3];
                    for(s = 0; s < e.length; s += 4){
                        o = l(e[s]);
                        p = l(e[s + 1]);
                        q = l(e[s + 2]);
                        r = l(e[s + 3]);
                        f.decrypt(o, p, q, r, h, s);
                        h[s] = l(h[s] ^ i);
                        h[s + 1] = l(h[s + 1] ^ k);
                        h[s + 2] = l(h[s + 2] ^ m);
                        h[s + 3] = l(h[s + 3] ^ n);
                        i = o;
                        k = p;
                        m = q;
                        n = r;
                    }
                    return g;
                };
                var n = (function() {
                    function a(b, c, d, e) {
                        var f = a.STEP;
                        var h = new Int32Array(b.buffer);
                        var i = new Uint8Array(b.byteLength);
                        var j = 0;
                        this.asyncStream_ = new k();
                        this.asyncStream_.push(this.decryptChunk_(h.subarray(j, j + f), c, d, i));
                        for(j = f; j < h.length; j += f){
                            d = new Uint32Array([
                                l(h[j - 4]),
                                l(h[j - 3]),
                                l(h[j - 2]),
                                l(h[j - 1]), 
                            ]);
                            this.asyncStream_.push(this.decryptChunk_(h.subarray(j, j + f), c, d, i));
                        }
                        this.asyncStream_.push(function() {
                            e(null, g(i));
                        });
                    }
                    var b = a.prototype;
                    b.decryptChunk_ = function a(b, c, d, e) {
                        return function() {
                            var a = m(b, c, d);
                            e.set(a, b.byteOffset);
                        };
                    };
                    c(a, null, [
                        {
                            key: "STEP",
                            get: function a() {
                                return 32000;
                            }
                        }, 
                    ]);
                    return a;
                })();
                var o = function a(b) {
                    var c = {};
                    Object.keys(b).forEach(function(a) {
                        var d = b[a];
                        if (ArrayBuffer.isView(d)) {
                            c[a] = {
                                bytes: d.buffer,
                                byteOffset: d.byteOffset,
                                byteLength: d.byteLength
                            };
                        } else {
                            c[a] = d;
                        }
                    });
                    return c;
                };
                self.onmessage = function(a) {
                    var b = a.data;
                    var c = new Uint8Array(b.encrypted.bytes, b.encrypted.byteOffset, b.encrypted.byteLength);
                    var d = new Uint32Array(b.key.bytes, b.key.byteOffset, b.key.byteLength / 4);
                    var e = new Uint32Array(b.iv.bytes, b.iv.byteOffset, b.iv.byteLength / 4);
                    new n(c, d, e, function(a, c) {
                        self.postMessage(o({
                            source: b.source,
                            decrypted: c
                        }), [
                            c.buffer
                        ]);
                    });
                };
            }));
            var h9 = gy(h8);
            var ia = function a(b) {
                var c = b["default"] ? "main" : "alternative";
                if (b.characteristics && b.characteristics.indexOf("public.accessibility.describes-video") >= 0) {
                    c = "main-desc";
                }
                return c;
            };
            var ib = function a(b, c) {
                b.abort();
                b.pause();
                if (c && c.activePlaylistLoader) {
                    c.activePlaylistLoader.pause();
                    c.activePlaylistLoader = null;
                }
            };
            var ic = function a(b, c) {
                c.activePlaylistLoader = b;
                b.load();
            };
            var id = function a(b, c) {
                return function() {
                    var a = c.segmentLoaders, d = a[b], e = a.main, f = c.mediaTypes[b];
                    var g = f.activeTrack();
                    var h = f.getActiveGroup();
                    var i = f.activePlaylistLoader;
                    var j = f.lastGroup_;
                    if (h && j && h.id === j.id) {
                        return;
                    }
                    f.lastGroup_ = h;
                    f.lastTrack_ = g;
                    ib(d, f);
                    if (!h || h.isMasterPlaylist) {
                        return;
                    }
                    if (!h.playlistLoader) {
                        if (i) {
                            e.resetEverything();
                        }
                        return;
                    }
                    d.resyncLoader();
                    ic(h.playlistLoader, f);
                };
            };
            var ie = function a(b, c) {
                return function() {
                    var a = c.segmentLoaders[b], d = c.mediaTypes[b];
                    d.lastGroup_ = null;
                    a.abort();
                    a.pause();
                };
            };
            var ig = function a(b, c) {
                return function() {
                    var a = c.masterPlaylistLoader, d = c.segmentLoaders, e = d[b], f = d.main, g = c.mediaTypes[b];
                    var h = g.activeTrack();
                    var i = g.getActiveGroup();
                    var j = g.activePlaylistLoader;
                    var k = g.lastTrack_;
                    if (k && h && k.id === h.id) {
                        return;
                    }
                    g.lastGroup_ = i;
                    g.lastTrack_ = h;
                    ib(e, g);
                    if (!i) {
                        return;
                    }
                    if (i.isMasterPlaylist) {
                        if (!h || !k || h.id === k.id) {
                            return;
                        }
                        var l = c.vhs.masterPlaylistController_;
                        var m = l.selectPlaylist();
                        if (l.media() === m) {
                            return;
                        }
                        g.logger_("track change. Switching master audio from " + k.id + " to " + h.id);
                        a.pause();
                        f.resetEverything();
                        l.fastQualityChange_(m);
                        return;
                    }
                    if (b === "AUDIO") {
                        if (!i.playlistLoader) {
                            f.setAudio(true);
                            f.resetEverything();
                            return;
                        }
                        e.setAudio(true);
                        f.setAudio(false);
                    }
                    if (j === i.playlistLoader) {
                        ic(i.playlistLoader, g);
                        return;
                    }
                    if (e.track) {
                        e.track(h);
                    }
                    e.resetEverything();
                    ic(i.playlistLoader, g);
                };
            };
            var ih = {
                AUDIO: function a(b, c) {
                    return function() {
                        var a = c.segmentLoaders[b], d = c.mediaTypes[b], e = c.blacklistCurrentPlaylist;
                        ib(a, d);
                        var f = d.activeTrack();
                        var g = d.activeGroup();
                        var h = (g.filter(function(a) {
                            return a["default"];
                        })[0] || g[0]).id;
                        var i = d.tracks[h];
                        if (f === i) {
                            e({
                                message: "Problem encountered loading the default audio track."
                            });
                            return;
                        }
                        eV.log.warn("Problem encountered loading the alternate audio track." + "Switching back to default.");
                        for(var j in d.tracks){
                            d.tracks[j].enabled = d.tracks[j] === i;
                        }
                        d.onTrackChanged();
                    };
                },
                SUBTITLES: function a(b, c) {
                    return function() {
                        var a = c.segmentLoaders[b], d = c.mediaTypes[b];
                        eV.log.warn("Problem encountered loading the subtitle track." + "Disabling subtitle track.");
                        ib(a, d);
                        var e = d.activeTrack();
                        if (e) {
                            e.mode = "disabled";
                        }
                        d.onTrackChanged();
                    };
                }
            };
            var ii = {
                AUDIO: function a(b, c, d) {
                    if (!c) {
                        return;
                    }
                    var e = d.tech, f = d.requestOptions, g = d.segmentLoaders[b];
                    c.on("loadedmetadata", function() {
                        var a = c.media();
                        g.playlist(a, f);
                        if (!e.paused() || (a.endList && e.preload() !== "none")) {
                            g.load();
                        }
                    });
                    c.on("loadedplaylist", function() {
                        g.playlist(c.media(), f);
                        if (!e.paused()) {
                            g.load();
                        }
                    });
                    c.on("error", ih[b](b, d));
                },
                SUBTITLES: function a(b, c, d) {
                    var e = d.tech, f = d.requestOptions, g = d.segmentLoaders[b], h = d.mediaTypes[b];
                    c.on("loadedmetadata", function() {
                        var a = c.media();
                        g.playlist(a, f);
                        g.track(h.activeTrack());
                        if (!e.paused() || (a.endList && e.preload() !== "none")) {
                            g.load();
                        }
                    });
                    c.on("loadedplaylist", function() {
                        g.playlist(c.media(), f);
                        if (!e.paused()) {
                            g.load();
                        }
                    });
                    c.on("error", ih[b](b, d));
                }
            };
            var ij = {
                AUDIO: function a(b, c) {
                    var d = c.vhs, e = c.sourceType, f = c.segmentLoaders[b], g = c.requestOptions, h = c.master.mediaGroups, i = c.mediaTypes[b], j = i.groups, k = i.tracks, l = i.logger_, m = c.masterPlaylistLoader;
                    var n = fA(m.master);
                    if (!h[b] || Object.keys(h[b]).length === 0) {
                        h[b] = {
                            main: {
                                default: {
                                    default: true
                                }
                            }
                        };
                        if (n) {
                            h[b].main["default"].playlists = m.master.playlists;
                        }
                    }
                    for(var o in h[b]){
                        if (!j[o]) {
                            j[o] = [];
                        }
                        for(var p in h[b][o]){
                            var q = h[b][o][p];
                            var r = void 0;
                            if (n) {
                                l("AUDIO group '" + o + "' label '" + p + "' is a master playlist");
                                q.isMasterPlaylist = true;
                                r = null;
                            } else if (e === "vhs-json" && q.playlists) {
                                r = new fV(q.playlists[0], d, g);
                            } else if (q.resolvedUri) {
                                r = new fV(q.resolvedUri, d, g);
                            } else if (q.playlists && e === "dash") {
                                r = new gt(q.playlists[0], d, g, m);
                            } else {
                                r = null;
                            }
                            q = eV.mergeOptions({
                                id: p,
                                playlistLoader: r
                            }, q);
                            ii[b](b, q.playlistLoader, c);
                            j[o].push(q);
                            if (typeof k[p] === "undefined") {
                                var s = new eV.AudioTrack({
                                    id: p,
                                    kind: ia(q),
                                    enabled: false,
                                    language: q.language,
                                    default: q["default"],
                                    label: p
                                });
                                k[p] = s;
                            }
                        }
                    }
                    f.on("error", ih[b](b, c));
                },
                SUBTITLES: function a(b, c) {
                    var d = c.tech, e = c.vhs, f = c.sourceType, g = c.segmentLoaders[b], h = c.requestOptions, i = c.master.mediaGroups, j = c.mediaTypes[b], k = j.groups, l = j.tracks, m = c.masterPlaylistLoader;
                    for(var n in i[b]){
                        if (!k[n]) {
                            k[n] = [];
                        }
                        for(var o in i[b][n]){
                            if (i[b][n][o].forced) {
                                continue;
                            }
                            var p = i[b][n][o];
                            var q = void 0;
                            if (f === "hls") {
                                q = new fV(p.resolvedUri, e, h);
                            } else if (f === "dash") {
                                var r = p.playlists.filter(function(a) {
                                    return a.excludeUntil !== Infinity;
                                });
                                if (!r.length) {
                                    return;
                                }
                                q = new gt(p.playlists[0], e, h, m);
                            } else if (f === "vhs-json") {
                                q = new fV(p.playlists ? p.playlists[0] : p.resolvedUri, e, h);
                            }
                            p = eV.mergeOptions({
                                id: o,
                                playlistLoader: q
                            }, p);
                            ii[b](b, p.playlistLoader, c);
                            k[n].push(p);
                            if (typeof l[o] === "undefined") {
                                var s = d.addRemoteTextTrack({
                                    id: o,
                                    kind: "subtitles",
                                    default: p["default"] && p.autoselect,
                                    language: p.language,
                                    label: o
                                }, false).track;
                                l[o] = s;
                            }
                        }
                    }
                    g.on("error", ih[b](b, c));
                },
                "CLOSED-CAPTIONS": function a(b, c) {
                    var d = c.tech, e = c.master.mediaGroups, f = c.mediaTypes[b], g = f.groups, h = f.tracks;
                    for(var i in e[b]){
                        if (!g[i]) {
                            g[i] = [];
                        }
                        for(var j in e[b][i]){
                            var k = e[b][i][j];
                            if (!/^(?:CC|SERVICE)/.test(k.instreamId)) {
                                continue;
                            }
                            var l = (d.options_.vhs && d.options_.vhs.captionServices) || {};
                            var m = {
                                label: j,
                                language: k.language,
                                instreamId: k.instreamId,
                                default: k["default"] && k.autoselect
                            };
                            if (l[m.instreamId]) {
                                m = eV.mergeOptions(m, l[m.instreamId]);
                            }
                            if (m["default"] === undefined) {
                                delete m["default"];
                            }
                            g[i].push(eV.mergeOptions({
                                id: j
                            }, k));
                            if (typeof h[j] === "undefined") {
                                var n = d.addRemoteTextTrack({
                                    id: m.instreamId,
                                    kind: "captions",
                                    default: m["default"],
                                    language: m.language,
                                    label: m.label
                                }, false).track;
                                h[j] = n;
                            }
                        }
                    }
                }
            };
            var ik = function a(b, c) {
                for(var d = 0; d < b.length; d++){
                    if (fy(c, b[d])) {
                        return true;
                    }
                    if (b[d].playlists && a(b[d].playlists, c)) {
                        return true;
                    }
                }
                return false;
            };
            var il = function a(b, c) {
                return function(a) {
                    var d = c.masterPlaylistLoader, e = c.mediaTypes[b].groups;
                    var f = d.media();
                    if (!f) {
                        return null;
                    }
                    var g = null;
                    if (f.attributes[b]) {
                        g = e[f.attributes[b]];
                    }
                    var h = Object.keys(e);
                    if (!g) {
                        if (b === "AUDIO" && h.length > 1 && fA(c.master)) {
                            for(var i = 0; i < h.length; i++){
                                var j = e[h[i]];
                                if (ik(j, f)) {
                                    g = j;
                                    break;
                                }
                            }
                        } else if (e.main) {
                            g = e.main;
                        } else if (h.length === 1) {
                            g = e[h[0]];
                        }
                    }
                    if (typeof a === "undefined") {
                        return g;
                    }
                    if (a === null || !g) {
                        return null;
                    }
                    return (g.filter(function(b) {
                        return b.id === a.id;
                    })[0] || null);
                };
            };
            var im = {
                AUDIO: function a(b, c) {
                    return function() {
                        var a = c.mediaTypes[b].tracks;
                        for(var d in a){
                            if (a[d].enabled) {
                                return a[d];
                            }
                        }
                        return null;
                    };
                },
                SUBTITLES: function a(b, c) {
                    return function() {
                        var a = c.mediaTypes[b].tracks;
                        for(var d in a){
                            if (a[d].mode === "showing" || a[d].mode === "hidden") {
                                return a[d];
                            }
                        }
                        return null;
                    };
                }
            };
            var io = function a(b, c) {
                var d = c.mediaTypes;
                return function() {
                    var a = d[b].activeTrack();
                    if (!a) {
                        return null;
                    }
                    return d[b].activeGroup(a);
                };
            };
            var ip = function a(b) {
                [
                    "AUDIO",
                    "SUBTITLES",
                    "CLOSED-CAPTIONS"
                ].forEach(function(a) {
                    ij[a](a, b);
                });
                var c = b.mediaTypes, d = b.masterPlaylistLoader, e = b.tech, f = b.vhs, g = b.segmentLoaders, h = g["AUDIO"], i = g.main;
                [
                    "AUDIO",
                    "SUBTITLES"
                ].forEach(function(a) {
                    c[a].activeGroup = il(a, b);
                    c[a].activeTrack = im[a](a, b);
                    c[a].onGroupChanged = id(a, b);
                    c[a].onGroupChanging = ie(a, b);
                    c[a].onTrackChanged = ig(a, b);
                    c[a].getActiveGroup = io(a, b);
                });
                var j = c.AUDIO.activeGroup();
                if (j) {
                    var k = (j.filter(function(a) {
                        return a["default"];
                    })[0] || j[0]).id;
                    c.AUDIO.tracks[k].enabled = true;
                    c.AUDIO.onGroupChanged();
                    c.AUDIO.onTrackChanged();
                    var l = c.AUDIO.getActiveGroup();
                    if (!l.playlistLoader) {
                        i.setAudio(true);
                    } else {
                        i.setAudio(false);
                        h.setAudio(true);
                    }
                }
                d.on("mediachange", function() {
                    [
                        "AUDIO",
                        "SUBTITLES"
                    ].forEach(function(a) {
                        return c[a].onGroupChanged();
                    });
                });
                d.on("mediachanging", function() {
                    [
                        "AUDIO",
                        "SUBTITLES"
                    ].forEach(function(a) {
                        return c[a].onGroupChanging();
                    });
                });
                var m = function a() {
                    c.AUDIO.onTrackChanged();
                    e.trigger({
                        type: "usage",
                        name: "vhs-audio-change"
                    });
                    e.trigger({
                        type: "usage",
                        name: "hls-audio-change"
                    });
                };
                e.audioTracks().addEventListener("change", m);
                e.remoteTextTracks().addEventListener("change", c.SUBTITLES.onTrackChanged);
                f.on("dispose", function() {
                    e.audioTracks().removeEventListener("change", m);
                    e.remoteTextTracks().removeEventListener("change", c.SUBTITLES.onTrackChanged);
                });
                e.clearTracks("audio");
                for(var n in c.AUDIO.tracks){
                    e.audioTracks().addTrack(c.AUDIO.tracks[n]);
                }
            };
            var iq = function a() {
                var b = {};
                [
                    "AUDIO",
                    "SUBTITLES",
                    "CLOSED-CAPTIONS"
                ].forEach(function(a) {
                    b[a] = {
                        groups: {},
                        tracks: {},
                        activePlaylistLoader: null,
                        activeGroup: hP,
                        activeTrack: hP,
                        getActiveGroup: hP,
                        onGroupChanged: hP,
                        onTrackChanged: hP,
                        lastTrack_: null,
                        logger_: e$("MediaGroups[" + a + "]")
                    };
                });
                return b;
            };
            var ir = 60 * 2;
            var is;
            var it = [
                "mediaRequests",
                "mediaRequestsAborted",
                "mediaRequestsTimedout",
                "mediaRequestsErrored",
                "mediaTransferDuration",
                "mediaBytesTransferred",
                "mediaAppends", 
            ];
            var iu = function a(b) {
                return (this.audioSegmentLoader_[b] + this.mainSegmentLoader_[b]);
            };
            var iv = function a(b) {
                var c = b.currentPlaylist, d = b.buffered, e = b.currentTime, f = b.nextPlaylist, g = b.bufferLowWaterLine, h = b.bufferHighWaterLine, i = b.duration, j = b.experimentalBufferBasedABR, k = b.log;
                if (!f) {
                    eV.log.warn("We received no playlist to switch to. Please check your stream.");
                    return false;
                }
                var l = "allowing switch " + ((c && c.id) || "null") + " -> " + f.id;
                if (!c) {
                    k(l + " as current playlist is not set");
                    return true;
                }
                if (f.id === c.id) {
                    return false;
                }
                var m = Boolean(e2(d, e).length);
                if (!c.endList) {
                    if (!m && typeof c.partTargetDuration === "number") {
                        k("not " + l + " as current playlist is live llhls, but currentTime isn't in buffered.");
                        return false;
                    }
                    k(l + " as current playlist is live");
                    return true;
                }
                var n = fb(d, e);
                var o = j ? gu.EXPERIMENTAL_MAX_BUFFER_LOW_WATER_LINE : gu.MAX_BUFFER_LOW_WATER_LINE;
                if (i < o) {
                    k(l + " as duration < max low water line (" + i + " < " + o + ")");
                    return true;
                }
                var p = f.attributes.BANDWIDTH;
                var q = c.attributes.BANDWIDTH;
                if (p < q && (!j || n < h)) {
                    var r = l + " as next bandwidth < current bandwidth (" + p + " < " + q + ")";
                    if (j) {
                        r += " and forwardBuffer < bufferHighWaterLine (" + n + " < " + h + ")";
                    }
                    k(r);
                    return true;
                }
                if ((!j || p > q) && n >= g) {
                    var s = l + " as forwardBuffer >= bufferLowWaterLine (" + n + " >= " + g + ")";
                    if (j) {
                        s += " and next bandwidth > current bandwidth (" + p + " > " + q + ")";
                    }
                    k(s);
                    return true;
                }
                k("not " + l + " as no switching criteria met");
                return false;
            };
            var iw = (function(a) {
                (0, j.Z)(b, a);
                function b(b) {
                    var c;
                    c = a.call(this) || this;
                    var d = b.src, f = b.handleManifestRedirects, g = b.withCredentials, h = b.tech, j = b.bandwidth, k = b.externVhs, l = b.useCueTags, m = b.blacklistDuration, n = b.enableLowInitialPlaylist, o = b.sourceType, p = b.cacheEncryptionKeys, q = b.experimentalBufferBasedABR, r = b.experimentalLeastPixelDiffSelector, s = b.captionServices;
                    if (!d) {
                        throw new Error("A non-empty playlist URL or JSON manifest string is required");
                    }
                    var t = b.maxPlaylistRetries;
                    if (t === null || typeof t === "undefined") {
                        t = Infinity;
                    }
                    is = k;
                    c.experimentalBufferBasedABR = Boolean(q);
                    c.experimentalLeastPixelDiffSelector = Boolean(r);
                    c.withCredentials = g;
                    c.tech_ = h;
                    c.vhs_ = h.vhs;
                    c.sourceType_ = o;
                    c.useCueTags_ = l;
                    c.blacklistDuration = m;
                    c.maxPlaylistRetries = t;
                    c.enableLowInitialPlaylist = n;
                    if (c.useCueTags_) {
                        c.cueTagsTrack_ = c.tech_.addTextTrack("metadata", "ad-cues");
                        c.cueTagsTrack_.inBandMetadataTrackDispatchType = "";
                    }
                    c.requestOptions_ = {
                        withCredentials: g,
                        handleManifestRedirects: f,
                        maxPlaylistRetries: t,
                        timeout: null
                    };
                    c.on("error", c.pauseLoading);
                    c.mediaTypes_ = iq();
                    c.mediaSource = new (e().MediaSource)();
                    c.handleDurationChange_ = c.handleDurationChange_.bind((0, i.Z)(c));
                    c.handleSourceOpen_ = c.handleSourceOpen_.bind((0, i.Z)(c));
                    c.handleSourceEnded_ = c.handleSourceEnded_.bind((0, i.Z)(c));
                    c.mediaSource.addEventListener("durationchange", c.handleDurationChange_);
                    c.mediaSource.addEventListener("sourceopen", c.handleSourceOpen_);
                    c.mediaSource.addEventListener("sourceended", c.handleSourceEnded_);
                    c.seekable_ = eV.createTimeRanges();
                    c.hasPlayed_ = false;
                    c.syncController_ = new h6(b);
                    c.segmentMetadataTrack_ = h.addRemoteTextTrack({
                        kind: "metadata",
                        label: "segment-metadata"
                    }, false).track;
                    c.decrypter_ = new h9();
                    c.sourceUpdater_ = new h$(c.mediaSource);
                    c.inbandTextTracks_ = {};
                    c.timelineChangeController_ = new h7();
                    var u = {
                        vhs: c.vhs_,
                        parse708captions: b.parse708captions,
                        captionServices: s,
                        mediaSource: c.mediaSource,
                        currentTime: c.tech_.currentTime.bind(c.tech_),
                        seekable: function a() {
                            return c.seekable();
                        },
                        seeking: function a() {
                            return c.tech_.seeking();
                        },
                        duration: function a() {
                            return c.duration();
                        },
                        hasPlayed: function a() {
                            return c.hasPlayed_;
                        },
                        goalBufferLength: function a() {
                            return c.goalBufferLength();
                        },
                        bandwidth: j,
                        syncController: c.syncController_,
                        decrypter: c.decrypter_,
                        sourceType: c.sourceType_,
                        inbandTextTracks: c.inbandTextTracks_,
                        cacheEncryptionKeys: p,
                        sourceUpdater: c.sourceUpdater_,
                        timelineChangeController: c.timelineChangeController_,
                        experimentalExactManifestTimings: b.experimentalExactManifestTimings
                    };
                    c.masterPlaylistLoader_ = c.sourceType_ === "dash" ? new gt(d, c.vhs_, c.requestOptions_) : new fV(d, c.vhs_, c.requestOptions_);
                    c.setupMasterPlaylistLoaderListeners_();
                    c.mainSegmentLoader_ = new hO(eV.mergeOptions(u, {
                        segmentMetadataTrack: c.segmentMetadataTrack_,
                        loaderType: "main"
                    }), b);
                    c.audioSegmentLoader_ = new hO(eV.mergeOptions(u, {
                        loaderType: "audio"
                    }), b);
                    c.subtitleSegmentLoader_ = new h1(eV.mergeOptions(u, {
                        loaderType: "vtt",
                        featuresNativeTextTracks: c.tech_.featuresNativeTextTracks
                    }), b);
                    c.setupSegmentLoaderListeners_();
                    if (c.experimentalBufferBasedABR) {
                        c.masterPlaylistLoader_.one("loadedplaylist", function() {
                            return c.startABRTimer_();
                        });
                        c.tech_.on("pause", function() {
                            return c.stopABRTimer_();
                        });
                        c.tech_.on("play", function() {
                            return c.startABRTimer_();
                        });
                    }
                    it.forEach(function(a) {
                        c[a + "_"] = iu.bind((0, i.Z)(c), a);
                    });
                    c.logger_ = e$("MPC");
                    c.triggeredFmp4Usage = false;
                    if (c.tech_.preload() === "none") {
                        c.loadOnPlay_ = function() {
                            c.loadOnPlay_ = null;
                            c.masterPlaylistLoader_.load();
                        };
                        c.tech_.one("play", c.loadOnPlay_);
                    } else {
                        c.masterPlaylistLoader_.load();
                    }
                    c.timeToLoadedData__ = -1;
                    c.mainAppendsToLoadedData__ = -1;
                    c.audioAppendsToLoadedData__ = -1;
                    var v = c.tech_.preload() === "none" ? "play" : "loadstart";
                    c.tech_.one(v, function() {
                        var a = Date.now();
                        c.tech_.one("loadeddata", function() {
                            c.timeToLoadedData__ = Date.now() - a;
                            c.mainAppendsToLoadedData__ = c.mainSegmentLoader_.mediaAppends;
                            c.audioAppendsToLoadedData__ = c.audioSegmentLoader_.mediaAppends;
                        });
                    });
                    return c;
                }
                var c = b.prototype;
                c.mainAppendsToLoadedData_ = function a() {
                    return this.mainAppendsToLoadedData__;
                };
                c.audioAppendsToLoadedData_ = function a() {
                    return this.audioAppendsToLoadedData__;
                };
                c.appendsToLoadedData_ = function a() {
                    var b = this.mainAppendsToLoadedData_();
                    var c = this.audioAppendsToLoadedData_();
                    if (b === -1 || c === -1) {
                        return -1;
                    }
                    return b + c;
                };
                c.timeToLoadedData_ = function a() {
                    return this.timeToLoadedData__;
                };
                c.checkABR_ = function a() {
                    var b = this.selectPlaylist();
                    if (b && this.shouldSwitchToMedia_(b)) {
                        this.switchMedia_(b, "abr");
                    }
                };
                c.switchMedia_ = function a(b, c, d) {
                    var e = this.media();
                    var f = e && (e.id || e.uri);
                    var g = b.id || b.uri;
                    if (f && f !== g) {
                        this.logger_("switch media " + f + " -> " + g + " from " + c);
                        this.tech_.trigger({
                            type: "usage",
                            name: "vhs-rendition-change-" + c
                        });
                    }
                    this.masterPlaylistLoader_.media(b, d);
                };
                c.startABRTimer_ = function a() {
                    var b = this;
                    this.stopABRTimer_();
                    this.abrTimer_ = e().setInterval(function() {
                        return b.checkABR_();
                    }, 250);
                };
                c.stopABRTimer_ = function a() {
                    if (this.tech_.scrubbing && this.tech_.scrubbing()) {
                        return;
                    }
                    e().clearInterval(this.abrTimer_);
                    this.abrTimer_ = null;
                };
                c.getAudioTrackPlaylists_ = function a() {
                    var b = this.master();
                    var c = (b && b.playlists) || [];
                    if (!b || !b.mediaGroups || !b.mediaGroups.AUDIO) {
                        return c;
                    }
                    var d = b.mediaGroups.AUDIO;
                    var e = Object.keys(d);
                    var f;
                    if (Object.keys(this.mediaTypes_.AUDIO.groups).length) {
                        f = this.mediaTypes_.AUDIO.activeTrack();
                    } else {
                        var g = d.main || (e.length && d[e[0]]);
                        for(var h in g){
                            if (g[h]["default"]) {
                                f = {
                                    label: h
                                };
                                break;
                            }
                        }
                    }
                    if (!f) {
                        return c;
                    }
                    var i = [];
                    for(var j in d){
                        if (d[j][f.label]) {
                            var k = d[j][f.label];
                            if (k.playlists && k.playlists.length) {
                                i.push.apply(i, k.playlists);
                            } else if (k.uri) {
                                i.push(k);
                            } else if (b.playlists.length) {
                                for(var l = 0; l < b.playlists.length; l++){
                                    var m = b.playlists[l];
                                    if (m.attributes && m.attributes.AUDIO && m.attributes.AUDIO === j) {
                                        i.push(m);
                                    }
                                }
                            }
                        }
                    }
                    if (!i.length) {
                        return c;
                    }
                    return i;
                };
                c.setupMasterPlaylistLoaderListeners_ = function a() {
                    var b = this;
                    this.masterPlaylistLoader_.on("loadedmetadata", function() {
                        var a = b.masterPlaylistLoader_.media();
                        var c = a.targetDuration * 1.5 * 1000;
                        if (fx(b.masterPlaylistLoader_.master, b.masterPlaylistLoader_.media())) {
                            b.requestOptions_.timeout = 0;
                        } else {
                            b.requestOptions_.timeout = c;
                        }
                        if (a.endList && b.tech_.preload() !== "none") {
                            b.mainSegmentLoader_.playlist(a, b.requestOptions_);
                            b.mainSegmentLoader_.load();
                        }
                        ip({
                            sourceType: b.sourceType_,
                            segmentLoaders: {
                                AUDIO: b.audioSegmentLoader_,
                                SUBTITLES: b.subtitleSegmentLoader_,
                                main: b.mainSegmentLoader_
                            },
                            tech: b.tech_,
                            requestOptions: b.requestOptions_,
                            masterPlaylistLoader: b.masterPlaylistLoader_,
                            vhs: b.vhs_,
                            master: b.master(),
                            mediaTypes: b.mediaTypes_,
                            blacklistCurrentPlaylist: b.blacklistCurrentPlaylist.bind(b)
                        });
                        b.triggerPresenceUsage_(b.master(), a);
                        b.setupFirstPlay();
                        if (!b.mediaTypes_.AUDIO.activePlaylistLoader || b.mediaTypes_.AUDIO.activePlaylistLoader.media()) {
                            b.trigger("selectedinitialmedia");
                        } else {
                            b.mediaTypes_.AUDIO.activePlaylistLoader.one("loadedmetadata", function() {
                                b.trigger("selectedinitialmedia");
                            });
                        }
                    });
                    this.masterPlaylistLoader_.on("loadedplaylist", function() {
                        if (b.loadOnPlay_) {
                            b.tech_.off("play", b.loadOnPlay_);
                        }
                        var a = b.masterPlaylistLoader_.media();
                        if (!a) {
                            b.excludeUnsupportedVariants_();
                            var c;
                            if (b.enableLowInitialPlaylist) {
                                c = b.selectInitialPlaylist();
                            }
                            if (!c) {
                                c = b.selectPlaylist();
                            }
                            if (!c || !b.shouldSwitchToMedia_(c)) {
                                return;
                            }
                            b.initialMedia_ = c;
                            b.switchMedia_(b.initialMedia_, "initial");
                            var d = b.sourceType_ === "vhs-json" && b.initialMedia_.segments;
                            if (!d) {
                                return;
                            }
                            a = b.initialMedia_;
                        }
                        b.handleUpdatedMediaPlaylist(a);
                    });
                    this.masterPlaylistLoader_.on("error", function() {
                        b.blacklistCurrentPlaylist(b.masterPlaylistLoader_.error);
                    });
                    this.masterPlaylistLoader_.on("mediachanging", function() {
                        b.mainSegmentLoader_.abort();
                        b.mainSegmentLoader_.pause();
                    });
                    this.masterPlaylistLoader_.on("mediachange", function() {
                        var a = b.masterPlaylistLoader_.media();
                        var c = a.targetDuration * 1.5 * 1000;
                        if (fx(b.masterPlaylistLoader_.master, b.masterPlaylistLoader_.media())) {
                            b.requestOptions_.timeout = 0;
                        } else {
                            b.requestOptions_.timeout = c;
                        }
                        b.mainSegmentLoader_.playlist(a, b.requestOptions_);
                        b.mainSegmentLoader_.load();
                        b.tech_.trigger({
                            type: "mediachange",
                            bubbles: true
                        });
                    });
                    this.masterPlaylistLoader_.on("playlistunchanged", function() {
                        var a = b.masterPlaylistLoader_.media();
                        if (a.lastExcludeReason_ === "playlist-unchanged") {
                            return;
                        }
                        var c = b.stuckAtPlaylistEnd_(a);
                        if (c) {
                            b.blacklistCurrentPlaylist({
                                message: "Playlist no longer updating.",
                                reason: "playlist-unchanged"
                            });
                            b.tech_.trigger("playliststuck");
                        }
                    });
                    this.masterPlaylistLoader_.on("renditiondisabled", function() {
                        b.tech_.trigger({
                            type: "usage",
                            name: "vhs-rendition-disabled"
                        });
                        b.tech_.trigger({
                            type: "usage",
                            name: "hls-rendition-disabled"
                        });
                    });
                    this.masterPlaylistLoader_.on("renditionenabled", function() {
                        b.tech_.trigger({
                            type: "usage",
                            name: "vhs-rendition-enabled"
                        });
                        b.tech_.trigger({
                            type: "usage",
                            name: "hls-rendition-enabled"
                        });
                    });
                };
                c.handleUpdatedMediaPlaylist = function a(b) {
                    if (this.useCueTags_) {
                        this.updateAdCues_(b);
                    }
                    this.mainSegmentLoader_.playlist(b, this.requestOptions_);
                    this.updateDuration(!b.endList);
                    if (!this.tech_.paused()) {
                        this.mainSegmentLoader_.load();
                        if (this.audioSegmentLoader_) {
                            this.audioSegmentLoader_.load();
                        }
                    }
                };
                c.triggerPresenceUsage_ = function a(b, c) {
                    var d = b.mediaGroups || {};
                    var e = true;
                    var f = Object.keys(d.AUDIO);
                    for(var g in d.AUDIO){
                        for(var h in d.AUDIO[g]){
                            var i = d.AUDIO[g][h];
                            if (!i.uri) {
                                e = false;
                            }
                        }
                    }
                    if (e) {
                        this.tech_.trigger({
                            type: "usage",
                            name: "vhs-demuxed"
                        });
                        this.tech_.trigger({
                            type: "usage",
                            name: "hls-demuxed"
                        });
                    }
                    if (Object.keys(d.SUBTITLES).length) {
                        this.tech_.trigger({
                            type: "usage",
                            name: "vhs-webvtt"
                        });
                        this.tech_.trigger({
                            type: "usage",
                            name: "hls-webvtt"
                        });
                    }
                    if (is.Playlist.isAes(c)) {
                        this.tech_.trigger({
                            type: "usage",
                            name: "vhs-aes"
                        });
                        this.tech_.trigger({
                            type: "usage",
                            name: "hls-aes"
                        });
                    }
                    if (f.length && Object.keys(d.AUDIO[f[0]]).length > 1) {
                        this.tech_.trigger({
                            type: "usage",
                            name: "vhs-alternate-audio"
                        });
                        this.tech_.trigger({
                            type: "usage",
                            name: "hls-alternate-audio"
                        });
                    }
                    if (this.useCueTags_) {
                        this.tech_.trigger({
                            type: "usage",
                            name: "vhs-playlist-cue-tags"
                        });
                        this.tech_.trigger({
                            type: "usage",
                            name: "hls-playlist-cue-tags"
                        });
                    }
                };
                c.shouldSwitchToMedia_ = function a(b) {
                    var c = this.masterPlaylistLoader_.media() || this.masterPlaylistLoader_.pendingMedia_;
                    var d = this.tech_.currentTime();
                    var e = this.bufferLowWaterLine();
                    var f = this.bufferHighWaterLine();
                    var g = this.tech_.buffered();
                    return iv({
                        buffered: g,
                        currentTime: d,
                        currentPlaylist: c,
                        nextPlaylist: b,
                        bufferLowWaterLine: e,
                        bufferHighWaterLine: f,
                        duration: this.duration(),
                        experimentalBufferBasedABR: this.experimentalBufferBasedABR,
                        log: this.logger_
                    });
                };
                c.setupSegmentLoaderListeners_ = function a() {
                    var b = this;
                    if (!this.experimentalBufferBasedABR) {
                        this.mainSegmentLoader_.on("bandwidthupdate", function() {
                            var a = b.selectPlaylist();
                            if (b.shouldSwitchToMedia_(a)) {
                                b.switchMedia_(a, "bandwidthupdate");
                            }
                            b.tech_.trigger("bandwidthupdate");
                        });
                        this.mainSegmentLoader_.on("progress", function() {
                            b.trigger("progress");
                        });
                    }
                    this.mainSegmentLoader_.on("error", function() {
                        b.blacklistCurrentPlaylist(b.mainSegmentLoader_.error());
                    });
                    this.mainSegmentLoader_.on("appenderror", function() {
                        b.error = b.mainSegmentLoader_.error_;
                        b.trigger("error");
                    });
                    this.mainSegmentLoader_.on("syncinfoupdate", function() {
                        b.onSyncInfoUpdate_();
                    });
                    this.mainSegmentLoader_.on("timestampoffset", function() {
                        b.tech_.trigger({
                            type: "usage",
                            name: "vhs-timestamp-offset"
                        });
                        b.tech_.trigger({
                            type: "usage",
                            name: "hls-timestamp-offset"
                        });
                    });
                    this.audioSegmentLoader_.on("syncinfoupdate", function() {
                        b.onSyncInfoUpdate_();
                    });
                    this.audioSegmentLoader_.on("appenderror", function() {
                        b.error = b.audioSegmentLoader_.error_;
                        b.trigger("error");
                    });
                    this.mainSegmentLoader_.on("ended", function() {
                        b.logger_("main segment loader ended");
                        b.onEndOfStream();
                    });
                    this.mainSegmentLoader_.on("earlyabort", function(a) {
                        if (b.experimentalBufferBasedABR) {
                            return;
                        }
                        b.delegateLoaders_("all", [
                            "abort"
                        ]);
                        b.blacklistCurrentPlaylist({
                            message: "Aborted early because there isn't enough bandwidth to complete the " + "request without rebuffering."
                        }, ir);
                    });
                    var c = function a() {
                        if (!b.sourceUpdater_.hasCreatedSourceBuffers()) {
                            return b.tryToCreateSourceBuffers_();
                        }
                        var c = b.getCodecsOrExclude_();
                        if (!c) {
                            return;
                        }
                        b.sourceUpdater_.addOrChangeSourceBuffers(c);
                    };
                    this.mainSegmentLoader_.on("trackinfo", c);
                    this.audioSegmentLoader_.on("trackinfo", c);
                    this.mainSegmentLoader_.on("fmp4", function() {
                        if (!b.triggeredFmp4Usage) {
                            b.tech_.trigger({
                                type: "usage",
                                name: "vhs-fmp4"
                            });
                            b.tech_.trigger({
                                type: "usage",
                                name: "hls-fmp4"
                            });
                            b.triggeredFmp4Usage = true;
                        }
                    });
                    this.audioSegmentLoader_.on("fmp4", function() {
                        if (!b.triggeredFmp4Usage) {
                            b.tech_.trigger({
                                type: "usage",
                                name: "vhs-fmp4"
                            });
                            b.tech_.trigger({
                                type: "usage",
                                name: "hls-fmp4"
                            });
                            b.triggeredFmp4Usage = true;
                        }
                    });
                    this.audioSegmentLoader_.on("ended", function() {
                        b.logger_("audioSegmentLoader ended");
                        b.onEndOfStream();
                    });
                };
                c.mediaSecondsLoaded_ = function a() {
                    return Math.max(this.audioSegmentLoader_.mediaSecondsLoaded + this.mainSegmentLoader_.mediaSecondsLoaded);
                };
                c.load = function a() {
                    this.mainSegmentLoader_.load();
                    if (this.mediaTypes_.AUDIO.activePlaylistLoader) {
                        this.audioSegmentLoader_.load();
                    }
                    if (this.mediaTypes_.SUBTITLES.activePlaylistLoader) {
                        this.subtitleSegmentLoader_.load();
                    }
                };
                c.smoothQualityChange_ = function a(b) {
                    if (b === void 0) {
                        b = this.selectPlaylist();
                    }
                    this.fastQualityChange_(b);
                };
                c.fastQualityChange_ = function a(b) {
                    var c = this;
                    if (b === void 0) {
                        b = this.selectPlaylist();
                    }
                    if (b === this.masterPlaylistLoader_.media()) {
                        this.logger_("skipping fastQualityChange because new media is same as old");
                        return;
                    }
                    this.switchMedia_(b, "fast-quality");
                    this.mainSegmentLoader_.resetEverything(function() {
                        if (eV.browser.IE_VERSION || eV.browser.IS_EDGE) {
                            c.tech_.setCurrentTime(c.tech_.currentTime() + 0.04);
                        } else {
                            c.tech_.setCurrentTime(c.tech_.currentTime());
                        }
                    });
                };
                c.play = function a() {
                    if (this.setupFirstPlay()) {
                        return;
                    }
                    if (this.tech_.ended()) {
                        this.tech_.setCurrentTime(0);
                    }
                    if (this.hasPlayed_) {
                        this.load();
                    }
                    var b = this.tech_.seekable();
                    if (this.tech_.duration() === Infinity) {
                        if (this.tech_.currentTime() < b.start(0)) {
                            return this.tech_.setCurrentTime(b.end(b.length - 1));
                        }
                    }
                };
                c.setupFirstPlay = function a() {
                    var b = this;
                    var c = this.masterPlaylistLoader_.media();
                    if (!c || this.tech_.paused() || this.hasPlayed_) {
                        return false;
                    }
                    if (!c.endList) {
                        var d = this.seekable();
                        if (!d.length) {
                            return false;
                        }
                        if (eV.browser.IE_VERSION && this.tech_.readyState() === 0) {
                            this.tech_.one("loadedmetadata", function() {
                                b.trigger("firstplay");
                                b.tech_.setCurrentTime(d.end(0));
                                b.hasPlayed_ = true;
                            });
                            return false;
                        }
                        this.trigger("firstplay");
                        this.tech_.setCurrentTime(d.end(0));
                    }
                    this.hasPlayed_ = true;
                    this.load();
                    return true;
                };
                c.handleSourceOpen_ = function a() {
                    this.tryToCreateSourceBuffers_();
                    if (this.tech_.autoplay()) {
                        var b = this.tech_.play();
                        if (typeof b !== "undefined" && typeof b.then === "function") {
                            b.then(null, function(a) {});
                        }
                    }
                    this.trigger("sourceopen");
                };
                c.handleSourceEnded_ = function a() {
                    if (!this.inbandTextTracks_.metadataTrack_) {
                        return;
                    }
                    var b = this.inbandTextTracks_.metadataTrack_.cues;
                    if (!b || !b.length) {
                        return;
                    }
                    var c = this.duration();
                    b[b.length - 1].endTime = isNaN(c) || Math.abs(c) === Infinity ? Number.MAX_VALUE : c;
                };
                c.handleDurationChange_ = function a() {
                    this.tech_.trigger("durationchange");
                };
                c.onEndOfStream = function a() {
                    var b = this.mainSegmentLoader_.ended_;
                    if (this.mediaTypes_.AUDIO.activePlaylistLoader) {
                        var c = this.mainSegmentLoader_.getCurrentMediaInfo_();
                        if (!c || c.hasVideo) {
                            b = b && this.audioSegmentLoader_.ended_;
                        } else {
                            b = this.audioSegmentLoader_.ended_;
                        }
                    }
                    if (!b) {
                        return;
                    }
                    this.stopABRTimer_();
                    this.sourceUpdater_.endOfStream();
                };
                c.stuckAtPlaylistEnd_ = function a(b) {
                    var c = this.seekable();
                    if (!c.length) {
                        return false;
                    }
                    var d = this.syncController_.getExpiredTime(b, this.duration());
                    if (d === null) {
                        return false;
                    }
                    var e = is.Playlist.playlistEnd(b, d);
                    var f = this.tech_.currentTime();
                    var g = this.tech_.buffered();
                    if (!g.length) {
                        return (e - f <= e0);
                    }
                    var h = g.end(g.length - 1);
                    return (h - f <= e0 && e - h <= e0);
                };
                c.blacklistCurrentPlaylist = function a(b, c) {
                    if (b === void 0) {
                        b = {};
                    }
                    var d = b.playlist || this.masterPlaylistLoader_.media();
                    c = c || b.blacklistDuration || this.blacklistDuration;
                    if (!d) {
                        this.error = b;
                        if (this.mediaSource.readyState !== "open") {
                            this.trigger("error");
                        } else {
                            this.sourceUpdater_.endOfStream("network");
                        }
                        return;
                    }
                    d.playlistErrors_++;
                    var e = this.masterPlaylistLoader_.master.playlists;
                    var f = e.filter(fs);
                    var g = f.length === 1 && f[0] === d;
                    if (e.length === 1 && c !== Infinity) {
                        eV.log.warn("Problem encountered with playlist " + d.id + ". " + "Trying again since it is the only playlist.");
                        this.tech_.trigger("retryplaylist");
                        return this.masterPlaylistLoader_.load(g);
                    }
                    if (g) {
                        var h = false;
                        e.forEach(function(a) {
                            if (a === d) {
                                return;
                            }
                            var b = a.excludeUntil;
                            if (typeof b !== "undefined" && b !== Infinity) {
                                h = true;
                                delete a.excludeUntil;
                            }
                        });
                        if (h) {
                            eV.log.warn("Removing other playlists from the exclusion list because the last " + "rendition is about to be excluded.");
                            this.tech_.trigger("retryplaylist");
                        }
                    }
                    var i;
                    if (d.playlistErrors_ > this.maxPlaylistRetries) {
                        i = Infinity;
                    } else {
                        i = Date.now() + c * 1000;
                    }
                    d.excludeUntil = i;
                    if (b.reason) {
                        d.lastExcludeReason_ = b.reason;
                    }
                    this.tech_.trigger("blacklistplaylist");
                    this.tech_.trigger({
                        type: "usage",
                        name: "vhs-rendition-blacklisted"
                    });
                    this.tech_.trigger({
                        type: "usage",
                        name: "hls-rendition-blacklisted"
                    });
                    var j = this.selectPlaylist();
                    if (!j) {
                        this.error = "Playback cannot continue. No available working or supported playlists.";
                        this.trigger("error");
                        return;
                    }
                    var k = b.internal ? this.logger_ : eV.log.warn;
                    var l = b.message ? " " + b.message : "";
                    k((b.internal ? "Internal problem" : "Problem") + " encountered with playlist " + d.id + "." + (l + " Switching to playlist " + j.id + "."));
                    if (j.attributes.AUDIO !== d.attributes.AUDIO) {
                        this.delegateLoaders_("audio", [
                            "abort",
                            "pause"
                        ]);
                    }
                    if (j.attributes.SUBTITLES !== d.attributes.SUBTITLES) {
                        this.delegateLoaders_("subtitle", [
                            "abort",
                            "pause", 
                        ]);
                    }
                    this.delegateLoaders_("main", [
                        "abort",
                        "pause"
                    ]);
                    var m = (j.targetDuration / 2) * 1000 || 5 * 1000;
                    var n = typeof j.lastRequest === "number" && Date.now() - j.lastRequest <= m;
                    return this.switchMedia_(j, "exclude", g || n);
                };
                c.pauseLoading = function a() {
                    this.delegateLoaders_("all", [
                        "abort",
                        "pause"
                    ]);
                    this.stopABRTimer_();
                };
                c.delegateLoaders_ = function a(b, c) {
                    var d = this;
                    var e = [];
                    var f = b === "all";
                    if (f || b === "main") {
                        e.push(this.masterPlaylistLoader_);
                    }
                    var g = [];
                    if (f || b === "audio") {
                        g.push("AUDIO");
                    }
                    if (f || b === "subtitle") {
                        g.push("CLOSED-CAPTIONS");
                        g.push("SUBTITLES");
                    }
                    g.forEach(function(a) {
                        var b = d.mediaTypes_[a] && d.mediaTypes_[a].activePlaylistLoader;
                        if (b) {
                            e.push(b);
                        }
                    });
                    [
                        "main",
                        "audio",
                        "subtitle"
                    ].forEach(function(a) {
                        var c = d[a + "SegmentLoader_"];
                        if (c && (b === a || b === "all")) {
                            e.push(c);
                        }
                    });
                    e.forEach(function(a) {
                        return c.forEach(function(b) {
                            if (typeof a[b] === "function") {
                                a[b]();
                            }
                        });
                    });
                };
                c.setCurrentTime = function a(b) {
                    var c = e2(this.tech_.buffered(), b);
                    if (!(this.masterPlaylistLoader_ && this.masterPlaylistLoader_.media())) {
                        return 0;
                    }
                    if (!this.masterPlaylistLoader_.media().segments) {
                        return 0;
                    }
                    if (c && c.length) {
                        return b;
                    }
                    this.mainSegmentLoader_.resetEverything();
                    this.mainSegmentLoader_.abort();
                    if (this.mediaTypes_.AUDIO.activePlaylistLoader) {
                        this.audioSegmentLoader_.resetEverything();
                        this.audioSegmentLoader_.abort();
                    }
                    if (this.mediaTypes_.SUBTITLES.activePlaylistLoader) {
                        this.subtitleSegmentLoader_.resetEverything();
                        this.subtitleSegmentLoader_.abort();
                    }
                    this.load();
                };
                c.duration = function a() {
                    if (!this.masterPlaylistLoader_) {
                        return 0;
                    }
                    var b = this.masterPlaylistLoader_.media();
                    if (!b) {
                        return 0;
                    }
                    if (!b.endList) {
                        return Infinity;
                    }
                    if (this.mediaSource) {
                        return this.mediaSource.duration;
                    }
                    return is.Playlist.duration(b);
                };
                c.seekable = function a() {
                    return this.seekable_;
                };
                c.onSyncInfoUpdate_ = function a() {
                    var b;
                    if (!this.masterPlaylistLoader_ || this.sourceUpdater_.hasCreatedSourceBuffers()) {
                        return;
                    }
                    var c = this.masterPlaylistLoader_.media();
                    if (!c) {
                        return;
                    }
                    var d = this.syncController_.getExpiredTime(c, this.duration());
                    if (d === null) {
                        return;
                    }
                    var e = this.masterPlaylistLoader_.master;
                    var f = is.Playlist.seekable(c, d, is.Playlist.liveEdgeDelay(e, c));
                    if (f.length === 0) {
                        return;
                    }
                    if (this.mediaTypes_.AUDIO.activePlaylistLoader) {
                        c = this.mediaTypes_.AUDIO.activePlaylistLoader.media();
                        d = this.syncController_.getExpiredTime(c, this.duration());
                        if (d === null) {
                            return;
                        }
                        b = is.Playlist.seekable(c, d, is.Playlist.liveEdgeDelay(e, c));
                        if (b.length === 0) {
                            return;
                        }
                    }
                    var g;
                    var h;
                    if (this.seekable_ && this.seekable_.length) {
                        g = this.seekable_.end(0);
                        h = this.seekable_.start(0);
                    }
                    if (!b) {
                        this.seekable_ = f;
                    } else if (b.start(0) > f.end(0) || f.start(0) > b.end(0)) {
                        this.seekable_ = f;
                    } else {
                        this.seekable_ = eV.createTimeRanges([
                            [
                                b.start(0) > f.start(0) ? b.start(0) : f.start(0),
                                b.end(0) < f.end(0) ? b.end(0) : f.end(0), 
                            ], 
                        ]);
                    }
                    if (this.seekable_ && this.seekable_.length) {
                        if (this.seekable_.end(0) === g && this.seekable_.start(0) === h) {
                            return;
                        }
                    }
                    this.logger_("seekable updated [" + e6(this.seekable_) + "]");
                    this.tech_.trigger("seekablechanged");
                };
                c.updateDuration = function a(b) {
                    if (this.updateDuration_) {
                        this.mediaSource.removeEventListener("sourceopen", this.updateDuration_);
                        this.updateDuration_ = null;
                    }
                    if (this.mediaSource.readyState !== "open") {
                        this.updateDuration_ = this.updateDuration.bind(this, b);
                        this.mediaSource.addEventListener("sourceopen", this.updateDuration_);
                        return;
                    }
                    if (b) {
                        var c = this.seekable();
                        if (!c.length) {
                            return;
                        }
                        if (isNaN(this.mediaSource.duration) || this.mediaSource.duration < c.end(c.length - 1)) {
                            this.sourceUpdater_.setDuration(c.end(c.length - 1));
                        }
                        return;
                    }
                    var d = this.tech_.buffered();
                    var e = is.Playlist.duration(this.masterPlaylistLoader_.media());
                    if (d.length > 0) {
                        e = Math.max(e, d.end(d.length - 1));
                    }
                    if (this.mediaSource.duration !== e) {
                        this.sourceUpdater_.setDuration(e);
                    }
                };
                c.dispose = function a() {
                    var b = this;
                    this.trigger("dispose");
                    this.decrypter_.terminate();
                    this.masterPlaylistLoader_.dispose();
                    this.mainSegmentLoader_.dispose();
                    if (this.loadOnPlay_) {
                        this.tech_.off("play", this.loadOnPlay_);
                    }
                    [
                        "AUDIO",
                        "SUBTITLES"
                    ].forEach(function(a) {
                        var c = b.mediaTypes_[a].groups;
                        for(var d in c){
                            c[d].forEach(function(a) {
                                if (a.playlistLoader) {
                                    a.playlistLoader.dispose();
                                }
                            });
                        }
                    });
                    this.audioSegmentLoader_.dispose();
                    this.subtitleSegmentLoader_.dispose();
                    this.sourceUpdater_.dispose();
                    this.timelineChangeController_.dispose();
                    this.stopABRTimer_();
                    if (this.updateDuration_) {
                        this.mediaSource.removeEventListener("sourceopen", this.updateDuration_);
                    }
                    this.mediaSource.removeEventListener("durationchange", this.handleDurationChange_);
                    this.mediaSource.removeEventListener("sourceopen", this.handleSourceOpen_);
                    this.mediaSource.removeEventListener("sourceended", this.handleSourceEnded_);
                    this.off();
                };
                c.master = function a() {
                    return this.masterPlaylistLoader_.master;
                };
                c.media = function a() {
                    return (this.masterPlaylistLoader_.media() || this.initialMedia_);
                };
                c.areMediaTypesKnown_ = function a() {
                    var b = !!this.mediaTypes_.AUDIO.activePlaylistLoader;
                    var c = !!this.mainSegmentLoader_.getCurrentMediaInfo_();
                    var d = !b ? true : !!this.audioSegmentLoader_.getCurrentMediaInfo_();
                    if (!c || !d) {
                        return false;
                    }
                    return true;
                };
                c.getCodecsOrExclude_ = function a() {
                    var b = this;
                    var c = {
                        main: this.mainSegmentLoader_.getCurrentMediaInfo_() || {},
                        audio: this.audioSegmentLoader_.getCurrentMediaInfo_() || {}
                    };
                    c.video = c.main;
                    var d = hb(this.master(), this.media());
                    var e = {};
                    var f = !!this.mediaTypes_.AUDIO.activePlaylistLoader;
                    if (c.main.hasVideo) {
                        e.video = d.video || c.main.videoCodec || w.xz;
                    }
                    if (c.main.isMuxed) {
                        e.video += "," + (d.audio || c.main.audioCodec || w.lA);
                    }
                    if ((c.main.hasAudio && !c.main.isMuxed) || c.audio.hasAudio || f) {
                        e.audio = d.audio || c.main.audioCodec || c.audio.audioCodec || w.lA;
                        c.audio.isFmp4 = c.main.hasAudio && !c.main.isMuxed ? c.main.isFmp4 : c.audio.isFmp4;
                    }
                    if (!e.audio && !e.video) {
                        this.blacklistCurrentPlaylist({
                            playlist: this.media(),
                            message: "Could not determine codecs for playlist.",
                            blacklistDuration: Infinity
                        });
                        return;
                    }
                    var g = function a(b, c) {
                        return b ? (0, w.p7)(c) : (0, w.Hi)(c);
                    };
                    var h = {};
                    var i;
                    [
                        "video",
                        "audio"
                    ].forEach(function(a) {
                        if (e.hasOwnProperty(a) && !g(c[a].isFmp4, e[a])) {
                            var b = c[a].isFmp4 ? "browser" : "muxer";
                            h[b] = h[b] || [];
                            h[b].push(e[a]);
                            if (a === "audio") {
                                i = b;
                            }
                        }
                    });
                    if (f && i && this.media().attributes.AUDIO) {
                        var j = this.media().attributes.AUDIO;
                        this.master().playlists.forEach(function(a) {
                            var c = a.attributes && a.attributes.AUDIO;
                            if (c === j && a !== b.media()) {
                                a.excludeUntil = Infinity;
                            }
                        });
                        this.logger_("excluding audio group " + j + " as " + i + ' does not support codec(s): "' + e.audio + '"');
                    }
                    if (Object.keys(h).length) {
                        var k = Object.keys(h).reduce(function(a, b) {
                            if (a) {
                                a += ", ";
                            }
                            a += b + ' does not support codec(s): "' + h[b].join(",") + '"';
                            return a;
                        }, "") + ".";
                        this.blacklistCurrentPlaylist({
                            playlist: this.media(),
                            internal: true,
                            message: k,
                            blacklistDuration: Infinity
                        });
                        return;
                    }
                    if (this.sourceUpdater_.hasCreatedSourceBuffers() && !this.sourceUpdater_.canChangeType()) {
                        var l = [];
                        [
                            "video",
                            "audio"
                        ].forEach(function(a) {
                            var c = ((0, w.kS)(b.sourceUpdater_.codecs[a] || "")[0] || {}).type;
                            var d = ((0, w.kS)(e[a] || "")[0] || {}).type;
                            if (c && d && c.toLowerCase() !== d.toLowerCase()) {
                                l.push('"' + b.sourceUpdater_.codecs[a] + '" -> "' + e[a] + '"');
                            }
                        });
                        if (l.length) {
                            this.blacklistCurrentPlaylist({
                                playlist: this.media(),
                                message: "Codec switching not supported: " + l.join(", ") + ".",
                                blacklistDuration: Infinity,
                                internal: true
                            });
                            return;
                        }
                    }
                    return e;
                };
                c.tryToCreateSourceBuffers_ = function a() {
                    if (this.mediaSource.readyState !== "open" || this.sourceUpdater_.hasCreatedSourceBuffers()) {
                        return;
                    }
                    if (!this.areMediaTypesKnown_()) {
                        return;
                    }
                    var b = this.getCodecsOrExclude_();
                    if (!b) {
                        return;
                    }
                    this.sourceUpdater_.createSourceBuffers(b);
                    var c = [
                        b.video,
                        b.audio
                    ].filter(Boolean).join(",");
                    this.excludeIncompatibleVariants_(c);
                };
                c.excludeUnsupportedVariants_ = function a() {
                    var b = this;
                    var c = this.master().playlists;
                    var d = [];
                    Object.keys(c).forEach(function(a) {
                        var e = c[a];
                        if (d.indexOf(e.id) !== -1) {
                            return;
                        }
                        d.push(e.id);
                        var f = hb(b.master, e);
                        var g = [];
                        if (f.audio && !(0, w.Hi)(f.audio) && !(0, w.p7)(f.audio)) {
                            g.push("audio codec " + f.audio);
                        }
                        if (f.video && !(0, w.Hi)(f.video) && !(0, w.p7)(f.video)) {
                            g.push("video codec " + f.video);
                        }
                        if (f.text && f.text === "stpp.ttml.im1t") {
                            g.push("text codec " + f.text);
                        }
                        if (g.length) {
                            e.excludeUntil = Infinity;
                            b.logger_("excluding " + e.id + " for unsupported: " + g.join(", "));
                        }
                    });
                };
                c.excludeIncompatibleVariants_ = function a(b) {
                    var c = this;
                    var d = [];
                    var e = this.master().playlists;
                    var f = g9((0, w.kS)(b));
                    var g = ha(f);
                    var h = (f.video && (0, w.kS)(f.video)[0]) || null;
                    var i = (f.audio && (0, w.kS)(f.audio)[0]) || null;
                    Object.keys(e).forEach(function(a) {
                        var b = e[a];
                        if (d.indexOf(b.id) !== -1 || b.excludeUntil === Infinity) {
                            return;
                        }
                        d.push(b.id);
                        var f = [];
                        var j = hb(c.masterPlaylistLoader_.master, b);
                        var k = ha(j);
                        if (!j.audio && !j.video) {
                            return;
                        }
                        if (k !== g) {
                            f.push('codec count "' + k + '" !== "' + g + '"');
                        }
                        if (!c.sourceUpdater_.canChangeType()) {
                            var l = (j.video && (0, w.kS)(j.video)[0]) || null;
                            var m = (j.audio && (0, w.kS)(j.audio)[0]) || null;
                            if (l && h && l.type.toLowerCase() !== h.type.toLowerCase()) {
                                f.push('video codec "' + l.type + '" !== "' + h.type + '"');
                            }
                            if (m && i && m.type.toLowerCase() !== i.type.toLowerCase()) {
                                f.push('audio codec "' + m.type + '" !== "' + i.type + '"');
                            }
                        }
                        if (f.length) {
                            b.excludeUntil = Infinity;
                            c.logger_("blacklisting " + b.id + ": " + f.join(" && "));
                        }
                    });
                };
                c.updateAdCues_ = function a(b) {
                    var c = 0;
                    var d = this.seekable();
                    if (d.length) {
                        c = d.start(0);
                    }
                    h3(b, this.cueTagsTrack_, c);
                };
                c.goalBufferLength = function a() {
                    var b = this.tech_.currentTime();
                    var c = gu.GOAL_BUFFER_LENGTH;
                    var d = gu.GOAL_BUFFER_LENGTH_RATE;
                    var e = Math.max(c, gu.MAX_GOAL_BUFFER_LENGTH);
                    return Math.min(c + b * d, e);
                };
                c.bufferLowWaterLine = function a() {
                    var b = this.tech_.currentTime();
                    var c = gu.BUFFER_LOW_WATER_LINE;
                    var d = gu.BUFFER_LOW_WATER_LINE_RATE;
                    var e = Math.max(c, gu.MAX_BUFFER_LOW_WATER_LINE);
                    var f = Math.max(c, gu.EXPERIMENTAL_MAX_BUFFER_LOW_WATER_LINE);
                    return Math.min(c + b * d, this.experimentalBufferBasedABR ? f : e);
                };
                c.bufferHighWaterLine = function a() {
                    return gu.BUFFER_HIGH_WATER_LINE;
                };
                return b;
            })(eV.EventTarget);
            var ix = function a(b, c, d) {
                return function(a) {
                    var e = b.master.playlists[c];
                    var f = fr(e);
                    var g = fs(e);
                    if (typeof a === "undefined") {
                        return g;
                    }
                    if (a) {
                        delete e.disabled;
                    } else {
                        e.disabled = true;
                    }
                    if (a !== g && !f) {
                        d();
                        if (a) {
                            b.trigger("renditionenabled");
                        } else {
                            b.trigger("renditiondisabled");
                        }
                    }
                    return a;
                };
            };
            var iy = function a(b, c, d) {
                var e = b.masterPlaylistController_, f = b.options_.smoothQualityChange;
                var g = f ? "smooth" : "fast";
                var h = e[g + "QualityChange_"].bind(e);
                if (c.attributes) {
                    var i = c.attributes.RESOLUTION;
                    this.width = i && i.width;
                    this.height = i && i.height;
                    this.bandwidth = c.attributes.BANDWIDTH;
                }
                this.codecs = hb(e.master(), c);
                this.playlist = c;
                this.id = d;
                this.enabled = ix(b.playlists, c.id, h);
            };
            var iz = function a(b) {
                b.representations = function() {
                    var a = b.masterPlaylistController_.master();
                    var c = fA(a) ? b.masterPlaylistController_.getAudioTrackPlaylists_() : a.playlists;
                    if (!c) {
                        return [];
                    }
                    return c.filter(function(a) {
                        return !fr(a);
                    }).map(function(a, c) {
                        return new iy(b, a, a.id);
                    });
                };
            };
            var iA = [
                "seeking",
                "seeked",
                "pause",
                "playing",
                "error", 
            ];
            var iB = (function() {
                function a(a) {
                    var b = this;
                    this.masterPlaylistController_ = a.masterPlaylistController;
                    this.tech_ = a.tech;
                    this.seekable = a.seekable;
                    this.allowSeeksWithinUnsafeLiveWindow = a.allowSeeksWithinUnsafeLiveWindow;
                    this.liveRangeSafeTimeDelta = a.liveRangeSafeTimeDelta;
                    this.media = a.media;
                    this.consecutiveUpdates = 0;
                    this.lastRecordedTime = null;
                    this.timer_ = null;
                    this.checkCurrentTimeTimeout_ = null;
                    this.logger_ = e$("PlaybackWatcher");
                    this.logger_("initialize");
                    var c = function a() {
                        return b.monitorCurrentTime_();
                    };
                    var d = function a() {
                        return b.monitorCurrentTime_();
                    };
                    var f = function a() {
                        return b.techWaiting_();
                    };
                    var g = function a() {
                        return b.cancelTimer_();
                    };
                    var h = this.masterPlaylistController_;
                    var i = [
                        "main",
                        "subtitle",
                        "audio"
                    ];
                    var j = {};
                    i.forEach(function(a) {
                        j[a] = {
                            reset: function c() {
                                return b.resetSegmentDownloads_(a);
                            },
                            updateend: function c() {
                                return b.checkSegmentDownloads_(a);
                            }
                        };
                        h[a + "SegmentLoader_"].on("appendsdone", j[a].updateend);
                        h[a + "SegmentLoader_"].on("playlistupdate", j[a].reset);
                        b.tech_.on([
                            "seeked",
                            "seeking"
                        ], j[a].reset);
                    });
                    var k = function a(c) {
                        [
                            "main",
                            "audio"
                        ].forEach(function(a) {
                            h[a + "SegmentLoader_"][c]("appended", b.seekingAppendCheck_);
                        });
                    };
                    this.seekingAppendCheck_ = function() {
                        if (b.fixesBadSeeks_()) {
                            b.consecutiveUpdates = 0;
                            b.lastRecordedTime = b.tech_.currentTime();
                            k("off");
                        }
                    };
                    this.clearSeekingAppendCheck_ = function() {
                        return k("off");
                    };
                    this.watchForBadSeeking_ = function() {
                        b.clearSeekingAppendCheck_();
                        k("on");
                    };
                    this.tech_.on("seeked", this.clearSeekingAppendCheck_);
                    this.tech_.on("seeking", this.watchForBadSeeking_);
                    this.tech_.on("waiting", f);
                    this.tech_.on(iA, g);
                    this.tech_.on("canplay", d);
                    this.tech_.one("play", c);
                    this.dispose = function() {
                        b.clearSeekingAppendCheck_();
                        b.logger_("dispose");
                        b.tech_.off("waiting", f);
                        b.tech_.off(iA, g);
                        b.tech_.off("canplay", d);
                        b.tech_.off("play", c);
                        b.tech_.off("seeking", b.watchForBadSeeking_);
                        b.tech_.off("seeked", b.clearSeekingAppendCheck_);
                        i.forEach(function(a) {
                            h[a + "SegmentLoader_"].off("appendsdone", j[a].updateend);
                            h[a + "SegmentLoader_"].off("playlistupdate", j[a].reset);
                            b.tech_.off([
                                "seeked",
                                "seeking"
                            ], j[a].reset);
                        });
                        if (b.checkCurrentTimeTimeout_) {
                            e().clearTimeout(b.checkCurrentTimeTimeout_);
                        }
                        b.cancelTimer_();
                    };
                }
                var b = a.prototype;
                b.monitorCurrentTime_ = function a() {
                    this.checkCurrentTime_();
                    if (this.checkCurrentTimeTimeout_) {
                        e().clearTimeout(this.checkCurrentTimeTimeout_);
                    }
                    this.checkCurrentTimeTimeout_ = e().setTimeout(this.monitorCurrentTime_.bind(this), 250);
                };
                b.resetSegmentDownloads_ = function a(b) {
                    var c = this.masterPlaylistController_[b + "SegmentLoader_"];
                    if (this[b + "StalledDownloads_"] > 0) {
                        this.logger_("resetting possible stalled download count for " + b + " loader");
                    }
                    this[b + "StalledDownloads_"] = 0;
                    this[b + "Buffered_"] = c.buffered_();
                };
                b.checkSegmentDownloads_ = function a(b) {
                    var c = this.masterPlaylistController_;
                    var d = c[b + "SegmentLoader_"];
                    var e = d.buffered_();
                    var f = e9(this[b + "Buffered_"], e);
                    this[b + "Buffered_"] = e;
                    if (f) {
                        this.resetSegmentDownloads_(b);
                        return;
                    }
                    this[b + "StalledDownloads_"]++;
                    this.logger_("found #" + this[b + "StalledDownloads_"] + " " + b + " appends that did not increase buffer (possible stalled download)", {
                        playlistId: d.playlist_ && d.playlist_.id,
                        buffered: e8(e)
                    });
                    if (this[b + "StalledDownloads_"] < 10) {
                        return;
                    }
                    this.logger_(b + " loader stalled download exclusion");
                    this.resetSegmentDownloads_(b);
                    this.tech_.trigger({
                        type: "usage",
                        name: "vhs-" + b + "-download-exclusion"
                    });
                    if (b === "subtitle") {
                        return;
                    }
                    c.blacklistCurrentPlaylist({
                        message: "Excessive " + b + " segment downloading detected."
                    }, Infinity);
                };
                b.checkCurrentTime_ = function a() {
                    if (this.tech_.paused() || this.tech_.seeking()) {
                        return;
                    }
                    var b = this.tech_.currentTime();
                    var c = this.tech_.buffered();
                    if (this.lastRecordedTime === b && (!c.length || b + e0 >= c.end(c.length - 1))) {
                        return this.techWaiting_();
                    }
                    if (this.consecutiveUpdates >= 5 && b === this.lastRecordedTime) {
                        this.consecutiveUpdates++;
                        this.waiting_();
                    } else if (b === this.lastRecordedTime) {
                        this.consecutiveUpdates++;
                    } else {
                        this.consecutiveUpdates = 0;
                        this.lastRecordedTime = b;
                    }
                };
                b.cancelTimer_ = function a() {
                    this.consecutiveUpdates = 0;
                    if (this.timer_) {
                        this.logger_("cancelTimer_");
                        clearTimeout(this.timer_);
                    }
                    this.timer_ = null;
                };
                b.fixesBadSeeks_ = function a() {
                    var b = this.tech_.seeking();
                    if (!b) {
                        return false;
                    }
                    var c = this.seekable();
                    var d = this.tech_.currentTime();
                    var e = this.afterSeekableWindow_(c, d, this.media(), this.allowSeeksWithinUnsafeLiveWindow);
                    var f;
                    if (e) {
                        var g = c.end(c.length - 1);
                        f = g;
                    }
                    if (this.beforeSeekableWindow_(c, d)) {
                        var h = c.start(0);
                        f = h + (h === c.end(0) ? 0 : e0);
                    }
                    if (typeof f !== "undefined") {
                        this.logger_("Trying to seek outside of seekable at time " + d + " with " + ("seekable range " + e6(c) + ". Seeking to ") + (f + "."));
                        this.tech_.setCurrentTime(f);
                        return true;
                    }
                    var i = this.masterPlaylistController_.sourceUpdater_;
                    var j = this.tech_.buffered();
                    var k = i.audioBuffer ? i.audioBuffered() : null;
                    var l = i.videoBuffer ? i.videoBuffered() : null;
                    var m = this.media();
                    var n = m.partTargetDuration ? m.partTargetDuration : (m.targetDuration - e_) * 2;
                    var o = [
                        k,
                        l
                    ];
                    for(var p = 0; p < o.length; p++){
                        if (!o[p]) {
                            continue;
                        }
                        var q = fb(o[p], d);
                        if (q < n) {
                            return false;
                        }
                    }
                    var r = e3(j, d);
                    if (r.length === 0) {
                        return false;
                    }
                    f = r.start(0) + e0;
                    this.logger_("Buffered region starts (" + r.start(0) + ") " + (" just beyond seek point (" + d + "). Seeking to " + f + "."));
                    this.tech_.setCurrentTime(f);
                    return true;
                };
                b.waiting_ = function a() {
                    if (this.techWaiting_()) {
                        return;
                    }
                    var b = this.tech_.currentTime();
                    var c = this.tech_.buffered();
                    var d = e2(c, b);
                    if (d.length && b + 3 <= d.end(0)) {
                        this.cancelTimer_();
                        this.tech_.setCurrentTime(b);
                        this.logger_("Stopped at " + b + " while inside a buffered region " + ("[" + d.start(0) + " -> " + d.end(0) + "]. Attempting to resume ") + "playback by seeking to the current time.");
                        this.tech_.trigger({
                            type: "usage",
                            name: "vhs-unknown-waiting"
                        });
                        this.tech_.trigger({
                            type: "usage",
                            name: "hls-unknown-waiting"
                        });
                        return;
                    }
                };
                b.techWaiting_ = function a() {
                    var b = this.seekable();
                    var c = this.tech_.currentTime();
                    if (this.tech_.seeking() || this.timer_ !== null) {
                        return true;
                    }
                    if (this.beforeSeekableWindow_(b, c)) {
                        var d = b.end(b.length - 1);
                        this.logger_("Fell out of live window at time " + c + ". Seeking to " + ("live point (seekable end) " + d));
                        this.cancelTimer_();
                        this.tech_.setCurrentTime(d);
                        this.tech_.trigger({
                            type: "usage",
                            name: "vhs-live-resync"
                        });
                        this.tech_.trigger({
                            type: "usage",
                            name: "hls-live-resync"
                        });
                        return true;
                    }
                    var e = this.tech_.vhs.masterPlaylistController_.sourceUpdater_;
                    var f = this.tech_.buffered();
                    var g = this.videoUnderflow_({
                        audioBuffered: e.audioBuffered(),
                        videoBuffered: e.videoBuffered(),
                        currentTime: c
                    });
                    if (g) {
                        this.cancelTimer_();
                        this.tech_.setCurrentTime(c);
                        this.tech_.trigger({
                            type: "usage",
                            name: "vhs-video-underflow"
                        });
                        this.tech_.trigger({
                            type: "usage",
                            name: "hls-video-underflow"
                        });
                        return true;
                    }
                    var h = e3(f, c);
                    if (h.length > 0) {
                        var i = h.start(0) - c;
                        this.logger_("Stopped at " + c + ", setting timer for " + i + ", seeking " + ("to " + h.start(0)));
                        this.cancelTimer_();
                        this.timer_ = setTimeout(this.skipTheGap_.bind(this), i * 1000, c);
                        return true;
                    }
                    return false;
                };
                b.afterSeekableWindow_ = function a(b, c, d, e) {
                    if (e === void 0) {
                        e = false;
                    }
                    if (!b.length) {
                        return false;
                    }
                    var f = b.end(b.length - 1) + e0;
                    var g = !d.endList;
                    if (g && e) {
                        f = b.end(b.length - 1) + d.targetDuration * 3;
                    }
                    if (c > f) {
                        return true;
                    }
                    return false;
                };
                b.beforeSeekableWindow_ = function a(b, c) {
                    if (b.length && b.start(0) > 0 && c < b.start(0) - this.liveRangeSafeTimeDelta) {
                        return true;
                    }
                    return false;
                };
                b.videoUnderflow_ = function a(b) {
                    var c = b.videoBuffered, d = b.audioBuffered, e = b.currentTime;
                    if (!c) {
                        return;
                    }
                    var f;
                    if (c.length && d.length) {
                        var g = e2(c, e - 3);
                        var h = e2(c, e);
                        var i = e2(d, e);
                        if (i.length && !h.length && g.length) {
                            f = {
                                start: g.end(0),
                                end: i.end(0)
                            };
                        }
                    } else {
                        var j = e3(c, e);
                        if (!j.length) {
                            f = this.gapFromVideoUnderflow_(c, e);
                        }
                    }
                    if (f) {
                        this.logger_("Encountered a gap in video from " + f.start + " to " + f.end + ". " + ("Seeking to current time " + e));
                        return true;
                    }
                    return false;
                };
                b.skipTheGap_ = function a(b) {
                    var c = this.tech_.buffered();
                    var d = this.tech_.currentTime();
                    var e = e3(c, d);
                    this.cancelTimer_();
                    if (e.length === 0 || d !== b) {
                        return;
                    }
                    this.logger_("skipTheGap_:", "currentTime:", d, "scheduled currentTime:", b, "nextRange start:", e.start(0));
                    this.tech_.setCurrentTime(e.start(0) + e_);
                    this.tech_.trigger({
                        type: "usage",
                        name: "vhs-gap-skip"
                    });
                    this.tech_.trigger({
                        type: "usage",
                        name: "hls-gap-skip"
                    });
                };
                b.gapFromVideoUnderflow_ = function a(b, c) {
                    var d = e4(b);
                    for(var e = 0; e < d.length; e++){
                        var f = d.start(e);
                        var g = d.end(e);
                        if (c - f < 4 && c - f > 2) {
                            return {
                                start: f,
                                end: g
                            };
                        }
                    }
                    return null;
                };
                return a;
            })();
            var iC = {
                errorInterval: 30,
                getSource: function a(b) {
                    var c = this.tech({
                        IWillNotUseThisInPlugins: true
                    });
                    var d = c.currentSource_ || this.currentSource();
                    return b(d);
                }
            };
            var iD = function a(b, c) {
                var d = 0;
                var e = 0;
                var f = eV.mergeOptions(iC, c);
                b.ready(function() {
                    b.trigger({
                        type: "usage",
                        name: "vhs-error-reload-initialized"
                    });
                    b.trigger({
                        type: "usage",
                        name: "hls-error-reload-initialized"
                    });
                });
                var g = function a() {
                    if (e) {
                        b.currentTime(e);
                    }
                };
                var h = function a(c) {
                    if (c === null || c === undefined) {
                        return;
                    }
                    e = (b.duration() !== Infinity && b.currentTime()) || 0;
                    b.one("loadedmetadata", g);
                    b.src(c);
                    b.trigger({
                        type: "usage",
                        name: "vhs-error-reload"
                    });
                    b.trigger({
                        type: "usage",
                        name: "hls-error-reload"
                    });
                    b.play();
                };
                var i = function a() {
                    if (Date.now() - d < f.errorInterval * 1000) {
                        b.trigger({
                            type: "usage",
                            name: "vhs-error-reload-canceled"
                        });
                        b.trigger({
                            type: "usage",
                            name: "hls-error-reload-canceled"
                        });
                        return;
                    }
                    if (!f.getSource || typeof f.getSource !== "function") {
                        eV.log.error("ERROR: reloadSourceOnError - The option getSource must be a function!");
                        return;
                    }
                    d = Date.now();
                    return f.getSource.call(b, h);
                };
                var j = function a() {
                    b.off("loadedmetadata", g);
                    b.off("error", i);
                    b.off("dispose", a);
                };
                var k = function c(d) {
                    j();
                    a(b, d);
                };
                b.on("error", i);
                b.on("dispose", j);
                b.reloadSourceOnError = k;
            };
            var iE = function a(b) {
                iD(this, b);
            };
            var iF = "2.12.0";
            var iG = "5.14.1";
            var iH = "0.19.2";
            var iI = "4.7.0";
            var iJ = "3.1.2";
            var iK = {
                PlaylistLoader: fV,
                Playlist: fB,
                utils: f9,
                STANDARD_PLAYLIST_SELECTOR: hj,
                INITIAL_PLAYLIST_SELECTOR: hm,
                lastBandwidthSelector: hj,
                movingAverageBandwidthSelector: hk,
                comparePlaylistBandwidth: hg,
                comparePlaylistResolution: hh,
                xhr: fZ()
            };
            Object.keys(gu).forEach(function(a) {
                Object.defineProperty(iK, a, {
                    get: function b() {
                        eV.log.warn("using Vhs." + a + " is UNSAFE be sure you know what you are doing");
                        return gu[a];
                    },
                    set: function b(c) {
                        eV.log.warn("using Vhs." + a + " is UNSAFE be sure you know what you are doing");
                        if (typeof c !== "number" || c < 0) {
                            eV.log.warn("value of Vhs." + a + " must be greater than or equal to 0");
                            return;
                        }
                        gu[a] = c;
                    }
                });
            });
            var iL = "videojs-vhs";
            var iM = function a(b, c) {
                var d = c.media();
                var e = -1;
                for(var f = 0; f < b.length; f++){
                    if (b[f].id === d.id) {
                        e = f;
                        break;
                    }
                }
                b.selectedIndex_ = e;
                b.trigger({
                    selectedIndex: e,
                    type: "change"
                });
            };
            var iN = function a(b, c) {
                c.representations().forEach(function(a) {
                    b.addQualityLevel(a);
                });
                iM(b, c.playlists);
            };
            iK.canPlaySource = function() {
                return eV.log.warn("HLS is no longer a tech. Please remove it from " + "your player's techOrder.");
            };
            var iO = function a(b, c, d) {
                if (!b) {
                    return b;
                }
                var e = {};
                if (c && c.attributes && c.attributes.CODECS) {
                    e = g9((0, w.kS)(c.attributes.CODECS));
                }
                if (d && d.attributes && d.attributes.CODECS) {
                    e.audio = d.attributes.CODECS;
                }
                var f = (0, w._5)(e.video);
                var g = (0, w._5)(e.audio);
                var h = {};
                for(var i in b){
                    h[i] = {};
                    if (g) {
                        h[i].audioContentType = g;
                    }
                    if (f) {
                        h[i].videoContentType = f;
                    }
                    if (c.contentProtection && c.contentProtection[i] && c.contentProtection[i].pssh) {
                        h[i].pssh = c.contentProtection[i].pssh;
                    }
                    if (typeof b[i] === "string") {
                        h[i].url = b[i];
                    }
                }
                return eV.mergeOptions(b, h);
            };
            var iP = function a(b, c) {
                return b.reduce(function(a, b) {
                    if (!b.contentProtection) {
                        return a;
                    }
                    var d = c.reduce(function(a, c) {
                        var d = b.contentProtection[c];
                        if (d && d.pssh) {
                            a[c] = {
                                pssh: d.pssh
                            };
                        }
                        return a;
                    }, {});
                    if (Object.keys(d).length) {
                        a.push(d);
                    }
                    return a;
                }, []);
            };
            var iQ = function a(b) {
                var c = b.player, d = b.sourceKeySystems, e = b.audioMedia, f = b.mainPlaylists;
                if (!c.eme.initializeMediaKeys) {
                    return Promise.resolve();
                }
                var g = e ? f.concat([
                    e
                ]) : f;
                var h = iP(g, Object.keys(d));
                var i = [];
                var j = [];
                h.forEach(function(a) {
                    j.push(new Promise(function(a, b) {
                        c.tech_.one("keysessioncreated", a);
                    }));
                    i.push(new Promise(function(b, d) {
                        c.eme.initializeMediaKeys({
                            keySystems: a
                        }, function(a) {
                            if (a) {
                                d(a);
                                return;
                            }
                            b();
                        });
                    }));
                });
                return Promise.race([
                    Promise.all(i),
                    Promise.race(j), 
                ]);
            };
            var iR = function a(b) {
                var c = b.player, d = b.sourceKeySystems, e = b.media, f = b.audioMedia;
                var g = iO(d, e, f);
                if (!g) {
                    return false;
                }
                c.currentSource().keySystems = g;
                if (g && !c.eme) {
                    eV.log.warn("DRM encrypted source cannot be decrypted without a DRM plugin");
                    return false;
                }
                return true;
            };
            var iS = function a() {
                if (!e().localStorage) {
                    return null;
                }
                var b = e().localStorage.getItem(iL);
                if (!b) {
                    return null;
                }
                try {
                    return JSON.parse(b);
                } catch (c) {
                    return null;
                }
            };
            var iT = function a(b) {
                if (!e().localStorage) {
                    return false;
                }
                var c = iS();
                c = c ? eV.mergeOptions(c, b) : b;
                try {
                    e().localStorage.setItem(iL, JSON.stringify(c));
                } catch (d) {
                    return false;
                }
                return c;
            };
            var iU = function a(b) {
                if (b.toLowerCase().indexOf("data:application/vnd.videojs.vhs+json,") === 0) {
                    return JSON.parse(b.substring(b.indexOf(",") + 1));
                }
                return b;
            };
            iK.supportsNativeHls = (function() {
                if (!g() || !g().createElement) {
                    return false;
                }
                var a = g().createElement("video");
                if (!eV.getTech("Html5").isSupported()) {
                    return false;
                }
                var b = [
                    "application/vnd.apple.mpegurl",
                    "audio/mpegurl",
                    "audio/x-mpegurl",
                    "application/x-mpegurl",
                    "video/x-mpegurl",
                    "video/mpegurl",
                    "application/mpegurl", 
                ];
                return b.some(function(b) {
                    return /maybe|probably/i.test(a.canPlayType(b));
                });
            })();
            iK.supportsNativeDash = (function() {
                if (!g() || !g().createElement || !eV.getTech("Html5").isSupported()) {
                    return false;
                }
                return /maybe|probably/i.test(g().createElement("video").canPlayType("application/dash+xml"));
            })();
            iK.supportsTypeNatively = function(a) {
                if (a === "hls") {
                    return iK.supportsNativeHls;
                }
                if (a === "dash") {
                    return iK.supportsNativeDash;
                }
                return false;
            };
            iK.isSupported = function() {
                return eV.log.warn("HLS is no longer a tech. Please remove it from " + "your player's techOrder.");
            };
            var iV = eV.getComponent("Component");
            var iW = (function(a) {
                (0, j.Z)(b, a);
                function b(b, c, d) {
                    var e;
                    e = a.call(this, c, eV.mergeOptions(d.hls, d.vhs)) || this;
                    if (d.hls && Object.keys(d.hls).length) {
                        eV.log.warn("Using hls options is deprecated. Use vhs instead.");
                    }
                    if (typeof d.initialBandwidth === "number") {
                        e.options_.bandwidth = d.initialBandwidth;
                    }
                    e.logger_ = e$("VhsHandler");
                    if (c.options_ && c.options_.playerId) {
                        var f = eV(c.options_.playerId);
                        if (!f.hasOwnProperty("hls")) {
                            Object.defineProperty(f, "hls", {
                                get: function a() {
                                    eV.log.warn("player.hls is deprecated. Use player.tech().vhs instead.");
                                    c.trigger({
                                        type: "usage",
                                        name: "hls-player-access"
                                    });
                                    return (0, i.Z)(e);
                                },
                                configurable: true
                            });
                        }
                        if (!f.hasOwnProperty("vhs")) {
                            Object.defineProperty(f, "vhs", {
                                get: function a() {
                                    eV.log.warn("player.vhs is deprecated. Use player.tech().vhs instead.");
                                    c.trigger({
                                        type: "usage",
                                        name: "vhs-player-access"
                                    });
                                    return (0, i.Z)(e);
                                },
                                configurable: true
                            });
                        }
                        if (!f.hasOwnProperty("dash")) {
                            Object.defineProperty(f, "dash", {
                                get: function a() {
                                    eV.log.warn("player.dash is deprecated. Use player.tech().vhs instead.");
                                    return (0, i.Z)(e);
                                },
                                configurable: true
                            });
                        }
                        e.player_ = f;
                    }
                    e.tech_ = c;
                    e.source_ = b;
                    e.stats = {};
                    e.ignoreNextSeekingEvent_ = false;
                    e.setOptions_();
                    if (e.options_.overrideNative && c.overrideNativeAudioTracks && c.overrideNativeVideoTracks) {
                        c.overrideNativeAudioTracks(true);
                        c.overrideNativeVideoTracks(true);
                    } else if (e.options_.overrideNative && (c.featuresNativeVideoTracks || c.featuresNativeAudioTracks)) {
                        throw new Error("Overriding native HLS requires emulated tracks. " + "See https://git.io/vMpjB");
                    }
                    e.on(g(), [
                        "fullscreenchange",
                        "webkitfullscreenchange",
                        "mozfullscreenchange",
                        "MSFullscreenChange", 
                    ], function(a) {
                        var b = g().fullscreenElement || g().webkitFullscreenElement || g().mozFullScreenElement || g().msFullscreenElement;
                        if (b && b.contains(e.tech_.el())) {
                            e.masterPlaylistController_.fastQualityChange_();
                        } else {
                            e.masterPlaylistController_.checkABR_();
                        }
                    });
                    e.on(e.tech_, "seeking", function() {
                        if (this.ignoreNextSeekingEvent_) {
                            this.ignoreNextSeekingEvent_ = false;
                            return;
                        }
                        this.setCurrentTime(this.tech_.currentTime());
                    });
                    e.on(e.tech_, "error", function() {
                        if (this.tech_.error() && this.masterPlaylistController_) {
                            this.masterPlaylistController_.pauseLoading();
                        }
                    });
                    e.on(e.tech_, "play", e.play);
                    return e;
                }
                var c = b.prototype;
                c.setOptions_ = function a() {
                    var b = this;
                    this.options_.withCredentials = this.options_.withCredentials || false;
                    this.options_.handleManifestRedirects = this.options_.handleManifestRedirects === false ? false : true;
                    this.options_.limitRenditionByPlayerDimensions = this.options_.limitRenditionByPlayerDimensions === false ? false : true;
                    this.options_.useDevicePixelRatio = this.options_.useDevicePixelRatio || false;
                    this.options_.smoothQualityChange = this.options_.smoothQualityChange || false;
                    this.options_.useBandwidthFromLocalStorage = typeof this.source_.useBandwidthFromLocalStorage !== "undefined" ? this.source_.useBandwidthFromLocalStorage : this.options_.useBandwidthFromLocalStorage || false;
                    this.options_.useNetworkInformationApi = this.options_.useNetworkInformationApi || false;
                    this.options_.customTagParsers = this.options_.customTagParsers || [];
                    this.options_.customTagMappers = this.options_.customTagMappers || [];
                    this.options_.cacheEncryptionKeys = this.options_.cacheEncryptionKeys || false;
                    if (typeof this.options_.blacklistDuration !== "number") {
                        this.options_.blacklistDuration = 5 * 60;
                    }
                    if (typeof this.options_.bandwidth !== "number") {
                        if (this.options_.useBandwidthFromLocalStorage) {
                            var c = iS();
                            if (c && c.bandwidth) {
                                this.options_.bandwidth = c.bandwidth;
                                this.tech_.trigger({
                                    type: "usage",
                                    name: "vhs-bandwidth-from-local-storage"
                                });
                                this.tech_.trigger({
                                    type: "usage",
                                    name: "hls-bandwidth-from-local-storage"
                                });
                            }
                            if (c && c.throughput) {
                                this.options_.throughput = c.throughput;
                                this.tech_.trigger({
                                    type: "usage",
                                    name: "vhs-throughput-from-local-storage"
                                });
                                this.tech_.trigger({
                                    type: "usage",
                                    name: "hls-throughput-from-local-storage"
                                });
                            }
                        }
                    }
                    if (typeof this.options_.bandwidth !== "number") {
                        this.options_.bandwidth = gu.INITIAL_BANDWIDTH;
                    }
                    this.options_.enableLowInitialPlaylist = this.options_.enableLowInitialPlaylist && this.options_.bandwidth === gu.INITIAL_BANDWIDTH;
                    [
                        "withCredentials",
                        "useDevicePixelRatio",
                        "limitRenditionByPlayerDimensions",
                        "bandwidth",
                        "smoothQualityChange",
                        "customTagParsers",
                        "customTagMappers",
                        "handleManifestRedirects",
                        "cacheEncryptionKeys",
                        "playlistSelector",
                        "initialPlaylistSelector",
                        "experimentalBufferBasedABR",
                        "liveRangeSafeTimeDelta",
                        "experimentalLLHLS",
                        "useNetworkInformationApi",
                        "experimentalExactManifestTimings",
                        "experimentalLeastPixelDiffSelector", 
                    ].forEach(function(a) {
                        if (typeof b.source_[a] !== "undefined") {
                            b.options_[a] = b.source_[a];
                        }
                    });
                    this.limitRenditionByPlayerDimensions = this.options_.limitRenditionByPlayerDimensions;
                    this.useDevicePixelRatio = this.options_.useDevicePixelRatio;
                };
                c.src = function a(b, c) {
                    var d = this;
                    if (!b) {
                        return;
                    }
                    this.setOptions_();
                    this.options_.src = iU(this.source_.src);
                    this.options_.tech = this.tech_;
                    this.options_.externVhs = iK;
                    this.options_.sourceType = (0, x.t)(c);
                    this.options_.seekTo = function(a) {
                        d.tech_.setCurrentTime(a);
                    };
                    if (this.options_.smoothQualityChange) {
                        eV.log.warn("smoothQualityChange is deprecated and will be removed in the next major version");
                    }
                    this.masterPlaylistController_ = new iw(this.options_);
                    var f = eV.mergeOptions({
                        liveRangeSafeTimeDelta: e0
                    }, this.options_, {
                        seekable: function a() {
                            return d.seekable();
                        },
                        media: function a() {
                            return d.masterPlaylistController_.media();
                        },
                        masterPlaylistController: this.masterPlaylistController_
                    });
                    this.playbackWatcher_ = new iB(f);
                    this.masterPlaylistController_.on("error", function() {
                        var a = eV.players[d.tech_.options_.playerId];
                        var b = d.masterPlaylistController_.error;
                        if (typeof b === "object" && !b.code) {
                            b.code = 3;
                        } else if (typeof b === "string") {
                            b = {
                                message: b,
                                code: 3
                            };
                        }
                        a.error(b);
                    });
                    var g = this.options_.experimentalBufferBasedABR ? iK.movingAverageBandwidthSelector(0.55) : iK.STANDARD_PLAYLIST_SELECTOR;
                    this.masterPlaylistController_.selectPlaylist = this.selectPlaylist ? this.selectPlaylist.bind(this) : g.bind(this);
                    this.masterPlaylistController_.selectInitialPlaylist = iK.INITIAL_PLAYLIST_SELECTOR.bind(this);
                    this.playlists = this.masterPlaylistController_.masterPlaylistLoader_;
                    this.mediaSource = this.masterPlaylistController_.mediaSource;
                    Object.defineProperties(this, {
                        selectPlaylist: {
                            get: function a() {
                                return this.masterPlaylistController_.selectPlaylist;
                            },
                            set: function a(b) {
                                this.masterPlaylistController_.selectPlaylist = b.bind(this);
                            }
                        },
                        throughput: {
                            get: function a() {
                                return this.masterPlaylistController_.mainSegmentLoader_.throughput.rate;
                            },
                            set: function a(b) {
                                this.masterPlaylistController_.mainSegmentLoader_.throughput.rate = b;
                                this.masterPlaylistController_.mainSegmentLoader_.throughput.count = 1;
                            }
                        },
                        bandwidth: {
                            get: function a() {
                                var b = this.masterPlaylistController_.mainSegmentLoader_.bandwidth;
                                var c = e().navigator.connection || e().navigator.mozConnection || e().navigator.webkitConnection;
                                var d = 10e6;
                                if (this.options_.useNetworkInformationApi && c) {
                                    var f = c.downlink * 1000 * 1000;
                                    if (f >= d && b >= d) {
                                        b = Math.max(b, f);
                                    } else {
                                        b = f;
                                    }
                                }
                                return b;
                            },
                            set: function a(b) {
                                this.masterPlaylistController_.mainSegmentLoader_.bandwidth = b;
                                this.masterPlaylistController_.mainSegmentLoader_.throughput = {
                                    rate: 0,
                                    count: 0
                                };
                            }
                        },
                        systemBandwidth: {
                            get: function a() {
                                var b = 1 / (this.bandwidth || 1);
                                var c;
                                if (this.throughput > 0) {
                                    c = 1 / this.throughput;
                                } else {
                                    c = 0;
                                }
                                var d = Math.floor(1 / (b + c));
                                return d;
                            },
                            set: function a() {
                                eV.log.error('The "systemBandwidth" property is read-only');
                            }
                        }
                    });
                    if (this.options_.bandwidth) {
                        this.bandwidth = this.options_.bandwidth;
                    }
                    if (this.options_.throughput) {
                        this.throughput = this.options_.throughput;
                    }
                    Object.defineProperties(this.stats, {
                        bandwidth: {
                            get: function a() {
                                return d.bandwidth || 0;
                            },
                            enumerable: true
                        },
                        mediaRequests: {
                            get: function a() {
                                return (d.masterPlaylistController_.mediaRequests_() || 0);
                            },
                            enumerable: true
                        },
                        mediaRequestsAborted: {
                            get: function a() {
                                return (d.masterPlaylistController_.mediaRequestsAborted_() || 0);
                            },
                            enumerable: true
                        },
                        mediaRequestsTimedout: {
                            get: function a() {
                                return (d.masterPlaylistController_.mediaRequestsTimedout_() || 0);
                            },
                            enumerable: true
                        },
                        mediaRequestsErrored: {
                            get: function a() {
                                return (d.masterPlaylistController_.mediaRequestsErrored_() || 0);
                            },
                            enumerable: true
                        },
                        mediaTransferDuration: {
                            get: function a() {
                                return (d.masterPlaylistController_.mediaTransferDuration_() || 0);
                            },
                            enumerable: true
                        },
                        mediaBytesTransferred: {
                            get: function a() {
                                return (d.masterPlaylistController_.mediaBytesTransferred_() || 0);
                            },
                            enumerable: true
                        },
                        mediaSecondsLoaded: {
                            get: function a() {
                                return (d.masterPlaylistController_.mediaSecondsLoaded_() || 0);
                            },
                            enumerable: true
                        },
                        mediaAppends: {
                            get: function a() {
                                return (d.masterPlaylistController_.mediaAppends_() || 0);
                            },
                            enumerable: true
                        },
                        mainAppendsToLoadedData: {
                            get: function a() {
                                return (d.masterPlaylistController_.mainAppendsToLoadedData_() || 0);
                            },
                            enumerable: true
                        },
                        audioAppendsToLoadedData: {
                            get: function a() {
                                return (d.masterPlaylistController_.audioAppendsToLoadedData_() || 0);
                            },
                            enumerable: true
                        },
                        appendsToLoadedData: {
                            get: function a() {
                                return (d.masterPlaylistController_.appendsToLoadedData_() || 0);
                            },
                            enumerable: true
                        },
                        timeToLoadedData: {
                            get: function a() {
                                return (d.masterPlaylistController_.timeToLoadedData_() || 0);
                            },
                            enumerable: true
                        },
                        buffered: {
                            get: function a() {
                                return e8(d.tech_.buffered());
                            },
                            enumerable: true
                        },
                        currentTime: {
                            get: function a() {
                                return d.tech_.currentTime();
                            },
                            enumerable: true
                        },
                        currentSource: {
                            get: function a() {
                                return d.tech_.currentSource_;
                            },
                            enumerable: true
                        },
                        currentTech: {
                            get: function a() {
                                return d.tech_.name_;
                            },
                            enumerable: true
                        },
                        duration: {
                            get: function a() {
                                return d.tech_.duration();
                            },
                            enumerable: true
                        },
                        master: {
                            get: function a() {
                                return d.playlists.master;
                            },
                            enumerable: true
                        },
                        playerDimensions: {
                            get: function a() {
                                return d.tech_.currentDimensions();
                            },
                            enumerable: true
                        },
                        seekable: {
                            get: function a() {
                                return e8(d.tech_.seekable());
                            },
                            enumerable: true
                        },
                        timestamp: {
                            get: function a() {
                                return Date.now();
                            },
                            enumerable: true
                        },
                        videoPlaybackQuality: {
                            get: function a() {
                                return d.tech_.getVideoPlaybackQuality();
                            },
                            enumerable: true
                        }
                    });
                    this.tech_.one("canplay", this.masterPlaylistController_.setupFirstPlay.bind(this.masterPlaylistController_));
                    this.tech_.on("bandwidthupdate", function() {
                        if (d.options_.useBandwidthFromLocalStorage) {
                            iT({
                                bandwidth: d.bandwidth,
                                throughput: Math.round(d.throughput)
                            });
                        }
                    });
                    this.masterPlaylistController_.on("selectedinitialmedia", function() {
                        iz(d);
                    });
                    this.masterPlaylistController_.sourceUpdater_.on("createdsourcebuffers", function() {
                        d.setupEme_();
                    });
                    this.on(this.masterPlaylistController_, "progress", function() {
                        this.tech_.trigger("progress");
                    });
                    this.on(this.masterPlaylistController_, "firstplay", function() {
                        this.ignoreNextSeekingEvent_ = true;
                    });
                    this.setupQualityLevels_();
                    if (!this.tech_.el()) {
                        return;
                    }
                    this.mediaSourceUrl_ = e().URL.createObjectURL(this.masterPlaylistController_.mediaSource);
                    this.tech_.src(this.mediaSourceUrl_);
                };
                c.setupEme_ = function a() {
                    var b = this;
                    var c = this.masterPlaylistController_.mediaTypes_.AUDIO.activePlaylistLoader;
                    var d = iR({
                        player: this.player_,
                        sourceKeySystems: this.source_.keySystems,
                        media: this.playlists.media(),
                        audioMedia: c && c.media()
                    });
                    this.player_.tech_.on("keystatuschange", function(a) {
                        if (a.status === "output-restricted") {
                            b.masterPlaylistController_.blacklistCurrentPlaylist({
                                playlist: b.masterPlaylistController_.media(),
                                message: "DRM keystatus changed to " + a.status + ". Playlist will fail to play. Check for HDCP content.",
                                blacklistDuration: Infinity
                            });
                        }
                    });
                    if (eV.browser.IE_VERSION === 11 || !d) {
                        this.masterPlaylistController_.sourceUpdater_.initializedEme();
                        return;
                    }
                    this.logger_("waiting for EME key session creation");
                    iQ({
                        player: this.player_,
                        sourceKeySystems: this.source_.keySystems,
                        audioMedia: c && c.media(),
                        mainPlaylists: this.playlists.master.playlists
                    }).then(function() {
                        b.logger_("created EME key session");
                        b.masterPlaylistController_.sourceUpdater_.initializedEme();
                    })["catch"](function(a) {
                        b.logger_("error while creating EME key session", a);
                        b.player_.error({
                            message: "Failed to initialize media keys for EME",
                            code: 3
                        });
                    });
                };
                c.setupQualityLevels_ = function a() {
                    var b = this;
                    var c = eV.players[this.tech_.options_.playerId];
                    if (!c || !c.qualityLevels || this.qualityLevels_) {
                        return;
                    }
                    this.qualityLevels_ = c.qualityLevels();
                    this.masterPlaylistController_.on("selectedinitialmedia", function() {
                        iN(b.qualityLevels_, b);
                    });
                    this.playlists.on("mediachange", function() {
                        iM(b.qualityLevels_, b.playlists);
                    });
                };
                b.version = function a() {
                    return {
                        "@videojs/http-streaming": iF,
                        "mux.js": iG,
                        "mpd-parser": iH,
                        "m3u8-parser": iI,
                        "aes-decrypter": iJ
                    };
                };
                c.version = function a() {
                    return this.constructor.version();
                };
                c.canChangeType = function a() {
                    return h$.canChangeType();
                };
                c.play = function a() {
                    this.masterPlaylistController_.play();
                };
                c.setCurrentTime = function a(b) {
                    this.masterPlaylistController_.setCurrentTime(b);
                };
                c.duration = function a() {
                    return this.masterPlaylistController_.duration();
                };
                c.seekable = function a() {
                    return this.masterPlaylistController_.seekable();
                };
                c.dispose = function b() {
                    if (this.playbackWatcher_) {
                        this.playbackWatcher_.dispose();
                    }
                    if (this.masterPlaylistController_) {
                        this.masterPlaylistController_.dispose();
                    }
                    if (this.qualityLevels_) {
                        this.qualityLevels_.dispose();
                    }
                    if (this.player_) {
                        delete this.player_.vhs;
                        delete this.player_.dash;
                        delete this.player_.hls;
                    }
                    if (this.tech_ && this.tech_.vhs) {
                        delete this.tech_.vhs;
                    }
                    if (this.tech_) {
                        delete this.tech_.hls;
                    }
                    if (this.mediaSourceUrl_ && e().URL.revokeObjectURL) {
                        e().URL.revokeObjectURL(this.mediaSourceUrl_);
                        this.mediaSourceUrl_ = null;
                    }
                    a.prototype.dispose.call(this);
                };
                c.convertToProgramTime = function a(b, c) {
                    return gh({
                        playlist: this.masterPlaylistController_.media(),
                        time: b,
                        callback: c
                    });
                };
                c.seekToProgramTime = function a(b, c, d, e) {
                    if (d === void 0) {
                        d = true;
                    }
                    if (e === void 0) {
                        e = 2;
                    }
                    return gi({
                        programTime: b,
                        playlist: this.masterPlaylistController_.media(),
                        retryCount: e,
                        pauseAfterSeek: d,
                        seekTo: this.options_.seekTo,
                        tech: this.options_.tech,
                        callback: c
                    });
                };
                return b;
            })(iV);
            var iX = {
                name: "videojs-http-streaming",
                VERSION: iF,
                canHandleSource: function a(b, c) {
                    if (c === void 0) {
                        c = {};
                    }
                    var d = eV.mergeOptions(eV.options, c);
                    return iX.canPlayType(b.type, d);
                },
                handleSource: function a(b, c, d) {
                    if (d === void 0) {
                        d = {};
                    }
                    var e = eV.mergeOptions(eV.options, d);
                    c.vhs = new iW(b, c, e);
                    if (!eV.hasOwnProperty("hls")) {
                        Object.defineProperty(c, "hls", {
                            get: function a() {
                                eV.log.warn("player.tech().hls is deprecated. Use player.tech().vhs instead.");
                                return c.vhs;
                            },
                            configurable: true
                        });
                    }
                    c.vhs.xhr = fZ();
                    c.vhs.src(b.src, b.type);
                    return c.vhs;
                },
                canPlayType: function a(b, c) {
                    if (c === void 0) {
                        c = {};
                    }
                    var d = eV.mergeOptions(eV.options, c), e = d.vhs.overrideNative, f = e === void 0 ? !eV.browser.IS_ANY_SAFARI : e;
                    var g = (0, x.t)(b);
                    var h = g && (!iK.supportsTypeNatively(g) || f);
                    return h ? "maybe" : "";
                }
            };
            var iY = function a() {
                return (0, w.p7)("avc1.4d400d,mp4a.40.2");
            };
            if (iY()) {
                eV.getTech("Html5").registerSourceHandler(iX, 0);
            }
            eV.VhsHandler = iW;
            Object.defineProperty(eV, "HlsHandler", {
                get: function a() {
                    eV.log.warn("videojs.HlsHandler is deprecated. Use videojs.VhsHandler instead.");
                    return iW;
                },
                configurable: true
            });
            eV.VhsSourceHandler = iX;
            Object.defineProperty(eV, "HlsSourceHandler", {
                get: function a() {
                    eV.log.warn("videojs.HlsSourceHandler is deprecated. " + "Use videojs.VhsSourceHandler instead.");
                    return iX;
                },
                configurable: true
            });
            eV.Vhs = iK;
            Object.defineProperty(eV, "Hls", {
                get: function a() {
                    eV.log.warn("videojs.Hls is deprecated. Use videojs.Vhs instead.");
                    return iK;
                },
                configurable: true
            });
            if (!eV.use) {
                eV.registerComponent("Hls", iK);
                eV.registerComponent("Vhs", iK);
            }
            eV.options.vhs = eV.options.vhs || {};
            eV.options.hls = eV.options.hls || {};
            if (!eV.getPlugin || !eV.getPlugin("reloadSourceOnError")) {
                var iZ = eV.registerPlugin || eV.plugin;
                iZ("reloadSourceOnError", iE);
            }
            b["Z"] = eV;
        }
    }, 
]);
