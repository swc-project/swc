!function(global, factory) {
    'object' == typeof exports && 'undefined' != typeof module ? factory(exports) : 'function' == typeof define && define.amd ? define([
        'exports'
    ], factory) : factory((global = 'undefined' != typeof globalThis ? globalThis : global || self).THREE = {});
}(this, function(exports1) {
    'use strict';
    void 0 === Number.EPSILON && (Number.EPSILON = 0.0000000000000002220446049250313), void 0 === Number.isInteger && (Number.isInteger = function(value) {
        return 'number' == typeof value && isFinite(value) && Math.floor(value) === value;
    }), void 0 === Math.sign && (Math.sign = function(x) {
        return x < 0 ? -1 : x > 0 ? 1 : +x;
    }), 'name' in Function.prototype == !1 && Object.defineProperty(Function.prototype, 'name', {
        get: function() {
            return this.toString().match(/^\s*function\s*([^\(\s]*)/)[1];
        }
    }), void 0 === Object.assign && (Object.assign = function(target) {
        if (null == target) throw TypeError('Cannot convert undefined or null to object');
        for(var output = Object(target), index = 1; index < arguments.length; index++){
            var source = arguments[index];
            if (null != source) for(var nextKey in source)Object.prototype.hasOwnProperty.call(source, nextKey) && (output[nextKey] = source[nextKey]);
        }
        return output;
    });
    var _canvas, _geometry, _context, _lineGeometry, _coneGeometry, _ENCODINGS, GLSL3 = '300 es';
    function EventDispatcher() {}
    Object.assign(EventDispatcher.prototype, {
        addEventListener: function(type, listener) {
            void 0 === this._listeners && (this._listeners = {});
            var listeners = this._listeners;
            void 0 === listeners[type] && (listeners[type] = []), -1 === listeners[type].indexOf(listener) && listeners[type].push(listener);
        },
        hasEventListener: function(type, listener) {
            if (void 0 === this._listeners) return !1;
            var listeners = this._listeners;
            return void 0 !== listeners[type] && -1 !== listeners[type].indexOf(listener);
        },
        removeEventListener: function(type, listener) {
            if (void 0 !== this._listeners) {
                var listenerArray = this._listeners[type];
                if (void 0 !== listenerArray) {
                    var index = listenerArray.indexOf(listener);
                    -1 !== index && listenerArray.splice(index, 1);
                }
            }
        },
        dispatchEvent: function(event) {
            if (void 0 !== this._listeners) {
                var listenerArray = this._listeners[event.type];
                if (void 0 !== listenerArray) {
                    event.target = this;
                    for(var array = listenerArray.slice(0), i = 0, l = array.length; i < l; i++)array[i].call(this, event);
                }
            }
        }
    });
    for(var _lut = [], i = 0; i < 256; i++)_lut[i] = (i < 16 ? '0' : '') + i.toString(16);
    var _seed = 1234567, MathUtils = {
        DEG2RAD: Math.PI / 180,
        RAD2DEG: 180 / Math.PI,
        generateUUID: function() {
            var d0 = 0xffffffff * Math.random() | 0, d1 = 0xffffffff * Math.random() | 0, d2 = 0xffffffff * Math.random() | 0, d3 = 0xffffffff * Math.random() | 0;
            return (_lut[0xff & d0] + _lut[d0 >> 8 & 0xff] + _lut[d0 >> 16 & 0xff] + _lut[d0 >> 24 & 0xff] + '-' + _lut[0xff & d1] + _lut[d1 >> 8 & 0xff] + '-' + _lut[d1 >> 16 & 0x0f | 0x40] + _lut[d1 >> 24 & 0xff] + '-' + _lut[0x3f & d2 | 0x80] + _lut[d2 >> 8 & 0xff] + '-' + _lut[d2 >> 16 & 0xff] + _lut[d2 >> 24 & 0xff] + _lut[0xff & d3] + _lut[d3 >> 8 & 0xff] + _lut[d3 >> 16 & 0xff] + _lut[d3 >> 24 & 0xff]).toUpperCase();
        },
        clamp: function(value, min, max) {
            return Math.max(min, Math.min(max, value));
        },
        euclideanModulo: function(n, m) {
            return (n % m + m) % m;
        },
        mapLinear: function(x, a1, a2, b1, b2) {
            return b1 + (x - a1) * (b2 - b1) / (a2 - a1);
        },
        lerp: function(x, y, t) {
            return (1 - t) * x + t * y;
        },
        smoothstep: function(x, min, max) {
            return x <= min ? 0 : x >= max ? 1 : (x = (x - min) / (max - min)) * x * (3 - 2 * x);
        },
        smootherstep: function(x, min, max) {
            return x <= min ? 0 : x >= max ? 1 : (x = (x - min) / (max - min)) * x * x * (x * (6 * x - 15) + 10);
        },
        randInt: function(low, high) {
            return low + Math.floor(Math.random() * (high - low + 1));
        },
        randFloat: function(low, high) {
            return low + Math.random() * (high - low);
        },
        randFloatSpread: function(range) {
            return range * (0.5 - Math.random());
        },
        seededRandom: function(s) {
            return void 0 !== s && (_seed = s % 2147483647), ((_seed = 16807 * _seed % 2147483647) - 1) / 2147483646;
        },
        degToRad: function(degrees) {
            return degrees * MathUtils.DEG2RAD;
        },
        radToDeg: function(radians) {
            return radians * MathUtils.RAD2DEG;
        },
        isPowerOfTwo: function(value) {
            return (value & value - 1) == 0 && 0 !== value;
        },
        ceilPowerOfTwo: function(value) {
            return Math.pow(2, Math.ceil(Math.log(value) / Math.LN2));
        },
        floorPowerOfTwo: function(value) {
            return Math.pow(2, Math.floor(Math.log(value) / Math.LN2));
        },
        setQuaternionFromProperEuler: function(q, a, b, c, order) {
            var cos = Math.cos, sin = Math.sin, c2 = cos(b / 2), s2 = sin(b / 2), c13 = cos((a + c) / 2), s13 = sin((a + c) / 2), c1_3 = cos((a - c) / 2), s1_3 = sin((a - c) / 2), c3_1 = cos((c - a) / 2), s3_1 = sin((c - a) / 2);
            switch(order){
                case 'XYX':
                    q.set(c2 * s13, s2 * c1_3, s2 * s1_3, c2 * c13);
                    break;
                case 'YZY':
                    q.set(s2 * s1_3, c2 * s13, s2 * c1_3, c2 * c13);
                    break;
                case 'ZXZ':
                    q.set(s2 * c1_3, s2 * s1_3, c2 * s13, c2 * c13);
                    break;
                case 'XZX':
                    q.set(c2 * s13, s2 * s3_1, s2 * c3_1, c2 * c13);
                    break;
                case 'YXY':
                    q.set(s2 * c3_1, c2 * s13, s2 * s3_1, c2 * c13);
                    break;
                case 'ZYZ':
                    q.set(s2 * s3_1, s2 * c3_1, c2 * s13, c2 * c13);
                    break;
                default:
                    console.warn('THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: ' + order);
            }
        }
    };
    function _defineProperties(target, props) {
        for(var i = 0; i < props.length; i++){
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || !1, descriptor.configurable = !0, "value" in descriptor && (descriptor.writable = !0), Object.defineProperty(target, descriptor.key, descriptor);
        }
    }
    function _createClass(Constructor, protoProps, staticProps) {
        return protoProps && _defineProperties(Constructor.prototype, protoProps), staticProps && _defineProperties(Constructor, staticProps), Constructor;
    }
    function _inheritsLoose(subClass, superClass) {
        subClass.prototype = Object.create(superClass.prototype), subClass.prototype.constructor = subClass, subClass.__proto__ = superClass;
    }
    function _assertThisInitialized(self1) {
        if (void 0 === self1) throw ReferenceError("this hasn't been initialised - super() hasn't been called");
        return self1;
    }
    var Vector2 = function() {
        function Vector2(x, y) {
            void 0 === x && (x = 0), void 0 === y && (y = 0), Object.defineProperty(this, 'isVector2', {
                value: !0
            }), this.x = x, this.y = y;
        }
        var _proto = Vector2.prototype;
        return _proto.set = function(x, y) {
            return this.x = x, this.y = y, this;
        }, _proto.setScalar = function(scalar) {
            return this.x = scalar, this.y = scalar, this;
        }, _proto.setX = function(x) {
            return this.x = x, this;
        }, _proto.setY = function(y) {
            return this.y = y, this;
        }, _proto.setComponent = function(index, value) {
            switch(index){
                case 0:
                    this.x = value;
                    break;
                case 1:
                    this.y = value;
                    break;
                default:
                    throw Error('index is out of range: ' + index);
            }
            return this;
        }, _proto.getComponent = function(index) {
            switch(index){
                case 0:
                    return this.x;
                case 1:
                    return this.y;
                default:
                    throw Error('index is out of range: ' + index);
            }
        }, _proto.clone = function() {
            return new this.constructor(this.x, this.y);
        }, _proto.copy = function(v) {
            return this.x = v.x, this.y = v.y, this;
        }, _proto.add = function(v, w) {
            return void 0 !== w ? (console.warn('THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead.'), this.addVectors(v, w)) : (this.x += v.x, this.y += v.y, this);
        }, _proto.addScalar = function(s) {
            return this.x += s, this.y += s, this;
        }, _proto.addVectors = function(a, b) {
            return this.x = a.x + b.x, this.y = a.y + b.y, this;
        }, _proto.addScaledVector = function(v, s) {
            return this.x += v.x * s, this.y += v.y * s, this;
        }, _proto.sub = function(v, w) {
            return void 0 !== w ? (console.warn('THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.'), this.subVectors(v, w)) : (this.x -= v.x, this.y -= v.y, this);
        }, _proto.subScalar = function(s) {
            return this.x -= s, this.y -= s, this;
        }, _proto.subVectors = function(a, b) {
            return this.x = a.x - b.x, this.y = a.y - b.y, this;
        }, _proto.multiply = function(v) {
            return this.x *= v.x, this.y *= v.y, this;
        }, _proto.multiplyScalar = function(scalar) {
            return this.x *= scalar, this.y *= scalar, this;
        }, _proto.divide = function(v) {
            return this.x /= v.x, this.y /= v.y, this;
        }, _proto.divideScalar = function(scalar) {
            return this.multiplyScalar(1 / scalar);
        }, _proto.applyMatrix3 = function(m) {
            var x = this.x, y = this.y, e = m.elements;
            return this.x = e[0] * x + e[3] * y + e[6], this.y = e[1] * x + e[4] * y + e[7], this;
        }, _proto.min = function(v) {
            return this.x = Math.min(this.x, v.x), this.y = Math.min(this.y, v.y), this;
        }, _proto.max = function(v) {
            return this.x = Math.max(this.x, v.x), this.y = Math.max(this.y, v.y), this;
        }, _proto.clamp = function(min, max) {
            return this.x = Math.max(min.x, Math.min(max.x, this.x)), this.y = Math.max(min.y, Math.min(max.y, this.y)), this;
        }, _proto.clampScalar = function(minVal, maxVal) {
            return this.x = Math.max(minVal, Math.min(maxVal, this.x)), this.y = Math.max(minVal, Math.min(maxVal, this.y)), this;
        }, _proto.clampLength = function(min, max) {
            var length = this.length();
            return this.divideScalar(length || 1).multiplyScalar(Math.max(min, Math.min(max, length)));
        }, _proto.floor = function() {
            return this.x = Math.floor(this.x), this.y = Math.floor(this.y), this;
        }, _proto.ceil = function() {
            return this.x = Math.ceil(this.x), this.y = Math.ceil(this.y), this;
        }, _proto.round = function() {
            return this.x = Math.round(this.x), this.y = Math.round(this.y), this;
        }, _proto.roundToZero = function() {
            return this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x), this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y), this;
        }, _proto.negate = function() {
            return this.x = -this.x, this.y = -this.y, this;
        }, _proto.dot = function(v) {
            return this.x * v.x + this.y * v.y;
        }, _proto.cross = function(v) {
            return this.x * v.y - this.y * v.x;
        }, _proto.lengthSq = function() {
            return this.x * this.x + this.y * this.y;
        }, _proto.length = function() {
            return Math.sqrt(this.x * this.x + this.y * this.y);
        }, _proto.manhattanLength = function() {
            return Math.abs(this.x) + Math.abs(this.y);
        }, _proto.normalize = function() {
            return this.divideScalar(this.length() || 1);
        }, _proto.angle = function() {
            return Math.atan2(-this.y, -this.x) + Math.PI;
        }, _proto.distanceTo = function(v) {
            return Math.sqrt(this.distanceToSquared(v));
        }, _proto.distanceToSquared = function(v) {
            var dx = this.x - v.x, dy = this.y - v.y;
            return dx * dx + dy * dy;
        }, _proto.manhattanDistanceTo = function(v) {
            return Math.abs(this.x - v.x) + Math.abs(this.y - v.y);
        }, _proto.setLength = function(length) {
            return this.normalize().multiplyScalar(length);
        }, _proto.lerp = function(v, alpha) {
            return this.x += (v.x - this.x) * alpha, this.y += (v.y - this.y) * alpha, this;
        }, _proto.lerpVectors = function(v1, v2, alpha) {
            return this.x = v1.x + (v2.x - v1.x) * alpha, this.y = v1.y + (v2.y - v1.y) * alpha, this;
        }, _proto.equals = function(v) {
            return v.x === this.x && v.y === this.y;
        }, _proto.fromArray = function(array, offset) {
            return void 0 === offset && (offset = 0), this.x = array[offset], this.y = array[offset + 1], this;
        }, _proto.toArray = function(array, offset) {
            return void 0 === array && (array = []), void 0 === offset && (offset = 0), array[offset] = this.x, array[offset + 1] = this.y, array;
        }, _proto.fromBufferAttribute = function(attribute, index, offset) {
            return void 0 !== offset && console.warn('THREE.Vector2: offset has been removed from .fromBufferAttribute().'), this.x = attribute.getX(index), this.y = attribute.getY(index), this;
        }, _proto.rotateAround = function(center, angle) {
            var c = Math.cos(angle), s = Math.sin(angle), x = this.x - center.x, y = this.y - center.y;
            return this.x = x * c - y * s + center.x, this.y = x * s + y * c + center.y, this;
        }, _proto.random = function() {
            return this.x = Math.random(), this.y = Math.random(), this;
        }, _createClass(Vector2, [
            {
                key: "width",
                get: function() {
                    return this.x;
                },
                set: function(value) {
                    this.x = value;
                }
            },
            {
                key: "height",
                get: function() {
                    return this.y;
                },
                set: function(value) {
                    this.y = value;
                }
            }
        ]), Vector2;
    }(), Matrix3 = function() {
        function Matrix3() {
            Object.defineProperty(this, 'isMatrix3', {
                value: !0
            }), this.elements = [
                1,
                0,
                0,
                0,
                1,
                0,
                0,
                0,
                1
            ], arguments.length > 0 && console.error('THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.');
        }
        var _proto = Matrix3.prototype;
        return _proto.set = function(n11, n12, n13, n21, n22, n23, n31, n32, n33) {
            var te = this.elements;
            return te[0] = n11, te[1] = n21, te[2] = n31, te[3] = n12, te[4] = n22, te[5] = n32, te[6] = n13, te[7] = n23, te[8] = n33, this;
        }, _proto.identity = function() {
            return this.set(1, 0, 0, 0, 1, 0, 0, 0, 1), this;
        }, _proto.clone = function() {
            return new this.constructor().fromArray(this.elements);
        }, _proto.copy = function(m) {
            var te = this.elements, me = m.elements;
            return te[0] = me[0], te[1] = me[1], te[2] = me[2], te[3] = me[3], te[4] = me[4], te[5] = me[5], te[6] = me[6], te[7] = me[7], te[8] = me[8], this;
        }, _proto.extractBasis = function(xAxis, yAxis, zAxis) {
            return xAxis.setFromMatrix3Column(this, 0), yAxis.setFromMatrix3Column(this, 1), zAxis.setFromMatrix3Column(this, 2), this;
        }, _proto.setFromMatrix4 = function(m) {
            var me = m.elements;
            return this.set(me[0], me[4], me[8], me[1], me[5], me[9], me[2], me[6], me[10]), this;
        }, _proto.multiply = function(m) {
            return this.multiplyMatrices(this, m);
        }, _proto.premultiply = function(m) {
            return this.multiplyMatrices(m, this);
        }, _proto.multiplyMatrices = function(a, b) {
            var ae = a.elements, be = b.elements, te = this.elements, a11 = ae[0], a12 = ae[3], a13 = ae[6], a21 = ae[1], a22 = ae[4], a23 = ae[7], a31 = ae[2], a32 = ae[5], a33 = ae[8], b11 = be[0], b12 = be[3], b13 = be[6], b21 = be[1], b22 = be[4], b23 = be[7], b31 = be[2], b32 = be[5], b33 = be[8];
            return te[0] = a11 * b11 + a12 * b21 + a13 * b31, te[3] = a11 * b12 + a12 * b22 + a13 * b32, te[6] = a11 * b13 + a12 * b23 + a13 * b33, te[1] = a21 * b11 + a22 * b21 + a23 * b31, te[4] = a21 * b12 + a22 * b22 + a23 * b32, te[7] = a21 * b13 + a22 * b23 + a23 * b33, te[2] = a31 * b11 + a32 * b21 + a33 * b31, te[5] = a31 * b12 + a32 * b22 + a33 * b32, te[8] = a31 * b13 + a32 * b23 + a33 * b33, this;
        }, _proto.multiplyScalar = function(s) {
            var te = this.elements;
            return te[0] *= s, te[3] *= s, te[6] *= s, te[1] *= s, te[4] *= s, te[7] *= s, te[2] *= s, te[5] *= s, te[8] *= s, this;
        }, _proto.determinant = function() {
            var te = this.elements, a = te[0], b = te[1], c = te[2], d = te[3], e = te[4], f = te[5], g = te[6], h = te[7], i = te[8];
            return a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g;
        }, _proto.invert = function() {
            var te = this.elements, n11 = te[0], n21 = te[1], n31 = te[2], n12 = te[3], n22 = te[4], n32 = te[5], n13 = te[6], n23 = te[7], n33 = te[8], t11 = n33 * n22 - n32 * n23, t12 = n32 * n13 - n33 * n12, t13 = n23 * n12 - n22 * n13, det = n11 * t11 + n21 * t12 + n31 * t13;
            if (0 === det) return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0);
            var detInv = 1 / det;
            return te[0] = t11 * detInv, te[1] = (n31 * n23 - n33 * n21) * detInv, te[2] = (n32 * n21 - n31 * n22) * detInv, te[3] = t12 * detInv, te[4] = (n33 * n11 - n31 * n13) * detInv, te[5] = (n31 * n12 - n32 * n11) * detInv, te[6] = t13 * detInv, te[7] = (n21 * n13 - n23 * n11) * detInv, te[8] = (n22 * n11 - n21 * n12) * detInv, this;
        }, _proto.transpose = function() {
            var tmp, m = this.elements;
            return tmp = m[1], m[1] = m[3], m[3] = tmp, tmp = m[2], m[2] = m[6], m[6] = tmp, tmp = m[5], m[5] = m[7], m[7] = tmp, this;
        }, _proto.getNormalMatrix = function(matrix4) {
            return this.setFromMatrix4(matrix4).copy(this).invert().transpose();
        }, _proto.transposeIntoArray = function(r) {
            var m = this.elements;
            return r[0] = m[0], r[1] = m[3], r[2] = m[6], r[3] = m[1], r[4] = m[4], r[5] = m[7], r[6] = m[2], r[7] = m[5], r[8] = m[8], this;
        }, _proto.setUvTransform = function(tx, ty, sx, sy, rotation, cx, cy) {
            var c = Math.cos(rotation), s = Math.sin(rotation);
            return this.set(sx * c, sx * s, -sx * (c * cx + s * cy) + cx + tx, -sy * s, sy * c, -sy * (-s * cx + c * cy) + cy + ty, 0, 0, 1), this;
        }, _proto.scale = function(sx, sy) {
            var te = this.elements;
            return te[0] *= sx, te[3] *= sx, te[6] *= sx, te[1] *= sy, te[4] *= sy, te[7] *= sy, this;
        }, _proto.rotate = function(theta) {
            var c = Math.cos(theta), s = Math.sin(theta), te = this.elements, a11 = te[0], a12 = te[3], a13 = te[6], a21 = te[1], a22 = te[4], a23 = te[7];
            return te[0] = c * a11 + s * a21, te[3] = c * a12 + s * a22, te[6] = c * a13 + s * a23, te[1] = -s * a11 + c * a21, te[4] = -s * a12 + c * a22, te[7] = -s * a13 + c * a23, this;
        }, _proto.translate = function(tx, ty) {
            var te = this.elements;
            return te[0] += tx * te[2], te[3] += tx * te[5], te[6] += tx * te[8], te[1] += ty * te[2], te[4] += ty * te[5], te[7] += ty * te[8], this;
        }, _proto.equals = function(matrix) {
            for(var te = this.elements, me = matrix.elements, i = 0; i < 9; i++)if (te[i] !== me[i]) return !1;
            return !0;
        }, _proto.fromArray = function(array, offset) {
            void 0 === offset && (offset = 0);
            for(var i = 0; i < 9; i++)this.elements[i] = array[i + offset];
            return this;
        }, _proto.toArray = function(array, offset) {
            void 0 === array && (array = []), void 0 === offset && (offset = 0);
            var te = this.elements;
            return array[offset] = te[0], array[offset + 1] = te[1], array[offset + 2] = te[2], array[offset + 3] = te[3], array[offset + 4] = te[4], array[offset + 5] = te[5], array[offset + 6] = te[6], array[offset + 7] = te[7], array[offset + 8] = te[8], array;
        }, Matrix3;
    }(), ImageUtils = {
        getDataURL: function(image) {
            if (/^data:/i.test(image.src) || 'undefined' == typeof HTMLCanvasElement) return image.src;
            if (image instanceof HTMLCanvasElement) canvas = image;
            else {
                void 0 === _canvas && (_canvas = document.createElementNS('http://www.w3.org/1999/xhtml', 'canvas')), _canvas.width = image.width, _canvas.height = image.height;
                var canvas, context = _canvas.getContext('2d');
                image instanceof ImageData ? context.putImageData(image, 0, 0) : context.drawImage(image, 0, 0, image.width, image.height), canvas = _canvas;
            }
            return canvas.width > 2048 || canvas.height > 2048 ? canvas.toDataURL('image/jpeg', 0.6) : canvas.toDataURL('image/png');
        }
    }, textureId = 0;
    function Texture(image, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding) {
        void 0 === image && (image = Texture.DEFAULT_IMAGE), void 0 === mapping && (mapping = Texture.DEFAULT_MAPPING), void 0 === wrapS && (wrapS = 1001), void 0 === wrapT && (wrapT = 1001), void 0 === magFilter && (magFilter = 1006), void 0 === minFilter && (minFilter = 1008), void 0 === format && (format = 1023), void 0 === type && (type = 1009), void 0 === anisotropy && (anisotropy = 1), void 0 === encoding && (encoding = 3000), Object.defineProperty(this, 'id', {
            value: textureId++
        }), this.uuid = MathUtils.generateUUID(), this.name = '', this.image = image, this.mipmaps = [], this.mapping = mapping, this.wrapS = wrapS, this.wrapT = wrapT, this.magFilter = magFilter, this.minFilter = minFilter, this.anisotropy = anisotropy, this.format = format, this.internalFormat = null, this.type = type, this.offset = new Vector2(0, 0), this.repeat = new Vector2(1, 1), this.center = new Vector2(0, 0), this.rotation = 0, this.matrixAutoUpdate = !0, this.matrix = new Matrix3(), this.generateMipmaps = !0, this.premultiplyAlpha = !1, this.flipY = !0, this.unpackAlignment = 4, this.encoding = encoding, this.version = 0, this.onUpdate = null;
    }
    function serializeImage(image) {
        return 'undefined' != typeof HTMLImageElement && image instanceof HTMLImageElement || 'undefined' != typeof HTMLCanvasElement && image instanceof HTMLCanvasElement || 'undefined' != typeof ImageBitmap && image instanceof ImageBitmap ? ImageUtils.getDataURL(image) : image.data ? {
            data: Array.prototype.slice.call(image.data),
            width: image.width,
            height: image.height,
            type: image.data.constructor.name
        } : (console.warn('THREE.Texture: Unable to serialize Texture.'), {});
    }
    Texture.DEFAULT_IMAGE = void 0, Texture.DEFAULT_MAPPING = 300, Texture.prototype = Object.assign(Object.create(EventDispatcher.prototype), {
        constructor: Texture,
        isTexture: !0,
        updateMatrix: function() {
            this.matrix.setUvTransform(this.offset.x, this.offset.y, this.repeat.x, this.repeat.y, this.rotation, this.center.x, this.center.y);
        },
        clone: function() {
            return new this.constructor().copy(this);
        },
        copy: function(source) {
            return this.name = source.name, this.image = source.image, this.mipmaps = source.mipmaps.slice(0), this.mapping = source.mapping, this.wrapS = source.wrapS, this.wrapT = source.wrapT, this.magFilter = source.magFilter, this.minFilter = source.minFilter, this.anisotropy = source.anisotropy, this.format = source.format, this.internalFormat = source.internalFormat, this.type = source.type, this.offset.copy(source.offset), this.repeat.copy(source.repeat), this.center.copy(source.center), this.rotation = source.rotation, this.matrixAutoUpdate = source.matrixAutoUpdate, this.matrix.copy(source.matrix), this.generateMipmaps = source.generateMipmaps, this.premultiplyAlpha = source.premultiplyAlpha, this.flipY = source.flipY, this.unpackAlignment = source.unpackAlignment, this.encoding = source.encoding, this;
        },
        toJSON: function(meta) {
            var isRootObject = void 0 === meta || 'string' == typeof meta;
            if (!isRootObject && void 0 !== meta.textures[this.uuid]) return meta.textures[this.uuid];
            var output = {
                metadata: {
                    version: 4.5,
                    type: 'Texture',
                    generator: 'Texture.toJSON'
                },
                uuid: this.uuid,
                name: this.name,
                mapping: this.mapping,
                repeat: [
                    this.repeat.x,
                    this.repeat.y
                ],
                offset: [
                    this.offset.x,
                    this.offset.y
                ],
                center: [
                    this.center.x,
                    this.center.y
                ],
                rotation: this.rotation,
                wrap: [
                    this.wrapS,
                    this.wrapT
                ],
                format: this.format,
                type: this.type,
                encoding: this.encoding,
                minFilter: this.minFilter,
                magFilter: this.magFilter,
                anisotropy: this.anisotropy,
                flipY: this.flipY,
                premultiplyAlpha: this.premultiplyAlpha,
                unpackAlignment: this.unpackAlignment
            };
            if (void 0 !== this.image) {
                var url, image = this.image;
                if (void 0 === image.uuid && (image.uuid = MathUtils.generateUUID()), !isRootObject && void 0 === meta.images[image.uuid]) {
                    if (Array.isArray(image)) {
                        url = [];
                        for(var i = 0, l = image.length; i < l; i++)image[i].isDataTexture ? url.push(serializeImage(image[i].image)) : url.push(serializeImage(image[i]));
                    } else url = serializeImage(image);
                    meta.images[image.uuid] = {
                        uuid: image.uuid,
                        url: url
                    };
                }
                output.image = image.uuid;
            }
            return isRootObject || (meta.textures[this.uuid] = output), output;
        },
        dispose: function() {
            this.dispatchEvent({
                type: 'dispose'
            });
        },
        transformUv: function(uv) {
            if (300 !== this.mapping) return uv;
            if (uv.applyMatrix3(this.matrix), uv.x < 0 || uv.x > 1) switch(this.wrapS){
                case 1000:
                    uv.x = uv.x - Math.floor(uv.x);
                    break;
                case 1001:
                    uv.x = uv.x < 0 ? 0 : 1;
                    break;
                case 1002:
                    1 === Math.abs(Math.floor(uv.x) % 2) ? uv.x = Math.ceil(uv.x) - uv.x : uv.x = uv.x - Math.floor(uv.x);
            }
            if (uv.y < 0 || uv.y > 1) switch(this.wrapT){
                case 1000:
                    uv.y = uv.y - Math.floor(uv.y);
                    break;
                case 1001:
                    uv.y = uv.y < 0 ? 0 : 1;
                    break;
                case 1002:
                    1 === Math.abs(Math.floor(uv.y) % 2) ? uv.y = Math.ceil(uv.y) - uv.y : uv.y = uv.y - Math.floor(uv.y);
            }
            return this.flipY && (uv.y = 1 - uv.y), uv;
        }
    }), Object.defineProperty(Texture.prototype, 'needsUpdate', {
        set: function(value) {
            !0 === value && this.version++;
        }
    });
    var Vector4 = function() {
        function Vector4(x, y, z, w) {
            void 0 === x && (x = 0), void 0 === y && (y = 0), void 0 === z && (z = 0), void 0 === w && (w = 1), Object.defineProperty(this, 'isVector4', {
                value: !0
            }), this.x = x, this.y = y, this.z = z, this.w = w;
        }
        var _proto = Vector4.prototype;
        return _proto.set = function(x, y, z, w) {
            return this.x = x, this.y = y, this.z = z, this.w = w, this;
        }, _proto.setScalar = function(scalar) {
            return this.x = scalar, this.y = scalar, this.z = scalar, this.w = scalar, this;
        }, _proto.setX = function(x) {
            return this.x = x, this;
        }, _proto.setY = function(y) {
            return this.y = y, this;
        }, _proto.setZ = function(z) {
            return this.z = z, this;
        }, _proto.setW = function(w) {
            return this.w = w, this;
        }, _proto.setComponent = function(index, value) {
            switch(index){
                case 0:
                    this.x = value;
                    break;
                case 1:
                    this.y = value;
                    break;
                case 2:
                    this.z = value;
                    break;
                case 3:
                    this.w = value;
                    break;
                default:
                    throw Error('index is out of range: ' + index);
            }
            return this;
        }, _proto.getComponent = function(index) {
            switch(index){
                case 0:
                    return this.x;
                case 1:
                    return this.y;
                case 2:
                    return this.z;
                case 3:
                    return this.w;
                default:
                    throw Error('index is out of range: ' + index);
            }
        }, _proto.clone = function() {
            return new this.constructor(this.x, this.y, this.z, this.w);
        }, _proto.copy = function(v) {
            return this.x = v.x, this.y = v.y, this.z = v.z, this.w = void 0 !== v.w ? v.w : 1, this;
        }, _proto.add = function(v, w) {
            return void 0 !== w ? (console.warn('THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead.'), this.addVectors(v, w)) : (this.x += v.x, this.y += v.y, this.z += v.z, this.w += v.w, this);
        }, _proto.addScalar = function(s) {
            return this.x += s, this.y += s, this.z += s, this.w += s, this;
        }, _proto.addVectors = function(a, b) {
            return this.x = a.x + b.x, this.y = a.y + b.y, this.z = a.z + b.z, this.w = a.w + b.w, this;
        }, _proto.addScaledVector = function(v, s) {
            return this.x += v.x * s, this.y += v.y * s, this.z += v.z * s, this.w += v.w * s, this;
        }, _proto.sub = function(v, w) {
            return void 0 !== w ? (console.warn('THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.'), this.subVectors(v, w)) : (this.x -= v.x, this.y -= v.y, this.z -= v.z, this.w -= v.w, this);
        }, _proto.subScalar = function(s) {
            return this.x -= s, this.y -= s, this.z -= s, this.w -= s, this;
        }, _proto.subVectors = function(a, b) {
            return this.x = a.x - b.x, this.y = a.y - b.y, this.z = a.z - b.z, this.w = a.w - b.w, this;
        }, _proto.multiplyScalar = function(scalar) {
            return this.x *= scalar, this.y *= scalar, this.z *= scalar, this.w *= scalar, this;
        }, _proto.applyMatrix4 = function(m) {
            var x = this.x, y = this.y, z = this.z, w = this.w, e = m.elements;
            return this.x = e[0] * x + e[4] * y + e[8] * z + e[12] * w, this.y = e[1] * x + e[5] * y + e[9] * z + e[13] * w, this.z = e[2] * x + e[6] * y + e[10] * z + e[14] * w, this.w = e[3] * x + e[7] * y + e[11] * z + e[15] * w, this;
        }, _proto.divideScalar = function(scalar) {
            return this.multiplyScalar(1 / scalar);
        }, _proto.setAxisAngleFromQuaternion = function(q) {
            this.w = 2 * Math.acos(q.w);
            var s = Math.sqrt(1 - q.w * q.w);
            return s < 0.0001 ? (this.x = 1, this.y = 0, this.z = 0) : (this.x = q.x / s, this.y = q.y / s, this.z = q.z / s), this;
        }, _proto.setAxisAngleFromRotationMatrix = function(m) {
            var angle, x, y, z, te = m.elements, m11 = te[0], m12 = te[4], m13 = te[8], m21 = te[1], m22 = te[5], m23 = te[9], m31 = te[2], m32 = te[6], m33 = te[10];
            if (0.01 > Math.abs(m12 - m21) && 0.01 > Math.abs(m13 - m31) && 0.01 > Math.abs(m23 - m32)) {
                if (0.1 > Math.abs(m12 + m21) && 0.1 > Math.abs(m13 + m31) && 0.1 > Math.abs(m23 + m32) && 0.1 > Math.abs(m11 + m22 + m33 - 3)) return this.set(1, 0, 0, 0), this;
                angle = Math.PI;
                var xx = (m11 + 1) / 2, yy = (m22 + 1) / 2, zz = (m33 + 1) / 2, xy = (m12 + m21) / 4, xz = (m13 + m31) / 4, yz = (m23 + m32) / 4;
                return xx > yy && xx > zz ? xx < 0.01 ? (x = 0, y = 0.707106781, z = 0.707106781) : (y = xy / (x = Math.sqrt(xx)), z = xz / x) : yy > zz ? yy < 0.01 ? (x = 0.707106781, y = 0, z = 0.707106781) : (x = xy / (y = Math.sqrt(yy)), z = yz / y) : zz < 0.01 ? (x = 0.707106781, y = 0.707106781, z = 0) : (x = xz / (z = Math.sqrt(zz)), y = yz / z), this.set(x, y, z, angle), this;
            }
            var s = Math.sqrt((m32 - m23) * (m32 - m23) + (m13 - m31) * (m13 - m31) + (m21 - m12) * (m21 - m12));
            return 0.001 > Math.abs(s) && (s = 1), this.x = (m32 - m23) / s, this.y = (m13 - m31) / s, this.z = (m21 - m12) / s, this.w = Math.acos((m11 + m22 + m33 - 1) / 2), this;
        }, _proto.min = function(v) {
            return this.x = Math.min(this.x, v.x), this.y = Math.min(this.y, v.y), this.z = Math.min(this.z, v.z), this.w = Math.min(this.w, v.w), this;
        }, _proto.max = function(v) {
            return this.x = Math.max(this.x, v.x), this.y = Math.max(this.y, v.y), this.z = Math.max(this.z, v.z), this.w = Math.max(this.w, v.w), this;
        }, _proto.clamp = function(min, max) {
            return this.x = Math.max(min.x, Math.min(max.x, this.x)), this.y = Math.max(min.y, Math.min(max.y, this.y)), this.z = Math.max(min.z, Math.min(max.z, this.z)), this.w = Math.max(min.w, Math.min(max.w, this.w)), this;
        }, _proto.clampScalar = function(minVal, maxVal) {
            return this.x = Math.max(minVal, Math.min(maxVal, this.x)), this.y = Math.max(minVal, Math.min(maxVal, this.y)), this.z = Math.max(minVal, Math.min(maxVal, this.z)), this.w = Math.max(minVal, Math.min(maxVal, this.w)), this;
        }, _proto.clampLength = function(min, max) {
            var length = this.length();
            return this.divideScalar(length || 1).multiplyScalar(Math.max(min, Math.min(max, length)));
        }, _proto.floor = function() {
            return this.x = Math.floor(this.x), this.y = Math.floor(this.y), this.z = Math.floor(this.z), this.w = Math.floor(this.w), this;
        }, _proto.ceil = function() {
            return this.x = Math.ceil(this.x), this.y = Math.ceil(this.y), this.z = Math.ceil(this.z), this.w = Math.ceil(this.w), this;
        }, _proto.round = function() {
            return this.x = Math.round(this.x), this.y = Math.round(this.y), this.z = Math.round(this.z), this.w = Math.round(this.w), this;
        }, _proto.roundToZero = function() {
            return this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x), this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y), this.z = this.z < 0 ? Math.ceil(this.z) : Math.floor(this.z), this.w = this.w < 0 ? Math.ceil(this.w) : Math.floor(this.w), this;
        }, _proto.negate = function() {
            return this.x = -this.x, this.y = -this.y, this.z = -this.z, this.w = -this.w, this;
        }, _proto.dot = function(v) {
            return this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;
        }, _proto.lengthSq = function() {
            return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;
        }, _proto.length = function() {
            return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
        }, _proto.manhattanLength = function() {
            return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z) + Math.abs(this.w);
        }, _proto.normalize = function() {
            return this.divideScalar(this.length() || 1);
        }, _proto.setLength = function(length) {
            return this.normalize().multiplyScalar(length);
        }, _proto.lerp = function(v, alpha) {
            return this.x += (v.x - this.x) * alpha, this.y += (v.y - this.y) * alpha, this.z += (v.z - this.z) * alpha, this.w += (v.w - this.w) * alpha, this;
        }, _proto.lerpVectors = function(v1, v2, alpha) {
            return this.x = v1.x + (v2.x - v1.x) * alpha, this.y = v1.y + (v2.y - v1.y) * alpha, this.z = v1.z + (v2.z - v1.z) * alpha, this.w = v1.w + (v2.w - v1.w) * alpha, this;
        }, _proto.equals = function(v) {
            return v.x === this.x && v.y === this.y && v.z === this.z && v.w === this.w;
        }, _proto.fromArray = function(array, offset) {
            return void 0 === offset && (offset = 0), this.x = array[offset], this.y = array[offset + 1], this.z = array[offset + 2], this.w = array[offset + 3], this;
        }, _proto.toArray = function(array, offset) {
            return void 0 === array && (array = []), void 0 === offset && (offset = 0), array[offset] = this.x, array[offset + 1] = this.y, array[offset + 2] = this.z, array[offset + 3] = this.w, array;
        }, _proto.fromBufferAttribute = function(attribute, index, offset) {
            return void 0 !== offset && console.warn('THREE.Vector4: offset has been removed from .fromBufferAttribute().'), this.x = attribute.getX(index), this.y = attribute.getY(index), this.z = attribute.getZ(index), this.w = attribute.getW(index), this;
        }, _proto.random = function() {
            return this.x = Math.random(), this.y = Math.random(), this.z = Math.random(), this.w = Math.random(), this;
        }, _createClass(Vector4, [
            {
                key: "width",
                get: function() {
                    return this.z;
                },
                set: function(value) {
                    this.z = value;
                }
            },
            {
                key: "height",
                get: function() {
                    return this.w;
                },
                set: function(value) {
                    this.w = value;
                }
            }
        ]), Vector4;
    }();
    function WebGLRenderTarget(width, height, options) {
        this.width = width, this.height = height, this.scissor = new Vector4(0, 0, width, height), this.scissorTest = !1, this.viewport = new Vector4(0, 0, width, height), options = options || {}, this.texture = new Texture(void 0, options.mapping, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.encoding), this.texture.image = {}, this.texture.image.width = width, this.texture.image.height = height, this.texture.generateMipmaps = void 0 !== options.generateMipmaps && options.generateMipmaps, this.texture.minFilter = void 0 !== options.minFilter ? options.minFilter : 1006, this.depthBuffer = void 0 === options.depthBuffer || options.depthBuffer, this.stencilBuffer = void 0 !== options.stencilBuffer && options.stencilBuffer, this.depthTexture = void 0 !== options.depthTexture ? options.depthTexture : null;
    }
    function WebGLMultisampleRenderTarget(width, height, options) {
        WebGLRenderTarget.call(this, width, height, options), this.samples = 4;
    }
    WebGLRenderTarget.prototype = Object.assign(Object.create(EventDispatcher.prototype), {
        constructor: WebGLRenderTarget,
        isWebGLRenderTarget: !0,
        setSize: function(width, height) {
            (this.width !== width || this.height !== height) && (this.width = width, this.height = height, this.texture.image.width = width, this.texture.image.height = height, this.dispose()), this.viewport.set(0, 0, width, height), this.scissor.set(0, 0, width, height);
        },
        clone: function() {
            return new this.constructor().copy(this);
        },
        copy: function(source) {
            return this.width = source.width, this.height = source.height, this.viewport.copy(source.viewport), this.texture = source.texture.clone(), this.depthBuffer = source.depthBuffer, this.stencilBuffer = source.stencilBuffer, this.depthTexture = source.depthTexture, this;
        },
        dispose: function() {
            this.dispatchEvent({
                type: 'dispose'
            });
        }
    }), WebGLMultisampleRenderTarget.prototype = Object.assign(Object.create(WebGLRenderTarget.prototype), {
        constructor: WebGLMultisampleRenderTarget,
        isWebGLMultisampleRenderTarget: !0,
        copy: function(source) {
            return WebGLRenderTarget.prototype.copy.call(this, source), this.samples = source.samples, this;
        }
    });
    var Quaternion = function() {
        function Quaternion(x, y, z, w) {
            void 0 === x && (x = 0), void 0 === y && (y = 0), void 0 === z && (z = 0), void 0 === w && (w = 1), Object.defineProperty(this, 'isQuaternion', {
                value: !0
            }), this._x = x, this._y = y, this._z = z, this._w = w;
        }
        Quaternion.slerp = function(qa, qb, qm, t) {
            return qm.copy(qa).slerp(qb, t);
        }, Quaternion.slerpFlat = function(dst, dstOffset, src0, srcOffset0, src1, srcOffset1, t) {
            var x0 = src0[srcOffset0 + 0], y0 = src0[srcOffset0 + 1], z0 = src0[srcOffset0 + 2], w0 = src0[srcOffset0 + 3], x1 = src1[srcOffset1 + 0], y1 = src1[srcOffset1 + 1], z1 = src1[srcOffset1 + 2], w1 = src1[srcOffset1 + 3];
            if (w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1) {
                var s = 1 - t, cos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1, dir = cos >= 0 ? 1 : -1, sqrSin = 1 - cos * cos;
                if (sqrSin > Number.EPSILON) {
                    var sin = Math.sqrt(sqrSin), len = Math.atan2(sin, cos * dir);
                    s = Math.sin(s * len) / sin, t = Math.sin(t * len) / sin;
                }
                var tDir = t * dir;
                if (x0 = x0 * s + x1 * tDir, y0 = y0 * s + y1 * tDir, z0 = z0 * s + z1 * tDir, w0 = w0 * s + w1 * tDir, s === 1 - t) {
                    var f = 1 / Math.sqrt(x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0);
                    x0 *= f, y0 *= f, z0 *= f, w0 *= f;
                }
            }
            dst[dstOffset] = x0, dst[dstOffset + 1] = y0, dst[dstOffset + 2] = z0, dst[dstOffset + 3] = w0;
        }, Quaternion.multiplyQuaternionsFlat = function(dst, dstOffset, src0, srcOffset0, src1, srcOffset1) {
            var x0 = src0[srcOffset0], y0 = src0[srcOffset0 + 1], z0 = src0[srcOffset0 + 2], w0 = src0[srcOffset0 + 3], x1 = src1[srcOffset1], y1 = src1[srcOffset1 + 1], z1 = src1[srcOffset1 + 2], w1 = src1[srcOffset1 + 3];
            return dst[dstOffset] = x0 * w1 + w0 * x1 + y0 * z1 - z0 * y1, dst[dstOffset + 1] = y0 * w1 + w0 * y1 + z0 * x1 - x0 * z1, dst[dstOffset + 2] = z0 * w1 + w0 * z1 + x0 * y1 - y0 * x1, dst[dstOffset + 3] = w0 * w1 - x0 * x1 - y0 * y1 - z0 * z1, dst;
        };
        var _proto = Quaternion.prototype;
        return _proto.set = function(x, y, z, w) {
            return this._x = x, this._y = y, this._z = z, this._w = w, this._onChangeCallback(), this;
        }, _proto.clone = function() {
            return new this.constructor(this._x, this._y, this._z, this._w);
        }, _proto.copy = function(quaternion) {
            return this._x = quaternion.x, this._y = quaternion.y, this._z = quaternion.z, this._w = quaternion.w, this._onChangeCallback(), this;
        }, _proto.setFromEuler = function(euler, update) {
            if (!(euler && euler.isEuler)) throw Error('THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.');
            var x = euler._x, y = euler._y, z = euler._z, order = euler._order, cos = Math.cos, sin = Math.sin, c1 = cos(x / 2), c2 = cos(y / 2), c3 = cos(z / 2), s1 = sin(x / 2), s2 = sin(y / 2), s3 = sin(z / 2);
            switch(order){
                case 'XYZ':
                    this._x = s1 * c2 * c3 + c1 * s2 * s3, this._y = c1 * s2 * c3 - s1 * c2 * s3, this._z = c1 * c2 * s3 + s1 * s2 * c3, this._w = c1 * c2 * c3 - s1 * s2 * s3;
                    break;
                case 'YXZ':
                    this._x = s1 * c2 * c3 + c1 * s2 * s3, this._y = c1 * s2 * c3 - s1 * c2 * s3, this._z = c1 * c2 * s3 - s1 * s2 * c3, this._w = c1 * c2 * c3 + s1 * s2 * s3;
                    break;
                case 'ZXY':
                    this._x = s1 * c2 * c3 - c1 * s2 * s3, this._y = c1 * s2 * c3 + s1 * c2 * s3, this._z = c1 * c2 * s3 + s1 * s2 * c3, this._w = c1 * c2 * c3 - s1 * s2 * s3;
                    break;
                case 'ZYX':
                    this._x = s1 * c2 * c3 - c1 * s2 * s3, this._y = c1 * s2 * c3 + s1 * c2 * s3, this._z = c1 * c2 * s3 - s1 * s2 * c3, this._w = c1 * c2 * c3 + s1 * s2 * s3;
                    break;
                case 'YZX':
                    this._x = s1 * c2 * c3 + c1 * s2 * s3, this._y = c1 * s2 * c3 + s1 * c2 * s3, this._z = c1 * c2 * s3 - s1 * s2 * c3, this._w = c1 * c2 * c3 - s1 * s2 * s3;
                    break;
                case 'XZY':
                    this._x = s1 * c2 * c3 - c1 * s2 * s3, this._y = c1 * s2 * c3 - s1 * c2 * s3, this._z = c1 * c2 * s3 + s1 * s2 * c3, this._w = c1 * c2 * c3 + s1 * s2 * s3;
                    break;
                default:
                    console.warn('THREE.Quaternion: .setFromEuler() encountered an unknown order: ' + order);
            }
            return !1 !== update && this._onChangeCallback(), this;
        }, _proto.setFromAxisAngle = function(axis, angle) {
            var halfAngle = angle / 2, s = Math.sin(halfAngle);
            return this._x = axis.x * s, this._y = axis.y * s, this._z = axis.z * s, this._w = Math.cos(halfAngle), this._onChangeCallback(), this;
        }, _proto.setFromRotationMatrix = function(m) {
            var te = m.elements, m11 = te[0], m12 = te[4], m13 = te[8], m21 = te[1], m22 = te[5], m23 = te[9], m31 = te[2], m32 = te[6], m33 = te[10], trace = m11 + m22 + m33;
            if (trace > 0) {
                var s = 0.5 / Math.sqrt(trace + 1.0);
                this._w = 0.25 / s, this._x = (m32 - m23) * s, this._y = (m13 - m31) * s, this._z = (m21 - m12) * s;
            } else if (m11 > m22 && m11 > m33) {
                var _s = 2.0 * Math.sqrt(1.0 + m11 - m22 - m33);
                this._w = (m32 - m23) / _s, this._x = 0.25 * _s, this._y = (m12 + m21) / _s, this._z = (m13 + m31) / _s;
            } else if (m22 > m33) {
                var _s2 = 2.0 * Math.sqrt(1.0 + m22 - m11 - m33);
                this._w = (m13 - m31) / _s2, this._x = (m12 + m21) / _s2, this._y = 0.25 * _s2, this._z = (m23 + m32) / _s2;
            } else {
                var _s3 = 2.0 * Math.sqrt(1.0 + m33 - m11 - m22);
                this._w = (m21 - m12) / _s3, this._x = (m13 + m31) / _s3, this._y = (m23 + m32) / _s3, this._z = 0.25 * _s3;
            }
            return this._onChangeCallback(), this;
        }, _proto.setFromUnitVectors = function(vFrom, vTo) {
            var r = vFrom.dot(vTo) + 1;
            return r < 0.000001 ? (r = 0, Math.abs(vFrom.x) > Math.abs(vFrom.z) ? (this._x = -vFrom.y, this._y = vFrom.x, this._z = 0, this._w = r) : (this._x = 0, this._y = -vFrom.z, this._z = vFrom.y, this._w = r)) : (this._x = vFrom.y * vTo.z - vFrom.z * vTo.y, this._y = vFrom.z * vTo.x - vFrom.x * vTo.z, this._z = vFrom.x * vTo.y - vFrom.y * vTo.x, this._w = r), this.normalize();
        }, _proto.angleTo = function(q) {
            return 2 * Math.acos(Math.abs(MathUtils.clamp(this.dot(q), -1, 1)));
        }, _proto.rotateTowards = function(q, step) {
            var angle = this.angleTo(q);
            if (0 === angle) return this;
            var t = Math.min(1, step / angle);
            return this.slerp(q, t), this;
        }, _proto.identity = function() {
            return this.set(0, 0, 0, 1);
        }, _proto.invert = function() {
            return this.conjugate();
        }, _proto.conjugate = function() {
            return this._x *= -1, this._y *= -1, this._z *= -1, this._onChangeCallback(), this;
        }, _proto.dot = function(v) {
            return this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;
        }, _proto.lengthSq = function() {
            return this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;
        }, _proto.length = function() {
            return Math.sqrt(this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w);
        }, _proto.normalize = function() {
            var l = this.length();
            return 0 === l ? (this._x = 0, this._y = 0, this._z = 0, this._w = 1) : (l = 1 / l, this._x = this._x * l, this._y = this._y * l, this._z = this._z * l, this._w = this._w * l), this._onChangeCallback(), this;
        }, _proto.multiply = function(q, p) {
            return void 0 !== p ? (console.warn('THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.'), this.multiplyQuaternions(q, p)) : this.multiplyQuaternions(this, q);
        }, _proto.premultiply = function(q) {
            return this.multiplyQuaternions(q, this);
        }, _proto.multiplyQuaternions = function(a, b) {
            var qax = a._x, qay = a._y, qaz = a._z, qaw = a._w, qbx = b._x, qby = b._y, qbz = b._z, qbw = b._w;
            return this._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby, this._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz, this._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx, this._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz, this._onChangeCallback(), this;
        }, _proto.slerp = function(qb, t) {
            if (0 === t) return this;
            if (1 === t) return this.copy(qb);
            var x = this._x, y = this._y, z = this._z, w = this._w, cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;
            if (cosHalfTheta < 0 ? (this._w = -qb._w, this._x = -qb._x, this._y = -qb._y, this._z = -qb._z, cosHalfTheta = -cosHalfTheta) : this.copy(qb), cosHalfTheta >= 1.0) return this._w = w, this._x = x, this._y = y, this._z = z, this;
            var sqrSinHalfTheta = 1.0 - cosHalfTheta * cosHalfTheta;
            if (sqrSinHalfTheta <= Number.EPSILON) {
                var s = 1 - t;
                return this._w = s * w + t * this._w, this._x = s * x + t * this._x, this._y = s * y + t * this._y, this._z = s * z + t * this._z, this.normalize(), this._onChangeCallback(), this;
            }
            var sinHalfTheta = Math.sqrt(sqrSinHalfTheta), halfTheta = Math.atan2(sinHalfTheta, cosHalfTheta), ratioA = Math.sin((1 - t) * halfTheta) / sinHalfTheta, ratioB = Math.sin(t * halfTheta) / sinHalfTheta;
            return this._w = w * ratioA + this._w * ratioB, this._x = x * ratioA + this._x * ratioB, this._y = y * ratioA + this._y * ratioB, this._z = z * ratioA + this._z * ratioB, this._onChangeCallback(), this;
        }, _proto.equals = function(quaternion) {
            return quaternion._x === this._x && quaternion._y === this._y && quaternion._z === this._z && quaternion._w === this._w;
        }, _proto.fromArray = function(array, offset) {
            return void 0 === offset && (offset = 0), this._x = array[offset], this._y = array[offset + 1], this._z = array[offset + 2], this._w = array[offset + 3], this._onChangeCallback(), this;
        }, _proto.toArray = function(array, offset) {
            return void 0 === array && (array = []), void 0 === offset && (offset = 0), array[offset] = this._x, array[offset + 1] = this._y, array[offset + 2] = this._z, array[offset + 3] = this._w, array;
        }, _proto.fromBufferAttribute = function(attribute, index) {
            return this._x = attribute.getX(index), this._y = attribute.getY(index), this._z = attribute.getZ(index), this._w = attribute.getW(index), this;
        }, _proto._onChange = function(callback) {
            return this._onChangeCallback = callback, this;
        }, _proto._onChangeCallback = function() {}, _createClass(Quaternion, [
            {
                key: "x",
                get: function() {
                    return this._x;
                },
                set: function(value) {
                    this._x = value, this._onChangeCallback();
                }
            },
            {
                key: "y",
                get: function() {
                    return this._y;
                },
                set: function(value) {
                    this._y = value, this._onChangeCallback();
                }
            },
            {
                key: "z",
                get: function() {
                    return this._z;
                },
                set: function(value) {
                    this._z = value, this._onChangeCallback();
                }
            },
            {
                key: "w",
                get: function() {
                    return this._w;
                },
                set: function(value) {
                    this._w = value, this._onChangeCallback();
                }
            }
        ]), Quaternion;
    }(), Vector3 = function() {
        function Vector3(x, y, z) {
            void 0 === x && (x = 0), void 0 === y && (y = 0), void 0 === z && (z = 0), Object.defineProperty(this, 'isVector3', {
                value: !0
            }), this.x = x, this.y = y, this.z = z;
        }
        var _proto = Vector3.prototype;
        return _proto.set = function(x, y, z) {
            return void 0 === z && (z = this.z), this.x = x, this.y = y, this.z = z, this;
        }, _proto.setScalar = function(scalar) {
            return this.x = scalar, this.y = scalar, this.z = scalar, this;
        }, _proto.setX = function(x) {
            return this.x = x, this;
        }, _proto.setY = function(y) {
            return this.y = y, this;
        }, _proto.setZ = function(z) {
            return this.z = z, this;
        }, _proto.setComponent = function(index, value) {
            switch(index){
                case 0:
                    this.x = value;
                    break;
                case 1:
                    this.y = value;
                    break;
                case 2:
                    this.z = value;
                    break;
                default:
                    throw Error('index is out of range: ' + index);
            }
            return this;
        }, _proto.getComponent = function(index) {
            switch(index){
                case 0:
                    return this.x;
                case 1:
                    return this.y;
                case 2:
                    return this.z;
                default:
                    throw Error('index is out of range: ' + index);
            }
        }, _proto.clone = function() {
            return new this.constructor(this.x, this.y, this.z);
        }, _proto.copy = function(v) {
            return this.x = v.x, this.y = v.y, this.z = v.z, this;
        }, _proto.add = function(v, w) {
            return void 0 !== w ? (console.warn('THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead.'), this.addVectors(v, w)) : (this.x += v.x, this.y += v.y, this.z += v.z, this);
        }, _proto.addScalar = function(s) {
            return this.x += s, this.y += s, this.z += s, this;
        }, _proto.addVectors = function(a, b) {
            return this.x = a.x + b.x, this.y = a.y + b.y, this.z = a.z + b.z, this;
        }, _proto.addScaledVector = function(v, s) {
            return this.x += v.x * s, this.y += v.y * s, this.z += v.z * s, this;
        }, _proto.sub = function(v, w) {
            return void 0 !== w ? (console.warn('THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.'), this.subVectors(v, w)) : (this.x -= v.x, this.y -= v.y, this.z -= v.z, this);
        }, _proto.subScalar = function(s) {
            return this.x -= s, this.y -= s, this.z -= s, this;
        }, _proto.subVectors = function(a, b) {
            return this.x = a.x - b.x, this.y = a.y - b.y, this.z = a.z - b.z, this;
        }, _proto.multiply = function(v, w) {
            return void 0 !== w ? (console.warn('THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.'), this.multiplyVectors(v, w)) : (this.x *= v.x, this.y *= v.y, this.z *= v.z, this);
        }, _proto.multiplyScalar = function(scalar) {
            return this.x *= scalar, this.y *= scalar, this.z *= scalar, this;
        }, _proto.multiplyVectors = function(a, b) {
            return this.x = a.x * b.x, this.y = a.y * b.y, this.z = a.z * b.z, this;
        }, _proto.applyEuler = function(euler) {
            return euler && euler.isEuler || console.error('THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order.'), this.applyQuaternion(_quaternion.setFromEuler(euler));
        }, _proto.applyAxisAngle = function(axis, angle) {
            return this.applyQuaternion(_quaternion.setFromAxisAngle(axis, angle));
        }, _proto.applyMatrix3 = function(m) {
            var x = this.x, y = this.y, z = this.z, e = m.elements;
            return this.x = e[0] * x + e[3] * y + e[6] * z, this.y = e[1] * x + e[4] * y + e[7] * z, this.z = e[2] * x + e[5] * y + e[8] * z, this;
        }, _proto.applyNormalMatrix = function(m) {
            return this.applyMatrix3(m).normalize();
        }, _proto.applyMatrix4 = function(m) {
            var x = this.x, y = this.y, z = this.z, e = m.elements, w = 1 / (e[3] * x + e[7] * y + e[11] * z + e[15]);
            return this.x = (e[0] * x + e[4] * y + e[8] * z + e[12]) * w, this.y = (e[1] * x + e[5] * y + e[9] * z + e[13]) * w, this.z = (e[2] * x + e[6] * y + e[10] * z + e[14]) * w, this;
        }, _proto.applyQuaternion = function(q) {
            var x = this.x, y = this.y, z = this.z, qx = q.x, qy = q.y, qz = q.z, qw = q.w, ix = qw * x + qy * z - qz * y, iy = qw * y + qz * x - qx * z, iz = qw * z + qx * y - qy * x, iw = -qx * x - qy * y - qz * z;
            return this.x = ix * qw + -(iw * qx) + -(iy * qz) - -(iz * qy), this.y = iy * qw + -(iw * qy) + -(iz * qx) - -(ix * qz), this.z = iz * qw + -(iw * qz) + -(ix * qy) - -(iy * qx), this;
        }, _proto.project = function(camera) {
            return this.applyMatrix4(camera.matrixWorldInverse).applyMatrix4(camera.projectionMatrix);
        }, _proto.unproject = function(camera) {
            return this.applyMatrix4(camera.projectionMatrixInverse).applyMatrix4(camera.matrixWorld);
        }, _proto.transformDirection = function(m) {
            var x = this.x, y = this.y, z = this.z, e = m.elements;
            return this.x = e[0] * x + e[4] * y + e[8] * z, this.y = e[1] * x + e[5] * y + e[9] * z, this.z = e[2] * x + e[6] * y + e[10] * z, this.normalize();
        }, _proto.divide = function(v) {
            return this.x /= v.x, this.y /= v.y, this.z /= v.z, this;
        }, _proto.divideScalar = function(scalar) {
            return this.multiplyScalar(1 / scalar);
        }, _proto.min = function(v) {
            return this.x = Math.min(this.x, v.x), this.y = Math.min(this.y, v.y), this.z = Math.min(this.z, v.z), this;
        }, _proto.max = function(v) {
            return this.x = Math.max(this.x, v.x), this.y = Math.max(this.y, v.y), this.z = Math.max(this.z, v.z), this;
        }, _proto.clamp = function(min, max) {
            return this.x = Math.max(min.x, Math.min(max.x, this.x)), this.y = Math.max(min.y, Math.min(max.y, this.y)), this.z = Math.max(min.z, Math.min(max.z, this.z)), this;
        }, _proto.clampScalar = function(minVal, maxVal) {
            return this.x = Math.max(minVal, Math.min(maxVal, this.x)), this.y = Math.max(minVal, Math.min(maxVal, this.y)), this.z = Math.max(minVal, Math.min(maxVal, this.z)), this;
        }, _proto.clampLength = function(min, max) {
            var length = this.length();
            return this.divideScalar(length || 1).multiplyScalar(Math.max(min, Math.min(max, length)));
        }, _proto.floor = function() {
            return this.x = Math.floor(this.x), this.y = Math.floor(this.y), this.z = Math.floor(this.z), this;
        }, _proto.ceil = function() {
            return this.x = Math.ceil(this.x), this.y = Math.ceil(this.y), this.z = Math.ceil(this.z), this;
        }, _proto.round = function() {
            return this.x = Math.round(this.x), this.y = Math.round(this.y), this.z = Math.round(this.z), this;
        }, _proto.roundToZero = function() {
            return this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x), this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y), this.z = this.z < 0 ? Math.ceil(this.z) : Math.floor(this.z), this;
        }, _proto.negate = function() {
            return this.x = -this.x, this.y = -this.y, this.z = -this.z, this;
        }, _proto.dot = function(v) {
            return this.x * v.x + this.y * v.y + this.z * v.z;
        }, _proto.lengthSq = function() {
            return this.x * this.x + this.y * this.y + this.z * this.z;
        }, _proto.length = function() {
            return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
        }, _proto.manhattanLength = function() {
            return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z);
        }, _proto.normalize = function() {
            return this.divideScalar(this.length() || 1);
        }, _proto.setLength = function(length) {
            return this.normalize().multiplyScalar(length);
        }, _proto.lerp = function(v, alpha) {
            return this.x += (v.x - this.x) * alpha, this.y += (v.y - this.y) * alpha, this.z += (v.z - this.z) * alpha, this;
        }, _proto.lerpVectors = function(v1, v2, alpha) {
            return this.x = v1.x + (v2.x - v1.x) * alpha, this.y = v1.y + (v2.y - v1.y) * alpha, this.z = v1.z + (v2.z - v1.z) * alpha, this;
        }, _proto.cross = function(v, w) {
            return void 0 !== w ? (console.warn('THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.'), this.crossVectors(v, w)) : this.crossVectors(this, v);
        }, _proto.crossVectors = function(a, b) {
            var ax = a.x, ay = a.y, az = a.z, bx = b.x, by = b.y, bz = b.z;
            return this.x = ay * bz - az * by, this.y = az * bx - ax * bz, this.z = ax * by - ay * bx, this;
        }, _proto.projectOnVector = function(v) {
            var denominator = v.lengthSq();
            if (0 === denominator) return this.set(0, 0, 0);
            var scalar = v.dot(this) / denominator;
            return this.copy(v).multiplyScalar(scalar);
        }, _proto.projectOnPlane = function(planeNormal) {
            return _vector.copy(this).projectOnVector(planeNormal), this.sub(_vector);
        }, _proto.reflect = function(normal) {
            return this.sub(_vector.copy(normal).multiplyScalar(2 * this.dot(normal)));
        }, _proto.angleTo = function(v) {
            var denominator = Math.sqrt(this.lengthSq() * v.lengthSq());
            if (0 === denominator) return Math.PI / 2;
            var theta = this.dot(v) / denominator;
            return Math.acos(MathUtils.clamp(theta, -1, 1));
        }, _proto.distanceTo = function(v) {
            return Math.sqrt(this.distanceToSquared(v));
        }, _proto.distanceToSquared = function(v) {
            var dx = this.x - v.x, dy = this.y - v.y, dz = this.z - v.z;
            return dx * dx + dy * dy + dz * dz;
        }, _proto.manhattanDistanceTo = function(v) {
            return Math.abs(this.x - v.x) + Math.abs(this.y - v.y) + Math.abs(this.z - v.z);
        }, _proto.setFromSpherical = function(s) {
            return this.setFromSphericalCoords(s.radius, s.phi, s.theta);
        }, _proto.setFromSphericalCoords = function(radius, phi, theta) {
            var sinPhiRadius = Math.sin(phi) * radius;
            return this.x = sinPhiRadius * Math.sin(theta), this.y = Math.cos(phi) * radius, this.z = sinPhiRadius * Math.cos(theta), this;
        }, _proto.setFromCylindrical = function(c) {
            return this.setFromCylindricalCoords(c.radius, c.theta, c.y);
        }, _proto.setFromCylindricalCoords = function(radius, theta, y) {
            return this.x = radius * Math.sin(theta), this.y = y, this.z = radius * Math.cos(theta), this;
        }, _proto.setFromMatrixPosition = function(m) {
            var e = m.elements;
            return this.x = e[12], this.y = e[13], this.z = e[14], this;
        }, _proto.setFromMatrixScale = function(m) {
            var sx = this.setFromMatrixColumn(m, 0).length(), sy = this.setFromMatrixColumn(m, 1).length(), sz = this.setFromMatrixColumn(m, 2).length();
            return this.x = sx, this.y = sy, this.z = sz, this;
        }, _proto.setFromMatrixColumn = function(m, index) {
            return this.fromArray(m.elements, 4 * index);
        }, _proto.setFromMatrix3Column = function(m, index) {
            return this.fromArray(m.elements, 3 * index);
        }, _proto.equals = function(v) {
            return v.x === this.x && v.y === this.y && v.z === this.z;
        }, _proto.fromArray = function(array, offset) {
            return void 0 === offset && (offset = 0), this.x = array[offset], this.y = array[offset + 1], this.z = array[offset + 2], this;
        }, _proto.toArray = function(array, offset) {
            return void 0 === array && (array = []), void 0 === offset && (offset = 0), array[offset] = this.x, array[offset + 1] = this.y, array[offset + 2] = this.z, array;
        }, _proto.fromBufferAttribute = function(attribute, index, offset) {
            return void 0 !== offset && console.warn('THREE.Vector3: offset has been removed from .fromBufferAttribute().'), this.x = attribute.getX(index), this.y = attribute.getY(index), this.z = attribute.getZ(index), this;
        }, _proto.random = function() {
            return this.x = Math.random(), this.y = Math.random(), this.z = Math.random(), this;
        }, Vector3;
    }(), _vector = new Vector3(), _quaternion = new Quaternion(), Box3 = function() {
        function Box3(min, max) {
            Object.defineProperty(this, 'isBox3', {
                value: !0
            }), this.min = void 0 !== min ? min : new Vector3(Infinity, Infinity, Infinity), this.max = void 0 !== max ? max : new Vector3(-1 / 0, -1 / 0, -1 / 0);
        }
        var _proto = Box3.prototype;
        return _proto.set = function(min, max) {
            return this.min.copy(min), this.max.copy(max), this;
        }, _proto.setFromArray = function(array) {
            for(var minX = Infinity, minY = Infinity, minZ = Infinity, maxX = -1 / 0, maxY = -1 / 0, maxZ = -1 / 0, i = 0, l = array.length; i < l; i += 3){
                var x = array[i], y = array[i + 1], z = array[i + 2];
                x < minX && (minX = x), y < minY && (minY = y), z < minZ && (minZ = z), x > maxX && (maxX = x), y > maxY && (maxY = y), z > maxZ && (maxZ = z);
            }
            return this.min.set(minX, minY, minZ), this.max.set(maxX, maxY, maxZ), this;
        }, _proto.setFromBufferAttribute = function(attribute) {
            for(var minX = Infinity, minY = Infinity, minZ = Infinity, maxX = -1 / 0, maxY = -1 / 0, maxZ = -1 / 0, i = 0, l = attribute.count; i < l; i++){
                var x = attribute.getX(i), y = attribute.getY(i), z = attribute.getZ(i);
                x < minX && (minX = x), y < minY && (minY = y), z < minZ && (minZ = z), x > maxX && (maxX = x), y > maxY && (maxY = y), z > maxZ && (maxZ = z);
            }
            return this.min.set(minX, minY, minZ), this.max.set(maxX, maxY, maxZ), this;
        }, _proto.setFromPoints = function(points) {
            this.makeEmpty();
            for(var i = 0, il = points.length; i < il; i++)this.expandByPoint(points[i]);
            return this;
        }, _proto.setFromCenterAndSize = function(center, size) {
            var halfSize = _vector$1.copy(size).multiplyScalar(0.5);
            return this.min.copy(center).sub(halfSize), this.max.copy(center).add(halfSize), this;
        }, _proto.setFromObject = function(object) {
            return this.makeEmpty(), this.expandByObject(object);
        }, _proto.clone = function() {
            return new this.constructor().copy(this);
        }, _proto.copy = function(box) {
            return this.min.copy(box.min), this.max.copy(box.max), this;
        }, _proto.makeEmpty = function() {
            return this.min.x = this.min.y = this.min.z = Infinity, this.max.x = this.max.y = this.max.z = -1 / 0, this;
        }, _proto.isEmpty = function() {
            return this.max.x < this.min.x || this.max.y < this.min.y || this.max.z < this.min.z;
        }, _proto.getCenter = function(target) {
            return void 0 === target && (console.warn('THREE.Box3: .getCenter() target is now required'), target = new Vector3()), this.isEmpty() ? target.set(0, 0, 0) : target.addVectors(this.min, this.max).multiplyScalar(0.5);
        }, _proto.getSize = function(target) {
            return void 0 === target && (console.warn('THREE.Box3: .getSize() target is now required'), target = new Vector3()), this.isEmpty() ? target.set(0, 0, 0) : target.subVectors(this.max, this.min);
        }, _proto.expandByPoint = function(point) {
            return this.min.min(point), this.max.max(point), this;
        }, _proto.expandByVector = function(vector) {
            return this.min.sub(vector), this.max.add(vector), this;
        }, _proto.expandByScalar = function(scalar) {
            return this.min.addScalar(-scalar), this.max.addScalar(scalar), this;
        }, _proto.expandByObject = function(object) {
            object.updateWorldMatrix(!1, !1);
            var geometry = object.geometry;
            void 0 !== geometry && (null === geometry.boundingBox && geometry.computeBoundingBox(), _box.copy(geometry.boundingBox), _box.applyMatrix4(object.matrixWorld), this.union(_box));
            for(var children = object.children, i = 0, l = children.length; i < l; i++)this.expandByObject(children[i]);
            return this;
        }, _proto.containsPoint = function(point) {
            return !(point.x < this.min.x) && !(point.x > this.max.x) && !(point.y < this.min.y) && !(point.y > this.max.y) && !(point.z < this.min.z) && !(point.z > this.max.z);
        }, _proto.containsBox = function(box) {
            return this.min.x <= box.min.x && box.max.x <= this.max.x && this.min.y <= box.min.y && box.max.y <= this.max.y && this.min.z <= box.min.z && box.max.z <= this.max.z;
        }, _proto.getParameter = function(point, target) {
            return void 0 === target && (console.warn('THREE.Box3: .getParameter() target is now required'), target = new Vector3()), target.set((point.x - this.min.x) / (this.max.x - this.min.x), (point.y - this.min.y) / (this.max.y - this.min.y), (point.z - this.min.z) / (this.max.z - this.min.z));
        }, _proto.intersectsBox = function(box) {
            return !(box.max.x < this.min.x) && !(box.min.x > this.max.x) && !(box.max.y < this.min.y) && !(box.min.y > this.max.y) && !(box.max.z < this.min.z) && !(box.min.z > this.max.z);
        }, _proto.intersectsSphere = function(sphere) {
            return this.clampPoint(sphere.center, _vector$1), _vector$1.distanceToSquared(sphere.center) <= sphere.radius * sphere.radius;
        }, _proto.intersectsPlane = function(plane) {
            var min, max;
            return plane.normal.x > 0 ? (min = plane.normal.x * this.min.x, max = plane.normal.x * this.max.x) : (min = plane.normal.x * this.max.x, max = plane.normal.x * this.min.x), plane.normal.y > 0 ? (min += plane.normal.y * this.min.y, max += plane.normal.y * this.max.y) : (min += plane.normal.y * this.max.y, max += plane.normal.y * this.min.y), plane.normal.z > 0 ? (min += plane.normal.z * this.min.z, max += plane.normal.z * this.max.z) : (min += plane.normal.z * this.max.z, max += plane.normal.z * this.min.z), min <= -plane.constant && max >= -plane.constant;
        }, _proto.intersectsTriangle = function(triangle) {
            if (this.isEmpty()) return !1;
            this.getCenter(_center), _extents.subVectors(this.max, _center), _v0.subVectors(triangle.a, _center), _v1.subVectors(triangle.b, _center), _v2.subVectors(triangle.c, _center), _f0.subVectors(_v1, _v0), _f1.subVectors(_v2, _v1), _f2.subVectors(_v0, _v2);
            var axes = [
                0,
                -_f0.z,
                _f0.y,
                0,
                -_f1.z,
                _f1.y,
                0,
                -_f2.z,
                _f2.y,
                _f0.z,
                0,
                -_f0.x,
                _f1.z,
                0,
                -_f1.x,
                _f2.z,
                0,
                -_f2.x,
                -_f0.y,
                _f0.x,
                0,
                -_f1.y,
                _f1.x,
                0,
                -_f2.y,
                _f2.x,
                0
            ];
            return !!(satForAxes(axes, _v0, _v1, _v2, _extents) && satForAxes(axes = [
                1,
                0,
                0,
                0,
                1,
                0,
                0,
                0,
                1
            ], _v0, _v1, _v2, _extents)) && (_triangleNormal.crossVectors(_f0, _f1), satForAxes(axes = [
                _triangleNormal.x,
                _triangleNormal.y,
                _triangleNormal.z
            ], _v0, _v1, _v2, _extents));
        }, _proto.clampPoint = function(point, target) {
            return void 0 === target && (console.warn('THREE.Box3: .clampPoint() target is now required'), target = new Vector3()), target.copy(point).clamp(this.min, this.max);
        }, _proto.distanceToPoint = function(point) {
            return _vector$1.copy(point).clamp(this.min, this.max).sub(point).length();
        }, _proto.getBoundingSphere = function(target) {
            return void 0 === target && console.error('THREE.Box3: .getBoundingSphere() target is now required'), this.getCenter(target.center), target.radius = 0.5 * this.getSize(_vector$1).length(), target;
        }, _proto.intersect = function(box) {
            return this.min.max(box.min), this.max.min(box.max), this.isEmpty() && this.makeEmpty(), this;
        }, _proto.union = function(box) {
            return this.min.min(box.min), this.max.max(box.max), this;
        }, _proto.applyMatrix4 = function(matrix) {
            return this.isEmpty() || (_points[0].set(this.min.x, this.min.y, this.min.z).applyMatrix4(matrix), _points[1].set(this.min.x, this.min.y, this.max.z).applyMatrix4(matrix), _points[2].set(this.min.x, this.max.y, this.min.z).applyMatrix4(matrix), _points[3].set(this.min.x, this.max.y, this.max.z).applyMatrix4(matrix), _points[4].set(this.max.x, this.min.y, this.min.z).applyMatrix4(matrix), _points[5].set(this.max.x, this.min.y, this.max.z).applyMatrix4(matrix), _points[6].set(this.max.x, this.max.y, this.min.z).applyMatrix4(matrix), _points[7].set(this.max.x, this.max.y, this.max.z).applyMatrix4(matrix), this.setFromPoints(_points)), this;
        }, _proto.translate = function(offset) {
            return this.min.add(offset), this.max.add(offset), this;
        }, _proto.equals = function(box) {
            return box.min.equals(this.min) && box.max.equals(this.max);
        }, Box3;
    }();
    function satForAxes(axes, v0, v1, v2, extents) {
        for(var i = 0, j = axes.length - 3; i <= j; i += 3){
            _testAxis.fromArray(axes, i);
            var r = extents.x * Math.abs(_testAxis.x) + extents.y * Math.abs(_testAxis.y) + extents.z * Math.abs(_testAxis.z), p0 = v0.dot(_testAxis), p1 = v1.dot(_testAxis), p2 = v2.dot(_testAxis);
            if (Math.max(-Math.max(p0, p1, p2), Math.min(p0, p1, p2)) > r) return !1;
        }
        return !0;
    }
    var _points = [
        new Vector3(),
        new Vector3(),
        new Vector3(),
        new Vector3(),
        new Vector3(),
        new Vector3(),
        new Vector3(),
        new Vector3()
    ], _vector$1 = new Vector3(), _box = new Box3(), _v0 = new Vector3(), _v1 = new Vector3(), _v2 = new Vector3(), _f0 = new Vector3(), _f1 = new Vector3(), _f2 = new Vector3(), _center = new Vector3(), _extents = new Vector3(), _triangleNormal = new Vector3(), _testAxis = new Vector3(), _box$1 = new Box3(), Sphere = function() {
        function Sphere(center, radius) {
            this.center = void 0 !== center ? center : new Vector3(), this.radius = void 0 !== radius ? radius : -1;
        }
        var _proto = Sphere.prototype;
        return _proto.set = function(center, radius) {
            return this.center.copy(center), this.radius = radius, this;
        }, _proto.setFromPoints = function(points, optionalCenter) {
            var center = this.center;
            void 0 !== optionalCenter ? center.copy(optionalCenter) : _box$1.setFromPoints(points).getCenter(center);
            for(var maxRadiusSq = 0, i = 0, il = points.length; i < il; i++)maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(points[i]));
            return this.radius = Math.sqrt(maxRadiusSq), this;
        }, _proto.clone = function() {
            return new this.constructor().copy(this);
        }, _proto.copy = function(sphere) {
            return this.center.copy(sphere.center), this.radius = sphere.radius, this;
        }, _proto.isEmpty = function() {
            return this.radius < 0;
        }, _proto.makeEmpty = function() {
            return this.center.set(0, 0, 0), this.radius = -1, this;
        }, _proto.containsPoint = function(point) {
            return point.distanceToSquared(this.center) <= this.radius * this.radius;
        }, _proto.distanceToPoint = function(point) {
            return point.distanceTo(this.center) - this.radius;
        }, _proto.intersectsSphere = function(sphere) {
            var radiusSum = this.radius + sphere.radius;
            return sphere.center.distanceToSquared(this.center) <= radiusSum * radiusSum;
        }, _proto.intersectsBox = function(box) {
            return box.intersectsSphere(this);
        }, _proto.intersectsPlane = function(plane) {
            return Math.abs(plane.distanceToPoint(this.center)) <= this.radius;
        }, _proto.clampPoint = function(point, target) {
            var deltaLengthSq = this.center.distanceToSquared(point);
            return void 0 === target && (console.warn('THREE.Sphere: .clampPoint() target is now required'), target = new Vector3()), target.copy(point), deltaLengthSq > this.radius * this.radius && (target.sub(this.center).normalize(), target.multiplyScalar(this.radius).add(this.center)), target;
        }, _proto.getBoundingBox = function(target) {
            return (void 0 === target && (console.warn('THREE.Sphere: .getBoundingBox() target is now required'), target = new Box3()), this.isEmpty()) ? (target.makeEmpty(), target) : (target.set(this.center, this.center), target.expandByScalar(this.radius), target);
        }, _proto.applyMatrix4 = function(matrix) {
            return this.center.applyMatrix4(matrix), this.radius = this.radius * matrix.getMaxScaleOnAxis(), this;
        }, _proto.translate = function(offset) {
            return this.center.add(offset), this;
        }, _proto.equals = function(sphere) {
            return sphere.center.equals(this.center) && sphere.radius === this.radius;
        }, Sphere;
    }(), _vector$2 = new Vector3(), _segCenter = new Vector3(), _segDir = new Vector3(), _diff = new Vector3(), _edge1 = new Vector3(), _edge2 = new Vector3(), _normal = new Vector3(), Ray = function() {
        function Ray(origin, direction) {
            this.origin = void 0 !== origin ? origin : new Vector3(), this.direction = void 0 !== direction ? direction : new Vector3(0, 0, -1);
        }
        var _proto = Ray.prototype;
        return _proto.set = function(origin, direction) {
            return this.origin.copy(origin), this.direction.copy(direction), this;
        }, _proto.clone = function() {
            return new this.constructor().copy(this);
        }, _proto.copy = function(ray) {
            return this.origin.copy(ray.origin), this.direction.copy(ray.direction), this;
        }, _proto.at = function(t, target) {
            return void 0 === target && (console.warn('THREE.Ray: .at() target is now required'), target = new Vector3()), target.copy(this.direction).multiplyScalar(t).add(this.origin);
        }, _proto.lookAt = function(v) {
            return this.direction.copy(v).sub(this.origin).normalize(), this;
        }, _proto.recast = function(t) {
            return this.origin.copy(this.at(t, _vector$2)), this;
        }, _proto.closestPointToPoint = function(point, target) {
            void 0 === target && (console.warn('THREE.Ray: .closestPointToPoint() target is now required'), target = new Vector3()), target.subVectors(point, this.origin);
            var directionDistance = target.dot(this.direction);
            return directionDistance < 0 ? target.copy(this.origin) : target.copy(this.direction).multiplyScalar(directionDistance).add(this.origin);
        }, _proto.distanceToPoint = function(point) {
            return Math.sqrt(this.distanceSqToPoint(point));
        }, _proto.distanceSqToPoint = function(point) {
            var directionDistance = _vector$2.subVectors(point, this.origin).dot(this.direction);
            return directionDistance < 0 ? this.origin.distanceToSquared(point) : (_vector$2.copy(this.direction).multiplyScalar(directionDistance).add(this.origin), _vector$2.distanceToSquared(point));
        }, _proto.distanceSqToSegment = function(v0, v1, optionalPointOnRay, optionalPointOnSegment) {
            _segCenter.copy(v0).add(v1).multiplyScalar(0.5), _segDir.copy(v1).sub(v0).normalize(), _diff.copy(this.origin).sub(_segCenter);
            var s0, s1, sqrDist, extDet, segExtent = 0.5 * v0.distanceTo(v1), a01 = -this.direction.dot(_segDir), b0 = _diff.dot(this.direction), b1 = -_diff.dot(_segDir), c = _diff.lengthSq(), det = Math.abs(1 - a01 * a01);
            if (det > 0) {
                if (s0 = a01 * b1 - b0, s1 = a01 * b0 - b1, extDet = segExtent * det, s0 >= 0) {
                    if (s1 >= -extDet) {
                        if (s1 <= extDet) {
                            var invDet = 1 / det;
                            s0 *= invDet, s1 *= invDet, sqrDist = s0 * (s0 + a01 * s1 + 2 * b0) + s1 * (a01 * s0 + s1 + 2 * b1) + c;
                        } else sqrDist = -(s0 = Math.max(0, -(a01 * (s1 = segExtent) + b0))) * s0 + s1 * (s1 + 2 * b1) + c;
                    } else sqrDist = -(s0 = Math.max(0, -(a01 * (s1 = -segExtent) + b0))) * s0 + s1 * (s1 + 2 * b1) + c;
                } else s1 <= -extDet ? (s1 = (s0 = Math.max(0, -(-a01 * segExtent + b0))) > 0 ? -segExtent : Math.min(Math.max(-segExtent, -b1), segExtent), sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c) : s1 <= extDet ? (s0 = 0, sqrDist = (s1 = Math.min(Math.max(-segExtent, -b1), segExtent)) * (s1 + 2 * b1) + c) : (s1 = (s0 = Math.max(0, -(a01 * segExtent + b0))) > 0 ? segExtent : Math.min(Math.max(-segExtent, -b1), segExtent), sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c);
            } else s1 = a01 > 0 ? -segExtent : segExtent, sqrDist = -(s0 = Math.max(0, -(a01 * s1 + b0))) * s0 + s1 * (s1 + 2 * b1) + c;
            return optionalPointOnRay && optionalPointOnRay.copy(this.direction).multiplyScalar(s0).add(this.origin), optionalPointOnSegment && optionalPointOnSegment.copy(_segDir).multiplyScalar(s1).add(_segCenter), sqrDist;
        }, _proto.intersectSphere = function(sphere, target) {
            _vector$2.subVectors(sphere.center, this.origin);
            var tca = _vector$2.dot(this.direction), d2 = _vector$2.dot(_vector$2) - tca * tca, radius2 = sphere.radius * sphere.radius;
            if (d2 > radius2) return null;
            var thc = Math.sqrt(radius2 - d2), t0 = tca - thc, t1 = tca + thc;
            return t0 < 0 && t1 < 0 ? null : t0 < 0 ? this.at(t1, target) : this.at(t0, target);
        }, _proto.intersectsSphere = function(sphere) {
            return this.distanceSqToPoint(sphere.center) <= sphere.radius * sphere.radius;
        }, _proto.distanceToPlane = function(plane) {
            var denominator = plane.normal.dot(this.direction);
            if (0 === denominator) return 0 === plane.distanceToPoint(this.origin) ? 0 : null;
            var t = -(this.origin.dot(plane.normal) + plane.constant) / denominator;
            return t >= 0 ? t : null;
        }, _proto.intersectPlane = function(plane, target) {
            var t = this.distanceToPlane(plane);
            return null === t ? null : this.at(t, target);
        }, _proto.intersectsPlane = function(plane) {
            var distToPoint = plane.distanceToPoint(this.origin);
            return !!(0 === distToPoint || plane.normal.dot(this.direction) * distToPoint < 0);
        }, _proto.intersectBox = function(box, target) {
            var tmin, tmax, tymin, tymax, tzmin, tzmax, invdirx = 1 / this.direction.x, invdiry = 1 / this.direction.y, invdirz = 1 / this.direction.z, origin = this.origin;
            return (invdirx >= 0 ? (tmin = (box.min.x - origin.x) * invdirx, tmax = (box.max.x - origin.x) * invdirx) : (tmin = (box.max.x - origin.x) * invdirx, tmax = (box.min.x - origin.x) * invdirx), invdiry >= 0 ? (tymin = (box.min.y - origin.y) * invdiry, tymax = (box.max.y - origin.y) * invdiry) : (tymin = (box.max.y - origin.y) * invdiry, tymax = (box.min.y - origin.y) * invdiry), tmin > tymax || tymin > tmax) ? null : ((tymin > tmin || tmin != tmin) && (tmin = tymin), (tymax < tmax || tmax != tmax) && (tmax = tymax), invdirz >= 0 ? (tzmin = (box.min.z - origin.z) * invdirz, tzmax = (box.max.z - origin.z) * invdirz) : (tzmin = (box.max.z - origin.z) * invdirz, tzmax = (box.min.z - origin.z) * invdirz), tmin > tzmax || tzmin > tmax) ? null : ((tzmin > tmin || tmin != tmin) && (tmin = tzmin), (tzmax < tmax || tmax != tmax) && (tmax = tzmax), tmax < 0) ? null : this.at(tmin >= 0 ? tmin : tmax, target);
        }, _proto.intersectsBox = function(box) {
            return null !== this.intersectBox(box, _vector$2);
        }, _proto.intersectTriangle = function(a, b, c, backfaceCulling, target) {
            _edge1.subVectors(b, a), _edge2.subVectors(c, a), _normal.crossVectors(_edge1, _edge2);
            var sign, DdN = this.direction.dot(_normal);
            if (DdN > 0) {
                if (backfaceCulling) return null;
                sign = 1;
            } else {
                if (!(DdN < 0)) return null;
                sign = -1, DdN = -DdN;
            }
            _diff.subVectors(this.origin, a);
            var DdQxE2 = sign * this.direction.dot(_edge2.crossVectors(_diff, _edge2));
            if (DdQxE2 < 0) return null;
            var DdE1xQ = sign * this.direction.dot(_edge1.cross(_diff));
            if (DdE1xQ < 0 || DdQxE2 + DdE1xQ > DdN) return null;
            var QdN = -sign * _diff.dot(_normal);
            return QdN < 0 ? null : this.at(QdN / DdN, target);
        }, _proto.applyMatrix4 = function(matrix4) {
            return this.origin.applyMatrix4(matrix4), this.direction.transformDirection(matrix4), this;
        }, _proto.equals = function(ray) {
            return ray.origin.equals(this.origin) && ray.direction.equals(this.direction);
        }, Ray;
    }(), Matrix4 = function() {
        function Matrix4() {
            Object.defineProperty(this, 'isMatrix4', {
                value: !0
            }), this.elements = [
                1,
                0,
                0,
                0,
                0,
                1,
                0,
                0,
                0,
                0,
                1,
                0,
                0,
                0,
                0,
                1
            ], arguments.length > 0 && console.error('THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.');
        }
        var _proto = Matrix4.prototype;
        return _proto.set = function(n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44) {
            var te = this.elements;
            return te[0] = n11, te[4] = n12, te[8] = n13, te[12] = n14, te[1] = n21, te[5] = n22, te[9] = n23, te[13] = n24, te[2] = n31, te[6] = n32, te[10] = n33, te[14] = n34, te[3] = n41, te[7] = n42, te[11] = n43, te[15] = n44, this;
        }, _proto.identity = function() {
            return this.set(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1), this;
        }, _proto.clone = function() {
            return new Matrix4().fromArray(this.elements);
        }, _proto.copy = function(m) {
            var te = this.elements, me = m.elements;
            return te[0] = me[0], te[1] = me[1], te[2] = me[2], te[3] = me[3], te[4] = me[4], te[5] = me[5], te[6] = me[6], te[7] = me[7], te[8] = me[8], te[9] = me[9], te[10] = me[10], te[11] = me[11], te[12] = me[12], te[13] = me[13], te[14] = me[14], te[15] = me[15], this;
        }, _proto.copyPosition = function(m) {
            var te = this.elements, me = m.elements;
            return te[12] = me[12], te[13] = me[13], te[14] = me[14], this;
        }, _proto.extractBasis = function(xAxis, yAxis, zAxis) {
            return xAxis.setFromMatrixColumn(this, 0), yAxis.setFromMatrixColumn(this, 1), zAxis.setFromMatrixColumn(this, 2), this;
        }, _proto.makeBasis = function(xAxis, yAxis, zAxis) {
            return this.set(xAxis.x, yAxis.x, zAxis.x, 0, xAxis.y, yAxis.y, zAxis.y, 0, xAxis.z, yAxis.z, zAxis.z, 0, 0, 0, 0, 1), this;
        }, _proto.extractRotation = function(m) {
            var te = this.elements, me = m.elements, scaleX = 1 / _v1$1.setFromMatrixColumn(m, 0).length(), scaleY = 1 / _v1$1.setFromMatrixColumn(m, 1).length(), scaleZ = 1 / _v1$1.setFromMatrixColumn(m, 2).length();
            return te[0] = me[0] * scaleX, te[1] = me[1] * scaleX, te[2] = me[2] * scaleX, te[3] = 0, te[4] = me[4] * scaleY, te[5] = me[5] * scaleY, te[6] = me[6] * scaleY, te[7] = 0, te[8] = me[8] * scaleZ, te[9] = me[9] * scaleZ, te[10] = me[10] * scaleZ, te[11] = 0, te[12] = 0, te[13] = 0, te[14] = 0, te[15] = 1, this;
        }, _proto.makeRotationFromEuler = function(euler) {
            euler && euler.isEuler || console.error('THREE.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.');
            var te = this.elements, x = euler.x, y = euler.y, z = euler.z, a = Math.cos(x), b = Math.sin(x), c = Math.cos(y), d = Math.sin(y), e = Math.cos(z), f = Math.sin(z);
            if ('XYZ' === euler.order) {
                var ae = a * e, af = a * f, be = b * e, bf = b * f;
                te[0] = c * e, te[4] = -c * f, te[8] = d, te[1] = af + be * d, te[5] = ae - bf * d, te[9] = -b * c, te[2] = bf - ae * d, te[6] = be + af * d, te[10] = a * c;
            } else if ('YXZ' === euler.order) {
                var ce = c * e, cf = c * f, de = d * e, df = d * f;
                te[0] = ce + df * b, te[4] = de * b - cf, te[8] = a * d, te[1] = a * f, te[5] = a * e, te[9] = -b, te[2] = cf * b - de, te[6] = df + ce * b, te[10] = a * c;
            } else if ('ZXY' === euler.order) {
                var _ce = c * e, _cf = c * f, _de = d * e, _df = d * f;
                te[0] = _ce - _df * b, te[4] = -a * f, te[8] = _de + _cf * b, te[1] = _cf + _de * b, te[5] = a * e, te[9] = _df - _ce * b, te[2] = -a * d, te[6] = b, te[10] = a * c;
            } else if ('ZYX' === euler.order) {
                var _ae = a * e, _af = a * f, _be = b * e, _bf = b * f;
                te[0] = c * e, te[4] = _be * d - _af, te[8] = _ae * d + _bf, te[1] = c * f, te[5] = _bf * d + _ae, te[9] = _af * d - _be, te[2] = -d, te[6] = b * c, te[10] = a * c;
            } else if ('YZX' === euler.order) {
                var ac = a * c, ad = a * d, bc = b * c, bd = b * d;
                te[0] = c * e, te[4] = bd - ac * f, te[8] = bc * f + ad, te[1] = f, te[5] = a * e, te[9] = -b * e, te[2] = -d * e, te[6] = ad * f + bc, te[10] = ac - bd * f;
            } else if ('XZY' === euler.order) {
                var _ac = a * c, _ad = a * d, _bc = b * c, _bd = b * d;
                te[0] = c * e, te[4] = -f, te[8] = d * e, te[1] = _ac * f + _bd, te[5] = a * e, te[9] = _ad * f - _bc, te[2] = _bc * f - _ad, te[6] = b * e, te[10] = _bd * f + _ac;
            }
            return te[3] = 0, te[7] = 0, te[11] = 0, te[12] = 0, te[13] = 0, te[14] = 0, te[15] = 1, this;
        }, _proto.makeRotationFromQuaternion = function(q) {
            return this.compose(_zero, q, _one);
        }, _proto.lookAt = function(eye, target, up) {
            var te = this.elements;
            return _z.subVectors(eye, target), 0 === _z.lengthSq() && (_z.z = 1), _z.normalize(), _x.crossVectors(up, _z), 0 === _x.lengthSq() && (1 === Math.abs(up.z) ? _z.x += 0.0001 : _z.z += 0.0001, _z.normalize(), _x.crossVectors(up, _z)), _x.normalize(), _y.crossVectors(_z, _x), te[0] = _x.x, te[4] = _y.x, te[8] = _z.x, te[1] = _x.y, te[5] = _y.y, te[9] = _z.y, te[2] = _x.z, te[6] = _y.z, te[10] = _z.z, this;
        }, _proto.multiply = function(m, n) {
            return void 0 !== n ? (console.warn('THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead.'), this.multiplyMatrices(m, n)) : this.multiplyMatrices(this, m);
        }, _proto.premultiply = function(m) {
            return this.multiplyMatrices(m, this);
        }, _proto.multiplyMatrices = function(a, b) {
            var ae = a.elements, be = b.elements, te = this.elements, a11 = ae[0], a12 = ae[4], a13 = ae[8], a14 = ae[12], a21 = ae[1], a22 = ae[5], a23 = ae[9], a24 = ae[13], a31 = ae[2], a32 = ae[6], a33 = ae[10], a34 = ae[14], a41 = ae[3], a42 = ae[7], a43 = ae[11], a44 = ae[15], b11 = be[0], b12 = be[4], b13 = be[8], b14 = be[12], b21 = be[1], b22 = be[5], b23 = be[9], b24 = be[13], b31 = be[2], b32 = be[6], b33 = be[10], b34 = be[14], b41 = be[3], b42 = be[7], b43 = be[11], b44 = be[15];
            return te[0] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41, te[4] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42, te[8] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43, te[12] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44, te[1] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41, te[5] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42, te[9] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43, te[13] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44, te[2] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41, te[6] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42, te[10] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43, te[14] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44, te[3] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41, te[7] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42, te[11] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43, te[15] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44, this;
        }, _proto.multiplyScalar = function(s) {
            var te = this.elements;
            return te[0] *= s, te[4] *= s, te[8] *= s, te[12] *= s, te[1] *= s, te[5] *= s, te[9] *= s, te[13] *= s, te[2] *= s, te[6] *= s, te[10] *= s, te[14] *= s, te[3] *= s, te[7] *= s, te[11] *= s, te[15] *= s, this;
        }, _proto.determinant = function() {
            var te = this.elements, n11 = te[0], n12 = te[4], n13 = te[8], n14 = te[12], n21 = te[1], n22 = te[5], n23 = te[9], n24 = te[13], n31 = te[2], n32 = te[6], n33 = te[10], n34 = te[14];
            return te[3] * (+n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34) + te[7] * (+n11 * n23 * n34 - n11 * n24 * n33 + n14 * n21 * n33 - n13 * n21 * n34 + n13 * n24 * n31 - n14 * n23 * n31) + te[11] * (+n11 * n24 * n32 - n11 * n22 * n34 - n14 * n21 * n32 + n12 * n21 * n34 + n14 * n22 * n31 - n12 * n24 * n31) + te[15] * (-n13 * n22 * n31 - n11 * n23 * n32 + n11 * n22 * n33 + n13 * n21 * n32 - n12 * n21 * n33 + n12 * n23 * n31);
        }, _proto.transpose = function() {
            var tmp, te = this.elements;
            return tmp = te[1], te[1] = te[4], te[4] = tmp, tmp = te[2], te[2] = te[8], te[8] = tmp, tmp = te[6], te[6] = te[9], te[9] = tmp, tmp = te[3], te[3] = te[12], te[12] = tmp, tmp = te[7], te[7] = te[13], te[13] = tmp, tmp = te[11], te[11] = te[14], te[14] = tmp, this;
        }, _proto.setPosition = function(x, y, z) {
            var te = this.elements;
            return x.isVector3 ? (te[12] = x.x, te[13] = x.y, te[14] = x.z) : (te[12] = x, te[13] = y, te[14] = z), this;
        }, _proto.invert = function() {
            var te = this.elements, n11 = te[0], n21 = te[1], n31 = te[2], n41 = te[3], n12 = te[4], n22 = te[5], n32 = te[6], n42 = te[7], n13 = te[8], n23 = te[9], n33 = te[10], n43 = te[11], n14 = te[12], n24 = te[13], n34 = te[14], n44 = te[15], t11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44, t12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44, t13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44, t14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34, det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;
            if (0 === det) return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            var detInv = 1 / det;
            return te[0] = t11 * detInv, te[1] = (n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44) * detInv, te[2] = (n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44) * detInv, te[3] = (n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43) * detInv, te[4] = t12 * detInv, te[5] = (n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44) * detInv, te[6] = (n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44) * detInv, te[7] = (n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43) * detInv, te[8] = t13 * detInv, te[9] = (n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44) * detInv, te[10] = (n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44) * detInv, te[11] = (n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43) * detInv, te[12] = t14 * detInv, te[13] = (n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34) * detInv, te[14] = (n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34) * detInv, te[15] = (n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33) * detInv, this;
        }, _proto.scale = function(v) {
            var te = this.elements, x = v.x, y = v.y, z = v.z;
            return te[0] *= x, te[4] *= y, te[8] *= z, te[1] *= x, te[5] *= y, te[9] *= z, te[2] *= x, te[6] *= y, te[10] *= z, te[3] *= x, te[7] *= y, te[11] *= z, this;
        }, _proto.getMaxScaleOnAxis = function() {
            var te = this.elements;
            return Math.sqrt(Math.max(te[0] * te[0] + te[1] * te[1] + te[2] * te[2], te[4] * te[4] + te[5] * te[5] + te[6] * te[6], te[8] * te[8] + te[9] * te[9] + te[10] * te[10]));
        }, _proto.makeTranslation = function(x, y, z) {
            return this.set(1, 0, 0, x, 0, 1, 0, y, 0, 0, 1, z, 0, 0, 0, 1), this;
        }, _proto.makeRotationX = function(theta) {
            var c = Math.cos(theta), s = Math.sin(theta);
            return this.set(1, 0, 0, 0, 0, c, -s, 0, 0, s, c, 0, 0, 0, 0, 1), this;
        }, _proto.makeRotationY = function(theta) {
            var c = Math.cos(theta), s = Math.sin(theta);
            return this.set(c, 0, s, 0, 0, 1, 0, 0, -s, 0, c, 0, 0, 0, 0, 1), this;
        }, _proto.makeRotationZ = function(theta) {
            var c = Math.cos(theta), s = Math.sin(theta);
            return this.set(c, -s, 0, 0, s, c, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1), this;
        }, _proto.makeRotationAxis = function(axis, angle) {
            var c = Math.cos(angle), s = Math.sin(angle), t = 1 - c, x = axis.x, y = axis.y, z = axis.z, tx = t * x, ty = t * y;
            return this.set(tx * x + c, tx * y - s * z, tx * z + s * y, 0, tx * y + s * z, ty * y + c, ty * z - s * x, 0, tx * z - s * y, ty * z + s * x, t * z * z + c, 0, 0, 0, 0, 1), this;
        }, _proto.makeScale = function(x, y, z) {
            return this.set(x, 0, 0, 0, 0, y, 0, 0, 0, 0, z, 0, 0, 0, 0, 1), this;
        }, _proto.makeShear = function(x, y, z) {
            return this.set(1, y, z, 0, x, 1, z, 0, x, y, 1, 0, 0, 0, 0, 1), this;
        }, _proto.compose = function(position, quaternion, scale) {
            var te = this.elements, x = quaternion._x, y = quaternion._y, z = quaternion._z, w = quaternion._w, x2 = x + x, y2 = y + y, z2 = z + z, xx = x * x2, xy = x * y2, xz = x * z2, yy = y * y2, yz = y * z2, zz = z * z2, wx = w * x2, wy = w * y2, wz = w * z2, sx = scale.x, sy = scale.y, sz = scale.z;
            return te[0] = (1 - (yy + zz)) * sx, te[1] = (xy + wz) * sx, te[2] = (xz - wy) * sx, te[3] = 0, te[4] = (xy - wz) * sy, te[5] = (1 - (xx + zz)) * sy, te[6] = (yz + wx) * sy, te[7] = 0, te[8] = (xz + wy) * sz, te[9] = (yz - wx) * sz, te[10] = (1 - (xx + yy)) * sz, te[11] = 0, te[12] = position.x, te[13] = position.y, te[14] = position.z, te[15] = 1, this;
        }, _proto.decompose = function(position, quaternion, scale) {
            var te = this.elements, sx = _v1$1.set(te[0], te[1], te[2]).length(), sy = _v1$1.set(te[4], te[5], te[6]).length(), sz = _v1$1.set(te[8], te[9], te[10]).length();
            0 > this.determinant() && (sx = -sx), position.x = te[12], position.y = te[13], position.z = te[14], _m1.copy(this);
            var invSX = 1 / sx, invSY = 1 / sy, invSZ = 1 / sz;
            return _m1.elements[0] *= invSX, _m1.elements[1] *= invSX, _m1.elements[2] *= invSX, _m1.elements[4] *= invSY, _m1.elements[5] *= invSY, _m1.elements[6] *= invSY, _m1.elements[8] *= invSZ, _m1.elements[9] *= invSZ, _m1.elements[10] *= invSZ, quaternion.setFromRotationMatrix(_m1), scale.x = sx, scale.y = sy, scale.z = sz, this;
        }, _proto.makePerspective = function(left, right, top, bottom, near, far) {
            void 0 === far && console.warn('THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.');
            var te = this.elements;
            return te[0] = 2 * near / (right - left), te[4] = 0, te[8] = (right + left) / (right - left), te[12] = 0, te[1] = 0, te[5] = 2 * near / (top - bottom), te[9] = (top + bottom) / (top - bottom), te[13] = 0, te[2] = 0, te[6] = 0, te[10] = -(far + near) / (far - near), te[14] = -2 * far * near / (far - near), te[3] = 0, te[7] = 0, te[11] = -1, te[15] = 0, this;
        }, _proto.makeOrthographic = function(left, right, top, bottom, near, far) {
            var te = this.elements, w = 1.0 / (right - left), h = 1.0 / (top - bottom), p = 1.0 / (far - near);
            return te[0] = 2 * w, te[4] = 0, te[8] = 0, te[12] = -((right + left) * w), te[1] = 0, te[5] = 2 * h, te[9] = 0, te[13] = -((top + bottom) * h), te[2] = 0, te[6] = 0, te[10] = -2 * p, te[14] = -((far + near) * p), te[3] = 0, te[7] = 0, te[11] = 0, te[15] = 1, this;
        }, _proto.equals = function(matrix) {
            for(var te = this.elements, me = matrix.elements, i = 0; i < 16; i++)if (te[i] !== me[i]) return !1;
            return !0;
        }, _proto.fromArray = function(array, offset) {
            void 0 === offset && (offset = 0);
            for(var i = 0; i < 16; i++)this.elements[i] = array[i + offset];
            return this;
        }, _proto.toArray = function(array, offset) {
            void 0 === array && (array = []), void 0 === offset && (offset = 0);
            var te = this.elements;
            return array[offset] = te[0], array[offset + 1] = te[1], array[offset + 2] = te[2], array[offset + 3] = te[3], array[offset + 4] = te[4], array[offset + 5] = te[5], array[offset + 6] = te[6], array[offset + 7] = te[7], array[offset + 8] = te[8], array[offset + 9] = te[9], array[offset + 10] = te[10], array[offset + 11] = te[11], array[offset + 12] = te[12], array[offset + 13] = te[13], array[offset + 14] = te[14], array[offset + 15] = te[15], array;
        }, Matrix4;
    }(), _v1$1 = new Vector3(), _m1 = new Matrix4(), _zero = new Vector3(0, 0, 0), _one = new Vector3(1, 1, 1), _x = new Vector3(), _y = new Vector3(), _z = new Vector3(), Euler = function() {
        function Euler(x, y, z, order) {
            void 0 === x && (x = 0), void 0 === y && (y = 0), void 0 === z && (z = 0), void 0 === order && (order = Euler.DefaultOrder), Object.defineProperty(this, 'isEuler', {
                value: !0
            }), this._x = x, this._y = y, this._z = z, this._order = order;
        }
        var _proto = Euler.prototype;
        return _proto.set = function(x, y, z, order) {
            return this._x = x, this._y = y, this._z = z, this._order = order || this._order, this._onChangeCallback(), this;
        }, _proto.clone = function() {
            return new this.constructor(this._x, this._y, this._z, this._order);
        }, _proto.copy = function(euler) {
            return this._x = euler._x, this._y = euler._y, this._z = euler._z, this._order = euler._order, this._onChangeCallback(), this;
        }, _proto.setFromRotationMatrix = function(m, order, update) {
            var clamp = MathUtils.clamp, te = m.elements, m11 = te[0], m12 = te[4], m13 = te[8], m21 = te[1], m22 = te[5], m23 = te[9], m31 = te[2], m32 = te[6], m33 = te[10];
            switch(order = order || this._order){
                case 'XYZ':
                    this._y = Math.asin(clamp(m13, -1, 1)), 0.9999999 > Math.abs(m13) ? (this._x = Math.atan2(-m23, m33), this._z = Math.atan2(-m12, m11)) : (this._x = Math.atan2(m32, m22), this._z = 0);
                    break;
                case 'YXZ':
                    this._x = Math.asin(-clamp(m23, -1, 1)), 0.9999999 > Math.abs(m23) ? (this._y = Math.atan2(m13, m33), this._z = Math.atan2(m21, m22)) : (this._y = Math.atan2(-m31, m11), this._z = 0);
                    break;
                case 'ZXY':
                    this._x = Math.asin(clamp(m32, -1, 1)), 0.9999999 > Math.abs(m32) ? (this._y = Math.atan2(-m31, m33), this._z = Math.atan2(-m12, m22)) : (this._y = 0, this._z = Math.atan2(m21, m11));
                    break;
                case 'ZYX':
                    this._y = Math.asin(-clamp(m31, -1, 1)), 0.9999999 > Math.abs(m31) ? (this._x = Math.atan2(m32, m33), this._z = Math.atan2(m21, m11)) : (this._x = 0, this._z = Math.atan2(-m12, m22));
                    break;
                case 'YZX':
                    this._z = Math.asin(clamp(m21, -1, 1)), 0.9999999 > Math.abs(m21) ? (this._x = Math.atan2(-m23, m22), this._y = Math.atan2(-m31, m11)) : (this._x = 0, this._y = Math.atan2(m13, m33));
                    break;
                case 'XZY':
                    this._z = Math.asin(-clamp(m12, -1, 1)), 0.9999999 > Math.abs(m12) ? (this._x = Math.atan2(m32, m22), this._y = Math.atan2(m13, m11)) : (this._x = Math.atan2(-m23, m33), this._y = 0);
                    break;
                default:
                    console.warn('THREE.Euler: .setFromRotationMatrix() encountered an unknown order: ' + order);
            }
            return this._order = order, !1 !== update && this._onChangeCallback(), this;
        }, _proto.setFromQuaternion = function(q, order, update) {
            return _matrix.makeRotationFromQuaternion(q), this.setFromRotationMatrix(_matrix, order, update);
        }, _proto.setFromVector3 = function(v, order) {
            return this.set(v.x, v.y, v.z, order || this._order);
        }, _proto.reorder = function(newOrder) {
            return _quaternion$1.setFromEuler(this), this.setFromQuaternion(_quaternion$1, newOrder);
        }, _proto.equals = function(euler) {
            return euler._x === this._x && euler._y === this._y && euler._z === this._z && euler._order === this._order;
        }, _proto.fromArray = function(array) {
            return this._x = array[0], this._y = array[1], this._z = array[2], void 0 !== array[3] && (this._order = array[3]), this._onChangeCallback(), this;
        }, _proto.toArray = function(array, offset) {
            return void 0 === array && (array = []), void 0 === offset && (offset = 0), array[offset] = this._x, array[offset + 1] = this._y, array[offset + 2] = this._z, array[offset + 3] = this._order, array;
        }, _proto.toVector3 = function(optionalResult) {
            return optionalResult ? optionalResult.set(this._x, this._y, this._z) : new Vector3(this._x, this._y, this._z);
        }, _proto._onChange = function(callback) {
            return this._onChangeCallback = callback, this;
        }, _proto._onChangeCallback = function() {}, _createClass(Euler, [
            {
                key: "x",
                get: function() {
                    return this._x;
                },
                set: function(value) {
                    this._x = value, this._onChangeCallback();
                }
            },
            {
                key: "y",
                get: function() {
                    return this._y;
                },
                set: function(value) {
                    this._y = value, this._onChangeCallback();
                }
            },
            {
                key: "z",
                get: function() {
                    return this._z;
                },
                set: function(value) {
                    this._z = value, this._onChangeCallback();
                }
            },
            {
                key: "order",
                get: function() {
                    return this._order;
                },
                set: function(value) {
                    this._order = value, this._onChangeCallback();
                }
            }
        ]), Euler;
    }();
    Euler.DefaultOrder = 'XYZ', Euler.RotationOrders = [
        'XYZ',
        'YZX',
        'ZXY',
        'XZY',
        'YXZ',
        'ZYX'
    ];
    var _matrix = new Matrix4(), _quaternion$1 = new Quaternion(), Layers = function() {
        function Layers() {
            this.mask = 1;
        }
        var _proto = Layers.prototype;
        return _proto.set = function(channel) {
            this.mask = 1 << channel | 0;
        }, _proto.enable = function(channel) {
            this.mask |= 1 << channel | 0;
        }, _proto.enableAll = function() {
            this.mask = -1;
        }, _proto.toggle = function(channel) {
            this.mask ^= 1 << channel | 0;
        }, _proto.disable = function(channel) {
            this.mask &= ~(1 << channel | 0);
        }, _proto.disableAll = function() {
            this.mask = 0;
        }, _proto.test = function(layers) {
            return (this.mask & layers.mask) != 0;
        }, Layers;
    }(), _object3DId = 0, _v1$2 = new Vector3(), _q1 = new Quaternion(), _m1$1 = new Matrix4(), _target = new Vector3(), _position = new Vector3(), _scale = new Vector3(), _quaternion$2 = new Quaternion(), _xAxis = new Vector3(1, 0, 0), _yAxis = new Vector3(0, 1, 0), _zAxis = new Vector3(0, 0, 1), _addedEvent = {
        type: 'added'
    }, _removedEvent = {
        type: 'removed'
    };
    function Object3D() {
        Object.defineProperty(this, 'id', {
            value: _object3DId++
        }), this.uuid = MathUtils.generateUUID(), this.name = '', this.type = 'Object3D', this.parent = null, this.children = [], this.up = Object3D.DefaultUp.clone();
        var position = new Vector3(), rotation = new Euler(), quaternion = new Quaternion(), scale = new Vector3(1, 1, 1);
        rotation._onChange(function() {
            quaternion.setFromEuler(rotation, !1);
        }), quaternion._onChange(function() {
            rotation.setFromQuaternion(quaternion, void 0, !1);
        }), Object.defineProperties(this, {
            position: {
                configurable: !0,
                enumerable: !0,
                value: position
            },
            rotation: {
                configurable: !0,
                enumerable: !0,
                value: rotation
            },
            quaternion: {
                configurable: !0,
                enumerable: !0,
                value: quaternion
            },
            scale: {
                configurable: !0,
                enumerable: !0,
                value: scale
            },
            modelViewMatrix: {
                value: new Matrix4()
            },
            normalMatrix: {
                value: new Matrix3()
            }
        }), this.matrix = new Matrix4(), this.matrixWorld = new Matrix4(), this.matrixAutoUpdate = Object3D.DefaultMatrixAutoUpdate, this.matrixWorldNeedsUpdate = !1, this.layers = new Layers(), this.visible = !0, this.castShadow = !1, this.receiveShadow = !1, this.frustumCulled = !0, this.renderOrder = 0, this.animations = [], this.userData = {};
    }
    Object3D.DefaultUp = new Vector3(0, 1, 0), Object3D.DefaultMatrixAutoUpdate = !0, Object3D.prototype = Object.assign(Object.create(EventDispatcher.prototype), {
        constructor: Object3D,
        isObject3D: !0,
        onBeforeRender: function() {},
        onAfterRender: function() {},
        applyMatrix4: function(matrix) {
            this.matrixAutoUpdate && this.updateMatrix(), this.matrix.premultiply(matrix), this.matrix.decompose(this.position, this.quaternion, this.scale);
        },
        applyQuaternion: function(q) {
            return this.quaternion.premultiply(q), this;
        },
        setRotationFromAxisAngle: function(axis, angle) {
            this.quaternion.setFromAxisAngle(axis, angle);
        },
        setRotationFromEuler: function(euler) {
            this.quaternion.setFromEuler(euler, !0);
        },
        setRotationFromMatrix: function(m) {
            this.quaternion.setFromRotationMatrix(m);
        },
        setRotationFromQuaternion: function(q) {
            this.quaternion.copy(q);
        },
        rotateOnAxis: function(axis, angle) {
            return _q1.setFromAxisAngle(axis, angle), this.quaternion.multiply(_q1), this;
        },
        rotateOnWorldAxis: function(axis, angle) {
            return _q1.setFromAxisAngle(axis, angle), this.quaternion.premultiply(_q1), this;
        },
        rotateX: function(angle) {
            return this.rotateOnAxis(_xAxis, angle);
        },
        rotateY: function(angle) {
            return this.rotateOnAxis(_yAxis, angle);
        },
        rotateZ: function(angle) {
            return this.rotateOnAxis(_zAxis, angle);
        },
        translateOnAxis: function(axis, distance) {
            return _v1$2.copy(axis).applyQuaternion(this.quaternion), this.position.add(_v1$2.multiplyScalar(distance)), this;
        },
        translateX: function(distance) {
            return this.translateOnAxis(_xAxis, distance);
        },
        translateY: function(distance) {
            return this.translateOnAxis(_yAxis, distance);
        },
        translateZ: function(distance) {
            return this.translateOnAxis(_zAxis, distance);
        },
        localToWorld: function(vector) {
            return vector.applyMatrix4(this.matrixWorld);
        },
        worldToLocal: function(vector) {
            return vector.applyMatrix4(_m1$1.copy(this.matrixWorld).invert());
        },
        lookAt: function(x, y, z) {
            x.isVector3 ? _target.copy(x) : _target.set(x, y, z);
            var parent = this.parent;
            this.updateWorldMatrix(!0, !1), _position.setFromMatrixPosition(this.matrixWorld), this.isCamera || this.isLight ? _m1$1.lookAt(_position, _target, this.up) : _m1$1.lookAt(_target, _position, this.up), this.quaternion.setFromRotationMatrix(_m1$1), parent && (_m1$1.extractRotation(parent.matrixWorld), _q1.setFromRotationMatrix(_m1$1), this.quaternion.premultiply(_q1.invert()));
        },
        add: function(object) {
            if (arguments.length > 1) {
                for(var i = 0; i < arguments.length; i++)this.add(arguments[i]);
                return this;
            }
            return object === this ? (console.error('THREE.Object3D.add: object can\'t be added as a child of itself.', object), this) : (object && object.isObject3D ? (null !== object.parent && object.parent.remove(object), object.parent = this, this.children.push(object), object.dispatchEvent(_addedEvent)) : console.error('THREE.Object3D.add: object not an instance of THREE.Object3D.', object), this);
        },
        remove: function(object) {
            if (arguments.length > 1) {
                for(var i = 0; i < arguments.length; i++)this.remove(arguments[i]);
                return this;
            }
            var index = this.children.indexOf(object);
            return -1 !== index && (object.parent = null, this.children.splice(index, 1), object.dispatchEvent(_removedEvent)), this;
        },
        clear: function() {
            for(var i = 0; i < this.children.length; i++){
                var object = this.children[i];
                object.parent = null, object.dispatchEvent(_removedEvent);
            }
            return this.children.length = 0, this;
        },
        attach: function(object) {
            return this.updateWorldMatrix(!0, !1), _m1$1.copy(this.matrixWorld).invert(), null !== object.parent && (object.parent.updateWorldMatrix(!0, !1), _m1$1.multiply(object.parent.matrixWorld)), object.applyMatrix4(_m1$1), object.updateWorldMatrix(!1, !1), this.add(object), this;
        },
        getObjectById: function(id) {
            return this.getObjectByProperty('id', id);
        },
        getObjectByName: function(name) {
            return this.getObjectByProperty('name', name);
        },
        getObjectByProperty: function(name, value) {
            if (this[name] === value) return this;
            for(var i = 0, l = this.children.length; i < l; i++){
                var object = this.children[i].getObjectByProperty(name, value);
                if (void 0 !== object) return object;
            }
        },
        getWorldPosition: function(target) {
            return void 0 === target && (console.warn('THREE.Object3D: .getWorldPosition() target is now required'), target = new Vector3()), this.updateWorldMatrix(!0, !1), target.setFromMatrixPosition(this.matrixWorld);
        },
        getWorldQuaternion: function(target) {
            return void 0 === target && (console.warn('THREE.Object3D: .getWorldQuaternion() target is now required'), target = new Quaternion()), this.updateWorldMatrix(!0, !1), this.matrixWorld.decompose(_position, target, _scale), target;
        },
        getWorldScale: function(target) {
            return void 0 === target && (console.warn('THREE.Object3D: .getWorldScale() target is now required'), target = new Vector3()), this.updateWorldMatrix(!0, !1), this.matrixWorld.decompose(_position, _quaternion$2, target), target;
        },
        getWorldDirection: function(target) {
            void 0 === target && (console.warn('THREE.Object3D: .getWorldDirection() target is now required'), target = new Vector3()), this.updateWorldMatrix(!0, !1);
            var e = this.matrixWorld.elements;
            return target.set(e[8], e[9], e[10]).normalize();
        },
        raycast: function() {},
        traverse: function(callback) {
            callback(this);
            for(var children = this.children, i = 0, l = children.length; i < l; i++)children[i].traverse(callback);
        },
        traverseVisible: function(callback) {
            if (!1 !== this.visible) {
                callback(this);
                for(var children = this.children, i = 0, l = children.length; i < l; i++)children[i].traverseVisible(callback);
            }
        },
        traverseAncestors: function(callback) {
            var parent = this.parent;
            null !== parent && (callback(parent), parent.traverseAncestors(callback));
        },
        updateMatrix: function() {
            this.matrix.compose(this.position, this.quaternion, this.scale), this.matrixWorldNeedsUpdate = !0;
        },
        updateMatrixWorld: function(force) {
            this.matrixAutoUpdate && this.updateMatrix(), (this.matrixWorldNeedsUpdate || force) && (null === this.parent ? this.matrixWorld.copy(this.matrix) : this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix), this.matrixWorldNeedsUpdate = !1, force = !0);
            for(var children = this.children, i = 0, l = children.length; i < l; i++)children[i].updateMatrixWorld(force);
        },
        updateWorldMatrix: function(updateParents, updateChildren) {
            var parent = this.parent;
            if (!0 === updateParents && null !== parent && parent.updateWorldMatrix(!0, !1), this.matrixAutoUpdate && this.updateMatrix(), null === this.parent ? this.matrixWorld.copy(this.matrix) : this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix), !0 === updateChildren) for(var children = this.children, i = 0, l = children.length; i < l; i++)children[i].updateWorldMatrix(!1, !0);
        },
        toJSON: function(meta) {
            var isRootObject = void 0 === meta || 'string' == typeof meta, output = {};
            isRootObject && (meta = {
                geometries: {},
                materials: {},
                textures: {},
                images: {},
                shapes: {},
                skeletons: {},
                animations: {}
            }, output.metadata = {
                version: 4.5,
                type: 'Object',
                generator: 'Object3D.toJSON'
            });
            var object = {};
            function serialize(library, element) {
                return void 0 === library[element.uuid] && (library[element.uuid] = element.toJSON(meta)), element.uuid;
            }
            if (object.uuid = this.uuid, object.type = this.type, '' !== this.name && (object.name = this.name), !0 === this.castShadow && (object.castShadow = !0), !0 === this.receiveShadow && (object.receiveShadow = !0), !1 === this.visible && (object.visible = !1), !1 === this.frustumCulled && (object.frustumCulled = !1), 0 !== this.renderOrder && (object.renderOrder = this.renderOrder), '{}' !== JSON.stringify(this.userData) && (object.userData = this.userData), object.layers = this.layers.mask, object.matrix = this.matrix.toArray(), !1 === this.matrixAutoUpdate && (object.matrixAutoUpdate = !1), this.isInstancedMesh && (object.type = 'InstancedMesh', object.count = this.count, object.instanceMatrix = this.instanceMatrix.toJSON()), this.isMesh || this.isLine || this.isPoints) {
                object.geometry = serialize(meta.geometries, this.geometry);
                var parameters = this.geometry.parameters;
                if (void 0 !== parameters && void 0 !== parameters.shapes) {
                    var shapes = parameters.shapes;
                    if (Array.isArray(shapes)) for(var i = 0, l = shapes.length; i < l; i++){
                        var shape = shapes[i];
                        serialize(meta.shapes, shape);
                    }
                    else serialize(meta.shapes, shapes);
                }
            }
            if (this.isSkinnedMesh && (object.bindMode = this.bindMode, object.bindMatrix = this.bindMatrix.toArray(), void 0 !== this.skeleton && (serialize(meta.skeletons, this.skeleton), object.skeleton = this.skeleton.uuid)), void 0 !== this.material) {
                if (Array.isArray(this.material)) {
                    for(var uuids = [], _i = 0, _l = this.material.length; _i < _l; _i++)uuids.push(serialize(meta.materials, this.material[_i]));
                    object.material = uuids;
                } else object.material = serialize(meta.materials, this.material);
            }
            if (this.children.length > 0) {
                object.children = [];
                for(var _i2 = 0; _i2 < this.children.length; _i2++)object.children.push(this.children[_i2].toJSON(meta).object);
            }
            if (this.animations.length > 0) {
                object.animations = [];
                for(var _i3 = 0; _i3 < this.animations.length; _i3++){
                    var animation = this.animations[_i3];
                    object.animations.push(serialize(meta.animations, animation));
                }
            }
            if (isRootObject) {
                var geometries = extractFromCache(meta.geometries), materials = extractFromCache(meta.materials), textures = extractFromCache(meta.textures), images = extractFromCache(meta.images), _shapes = extractFromCache(meta.shapes), skeletons = extractFromCache(meta.skeletons), animations = extractFromCache(meta.animations);
                geometries.length > 0 && (output.geometries = geometries), materials.length > 0 && (output.materials = materials), textures.length > 0 && (output.textures = textures), images.length > 0 && (output.images = images), _shapes.length > 0 && (output.shapes = _shapes), skeletons.length > 0 && (output.skeletons = skeletons), animations.length > 0 && (output.animations = animations);
            }
            return output.object = object, output;
            function extractFromCache(cache) {
                var values = [];
                for(var key in cache){
                    var data = cache[key];
                    delete data.metadata, values.push(data);
                }
                return values;
            }
        },
        clone: function(recursive) {
            return new this.constructor().copy(this, recursive);
        },
        copy: function(source, recursive) {
            if (void 0 === recursive && (recursive = !0), this.name = source.name, this.up.copy(source.up), this.position.copy(source.position), this.rotation.order = source.rotation.order, this.quaternion.copy(source.quaternion), this.scale.copy(source.scale), this.matrix.copy(source.matrix), this.matrixWorld.copy(source.matrixWorld), this.matrixAutoUpdate = source.matrixAutoUpdate, this.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate, this.layers.mask = source.layers.mask, this.visible = source.visible, this.castShadow = source.castShadow, this.receiveShadow = source.receiveShadow, this.frustumCulled = source.frustumCulled, this.renderOrder = source.renderOrder, this.userData = JSON.parse(JSON.stringify(source.userData)), !0 === recursive) for(var i = 0; i < source.children.length; i++){
                var child = source.children[i];
                this.add(child.clone());
            }
            return this;
        }
    });
    var _vector1 = new Vector3(), _vector2 = new Vector3(), _normalMatrix = new Matrix3(), Plane = function() {
        function Plane(normal, constant) {
            Object.defineProperty(this, 'isPlane', {
                value: !0
            }), this.normal = void 0 !== normal ? normal : new Vector3(1, 0, 0), this.constant = void 0 !== constant ? constant : 0;
        }
        var _proto = Plane.prototype;
        return _proto.set = function(normal, constant) {
            return this.normal.copy(normal), this.constant = constant, this;
        }, _proto.setComponents = function(x, y, z, w) {
            return this.normal.set(x, y, z), this.constant = w, this;
        }, _proto.setFromNormalAndCoplanarPoint = function(normal, point) {
            return this.normal.copy(normal), this.constant = -point.dot(this.normal), this;
        }, _proto.setFromCoplanarPoints = function(a, b, c) {
            var normal = _vector1.subVectors(c, b).cross(_vector2.subVectors(a, b)).normalize();
            return this.setFromNormalAndCoplanarPoint(normal, a), this;
        }, _proto.clone = function() {
            return new this.constructor().copy(this);
        }, _proto.copy = function(plane) {
            return this.normal.copy(plane.normal), this.constant = plane.constant, this;
        }, _proto.normalize = function() {
            var inverseNormalLength = 1.0 / this.normal.length();
            return this.normal.multiplyScalar(inverseNormalLength), this.constant *= inverseNormalLength, this;
        }, _proto.negate = function() {
            return this.constant *= -1, this.normal.negate(), this;
        }, _proto.distanceToPoint = function(point) {
            return this.normal.dot(point) + this.constant;
        }, _proto.distanceToSphere = function(sphere) {
            return this.distanceToPoint(sphere.center) - sphere.radius;
        }, _proto.projectPoint = function(point, target) {
            return void 0 === target && (console.warn('THREE.Plane: .projectPoint() target is now required'), target = new Vector3()), target.copy(this.normal).multiplyScalar(-this.distanceToPoint(point)).add(point);
        }, _proto.intersectLine = function(line, target) {
            void 0 === target && (console.warn('THREE.Plane: .intersectLine() target is now required'), target = new Vector3());
            var direction = line.delta(_vector1), denominator = this.normal.dot(direction);
            if (0 === denominator) return 0 === this.distanceToPoint(line.start) ? target.copy(line.start) : void 0;
            var t = -(line.start.dot(this.normal) + this.constant) / denominator;
            if (!(t < 0) && !(t > 1)) return target.copy(direction).multiplyScalar(t).add(line.start);
        }, _proto.intersectsLine = function(line) {
            var startSign = this.distanceToPoint(line.start), endSign = this.distanceToPoint(line.end);
            return startSign < 0 && endSign > 0 || endSign < 0 && startSign > 0;
        }, _proto.intersectsBox = function(box) {
            return box.intersectsPlane(this);
        }, _proto.intersectsSphere = function(sphere) {
            return sphere.intersectsPlane(this);
        }, _proto.coplanarPoint = function(target) {
            return void 0 === target && (console.warn('THREE.Plane: .coplanarPoint() target is now required'), target = new Vector3()), target.copy(this.normal).multiplyScalar(-this.constant);
        }, _proto.applyMatrix4 = function(matrix, optionalNormalMatrix) {
            var normalMatrix = optionalNormalMatrix || _normalMatrix.getNormalMatrix(matrix), referencePoint = this.coplanarPoint(_vector1).applyMatrix4(matrix), normal = this.normal.applyMatrix3(normalMatrix).normalize();
            return this.constant = -referencePoint.dot(normal), this;
        }, _proto.translate = function(offset) {
            return this.constant -= offset.dot(this.normal), this;
        }, _proto.equals = function(plane) {
            return plane.normal.equals(this.normal) && plane.constant === this.constant;
        }, Plane;
    }(), _v0$1 = new Vector3(), _v1$3 = new Vector3(), _v2$1 = new Vector3(), _v3 = new Vector3(), _vab = new Vector3(), _vac = new Vector3(), _vbc = new Vector3(), _vap = new Vector3(), _vbp = new Vector3(), _vcp = new Vector3(), Triangle = function() {
        function Triangle(a, b, c) {
            this.a = void 0 !== a ? a : new Vector3(), this.b = void 0 !== b ? b : new Vector3(), this.c = void 0 !== c ? c : new Vector3();
        }
        Triangle.getNormal = function(a, b, c, target) {
            void 0 === target && (console.warn('THREE.Triangle: .getNormal() target is now required'), target = new Vector3()), target.subVectors(c, b), _v0$1.subVectors(a, b), target.cross(_v0$1);
            var targetLengthSq = target.lengthSq();
            return targetLengthSq > 0 ? target.multiplyScalar(1 / Math.sqrt(targetLengthSq)) : target.set(0, 0, 0);
        }, Triangle.getBarycoord = function(point, a, b, c, target) {
            _v0$1.subVectors(c, a), _v1$3.subVectors(b, a), _v2$1.subVectors(point, a);
            var dot00 = _v0$1.dot(_v0$1), dot01 = _v0$1.dot(_v1$3), dot02 = _v0$1.dot(_v2$1), dot11 = _v1$3.dot(_v1$3), dot12 = _v1$3.dot(_v2$1), denom = dot00 * dot11 - dot01 * dot01;
            if (void 0 === target && (console.warn('THREE.Triangle: .getBarycoord() target is now required'), target = new Vector3()), 0 === denom) return target.set(-2, -1, -1);
            var invDenom = 1 / denom, u = (dot11 * dot02 - dot01 * dot12) * invDenom, v = (dot00 * dot12 - dot01 * dot02) * invDenom;
            return target.set(1 - u - v, v, u);
        }, Triangle.containsPoint = function(point, a, b, c) {
            return this.getBarycoord(point, a, b, c, _v3), _v3.x >= 0 && _v3.y >= 0 && _v3.x + _v3.y <= 1;
        }, Triangle.getUV = function(point, p1, p2, p3, uv1, uv2, uv3, target) {
            return this.getBarycoord(point, p1, p2, p3, _v3), target.set(0, 0), target.addScaledVector(uv1, _v3.x), target.addScaledVector(uv2, _v3.y), target.addScaledVector(uv3, _v3.z), target;
        }, Triangle.isFrontFacing = function(a, b, c, direction) {
            return _v0$1.subVectors(c, b), _v1$3.subVectors(a, b), 0 > _v0$1.cross(_v1$3).dot(direction);
        };
        var _proto = Triangle.prototype;
        return _proto.set = function(a, b, c) {
            return this.a.copy(a), this.b.copy(b), this.c.copy(c), this;
        }, _proto.setFromPointsAndIndices = function(points, i0, i1, i2) {
            return this.a.copy(points[i0]), this.b.copy(points[i1]), this.c.copy(points[i2]), this;
        }, _proto.clone = function() {
            return new this.constructor().copy(this);
        }, _proto.copy = function(triangle) {
            return this.a.copy(triangle.a), this.b.copy(triangle.b), this.c.copy(triangle.c), this;
        }, _proto.getArea = function() {
            return _v0$1.subVectors(this.c, this.b), _v1$3.subVectors(this.a, this.b), 0.5 * _v0$1.cross(_v1$3).length();
        }, _proto.getMidpoint = function(target) {
            return void 0 === target && (console.warn('THREE.Triangle: .getMidpoint() target is now required'), target = new Vector3()), target.addVectors(this.a, this.b).add(this.c).multiplyScalar(1 / 3);
        }, _proto.getNormal = function(target) {
            return Triangle.getNormal(this.a, this.b, this.c, target);
        }, _proto.getPlane = function(target) {
            return void 0 === target && (console.warn('THREE.Triangle: .getPlane() target is now required'), target = new Plane()), target.setFromCoplanarPoints(this.a, this.b, this.c);
        }, _proto.getBarycoord = function(point, target) {
            return Triangle.getBarycoord(point, this.a, this.b, this.c, target);
        }, _proto.getUV = function(point, uv1, uv2, uv3, target) {
            return Triangle.getUV(point, this.a, this.b, this.c, uv1, uv2, uv3, target);
        }, _proto.containsPoint = function(point) {
            return Triangle.containsPoint(point, this.a, this.b, this.c);
        }, _proto.isFrontFacing = function(direction) {
            return Triangle.isFrontFacing(this.a, this.b, this.c, direction);
        }, _proto.intersectsBox = function(box) {
            return box.intersectsTriangle(this);
        }, _proto.closestPointToPoint = function(p, target) {
            void 0 === target && (console.warn('THREE.Triangle: .closestPointToPoint() target is now required'), target = new Vector3());
            var v, w, a = this.a, b = this.b, c = this.c;
            _vab.subVectors(b, a), _vac.subVectors(c, a), _vap.subVectors(p, a);
            var d1 = _vab.dot(_vap), d2 = _vac.dot(_vap);
            if (d1 <= 0 && d2 <= 0) return target.copy(a);
            _vbp.subVectors(p, b);
            var d3 = _vab.dot(_vbp), d4 = _vac.dot(_vbp);
            if (d3 >= 0 && d4 <= d3) return target.copy(b);
            var vc = d1 * d4 - d3 * d2;
            if (vc <= 0 && d1 >= 0 && d3 <= 0) return v = d1 / (d1 - d3), target.copy(a).addScaledVector(_vab, v);
            _vcp.subVectors(p, c);
            var d5 = _vab.dot(_vcp), d6 = _vac.dot(_vcp);
            if (d6 >= 0 && d5 <= d6) return target.copy(c);
            var vb = d5 * d2 - d1 * d6;
            if (vb <= 0 && d2 >= 0 && d6 <= 0) return w = d2 / (d2 - d6), target.copy(a).addScaledVector(_vac, w);
            var va = d3 * d6 - d5 * d4;
            if (va <= 0 && d4 - d3 >= 0 && d5 - d6 >= 0) return _vbc.subVectors(c, b), w = (d4 - d3) / (d4 - d3 + (d5 - d6)), target.copy(b).addScaledVector(_vbc, w);
            var denom = 1 / (va + vb + vc);
            return v = vb * denom, w = vc * denom, target.copy(a).addScaledVector(_vab, v).addScaledVector(_vac, w);
        }, _proto.equals = function(triangle) {
            return triangle.a.equals(this.a) && triangle.b.equals(this.b) && triangle.c.equals(this.c);
        }, Triangle;
    }(), _colorKeywords = {
        aliceblue: 0xF0F8FF,
        antiquewhite: 0xFAEBD7,
        aqua: 0x00FFFF,
        aquamarine: 0x7FFFD4,
        azure: 0xF0FFFF,
        beige: 0xF5F5DC,
        bisque: 0xFFE4C4,
        black: 0x000000,
        blanchedalmond: 0xFFEBCD,
        blue: 0x0000FF,
        blueviolet: 0x8A2BE2,
        brown: 0xA52A2A,
        burlywood: 0xDEB887,
        cadetblue: 0x5F9EA0,
        chartreuse: 0x7FFF00,
        chocolate: 0xD2691E,
        coral: 0xFF7F50,
        cornflowerblue: 0x6495ED,
        cornsilk: 0xFFF8DC,
        crimson: 0xDC143C,
        cyan: 0x00FFFF,
        darkblue: 0x00008B,
        darkcyan: 0x008B8B,
        darkgoldenrod: 0xB8860B,
        darkgray: 0xA9A9A9,
        darkgreen: 0x006400,
        darkgrey: 0xA9A9A9,
        darkkhaki: 0xBDB76B,
        darkmagenta: 0x8B008B,
        darkolivegreen: 0x556B2F,
        darkorange: 0xFF8C00,
        darkorchid: 0x9932CC,
        darkred: 0x8B0000,
        darksalmon: 0xE9967A,
        darkseagreen: 0x8FBC8F,
        darkslateblue: 0x483D8B,
        darkslategray: 0x2F4F4F,
        darkslategrey: 0x2F4F4F,
        darkturquoise: 0x00CED1,
        darkviolet: 0x9400D3,
        deeppink: 0xFF1493,
        deepskyblue: 0x00BFFF,
        dimgray: 0x696969,
        dimgrey: 0x696969,
        dodgerblue: 0x1E90FF,
        firebrick: 0xB22222,
        floralwhite: 0xFFFAF0,
        forestgreen: 0x228B22,
        fuchsia: 0xFF00FF,
        gainsboro: 0xDCDCDC,
        ghostwhite: 0xF8F8FF,
        gold: 0xFFD700,
        goldenrod: 0xDAA520,
        gray: 0x808080,
        green: 0x008000,
        greenyellow: 0xADFF2F,
        grey: 0x808080,
        honeydew: 0xF0FFF0,
        hotpink: 0xFF69B4,
        indianred: 0xCD5C5C,
        indigo: 0x4B0082,
        ivory: 0xFFFFF0,
        khaki: 0xF0E68C,
        lavender: 0xE6E6FA,
        lavenderblush: 0xFFF0F5,
        lawngreen: 0x7CFC00,
        lemonchiffon: 0xFFFACD,
        lightblue: 0xADD8E6,
        lightcoral: 0xF08080,
        lightcyan: 0xE0FFFF,
        lightgoldenrodyellow: 0xFAFAD2,
        lightgray: 0xD3D3D3,
        lightgreen: 0x90EE90,
        lightgrey: 0xD3D3D3,
        lightpink: 0xFFB6C1,
        lightsalmon: 0xFFA07A,
        lightseagreen: 0x20B2AA,
        lightskyblue: 0x87CEFA,
        lightslategray: 0x778899,
        lightslategrey: 0x778899,
        lightsteelblue: 0xB0C4DE,
        lightyellow: 0xFFFFE0,
        lime: 0x00FF00,
        limegreen: 0x32CD32,
        linen: 0xFAF0E6,
        magenta: 0xFF00FF,
        maroon: 0x800000,
        mediumaquamarine: 0x66CDAA,
        mediumblue: 0x0000CD,
        mediumorchid: 0xBA55D3,
        mediumpurple: 0x9370DB,
        mediumseagreen: 0x3CB371,
        mediumslateblue: 0x7B68EE,
        mediumspringgreen: 0x00FA9A,
        mediumturquoise: 0x48D1CC,
        mediumvioletred: 0xC71585,
        midnightblue: 0x191970,
        mintcream: 0xF5FFFA,
        mistyrose: 0xFFE4E1,
        moccasin: 0xFFE4B5,
        navajowhite: 0xFFDEAD,
        navy: 0x000080,
        oldlace: 0xFDF5E6,
        olive: 0x808000,
        olivedrab: 0x6B8E23,
        orange: 0xFFA500,
        orangered: 0xFF4500,
        orchid: 0xDA70D6,
        palegoldenrod: 0xEEE8AA,
        palegreen: 0x98FB98,
        paleturquoise: 0xAFEEEE,
        palevioletred: 0xDB7093,
        papayawhip: 0xFFEFD5,
        peachpuff: 0xFFDAB9,
        peru: 0xCD853F,
        pink: 0xFFC0CB,
        plum: 0xDDA0DD,
        powderblue: 0xB0E0E6,
        purple: 0x800080,
        rebeccapurple: 0x663399,
        red: 0xFF0000,
        rosybrown: 0xBC8F8F,
        royalblue: 0x4169E1,
        saddlebrown: 0x8B4513,
        salmon: 0xFA8072,
        sandybrown: 0xF4A460,
        seagreen: 0x2E8B57,
        seashell: 0xFFF5EE,
        sienna: 0xA0522D,
        silver: 0xC0C0C0,
        skyblue: 0x87CEEB,
        slateblue: 0x6A5ACD,
        slategray: 0x708090,
        slategrey: 0x708090,
        snow: 0xFFFAFA,
        springgreen: 0x00FF7F,
        steelblue: 0x4682B4,
        tan: 0xD2B48C,
        teal: 0x008080,
        thistle: 0xD8BFD8,
        tomato: 0xFF6347,
        turquoise: 0x40E0D0,
        violet: 0xEE82EE,
        wheat: 0xF5DEB3,
        white: 0xFFFFFF,
        whitesmoke: 0xF5F5F5,
        yellow: 0xFFFF00,
        yellowgreen: 0x9ACD32
    }, _hslA = {
        h: 0,
        s: 0,
        l: 0
    }, _hslB = {
        h: 0,
        s: 0,
        l: 0
    };
    function hue2rgb(p, q, t) {
        return (t < 0 && (t += 1), t > 1 && (t -= 1), t < 1 / 6) ? p + (q - p) * 6 * t : t < 0.5 ? q : t < 2 / 3 ? p + (q - p) * 6 * (2 / 3 - t) : p;
    }
    function SRGBToLinear(c) {
        return c < 0.04045 ? 0.0773993808 * c : Math.pow(0.9478672986 * c + 0.0521327014, 2.4);
    }
    function LinearToSRGB(c) {
        return c < 0.0031308 ? 12.92 * c : 1.055 * Math.pow(c, 0.41666) - 0.055;
    }
    var Color = function() {
        function Color(r, g, b) {
            return (Object.defineProperty(this, 'isColor', {
                value: !0
            }), void 0 === g && void 0 === b) ? this.set(r) : this.setRGB(r, g, b);
        }
        var _proto = Color.prototype;
        return _proto.set = function(value) {
            return value && value.isColor ? this.copy(value) : 'number' == typeof value ? this.setHex(value) : 'string' == typeof value && this.setStyle(value), this;
        }, _proto.setScalar = function(scalar) {
            return this.r = scalar, this.g = scalar, this.b = scalar, this;
        }, _proto.setHex = function(hex) {
            return hex = Math.floor(hex), this.r = (hex >> 16 & 255) / 255, this.g = (hex >> 8 & 255) / 255, this.b = (255 & hex) / 255, this;
        }, _proto.setRGB = function(r, g, b) {
            return this.r = r, this.g = g, this.b = b, this;
        }, _proto.setHSL = function(h, s, l) {
            if (h = MathUtils.euclideanModulo(h, 1), s = MathUtils.clamp(s, 0, 1), l = MathUtils.clamp(l, 0, 1), 0 === s) this.r = this.g = this.b = l;
            else {
                var p = l <= 0.5 ? l * (1 + s) : l + s - l * s, q = 2 * l - p;
                this.r = hue2rgb(q, p, h + 1 / 3), this.g = hue2rgb(q, p, h), this.b = hue2rgb(q, p, h - 1 / 3);
            }
            return this;
        }, _proto.setStyle = function(style) {
            function handleAlpha(string) {
                void 0 !== string && 1 > parseFloat(string) && console.warn('THREE.Color: Alpha component of ' + style + ' will be ignored.');
            }
            if (m = /^((?:rgb|hsl)a?)\(\s*([^\)]*)\)/.exec(style)) {
                var m, color, name = m[1], components = m[2];
                switch(name){
                    case 'rgb':
                    case 'rgba':
                        if (color = /^(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(components)) return this.r = Math.min(255, parseInt(color[1], 10)) / 255, this.g = Math.min(255, parseInt(color[2], 10)) / 255, this.b = Math.min(255, parseInt(color[3], 10)) / 255, handleAlpha(color[4]), this;
                        if (color = /^(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(components)) return this.r = Math.min(100, parseInt(color[1], 10)) / 100, this.g = Math.min(100, parseInt(color[2], 10)) / 100, this.b = Math.min(100, parseInt(color[3], 10)) / 100, handleAlpha(color[4]), this;
                        break;
                    case 'hsl':
                    case 'hsla':
                        if (color = /^(\d*\.?\d+)\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(components)) {
                            var h = parseFloat(color[1]) / 360, s = parseInt(color[2], 10) / 100, l = parseInt(color[3], 10) / 100;
                            return handleAlpha(color[4]), this.setHSL(h, s, l);
                        }
                }
            } else if (m = /^\#([A-Fa-f\d]+)$/.exec(style)) {
                var hex = m[1], size = hex.length;
                if (3 === size) return this.r = parseInt(hex.charAt(0) + hex.charAt(0), 16) / 255, this.g = parseInt(hex.charAt(1) + hex.charAt(1), 16) / 255, this.b = parseInt(hex.charAt(2) + hex.charAt(2), 16) / 255, this;
                if (6 === size) return this.r = parseInt(hex.charAt(0) + hex.charAt(1), 16) / 255, this.g = parseInt(hex.charAt(2) + hex.charAt(3), 16) / 255, this.b = parseInt(hex.charAt(4) + hex.charAt(5), 16) / 255, this;
            }
            return style && style.length > 0 ? this.setColorName(style) : this;
        }, _proto.setColorName = function(style) {
            var hex = _colorKeywords[style];
            return void 0 !== hex ? this.setHex(hex) : console.warn('THREE.Color: Unknown color ' + style), this;
        }, _proto.clone = function() {
            return new this.constructor(this.r, this.g, this.b);
        }, _proto.copy = function(color) {
            return this.r = color.r, this.g = color.g, this.b = color.b, this;
        }, _proto.copyGammaToLinear = function(color, gammaFactor) {
            return void 0 === gammaFactor && (gammaFactor = 2.0), this.r = Math.pow(color.r, gammaFactor), this.g = Math.pow(color.g, gammaFactor), this.b = Math.pow(color.b, gammaFactor), this;
        }, _proto.copyLinearToGamma = function(color, gammaFactor) {
            void 0 === gammaFactor && (gammaFactor = 2.0);
            var safeInverse = gammaFactor > 0 ? 1.0 / gammaFactor : 1.0;
            return this.r = Math.pow(color.r, safeInverse), this.g = Math.pow(color.g, safeInverse), this.b = Math.pow(color.b, safeInverse), this;
        }, _proto.convertGammaToLinear = function(gammaFactor) {
            return this.copyGammaToLinear(this, gammaFactor), this;
        }, _proto.convertLinearToGamma = function(gammaFactor) {
            return this.copyLinearToGamma(this, gammaFactor), this;
        }, _proto.copySRGBToLinear = function(color) {
            return this.r = SRGBToLinear(color.r), this.g = SRGBToLinear(color.g), this.b = SRGBToLinear(color.b), this;
        }, _proto.copyLinearToSRGB = function(color) {
            return this.r = LinearToSRGB(color.r), this.g = LinearToSRGB(color.g), this.b = LinearToSRGB(color.b), this;
        }, _proto.convertSRGBToLinear = function() {
            return this.copySRGBToLinear(this), this;
        }, _proto.convertLinearToSRGB = function() {
            return this.copyLinearToSRGB(this), this;
        }, _proto.getHex = function() {
            return 255 * this.r << 16 ^ 255 * this.g << 8 ^ 255 * this.b << 0;
        }, _proto.getHexString = function() {
            return ('000000' + this.getHex().toString(16)).slice(-6);
        }, _proto.getHSL = function(target) {
            void 0 === target && (console.warn('THREE.Color: .getHSL() target is now required'), target = {
                h: 0,
                s: 0,
                l: 0
            });
            var hue, saturation, r = this.r, g = this.g, b = this.b, max = Math.max(r, g, b), min = Math.min(r, g, b), lightness = (min + max) / 2.0;
            if (min === max) hue = 0, saturation = 0;
            else {
                var delta = max - min;
                switch(saturation = lightness <= 0.5 ? delta / (max + min) : delta / (2 - max - min), max){
                    case r:
                        hue = (g - b) / delta + (g < b ? 6 : 0);
                        break;
                    case g:
                        hue = (b - r) / delta + 2;
                        break;
                    case b:
                        hue = (r - g) / delta + 4;
                }
                hue /= 6;
            }
            return target.h = hue, target.s = saturation, target.l = lightness, target;
        }, _proto.getStyle = function() {
            return 'rgb(' + (255 * this.r | 0) + ',' + (255 * this.g | 0) + ',' + (255 * this.b | 0) + ')';
        }, _proto.offsetHSL = function(h, s, l) {
            return this.getHSL(_hslA), _hslA.h += h, _hslA.s += s, _hslA.l += l, this.setHSL(_hslA.h, _hslA.s, _hslA.l), this;
        }, _proto.add = function(color) {
            return this.r += color.r, this.g += color.g, this.b += color.b, this;
        }, _proto.addColors = function(color1, color2) {
            return this.r = color1.r + color2.r, this.g = color1.g + color2.g, this.b = color1.b + color2.b, this;
        }, _proto.addScalar = function(s) {
            return this.r += s, this.g += s, this.b += s, this;
        }, _proto.sub = function(color) {
            return this.r = Math.max(0, this.r - color.r), this.g = Math.max(0, this.g - color.g), this.b = Math.max(0, this.b - color.b), this;
        }, _proto.multiply = function(color) {
            return this.r *= color.r, this.g *= color.g, this.b *= color.b, this;
        }, _proto.multiplyScalar = function(s) {
            return this.r *= s, this.g *= s, this.b *= s, this;
        }, _proto.lerp = function(color, alpha) {
            return this.r += (color.r - this.r) * alpha, this.g += (color.g - this.g) * alpha, this.b += (color.b - this.b) * alpha, this;
        }, _proto.lerpHSL = function(color, alpha) {
            this.getHSL(_hslA), color.getHSL(_hslB);
            var h = MathUtils.lerp(_hslA.h, _hslB.h, alpha), s = MathUtils.lerp(_hslA.s, _hslB.s, alpha), l = MathUtils.lerp(_hslA.l, _hslB.l, alpha);
            return this.setHSL(h, s, l), this;
        }, _proto.equals = function(c) {
            return c.r === this.r && c.g === this.g && c.b === this.b;
        }, _proto.fromArray = function(array, offset) {
            return void 0 === offset && (offset = 0), this.r = array[offset], this.g = array[offset + 1], this.b = array[offset + 2], this;
        }, _proto.toArray = function(array, offset) {
            return void 0 === array && (array = []), void 0 === offset && (offset = 0), array[offset] = this.r, array[offset + 1] = this.g, array[offset + 2] = this.b, array;
        }, _proto.fromBufferAttribute = function(attribute, index) {
            return this.r = attribute.getX(index), this.g = attribute.getY(index), this.b = attribute.getZ(index), !0 === attribute.normalized && (this.r /= 255, this.g /= 255, this.b /= 255), this;
        }, _proto.toJSON = function() {
            return this.getHex();
        }, Color;
    }();
    Color.NAMES = _colorKeywords, Color.prototype.r = 1, Color.prototype.g = 1, Color.prototype.b = 1;
    var Face3 = function() {
        function Face3(a, b, c, normal, color, materialIndex) {
            void 0 === materialIndex && (materialIndex = 0), this.a = a, this.b = b, this.c = c, this.normal = normal && normal.isVector3 ? normal : new Vector3(), this.vertexNormals = Array.isArray(normal) ? normal : [], this.color = color && color.isColor ? color : new Color(), this.vertexColors = Array.isArray(color) ? color : [], this.materialIndex = materialIndex;
        }
        var _proto = Face3.prototype;
        return _proto.clone = function() {
            return new this.constructor().copy(this);
        }, _proto.copy = function(source) {
            this.a = source.a, this.b = source.b, this.c = source.c, this.normal.copy(source.normal), this.color.copy(source.color), this.materialIndex = source.materialIndex;
            for(var i = 0, il = source.vertexNormals.length; i < il; i++)this.vertexNormals[i] = source.vertexNormals[i].clone();
            for(var _i = 0, _il = source.vertexColors.length; _i < _il; _i++)this.vertexColors[_i] = source.vertexColors[_i].clone();
            return this;
        }, Face3;
    }(), materialId = 0;
    function Material() {
        Object.defineProperty(this, 'id', {
            value: materialId++
        }), this.uuid = MathUtils.generateUUID(), this.name = '', this.type = 'Material', this.fog = !0, this.blending = 1, this.side = 0, this.flatShading = !1, this.vertexColors = !1, this.opacity = 1, this.transparent = !1, this.blendSrc = 204, this.blendDst = 205, this.blendEquation = 100, this.blendSrcAlpha = null, this.blendDstAlpha = null, this.blendEquationAlpha = null, this.depthFunc = 3, this.depthTest = !0, this.depthWrite = !0, this.stencilWriteMask = 0xff, this.stencilFunc = 519, this.stencilRef = 0, this.stencilFuncMask = 0xff, this.stencilFail = 7680, this.stencilZFail = 7680, this.stencilZPass = 7680, this.stencilWrite = !1, this.clippingPlanes = null, this.clipIntersection = !1, this.clipShadows = !1, this.shadowSide = null, this.colorWrite = !0, this.precision = null, this.polygonOffset = !1, this.polygonOffsetFactor = 0, this.polygonOffsetUnits = 0, this.dithering = !1, this.alphaTest = 0, this.premultipliedAlpha = !1, this.visible = !0, this.toneMapped = !0, this.userData = {}, this.version = 0;
    }
    function MeshBasicMaterial(parameters) {
        Material.call(this), this.type = 'MeshBasicMaterial', this.color = new Color(0xffffff), this.map = null, this.lightMap = null, this.lightMapIntensity = 1.0, this.aoMap = null, this.aoMapIntensity = 1.0, this.specularMap = null, this.alphaMap = null, this.envMap = null, this.combine = 0, this.reflectivity = 1, this.refractionRatio = 0.98, this.wireframe = !1, this.wireframeLinewidth = 1, this.wireframeLinecap = 'round', this.wireframeLinejoin = 'round', this.skinning = !1, this.morphTargets = !1, this.setValues(parameters);
    }
    Material.prototype = Object.assign(Object.create(EventDispatcher.prototype), {
        constructor: Material,
        isMaterial: !0,
        onBeforeCompile: function() {},
        customProgramCacheKey: function() {
            return this.onBeforeCompile.toString();
        },
        setValues: function(values) {
            if (void 0 !== values) for(var key in values){
                var newValue = values[key];
                if (void 0 === newValue) {
                    console.warn('THREE.Material: \'' + key + '\' parameter is undefined.');
                    continue;
                }
                if ('shading' === key) {
                    console.warn('THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.'), this.flatShading = 1 === newValue;
                    continue;
                }
                var currentValue = this[key];
                if (void 0 === currentValue) {
                    console.warn('THREE.' + this.type + ': \'' + key + '\' is not a property of this material.');
                    continue;
                }
                currentValue && currentValue.isColor ? currentValue.set(newValue) : currentValue && currentValue.isVector3 && newValue && newValue.isVector3 ? currentValue.copy(newValue) : this[key] = newValue;
            }
        },
        toJSON: function(meta) {
            var isRoot = void 0 === meta || 'string' == typeof meta;
            isRoot && (meta = {
                textures: {},
                images: {}
            });
            var data = {
                metadata: {
                    version: 4.5,
                    type: 'Material',
                    generator: 'Material.toJSON'
                }
            };
            function extractFromCache(cache) {
                var values = [];
                for(var key in cache){
                    var _data = cache[key];
                    delete _data.metadata, values.push(_data);
                }
                return values;
            }
            if (data.uuid = this.uuid, data.type = this.type, '' !== this.name && (data.name = this.name), this.color && this.color.isColor && (data.color = this.color.getHex()), void 0 !== this.roughness && (data.roughness = this.roughness), void 0 !== this.metalness && (data.metalness = this.metalness), this.sheen && this.sheen.isColor && (data.sheen = this.sheen.getHex()), this.emissive && this.emissive.isColor && (data.emissive = this.emissive.getHex()), this.emissiveIntensity && 1 !== this.emissiveIntensity && (data.emissiveIntensity = this.emissiveIntensity), this.specular && this.specular.isColor && (data.specular = this.specular.getHex()), void 0 !== this.shininess && (data.shininess = this.shininess), void 0 !== this.clearcoat && (data.clearcoat = this.clearcoat), void 0 !== this.clearcoatRoughness && (data.clearcoatRoughness = this.clearcoatRoughness), this.clearcoatMap && this.clearcoatMap.isTexture && (data.clearcoatMap = this.clearcoatMap.toJSON(meta).uuid), this.clearcoatRoughnessMap && this.clearcoatRoughnessMap.isTexture && (data.clearcoatRoughnessMap = this.clearcoatRoughnessMap.toJSON(meta).uuid), this.clearcoatNormalMap && this.clearcoatNormalMap.isTexture && (data.clearcoatNormalMap = this.clearcoatNormalMap.toJSON(meta).uuid, data.clearcoatNormalScale = this.clearcoatNormalScale.toArray()), this.map && this.map.isTexture && (data.map = this.map.toJSON(meta).uuid), this.matcap && this.matcap.isTexture && (data.matcap = this.matcap.toJSON(meta).uuid), this.alphaMap && this.alphaMap.isTexture && (data.alphaMap = this.alphaMap.toJSON(meta).uuid), this.lightMap && this.lightMap.isTexture && (data.lightMap = this.lightMap.toJSON(meta).uuid), this.aoMap && this.aoMap.isTexture && (data.aoMap = this.aoMap.toJSON(meta).uuid, data.aoMapIntensity = this.aoMapIntensity), this.bumpMap && this.bumpMap.isTexture && (data.bumpMap = this.bumpMap.toJSON(meta).uuid, data.bumpScale = this.bumpScale), this.normalMap && this.normalMap.isTexture && (data.normalMap = this.normalMap.toJSON(meta).uuid, data.normalMapType = this.normalMapType, data.normalScale = this.normalScale.toArray()), this.displacementMap && this.displacementMap.isTexture && (data.displacementMap = this.displacementMap.toJSON(meta).uuid, data.displacementScale = this.displacementScale, data.displacementBias = this.displacementBias), this.roughnessMap && this.roughnessMap.isTexture && (data.roughnessMap = this.roughnessMap.toJSON(meta).uuid), this.metalnessMap && this.metalnessMap.isTexture && (data.metalnessMap = this.metalnessMap.toJSON(meta).uuid), this.emissiveMap && this.emissiveMap.isTexture && (data.emissiveMap = this.emissiveMap.toJSON(meta).uuid), this.specularMap && this.specularMap.isTexture && (data.specularMap = this.specularMap.toJSON(meta).uuid), this.envMap && this.envMap.isTexture && (data.envMap = this.envMap.toJSON(meta).uuid, data.reflectivity = this.reflectivity, data.refractionRatio = this.refractionRatio, void 0 !== this.combine && (data.combine = this.combine), void 0 !== this.envMapIntensity && (data.envMapIntensity = this.envMapIntensity)), this.gradientMap && this.gradientMap.isTexture && (data.gradientMap = this.gradientMap.toJSON(meta).uuid), void 0 !== this.size && (data.size = this.size), void 0 !== this.sizeAttenuation && (data.sizeAttenuation = this.sizeAttenuation), 1 !== this.blending && (data.blending = this.blending), !0 === this.flatShading && (data.flatShading = this.flatShading), 0 !== this.side && (data.side = this.side), this.vertexColors && (data.vertexColors = !0), this.opacity < 1 && (data.opacity = this.opacity), !0 === this.transparent && (data.transparent = this.transparent), data.depthFunc = this.depthFunc, data.depthTest = this.depthTest, data.depthWrite = this.depthWrite, data.stencilWrite = this.stencilWrite, data.stencilWriteMask = this.stencilWriteMask, data.stencilFunc = this.stencilFunc, data.stencilRef = this.stencilRef, data.stencilFuncMask = this.stencilFuncMask, data.stencilFail = this.stencilFail, data.stencilZFail = this.stencilZFail, data.stencilZPass = this.stencilZPass, this.rotation && 0 !== this.rotation && (data.rotation = this.rotation), !0 === this.polygonOffset && (data.polygonOffset = !0), 0 !== this.polygonOffsetFactor && (data.polygonOffsetFactor = this.polygonOffsetFactor), 0 !== this.polygonOffsetUnits && (data.polygonOffsetUnits = this.polygonOffsetUnits), this.linewidth && 1 !== this.linewidth && (data.linewidth = this.linewidth), void 0 !== this.dashSize && (data.dashSize = this.dashSize), void 0 !== this.gapSize && (data.gapSize = this.gapSize), void 0 !== this.scale && (data.scale = this.scale), !0 === this.dithering && (data.dithering = !0), this.alphaTest > 0 && (data.alphaTest = this.alphaTest), !0 === this.premultipliedAlpha && (data.premultipliedAlpha = this.premultipliedAlpha), !0 === this.wireframe && (data.wireframe = this.wireframe), this.wireframeLinewidth > 1 && (data.wireframeLinewidth = this.wireframeLinewidth), 'round' !== this.wireframeLinecap && (data.wireframeLinecap = this.wireframeLinecap), 'round' !== this.wireframeLinejoin && (data.wireframeLinejoin = this.wireframeLinejoin), !0 === this.morphTargets && (data.morphTargets = !0), !0 === this.morphNormals && (data.morphNormals = !0), !0 === this.skinning && (data.skinning = !0), !1 === this.visible && (data.visible = !1), !1 === this.toneMapped && (data.toneMapped = !1), '{}' !== JSON.stringify(this.userData) && (data.userData = this.userData), isRoot) {
                var textures = extractFromCache(meta.textures), images = extractFromCache(meta.images);
                textures.length > 0 && (data.textures = textures), images.length > 0 && (data.images = images);
            }
            return data;
        },
        clone: function() {
            return new this.constructor().copy(this);
        },
        copy: function(source) {
            this.name = source.name, this.fog = source.fog, this.blending = source.blending, this.side = source.side, this.flatShading = source.flatShading, this.vertexColors = source.vertexColors, this.opacity = source.opacity, this.transparent = source.transparent, this.blendSrc = source.blendSrc, this.blendDst = source.blendDst, this.blendEquation = source.blendEquation, this.blendSrcAlpha = source.blendSrcAlpha, this.blendDstAlpha = source.blendDstAlpha, this.blendEquationAlpha = source.blendEquationAlpha, this.depthFunc = source.depthFunc, this.depthTest = source.depthTest, this.depthWrite = source.depthWrite, this.stencilWriteMask = source.stencilWriteMask, this.stencilFunc = source.stencilFunc, this.stencilRef = source.stencilRef, this.stencilFuncMask = source.stencilFuncMask, this.stencilFail = source.stencilFail, this.stencilZFail = source.stencilZFail, this.stencilZPass = source.stencilZPass, this.stencilWrite = source.stencilWrite;
            var srcPlanes = source.clippingPlanes, dstPlanes = null;
            if (null !== srcPlanes) {
                var n = srcPlanes.length;
                dstPlanes = Array(n);
                for(var i = 0; i !== n; ++i)dstPlanes[i] = srcPlanes[i].clone();
            }
            return this.clippingPlanes = dstPlanes, this.clipIntersection = source.clipIntersection, this.clipShadows = source.clipShadows, this.shadowSide = source.shadowSide, this.colorWrite = source.colorWrite, this.precision = source.precision, this.polygonOffset = source.polygonOffset, this.polygonOffsetFactor = source.polygonOffsetFactor, this.polygonOffsetUnits = source.polygonOffsetUnits, this.dithering = source.dithering, this.alphaTest = source.alphaTest, this.premultipliedAlpha = source.premultipliedAlpha, this.visible = source.visible, this.toneMapped = source.toneMapped, this.userData = JSON.parse(JSON.stringify(source.userData)), this;
        },
        dispose: function() {
            this.dispatchEvent({
                type: 'dispose'
            });
        }
    }), Object.defineProperty(Material.prototype, 'needsUpdate', {
        set: function(value) {
            !0 === value && this.version++;
        }
    }), MeshBasicMaterial.prototype = Object.create(Material.prototype), MeshBasicMaterial.prototype.constructor = MeshBasicMaterial, MeshBasicMaterial.prototype.isMeshBasicMaterial = !0, MeshBasicMaterial.prototype.copy = function(source) {
        return Material.prototype.copy.call(this, source), this.color.copy(source.color), this.map = source.map, this.lightMap = source.lightMap, this.lightMapIntensity = source.lightMapIntensity, this.aoMap = source.aoMap, this.aoMapIntensity = source.aoMapIntensity, this.specularMap = source.specularMap, this.alphaMap = source.alphaMap, this.envMap = source.envMap, this.combine = source.combine, this.reflectivity = source.reflectivity, this.refractionRatio = source.refractionRatio, this.wireframe = source.wireframe, this.wireframeLinewidth = source.wireframeLinewidth, this.wireframeLinecap = source.wireframeLinecap, this.wireframeLinejoin = source.wireframeLinejoin, this.skinning = source.skinning, this.morphTargets = source.morphTargets, this;
    };
    var _vector$3 = new Vector3(), _vector2$1 = new Vector2();
    function BufferAttribute(array, itemSize, normalized) {
        if (Array.isArray(array)) throw TypeError('THREE.BufferAttribute: array should be a Typed Array.');
        this.name = '', this.array = array, this.itemSize = itemSize, this.count = void 0 !== array ? array.length / itemSize : 0, this.normalized = !0 === normalized, this.usage = 35044, this.updateRange = {
            offset: 0,
            count: -1
        }, this.version = 0;
    }
    function Int8BufferAttribute(array, itemSize, normalized) {
        BufferAttribute.call(this, new Int8Array(array), itemSize, normalized);
    }
    function Uint8BufferAttribute(array, itemSize, normalized) {
        BufferAttribute.call(this, new Uint8Array(array), itemSize, normalized);
    }
    function Uint8ClampedBufferAttribute(array, itemSize, normalized) {
        BufferAttribute.call(this, new Uint8ClampedArray(array), itemSize, normalized);
    }
    function Int16BufferAttribute(array, itemSize, normalized) {
        BufferAttribute.call(this, new Int16Array(array), itemSize, normalized);
    }
    function Uint16BufferAttribute(array, itemSize, normalized) {
        BufferAttribute.call(this, new Uint16Array(array), itemSize, normalized);
    }
    function Int32BufferAttribute(array, itemSize, normalized) {
        BufferAttribute.call(this, new Int32Array(array), itemSize, normalized);
    }
    function Uint32BufferAttribute(array, itemSize, normalized) {
        BufferAttribute.call(this, new Uint32Array(array), itemSize, normalized);
    }
    function Float16BufferAttribute(array, itemSize, normalized) {
        BufferAttribute.call(this, new Uint16Array(array), itemSize, normalized);
    }
    function Float32BufferAttribute(array, itemSize, normalized) {
        BufferAttribute.call(this, new Float32Array(array), itemSize, normalized);
    }
    function Float64BufferAttribute(array, itemSize, normalized) {
        BufferAttribute.call(this, new Float64Array(array), itemSize, normalized);
    }
    Object.defineProperty(BufferAttribute.prototype, 'needsUpdate', {
        set: function(value) {
            !0 === value && this.version++;
        }
    }), Object.assign(BufferAttribute.prototype, {
        isBufferAttribute: !0,
        onUploadCallback: function() {},
        setUsage: function(value) {
            return this.usage = value, this;
        },
        copy: function(source) {
            return this.name = source.name, this.array = new source.array.constructor(source.array), this.itemSize = source.itemSize, this.count = source.count, this.normalized = source.normalized, this.usage = source.usage, this;
        },
        copyAt: function(index1, attribute, index2) {
            index1 *= this.itemSize, index2 *= attribute.itemSize;
            for(var i = 0, l = this.itemSize; i < l; i++)this.array[index1 + i] = attribute.array[index2 + i];
            return this;
        },
        copyArray: function(array) {
            return this.array.set(array), this;
        },
        copyColorsArray: function(colors) {
            for(var array = this.array, offset = 0, i = 0, l = colors.length; i < l; i++){
                var color = colors[i];
                void 0 === color && (console.warn('THREE.BufferAttribute.copyColorsArray(): color is undefined', i), color = new Color()), array[offset++] = color.r, array[offset++] = color.g, array[offset++] = color.b;
            }
            return this;
        },
        copyVector2sArray: function(vectors) {
            for(var array = this.array, offset = 0, i = 0, l = vectors.length; i < l; i++){
                var vector = vectors[i];
                void 0 === vector && (console.warn('THREE.BufferAttribute.copyVector2sArray(): vector is undefined', i), vector = new Vector2()), array[offset++] = vector.x, array[offset++] = vector.y;
            }
            return this;
        },
        copyVector3sArray: function(vectors) {
            for(var array = this.array, offset = 0, i = 0, l = vectors.length; i < l; i++){
                var vector = vectors[i];
                void 0 === vector && (console.warn('THREE.BufferAttribute.copyVector3sArray(): vector is undefined', i), vector = new Vector3()), array[offset++] = vector.x, array[offset++] = vector.y, array[offset++] = vector.z;
            }
            return this;
        },
        copyVector4sArray: function(vectors) {
            for(var array = this.array, offset = 0, i = 0, l = vectors.length; i < l; i++){
                var vector = vectors[i];
                void 0 === vector && (console.warn('THREE.BufferAttribute.copyVector4sArray(): vector is undefined', i), vector = new Vector4()), array[offset++] = vector.x, array[offset++] = vector.y, array[offset++] = vector.z, array[offset++] = vector.w;
            }
            return this;
        },
        applyMatrix3: function(m) {
            if (2 === this.itemSize) for(var i = 0, l = this.count; i < l; i++)_vector2$1.fromBufferAttribute(this, i), _vector2$1.applyMatrix3(m), this.setXY(i, _vector2$1.x, _vector2$1.y);
            else if (3 === this.itemSize) for(var _i = 0, _l = this.count; _i < _l; _i++)_vector$3.fromBufferAttribute(this, _i), _vector$3.applyMatrix3(m), this.setXYZ(_i, _vector$3.x, _vector$3.y, _vector$3.z);
            return this;
        },
        applyMatrix4: function(m) {
            for(var i = 0, l = this.count; i < l; i++)_vector$3.x = this.getX(i), _vector$3.y = this.getY(i), _vector$3.z = this.getZ(i), _vector$3.applyMatrix4(m), this.setXYZ(i, _vector$3.x, _vector$3.y, _vector$3.z);
            return this;
        },
        applyNormalMatrix: function(m) {
            for(var i = 0, l = this.count; i < l; i++)_vector$3.x = this.getX(i), _vector$3.y = this.getY(i), _vector$3.z = this.getZ(i), _vector$3.applyNormalMatrix(m), this.setXYZ(i, _vector$3.x, _vector$3.y, _vector$3.z);
            return this;
        },
        transformDirection: function(m) {
            for(var i = 0, l = this.count; i < l; i++)_vector$3.x = this.getX(i), _vector$3.y = this.getY(i), _vector$3.z = this.getZ(i), _vector$3.transformDirection(m), this.setXYZ(i, _vector$3.x, _vector$3.y, _vector$3.z);
            return this;
        },
        set: function(value, offset) {
            return void 0 === offset && (offset = 0), this.array.set(value, offset), this;
        },
        getX: function(index) {
            return this.array[index * this.itemSize];
        },
        setX: function(index, x) {
            return this.array[index * this.itemSize] = x, this;
        },
        getY: function(index) {
            return this.array[index * this.itemSize + 1];
        },
        setY: function(index, y) {
            return this.array[index * this.itemSize + 1] = y, this;
        },
        getZ: function(index) {
            return this.array[index * this.itemSize + 2];
        },
        setZ: function(index, z) {
            return this.array[index * this.itemSize + 2] = z, this;
        },
        getW: function(index) {
            return this.array[index * this.itemSize + 3];
        },
        setW: function(index, w) {
            return this.array[index * this.itemSize + 3] = w, this;
        },
        setXY: function(index, x, y) {
            return index *= this.itemSize, this.array[index + 0] = x, this.array[index + 1] = y, this;
        },
        setXYZ: function(index, x, y, z) {
            return index *= this.itemSize, this.array[index + 0] = x, this.array[index + 1] = y, this.array[index + 2] = z, this;
        },
        setXYZW: function(index, x, y, z, w) {
            return index *= this.itemSize, this.array[index + 0] = x, this.array[index + 1] = y, this.array[index + 2] = z, this.array[index + 3] = w, this;
        },
        onUpload: function(callback) {
            return this.onUploadCallback = callback, this;
        },
        clone: function() {
            return new this.constructor(this.array, this.itemSize).copy(this);
        },
        toJSON: function() {
            return {
                itemSize: this.itemSize,
                type: this.array.constructor.name,
                array: Array.prototype.slice.call(this.array),
                normalized: this.normalized
            };
        }
    }), Int8BufferAttribute.prototype = Object.create(BufferAttribute.prototype), Int8BufferAttribute.prototype.constructor = Int8BufferAttribute, Uint8BufferAttribute.prototype = Object.create(BufferAttribute.prototype), Uint8BufferAttribute.prototype.constructor = Uint8BufferAttribute, Uint8ClampedBufferAttribute.prototype = Object.create(BufferAttribute.prototype), Uint8ClampedBufferAttribute.prototype.constructor = Uint8ClampedBufferAttribute, Int16BufferAttribute.prototype = Object.create(BufferAttribute.prototype), Int16BufferAttribute.prototype.constructor = Int16BufferAttribute, Uint16BufferAttribute.prototype = Object.create(BufferAttribute.prototype), Uint16BufferAttribute.prototype.constructor = Uint16BufferAttribute, Int32BufferAttribute.prototype = Object.create(BufferAttribute.prototype), Int32BufferAttribute.prototype.constructor = Int32BufferAttribute, Uint32BufferAttribute.prototype = Object.create(BufferAttribute.prototype), Uint32BufferAttribute.prototype.constructor = Uint32BufferAttribute, Float16BufferAttribute.prototype = Object.create(BufferAttribute.prototype), Float16BufferAttribute.prototype.constructor = Float16BufferAttribute, Float16BufferAttribute.prototype.isFloat16BufferAttribute = !0, Float32BufferAttribute.prototype = Object.create(BufferAttribute.prototype), Float32BufferAttribute.prototype.constructor = Float32BufferAttribute, Float64BufferAttribute.prototype = Object.create(BufferAttribute.prototype), Float64BufferAttribute.prototype.constructor = Float64BufferAttribute;
    var DirectGeometry = function() {
        function DirectGeometry() {
            this.vertices = [], this.normals = [], this.colors = [], this.uvs = [], this.uvs2 = [], this.groups = [], this.morphTargets = {}, this.skinWeights = [], this.skinIndices = [], this.boundingBox = null, this.boundingSphere = null, this.verticesNeedUpdate = !1, this.normalsNeedUpdate = !1, this.colorsNeedUpdate = !1, this.uvsNeedUpdate = !1, this.groupsNeedUpdate = !1;
        }
        var _proto = DirectGeometry.prototype;
        return _proto.computeGroups = function(geometry) {
            var group, i, groups = [], materialIndex = void 0, faces = geometry.faces;
            for(i = 0; i < faces.length; i++){
                var face = faces[i];
                face.materialIndex !== materialIndex && (materialIndex = face.materialIndex, void 0 !== group && (group.count = 3 * i - group.start, groups.push(group)), group = {
                    start: 3 * i,
                    materialIndex: materialIndex
                });
            }
            void 0 !== group && (group.count = 3 * i - group.start, groups.push(group)), this.groups = groups;
        }, _proto.fromGeometry = function(geometry) {
            var morphTargetsPosition, morphTargetsNormal, faces = geometry.faces, vertices = geometry.vertices, faceVertexUvs = geometry.faceVertexUvs, hasFaceVertexUv = faceVertexUvs[0] && faceVertexUvs[0].length > 0, hasFaceVertexUv2 = faceVertexUvs[1] && faceVertexUvs[1].length > 0, morphTargets = geometry.morphTargets, morphTargetsLength = morphTargets.length;
            if (morphTargetsLength > 0) {
                morphTargetsPosition = [];
                for(var i = 0; i < morphTargetsLength; i++)morphTargetsPosition[i] = {
                    name: morphTargets[i].name,
                    data: []
                };
                this.morphTargets.position = morphTargetsPosition;
            }
            var morphNormals = geometry.morphNormals, morphNormalsLength = morphNormals.length;
            if (morphNormalsLength > 0) {
                morphTargetsNormal = [];
                for(var _i = 0; _i < morphNormalsLength; _i++)morphTargetsNormal[_i] = {
                    name: morphNormals[_i].name,
                    data: []
                };
                this.morphTargets.normal = morphTargetsNormal;
            }
            var skinIndices = geometry.skinIndices, skinWeights = geometry.skinWeights, hasSkinIndices = skinIndices.length === vertices.length, hasSkinWeights = skinWeights.length === vertices.length;
            vertices.length > 0 && 0 === faces.length && console.error('THREE.DirectGeometry: Faceless geometries are not supported.');
            for(var _i2 = 0; _i2 < faces.length; _i2++){
                var face = faces[_i2];
                this.vertices.push(vertices[face.a], vertices[face.b], vertices[face.c]);
                var vertexNormals = face.vertexNormals;
                if (3 === vertexNormals.length) this.normals.push(vertexNormals[0], vertexNormals[1], vertexNormals[2]);
                else {
                    var normal = face.normal;
                    this.normals.push(normal, normal, normal);
                }
                var vertexColors = face.vertexColors;
                if (3 === vertexColors.length) this.colors.push(vertexColors[0], vertexColors[1], vertexColors[2]);
                else {
                    var color = face.color;
                    this.colors.push(color, color, color);
                }
                if (!0 === hasFaceVertexUv) {
                    var vertexUvs = faceVertexUvs[0][_i2];
                    void 0 !== vertexUvs ? this.uvs.push(vertexUvs[0], vertexUvs[1], vertexUvs[2]) : (console.warn('THREE.DirectGeometry.fromGeometry(): Undefined vertexUv ', _i2), this.uvs.push(new Vector2(), new Vector2(), new Vector2()));
                }
                if (!0 === hasFaceVertexUv2) {
                    var _vertexUvs = faceVertexUvs[1][_i2];
                    void 0 !== _vertexUvs ? this.uvs2.push(_vertexUvs[0], _vertexUvs[1], _vertexUvs[2]) : (console.warn('THREE.DirectGeometry.fromGeometry(): Undefined vertexUv2 ', _i2), this.uvs2.push(new Vector2(), new Vector2(), new Vector2()));
                }
                for(var j = 0; j < morphTargetsLength; j++){
                    var morphTarget = morphTargets[j].vertices;
                    morphTargetsPosition[j].data.push(morphTarget[face.a], morphTarget[face.b], morphTarget[face.c]);
                }
                for(var _j = 0; _j < morphNormalsLength; _j++){
                    var morphNormal = morphNormals[_j].vertexNormals[_i2];
                    morphTargetsNormal[_j].data.push(morphNormal.a, morphNormal.b, morphNormal.c);
                }
                hasSkinIndices && this.skinIndices.push(skinIndices[face.a], skinIndices[face.b], skinIndices[face.c]), hasSkinWeights && this.skinWeights.push(skinWeights[face.a], skinWeights[face.b], skinWeights[face.c]);
            }
            return this.computeGroups(geometry), this.verticesNeedUpdate = geometry.verticesNeedUpdate, this.normalsNeedUpdate = geometry.normalsNeedUpdate, this.colorsNeedUpdate = geometry.colorsNeedUpdate, this.uvsNeedUpdate = geometry.uvsNeedUpdate, this.groupsNeedUpdate = geometry.groupsNeedUpdate, null !== geometry.boundingSphere && (this.boundingSphere = geometry.boundingSphere.clone()), null !== geometry.boundingBox && (this.boundingBox = geometry.boundingBox.clone()), this;
        }, DirectGeometry;
    }();
    function arrayMax(array) {
        if (0 === array.length) return -1 / 0;
        for(var max = array[0], i = 1, l = array.length; i < l; ++i)array[i] > max && (max = array[i]);
        return max;
    }
    var TYPED_ARRAYS = {
        Int8Array: Int8Array,
        Uint8Array: Uint8Array,
        Uint8ClampedArray: 'undefined' != typeof Uint8ClampedArray ? Uint8ClampedArray : Uint8Array,
        Int16Array: Int16Array,
        Uint16Array: Uint16Array,
        Int32Array: Int32Array,
        Uint32Array: Uint32Array,
        Float32Array: Float32Array,
        Float64Array: Float64Array
    };
    function getTypedArray(type, buffer) {
        return new TYPED_ARRAYS[type](buffer);
    }
    var _bufferGeometryId = 1, _m1$2 = new Matrix4(), _obj = new Object3D(), _offset = new Vector3(), _box$2 = new Box3(), _boxMorphTargets = new Box3(), _vector$4 = new Vector3();
    function BufferGeometry() {
        Object.defineProperty(this, 'id', {
            value: _bufferGeometryId += 2
        }), this.uuid = MathUtils.generateUUID(), this.name = '', this.type = 'BufferGeometry', this.index = null, this.attributes = {}, this.morphAttributes = {}, this.morphTargetsRelative = !1, this.groups = [], this.boundingBox = null, this.boundingSphere = null, this.drawRange = {
            start: 0,
            count: 1 / 0
        }, this.userData = {};
    }
    BufferGeometry.prototype = Object.assign(Object.create(EventDispatcher.prototype), {
        constructor: BufferGeometry,
        isBufferGeometry: !0,
        getIndex: function() {
            return this.index;
        },
        setIndex: function(index) {
            return Array.isArray(index) ? this.index = new (arrayMax(index) > 65535 ? Uint32BufferAttribute : Uint16BufferAttribute)(index, 1) : this.index = index, this;
        },
        getAttribute: function(name) {
            return this.attributes[name];
        },
        setAttribute: function(name, attribute) {
            return this.attributes[name] = attribute, this;
        },
        deleteAttribute: function(name) {
            return delete this.attributes[name], this;
        },
        hasAttribute: function(name) {
            return void 0 !== this.attributes[name];
        },
        addGroup: function(start, count, materialIndex) {
            void 0 === materialIndex && (materialIndex = 0), this.groups.push({
                start: start,
                count: count,
                materialIndex: materialIndex
            });
        },
        clearGroups: function() {
            this.groups = [];
        },
        setDrawRange: function(start, count) {
            this.drawRange.start = start, this.drawRange.count = count;
        },
        applyMatrix4: function(matrix) {
            var position = this.attributes.position;
            void 0 !== position && (position.applyMatrix4(matrix), position.needsUpdate = !0);
            var normal = this.attributes.normal;
            if (void 0 !== normal) {
                var normalMatrix = new Matrix3().getNormalMatrix(matrix);
                normal.applyNormalMatrix(normalMatrix), normal.needsUpdate = !0;
            }
            var tangent = this.attributes.tangent;
            return void 0 !== tangent && (tangent.transformDirection(matrix), tangent.needsUpdate = !0), null !== this.boundingBox && this.computeBoundingBox(), null !== this.boundingSphere && this.computeBoundingSphere(), this;
        },
        rotateX: function(angle) {
            return _m1$2.makeRotationX(angle), this.applyMatrix4(_m1$2), this;
        },
        rotateY: function(angle) {
            return _m1$2.makeRotationY(angle), this.applyMatrix4(_m1$2), this;
        },
        rotateZ: function(angle) {
            return _m1$2.makeRotationZ(angle), this.applyMatrix4(_m1$2), this;
        },
        translate: function(x, y, z) {
            return _m1$2.makeTranslation(x, y, z), this.applyMatrix4(_m1$2), this;
        },
        scale: function(x, y, z) {
            return _m1$2.makeScale(x, y, z), this.applyMatrix4(_m1$2), this;
        },
        lookAt: function(vector) {
            return _obj.lookAt(vector), _obj.updateMatrix(), this.applyMatrix4(_obj.matrix), this;
        },
        center: function() {
            return this.computeBoundingBox(), this.boundingBox.getCenter(_offset).negate(), this.translate(_offset.x, _offset.y, _offset.z), this;
        },
        setFromObject: function(object) {
            var geometry = object.geometry;
            if (object.isPoints || object.isLine) {
                var positions = new Float32BufferAttribute(3 * geometry.vertices.length, 3), colors = new Float32BufferAttribute(3 * geometry.colors.length, 3);
                if (this.setAttribute('position', positions.copyVector3sArray(geometry.vertices)), this.setAttribute('color', colors.copyColorsArray(geometry.colors)), geometry.lineDistances && geometry.lineDistances.length === geometry.vertices.length) {
                    var lineDistances = new Float32BufferAttribute(geometry.lineDistances.length, 1);
                    this.setAttribute('lineDistance', lineDistances.copyArray(geometry.lineDistances));
                }
                null !== geometry.boundingSphere && (this.boundingSphere = geometry.boundingSphere.clone()), null !== geometry.boundingBox && (this.boundingBox = geometry.boundingBox.clone());
            } else object.isMesh && geometry && geometry.isGeometry && this.fromGeometry(geometry);
            return this;
        },
        setFromPoints: function(points) {
            for(var position = [], i = 0, l = points.length; i < l; i++){
                var point = points[i];
                position.push(point.x, point.y, point.z || 0);
            }
            return this.setAttribute('position', new Float32BufferAttribute(position, 3)), this;
        },
        updateFromObject: function(object) {
            var geometry = object.geometry;
            if (object.isMesh) {
                var direct = geometry.__directGeometry;
                if (!0 === geometry.elementsNeedUpdate && (direct = void 0, geometry.elementsNeedUpdate = !1), void 0 === direct) return this.fromGeometry(geometry);
                direct.verticesNeedUpdate = geometry.verticesNeedUpdate, direct.normalsNeedUpdate = geometry.normalsNeedUpdate, direct.colorsNeedUpdate = geometry.colorsNeedUpdate, direct.uvsNeedUpdate = geometry.uvsNeedUpdate, direct.groupsNeedUpdate = geometry.groupsNeedUpdate, geometry.verticesNeedUpdate = !1, geometry.normalsNeedUpdate = !1, geometry.colorsNeedUpdate = !1, geometry.uvsNeedUpdate = !1, geometry.groupsNeedUpdate = !1, geometry = direct;
            }
            if (!0 === geometry.verticesNeedUpdate) {
                var attribute = this.attributes.position;
                void 0 !== attribute && (attribute.copyVector3sArray(geometry.vertices), attribute.needsUpdate = !0), geometry.verticesNeedUpdate = !1;
            }
            if (!0 === geometry.normalsNeedUpdate) {
                var _attribute = this.attributes.normal;
                void 0 !== _attribute && (_attribute.copyVector3sArray(geometry.normals), _attribute.needsUpdate = !0), geometry.normalsNeedUpdate = !1;
            }
            if (!0 === geometry.colorsNeedUpdate) {
                var _attribute2 = this.attributes.color;
                void 0 !== _attribute2 && (_attribute2.copyColorsArray(geometry.colors), _attribute2.needsUpdate = !0), geometry.colorsNeedUpdate = !1;
            }
            if (geometry.uvsNeedUpdate) {
                var _attribute3 = this.attributes.uv;
                void 0 !== _attribute3 && (_attribute3.copyVector2sArray(geometry.uvs), _attribute3.needsUpdate = !0), geometry.uvsNeedUpdate = !1;
            }
            if (geometry.lineDistancesNeedUpdate) {
                var _attribute4 = this.attributes.lineDistance;
                void 0 !== _attribute4 && (_attribute4.copyArray(geometry.lineDistances), _attribute4.needsUpdate = !0), geometry.lineDistancesNeedUpdate = !1;
            }
            return geometry.groupsNeedUpdate && (geometry.computeGroups(object.geometry), this.groups = geometry.groups, geometry.groupsNeedUpdate = !1), this;
        },
        fromGeometry: function(geometry) {
            return geometry.__directGeometry = new DirectGeometry().fromGeometry(geometry), this.fromDirectGeometry(geometry.__directGeometry);
        },
        fromDirectGeometry: function(geometry) {
            var positions = new Float32Array(3 * geometry.vertices.length);
            if (this.setAttribute('position', new BufferAttribute(positions, 3).copyVector3sArray(geometry.vertices)), geometry.normals.length > 0) {
                var normals = new Float32Array(3 * geometry.normals.length);
                this.setAttribute('normal', new BufferAttribute(normals, 3).copyVector3sArray(geometry.normals));
            }
            if (geometry.colors.length > 0) {
                var colors = new Float32Array(3 * geometry.colors.length);
                this.setAttribute('color', new BufferAttribute(colors, 3).copyColorsArray(geometry.colors));
            }
            if (geometry.uvs.length > 0) {
                var uvs = new Float32Array(2 * geometry.uvs.length);
                this.setAttribute('uv', new BufferAttribute(uvs, 2).copyVector2sArray(geometry.uvs));
            }
            if (geometry.uvs2.length > 0) {
                var uvs2 = new Float32Array(2 * geometry.uvs2.length);
                this.setAttribute('uv2', new BufferAttribute(uvs2, 2).copyVector2sArray(geometry.uvs2));
            }
            for(var name in this.groups = geometry.groups, geometry.morphTargets){
                for(var array = [], morphTargets = geometry.morphTargets[name], i = 0, l = morphTargets.length; i < l; i++){
                    var morphTarget = morphTargets[i], attribute = new Float32BufferAttribute(3 * morphTarget.data.length, 3);
                    attribute.name = morphTarget.name, array.push(attribute.copyVector3sArray(morphTarget.data));
                }
                this.morphAttributes[name] = array;
            }
            if (geometry.skinIndices.length > 0) {
                var skinIndices = new Float32BufferAttribute(4 * geometry.skinIndices.length, 4);
                this.setAttribute('skinIndex', skinIndices.copyVector4sArray(geometry.skinIndices));
            }
            if (geometry.skinWeights.length > 0) {
                var skinWeights = new Float32BufferAttribute(4 * geometry.skinWeights.length, 4);
                this.setAttribute('skinWeight', skinWeights.copyVector4sArray(geometry.skinWeights));
            }
            return null !== geometry.boundingSphere && (this.boundingSphere = geometry.boundingSphere.clone()), null !== geometry.boundingBox && (this.boundingBox = geometry.boundingBox.clone()), this;
        },
        computeBoundingBox: function() {
            null === this.boundingBox && (this.boundingBox = new Box3());
            var position = this.attributes.position, morphAttributesPosition = this.morphAttributes.position;
            if (position && position.isGLBufferAttribute) {
                console.error('THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box. Alternatively set "mesh.frustumCulled" to "false".', this), this.boundingBox.set(new Vector3(-1 / 0, -1 / 0, -1 / 0), new Vector3(Infinity, Infinity, Infinity));
                return;
            }
            if (void 0 !== position) {
                if (this.boundingBox.setFromBufferAttribute(position), morphAttributesPosition) for(var i = 0, il = morphAttributesPosition.length; i < il; i++){
                    var morphAttribute = morphAttributesPosition[i];
                    _box$2.setFromBufferAttribute(morphAttribute), this.morphTargetsRelative ? (_vector$4.addVectors(this.boundingBox.min, _box$2.min), this.boundingBox.expandByPoint(_vector$4), _vector$4.addVectors(this.boundingBox.max, _box$2.max), this.boundingBox.expandByPoint(_vector$4)) : (this.boundingBox.expandByPoint(_box$2.min), this.boundingBox.expandByPoint(_box$2.max));
                }
            } else this.boundingBox.makeEmpty();
            (isNaN(this.boundingBox.min.x) || isNaN(this.boundingBox.min.y) || isNaN(this.boundingBox.min.z)) && console.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.', this);
        },
        computeBoundingSphere: function() {
            null === this.boundingSphere && (this.boundingSphere = new Sphere());
            var position = this.attributes.position, morphAttributesPosition = this.morphAttributes.position;
            if (position && position.isGLBufferAttribute) {
                console.error('THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere. Alternatively set "mesh.frustumCulled" to "false".', this), this.boundingSphere.set(new Vector3(), 1 / 0);
                return;
            }
            if (position) {
                var center = this.boundingSphere.center;
                if (_box$2.setFromBufferAttribute(position), morphAttributesPosition) for(var i = 0, il = morphAttributesPosition.length; i < il; i++){
                    var morphAttribute = morphAttributesPosition[i];
                    _boxMorphTargets.setFromBufferAttribute(morphAttribute), this.morphTargetsRelative ? (_vector$4.addVectors(_box$2.min, _boxMorphTargets.min), _box$2.expandByPoint(_vector$4), _vector$4.addVectors(_box$2.max, _boxMorphTargets.max), _box$2.expandByPoint(_vector$4)) : (_box$2.expandByPoint(_boxMorphTargets.min), _box$2.expandByPoint(_boxMorphTargets.max));
                }
                _box$2.getCenter(center);
                for(var maxRadiusSq = 0, _i = 0, _il = position.count; _i < _il; _i++)_vector$4.fromBufferAttribute(position, _i), maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(_vector$4));
                if (morphAttributesPosition) for(var _i2 = 0, _il2 = morphAttributesPosition.length; _i2 < _il2; _i2++)for(var _morphAttribute = morphAttributesPosition[_i2], morphTargetsRelative = this.morphTargetsRelative, j = 0, jl = _morphAttribute.count; j < jl; j++)_vector$4.fromBufferAttribute(_morphAttribute, j), morphTargetsRelative && (_offset.fromBufferAttribute(position, j), _vector$4.add(_offset)), maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(_vector$4));
                this.boundingSphere.radius = Math.sqrt(maxRadiusSq), isNaN(this.boundingSphere.radius) && console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.', this);
            }
        },
        computeFaceNormals: function() {},
        computeVertexNormals: function() {
            var index = this.index, positionAttribute = this.getAttribute('position');
            if (void 0 !== positionAttribute) {
                var normalAttribute = this.getAttribute('normal');
                if (void 0 === normalAttribute) normalAttribute = new BufferAttribute(new Float32Array(3 * positionAttribute.count), 3), this.setAttribute('normal', normalAttribute);
                else for(var i = 0, il = normalAttribute.count; i < il; i++)normalAttribute.setXYZ(i, 0, 0, 0);
                var pA = new Vector3(), pB = new Vector3(), pC = new Vector3(), nA = new Vector3(), nB = new Vector3(), nC = new Vector3(), cb = new Vector3(), ab = new Vector3();
                if (index) for(var _i3 = 0, _il3 = index.count; _i3 < _il3; _i3 += 3){
                    var vA = index.getX(_i3 + 0), vB = index.getX(_i3 + 1), vC = index.getX(_i3 + 2);
                    pA.fromBufferAttribute(positionAttribute, vA), pB.fromBufferAttribute(positionAttribute, vB), pC.fromBufferAttribute(positionAttribute, vC), cb.subVectors(pC, pB), ab.subVectors(pA, pB), cb.cross(ab), nA.fromBufferAttribute(normalAttribute, vA), nB.fromBufferAttribute(normalAttribute, vB), nC.fromBufferAttribute(normalAttribute, vC), nA.add(cb), nB.add(cb), nC.add(cb), normalAttribute.setXYZ(vA, nA.x, nA.y, nA.z), normalAttribute.setXYZ(vB, nB.x, nB.y, nB.z), normalAttribute.setXYZ(vC, nC.x, nC.y, nC.z);
                }
                else for(var _i4 = 0, _il4 = positionAttribute.count; _i4 < _il4; _i4 += 3)pA.fromBufferAttribute(positionAttribute, _i4 + 0), pB.fromBufferAttribute(positionAttribute, _i4 + 1), pC.fromBufferAttribute(positionAttribute, _i4 + 2), cb.subVectors(pC, pB), ab.subVectors(pA, pB), cb.cross(ab), normalAttribute.setXYZ(_i4 + 0, cb.x, cb.y, cb.z), normalAttribute.setXYZ(_i4 + 1, cb.x, cb.y, cb.z), normalAttribute.setXYZ(_i4 + 2, cb.x, cb.y, cb.z);
                this.normalizeNormals(), normalAttribute.needsUpdate = !0;
            }
        },
        merge: function(geometry, offset) {
            if (!(geometry && geometry.isBufferGeometry)) {
                console.error('THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.', geometry);
                return;
            }
            void 0 === offset && (offset = 0, console.warn("THREE.BufferGeometry.merge(): Overwriting original geometry, starting at offset=0. Use BufferGeometryUtils.mergeBufferGeometries() for lossless merge."));
            var attributes = this.attributes;
            for(var key in attributes)if (void 0 !== geometry.attributes[key]) for(var attributeArray1 = attributes[key].array, attribute2 = geometry.attributes[key], attributeArray2 = attribute2.array, attributeOffset = attribute2.itemSize * offset, length = Math.min(attributeArray2.length, attributeArray1.length - attributeOffset), i = 0, j = attributeOffset; i < length; i++, j++)attributeArray1[j] = attributeArray2[i];
            return this;
        },
        normalizeNormals: function() {
            for(var normals = this.attributes.normal, i = 0, il = normals.count; i < il; i++)_vector$4.fromBufferAttribute(normals, i), _vector$4.normalize(), normals.setXYZ(i, _vector$4.x, _vector$4.y, _vector$4.z);
        },
        toNonIndexed: function() {
            function convertBufferAttribute(attribute, indices) {
                for(var array = attribute.array, itemSize = attribute.itemSize, normalized = attribute.normalized, array2 = new array.constructor(indices.length * itemSize), index = 0, index2 = 0, i = 0, l = indices.length; i < l; i++){
                    index = indices[i] * itemSize;
                    for(var j = 0; j < itemSize; j++)array2[index2++] = array[index++];
                }
                return new BufferAttribute(array2, itemSize, normalized);
            }
            if (null === this.index) return console.warn('THREE.BufferGeometry.toNonIndexed(): Geometry is already non-indexed.'), this;
            var geometry2 = new BufferGeometry(), indices = this.index.array, attributes = this.attributes;
            for(var name in attributes){
                var newAttribute = convertBufferAttribute(attributes[name], indices);
                geometry2.setAttribute(name, newAttribute);
            }
            var morphAttributes = this.morphAttributes;
            for(var _name in morphAttributes){
                for(var morphArray = [], morphAttribute = morphAttributes[_name], i = 0, il = morphAttribute.length; i < il; i++){
                    var _newAttribute = convertBufferAttribute(morphAttribute[i], indices);
                    morphArray.push(_newAttribute);
                }
                geometry2.morphAttributes[_name] = morphArray;
            }
            geometry2.morphTargetsRelative = this.morphTargetsRelative;
            for(var groups = this.groups, _i5 = 0, l = groups.length; _i5 < l; _i5++){
                var group = groups[_i5];
                geometry2.addGroup(group.start, group.count, group.materialIndex);
            }
            return geometry2;
        },
        toJSON: function() {
            var data = {
                metadata: {
                    version: 4.5,
                    type: 'BufferGeometry',
                    generator: 'BufferGeometry.toJSON'
                }
            };
            if (data.uuid = this.uuid, data.type = this.type, '' !== this.name && (data.name = this.name), Object.keys(this.userData).length > 0 && (data.userData = this.userData), void 0 !== this.parameters) {
                var parameters = this.parameters;
                for(var key in parameters)void 0 !== parameters[key] && (data[key] = parameters[key]);
                return data;
            }
            data.data = {
                attributes: {}
            };
            var index = this.index;
            null !== index && (data.data.index = {
                type: index.array.constructor.name,
                array: Array.prototype.slice.call(index.array)
            });
            var attributes = this.attributes;
            for(var _key in attributes){
                var attribute = attributes[_key], attributeData = attribute.toJSON(data.data);
                '' !== attribute.name && (attributeData.name = attribute.name), data.data.attributes[_key] = attributeData;
            }
            var morphAttributes = {}, hasMorphAttributes = !1;
            for(var _key2 in this.morphAttributes){
                for(var attributeArray = this.morphAttributes[_key2], array = [], i = 0, il = attributeArray.length; i < il; i++){
                    var _attribute6 = attributeArray[i], _attributeData = _attribute6.toJSON(data.data);
                    '' !== _attribute6.name && (_attributeData.name = _attribute6.name), array.push(_attributeData);
                }
                array.length > 0 && (morphAttributes[_key2] = array, hasMorphAttributes = !0);
            }
            hasMorphAttributes && (data.data.morphAttributes = morphAttributes, data.data.morphTargetsRelative = this.morphTargetsRelative);
            var groups = this.groups;
            groups.length > 0 && (data.data.groups = JSON.parse(JSON.stringify(groups)));
            var boundingSphere = this.boundingSphere;
            return null !== boundingSphere && (data.data.boundingSphere = {
                center: boundingSphere.center.toArray(),
                radius: boundingSphere.radius
            }), data;
        },
        clone: function() {
            return new BufferGeometry().copy(this);
        },
        copy: function(source) {
            this.index = null, this.attributes = {}, this.morphAttributes = {}, this.groups = [], this.boundingBox = null, this.boundingSphere = null;
            var data = {};
            this.name = source.name;
            var index = source.index;
            null !== index && this.setIndex(index.clone(data));
            var attributes = source.attributes;
            for(var name in attributes){
                var attribute = attributes[name];
                this.setAttribute(name, attribute.clone(data));
            }
            var morphAttributes = source.morphAttributes;
            for(var _name2 in morphAttributes){
                for(var array = [], morphAttribute = morphAttributes[_name2], i = 0, l = morphAttribute.length; i < l; i++)array.push(morphAttribute[i].clone(data));
                this.morphAttributes[_name2] = array;
            }
            this.morphTargetsRelative = source.morphTargetsRelative;
            for(var groups = source.groups, _i6 = 0, _l = groups.length; _i6 < _l; _i6++){
                var group = groups[_i6];
                this.addGroup(group.start, group.count, group.materialIndex);
            }
            var boundingBox = source.boundingBox;
            null !== boundingBox && (this.boundingBox = boundingBox.clone());
            var boundingSphere = source.boundingSphere;
            return null !== boundingSphere && (this.boundingSphere = boundingSphere.clone()), this.drawRange.start = source.drawRange.start, this.drawRange.count = source.drawRange.count, this.userData = source.userData, this;
        },
        dispose: function() {
            this.dispatchEvent({
                type: 'dispose'
            });
        }
    });
    var _inverseMatrix = new Matrix4(), _ray = new Ray(), _sphere = new Sphere(), _vA = new Vector3(), _vB = new Vector3(), _vC = new Vector3(), _tempA = new Vector3(), _tempB = new Vector3(), _tempC = new Vector3(), _morphA = new Vector3(), _morphB = new Vector3(), _morphC = new Vector3(), _uvA = new Vector2(), _uvB = new Vector2(), _uvC = new Vector2(), _intersectionPoint = new Vector3(), _intersectionPointWorld = new Vector3();
    function Mesh(geometry, material) {
        void 0 === geometry && (geometry = new BufferGeometry()), void 0 === material && (material = new MeshBasicMaterial()), Object3D.call(this), this.type = 'Mesh', this.geometry = geometry, this.material = material, this.updateMorphTargets();
    }
    function checkIntersection(object, material, raycaster, ray, pA, pB, pC, point) {
        if (null === (1 === material.side ? ray.intersectTriangle(pC, pB, pA, !0, point) : ray.intersectTriangle(pA, pB, pC, 2 !== material.side, point))) return null;
        _intersectionPointWorld.copy(point), _intersectionPointWorld.applyMatrix4(object.matrixWorld);
        var distance = raycaster.ray.origin.distanceTo(_intersectionPointWorld);
        return distance < raycaster.near || distance > raycaster.far ? null : {
            distance: distance,
            point: _intersectionPointWorld.clone(),
            object: object
        };
    }
    function checkBufferGeometryIntersection(object, material, raycaster, ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c) {
        _vA.fromBufferAttribute(position, a), _vB.fromBufferAttribute(position, b), _vC.fromBufferAttribute(position, c);
        var morphInfluences = object.morphTargetInfluences;
        if (material.morphTargets && morphPosition && morphInfluences) {
            _morphA.set(0, 0, 0), _morphB.set(0, 0, 0), _morphC.set(0, 0, 0);
            for(var i = 0, il = morphPosition.length; i < il; i++){
                var influence = morphInfluences[i], morphAttribute = morphPosition[i];
                0 !== influence && (_tempA.fromBufferAttribute(morphAttribute, a), _tempB.fromBufferAttribute(morphAttribute, b), _tempC.fromBufferAttribute(morphAttribute, c), morphTargetsRelative ? (_morphA.addScaledVector(_tempA, influence), _morphB.addScaledVector(_tempB, influence), _morphC.addScaledVector(_tempC, influence)) : (_morphA.addScaledVector(_tempA.sub(_vA), influence), _morphB.addScaledVector(_tempB.sub(_vB), influence), _morphC.addScaledVector(_tempC.sub(_vC), influence)));
            }
            _vA.add(_morphA), _vB.add(_morphB), _vC.add(_morphC);
        }
        object.isSkinnedMesh && (object.boneTransform(a, _vA), object.boneTransform(b, _vB), object.boneTransform(c, _vC));
        var intersection = checkIntersection(object, material, raycaster, ray, _vA, _vB, _vC, _intersectionPoint);
        if (intersection) {
            uv && (_uvA.fromBufferAttribute(uv, a), _uvB.fromBufferAttribute(uv, b), _uvC.fromBufferAttribute(uv, c), intersection.uv = Triangle.getUV(_intersectionPoint, _vA, _vB, _vC, _uvA, _uvB, _uvC, new Vector2())), uv2 && (_uvA.fromBufferAttribute(uv2, a), _uvB.fromBufferAttribute(uv2, b), _uvC.fromBufferAttribute(uv2, c), intersection.uv2 = Triangle.getUV(_intersectionPoint, _vA, _vB, _vC, _uvA, _uvB, _uvC, new Vector2()));
            var face = new Face3(a, b, c);
            Triangle.getNormal(_vA, _vB, _vC, face.normal), intersection.face = face;
        }
        return intersection;
    }
    Mesh.prototype = Object.assign(Object.create(Object3D.prototype), {
        constructor: Mesh,
        isMesh: !0,
        copy: function(source) {
            return Object3D.prototype.copy.call(this, source), void 0 !== source.morphTargetInfluences && (this.morphTargetInfluences = source.morphTargetInfluences.slice()), void 0 !== source.morphTargetDictionary && (this.morphTargetDictionary = Object.assign({}, source.morphTargetDictionary)), this.material = source.material, this.geometry = source.geometry, this;
        },
        updateMorphTargets: function() {
            var geometry = this.geometry;
            if (geometry.isBufferGeometry) {
                var morphAttributes = geometry.morphAttributes, keys = Object.keys(morphAttributes);
                if (keys.length > 0) {
                    var morphAttribute = morphAttributes[keys[0]];
                    if (void 0 !== morphAttribute) {
                        this.morphTargetInfluences = [], this.morphTargetDictionary = {};
                        for(var m = 0, ml = morphAttribute.length; m < ml; m++){
                            var name = morphAttribute[m].name || String(m);
                            this.morphTargetInfluences.push(0), this.morphTargetDictionary[name] = m;
                        }
                    }
                }
            } else {
                var morphTargets = geometry.morphTargets;
                void 0 !== morphTargets && morphTargets.length > 0 && console.error('THREE.Mesh.updateMorphTargets() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.');
            }
        },
        raycast: function(raycaster, intersects) {
            var geometry = this.geometry, material = this.material, matrixWorld = this.matrixWorld;
            if (void 0 !== material && (null === geometry.boundingSphere && geometry.computeBoundingSphere(), _sphere.copy(geometry.boundingSphere), _sphere.applyMatrix4(matrixWorld), !1 !== raycaster.ray.intersectsSphere(_sphere))) {
                if (_inverseMatrix.copy(matrixWorld).invert(), _ray.copy(raycaster.ray).applyMatrix4(_inverseMatrix), null !== geometry.boundingBox && !1 === _ray.intersectsBox(geometry.boundingBox)) return;
                if (geometry.isBufferGeometry) {
                    var index = geometry.index, position = geometry.attributes.position, morphPosition = geometry.morphAttributes.position, morphTargetsRelative = geometry.morphTargetsRelative, uv = geometry.attributes.uv, uv2 = geometry.attributes.uv2, groups = geometry.groups, drawRange = geometry.drawRange;
                    if (null !== index) {
                        if (Array.isArray(material)) for(var i = 0, il = groups.length; i < il; i++)for(var group = groups[i], groupMaterial = material[group.materialIndex], start = Math.max(group.start, drawRange.start), end = Math.min(group.start + group.count, drawRange.start + drawRange.count), j = start; j < end; j += 3)(intersection = checkBufferGeometryIntersection(this, groupMaterial, raycaster, _ray, position, morphPosition, morphTargetsRelative, uv, uv2, index.getX(j), index.getX(j + 1), index.getX(j + 2))) && (intersection.faceIndex = Math.floor(j / 3), intersection.face.materialIndex = group.materialIndex, intersects.push(intersection));
                        else for(var _start = Math.max(0, drawRange.start), _end = Math.min(index.count, drawRange.start + drawRange.count), _i = _start; _i < _end; _i += 3)(intersection = checkBufferGeometryIntersection(this, material, raycaster, _ray, position, morphPosition, morphTargetsRelative, uv, uv2, index.getX(_i), index.getX(_i + 1), index.getX(_i + 2))) && (intersection.faceIndex = Math.floor(_i / 3), intersects.push(intersection));
                    } else if (void 0 !== position) {
                        if (Array.isArray(material)) for(var _i2 = 0, _il2 = groups.length; _i2 < _il2; _i2++)for(var _group = groups[_i2], _groupMaterial = material[_group.materialIndex], _start2 = Math.max(_group.start, drawRange.start), _end2 = Math.min(_group.start + _group.count, drawRange.start + drawRange.count), _j = _start2; _j < _end2; _j += 3)(intersection = checkBufferGeometryIntersection(this, _groupMaterial, raycaster, _ray, position, morphPosition, morphTargetsRelative, uv, uv2, _j, _j + 1, _j + 2)) && (intersection.faceIndex = Math.floor(_j / 3), intersection.face.materialIndex = _group.materialIndex, intersects.push(intersection));
                        else for(var _start3 = Math.max(0, drawRange.start), _end3 = Math.min(position.count, drawRange.start + drawRange.count), _i3 = _start3; _i3 < _end3; _i3 += 3)(intersection = checkBufferGeometryIntersection(this, material, raycaster, _ray, position, morphPosition, morphTargetsRelative, uv, uv2, _i3, _i3 + 1, _i3 + 2)) && (intersection.faceIndex = Math.floor(_i3 / 3), intersects.push(intersection));
                    }
                } else if (geometry.isGeometry) {
                    var intersection, uvs, isMultiMaterial = Array.isArray(material), vertices = geometry.vertices, faces = geometry.faces, faceVertexUvs = geometry.faceVertexUvs[0];
                    faceVertexUvs.length > 0 && (uvs = faceVertexUvs);
                    for(var f = 0, fl = faces.length; f < fl; f++){
                        var face = faces[f], faceMaterial = isMultiMaterial ? material[face.materialIndex] : material;
                        if (void 0 !== faceMaterial) {
                            var fvA = vertices[face.a], fvB = vertices[face.b], fvC = vertices[face.c];
                            if (intersection = checkIntersection(this, faceMaterial, raycaster, _ray, fvA, fvB, fvC, _intersectionPoint)) {
                                if (uvs && uvs[f]) {
                                    var uvs_f = uvs[f];
                                    _uvA.copy(uvs_f[0]), _uvB.copy(uvs_f[1]), _uvC.copy(uvs_f[2]), intersection.uv = Triangle.getUV(_intersectionPoint, fvA, fvB, fvC, _uvA, _uvB, _uvC, new Vector2());
                                }
                                intersection.face = face, intersection.faceIndex = f, intersects.push(intersection);
                            }
                        }
                    }
                }
            }
        }
    });
    var BoxBufferGeometry = function(_BufferGeometry) {
        function BoxBufferGeometry(width, height, depth, widthSegments, heightSegments, depthSegments) {
            void 0 === width && (width = 1), void 0 === height && (height = 1), void 0 === depth && (depth = 1), void 0 === widthSegments && (widthSegments = 1), void 0 === heightSegments && (heightSegments = 1), void 0 === depthSegments && (depthSegments = 1), (_this = _BufferGeometry.call(this) || this).type = 'BoxBufferGeometry', _this.parameters = {
                width: width,
                height: height,
                depth: depth,
                widthSegments: widthSegments,
                heightSegments: heightSegments,
                depthSegments: depthSegments
            };
            var _this, scope = _assertThisInitialized(_this);
            widthSegments = Math.floor(widthSegments), heightSegments = Math.floor(heightSegments);
            var indices = [], vertices = [], normals = [], uvs = [], numberOfVertices = 0, groupStart = 0;
            function buildPlane(u, v, w, udir, vdir, width, height, depth, gridX, gridY, materialIndex) {
                for(var segmentWidth = width / gridX, segmentHeight = height / gridY, widthHalf = width / 2, heightHalf = height / 2, depthHalf = depth / 2, gridX1 = gridX + 1, gridY1 = gridY + 1, vertexCounter = 0, groupCount = 0, vector = new Vector3(), iy = 0; iy < gridY1; iy++)for(var y = iy * segmentHeight - heightHalf, ix = 0; ix < gridX1; ix++){
                    var x = ix * segmentWidth - widthHalf;
                    vector[u] = x * udir, vector[v] = y * vdir, vector[w] = depthHalf, vertices.push(vector.x, vector.y, vector.z), vector[u] = 0, vector[v] = 0, vector[w] = depth > 0 ? 1 : -1, normals.push(vector.x, vector.y, vector.z), uvs.push(ix / gridX), uvs.push(1 - iy / gridY), vertexCounter += 1;
                }
                for(var _iy = 0; _iy < gridY; _iy++)for(var _ix = 0; _ix < gridX; _ix++){
                    var a = numberOfVertices + _ix + gridX1 * _iy, b = numberOfVertices + _ix + gridX1 * (_iy + 1), c = numberOfVertices + (_ix + 1) + gridX1 * (_iy + 1), d = numberOfVertices + (_ix + 1) + gridX1 * _iy;
                    indices.push(a, b, d), indices.push(b, c, d), groupCount += 6;
                }
                scope.addGroup(groupStart, groupCount, materialIndex), groupStart += groupCount, numberOfVertices += vertexCounter;
            }
            return buildPlane('z', 'y', 'x', -1, -1, depth, height, width, depthSegments = Math.floor(depthSegments), heightSegments, 0), buildPlane('z', 'y', 'x', 1, -1, depth, height, -width, depthSegments, heightSegments, 1), buildPlane('x', 'z', 'y', 1, 1, width, depth, height, widthSegments, depthSegments, 2), buildPlane('x', 'z', 'y', 1, -1, width, depth, -height, widthSegments, depthSegments, 3), buildPlane('x', 'y', 'z', 1, -1, width, height, depth, widthSegments, heightSegments, 4), buildPlane('x', 'y', 'z', -1, -1, width, height, -depth, widthSegments, heightSegments, 5), _this.setIndex(indices), _this.setAttribute('position', new Float32BufferAttribute(vertices, 3)), _this.setAttribute('normal', new Float32BufferAttribute(normals, 3)), _this.setAttribute('uv', new Float32BufferAttribute(uvs, 2)), _this;
        }
        return _inheritsLoose(BoxBufferGeometry, _BufferGeometry), BoxBufferGeometry;
    }(BufferGeometry);
    function cloneUniforms(src) {
        var dst = {};
        for(var u in src)for(var p in dst[u] = {}, src[u]){
            var property = src[u][p];
            property && (property.isColor || property.isMatrix3 || property.isMatrix4 || property.isVector2 || property.isVector3 || property.isVector4 || property.isTexture) ? dst[u][p] = property.clone() : Array.isArray(property) ? dst[u][p] = property.slice() : dst[u][p] = property;
        }
        return dst;
    }
    function mergeUniforms(uniforms) {
        for(var merged = {}, u = 0; u < uniforms.length; u++){
            var tmp = cloneUniforms(uniforms[u]);
            for(var p in tmp)merged[p] = tmp[p];
        }
        return merged;
    }
    var UniformsUtils = {
        clone: cloneUniforms,
        merge: mergeUniforms
    };
    function ShaderMaterial(parameters) {
        Material.call(this), this.type = 'ShaderMaterial', this.defines = {}, this.uniforms = {}, this.vertexShader = "void main() {\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}", this.fragmentShader = "void main() {\n\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}", this.linewidth = 1, this.wireframe = !1, this.wireframeLinewidth = 1, this.fog = !1, this.lights = !1, this.clipping = !1, this.skinning = !1, this.morphTargets = !1, this.morphNormals = !1, this.extensions = {
            derivatives: !1,
            fragDepth: !1,
            drawBuffers: !1,
            shaderTextureLOD: !1
        }, this.defaultAttributeValues = {
            color: [
                1,
                1,
                1
            ],
            uv: [
                0,
                0
            ],
            uv2: [
                0,
                0
            ]
        }, this.index0AttributeName = void 0, this.uniformsNeedUpdate = !1, this.glslVersion = null, void 0 !== parameters && (void 0 !== parameters.attributes && console.error('THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead.'), this.setValues(parameters));
    }
    function Camera() {
        Object3D.call(this), this.type = 'Camera', this.matrixWorldInverse = new Matrix4(), this.projectionMatrix = new Matrix4(), this.projectionMatrixInverse = new Matrix4();
    }
    function PerspectiveCamera(fov, aspect, near, far) {
        void 0 === fov && (fov = 50), void 0 === aspect && (aspect = 1), void 0 === near && (near = 0.1), void 0 === far && (far = 2000), Camera.call(this), this.type = 'PerspectiveCamera', this.fov = fov, this.zoom = 1, this.near = near, this.far = far, this.focus = 10, this.aspect = aspect, this.view = null, this.filmGauge = 35, this.filmOffset = 0, this.updateProjectionMatrix();
    }
    function CubeCamera(near, far, renderTarget) {
        if (Object3D.call(this), this.type = 'CubeCamera', !0 !== renderTarget.isWebGLCubeRenderTarget) {
            console.error('THREE.CubeCamera: The constructor now expects an instance of WebGLCubeRenderTarget as third parameter.');
            return;
        }
        this.renderTarget = renderTarget;
        var cameraPX = new PerspectiveCamera(90, 1, near, far);
        cameraPX.layers = this.layers, cameraPX.up.set(0, -1, 0), cameraPX.lookAt(new Vector3(1, 0, 0)), this.add(cameraPX);
        var cameraNX = new PerspectiveCamera(90, 1, near, far);
        cameraNX.layers = this.layers, cameraNX.up.set(0, -1, 0), cameraNX.lookAt(new Vector3(-1, 0, 0)), this.add(cameraNX);
        var cameraPY = new PerspectiveCamera(90, 1, near, far);
        cameraPY.layers = this.layers, cameraPY.up.set(0, 0, 1), cameraPY.lookAt(new Vector3(0, 1, 0)), this.add(cameraPY);
        var cameraNY = new PerspectiveCamera(90, 1, near, far);
        cameraNY.layers = this.layers, cameraNY.up.set(0, 0, -1), cameraNY.lookAt(new Vector3(0, -1, 0)), this.add(cameraNY);
        var cameraPZ = new PerspectiveCamera(90, 1, near, far);
        cameraPZ.layers = this.layers, cameraPZ.up.set(0, -1, 0), cameraPZ.lookAt(new Vector3(0, 0, 1)), this.add(cameraPZ);
        var cameraNZ = new PerspectiveCamera(90, 1, near, far);
        cameraNZ.layers = this.layers, cameraNZ.up.set(0, -1, 0), cameraNZ.lookAt(new Vector3(0, 0, -1)), this.add(cameraNZ), this.update = function(renderer, scene) {
            null === this.parent && this.updateMatrixWorld();
            var currentXrEnabled = renderer.xr.enabled, currentRenderTarget = renderer.getRenderTarget();
            renderer.xr.enabled = !1;
            var generateMipmaps = renderTarget.texture.generateMipmaps;
            renderTarget.texture.generateMipmaps = !1, renderer.setRenderTarget(renderTarget, 0), renderer.render(scene, cameraPX), renderer.setRenderTarget(renderTarget, 1), renderer.render(scene, cameraNX), renderer.setRenderTarget(renderTarget, 2), renderer.render(scene, cameraPY), renderer.setRenderTarget(renderTarget, 3), renderer.render(scene, cameraNY), renderer.setRenderTarget(renderTarget, 4), renderer.render(scene, cameraPZ), renderTarget.texture.generateMipmaps = generateMipmaps, renderer.setRenderTarget(renderTarget, 5), renderer.render(scene, cameraNZ), renderer.setRenderTarget(currentRenderTarget), renderer.xr.enabled = currentXrEnabled;
        };
    }
    function CubeTexture(images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding) {
        images = void 0 !== images ? images : [], mapping = void 0 !== mapping ? mapping : 301, format = void 0 !== format ? format : 1022, Texture.call(this, images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding), this.flipY = !1, this._needsFlipEnvMap = !0;
    }
    function WebGLCubeRenderTarget(size, options, dummy) {
        Number.isInteger(options) && (console.warn('THREE.WebGLCubeRenderTarget: constructor signature is now WebGLCubeRenderTarget( size, options )'), options = dummy), WebGLRenderTarget.call(this, size, size, options), options = options || {}, this.texture = new CubeTexture(void 0, options.mapping, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.encoding), this.texture._needsFlipEnvMap = !1;
    }
    function DataTexture(data, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding) {
        Texture.call(this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding), this.image = {
            data: data || null,
            width: width || 1,
            height: height || 1
        }, this.magFilter = void 0 !== magFilter ? magFilter : 1003, this.minFilter = void 0 !== minFilter ? minFilter : 1003, this.generateMipmaps = !1, this.flipY = !1, this.unpackAlignment = 1, this.needsUpdate = !0;
    }
    ShaderMaterial.prototype = Object.create(Material.prototype), ShaderMaterial.prototype.constructor = ShaderMaterial, ShaderMaterial.prototype.isShaderMaterial = !0, ShaderMaterial.prototype.copy = function(source) {
        return Material.prototype.copy.call(this, source), this.fragmentShader = source.fragmentShader, this.vertexShader = source.vertexShader, this.uniforms = cloneUniforms(source.uniforms), this.defines = Object.assign({}, source.defines), this.wireframe = source.wireframe, this.wireframeLinewidth = source.wireframeLinewidth, this.lights = source.lights, this.clipping = source.clipping, this.skinning = source.skinning, this.morphTargets = source.morphTargets, this.morphNormals = source.morphNormals, this.extensions = Object.assign({}, source.extensions), this.glslVersion = source.glslVersion, this;
    }, ShaderMaterial.prototype.toJSON = function(meta) {
        var data = Material.prototype.toJSON.call(this, meta);
        for(var name in data.glslVersion = this.glslVersion, data.uniforms = {}, this.uniforms){
            var value = this.uniforms[name].value;
            value && value.isTexture ? data.uniforms[name] = {
                type: 't',
                value: value.toJSON(meta).uuid
            } : value && value.isColor ? data.uniforms[name] = {
                type: 'c',
                value: value.getHex()
            } : value && value.isVector2 ? data.uniforms[name] = {
                type: 'v2',
                value: value.toArray()
            } : value && value.isVector3 ? data.uniforms[name] = {
                type: 'v3',
                value: value.toArray()
            } : value && value.isVector4 ? data.uniforms[name] = {
                type: 'v4',
                value: value.toArray()
            } : value && value.isMatrix3 ? data.uniforms[name] = {
                type: 'm3',
                value: value.toArray()
            } : value && value.isMatrix4 ? data.uniforms[name] = {
                type: 'm4',
                value: value.toArray()
            } : data.uniforms[name] = {
                value: value
            };
        }
        Object.keys(this.defines).length > 0 && (data.defines = this.defines), data.vertexShader = this.vertexShader, data.fragmentShader = this.fragmentShader;
        var extensions = {};
        for(var key in this.extensions)!0 === this.extensions[key] && (extensions[key] = !0);
        return Object.keys(extensions).length > 0 && (data.extensions = extensions), data;
    }, Camera.prototype = Object.assign(Object.create(Object3D.prototype), {
        constructor: Camera,
        isCamera: !0,
        copy: function(source, recursive) {
            return Object3D.prototype.copy.call(this, source, recursive), this.matrixWorldInverse.copy(source.matrixWorldInverse), this.projectionMatrix.copy(source.projectionMatrix), this.projectionMatrixInverse.copy(source.projectionMatrixInverse), this;
        },
        getWorldDirection: function(target) {
            void 0 === target && (console.warn('THREE.Camera: .getWorldDirection() target is now required'), target = new Vector3()), this.updateWorldMatrix(!0, !1);
            var e = this.matrixWorld.elements;
            return target.set(-e[8], -e[9], -e[10]).normalize();
        },
        updateMatrixWorld: function(force) {
            Object3D.prototype.updateMatrixWorld.call(this, force), this.matrixWorldInverse.copy(this.matrixWorld).invert();
        },
        updateWorldMatrix: function(updateParents, updateChildren) {
            Object3D.prototype.updateWorldMatrix.call(this, updateParents, updateChildren), this.matrixWorldInverse.copy(this.matrixWorld).invert();
        },
        clone: function() {
            return new this.constructor().copy(this);
        }
    }), PerspectiveCamera.prototype = Object.assign(Object.create(Camera.prototype), {
        constructor: PerspectiveCamera,
        isPerspectiveCamera: !0,
        copy: function(source, recursive) {
            return Camera.prototype.copy.call(this, source, recursive), this.fov = source.fov, this.zoom = source.zoom, this.near = source.near, this.far = source.far, this.focus = source.focus, this.aspect = source.aspect, this.view = null === source.view ? null : Object.assign({}, source.view), this.filmGauge = source.filmGauge, this.filmOffset = source.filmOffset, this;
        },
        setFocalLength: function(focalLength) {
            var vExtentSlope = 0.5 * this.getFilmHeight() / focalLength;
            this.fov = 2 * MathUtils.RAD2DEG * Math.atan(vExtentSlope), this.updateProjectionMatrix();
        },
        getFocalLength: function() {
            var vExtentSlope = Math.tan(0.5 * MathUtils.DEG2RAD * this.fov);
            return 0.5 * this.getFilmHeight() / vExtentSlope;
        },
        getEffectiveFOV: function() {
            return 2 * MathUtils.RAD2DEG * Math.atan(Math.tan(0.5 * MathUtils.DEG2RAD * this.fov) / this.zoom);
        },
        getFilmWidth: function() {
            return this.filmGauge * Math.min(this.aspect, 1);
        },
        getFilmHeight: function() {
            return this.filmGauge / Math.max(this.aspect, 1);
        },
        setViewOffset: function(fullWidth, fullHeight, x, y, width, height) {
            this.aspect = fullWidth / fullHeight, null === this.view && (this.view = {
                enabled: !0,
                fullWidth: 1,
                fullHeight: 1,
                offsetX: 0,
                offsetY: 0,
                width: 1,
                height: 1
            }), this.view.enabled = !0, this.view.fullWidth = fullWidth, this.view.fullHeight = fullHeight, this.view.offsetX = x, this.view.offsetY = y, this.view.width = width, this.view.height = height, this.updateProjectionMatrix();
        },
        clearViewOffset: function() {
            null !== this.view && (this.view.enabled = !1), this.updateProjectionMatrix();
        },
        updateProjectionMatrix: function() {
            var near = this.near, top = near * Math.tan(0.5 * MathUtils.DEG2RAD * this.fov) / this.zoom, height = 2 * top, width = this.aspect * height, left = -0.5 * width, view = this.view;
            if (null !== this.view && this.view.enabled) {
                var fullWidth = view.fullWidth, fullHeight = view.fullHeight;
                left += view.offsetX * width / fullWidth, top -= view.offsetY * height / fullHeight, width *= view.width / fullWidth, height *= view.height / fullHeight;
            }
            var skew = this.filmOffset;
            0 !== skew && (left += near * skew / this.getFilmWidth()), this.projectionMatrix.makePerspective(left, left + width, top, top - height, near, this.far), this.projectionMatrixInverse.copy(this.projectionMatrix).invert();
        },
        toJSON: function(meta) {
            var data = Object3D.prototype.toJSON.call(this, meta);
            return data.object.fov = this.fov, data.object.zoom = this.zoom, data.object.near = this.near, data.object.far = this.far, data.object.focus = this.focus, data.object.aspect = this.aspect, null !== this.view && (data.object.view = Object.assign({}, this.view)), data.object.filmGauge = this.filmGauge, data.object.filmOffset = this.filmOffset, data;
        }
    }), CubeCamera.prototype = Object.create(Object3D.prototype), CubeCamera.prototype.constructor = CubeCamera, CubeTexture.prototype = Object.create(Texture.prototype), CubeTexture.prototype.constructor = CubeTexture, CubeTexture.prototype.isCubeTexture = !0, Object.defineProperty(CubeTexture.prototype, 'images', {
        get: function() {
            return this.image;
        },
        set: function(value) {
            this.image = value;
        }
    }), WebGLCubeRenderTarget.prototype = Object.create(WebGLRenderTarget.prototype), WebGLCubeRenderTarget.prototype.constructor = WebGLCubeRenderTarget, WebGLCubeRenderTarget.prototype.isWebGLCubeRenderTarget = !0, WebGLCubeRenderTarget.prototype.fromEquirectangularTexture = function(renderer, texture) {
        this.texture.type = texture.type, this.texture.format = 1023, this.texture.encoding = texture.encoding, this.texture.generateMipmaps = texture.generateMipmaps, this.texture.minFilter = texture.minFilter, this.texture.magFilter = texture.magFilter;
        var shader = {
            uniforms: {
                tEquirect: {
                    value: null
                }
            },
            vertexShader: "\n\n\t\t\tvarying vec3 vWorldDirection;\n\n\t\t\tvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\n\t\t\t\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n\n\t\t\t}\n\n\t\t\tvoid main() {\n\n\t\t\t\tvWorldDirection = transformDirection( position, modelMatrix );\n\n\t\t\t\t#include <begin_vertex>\n\t\t\t\t#include <project_vertex>\n\n\t\t\t}\n\t\t",
            fragmentShader: "\n\n\t\t\tuniform sampler2D tEquirect;\n\n\t\t\tvarying vec3 vWorldDirection;\n\n\t\t\t#include <common>\n\n\t\t\tvoid main() {\n\n\t\t\t\tvec3 direction = normalize( vWorldDirection );\n\n\t\t\t\tvec2 sampleUV = equirectUv( direction );\n\n\t\t\t\tgl_FragColor = texture2D( tEquirect, sampleUV );\n\n\t\t\t}\n\t\t"
        }, geometry = new BoxBufferGeometry(5, 5, 5), material = new ShaderMaterial({
            name: 'CubemapFromEquirect',
            uniforms: cloneUniforms(shader.uniforms),
            vertexShader: shader.vertexShader,
            fragmentShader: shader.fragmentShader,
            side: 1,
            blending: 0
        });
        material.uniforms.tEquirect.value = texture;
        var mesh = new Mesh(geometry, material), currentMinFilter = texture.minFilter;
        return 1008 === texture.minFilter && (texture.minFilter = 1006), new CubeCamera(1, 10, this).update(renderer, mesh), texture.minFilter = currentMinFilter, mesh.geometry.dispose(), mesh.material.dispose(), this;
    }, WebGLCubeRenderTarget.prototype.clear = function(renderer, color, depth, stencil) {
        for(var currentRenderTarget = renderer.getRenderTarget(), i = 0; i < 6; i++)renderer.setRenderTarget(this, i), renderer.clear(color, depth, stencil);
        renderer.setRenderTarget(currentRenderTarget);
    }, DataTexture.prototype = Object.create(Texture.prototype), DataTexture.prototype.constructor = DataTexture, DataTexture.prototype.isDataTexture = !0;
    var _sphere$1 = new Sphere(), _vector$5 = new Vector3(), Frustum = function() {
        function Frustum(p0, p1, p2, p3, p4, p5) {
            this.planes = [
                void 0 !== p0 ? p0 : new Plane(),
                void 0 !== p1 ? p1 : new Plane(),
                void 0 !== p2 ? p2 : new Plane(),
                void 0 !== p3 ? p3 : new Plane(),
                void 0 !== p4 ? p4 : new Plane(),
                void 0 !== p5 ? p5 : new Plane()
            ];
        }
        var _proto = Frustum.prototype;
        return _proto.set = function(p0, p1, p2, p3, p4, p5) {
            var planes = this.planes;
            return planes[0].copy(p0), planes[1].copy(p1), planes[2].copy(p2), planes[3].copy(p3), planes[4].copy(p4), planes[5].copy(p5), this;
        }, _proto.clone = function() {
            return new this.constructor().copy(this);
        }, _proto.copy = function(frustum) {
            for(var planes = this.planes, i = 0; i < 6; i++)planes[i].copy(frustum.planes[i]);
            return this;
        }, _proto.setFromProjectionMatrix = function(m) {
            var planes = this.planes, me = m.elements, me0 = me[0], me1 = me[1], me2 = me[2], me3 = me[3], me4 = me[4], me5 = me[5], me6 = me[6], me7 = me[7], me8 = me[8], me9 = me[9], me10 = me[10], me11 = me[11], me12 = me[12], me13 = me[13], me14 = me[14], me15 = me[15];
            return planes[0].setComponents(me3 - me0, me7 - me4, me11 - me8, me15 - me12).normalize(), planes[1].setComponents(me3 + me0, me7 + me4, me11 + me8, me15 + me12).normalize(), planes[2].setComponents(me3 + me1, me7 + me5, me11 + me9, me15 + me13).normalize(), planes[3].setComponents(me3 - me1, me7 - me5, me11 - me9, me15 - me13).normalize(), planes[4].setComponents(me3 - me2, me7 - me6, me11 - me10, me15 - me14).normalize(), planes[5].setComponents(me3 + me2, me7 + me6, me11 + me10, me15 + me14).normalize(), this;
        }, _proto.intersectsObject = function(object) {
            var geometry = object.geometry;
            return null === geometry.boundingSphere && geometry.computeBoundingSphere(), _sphere$1.copy(geometry.boundingSphere).applyMatrix4(object.matrixWorld), this.intersectsSphere(_sphere$1);
        }, _proto.intersectsSprite = function(sprite) {
            return _sphere$1.center.set(0, 0, 0), _sphere$1.radius = 0.7071067811865476, _sphere$1.applyMatrix4(sprite.matrixWorld), this.intersectsSphere(_sphere$1);
        }, _proto.intersectsSphere = function(sphere) {
            for(var planes = this.planes, center = sphere.center, negRadius = -sphere.radius, i = 0; i < 6; i++)if (planes[i].distanceToPoint(center) < negRadius) return !1;
            return !0;
        }, _proto.intersectsBox = function(box) {
            for(var planes = this.planes, i = 0; i < 6; i++){
                var plane = planes[i];
                if (_vector$5.x = plane.normal.x > 0 ? box.max.x : box.min.x, _vector$5.y = plane.normal.y > 0 ? box.max.y : box.min.y, _vector$5.z = plane.normal.z > 0 ? box.max.z : box.min.z, 0 > plane.distanceToPoint(_vector$5)) return !1;
            }
            return !0;
        }, _proto.containsPoint = function(point) {
            for(var planes = this.planes, i = 0; i < 6; i++)if (0 > planes[i].distanceToPoint(point)) return !1;
            return !0;
        }, Frustum;
    }();
    function WebGLAnimation() {
        var context = null, isAnimating = !1, animationLoop = null, requestId = null;
        function onAnimationFrame(time, frame) {
            animationLoop(time, frame), requestId = context.requestAnimationFrame(onAnimationFrame);
        }
        return {
            start: function() {
                !0 !== isAnimating && null !== animationLoop && (requestId = context.requestAnimationFrame(onAnimationFrame), isAnimating = !0);
            },
            stop: function() {
                context.cancelAnimationFrame(requestId), isAnimating = !1;
            },
            setAnimationLoop: function(callback) {
                animationLoop = callback;
            },
            setContext: function(value) {
                context = value;
            }
        };
    }
    function WebGLAttributes(gl, capabilities) {
        var isWebGL2 = capabilities.isWebGL2, buffers = new WeakMap();
        return {
            get: function(attribute) {
                return attribute.isInterleavedBufferAttribute && (attribute = attribute.data), buffers.get(attribute);
            },
            remove: function(attribute) {
                attribute.isInterleavedBufferAttribute && (attribute = attribute.data);
                var data = buffers.get(attribute);
                data && (gl.deleteBuffer(data.buffer), buffers.delete(attribute));
            },
            update: function(attribute, bufferType) {
                if (attribute.isGLBufferAttribute) {
                    var attribute1, array, usage, buffer, type, buffer1, attribute2, array1, updateRange, cached = buffers.get(attribute);
                    (!cached || cached.version < attribute.version) && buffers.set(attribute, {
                        buffer: attribute.buffer,
                        type: attribute.type,
                        bytesPerElement: attribute.elementSize,
                        version: attribute.version
                    });
                    return;
                }
                attribute.isInterleavedBufferAttribute && (attribute = attribute.data);
                var data = buffers.get(attribute);
                void 0 === data ? buffers.set(attribute, (array = (attribute1 = attribute).array, usage = attribute1.usage, buffer = gl.createBuffer(), gl.bindBuffer(bufferType, buffer), gl.bufferData(bufferType, array, usage), attribute1.onUploadCallback(), type = 5126, array instanceof Float32Array ? type = 5126 : array instanceof Float64Array ? console.warn('THREE.WebGLAttributes: Unsupported data buffer format: Float64Array.') : array instanceof Uint16Array ? attribute1.isFloat16BufferAttribute ? isWebGL2 ? type = 5131 : console.warn('THREE.WebGLAttributes: Usage of Float16BufferAttribute requires WebGL2.') : type = 5123 : array instanceof Int16Array ? type = 5122 : array instanceof Uint32Array ? type = 5125 : array instanceof Int32Array ? type = 5124 : array instanceof Int8Array ? type = 5120 : array instanceof Uint8Array && (type = 5121), {
                    buffer: buffer,
                    type: type,
                    bytesPerElement: array.BYTES_PER_ELEMENT,
                    version: attribute1.version
                })) : data.version < attribute.version && (buffer1 = data.buffer, array1 = (attribute2 = attribute).array, updateRange = attribute2.updateRange, gl.bindBuffer(bufferType, buffer1), -1 === updateRange.count ? gl.bufferSubData(bufferType, 0, array1) : (isWebGL2 ? gl.bufferSubData(bufferType, updateRange.offset * array1.BYTES_PER_ELEMENT, array1, updateRange.offset, updateRange.count) : gl.bufferSubData(bufferType, updateRange.offset * array1.BYTES_PER_ELEMENT, array1.subarray(updateRange.offset, updateRange.offset + updateRange.count)), updateRange.count = -1), data.version = attribute.version);
            }
        };
    }
    var PlaneBufferGeometry = function(_BufferGeometry) {
        function PlaneBufferGeometry(width, height, widthSegments, heightSegments) {
            void 0 === width && (width = 1), void 0 === height && (height = 1), void 0 === widthSegments && (widthSegments = 1), void 0 === heightSegments && (heightSegments = 1), (_this = _BufferGeometry.call(this) || this).type = 'PlaneBufferGeometry', _this.parameters = {
                width: width,
                height: height,
                widthSegments: widthSegments,
                heightSegments: heightSegments
            };
            for(var _this, width_half = width / 2, height_half = height / 2, gridX = Math.floor(widthSegments), gridY = Math.floor(heightSegments), gridX1 = gridX + 1, gridY1 = gridY + 1, segment_width = width / gridX, segment_height = height / gridY, indices = [], vertices = [], normals = [], uvs = [], iy = 0; iy < gridY1; iy++)for(var y = iy * segment_height - height_half, ix = 0; ix < gridX1; ix++){
                var x = ix * segment_width - width_half;
                vertices.push(x, -y, 0), normals.push(0, 0, 1), uvs.push(ix / gridX), uvs.push(1 - iy / gridY);
            }
            for(var _iy = 0; _iy < gridY; _iy++)for(var _ix = 0; _ix < gridX; _ix++){
                var a = _ix + gridX1 * _iy, b = _ix + gridX1 * (_iy + 1), c = _ix + 1 + gridX1 * (_iy + 1), d = _ix + 1 + gridX1 * _iy;
                indices.push(a, b, d), indices.push(b, c, d);
            }
            return _this.setIndex(indices), _this.setAttribute('position', new Float32BufferAttribute(vertices, 3)), _this.setAttribute('normal', new Float32BufferAttribute(normals, 3)), _this.setAttribute('uv', new Float32BufferAttribute(uvs, 2)), _this;
        }
        return _inheritsLoose(PlaneBufferGeometry, _BufferGeometry), PlaneBufferGeometry;
    }(BufferGeometry), ShaderChunk = {
        alphamap_fragment: "#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\n#endif",
        alphamap_pars_fragment: "#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif",
        alphatest_fragment: "#ifdef ALPHATEST\n\tif ( diffuseColor.a < ALPHATEST ) discard;\n#endif",
        aomap_fragment: "#ifdef USE_AOMAP\n\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\n\treflectedLight.indirectDiffuse *= ambientOcclusion;\n\t#if defined( USE_ENVMAP ) && defined( STANDARD )\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\t\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\n\t#endif\n#endif",
        aomap_pars_fragment: "#ifdef USE_AOMAP\n\tuniform sampler2D aoMap;\n\tuniform float aoMapIntensity;\n#endif",
        begin_vertex: "vec3 transformed = vec3( position );",
        beginnormal_vertex: "vec3 objectNormal = vec3( normal );\n#ifdef USE_TANGENT\n\tvec3 objectTangent = vec3( tangent.xyz );\n#endif",
        bsdfs: "vec2 integrateSpecularBRDF( const in float dotNV, const in float roughness ) {\n\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n\tvec4 r = roughness * c0 + c1;\n\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n\treturn vec2( -1.04, 1.04 ) * a004 + r.zw;\n}\nfloat punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\n\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n\tif( cutoffDistance > 0.0 ) {\n\t\tdistanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n\t}\n\treturn distanceFalloff;\n#else\n\tif( cutoffDistance > 0.0 && decayExponent > 0.0 ) {\n\t\treturn pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\n\t}\n\treturn 1.0;\n#endif\n}\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\n\treturn RECIPROCAL_PI * diffuseColor;\n}\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\n\tfloat fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\n\treturn ( 1.0 - specularColor ) * fresnel + specularColor;\n}\nvec3 F_Schlick_RoughnessDependent( const in vec3 F0, const in float dotNV, const in float roughness ) {\n\tfloat fresnel = exp2( ( -5.55473 * dotNV - 6.98316 ) * dotNV );\n\tvec3 Fr = max( vec3( 1.0 - roughness ), F0 ) - F0;\n\treturn Fr * fresnel + F0;\n}\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\tfloat gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\treturn 1.0 / ( gl * gv );\n}\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\treturn 0.5 / max( gv + gl, EPSILON );\n}\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n\tfloat a2 = pow2( alpha );\n\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\n\treturn RECIPROCAL_PI * a2 / pow2( denom );\n}\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float roughness ) {\n\tfloat alpha = pow2( roughness );\n\tvec3 halfDir = normalize( incidentLight.direction + viewDir );\n\tfloat dotNL = saturate( dot( normal, incidentLight.direction ) );\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, dotLH );\n\tfloat G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\tfloat D = D_GGX( alpha, dotNH );\n\treturn F * ( G * D );\n}\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\n\tconst float LUT_SIZE = 64.0;\n\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\n\tconst float LUT_BIAS = 0.5 / LUT_SIZE;\n\tfloat dotNV = saturate( dot( N, V ) );\n\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\n\tuv = uv * LUT_SCALE + LUT_BIAS;\n\treturn uv;\n}\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\n\tfloat l = length( f );\n\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\n}\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\n\tfloat x = dot( v1, v2 );\n\tfloat y = abs( x );\n\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\n\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\n\tfloat v = a / b;\n\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\n\treturn cross( v1, v2 ) * theta_sintheta;\n}\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\n\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\n\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\n\tvec3 lightNormal = cross( v1, v2 );\n\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\n\tvec3 T1, T2;\n\tT1 = normalize( V - N * dot( V, N ) );\n\tT2 = - cross( N, T1 );\n\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\n\tvec3 coords[ 4 ];\n\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\n\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\n\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\n\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\n\tcoords[ 0 ] = normalize( coords[ 0 ] );\n\tcoords[ 1 ] = normalize( coords[ 1 ] );\n\tcoords[ 2 ] = normalize( coords[ 2 ] );\n\tcoords[ 3 ] = normalize( coords[ 3 ] );\n\tvec3 vectorFormFactor = vec3( 0.0 );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\n\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\n\treturn vec3( result );\n}\nvec3 BRDF_Specular_GGX_Environment( const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float roughness ) {\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tvec2 brdf = integrateSpecularBRDF( dotNV, roughness );\n\treturn specularColor * brdf.x + brdf.y;\n}\nvoid BRDF_Specular_Multiscattering_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\tvec3 F = F_Schlick_RoughnessDependent( specularColor, dotNV, roughness );\n\tvec2 brdf = integrateSpecularBRDF( dotNV, roughness );\n\tvec3 FssEss = F * brdf.x + brdf.y;\n\tfloat Ess = brdf.x + brdf.y;\n\tfloat Ems = 1.0 - Ess;\n\tvec3 Favg = specularColor + ( 1.0 - specularColor ) * 0.047619;\tvec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\n\tsingleScatter += FssEss;\n\tmultiScatter += Fms * Ems;\n}\nfloat G_BlinnPhong_Implicit( ) {\n\treturn 0.25;\n}\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n}\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\n\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\n\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, dotLH );\n\tfloat G = G_BlinnPhong_Implicit( );\n\tfloat D = D_BlinnPhong( shininess, dotNH );\n\treturn F * ( G * D );\n}\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\n\treturn ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\n}\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\n\treturn sqrt( 2.0 / ( blinnExponent + 2.0 ) );\n}\n#if defined( USE_SHEEN )\nfloat D_Charlie(float roughness, float NoH) {\n\tfloat invAlpha = 1.0 / roughness;\n\tfloat cos2h = NoH * NoH;\n\tfloat sin2h = max(1.0 - cos2h, 0.0078125);\treturn (2.0 + invAlpha) * pow(sin2h, invAlpha * 0.5) / (2.0 * PI);\n}\nfloat V_Neubelt(float NoV, float NoL) {\n\treturn saturate(1.0 / (4.0 * (NoL + NoV - NoL * NoV)));\n}\nvec3 BRDF_Specular_Sheen( const in float roughness, const in vec3 L, const in GeometricContext geometry, vec3 specularColor ) {\n\tvec3 N = geometry.normal;\n\tvec3 V = geometry.viewDir;\n\tvec3 H = normalize( V + L );\n\tfloat dotNH = saturate( dot( N, H ) );\n\treturn specularColor * D_Charlie( roughness, dotNH ) * V_Neubelt( dot(N, V), dot(N, L) );\n}\n#endif",
        bumpmap_pars_fragment: "#ifdef USE_BUMPMAP\n\tuniform sampler2D bumpMap;\n\tuniform float bumpScale;\n\tvec2 dHdxy_fwd() {\n\t\tvec2 dSTdx = dFdx( vUv );\n\t\tvec2 dSTdy = dFdy( vUv );\n\t\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\n\t\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\n\t\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\n\t\treturn vec2( dBx, dBy );\n\t}\n\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\n\t\tvec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );\n\t\tvec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );\n\t\tvec3 vN = surf_norm;\n\t\tvec3 R1 = cross( vSigmaY, vN );\n\t\tvec3 R2 = cross( vN, vSigmaX );\n\t\tfloat fDet = dot( vSigmaX, R1 );\n\t\tfDet *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n\t\treturn normalize( abs( fDet ) * surf_norm - vGrad );\n\t}\n#endif",
        clipping_planes_fragment: "#if NUM_CLIPPING_PLANES > 0\n\tvec4 plane;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\n\t\tplane = clippingPlanes[ i ];\n\t\tif ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;\n\t}\n\t#pragma unroll_loop_end\n\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n\t\tbool clipped = true;\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\n\t\t\tplane = clippingPlanes[ i ];\n\t\t\tclipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;\n\t\t}\n\t\t#pragma unroll_loop_end\n\t\tif ( clipped ) discard;\n\t#endif\n#endif",
        clipping_planes_pars_fragment: "#if NUM_CLIPPING_PLANES > 0\n\tvarying vec3 vClipPosition;\n\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\n#endif",
        clipping_planes_pars_vertex: "#if NUM_CLIPPING_PLANES > 0\n\tvarying vec3 vClipPosition;\n#endif",
        clipping_planes_vertex: "#if NUM_CLIPPING_PLANES > 0\n\tvClipPosition = - mvPosition.xyz;\n#endif",
        color_fragment: "#ifdef USE_COLOR\n\tdiffuseColor.rgb *= vColor;\n#endif",
        color_pars_fragment: "#ifdef USE_COLOR\n\tvarying vec3 vColor;\n#endif",
        color_pars_vertex: "#if defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\n\tvarying vec3 vColor;\n#endif",
        color_vertex: "#if defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\n\tvColor = vec3( 1.0 );\n#endif\n#ifdef USE_COLOR\n\tvColor.xyz *= color.xyz;\n#endif\n#ifdef USE_INSTANCING_COLOR\n\tvColor.xyz *= instanceColor.xyz;\n#endif",
        common: "#define PI 3.141592653589793\n#define PI2 6.283185307179586\n#define PI_HALF 1.5707963267948966\n#define RECIPROCAL_PI 0.3183098861837907\n#define RECIPROCAL_PI2 0.15915494309189535\n#define EPSILON 1e-6\n#ifndef saturate\n#define saturate(a) clamp( a, 0.0, 1.0 )\n#endif\n#define whiteComplement(a) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\nhighp float rand( const in vec2 uv ) {\n\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\n\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n\treturn fract(sin(sn) * c);\n}\n#ifdef HIGH_PRECISION\n\tfloat precisionSafeLength( vec3 v ) { return length( v ); }\n#else\n\tfloat max3( vec3 v ) { return max( max( v.x, v.y ), v.z ); }\n\tfloat precisionSafeLength( vec3 v ) {\n\t\tfloat maxComponent = max3( abs( v ) );\n\t\treturn length( v / maxComponent ) * maxComponent;\n\t}\n#endif\nstruct IncidentLight {\n\tvec3 color;\n\tvec3 direction;\n\tbool visible;\n};\nstruct ReflectedLight {\n\tvec3 directDiffuse;\n\tvec3 directSpecular;\n\tvec3 indirectDiffuse;\n\tvec3 indirectSpecular;\n};\nstruct GeometricContext {\n\tvec3 position;\n\tvec3 normal;\n\tvec3 viewDir;\n#ifdef CLEARCOAT\n\tvec3 clearcoatNormal;\n#endif\n};\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\tfloat distance = dot( planeNormal, point - pointOnPlane );\n\treturn - distance * planeNormal + point;\n}\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn sign( dot( point - pointOnPlane, planeNormal ) );\n}\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\n}\nmat3 transposeMat3( const in mat3 m ) {\n\tmat3 tmp;\n\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\n\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\n\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\n\treturn tmp;\n}\nfloat linearToRelativeLuminance( const in vec3 color ) {\n\tvec3 weights = vec3( 0.2126, 0.7152, 0.0722 );\n\treturn dot( weights, color.rgb );\n}\nbool isPerspectiveMatrix( mat4 m ) {\n\treturn m[ 2 ][ 3 ] == - 1.0;\n}\nvec2 equirectUv( in vec3 dir ) {\n\tfloat u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;\n\tfloat v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\treturn vec2( u, v );\n}",
        cube_uv_reflection_fragment: "#ifdef ENVMAP_TYPE_CUBE_UV\n\t#define cubeUV_maxMipLevel 8.0\n\t#define cubeUV_minMipLevel 4.0\n\t#define cubeUV_maxTileSize 256.0\n\t#define cubeUV_minTileSize 16.0\n\tfloat getFace( vec3 direction ) {\n\t\tvec3 absDirection = abs( direction );\n\t\tfloat face = - 1.0;\n\t\tif ( absDirection.x > absDirection.z ) {\n\t\t\tif ( absDirection.x > absDirection.y )\n\t\t\t\tface = direction.x > 0.0 ? 0.0 : 3.0;\n\t\t\telse\n\t\t\t\tface = direction.y > 0.0 ? 1.0 : 4.0;\n\t\t} else {\n\t\t\tif ( absDirection.z > absDirection.y )\n\t\t\t\tface = direction.z > 0.0 ? 2.0 : 5.0;\n\t\t\telse\n\t\t\t\tface = direction.y > 0.0 ? 1.0 : 4.0;\n\t\t}\n\t\treturn face;\n\t}\n\tvec2 getUV( vec3 direction, float face ) {\n\t\tvec2 uv;\n\t\tif ( face == 0.0 ) {\n\t\t\tuv = vec2( direction.z, direction.y ) / abs( direction.x );\n\t\t} else if ( face == 1.0 ) {\n\t\t\tuv = vec2( - direction.x, - direction.z ) / abs( direction.y );\n\t\t} else if ( face == 2.0 ) {\n\t\t\tuv = vec2( - direction.x, direction.y ) / abs( direction.z );\n\t\t} else if ( face == 3.0 ) {\n\t\t\tuv = vec2( - direction.z, direction.y ) / abs( direction.x );\n\t\t} else if ( face == 4.0 ) {\n\t\t\tuv = vec2( - direction.x, direction.z ) / abs( direction.y );\n\t\t} else {\n\t\t\tuv = vec2( direction.x, direction.y ) / abs( direction.z );\n\t\t}\n\t\treturn 0.5 * ( uv + 1.0 );\n\t}\n\tvec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {\n\t\tfloat face = getFace( direction );\n\t\tfloat filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );\n\t\tmipInt = max( mipInt, cubeUV_minMipLevel );\n\t\tfloat faceSize = exp2( mipInt );\n\t\tfloat texelSize = 1.0 / ( 3.0 * cubeUV_maxTileSize );\n\t\tvec2 uv = getUV( direction, face ) * ( faceSize - 1.0 );\n\t\tvec2 f = fract( uv );\n\t\tuv += 0.5 - f;\n\t\tif ( face > 2.0 ) {\n\t\t\tuv.y += faceSize;\n\t\t\tface -= 3.0;\n\t\t}\n\t\tuv.x += face * faceSize;\n\t\tif ( mipInt < cubeUV_maxMipLevel ) {\n\t\t\tuv.y += 2.0 * cubeUV_maxTileSize;\n\t\t}\n\t\tuv.y += filterInt * 2.0 * cubeUV_minTileSize;\n\t\tuv.x += 3.0 * max( 0.0, cubeUV_maxTileSize - 2.0 * faceSize );\n\t\tuv *= texelSize;\n\t\tvec3 tl = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\n\t\tuv.x += texelSize;\n\t\tvec3 tr = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\n\t\tuv.y += texelSize;\n\t\tvec3 br = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\n\t\tuv.x -= texelSize;\n\t\tvec3 bl = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\n\t\tvec3 tm = mix( tl, tr, f.x );\n\t\tvec3 bm = mix( bl, br, f.x );\n\t\treturn mix( tm, bm, f.y );\n\t}\n\t#define r0 1.0\n\t#define v0 0.339\n\t#define m0 - 2.0\n\t#define r1 0.8\n\t#define v1 0.276\n\t#define m1 - 1.0\n\t#define r4 0.4\n\t#define v4 0.046\n\t#define m4 2.0\n\t#define r5 0.305\n\t#define v5 0.016\n\t#define m5 3.0\n\t#define r6 0.21\n\t#define v6 0.0038\n\t#define m6 4.0\n\tfloat roughnessToMip( float roughness ) {\n\t\tfloat mip = 0.0;\n\t\tif ( roughness >= r1 ) {\n\t\t\tmip = ( r0 - roughness ) * ( m1 - m0 ) / ( r0 - r1 ) + m0;\n\t\t} else if ( roughness >= r4 ) {\n\t\t\tmip = ( r1 - roughness ) * ( m4 - m1 ) / ( r1 - r4 ) + m1;\n\t\t} else if ( roughness >= r5 ) {\n\t\t\tmip = ( r4 - roughness ) * ( m5 - m4 ) / ( r4 - r5 ) + m4;\n\t\t} else if ( roughness >= r6 ) {\n\t\t\tmip = ( r5 - roughness ) * ( m6 - m5 ) / ( r5 - r6 ) + m5;\n\t\t} else {\n\t\t\tmip = - 2.0 * log2( 1.16 * roughness );\t\t}\n\t\treturn mip;\n\t}\n\tvec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {\n\t\tfloat mip = clamp( roughnessToMip( roughness ), m0, cubeUV_maxMipLevel );\n\t\tfloat mipF = fract( mip );\n\t\tfloat mipInt = floor( mip );\n\t\tvec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );\n\t\tif ( mipF == 0.0 ) {\n\t\t\treturn vec4( color0, 1.0 );\n\t\t} else {\n\t\t\tvec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );\n\t\t\treturn vec4( mix( color0, color1, mipF ), 1.0 );\n\t\t}\n\t}\n#endif",
        defaultnormal_vertex: "vec3 transformedNormal = objectNormal;\n#ifdef USE_INSTANCING\n\tmat3 m = mat3( instanceMatrix );\n\ttransformedNormal /= vec3( dot( m[ 0 ], m[ 0 ] ), dot( m[ 1 ], m[ 1 ] ), dot( m[ 2 ], m[ 2 ] ) );\n\ttransformedNormal = m * transformedNormal;\n#endif\ntransformedNormal = normalMatrix * transformedNormal;\n#ifdef FLIP_SIDED\n\ttransformedNormal = - transformedNormal;\n#endif\n#ifdef USE_TANGENT\n\tvec3 transformedTangent = ( modelViewMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n\t#ifdef FLIP_SIDED\n\t\ttransformedTangent = - transformedTangent;\n\t#endif\n#endif",
        displacementmap_pars_vertex: "#ifdef USE_DISPLACEMENTMAP\n\tuniform sampler2D displacementMap;\n\tuniform float displacementScale;\n\tuniform float displacementBias;\n#endif",
        displacementmap_vertex: "#ifdef USE_DISPLACEMENTMAP\n\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, vUv ).x * displacementScale + displacementBias );\n#endif",
        emissivemap_fragment: "#ifdef USE_EMISSIVEMAP\n\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\n\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\n\ttotalEmissiveRadiance *= emissiveColor.rgb;\n#endif",
        emissivemap_pars_fragment: "#ifdef USE_EMISSIVEMAP\n\tuniform sampler2D emissiveMap;\n#endif",
        encodings_fragment: "gl_FragColor = linearToOutputTexel( gl_FragColor );",
        encodings_pars_fragment: "\nvec4 LinearToLinear( in vec4 value ) {\n\treturn value;\n}\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\n\treturn vec4( pow( value.rgb, vec3( gammaFactor ) ), value.a );\n}\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\n\treturn vec4( pow( value.rgb, vec3( 1.0 / gammaFactor ) ), value.a );\n}\nvec4 sRGBToLinear( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.a );\n}\nvec4 LinearTosRGB( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\n}\nvec4 RGBEToLinear( in vec4 value ) {\n\treturn vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\n}\nvec4 LinearToRGBE( in vec4 value ) {\n\tfloat maxComponent = max( max( value.r, value.g ), value.b );\n\tfloat fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\n\treturn vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\n}\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\n\treturn vec4( value.rgb * value.a * maxRange, 1.0 );\n}\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\n\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\n\tfloat M = clamp( maxRGB / maxRange, 0.0, 1.0 );\n\tM = ceil( M * 255.0 ) / 255.0;\n\treturn vec4( value.rgb / ( M * maxRange ), M );\n}\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\n\treturn vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\n}\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\n\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\n\tfloat D = max( maxRange / maxRGB, 1.0 );\n\tD = clamp( floor( D ) / 255.0, 0.0, 1.0 );\n\treturn vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\n}\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\nvec4 LinearToLogLuv( in vec4 value ) {\n\tvec3 Xp_Y_XYZp = cLogLuvM * value.rgb;\n\tXp_Y_XYZp = max( Xp_Y_XYZp, vec3( 1e-6, 1e-6, 1e-6 ) );\n\tvec4 vResult;\n\tvResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\n\tfloat Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\n\tvResult.w = fract( Le );\n\tvResult.z = ( Le - ( floor( vResult.w * 255.0 ) ) / 255.0 ) / 255.0;\n\treturn vResult;\n}\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\nvec4 LogLuvToLinear( in vec4 value ) {\n\tfloat Le = value.z * 255.0 + value.w;\n\tvec3 Xp_Y_XYZp;\n\tXp_Y_XYZp.y = exp2( ( Le - 127.0 ) / 2.0 );\n\tXp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\n\tXp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\n\tvec3 vRGB = cLogLuvInverseM * Xp_Y_XYZp.rgb;\n\treturn vec4( max( vRGB, 0.0 ), 1.0 );\n}",
        envmap_fragment: "#ifdef USE_ENVMAP\n\t#ifdef ENV_WORLDPOS\n\t\tvec3 cameraToFrag;\n\t\tif ( isOrthographic ) {\n\t\t\tcameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\t\t} else {\n\t\t\tcameraToFrag = normalize( vWorldPosition - cameraPosition );\n\t\t}\n\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( cameraToFrag, worldNormal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );\n\t\t#endif\n\t#else\n\t\tvec3 reflectVec = vReflect;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tvec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\tvec4 envColor = textureCubeUV( envMap, reflectVec, 0.0 );\n\t#else\n\t\tvec4 envColor = vec4( 0.0 );\n\t#endif\n\t#ifndef ENVMAP_TYPE_CUBE_UV\n\t\tenvColor = envMapTexelToLinear( envColor );\n\t#endif\n\t#ifdef ENVMAP_BLENDING_MULTIPLY\n\t\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_MIX )\n\t\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_ADD )\n\t\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\n\t#endif\n#endif",
        envmap_common_pars_fragment: "#ifdef USE_ENVMAP\n\tuniform float envMapIntensity;\n\tuniform float flipEnvMap;\n\tuniform int maxMipLevel;\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tuniform samplerCube envMap;\n\t#else\n\t\tuniform sampler2D envMap;\n\t#endif\n\t\n#endif",
        envmap_pars_fragment: "#ifdef USE_ENVMAP\n\tuniform float reflectivity;\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\t#define ENV_WORLDPOS\n\t#endif\n\t#ifdef ENV_WORLDPOS\n\t\tvarying vec3 vWorldPosition;\n\t\tuniform float refractionRatio;\n\t#else\n\t\tvarying vec3 vReflect;\n\t#endif\n#endif",
        envmap_pars_vertex: "#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) ||defined( PHONG )\n\t\t#define ENV_WORLDPOS\n\t#endif\n\t#ifdef ENV_WORLDPOS\n\t\t\n\t\tvarying vec3 vWorldPosition;\n\t#else\n\t\tvarying vec3 vReflect;\n\t\tuniform float refractionRatio;\n\t#endif\n#endif",
        envmap_physical_pars_fragment: "#if defined( USE_ENVMAP )\n\t#ifdef ENVMAP_MODE_REFRACTION\n\t\tuniform float refractionRatio;\n\t#endif\n\tvec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\n\t\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\n\t\t#ifdef ENVMAP_TYPE_CUBE\n\t\t\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, worldNormal, 1.0 );\n\t\t#else\n\t\t\tvec4 envMapColor = vec4( 0.0 );\n\t\t#endif\n\t\treturn PI * envMapColor.rgb * envMapIntensity;\n\t}\n\tfloat getSpecularMIPLevel( const in float roughness, const in int maxMIPLevel ) {\n\t\tfloat maxMIPLevelScalar = float( maxMIPLevel );\n\t\tfloat sigma = PI * roughness * roughness / ( 1.0 + roughness );\n\t\tfloat desiredMIPLevel = maxMIPLevelScalar + log2( sigma );\n\t\treturn clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\n\t}\n\tvec3 getLightProbeIndirectRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness, const in int maxMIPLevel ) {\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( -viewDir, normal );\n\t\t\treflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( -viewDir, normal, refractionRatio );\n\t\t#endif\n\t\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n\t\tfloat specularMIPLevel = getSpecularMIPLevel( roughness, maxMIPLevel );\n\t\t#ifdef ENVMAP_TYPE_CUBE\n\t\t\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, reflectVec, roughness );\n\t\t#endif\n\t\treturn envMapColor.rgb * envMapIntensity;\n\t}\n#endif",
        envmap_vertex: "#ifdef USE_ENVMAP\n\t#ifdef ENV_WORLDPOS\n\t\tvWorldPosition = worldPosition.xyz;\n\t#else\n\t\tvec3 cameraToVertex;\n\t\tif ( isOrthographic ) {\n\t\t\tcameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\t\t} else {\n\t\t\tcameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n\t\t}\n\t\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvReflect = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#endif\n#endif",
        fog_vertex: "#ifdef USE_FOG\n\tfogDepth = - mvPosition.z;\n#endif",
        fog_pars_vertex: "#ifdef USE_FOG\n\tvarying float fogDepth;\n#endif",
        fog_fragment: "#ifdef USE_FOG\n\t#ifdef FOG_EXP2\n\t\tfloat fogFactor = 1.0 - exp( - fogDensity * fogDensity * fogDepth * fogDepth );\n\t#else\n\t\tfloat fogFactor = smoothstep( fogNear, fogFar, fogDepth );\n\t#endif\n\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n#endif",
        fog_pars_fragment: "#ifdef USE_FOG\n\tuniform vec3 fogColor;\n\tvarying float fogDepth;\n\t#ifdef FOG_EXP2\n\t\tuniform float fogDensity;\n\t#else\n\t\tuniform float fogNear;\n\t\tuniform float fogFar;\n\t#endif\n#endif",
        gradientmap_pars_fragment: "#ifdef USE_GRADIENTMAP\n\tuniform sampler2D gradientMap;\n#endif\nvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\n\tfloat dotNL = dot( normal, lightDirection );\n\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\n\t#ifdef USE_GRADIENTMAP\n\t\treturn texture2D( gradientMap, coord ).rgb;\n\t#else\n\t\treturn ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );\n\t#endif\n}",
        lightmap_fragment: "#ifdef USE_LIGHTMAP\n\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\n\treflectedLight.indirectDiffuse += PI * lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\n#endif",
        lightmap_pars_fragment: "#ifdef USE_LIGHTMAP\n\tuniform sampler2D lightMap;\n\tuniform float lightMapIntensity;\n#endif",
        lights_lambert_vertex: "vec3 diffuse = vec3( 1.0 );\nGeometricContext geometry;\ngeometry.position = mvPosition.xyz;\ngeometry.normal = normalize( transformedNormal );\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( -mvPosition.xyz );\nGeometricContext backGeometry;\nbackGeometry.position = geometry.position;\nbackGeometry.normal = -geometry.normal;\nbackGeometry.viewDir = geometry.viewDir;\nvLightFront = vec3( 0.0 );\nvIndirectFront = vec3( 0.0 );\n#ifdef DOUBLE_SIDED\n\tvLightBack = vec3( 0.0 );\n\tvIndirectBack = vec3( 0.0 );\n#endif\nIncidentLight directLight;\nfloat dotNL;\nvec3 directLightColor_Diffuse;\nvIndirectFront += getAmbientLightIrradiance( ambientLightColor );\nvIndirectFront += getLightProbeIrradiance( lightProbe, geometry );\n#ifdef DOUBLE_SIDED\n\tvIndirectBack += getAmbientLightIrradiance( ambientLightColor );\n\tvIndirectBack += getLightProbeIrradiance( lightProbe, backGeometry );\n#endif\n#if NUM_POINT_LIGHTS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tgetPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tgetSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if NUM_DIR_LIGHTS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tgetDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\tvIndirectFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvIndirectBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif",
        lights_pars_begin: "uniform bool receiveShadow;\nuniform vec3 ambientLightColor;\nuniform vec3 lightProbe[ 9 ];\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\n\tfloat x = normal.x, y = normal.y, z = normal.z;\n\tvec3 result = shCoefficients[ 0 ] * 0.886227;\n\tresult += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\n\tresult += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\n\tresult += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\n\tresult += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\n\tresult += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\n\tresult += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\n\tresult += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\n\tresult += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\n\treturn result;\n}\nvec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in GeometricContext geometry ) {\n\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\n\tvec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );\n\treturn irradiance;\n}\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n\tvec3 irradiance = ambientLightColor;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treturn irradiance;\n}\n#if NUM_DIR_LIGHTS > 0\n\tstruct DirectionalLight {\n\t\tvec3 direction;\n\t\tvec3 color;\n\t};\n\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n\tvoid getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\t\tdirectLight.color = directionalLight.color;\n\t\tdirectLight.direction = directionalLight.direction;\n\t\tdirectLight.visible = true;\n\t}\n#endif\n#if NUM_POINT_LIGHTS > 0\n\tstruct PointLight {\n\t\tvec3 position;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t};\n\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n\tvoid getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\t\tvec3 lVector = pointLight.position - geometry.position;\n\t\tdirectLight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tdirectLight.color = pointLight.color;\n\t\tdirectLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\n\t\tdirectLight.visible = ( directLight.color != vec3( 0.0 ) );\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\tstruct SpotLight {\n\t\tvec3 position;\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tfloat coneCos;\n\t\tfloat penumbraCos;\n\t};\n\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n\tvoid getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\t\tvec3 lVector = spotLight.position - geometry.position;\n\t\tdirectLight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tfloat angleCos = dot( directLight.direction, spotLight.direction );\n\t\tif ( angleCos > spotLight.coneCos ) {\n\t\t\tfloat spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n\t\t\tdirectLight.color = spotLight.color;\n\t\t\tdirectLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\n\t\t\tdirectLight.visible = true;\n\t\t} else {\n\t\t\tdirectLight.color = vec3( 0.0 );\n\t\t\tdirectLight.visible = false;\n\t\t}\n\t}\n#endif\n#if NUM_RECT_AREA_LIGHTS > 0\n\tstruct RectAreaLight {\n\t\tvec3 color;\n\t\tvec3 position;\n\t\tvec3 halfWidth;\n\t\tvec3 halfHeight;\n\t};\n\tuniform sampler2D ltc_1;\tuniform sampler2D ltc_2;\n\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\tstruct HemisphereLight {\n\t\tvec3 direction;\n\t\tvec3 skyColor;\n\t\tvec3 groundColor;\n\t};\n\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\n\t\tfloat dotNL = dot( geometry.normal, hemiLight.direction );\n\t\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n\t\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tirradiance *= PI;\n\t\t#endif\n\t\treturn irradiance;\n\t}\n#endif",
        lights_toon_fragment: "ToonMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;",
        lights_toon_pars_fragment: "varying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\nstruct ToonMaterial {\n\tvec3 diffuseColor;\n};\nvoid RE_Direct_Toon( const in IncidentLight directLight, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n\tvec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_Toon\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Toon\n#define Material_LightProbeLOD( material )\t(0)",
        lights_phong_fragment: "BlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;",
        lights_phong_pars_fragment: "varying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\nstruct BlinnPhongMaterial {\n\tvec3 diffuseColor;\n\tvec3 specularColor;\n\tfloat specularShininess;\n\tfloat specularStrength;\n};\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_BlinnPhong\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_BlinnPhong\n#define Material_LightProbeLOD( material )\t(0)",
        lights_physical_fragment: "PhysicalMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\nvec3 dxy = max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );\nfloat geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );\nmaterial.specularRoughness = max( roughnessFactor, 0.0525 );material.specularRoughness += geometryRoughness;\nmaterial.specularRoughness = min( material.specularRoughness, 1.0 );\n#ifdef REFLECTIVITY\n\tmaterial.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( reflectivity ) ), diffuseColor.rgb, metalnessFactor );\n#else\n\tmaterial.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor.rgb, metalnessFactor );\n#endif\n#ifdef CLEARCOAT\n\tmaterial.clearcoat = clearcoat;\n\tmaterial.clearcoatRoughness = clearcoatRoughness;\n\t#ifdef USE_CLEARCOATMAP\n\t\tmaterial.clearcoat *= texture2D( clearcoatMap, vUv ).x;\n\t#endif\n\t#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\t\tmaterial.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vUv ).y;\n\t#endif\n\tmaterial.clearcoat = saturate( material.clearcoat );\tmaterial.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );\n\tmaterial.clearcoatRoughness += geometryRoughness;\n\tmaterial.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );\n#endif\n#ifdef USE_SHEEN\n\tmaterial.sheenColor = sheen;\n#endif",
        lights_physical_pars_fragment: "struct PhysicalMaterial {\n\tvec3 diffuseColor;\n\tfloat specularRoughness;\n\tvec3 specularColor;\n#ifdef CLEARCOAT\n\tfloat clearcoat;\n\tfloat clearcoatRoughness;\n#endif\n#ifdef USE_SHEEN\n\tvec3 sheenColor;\n#endif\n};\n#define MAXIMUM_SPECULAR_COEFFICIENT 0.16\n#define DEFAULT_SPECULAR_COEFFICIENT 0.04\nfloat clearcoatDHRApprox( const in float roughness, const in float dotNL ) {\n\treturn DEFAULT_SPECULAR_COEFFICIENT + ( 1.0 - DEFAULT_SPECULAR_COEFFICIENT ) * ( pow( 1.0 - dotNL, 5.0 ) * pow( 1.0 - roughness, 2.0 ) );\n}\n#if NUM_RECT_AREA_LIGHTS > 0\n\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\t\tvec3 normal = geometry.normal;\n\t\tvec3 viewDir = geometry.viewDir;\n\t\tvec3 position = geometry.position;\n\t\tvec3 lightPos = rectAreaLight.position;\n\t\tvec3 halfWidth = rectAreaLight.halfWidth;\n\t\tvec3 halfHeight = rectAreaLight.halfHeight;\n\t\tvec3 lightColor = rectAreaLight.color;\n\t\tfloat roughness = material.specularRoughness;\n\t\tvec3 rectCoords[ 4 ];\n\t\trectCoords[ 0 ] = lightPos + halfWidth - halfHeight;\t\trectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\n\t\trectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\n\t\trectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\n\t\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\n\t\tvec4 t1 = texture2D( ltc_1, uv );\n\t\tvec4 t2 = texture2D( ltc_2, uv );\n\t\tmat3 mInv = mat3(\n\t\t\tvec3( t1.x, 0, t1.y ),\n\t\t\tvec3(		0, 1,		0 ),\n\t\t\tvec3( t1.z, 0, t1.w )\n\t\t);\n\t\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\n\t\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\n\t\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\n\t}\n#endif\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\t#ifdef CLEARCOAT\n\t\tfloat ccDotNL = saturate( dot( geometry.clearcoatNormal, directLight.direction ) );\n\t\tvec3 ccIrradiance = ccDotNL * directLight.color;\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tccIrradiance *= PI;\n\t\t#endif\n\t\tfloat clearcoatDHR = material.clearcoat * clearcoatDHRApprox( material.clearcoatRoughness, ccDotNL );\n\t\treflectedLight.directSpecular += ccIrradiance * material.clearcoat * BRDF_Specular_GGX( directLight, geometry.viewDir, geometry.clearcoatNormal, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearcoatRoughness );\n\t#else\n\t\tfloat clearcoatDHR = 0.0;\n\t#endif\n\t#ifdef USE_SHEEN\n\t\treflectedLight.directSpecular += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Specular_Sheen(\n\t\t\tmaterial.specularRoughness,\n\t\t\tdirectLight.direction,\n\t\t\tgeometry,\n\t\t\tmaterial.sheenColor\n\t\t);\n\t#else\n\t\treflectedLight.directSpecular += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Specular_GGX( directLight, geometry.viewDir, geometry.normal, material.specularColor, material.specularRoughness);\n\t#endif\n\treflectedLight.directDiffuse += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\n\t#ifdef CLEARCOAT\n\t\tfloat ccDotNV = saturate( dot( geometry.clearcoatNormal, geometry.viewDir ) );\n\t\treflectedLight.indirectSpecular += clearcoatRadiance * material.clearcoat * BRDF_Specular_GGX_Environment( geometry.viewDir, geometry.clearcoatNormal, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearcoatRoughness );\n\t\tfloat ccDotNL = ccDotNV;\n\t\tfloat clearcoatDHR = material.clearcoat * clearcoatDHRApprox( material.clearcoatRoughness, ccDotNL );\n\t#else\n\t\tfloat clearcoatDHR = 0.0;\n\t#endif\n\tfloat clearcoatInv = 1.0 - clearcoatDHR;\n\tvec3 singleScattering = vec3( 0.0 );\n\tvec3 multiScattering = vec3( 0.0 );\n\tvec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\n\tBRDF_Specular_Multiscattering_Environment( geometry, material.specularColor, material.specularRoughness, singleScattering, multiScattering );\n\tvec3 diffuse = material.diffuseColor * ( 1.0 - ( singleScattering + multiScattering ) );\n\treflectedLight.indirectSpecular += clearcoatInv * radiance * singleScattering;\n\treflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;\n\treflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\n}\n#define RE_Direct\t\t\t\tRE_Direct_Physical\n#define RE_Direct_RectArea\t\tRE_Direct_RectArea_Physical\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular\t\tRE_IndirectSpecular_Physical\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n}",
        lights_fragment_begin: "\nGeometricContext geometry;\ngeometry.position = - vViewPosition;\ngeometry.normal = normal;\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\n#ifdef CLEARCOAT\n\tgeometry.clearcoatNormal = clearcoatNormal;\n#endif\nIncidentLight directLight;\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n\tPointLight pointLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0\n\tPointLightShadow pointLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tgetPointDirectLightIrradiance( pointLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\n\t\tpointLightShadow = pointLightShadows[ i ];\n\t\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n\tSpotLight spotLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0\n\tSpotLightShadow spotLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tgetSpotDirectLightIrradiance( spotLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n\t\tspotLightShadow = spotLightShadows[ i ];\n\t\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n\tDirectionalLight directionalLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0\n\tDirectionalLightShadow directionalLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tgetDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\n\t\tdirectionalLightShadow = directionalLightShadows[ i ];\n\t\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\n\tRectAreaLight rectAreaLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\n\t\trectAreaLight = rectAreaLights[ i ];\n\t\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if defined( RE_IndirectDiffuse )\n\tvec3 iblIrradiance = vec3( 0.0 );\n\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n\tirradiance += getLightProbeIrradiance( lightProbe, geometry );\n\t#if ( NUM_HEMI_LIGHTS > 0 )\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\t\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n\t\t}\n\t\t#pragma unroll_loop_end\n\t#endif\n#endif\n#if defined( RE_IndirectSpecular )\n\tvec3 radiance = vec3( 0.0 );\n\tvec3 clearcoatRadiance = vec3( 0.0 );\n#endif",
        lights_fragment_maps: "#if defined( RE_IndirectDiffuse )\n\t#ifdef USE_LIGHTMAP\n\t\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\n\t\tvec3 lightMapIrradiance = lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tlightMapIrradiance *= PI;\n\t\t#endif\n\t\tirradiance += lightMapIrradiance;\n\t#endif\n\t#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )\n\t\tiblIrradiance += getLightProbeIndirectIrradiance( geometry, maxMipLevel );\n\t#endif\n#endif\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n\tradiance += getLightProbeIndirectRadiance( geometry.viewDir, geometry.normal, material.specularRoughness, maxMipLevel );\n\t#ifdef CLEARCOAT\n\t\tclearcoatRadiance += getLightProbeIndirectRadiance( geometry.viewDir, geometry.clearcoatNormal, material.clearcoatRoughness, maxMipLevel );\n\t#endif\n#endif",
        lights_fragment_end: "#if defined( RE_IndirectDiffuse )\n\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\n#endif\n#if defined( RE_IndirectSpecular )\n\tRE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometry, material, reflectedLight );\n#endif",
        logdepthbuf_fragment: "#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tgl_FragDepthEXT = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;\n#endif",
        logdepthbuf_pars_fragment: "#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tuniform float logDepthBufFC;\n\tvarying float vFragDepth;\n\tvarying float vIsPerspective;\n#endif",
        logdepthbuf_pars_vertex: "#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvarying float vFragDepth;\n\t\tvarying float vIsPerspective;\n\t#else\n\t\tuniform float logDepthBufFC;\n\t#endif\n#endif",
        logdepthbuf_vertex: "#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvFragDepth = 1.0 + gl_Position.w;\n\t\tvIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );\n\t#else\n\t\tif ( isPerspectiveMatrix( projectionMatrix ) ) {\n\t\t\tgl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\n\t\t\tgl_Position.z *= gl_Position.w;\n\t\t}\n\t#endif\n#endif",
        map_fragment: "#ifdef USE_MAP\n\tvec4 texelColor = texture2D( map, vUv );\n\ttexelColor = mapTexelToLinear( texelColor );\n\tdiffuseColor *= texelColor;\n#endif",
        map_pars_fragment: "#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif",
        map_particle_fragment: "#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\n#endif\n#ifdef USE_MAP\n\tvec4 mapTexel = texture2D( map, uv );\n\tdiffuseColor *= mapTexelToLinear( mapTexel );\n#endif\n#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, uv ).g;\n#endif",
        map_particle_pars_fragment: "#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\tuniform mat3 uvTransform;\n#endif\n#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif\n#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif",
        metalnessmap_fragment: "float metalnessFactor = metalness;\n#ifdef USE_METALNESSMAP\n\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\n\tmetalnessFactor *= texelMetalness.b;\n#endif",
        metalnessmap_pars_fragment: "#ifdef USE_METALNESSMAP\n\tuniform sampler2D metalnessMap;\n#endif",
        morphnormal_vertex: "#ifdef USE_MORPHNORMALS\n\tobjectNormal *= morphTargetBaseInfluence;\n\tobjectNormal += morphNormal0 * morphTargetInfluences[ 0 ];\n\tobjectNormal += morphNormal1 * morphTargetInfluences[ 1 ];\n\tobjectNormal += morphNormal2 * morphTargetInfluences[ 2 ];\n\tobjectNormal += morphNormal3 * morphTargetInfluences[ 3 ];\n#endif",
        morphtarget_pars_vertex: "#ifdef USE_MORPHTARGETS\n\tuniform float morphTargetBaseInfluence;\n\t#ifndef USE_MORPHNORMALS\n\t\tuniform float morphTargetInfluences[ 8 ];\n\t#else\n\t\tuniform float morphTargetInfluences[ 4 ];\n\t#endif\n#endif",
        morphtarget_vertex: "#ifdef USE_MORPHTARGETS\n\ttransformed *= morphTargetBaseInfluence;\n\ttransformed += morphTarget0 * morphTargetInfluences[ 0 ];\n\ttransformed += morphTarget1 * morphTargetInfluences[ 1 ];\n\ttransformed += morphTarget2 * morphTargetInfluences[ 2 ];\n\ttransformed += morphTarget3 * morphTargetInfluences[ 3 ];\n\t#ifndef USE_MORPHNORMALS\n\t\ttransformed += morphTarget4 * morphTargetInfluences[ 4 ];\n\t\ttransformed += morphTarget5 * morphTargetInfluences[ 5 ];\n\t\ttransformed += morphTarget6 * morphTargetInfluences[ 6 ];\n\t\ttransformed += morphTarget7 * morphTargetInfluences[ 7 ];\n\t#endif\n#endif",
        normal_fragment_begin: "#ifdef FLAT_SHADED\n\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\n\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\n\tvec3 normal = normalize( cross( fdx, fdy ) );\n#else\n\tvec3 normal = normalize( vNormal );\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t#endif\n\t#ifdef USE_TANGENT\n\t\tvec3 tangent = normalize( vTangent );\n\t\tvec3 bitangent = normalize( vBitangent );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\ttangent = tangent * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\t\tbitangent = bitangent * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\t#endif\n\t\t#if defined( TANGENTSPACE_NORMALMAP ) || defined( USE_CLEARCOAT_NORMALMAP )\n\t\t\tmat3 vTBN = mat3( tangent, bitangent, normal );\n\t\t#endif\n\t#endif\n#endif\nvec3 geometryNormal = normal;",
        normal_fragment_maps: "#ifdef OBJECTSPACE_NORMALMAP\n\tnormal = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\t#ifdef FLIP_SIDED\n\t\tnormal = - normal;\n\t#endif\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t#endif\n\tnormal = normalize( normalMatrix * normal );\n#elif defined( TANGENTSPACE_NORMALMAP )\n\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\tmapN.xy *= normalScale;\n\t#ifdef USE_TANGENT\n\t\tnormal = normalize( vTBN * mapN );\n\t#else\n\t\tnormal = perturbNormal2Arb( -vViewPosition, normal, mapN );\n\t#endif\n#elif defined( USE_BUMPMAP )\n\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\n#endif",
        normalmap_pars_fragment: "#ifdef USE_NORMALMAP\n\tuniform sampler2D normalMap;\n\tuniform vec2 normalScale;\n#endif\n#ifdef OBJECTSPACE_NORMALMAP\n\tuniform mat3 normalMatrix;\n#endif\n#if ! defined ( USE_TANGENT ) && ( defined ( TANGENTSPACE_NORMALMAP ) || defined ( USE_CLEARCOAT_NORMALMAP ) )\n\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm, vec3 mapN ) {\n\t\tvec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\n\t\tvec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\n\t\tvec2 st0 = dFdx( vUv.st );\n\t\tvec2 st1 = dFdy( vUv.st );\n\t\tfloat scale = sign( st1.t * st0.s - st0.t * st1.s );\n\t\tvec3 S = normalize( ( q0 * st1.t - q1 * st0.t ) * scale );\n\t\tvec3 T = normalize( ( - q0 * st1.s + q1 * st0.s ) * scale );\n\t\tvec3 N = normalize( surf_norm );\n\t\tmat3 tsn = mat3( S, T, N );\n\t\tmapN.xy *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\treturn normalize( tsn * mapN );\n\t}\n#endif",
        clearcoat_normal_fragment_begin: "#ifdef CLEARCOAT\n\tvec3 clearcoatNormal = geometryNormal;\n#endif",
        clearcoat_normal_fragment_maps: "#ifdef USE_CLEARCOAT_NORMALMAP\n\tvec3 clearcoatMapN = texture2D( clearcoatNormalMap, vUv ).xyz * 2.0 - 1.0;\n\tclearcoatMapN.xy *= clearcoatNormalScale;\n\t#ifdef USE_TANGENT\n\t\tclearcoatNormal = normalize( vTBN * clearcoatMapN );\n\t#else\n\t\tclearcoatNormal = perturbNormal2Arb( - vViewPosition, clearcoatNormal, clearcoatMapN );\n\t#endif\n#endif",
        clearcoat_pars_fragment: "#ifdef USE_CLEARCOATMAP\n\tuniform sampler2D clearcoatMap;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\tuniform sampler2D clearcoatRoughnessMap;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\tuniform sampler2D clearcoatNormalMap;\n\tuniform vec2 clearcoatNormalScale;\n#endif",
        packing: "vec3 packNormalToRGB( const in vec3 normal ) {\n\treturn normalize( normal ) * 0.5 + 0.5;\n}\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n\treturn 2.0 * rgb.xyz - 1.0;\n}\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256., 256. );\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\nconst float ShiftRight8 = 1. / 256.;\nvec4 packDepthToRGBA( const in float v ) {\n\tvec4 r = vec4( fract( v * PackFactors ), v );\n\tr.yzw -= r.xyz * ShiftRight8;\treturn r * PackUpscale;\n}\nfloat unpackRGBAToDepth( const in vec4 v ) {\n\treturn dot( v, UnpackFactors );\n}\nvec4 pack2HalfToRGBA( vec2 v ) {\n\tvec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ));\n\treturn vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w);\n}\nvec2 unpackRGBATo2Half( vec4 v ) {\n\treturn vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );\n}\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( viewZ + near ) / ( near - far );\n}\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\n\treturn linearClipZ * ( near - far ) - near;\n}\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn (( near + viewZ ) * far ) / (( far - near ) * viewZ );\n}\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\n\treturn ( near * far ) / ( ( far - near ) * invClipZ - far );\n}",
        premultiplied_alpha_fragment: "#ifdef PREMULTIPLIED_ALPHA\n\tgl_FragColor.rgb *= gl_FragColor.a;\n#endif",
        project_vertex: "vec4 mvPosition = vec4( transformed, 1.0 );\n#ifdef USE_INSTANCING\n\tmvPosition = instanceMatrix * mvPosition;\n#endif\nmvPosition = modelViewMatrix * mvPosition;\ngl_Position = projectionMatrix * mvPosition;",
        dithering_fragment: "#ifdef DITHERING\n\tgl_FragColor.rgb = dithering( gl_FragColor.rgb );\n#endif",
        dithering_pars_fragment: "#ifdef DITHERING\n\tvec3 dithering( vec3 color ) {\n\t\tfloat grid_position = rand( gl_FragCoord.xy );\n\t\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\n\t\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\n\t\treturn color + dither_shift_RGB;\n\t}\n#endif",
        roughnessmap_fragment: "float roughnessFactor = roughness;\n#ifdef USE_ROUGHNESSMAP\n\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\n\troughnessFactor *= texelRoughness.g;\n#endif",
        roughnessmap_pars_fragment: "#ifdef USE_ROUGHNESSMAP\n\tuniform sampler2D roughnessMap;\n#endif",
        shadowmap_pars_fragment: "#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tstruct DirectionalLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tstruct SpotLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tstruct PointLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t\tfloat shadowCameraNear;\n\t\t\tfloat shadowCameraFar;\n\t\t};\n\t\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n\t\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n\t}\n\tvec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {\n\t\treturn unpackRGBATo2Half( texture2D( shadow, uv ) );\n\t}\n\tfloat VSMShadow (sampler2D shadow, vec2 uv, float compare ){\n\t\tfloat occlusion = 1.0;\n\t\tvec2 distribution = texture2DDistribution( shadow, uv );\n\t\tfloat hard_shadow = step( compare , distribution.x );\n\t\tif (hard_shadow != 1.0 ) {\n\t\t\tfloat distance = compare - distribution.x ;\n\t\t\tfloat variance = max( 0.00000, distribution.y * distribution.y );\n\t\t\tfloat softness_probability = variance / (variance + distance * distance );\t\t\tsoftness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );\t\t\tocclusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );\n\t\t}\n\t\treturn occlusion;\n\t}\n\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n\t\tfloat shadow = 1.0;\n\t\tshadowCoord.xyz /= shadowCoord.w;\n\t\tshadowCoord.z += shadowBias;\n\t\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\n\t\tbool inFrustum = all( inFrustumVec );\n\t\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\n\t\tbool frustumTest = all( frustumTestVec );\n\t\tif ( frustumTest ) {\n\t\t#if defined( SHADOWMAP_TYPE_PCF )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\tfloat dx2 = dx0 / 2.0;\n\t\t\tfloat dy2 = dy0 / 2.0;\n\t\t\tfloat dx3 = dx1 / 2.0;\n\t\t\tfloat dy3 = dy1 / 2.0;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 17.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx = texelSize.x;\n\t\t\tfloat dy = texelSize.y;\n\t\t\tvec2 uv = shadowCoord.xy;\n\t\t\tvec2 f = fract( uv * shadowMapSize + 0.5 );\n\t\t\tuv -= f * texelSize;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, uv, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),\n\t\t\t\t\t f.x ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),\n\t\t\t\t\t f.x ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t f.y ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t f.y ) +\n\t\t\t\tmix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ), \n\t\t\t\t\t\t	texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),\n\t\t\t\t\t\t	f.x ),\n\t\t\t\t\t mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ), \n\t\t\t\t\t\t	texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t\t	f.x ),\n\t\t\t\t\t f.y )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_VSM )\n\t\t\tshadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#else\n\t\t\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#endif\n\t\t}\n\t\treturn shadow;\n\t}\n\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\n\t\tvec3 absV = abs( v );\n\t\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n\t\tabsV *= scaleToCube;\n\t\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n\t\tvec2 planar = v.xy;\n\t\tfloat almostATexel = 1.5 * texelSizeY;\n\t\tfloat almostOne = 1.0 - almostATexel;\n\t\tif ( absV.z >= almostOne ) {\n\t\t\tif ( v.z > 0.0 )\n\t\t\t\tplanar.x = 4.0 - v.x;\n\t\t} else if ( absV.x >= almostOne ) {\n\t\t\tfloat signX = sign( v.x );\n\t\t\tplanar.x = v.z * signX + 2.0 * signX;\n\t\t} else if ( absV.y >= almostOne ) {\n\t\t\tfloat signY = sign( v.y );\n\t\t\tplanar.x = v.x + 2.0 * signY + 2.0;\n\t\t\tplanar.y = v.z * signY - 2.0;\n\t\t}\n\t\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n\t}\n\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\n\t\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n\t\tvec3 lightToPosition = shadowCoord.xyz;\n\t\tfloat dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\t\tdp += shadowBias;\n\t\tvec3 bd3D = normalize( lightToPosition );\n\t\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )\n\t\t\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n\t\t\treturn (\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#else\n\t\t\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n\t\t#endif\n\t}\n#endif",
        shadowmap_pars_vertex: "#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tstruct DirectionalLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tstruct SpotLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tstruct PointLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t\tfloat shadowCameraNear;\n\t\t\tfloat shadowCameraFar;\n\t\t};\n\t\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n#endif",
        shadowmap_vertex: "#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0 || NUM_SPOT_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0\n\t\tvec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t\tvec4 shadowWorldPosition;\n\t#endif\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );\n\t\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias, 0 );\n\t\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * shadowWorldPosition;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );\n\t\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n#endif",
        shadowmask_pars_fragment: "float getShadowMask() {\n\tfloat shadow = 1.0;\n\t#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\tDirectionalLightShadow directionalLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\t\tdirectionalLight = directionalLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\tSpotLightShadow spotLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n\t\tspotLight = spotLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\tPointLightShadow pointLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\t\tpointLight = pointLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#endif\n\treturn shadow;\n}",
        skinbase_vertex: "#ifdef USE_SKINNING\n\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\n\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\n\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\n\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif",
        skinning_pars_vertex: "#ifdef USE_SKINNING\n\tuniform mat4 bindMatrix;\n\tuniform mat4 bindMatrixInverse;\n\t#ifdef BONE_TEXTURE\n\t\tuniform highp sampler2D boneTexture;\n\t\tuniform int boneTextureSize;\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tfloat j = i * 4.0;\n\t\t\tfloat x = mod( j, float( boneTextureSize ) );\n\t\t\tfloat y = floor( j / float( boneTextureSize ) );\n\t\t\tfloat dx = 1.0 / float( boneTextureSize );\n\t\t\tfloat dy = 1.0 / float( boneTextureSize );\n\t\t\ty = dy * ( y + 0.5 );\n\t\t\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\n\t\t\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\n\t\t\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\n\t\t\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\n\t\t\tmat4 bone = mat4( v1, v2, v3, v4 );\n\t\t\treturn bone;\n\t\t}\n\t#else\n\t\tuniform mat4 boneMatrices[ MAX_BONES ];\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tmat4 bone = boneMatrices[ int(i) ];\n\t\t\treturn bone;\n\t\t}\n\t#endif\n#endif",
        skinning_vertex: "#ifdef USE_SKINNING\n\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n\tvec4 skinned = vec4( 0.0 );\n\tskinned += boneMatX * skinVertex * skinWeight.x;\n\tskinned += boneMatY * skinVertex * skinWeight.y;\n\tskinned += boneMatZ * skinVertex * skinWeight.z;\n\tskinned += boneMatW * skinVertex * skinWeight.w;\n\ttransformed = ( bindMatrixInverse * skinned ).xyz;\n#endif",
        skinnormal_vertex: "#ifdef USE_SKINNING\n\tmat4 skinMatrix = mat4( 0.0 );\n\tskinMatrix += skinWeight.x * boneMatX;\n\tskinMatrix += skinWeight.y * boneMatY;\n\tskinMatrix += skinWeight.z * boneMatZ;\n\tskinMatrix += skinWeight.w * boneMatW;\n\tskinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;\n\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n\t#ifdef USE_TANGENT\n\t\tobjectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n\t#endif\n#endif",
        specularmap_fragment: "float specularStrength;\n#ifdef USE_SPECULARMAP\n\tvec4 texelSpecular = texture2D( specularMap, vUv );\n\tspecularStrength = texelSpecular.r;\n#else\n\tspecularStrength = 1.0;\n#endif",
        specularmap_pars_fragment: "#ifdef USE_SPECULARMAP\n\tuniform sampler2D specularMap;\n#endif",
        tonemapping_fragment: "#if defined( TONE_MAPPING )\n\tgl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n#endif",
        tonemapping_pars_fragment: "#ifndef saturate\n#define saturate(a) clamp( a, 0.0, 1.0 )\n#endif\nuniform float toneMappingExposure;\nvec3 LinearToneMapping( vec3 color ) {\n\treturn toneMappingExposure * color;\n}\nvec3 ReinhardToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( color / ( vec3( 1.0 ) + color ) );\n}\nvec3 OptimizedCineonToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\tcolor = max( vec3( 0.0 ), color - 0.004 );\n\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n}\nvec3 RRTAndODTFit( vec3 v ) {\n\tvec3 a = v * ( v + 0.0245786 ) - 0.000090537;\n\tvec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;\n\treturn a / b;\n}\nvec3 ACESFilmicToneMapping( vec3 color ) {\n\tconst mat3 ACESInputMat = mat3(\n\t\tvec3( 0.59719, 0.07600, 0.02840 ),\t\tvec3( 0.35458, 0.90834, 0.13383 ),\n\t\tvec3( 0.04823, 0.01566, 0.83777 )\n\t);\n\tconst mat3 ACESOutputMat = mat3(\n\t\tvec3(	1.60475, -0.10208, -0.00327 ),\t\tvec3( -0.53108,	1.10813, -0.07276 ),\n\t\tvec3( -0.07367, -0.00605,	1.07602 )\n\t);\n\tcolor *= toneMappingExposure / 0.6;\n\tcolor = ACESInputMat * color;\n\tcolor = RRTAndODTFit( color );\n\tcolor = ACESOutputMat * color;\n\treturn saturate( color );\n}\nvec3 CustomToneMapping( vec3 color ) { return color; }",
        transmissionmap_fragment: "#ifdef USE_TRANSMISSIONMAP\n\ttotalTransmission *= texture2D( transmissionMap, vUv ).r;\n#endif",
        transmissionmap_pars_fragment: "#ifdef USE_TRANSMISSIONMAP\n\tuniform sampler2D transmissionMap;\n#endif",
        uv_pars_fragment: "#if ( defined( USE_UV ) && ! defined( UVS_VERTEX_ONLY ) )\n\tvarying vec2 vUv;\n#endif",
        uv_pars_vertex: "#ifdef USE_UV\n\t#ifdef UVS_VERTEX_ONLY\n\t\tvec2 vUv;\n\t#else\n\t\tvarying vec2 vUv;\n\t#endif\n\tuniform mat3 uvTransform;\n#endif",
        uv_vertex: "#ifdef USE_UV\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n#endif",
        uv2_pars_fragment: "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvarying vec2 vUv2;\n#endif",
        uv2_pars_vertex: "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tattribute vec2 uv2;\n\tvarying vec2 vUv2;\n\tuniform mat3 uv2Transform;\n#endif",
        uv2_vertex: "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvUv2 = ( uv2Transform * vec3( uv2, 1 ) ).xy;\n#endif",
        worldpos_vertex: "#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP )\n\tvec4 worldPosition = vec4( transformed, 1.0 );\n\t#ifdef USE_INSTANCING\n\t\tworldPosition = instanceMatrix * worldPosition;\n\t#endif\n\tworldPosition = modelMatrix * worldPosition;\n#endif",
        background_frag: "uniform sampler2D t2D;\nvarying vec2 vUv;\nvoid main() {\n\tvec4 texColor = texture2D( t2D, vUv );\n\tgl_FragColor = mapTexelToLinear( texColor );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}",
        background_vert: "varying vec2 vUv;\nuniform mat3 uvTransform;\nvoid main() {\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n\tgl_Position = vec4( position.xy, 1.0, 1.0 );\n}",
        cube_frag: "#include <envmap_common_pars_fragment>\nuniform float opacity;\nvarying vec3 vWorldDirection;\n#include <cube_uv_reflection_fragment>\nvoid main() {\n\tvec3 vReflect = vWorldDirection;\n\t#include <envmap_fragment>\n\tgl_FragColor = envColor;\n\tgl_FragColor.a *= opacity;\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}",
        cube_vert: "varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\tgl_Position.z = gl_Position.w;\n}",
        depth_frag: "#if DEPTH_PACKING == 3200\n\tuniform float opacity;\n#endif\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#if DEPTH_PACKING == 3200\n\t\tdiffuseColor.a = opacity;\n\t#endif\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <logdepthbuf_fragment>\n\tfloat fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\n\t#if DEPTH_PACKING == 3200\n\t\tgl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );\n\t#elif DEPTH_PACKING == 3201\n\t\tgl_FragColor = packDepthToRGBA( fragCoordZ );\n\t#endif\n}",
        depth_vert: "#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvHighPrecisionZW = gl_Position.zw;\n}",
        distanceRGBA_frag: "#define DISTANCE\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec3 vWorldPosition;\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main () {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\tfloat dist = length( vWorldPosition - referencePosition );\n\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\n\tdist = saturate( dist );\n\tgl_FragColor = packDepthToRGBA( dist );\n}",
        distanceRGBA_vert: "#define DISTANCE\nvarying vec3 vWorldPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\tvWorldPosition = worldPosition.xyz;\n}",
        equirect_frag: "uniform sampler2D tEquirect;\nvarying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvec3 direction = normalize( vWorldDirection );\n\tvec2 sampleUV = equirectUv( direction );\n\tvec4 texColor = texture2D( tEquirect, sampleUV );\n\tgl_FragColor = mapTexelToLinear( texColor );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}",
        equirect_vert: "varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n}",
        linedashed_frag: "uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\n\t\tdiscard;\n\t}\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <color_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n}",
        linedashed_vert: "uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\tvLineDistance = scale * lineDistance;\n\t#include <color_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}",
        meshbasic_frag: "uniform vec3 diffuse;\nuniform float opacity;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\t#ifdef USE_LIGHTMAP\n\t\n\t\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\n\t\treflectedLight.indirectDiffuse += lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\n\t#else\n\t\treflectedLight.indirectDiffuse += vec3( 1.0 );\n\t#endif\n\t#include <aomap_fragment>\n\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\n\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",
        meshbasic_vert: "#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_ENVMAP\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <envmap_vertex>\n\t#include <fog_vertex>\n}",
        meshlambert_frag: "uniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\nvarying vec3 vLightFront;\nvarying vec3 vIndirectFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n\tvarying vec3 vIndirectBack;\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <fog_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <emissivemap_fragment>\n\t#ifdef DOUBLE_SIDED\n\t\treflectedLight.indirectDiffuse += ( gl_FrontFacing ) ? vIndirectFront : vIndirectBack;\n\t#else\n\t\treflectedLight.indirectDiffuse += vIndirectFront;\n\t#endif\n\t#include <lightmap_fragment>\n\treflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\n\t#ifdef DOUBLE_SIDED\n\t\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\n\t#else\n\t\treflectedLight.directDiffuse = vLightFront;\n\t#endif\n\treflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",
        meshlambert_vert: "#define LAMBERT\nvarying vec3 vLightFront;\nvarying vec3 vIndirectFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n\tvarying vec3 vIndirectBack;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <lights_lambert_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",
        meshmatcap_frag: "#define MATCAP\nuniform vec3 diffuse;\nuniform float opacity;\nuniform sampler2D matcap;\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tvec3 viewDir = normalize( vViewPosition );\n\tvec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\n\tvec3 y = cross( viewDir, x );\n\tvec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\n\t#ifdef USE_MATCAP\n\t\tvec4 matcapColor = texture2D( matcap, uv );\n\t\tmatcapColor = matcapTexelToLinear( matcapColor );\n\t#else\n\t\tvec4 matcapColor = vec4( 1.0 );\n\t#endif\n\tvec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",
        meshmatcap_vert: "#define MATCAP\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <color_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#ifndef FLAT_SHADED\n\t\tvNormal = normalize( transformedNormal );\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n\tvViewPosition = - mvPosition.xyz;\n}",
        meshtoon_frag: "#define TOON\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <gradientmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <lights_toon_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_toon_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",
        meshtoon_vert: "#define TOON\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",
        meshphong_frag: "#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_phong_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",
        meshphong_vert: "#define PHONG\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",
        meshphysical_frag: "#define STANDARD\n#ifdef PHYSICAL\n\t#define REFLECTIVITY\n\t#define CLEARCOAT\n\t#define TRANSMISSION\n#endif\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n#ifdef TRANSMISSION\n\tuniform float transmission;\n#endif\n#ifdef REFLECTIVITY\n\tuniform float reflectivity;\n#endif\n#ifdef CLEARCOAT\n\tuniform float clearcoat;\n\tuniform float clearcoatRoughness;\n#endif\n#ifdef USE_SHEEN\n\tuniform vec3 sheen;\n#endif\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <transmissionmap_pars_fragment>\n#include <bsdfs>\n#include <cube_uv_reflection_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_physical_pars_fragment>\n#include <fog_pars_fragment>\n#include <lights_pars_begin>\n#include <lights_physical_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <clearcoat_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#ifdef TRANSMISSION\n\t\tfloat totalTransmission = transmission;\n\t#endif\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <roughnessmap_fragment>\n\t#include <metalnessmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <clearcoat_normal_fragment_begin>\n\t#include <clearcoat_normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <transmissionmap_fragment>\n\t#include <lights_physical_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\t#ifdef TRANSMISSION\n\t\tdiffuseColor.a *= mix( saturate( 1. - totalTransmission + linearToRelativeLuminance( reflectedLight.directSpecular + reflectedLight.indirectSpecular ) ), 1.0, metalness );\n\t#endif\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",
        meshphysical_vert: "#define STANDARD\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n\t#ifdef USE_TANGENT\n\t\tvTangent = normalize( transformedTangent );\n\t\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n\t#endif\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",
        normal_frag: "#define NORMAL\nuniform float opacity;\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvarying vec3 vViewPosition;\n#endif\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif\n#include <packing>\n#include <uv_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\t#include <logdepthbuf_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\n}",
        normal_vert: "#define NORMAL\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvarying vec3 vViewPosition;\n#endif\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n\t#ifdef USE_TANGENT\n\t\tvTangent = normalize( transformedTangent );\n\t\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n\t#endif\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvViewPosition = - mvPosition.xyz;\n#endif\n}",
        points_frag: "uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_particle_fragment>\n\t#include <color_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n}",
        points_vert: "uniform float size;\nuniform float scale;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <color_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\tgl_PointSize = size;\n\t#ifdef USE_SIZEATTENUATION\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\t\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\n\t#endif\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <fog_vertex>\n}",
        shadow_frag: "uniform vec3 color;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\nvoid main() {\n\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}",
        shadow_vert: "#include <common>\n#include <fog_pars_vertex>\n#include <shadowmap_pars_vertex>\nvoid main() {\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",
        sprite_frag: "uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}",
        sprite_vert: "uniform float rotation;\nuniform vec2 center;\n#include <common>\n#include <uv_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\tvec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\n\tvec2 scale;\n\tscale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\n\tscale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\n\t#ifndef USE_SIZEATTENUATION\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\t\tif ( isPerspective ) scale *= - mvPosition.z;\n\t#endif\n\tvec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\n\tvec2 rotatedPosition;\n\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\n\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\n\tmvPosition.xy += rotatedPosition;\n\tgl_Position = projectionMatrix * mvPosition;\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}"
    }, UniformsLib = {
        common: {
            diffuse: {
                value: new Color(0xeeeeee)
            },
            opacity: {
                value: 1.0
            },
            map: {
                value: null
            },
            uvTransform: {
                value: new Matrix3()
            },
            uv2Transform: {
                value: new Matrix3()
            },
            alphaMap: {
                value: null
            }
        },
        specularmap: {
            specularMap: {
                value: null
            }
        },
        envmap: {
            envMap: {
                value: null
            },
            flipEnvMap: {
                value: -1
            },
            reflectivity: {
                value: 1.0
            },
            refractionRatio: {
                value: 0.98
            },
            maxMipLevel: {
                value: 0
            }
        },
        aomap: {
            aoMap: {
                value: null
            },
            aoMapIntensity: {
                value: 1
            }
        },
        lightmap: {
            lightMap: {
                value: null
            },
            lightMapIntensity: {
                value: 1
            }
        },
        emissivemap: {
            emissiveMap: {
                value: null
            }
        },
        bumpmap: {
            bumpMap: {
                value: null
            },
            bumpScale: {
                value: 1
            }
        },
        normalmap: {
            normalMap: {
                value: null
            },
            normalScale: {
                value: new Vector2(1, 1)
            }
        },
        displacementmap: {
            displacementMap: {
                value: null
            },
            displacementScale: {
                value: 1
            },
            displacementBias: {
                value: 0
            }
        },
        roughnessmap: {
            roughnessMap: {
                value: null
            }
        },
        metalnessmap: {
            metalnessMap: {
                value: null
            }
        },
        gradientmap: {
            gradientMap: {
                value: null
            }
        },
        fog: {
            fogDensity: {
                value: 0.00025
            },
            fogNear: {
                value: 1
            },
            fogFar: {
                value: 2000
            },
            fogColor: {
                value: new Color(0xffffff)
            }
        },
        lights: {
            ambientLightColor: {
                value: []
            },
            lightProbe: {
                value: []
            },
            directionalLights: {
                value: [],
                properties: {
                    direction: {},
                    color: {}
                }
            },
            directionalLightShadows: {
                value: [],
                properties: {
                    shadowBias: {},
                    shadowNormalBias: {},
                    shadowRadius: {},
                    shadowMapSize: {}
                }
            },
            directionalShadowMap: {
                value: []
            },
            directionalShadowMatrix: {
                value: []
            },
            spotLights: {
                value: [],
                properties: {
                    color: {},
                    position: {},
                    direction: {},
                    distance: {},
                    coneCos: {},
                    penumbraCos: {},
                    decay: {}
                }
            },
            spotLightShadows: {
                value: [],
                properties: {
                    shadowBias: {},
                    shadowNormalBias: {},
                    shadowRadius: {},
                    shadowMapSize: {}
                }
            },
            spotShadowMap: {
                value: []
            },
            spotShadowMatrix: {
                value: []
            },
            pointLights: {
                value: [],
                properties: {
                    color: {},
                    position: {},
                    decay: {},
                    distance: {}
                }
            },
            pointLightShadows: {
                value: [],
                properties: {
                    shadowBias: {},
                    shadowNormalBias: {},
                    shadowRadius: {},
                    shadowMapSize: {},
                    shadowCameraNear: {},
                    shadowCameraFar: {}
                }
            },
            pointShadowMap: {
                value: []
            },
            pointShadowMatrix: {
                value: []
            },
            hemisphereLights: {
                value: [],
                properties: {
                    direction: {},
                    skyColor: {},
                    groundColor: {}
                }
            },
            rectAreaLights: {
                value: [],
                properties: {
                    color: {},
                    position: {},
                    width: {},
                    height: {}
                }
            },
            ltc_1: {
                value: null
            },
            ltc_2: {
                value: null
            }
        },
        points: {
            diffuse: {
                value: new Color(0xeeeeee)
            },
            opacity: {
                value: 1.0
            },
            size: {
                value: 1.0
            },
            scale: {
                value: 1.0
            },
            map: {
                value: null
            },
            alphaMap: {
                value: null
            },
            uvTransform: {
                value: new Matrix3()
            }
        },
        sprite: {
            diffuse: {
                value: new Color(0xeeeeee)
            },
            opacity: {
                value: 1.0
            },
            center: {
                value: new Vector2(0.5, 0.5)
            },
            rotation: {
                value: 0.0
            },
            map: {
                value: null
            },
            alphaMap: {
                value: null
            },
            uvTransform: {
                value: new Matrix3()
            }
        }
    }, ShaderLib = {
        basic: {
            uniforms: mergeUniforms([
                UniformsLib.common,
                UniformsLib.specularmap,
                UniformsLib.envmap,
                UniformsLib.aomap,
                UniformsLib.lightmap,
                UniformsLib.fog
            ]),
            vertexShader: ShaderChunk.meshbasic_vert,
            fragmentShader: ShaderChunk.meshbasic_frag
        },
        lambert: {
            uniforms: mergeUniforms([
                UniformsLib.common,
                UniformsLib.specularmap,
                UniformsLib.envmap,
                UniformsLib.aomap,
                UniformsLib.lightmap,
                UniformsLib.emissivemap,
                UniformsLib.fog,
                UniformsLib.lights,
                {
                    emissive: {
                        value: new Color(0x000000)
                    }
                }
            ]),
            vertexShader: ShaderChunk.meshlambert_vert,
            fragmentShader: ShaderChunk.meshlambert_frag
        },
        phong: {
            uniforms: mergeUniforms([
                UniformsLib.common,
                UniformsLib.specularmap,
                UniformsLib.envmap,
                UniformsLib.aomap,
                UniformsLib.lightmap,
                UniformsLib.emissivemap,
                UniformsLib.bumpmap,
                UniformsLib.normalmap,
                UniformsLib.displacementmap,
                UniformsLib.fog,
                UniformsLib.lights,
                {
                    emissive: {
                        value: new Color(0x000000)
                    },
                    specular: {
                        value: new Color(0x111111)
                    },
                    shininess: {
                        value: 30
                    }
                }
            ]),
            vertexShader: ShaderChunk.meshphong_vert,
            fragmentShader: ShaderChunk.meshphong_frag
        },
        standard: {
            uniforms: mergeUniforms([
                UniformsLib.common,
                UniformsLib.envmap,
                UniformsLib.aomap,
                UniformsLib.lightmap,
                UniformsLib.emissivemap,
                UniformsLib.bumpmap,
                UniformsLib.normalmap,
                UniformsLib.displacementmap,
                UniformsLib.roughnessmap,
                UniformsLib.metalnessmap,
                UniformsLib.fog,
                UniformsLib.lights,
                {
                    emissive: {
                        value: new Color(0x000000)
                    },
                    roughness: {
                        value: 1.0
                    },
                    metalness: {
                        value: 0.0
                    },
                    envMapIntensity: {
                        value: 1
                    }
                }
            ]),
            vertexShader: ShaderChunk.meshphysical_vert,
            fragmentShader: ShaderChunk.meshphysical_frag
        },
        toon: {
            uniforms: mergeUniforms([
                UniformsLib.common,
                UniformsLib.aomap,
                UniformsLib.lightmap,
                UniformsLib.emissivemap,
                UniformsLib.bumpmap,
                UniformsLib.normalmap,
                UniformsLib.displacementmap,
                UniformsLib.gradientmap,
                UniformsLib.fog,
                UniformsLib.lights,
                {
                    emissive: {
                        value: new Color(0x000000)
                    }
                }
            ]),
            vertexShader: ShaderChunk.meshtoon_vert,
            fragmentShader: ShaderChunk.meshtoon_frag
        },
        matcap: {
            uniforms: mergeUniforms([
                UniformsLib.common,
                UniformsLib.bumpmap,
                UniformsLib.normalmap,
                UniformsLib.displacementmap,
                UniformsLib.fog,
                {
                    matcap: {
                        value: null
                    }
                }
            ]),
            vertexShader: ShaderChunk.meshmatcap_vert,
            fragmentShader: ShaderChunk.meshmatcap_frag
        },
        points: {
            uniforms: mergeUniforms([
                UniformsLib.points,
                UniformsLib.fog
            ]),
            vertexShader: ShaderChunk.points_vert,
            fragmentShader: ShaderChunk.points_frag
        },
        dashed: {
            uniforms: mergeUniforms([
                UniformsLib.common,
                UniformsLib.fog,
                {
                    scale: {
                        value: 1
                    },
                    dashSize: {
                        value: 1
                    },
                    totalSize: {
                        value: 2
                    }
                }
            ]),
            vertexShader: ShaderChunk.linedashed_vert,
            fragmentShader: ShaderChunk.linedashed_frag
        },
        depth: {
            uniforms: mergeUniforms([
                UniformsLib.common,
                UniformsLib.displacementmap
            ]),
            vertexShader: ShaderChunk.depth_vert,
            fragmentShader: ShaderChunk.depth_frag
        },
        normal: {
            uniforms: mergeUniforms([
                UniformsLib.common,
                UniformsLib.bumpmap,
                UniformsLib.normalmap,
                UniformsLib.displacementmap,
                {
                    opacity: {
                        value: 1.0
                    }
                }
            ]),
            vertexShader: ShaderChunk.normal_vert,
            fragmentShader: ShaderChunk.normal_frag
        },
        sprite: {
            uniforms: mergeUniforms([
                UniformsLib.sprite,
                UniformsLib.fog
            ]),
            vertexShader: ShaderChunk.sprite_vert,
            fragmentShader: ShaderChunk.sprite_frag
        },
        background: {
            uniforms: {
                uvTransform: {
                    value: new Matrix3()
                },
                t2D: {
                    value: null
                }
            },
            vertexShader: ShaderChunk.background_vert,
            fragmentShader: ShaderChunk.background_frag
        },
        cube: {
            uniforms: mergeUniforms([
                UniformsLib.envmap,
                {
                    opacity: {
                        value: 1.0
                    }
                }
            ]),
            vertexShader: ShaderChunk.cube_vert,
            fragmentShader: ShaderChunk.cube_frag
        },
        equirect: {
            uniforms: {
                tEquirect: {
                    value: null
                }
            },
            vertexShader: ShaderChunk.equirect_vert,
            fragmentShader: ShaderChunk.equirect_frag
        },
        distanceRGBA: {
            uniforms: mergeUniforms([
                UniformsLib.common,
                UniformsLib.displacementmap,
                {
                    referencePosition: {
                        value: new Vector3()
                    },
                    nearDistance: {
                        value: 1
                    },
                    farDistance: {
                        value: 1000
                    }
                }
            ]),
            vertexShader: ShaderChunk.distanceRGBA_vert,
            fragmentShader: ShaderChunk.distanceRGBA_frag
        },
        shadow: {
            uniforms: mergeUniforms([
                UniformsLib.lights,
                UniformsLib.fog,
                {
                    color: {
                        value: new Color(0x00000)
                    },
                    opacity: {
                        value: 1.0
                    }
                }
            ]),
            vertexShader: ShaderChunk.shadow_vert,
            fragmentShader: ShaderChunk.shadow_frag
        }
    };
    function WebGLBackground(renderer, cubemaps, state, objects, premultipliedAlpha) {
        var planeMesh, boxMesh, clearColor = new Color(0x000000), clearAlpha = 0, currentBackground = null, currentBackgroundVersion = 0, currentTonemapping = null;
        function setClear(color, alpha) {
            state.buffers.color.setClear(color.r, color.g, color.b, alpha, premultipliedAlpha);
        }
        return {
            getClearColor: function() {
                return clearColor;
            },
            setClearColor: function(color, alpha) {
                void 0 === alpha && (alpha = 1), clearColor.set(color), setClear(clearColor, clearAlpha = alpha);
            },
            getClearAlpha: function() {
                return clearAlpha;
            },
            setClearAlpha: function(alpha) {
                setClear(clearColor, clearAlpha = alpha);
            },
            render: function(renderList, scene, camera, forceClear) {
                var background = !0 === scene.isScene ? scene.background : null;
                background && background.isTexture && (background = cubemaps.get(background));
                var xr = renderer.xr, session = xr.getSession && xr.getSession();
                session && 'additive' === session.environmentBlendMode && (background = null), null === background ? setClear(clearColor, clearAlpha) : background && background.isColor && (setClear(background, 1), forceClear = !0), (renderer.autoClear || forceClear) && renderer.clear(renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil), background && (background.isCubeTexture || background.isWebGLCubeRenderTarget || 306 === background.mapping) ? (void 0 === boxMesh && ((boxMesh = new Mesh(new BoxBufferGeometry(1, 1, 1), new ShaderMaterial({
                    name: 'BackgroundCubeMaterial',
                    uniforms: cloneUniforms(ShaderLib.cube.uniforms),
                    vertexShader: ShaderLib.cube.vertexShader,
                    fragmentShader: ShaderLib.cube.fragmentShader,
                    side: 1,
                    depthTest: !1,
                    depthWrite: !1,
                    fog: !1
                }))).geometry.deleteAttribute('normal'), boxMesh.geometry.deleteAttribute('uv'), boxMesh.onBeforeRender = function(renderer, scene, camera) {
                    this.matrixWorld.copyPosition(camera.matrixWorld);
                }, Object.defineProperty(boxMesh.material, 'envMap', {
                    get: function() {
                        return this.uniforms.envMap.value;
                    }
                }), objects.update(boxMesh)), background.isWebGLCubeRenderTarget && (background = background.texture), boxMesh.material.uniforms.envMap.value = background, boxMesh.material.uniforms.flipEnvMap.value = background.isCubeTexture && background._needsFlipEnvMap ? -1 : 1, (currentBackground !== background || currentBackgroundVersion !== background.version || currentTonemapping !== renderer.toneMapping) && (boxMesh.material.needsUpdate = !0, currentBackground = background, currentBackgroundVersion = background.version, currentTonemapping = renderer.toneMapping), renderList.unshift(boxMesh, boxMesh.geometry, boxMesh.material, 0, 0, null)) : background && background.isTexture && (void 0 === planeMesh && ((planeMesh = new Mesh(new PlaneBufferGeometry(2, 2), new ShaderMaterial({
                    name: 'BackgroundMaterial',
                    uniforms: cloneUniforms(ShaderLib.background.uniforms),
                    vertexShader: ShaderLib.background.vertexShader,
                    fragmentShader: ShaderLib.background.fragmentShader,
                    side: 0,
                    depthTest: !1,
                    depthWrite: !1,
                    fog: !1
                }))).geometry.deleteAttribute('normal'), Object.defineProperty(planeMesh.material, 'map', {
                    get: function() {
                        return this.uniforms.t2D.value;
                    }
                }), objects.update(planeMesh)), planeMesh.material.uniforms.t2D.value = background, !0 === background.matrixAutoUpdate && background.updateMatrix(), planeMesh.material.uniforms.uvTransform.value.copy(background.matrix), (currentBackground !== background || currentBackgroundVersion !== background.version || currentTonemapping !== renderer.toneMapping) && (planeMesh.material.needsUpdate = !0, currentBackground = background, currentBackgroundVersion = background.version, currentTonemapping = renderer.toneMapping), renderList.unshift(planeMesh, planeMesh.geometry, planeMesh.material, 0, 0, null));
            }
        };
    }
    function WebGLBindingStates(gl, extensions, attributes, capabilities) {
        var maxVertexAttributes = gl.getParameter(34921), extension = capabilities.isWebGL2 ? null : extensions.get('OES_vertex_array_object'), vaoAvailable = capabilities.isWebGL2 || null !== extension, bindingStates = {}, defaultState = createBindingState(null), currentState = defaultState;
        function bindVertexArrayObject(vao) {
            return capabilities.isWebGL2 ? gl.bindVertexArray(vao) : extension.bindVertexArrayOES(vao);
        }
        function deleteVertexArrayObject(vao) {
            return capabilities.isWebGL2 ? gl.deleteVertexArray(vao) : extension.deleteVertexArrayOES(vao);
        }
        function createBindingState(vao) {
            for(var newAttributes = [], enabledAttributes = [], attributeDivisors = [], i = 0; i < maxVertexAttributes; i++)newAttributes[i] = 0, enabledAttributes[i] = 0, attributeDivisors[i] = 0;
            return {
                geometry: null,
                program: null,
                wireframe: !1,
                newAttributes: newAttributes,
                enabledAttributes: enabledAttributes,
                attributeDivisors: attributeDivisors,
                object: vao,
                attributes: {},
                index: null
            };
        }
        function initAttributes() {
            for(var newAttributes = currentState.newAttributes, i = 0, il = newAttributes.length; i < il; i++)newAttributes[i] = 0;
        }
        function enableAttribute(attribute) {
            enableAttributeAndDivisor(attribute, 0);
        }
        function enableAttributeAndDivisor(attribute, meshPerAttribute) {
            var newAttributes = currentState.newAttributes, enabledAttributes = currentState.enabledAttributes, attributeDivisors = currentState.attributeDivisors;
            newAttributes[attribute] = 1, 0 === enabledAttributes[attribute] && (gl.enableVertexAttribArray(attribute), enabledAttributes[attribute] = 1), attributeDivisors[attribute] !== meshPerAttribute && ((capabilities.isWebGL2 ? gl : extensions.get('ANGLE_instanced_arrays'))[capabilities.isWebGL2 ? 'vertexAttribDivisor' : 'vertexAttribDivisorANGLE'](attribute, meshPerAttribute), attributeDivisors[attribute] = meshPerAttribute);
        }
        function disableUnusedAttributes() {
            for(var newAttributes = currentState.newAttributes, enabledAttributes = currentState.enabledAttributes, i = 0, il = enabledAttributes.length; i < il; i++)enabledAttributes[i] !== newAttributes[i] && (gl.disableVertexAttribArray(i), enabledAttributes[i] = 0);
        }
        function vertexAttribPointer(index, size, type, normalized, stride, offset) {
            !0 === capabilities.isWebGL2 && (5124 === type || 5125 === type) ? gl.vertexAttribIPointer(index, size, type, stride, offset) : gl.vertexAttribPointer(index, size, type, normalized, stride, offset);
        }
        function reset() {
            resetDefaultState(), currentState !== defaultState && bindVertexArrayObject((currentState = defaultState).object);
        }
        function resetDefaultState() {
            defaultState.geometry = null, defaultState.program = null, defaultState.wireframe = !1;
        }
        return {
            setup: function(object, material, program, geometry, index) {
                var updateBuffers = !1;
                if (vaoAvailable) {
                    var wireframe, programMap, stateMap, state, state1 = (wireframe = !0 === material.wireframe, void 0 === (programMap = bindingStates[geometry.id]) && (programMap = {}, bindingStates[geometry.id] = programMap), void 0 === (stateMap = programMap[program.id]) && (stateMap = {}, programMap[program.id] = stateMap), void 0 === (state = stateMap[wireframe]) && (state = createBindingState(capabilities.isWebGL2 ? gl.createVertexArray() : extension.createVertexArrayOES()), stateMap[wireframe] = state), state);
                    currentState !== state1 && bindVertexArrayObject((currentState = state1).object), (updateBuffers = function(geometry, index) {
                        var cachedAttributes = currentState.attributes, geometryAttributes = geometry.attributes, attributesNum = 0;
                        for(var key in geometryAttributes){
                            var cachedAttribute = cachedAttributes[key], geometryAttribute = geometryAttributes[key];
                            if (void 0 === cachedAttribute || cachedAttribute.attribute !== geometryAttribute || cachedAttribute.data !== geometryAttribute.data) return !0;
                            attributesNum++;
                        }
                        return currentState.attributesNum !== attributesNum || currentState.index !== index;
                    }(geometry, index)) && function(geometry, index) {
                        var cache = {}, attributes = geometry.attributes, attributesNum = 0;
                        for(var key in attributes){
                            var attribute = attributes[key], data = {};
                            data.attribute = attribute, attribute.data && (data.data = attribute.data), cache[key] = data, attributesNum++;
                        }
                        currentState.attributes = cache, currentState.attributesNum = attributesNum, currentState.index = index;
                    }(geometry, index);
                } else {
                    var wireframe1 = !0 === material.wireframe;
                    (currentState.geometry !== geometry.id || currentState.program !== program.id || currentState.wireframe !== wireframe1) && (currentState.geometry = geometry.id, currentState.program = program.id, currentState.wireframe = wireframe1, updateBuffers = !0);
                }
                !0 === object.isInstancedMesh && (updateBuffers = !0), null !== index && attributes.update(index, 34963), updateBuffers && (function(object, material, program, geometry) {
                    if (!1 !== capabilities.isWebGL2 || !object.isInstancedMesh && !geometry.isInstancedBufferGeometry || null !== extensions.get('ANGLE_instanced_arrays')) {
                        initAttributes();
                        var geometryAttributes = geometry.attributes, programAttributes = program.getAttributes(), materialDefaultAttributeValues = material.defaultAttributeValues;
                        for(var name in programAttributes){
                            var programAttribute = programAttributes[name];
                            if (programAttribute >= 0) {
                                var geometryAttribute = geometryAttributes[name];
                                if (void 0 !== geometryAttribute) {
                                    var normalized = geometryAttribute.normalized, size = geometryAttribute.itemSize, attribute = attributes.get(geometryAttribute);
                                    if (void 0 === attribute) continue;
                                    var buffer = attribute.buffer, type = attribute.type, bytesPerElement = attribute.bytesPerElement;
                                    if (geometryAttribute.isInterleavedBufferAttribute) {
                                        var data = geometryAttribute.data, stride = data.stride, offset = geometryAttribute.offset;
                                        data && data.isInstancedInterleavedBuffer ? (enableAttributeAndDivisor(programAttribute, data.meshPerAttribute), void 0 === geometry._maxInstanceCount && (geometry._maxInstanceCount = data.meshPerAttribute * data.count)) : enableAttribute(programAttribute), gl.bindBuffer(34962, buffer), vertexAttribPointer(programAttribute, size, type, normalized, stride * bytesPerElement, offset * bytesPerElement);
                                    } else geometryAttribute.isInstancedBufferAttribute ? (enableAttributeAndDivisor(programAttribute, geometryAttribute.meshPerAttribute), void 0 === geometry._maxInstanceCount && (geometry._maxInstanceCount = geometryAttribute.meshPerAttribute * geometryAttribute.count)) : enableAttribute(programAttribute), gl.bindBuffer(34962, buffer), vertexAttribPointer(programAttribute, size, type, normalized, 0, 0);
                                } else if ('instanceMatrix' === name) {
                                    var _attribute = attributes.get(object.instanceMatrix);
                                    if (void 0 === _attribute) continue;
                                    var _buffer = _attribute.buffer, _type = _attribute.type;
                                    enableAttributeAndDivisor(programAttribute + 0, 1), enableAttributeAndDivisor(programAttribute + 1, 1), enableAttributeAndDivisor(programAttribute + 2, 1), enableAttributeAndDivisor(programAttribute + 3, 1), gl.bindBuffer(34962, _buffer), gl.vertexAttribPointer(programAttribute + 0, 4, _type, !1, 64, 0), gl.vertexAttribPointer(programAttribute + 1, 4, _type, !1, 64, 16), gl.vertexAttribPointer(programAttribute + 2, 4, _type, !1, 64, 32), gl.vertexAttribPointer(programAttribute + 3, 4, _type, !1, 64, 48);
                                } else if ('instanceColor' === name) {
                                    var _attribute2 = attributes.get(object.instanceColor);
                                    if (void 0 === _attribute2) continue;
                                    var _buffer2 = _attribute2.buffer, _type2 = _attribute2.type;
                                    enableAttributeAndDivisor(programAttribute, 1), gl.bindBuffer(34962, _buffer2), gl.vertexAttribPointer(programAttribute, 3, _type2, !1, 12, 0);
                                } else if (void 0 !== materialDefaultAttributeValues) {
                                    var value = materialDefaultAttributeValues[name];
                                    if (void 0 !== value) switch(value.length){
                                        case 2:
                                            gl.vertexAttrib2fv(programAttribute, value);
                                            break;
                                        case 3:
                                            gl.vertexAttrib3fv(programAttribute, value);
                                            break;
                                        case 4:
                                            gl.vertexAttrib4fv(programAttribute, value);
                                            break;
                                        default:
                                            gl.vertexAttrib1fv(programAttribute, value);
                                    }
                                }
                            }
                        }
                        disableUnusedAttributes();
                    }
                }(object, material, program, geometry), null !== index && gl.bindBuffer(34963, attributes.get(index).buffer));
            },
            reset: reset,
            resetDefaultState: resetDefaultState,
            dispose: function() {
                for(var geometryId in reset(), bindingStates){
                    var programMap = bindingStates[geometryId];
                    for(var programId in programMap){
                        var stateMap = programMap[programId];
                        for(var wireframe in stateMap)deleteVertexArrayObject(stateMap[wireframe].object), delete stateMap[wireframe];
                        delete programMap[programId];
                    }
                    delete bindingStates[geometryId];
                }
            },
            releaseStatesOfGeometry: function(geometry) {
                if (void 0 !== bindingStates[geometry.id]) {
                    var programMap = bindingStates[geometry.id];
                    for(var programId in programMap){
                        var stateMap = programMap[programId];
                        for(var wireframe in stateMap)deleteVertexArrayObject(stateMap[wireframe].object), delete stateMap[wireframe];
                        delete programMap[programId];
                    }
                    delete bindingStates[geometry.id];
                }
            },
            releaseStatesOfProgram: function(program) {
                for(var geometryId in bindingStates){
                    var programMap = bindingStates[geometryId];
                    if (void 0 !== programMap[program.id]) {
                        var stateMap = programMap[program.id];
                        for(var wireframe in stateMap)deleteVertexArrayObject(stateMap[wireframe].object), delete stateMap[wireframe];
                        delete programMap[program.id];
                    }
                }
            },
            initAttributes: initAttributes,
            enableAttribute: enableAttribute,
            disableUnusedAttributes: disableUnusedAttributes
        };
    }
    function WebGLBufferRenderer(gl, extensions, info, capabilities) {
        var mode, isWebGL2 = capabilities.isWebGL2;
        this.setMode = function(value) {
            mode = value;
        }, this.render = function(start, count) {
            gl.drawArrays(mode, start, count), info.update(count, mode, 1);
        }, this.renderInstances = function(start, count, primcount) {
            var extension, methodName;
            if (0 !== primcount) {
                if (isWebGL2) extension = gl, methodName = 'drawArraysInstanced';
                else if (extension = extensions.get('ANGLE_instanced_arrays'), methodName = 'drawArraysInstancedANGLE', null === extension) {
                    console.error('THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.');
                    return;
                }
                extension[methodName](mode, start, count, primcount), info.update(count, mode, primcount);
            }
        };
    }
    function WebGLCapabilities(gl, extensions, parameters) {
        function getMaxPrecision(precision) {
            if ('highp' === precision) {
                if (gl.getShaderPrecisionFormat(35633, 36338).precision > 0 && gl.getShaderPrecisionFormat(35632, 36338).precision > 0) return 'highp';
                precision = 'mediump';
            }
            return 'mediump' === precision && gl.getShaderPrecisionFormat(35633, 36337).precision > 0 && gl.getShaderPrecisionFormat(35632, 36337).precision > 0 ? 'mediump' : 'lowp';
        }
        var maxAnisotropy, isWebGL2 = 'undefined' != typeof WebGL2RenderingContext && gl instanceof WebGL2RenderingContext || 'undefined' != typeof WebGL2ComputeRenderingContext && gl instanceof WebGL2ComputeRenderingContext, precision = void 0 !== parameters.precision ? parameters.precision : 'highp', maxPrecision = getMaxPrecision(precision);
        maxPrecision !== precision && (console.warn('THREE.WebGLRenderer:', precision, 'not supported, using', maxPrecision, 'instead.'), precision = maxPrecision);
        var logarithmicDepthBuffer = !0 === parameters.logarithmicDepthBuffer, maxTextures = gl.getParameter(34930), maxVertexTextures = gl.getParameter(35660), maxTextureSize = gl.getParameter(3379), maxCubemapSize = gl.getParameter(34076), maxAttributes = gl.getParameter(34921), maxVertexUniforms = gl.getParameter(36347), maxVaryings = gl.getParameter(36348), maxFragmentUniforms = gl.getParameter(36349), vertexTextures = maxVertexTextures > 0, floatFragmentTextures = isWebGL2 || !!extensions.get('OES_texture_float'), maxSamples = isWebGL2 ? gl.getParameter(36183) : 0;
        return {
            isWebGL2: isWebGL2,
            getMaxAnisotropy: function() {
                if (void 0 !== maxAnisotropy) return maxAnisotropy;
                var extension = extensions.get('EXT_texture_filter_anisotropic');
                return maxAnisotropy = null !== extension ? gl.getParameter(extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT) : 0;
            },
            getMaxPrecision: getMaxPrecision,
            precision: precision,
            logarithmicDepthBuffer: logarithmicDepthBuffer,
            maxTextures: maxTextures,
            maxVertexTextures: maxVertexTextures,
            maxTextureSize: maxTextureSize,
            maxCubemapSize: maxCubemapSize,
            maxAttributes: maxAttributes,
            maxVertexUniforms: maxVertexUniforms,
            maxVaryings: maxVaryings,
            maxFragmentUniforms: maxFragmentUniforms,
            vertexTextures: vertexTextures,
            floatFragmentTextures: floatFragmentTextures,
            floatVertexTextures: vertexTextures && floatFragmentTextures,
            maxSamples: maxSamples
        };
    }
    function WebGLClipping(properties) {
        var scope = this, globalState = null, numGlobalPlanes = 0, localClippingEnabled = !1, renderingShadows = !1, plane = new Plane(), viewNormalMatrix = new Matrix3(), uniform = {
            value: null,
            needsUpdate: !1
        };
        function resetGlobalState() {
            uniform.value !== globalState && (uniform.value = globalState, uniform.needsUpdate = numGlobalPlanes > 0), scope.numPlanes = numGlobalPlanes, scope.numIntersection = 0;
        }
        function projectPlanes(planes, camera, dstOffset, skipTransform) {
            var nPlanes = null !== planes ? planes.length : 0, dstArray = null;
            if (0 !== nPlanes) {
                if (dstArray = uniform.value, !0 !== skipTransform || null === dstArray) {
                    var flatSize = dstOffset + 4 * nPlanes, viewMatrix = camera.matrixWorldInverse;
                    viewNormalMatrix.getNormalMatrix(viewMatrix), (null === dstArray || dstArray.length < flatSize) && (dstArray = new Float32Array(flatSize));
                    for(var i = 0, i4 = dstOffset; i !== nPlanes; ++i, i4 += 4)plane.copy(planes[i]).applyMatrix4(viewMatrix, viewNormalMatrix), plane.normal.toArray(dstArray, i4), dstArray[i4 + 3] = plane.constant;
                }
                uniform.value = dstArray, uniform.needsUpdate = !0;
            }
            return scope.numPlanes = nPlanes, scope.numIntersection = 0, dstArray;
        }
        this.uniform = uniform, this.numPlanes = 0, this.numIntersection = 0, this.init = function(planes, enableLocalClipping, camera) {
            var enabled = 0 !== planes.length || enableLocalClipping || 0 !== numGlobalPlanes || localClippingEnabled;
            return localClippingEnabled = enableLocalClipping, globalState = projectPlanes(planes, camera, 0), numGlobalPlanes = planes.length, enabled;
        }, this.beginShadows = function() {
            renderingShadows = !0, projectPlanes(null);
        }, this.endShadows = function() {
            renderingShadows = !1, resetGlobalState();
        }, this.setState = function(material, camera, useCache) {
            var planes = material.clippingPlanes, clipIntersection = material.clipIntersection, clipShadows = material.clipShadows, materialProperties = properties.get(material);
            if (localClippingEnabled && null !== planes && 0 !== planes.length && (!renderingShadows || clipShadows)) {
                var nGlobal = renderingShadows ? 0 : numGlobalPlanes, lGlobal = 4 * nGlobal, dstArray = materialProperties.clippingState || null;
                uniform.value = dstArray, dstArray = projectPlanes(planes, camera, lGlobal, useCache);
                for(var i = 0; i !== lGlobal; ++i)dstArray[i] = globalState[i];
                materialProperties.clippingState = dstArray, this.numIntersection = clipIntersection ? this.numPlanes : 0, this.numPlanes += nGlobal;
            } else renderingShadows ? projectPlanes(null) : resetGlobalState();
        };
    }
    function WebGLCubeMaps(renderer) {
        var cubemaps = new WeakMap();
        function mapTextureMapping(texture, mapping) {
            return 303 === mapping ? texture.mapping = 301 : 304 === mapping && (texture.mapping = 302), texture;
        }
        function onTextureDispose(event) {
            var texture = event.target;
            texture.removeEventListener('dispose', onTextureDispose);
            var cubemap = cubemaps.get(texture);
            void 0 !== cubemap && (cubemaps.delete(texture), cubemap.dispose());
        }
        return {
            get: function(texture) {
                if (texture && texture.isTexture) {
                    var mapping = texture.mapping;
                    if (303 === mapping || 304 === mapping) {
                        if (cubemaps.has(texture)) return mapTextureMapping(cubemaps.get(texture).texture, texture.mapping);
                        var image = texture.image;
                        if (!image || !(image.height > 0)) return null;
                        var currentRenderList = renderer.getRenderList(), currentRenderTarget = renderer.getRenderTarget(), renderTarget = new WebGLCubeRenderTarget(image.height / 2);
                        return renderTarget.fromEquirectangularTexture(renderer, texture), cubemaps.set(texture, renderTarget), renderer.setRenderTarget(currentRenderTarget), renderer.setRenderList(currentRenderList), texture.addEventListener('dispose', onTextureDispose), mapTextureMapping(renderTarget.texture, texture.mapping);
                    }
                }
                return texture;
            },
            dispose: function() {
                cubemaps = new WeakMap();
            }
        };
    }
    function WebGLExtensions(gl) {
        var extensions = {};
        return {
            has: function(name) {
                var extension;
                if (void 0 !== extensions[name]) return null !== extensions[name];
                switch(name){
                    case 'WEBGL_depth_texture':
                        extension = gl.getExtension('WEBGL_depth_texture') || gl.getExtension('MOZ_WEBGL_depth_texture') || gl.getExtension('WEBKIT_WEBGL_depth_texture');
                        break;
                    case 'EXT_texture_filter_anisotropic':
                        extension = gl.getExtension('EXT_texture_filter_anisotropic') || gl.getExtension('MOZ_EXT_texture_filter_anisotropic') || gl.getExtension('WEBKIT_EXT_texture_filter_anisotropic');
                        break;
                    case 'WEBGL_compressed_texture_s3tc':
                        extension = gl.getExtension('WEBGL_compressed_texture_s3tc') || gl.getExtension('MOZ_WEBGL_compressed_texture_s3tc') || gl.getExtension('WEBKIT_WEBGL_compressed_texture_s3tc');
                        break;
                    case 'WEBGL_compressed_texture_pvrtc':
                        extension = gl.getExtension('WEBGL_compressed_texture_pvrtc') || gl.getExtension('WEBKIT_WEBGL_compressed_texture_pvrtc');
                        break;
                    default:
                        extension = gl.getExtension(name);
                }
                return extensions[name] = extension, null !== extension;
            },
            get: function(name) {
                return this.has(name) || console.warn('THREE.WebGLRenderer: ' + name + ' extension not supported.'), extensions[name];
            }
        };
    }
    function WebGLGeometries(gl, attributes, info, bindingStates) {
        var geometries = new WeakMap(), wireframeAttributes = new WeakMap();
        function onGeometryDispose(event) {
            var geometry = event.target, buffergeometry = geometries.get(geometry);
            for(var name in null !== buffergeometry.index && attributes.remove(buffergeometry.index), buffergeometry.attributes)attributes.remove(buffergeometry.attributes[name]);
            geometry.removeEventListener('dispose', onGeometryDispose), geometries.delete(geometry);
            var attribute = wireframeAttributes.get(buffergeometry);
            attribute && (attributes.remove(attribute), wireframeAttributes.delete(buffergeometry)), bindingStates.releaseStatesOfGeometry(buffergeometry), !0 === geometry.isInstancedBufferGeometry && delete geometry._maxInstanceCount, info.memory.geometries--;
        }
        function updateWireframeAttribute(geometry) {
            var indices = [], geometryIndex = geometry.index, geometryPosition = geometry.attributes.position, version = 0;
            if (null !== geometryIndex) {
                var array = geometryIndex.array;
                version = geometryIndex.version;
                for(var i = 0, l = array.length; i < l; i += 3){
                    var a = array[i + 0], b = array[i + 1], c = array[i + 2];
                    indices.push(a, b, b, c, c, a);
                }
            } else {
                var _array = geometryPosition.array;
                version = geometryPosition.version;
                for(var _i = 0, _l = _array.length / 3 - 1; _i < _l; _i += 3){
                    var _a = _i + 0, _b = _i + 1, _c = _i + 2;
                    indices.push(_a, _b, _b, _c, _c, _a);
                }
            }
            var attribute = new (arrayMax(indices) > 65535 ? Uint32BufferAttribute : Uint16BufferAttribute)(indices, 1);
            attribute.version = version;
            var previousAttribute = wireframeAttributes.get(geometry);
            previousAttribute && attributes.remove(previousAttribute), wireframeAttributes.set(geometry, attribute);
        }
        return {
            get: function(object, geometry) {
                var buffergeometry = geometries.get(geometry);
                return buffergeometry || (geometry.addEventListener('dispose', onGeometryDispose), geometry.isBufferGeometry ? buffergeometry = geometry : geometry.isGeometry && (void 0 === geometry._bufferGeometry && (geometry._bufferGeometry = new BufferGeometry().setFromObject(object)), buffergeometry = geometry._bufferGeometry), geometries.set(geometry, buffergeometry), info.memory.geometries++), buffergeometry;
            },
            update: function(geometry) {
                var geometryAttributes = geometry.attributes;
                for(var name in geometryAttributes)attributes.update(geometryAttributes[name], 34962);
                var morphAttributes = geometry.morphAttributes;
                for(var _name in morphAttributes)for(var array = morphAttributes[_name], i = 0, l = array.length; i < l; i++)attributes.update(array[i], 34962);
            },
            getWireframeAttribute: function(geometry) {
                var currentAttribute = wireframeAttributes.get(geometry);
                if (currentAttribute) {
                    var geometryIndex = geometry.index;
                    null !== geometryIndex && currentAttribute.version < geometryIndex.version && updateWireframeAttribute(geometry);
                } else updateWireframeAttribute(geometry);
                return wireframeAttributes.get(geometry);
            }
        };
    }
    function WebGLIndexedBufferRenderer(gl, extensions, info, capabilities) {
        var mode, type, bytesPerElement, isWebGL2 = capabilities.isWebGL2;
        this.setMode = function(value) {
            mode = value;
        }, this.setIndex = function(value) {
            type = value.type, bytesPerElement = value.bytesPerElement;
        }, this.render = function(start, count) {
            gl.drawElements(mode, count, type, start * bytesPerElement), info.update(count, mode, 1);
        }, this.renderInstances = function(start, count, primcount) {
            var extension, methodName;
            if (0 !== primcount) {
                if (isWebGL2) extension = gl, methodName = 'drawElementsInstanced';
                else if (extension = extensions.get('ANGLE_instanced_arrays'), methodName = 'drawElementsInstancedANGLE', null === extension) {
                    console.error('THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.');
                    return;
                }
                extension[methodName](mode, count, type, start * bytesPerElement, primcount), info.update(count, mode, primcount);
            }
        };
    }
    function WebGLInfo(gl) {
        var render = {
            frame: 0,
            calls: 0,
            triangles: 0,
            points: 0,
            lines: 0
        };
        return {
            memory: {
                geometries: 0,
                textures: 0
            },
            render: render,
            programs: null,
            autoReset: !0,
            reset: function() {
                render.frame++, render.calls = 0, render.triangles = 0, render.points = 0, render.lines = 0;
            },
            update: function(count, mode, instanceCount) {
                switch(render.calls++, mode){
                    case 4:
                        render.triangles += instanceCount * (count / 3);
                        break;
                    case 1:
                        render.lines += instanceCount * (count / 2);
                        break;
                    case 3:
                        render.lines += instanceCount * (count - 1);
                        break;
                    case 2:
                        render.lines += instanceCount * count;
                        break;
                    case 0:
                        render.points += instanceCount * count;
                        break;
                    default:
                        console.error('THREE.WebGLInfo: Unknown draw mode:', mode);
                }
            }
        };
    }
    function numericalSort(a, b) {
        return a[0] - b[0];
    }
    function absNumericalSort(a, b) {
        return Math.abs(b[1]) - Math.abs(a[1]);
    }
    function WebGLMorphtargets(gl) {
        for(var influencesList = {}, morphInfluences = new Float32Array(8), workInfluences = [], i = 0; i < 8; i++)workInfluences[i] = [
            i,
            0
        ];
        return {
            update: function(object, geometry, material, program) {
                var objectInfluences = object.morphTargetInfluences, length = void 0 === objectInfluences ? 0 : objectInfluences.length, influences = influencesList[geometry.id];
                if (void 0 === influences) {
                    influences = [];
                    for(var _i = 0; _i < length; _i++)influences[_i] = [
                        _i,
                        0
                    ];
                    influencesList[geometry.id] = influences;
                }
                for(var _i2 = 0; _i2 < length; _i2++){
                    var influence = influences[_i2];
                    influence[0] = _i2, influence[1] = objectInfluences[_i2];
                }
                influences.sort(absNumericalSort);
                for(var _i3 = 0; _i3 < 8; _i3++)_i3 < length && influences[_i3][1] ? (workInfluences[_i3][0] = influences[_i3][0], workInfluences[_i3][1] = influences[_i3][1]) : (workInfluences[_i3][0] = Number.MAX_SAFE_INTEGER, workInfluences[_i3][1] = 0);
                workInfluences.sort(numericalSort);
                for(var morphTargets = material.morphTargets && geometry.morphAttributes.position, morphNormals = material.morphNormals && geometry.morphAttributes.normal, morphInfluencesSum = 0, _i4 = 0; _i4 < 8; _i4++){
                    var _influence = workInfluences[_i4], index = _influence[0], value = _influence[1];
                    index !== Number.MAX_SAFE_INTEGER && value ? (morphTargets && geometry.getAttribute('morphTarget' + _i4) !== morphTargets[index] && geometry.setAttribute('morphTarget' + _i4, morphTargets[index]), morphNormals && geometry.getAttribute('morphNormal' + _i4) !== morphNormals[index] && geometry.setAttribute('morphNormal' + _i4, morphNormals[index]), morphInfluences[_i4] = value, morphInfluencesSum += value) : (morphTargets && !0 === geometry.hasAttribute('morphTarget' + _i4) && geometry.deleteAttribute('morphTarget' + _i4), morphNormals && !0 === geometry.hasAttribute('morphNormal' + _i4) && geometry.deleteAttribute('morphNormal' + _i4), morphInfluences[_i4] = 0);
                }
                var morphBaseInfluence = geometry.morphTargetsRelative ? 1 : 1 - morphInfluencesSum;
                program.getUniforms().setValue(gl, 'morphTargetBaseInfluence', morphBaseInfluence), program.getUniforms().setValue(gl, 'morphTargetInfluences', morphInfluences);
            }
        };
    }
    function WebGLObjects(gl, geometries, attributes, info) {
        var updateMap = new WeakMap();
        function onInstancedMeshDispose(event) {
            var instancedMesh = event.target;
            instancedMesh.removeEventListener('dispose', onInstancedMeshDispose), attributes.remove(instancedMesh.instanceMatrix), null !== instancedMesh.instanceColor && attributes.remove(instancedMesh.instanceColor);
        }
        return {
            update: function(object) {
                var frame = info.render.frame, geometry = object.geometry, buffergeometry = geometries.get(object, geometry);
                return updateMap.get(buffergeometry) !== frame && (geometry.isGeometry && buffergeometry.updateFromObject(object), geometries.update(buffergeometry), updateMap.set(buffergeometry, frame)), object.isInstancedMesh && (!1 === object.hasEventListener('dispose', onInstancedMeshDispose) && object.addEventListener('dispose', onInstancedMeshDispose), attributes.update(object.instanceMatrix, 34962), null !== object.instanceColor && attributes.update(object.instanceColor, 34962)), buffergeometry;
            },
            dispose: function() {
                updateMap = new WeakMap();
            }
        };
    }
    function DataTexture2DArray(data, width, height, depth) {
        void 0 === data && (data = null), void 0 === width && (width = 1), void 0 === height && (height = 1), void 0 === depth && (depth = 1), Texture.call(this, null), this.image = {
            data: data,
            width: width,
            height: height,
            depth: depth
        }, this.magFilter = 1003, this.minFilter = 1003, this.wrapR = 1001, this.generateMipmaps = !1, this.flipY = !1, this.needsUpdate = !0;
    }
    function DataTexture3D(data, width, height, depth) {
        void 0 === data && (data = null), void 0 === width && (width = 1), void 0 === height && (height = 1), void 0 === depth && (depth = 1), Texture.call(this, null), this.image = {
            data: data,
            width: width,
            height: height,
            depth: depth
        }, this.magFilter = 1003, this.minFilter = 1003, this.wrapR = 1001, this.generateMipmaps = !1, this.flipY = !1, this.needsUpdate = !0;
    }
    ShaderLib.physical = {
        uniforms: mergeUniforms([
            ShaderLib.standard.uniforms,
            {
                clearcoat: {
                    value: 0
                },
                clearcoatMap: {
                    value: null
                },
                clearcoatRoughness: {
                    value: 0
                },
                clearcoatRoughnessMap: {
                    value: null
                },
                clearcoatNormalScale: {
                    value: new Vector2(1, 1)
                },
                clearcoatNormalMap: {
                    value: null
                },
                sheen: {
                    value: new Color(0x000000)
                },
                transmission: {
                    value: 0
                },
                transmissionMap: {
                    value: null
                }
            }
        ]),
        vertexShader: ShaderChunk.meshphysical_vert,
        fragmentShader: ShaderChunk.meshphysical_frag
    }, DataTexture2DArray.prototype = Object.create(Texture.prototype), DataTexture2DArray.prototype.constructor = DataTexture2DArray, DataTexture2DArray.prototype.isDataTexture2DArray = !0, DataTexture3D.prototype = Object.create(Texture.prototype), DataTexture3D.prototype.constructor = DataTexture3D, DataTexture3D.prototype.isDataTexture3D = !0;
    var emptyTexture = new Texture(), emptyTexture2dArray = new DataTexture2DArray(), emptyTexture3d = new DataTexture3D(), emptyCubeTexture = new CubeTexture(), arrayCacheF32 = [], arrayCacheI32 = [], mat4array = new Float32Array(16), mat3array = new Float32Array(9), mat2array = new Float32Array(4);
    function flatten(array, nBlocks, blockSize) {
        var firstElem = array[0];
        if (firstElem <= 0 || firstElem > 0) return array;
        var n = nBlocks * blockSize, r = arrayCacheF32[n];
        if (void 0 === r && (r = new Float32Array(n), arrayCacheF32[n] = r), 0 !== nBlocks) {
            firstElem.toArray(r, 0);
            for(var i = 1, offset = 0; i !== nBlocks; ++i)offset += blockSize, array[i].toArray(r, offset);
        }
        return r;
    }
    function arraysEqual(a, b) {
        if (a.length !== b.length) return !1;
        for(var i = 0, l = a.length; i < l; i++)if (a[i] !== b[i]) return !1;
        return !0;
    }
    function copyArray(a, b) {
        for(var i = 0, l = b.length; i < l; i++)a[i] = b[i];
    }
    function allocTexUnits(textures, n) {
        var r = arrayCacheI32[n];
        void 0 === r && (r = new Int32Array(n), arrayCacheI32[n] = r);
        for(var i = 0; i !== n; ++i)r[i] = textures.allocateTextureUnit();
        return r;
    }
    function setValueV1f(gl, v) {
        var cache = this.cache;
        cache[0] !== v && (gl.uniform1f(this.addr, v), cache[0] = v);
    }
    function setValueV2f(gl, v) {
        var cache = this.cache;
        if (void 0 !== v.x) (cache[0] !== v.x || cache[1] !== v.y) && (gl.uniform2f(this.addr, v.x, v.y), cache[0] = v.x, cache[1] = v.y);
        else {
            if (arraysEqual(cache, v)) return;
            gl.uniform2fv(this.addr, v), copyArray(cache, v);
        }
    }
    function setValueV3f(gl, v) {
        var cache = this.cache;
        if (void 0 !== v.x) (cache[0] !== v.x || cache[1] !== v.y || cache[2] !== v.z) && (gl.uniform3f(this.addr, v.x, v.y, v.z), cache[0] = v.x, cache[1] = v.y, cache[2] = v.z);
        else if (void 0 !== v.r) (cache[0] !== v.r || cache[1] !== v.g || cache[2] !== v.b) && (gl.uniform3f(this.addr, v.r, v.g, v.b), cache[0] = v.r, cache[1] = v.g, cache[2] = v.b);
        else {
            if (arraysEqual(cache, v)) return;
            gl.uniform3fv(this.addr, v), copyArray(cache, v);
        }
    }
    function setValueV4f(gl, v) {
        var cache = this.cache;
        if (void 0 !== v.x) (cache[0] !== v.x || cache[1] !== v.y || cache[2] !== v.z || cache[3] !== v.w) && (gl.uniform4f(this.addr, v.x, v.y, v.z, v.w), cache[0] = v.x, cache[1] = v.y, cache[2] = v.z, cache[3] = v.w);
        else {
            if (arraysEqual(cache, v)) return;
            gl.uniform4fv(this.addr, v), copyArray(cache, v);
        }
    }
    function setValueM2(gl, v) {
        var cache = this.cache, elements = v.elements;
        if (void 0 === elements) {
            if (arraysEqual(cache, v)) return;
            gl.uniformMatrix2fv(this.addr, !1, v), copyArray(cache, v);
        } else {
            if (arraysEqual(cache, elements)) return;
            mat2array.set(elements), gl.uniformMatrix2fv(this.addr, !1, mat2array), copyArray(cache, elements);
        }
    }
    function setValueM3(gl, v) {
        var cache = this.cache, elements = v.elements;
        if (void 0 === elements) {
            if (arraysEqual(cache, v)) return;
            gl.uniformMatrix3fv(this.addr, !1, v), copyArray(cache, v);
        } else {
            if (arraysEqual(cache, elements)) return;
            mat3array.set(elements), gl.uniformMatrix3fv(this.addr, !1, mat3array), copyArray(cache, elements);
        }
    }
    function setValueM4(gl, v) {
        var cache = this.cache, elements = v.elements;
        if (void 0 === elements) {
            if (arraysEqual(cache, v)) return;
            gl.uniformMatrix4fv(this.addr, !1, v), copyArray(cache, v);
        } else {
            if (arraysEqual(cache, elements)) return;
            mat4array.set(elements), gl.uniformMatrix4fv(this.addr, !1, mat4array), copyArray(cache, elements);
        }
    }
    function setValueT1(gl, v, textures) {
        var cache = this.cache, unit = textures.allocateTextureUnit();
        cache[0] !== unit && (gl.uniform1i(this.addr, unit), cache[0] = unit), textures.safeSetTexture2D(v || emptyTexture, unit);
    }
    function setValueT2DArray1(gl, v, textures) {
        var cache = this.cache, unit = textures.allocateTextureUnit();
        cache[0] !== unit && (gl.uniform1i(this.addr, unit), cache[0] = unit), textures.setTexture2DArray(v || emptyTexture2dArray, unit);
    }
    function setValueT3D1(gl, v, textures) {
        var cache = this.cache, unit = textures.allocateTextureUnit();
        cache[0] !== unit && (gl.uniform1i(this.addr, unit), cache[0] = unit), textures.setTexture3D(v || emptyTexture3d, unit);
    }
    function setValueT6(gl, v, textures) {
        var cache = this.cache, unit = textures.allocateTextureUnit();
        cache[0] !== unit && (gl.uniform1i(this.addr, unit), cache[0] = unit), textures.safeSetTextureCube(v || emptyCubeTexture, unit);
    }
    function setValueV1i(gl, v) {
        var cache = this.cache;
        cache[0] !== v && (gl.uniform1i(this.addr, v), cache[0] = v);
    }
    function setValueV2i(gl, v) {
        var cache = this.cache;
        arraysEqual(cache, v) || (gl.uniform2iv(this.addr, v), copyArray(cache, v));
    }
    function setValueV3i(gl, v) {
        var cache = this.cache;
        arraysEqual(cache, v) || (gl.uniform3iv(this.addr, v), copyArray(cache, v));
    }
    function setValueV4i(gl, v) {
        var cache = this.cache;
        arraysEqual(cache, v) || (gl.uniform4iv(this.addr, v), copyArray(cache, v));
    }
    function setValueV1ui(gl, v) {
        var cache = this.cache;
        cache[0] !== v && (gl.uniform1ui(this.addr, v), cache[0] = v);
    }
    function setValueV1fArray(gl, v) {
        gl.uniform1fv(this.addr, v);
    }
    function setValueV1iArray(gl, v) {
        gl.uniform1iv(this.addr, v);
    }
    function setValueV2iArray(gl, v) {
        gl.uniform2iv(this.addr, v);
    }
    function setValueV3iArray(gl, v) {
        gl.uniform3iv(this.addr, v);
    }
    function setValueV4iArray(gl, v) {
        gl.uniform4iv(this.addr, v);
    }
    function setValueV2fArray(gl, v) {
        var data = flatten(v, this.size, 2);
        gl.uniform2fv(this.addr, data);
    }
    function setValueV3fArray(gl, v) {
        var data = flatten(v, this.size, 3);
        gl.uniform3fv(this.addr, data);
    }
    function setValueV4fArray(gl, v) {
        var data = flatten(v, this.size, 4);
        gl.uniform4fv(this.addr, data);
    }
    function setValueM2Array(gl, v) {
        var data = flatten(v, this.size, 4);
        gl.uniformMatrix2fv(this.addr, !1, data);
    }
    function setValueM3Array(gl, v) {
        var data = flatten(v, this.size, 9);
        gl.uniformMatrix3fv(this.addr, !1, data);
    }
    function setValueM4Array(gl, v) {
        var data = flatten(v, this.size, 16);
        gl.uniformMatrix4fv(this.addr, !1, data);
    }
    function setValueT1Array(gl, v, textures) {
        var n = v.length, units = allocTexUnits(textures, n);
        gl.uniform1iv(this.addr, units);
        for(var i = 0; i !== n; ++i)textures.safeSetTexture2D(v[i] || emptyTexture, units[i]);
    }
    function setValueT6Array(gl, v, textures) {
        var n = v.length, units = allocTexUnits(textures, n);
        gl.uniform1iv(this.addr, units);
        for(var i = 0; i !== n; ++i)textures.safeSetTextureCube(v[i] || emptyCubeTexture, units[i]);
    }
    function SingleUniform(id, activeInfo, addr) {
        this.id = id, this.addr = addr, this.cache = [], this.setValue = function(type) {
            switch(type){
                case 0x1406:
                    return setValueV1f;
                case 0x8b50:
                    return setValueV2f;
                case 0x8b51:
                    return setValueV3f;
                case 0x8b52:
                    return setValueV4f;
                case 0x8b5a:
                    return setValueM2;
                case 0x8b5b:
                    return setValueM3;
                case 0x8b5c:
                    return setValueM4;
                case 0x1404:
                case 0x8b56:
                    return setValueV1i;
                case 0x8b53:
                case 0x8b57:
                    return setValueV2i;
                case 0x8b54:
                case 0x8b58:
                    return setValueV3i;
                case 0x8b55:
                case 0x8b59:
                    return setValueV4i;
                case 0x1405:
                    return setValueV1ui;
                case 0x8b5e:
                case 0x8d66:
                case 0x8dca:
                case 0x8dd2:
                case 0x8b62:
                    return setValueT1;
                case 0x8b5f:
                case 0x8dcb:
                case 0x8dd3:
                    return setValueT3D1;
                case 0x8b60:
                case 0x8dcc:
                case 0x8dd4:
                case 0x8dc5:
                    return setValueT6;
                case 0x8dc1:
                case 0x8dcf:
                case 0x8dd7:
                case 0x8dc4:
                    return setValueT2DArray1;
            }
        }(activeInfo.type);
    }
    function PureArrayUniform(id, activeInfo, addr) {
        this.id = id, this.addr = addr, this.cache = [], this.size = activeInfo.size, this.setValue = function(type) {
            switch(type){
                case 0x1406:
                    return setValueV1fArray;
                case 0x8b50:
                    return setValueV2fArray;
                case 0x8b51:
                    return setValueV3fArray;
                case 0x8b52:
                    return setValueV4fArray;
                case 0x8b5a:
                    return setValueM2Array;
                case 0x8b5b:
                    return setValueM3Array;
                case 0x8b5c:
                    return setValueM4Array;
                case 0x1404:
                case 0x8b56:
                    return setValueV1iArray;
                case 0x8b53:
                case 0x8b57:
                    return setValueV2iArray;
                case 0x8b54:
                case 0x8b58:
                    return setValueV3iArray;
                case 0x8b55:
                case 0x8b59:
                    return setValueV4iArray;
                case 0x8b5e:
                case 0x8d66:
                case 0x8dca:
                case 0x8dd2:
                case 0x8b62:
                    return setValueT1Array;
                case 0x8b60:
                case 0x8dcc:
                case 0x8dd4:
                case 0x8dc5:
                    return setValueT6Array;
            }
        }(activeInfo.type);
    }
    function StructuredUniform(id) {
        this.id = id, this.seq = [], this.map = {};
    }
    PureArrayUniform.prototype.updateCache = function(data) {
        var cache = this.cache;
        data instanceof Float32Array && cache.length !== data.length && (this.cache = new Float32Array(data.length)), copyArray(cache, data);
    }, StructuredUniform.prototype.setValue = function(gl, value, textures) {
        for(var seq = this.seq, i = 0, n = seq.length; i !== n; ++i){
            var u = seq[i];
            u.setValue(gl, value[u.id], textures);
        }
    };
    var RePathPart = /(\w+)(\])?(\[|\.)?/g;
    function addUniform(container, uniformObject) {
        container.seq.push(uniformObject), container.map[uniformObject.id] = uniformObject;
    }
    function WebGLUniforms(gl, program) {
        this.seq = [], this.map = {};
        for(var n = gl.getProgramParameter(program, 35718), i = 0; i < n; ++i){
            var info = gl.getActiveUniform(program, i), addr = gl.getUniformLocation(program, info.name);
            !function(activeInfo, addr, container) {
                var path = activeInfo.name, pathLength = path.length;
                for(RePathPart.lastIndex = 0;;){
                    var match = RePathPart.exec(path), matchEnd = RePathPart.lastIndex, id = match[1], idIsIndex = ']' === match[2], subscript = match[3];
                    if (idIsIndex && (id |= 0), void 0 === subscript || '[' === subscript && matchEnd + 2 === pathLength) {
                        addUniform(container, void 0 === subscript ? new SingleUniform(id, activeInfo, addr) : new PureArrayUniform(id, activeInfo, addr));
                        break;
                    }
                    var next = container.map[id];
                    void 0 === next && addUniform(container, next = new StructuredUniform(id)), container = next;
                }
            }(info, addr, this);
        }
    }
    function WebGLShader(gl, type, string) {
        var shader = gl.createShader(type);
        return gl.shaderSource(shader, string), gl.compileShader(shader), shader;
    }
    WebGLUniforms.prototype.setValue = function(gl, name, value, textures) {
        var u = this.map[name];
        void 0 !== u && u.setValue(gl, value, textures);
    }, WebGLUniforms.prototype.setOptional = function(gl, object, name) {
        var v = object[name];
        void 0 !== v && this.setValue(gl, name, v);
    }, WebGLUniforms.upload = function(gl, seq, values, textures) {
        for(var i = 0, n = seq.length; i !== n; ++i){
            var u = seq[i], v = values[u.id];
            !1 !== v.needsUpdate && u.setValue(gl, v.value, textures);
        }
    }, WebGLUniforms.seqWithValue = function(seq, values) {
        for(var r = [], i = 0, n = seq.length; i !== n; ++i){
            var u = seq[i];
            u.id in values && r.push(u);
        }
        return r;
    };
    var programIdCount = 0;
    function getEncodingComponents(encoding) {
        switch(encoding){
            case 3000:
                return [
                    'Linear',
                    '( value )'
                ];
            case 3001:
                return [
                    'sRGB',
                    '( value )'
                ];
            case 3002:
                return [
                    'RGBE',
                    '( value )'
                ];
            case 3004:
                return [
                    'RGBM',
                    '( value, 7.0 )'
                ];
            case 3005:
                return [
                    'RGBM',
                    '( value, 16.0 )'
                ];
            case 3006:
                return [
                    'RGBD',
                    '( value, 256.0 )'
                ];
            case 3007:
                return [
                    'Gamma',
                    '( value, float( GAMMA_FACTOR ) )'
                ];
            case 3003:
                return [
                    'LogLuv',
                    '( value )'
                ];
            default:
                return console.warn('THREE.WebGLProgram: Unsupported encoding:', encoding), [
                    'Linear',
                    '( value )'
                ];
        }
    }
    function getShaderErrors(gl, shader, type) {
        var status = gl.getShaderParameter(shader, 35713), log = gl.getShaderInfoLog(shader).trim();
        return status && '' === log ? '' : 'THREE.WebGLShader: gl.getShaderInfoLog() ' + type + '\n' + log + function(string) {
            for(var lines = string.split('\n'), i = 0; i < lines.length; i++)lines[i] = i + 1 + ': ' + lines[i];
            return lines.join('\n');
        }(gl.getShaderSource(shader));
    }
    function getTexelDecodingFunction(functionName, encoding) {
        var components = getEncodingComponents(encoding);
        return 'vec4 ' + functionName + '( vec4 value ) { return ' + components[0] + 'ToLinear' + components[1] + '; }';
    }
    function filterEmptyLine(string) {
        return '' !== string;
    }
    function replaceLightNums(string, parameters) {
        return string.replace(/NUM_DIR_LIGHTS/g, parameters.numDirLights).replace(/NUM_SPOT_LIGHTS/g, parameters.numSpotLights).replace(/NUM_RECT_AREA_LIGHTS/g, parameters.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g, parameters.numPointLights).replace(/NUM_HEMI_LIGHTS/g, parameters.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g, parameters.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS/g, parameters.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g, parameters.numPointLightShadows);
    }
    function replaceClippingPlaneNums(string, parameters) {
        return string.replace(/NUM_CLIPPING_PLANES/g, parameters.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g, parameters.numClippingPlanes - parameters.numClipIntersection);
    }
    var includePattern = /^[ \t]*#include +<([\w\d./]+)>/gm;
    function resolveIncludes(string) {
        return string.replace(includePattern, includeReplacer);
    }
    function includeReplacer(match, include) {
        var string = ShaderChunk[include];
        if (void 0 === string) throw Error('Can not resolve #include <' + include + '>');
        return resolveIncludes(string);
    }
    var deprecatedUnrollLoopPattern = /#pragma unroll_loop[\s]+?for \( int i \= (\d+)\; i < (\d+)\; i \+\+ \) \{([\s\S]+?)(?=\})\}/g, unrollLoopPattern = /#pragma unroll_loop_start\s+for\s*\(\s*int\s+i\s*=\s*(\d+)\s*;\s*i\s*<\s*(\d+)\s*;\s*i\s*\+\+\s*\)\s*{([\s\S]+?)}\s+#pragma unroll_loop_end/g;
    function unrollLoops(string) {
        return string.replace(unrollLoopPattern, loopReplacer).replace(deprecatedUnrollLoopPattern, deprecatedLoopReplacer);
    }
    function deprecatedLoopReplacer(match, start, end, snippet) {
        return console.warn('WebGLProgram: #pragma unroll_loop shader syntax is deprecated. Please use #pragma unroll_loop_start syntax instead.'), loopReplacer(match, start, end, snippet);
    }
    function loopReplacer(match, start, end, snippet) {
        for(var string = '', i = parseInt(start); i < parseInt(end); i++)string += snippet.replace(/\[\s*i\s*\]/g, '[ ' + i + ' ]').replace(/UNROLLED_LOOP_INDEX/g, i);
        return string;
    }
    function generatePrecision(parameters) {
        var precisionstring = 'precision ' + parameters.precision + ' float;\nprecision ' + parameters.precision + ' int;';
        return 'highp' === parameters.precision ? precisionstring += '\n#define HIGH_PRECISION' : 'mediump' === parameters.precision ? precisionstring += '\n#define MEDIUM_PRECISION' : 'lowp' === parameters.precision && (precisionstring += '\n#define LOW_PRECISION'), precisionstring;
    }
    function WebGLProgram(renderer, cacheKey, parameters, bindingStates) {
        var shadowMapTypeDefine, components, prefixVertex, prefixFragment, cachedUniforms, cachedAttributes, gl = renderer.getContext(), defines = parameters.defines, vertexShader = parameters.vertexShader, fragmentShader = parameters.fragmentShader, shadowMapTypeDefine1 = (shadowMapTypeDefine = 'SHADOWMAP_TYPE_BASIC', 1 === parameters.shadowMapType ? shadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF' : 2 === parameters.shadowMapType ? shadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF_SOFT' : 3 === parameters.shadowMapType && (shadowMapTypeDefine = 'SHADOWMAP_TYPE_VSM'), shadowMapTypeDefine), envMapTypeDefine = function(parameters) {
            var envMapTypeDefine = 'ENVMAP_TYPE_CUBE';
            if (parameters.envMap) switch(parameters.envMapMode){
                case 301:
                case 302:
                    envMapTypeDefine = 'ENVMAP_TYPE_CUBE';
                    break;
                case 306:
                case 307:
                    envMapTypeDefine = 'ENVMAP_TYPE_CUBE_UV';
            }
            return envMapTypeDefine;
        }(parameters), envMapModeDefine = function(parameters) {
            var envMapModeDefine = 'ENVMAP_MODE_REFLECTION';
            if (parameters.envMap) switch(parameters.envMapMode){
                case 302:
                case 307:
                    envMapModeDefine = 'ENVMAP_MODE_REFRACTION';
            }
            return envMapModeDefine;
        }(parameters), envMapBlendingDefine = function(parameters) {
            var envMapBlendingDefine = 'ENVMAP_BLENDING_NONE';
            if (parameters.envMap) switch(parameters.combine){
                case 0:
                    envMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';
                    break;
                case 1:
                    envMapBlendingDefine = 'ENVMAP_BLENDING_MIX';
                    break;
                case 2:
                    envMapBlendingDefine = 'ENVMAP_BLENDING_ADD';
            }
            return envMapBlendingDefine;
        }(parameters), gammaFactorDefine = renderer.gammaFactor > 0 ? renderer.gammaFactor : 1.0, customExtensions = parameters.isWebGL2 ? '' : [
            parameters.extensionDerivatives || parameters.envMapCubeUV || parameters.bumpMap || parameters.tangentSpaceNormalMap || parameters.clearcoatNormalMap || parameters.flatShading || 'physical' === parameters.shaderID ? '#extension GL_OES_standard_derivatives : enable' : '',
            (parameters.extensionFragDepth || parameters.logarithmicDepthBuffer) && parameters.rendererExtensionFragDepth ? '#extension GL_EXT_frag_depth : enable' : '',
            parameters.extensionDrawBuffers && parameters.rendererExtensionDrawBuffers ? '#extension GL_EXT_draw_buffers : require' : '',
            (parameters.extensionShaderTextureLOD || parameters.envMap) && parameters.rendererExtensionShaderTextureLod ? '#extension GL_EXT_shader_texture_lod : enable' : ''
        ].filter(filterEmptyLine).join('\n'), customDefines = function(defines) {
            var chunks = [];
            for(var name in defines){
                var value = defines[name];
                !1 !== value && chunks.push('#define ' + name + ' ' + value);
            }
            return chunks.join('\n');
        }(defines), program = gl.createProgram(), versionString = parameters.glslVersion ? '#version ' + parameters.glslVersion + '\n' : '';
        parameters.isRawShaderMaterial ? ((prefixVertex = [
            customDefines
        ].filter(filterEmptyLine).join('\n')).length > 0 && (prefixVertex += '\n'), (prefixFragment = [
            customExtensions,
            customDefines
        ].filter(filterEmptyLine).join('\n')).length > 0 && (prefixFragment += '\n')) : (prefixVertex = [
            generatePrecision(parameters),
            '#define SHADER_NAME ' + parameters.shaderName,
            customDefines,
            parameters.instancing ? '#define USE_INSTANCING' : '',
            parameters.instancingColor ? '#define USE_INSTANCING_COLOR' : '',
            parameters.supportsVertexTextures ? '#define VERTEX_TEXTURES' : '',
            '#define GAMMA_FACTOR ' + gammaFactorDefine,
            '#define MAX_BONES ' + parameters.maxBones,
            parameters.useFog && parameters.fog ? '#define USE_FOG' : '',
            parameters.useFog && parameters.fogExp2 ? '#define FOG_EXP2' : '',
            parameters.map ? '#define USE_MAP' : '',
            parameters.envMap ? '#define USE_ENVMAP' : '',
            parameters.envMap ? '#define ' + envMapModeDefine : '',
            parameters.lightMap ? '#define USE_LIGHTMAP' : '',
            parameters.aoMap ? '#define USE_AOMAP' : '',
            parameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',
            parameters.bumpMap ? '#define USE_BUMPMAP' : '',
            parameters.normalMap ? '#define USE_NORMALMAP' : '',
            parameters.normalMap && parameters.objectSpaceNormalMap ? '#define OBJECTSPACE_NORMALMAP' : '',
            parameters.normalMap && parameters.tangentSpaceNormalMap ? '#define TANGENTSPACE_NORMALMAP' : '',
            parameters.clearcoatMap ? '#define USE_CLEARCOATMAP' : '',
            parameters.clearcoatRoughnessMap ? '#define USE_CLEARCOAT_ROUGHNESSMAP' : '',
            parameters.clearcoatNormalMap ? '#define USE_CLEARCOAT_NORMALMAP' : '',
            parameters.displacementMap && parameters.supportsVertexTextures ? '#define USE_DISPLACEMENTMAP' : '',
            parameters.specularMap ? '#define USE_SPECULARMAP' : '',
            parameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',
            parameters.metalnessMap ? '#define USE_METALNESSMAP' : '',
            parameters.alphaMap ? '#define USE_ALPHAMAP' : '',
            parameters.transmissionMap ? '#define USE_TRANSMISSIONMAP' : '',
            parameters.vertexTangents ? '#define USE_TANGENT' : '',
            parameters.vertexColors ? '#define USE_COLOR' : '',
            parameters.vertexUvs ? '#define USE_UV' : '',
            parameters.uvsVertexOnly ? '#define UVS_VERTEX_ONLY' : '',
            parameters.flatShading ? '#define FLAT_SHADED' : '',
            parameters.skinning ? '#define USE_SKINNING' : '',
            parameters.useVertexTexture ? '#define BONE_TEXTURE' : '',
            parameters.morphTargets ? '#define USE_MORPHTARGETS' : '',
            parameters.morphNormals && !1 === parameters.flatShading ? '#define USE_MORPHNORMALS' : '',
            parameters.doubleSided ? '#define DOUBLE_SIDED' : '',
            parameters.flipSided ? '#define FLIP_SIDED' : '',
            parameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',
            parameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine1 : '',
            parameters.sizeAttenuation ? '#define USE_SIZEATTENUATION' : '',
            parameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',
            parameters.logarithmicDepthBuffer && parameters.rendererExtensionFragDepth ? '#define USE_LOGDEPTHBUF_EXT' : '',
            'uniform mat4 modelMatrix;',
            'uniform mat4 modelViewMatrix;',
            'uniform mat4 projectionMatrix;',
            'uniform mat4 viewMatrix;',
            'uniform mat3 normalMatrix;',
            'uniform vec3 cameraPosition;',
            'uniform bool isOrthographic;',
            '#ifdef USE_INSTANCING',
            '	attribute mat4 instanceMatrix;',
            '#endif',
            '#ifdef USE_INSTANCING_COLOR',
            '	attribute vec3 instanceColor;',
            '#endif',
            'attribute vec3 position;',
            'attribute vec3 normal;',
            'attribute vec2 uv;',
            '#ifdef USE_TANGENT',
            '	attribute vec4 tangent;',
            '#endif',
            '#ifdef USE_COLOR',
            '	attribute vec3 color;',
            '#endif',
            '#ifdef USE_MORPHTARGETS',
            '	attribute vec3 morphTarget0;',
            '	attribute vec3 morphTarget1;',
            '	attribute vec3 morphTarget2;',
            '	attribute vec3 morphTarget3;',
            '	#ifdef USE_MORPHNORMALS',
            '		attribute vec3 morphNormal0;',
            '		attribute vec3 morphNormal1;',
            '		attribute vec3 morphNormal2;',
            '		attribute vec3 morphNormal3;',
            '	#else',
            '		attribute vec3 morphTarget4;',
            '		attribute vec3 morphTarget5;',
            '		attribute vec3 morphTarget6;',
            '		attribute vec3 morphTarget7;',
            '	#endif',
            '#endif',
            '#ifdef USE_SKINNING',
            '	attribute vec4 skinIndex;',
            '	attribute vec4 skinWeight;',
            '#endif',
            '\n'
        ].filter(filterEmptyLine).join('\n'), prefixFragment = [
            customExtensions,
            generatePrecision(parameters),
            '#define SHADER_NAME ' + parameters.shaderName,
            customDefines,
            parameters.alphaTest ? '#define ALPHATEST ' + parameters.alphaTest + (parameters.alphaTest % 1 ? '' : '.0') : '',
            '#define GAMMA_FACTOR ' + gammaFactorDefine,
            parameters.useFog && parameters.fog ? '#define USE_FOG' : '',
            parameters.useFog && parameters.fogExp2 ? '#define FOG_EXP2' : '',
            parameters.map ? '#define USE_MAP' : '',
            parameters.matcap ? '#define USE_MATCAP' : '',
            parameters.envMap ? '#define USE_ENVMAP' : '',
            parameters.envMap ? '#define ' + envMapTypeDefine : '',
            parameters.envMap ? '#define ' + envMapModeDefine : '',
            parameters.envMap ? '#define ' + envMapBlendingDefine : '',
            parameters.lightMap ? '#define USE_LIGHTMAP' : '',
            parameters.aoMap ? '#define USE_AOMAP' : '',
            parameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',
            parameters.bumpMap ? '#define USE_BUMPMAP' : '',
            parameters.normalMap ? '#define USE_NORMALMAP' : '',
            parameters.normalMap && parameters.objectSpaceNormalMap ? '#define OBJECTSPACE_NORMALMAP' : '',
            parameters.normalMap && parameters.tangentSpaceNormalMap ? '#define TANGENTSPACE_NORMALMAP' : '',
            parameters.clearcoatMap ? '#define USE_CLEARCOATMAP' : '',
            parameters.clearcoatRoughnessMap ? '#define USE_CLEARCOAT_ROUGHNESSMAP' : '',
            parameters.clearcoatNormalMap ? '#define USE_CLEARCOAT_NORMALMAP' : '',
            parameters.specularMap ? '#define USE_SPECULARMAP' : '',
            parameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',
            parameters.metalnessMap ? '#define USE_METALNESSMAP' : '',
            parameters.alphaMap ? '#define USE_ALPHAMAP' : '',
            parameters.sheen ? '#define USE_SHEEN' : '',
            parameters.transmissionMap ? '#define USE_TRANSMISSIONMAP' : '',
            parameters.vertexTangents ? '#define USE_TANGENT' : '',
            parameters.vertexColors || parameters.instancingColor ? '#define USE_COLOR' : '',
            parameters.vertexUvs ? '#define USE_UV' : '',
            parameters.uvsVertexOnly ? '#define UVS_VERTEX_ONLY' : '',
            parameters.gradientMap ? '#define USE_GRADIENTMAP' : '',
            parameters.flatShading ? '#define FLAT_SHADED' : '',
            parameters.doubleSided ? '#define DOUBLE_SIDED' : '',
            parameters.flipSided ? '#define FLIP_SIDED' : '',
            parameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',
            parameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine1 : '',
            parameters.premultipliedAlpha ? '#define PREMULTIPLIED_ALPHA' : '',
            parameters.physicallyCorrectLights ? '#define PHYSICALLY_CORRECT_LIGHTS' : '',
            parameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',
            parameters.logarithmicDepthBuffer && parameters.rendererExtensionFragDepth ? '#define USE_LOGDEPTHBUF_EXT' : '',
            (parameters.extensionShaderTextureLOD || parameters.envMap) && parameters.rendererExtensionShaderTextureLod ? '#define TEXTURE_LOD_EXT' : '',
            'uniform mat4 viewMatrix;',
            'uniform vec3 cameraPosition;',
            'uniform bool isOrthographic;',
            0 !== parameters.toneMapping ? '#define TONE_MAPPING' : '',
            0 !== parameters.toneMapping ? ShaderChunk.tonemapping_pars_fragment : '',
            0 !== parameters.toneMapping ? function(functionName, toneMapping) {
                var toneMappingName;
                switch(toneMapping){
                    case 1:
                        toneMappingName = 'Linear';
                        break;
                    case 2:
                        toneMappingName = 'Reinhard';
                        break;
                    case 3:
                        toneMappingName = 'OptimizedCineon';
                        break;
                    case 4:
                        toneMappingName = 'ACESFilmic';
                        break;
                    case 5:
                        toneMappingName = 'Custom';
                        break;
                    default:
                        console.warn('THREE.WebGLProgram: Unsupported toneMapping:', toneMapping), toneMappingName = 'Linear';
                }
                return 'vec3 ' + functionName + '( vec3 color ) { return ' + toneMappingName + 'ToneMapping( color ); }';
            }('toneMapping', parameters.toneMapping) : '',
            parameters.dithering ? '#define DITHERING' : '',
            ShaderChunk.encodings_pars_fragment,
            parameters.map ? getTexelDecodingFunction('mapTexelToLinear', parameters.mapEncoding) : '',
            parameters.matcap ? getTexelDecodingFunction('matcapTexelToLinear', parameters.matcapEncoding) : '',
            parameters.envMap ? getTexelDecodingFunction('envMapTexelToLinear', parameters.envMapEncoding) : '',
            parameters.emissiveMap ? getTexelDecodingFunction('emissiveMapTexelToLinear', parameters.emissiveMapEncoding) : '',
            parameters.lightMap ? getTexelDecodingFunction('lightMapTexelToLinear', parameters.lightMapEncoding) : '',
            "vec4 linearToOutputTexel( vec4 value ) { return LinearTo" + (components = getEncodingComponents(parameters.outputEncoding))[0] + components[1] + '; }',
            parameters.depthPacking ? '#define DEPTH_PACKING ' + parameters.depthPacking : '',
            '\n'
        ].filter(filterEmptyLine).join('\n')), vertexShader = replaceClippingPlaneNums(vertexShader = replaceLightNums(vertexShader = resolveIncludes(vertexShader), parameters), parameters), fragmentShader = replaceClippingPlaneNums(fragmentShader = replaceLightNums(fragmentShader = resolveIncludes(fragmentShader), parameters), parameters), vertexShader = unrollLoops(vertexShader), fragmentShader = unrollLoops(fragmentShader), parameters.isWebGL2 && !0 !== parameters.isRawShaderMaterial && (versionString = '#version 300 es\n', prefixVertex = "#define attribute in\n#define varying out\n#define texture2D texture\n" + prefixVertex, prefixFragment = [
            '#define varying in',
            parameters.glslVersion === GLSL3 ? '' : 'out highp vec4 pc_fragColor;',
            parameters.glslVersion === GLSL3 ? '' : '#define gl_FragColor pc_fragColor',
            '#define gl_FragDepthEXT gl_FragDepth',
            '#define texture2D texture',
            '#define textureCube texture',
            '#define texture2DProj textureProj',
            '#define texture2DLodEXT textureLod',
            '#define texture2DProjLodEXT textureProjLod',
            '#define textureCubeLodEXT textureLod',
            '#define texture2DGradEXT textureGrad',
            '#define texture2DProjGradEXT textureProjGrad',
            '#define textureCubeGradEXT textureGrad'
        ].join('\n') + '\n' + prefixFragment);
        var vertexGlsl = versionString + prefixVertex + vertexShader, fragmentGlsl = versionString + prefixFragment + fragmentShader, glVertexShader = WebGLShader(gl, 35633, vertexGlsl), glFragmentShader = WebGLShader(gl, 35632, fragmentGlsl);
        if (gl.attachShader(program, glVertexShader), gl.attachShader(program, glFragmentShader), void 0 !== parameters.index0AttributeName ? gl.bindAttribLocation(program, 0, parameters.index0AttributeName) : !0 === parameters.morphTargets && gl.bindAttribLocation(program, 0, 'position'), gl.linkProgram(program), renderer.debug.checkShaderErrors) {
            var programLog = gl.getProgramInfoLog(program).trim(), vertexLog = gl.getShaderInfoLog(glVertexShader).trim(), fragmentLog = gl.getShaderInfoLog(glFragmentShader).trim(), runnable = !0, haveDiagnostics = !0;
            if (!1 === gl.getProgramParameter(program, 35714)) {
                runnable = !1;
                var vertexErrors = getShaderErrors(gl, glVertexShader, 'vertex'), fragmentErrors = getShaderErrors(gl, glFragmentShader, 'fragment');
                console.error('THREE.WebGLProgram: shader error: ', gl.getError(), '35715', gl.getProgramParameter(program, 35715), 'gl.getProgramInfoLog', programLog, vertexErrors, fragmentErrors);
            } else '' !== programLog ? console.warn('THREE.WebGLProgram: gl.getProgramInfoLog()', programLog) : ('' === vertexLog || '' === fragmentLog) && (haveDiagnostics = !1);
            haveDiagnostics && (this.diagnostics = {
                runnable: runnable,
                programLog: programLog,
                vertexShader: {
                    log: vertexLog,
                    prefix: prefixVertex
                },
                fragmentShader: {
                    log: fragmentLog,
                    prefix: prefixFragment
                }
            });
        }
        return gl.deleteShader(glVertexShader), gl.deleteShader(glFragmentShader), this.getUniforms = function() {
            return void 0 === cachedUniforms && (cachedUniforms = new WebGLUniforms(gl, program)), cachedUniforms;
        }, this.getAttributes = function() {
            return void 0 === cachedAttributes && (cachedAttributes = function(gl, program) {
                for(var attributes = {}, n = gl.getProgramParameter(program, 35721), i = 0; i < n; i++){
                    var name = gl.getActiveAttrib(program, i).name;
                    attributes[name] = gl.getAttribLocation(program, name);
                }
                return attributes;
            }(gl, program)), cachedAttributes;
        }, this.destroy = function() {
            bindingStates.releaseStatesOfProgram(this), gl.deleteProgram(program), this.program = void 0;
        }, this.name = parameters.shaderName, this.id = programIdCount++, this.cacheKey = cacheKey, this.usedTimes = 1, this.program = program, this.vertexShader = glVertexShader, this.fragmentShader = glFragmentShader, this;
    }
    function WebGLPrograms(renderer, cubemaps, extensions, capabilities, bindingStates, clipping) {
        var programs = [], isWebGL2 = capabilities.isWebGL2, logarithmicDepthBuffer = capabilities.logarithmicDepthBuffer, floatVertexTextures = capabilities.floatVertexTextures, maxVertexUniforms = capabilities.maxVertexUniforms, vertexTextures = capabilities.vertexTextures, precision = capabilities.precision, shaderIDs = {
            MeshDepthMaterial: 'depth',
            MeshDistanceMaterial: 'distanceRGBA',
            MeshNormalMaterial: 'normal',
            MeshBasicMaterial: 'basic',
            MeshLambertMaterial: 'lambert',
            MeshPhongMaterial: 'phong',
            MeshToonMaterial: 'toon',
            MeshStandardMaterial: 'physical',
            MeshPhysicalMaterial: 'physical',
            MeshMatcapMaterial: 'matcap',
            LineBasicMaterial: 'basic',
            LineDashedMaterial: 'dashed',
            PointsMaterial: 'points',
            ShadowMaterial: 'shadow',
            SpriteMaterial: 'sprite'
        }, parameterNames = [
            'precision',
            'isWebGL2',
            'supportsVertexTextures',
            'outputEncoding',
            'instancing',
            'instancingColor',
            'map',
            'mapEncoding',
            'matcap',
            'matcapEncoding',
            'envMap',
            'envMapMode',
            'envMapEncoding',
            'envMapCubeUV',
            'lightMap',
            'lightMapEncoding',
            'aoMap',
            'emissiveMap',
            'emissiveMapEncoding',
            'bumpMap',
            'normalMap',
            'objectSpaceNormalMap',
            'tangentSpaceNormalMap',
            'clearcoatMap',
            'clearcoatRoughnessMap',
            'clearcoatNormalMap',
            'displacementMap',
            'specularMap',
            'roughnessMap',
            'metalnessMap',
            'gradientMap',
            'alphaMap',
            'combine',
            'vertexColors',
            'vertexTangents',
            'vertexUvs',
            'uvsVertexOnly',
            'fog',
            'useFog',
            'fogExp2',
            'flatShading',
            'sizeAttenuation',
            'logarithmicDepthBuffer',
            'skinning',
            'maxBones',
            'useVertexTexture',
            'morphTargets',
            'morphNormals',
            'maxMorphTargets',
            'maxMorphNormals',
            'premultipliedAlpha',
            'numDirLights',
            'numPointLights',
            'numSpotLights',
            'numHemiLights',
            'numRectAreaLights',
            'numDirLightShadows',
            'numPointLightShadows',
            'numSpotLightShadows',
            'shadowMapEnabled',
            'shadowMapType',
            'toneMapping',
            'physicallyCorrectLights',
            'alphaTest',
            'doubleSided',
            'flipSided',
            'numClippingPlanes',
            'numClipIntersection',
            'depthPacking',
            'dithering',
            'sheen',
            'transmissionMap'
        ];
        function getTextureEncodingFromMap(map) {
            var encoding;
            return map && map.isTexture ? encoding = map.encoding : map && map.isWebGLRenderTarget ? (console.warn('THREE.WebGLPrograms.getTextureEncodingFromMap: don\'t use render targets as textures. Use their .texture property instead.'), encoding = map.texture.encoding) : encoding = 3000, encoding;
        }
        return {
            getParameters: function(material, lights, shadows, scene, object) {
                var vertexShader, fragmentShader, fog = scene.fog, environment = material.isMeshStandardMaterial ? scene.environment : null, envMap = cubemaps.get(material.envMap || environment), shaderID = shaderIDs[material.type], maxBones = object.isSkinnedMesh ? function(object) {
                    var bones = object.skeleton.bones;
                    if (floatVertexTextures) return 1024;
                    var maxBones = Math.min(Math.floor((maxVertexUniforms - 20) / 4), bones.length);
                    return maxBones < bones.length ? (console.warn('THREE.WebGLRenderer: Skeleton has ' + bones.length + ' bones. This GPU supports ' + maxBones + '.'), 0) : maxBones;
                }(object) : 0;
                if (null !== material.precision && (precision = capabilities.getMaxPrecision(material.precision)) !== material.precision && console.warn('THREE.WebGLProgram.getParameters:', material.precision, 'not supported, using', precision, 'instead.'), shaderID) {
                    var shader = ShaderLib[shaderID];
                    vertexShader = shader.vertexShader, fragmentShader = shader.fragmentShader;
                } else vertexShader = material.vertexShader, fragmentShader = material.fragmentShader;
                var currentRenderTarget = renderer.getRenderTarget();
                return {
                    isWebGL2: isWebGL2,
                    shaderID: shaderID,
                    shaderName: material.type,
                    vertexShader: vertexShader,
                    fragmentShader: fragmentShader,
                    defines: material.defines,
                    isRawShaderMaterial: !0 === material.isRawShaderMaterial,
                    glslVersion: material.glslVersion,
                    precision: precision,
                    instancing: !0 === object.isInstancedMesh,
                    instancingColor: !0 === object.isInstancedMesh && null !== object.instanceColor,
                    supportsVertexTextures: vertexTextures,
                    outputEncoding: null !== currentRenderTarget ? getTextureEncodingFromMap(currentRenderTarget.texture) : renderer.outputEncoding,
                    map: !!material.map,
                    mapEncoding: getTextureEncodingFromMap(material.map),
                    matcap: !!material.matcap,
                    matcapEncoding: getTextureEncodingFromMap(material.matcap),
                    envMap: !!envMap,
                    envMapMode: envMap && envMap.mapping,
                    envMapEncoding: getTextureEncodingFromMap(envMap),
                    envMapCubeUV: !!envMap && (306 === envMap.mapping || 307 === envMap.mapping),
                    lightMap: !!material.lightMap,
                    lightMapEncoding: getTextureEncodingFromMap(material.lightMap),
                    aoMap: !!material.aoMap,
                    emissiveMap: !!material.emissiveMap,
                    emissiveMapEncoding: getTextureEncodingFromMap(material.emissiveMap),
                    bumpMap: !!material.bumpMap,
                    normalMap: !!material.normalMap,
                    objectSpaceNormalMap: 1 === material.normalMapType,
                    tangentSpaceNormalMap: 0 === material.normalMapType,
                    clearcoatMap: !!material.clearcoatMap,
                    clearcoatRoughnessMap: !!material.clearcoatRoughnessMap,
                    clearcoatNormalMap: !!material.clearcoatNormalMap,
                    displacementMap: !!material.displacementMap,
                    roughnessMap: !!material.roughnessMap,
                    metalnessMap: !!material.metalnessMap,
                    specularMap: !!material.specularMap,
                    alphaMap: !!material.alphaMap,
                    gradientMap: !!material.gradientMap,
                    sheen: !!material.sheen,
                    transmissionMap: !!material.transmissionMap,
                    combine: material.combine,
                    vertexTangents: material.normalMap && material.vertexTangents,
                    vertexColors: material.vertexColors,
                    vertexUvs: !!material.map || !!material.bumpMap || !!material.normalMap || !!material.specularMap || !!material.alphaMap || !!material.emissiveMap || !!material.roughnessMap || !!material.metalnessMap || !!material.clearcoatMap || !!material.clearcoatRoughnessMap || !!material.clearcoatNormalMap || !!material.displacementMap || !!material.transmissionMap,
                    uvsVertexOnly: !(material.map || material.bumpMap || material.normalMap || material.specularMap || material.alphaMap || material.emissiveMap || material.roughnessMap || material.metalnessMap || material.clearcoatNormalMap || material.transmissionMap) && !!material.displacementMap,
                    fog: !!fog,
                    useFog: material.fog,
                    fogExp2: fog && fog.isFogExp2,
                    flatShading: material.flatShading,
                    sizeAttenuation: material.sizeAttenuation,
                    logarithmicDepthBuffer: logarithmicDepthBuffer,
                    skinning: material.skinning && maxBones > 0,
                    maxBones: maxBones,
                    useVertexTexture: floatVertexTextures,
                    morphTargets: material.morphTargets,
                    morphNormals: material.morphNormals,
                    maxMorphTargets: renderer.maxMorphTargets,
                    maxMorphNormals: renderer.maxMorphNormals,
                    numDirLights: lights.directional.length,
                    numPointLights: lights.point.length,
                    numSpotLights: lights.spot.length,
                    numRectAreaLights: lights.rectArea.length,
                    numHemiLights: lights.hemi.length,
                    numDirLightShadows: lights.directionalShadowMap.length,
                    numPointLightShadows: lights.pointShadowMap.length,
                    numSpotLightShadows: lights.spotShadowMap.length,
                    numClippingPlanes: clipping.numPlanes,
                    numClipIntersection: clipping.numIntersection,
                    dithering: material.dithering,
                    shadowMapEnabled: renderer.shadowMap.enabled && shadows.length > 0,
                    shadowMapType: renderer.shadowMap.type,
                    toneMapping: material.toneMapped ? renderer.toneMapping : 0,
                    physicallyCorrectLights: renderer.physicallyCorrectLights,
                    premultipliedAlpha: material.premultipliedAlpha,
                    alphaTest: material.alphaTest,
                    doubleSided: 2 === material.side,
                    flipSided: 1 === material.side,
                    depthPacking: void 0 !== material.depthPacking && material.depthPacking,
                    index0AttributeName: material.index0AttributeName,
                    extensionDerivatives: material.extensions && material.extensions.derivatives,
                    extensionFragDepth: material.extensions && material.extensions.fragDepth,
                    extensionDrawBuffers: material.extensions && material.extensions.drawBuffers,
                    extensionShaderTextureLOD: material.extensions && material.extensions.shaderTextureLOD,
                    rendererExtensionFragDepth: isWebGL2 || extensions.has('EXT_frag_depth'),
                    rendererExtensionDrawBuffers: isWebGL2 || extensions.has('WEBGL_draw_buffers'),
                    rendererExtensionShaderTextureLod: isWebGL2 || extensions.has('EXT_shader_texture_lod'),
                    customProgramCacheKey: material.customProgramCacheKey()
                };
            },
            getProgramCacheKey: function(parameters) {
                var array = [];
                if (parameters.shaderID ? array.push(parameters.shaderID) : (array.push(parameters.fragmentShader), array.push(parameters.vertexShader)), void 0 !== parameters.defines) for(var name in parameters.defines)array.push(name), array.push(parameters.defines[name]);
                if (!1 === parameters.isRawShaderMaterial) {
                    for(var i = 0; i < parameterNames.length; i++)array.push(parameters[parameterNames[i]]);
                    array.push(renderer.outputEncoding), array.push(renderer.gammaFactor);
                }
                return array.push(parameters.customProgramCacheKey), array.join();
            },
            getUniforms: function(material) {
                var uniforms, shaderID = shaderIDs[material.type];
                if (shaderID) {
                    var shader = ShaderLib[shaderID];
                    uniforms = UniformsUtils.clone(shader.uniforms);
                } else uniforms = material.uniforms;
                return uniforms;
            },
            acquireProgram: function(parameters, cacheKey) {
                for(var program, p = 0, pl = programs.length; p < pl; p++){
                    var preexistingProgram = programs[p];
                    if (preexistingProgram.cacheKey === cacheKey) {
                        program = preexistingProgram, ++program.usedTimes;
                        break;
                    }
                }
                return void 0 === program && (program = new WebGLProgram(renderer, cacheKey, parameters, bindingStates), programs.push(program)), program;
            },
            releaseProgram: function(program) {
                if (0 == --program.usedTimes) {
                    var i = programs.indexOf(program);
                    programs[i] = programs[programs.length - 1], programs.pop(), program.destroy();
                }
            },
            programs: programs
        };
    }
    function WebGLProperties() {
        var properties = new WeakMap();
        return {
            get: function(object) {
                var map = properties.get(object);
                return void 0 === map && (map = {}, properties.set(object, map)), map;
            },
            remove: function(object) {
                properties.delete(object);
            },
            update: function(object, key, value) {
                properties.get(object)[key] = value;
            },
            dispose: function() {
                properties = new WeakMap();
            }
        };
    }
    function painterSortStable(a, b) {
        return a.groupOrder !== b.groupOrder ? a.groupOrder - b.groupOrder : a.renderOrder !== b.renderOrder ? a.renderOrder - b.renderOrder : a.program !== b.program ? a.program.id - b.program.id : a.material.id !== b.material.id ? a.material.id - b.material.id : a.z !== b.z ? a.z - b.z : a.id - b.id;
    }
    function reversePainterSortStable(a, b) {
        return a.groupOrder !== b.groupOrder ? a.groupOrder - b.groupOrder : a.renderOrder !== b.renderOrder ? a.renderOrder - b.renderOrder : a.z !== b.z ? b.z - a.z : a.id - b.id;
    }
    function WebGLRenderList(properties) {
        var renderItems = [], renderItemsIndex = 0, opaque = [], transparent = [], defaultProgram = {
            id: -1
        };
        function getNextRenderItem(object, geometry, material, groupOrder, z, group) {
            var renderItem = renderItems[renderItemsIndex], materialProperties = properties.get(material);
            return void 0 === renderItem ? (renderItem = {
                id: object.id,
                object: object,
                geometry: geometry,
                material: material,
                program: materialProperties.program || defaultProgram,
                groupOrder: groupOrder,
                renderOrder: object.renderOrder,
                z: z,
                group: group
            }, renderItems[renderItemsIndex] = renderItem) : (renderItem.id = object.id, renderItem.object = object, renderItem.geometry = geometry, renderItem.material = material, renderItem.program = materialProperties.program || defaultProgram, renderItem.groupOrder = groupOrder, renderItem.renderOrder = object.renderOrder, renderItem.z = z, renderItem.group = group), renderItemsIndex++, renderItem;
        }
        return {
            opaque: opaque,
            transparent: transparent,
            init: function() {
                renderItemsIndex = 0, opaque.length = 0, transparent.length = 0;
            },
            push: function(object, geometry, material, groupOrder, z, group) {
                var renderItem = getNextRenderItem(object, geometry, material, groupOrder, z, group);
                (!0 === material.transparent ? transparent : opaque).push(renderItem);
            },
            unshift: function(object, geometry, material, groupOrder, z, group) {
                var renderItem = getNextRenderItem(object, geometry, material, groupOrder, z, group);
                (!0 === material.transparent ? transparent : opaque).unshift(renderItem);
            },
            finish: function() {
                for(var i = renderItemsIndex, il = renderItems.length; i < il; i++){
                    var renderItem = renderItems[i];
                    if (null === renderItem.id) break;
                    renderItem.id = null, renderItem.object = null, renderItem.geometry = null, renderItem.material = null, renderItem.program = null, renderItem.group = null;
                }
            },
            sort: function(customOpaqueSort, customTransparentSort) {
                opaque.length > 1 && opaque.sort(customOpaqueSort || painterSortStable), transparent.length > 1 && transparent.sort(customTransparentSort || reversePainterSortStable);
            }
        };
    }
    function WebGLRenderLists(properties) {
        var lists = new WeakMap();
        return {
            get: function(scene, camera) {
                var list, cameras = lists.get(scene);
                return void 0 === cameras ? (list = new WebGLRenderList(properties), lists.set(scene, new WeakMap()), lists.get(scene).set(camera, list)) : void 0 === (list = cameras.get(camera)) && (list = new WebGLRenderList(properties), cameras.set(camera, list)), list;
            },
            dispose: function() {
                lists = new WeakMap();
            }
        };
    }
    function UniformsCache() {
        var lights = {};
        return {
            get: function(light) {
                var uniforms;
                if (void 0 !== lights[light.id]) return lights[light.id];
                switch(light.type){
                    case 'DirectionalLight':
                        uniforms = {
                            direction: new Vector3(),
                            color: new Color()
                        };
                        break;
                    case 'SpotLight':
                        uniforms = {
                            position: new Vector3(),
                            direction: new Vector3(),
                            color: new Color(),
                            distance: 0,
                            coneCos: 0,
                            penumbraCos: 0,
                            decay: 0
                        };
                        break;
                    case 'PointLight':
                        uniforms = {
                            position: new Vector3(),
                            color: new Color(),
                            distance: 0,
                            decay: 0
                        };
                        break;
                    case 'HemisphereLight':
                        uniforms = {
                            direction: new Vector3(),
                            skyColor: new Color(),
                            groundColor: new Color()
                        };
                        break;
                    case 'RectAreaLight':
                        uniforms = {
                            color: new Color(),
                            position: new Vector3(),
                            halfWidth: new Vector3(),
                            halfHeight: new Vector3()
                        };
                }
                return lights[light.id] = uniforms, uniforms;
            }
        };
    }
    var nextVersion = 0;
    function shadowCastingLightsFirst(lightA, lightB) {
        return (lightB.castShadow ? 1 : 0) - (lightA.castShadow ? 1 : 0);
    }
    function WebGLLights(extensions, capabilities) {
        for(var lights, cache = new UniformsCache(), shadowCache = (lights = {}, {
            get: function(light) {
                var uniforms;
                if (void 0 !== lights[light.id]) return lights[light.id];
                switch(light.type){
                    case 'DirectionalLight':
                    case 'SpotLight':
                        uniforms = {
                            shadowBias: 0,
                            shadowNormalBias: 0,
                            shadowRadius: 1,
                            shadowMapSize: new Vector2()
                        };
                        break;
                    case 'PointLight':
                        uniforms = {
                            shadowBias: 0,
                            shadowNormalBias: 0,
                            shadowRadius: 1,
                            shadowMapSize: new Vector2(),
                            shadowCameraNear: 1,
                            shadowCameraFar: 1000
                        };
                }
                return lights[light.id] = uniforms, uniforms;
            }
        }), state = {
            version: 0,
            hash: {
                directionalLength: -1,
                pointLength: -1,
                spotLength: -1,
                rectAreaLength: -1,
                hemiLength: -1,
                numDirectionalShadows: -1,
                numPointShadows: -1,
                numSpotShadows: -1
            },
            ambient: [
                0,
                0,
                0
            ],
            probe: [],
            directional: [],
            directionalShadow: [],
            directionalShadowMap: [],
            directionalShadowMatrix: [],
            spot: [],
            spotShadow: [],
            spotShadowMap: [],
            spotShadowMatrix: [],
            rectArea: [],
            rectAreaLTC1: null,
            rectAreaLTC2: null,
            point: [],
            pointShadow: [],
            pointShadowMap: [],
            pointShadowMatrix: [],
            hemi: []
        }, i = 0; i < 9; i++)state.probe.push(new Vector3());
        var vector3 = new Vector3(), matrix4 = new Matrix4(), matrix42 = new Matrix4();
        return {
            setup: function(lights) {
                for(var r = 0, g = 0, b = 0, _i = 0; _i < 9; _i++)state.probe[_i].set(0, 0, 0);
                var directionalLength = 0, pointLength = 0, spotLength = 0, rectAreaLength = 0, hemiLength = 0, numDirectionalShadows = 0, numPointShadows = 0, numSpotShadows = 0;
                lights.sort(shadowCastingLightsFirst);
                for(var _i2 = 0, l = lights.length; _i2 < l; _i2++){
                    var light = lights[_i2], color = light.color, intensity = light.intensity, distance = light.distance, shadowMap = light.shadow && light.shadow.map ? light.shadow.map.texture : null;
                    if (light.isAmbientLight) r += color.r * intensity, g += color.g * intensity, b += color.b * intensity;
                    else if (light.isLightProbe) for(var j = 0; j < 9; j++)state.probe[j].addScaledVector(light.sh.coefficients[j], intensity);
                    else if (light.isDirectionalLight) {
                        var uniforms = cache.get(light);
                        if (uniforms.color.copy(light.color).multiplyScalar(light.intensity), light.castShadow) {
                            var shadow = light.shadow, shadowUniforms = shadowCache.get(light);
                            shadowUniforms.shadowBias = shadow.bias, shadowUniforms.shadowNormalBias = shadow.normalBias, shadowUniforms.shadowRadius = shadow.radius, shadowUniforms.shadowMapSize = shadow.mapSize, state.directionalShadow[directionalLength] = shadowUniforms, state.directionalShadowMap[directionalLength] = shadowMap, state.directionalShadowMatrix[directionalLength] = light.shadow.matrix, numDirectionalShadows++;
                        }
                        state.directional[directionalLength] = uniforms, directionalLength++;
                    } else if (light.isSpotLight) {
                        var _uniforms = cache.get(light);
                        if (_uniforms.position.setFromMatrixPosition(light.matrixWorld), _uniforms.color.copy(color).multiplyScalar(intensity), _uniforms.distance = distance, _uniforms.coneCos = Math.cos(light.angle), _uniforms.penumbraCos = Math.cos(light.angle * (1 - light.penumbra)), _uniforms.decay = light.decay, light.castShadow) {
                            var _shadow = light.shadow, _shadowUniforms = shadowCache.get(light);
                            _shadowUniforms.shadowBias = _shadow.bias, _shadowUniforms.shadowNormalBias = _shadow.normalBias, _shadowUniforms.shadowRadius = _shadow.radius, _shadowUniforms.shadowMapSize = _shadow.mapSize, state.spotShadow[spotLength] = _shadowUniforms, state.spotShadowMap[spotLength] = shadowMap, state.spotShadowMatrix[spotLength] = light.shadow.matrix, numSpotShadows++;
                        }
                        state.spot[spotLength] = _uniforms, spotLength++;
                    } else if (light.isRectAreaLight) {
                        var _uniforms2 = cache.get(light);
                        _uniforms2.color.copy(color).multiplyScalar(intensity), _uniforms2.halfWidth.set(0.5 * light.width, 0.0, 0.0), _uniforms2.halfHeight.set(0.0, 0.5 * light.height, 0.0), state.rectArea[rectAreaLength] = _uniforms2, rectAreaLength++;
                    } else if (light.isPointLight) {
                        var _uniforms3 = cache.get(light);
                        if (_uniforms3.color.copy(light.color).multiplyScalar(light.intensity), _uniforms3.distance = light.distance, _uniforms3.decay = light.decay, light.castShadow) {
                            var _shadow2 = light.shadow, _shadowUniforms2 = shadowCache.get(light);
                            _shadowUniforms2.shadowBias = _shadow2.bias, _shadowUniforms2.shadowNormalBias = _shadow2.normalBias, _shadowUniforms2.shadowRadius = _shadow2.radius, _shadowUniforms2.shadowMapSize = _shadow2.mapSize, _shadowUniforms2.shadowCameraNear = _shadow2.camera.near, _shadowUniforms2.shadowCameraFar = _shadow2.camera.far, state.pointShadow[pointLength] = _shadowUniforms2, state.pointShadowMap[pointLength] = shadowMap, state.pointShadowMatrix[pointLength] = light.shadow.matrix, numPointShadows++;
                        }
                        state.point[pointLength] = _uniforms3, pointLength++;
                    } else if (light.isHemisphereLight) {
                        var _uniforms4 = cache.get(light);
                        _uniforms4.skyColor.copy(light.color).multiplyScalar(intensity), _uniforms4.groundColor.copy(light.groundColor).multiplyScalar(intensity), state.hemi[hemiLength] = _uniforms4, hemiLength++;
                    }
                }
                rectAreaLength > 0 && (capabilities.isWebGL2 ? (state.rectAreaLTC1 = UniformsLib.LTC_FLOAT_1, state.rectAreaLTC2 = UniformsLib.LTC_FLOAT_2) : !0 === extensions.has('OES_texture_float_linear') ? (state.rectAreaLTC1 = UniformsLib.LTC_FLOAT_1, state.rectAreaLTC2 = UniformsLib.LTC_FLOAT_2) : !0 === extensions.has('OES_texture_half_float_linear') ? (state.rectAreaLTC1 = UniformsLib.LTC_HALF_1, state.rectAreaLTC2 = UniformsLib.LTC_HALF_2) : console.error('THREE.WebGLRenderer: Unable to use RectAreaLight. Missing WebGL extensions.')), state.ambient[0] = r, state.ambient[1] = g, state.ambient[2] = b;
                var hash = state.hash;
                (hash.directionalLength !== directionalLength || hash.pointLength !== pointLength || hash.spotLength !== spotLength || hash.rectAreaLength !== rectAreaLength || hash.hemiLength !== hemiLength || hash.numDirectionalShadows !== numDirectionalShadows || hash.numPointShadows !== numPointShadows || hash.numSpotShadows !== numSpotShadows) && (state.directional.length = directionalLength, state.spot.length = spotLength, state.rectArea.length = rectAreaLength, state.point.length = pointLength, state.hemi.length = hemiLength, state.directionalShadow.length = numDirectionalShadows, state.directionalShadowMap.length = numDirectionalShadows, state.pointShadow.length = numPointShadows, state.pointShadowMap.length = numPointShadows, state.spotShadow.length = numSpotShadows, state.spotShadowMap.length = numSpotShadows, state.directionalShadowMatrix.length = numDirectionalShadows, state.pointShadowMatrix.length = numPointShadows, state.spotShadowMatrix.length = numSpotShadows, hash.directionalLength = directionalLength, hash.pointLength = pointLength, hash.spotLength = spotLength, hash.rectAreaLength = rectAreaLength, hash.hemiLength = hemiLength, hash.numDirectionalShadows = numDirectionalShadows, hash.numPointShadows = numPointShadows, hash.numSpotShadows = numSpotShadows, state.version = nextVersion++);
            },
            setupView: function(lights, camera) {
                for(var directionalLength = 0, pointLength = 0, spotLength = 0, rectAreaLength = 0, hemiLength = 0, viewMatrix = camera.matrixWorldInverse, _i3 = 0, l = lights.length; _i3 < l; _i3++){
                    var light = lights[_i3];
                    if (light.isDirectionalLight) {
                        var uniforms = state.directional[directionalLength];
                        uniforms.direction.setFromMatrixPosition(light.matrixWorld), vector3.setFromMatrixPosition(light.target.matrixWorld), uniforms.direction.sub(vector3), uniforms.direction.transformDirection(viewMatrix), directionalLength++;
                    } else if (light.isSpotLight) {
                        var _uniforms5 = state.spot[spotLength];
                        _uniforms5.position.setFromMatrixPosition(light.matrixWorld), _uniforms5.position.applyMatrix4(viewMatrix), _uniforms5.direction.setFromMatrixPosition(light.matrixWorld), vector3.setFromMatrixPosition(light.target.matrixWorld), _uniforms5.direction.sub(vector3), _uniforms5.direction.transformDirection(viewMatrix), spotLength++;
                    } else if (light.isRectAreaLight) {
                        var _uniforms6 = state.rectArea[rectAreaLength];
                        _uniforms6.position.setFromMatrixPosition(light.matrixWorld), _uniforms6.position.applyMatrix4(viewMatrix), matrix42.identity(), matrix4.copy(light.matrixWorld), matrix4.premultiply(viewMatrix), matrix42.extractRotation(matrix4), _uniforms6.halfWidth.set(0.5 * light.width, 0.0, 0.0), _uniforms6.halfHeight.set(0.0, 0.5 * light.height, 0.0), _uniforms6.halfWidth.applyMatrix4(matrix42), _uniforms6.halfHeight.applyMatrix4(matrix42), rectAreaLength++;
                    } else if (light.isPointLight) {
                        var _uniforms7 = state.point[pointLength];
                        _uniforms7.position.setFromMatrixPosition(light.matrixWorld), _uniforms7.position.applyMatrix4(viewMatrix), pointLength++;
                    } else if (light.isHemisphereLight) {
                        var _uniforms8 = state.hemi[hemiLength];
                        _uniforms8.direction.setFromMatrixPosition(light.matrixWorld), _uniforms8.direction.transformDirection(viewMatrix), _uniforms8.direction.normalize(), hemiLength++;
                    }
                }
            },
            state: state
        };
    }
    function WebGLRenderState(extensions, capabilities) {
        var lights = new WebGLLights(extensions, capabilities), lightsArray = [], shadowsArray = [];
        return {
            init: function() {
                lightsArray.length = 0, shadowsArray.length = 0;
            },
            state: {
                lightsArray: lightsArray,
                shadowsArray: shadowsArray,
                lights: lights
            },
            setupLights: function() {
                lights.setup(lightsArray);
            },
            setupLightsView: function(camera) {
                lights.setupView(lightsArray, camera);
            },
            pushLight: function(light) {
                lightsArray.push(light);
            },
            pushShadow: function(shadowLight) {
                shadowsArray.push(shadowLight);
            }
        };
    }
    function WebGLRenderStates(extensions, capabilities) {
        var renderStates = new WeakMap();
        return {
            get: function(scene, renderCallDepth) {
                var renderState;
                return void 0 === renderCallDepth && (renderCallDepth = 0), !1 === renderStates.has(scene) ? (renderState = new WebGLRenderState(extensions, capabilities), renderStates.set(scene, []), renderStates.get(scene).push(renderState)) : renderCallDepth >= renderStates.get(scene).length ? (renderState = new WebGLRenderState(extensions, capabilities), renderStates.get(scene).push(renderState)) : renderState = renderStates.get(scene)[renderCallDepth], renderState;
            },
            dispose: function() {
                renderStates = new WeakMap();
            }
        };
    }
    function MeshDepthMaterial(parameters) {
        Material.call(this), this.type = 'MeshDepthMaterial', this.depthPacking = 3200, this.skinning = !1, this.morphTargets = !1, this.map = null, this.alphaMap = null, this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.wireframe = !1, this.wireframeLinewidth = 1, this.fog = !1, this.setValues(parameters);
    }
    function MeshDistanceMaterial(parameters) {
        Material.call(this), this.type = 'MeshDistanceMaterial', this.referencePosition = new Vector3(), this.nearDistance = 1, this.farDistance = 1000, this.skinning = !1, this.morphTargets = !1, this.map = null, this.alphaMap = null, this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.fog = !1, this.setValues(parameters);
    }
    function WebGLShadowMap(_renderer, _objects, maxTextureSize) {
        var _frustum = new Frustum(), _shadowMapSize = new Vector2(), _viewportSize = new Vector2(), _viewport = new Vector4(), _depthMaterials = [], _distanceMaterials = [], _materialCache = {}, shadowSide = {
            0: 1,
            1: 0,
            2: 2
        }, shadowMaterialVertical = new ShaderMaterial({
            defines: {
                SAMPLE_RATE: 0.25,
                HALF_SAMPLE_RATE: 0.125
            },
            uniforms: {
                shadow_pass: {
                    value: null
                },
                resolution: {
                    value: new Vector2()
                },
                radius: {
                    value: 4.0
                }
            },
            vertexShader: "void main() {\n\tgl_Position = vec4( position, 1.0 );\n}",
            fragmentShader: "uniform sampler2D shadow_pass;\nuniform vec2 resolution;\nuniform float radius;\n#include <packing>\nvoid main() {\n\tfloat mean = 0.0;\n\tfloat squared_mean = 0.0;\n\tfloat depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy ) / resolution ) );\n\tfor ( float i = -1.0; i < 1.0 ; i += SAMPLE_RATE) {\n\t\t#ifdef HORIZONTAL_PASS\n\t\t\tvec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( i, 0.0 ) * radius ) / resolution ) );\n\t\t\tmean += distribution.x;\n\t\t\tsquared_mean += distribution.y * distribution.y + distribution.x * distribution.x;\n\t\t#else\n\t\t\tfloat depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, i ) * radius ) / resolution ) );\n\t\t\tmean += depth;\n\t\t\tsquared_mean += depth * depth;\n\t\t#endif\n\t}\n\tmean = mean * HALF_SAMPLE_RATE;\n\tsquared_mean = squared_mean * HALF_SAMPLE_RATE;\n\tfloat std_dev = sqrt( squared_mean - mean * mean );\n\tgl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );\n}"
        }), shadowMaterialHorizontal = shadowMaterialVertical.clone();
        shadowMaterialHorizontal.defines.HORIZONTAL_PASS = 1;
        var fullScreenTri = new BufferGeometry();
        fullScreenTri.setAttribute('position', new BufferAttribute(new Float32Array([
            -1,
            -1,
            0.5,
            3,
            -1,
            0.5,
            -1,
            3,
            0.5
        ]), 3));
        var fullScreenMesh = new Mesh(fullScreenTri, shadowMaterialVertical), scope = this;
        function getDepthMaterialVariant(useMorphing, useSkinning, useInstancing) {
            var index = useMorphing << 0 | useSkinning << 1 | useInstancing << 2, material = _depthMaterials[index];
            return void 0 === material && (material = new MeshDepthMaterial({
                depthPacking: 3201,
                morphTargets: useMorphing,
                skinning: useSkinning
            }), _depthMaterials[index] = material), material;
        }
        function getDistanceMaterialVariant(useMorphing, useSkinning, useInstancing) {
            var index = useMorphing << 0 | useSkinning << 1 | useInstancing << 2, material = _distanceMaterials[index];
            return void 0 === material && (material = new MeshDistanceMaterial({
                morphTargets: useMorphing,
                skinning: useSkinning
            }), _distanceMaterials[index] = material), material;
        }
        function getDepthMaterial(object, geometry, material, light, shadowCameraNear, shadowCameraFar, type) {
            var result = null, getMaterialVariant = getDepthMaterialVariant, customMaterial = object.customDepthMaterial;
            if (!0 === light.isPointLight && (getMaterialVariant = getDistanceMaterialVariant, customMaterial = object.customDistanceMaterial), void 0 === customMaterial) {
                var useMorphing = !1;
                !0 === material.morphTargets && (useMorphing = geometry.morphAttributes && geometry.morphAttributes.position && geometry.morphAttributes.position.length > 0);
                var useSkinning = !1;
                !0 === object.isSkinnedMesh && (!0 === material.skinning ? useSkinning = !0 : console.warn('THREE.WebGLShadowMap: THREE.SkinnedMesh with material.skinning set to false:', object)), result = getMaterialVariant(useMorphing, useSkinning, !0 === object.isInstancedMesh);
            } else result = customMaterial;
            if (_renderer.localClippingEnabled && !0 === material.clipShadows && 0 !== material.clippingPlanes.length) {
                var keyA = result.uuid, keyB = material.uuid, materialsForVariant = _materialCache[keyA];
                void 0 === materialsForVariant && (materialsForVariant = {}, _materialCache[keyA] = materialsForVariant);
                var cachedMaterial = materialsForVariant[keyB];
                void 0 === cachedMaterial && (cachedMaterial = result.clone(), materialsForVariant[keyB] = cachedMaterial), result = cachedMaterial;
            }
            return result.visible = material.visible, result.wireframe = material.wireframe, 3 === type ? result.side = null !== material.shadowSide ? material.shadowSide : material.side : result.side = null !== material.shadowSide ? material.shadowSide : shadowSide[material.side], result.clipShadows = material.clipShadows, result.clippingPlanes = material.clippingPlanes, result.clipIntersection = material.clipIntersection, result.wireframeLinewidth = material.wireframeLinewidth, result.linewidth = material.linewidth, !0 === light.isPointLight && !0 === result.isMeshDistanceMaterial && (result.referencePosition.setFromMatrixPosition(light.matrixWorld), result.nearDistance = shadowCameraNear, result.farDistance = shadowCameraFar), result;
        }
        this.enabled = !1, this.autoUpdate = !0, this.needsUpdate = !1, this.type = 1, this.render = function(lights, scene, camera) {
            if (!1 !== scope.enabled && (!1 !== scope.autoUpdate || !1 !== scope.needsUpdate) && 0 !== lights.length) {
                var currentRenderTarget = _renderer.getRenderTarget(), activeCubeFace = _renderer.getActiveCubeFace(), activeMipmapLevel = _renderer.getActiveMipmapLevel(), _state = _renderer.state;
                _state.setBlending(0), _state.buffers.color.setClear(1, 1, 1, 1), _state.buffers.depth.setTest(!0), _state.setScissorTest(!1);
                for(var i = 0, il = lights.length; i < il; i++){
                    var light = lights[i], shadow = light.shadow;
                    if (void 0 === shadow) {
                        console.warn('THREE.WebGLShadowMap:', light, 'has no shadow.');
                        continue;
                    }
                    if (!1 !== shadow.autoUpdate || !1 !== shadow.needsUpdate) {
                        _shadowMapSize.copy(shadow.mapSize);
                        var shadowFrameExtents = shadow.getFrameExtents();
                        if (_shadowMapSize.multiply(shadowFrameExtents), _viewportSize.copy(shadow.mapSize), (_shadowMapSize.x > maxTextureSize || _shadowMapSize.y > maxTextureSize) && (_shadowMapSize.x > maxTextureSize && (_viewportSize.x = Math.floor(maxTextureSize / shadowFrameExtents.x), _shadowMapSize.x = _viewportSize.x * shadowFrameExtents.x, shadow.mapSize.x = _viewportSize.x), _shadowMapSize.y > maxTextureSize && (_viewportSize.y = Math.floor(maxTextureSize / shadowFrameExtents.y), _shadowMapSize.y = _viewportSize.y * shadowFrameExtents.y, shadow.mapSize.y = _viewportSize.y)), null === shadow.map && !shadow.isPointLightShadow && 3 === this.type) {
                            var pars = {
                                minFilter: 1006,
                                magFilter: 1006,
                                format: 1023
                            };
                            shadow.map = new WebGLRenderTarget(_shadowMapSize.x, _shadowMapSize.y, pars), shadow.map.texture.name = light.name + '.shadowMap', shadow.mapPass = new WebGLRenderTarget(_shadowMapSize.x, _shadowMapSize.y, pars), shadow.camera.updateProjectionMatrix();
                        }
                        if (null === shadow.map) {
                            var _pars = {
                                minFilter: 1003,
                                magFilter: 1003,
                                format: 1023
                            };
                            shadow.map = new WebGLRenderTarget(_shadowMapSize.x, _shadowMapSize.y, _pars), shadow.map.texture.name = light.name + '.shadowMap', shadow.camera.updateProjectionMatrix();
                        }
                        _renderer.setRenderTarget(shadow.map), _renderer.clear();
                        for(var viewportCount = shadow.getViewportCount(), vp = 0; vp < viewportCount; vp++){
                            var viewport = shadow.getViewport(vp);
                            _viewport.set(_viewportSize.x * viewport.x, _viewportSize.y * viewport.y, _viewportSize.x * viewport.z, _viewportSize.y * viewport.w), _state.viewport(_viewport), shadow.updateMatrices(light, vp), _frustum = shadow.getFrustum(), function renderObject(object, camera, shadowCamera, light, type) {
                                if (!1 !== object.visible) {
                                    if (object.layers.test(camera.layers) && (object.isMesh || object.isLine || object.isPoints) && (object.castShadow || object.receiveShadow && 3 === type) && (!object.frustumCulled || _frustum.intersectsObject(object))) {
                                        object.modelViewMatrix.multiplyMatrices(shadowCamera.matrixWorldInverse, object.matrixWorld);
                                        var geometry = _objects.update(object), material = object.material;
                                        if (Array.isArray(material)) for(var groups = geometry.groups, k = 0, kl = groups.length; k < kl; k++){
                                            var group = groups[k], groupMaterial = material[group.materialIndex];
                                            if (groupMaterial && groupMaterial.visible) {
                                                var depthMaterial = getDepthMaterial(object, geometry, groupMaterial, light, shadowCamera.near, shadowCamera.far, type);
                                                _renderer.renderBufferDirect(shadowCamera, null, geometry, depthMaterial, object, group);
                                            }
                                        }
                                        else if (material.visible) {
                                            var _depthMaterial = getDepthMaterial(object, geometry, material, light, shadowCamera.near, shadowCamera.far, type);
                                            _renderer.renderBufferDirect(shadowCamera, null, geometry, _depthMaterial, object, null);
                                        }
                                    }
                                    for(var children = object.children, i = 0, l = children.length; i < l; i++)renderObject(children[i], camera, shadowCamera, light, type);
                                }
                            }(scene, camera, shadow.camera, light, this.type);
                        }
                        shadow.isPointLightShadow || 3 !== this.type || function(shadow, camera) {
                            var geometry = _objects.update(fullScreenMesh);
                            shadowMaterialVertical.uniforms.shadow_pass.value = shadow.map.texture, shadowMaterialVertical.uniforms.resolution.value = shadow.mapSize, shadowMaterialVertical.uniforms.radius.value = shadow.radius, _renderer.setRenderTarget(shadow.mapPass), _renderer.clear(), _renderer.renderBufferDirect(camera, null, geometry, shadowMaterialVertical, fullScreenMesh, null), shadowMaterialHorizontal.uniforms.shadow_pass.value = shadow.mapPass.texture, shadowMaterialHorizontal.uniforms.resolution.value = shadow.mapSize, shadowMaterialHorizontal.uniforms.radius.value = shadow.radius, _renderer.setRenderTarget(shadow.map), _renderer.clear(), _renderer.renderBufferDirect(camera, null, geometry, shadowMaterialHorizontal, fullScreenMesh, null);
                        }(shadow, camera), shadow.needsUpdate = !1;
                    }
                }
                scope.needsUpdate = !1, _renderer.setRenderTarget(currentRenderTarget, activeCubeFace, activeMipmapLevel);
            }
        };
    }
    function WebGLState(gl, extensions, capabilities) {
        var _equationToGL, _factorToGL, isWebGL2 = capabilities.isWebGL2, colorBuffer = new function() {
            var locked = !1, color = new Vector4(), currentColorMask = null, currentColorClear = new Vector4(0, 0, 0, 0);
            return {
                setMask: function(colorMask) {
                    currentColorMask === colorMask || locked || (gl.colorMask(colorMask, colorMask, colorMask, colorMask), currentColorMask = colorMask);
                },
                setLocked: function(lock) {
                    locked = lock;
                },
                setClear: function(r, g, b, a, premultipliedAlpha) {
                    !0 === premultipliedAlpha && (r *= a, g *= a, b *= a), color.set(r, g, b, a), !1 === currentColorClear.equals(color) && (gl.clearColor(r, g, b, a), currentColorClear.copy(color));
                },
                reset: function() {
                    locked = !1, currentColorMask = null, currentColorClear.set(-1, 0, 0, 0);
                }
            };
        }(), depthBuffer = new function() {
            var locked = !1, currentDepthMask = null, currentDepthFunc = null, currentDepthClear = null;
            return {
                setTest: function(depthTest) {
                    depthTest ? enable(2929) : disable(2929);
                },
                setMask: function(depthMask) {
                    currentDepthMask === depthMask || locked || (gl.depthMask(depthMask), currentDepthMask = depthMask);
                },
                setFunc: function(depthFunc) {
                    if (currentDepthFunc !== depthFunc) {
                        if (depthFunc) switch(depthFunc){
                            case 0:
                                gl.depthFunc(512);
                                break;
                            case 1:
                                gl.depthFunc(519);
                                break;
                            case 2:
                                gl.depthFunc(513);
                                break;
                            case 3:
                            default:
                                gl.depthFunc(515);
                                break;
                            case 4:
                                gl.depthFunc(514);
                                break;
                            case 5:
                                gl.depthFunc(518);
                                break;
                            case 6:
                                gl.depthFunc(516);
                                break;
                            case 7:
                                gl.depthFunc(517);
                        }
                        else gl.depthFunc(515);
                        currentDepthFunc = depthFunc;
                    }
                },
                setLocked: function(lock) {
                    locked = lock;
                },
                setClear: function(depth) {
                    currentDepthClear !== depth && (gl.clearDepth(depth), currentDepthClear = depth);
                },
                reset: function() {
                    locked = !1, currentDepthMask = null, currentDepthFunc = null, currentDepthClear = null;
                }
            };
        }(), stencilBuffer = new function() {
            var locked = !1, currentStencilMask = null, currentStencilFunc = null, currentStencilRef = null, currentStencilFuncMask = null, currentStencilFail = null, currentStencilZFail = null, currentStencilZPass = null, currentStencilClear = null;
            return {
                setTest: function(stencilTest) {
                    locked || (stencilTest ? enable(2960) : disable(2960));
                },
                setMask: function(stencilMask) {
                    currentStencilMask === stencilMask || locked || (gl.stencilMask(stencilMask), currentStencilMask = stencilMask);
                },
                setFunc: function(stencilFunc, stencilRef, stencilMask) {
                    (currentStencilFunc !== stencilFunc || currentStencilRef !== stencilRef || currentStencilFuncMask !== stencilMask) && (gl.stencilFunc(stencilFunc, stencilRef, stencilMask), currentStencilFunc = stencilFunc, currentStencilRef = stencilRef, currentStencilFuncMask = stencilMask);
                },
                setOp: function(stencilFail, stencilZFail, stencilZPass) {
                    (currentStencilFail !== stencilFail || currentStencilZFail !== stencilZFail || currentStencilZPass !== stencilZPass) && (gl.stencilOp(stencilFail, stencilZFail, stencilZPass), currentStencilFail = stencilFail, currentStencilZFail = stencilZFail, currentStencilZPass = stencilZPass);
                },
                setLocked: function(lock) {
                    locked = lock;
                },
                setClear: function(stencil) {
                    currentStencilClear !== stencil && (gl.clearStencil(stencil), currentStencilClear = stencil);
                },
                reset: function() {
                    locked = !1, currentStencilMask = null, currentStencilFunc = null, currentStencilRef = null, currentStencilFuncMask = null, currentStencilFail = null, currentStencilZFail = null, currentStencilZPass = null, currentStencilClear = null;
                }
            };
        }(), enabledCapabilities = {}, currentProgram = null, currentBlendingEnabled = null, currentBlending = null, currentBlendEquation = null, currentBlendSrc = null, currentBlendDst = null, currentBlendEquationAlpha = null, currentBlendSrcAlpha = null, currentBlendDstAlpha = null, currentPremultipledAlpha = !1, currentFlipSided = null, currentCullFace = null, currentLineWidth = null, currentPolygonOffsetFactor = null, currentPolygonOffsetUnits = null, maxTextures = gl.getParameter(35661), lineWidthAvailable = !1, glVersion = gl.getParameter(7938);
        -1 !== glVersion.indexOf('WebGL') ? lineWidthAvailable = parseFloat(/^WebGL (\d)/.exec(glVersion)[1]) >= 1.0 : -1 !== glVersion.indexOf('OpenGL ES') && (lineWidthAvailable = parseFloat(/^OpenGL ES (\d)/.exec(glVersion)[1]) >= 2.0);
        var currentTextureSlot = null, currentBoundTextures = {}, currentScissor = new Vector4(), currentViewport = new Vector4();
        function createTexture(type, target, count) {
            var data = new Uint8Array(4), texture = gl.createTexture();
            gl.bindTexture(type, texture), gl.texParameteri(type, 10241, 9728), gl.texParameteri(type, 10240, 9728);
            for(var i = 0; i < count; i++)gl.texImage2D(target + i, 0, 6408, 1, 1, 0, 6408, 5121, data);
            return texture;
        }
        var emptyTextures = {};
        function enable(id) {
            !0 !== enabledCapabilities[id] && (gl.enable(id), enabledCapabilities[id] = !0);
        }
        function disable(id) {
            !1 !== enabledCapabilities[id] && (gl.disable(id), enabledCapabilities[id] = !1);
        }
        emptyTextures[3553] = createTexture(3553, 3553, 1), emptyTextures[34067] = createTexture(34067, 34069, 6), colorBuffer.setClear(0, 0, 0, 1), depthBuffer.setClear(1), stencilBuffer.setClear(0), enable(2929), depthBuffer.setFunc(3), setFlipSided(!1), setCullFace(1), enable(2884), setBlending(0);
        var equationToGL = ((_equationToGL = {})[100] = 32774, _equationToGL[101] = 32778, _equationToGL[102] = 32779, _equationToGL);
        if (isWebGL2) equationToGL[103] = 32775, equationToGL[104] = 32776;
        else {
            var extension = extensions.get('EXT_blend_minmax');
            null !== extension && (equationToGL[103] = extension.MIN_EXT, equationToGL[104] = extension.MAX_EXT);
        }
        var factorToGL = ((_factorToGL = {})[200] = 0, _factorToGL[201] = 1, _factorToGL[202] = 768, _factorToGL[204] = 770, _factorToGL[210] = 776, _factorToGL[208] = 774, _factorToGL[206] = 772, _factorToGL[203] = 769, _factorToGL[205] = 771, _factorToGL[209] = 775, _factorToGL[207] = 773, _factorToGL);
        function setBlending(blending, blendEquation, blendSrc, blendDst, blendEquationAlpha, blendSrcAlpha, blendDstAlpha, premultipliedAlpha) {
            if (0 === blending) {
                currentBlendingEnabled && (disable(3042), currentBlendingEnabled = !1);
                return;
            }
            if (currentBlendingEnabled || (enable(3042), currentBlendingEnabled = !0), 5 !== blending) {
                if (blending !== currentBlending || premultipliedAlpha !== currentPremultipledAlpha) {
                    if ((100 !== currentBlendEquation || 100 !== currentBlendEquationAlpha) && (gl.blendEquation(32774), currentBlendEquation = 100, currentBlendEquationAlpha = 100), premultipliedAlpha) switch(blending){
                        case 1:
                            gl.blendFuncSeparate(1, 771, 1, 771);
                            break;
                        case 2:
                            gl.blendFunc(1, 1);
                            break;
                        case 3:
                            gl.blendFuncSeparate(0, 0, 769, 771);
                            break;
                        case 4:
                            gl.blendFuncSeparate(0, 768, 0, 770);
                            break;
                        default:
                            console.error('THREE.WebGLState: Invalid blending: ', blending);
                    }
                    else switch(blending){
                        case 1:
                            gl.blendFuncSeparate(770, 771, 1, 771);
                            break;
                        case 2:
                            gl.blendFunc(770, 1);
                            break;
                        case 3:
                            gl.blendFunc(0, 769);
                            break;
                        case 4:
                            gl.blendFunc(0, 768);
                            break;
                        default:
                            console.error('THREE.WebGLState: Invalid blending: ', blending);
                    }
                    currentBlendSrc = null, currentBlendDst = null, currentBlendSrcAlpha = null, currentBlendDstAlpha = null, currentBlending = blending, currentPremultipledAlpha = premultipliedAlpha;
                }
                return;
            }
            blendEquationAlpha = blendEquationAlpha || blendEquation, blendSrcAlpha = blendSrcAlpha || blendSrc, blendDstAlpha = blendDstAlpha || blendDst, (blendEquation !== currentBlendEquation || blendEquationAlpha !== currentBlendEquationAlpha) && (gl.blendEquationSeparate(equationToGL[blendEquation], equationToGL[blendEquationAlpha]), currentBlendEquation = blendEquation, currentBlendEquationAlpha = blendEquationAlpha), (blendSrc !== currentBlendSrc || blendDst !== currentBlendDst || blendSrcAlpha !== currentBlendSrcAlpha || blendDstAlpha !== currentBlendDstAlpha) && (gl.blendFuncSeparate(factorToGL[blendSrc], factorToGL[blendDst], factorToGL[blendSrcAlpha], factorToGL[blendDstAlpha]), currentBlendSrc = blendSrc, currentBlendDst = blendDst, currentBlendSrcAlpha = blendSrcAlpha, currentBlendDstAlpha = blendDstAlpha), currentBlending = blending, currentPremultipledAlpha = null;
        }
        function setFlipSided(flipSided) {
            currentFlipSided !== flipSided && (flipSided ? gl.frontFace(2304) : gl.frontFace(2305), currentFlipSided = flipSided);
        }
        function setCullFace(cullFace) {
            0 !== cullFace ? (enable(2884), cullFace !== currentCullFace && (1 === cullFace ? gl.cullFace(1029) : 2 === cullFace ? gl.cullFace(1028) : gl.cullFace(1032))) : disable(2884), currentCullFace = cullFace;
        }
        function setPolygonOffset(polygonOffset, factor, units) {
            polygonOffset ? (enable(32823), (currentPolygonOffsetFactor !== factor || currentPolygonOffsetUnits !== units) && (gl.polygonOffset(factor, units), currentPolygonOffsetFactor = factor, currentPolygonOffsetUnits = units)) : disable(32823);
        }
        function activeTexture(webglSlot) {
            void 0 === webglSlot && (webglSlot = 33984 + maxTextures - 1), currentTextureSlot !== webglSlot && (gl.activeTexture(webglSlot), currentTextureSlot = webglSlot);
        }
        return {
            buffers: {
                color: colorBuffer,
                depth: depthBuffer,
                stencil: stencilBuffer
            },
            enable: enable,
            disable: disable,
            useProgram: function(program) {
                return currentProgram !== program && (gl.useProgram(program), currentProgram = program, !0);
            },
            setBlending: setBlending,
            setMaterial: function(material, frontFaceCW) {
                2 === material.side ? disable(2884) : enable(2884);
                var flipSided = 1 === material.side;
                frontFaceCW && (flipSided = !flipSided), setFlipSided(flipSided), 1 === material.blending && !1 === material.transparent ? setBlending(0) : setBlending(material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha, material.premultipliedAlpha), depthBuffer.setFunc(material.depthFunc), depthBuffer.setTest(material.depthTest), depthBuffer.setMask(material.depthWrite), colorBuffer.setMask(material.colorWrite);
                var stencilWrite = material.stencilWrite;
                stencilBuffer.setTest(stencilWrite), stencilWrite && (stencilBuffer.setMask(material.stencilWriteMask), stencilBuffer.setFunc(material.stencilFunc, material.stencilRef, material.stencilFuncMask), stencilBuffer.setOp(material.stencilFail, material.stencilZFail, material.stencilZPass)), setPolygonOffset(material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits);
            },
            setFlipSided: setFlipSided,
            setCullFace: setCullFace,
            setLineWidth: function(width) {
                width !== currentLineWidth && (lineWidthAvailable && gl.lineWidth(width), currentLineWidth = width);
            },
            setPolygonOffset: setPolygonOffset,
            setScissorTest: function(scissorTest) {
                scissorTest ? enable(3089) : disable(3089);
            },
            activeTexture: activeTexture,
            bindTexture: function(webglType, webglTexture) {
                null === currentTextureSlot && activeTexture();
                var boundTexture = currentBoundTextures[currentTextureSlot];
                void 0 === boundTexture && (boundTexture = {
                    type: void 0,
                    texture: void 0
                }, currentBoundTextures[currentTextureSlot] = boundTexture), (boundTexture.type !== webglType || boundTexture.texture !== webglTexture) && (gl.bindTexture(webglType, webglTexture || emptyTextures[webglType]), boundTexture.type = webglType, boundTexture.texture = webglTexture);
            },
            unbindTexture: function() {
                var boundTexture = currentBoundTextures[currentTextureSlot];
                void 0 !== boundTexture && void 0 !== boundTexture.type && (gl.bindTexture(boundTexture.type, null), boundTexture.type = void 0, boundTexture.texture = void 0);
            },
            compressedTexImage2D: function() {
                try {
                    gl.compressedTexImage2D.apply(gl, arguments);
                } catch (error) {
                    console.error('THREE.WebGLState:', error);
                }
            },
            texImage2D: function() {
                try {
                    gl.texImage2D.apply(gl, arguments);
                } catch (error) {
                    console.error('THREE.WebGLState:', error);
                }
            },
            texImage3D: function() {
                try {
                    gl.texImage3D.apply(gl, arguments);
                } catch (error) {
                    console.error('THREE.WebGLState:', error);
                }
            },
            scissor: function(scissor) {
                !1 === currentScissor.equals(scissor) && (gl.scissor(scissor.x, scissor.y, scissor.z, scissor.w), currentScissor.copy(scissor));
            },
            viewport: function(viewport) {
                !1 === currentViewport.equals(viewport) && (gl.viewport(viewport.x, viewport.y, viewport.z, viewport.w), currentViewport.copy(viewport));
            },
            reset: function() {
                enabledCapabilities = {}, currentTextureSlot = null, currentBoundTextures = {}, currentProgram = null, currentBlendingEnabled = null, currentBlending = null, currentBlendEquation = null, currentBlendSrc = null, currentBlendDst = null, currentBlendEquationAlpha = null, currentBlendSrcAlpha = null, currentBlendDstAlpha = null, currentPremultipledAlpha = !1, currentFlipSided = null, currentCullFace = null, currentLineWidth = null, currentPolygonOffsetFactor = null, currentPolygonOffsetUnits = null, colorBuffer.reset(), depthBuffer.reset(), stencilBuffer.reset();
            }
        };
    }
    function WebGLTextures(_gl, extensions, state, properties, capabilities, utils, info) {
        var _wrappingToGL, _filterToGL, _canvas, isWebGL2 = capabilities.isWebGL2, maxTextures = capabilities.maxTextures, maxCubemapSize = capabilities.maxCubemapSize, maxTextureSize = capabilities.maxTextureSize, maxSamples = capabilities.maxSamples, _videoTextures = new WeakMap(), useOffscreenCanvas = !1;
        try {
            useOffscreenCanvas = 'undefined' != typeof OffscreenCanvas && null !== new OffscreenCanvas(1, 1).getContext('2d');
        } catch (err) {}
        function createCanvas(width, height) {
            return useOffscreenCanvas ? new OffscreenCanvas(width, height) : document.createElementNS('http://www.w3.org/1999/xhtml', 'canvas');
        }
        function resizeImage(image, needsPowerOfTwo, needsNewCanvas, maxSize) {
            var scale = 1;
            if ((image.width > maxSize || image.height > maxSize) && (scale = maxSize / Math.max(image.width, image.height)), scale < 1 || !0 === needsPowerOfTwo) {
                if ('undefined' != typeof HTMLImageElement && image instanceof HTMLImageElement || 'undefined' != typeof HTMLCanvasElement && image instanceof HTMLCanvasElement || 'undefined' != typeof ImageBitmap && image instanceof ImageBitmap) {
                    var floor = needsPowerOfTwo ? MathUtils.floorPowerOfTwo : Math.floor, width = floor(scale * image.width), height = floor(scale * image.height);
                    void 0 === _canvas && (_canvas = createCanvas(width, height));
                    var canvas = needsNewCanvas ? createCanvas(width, height) : _canvas;
                    return canvas.width = width, canvas.height = height, canvas.getContext('2d').drawImage(image, 0, 0, width, height), console.warn('THREE.WebGLRenderer: Texture has been resized from (' + image.width + 'x' + image.height + ') to (' + width + 'x' + height + ').'), canvas;
                }
                'data' in image && console.warn('THREE.WebGLRenderer: Image in DataTexture is too big (' + image.width + 'x' + image.height + ').');
            }
            return image;
        }
        function isPowerOfTwo(image) {
            return MathUtils.isPowerOfTwo(image.width) && MathUtils.isPowerOfTwo(image.height);
        }
        function textureNeedsGenerateMipmaps(texture, supportsMips) {
            return texture.generateMipmaps && supportsMips && 1003 !== texture.minFilter && 1006 !== texture.minFilter;
        }
        function generateMipmap(target, texture, width, height) {
            _gl.generateMipmap(target), properties.get(texture).__maxMipLevel = Math.log(Math.max(width, height)) * Math.LOG2E;
        }
        function getInternalFormat(internalFormatName, glFormat, glType) {
            if (!1 === isWebGL2) return glFormat;
            if (null !== internalFormatName) {
                if (void 0 !== _gl[internalFormatName]) return _gl[internalFormatName];
                console.warn('THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format \'' + internalFormatName + '\'');
            }
            var internalFormat = glFormat;
            return 6403 === glFormat && (5126 === glType && (internalFormat = 33326), 5131 === glType && (internalFormat = 33325), 5121 === glType && (internalFormat = 33321)), 6407 === glFormat && (5126 === glType && (internalFormat = 34837), 5131 === glType && (internalFormat = 34843), 5121 === glType && (internalFormat = 32849)), 6408 === glFormat && (5126 === glType && (internalFormat = 34836), 5131 === glType && (internalFormat = 34842), 5121 === glType && (internalFormat = 32856)), (33325 === internalFormat || 33326 === internalFormat || 34842 === internalFormat || 34836 === internalFormat) && extensions.get('EXT_color_buffer_float'), internalFormat;
        }
        function filterFallback(f) {
            return 1003 === f || 1004 === f || 1005 === f ? 9728 : 9729;
        }
        function onTextureDispose(event) {
            var textureProperties, texture = event.target;
            texture.removeEventListener('dispose', onTextureDispose), void 0 !== (textureProperties = properties.get(texture)).__webglInit && (_gl.deleteTexture(textureProperties.__webglTexture), properties.remove(texture)), texture.isVideoTexture && _videoTextures.delete(texture), info.memory.textures--;
        }
        function onRenderTargetDispose(event) {
            var renderTarget = event.target;
            renderTarget.removeEventListener('dispose', onRenderTargetDispose), function(renderTarget) {
                var renderTargetProperties = properties.get(renderTarget), textureProperties = properties.get(renderTarget.texture);
                if (renderTarget) {
                    if (void 0 !== textureProperties.__webglTexture && _gl.deleteTexture(textureProperties.__webglTexture), renderTarget.depthTexture && renderTarget.depthTexture.dispose(), renderTarget.isWebGLCubeRenderTarget) for(var i = 0; i < 6; i++)_gl.deleteFramebuffer(renderTargetProperties.__webglFramebuffer[i]), renderTargetProperties.__webglDepthbuffer && _gl.deleteRenderbuffer(renderTargetProperties.__webglDepthbuffer[i]);
                    else _gl.deleteFramebuffer(renderTargetProperties.__webglFramebuffer), renderTargetProperties.__webglDepthbuffer && _gl.deleteRenderbuffer(renderTargetProperties.__webglDepthbuffer), renderTargetProperties.__webglMultisampledFramebuffer && _gl.deleteFramebuffer(renderTargetProperties.__webglMultisampledFramebuffer), renderTargetProperties.__webglColorRenderbuffer && _gl.deleteRenderbuffer(renderTargetProperties.__webglColorRenderbuffer), renderTargetProperties.__webglDepthRenderbuffer && _gl.deleteRenderbuffer(renderTargetProperties.__webglDepthRenderbuffer);
                    properties.remove(renderTarget.texture), properties.remove(renderTarget);
                }
            }(renderTarget), info.memory.textures--;
        }
        var textureUnits = 0;
        function setTexture2D(texture, slot) {
            var frame, textureProperties = properties.get(texture);
            if (texture.isVideoTexture && (frame = info.render.frame, _videoTextures.get(texture) !== frame && (_videoTextures.set(texture, frame), texture.update())), texture.version > 0 && textureProperties.__version !== texture.version) {
                var image = texture.image;
                if (void 0 === image) console.warn('THREE.WebGLRenderer: Texture marked for update but image is undefined');
                else if (!1 === image.complete) console.warn('THREE.WebGLRenderer: Texture marked for update but image is incomplete');
                else {
                    uploadTexture(textureProperties, texture, slot);
                    return;
                }
            }
            state.activeTexture(33984 + slot), state.bindTexture(3553, textureProperties.__webglTexture);
        }
        function setTextureCube(texture, slot) {
            var textureProperties = properties.get(texture);
            if (texture.version > 0 && textureProperties.__version !== texture.version) {
                !function(textureProperties, texture, slot) {
                    if (6 === texture.image.length) {
                        initTexture(textureProperties, texture), state.activeTexture(33984 + slot), state.bindTexture(34067, textureProperties.__webglTexture), _gl.pixelStorei(37440, texture.flipY);
                        for(var mipmaps, isCompressed = texture && (texture.isCompressedTexture || texture.image[0].isCompressedTexture), isDataTexture = texture.image[0] && texture.image[0].isDataTexture, cubeImage = [], i = 0; i < 6; i++)isCompressed || isDataTexture ? cubeImage[i] = isDataTexture ? texture.image[i].image : texture.image[i] : cubeImage[i] = resizeImage(texture.image[i], !1, !0, maxCubemapSize);
                        var image = cubeImage[0], supportsMips = isPowerOfTwo(image) || isWebGL2, glFormat = utils.convert(texture.format), glType = utils.convert(texture.type), glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType);
                        if (setTextureParameters(34067, texture, supportsMips), isCompressed) {
                            for(var _i3 = 0; _i3 < 6; _i3++){
                                mipmaps = cubeImage[_i3].mipmaps;
                                for(var j = 0; j < mipmaps.length; j++){
                                    var mipmap = mipmaps[j];
                                    1023 !== texture.format && 1022 !== texture.format ? null !== glFormat ? state.compressedTexImage2D(34069 + _i3, j, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data) : console.warn('THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()') : state.texImage2D(34069 + _i3, j, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data);
                                }
                            }
                            textureProperties.__maxMipLevel = mipmaps.length - 1;
                        } else {
                            mipmaps = texture.mipmaps;
                            for(var _i4 = 0; _i4 < 6; _i4++)if (isDataTexture) {
                                state.texImage2D(34069 + _i4, 0, glInternalFormat, cubeImage[_i4].width, cubeImage[_i4].height, 0, glFormat, glType, cubeImage[_i4].data);
                                for(var _j = 0; _j < mipmaps.length; _j++){
                                    var mipmapImage = mipmaps[_j].image[_i4].image;
                                    state.texImage2D(34069 + _i4, _j + 1, glInternalFormat, mipmapImage.width, mipmapImage.height, 0, glFormat, glType, mipmapImage.data);
                                }
                            } else {
                                state.texImage2D(34069 + _i4, 0, glInternalFormat, glFormat, glType, cubeImage[_i4]);
                                for(var _j2 = 0; _j2 < mipmaps.length; _j2++){
                                    var _mipmap2 = mipmaps[_j2];
                                    state.texImage2D(34069 + _i4, _j2 + 1, glInternalFormat, glFormat, glType, _mipmap2.image[_i4]);
                                }
                            }
                            textureProperties.__maxMipLevel = mipmaps.length;
                        }
                        textureNeedsGenerateMipmaps(texture, supportsMips) && generateMipmap(34067, texture, image.width, image.height), textureProperties.__version = texture.version, texture.onUpdate && texture.onUpdate(texture);
                    }
                }(textureProperties, texture, slot);
                return;
            }
            state.activeTexture(33984 + slot), state.bindTexture(34067, textureProperties.__webglTexture);
        }
        var wrappingToGL = ((_wrappingToGL = {})[1000] = 10497, _wrappingToGL[1001] = 33071, _wrappingToGL[1002] = 33648, _wrappingToGL), filterToGL = ((_filterToGL = {})[1003] = 9728, _filterToGL[1004] = 9984, _filterToGL[1005] = 9986, _filterToGL[1006] = 9729, _filterToGL[1007] = 9985, _filterToGL[1008] = 9987, _filterToGL);
        function setTextureParameters(textureType, texture, supportsMips) {
            supportsMips ? (_gl.texParameteri(textureType, 10242, wrappingToGL[texture.wrapS]), _gl.texParameteri(textureType, 10243, wrappingToGL[texture.wrapT]), (32879 === textureType || 35866 === textureType) && _gl.texParameteri(textureType, 32882, wrappingToGL[texture.wrapR]), _gl.texParameteri(textureType, 10240, filterToGL[texture.magFilter]), _gl.texParameteri(textureType, 10241, filterToGL[texture.minFilter])) : (_gl.texParameteri(textureType, 10242, 33071), _gl.texParameteri(textureType, 10243, 33071), (32879 === textureType || 35866 === textureType) && _gl.texParameteri(textureType, 32882, 33071), (1001 !== texture.wrapS || 1001 !== texture.wrapT) && console.warn('THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.'), _gl.texParameteri(textureType, 10240, filterFallback(texture.magFilter)), _gl.texParameteri(textureType, 10241, filterFallback(texture.minFilter)), 1003 !== texture.minFilter && 1006 !== texture.minFilter && console.warn('THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.'));
            var extension = extensions.get('EXT_texture_filter_anisotropic');
            if (extension) {
                if (1015 === texture.type && null === extensions.get('OES_texture_float_linear') || 1016 === texture.type && null === (isWebGL2 || extensions.get('OES_texture_half_float_linear'))) return;
                (texture.anisotropy > 1 || properties.get(texture).__currentAnisotropy) && (_gl.texParameterf(textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min(texture.anisotropy, capabilities.getMaxAnisotropy())), properties.get(texture).__currentAnisotropy = texture.anisotropy);
            }
        }
        function initTexture(textureProperties, texture) {
            void 0 === textureProperties.__webglInit && (textureProperties.__webglInit = !0, texture.addEventListener('dispose', onTextureDispose), textureProperties.__webglTexture = _gl.createTexture(), info.memory.textures++);
        }
        function uploadTexture(textureProperties, texture, slot) {
            var mipmap, textureType = 3553;
            texture.isDataTexture2DArray && (textureType = 35866), texture.isDataTexture3D && (textureType = 32879), initTexture(textureProperties, texture), state.activeTexture(33984 + slot), state.bindTexture(textureType, textureProperties.__webglTexture), _gl.pixelStorei(37440, texture.flipY), _gl.pixelStorei(37441, texture.premultiplyAlpha), _gl.pixelStorei(3317, texture.unpackAlignment);
            var needsPowerOfTwo = !isWebGL2 && (1001 !== texture.wrapS || 1001 !== texture.wrapT || 1003 !== texture.minFilter && 1006 !== texture.minFilter) && !1 === isPowerOfTwo(texture.image), image = resizeImage(texture.image, needsPowerOfTwo, !1, maxTextureSize), supportsMips = isPowerOfTwo(image) || isWebGL2, glFormat = utils.convert(texture.format), glType = utils.convert(texture.type), glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType);
            setTextureParameters(textureType, texture, supportsMips);
            var mipmaps = texture.mipmaps;
            if (texture.isDepthTexture) glInternalFormat = 6402, isWebGL2 ? glInternalFormat = 1015 === texture.type ? 36012 : 1014 === texture.type ? 33190 : 1020 === texture.type ? 35056 : 33189 : 1015 === texture.type && console.error('WebGLRenderer: Floating point depth texture requires WebGL2.'), 1026 === texture.format && 6402 === glInternalFormat && 1012 !== texture.type && 1014 !== texture.type && (console.warn('THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture.'), texture.type = 1012, glType = utils.convert(texture.type)), 1027 === texture.format && 6402 === glInternalFormat && (glInternalFormat = 34041, 1020 !== texture.type && (console.warn('THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture.'), texture.type = 1020, glType = utils.convert(texture.type))), state.texImage2D(3553, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, null);
            else if (texture.isDataTexture) {
                if (mipmaps.length > 0 && supportsMips) {
                    for(var i = 0, il = mipmaps.length; i < il; i++)mipmap = mipmaps[i], state.texImage2D(3553, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data);
                    texture.generateMipmaps = !1, textureProperties.__maxMipLevel = mipmaps.length - 1;
                } else state.texImage2D(3553, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, image.data), textureProperties.__maxMipLevel = 0;
            } else if (texture.isCompressedTexture) {
                for(var _i = 0, _il = mipmaps.length; _i < _il; _i++)mipmap = mipmaps[_i], 1023 !== texture.format && 1022 !== texture.format ? null !== glFormat ? state.compressedTexImage2D(3553, _i, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data) : console.warn('THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()') : state.texImage2D(3553, _i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data);
                textureProperties.__maxMipLevel = mipmaps.length - 1;
            } else if (texture.isDataTexture2DArray) state.texImage3D(35866, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data), textureProperties.__maxMipLevel = 0;
            else if (texture.isDataTexture3D) state.texImage3D(32879, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data), textureProperties.__maxMipLevel = 0;
            else if (mipmaps.length > 0 && supportsMips) {
                for(var _i2 = 0, _il2 = mipmaps.length; _i2 < _il2; _i2++)mipmap = mipmaps[_i2], state.texImage2D(3553, _i2, glInternalFormat, glFormat, glType, mipmap);
                texture.generateMipmaps = !1, textureProperties.__maxMipLevel = mipmaps.length - 1;
            } else state.texImage2D(3553, 0, glInternalFormat, glFormat, glType, image), textureProperties.__maxMipLevel = 0;
            textureNeedsGenerateMipmaps(texture, supportsMips) && generateMipmap(textureType, texture, image.width, image.height), textureProperties.__version = texture.version, texture.onUpdate && texture.onUpdate(texture);
        }
        function setupFrameBufferTexture(framebuffer, renderTarget, attachment, textureTarget) {
            var glFormat = utils.convert(renderTarget.texture.format), glType = utils.convert(renderTarget.texture.type), glInternalFormat = getInternalFormat(renderTarget.texture.internalFormat, glFormat, glType);
            state.texImage2D(textureTarget, 0, glInternalFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null), _gl.bindFramebuffer(36160, framebuffer), _gl.framebufferTexture2D(36160, attachment, textureTarget, properties.get(renderTarget.texture).__webglTexture, 0), _gl.bindFramebuffer(36160, null);
        }
        function setupRenderBufferStorage(renderbuffer, renderTarget, isMultisample) {
            if (_gl.bindRenderbuffer(36161, renderbuffer), renderTarget.depthBuffer && !renderTarget.stencilBuffer) {
                var glInternalFormat = 33189;
                if (isMultisample) {
                    var depthTexture = renderTarget.depthTexture;
                    depthTexture && depthTexture.isDepthTexture && (1015 === depthTexture.type ? glInternalFormat = 36012 : 1014 === depthTexture.type && (glInternalFormat = 33190));
                    var samples = getRenderTargetSamples(renderTarget);
                    _gl.renderbufferStorageMultisample(36161, samples, glInternalFormat, renderTarget.width, renderTarget.height);
                } else _gl.renderbufferStorage(36161, glInternalFormat, renderTarget.width, renderTarget.height);
                _gl.framebufferRenderbuffer(36160, 36096, 36161, renderbuffer);
            } else if (renderTarget.depthBuffer && renderTarget.stencilBuffer) {
                if (isMultisample) {
                    var _samples = getRenderTargetSamples(renderTarget);
                    _gl.renderbufferStorageMultisample(36161, _samples, 35056, renderTarget.width, renderTarget.height);
                } else _gl.renderbufferStorage(36161, 34041, renderTarget.width, renderTarget.height);
                _gl.framebufferRenderbuffer(36160, 33306, 36161, renderbuffer);
            } else {
                var glFormat = utils.convert(renderTarget.texture.format), glType = utils.convert(renderTarget.texture.type), _glInternalFormat = getInternalFormat(renderTarget.texture.internalFormat, glFormat, glType);
                if (isMultisample) {
                    var _samples2 = getRenderTargetSamples(renderTarget);
                    _gl.renderbufferStorageMultisample(36161, _samples2, _glInternalFormat, renderTarget.width, renderTarget.height);
                } else _gl.renderbufferStorage(36161, _glInternalFormat, renderTarget.width, renderTarget.height);
            }
            _gl.bindRenderbuffer(36161, null);
        }
        function getRenderTargetSamples(renderTarget) {
            return isWebGL2 && renderTarget.isWebGLMultisampleRenderTarget ? Math.min(maxSamples, renderTarget.samples) : 0;
        }
        var warnedTexture2D = !1, warnedTextureCube = !1;
        this.allocateTextureUnit = function() {
            var textureUnit = textureUnits;
            return textureUnit >= maxTextures && console.warn('THREE.WebGLTextures: Trying to use ' + textureUnit + ' texture units while this GPU supports only ' + maxTextures), textureUnits += 1, textureUnit;
        }, this.resetTextureUnits = function() {
            textureUnits = 0;
        }, this.setTexture2D = setTexture2D, this.setTexture2DArray = function(texture, slot) {
            var textureProperties = properties.get(texture);
            if (texture.version > 0 && textureProperties.__version !== texture.version) {
                uploadTexture(textureProperties, texture, slot);
                return;
            }
            state.activeTexture(33984 + slot), state.bindTexture(35866, textureProperties.__webglTexture);
        }, this.setTexture3D = function(texture, slot) {
            var textureProperties = properties.get(texture);
            if (texture.version > 0 && textureProperties.__version !== texture.version) {
                uploadTexture(textureProperties, texture, slot);
                return;
            }
            state.activeTexture(33984 + slot), state.bindTexture(32879, textureProperties.__webglTexture);
        }, this.setTextureCube = setTextureCube, this.setupRenderTarget = function(renderTarget) {
            var renderTargetProperties = properties.get(renderTarget), textureProperties = properties.get(renderTarget.texture);
            renderTarget.addEventListener('dispose', onRenderTargetDispose), textureProperties.__webglTexture = _gl.createTexture(), info.memory.textures++;
            var isCube = !0 === renderTarget.isWebGLCubeRenderTarget, isMultisample = !0 === renderTarget.isWebGLMultisampleRenderTarget, supportsMips = isPowerOfTwo(renderTarget) || isWebGL2;
            if (isWebGL2 && 1022 === renderTarget.texture.format && (1015 === renderTarget.texture.type || 1016 === renderTarget.texture.type) && (renderTarget.texture.format = 1023, console.warn('THREE.WebGLRenderer: Rendering to textures with RGB format is not supported. Using RGBA format instead.')), isCube) {
                renderTargetProperties.__webglFramebuffer = [];
                for(var i = 0; i < 6; i++)renderTargetProperties.__webglFramebuffer[i] = _gl.createFramebuffer();
            } else if (renderTargetProperties.__webglFramebuffer = _gl.createFramebuffer(), isMultisample) {
                if (isWebGL2) {
                    renderTargetProperties.__webglMultisampledFramebuffer = _gl.createFramebuffer(), renderTargetProperties.__webglColorRenderbuffer = _gl.createRenderbuffer(), _gl.bindRenderbuffer(36161, renderTargetProperties.__webglColorRenderbuffer);
                    var glFormat = utils.convert(renderTarget.texture.format), glType = utils.convert(renderTarget.texture.type), glInternalFormat = getInternalFormat(renderTarget.texture.internalFormat, glFormat, glType), samples = getRenderTargetSamples(renderTarget);
                    _gl.renderbufferStorageMultisample(36161, samples, glInternalFormat, renderTarget.width, renderTarget.height), _gl.bindFramebuffer(36160, renderTargetProperties.__webglMultisampledFramebuffer), _gl.framebufferRenderbuffer(36160, 36064, 36161, renderTargetProperties.__webglColorRenderbuffer), _gl.bindRenderbuffer(36161, null), renderTarget.depthBuffer && (renderTargetProperties.__webglDepthRenderbuffer = _gl.createRenderbuffer(), setupRenderBufferStorage(renderTargetProperties.__webglDepthRenderbuffer, renderTarget, !0)), _gl.bindFramebuffer(36160, null);
                } else console.warn('THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.');
            }
            if (isCube) {
                state.bindTexture(34067, textureProperties.__webglTexture), setTextureParameters(34067, renderTarget.texture, supportsMips);
                for(var _i5 = 0; _i5 < 6; _i5++)setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer[_i5], renderTarget, 36064, 34069 + _i5);
                textureNeedsGenerateMipmaps(renderTarget.texture, supportsMips) && generateMipmap(34067, renderTarget.texture, renderTarget.width, renderTarget.height), state.bindTexture(34067, null);
            } else state.bindTexture(3553, textureProperties.__webglTexture), setTextureParameters(3553, renderTarget.texture, supportsMips), setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer, renderTarget, 36064, 3553), textureNeedsGenerateMipmaps(renderTarget.texture, supportsMips) && generateMipmap(3553, renderTarget.texture, renderTarget.width, renderTarget.height), state.bindTexture(3553, null);
            renderTarget.depthBuffer && function(renderTarget) {
                var renderTargetProperties = properties.get(renderTarget), isCube = !0 === renderTarget.isWebGLCubeRenderTarget;
                if (renderTarget.depthTexture) {
                    if (isCube) throw Error('target.depthTexture not supported in Cube render targets');
                    !function(framebuffer, renderTarget) {
                        if (renderTarget && renderTarget.isWebGLCubeRenderTarget) throw Error('Depth Texture with cube render targets is not supported');
                        if (_gl.bindFramebuffer(36160, framebuffer), !(renderTarget.depthTexture && renderTarget.depthTexture.isDepthTexture)) throw Error('renderTarget.depthTexture must be an instance of THREE.DepthTexture');
                        properties.get(renderTarget.depthTexture).__webglTexture && renderTarget.depthTexture.image.width === renderTarget.width && renderTarget.depthTexture.image.height === renderTarget.height || (renderTarget.depthTexture.image.width = renderTarget.width, renderTarget.depthTexture.image.height = renderTarget.height, renderTarget.depthTexture.needsUpdate = !0), setTexture2D(renderTarget.depthTexture, 0);
                        var webglDepthTexture = properties.get(renderTarget.depthTexture).__webglTexture;
                        if (1026 === renderTarget.depthTexture.format) _gl.framebufferTexture2D(36160, 36096, 3553, webglDepthTexture, 0);
                        else if (1027 === renderTarget.depthTexture.format) _gl.framebufferTexture2D(36160, 33306, 3553, webglDepthTexture, 0);
                        else throw Error('Unknown depthTexture format');
                    }(renderTargetProperties.__webglFramebuffer, renderTarget);
                } else if (isCube) {
                    renderTargetProperties.__webglDepthbuffer = [];
                    for(var i = 0; i < 6; i++)_gl.bindFramebuffer(36160, renderTargetProperties.__webglFramebuffer[i]), renderTargetProperties.__webglDepthbuffer[i] = _gl.createRenderbuffer(), setupRenderBufferStorage(renderTargetProperties.__webglDepthbuffer[i], renderTarget, !1);
                } else _gl.bindFramebuffer(36160, renderTargetProperties.__webglFramebuffer), renderTargetProperties.__webglDepthbuffer = _gl.createRenderbuffer(), setupRenderBufferStorage(renderTargetProperties.__webglDepthbuffer, renderTarget, !1);
                _gl.bindFramebuffer(36160, null);
            }(renderTarget);
        }, this.updateRenderTargetMipmap = function(renderTarget) {
            var texture = renderTarget.texture;
            if (textureNeedsGenerateMipmaps(texture, isPowerOfTwo(renderTarget) || isWebGL2)) {
                var target = renderTarget.isWebGLCubeRenderTarget ? 34067 : 3553, webglTexture = properties.get(texture).__webglTexture;
                state.bindTexture(target, webglTexture), generateMipmap(target, texture, renderTarget.width, renderTarget.height), state.bindTexture(target, null);
            }
        }, this.updateMultisampleRenderTarget = function(renderTarget) {
            if (renderTarget.isWebGLMultisampleRenderTarget) {
                if (isWebGL2) {
                    var renderTargetProperties = properties.get(renderTarget);
                    _gl.bindFramebuffer(36008, renderTargetProperties.__webglMultisampledFramebuffer), _gl.bindFramebuffer(36009, renderTargetProperties.__webglFramebuffer);
                    var width = renderTarget.width, height = renderTarget.height, mask = 16384;
                    renderTarget.depthBuffer && (mask |= 256), renderTarget.stencilBuffer && (mask |= 1024), _gl.blitFramebuffer(0, 0, width, height, 0, 0, width, height, mask, 9728), _gl.bindFramebuffer(36160, renderTargetProperties.__webglMultisampledFramebuffer);
                } else console.warn('THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.');
            }
        }, this.safeSetTexture2D = function(texture, slot) {
            texture && texture.isWebGLRenderTarget && (!1 === warnedTexture2D && (console.warn('THREE.WebGLTextures.safeSetTexture2D: don\'t use render targets as textures. Use their .texture property instead.'), warnedTexture2D = !0), texture = texture.texture), setTexture2D(texture, slot);
        }, this.safeSetTextureCube = function(texture, slot) {
            texture && texture.isWebGLCubeRenderTarget && (!1 === warnedTextureCube && (console.warn('THREE.WebGLTextures.safeSetTextureCube: don\'t use cube render targets as textures. Use their .texture property instead.'), warnedTextureCube = !0), texture = texture.texture), setTextureCube(texture, slot);
        };
    }
    function WebGLUtils(gl, extensions, capabilities) {
        var isWebGL2 = capabilities.isWebGL2;
        return {
            convert: function(p) {
                var extension;
                if (1009 === p) return 5121;
                if (1017 === p) return 32819;
                if (1018 === p) return 32820;
                if (1019 === p) return 33635;
                if (1010 === p) return 5120;
                if (1011 === p) return 5122;
                if (1012 === p) return 5123;
                if (1013 === p) return 5124;
                if (1014 === p) return 5125;
                if (1015 === p) return 5126;
                if (1016 === p) return isWebGL2 ? 5131 : null !== (extension = extensions.get('OES_texture_half_float')) ? extension.HALF_FLOAT_OES : null;
                if (1021 === p) return 6406;
                if (1022 === p) return 6407;
                if (1023 === p) return 6408;
                if (1024 === p) return 6409;
                if (1025 === p) return 6410;
                if (1026 === p) return 6402;
                if (1027 === p) return 34041;
                if (1028 === p) return 6403;
                if (1029 === p) return 36244;
                if (1030 === p) return 33319;
                if (1031 === p) return 33320;
                if (1032 === p) return 36248;
                if (1033 === p) return 36249;
                if (33776 === p || 33777 === p || 33778 === p || 33779 === p) {
                    if (null === (extension = extensions.get('WEBGL_compressed_texture_s3tc'))) return null;
                    if (33776 === p) return extension.COMPRESSED_RGB_S3TC_DXT1_EXT;
                    if (33777 === p) return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT;
                    if (33778 === p) return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT;
                    if (33779 === p) return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT;
                }
                if (35840 === p || 35841 === p || 35842 === p || 35843 === p) {
                    if (null === (extension = extensions.get('WEBGL_compressed_texture_pvrtc'))) return null;
                    if (35840 === p) return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;
                    if (35841 === p) return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;
                    if (35842 === p) return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;
                    if (35843 === p) return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;
                }
                if (36196 === p) return null !== (extension = extensions.get('WEBGL_compressed_texture_etc1')) ? extension.COMPRESSED_RGB_ETC1_WEBGL : null;
                if ((37492 === p || 37496 === p) && null !== (extension = extensions.get('WEBGL_compressed_texture_etc'))) {
                    if (37492 === p) return extension.COMPRESSED_RGB8_ETC2;
                    if (37496 === p) return extension.COMPRESSED_RGBA8_ETC2_EAC;
                }
                return 37808 === p || 37809 === p || 37810 === p || 37811 === p || 37812 === p || 37813 === p || 37814 === p || 37815 === p || 37816 === p || 37817 === p || 37818 === p || 37819 === p || 37820 === p || 37821 === p || 37840 === p || 37841 === p || 37842 === p || 37843 === p || 37844 === p || 37845 === p || 37846 === p || 37847 === p || 37848 === p || 37849 === p || 37850 === p || 37851 === p || 37852 === p || 37853 === p ? null !== (extension = extensions.get('WEBGL_compressed_texture_astc')) ? p : null : 36492 === p ? null !== (extension = extensions.get('EXT_texture_compression_bptc')) ? p : null : 1020 === p ? isWebGL2 ? 34042 : null !== (extension = extensions.get('WEBGL_depth_texture')) ? extension.UNSIGNED_INT_24_8_WEBGL : null : void 0;
            }
        };
    }
    function ArrayCamera(array) {
        void 0 === array && (array = []), PerspectiveCamera.call(this), this.cameras = array;
    }
    function Group() {
        Object3D.call(this), this.type = 'Group';
    }
    function WebXRController() {
        this._targetRay = null, this._grip = null, this._hand = null;
    }
    function WebXRManager(renderer, gl) {
        var scope = this, session = null, framebufferScaleFactor = 1.0, referenceSpace = null, referenceSpaceType = 'local-floor', pose = null, controllers = [], inputSourcesMap = new Map(), cameraL = new PerspectiveCamera();
        cameraL.layers.enable(1), cameraL.viewport = new Vector4();
        var cameraR = new PerspectiveCamera();
        cameraR.layers.enable(2), cameraR.viewport = new Vector4();
        var cameras = [
            cameraL,
            cameraR
        ], cameraVR = new ArrayCamera();
        cameraVR.layers.enable(1), cameraVR.layers.enable(2);
        var _currentDepthNear = null, _currentDepthFar = null;
        function onSessionEvent(event) {
            var controller = inputSourcesMap.get(event.inputSource);
            controller && controller.dispatchEvent({
                type: event.type,
                data: event.inputSource
            });
        }
        function onSessionEnd() {
            inputSourcesMap.forEach(function(controller, inputSource) {
                controller.disconnect(inputSource);
            }), inputSourcesMap.clear(), renderer.setFramebuffer(null), renderer.setRenderTarget(renderer.getRenderTarget()), animation.stop(), scope.isPresenting = !1, scope.dispatchEvent({
                type: 'sessionend'
            });
        }
        function onRequestReferenceSpace(value) {
            referenceSpace = value, animation.setContext(session), animation.start(), scope.isPresenting = !0, scope.dispatchEvent({
                type: 'sessionstart'
            });
        }
        function updateInputSources(event) {
            for(var inputSources = session.inputSources, i = 0; i < controllers.length; i++)inputSourcesMap.set(inputSources[i], controllers[i]);
            for(var _i = 0; _i < event.removed.length; _i++){
                var inputSource = event.removed[_i], controller = inputSourcesMap.get(inputSource);
                controller && (controller.dispatchEvent({
                    type: 'disconnected',
                    data: inputSource
                }), inputSourcesMap.delete(inputSource));
            }
            for(var _i2 = 0; _i2 < event.added.length; _i2++){
                var _inputSource = event.added[_i2], _controller = inputSourcesMap.get(_inputSource);
                _controller && _controller.dispatchEvent({
                    type: 'connected',
                    data: _inputSource
                });
            }
        }
        this.enabled = !1, this.isPresenting = !1, this.getController = function(index) {
            var controller = controllers[index];
            return void 0 === controller && (controller = new WebXRController(), controllers[index] = controller), controller.getTargetRaySpace();
        }, this.getControllerGrip = function(index) {
            var controller = controllers[index];
            return void 0 === controller && (controller = new WebXRController(), controllers[index] = controller), controller.getGripSpace();
        }, this.getHand = function(index) {
            var controller = controllers[index];
            return void 0 === controller && (controller = new WebXRController(), controllers[index] = controller), controller.getHandSpace();
        }, this.setFramebufferScaleFactor = function(value) {
            framebufferScaleFactor = value, !0 === scope.isPresenting && console.warn('THREE.WebXRManager: Cannot change framebuffer scale while presenting.');
        }, this.setReferenceSpaceType = function(value) {
            referenceSpaceType = value, !0 === scope.isPresenting && console.warn('THREE.WebXRManager: Cannot change reference space type while presenting.');
        }, this.getReferenceSpace = function() {
            return referenceSpace;
        }, this.getSession = function() {
            return session;
        }, this.setSession = function(value) {
            if (null !== (session = value)) {
                session.addEventListener('select', onSessionEvent), session.addEventListener('selectstart', onSessionEvent), session.addEventListener('selectend', onSessionEvent), session.addEventListener('squeeze', onSessionEvent), session.addEventListener('squeezestart', onSessionEvent), session.addEventListener('squeezeend', onSessionEvent), session.addEventListener('end', onSessionEnd);
                var attributes = gl.getContextAttributes();
                !0 !== attributes.xrCompatible && gl.makeXRCompatible();
                var layerInit = {
                    antialias: attributes.antialias,
                    alpha: attributes.alpha,
                    depth: attributes.depth,
                    stencil: attributes.stencil,
                    framebufferScaleFactor: framebufferScaleFactor
                }, baseLayer = new XRWebGLLayer(session, gl, layerInit);
                session.updateRenderState({
                    baseLayer: baseLayer
                }), session.requestReferenceSpace(referenceSpaceType).then(onRequestReferenceSpace), session.addEventListener('inputsourceschange', updateInputSources);
            }
        };
        var cameraLPos = new Vector3(), cameraRPos = new Vector3();
        function updateCamera(camera, parent) {
            null === parent ? camera.matrixWorld.copy(camera.matrix) : camera.matrixWorld.multiplyMatrices(parent.matrixWorld, camera.matrix), camera.matrixWorldInverse.copy(camera.matrixWorld).invert();
        }
        this.getCamera = function(camera) {
            cameraVR.near = cameraR.near = cameraL.near = camera.near, cameraVR.far = cameraR.far = cameraL.far = camera.far, (_currentDepthNear !== cameraVR.near || _currentDepthFar !== cameraVR.far) && (session.updateRenderState({
                depthNear: cameraVR.near,
                depthFar: cameraVR.far
            }), _currentDepthNear = cameraVR.near, _currentDepthFar = cameraVR.far);
            var parent = camera.parent, cameras = cameraVR.cameras;
            updateCamera(cameraVR, parent);
            for(var i = 0; i < cameras.length; i++)updateCamera(cameras[i], parent);
            camera.matrixWorld.copy(cameraVR.matrixWorld);
            for(var children = camera.children, _i3 = 0, l = children.length; _i3 < l; _i3++)children[_i3].updateMatrixWorld(!0);
            return 2 === cameras.length ? function(camera, cameraL, cameraR) {
                cameraLPos.setFromMatrixPosition(cameraL.matrixWorld), cameraRPos.setFromMatrixPosition(cameraR.matrixWorld);
                var ipd = cameraLPos.distanceTo(cameraRPos), projL = cameraL.projectionMatrix.elements, projR = cameraR.projectionMatrix.elements, near = projL[14] / (projL[10] - 1), far = projL[14] / (projL[10] + 1), topFov = (projL[9] + 1) / projL[5], bottomFov = (projL[9] - 1) / projL[5], leftFov = (projL[8] - 1) / projL[0], rightFov = (projR[8] + 1) / projR[0], zOffset = ipd / (-leftFov + rightFov), xOffset = -(zOffset * leftFov);
                cameraL.matrixWorld.decompose(camera.position, camera.quaternion, camera.scale), camera.translateX(xOffset), camera.translateZ(zOffset), camera.matrixWorld.compose(camera.position, camera.quaternion, camera.scale), camera.matrixWorldInverse.copy(camera.matrixWorld).invert();
                var near2 = near + zOffset, far2 = far + zOffset, left2 = near * leftFov - xOffset, right2 = near * rightFov + (ipd - xOffset), top2 = topFov * far / far2 * near2, bottom2 = bottomFov * far / far2 * near2;
                camera.projectionMatrix.makePerspective(left2, right2, top2, bottom2, near2, far2);
            }(cameraVR, cameraL, cameraR) : cameraVR.projectionMatrix.copy(cameraL.projectionMatrix), cameraVR;
        };
        var onAnimationFrameCallback = null, animation = new WebGLAnimation();
        animation.setAnimationLoop(function(time, frame) {
            if (null !== (pose = frame.getViewerPose(referenceSpace))) {
                var views = pose.views, baseLayer = session.renderState.baseLayer;
                renderer.setFramebuffer(baseLayer.framebuffer);
                var cameraVRNeedsUpdate = !1;
                views.length !== cameraVR.cameras.length && (cameraVR.cameras.length = 0, cameraVRNeedsUpdate = !0);
                for(var i = 0; i < views.length; i++){
                    var view = views[i], viewport = baseLayer.getViewport(view), camera = cameras[i];
                    camera.matrix.fromArray(view.transform.matrix), camera.projectionMatrix.fromArray(view.projectionMatrix), camera.viewport.set(viewport.x, viewport.y, viewport.width, viewport.height), 0 === i && cameraVR.matrix.copy(camera.matrix), !0 === cameraVRNeedsUpdate && cameraVR.cameras.push(camera);
                }
            }
            for(var inputSources = session.inputSources, _i4 = 0; _i4 < controllers.length; _i4++){
                var controller = controllers[_i4], inputSource = inputSources[_i4];
                controller.update(inputSource, frame, referenceSpace);
            }
            onAnimationFrameCallback && onAnimationFrameCallback(time, frame);
        }), this.setAnimationLoop = function(callback) {
            onAnimationFrameCallback = callback;
        }, this.dispose = function() {};
    }
    function WebGLMaterials(properties) {
        function refreshUniformsCommon(uniforms, material) {
            uniforms.opacity.value = material.opacity, material.color && uniforms.diffuse.value.copy(material.color), material.emissive && uniforms.emissive.value.copy(material.emissive).multiplyScalar(material.emissiveIntensity), material.map && (uniforms.map.value = material.map), material.alphaMap && (uniforms.alphaMap.value = material.alphaMap), material.specularMap && (uniforms.specularMap.value = material.specularMap);
            var uvScaleMap, uv2ScaleMap, envMap = properties.get(material).envMap;
            if (envMap) {
                uniforms.envMap.value = envMap, uniforms.flipEnvMap.value = envMap.isCubeTexture && envMap._needsFlipEnvMap ? -1 : 1, uniforms.reflectivity.value = material.reflectivity, uniforms.refractionRatio.value = material.refractionRatio;
                var maxMipLevel = properties.get(envMap).__maxMipLevel;
                void 0 !== maxMipLevel && (uniforms.maxMipLevel.value = maxMipLevel);
            }
            material.lightMap && (uniforms.lightMap.value = material.lightMap, uniforms.lightMapIntensity.value = material.lightMapIntensity), material.aoMap && (uniforms.aoMap.value = material.aoMap, uniforms.aoMapIntensity.value = material.aoMapIntensity), material.map ? uvScaleMap = material.map : material.specularMap ? uvScaleMap = material.specularMap : material.displacementMap ? uvScaleMap = material.displacementMap : material.normalMap ? uvScaleMap = material.normalMap : material.bumpMap ? uvScaleMap = material.bumpMap : material.roughnessMap ? uvScaleMap = material.roughnessMap : material.metalnessMap ? uvScaleMap = material.metalnessMap : material.alphaMap ? uvScaleMap = material.alphaMap : material.emissiveMap ? uvScaleMap = material.emissiveMap : material.clearcoatMap ? uvScaleMap = material.clearcoatMap : material.clearcoatNormalMap ? uvScaleMap = material.clearcoatNormalMap : material.clearcoatRoughnessMap && (uvScaleMap = material.clearcoatRoughnessMap), void 0 !== uvScaleMap && (uvScaleMap.isWebGLRenderTarget && (uvScaleMap = uvScaleMap.texture), !0 === uvScaleMap.matrixAutoUpdate && uvScaleMap.updateMatrix(), uniforms.uvTransform.value.copy(uvScaleMap.matrix)), material.aoMap ? uv2ScaleMap = material.aoMap : material.lightMap && (uv2ScaleMap = material.lightMap), void 0 !== uv2ScaleMap && (uv2ScaleMap.isWebGLRenderTarget && (uv2ScaleMap = uv2ScaleMap.texture), !0 === uv2ScaleMap.matrixAutoUpdate && uv2ScaleMap.updateMatrix(), uniforms.uv2Transform.value.copy(uv2ScaleMap.matrix));
        }
        function refreshUniformsStandard(uniforms, material) {
            uniforms.roughness.value = material.roughness, uniforms.metalness.value = material.metalness, material.roughnessMap && (uniforms.roughnessMap.value = material.roughnessMap), material.metalnessMap && (uniforms.metalnessMap.value = material.metalnessMap), material.emissiveMap && (uniforms.emissiveMap.value = material.emissiveMap), material.bumpMap && (uniforms.bumpMap.value = material.bumpMap, uniforms.bumpScale.value = material.bumpScale, 1 === material.side && (uniforms.bumpScale.value *= -1)), material.normalMap && (uniforms.normalMap.value = material.normalMap, uniforms.normalScale.value.copy(material.normalScale), 1 === material.side && uniforms.normalScale.value.negate()), material.displacementMap && (uniforms.displacementMap.value = material.displacementMap, uniforms.displacementScale.value = material.displacementScale, uniforms.displacementBias.value = material.displacementBias), properties.get(material).envMap && (uniforms.envMapIntensity.value = material.envMapIntensity);
        }
        return {
            refreshFogUniforms: function(uniforms, fog) {
                uniforms.fogColor.value.copy(fog.color), fog.isFog ? (uniforms.fogNear.value = fog.near, uniforms.fogFar.value = fog.far) : fog.isFogExp2 && (uniforms.fogDensity.value = fog.density);
            },
            refreshMaterialUniforms: function(uniforms, material, pixelRatio, height) {
                var uvScaleMap, uvScaleMap1;
                material.isMeshBasicMaterial ? refreshUniformsCommon(uniforms, material) : material.isMeshLambertMaterial ? (refreshUniformsCommon(uniforms, material), material.emissiveMap && (uniforms.emissiveMap.value = material.emissiveMap)) : material.isMeshToonMaterial ? (refreshUniformsCommon(uniforms, material), material.gradientMap && (uniforms.gradientMap.value = material.gradientMap), material.emissiveMap && (uniforms.emissiveMap.value = material.emissiveMap), material.bumpMap && (uniforms.bumpMap.value = material.bumpMap, uniforms.bumpScale.value = material.bumpScale, 1 === material.side && (uniforms.bumpScale.value *= -1)), material.normalMap && (uniforms.normalMap.value = material.normalMap, uniforms.normalScale.value.copy(material.normalScale), 1 === material.side && uniforms.normalScale.value.negate()), material.displacementMap && (uniforms.displacementMap.value = material.displacementMap, uniforms.displacementScale.value = material.displacementScale, uniforms.displacementBias.value = material.displacementBias)) : material.isMeshPhongMaterial ? (refreshUniformsCommon(uniforms, material), uniforms.specular.value.copy(material.specular), uniforms.shininess.value = Math.max(material.shininess, 1e-4), material.emissiveMap && (uniforms.emissiveMap.value = material.emissiveMap), material.bumpMap && (uniforms.bumpMap.value = material.bumpMap, uniforms.bumpScale.value = material.bumpScale, 1 === material.side && (uniforms.bumpScale.value *= -1)), material.normalMap && (uniforms.normalMap.value = material.normalMap, uniforms.normalScale.value.copy(material.normalScale), 1 === material.side && uniforms.normalScale.value.negate()), material.displacementMap && (uniforms.displacementMap.value = material.displacementMap, uniforms.displacementScale.value = material.displacementScale, uniforms.displacementBias.value = material.displacementBias)) : material.isMeshStandardMaterial ? (refreshUniformsCommon(uniforms, material), material.isMeshPhysicalMaterial ? (refreshUniformsStandard(uniforms, material), uniforms.reflectivity.value = material.reflectivity, uniforms.clearcoat.value = material.clearcoat, uniforms.clearcoatRoughness.value = material.clearcoatRoughness, material.sheen && uniforms.sheen.value.copy(material.sheen), material.clearcoatMap && (uniforms.clearcoatMap.value = material.clearcoatMap), material.clearcoatRoughnessMap && (uniforms.clearcoatRoughnessMap.value = material.clearcoatRoughnessMap), material.clearcoatNormalMap && (uniforms.clearcoatNormalScale.value.copy(material.clearcoatNormalScale), uniforms.clearcoatNormalMap.value = material.clearcoatNormalMap, 1 === material.side && uniforms.clearcoatNormalScale.value.negate()), uniforms.transmission.value = material.transmission, material.transmissionMap && (uniforms.transmissionMap.value = material.transmissionMap)) : refreshUniformsStandard(uniforms, material)) : material.isMeshMatcapMaterial ? (refreshUniformsCommon(uniforms, material), material.matcap && (uniforms.matcap.value = material.matcap), material.bumpMap && (uniforms.bumpMap.value = material.bumpMap, uniforms.bumpScale.value = material.bumpScale, 1 === material.side && (uniforms.bumpScale.value *= -1)), material.normalMap && (uniforms.normalMap.value = material.normalMap, uniforms.normalScale.value.copy(material.normalScale), 1 === material.side && uniforms.normalScale.value.negate()), material.displacementMap && (uniforms.displacementMap.value = material.displacementMap, uniforms.displacementScale.value = material.displacementScale, uniforms.displacementBias.value = material.displacementBias)) : material.isMeshDepthMaterial ? (refreshUniformsCommon(uniforms, material), material.displacementMap && (uniforms.displacementMap.value = material.displacementMap, uniforms.displacementScale.value = material.displacementScale, uniforms.displacementBias.value = material.displacementBias)) : material.isMeshDistanceMaterial ? (refreshUniformsCommon(uniforms, material), material.displacementMap && (uniforms.displacementMap.value = material.displacementMap, uniforms.displacementScale.value = material.displacementScale, uniforms.displacementBias.value = material.displacementBias), uniforms.referencePosition.value.copy(material.referencePosition), uniforms.nearDistance.value = material.nearDistance, uniforms.farDistance.value = material.farDistance) : material.isMeshNormalMaterial ? (refreshUniformsCommon(uniforms, material), material.bumpMap && (uniforms.bumpMap.value = material.bumpMap, uniforms.bumpScale.value = material.bumpScale, 1 === material.side && (uniforms.bumpScale.value *= -1)), material.normalMap && (uniforms.normalMap.value = material.normalMap, uniforms.normalScale.value.copy(material.normalScale), 1 === material.side && uniforms.normalScale.value.negate()), material.displacementMap && (uniforms.displacementMap.value = material.displacementMap, uniforms.displacementScale.value = material.displacementScale, uniforms.displacementBias.value = material.displacementBias)) : material.isLineBasicMaterial ? (uniforms.diffuse.value.copy(material.color), uniforms.opacity.value = material.opacity, material.isLineDashedMaterial && (uniforms.dashSize.value = material.dashSize, uniforms.totalSize.value = material.dashSize + material.gapSize, uniforms.scale.value = material.scale)) : material.isPointsMaterial ? (uniforms.diffuse.value.copy(material.color), uniforms.opacity.value = material.opacity, uniforms.size.value = material.size * pixelRatio, uniforms.scale.value = 0.5 * height, material.map && (uniforms.map.value = material.map), material.alphaMap && (uniforms.alphaMap.value = material.alphaMap), material.map ? uvScaleMap = material.map : material.alphaMap && (uvScaleMap = material.alphaMap), void 0 !== uvScaleMap && (!0 === uvScaleMap.matrixAutoUpdate && uvScaleMap.updateMatrix(), uniforms.uvTransform.value.copy(uvScaleMap.matrix))) : material.isSpriteMaterial ? (uniforms.diffuse.value.copy(material.color), uniforms.opacity.value = material.opacity, uniforms.rotation.value = material.rotation, material.map && (uniforms.map.value = material.map), material.alphaMap && (uniforms.alphaMap.value = material.alphaMap), material.map ? uvScaleMap1 = material.map : material.alphaMap && (uvScaleMap1 = material.alphaMap), void 0 !== uvScaleMap1 && (!0 === uvScaleMap1.matrixAutoUpdate && uvScaleMap1.updateMatrix(), uniforms.uvTransform.value.copy(uvScaleMap1.matrix))) : material.isShadowMaterial ? (uniforms.color.value.copy(material.color), uniforms.opacity.value = material.opacity) : material.isShaderMaterial && (material.uniformsNeedUpdate = !1);
            }
        };
    }
    function WebGLRenderer(parameters) {
        var canvas, extensions, capabilities, state, info, properties, textures, cubemaps, attributes, geometries, objects, programCache, materials, renderLists, renderStates, clipping, background, morphtargets, bufferRenderer, indexedBufferRenderer, utils, bindingStates, _canvas = void 0 !== (parameters = parameters || {}).canvas ? parameters.canvas : ((canvas = document.createElementNS('http://www.w3.org/1999/xhtml', 'canvas')).style.display = 'block', canvas), _context = void 0 !== parameters.context ? parameters.context : null, _alpha = void 0 !== parameters.alpha && parameters.alpha, _depth = void 0 === parameters.depth || parameters.depth, _stencil = void 0 === parameters.stencil || parameters.stencil, _antialias = void 0 !== parameters.antialias && parameters.antialias, _premultipliedAlpha = void 0 === parameters.premultipliedAlpha || parameters.premultipliedAlpha, _preserveDrawingBuffer = void 0 !== parameters.preserveDrawingBuffer && parameters.preserveDrawingBuffer, _powerPreference = void 0 !== parameters.powerPreference ? parameters.powerPreference : 'default', _failIfMajorPerformanceCaveat = void 0 !== parameters.failIfMajorPerformanceCaveat && parameters.failIfMajorPerformanceCaveat, currentRenderList = null, currentRenderState = null, renderStateStack = [];
        this.domElement = _canvas, this.debug = {
            checkShaderErrors: !0
        }, this.autoClear = !0, this.autoClearColor = !0, this.autoClearDepth = !0, this.autoClearStencil = !0, this.sortObjects = !0, this.clippingPlanes = [], this.localClippingEnabled = !1, this.gammaFactor = 2.0, this.outputEncoding = 3000, this.physicallyCorrectLights = !1, this.toneMapping = 0, this.toneMappingExposure = 1.0, this.maxMorphTargets = 8, this.maxMorphNormals = 4;
        var _this = this, _isContextLost = !1, _framebuffer = null, _currentActiveCubeFace = 0, _currentActiveMipmapLevel = 0, _currentRenderTarget = null, _currentFramebuffer = null, _currentMaterialId = -1, _currentCamera = null, _currentViewport = new Vector4(), _currentScissor = new Vector4(), _currentScissorTest = null, _width = _canvas.width, _height = _canvas.height, _pixelRatio = 1, _opaqueSort = null, _transparentSort = null, _viewport = new Vector4(0, 0, _width, _height), _scissor = new Vector4(0, 0, _width, _height), _scissorTest = !1, _frustum = new Frustum(), _clippingEnabled = !1, _localClippingEnabled = !1, _projScreenMatrix = new Matrix4(), _vector3 = new Vector3(), _emptyScene = {
            background: null,
            fog: null,
            environment: null,
            overrideMaterial: null,
            isScene: !0
        };
        function getTargetPixelRatio() {
            return null === _currentRenderTarget ? _pixelRatio : 1;
        }
        var _gl = _context;
        function getContext(contextNames, contextAttributes) {
            for(var i = 0; i < contextNames.length; i++){
                var contextName = contextNames[i], context = _canvas.getContext(contextName, contextAttributes);
                if (null !== context) return context;
            }
            return null;
        }
        try {
            if (_canvas.addEventListener('webglcontextlost', onContextLost, !1), _canvas.addEventListener('webglcontextrestored', onContextRestore, !1), null === _gl) {
                var contextNames = [
                    'webgl2',
                    'webgl',
                    'experimental-webgl'
                ];
                if (!0 === _this.isWebGL1Renderer && contextNames.shift(), _gl = getContext(contextNames, {
                    alpha: _alpha,
                    depth: _depth,
                    stencil: _stencil,
                    antialias: _antialias,
                    premultipliedAlpha: _premultipliedAlpha,
                    preserveDrawingBuffer: _preserveDrawingBuffer,
                    powerPreference: _powerPreference,
                    failIfMajorPerformanceCaveat: _failIfMajorPerformanceCaveat
                }), null === _gl) {
                    if (getContext(contextNames)) throw Error('Error creating WebGL context with your selected attributes.');
                    throw Error('Error creating WebGL context.');
                }
            }
            void 0 === _gl.getShaderPrecisionFormat && (_gl.getShaderPrecisionFormat = function() {
                return {
                    rangeMin: 1,
                    rangeMax: 1,
                    precision: 1
                };
            });
        } catch (error) {
            throw console.error('THREE.WebGLRenderer: ' + error.message), error;
        }
        function initGLContext() {
            extensions = new WebGLExtensions(_gl), !1 === (capabilities = new WebGLCapabilities(_gl, extensions, parameters)).isWebGL2 && (extensions.get('WEBGL_depth_texture'), extensions.get('OES_texture_float'), extensions.get('OES_texture_half_float'), extensions.get('OES_texture_half_float_linear'), extensions.get('OES_standard_derivatives'), extensions.get('OES_element_index_uint'), extensions.get('OES_vertex_array_object'), extensions.get('ANGLE_instanced_arrays')), extensions.get('OES_texture_float_linear'), utils = new WebGLUtils(_gl, extensions, capabilities), (state = new WebGLState(_gl, extensions, capabilities)).scissor(_currentScissor.copy(_scissor).multiplyScalar(_pixelRatio).floor()), state.viewport(_currentViewport.copy(_viewport).multiplyScalar(_pixelRatio).floor()), info = new WebGLInfo(_gl), properties = new WebGLProperties(), textures = new WebGLTextures(_gl, extensions, state, properties, capabilities, utils, info), cubemaps = new WebGLCubeMaps(_this), attributes = new WebGLAttributes(_gl, capabilities), bindingStates = new WebGLBindingStates(_gl, extensions, attributes, capabilities), geometries = new WebGLGeometries(_gl, attributes, info, bindingStates), objects = new WebGLObjects(_gl, geometries, attributes, info), morphtargets = new WebGLMorphtargets(_gl), clipping = new WebGLClipping(properties), programCache = new WebGLPrograms(_this, cubemaps, extensions, capabilities, bindingStates, clipping), materials = new WebGLMaterials(properties), renderLists = new WebGLRenderLists(properties), renderStates = new WebGLRenderStates(extensions, capabilities), background = new WebGLBackground(_this, cubemaps, state, objects, _premultipliedAlpha), bufferRenderer = new WebGLBufferRenderer(_gl, extensions, info, capabilities), indexedBufferRenderer = new WebGLIndexedBufferRenderer(_gl, extensions, info, capabilities), info.programs = programCache.programs, _this.capabilities = capabilities, _this.extensions = extensions, _this.properties = properties, _this.renderLists = renderLists, _this.state = state, _this.info = info;
        }
        initGLContext();
        var xr = new WebXRManager(_this, _gl);
        this.xr = xr;
        var shadowMap = new WebGLShadowMap(_this, objects, capabilities.maxTextureSize);
        function onContextLost(event) {
            event.preventDefault(), console.log('THREE.WebGLRenderer: Context Lost.'), _isContextLost = !0;
        }
        function onContextRestore() {
            console.log('THREE.WebGLRenderer: Context Restored.'), _isContextLost = !1, initGLContext();
        }
        function onMaterialDispose(event) {
            var material = event.target;
            material.removeEventListener('dispose', onMaterialDispose), releaseMaterialProgramReference(material), properties.remove(material);
        }
        function releaseMaterialProgramReference(material) {
            var programInfo = properties.get(material).program;
            void 0 !== programInfo && programCache.releaseProgram(programInfo);
        }
        this.shadowMap = shadowMap, this.getContext = function() {
            return _gl;
        }, this.getContextAttributes = function() {
            return _gl.getContextAttributes();
        }, this.forceContextLoss = function() {
            var extension = extensions.get('WEBGL_lose_context');
            extension && extension.loseContext();
        }, this.forceContextRestore = function() {
            var extension = extensions.get('WEBGL_lose_context');
            extension && extension.restoreContext();
        }, this.getPixelRatio = function() {
            return _pixelRatio;
        }, this.setPixelRatio = function(value) {
            void 0 !== value && (_pixelRatio = value, this.setSize(_width, _height, !1));
        }, this.getSize = function(target) {
            return void 0 === target && (console.warn('WebGLRenderer: .getsize() now requires a Vector2 as an argument'), target = new Vector2()), target.set(_width, _height);
        }, this.setSize = function(width, height, updateStyle) {
            if (xr.isPresenting) {
                console.warn('THREE.WebGLRenderer: Can\'t change size while VR device is presenting.');
                return;
            }
            _width = width, _height = height, _canvas.width = Math.floor(width * _pixelRatio), _canvas.height = Math.floor(height * _pixelRatio), !1 !== updateStyle && (_canvas.style.width = width + 'px', _canvas.style.height = height + 'px'), this.setViewport(0, 0, width, height);
        }, this.getDrawingBufferSize = function(target) {
            return void 0 === target && (console.warn('WebGLRenderer: .getdrawingBufferSize() now requires a Vector2 as an argument'), target = new Vector2()), target.set(_width * _pixelRatio, _height * _pixelRatio).floor();
        }, this.setDrawingBufferSize = function(width, height, pixelRatio) {
            _width = width, _height = height, _pixelRatio = pixelRatio, _canvas.width = Math.floor(width * pixelRatio), _canvas.height = Math.floor(height * pixelRatio), this.setViewport(0, 0, width, height);
        }, this.getCurrentViewport = function(target) {
            return void 0 === target && (console.warn('WebGLRenderer: .getCurrentViewport() now requires a Vector4 as an argument'), target = new Vector4()), target.copy(_currentViewport);
        }, this.getViewport = function(target) {
            return target.copy(_viewport);
        }, this.setViewport = function(x, y, width, height) {
            x.isVector4 ? _viewport.set(x.x, x.y, x.z, x.w) : _viewport.set(x, y, width, height), state.viewport(_currentViewport.copy(_viewport).multiplyScalar(_pixelRatio).floor());
        }, this.getScissor = function(target) {
            return target.copy(_scissor);
        }, this.setScissor = function(x, y, width, height) {
            x.isVector4 ? _scissor.set(x.x, x.y, x.z, x.w) : _scissor.set(x, y, width, height), state.scissor(_currentScissor.copy(_scissor).multiplyScalar(_pixelRatio).floor());
        }, this.getScissorTest = function() {
            return _scissorTest;
        }, this.setScissorTest = function(boolean) {
            state.setScissorTest(_scissorTest = boolean);
        }, this.setOpaqueSort = function(method) {
            _opaqueSort = method;
        }, this.setTransparentSort = function(method) {
            _transparentSort = method;
        }, this.getClearColor = function(target) {
            return void 0 === target && (console.warn('WebGLRenderer: .getClearColor() now requires a Color as an argument'), target = new Color()), target.copy(background.getClearColor());
        }, this.setClearColor = function() {
            background.setClearColor.apply(background, arguments);
        }, this.getClearAlpha = function() {
            return background.getClearAlpha();
        }, this.setClearAlpha = function() {
            background.setClearAlpha.apply(background, arguments);
        }, this.clear = function(color, depth, stencil) {
            var bits = 0;
            (void 0 === color || color) && (bits |= 16384), (void 0 === depth || depth) && (bits |= 256), (void 0 === stencil || stencil) && (bits |= 1024), _gl.clear(bits);
        }, this.clearColor = function() {
            this.clear(!0, !1, !1);
        }, this.clearDepth = function() {
            this.clear(!1, !0, !1);
        }, this.clearStencil = function() {
            this.clear(!1, !1, !0);
        }, this.dispose = function() {
            _canvas.removeEventListener('webglcontextlost', onContextLost, !1), _canvas.removeEventListener('webglcontextrestored', onContextRestore, !1), renderLists.dispose(), renderStates.dispose(), properties.dispose(), cubemaps.dispose(), objects.dispose(), bindingStates.dispose(), xr.dispose(), animation.stop();
        }, this.renderBufferImmediate = function(object, program) {
            bindingStates.initAttributes();
            var buffers = properties.get(object);
            object.hasPositions && !buffers.position && (buffers.position = _gl.createBuffer()), object.hasNormals && !buffers.normal && (buffers.normal = _gl.createBuffer()), object.hasUvs && !buffers.uv && (buffers.uv = _gl.createBuffer()), object.hasColors && !buffers.color && (buffers.color = _gl.createBuffer());
            var programAttributes = program.getAttributes();
            object.hasPositions && (_gl.bindBuffer(34962, buffers.position), _gl.bufferData(34962, object.positionArray, 35048), bindingStates.enableAttribute(programAttributes.position), _gl.vertexAttribPointer(programAttributes.position, 3, 5126, !1, 0, 0)), object.hasNormals && (_gl.bindBuffer(34962, buffers.normal), _gl.bufferData(34962, object.normalArray, 35048), bindingStates.enableAttribute(programAttributes.normal), _gl.vertexAttribPointer(programAttributes.normal, 3, 5126, !1, 0, 0)), object.hasUvs && (_gl.bindBuffer(34962, buffers.uv), _gl.bufferData(34962, object.uvArray, 35048), bindingStates.enableAttribute(programAttributes.uv), _gl.vertexAttribPointer(programAttributes.uv, 2, 5126, !1, 0, 0)), object.hasColors && (_gl.bindBuffer(34962, buffers.color), _gl.bufferData(34962, object.colorArray, 35048), bindingStates.enableAttribute(programAttributes.color), _gl.vertexAttribPointer(programAttributes.color, 3, 5126, !1, 0, 0)), bindingStates.disableUnusedAttributes(), _gl.drawArrays(4, 0, object.count), object.count = 0;
        }, this.renderBufferDirect = function(camera, scene, geometry, material, object, group) {
            null === scene && (scene = _emptyScene);
            var attribute, frontFaceCW = object.isMesh && 0 > object.matrixWorld.determinant(), program = setProgram(camera, scene, material, object);
            state.setMaterial(material, frontFaceCW);
            var index = geometry.index, position = geometry.attributes.position;
            if (null === index) {
                if (void 0 === position || 0 === position.count) return;
            } else if (0 === index.count) return;
            var rangeFactor = 1;
            !0 === material.wireframe && (index = geometries.getWireframeAttribute(geometry), rangeFactor = 2), (material.morphTargets || material.morphNormals) && morphtargets.update(object, geometry, material, program), bindingStates.setup(object, material, program, geometry, index);
            var renderer = bufferRenderer;
            null !== index && (attribute = attributes.get(index), (renderer = indexedBufferRenderer).setIndex(attribute));
            var dataCount = null !== index ? index.count : position.count, rangeStart = geometry.drawRange.start * rangeFactor, rangeCount = geometry.drawRange.count * rangeFactor, groupStart = null !== group ? group.start * rangeFactor : 0, groupCount = null !== group ? group.count * rangeFactor : 1 / 0, drawStart = Math.max(rangeStart, groupStart), drawCount = Math.max(0, Math.min(dataCount, rangeStart + rangeCount, groupStart + groupCount) - 1 - drawStart + 1);
            if (0 !== drawCount) {
                if (object.isMesh) !0 === material.wireframe ? (state.setLineWidth(material.wireframeLinewidth * getTargetPixelRatio()), renderer.setMode(1)) : renderer.setMode(4);
                else if (object.isLine) {
                    var lineWidth = material.linewidth;
                    void 0 === lineWidth && (lineWidth = 1), state.setLineWidth(lineWidth * getTargetPixelRatio()), object.isLineSegments ? renderer.setMode(1) : object.isLineLoop ? renderer.setMode(2) : renderer.setMode(3);
                } else object.isPoints ? renderer.setMode(0) : object.isSprite && renderer.setMode(4);
                if (object.isInstancedMesh) renderer.renderInstances(drawStart, drawCount, object.count);
                else if (geometry.isInstancedBufferGeometry) {
                    var instanceCount = Math.min(geometry.instanceCount, geometry._maxInstanceCount);
                    renderer.renderInstances(drawStart, drawCount, instanceCount);
                } else renderer.render(drawStart, drawCount);
            }
        }, this.compile = function(scene, camera) {
            (currentRenderState = renderStates.get(scene)).init(), scene.traverseVisible(function(object) {
                object.isLight && object.layers.test(camera.layers) && (currentRenderState.pushLight(object), object.castShadow && currentRenderState.pushShadow(object));
            }), currentRenderState.setupLights();
            var compiled = new WeakMap();
            scene.traverse(function(object) {
                var material = object.material;
                if (material) {
                    if (Array.isArray(material)) for(var i = 0; i < material.length; i++){
                        var material2 = material[i];
                        !1 === compiled.has(material2) && (initMaterial(material2, scene, object), compiled.set(material2));
                    }
                    else !1 === compiled.has(material) && (initMaterial(material, scene, object), compiled.set(material));
                }
            });
        };
        var onAnimationFrameCallback = null, animation = new WebGLAnimation();
        function renderObjects(renderList, scene, camera) {
            for(var overrideMaterial = !0 === scene.isScene ? scene.overrideMaterial : null, i = 0, l = renderList.length; i < l; i++){
                var renderItem = renderList[i], object = renderItem.object, geometry = renderItem.geometry, material = null === overrideMaterial ? renderItem.material : overrideMaterial, group = renderItem.group;
                if (camera.isArrayCamera) for(var cameras = camera.cameras, j = 0, jl = cameras.length; j < jl; j++){
                    var camera2 = cameras[j];
                    object.layers.test(camera2.layers) && (state.viewport(_currentViewport.copy(camera2.viewport)), currentRenderState.setupLightsView(camera2), renderObject(object, scene, camera2, geometry, material, group));
                }
                else renderObject(object, scene, camera, geometry, material, group);
            }
        }
        function renderObject(object, scene, camera, geometry, material, group) {
            if (object.onBeforeRender(_this, scene, camera, geometry, material, group), object.modelViewMatrix.multiplyMatrices(camera.matrixWorldInverse, object.matrixWorld), object.normalMatrix.getNormalMatrix(object.modelViewMatrix), object.isImmediateRenderObject) {
                var program = setProgram(camera, scene, material, object);
                state.setMaterial(material), bindingStates.reset(), function(object, program) {
                    object.render(function(object) {
                        _this.renderBufferImmediate(object, program);
                    });
                }(object, program);
            } else _this.renderBufferDirect(camera, scene, geometry, material, object, group);
            object.onAfterRender(_this, scene, camera, geometry, material, group);
        }
        function initMaterial(material, scene, object) {
            !0 !== scene.isScene && (scene = _emptyScene);
            var materialProperties = properties.get(material), lights = currentRenderState.state.lights, shadowsArray = currentRenderState.state.shadowsArray, lightsStateVersion = lights.state.version, parameters = programCache.getParameters(material, lights.state, shadowsArray, scene, object), programCacheKey = programCache.getProgramCacheKey(parameters), program = materialProperties.program, programChange = !0;
            if (void 0 === program) material.addEventListener('dispose', onMaterialDispose);
            else if (program.cacheKey !== programCacheKey) releaseMaterialProgramReference(material);
            else if (materialProperties.lightsStateVersion !== lightsStateVersion) programChange = !1;
            else if (void 0 !== parameters.shaderID) {
                var environment = material.isMeshStandardMaterial ? scene.environment : null;
                materialProperties.envMap = cubemaps.get(material.envMap || environment);
                return;
            } else programChange = !1;
            programChange && (parameters.uniforms = programCache.getUniforms(material), material.onBeforeCompile(parameters, _this), program = programCache.acquireProgram(parameters, programCacheKey), materialProperties.program = program, materialProperties.uniforms = parameters.uniforms, materialProperties.outputEncoding = parameters.outputEncoding);
            var uniforms = materialProperties.uniforms;
            (material.isShaderMaterial || material.isRawShaderMaterial) && !0 !== material.clipping || (materialProperties.numClippingPlanes = clipping.numPlanes, materialProperties.numIntersection = clipping.numIntersection, uniforms.clippingPlanes = clipping.uniform), materialProperties.environment = material.isMeshStandardMaterial ? scene.environment : null, materialProperties.fog = scene.fog, materialProperties.envMap = cubemaps.get(material.envMap || materialProperties.environment), materialProperties.needsLights = material.isMeshLambertMaterial || material.isMeshToonMaterial || material.isMeshPhongMaterial || material.isMeshStandardMaterial || material.isShadowMaterial || material.isShaderMaterial && !0 === material.lights, materialProperties.lightsStateVersion = lightsStateVersion, materialProperties.needsLights && (uniforms.ambientLightColor.value = lights.state.ambient, uniforms.lightProbe.value = lights.state.probe, uniforms.directionalLights.value = lights.state.directional, uniforms.directionalLightShadows.value = lights.state.directionalShadow, uniforms.spotLights.value = lights.state.spot, uniforms.spotLightShadows.value = lights.state.spotShadow, uniforms.rectAreaLights.value = lights.state.rectArea, uniforms.ltc_1.value = lights.state.rectAreaLTC1, uniforms.ltc_2.value = lights.state.rectAreaLTC2, uniforms.pointLights.value = lights.state.point, uniforms.pointLightShadows.value = lights.state.pointShadow, uniforms.hemisphereLights.value = lights.state.hemi, uniforms.directionalShadowMap.value = lights.state.directionalShadowMap, uniforms.directionalShadowMatrix.value = lights.state.directionalShadowMatrix, uniforms.spotShadowMap.value = lights.state.spotShadowMap, uniforms.spotShadowMatrix.value = lights.state.spotShadowMatrix, uniforms.pointShadowMap.value = lights.state.pointShadowMap, uniforms.pointShadowMatrix.value = lights.state.pointShadowMatrix);
            var progUniforms = materialProperties.program.getUniforms(), uniformsList = WebGLUniforms.seqWithValue(progUniforms.seq, uniforms);
            materialProperties.uniformsList = uniformsList;
        }
        function setProgram(camera, scene, material, object) {
            !0 !== scene.isScene && (scene = _emptyScene), textures.resetTextureUnits();
            var value, fog = scene.fog, environment = material.isMeshStandardMaterial ? scene.environment : null, encoding = null === _currentRenderTarget ? _this.outputEncoding : _currentRenderTarget.texture.encoding, envMap = cubemaps.get(material.envMap || environment), materialProperties = properties.get(material), lights = currentRenderState.state.lights;
            if (!0 === _clippingEnabled && (!0 === _localClippingEnabled || camera !== _currentCamera)) {
                var useCache = camera === _currentCamera && material.id === _currentMaterialId;
                clipping.setState(material, camera, useCache);
            }
            material.version === materialProperties.__version ? material.fog && materialProperties.fog !== fog ? initMaterial(material, scene, object) : materialProperties.environment !== environment ? initMaterial(material, scene, object) : materialProperties.needsLights && materialProperties.lightsStateVersion !== lights.state.version ? initMaterial(material, scene, object) : void 0 !== materialProperties.numClippingPlanes && (materialProperties.numClippingPlanes !== clipping.numPlanes || materialProperties.numIntersection !== clipping.numIntersection) ? initMaterial(material, scene, object) : materialProperties.outputEncoding !== encoding ? initMaterial(material, scene, object) : materialProperties.envMap !== envMap && initMaterial(material, scene, object) : (initMaterial(material, scene, object), materialProperties.__version = material.version);
            var refreshProgram = !1, refreshMaterial = !1, refreshLights = !1, program = materialProperties.program, p_uniforms = program.getUniforms(), m_uniforms = materialProperties.uniforms;
            if (state.useProgram(program.program) && (refreshProgram = !0, refreshMaterial = !0, refreshLights = !0), material.id !== _currentMaterialId && (_currentMaterialId = material.id, refreshMaterial = !0), refreshProgram || _currentCamera !== camera) {
                if (p_uniforms.setValue(_gl, 'projectionMatrix', camera.projectionMatrix), capabilities.logarithmicDepthBuffer && p_uniforms.setValue(_gl, 'logDepthBufFC', 2.0 / (Math.log(camera.far + 1.0) / Math.LN2)), _currentCamera !== camera && (_currentCamera = camera, refreshMaterial = !0, refreshLights = !0), material.isShaderMaterial || material.isMeshPhongMaterial || material.isMeshToonMaterial || material.isMeshStandardMaterial || material.envMap) {
                    var uCamPos = p_uniforms.map.cameraPosition;
                    void 0 !== uCamPos && uCamPos.setValue(_gl, _vector3.setFromMatrixPosition(camera.matrixWorld));
                }
                (material.isMeshPhongMaterial || material.isMeshToonMaterial || material.isMeshLambertMaterial || material.isMeshBasicMaterial || material.isMeshStandardMaterial || material.isShaderMaterial) && p_uniforms.setValue(_gl, 'isOrthographic', !0 === camera.isOrthographicCamera), (material.isMeshPhongMaterial || material.isMeshToonMaterial || material.isMeshLambertMaterial || material.isMeshBasicMaterial || material.isMeshStandardMaterial || material.isShaderMaterial || material.isShadowMaterial || material.skinning) && p_uniforms.setValue(_gl, 'viewMatrix', camera.matrixWorldInverse);
            }
            if (material.skinning) {
                p_uniforms.setOptional(_gl, object, 'bindMatrix'), p_uniforms.setOptional(_gl, object, 'bindMatrixInverse');
                var skeleton = object.skeleton;
                if (skeleton) {
                    var bones = skeleton.bones;
                    if (capabilities.floatVertexTextures) {
                        if (null === skeleton.boneTexture) {
                            var size = Math.sqrt(4 * bones.length);
                            size = Math.max(size = MathUtils.ceilPowerOfTwo(size), 4);
                            var boneMatrices = new Float32Array(size * size * 4);
                            boneMatrices.set(skeleton.boneMatrices);
                            var boneTexture = new DataTexture(boneMatrices, size, size, 1023, 1015);
                            skeleton.boneMatrices = boneMatrices, skeleton.boneTexture = boneTexture, skeleton.boneTextureSize = size;
                        }
                        p_uniforms.setValue(_gl, 'boneTexture', skeleton.boneTexture, textures), p_uniforms.setValue(_gl, 'boneTextureSize', skeleton.boneTextureSize);
                    } else p_uniforms.setOptional(_gl, skeleton, 'boneMatrices');
                }
            }
            return (refreshMaterial || materialProperties.receiveShadow !== object.receiveShadow) && (materialProperties.receiveShadow = object.receiveShadow, p_uniforms.setValue(_gl, 'receiveShadow', object.receiveShadow)), refreshMaterial && (p_uniforms.setValue(_gl, 'toneMappingExposure', _this.toneMappingExposure), materialProperties.needsLights && (value = refreshLights, m_uniforms.ambientLightColor.needsUpdate = value, m_uniforms.lightProbe.needsUpdate = value, m_uniforms.directionalLights.needsUpdate = value, m_uniforms.directionalLightShadows.needsUpdate = value, m_uniforms.pointLights.needsUpdate = value, m_uniforms.pointLightShadows.needsUpdate = value, m_uniforms.spotLights.needsUpdate = value, m_uniforms.spotLightShadows.needsUpdate = value, m_uniforms.rectAreaLights.needsUpdate = value, m_uniforms.hemisphereLights.needsUpdate = value), fog && material.fog && materials.refreshFogUniforms(m_uniforms, fog), materials.refreshMaterialUniforms(m_uniforms, material, _pixelRatio, _height), WebGLUniforms.upload(_gl, materialProperties.uniformsList, m_uniforms, textures)), material.isShaderMaterial && !0 === material.uniformsNeedUpdate && (WebGLUniforms.upload(_gl, materialProperties.uniformsList, m_uniforms, textures), material.uniformsNeedUpdate = !1), material.isSpriteMaterial && p_uniforms.setValue(_gl, 'center', object.center), p_uniforms.setValue(_gl, 'modelViewMatrix', object.modelViewMatrix), p_uniforms.setValue(_gl, 'normalMatrix', object.normalMatrix), p_uniforms.setValue(_gl, 'modelMatrix', object.matrixWorld), program;
        }
        animation.setAnimationLoop(function(time) {
            !xr.isPresenting && onAnimationFrameCallback && onAnimationFrameCallback(time);
        }), 'undefined' != typeof window && animation.setContext(window), this.setAnimationLoop = function(callback) {
            onAnimationFrameCallback = callback, xr.setAnimationLoop(callback), null === callback ? animation.stop() : animation.start();
        }, this.render = function(scene, camera) {
            if (void 0 !== arguments[2] && (console.warn('THREE.WebGLRenderer.render(): the renderTarget argument has been removed. Use .setRenderTarget() instead.'), renderTarget = arguments[2]), void 0 !== arguments[3] && (console.warn('THREE.WebGLRenderer.render(): the forceClear argument has been removed. Use .clear() instead.'), forceClear = arguments[3]), void 0 !== camera && !0 !== camera.isCamera) {
                console.error('THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.');
                return;
            }
            if (!0 !== _isContextLost) {
                bindingStates.resetDefaultState(), _currentMaterialId = -1, _currentCamera = null, !0 === scene.autoUpdate && scene.updateMatrixWorld(), null === camera.parent && camera.updateMatrixWorld(), !0 === xr.enabled && !0 === xr.isPresenting && (camera = xr.getCamera(camera)), !0 === scene.isScene && scene.onBeforeRender(_this, scene, camera, renderTarget || _currentRenderTarget), (currentRenderState = renderStates.get(scene, renderStateStack.length)).init(), renderStateStack.push(currentRenderState), _projScreenMatrix.multiplyMatrices(camera.projectionMatrix, camera.matrixWorldInverse), _frustum.setFromProjectionMatrix(_projScreenMatrix), _localClippingEnabled = this.localClippingEnabled, _clippingEnabled = clipping.init(this.clippingPlanes, _localClippingEnabled, camera), (currentRenderList = renderLists.get(scene, camera)).init(), function projectObject(object, camera, groupOrder, sortObjects) {
                    if (!1 !== object.visible) {
                        if (object.layers.test(camera.layers)) {
                            if (object.isGroup) groupOrder = object.renderOrder;
                            else if (object.isLOD) !0 === object.autoUpdate && object.update(camera);
                            else if (object.isLight) currentRenderState.pushLight(object), object.castShadow && currentRenderState.pushShadow(object);
                            else if (object.isSprite) {
                                if (!object.frustumCulled || _frustum.intersectsSprite(object)) {
                                    sortObjects && _vector3.setFromMatrixPosition(object.matrixWorld).applyMatrix4(_projScreenMatrix);
                                    var geometry = objects.update(object), material = object.material;
                                    material.visible && currentRenderList.push(object, geometry, material, groupOrder, _vector3.z, null);
                                }
                            } else if (object.isImmediateRenderObject) sortObjects && _vector3.setFromMatrixPosition(object.matrixWorld).applyMatrix4(_projScreenMatrix), currentRenderList.push(object, null, object.material, groupOrder, _vector3.z, null);
                            else if ((object.isMesh || object.isLine || object.isPoints) && (object.isSkinnedMesh && object.skeleton.frame !== info.render.frame && (object.skeleton.update(), object.skeleton.frame = info.render.frame), !object.frustumCulled || _frustum.intersectsObject(object))) {
                                sortObjects && _vector3.setFromMatrixPosition(object.matrixWorld).applyMatrix4(_projScreenMatrix);
                                var _geometry = objects.update(object), _material = object.material;
                                if (Array.isArray(_material)) for(var groups = _geometry.groups, i = 0, l = groups.length; i < l; i++){
                                    var group = groups[i], groupMaterial = _material[group.materialIndex];
                                    groupMaterial && groupMaterial.visible && currentRenderList.push(object, _geometry, groupMaterial, groupOrder, _vector3.z, group);
                                }
                                else _material.visible && currentRenderList.push(object, _geometry, _material, groupOrder, _vector3.z, null);
                            }
                        }
                        for(var children = object.children, _i = 0, _l = children.length; _i < _l; _i++)projectObject(children[_i], camera, groupOrder, sortObjects);
                    }
                }(scene, camera, 0, _this.sortObjects), currentRenderList.finish(), !0 === _this.sortObjects && currentRenderList.sort(_opaqueSort, _transparentSort), !0 === _clippingEnabled && clipping.beginShadows();
                var renderTarget, forceClear, shadowsArray = currentRenderState.state.shadowsArray;
                shadowMap.render(shadowsArray, scene, camera), currentRenderState.setupLights(), currentRenderState.setupLightsView(camera), !0 === _clippingEnabled && clipping.endShadows(), !0 === this.info.autoReset && this.info.reset(), void 0 !== renderTarget && this.setRenderTarget(renderTarget), background.render(currentRenderList, scene, camera, forceClear);
                var opaqueObjects = currentRenderList.opaque, transparentObjects = currentRenderList.transparent;
                opaqueObjects.length > 0 && renderObjects(opaqueObjects, scene, camera), transparentObjects.length > 0 && renderObjects(transparentObjects, scene, camera), !0 === scene.isScene && scene.onAfterRender(_this, scene, camera), null !== _currentRenderTarget && (textures.updateRenderTargetMipmap(_currentRenderTarget), textures.updateMultisampleRenderTarget(_currentRenderTarget)), state.buffers.depth.setTest(!0), state.buffers.depth.setMask(!0), state.buffers.color.setMask(!0), state.setPolygonOffset(!1), renderStateStack.pop(), currentRenderState = renderStateStack.length > 0 ? renderStateStack[renderStateStack.length - 1] : null, currentRenderList = null;
            }
        }, this.setFramebuffer = function(value) {
            _framebuffer !== value && null === _currentRenderTarget && _gl.bindFramebuffer(36160, value), _framebuffer = value;
        }, this.getActiveCubeFace = function() {
            return _currentActiveCubeFace;
        }, this.getActiveMipmapLevel = function() {
            return _currentActiveMipmapLevel;
        }, this.getRenderList = function() {
            return currentRenderList;
        }, this.setRenderList = function(renderList) {
            currentRenderList = renderList;
        }, this.getRenderTarget = function() {
            return _currentRenderTarget;
        }, this.setRenderTarget = function(renderTarget, activeCubeFace, activeMipmapLevel) {
            void 0 === activeCubeFace && (activeCubeFace = 0), void 0 === activeMipmapLevel && (activeMipmapLevel = 0), _currentRenderTarget = renderTarget, _currentActiveCubeFace = activeCubeFace, _currentActiveMipmapLevel = activeMipmapLevel, renderTarget && void 0 === properties.get(renderTarget).__webglFramebuffer && textures.setupRenderTarget(renderTarget);
            var framebuffer = _framebuffer, isCube = !1;
            if (renderTarget) {
                var __webglFramebuffer = properties.get(renderTarget).__webglFramebuffer;
                renderTarget.isWebGLCubeRenderTarget ? (framebuffer = __webglFramebuffer[activeCubeFace], isCube = !0) : framebuffer = renderTarget.isWebGLMultisampleRenderTarget ? properties.get(renderTarget).__webglMultisampledFramebuffer : __webglFramebuffer, _currentViewport.copy(renderTarget.viewport), _currentScissor.copy(renderTarget.scissor), _currentScissorTest = renderTarget.scissorTest;
            } else _currentViewport.copy(_viewport).multiplyScalar(_pixelRatio).floor(), _currentScissor.copy(_scissor).multiplyScalar(_pixelRatio).floor(), _currentScissorTest = _scissorTest;
            if (_currentFramebuffer !== framebuffer && (_gl.bindFramebuffer(36160, framebuffer), _currentFramebuffer = framebuffer), state.viewport(_currentViewport), state.scissor(_currentScissor), state.setScissorTest(_currentScissorTest), isCube) {
                var textureProperties = properties.get(renderTarget.texture);
                _gl.framebufferTexture2D(36160, 36064, 34069 + activeCubeFace, textureProperties.__webglTexture, activeMipmapLevel);
            }
        }, this.readRenderTargetPixels = function(renderTarget, x, y, width, height, buffer, activeCubeFaceIndex) {
            if (!(renderTarget && renderTarget.isWebGLRenderTarget)) {
                console.error('THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.');
                return;
            }
            var framebuffer = properties.get(renderTarget).__webglFramebuffer;
            if (renderTarget.isWebGLCubeRenderTarget && void 0 !== activeCubeFaceIndex && (framebuffer = framebuffer[activeCubeFaceIndex]), framebuffer) {
                var restore = !1;
                framebuffer !== _currentFramebuffer && (_gl.bindFramebuffer(36160, framebuffer), restore = !0);
                try {
                    var texture = renderTarget.texture, textureFormat = texture.format, textureType = texture.type;
                    if (1023 !== textureFormat && utils.convert(textureFormat) !== _gl.getParameter(35739)) {
                        console.error('THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.');
                        return;
                    }
                    if (1009 !== textureType && utils.convert(textureType) !== _gl.getParameter(35738) && !(1015 === textureType && (capabilities.isWebGL2 || extensions.get('OES_texture_float') || extensions.get('WEBGL_color_buffer_float'))) && !(1016 === textureType && (capabilities.isWebGL2 ? extensions.get('EXT_color_buffer_float') : extensions.get('EXT_color_buffer_half_float')))) {
                        console.error('THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.');
                        return;
                    }
                    36053 === _gl.checkFramebufferStatus(36160) ? x >= 0 && x <= renderTarget.width - width && y >= 0 && y <= renderTarget.height - height && _gl.readPixels(x, y, width, height, utils.convert(textureFormat), utils.convert(textureType), buffer) : console.error('THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.');
                } finally{
                    restore && _gl.bindFramebuffer(36160, _currentFramebuffer);
                }
            }
        }, this.copyFramebufferToTexture = function(position, texture, level) {
            void 0 === level && (level = 0);
            var levelScale = Math.pow(2, -level), width = Math.floor(texture.image.width * levelScale), height = Math.floor(texture.image.height * levelScale), glFormat = utils.convert(texture.format);
            textures.setTexture2D(texture, 0), _gl.copyTexImage2D(3553, level, glFormat, position.x, position.y, width, height, 0), state.unbindTexture();
        }, this.copyTextureToTexture = function(position, srcTexture, dstTexture, level) {
            void 0 === level && (level = 0);
            var width = srcTexture.image.width, height = srcTexture.image.height, glFormat = utils.convert(dstTexture.format), glType = utils.convert(dstTexture.type);
            textures.setTexture2D(dstTexture, 0), _gl.pixelStorei(37440, dstTexture.flipY), _gl.pixelStorei(37441, dstTexture.premultiplyAlpha), _gl.pixelStorei(3317, dstTexture.unpackAlignment), srcTexture.isDataTexture ? _gl.texSubImage2D(3553, level, position.x, position.y, width, height, glFormat, glType, srcTexture.image.data) : srcTexture.isCompressedTexture ? _gl.compressedTexSubImage2D(3553, level, position.x, position.y, srcTexture.mipmaps[0].width, srcTexture.mipmaps[0].height, glFormat, srcTexture.mipmaps[0].data) : _gl.texSubImage2D(3553, level, position.x, position.y, glFormat, glType, srcTexture.image), 0 === level && dstTexture.generateMipmaps && _gl.generateMipmap(3553), state.unbindTexture();
        }, this.initTexture = function(texture) {
            textures.setTexture2D(texture, 0), state.unbindTexture();
        }, this.resetState = function() {
            state.reset(), bindingStates.reset();
        }, 'undefined' != typeof __THREE_DEVTOOLS__ && __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent('observe', {
            detail: this
        }));
    }
    function WebGL1Renderer(parameters) {
        WebGLRenderer.call(this, parameters);
    }
    MeshDepthMaterial.prototype = Object.create(Material.prototype), MeshDepthMaterial.prototype.constructor = MeshDepthMaterial, MeshDepthMaterial.prototype.isMeshDepthMaterial = !0, MeshDepthMaterial.prototype.copy = function(source) {
        return Material.prototype.copy.call(this, source), this.depthPacking = source.depthPacking, this.skinning = source.skinning, this.morphTargets = source.morphTargets, this.map = source.map, this.alphaMap = source.alphaMap, this.displacementMap = source.displacementMap, this.displacementScale = source.displacementScale, this.displacementBias = source.displacementBias, this.wireframe = source.wireframe, this.wireframeLinewidth = source.wireframeLinewidth, this;
    }, MeshDistanceMaterial.prototype = Object.create(Material.prototype), MeshDistanceMaterial.prototype.constructor = MeshDistanceMaterial, MeshDistanceMaterial.prototype.isMeshDistanceMaterial = !0, MeshDistanceMaterial.prototype.copy = function(source) {
        return Material.prototype.copy.call(this, source), this.referencePosition.copy(source.referencePosition), this.nearDistance = source.nearDistance, this.farDistance = source.farDistance, this.skinning = source.skinning, this.morphTargets = source.morphTargets, this.map = source.map, this.alphaMap = source.alphaMap, this.displacementMap = source.displacementMap, this.displacementScale = source.displacementScale, this.displacementBias = source.displacementBias, this;
    }, ArrayCamera.prototype = Object.assign(Object.create(PerspectiveCamera.prototype), {
        constructor: ArrayCamera,
        isArrayCamera: !0
    }), Group.prototype = Object.assign(Object.create(Object3D.prototype), {
        constructor: Group,
        isGroup: !0
    }), Object.assign(WebXRController.prototype, {
        constructor: WebXRController,
        getHandSpace: function() {
            if (null === this._hand && (this._hand = new Group(), this._hand.matrixAutoUpdate = !1, this._hand.visible = !1, this._hand.joints = [], this._hand.inputState = {
                pinching: !1
            }, window.XRHand)) for(var i = 0; i <= window.XRHand.LITTLE_PHALANX_TIP; i++){
                var joint = new Group();
                joint.matrixAutoUpdate = !1, joint.visible = !1, this._hand.joints.push(joint), this._hand.add(joint);
            }
            return this._hand;
        },
        getTargetRaySpace: function() {
            return null === this._targetRay && (this._targetRay = new Group(), this._targetRay.matrixAutoUpdate = !1, this._targetRay.visible = !1), this._targetRay;
        },
        getGripSpace: function() {
            return null === this._grip && (this._grip = new Group(), this._grip.matrixAutoUpdate = !1, this._grip.visible = !1), this._grip;
        },
        dispatchEvent: function(event) {
            return null !== this._targetRay && this._targetRay.dispatchEvent(event), null !== this._grip && this._grip.dispatchEvent(event), null !== this._hand && this._hand.dispatchEvent(event), this;
        },
        disconnect: function(inputSource) {
            return this.dispatchEvent({
                type: 'disconnected',
                data: inputSource
            }), null !== this._targetRay && (this._targetRay.visible = !1), null !== this._grip && (this._grip.visible = !1), null !== this._hand && (this._hand.visible = !1), this;
        },
        update: function(inputSource, frame, referenceSpace) {
            var inputPose = null, gripPose = null, handPose = null, targetRay = this._targetRay, grip = this._grip, hand = this._hand;
            if (inputSource && 'visible-blurred' !== frame.session.visibilityState) {
                if (hand && inputSource.hand) {
                    handPose = !0;
                    for(var i = 0; i <= window.XRHand.LITTLE_PHALANX_TIP; i++)if (inputSource.hand[i]) {
                        var jointPose = frame.getJointPose(inputSource.hand[i], referenceSpace), joint = hand.joints[i];
                        null !== jointPose && (joint.matrix.fromArray(jointPose.transform.matrix), joint.matrix.decompose(joint.position, joint.rotation, joint.scale), joint.jointRadius = jointPose.radius), joint.visible = null !== jointPose;
                        var indexTip = hand.joints[window.XRHand.INDEX_PHALANX_TIP], thumbTip = hand.joints[window.XRHand.THUMB_PHALANX_TIP], distance = indexTip.position.distanceTo(thumbTip.position);
                        hand.inputState.pinching && distance > 0.025 ? (hand.inputState.pinching = !1, this.dispatchEvent({
                            type: 'pinchend',
                            handedness: inputSource.handedness,
                            target: this
                        })) : !hand.inputState.pinching && distance <= 0.015 && (hand.inputState.pinching = !0, this.dispatchEvent({
                            type: 'pinchstart',
                            handedness: inputSource.handedness,
                            target: this
                        }));
                    }
                } else null !== targetRay && null !== (inputPose = frame.getPose(inputSource.targetRaySpace, referenceSpace)) && (targetRay.matrix.fromArray(inputPose.transform.matrix), targetRay.matrix.decompose(targetRay.position, targetRay.rotation, targetRay.scale)), null !== grip && inputSource.gripSpace && null !== (gripPose = frame.getPose(inputSource.gripSpace, referenceSpace)) && (grip.matrix.fromArray(gripPose.transform.matrix), grip.matrix.decompose(grip.position, grip.rotation, grip.scale));
            }
            return null !== targetRay && (targetRay.visible = null !== inputPose), null !== grip && (grip.visible = null !== gripPose), null !== hand && (hand.visible = null !== handPose), this;
        }
    }), Object.assign(WebXRManager.prototype, EventDispatcher.prototype), WebGL1Renderer.prototype = Object.assign(Object.create(WebGLRenderer.prototype), {
        constructor: WebGL1Renderer,
        isWebGL1Renderer: !0
    });
    var FogExp2 = function() {
        function FogExp2(color, density) {
            Object.defineProperty(this, 'isFogExp2', {
                value: !0
            }), this.name = '', this.color = new Color(color), this.density = void 0 !== density ? density : 0.00025;
        }
        var _proto = FogExp2.prototype;
        return _proto.clone = function() {
            return new FogExp2(this.color, this.density);
        }, _proto.toJSON = function() {
            return {
                type: 'FogExp2',
                color: this.color.getHex(),
                density: this.density
            };
        }, FogExp2;
    }(), Fog = function() {
        function Fog(color, near, far) {
            Object.defineProperty(this, 'isFog', {
                value: !0
            }), this.name = '', this.color = new Color(color), this.near = void 0 !== near ? near : 1, this.far = void 0 !== far ? far : 1000;
        }
        var _proto = Fog.prototype;
        return _proto.clone = function() {
            return new Fog(this.color, this.near, this.far);
        }, _proto.toJSON = function() {
            return {
                type: 'Fog',
                color: this.color.getHex(),
                near: this.near,
                far: this.far
            };
        }, Fog;
    }(), Scene = function(_Object3D) {
        function Scene() {
            var _this;
            return Object.defineProperty(_assertThisInitialized(_this = _Object3D.call(this) || this), 'isScene', {
                value: !0
            }), _this.type = 'Scene', _this.background = null, _this.environment = null, _this.fog = null, _this.overrideMaterial = null, _this.autoUpdate = !0, 'undefined' != typeof __THREE_DEVTOOLS__ && __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent('observe', {
                detail: _assertThisInitialized(_this)
            })), _this;
        }
        _inheritsLoose(Scene, _Object3D);
        var _proto = Scene.prototype;
        return _proto.copy = function(source, recursive) {
            return _Object3D.prototype.copy.call(this, source, recursive), null !== source.background && (this.background = source.background.clone()), null !== source.environment && (this.environment = source.environment.clone()), null !== source.fog && (this.fog = source.fog.clone()), null !== source.overrideMaterial && (this.overrideMaterial = source.overrideMaterial.clone()), this.autoUpdate = source.autoUpdate, this.matrixAutoUpdate = source.matrixAutoUpdate, this;
        }, _proto.toJSON = function(meta) {
            var data = _Object3D.prototype.toJSON.call(this, meta);
            return null !== this.background && (data.object.background = this.background.toJSON(meta)), null !== this.environment && (data.object.environment = this.environment.toJSON(meta)), null !== this.fog && (data.object.fog = this.fog.toJSON()), data;
        }, Scene;
    }(Object3D);
    function InterleavedBuffer(array, stride) {
        this.array = array, this.stride = stride, this.count = void 0 !== array ? array.length / stride : 0, this.usage = 35044, this.updateRange = {
            offset: 0,
            count: -1
        }, this.version = 0, this.uuid = MathUtils.generateUUID();
    }
    Object.defineProperty(InterleavedBuffer.prototype, 'needsUpdate', {
        set: function(value) {
            !0 === value && this.version++;
        }
    }), Object.assign(InterleavedBuffer.prototype, {
        isInterleavedBuffer: !0,
        onUploadCallback: function() {},
        setUsage: function(value) {
            return this.usage = value, this;
        },
        copy: function(source) {
            return this.array = new source.array.constructor(source.array), this.count = source.count, this.stride = source.stride, this.usage = source.usage, this;
        },
        copyAt: function(index1, attribute, index2) {
            index1 *= this.stride, index2 *= attribute.stride;
            for(var i = 0, l = this.stride; i < l; i++)this.array[index1 + i] = attribute.array[index2 + i];
            return this;
        },
        set: function(value, offset) {
            return void 0 === offset && (offset = 0), this.array.set(value, offset), this;
        },
        clone: function(data) {
            void 0 === data.arrayBuffers && (data.arrayBuffers = {}), void 0 === this.array.buffer._uuid && (this.array.buffer._uuid = MathUtils.generateUUID()), void 0 === data.arrayBuffers[this.array.buffer._uuid] && (data.arrayBuffers[this.array.buffer._uuid] = this.array.slice(0).buffer);
            var array = new this.array.constructor(data.arrayBuffers[this.array.buffer._uuid]), ib = new InterleavedBuffer(array, this.stride);
            return ib.setUsage(this.usage), ib;
        },
        onUpload: function(callback) {
            return this.onUploadCallback = callback, this;
        },
        toJSON: function(data) {
            return void 0 === data.arrayBuffers && (data.arrayBuffers = {}), void 0 === this.array.buffer._uuid && (this.array.buffer._uuid = MathUtils.generateUUID()), void 0 === data.arrayBuffers[this.array.buffer._uuid] && (data.arrayBuffers[this.array.buffer._uuid] = Array.prototype.slice.call(new Uint32Array(this.array.buffer))), {
                uuid: this.uuid,
                buffer: this.array.buffer._uuid,
                type: this.array.constructor.name,
                stride: this.stride
            };
        }
    });
    var _vector$6 = new Vector3();
    function InterleavedBufferAttribute(interleavedBuffer, itemSize, offset, normalized) {
        this.name = '', this.data = interleavedBuffer, this.itemSize = itemSize, this.offset = offset, this.normalized = !0 === normalized;
    }
    function SpriteMaterial(parameters) {
        Material.call(this), this.type = 'SpriteMaterial', this.color = new Color(0xffffff), this.map = null, this.alphaMap = null, this.rotation = 0, this.sizeAttenuation = !0, this.transparent = !0, this.setValues(parameters);
    }
    Object.defineProperties(InterleavedBufferAttribute.prototype, {
        count: {
            get: function() {
                return this.data.count;
            }
        },
        array: {
            get: function() {
                return this.data.array;
            }
        },
        needsUpdate: {
            set: function(value) {
                this.data.needsUpdate = value;
            }
        }
    }), Object.assign(InterleavedBufferAttribute.prototype, {
        isInterleavedBufferAttribute: !0,
        applyMatrix4: function(m) {
            for(var i = 0, l = this.data.count; i < l; i++)_vector$6.x = this.getX(i), _vector$6.y = this.getY(i), _vector$6.z = this.getZ(i), _vector$6.applyMatrix4(m), this.setXYZ(i, _vector$6.x, _vector$6.y, _vector$6.z);
            return this;
        },
        setX: function(index, x) {
            return this.data.array[index * this.data.stride + this.offset] = x, this;
        },
        setY: function(index, y) {
            return this.data.array[index * this.data.stride + this.offset + 1] = y, this;
        },
        setZ: function(index, z) {
            return this.data.array[index * this.data.stride + this.offset + 2] = z, this;
        },
        setW: function(index, w) {
            return this.data.array[index * this.data.stride + this.offset + 3] = w, this;
        },
        getX: function(index) {
            return this.data.array[index * this.data.stride + this.offset];
        },
        getY: function(index) {
            return this.data.array[index * this.data.stride + this.offset + 1];
        },
        getZ: function(index) {
            return this.data.array[index * this.data.stride + this.offset + 2];
        },
        getW: function(index) {
            return this.data.array[index * this.data.stride + this.offset + 3];
        },
        setXY: function(index, x, y) {
            return index = index * this.data.stride + this.offset, this.data.array[index + 0] = x, this.data.array[index + 1] = y, this;
        },
        setXYZ: function(index, x, y, z) {
            return index = index * this.data.stride + this.offset, this.data.array[index + 0] = x, this.data.array[index + 1] = y, this.data.array[index + 2] = z, this;
        },
        setXYZW: function(index, x, y, z, w) {
            return index = index * this.data.stride + this.offset, this.data.array[index + 0] = x, this.data.array[index + 1] = y, this.data.array[index + 2] = z, this.data.array[index + 3] = w, this;
        },
        clone: function(data) {
            if (void 0 !== data) return void 0 === data.interleavedBuffers && (data.interleavedBuffers = {}), void 0 === data.interleavedBuffers[this.data.uuid] && (data.interleavedBuffers[this.data.uuid] = this.data.clone(data)), new InterleavedBufferAttribute(data.interleavedBuffers[this.data.uuid], this.itemSize, this.offset, this.normalized);
            console.log('THREE.InterleavedBufferAttribute.clone(): Cloning an interlaved buffer attribute will deinterleave buffer data.');
            for(var array = [], i = 0; i < this.count; i++)for(var index = i * this.data.stride + this.offset, j = 0; j < this.itemSize; j++)array.push(this.data.array[index + j]);
            return new BufferAttribute(new this.array.constructor(array), this.itemSize, this.normalized);
        },
        toJSON: function(data) {
            if (void 0 !== data) return void 0 === data.interleavedBuffers && (data.interleavedBuffers = {}), void 0 === data.interleavedBuffers[this.data.uuid] && (data.interleavedBuffers[this.data.uuid] = this.data.toJSON(data)), {
                isInterleavedBufferAttribute: !0,
                itemSize: this.itemSize,
                data: this.data.uuid,
                offset: this.offset,
                normalized: this.normalized
            };
            console.log('THREE.InterleavedBufferAttribute.toJSON(): Serializing an interlaved buffer attribute will deinterleave buffer data.');
            for(var array = [], i = 0; i < this.count; i++)for(var index = i * this.data.stride + this.offset, j = 0; j < this.itemSize; j++)array.push(this.data.array[index + j]);
            return {
                itemSize: this.itemSize,
                type: this.array.constructor.name,
                array: array,
                normalized: this.normalized
            };
        }
    }), SpriteMaterial.prototype = Object.create(Material.prototype), SpriteMaterial.prototype.constructor = SpriteMaterial, SpriteMaterial.prototype.isSpriteMaterial = !0, SpriteMaterial.prototype.copy = function(source) {
        return Material.prototype.copy.call(this, source), this.color.copy(source.color), this.map = source.map, this.alphaMap = source.alphaMap, this.rotation = source.rotation, this.sizeAttenuation = source.sizeAttenuation, this;
    };
    var _intersectPoint = new Vector3(), _worldScale = new Vector3(), _mvPosition = new Vector3(), _alignedPosition = new Vector2(), _rotatedPosition = new Vector2(), _viewWorldMatrix = new Matrix4(), _vA$1 = new Vector3(), _vB$1 = new Vector3(), _vC$1 = new Vector3(), _uvA$1 = new Vector2(), _uvB$1 = new Vector2(), _uvC$1 = new Vector2();
    function Sprite(material) {
        if (Object3D.call(this), this.type = 'Sprite', void 0 === _geometry) {
            _geometry = new BufferGeometry();
            var float32Array = new Float32Array([
                -0.5,
                -0.5,
                0,
                0,
                0,
                0.5,
                -0.5,
                0,
                1,
                0,
                0.5,
                0.5,
                0,
                1,
                1,
                -0.5,
                0.5,
                0,
                0,
                1
            ]), interleavedBuffer = new InterleavedBuffer(float32Array, 5);
            _geometry.setIndex([
                0,
                1,
                2,
                0,
                2,
                3
            ]), _geometry.setAttribute('position', new InterleavedBufferAttribute(interleavedBuffer, 3, 0, !1)), _geometry.setAttribute('uv', new InterleavedBufferAttribute(interleavedBuffer, 2, 3, !1));
        }
        this.geometry = _geometry, this.material = void 0 !== material ? material : new SpriteMaterial(), this.center = new Vector2(0.5, 0.5);
    }
    function transformVertex(vertexPosition, mvPosition, center, scale, sin, cos) {
        _alignedPosition.subVectors(vertexPosition, center).addScalar(0.5).multiply(scale), void 0 !== sin ? (_rotatedPosition.x = cos * _alignedPosition.x - sin * _alignedPosition.y, _rotatedPosition.y = sin * _alignedPosition.x + cos * _alignedPosition.y) : _rotatedPosition.copy(_alignedPosition), vertexPosition.copy(mvPosition), vertexPosition.x += _rotatedPosition.x, vertexPosition.y += _rotatedPosition.y, vertexPosition.applyMatrix4(_viewWorldMatrix);
    }
    Sprite.prototype = Object.assign(Object.create(Object3D.prototype), {
        constructor: Sprite,
        isSprite: !0,
        raycast: function(raycaster, intersects) {
            null === raycaster.camera && console.error('THREE.Sprite: "Raycaster.camera" needs to be set in order to raycast against sprites.'), _worldScale.setFromMatrixScale(this.matrixWorld), _viewWorldMatrix.copy(raycaster.camera.matrixWorld), this.modelViewMatrix.multiplyMatrices(raycaster.camera.matrixWorldInverse, this.matrixWorld), _mvPosition.setFromMatrixPosition(this.modelViewMatrix), raycaster.camera.isPerspectiveCamera && !1 === this.material.sizeAttenuation && _worldScale.multiplyScalar(-_mvPosition.z);
            var sin, cos, rotation = this.material.rotation;
            0 !== rotation && (cos = Math.cos(rotation), sin = Math.sin(rotation));
            var center = this.center;
            transformVertex(_vA$1.set(-0.5, -0.5, 0), _mvPosition, center, _worldScale, sin, cos), transformVertex(_vB$1.set(0.5, -0.5, 0), _mvPosition, center, _worldScale, sin, cos), transformVertex(_vC$1.set(0.5, 0.5, 0), _mvPosition, center, _worldScale, sin, cos), _uvA$1.set(0, 0), _uvB$1.set(1, 0), _uvC$1.set(1, 1);
            var intersect = raycaster.ray.intersectTriangle(_vA$1, _vB$1, _vC$1, !1, _intersectPoint);
            if (null !== intersect || (transformVertex(_vB$1.set(-0.5, 0.5, 0), _mvPosition, center, _worldScale, sin, cos), _uvB$1.set(0, 1), null !== (intersect = raycaster.ray.intersectTriangle(_vA$1, _vC$1, _vB$1, !1, _intersectPoint)))) {
                var distance = raycaster.ray.origin.distanceTo(_intersectPoint);
                distance < raycaster.near || distance > raycaster.far || intersects.push({
                    distance: distance,
                    point: _intersectPoint.clone(),
                    uv: Triangle.getUV(_intersectPoint, _vA$1, _vB$1, _vC$1, _uvA$1, _uvB$1, _uvC$1, new Vector2()),
                    face: null,
                    object: this
                });
            }
        },
        copy: function(source) {
            return Object3D.prototype.copy.call(this, source), void 0 !== source.center && this.center.copy(source.center), this.material = source.material, this;
        }
    });
    var _v1$4 = new Vector3(), _v2$2 = new Vector3();
    function LOD() {
        Object3D.call(this), this._currentLevel = 0, this.type = 'LOD', Object.defineProperties(this, {
            levels: {
                enumerable: !0,
                value: []
            }
        }), this.autoUpdate = !0;
    }
    LOD.prototype = Object.assign(Object.create(Object3D.prototype), {
        constructor: LOD,
        isLOD: !0,
        copy: function(source) {
            Object3D.prototype.copy.call(this, source, !1);
            for(var levels = source.levels, i = 0, l = levels.length; i < l; i++){
                var level = levels[i];
                this.addLevel(level.object.clone(), level.distance);
            }
            return this.autoUpdate = source.autoUpdate, this;
        },
        addLevel: function(object, distance) {
            void 0 === distance && (distance = 0), distance = Math.abs(distance);
            var l, levels = this.levels;
            for(l = 0; l < levels.length && !(distance < levels[l].distance); l++);
            return levels.splice(l, 0, {
                distance: distance,
                object: object
            }), this.add(object), this;
        },
        getCurrentLevel: function() {
            return this._currentLevel;
        },
        getObjectForDistance: function(distance) {
            var i, l, levels = this.levels;
            if (levels.length > 0) {
                for(i = 1, l = levels.length; i < l && !(distance < levels[i].distance); i++);
                return levels[i - 1].object;
            }
            return null;
        },
        raycast: function(raycaster, intersects) {
            if (this.levels.length > 0) {
                _v1$4.setFromMatrixPosition(this.matrixWorld);
                var distance = raycaster.ray.origin.distanceTo(_v1$4);
                this.getObjectForDistance(distance).raycast(raycaster, intersects);
            }
        },
        update: function(camera) {
            var levels = this.levels;
            if (levels.length > 1) {
                _v1$4.setFromMatrixPosition(camera.matrixWorld), _v2$2.setFromMatrixPosition(this.matrixWorld);
                var i, l, distance = _v1$4.distanceTo(_v2$2) / camera.zoom;
                for(i = 1, levels[0].object.visible = !0, l = levels.length; i < l; i++)if (distance >= levels[i].distance) levels[i - 1].object.visible = !1, levels[i].object.visible = !0;
                else break;
                for(this._currentLevel = i - 1; i < l; i++)levels[i].object.visible = !1;
            }
        },
        toJSON: function(meta) {
            var data = Object3D.prototype.toJSON.call(this, meta);
            !1 === this.autoUpdate && (data.object.autoUpdate = !1), data.object.levels = [];
            for(var levels = this.levels, i = 0, l = levels.length; i < l; i++){
                var level = levels[i];
                data.object.levels.push({
                    object: level.object.uuid,
                    distance: level.distance
                });
            }
            return data;
        }
    });
    var _basePosition = new Vector3(), _skinIndex = new Vector4(), _skinWeight = new Vector4(), _vector$7 = new Vector3(), _matrix$1 = new Matrix4();
    function SkinnedMesh(geometry, material) {
        geometry && geometry.isGeometry && console.error('THREE.SkinnedMesh no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.'), Mesh.call(this, geometry, material), this.type = 'SkinnedMesh', this.bindMode = 'attached', this.bindMatrix = new Matrix4(), this.bindMatrixInverse = new Matrix4();
    }
    function Bone() {
        Object3D.call(this), this.type = 'Bone';
    }
    SkinnedMesh.prototype = Object.assign(Object.create(Mesh.prototype), {
        constructor: SkinnedMesh,
        isSkinnedMesh: !0,
        copy: function(source) {
            return Mesh.prototype.copy.call(this, source), this.bindMode = source.bindMode, this.bindMatrix.copy(source.bindMatrix), this.bindMatrixInverse.copy(source.bindMatrixInverse), this.skeleton = source.skeleton, this;
        },
        bind: function(skeleton, bindMatrix) {
            this.skeleton = skeleton, void 0 === bindMatrix && (this.updateMatrixWorld(!0), this.skeleton.calculateInverses(), bindMatrix = this.matrixWorld), this.bindMatrix.copy(bindMatrix), this.bindMatrixInverse.copy(bindMatrix).invert();
        },
        pose: function() {
            this.skeleton.pose();
        },
        normalizeSkinWeights: function() {
            for(var vector = new Vector4(), skinWeight = this.geometry.attributes.skinWeight, i = 0, l = skinWeight.count; i < l; i++){
                vector.x = skinWeight.getX(i), vector.y = skinWeight.getY(i), vector.z = skinWeight.getZ(i), vector.w = skinWeight.getW(i);
                var scale = 1.0 / vector.manhattanLength();
                scale !== 1 / 0 ? vector.multiplyScalar(scale) : vector.set(1, 0, 0, 0), skinWeight.setXYZW(i, vector.x, vector.y, vector.z, vector.w);
            }
        },
        updateMatrixWorld: function(force) {
            Mesh.prototype.updateMatrixWorld.call(this, force), 'attached' === this.bindMode ? this.bindMatrixInverse.copy(this.matrixWorld).invert() : 'detached' === this.bindMode ? this.bindMatrixInverse.copy(this.bindMatrix).invert() : console.warn('THREE.SkinnedMesh: Unrecognized bindMode: ' + this.bindMode);
        },
        boneTransform: function(index, target) {
            var skeleton = this.skeleton, geometry = this.geometry;
            _skinIndex.fromBufferAttribute(geometry.attributes.skinIndex, index), _skinWeight.fromBufferAttribute(geometry.attributes.skinWeight, index), _basePosition.fromBufferAttribute(geometry.attributes.position, index).applyMatrix4(this.bindMatrix), target.set(0, 0, 0);
            for(var i = 0; i < 4; i++){
                var weight = _skinWeight.getComponent(i);
                if (0 !== weight) {
                    var boneIndex = _skinIndex.getComponent(i);
                    _matrix$1.multiplyMatrices(skeleton.bones[boneIndex].matrixWorld, skeleton.boneInverses[boneIndex]), target.addScaledVector(_vector$7.copy(_basePosition).applyMatrix4(_matrix$1), weight);
                }
            }
            return target.applyMatrix4(this.bindMatrixInverse);
        }
    }), Bone.prototype = Object.assign(Object.create(Object3D.prototype), {
        constructor: Bone,
        isBone: !0
    });
    var _offsetMatrix = new Matrix4(), _identityMatrix = new Matrix4();
    function Skeleton(bones, boneInverses) {
        void 0 === bones && (bones = []), void 0 === boneInverses && (boneInverses = []), this.uuid = MathUtils.generateUUID(), this.bones = bones.slice(0), this.boneInverses = boneInverses, this.boneMatrices = null, this.boneTexture = null, this.boneTextureSize = 0, this.frame = -1, this.init();
    }
    Object.assign(Skeleton.prototype, {
        init: function() {
            var bones = this.bones, boneInverses = this.boneInverses;
            if (this.boneMatrices = new Float32Array(16 * bones.length), 0 === boneInverses.length) this.calculateInverses();
            else if (bones.length !== boneInverses.length) {
                console.warn('THREE.Skeleton: Number of inverse bone matrices does not match amount of bones.'), this.boneInverses = [];
                for(var i = 0, il = this.bones.length; i < il; i++)this.boneInverses.push(new Matrix4());
            }
        },
        calculateInverses: function() {
            this.boneInverses.length = 0;
            for(var i = 0, il = this.bones.length; i < il; i++){
                var inverse = new Matrix4();
                this.bones[i] && inverse.copy(this.bones[i].matrixWorld).invert(), this.boneInverses.push(inverse);
            }
        },
        pose: function() {
            for(var i = 0, il = this.bones.length; i < il; i++){
                var bone = this.bones[i];
                bone && bone.matrixWorld.copy(this.boneInverses[i]).invert();
            }
            for(var _i = 0, _il = this.bones.length; _i < _il; _i++){
                var _bone = this.bones[_i];
                _bone && (_bone.parent && _bone.parent.isBone ? (_bone.matrix.copy(_bone.parent.matrixWorld).invert(), _bone.matrix.multiply(_bone.matrixWorld)) : _bone.matrix.copy(_bone.matrixWorld), _bone.matrix.decompose(_bone.position, _bone.quaternion, _bone.scale));
            }
        },
        update: function() {
            for(var bones = this.bones, boneInverses = this.boneInverses, boneMatrices = this.boneMatrices, boneTexture = this.boneTexture, i = 0, il = bones.length; i < il; i++){
                var matrix = bones[i] ? bones[i].matrixWorld : _identityMatrix;
                _offsetMatrix.multiplyMatrices(matrix, boneInverses[i]), _offsetMatrix.toArray(boneMatrices, 16 * i);
            }
            null !== boneTexture && (boneTexture.needsUpdate = !0);
        },
        clone: function() {
            return new Skeleton(this.bones, this.boneInverses);
        },
        getBoneByName: function(name) {
            for(var i = 0, il = this.bones.length; i < il; i++){
                var bone = this.bones[i];
                if (bone.name === name) return bone;
            }
        },
        dispose: function() {
            null !== this.boneTexture && (this.boneTexture.dispose(), this.boneTexture = null);
        },
        fromJSON: function(json, bones) {
            this.uuid = json.uuid;
            for(var i = 0, l = json.bones.length; i < l; i++){
                var uuid = json.bones[i], bone = bones[uuid];
                void 0 === bone && (console.warn('THREE.Skeleton: No bone found with UUID:', uuid), bone = new Bone()), this.bones.push(bone), this.boneInverses.push(new Matrix4().fromArray(json.boneInverses[i]));
            }
            return this.init(), this;
        },
        toJSON: function() {
            var data = {
                metadata: {
                    version: 4.5,
                    type: 'Skeleton',
                    generator: 'Skeleton.toJSON'
                },
                bones: [],
                boneInverses: []
            };
            data.uuid = this.uuid;
            for(var bones = this.bones, boneInverses = this.boneInverses, i = 0, l = bones.length; i < l; i++){
                var bone = bones[i];
                data.bones.push(bone.uuid);
                var boneInverse = boneInverses[i];
                data.boneInverses.push(boneInverse.toArray());
            }
            return data;
        }
    });
    var _instanceLocalMatrix = new Matrix4(), _instanceWorldMatrix = new Matrix4(), _instanceIntersects = [], _mesh = new Mesh();
    function InstancedMesh(geometry, material, count) {
        Mesh.call(this, geometry, material), this.instanceMatrix = new BufferAttribute(new Float32Array(16 * count), 16), this.instanceColor = null, this.count = count, this.frustumCulled = !1;
    }
    function LineBasicMaterial(parameters) {
        Material.call(this), this.type = 'LineBasicMaterial', this.color = new Color(0xffffff), this.linewidth = 1, this.linecap = 'round', this.linejoin = 'round', this.morphTargets = !1, this.setValues(parameters);
    }
    InstancedMesh.prototype = Object.assign(Object.create(Mesh.prototype), {
        constructor: InstancedMesh,
        isInstancedMesh: !0,
        copy: function(source) {
            return Mesh.prototype.copy.call(this, source), this.instanceMatrix.copy(source.instanceMatrix), this.count = source.count, this;
        },
        getColorAt: function(index, color) {
            color.fromArray(this.instanceColor.array, 3 * index);
        },
        getMatrixAt: function(index, matrix) {
            matrix.fromArray(this.instanceMatrix.array, 16 * index);
        },
        raycast: function(raycaster, intersects) {
            var matrixWorld = this.matrixWorld, raycastTimes = this.count;
            if (_mesh.geometry = this.geometry, _mesh.material = this.material, void 0 !== _mesh.material) for(var instanceId = 0; instanceId < raycastTimes; instanceId++){
                this.getMatrixAt(instanceId, _instanceLocalMatrix), _instanceWorldMatrix.multiplyMatrices(matrixWorld, _instanceLocalMatrix), _mesh.matrixWorld = _instanceWorldMatrix, _mesh.raycast(raycaster, _instanceIntersects);
                for(var i = 0, l = _instanceIntersects.length; i < l; i++){
                    var intersect = _instanceIntersects[i];
                    intersect.instanceId = instanceId, intersect.object = this, intersects.push(intersect);
                }
                _instanceIntersects.length = 0;
            }
        },
        setColorAt: function(index, color) {
            null === this.instanceColor && (this.instanceColor = new BufferAttribute(new Float32Array(3 * this.count), 3)), color.toArray(this.instanceColor.array, 3 * index);
        },
        setMatrixAt: function(index, matrix) {
            matrix.toArray(this.instanceMatrix.array, 16 * index);
        },
        updateMorphTargets: function() {},
        dispose: function() {
            this.dispatchEvent({
                type: 'dispose'
            });
        }
    }), LineBasicMaterial.prototype = Object.create(Material.prototype), LineBasicMaterial.prototype.constructor = LineBasicMaterial, LineBasicMaterial.prototype.isLineBasicMaterial = !0, LineBasicMaterial.prototype.copy = function(source) {
        return Material.prototype.copy.call(this, source), this.color.copy(source.color), this.linewidth = source.linewidth, this.linecap = source.linecap, this.linejoin = source.linejoin, this.morphTargets = source.morphTargets, this;
    };
    var _start = new Vector3(), _end = new Vector3(), _inverseMatrix$1 = new Matrix4(), _ray$1 = new Ray(), _sphere$2 = new Sphere();
    function Line(geometry, material) {
        void 0 === geometry && (geometry = new BufferGeometry()), void 0 === material && (material = new LineBasicMaterial()), Object3D.call(this), this.type = 'Line', this.geometry = geometry, this.material = material, this.updateMorphTargets();
    }
    Line.prototype = Object.assign(Object.create(Object3D.prototype), {
        constructor: Line,
        isLine: !0,
        copy: function(source) {
            return Object3D.prototype.copy.call(this, source), this.material = source.material, this.geometry = source.geometry, this;
        },
        computeLineDistances: function() {
            var geometry = this.geometry;
            if (geometry.isBufferGeometry) {
                if (null === geometry.index) {
                    for(var positionAttribute = geometry.attributes.position, lineDistances = [
                        0
                    ], i = 1, l = positionAttribute.count; i < l; i++)_start.fromBufferAttribute(positionAttribute, i - 1), _end.fromBufferAttribute(positionAttribute, i), lineDistances[i] = lineDistances[i - 1], lineDistances[i] += _start.distanceTo(_end);
                    geometry.setAttribute('lineDistance', new Float32BufferAttribute(lineDistances, 1));
                } else console.warn('THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.');
            } else if (geometry.isGeometry) {
                var vertices = geometry.vertices, _lineDistances = geometry.lineDistances;
                _lineDistances[0] = 0;
                for(var _i = 1, _l = vertices.length; _i < _l; _i++)_lineDistances[_i] = _lineDistances[_i - 1], _lineDistances[_i] += vertices[_i - 1].distanceTo(vertices[_i]);
            }
            return this;
        },
        raycast: function(raycaster, intersects) {
            var geometry = this.geometry, matrixWorld = this.matrixWorld, threshold = raycaster.params.Line.threshold;
            if (null === geometry.boundingSphere && geometry.computeBoundingSphere(), _sphere$2.copy(geometry.boundingSphere), _sphere$2.applyMatrix4(matrixWorld), _sphere$2.radius += threshold, !1 !== raycaster.ray.intersectsSphere(_sphere$2)) {
                _inverseMatrix$1.copy(matrixWorld).invert(), _ray$1.copy(raycaster.ray).applyMatrix4(_inverseMatrix$1);
                var localThreshold = threshold / ((this.scale.x + this.scale.y + this.scale.z) / 3), localThresholdSq = localThreshold * localThreshold, vStart = new Vector3(), vEnd = new Vector3(), interSegment = new Vector3(), interRay = new Vector3(), step = this.isLineSegments ? 2 : 1;
                if (geometry.isBufferGeometry) {
                    var index = geometry.index, positionAttribute = geometry.attributes.position;
                    if (null !== index) for(var indices = index.array, i = 0, l = indices.length - 1; i < l; i += step){
                        var a = indices[i], b = indices[i + 1];
                        if (vStart.fromBufferAttribute(positionAttribute, a), vEnd.fromBufferAttribute(positionAttribute, b), !(_ray$1.distanceSqToSegment(vStart, vEnd, interRay, interSegment) > localThresholdSq)) {
                            interRay.applyMatrix4(this.matrixWorld);
                            var distance = raycaster.ray.origin.distanceTo(interRay);
                            distance < raycaster.near || distance > raycaster.far || intersects.push({
                                distance: distance,
                                point: interSegment.clone().applyMatrix4(this.matrixWorld),
                                index: i,
                                face: null,
                                faceIndex: null,
                                object: this
                            });
                        }
                    }
                    else for(var _i2 = 0, _l2 = positionAttribute.count - 1; _i2 < _l2; _i2 += step)if (vStart.fromBufferAttribute(positionAttribute, _i2), vEnd.fromBufferAttribute(positionAttribute, _i2 + 1), !(_ray$1.distanceSqToSegment(vStart, vEnd, interRay, interSegment) > localThresholdSq)) {
                        interRay.applyMatrix4(this.matrixWorld);
                        var _distance = raycaster.ray.origin.distanceTo(interRay);
                        _distance < raycaster.near || _distance > raycaster.far || intersects.push({
                            distance: _distance,
                            point: interSegment.clone().applyMatrix4(this.matrixWorld),
                            index: _i2,
                            face: null,
                            faceIndex: null,
                            object: this
                        });
                    }
                } else if (geometry.isGeometry) {
                    for(var vertices = geometry.vertices, nbVertices = vertices.length, _i3 = 0; _i3 < nbVertices - 1; _i3 += step)if (!(_ray$1.distanceSqToSegment(vertices[_i3], vertices[_i3 + 1], interRay, interSegment) > localThresholdSq)) {
                        interRay.applyMatrix4(this.matrixWorld);
                        var _distance2 = raycaster.ray.origin.distanceTo(interRay);
                        _distance2 < raycaster.near || _distance2 > raycaster.far || intersects.push({
                            distance: _distance2,
                            point: interSegment.clone().applyMatrix4(this.matrixWorld),
                            index: _i3,
                            face: null,
                            faceIndex: null,
                            object: this
                        });
                    }
                }
            }
        },
        updateMorphTargets: function() {
            var geometry = this.geometry;
            if (geometry.isBufferGeometry) {
                var morphAttributes = geometry.morphAttributes, keys = Object.keys(morphAttributes);
                if (keys.length > 0) {
                    var morphAttribute = morphAttributes[keys[0]];
                    if (void 0 !== morphAttribute) {
                        this.morphTargetInfluences = [], this.morphTargetDictionary = {};
                        for(var m = 0, ml = morphAttribute.length; m < ml; m++){
                            var name = morphAttribute[m].name || String(m);
                            this.morphTargetInfluences.push(0), this.morphTargetDictionary[name] = m;
                        }
                    }
                }
            } else {
                var morphTargets = geometry.morphTargets;
                void 0 !== morphTargets && morphTargets.length > 0 && console.error('THREE.Line.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.');
            }
        }
    });
    var _start$1 = new Vector3(), _end$1 = new Vector3();
    function LineSegments(geometry, material) {
        Line.call(this, geometry, material), this.type = 'LineSegments';
    }
    function LineLoop(geometry, material) {
        Line.call(this, geometry, material), this.type = 'LineLoop';
    }
    function PointsMaterial(parameters) {
        Material.call(this), this.type = 'PointsMaterial', this.color = new Color(0xffffff), this.map = null, this.alphaMap = null, this.size = 1, this.sizeAttenuation = !0, this.morphTargets = !1, this.setValues(parameters);
    }
    LineSegments.prototype = Object.assign(Object.create(Line.prototype), {
        constructor: LineSegments,
        isLineSegments: !0,
        computeLineDistances: function() {
            var geometry = this.geometry;
            if (geometry.isBufferGeometry) {
                if (null === geometry.index) {
                    for(var positionAttribute = geometry.attributes.position, lineDistances = [], i = 0, l = positionAttribute.count; i < l; i += 2)_start$1.fromBufferAttribute(positionAttribute, i), _end$1.fromBufferAttribute(positionAttribute, i + 1), lineDistances[i] = 0 === i ? 0 : lineDistances[i - 1], lineDistances[i + 1] = lineDistances[i] + _start$1.distanceTo(_end$1);
                    geometry.setAttribute('lineDistance', new Float32BufferAttribute(lineDistances, 1));
                } else console.warn('THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.');
            } else if (geometry.isGeometry) for(var vertices = geometry.vertices, _lineDistances = geometry.lineDistances, _i = 0, _l = vertices.length; _i < _l; _i += 2)_start$1.copy(vertices[_i]), _end$1.copy(vertices[_i + 1]), _lineDistances[_i] = 0 === _i ? 0 : _lineDistances[_i - 1], _lineDistances[_i + 1] = _lineDistances[_i] + _start$1.distanceTo(_end$1);
            return this;
        }
    }), LineLoop.prototype = Object.assign(Object.create(Line.prototype), {
        constructor: LineLoop,
        isLineLoop: !0
    }), PointsMaterial.prototype = Object.create(Material.prototype), PointsMaterial.prototype.constructor = PointsMaterial, PointsMaterial.prototype.isPointsMaterial = !0, PointsMaterial.prototype.copy = function(source) {
        return Material.prototype.copy.call(this, source), this.color.copy(source.color), this.map = source.map, this.alphaMap = source.alphaMap, this.size = source.size, this.sizeAttenuation = source.sizeAttenuation, this.morphTargets = source.morphTargets, this;
    };
    var _inverseMatrix$2 = new Matrix4(), _ray$2 = new Ray(), _sphere$3 = new Sphere(), _position$1 = new Vector3();
    function Points(geometry, material) {
        void 0 === geometry && (geometry = new BufferGeometry()), void 0 === material && (material = new PointsMaterial()), Object3D.call(this), this.type = 'Points', this.geometry = geometry, this.material = material, this.updateMorphTargets();
    }
    function testPoint(point, index, localThresholdSq, matrixWorld, raycaster, intersects, object) {
        var rayPointDistanceSq = _ray$2.distanceSqToPoint(point);
        if (rayPointDistanceSq < localThresholdSq) {
            var intersectPoint = new Vector3();
            _ray$2.closestPointToPoint(point, intersectPoint), intersectPoint.applyMatrix4(matrixWorld);
            var distance = raycaster.ray.origin.distanceTo(intersectPoint);
            if (distance < raycaster.near || distance > raycaster.far) return;
            intersects.push({
                distance: distance,
                distanceToRay: Math.sqrt(rayPointDistanceSq),
                point: intersectPoint,
                index: index,
                face: null,
                object: object
            });
        }
    }
    function VideoTexture(video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy) {
        Texture.call(this, video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy), this.format = void 0 !== format ? format : 1022, this.minFilter = void 0 !== minFilter ? minFilter : 1006, this.magFilter = void 0 !== magFilter ? magFilter : 1006, this.generateMipmaps = !1;
        var scope = this;
        'requestVideoFrameCallback' in video && video.requestVideoFrameCallback(function updateVideo() {
            scope.needsUpdate = !0, video.requestVideoFrameCallback(updateVideo);
        });
    }
    function CompressedTexture(mipmaps, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding) {
        Texture.call(this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding), this.image = {
            width: width,
            height: height
        }, this.mipmaps = mipmaps, this.flipY = !1, this.generateMipmaps = !1;
    }
    function CanvasTexture(canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy) {
        Texture.call(this, canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy), this.needsUpdate = !0;
    }
    function DepthTexture(width, height, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, format) {
        if (1026 !== (format = void 0 !== format ? format : 1026) && 1027 !== format) throw Error('DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat');
        void 0 === type && 1026 === format && (type = 1012), void 0 === type && 1027 === format && (type = 1020), Texture.call(this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy), this.image = {
            width: width,
            height: height
        }, this.magFilter = void 0 !== magFilter ? magFilter : 1003, this.minFilter = void 0 !== minFilter ? minFilter : 1003, this.flipY = !1, this.generateMipmaps = !1;
    }
    Points.prototype = Object.assign(Object.create(Object3D.prototype), {
        constructor: Points,
        isPoints: !0,
        copy: function(source) {
            return Object3D.prototype.copy.call(this, source), this.material = source.material, this.geometry = source.geometry, this;
        },
        raycast: function(raycaster, intersects) {
            var geometry = this.geometry, matrixWorld = this.matrixWorld, threshold = raycaster.params.Points.threshold;
            if (null === geometry.boundingSphere && geometry.computeBoundingSphere(), _sphere$3.copy(geometry.boundingSphere), _sphere$3.applyMatrix4(matrixWorld), _sphere$3.radius += threshold, !1 !== raycaster.ray.intersectsSphere(_sphere$3)) {
                _inverseMatrix$2.copy(matrixWorld).invert(), _ray$2.copy(raycaster.ray).applyMatrix4(_inverseMatrix$2);
                var localThreshold = threshold / ((this.scale.x + this.scale.y + this.scale.z) / 3), localThresholdSq = localThreshold * localThreshold;
                if (geometry.isBufferGeometry) {
                    var index = geometry.index, positionAttribute = geometry.attributes.position;
                    if (null !== index) for(var indices = index.array, i = 0, il = indices.length; i < il; i++){
                        var a = indices[i];
                        _position$1.fromBufferAttribute(positionAttribute, a), testPoint(_position$1, a, localThresholdSq, matrixWorld, raycaster, intersects, this);
                    }
                    else for(var _i = 0, l = positionAttribute.count; _i < l; _i++)_position$1.fromBufferAttribute(positionAttribute, _i), testPoint(_position$1, _i, localThresholdSq, matrixWorld, raycaster, intersects, this);
                } else for(var vertices = geometry.vertices, _i2 = 0, _l = vertices.length; _i2 < _l; _i2++)testPoint(vertices[_i2], _i2, localThresholdSq, matrixWorld, raycaster, intersects, this);
            }
        },
        updateMorphTargets: function() {
            var geometry = this.geometry;
            if (geometry.isBufferGeometry) {
                var morphAttributes = geometry.morphAttributes, keys = Object.keys(morphAttributes);
                if (keys.length > 0) {
                    var morphAttribute = morphAttributes[keys[0]];
                    if (void 0 !== morphAttribute) {
                        this.morphTargetInfluences = [], this.morphTargetDictionary = {};
                        for(var m = 0, ml = morphAttribute.length; m < ml; m++){
                            var name = morphAttribute[m].name || String(m);
                            this.morphTargetInfluences.push(0), this.morphTargetDictionary[name] = m;
                        }
                    }
                }
            } else {
                var morphTargets = geometry.morphTargets;
                void 0 !== morphTargets && morphTargets.length > 0 && console.error('THREE.Points.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.');
            }
        }
    }), VideoTexture.prototype = Object.assign(Object.create(Texture.prototype), {
        constructor: VideoTexture,
        clone: function() {
            return new this.constructor(this.image).copy(this);
        },
        isVideoTexture: !0,
        update: function() {
            var video = this.image;
            !1 == 'requestVideoFrameCallback' in video && video.readyState >= video.HAVE_CURRENT_DATA && (this.needsUpdate = !0);
        }
    }), CompressedTexture.prototype = Object.create(Texture.prototype), CompressedTexture.prototype.constructor = CompressedTexture, CompressedTexture.prototype.isCompressedTexture = !0, CanvasTexture.prototype = Object.create(Texture.prototype), CanvasTexture.prototype.constructor = CanvasTexture, CanvasTexture.prototype.isCanvasTexture = !0, DepthTexture.prototype = Object.create(Texture.prototype), DepthTexture.prototype.constructor = DepthTexture, DepthTexture.prototype.isDepthTexture = !0;
    var _geometryId = 0, _m1$3 = new Matrix4(), _obj$1 = new Object3D(), _offset$1 = new Vector3();
    function Geometry() {
        Object.defineProperty(this, 'id', {
            value: _geometryId += 2
        }), this.uuid = MathUtils.generateUUID(), this.name = '', this.type = 'Geometry', this.vertices = [], this.colors = [], this.faces = [], this.faceVertexUvs = [
            []
        ], this.morphTargets = [], this.morphNormals = [], this.skinWeights = [], this.skinIndices = [], this.lineDistances = [], this.boundingBox = null, this.boundingSphere = null, this.elementsNeedUpdate = !1, this.verticesNeedUpdate = !1, this.uvsNeedUpdate = !1, this.normalsNeedUpdate = !1, this.colorsNeedUpdate = !1, this.lineDistancesNeedUpdate = !1, this.groupsNeedUpdate = !1;
    }
    Geometry.prototype = Object.assign(Object.create(EventDispatcher.prototype), {
        constructor: Geometry,
        isGeometry: !0,
        applyMatrix4: function(matrix) {
            for(var normalMatrix = new Matrix3().getNormalMatrix(matrix), i = 0, il = this.vertices.length; i < il; i++)this.vertices[i].applyMatrix4(matrix);
            for(var _i = 0, _il = this.faces.length; _i < _il; _i++){
                var face = this.faces[_i];
                face.normal.applyMatrix3(normalMatrix).normalize();
                for(var j = 0, jl = face.vertexNormals.length; j < jl; j++)face.vertexNormals[j].applyMatrix3(normalMatrix).normalize();
            }
            return null !== this.boundingBox && this.computeBoundingBox(), null !== this.boundingSphere && this.computeBoundingSphere(), this.verticesNeedUpdate = !0, this.normalsNeedUpdate = !0, this;
        },
        rotateX: function(angle) {
            return _m1$3.makeRotationX(angle), this.applyMatrix4(_m1$3), this;
        },
        rotateY: function(angle) {
            return _m1$3.makeRotationY(angle), this.applyMatrix4(_m1$3), this;
        },
        rotateZ: function(angle) {
            return _m1$3.makeRotationZ(angle), this.applyMatrix4(_m1$3), this;
        },
        translate: function(x, y, z) {
            return _m1$3.makeTranslation(x, y, z), this.applyMatrix4(_m1$3), this;
        },
        scale: function(x, y, z) {
            return _m1$3.makeScale(x, y, z), this.applyMatrix4(_m1$3), this;
        },
        lookAt: function(vector) {
            return _obj$1.lookAt(vector), _obj$1.updateMatrix(), this.applyMatrix4(_obj$1.matrix), this;
        },
        fromBufferGeometry: function(geometry) {
            var scope = this, index = null !== geometry.index ? geometry.index : void 0, attributes = geometry.attributes;
            if (void 0 === attributes.position) return console.error('THREE.Geometry.fromBufferGeometry(): Position attribute required for conversion.'), this;
            var position = attributes.position, normal = attributes.normal, color = attributes.color, uv = attributes.uv, uv2 = attributes.uv2;
            void 0 !== uv2 && (this.faceVertexUvs[1] = []);
            for(var i = 0; i < position.count; i++)scope.vertices.push(new Vector3().fromBufferAttribute(position, i)), void 0 !== color && scope.colors.push(new Color().fromBufferAttribute(color, i));
            function addFace(a, b, c, materialIndex) {
                var vertexColors = void 0 === color ? [] : [
                    scope.colors[a].clone(),
                    scope.colors[b].clone(),
                    scope.colors[c].clone()
                ], vertexNormals = void 0 === normal ? [] : [
                    new Vector3().fromBufferAttribute(normal, a),
                    new Vector3().fromBufferAttribute(normal, b),
                    new Vector3().fromBufferAttribute(normal, c)
                ], face = new Face3(a, b, c, vertexNormals, vertexColors, materialIndex);
                scope.faces.push(face), void 0 !== uv && scope.faceVertexUvs[0].push([
                    new Vector2().fromBufferAttribute(uv, a),
                    new Vector2().fromBufferAttribute(uv, b),
                    new Vector2().fromBufferAttribute(uv, c)
                ]), void 0 !== uv2 && scope.faceVertexUvs[1].push([
                    new Vector2().fromBufferAttribute(uv2, a),
                    new Vector2().fromBufferAttribute(uv2, b),
                    new Vector2().fromBufferAttribute(uv2, c)
                ]);
            }
            var groups = geometry.groups;
            if (groups.length > 0) for(var _i2 = 0; _i2 < groups.length; _i2++)for(var group = groups[_i2], start = group.start, count = group.count, j = start, jl = start + count; j < jl; j += 3)void 0 !== index ? addFace(index.getX(j), index.getX(j + 1), index.getX(j + 2), group.materialIndex) : addFace(j, j + 1, j + 2, group.materialIndex);
            else if (void 0 !== index) for(var _i3 = 0; _i3 < index.count; _i3 += 3)addFace(index.getX(_i3), index.getX(_i3 + 1), index.getX(_i3 + 2));
            else for(var _i4 = 0; _i4 < position.count; _i4 += 3)addFace(_i4, _i4 + 1, _i4 + 2);
            return this.computeFaceNormals(), null !== geometry.boundingBox && (this.boundingBox = geometry.boundingBox.clone()), null !== geometry.boundingSphere && (this.boundingSphere = geometry.boundingSphere.clone()), this;
        },
        center: function() {
            return this.computeBoundingBox(), this.boundingBox.getCenter(_offset$1).negate(), this.translate(_offset$1.x, _offset$1.y, _offset$1.z), this;
        },
        normalize: function() {
            this.computeBoundingSphere();
            var center = this.boundingSphere.center, radius = this.boundingSphere.radius, s = 0 === radius ? 1 : 1.0 / radius, matrix = new Matrix4();
            return matrix.set(s, 0, 0, -s * center.x, 0, s, 0, -s * center.y, 0, 0, s, -s * center.z, 0, 0, 0, 1), this.applyMatrix4(matrix), this;
        },
        computeFaceNormals: function() {
            for(var cb = new Vector3(), ab = new Vector3(), f = 0, fl = this.faces.length; f < fl; f++){
                var face = this.faces[f], vA = this.vertices[face.a], vB = this.vertices[face.b], vC = this.vertices[face.c];
                cb.subVectors(vC, vB), ab.subVectors(vA, vB), cb.cross(ab), cb.normalize(), face.normal.copy(cb);
            }
        },
        computeVertexNormals: function(areaWeighted) {
            void 0 === areaWeighted && (areaWeighted = !0);
            for(var vertices = Array(this.vertices.length), v = 0, vl = this.vertices.length; v < vl; v++)vertices[v] = new Vector3();
            if (areaWeighted) for(var cb = new Vector3(), ab = new Vector3(), f = 0, fl = this.faces.length; f < fl; f++){
                var face = this.faces[f], vA = this.vertices[face.a], vB = this.vertices[face.b], vC = this.vertices[face.c];
                cb.subVectors(vC, vB), ab.subVectors(vA, vB), cb.cross(ab), vertices[face.a].add(cb), vertices[face.b].add(cb), vertices[face.c].add(cb);
            }
            else {
                this.computeFaceNormals();
                for(var _f = 0, _fl = this.faces.length; _f < _fl; _f++){
                    var _face = this.faces[_f];
                    vertices[_face.a].add(_face.normal), vertices[_face.b].add(_face.normal), vertices[_face.c].add(_face.normal);
                }
            }
            for(var _v = 0, _vl = this.vertices.length; _v < _vl; _v++)vertices[_v].normalize();
            for(var _f2 = 0, _fl2 = this.faces.length; _f2 < _fl2; _f2++){
                var _face2 = this.faces[_f2], vertexNormals = _face2.vertexNormals;
                3 === vertexNormals.length ? (vertexNormals[0].copy(vertices[_face2.a]), vertexNormals[1].copy(vertices[_face2.b]), vertexNormals[2].copy(vertices[_face2.c])) : (vertexNormals[0] = vertices[_face2.a].clone(), vertexNormals[1] = vertices[_face2.b].clone(), vertexNormals[2] = vertices[_face2.c].clone());
            }
            this.faces.length > 0 && (this.normalsNeedUpdate = !0);
        },
        computeFlatVertexNormals: function() {
            this.computeFaceNormals();
            for(var f = 0, fl = this.faces.length; f < fl; f++){
                var face = this.faces[f], vertexNormals = face.vertexNormals;
                3 === vertexNormals.length ? (vertexNormals[0].copy(face.normal), vertexNormals[1].copy(face.normal), vertexNormals[2].copy(face.normal)) : (vertexNormals[0] = face.normal.clone(), vertexNormals[1] = face.normal.clone(), vertexNormals[2] = face.normal.clone());
            }
            this.faces.length > 0 && (this.normalsNeedUpdate = !0);
        },
        computeMorphNormals: function() {
            for(var f = 0, fl = this.faces.length; f < fl; f++){
                var face = this.faces[f];
                face.__originalFaceNormal ? face.__originalFaceNormal.copy(face.normal) : face.__originalFaceNormal = face.normal.clone(), face.__originalVertexNormals || (face.__originalVertexNormals = []);
                for(var i = 0, il = face.vertexNormals.length; i < il; i++)face.__originalVertexNormals[i] ? face.__originalVertexNormals[i].copy(face.vertexNormals[i]) : face.__originalVertexNormals[i] = face.vertexNormals[i].clone();
            }
            var tmpGeo = new Geometry();
            tmpGeo.faces = this.faces;
            for(var _i5 = 0, _il2 = this.morphTargets.length; _i5 < _il2; _i5++){
                if (!this.morphNormals[_i5]) {
                    this.morphNormals[_i5] = {}, this.morphNormals[_i5].faceNormals = [], this.morphNormals[_i5].vertexNormals = [];
                    for(var dstNormalsFace = this.morphNormals[_i5].faceNormals, dstNormalsVertex = this.morphNormals[_i5].vertexNormals, _f3 = 0, _fl3 = this.faces.length; _f3 < _fl3; _f3++){
                        var faceNormal = new Vector3(), vertexNormals = {
                            a: new Vector3(),
                            b: new Vector3(),
                            c: new Vector3()
                        };
                        dstNormalsFace.push(faceNormal), dstNormalsVertex.push(vertexNormals);
                    }
                }
                var morphNormals = this.morphNormals[_i5];
                tmpGeo.vertices = this.morphTargets[_i5].vertices, tmpGeo.computeFaceNormals(), tmpGeo.computeVertexNormals();
                for(var _f4 = 0, _fl4 = this.faces.length; _f4 < _fl4; _f4++){
                    var _face3 = this.faces[_f4], _faceNormal = morphNormals.faceNormals[_f4], _vertexNormals = morphNormals.vertexNormals[_f4];
                    _faceNormal.copy(_face3.normal), _vertexNormals.a.copy(_face3.vertexNormals[0]), _vertexNormals.b.copy(_face3.vertexNormals[1]), _vertexNormals.c.copy(_face3.vertexNormals[2]);
                }
            }
            for(var _f5 = 0, _fl5 = this.faces.length; _f5 < _fl5; _f5++){
                var _face4 = this.faces[_f5];
                _face4.normal = _face4.__originalFaceNormal, _face4.vertexNormals = _face4.__originalVertexNormals;
            }
        },
        computeBoundingBox: function() {
            null === this.boundingBox && (this.boundingBox = new Box3()), this.boundingBox.setFromPoints(this.vertices);
        },
        computeBoundingSphere: function() {
            null === this.boundingSphere && (this.boundingSphere = new Sphere()), this.boundingSphere.setFromPoints(this.vertices);
        },
        merge: function(geometry, matrix, materialIndexOffset) {
            if (void 0 === materialIndexOffset && (materialIndexOffset = 0), !(geometry && geometry.isGeometry)) {
                console.error('THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.', geometry);
                return;
            }
            var normalMatrix, vertexOffset = this.vertices.length, vertices1 = this.vertices, vertices2 = geometry.vertices, faces1 = this.faces, faces2 = geometry.faces, colors1 = this.colors, colors2 = geometry.colors;
            void 0 !== matrix && (normalMatrix = new Matrix3().getNormalMatrix(matrix));
            for(var i = 0, il = vertices2.length; i < il; i++){
                var vertexCopy = vertices2[i].clone();
                void 0 !== matrix && vertexCopy.applyMatrix4(matrix), vertices1.push(vertexCopy);
            }
            for(var _i6 = 0, _il3 = colors2.length; _i6 < _il3; _i6++)colors1.push(colors2[_i6].clone());
            for(var _i7 = 0, _il4 = faces2.length; _i7 < _il4; _i7++){
                var face = faces2[_i7], normal = void 0, color = void 0, faceVertexNormals = face.vertexNormals, faceVertexColors = face.vertexColors, faceCopy = new Face3(face.a + vertexOffset, face.b + vertexOffset, face.c + vertexOffset);
                faceCopy.normal.copy(face.normal), void 0 !== normalMatrix && faceCopy.normal.applyMatrix3(normalMatrix).normalize();
                for(var j = 0, jl = faceVertexNormals.length; j < jl; j++)normal = faceVertexNormals[j].clone(), void 0 !== normalMatrix && normal.applyMatrix3(normalMatrix).normalize(), faceCopy.vertexNormals.push(normal);
                faceCopy.color.copy(face.color);
                for(var _j = 0, _jl = faceVertexColors.length; _j < _jl; _j++)color = faceVertexColors[_j], faceCopy.vertexColors.push(color.clone());
                faceCopy.materialIndex = face.materialIndex + materialIndexOffset, faces1.push(faceCopy);
            }
            for(var _i8 = 0, _il5 = geometry.faceVertexUvs.length; _i8 < _il5; _i8++){
                var faceVertexUvs2 = geometry.faceVertexUvs[_i8];
                void 0 === this.faceVertexUvs[_i8] && (this.faceVertexUvs[_i8] = []);
                for(var _j2 = 0, _jl2 = faceVertexUvs2.length; _j2 < _jl2; _j2++){
                    for(var uvs2 = faceVertexUvs2[_j2], uvsCopy = [], k = 0, kl = uvs2.length; k < kl; k++)uvsCopy.push(uvs2[k].clone());
                    this.faceVertexUvs[_i8].push(uvsCopy);
                }
            }
        },
        mergeMesh: function(mesh) {
            if (!(mesh && mesh.isMesh)) {
                console.error('THREE.Geometry.mergeMesh(): mesh not an instance of THREE.Mesh.', mesh);
                return;
            }
            mesh.matrixAutoUpdate && mesh.updateMatrix(), this.merge(mesh.geometry, mesh.matrix);
        },
        mergeVertices: function(precisionPoints) {
            void 0 === precisionPoints && (precisionPoints = 4);
            for(var verticesMap = {}, unique = [], changes = [], precision = Math.pow(10, precisionPoints), i = 0, il = this.vertices.length; i < il; i++){
                var v = this.vertices[i], key = Math.round(v.x * precision) + '_' + Math.round(v.y * precision) + '_' + Math.round(v.z * precision);
                void 0 === verticesMap[key] ? (verticesMap[key] = i, unique.push(this.vertices[i]), changes[i] = unique.length - 1) : changes[i] = changes[verticesMap[key]];
            }
            for(var faceIndicesToRemove = [], _i9 = 0, _il6 = this.faces.length; _i9 < _il6; _i9++){
                var face = this.faces[_i9];
                face.a = changes[face.a], face.b = changes[face.b], face.c = changes[face.c];
                for(var indices = [
                    face.a,
                    face.b,
                    face.c
                ], n = 0; n < 3; n++)if (indices[n] === indices[(n + 1) % 3]) {
                    faceIndicesToRemove.push(_i9);
                    break;
                }
            }
            for(var _i10 = faceIndicesToRemove.length - 1; _i10 >= 0; _i10--){
                var idx = faceIndicesToRemove[_i10];
                this.faces.splice(idx, 1);
                for(var j = 0, jl = this.faceVertexUvs.length; j < jl; j++)this.faceVertexUvs[j].splice(idx, 1);
            }
            var diff = this.vertices.length - unique.length;
            return this.vertices = unique, diff;
        },
        setFromPoints: function(points) {
            this.vertices = [];
            for(var i = 0, l = points.length; i < l; i++){
                var point = points[i];
                this.vertices.push(new Vector3(point.x, point.y, point.z || 0));
            }
            return this;
        },
        sortFacesByMaterialIndex: function() {
            for(var newUvs1, newUvs2, faces = this.faces, length = faces.length, i = 0; i < length; i++)faces[i]._id = i;
            faces.sort(function(a, b) {
                return a.materialIndex - b.materialIndex;
            });
            var uvs1 = this.faceVertexUvs[0], uvs2 = this.faceVertexUvs[1];
            uvs1 && uvs1.length === length && (newUvs1 = []), uvs2 && uvs2.length === length && (newUvs2 = []);
            for(var _i11 = 0; _i11 < length; _i11++){
                var id = faces[_i11]._id;
                newUvs1 && newUvs1.push(uvs1[id]), newUvs2 && newUvs2.push(uvs2[id]);
            }
            newUvs1 && (this.faceVertexUvs[0] = newUvs1), newUvs2 && (this.faceVertexUvs[1] = newUvs2);
        },
        toJSON: function() {
            var data = {
                metadata: {
                    version: 4.5,
                    type: 'Geometry',
                    generator: 'Geometry.toJSON'
                }
            };
            if (data.uuid = this.uuid, data.type = this.type, '' !== this.name && (data.name = this.name), void 0 !== this.parameters) {
                var parameters = this.parameters;
                for(var key in parameters)void 0 !== parameters[key] && (data[key] = parameters[key]);
                return data;
            }
            for(var vertices = [], i = 0; i < this.vertices.length; i++){
                var vertex = this.vertices[i];
                vertices.push(vertex.x, vertex.y, vertex.z);
            }
            for(var faces = [], normals = [], normalsHash = {}, colors = [], colorsHash = {}, uvs = [], uvsHash = {}, _i12 = 0; _i12 < this.faces.length; _i12++){
                var face = this.faces[_i12], hasFaceVertexUv = void 0 !== this.faceVertexUvs[0][_i12], hasFaceNormal = face.normal.length() > 0, hasFaceVertexNormal = face.vertexNormals.length > 0, hasFaceColor = 1 !== face.color.r || 1 !== face.color.g || 1 !== face.color.b, hasFaceVertexColor = face.vertexColors.length > 0, faceType = 0;
                if (faceType = setBit(0, 0, 0), faceType = setBit(faceType, 1, !0), faceType = setBit(faceType, 2, !1), faceType = setBit(faceType, 3, hasFaceVertexUv), faceType = setBit(faceType, 4, hasFaceNormal), faceType = setBit(faceType, 5, hasFaceVertexNormal), faceType = setBit(faceType, 6, hasFaceColor), faceType = setBit(faceType, 7, hasFaceVertexColor), faces.push(faceType), faces.push(face.a, face.b, face.c), faces.push(face.materialIndex), hasFaceVertexUv) {
                    var faceVertexUvs = this.faceVertexUvs[0][_i12];
                    faces.push(getUvIndex(faceVertexUvs[0]), getUvIndex(faceVertexUvs[1]), getUvIndex(faceVertexUvs[2]));
                }
                if (hasFaceNormal && faces.push(getNormalIndex(face.normal)), hasFaceVertexNormal) {
                    var vertexNormals = face.vertexNormals;
                    faces.push(getNormalIndex(vertexNormals[0]), getNormalIndex(vertexNormals[1]), getNormalIndex(vertexNormals[2]));
                }
                if (hasFaceColor && faces.push(getColorIndex(face.color)), hasFaceVertexColor) {
                    var vertexColors = face.vertexColors;
                    faces.push(getColorIndex(vertexColors[0]), getColorIndex(vertexColors[1]), getColorIndex(vertexColors[2]));
                }
            }
            function setBit(value, position, enabled) {
                return enabled ? value | 1 << position : value & ~(1 << position);
            }
            function getNormalIndex(normal) {
                var hash = normal.x.toString() + normal.y.toString() + normal.z.toString();
                return void 0 !== normalsHash[hash] || (normalsHash[hash] = normals.length / 3, normals.push(normal.x, normal.y, normal.z)), normalsHash[hash];
            }
            function getColorIndex(color) {
                var hash = color.r.toString() + color.g.toString() + color.b.toString();
                return void 0 !== colorsHash[hash] || (colorsHash[hash] = colors.length, colors.push(color.getHex())), colorsHash[hash];
            }
            function getUvIndex(uv) {
                var hash = uv.x.toString() + uv.y.toString();
                return void 0 !== uvsHash[hash] || (uvsHash[hash] = uvs.length / 2, uvs.push(uv.x, uv.y)), uvsHash[hash];
            }
            return data.data = {}, data.data.vertices = vertices, data.data.normals = normals, colors.length > 0 && (data.data.colors = colors), uvs.length > 0 && (data.data.uvs = [
                uvs
            ]), data.data.faces = faces, data;
        },
        clone: function() {
            return new Geometry().copy(this);
        },
        copy: function(source) {
            this.vertices = [], this.colors = [], this.faces = [], this.faceVertexUvs = [
                []
            ], this.morphTargets = [], this.morphNormals = [], this.skinWeights = [], this.skinIndices = [], this.lineDistances = [], this.boundingBox = null, this.boundingSphere = null, this.name = source.name;
            for(var vertices = source.vertices, i = 0, il = vertices.length; i < il; i++)this.vertices.push(vertices[i].clone());
            for(var colors = source.colors, _i13 = 0, _il7 = colors.length; _i13 < _il7; _i13++)this.colors.push(colors[_i13].clone());
            for(var faces = source.faces, _i14 = 0, _il8 = faces.length; _i14 < _il8; _i14++)this.faces.push(faces[_i14].clone());
            for(var _i15 = 0, _il9 = source.faceVertexUvs.length; _i15 < _il9; _i15++){
                var faceVertexUvs = source.faceVertexUvs[_i15];
                void 0 === this.faceVertexUvs[_i15] && (this.faceVertexUvs[_i15] = []);
                for(var j = 0, jl = faceVertexUvs.length; j < jl; j++){
                    for(var uvs = faceVertexUvs[j], uvsCopy = [], k = 0, kl = uvs.length; k < kl; k++){
                        var uv = uvs[k];
                        uvsCopy.push(uv.clone());
                    }
                    this.faceVertexUvs[_i15].push(uvsCopy);
                }
            }
            for(var morphTargets = source.morphTargets, _i16 = 0, _il10 = morphTargets.length; _i16 < _il10; _i16++){
                var morphTarget = {};
                if (morphTarget.name = morphTargets[_i16].name, void 0 !== morphTargets[_i16].vertices) {
                    morphTarget.vertices = [];
                    for(var _j3 = 0, _jl3 = morphTargets[_i16].vertices.length; _j3 < _jl3; _j3++)morphTarget.vertices.push(morphTargets[_i16].vertices[_j3].clone());
                }
                if (void 0 !== morphTargets[_i16].normals) {
                    morphTarget.normals = [];
                    for(var _j4 = 0, _jl4 = morphTargets[_i16].normals.length; _j4 < _jl4; _j4++)morphTarget.normals.push(morphTargets[_i16].normals[_j4].clone());
                }
                this.morphTargets.push(morphTarget);
            }
            for(var morphNormals = source.morphNormals, _i17 = 0, _il11 = morphNormals.length; _i17 < _il11; _i17++){
                var morphNormal = {};
                if (void 0 !== morphNormals[_i17].vertexNormals) {
                    morphNormal.vertexNormals = [];
                    for(var _j5 = 0, _jl5 = morphNormals[_i17].vertexNormals.length; _j5 < _jl5; _j5++){
                        var srcVertexNormal = morphNormals[_i17].vertexNormals[_j5], destVertexNormal = {};
                        destVertexNormal.a = srcVertexNormal.a.clone(), destVertexNormal.b = srcVertexNormal.b.clone(), destVertexNormal.c = srcVertexNormal.c.clone(), morphNormal.vertexNormals.push(destVertexNormal);
                    }
                }
                if (void 0 !== morphNormals[_i17].faceNormals) {
                    morphNormal.faceNormals = [];
                    for(var _j6 = 0, _jl6 = morphNormals[_i17].faceNormals.length; _j6 < _jl6; _j6++)morphNormal.faceNormals.push(morphNormals[_i17].faceNormals[_j6].clone());
                }
                this.morphNormals.push(morphNormal);
            }
            for(var skinWeights = source.skinWeights, _i18 = 0, _il12 = skinWeights.length; _i18 < _il12; _i18++)this.skinWeights.push(skinWeights[_i18].clone());
            for(var skinIndices = source.skinIndices, _i19 = 0, _il13 = skinIndices.length; _i19 < _il13; _i19++)this.skinIndices.push(skinIndices[_i19].clone());
            for(var lineDistances = source.lineDistances, _i20 = 0, _il14 = lineDistances.length; _i20 < _il14; _i20++)this.lineDistances.push(lineDistances[_i20]);
            var boundingBox = source.boundingBox;
            null !== boundingBox && (this.boundingBox = boundingBox.clone());
            var boundingSphere = source.boundingSphere;
            return null !== boundingSphere && (this.boundingSphere = boundingSphere.clone()), this.elementsNeedUpdate = source.elementsNeedUpdate, this.verticesNeedUpdate = source.verticesNeedUpdate, this.uvsNeedUpdate = source.uvsNeedUpdate, this.normalsNeedUpdate = source.normalsNeedUpdate, this.colorsNeedUpdate = source.colorsNeedUpdate, this.lineDistancesNeedUpdate = source.lineDistancesNeedUpdate, this.groupsNeedUpdate = source.groupsNeedUpdate, this;
        },
        dispose: function() {
            this.dispatchEvent({
                type: 'dispose'
            });
        }
    });
    var BoxGeometry = function(_Geometry) {
        function BoxGeometry(width, height, depth, widthSegments, heightSegments, depthSegments) {
            var _this;
            return (_this = _Geometry.call(this) || this).type = 'BoxGeometry', _this.parameters = {
                width: width,
                height: height,
                depth: depth,
                widthSegments: widthSegments,
                heightSegments: heightSegments,
                depthSegments: depthSegments
            }, _this.fromBufferGeometry(new BoxBufferGeometry(width, height, depth, widthSegments, heightSegments, depthSegments)), _this.mergeVertices(), _this;
        }
        return _inheritsLoose(BoxGeometry, _Geometry), BoxGeometry;
    }(Geometry), CircleBufferGeometry = function(_BufferGeometry) {
        function CircleBufferGeometry(radius, segments, thetaStart, thetaLength) {
            void 0 === radius && (radius = 1), void 0 === segments && (segments = 8), void 0 === thetaStart && (thetaStart = 0), void 0 === thetaLength && (thetaLength = 2 * Math.PI), (_this = _BufferGeometry.call(this) || this).type = 'CircleBufferGeometry', _this.parameters = {
                radius: radius,
                segments: segments,
                thetaStart: thetaStart,
                thetaLength: thetaLength
            }, segments = Math.max(3, segments);
            var _this, indices = [], vertices = [], normals = [], uvs = [], vertex = new Vector3(), uv = new Vector2();
            vertices.push(0, 0, 0), normals.push(0, 0, 1), uvs.push(0.5, 0.5);
            for(var s = 0, i = 3; s <= segments; s++, i += 3){
                var segment = thetaStart + s / segments * thetaLength;
                vertex.x = radius * Math.cos(segment), vertex.y = radius * Math.sin(segment), vertices.push(vertex.x, vertex.y, vertex.z), normals.push(0, 0, 1), uv.x = (vertices[i] / radius + 1) / 2, uv.y = (vertices[i + 1] / radius + 1) / 2, uvs.push(uv.x, uv.y);
            }
            for(var _i = 1; _i <= segments; _i++)indices.push(_i, _i + 1, 0);
            return _this.setIndex(indices), _this.setAttribute('position', new Float32BufferAttribute(vertices, 3)), _this.setAttribute('normal', new Float32BufferAttribute(normals, 3)), _this.setAttribute('uv', new Float32BufferAttribute(uvs, 2)), _this;
        }
        return _inheritsLoose(CircleBufferGeometry, _BufferGeometry), CircleBufferGeometry;
    }(BufferGeometry), CircleGeometry = function(_Geometry) {
        function CircleGeometry(radius, segments, thetaStart, thetaLength) {
            var _this;
            return (_this = _Geometry.call(this) || this).type = 'CircleGeometry', _this.parameters = {
                radius: radius,
                segments: segments,
                thetaStart: thetaStart,
                thetaLength: thetaLength
            }, _this.fromBufferGeometry(new CircleBufferGeometry(radius, segments, thetaStart, thetaLength)), _this.mergeVertices(), _this;
        }
        return _inheritsLoose(CircleGeometry, _Geometry), CircleGeometry;
    }(Geometry), CylinderBufferGeometry = function(_BufferGeometry) {
        function CylinderBufferGeometry(radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength) {
            void 0 === radiusTop && (radiusTop = 1), void 0 === radiusBottom && (radiusBottom = 1), void 0 === height && (height = 1), void 0 === radialSegments && (radialSegments = 8), void 0 === heightSegments && (heightSegments = 1), void 0 === openEnded && (openEnded = !1), void 0 === thetaStart && (thetaStart = 0), void 0 === thetaLength && (thetaLength = 2 * Math.PI), (_this = _BufferGeometry.call(this) || this).type = 'CylinderBufferGeometry', _this.parameters = {
                radiusTop: radiusTop,
                radiusBottom: radiusBottom,
                height: height,
                radialSegments: radialSegments,
                heightSegments: heightSegments,
                openEnded: openEnded,
                thetaStart: thetaStart,
                thetaLength: thetaLength
            };
            var _this, scope = _assertThisInitialized(_this);
            radialSegments = Math.floor(radialSegments), heightSegments = Math.floor(heightSegments);
            var indices = [], vertices = [], normals = [], uvs = [], index = 0, indexArray = [], halfHeight = height / 2, groupStart = 0;
            function generateCap(top) {
                for(var centerIndexStart = index, uv = new Vector2(), vertex = new Vector3(), groupCount = 0, radius = !0 === top ? radiusTop : radiusBottom, sign = !0 === top ? 1 : -1, x = 1; x <= radialSegments; x++)vertices.push(0, halfHeight * sign, 0), normals.push(0, sign, 0), uvs.push(0.5, 0.5), index++;
                for(var centerIndexEnd = index, _x2 = 0; _x2 <= radialSegments; _x2++){
                    var theta = _x2 / radialSegments * thetaLength + thetaStart, cosTheta = Math.cos(theta), sinTheta = Math.sin(theta);
                    vertex.x = radius * sinTheta, vertex.y = halfHeight * sign, vertex.z = radius * cosTheta, vertices.push(vertex.x, vertex.y, vertex.z), normals.push(0, sign, 0), uv.x = 0.5 * cosTheta + 0.5, uv.y = 0.5 * sinTheta * sign + 0.5, uvs.push(uv.x, uv.y), index++;
                }
                for(var _x3 = 0; _x3 < radialSegments; _x3++){
                    var c = centerIndexStart + _x3, i = centerIndexEnd + _x3;
                    !0 === top ? indices.push(i, i + 1, c) : indices.push(i + 1, i, c), groupCount += 3;
                }
                scope.addGroup(groupStart, groupCount, !0 === top ? 1 : 2), groupStart += groupCount;
            }
            return function() {
                for(var normal = new Vector3(), vertex = new Vector3(), groupCount = 0, slope = (radiusBottom - radiusTop) / height, y = 0; y <= heightSegments; y++){
                    for(var indexRow = [], v = y / heightSegments, radius = v * (radiusBottom - radiusTop) + radiusTop, x = 0; x <= radialSegments; x++){
                        var u = x / radialSegments, theta = u * thetaLength + thetaStart, sinTheta = Math.sin(theta), cosTheta = Math.cos(theta);
                        vertex.x = radius * sinTheta, vertex.y = -v * height + halfHeight, vertex.z = radius * cosTheta, vertices.push(vertex.x, vertex.y, vertex.z), normal.set(sinTheta, slope, cosTheta).normalize(), normals.push(normal.x, normal.y, normal.z), uvs.push(u, 1 - v), indexRow.push(index++);
                    }
                    indexArray.push(indexRow);
                }
                for(var _x = 0; _x < radialSegments; _x++)for(var _y = 0; _y < heightSegments; _y++){
                    var a = indexArray[_y][_x], b = indexArray[_y + 1][_x], c = indexArray[_y + 1][_x + 1], d = indexArray[_y][_x + 1];
                    indices.push(a, b, d), indices.push(b, c, d), groupCount += 6;
                }
                scope.addGroup(groupStart, groupCount, 0), groupStart += groupCount;
            }(), !1 === openEnded && (radiusTop > 0 && generateCap(!0), radiusBottom > 0 && generateCap(!1)), _this.setIndex(indices), _this.setAttribute('position', new Float32BufferAttribute(vertices, 3)), _this.setAttribute('normal', new Float32BufferAttribute(normals, 3)), _this.setAttribute('uv', new Float32BufferAttribute(uvs, 2)), _this;
        }
        return _inheritsLoose(CylinderBufferGeometry, _BufferGeometry), CylinderBufferGeometry;
    }(BufferGeometry), CylinderGeometry = function(_Geometry) {
        function CylinderGeometry(radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength) {
            var _this;
            return (_this = _Geometry.call(this) || this).type = 'CylinderGeometry', _this.parameters = {
                radiusTop: radiusTop,
                radiusBottom: radiusBottom,
                height: height,
                radialSegments: radialSegments,
                heightSegments: heightSegments,
                openEnded: openEnded,
                thetaStart: thetaStart,
                thetaLength: thetaLength
            }, _this.fromBufferGeometry(new CylinderBufferGeometry(radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength)), _this.mergeVertices(), _this;
        }
        return _inheritsLoose(CylinderGeometry, _Geometry), CylinderGeometry;
    }(Geometry), ConeGeometry = function(_CylinderGeometry) {
        function ConeGeometry(radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength) {
            var _this;
            return (_this = _CylinderGeometry.call(this, 0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength) || this).type = 'ConeGeometry', _this.parameters = {
                radius: radius,
                height: height,
                radialSegments: radialSegments,
                heightSegments: heightSegments,
                openEnded: openEnded,
                thetaStart: thetaStart,
                thetaLength: thetaLength
            }, _this;
        }
        return _inheritsLoose(ConeGeometry, _CylinderGeometry), ConeGeometry;
    }(CylinderGeometry), ConeBufferGeometry = function(_CylinderBufferGeomet) {
        function ConeBufferGeometry(radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength) {
            var _this;
            return void 0 === radius && (radius = 1), void 0 === height && (height = 1), void 0 === radialSegments && (radialSegments = 8), void 0 === heightSegments && (heightSegments = 1), void 0 === openEnded && (openEnded = !1), void 0 === thetaStart && (thetaStart = 0), void 0 === thetaLength && (thetaLength = 2 * Math.PI), (_this = _CylinderBufferGeomet.call(this, 0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength) || this).type = 'ConeBufferGeometry', _this.parameters = {
                radius: radius,
                height: height,
                radialSegments: radialSegments,
                heightSegments: heightSegments,
                openEnded: openEnded,
                thetaStart: thetaStart,
                thetaLength: thetaLength
            }, _this;
        }
        return _inheritsLoose(ConeBufferGeometry, _CylinderBufferGeomet), ConeBufferGeometry;
    }(CylinderBufferGeometry), PolyhedronBufferGeometry = function(_BufferGeometry) {
        function PolyhedronBufferGeometry(vertices, indices, radius, detail) {
            void 0 === radius && (radius = 1), void 0 === detail && (detail = 0), (_this = _BufferGeometry.call(this) || this).type = 'PolyhedronBufferGeometry', _this.parameters = {
                vertices: vertices,
                indices: indices,
                radius: radius,
                detail: detail
            };
            var _this, vertexBuffer = [], uvBuffer = [];
            function pushVertex(vertex) {
                vertexBuffer.push(vertex.x, vertex.y, vertex.z);
            }
            function getVertexByIndex(index, vertex) {
                var stride = 3 * index;
                vertex.x = vertices[stride + 0], vertex.y = vertices[stride + 1], vertex.z = vertices[stride + 2];
            }
            function correctUV(uv, stride, vector, azimuth) {
                azimuth < 0 && 1 === uv.x && (uvBuffer[stride] = uv.x - 1), 0 === vector.x && 0 === vector.z && (uvBuffer[stride] = azimuth / 2 / Math.PI + 0.5);
            }
            function azimuth(vector) {
                return Math.atan2(vector.z, -vector.x);
            }
            return function(detail) {
                for(var a = new Vector3(), b = new Vector3(), c = new Vector3(), i = 0; i < indices.length; i += 3)getVertexByIndex(indices[i + 0], a), getVertexByIndex(indices[i + 1], b), getVertexByIndex(indices[i + 2], c), function(a, b, c, detail) {
                    for(var cols = detail + 1, v = [], i = 0; i <= cols; i++){
                        v[i] = [];
                        for(var aj = a.clone().lerp(c, i / cols), bj = b.clone().lerp(c, i / cols), rows = cols - i, j = 0; j <= rows; j++)0 === j && i === cols ? v[i][j] = aj : v[i][j] = aj.clone().lerp(bj, j / rows);
                    }
                    for(var _i = 0; _i < cols; _i++)for(var _j = 0; _j < 2 * (cols - _i) - 1; _j++){
                        var k = Math.floor(_j / 2);
                        _j % 2 == 0 ? (pushVertex(v[_i][k + 1]), pushVertex(v[_i + 1][k]), pushVertex(v[_i][k])) : (pushVertex(v[_i][k + 1]), pushVertex(v[_i + 1][k + 1]), pushVertex(v[_i + 1][k]));
                    }
                }(a, b, c, detail);
            }(detail), function(radius) {
                for(var vertex = new Vector3(), i = 0; i < vertexBuffer.length; i += 3)vertex.x = vertexBuffer[i + 0], vertex.y = vertexBuffer[i + 1], vertex.z = vertexBuffer[i + 2], vertex.normalize().multiplyScalar(radius), vertexBuffer[i + 0] = vertex.x, vertexBuffer[i + 1] = vertex.y, vertexBuffer[i + 2] = vertex.z;
            }(radius), function() {
                for(var vertex = new Vector3(), i = 0; i < vertexBuffer.length; i += 3){
                    vertex.x = vertexBuffer[i + 0], vertex.y = vertexBuffer[i + 1], vertex.z = vertexBuffer[i + 2];
                    var u = azimuth(vertex) / 2 / Math.PI + 0.5, v = Math.atan2(-vertex.y, Math.sqrt(vertex.x * vertex.x + vertex.z * vertex.z)) / Math.PI + 0.5;
                    uvBuffer.push(u, 1 - v);
                }
                (function() {
                    for(var a = new Vector3(), b = new Vector3(), c = new Vector3(), centroid = new Vector3(), uvA = new Vector2(), uvB = new Vector2(), uvC = new Vector2(), i = 0, j = 0; i < vertexBuffer.length; i += 9, j += 6){
                        a.set(vertexBuffer[i + 0], vertexBuffer[i + 1], vertexBuffer[i + 2]), b.set(vertexBuffer[i + 3], vertexBuffer[i + 4], vertexBuffer[i + 5]), c.set(vertexBuffer[i + 6], vertexBuffer[i + 7], vertexBuffer[i + 8]), uvA.set(uvBuffer[j + 0], uvBuffer[j + 1]), uvB.set(uvBuffer[j + 2], uvBuffer[j + 3]), uvC.set(uvBuffer[j + 4], uvBuffer[j + 5]), centroid.copy(a).add(b).add(c).divideScalar(3);
                        var azi = azimuth(centroid);
                        correctUV(uvA, j + 0, a, azi), correctUV(uvB, j + 2, b, azi), correctUV(uvC, j + 4, c, azi);
                    }
                })(), function() {
                    for(var i = 0; i < uvBuffer.length; i += 6){
                        var x0 = uvBuffer[i + 0], x1 = uvBuffer[i + 2], x2 = uvBuffer[i + 4], max = Math.max(x0, x1, x2), min = Math.min(x0, x1, x2);
                        max > 0.9 && min < 0.1 && (x0 < 0.2 && (uvBuffer[i + 0] += 1), x1 < 0.2 && (uvBuffer[i + 2] += 1), x2 < 0.2 && (uvBuffer[i + 4] += 1));
                    }
                }();
            }(), _this.setAttribute('position', new Float32BufferAttribute(vertexBuffer, 3)), _this.setAttribute('normal', new Float32BufferAttribute(vertexBuffer.slice(), 3)), _this.setAttribute('uv', new Float32BufferAttribute(uvBuffer, 2)), 0 === detail ? _this.computeVertexNormals() : _this.normalizeNormals(), _this;
        }
        return _inheritsLoose(PolyhedronBufferGeometry, _BufferGeometry), PolyhedronBufferGeometry;
    }(BufferGeometry), DodecahedronBufferGeometry = function(_PolyhedronBufferGeom) {
        function DodecahedronBufferGeometry(radius, detail) {
            void 0 === radius && (radius = 1), void 0 === detail && (detail = 0);
            var _this, t = (1 + Math.sqrt(5)) / 2, r = 1 / t, vertices = [
                -1,
                -1,
                -1,
                -1,
                -1,
                1,
                -1,
                1,
                -1,
                -1,
                1,
                1,
                1,
                -1,
                -1,
                1,
                -1,
                1,
                1,
                1,
                -1,
                1,
                1,
                1,
                0,
                -r,
                -t,
                0,
                -r,
                t,
                0,
                r,
                -t,
                0,
                r,
                t,
                -r,
                -t,
                0,
                -r,
                t,
                0,
                r,
                -t,
                0,
                r,
                t,
                0,
                -t,
                0,
                -r,
                t,
                0,
                -r,
                -t,
                0,
                r,
                t,
                0,
                r
            ];
            return (_this = _PolyhedronBufferGeom.call(this, vertices, [
                3,
                11,
                7,
                3,
                7,
                15,
                3,
                15,
                13,
                7,
                19,
                17,
                7,
                17,
                6,
                7,
                6,
                15,
                17,
                4,
                8,
                17,
                8,
                10,
                17,
                10,
                6,
                8,
                0,
                16,
                8,
                16,
                2,
                8,
                2,
                10,
                0,
                12,
                1,
                0,
                1,
                18,
                0,
                18,
                16,
                6,
                10,
                2,
                6,
                2,
                13,
                6,
                13,
                15,
                2,
                16,
                18,
                2,
                18,
                3,
                2,
                3,
                13,
                18,
                1,
                9,
                18,
                9,
                11,
                18,
                11,
                3,
                4,
                14,
                12,
                4,
                12,
                0,
                4,
                0,
                8,
                11,
                9,
                5,
                11,
                5,
                19,
                11,
                19,
                7,
                19,
                5,
                14,
                19,
                14,
                4,
                19,
                4,
                17,
                1,
                12,
                14,
                1,
                14,
                5,
                1,
                5,
                9
            ], radius, detail) || this).type = 'DodecahedronBufferGeometry', _this.parameters = {
                radius: radius,
                detail: detail
            }, _this;
        }
        return _inheritsLoose(DodecahedronBufferGeometry, _PolyhedronBufferGeom), DodecahedronBufferGeometry;
    }(PolyhedronBufferGeometry), DodecahedronGeometry = function(_Geometry) {
        function DodecahedronGeometry(radius, detail) {
            var _this;
            return (_this = _Geometry.call(this) || this).type = 'DodecahedronGeometry', _this.parameters = {
                radius: radius,
                detail: detail
            }, _this.fromBufferGeometry(new DodecahedronBufferGeometry(radius, detail)), _this.mergeVertices(), _this;
        }
        return _inheritsLoose(DodecahedronGeometry, _Geometry), DodecahedronGeometry;
    }(Geometry), _v0$2 = new Vector3(), _v1$5 = new Vector3(), _normal$1 = new Vector3(), _triangle = new Triangle(), EdgesGeometry = function(_BufferGeometry) {
        function EdgesGeometry(geometry, thresholdAngle) {
            (_this = _BufferGeometry.call(this) || this).type = 'EdgesGeometry', _this.parameters = {
                thresholdAngle: thresholdAngle
            }, thresholdAngle = void 0 !== thresholdAngle ? thresholdAngle : 1, geometry.isGeometry && (geometry = new BufferGeometry().fromGeometry(geometry));
            for(var _this, thresholdDot = Math.cos(MathUtils.DEG2RAD * thresholdAngle), indexAttr = geometry.getIndex(), positionAttr = geometry.getAttribute('position'), indexCount = indexAttr ? indexAttr.count : positionAttr.count, indexArr = [
                0,
                0,
                0
            ], vertKeys = [
                'a',
                'b',
                'c'
            ], hashes = [
                ,
                ,
                , 
            ], edgeData = {}, vertices = [], i = 0; i < indexCount; i += 3){
                indexAttr ? (indexArr[0] = indexAttr.getX(i), indexArr[1] = indexAttr.getX(i + 1), indexArr[2] = indexAttr.getX(i + 2)) : (indexArr[0] = i, indexArr[1] = i + 1, indexArr[2] = i + 2);
                var a = _triangle.a, b = _triangle.b, c = _triangle.c;
                if (a.fromBufferAttribute(positionAttr, indexArr[0]), b.fromBufferAttribute(positionAttr, indexArr[1]), c.fromBufferAttribute(positionAttr, indexArr[2]), _triangle.getNormal(_normal$1), hashes[0] = Math.round(10000 * a.x) + "," + Math.round(10000 * a.y) + "," + Math.round(10000 * a.z), hashes[1] = Math.round(10000 * b.x) + "," + Math.round(10000 * b.y) + "," + Math.round(10000 * b.z), hashes[2] = Math.round(10000 * c.x) + "," + Math.round(10000 * c.y) + "," + Math.round(10000 * c.z), hashes[0] !== hashes[1] && hashes[1] !== hashes[2] && hashes[2] !== hashes[0]) for(var j = 0; j < 3; j++){
                    var jNext = (j + 1) % 3, vecHash0 = hashes[j], vecHash1 = hashes[jNext], v0 = _triangle[vertKeys[j]], v1 = _triangle[vertKeys[jNext]], hash = vecHash0 + "_" + vecHash1, reverseHash = vecHash1 + "_" + vecHash0;
                    reverseHash in edgeData && edgeData[reverseHash] ? (_normal$1.dot(edgeData[reverseHash].normal) <= thresholdDot && (vertices.push(v0.x, v0.y, v0.z), vertices.push(v1.x, v1.y, v1.z)), edgeData[reverseHash] = null) : hash in edgeData || (edgeData[hash] = {
                        index0: indexArr[j],
                        index1: indexArr[jNext],
                        normal: _normal$1.clone()
                    });
                }
            }
            for(var key in edgeData)if (edgeData[key]) {
                var _edgeData$key = edgeData[key], index0 = _edgeData$key.index0, index1 = _edgeData$key.index1;
                _v0$2.fromBufferAttribute(positionAttr, index0), _v1$5.fromBufferAttribute(positionAttr, index1), vertices.push(_v0$2.x, _v0$2.y, _v0$2.z), vertices.push(_v1$5.x, _v1$5.y, _v1$5.z);
            }
            return _this.setAttribute('position', new Float32BufferAttribute(vertices, 3)), _this;
        }
        return _inheritsLoose(EdgesGeometry, _BufferGeometry), EdgesGeometry;
    }(BufferGeometry), Earcut = {
        triangulate: function(data, holeIndices, dim) {
            dim = dim || 2;
            var minX, minY, maxX, maxY, x, y, invSize, hasHoles = holeIndices && holeIndices.length, outerLen = hasHoles ? holeIndices[0] * dim : data.length, outerNode = linkedList(data, 0, outerLen, dim, !0), triangles = [];
            if (!outerNode || outerNode.next === outerNode.prev) return triangles;
            if (hasHoles && (outerNode = function(data, holeIndices, outerNode, dim) {
                var i, len, start, end, list, queue = [];
                for(i = 0, len = holeIndices.length; i < len; i++)start = holeIndices[i] * dim, end = i < len - 1 ? holeIndices[i + 1] * dim : data.length, (list = linkedList(data, start, end, dim, !1)) === list.next && (list.steiner = !0), queue.push(function(start) {
                    var p = start, leftmost = start;
                    do (p.x < leftmost.x || p.x === leftmost.x && p.y < leftmost.y) && (leftmost = p), p = p.next;
                    while (p !== start)
                    return leftmost;
                }(list));
                for(queue.sort(compareX), i = 0; i < queue.length; i++)(function(hole, outerNode) {
                    if (outerNode = function(hole, outerNode) {
                        var m, p, m1, p1 = outerNode, hx = hole.x, hy = hole.y, qx = -1 / 0;
                        do {
                            if (hy <= p1.y && hy >= p1.next.y && p1.next.y !== p1.y) {
                                var x = p1.x + (hy - p1.y) * (p1.next.x - p1.x) / (p1.next.y - p1.y);
                                if (x <= hx && x > qx) {
                                    if (qx = x, x === hx) {
                                        if (hy === p1.y) return p1;
                                        if (hy === p1.next.y) return p1.next;
                                    }
                                    m1 = p1.x < p1.next.x ? p1 : p1.next;
                                }
                            }
                            p1 = p1.next;
                        }while (p1 !== outerNode)
                        if (!m1) return null;
                        if (hx === qx) return m1;
                        var tan, stop = m1, mx = m1.x, my = m1.y, tanMin = 1 / 0;
                        p1 = m1;
                        do hx >= p1.x && p1.x >= mx && hx !== p1.x && pointInTriangle(hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p1.x, p1.y) && (tan = Math.abs(hy - p1.y) / (hx - p1.x), locallyInside(p1, hole) && (tan < tanMin || tan === tanMin && (p1.x > m1.x || p1.x === m1.x && (m = m1, p = p1, 0 > area(m.prev, m, p.prev) && 0 > area(p.next, m, m.next)))) && (m1 = p1, tanMin = tan)), p1 = p1.next;
                        while (p1 !== stop)
                        return m1;
                    }(hole, outerNode)) {
                        var b = splitPolygon(outerNode, hole);
                        filterPoints(outerNode, outerNode.next), filterPoints(b, b.next);
                    }
                })(queue[i], outerNode), outerNode = filterPoints(outerNode, outerNode.next);
                return outerNode;
            }(data, holeIndices, outerNode, dim)), data.length > 80 * dim) {
                minX = maxX = data[0], minY = maxY = data[1];
                for(var i = dim; i < outerLen; i += dim)x = data[i], y = data[i + 1], x < minX && (minX = x), y < minY && (minY = y), x > maxX && (maxX = x), y > maxY && (maxY = y);
                invSize = 0 !== (invSize = Math.max(maxX - minX, maxY - minY)) ? 1 / invSize : 0;
            }
            return function earcutLinked(ear, triangles, dim, minX, minY, invSize, pass) {
                if (ear) {
                    !pass && invSize && function(start, minX, minY, invSize) {
                        var p = start;
                        do null === p.z && (p.z = zOrder(p.x, p.y, minX, minY, invSize)), p.prevZ = p.prev, p.nextZ = p.next, p = p.next;
                        while (p !== start)
                        p.prevZ.nextZ = null, p.prevZ = null, function(list) {
                            var i, p, q, e, tail, numMerges, pSize, qSize, inSize = 1;
                            do {
                                for(p = list, list = null, tail = null, numMerges = 0; p;){
                                    for(numMerges++, q = p, pSize = 0, i = 0; i < inSize && (pSize++, q = q.nextZ); i++);
                                    for(qSize = inSize; pSize > 0 || qSize > 0 && q;)0 !== pSize && (0 === qSize || !q || p.z <= q.z) ? (e = p, p = p.nextZ, pSize--) : (e = q, q = q.nextZ, qSize--), tail ? tail.nextZ = e : list = e, e.prevZ = tail, tail = e;
                                    p = q;
                                }
                                tail.nextZ = null, inSize *= 2;
                            }while (numMerges > 1)
                        }(p);
                    }(ear, minX, minY, invSize);
                    for(var prev, next, stop = ear; ear.prev !== ear.next;){
                        if (prev = ear.prev, next = ear.next, invSize ? function(ear, minX, minY, invSize) {
                            var a = ear.prev, c = ear.next;
                            if (area(a, ear, c) >= 0) return !1;
                            for(var minTX = a.x < ear.x ? a.x < c.x ? a.x : c.x : ear.x < c.x ? ear.x : c.x, minTY = a.y < ear.y ? a.y < c.y ? a.y : c.y : ear.y < c.y ? ear.y : c.y, maxTX = a.x > ear.x ? a.x > c.x ? a.x : c.x : ear.x > c.x ? ear.x : c.x, maxTY = a.y > ear.y ? a.y > c.y ? a.y : c.y : ear.y > c.y ? ear.y : c.y, minZ = zOrder(minTX, minTY, minX, minY, invSize), maxZ = zOrder(maxTX, maxTY, minX, minY, invSize), p = ear.prevZ, n = ear.nextZ; p && p.z >= minZ && n && n.z <= maxZ;){
                                if (p !== ear.prev && p !== ear.next && pointInTriangle(a.x, a.y, ear.x, ear.y, c.x, c.y, p.x, p.y) && area(p.prev, p, p.next) >= 0 || (p = p.prevZ, n !== ear.prev && n !== ear.next && pointInTriangle(a.x, a.y, ear.x, ear.y, c.x, c.y, n.x, n.y) && area(n.prev, n, n.next) >= 0)) return !1;
                                n = n.nextZ;
                            }
                            for(; p && p.z >= minZ;){
                                if (p !== ear.prev && p !== ear.next && pointInTriangle(a.x, a.y, ear.x, ear.y, c.x, c.y, p.x, p.y) && area(p.prev, p, p.next) >= 0) return !1;
                                p = p.prevZ;
                            }
                            for(; n && n.z <= maxZ;){
                                if (n !== ear.prev && n !== ear.next && pointInTriangle(a.x, a.y, ear.x, ear.y, c.x, c.y, n.x, n.y) && area(n.prev, n, n.next) >= 0) return !1;
                                n = n.nextZ;
                            }
                            return !0;
                        }(ear, minX, minY, invSize) : function(ear) {
                            var a = ear.prev, c = ear.next;
                            if (area(a, ear, c) >= 0) return !1;
                            for(var p = ear.next.next; p !== ear.prev;){
                                if (pointInTriangle(a.x, a.y, ear.x, ear.y, c.x, c.y, p.x, p.y) && area(p.prev, p, p.next) >= 0) return !1;
                                p = p.next;
                            }
                            return !0;
                        }(ear)) {
                            triangles.push(prev.i / dim), triangles.push(ear.i / dim), triangles.push(next.i / dim), removeNode(ear), ear = next.next, stop = next.next;
                            continue;
                        }
                        if ((ear = next) === stop) {
                            pass ? 1 === pass ? earcutLinked(ear = function(start, triangles, dim) {
                                var p = start;
                                do {
                                    var a = p.prev, b = p.next.next;
                                    !equals(a, b) && intersects(a, p, p.next, b) && locallyInside(a, b) && locallyInside(b, a) && (triangles.push(a.i / dim), triangles.push(p.i / dim), triangles.push(b.i / dim), removeNode(p), removeNode(p.next), p = start = b), p = p.next;
                                }while (p !== start)
                                return filterPoints(p);
                            }(filterPoints(ear), triangles, dim), triangles, dim, minX, minY, invSize, 2) : 2 === pass && function(start, triangles, dim, minX, minY, invSize) {
                                var a = start;
                                do {
                                    for(var a1, b, b1 = a.next.next; b1 !== a.prev;){
                                        if (a.i !== b1.i && (a1 = a, b = b1, a1.next.i !== b.i && a1.prev.i !== b.i && !function(a, b) {
                                            var p = a;
                                            do {
                                                if (p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i && intersects(p, p.next, a, b)) return !0;
                                                p = p.next;
                                            }while (p !== a)
                                            return !1;
                                        }(a1, b) && (locallyInside(a1, b) && locallyInside(b, a1) && function(a, b) {
                                            var p = a, inside = !1, px = (a.x + b.x) / 2, py = (a.y + b.y) / 2;
                                            do p.y > py != p.next.y > py && p.next.y !== p.y && px < (p.next.x - p.x) * (py - p.y) / (p.next.y - p.y) + p.x && (inside = !inside), p = p.next;
                                            while (p !== a)
                                            return inside;
                                        }(a1, b) && (area(a1.prev, a1, b.prev) || area(a1, b.prev, b)) || equals(a1, b) && area(a1.prev, a1, a1.next) > 0 && area(b.prev, b, b.next) > 0))) {
                                            var c = splitPolygon(a, b1);
                                            a = filterPoints(a, a.next), c = filterPoints(c, c.next), earcutLinked(a, triangles, dim, minX, minY, invSize), earcutLinked(c, triangles, dim, minX, minY, invSize);
                                            return;
                                        }
                                        b1 = b1.next;
                                    }
                                    a = a.next;
                                }while (a !== start)
                            }(ear, triangles, dim, minX, minY, invSize) : earcutLinked(filterPoints(ear), triangles, dim, minX, minY, invSize, 1);
                            break;
                        }
                    }
                }
            }(outerNode, triangles, dim, minX, minY, invSize), triangles;
        }
    };
    function linkedList(data, start, end, dim, clockwise) {
        var i, last;
        if (clockwise === function(data, start, end, dim) {
            for(var sum = 0, i = start, j = end - dim; i < end; i += dim)sum += (data[j] - data[i]) * (data[i + 1] + data[j + 1]), j = i;
            return sum;
        }(data, start, end, dim) > 0) for(i = start; i < end; i += dim)last = insertNode(i, data[i], data[i + 1], last);
        else for(i = end - dim; i >= start; i -= dim)last = insertNode(i, data[i], data[i + 1], last);
        return last && equals(last, last.next) && (removeNode(last), last = last.next), last;
    }
    function filterPoints(start, end) {
        if (!start) return start;
        end || (end = start);
        var again, p = start;
        do if (again = !1, !p.steiner && (equals(p, p.next) || 0 === area(p.prev, p, p.next))) {
            if (removeNode(p), (p = end = p.prev) === p.next) break;
            again = !0;
        } else p = p.next;
        while (again || p !== end)
        return end;
    }
    function compareX(a, b) {
        return a.x - b.x;
    }
    function zOrder(x, y, minX, minY, invSize) {
        return (x = ((x = ((x = ((x = ((x = 32767 * (x - minX) * invSize) | x << 8) & 0x00FF00FF) | x << 4) & 0x0F0F0F0F) | x << 2) & 0x33333333) | x << 1) & 0x55555555) | (y = ((y = ((y = ((y = ((y = 32767 * (y - minY) * invSize) | y << 8) & 0x00FF00FF) | y << 4) & 0x0F0F0F0F) | y << 2) & 0x33333333) | y << 1) & 0x55555555) << 1;
    }
    function pointInTriangle(ax, ay, bx, by, cx, cy, px, py) {
        return (cx - px) * (ay - py) - (ax - px) * (cy - py) >= 0 && (ax - px) * (by - py) - (bx - px) * (ay - py) >= 0 && (bx - px) * (cy - py) - (cx - px) * (by - py) >= 0;
    }
    function area(p, q, r) {
        return (q.y - p.y) * (r.x - q.x) - (q.x - p.x) * (r.y - q.y);
    }
    function equals(p1, p2) {
        return p1.x === p2.x && p1.y === p2.y;
    }
    function intersects(p1, q1, p2, q2) {
        var o1 = sign(area(p1, q1, p2)), o2 = sign(area(p1, q1, q2)), o3 = sign(area(p2, q2, p1)), o4 = sign(area(p2, q2, q1));
        return !!(o1 !== o2 && o3 !== o4 || 0 === o1 && onSegment(p1, p2, q1) || 0 === o2 && onSegment(p1, q2, q1) || 0 === o3 && onSegment(p2, p1, q2) || 0 === o4 && onSegment(p2, q1, q2));
    }
    function onSegment(p, q, r) {
        return q.x <= Math.max(p.x, r.x) && q.x >= Math.min(p.x, r.x) && q.y <= Math.max(p.y, r.y) && q.y >= Math.min(p.y, r.y);
    }
    function sign(num) {
        return num > 0 ? 1 : num < 0 ? -1 : 0;
    }
    function locallyInside(a, b) {
        return 0 > area(a.prev, a, a.next) ? area(a, b, a.next) >= 0 && area(a, a.prev, b) >= 0 : 0 > area(a, b, a.prev) || 0 > area(a, a.next, b);
    }
    function splitPolygon(a, b) {
        var a2 = new Node(a.i, a.x, a.y), b2 = new Node(b.i, b.x, b.y), an = a.next, bp = b.prev;
        return a.next = b, b.prev = a, a2.next = an, an.prev = a2, b2.next = a2, a2.prev = b2, bp.next = b2, b2.prev = bp, b2;
    }
    function insertNode(i, x, y, last) {
        var p = new Node(i, x, y);
        return last ? (p.next = last.next, p.prev = last, last.next.prev = p, last.next = p) : (p.prev = p, p.next = p), p;
    }
    function removeNode(p) {
        p.next.prev = p.prev, p.prev.next = p.next, p.prevZ && (p.prevZ.nextZ = p.nextZ), p.nextZ && (p.nextZ.prevZ = p.prevZ);
    }
    function Node(i, x, y) {
        this.i = i, this.x = x, this.y = y, this.prev = null, this.next = null, this.z = null, this.prevZ = null, this.nextZ = null, this.steiner = !1;
    }
    var ShapeUtils = {
        area: function(contour) {
            for(var n = contour.length, a = 0.0, p = n - 1, q = 0; q < n; p = q++)a += contour[p].x * contour[q].y - contour[q].x * contour[p].y;
            return 0.5 * a;
        },
        isClockWise: function(pts) {
            return 0 > ShapeUtils.area(pts);
        },
        triangulateShape: function(contour, holes) {
            var vertices = [], holeIndices = [], faces = [];
            removeDupEndPts(contour), addContour(vertices, contour);
            var holeIndex = contour.length;
            holes.forEach(removeDupEndPts);
            for(var i = 0; i < holes.length; i++)holeIndices.push(holeIndex), holeIndex += holes[i].length, addContour(vertices, holes[i]);
            for(var triangles = Earcut.triangulate(vertices, holeIndices), _i = 0; _i < triangles.length; _i += 3)faces.push(triangles.slice(_i, _i + 3));
            return faces;
        }
    };
    function removeDupEndPts(points) {
        var l = points.length;
        l > 2 && points[l - 1].equals(points[0]) && points.pop();
    }
    function addContour(vertices, contour) {
        for(var i = 0; i < contour.length; i++)vertices.push(contour[i].x), vertices.push(contour[i].y);
    }
    var ExtrudeBufferGeometry = function(_BufferGeometry) {
        function ExtrudeBufferGeometry(shapes, options) {
            (_this = _BufferGeometry.call(this) || this).type = 'ExtrudeBufferGeometry', _this.parameters = {
                shapes: shapes,
                options: options
            }, shapes = Array.isArray(shapes) ? shapes : [
                shapes
            ];
            for(var _this, scope = _assertThisInitialized(_this), verticesArray = [], uvArray = [], i = 0, l = shapes.length; i < l; i++)!function(shape) {
                var placeholder = [], curveSegments = void 0 !== options.curveSegments ? options.curveSegments : 12, steps = void 0 !== options.steps ? options.steps : 1, depth = void 0 !== options.depth ? options.depth : 100, bevelEnabled = void 0 === options.bevelEnabled || options.bevelEnabled, bevelThickness = void 0 !== options.bevelThickness ? options.bevelThickness : 6, bevelSize = void 0 !== options.bevelSize ? options.bevelSize : bevelThickness - 2, bevelOffset = void 0 !== options.bevelOffset ? options.bevelOffset : 0, bevelSegments = void 0 !== options.bevelSegments ? options.bevelSegments : 3, extrudePath = options.extrudePath, uvgen = void 0 !== options.UVGenerator ? options.UVGenerator : WorldUVGenerator;
                void 0 !== options.amount && (console.warn('THREE.ExtrudeBufferGeometry: amount has been renamed to depth.'), depth = options.amount);
                var extrudePts, extrudeByPath = !1;
                extrudePath && (extrudePts = extrudePath.getSpacedPoints(steps), extrudeByPath = !0, bevelEnabled = !1, splineTube = extrudePath.computeFrenetFrames(steps, !1), binormal = new Vector3(), normal = new Vector3(), position2 = new Vector3()), bevelEnabled || (bevelSegments = 0, bevelThickness = 0, bevelSize = 0, bevelOffset = 0);
                var shapePoints = shape.extractPoints(curveSegments), vertices = shapePoints.shape, holes = shapePoints.holes;
                if (!ShapeUtils.isClockWise(vertices)) {
                    vertices = vertices.reverse();
                    for(var h = 0, hl = holes.length; h < hl; h++){
                        var ahole = holes[h];
                        ShapeUtils.isClockWise(ahole) && (holes[h] = ahole.reverse());
                    }
                }
                for(var faces = ShapeUtils.triangulateShape(vertices, holes), contour = vertices, _h = 0, _hl = holes.length; _h < _hl; _h++){
                    var _ahole = holes[_h];
                    vertices = vertices.concat(_ahole);
                }
                function scalePt2(pt, vec, size) {
                    return vec || console.error('THREE.ExtrudeGeometry: vec does not exist'), vec.clone().multiplyScalar(size).add(pt);
                }
                var vlen = vertices.length, flen = faces.length;
                function getBevelVec(inPt, inPrev, inNext) {
                    var v_trans_x, v_trans_y, shrink_by, v_prev_x = inPt.x - inPrev.x, v_prev_y = inPt.y - inPrev.y, v_next_x = inNext.x - inPt.x, v_next_y = inNext.y - inPt.y, v_prev_lensq = v_prev_x * v_prev_x + v_prev_y * v_prev_y;
                    if (Math.abs(v_prev_x * v_next_y - v_prev_y * v_next_x) > Number.EPSILON) {
                        var v_prev_len = Math.sqrt(v_prev_lensq), v_next_len = Math.sqrt(v_next_x * v_next_x + v_next_y * v_next_y), ptPrevShift_x = inPrev.x - v_prev_y / v_prev_len, ptPrevShift_y = inPrev.y + v_prev_x / v_prev_len, sf = ((inNext.x - v_next_y / v_next_len - ptPrevShift_x) * v_next_y - (inNext.y + v_next_x / v_next_len - ptPrevShift_y) * v_next_x) / (v_prev_x * v_next_y - v_prev_y * v_next_x), v_trans_lensq = (v_trans_x = ptPrevShift_x + v_prev_x * sf - inPt.x) * v_trans_x + (v_trans_y = ptPrevShift_y + v_prev_y * sf - inPt.y) * v_trans_y;
                        if (v_trans_lensq <= 2) return new Vector2(v_trans_x, v_trans_y);
                        shrink_by = Math.sqrt(v_trans_lensq / 2);
                    } else {
                        var direction_eq = !1;
                        v_prev_x > Number.EPSILON ? v_next_x > Number.EPSILON && (direction_eq = !0) : v_prev_x < -Number.EPSILON ? v_next_x < -Number.EPSILON && (direction_eq = !0) : Math.sign(v_prev_y) === Math.sign(v_next_y) && (direction_eq = !0), direction_eq ? (v_trans_x = -v_prev_y, v_trans_y = v_prev_x, shrink_by = Math.sqrt(v_prev_lensq)) : (v_trans_x = v_prev_x, v_trans_y = v_prev_y, shrink_by = Math.sqrt(v_prev_lensq / 2));
                    }
                    return new Vector2(v_trans_x / shrink_by, v_trans_y / shrink_by);
                }
                for(var contourMovements = [], _i = 0, il = contour.length, j = il - 1, k = _i + 1; _i < il; _i++, j++, k++)j === il && (j = 0), k === il && (k = 0), contourMovements[_i] = getBevelVec(contour[_i], contour[j], contour[k]);
                for(var splineTube, binormal, normal, position2, oneHoleMovements, holesMovements = [], verticesMovements = contourMovements.concat(), _h2 = 0, _hl2 = holes.length; _h2 < _hl2; _h2++){
                    var _ahole2 = holes[_h2];
                    oneHoleMovements = [];
                    for(var _i2 = 0, _il = _ahole2.length, _j = _il - 1, _k = _i2 + 1; _i2 < _il; _i2++, _j++, _k++)_j === _il && (_j = 0), _k === _il && (_k = 0), oneHoleMovements[_i2] = getBevelVec(_ahole2[_i2], _ahole2[_j], _ahole2[_k]);
                    holesMovements.push(oneHoleMovements), verticesMovements = verticesMovements.concat(oneHoleMovements);
                }
                for(var b = 0; b < bevelSegments; b++){
                    for(var t = b / bevelSegments, z = bevelThickness * Math.cos(t * Math.PI / 2), _bs = bevelSize * Math.sin(t * Math.PI / 2) + bevelOffset, _i3 = 0, _il2 = contour.length; _i3 < _il2; _i3++){
                        var vert = scalePt2(contour[_i3], contourMovements[_i3], _bs);
                        v(vert.x, vert.y, -z);
                    }
                    for(var _h3 = 0, _hl3 = holes.length; _h3 < _hl3; _h3++){
                        var _ahole3 = holes[_h3];
                        oneHoleMovements = holesMovements[_h3];
                        for(var _i4 = 0, _il3 = _ahole3.length; _i4 < _il3; _i4++){
                            var _vert = scalePt2(_ahole3[_i4], oneHoleMovements[_i4], _bs);
                            v(_vert.x, _vert.y, -z);
                        }
                    }
                }
                for(var bs = bevelSize + bevelOffset, _i5 = 0; _i5 < vlen; _i5++){
                    var _vert2 = bevelEnabled ? scalePt2(vertices[_i5], verticesMovements[_i5], bs) : vertices[_i5];
                    extrudeByPath ? (normal.copy(splineTube.normals[0]).multiplyScalar(_vert2.x), binormal.copy(splineTube.binormals[0]).multiplyScalar(_vert2.y), position2.copy(extrudePts[0]).add(normal).add(binormal), v(position2.x, position2.y, position2.z)) : v(_vert2.x, _vert2.y, 0);
                }
                for(var s = 1; s <= steps; s++)for(var _i6 = 0; _i6 < vlen; _i6++){
                    var _vert3 = bevelEnabled ? scalePt2(vertices[_i6], verticesMovements[_i6], bs) : vertices[_i6];
                    extrudeByPath ? (normal.copy(splineTube.normals[s]).multiplyScalar(_vert3.x), binormal.copy(splineTube.binormals[s]).multiplyScalar(_vert3.y), position2.copy(extrudePts[s]).add(normal).add(binormal), v(position2.x, position2.y, position2.z)) : v(_vert3.x, _vert3.y, depth / steps * s);
                }
                for(var _b = bevelSegments - 1; _b >= 0; _b--){
                    for(var _t = _b / bevelSegments, _z = bevelThickness * Math.cos(_t * Math.PI / 2), _bs2 = bevelSize * Math.sin(_t * Math.PI / 2) + bevelOffset, _i7 = 0, _il4 = contour.length; _i7 < _il4; _i7++){
                        var _vert4 = scalePt2(contour[_i7], contourMovements[_i7], _bs2);
                        v(_vert4.x, _vert4.y, depth + _z);
                    }
                    for(var _h4 = 0, _hl4 = holes.length; _h4 < _hl4; _h4++){
                        var _ahole4 = holes[_h4];
                        oneHoleMovements = holesMovements[_h4];
                        for(var _i8 = 0, _il5 = _ahole4.length; _i8 < _il5; _i8++){
                            var _vert5 = scalePt2(_ahole4[_i8], oneHoleMovements[_i8], _bs2);
                            extrudeByPath ? v(_vert5.x, _vert5.y + extrudePts[steps - 1].y, extrudePts[steps - 1].x + _z) : v(_vert5.x, _vert5.y, depth + _z);
                        }
                    }
                }
                function sidewalls(contour, layeroffset) {
                    for(var i = contour.length; --i >= 0;){
                        var _j2 = i, _k2 = i - 1;
                        _k2 < 0 && (_k2 = contour.length - 1);
                        for(var _s = 0, sl = steps + 2 * bevelSegments; _s < sl; _s++){
                            var slen1 = vlen * _s, slen2 = vlen * (_s + 1);
                            !function(a, b, c, d) {
                                addVertex(a), addVertex(b), addVertex(d), addVertex(b), addVertex(c), addVertex(d);
                                var nextIndex = verticesArray.length / 3, uvs = uvgen.generateSideWallUV(scope, verticesArray, nextIndex - 6, nextIndex - 3, nextIndex - 2, nextIndex - 1);
                                addUV(uvs[0]), addUV(uvs[1]), addUV(uvs[3]), addUV(uvs[1]), addUV(uvs[2]), addUV(uvs[3]);
                            }(layeroffset + _j2 + slen1, layeroffset + _k2 + slen1, layeroffset + _k2 + slen2, layeroffset + _j2 + slen2);
                        }
                    }
                }
                function v(x, y, z) {
                    placeholder.push(x), placeholder.push(y), placeholder.push(z);
                }
                function f3(a, b, c) {
                    addVertex(a), addVertex(b), addVertex(c);
                    var nextIndex = verticesArray.length / 3, uvs = uvgen.generateTopUV(scope, verticesArray, nextIndex - 3, nextIndex - 2, nextIndex - 1);
                    addUV(uvs[0]), addUV(uvs[1]), addUV(uvs[2]);
                }
                function addVertex(index) {
                    verticesArray.push(placeholder[3 * index + 0]), verticesArray.push(placeholder[3 * index + 1]), verticesArray.push(placeholder[3 * index + 2]);
                }
                function addUV(vector2) {
                    uvArray.push(vector2.x), uvArray.push(vector2.y);
                }
                (function() {
                    var start = verticesArray.length / 3;
                    if (bevelEnabled) {
                        for(var offset = 0 * vlen, _i9 = 0; _i9 < flen; _i9++){
                            var face = faces[_i9];
                            f3(face[2] + offset, face[1] + offset, face[0] + offset);
                        }
                        offset = vlen * (steps + 2 * bevelSegments);
                        for(var _i10 = 0; _i10 < flen; _i10++){
                            var _face = faces[_i10];
                            f3(_face[0] + offset, _face[1] + offset, _face[2] + offset);
                        }
                    } else {
                        for(var _i11 = 0; _i11 < flen; _i11++){
                            var _face2 = faces[_i11];
                            f3(_face2[2], _face2[1], _face2[0]);
                        }
                        for(var _i12 = 0; _i12 < flen; _i12++){
                            var _face3 = faces[_i12];
                            f3(_face3[0] + vlen * steps, _face3[1] + vlen * steps, _face3[2] + vlen * steps);
                        }
                    }
                    scope.addGroup(start, verticesArray.length / 3 - start, 0);
                })(), function() {
                    var start = verticesArray.length / 3, layeroffset = 0;
                    sidewalls(contour, 0), layeroffset += contour.length;
                    for(var _h5 = 0, _hl5 = holes.length; _h5 < _hl5; _h5++){
                        var _ahole5 = holes[_h5];
                        sidewalls(_ahole5, layeroffset), layeroffset += _ahole5.length;
                    }
                    scope.addGroup(start, verticesArray.length / 3 - start, 1);
                }();
            }(shapes[i]);
            return _this.setAttribute('position', new Float32BufferAttribute(verticesArray, 3)), _this.setAttribute('uv', new Float32BufferAttribute(uvArray, 2)), _this.computeVertexNormals(), _this;
        }
        return _inheritsLoose(ExtrudeBufferGeometry, _BufferGeometry), ExtrudeBufferGeometry.prototype.toJSON = function() {
            var data = BufferGeometry.prototype.toJSON.call(this);
            return function(shapes, options, data) {
                if (data.shapes = [], Array.isArray(shapes)) for(var i = 0, l = shapes.length; i < l; i++){
                    var shape = shapes[i];
                    data.shapes.push(shape.uuid);
                }
                else data.shapes.push(shapes.uuid);
                return void 0 !== options.extrudePath && (data.options.extrudePath = options.extrudePath.toJSON()), data;
            }(this.parameters.shapes, this.parameters.options, data);
        }, ExtrudeBufferGeometry;
    }(BufferGeometry), WorldUVGenerator = {
        generateTopUV: function(geometry, vertices, indexA, indexB, indexC) {
            var a_x = vertices[3 * indexA], a_y = vertices[3 * indexA + 1], b_x = vertices[3 * indexB], b_y = vertices[3 * indexB + 1], c_x = vertices[3 * indexC], c_y = vertices[3 * indexC + 1];
            return [
                new Vector2(a_x, a_y),
                new Vector2(b_x, b_y),
                new Vector2(c_x, c_y)
            ];
        },
        generateSideWallUV: function(geometry, vertices, indexA, indexB, indexC, indexD) {
            var a_x = vertices[3 * indexA], a_y = vertices[3 * indexA + 1], a_z = vertices[3 * indexA + 2], b_x = vertices[3 * indexB], b_y = vertices[3 * indexB + 1], b_z = vertices[3 * indexB + 2], c_x = vertices[3 * indexC], c_y = vertices[3 * indexC + 1], c_z = vertices[3 * indexC + 2], d_x = vertices[3 * indexD], d_y = vertices[3 * indexD + 1], d_z = vertices[3 * indexD + 2];
            return 0.01 > Math.abs(a_y - b_y) ? [
                new Vector2(a_x, 1 - a_z),
                new Vector2(b_x, 1 - b_z),
                new Vector2(c_x, 1 - c_z),
                new Vector2(d_x, 1 - d_z)
            ] : [
                new Vector2(a_y, 1 - a_z),
                new Vector2(b_y, 1 - b_z),
                new Vector2(c_y, 1 - c_z),
                new Vector2(d_y, 1 - d_z)
            ];
        }
    }, ExtrudeGeometry = function(_Geometry) {
        function ExtrudeGeometry(shapes, options) {
            var _this;
            return (_this = _Geometry.call(this) || this).type = 'ExtrudeGeometry', _this.parameters = {
                shapes: shapes,
                options: options
            }, _this.fromBufferGeometry(new ExtrudeBufferGeometry(shapes, options)), _this.mergeVertices(), _this;
        }
        return _inheritsLoose(ExtrudeGeometry, _Geometry), ExtrudeGeometry.prototype.toJSON = function() {
            var data = _Geometry.prototype.toJSON.call(this);
            return function(shapes, options, data) {
                if (data.shapes = [], Array.isArray(shapes)) for(var i = 0, l = shapes.length; i < l; i++){
                    var shape = shapes[i];
                    data.shapes.push(shape.uuid);
                }
                else data.shapes.push(shapes.uuid);
                return void 0 !== options.extrudePath && (data.options.extrudePath = options.extrudePath.toJSON()), data;
            }(this.parameters.shapes, this.parameters.options, data);
        }, ExtrudeGeometry;
    }(Geometry), IcosahedronBufferGeometry = function(_PolyhedronBufferGeom) {
        function IcosahedronBufferGeometry(radius, detail) {
            void 0 === radius && (radius = 1), void 0 === detail && (detail = 0);
            var _this, t = (1 + Math.sqrt(5)) / 2, vertices = [
                -1,
                t,
                0,
                1,
                t,
                0,
                -1,
                -t,
                0,
                1,
                -t,
                0,
                0,
                -1,
                t,
                0,
                1,
                t,
                0,
                -1,
                -t,
                0,
                1,
                -t,
                t,
                0,
                -1,
                t,
                0,
                1,
                -t,
                0,
                -1,
                -t,
                0,
                1
            ];
            return (_this = _PolyhedronBufferGeom.call(this, vertices, [
                0,
                11,
                5,
                0,
                5,
                1,
                0,
                1,
                7,
                0,
                7,
                10,
                0,
                10,
                11,
                1,
                5,
                9,
                5,
                11,
                4,
                11,
                10,
                2,
                10,
                7,
                6,
                7,
                1,
                8,
                3,
                9,
                4,
                3,
                4,
                2,
                3,
                2,
                6,
                3,
                6,
                8,
                3,
                8,
                9,
                4,
                9,
                5,
                2,
                4,
                11,
                6,
                2,
                10,
                8,
                6,
                7,
                9,
                8,
                1
            ], radius, detail) || this).type = 'IcosahedronBufferGeometry', _this.parameters = {
                radius: radius,
                detail: detail
            }, _this;
        }
        return _inheritsLoose(IcosahedronBufferGeometry, _PolyhedronBufferGeom), IcosahedronBufferGeometry;
    }(PolyhedronBufferGeometry), IcosahedronGeometry = function(_Geometry) {
        function IcosahedronGeometry(radius, detail) {
            var _this;
            return (_this = _Geometry.call(this) || this).type = 'IcosahedronGeometry', _this.parameters = {
                radius: radius,
                detail: detail
            }, _this.fromBufferGeometry(new IcosahedronBufferGeometry(radius, detail)), _this.mergeVertices(), _this;
        }
        return _inheritsLoose(IcosahedronGeometry, _Geometry), IcosahedronGeometry;
    }(Geometry), LatheBufferGeometry = function(_BufferGeometry) {
        function LatheBufferGeometry(points, segments, phiStart, phiLength) {
            void 0 === segments && (segments = 12), void 0 === phiStart && (phiStart = 0), void 0 === phiLength && (phiLength = 2 * Math.PI), (_this = _BufferGeometry.call(this) || this).type = 'LatheBufferGeometry', _this.parameters = {
                points: points,
                segments: segments,
                phiStart: phiStart,
                phiLength: phiLength
            }, segments = Math.floor(segments), phiLength = MathUtils.clamp(phiLength, 0, 2 * Math.PI);
            for(var _this, indices = [], vertices = [], uvs = [], inverseSegments = 1.0 / segments, vertex = new Vector3(), uv = new Vector2(), i = 0; i <= segments; i++)for(var phi = phiStart + i * inverseSegments * phiLength, sin = Math.sin(phi), cos = Math.cos(phi), j = 0; j <= points.length - 1; j++)vertex.x = points[j].x * sin, vertex.y = points[j].y, vertex.z = points[j].x * cos, vertices.push(vertex.x, vertex.y, vertex.z), uv.x = i / segments, uv.y = j / (points.length - 1), uvs.push(uv.x, uv.y);
            for(var _i = 0; _i < segments; _i++)for(var _j = 0; _j < points.length - 1; _j++){
                var base = _j + _i * points.length, b = base + points.length, c = base + points.length + 1, d = base + 1;
                indices.push(base, b, d), indices.push(b, c, d);
            }
            if (_this.setIndex(indices), _this.setAttribute('position', new Float32BufferAttribute(vertices, 3)), _this.setAttribute('uv', new Float32BufferAttribute(uvs, 2)), _this.computeVertexNormals(), phiLength === 2 * Math.PI) for(var normals = _this.attributes.normal.array, n1 = new Vector3(), n2 = new Vector3(), n = new Vector3(), _base = segments * points.length * 3, _i2 = 0, _j2 = 0; _i2 < points.length; _i2++, _j2 += 3)n1.x = normals[_j2 + 0], n1.y = normals[_j2 + 1], n1.z = normals[_j2 + 2], n2.x = normals[_base + _j2 + 0], n2.y = normals[_base + _j2 + 1], n2.z = normals[_base + _j2 + 2], n.addVectors(n1, n2).normalize(), normals[_j2 + 0] = normals[_base + _j2 + 0] = n.x, normals[_j2 + 1] = normals[_base + _j2 + 1] = n.y, normals[_j2 + 2] = normals[_base + _j2 + 2] = n.z;
            return _this;
        }
        return _inheritsLoose(LatheBufferGeometry, _BufferGeometry), LatheBufferGeometry;
    }(BufferGeometry), LatheGeometry = function(_Geometry) {
        function LatheGeometry(points, segments, phiStart, phiLength) {
            var _this;
            return (_this = _Geometry.call(this) || this).type = 'LatheGeometry', _this.parameters = {
                points: points,
                segments: segments,
                phiStart: phiStart,
                phiLength: phiLength
            }, _this.fromBufferGeometry(new LatheBufferGeometry(points, segments, phiStart, phiLength)), _this.mergeVertices(), _this;
        }
        return _inheritsLoose(LatheGeometry, _Geometry), LatheGeometry;
    }(Geometry), OctahedronBufferGeometry = function(_PolyhedronBufferGeom) {
        function OctahedronBufferGeometry(radius, detail) {
            var _this;
            return void 0 === radius && (radius = 1), void 0 === detail && (detail = 0), (_this = _PolyhedronBufferGeom.call(this, [
                1,
                0,
                0,
                -1,
                0,
                0,
                0,
                1,
                0,
                0,
                -1,
                0,
                0,
                0,
                1,
                0,
                0,
                -1
            ], [
                0,
                2,
                4,
                0,
                4,
                3,
                0,
                3,
                5,
                0,
                5,
                2,
                1,
                2,
                5,
                1,
                5,
                3,
                1,
                3,
                4,
                1,
                4,
                2
            ], radius, detail) || this).type = 'OctahedronBufferGeometry', _this.parameters = {
                radius: radius,
                detail: detail
            }, _this;
        }
        return _inheritsLoose(OctahedronBufferGeometry, _PolyhedronBufferGeom), OctahedronBufferGeometry;
    }(PolyhedronBufferGeometry), OctahedronGeometry = function(_Geometry) {
        function OctahedronGeometry(radius, detail) {
            var _this;
            return (_this = _Geometry.call(this) || this).type = 'OctahedronGeometry', _this.parameters = {
                radius: radius,
                detail: detail
            }, _this.fromBufferGeometry(new OctahedronBufferGeometry(radius, detail)), _this.mergeVertices(), _this;
        }
        return _inheritsLoose(OctahedronGeometry, _Geometry), OctahedronGeometry;
    }(Geometry);
    function ParametricBufferGeometry(func, slices, stacks) {
        BufferGeometry.call(this), this.type = 'ParametricBufferGeometry', this.parameters = {
            func: func,
            slices: slices,
            stacks: stacks
        };
        var indices = [], vertices = [], normals = [], uvs = [], normal = new Vector3(), p0 = new Vector3(), p1 = new Vector3(), pu = new Vector3(), pv = new Vector3();
        func.length < 3 && console.error('THREE.ParametricGeometry: Function must now modify a Vector3 as third parameter.');
        for(var sliceCount = slices + 1, i = 0; i <= stacks; i++)for(var v = i / stacks, j = 0; j <= slices; j++){
            var u = j / slices;
            func(u, v, p0), vertices.push(p0.x, p0.y, p0.z), u - 0.00001 >= 0 ? (func(u - 0.00001, v, p1), pu.subVectors(p0, p1)) : (func(u + 0.00001, v, p1), pu.subVectors(p1, p0)), v - 0.00001 >= 0 ? (func(u, v - 0.00001, p1), pv.subVectors(p0, p1)) : (func(u, v + 0.00001, p1), pv.subVectors(p1, p0)), normal.crossVectors(pu, pv).normalize(), normals.push(normal.x, normal.y, normal.z), uvs.push(u, v);
        }
        for(var _i = 0; _i < stacks; _i++)for(var _j = 0; _j < slices; _j++){
            var a = _i * sliceCount + _j, b = _i * sliceCount + _j + 1, c = (_i + 1) * sliceCount + _j + 1, d = (_i + 1) * sliceCount + _j;
            indices.push(a, b, d), indices.push(b, c, d);
        }
        this.setIndex(indices), this.setAttribute('position', new Float32BufferAttribute(vertices, 3)), this.setAttribute('normal', new Float32BufferAttribute(normals, 3)), this.setAttribute('uv', new Float32BufferAttribute(uvs, 2));
    }
    function ParametricGeometry(func, slices, stacks) {
        Geometry.call(this), this.type = 'ParametricGeometry', this.parameters = {
            func: func,
            slices: slices,
            stacks: stacks
        }, this.fromBufferGeometry(new ParametricBufferGeometry(func, slices, stacks)), this.mergeVertices();
    }
    ParametricBufferGeometry.prototype = Object.create(BufferGeometry.prototype), ParametricBufferGeometry.prototype.constructor = ParametricBufferGeometry, ParametricGeometry.prototype = Object.create(Geometry.prototype), ParametricGeometry.prototype.constructor = ParametricGeometry;
    var PlaneGeometry = function(_Geometry) {
        function PlaneGeometry(width, height, widthSegments, heightSegments) {
            var _this;
            return (_this = _Geometry.call(this) || this).type = 'PlaneGeometry', _this.parameters = {
                width: width,
                height: height,
                widthSegments: widthSegments,
                heightSegments: heightSegments
            }, _this.fromBufferGeometry(new PlaneBufferGeometry(width, height, widthSegments, heightSegments)), _this.mergeVertices(), _this;
        }
        return _inheritsLoose(PlaneGeometry, _Geometry), PlaneGeometry;
    }(Geometry), PolyhedronGeometry = function(_Geometry) {
        function PolyhedronGeometry(vertices, indices, radius, detail) {
            var _this;
            return (_this = _Geometry.call(this) || this).type = 'PolyhedronGeometry', _this.parameters = {
                vertices: vertices,
                indices: indices,
                radius: radius,
                detail: detail
            }, _this.fromBufferGeometry(new PolyhedronBufferGeometry(vertices, indices, radius, detail)), _this.mergeVertices(), _this;
        }
        return _inheritsLoose(PolyhedronGeometry, _Geometry), PolyhedronGeometry;
    }(Geometry), RingBufferGeometry = function(_BufferGeometry) {
        function RingBufferGeometry(innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength) {
            void 0 === innerRadius && (innerRadius = 0.5), void 0 === outerRadius && (outerRadius = 1), void 0 === thetaSegments && (thetaSegments = 8), void 0 === phiSegments && (phiSegments = 1), void 0 === thetaStart && (thetaStart = 0), void 0 === thetaLength && (thetaLength = 2 * Math.PI), (_this = _BufferGeometry.call(this) || this).type = 'RingBufferGeometry', _this.parameters = {
                innerRadius: innerRadius,
                outerRadius: outerRadius,
                thetaSegments: thetaSegments,
                phiSegments: phiSegments,
                thetaStart: thetaStart,
                thetaLength: thetaLength
            }, thetaSegments = Math.max(3, thetaSegments);
            for(var _this, indices = [], vertices = [], normals = [], uvs = [], radius = innerRadius, radiusStep = (outerRadius - innerRadius) / (phiSegments = Math.max(1, phiSegments)), vertex = new Vector3(), uv = new Vector2(), j = 0; j <= phiSegments; j++){
                for(var i = 0; i <= thetaSegments; i++){
                    var segment = thetaStart + i / thetaSegments * thetaLength;
                    vertex.x = radius * Math.cos(segment), vertex.y = radius * Math.sin(segment), vertices.push(vertex.x, vertex.y, vertex.z), normals.push(0, 0, 1), uv.x = (vertex.x / outerRadius + 1) / 2, uv.y = (vertex.y / outerRadius + 1) / 2, uvs.push(uv.x, uv.y);
                }
                radius += radiusStep;
            }
            for(var _j = 0; _j < phiSegments; _j++)for(var thetaSegmentLevel = _j * (thetaSegments + 1), _i = 0; _i < thetaSegments; _i++){
                var _segment = _i + thetaSegmentLevel, b = _segment + thetaSegments + 1, c = _segment + thetaSegments + 2, d = _segment + 1;
                indices.push(_segment, b, d), indices.push(b, c, d);
            }
            return _this.setIndex(indices), _this.setAttribute('position', new Float32BufferAttribute(vertices, 3)), _this.setAttribute('normal', new Float32BufferAttribute(normals, 3)), _this.setAttribute('uv', new Float32BufferAttribute(uvs, 2)), _this;
        }
        return _inheritsLoose(RingBufferGeometry, _BufferGeometry), RingBufferGeometry;
    }(BufferGeometry), RingGeometry = function(_Geometry) {
        function RingGeometry(innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength) {
            var _this;
            return (_this = _Geometry.call(this) || this).type = 'RingGeometry', _this.parameters = {
                innerRadius: innerRadius,
                outerRadius: outerRadius,
                thetaSegments: thetaSegments,
                phiSegments: phiSegments,
                thetaStart: thetaStart,
                thetaLength: thetaLength
            }, _this.fromBufferGeometry(new RingBufferGeometry(innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength)), _this.mergeVertices(), _this;
        }
        return _inheritsLoose(RingGeometry, _Geometry), RingGeometry;
    }(Geometry), ShapeBufferGeometry = function(_BufferGeometry) {
        function ShapeBufferGeometry(shapes, curveSegments) {
            void 0 === curveSegments && (curveSegments = 12), (_this = _BufferGeometry.call(this) || this).type = 'ShapeBufferGeometry', _this.parameters = {
                shapes: shapes,
                curveSegments: curveSegments
            };
            var _this, indices = [], vertices = [], normals = [], uvs = [], groupStart = 0, groupCount = 0;
            if (!1 === Array.isArray(shapes)) addShape(shapes);
            else for(var i = 0; i < shapes.length; i++)addShape(shapes[i]), _this.addGroup(groupStart, groupCount, i), groupStart += groupCount, groupCount = 0;
            function addShape(shape) {
                var indexOffset = vertices.length / 3, points = shape.extractPoints(curveSegments), shapeVertices = points.shape, shapeHoles = points.holes;
                !1 === ShapeUtils.isClockWise(shapeVertices) && (shapeVertices = shapeVertices.reverse());
                for(var _i = 0, l = shapeHoles.length; _i < l; _i++){
                    var shapeHole = shapeHoles[_i];
                    !0 === ShapeUtils.isClockWise(shapeHole) && (shapeHoles[_i] = shapeHole.reverse());
                }
                for(var faces = ShapeUtils.triangulateShape(shapeVertices, shapeHoles), _i2 = 0, _l = shapeHoles.length; _i2 < _l; _i2++){
                    var _shapeHole = shapeHoles[_i2];
                    shapeVertices = shapeVertices.concat(_shapeHole);
                }
                for(var _i3 = 0, _l2 = shapeVertices.length; _i3 < _l2; _i3++){
                    var vertex = shapeVertices[_i3];
                    vertices.push(vertex.x, vertex.y, 0), normals.push(0, 0, 1), uvs.push(vertex.x, vertex.y);
                }
                for(var _i4 = 0, _l3 = faces.length; _i4 < _l3; _i4++){
                    var face = faces[_i4], a = face[0] + indexOffset, b = face[1] + indexOffset, c = face[2] + indexOffset;
                    indices.push(a, b, c), groupCount += 3;
                }
            }
            return _this.setIndex(indices), _this.setAttribute('position', new Float32BufferAttribute(vertices, 3)), _this.setAttribute('normal', new Float32BufferAttribute(normals, 3)), _this.setAttribute('uv', new Float32BufferAttribute(uvs, 2)), _this;
        }
        return _inheritsLoose(ShapeBufferGeometry, _BufferGeometry), ShapeBufferGeometry.prototype.toJSON = function() {
            var data = BufferGeometry.prototype.toJSON.call(this);
            return function(shapes, data) {
                if (data.shapes = [], Array.isArray(shapes)) for(var i = 0, l = shapes.length; i < l; i++){
                    var shape = shapes[i];
                    data.shapes.push(shape.uuid);
                }
                else data.shapes.push(shapes.uuid);
                return data;
            }(this.parameters.shapes, data);
        }, ShapeBufferGeometry;
    }(BufferGeometry), ShapeGeometry = function(_Geometry) {
        function ShapeGeometry(shapes, curveSegments) {
            var _this;
            return (_this = _Geometry.call(this) || this).type = 'ShapeGeometry', 'object' == typeof curveSegments && (console.warn('THREE.ShapeGeometry: Options parameter has been removed.'), curveSegments = curveSegments.curveSegments), _this.parameters = {
                shapes: shapes,
                curveSegments: curveSegments
            }, _this.fromBufferGeometry(new ShapeBufferGeometry(shapes, curveSegments)), _this.mergeVertices(), _this;
        }
        return _inheritsLoose(ShapeGeometry, _Geometry), ShapeGeometry.prototype.toJSON = function() {
            var data = Geometry.prototype.toJSON.call(this);
            return function(shapes, data) {
                if (data.shapes = [], Array.isArray(shapes)) for(var i = 0, l = shapes.length; i < l; i++){
                    var shape = shapes[i];
                    data.shapes.push(shape.uuid);
                }
                else data.shapes.push(shapes.uuid);
                return data;
            }(this.parameters.shapes, data);
        }, ShapeGeometry;
    }(Geometry), SphereBufferGeometry = function(_BufferGeometry) {
        function SphereBufferGeometry(radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength) {
            void 0 === radius && (radius = 1), void 0 === widthSegments && (widthSegments = 8), void 0 === heightSegments && (heightSegments = 6), void 0 === phiStart && (phiStart = 0), void 0 === phiLength && (phiLength = 2 * Math.PI), void 0 === thetaStart && (thetaStart = 0), void 0 === thetaLength && (thetaLength = Math.PI), (_this = _BufferGeometry.call(this) || this).type = 'SphereBufferGeometry', _this.parameters = {
                radius: radius,
                widthSegments: widthSegments,
                heightSegments: heightSegments,
                phiStart: phiStart,
                phiLength: phiLength,
                thetaStart: thetaStart,
                thetaLength: thetaLength
            }, widthSegments = Math.max(3, Math.floor(widthSegments)), heightSegments = Math.max(2, Math.floor(heightSegments));
            for(var _this, thetaEnd = Math.min(thetaStart + thetaLength, Math.PI), index = 0, grid = [], vertex = new Vector3(), normal = new Vector3(), indices = [], vertices = [], normals = [], uvs = [], iy = 0; iy <= heightSegments; iy++){
                var verticesRow = [], v = iy / heightSegments, uOffset = 0;
                0 == iy && 0 == thetaStart ? uOffset = 0.5 / widthSegments : iy == heightSegments && thetaEnd == Math.PI && (uOffset = -0.5 / widthSegments);
                for(var ix = 0; ix <= widthSegments; ix++){
                    var u = ix / widthSegments;
                    vertex.x = -radius * Math.cos(phiStart + u * phiLength) * Math.sin(thetaStart + v * thetaLength), vertex.y = radius * Math.cos(thetaStart + v * thetaLength), vertex.z = radius * Math.sin(phiStart + u * phiLength) * Math.sin(thetaStart + v * thetaLength), vertices.push(vertex.x, vertex.y, vertex.z), normal.copy(vertex).normalize(), normals.push(normal.x, normal.y, normal.z), uvs.push(u + uOffset, 1 - v), verticesRow.push(index++);
                }
                grid.push(verticesRow);
            }
            for(var _iy = 0; _iy < heightSegments; _iy++)for(var _ix = 0; _ix < widthSegments; _ix++){
                var a = grid[_iy][_ix + 1], b = grid[_iy][_ix], c = grid[_iy + 1][_ix], d = grid[_iy + 1][_ix + 1];
                (0 !== _iy || thetaStart > 0) && indices.push(a, b, d), (_iy !== heightSegments - 1 || thetaEnd < Math.PI) && indices.push(b, c, d);
            }
            return _this.setIndex(indices), _this.setAttribute('position', new Float32BufferAttribute(vertices, 3)), _this.setAttribute('normal', new Float32BufferAttribute(normals, 3)), _this.setAttribute('uv', new Float32BufferAttribute(uvs, 2)), _this;
        }
        return _inheritsLoose(SphereBufferGeometry, _BufferGeometry), SphereBufferGeometry;
    }(BufferGeometry), SphereGeometry = function(_Geometry) {
        function SphereGeometry(radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength) {
            var _this;
            return (_this = _Geometry.call(this) || this).type = 'SphereGeometry', _this.parameters = {
                radius: radius,
                widthSegments: widthSegments,
                heightSegments: heightSegments,
                phiStart: phiStart,
                phiLength: phiLength,
                thetaStart: thetaStart,
                thetaLength: thetaLength
            }, _this.fromBufferGeometry(new SphereBufferGeometry(radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength)), _this.mergeVertices(), _this;
        }
        return _inheritsLoose(SphereGeometry, _Geometry), SphereGeometry;
    }(Geometry), TetrahedronBufferGeometry = function(_PolyhedronBufferGeom) {
        function TetrahedronBufferGeometry(radius, detail) {
            var _this;
            return void 0 === radius && (radius = 1), void 0 === detail && (detail = 0), (_this = _PolyhedronBufferGeom.call(this, [
                1,
                1,
                1,
                -1,
                -1,
                1,
                -1,
                1,
                -1,
                1,
                -1,
                -1
            ], [
                2,
                1,
                0,
                0,
                3,
                2,
                1,
                3,
                0,
                2,
                3,
                1
            ], radius, detail) || this).type = 'TetrahedronBufferGeometry', _this.parameters = {
                radius: radius,
                detail: detail
            }, _this;
        }
        return _inheritsLoose(TetrahedronBufferGeometry, _PolyhedronBufferGeom), TetrahedronBufferGeometry;
    }(PolyhedronBufferGeometry), TetrahedronGeometry = function(_Geometry) {
        function TetrahedronGeometry(radius, detail) {
            var _this;
            return (_this = _Geometry.call(this) || this).type = 'TetrahedronGeometry', _this.parameters = {
                radius: radius,
                detail: detail
            }, _this.fromBufferGeometry(new TetrahedronBufferGeometry(radius, detail)), _this.mergeVertices(), _this;
        }
        return _inheritsLoose(TetrahedronGeometry, _Geometry), TetrahedronGeometry;
    }(Geometry), TextBufferGeometry = function(_ExtrudeBufferGeometr) {
        function TextBufferGeometry(text, parameters) {
            void 0 === parameters && (parameters = {});
            var _this, font = parameters.font;
            if (!(font && font.isFont)) return console.error('THREE.TextGeometry: font parameter is not an instance of THREE.Font.'), new BufferGeometry();
            var shapes = font.generateShapes(text, parameters.size);
            return parameters.depth = void 0 !== parameters.height ? parameters.height : 50, void 0 === parameters.bevelThickness && (parameters.bevelThickness = 10), void 0 === parameters.bevelSize && (parameters.bevelSize = 8), void 0 === parameters.bevelEnabled && (parameters.bevelEnabled = !1), (_this = _ExtrudeBufferGeometr.call(this, shapes, parameters) || this).type = 'TextBufferGeometry', _this;
        }
        return _inheritsLoose(TextBufferGeometry, _ExtrudeBufferGeometr), TextBufferGeometry;
    }(ExtrudeBufferGeometry), TextGeometry = function(_Geometry) {
        function TextGeometry(text, parameters) {
            var _this;
            return (_this = _Geometry.call(this) || this).type = 'TextGeometry', _this.parameters = {
                text: text,
                parameters: parameters
            }, _this.fromBufferGeometry(new TextBufferGeometry(text, parameters)), _this.mergeVertices(), _this;
        }
        return _inheritsLoose(TextGeometry, _Geometry), TextGeometry;
    }(Geometry), TorusBufferGeometry = function(_BufferGeometry) {
        function TorusBufferGeometry(radius, tube, radialSegments, tubularSegments, arc) {
            void 0 === radius && (radius = 1), void 0 === tube && (tube = 0.4), void 0 === radialSegments && (radialSegments = 8), void 0 === tubularSegments && (tubularSegments = 6), void 0 === arc && (arc = 2 * Math.PI), (_this = _BufferGeometry.call(this) || this).type = 'TorusBufferGeometry', _this.parameters = {
                radius: radius,
                tube: tube,
                radialSegments: radialSegments,
                tubularSegments: tubularSegments,
                arc: arc
            }, radialSegments = Math.floor(radialSegments), tubularSegments = Math.floor(tubularSegments);
            for(var _this, indices = [], vertices = [], normals = [], uvs = [], center = new Vector3(), vertex = new Vector3(), normal = new Vector3(), j = 0; j <= radialSegments; j++)for(var i = 0; i <= tubularSegments; i++){
                var u = i / tubularSegments * arc, v = j / radialSegments * Math.PI * 2;
                vertex.x = (radius + tube * Math.cos(v)) * Math.cos(u), vertex.y = (radius + tube * Math.cos(v)) * Math.sin(u), vertex.z = tube * Math.sin(v), vertices.push(vertex.x, vertex.y, vertex.z), center.x = radius * Math.cos(u), center.y = radius * Math.sin(u), normal.subVectors(vertex, center).normalize(), normals.push(normal.x, normal.y, normal.z), uvs.push(i / tubularSegments), uvs.push(j / radialSegments);
            }
            for(var _j = 1; _j <= radialSegments; _j++)for(var _i = 1; _i <= tubularSegments; _i++){
                var a = (tubularSegments + 1) * _j + _i - 1, b = (tubularSegments + 1) * (_j - 1) + _i - 1, c = (tubularSegments + 1) * (_j - 1) + _i, d = (tubularSegments + 1) * _j + _i;
                indices.push(a, b, d), indices.push(b, c, d);
            }
            return _this.setIndex(indices), _this.setAttribute('position', new Float32BufferAttribute(vertices, 3)), _this.setAttribute('normal', new Float32BufferAttribute(normals, 3)), _this.setAttribute('uv', new Float32BufferAttribute(uvs, 2)), _this;
        }
        return _inheritsLoose(TorusBufferGeometry, _BufferGeometry), TorusBufferGeometry;
    }(BufferGeometry), TorusGeometry = function(_Geometry) {
        function TorusGeometry(radius, tube, radialSegments, tubularSegments, arc) {
            var _this;
            return (_this = _Geometry.call(this) || this).type = 'TorusGeometry', _this.parameters = {
                radius: radius,
                tube: tube,
                radialSegments: radialSegments,
                tubularSegments: tubularSegments,
                arc: arc
            }, _this.fromBufferGeometry(new TorusBufferGeometry(radius, tube, radialSegments, tubularSegments, arc)), _this.mergeVertices(), _this;
        }
        return _inheritsLoose(TorusGeometry, _Geometry), TorusGeometry;
    }(Geometry), TorusKnotBufferGeometry = function(_BufferGeometry) {
        function TorusKnotBufferGeometry(radius, tube, tubularSegments, radialSegments, p, q) {
            void 0 === radius && (radius = 1), void 0 === tube && (tube = 0.4), void 0 === tubularSegments && (tubularSegments = 64), void 0 === radialSegments && (radialSegments = 8), void 0 === p && (p = 2), void 0 === q && (q = 3), (_this = _BufferGeometry.call(this) || this).type = 'TorusKnotBufferGeometry', _this.parameters = {
                radius: radius,
                tube: tube,
                tubularSegments: tubularSegments,
                radialSegments: radialSegments,
                p: p,
                q: q
            }, tubularSegments = Math.floor(tubularSegments), radialSegments = Math.floor(radialSegments);
            for(var _this, indices = [], vertices = [], normals = [], uvs = [], vertex = new Vector3(), normal = new Vector3(), P1 = new Vector3(), P2 = new Vector3(), B = new Vector3(), T = new Vector3(), N = new Vector3(), i = 0; i <= tubularSegments; ++i){
                var u = i / tubularSegments * p * Math.PI * 2;
                calculatePositionOnCurve(u, p, q, radius, P1), calculatePositionOnCurve(u + 0.01, p, q, radius, P2), T.subVectors(P2, P1), N.addVectors(P2, P1), B.crossVectors(T, N), N.crossVectors(B, T), B.normalize(), N.normalize();
                for(var j = 0; j <= radialSegments; ++j){
                    var v = j / radialSegments * Math.PI * 2, cx = -tube * Math.cos(v), cy = tube * Math.sin(v);
                    vertex.x = P1.x + (cx * N.x + cy * B.x), vertex.y = P1.y + (cx * N.y + cy * B.y), vertex.z = P1.z + (cx * N.z + cy * B.z), vertices.push(vertex.x, vertex.y, vertex.z), normal.subVectors(vertex, P1).normalize(), normals.push(normal.x, normal.y, normal.z), uvs.push(i / tubularSegments), uvs.push(j / radialSegments);
                }
            }
            for(var _j = 1; _j <= tubularSegments; _j++)for(var _i = 1; _i <= radialSegments; _i++){
                var a = (radialSegments + 1) * (_j - 1) + (_i - 1), b = (radialSegments + 1) * _j + (_i - 1), c = (radialSegments + 1) * _j + _i, d = (radialSegments + 1) * (_j - 1) + _i;
                indices.push(a, b, d), indices.push(b, c, d);
            }
            function calculatePositionOnCurve(u, p, q, radius, position) {
                var cu = Math.cos(u), su = Math.sin(u), quOverP = q / p * u, cs = Math.cos(quOverP);
                position.x = radius * (2 + cs) * 0.5 * cu, position.y = radius * (2 + cs) * su * 0.5, position.z = radius * Math.sin(quOverP) * 0.5;
            }
            return _this.setIndex(indices), _this.setAttribute('position', new Float32BufferAttribute(vertices, 3)), _this.setAttribute('normal', new Float32BufferAttribute(normals, 3)), _this.setAttribute('uv', new Float32BufferAttribute(uvs, 2)), _this;
        }
        return _inheritsLoose(TorusKnotBufferGeometry, _BufferGeometry), TorusKnotBufferGeometry;
    }(BufferGeometry), TorusKnotGeometry = function(_Geometry) {
        function TorusKnotGeometry(radius, tube, tubularSegments, radialSegments, p, q, heightScale) {
            var _this;
            return (_this = _Geometry.call(this) || this).type = 'TorusKnotGeometry', _this.parameters = {
                radius: radius,
                tube: tube,
                tubularSegments: tubularSegments,
                radialSegments: radialSegments,
                p: p,
                q: q
            }, void 0 !== heightScale && console.warn('THREE.TorusKnotGeometry: heightScale has been deprecated. Use .scale( x, y, z ) instead.'), _this.fromBufferGeometry(new TorusKnotBufferGeometry(radius, tube, tubularSegments, radialSegments, p, q)), _this.mergeVertices(), _this;
        }
        return _inheritsLoose(TorusKnotGeometry, _Geometry), TorusKnotGeometry;
    }(Geometry), TubeBufferGeometry = function(_BufferGeometry) {
        function TubeBufferGeometry(path, tubularSegments, radius, radialSegments, closed) {
            void 0 === tubularSegments && (tubularSegments = 64), void 0 === radius && (radius = 1), void 0 === radialSegments && (radialSegments = 8), void 0 === closed && (closed = !1), (_this = _BufferGeometry.call(this) || this).type = 'TubeBufferGeometry', _this.parameters = {
                path: path,
                tubularSegments: tubularSegments,
                radius: radius,
                radialSegments: radialSegments,
                closed: closed
            };
            var _this, frames = path.computeFrenetFrames(tubularSegments, closed);
            _this.tangents = frames.tangents, _this.normals = frames.normals, _this.binormals = frames.binormals;
            var vertex = new Vector3(), normal = new Vector3(), uv = new Vector2(), P = new Vector3(), vertices = [], normals = [], uvs = [], indices = [];
            function generateSegment(i) {
                P = path.getPointAt(i / tubularSegments, P);
                for(var N = frames.normals[i], B = frames.binormals[i], j = 0; j <= radialSegments; j++){
                    var v = j / radialSegments * Math.PI * 2, sin = Math.sin(v), cos = -Math.cos(v);
                    normal.x = cos * N.x + sin * B.x, normal.y = cos * N.y + sin * B.y, normal.z = cos * N.z + sin * B.z, normal.normalize(), normals.push(normal.x, normal.y, normal.z), vertex.x = P.x + radius * normal.x, vertex.y = P.y + radius * normal.y, vertex.z = P.z + radius * normal.z, vertices.push(vertex.x, vertex.y, vertex.z);
                }
            }
            return function() {
                for(var i = 0; i < tubularSegments; i++)generateSegment(i);
                generateSegment(!1 === closed ? tubularSegments : 0), function() {
                    for(var i = 0; i <= tubularSegments; i++)for(var j = 0; j <= radialSegments; j++)uv.x = i / tubularSegments, uv.y = j / radialSegments, uvs.push(uv.x, uv.y);
                }(), function() {
                    for(var j = 1; j <= tubularSegments; j++)for(var i = 1; i <= radialSegments; i++){
                        var a = (radialSegments + 1) * (j - 1) + (i - 1), b = (radialSegments + 1) * j + (i - 1), c = (radialSegments + 1) * j + i, d = (radialSegments + 1) * (j - 1) + i;
                        indices.push(a, b, d), indices.push(b, c, d);
                    }
                }();
            }(), _this.setIndex(indices), _this.setAttribute('position', new Float32BufferAttribute(vertices, 3)), _this.setAttribute('normal', new Float32BufferAttribute(normals, 3)), _this.setAttribute('uv', new Float32BufferAttribute(uvs, 2)), _this;
        }
        return _inheritsLoose(TubeBufferGeometry, _BufferGeometry), TubeBufferGeometry.prototype.toJSON = function() {
            var data = BufferGeometry.prototype.toJSON.call(this);
            return data.path = this.parameters.path.toJSON(), data;
        }, TubeBufferGeometry;
    }(BufferGeometry), TubeGeometry = function(_Geometry) {
        function TubeGeometry(path, tubularSegments, radius, radialSegments, closed, taper) {
            (_this = _Geometry.call(this) || this).type = 'TubeGeometry', _this.parameters = {
                path: path,
                tubularSegments: tubularSegments,
                radius: radius,
                radialSegments: radialSegments,
                closed: closed
            }, void 0 !== taper && console.warn('THREE.TubeGeometry: taper has been removed.');
            var _this, bufferGeometry = new TubeBufferGeometry(path, tubularSegments, radius, radialSegments, closed);
            return _this.tangents = bufferGeometry.tangents, _this.normals = bufferGeometry.normals, _this.binormals = bufferGeometry.binormals, _this.fromBufferGeometry(bufferGeometry), _this.mergeVertices(), _this;
        }
        return _inheritsLoose(TubeGeometry, _Geometry), TubeGeometry;
    }(Geometry), WireframeGeometry = function(_BufferGeometry) {
        function WireframeGeometry(geometry) {
            (_this = _BufferGeometry.call(this) || this).type = 'WireframeGeometry';
            var _this, vertices = [], edge = [
                0,
                0
            ], edges = {}, keys = [
                'a',
                'b',
                'c'
            ];
            if (geometry && geometry.isGeometry) {
                for(var faces = geometry.faces, i = 0, l = faces.length; i < l; i++)for(var face = faces[i], j = 0; j < 3; j++){
                    var edge1 = face[keys[j]], edge2 = face[keys[(j + 1) % 3]];
                    edge[0] = Math.min(edge1, edge2), edge[1] = Math.max(edge1, edge2);
                    var key = edge[0] + ',' + edge[1];
                    void 0 === edges[key] && (edges[key] = {
                        index1: edge[0],
                        index2: edge[1]
                    });
                }
                for(var _key in edges){
                    var e = edges[_key], vertex = geometry.vertices[e.index1];
                    vertices.push(vertex.x, vertex.y, vertex.z), vertex = geometry.vertices[e.index2], vertices.push(vertex.x, vertex.y, vertex.z);
                }
            } else if (geometry && geometry.isBufferGeometry) {
                var _vertex = new Vector3();
                if (null !== geometry.index) {
                    var position = geometry.attributes.position, indices = geometry.index, groups = geometry.groups;
                    0 === groups.length && (groups = [
                        {
                            start: 0,
                            count: indices.count,
                            materialIndex: 0
                        }
                    ]);
                    for(var o = 0, ol = groups.length; o < ol; ++o)for(var group = groups[o], start = group.start, count = group.count, _i = start, _l = start + count; _i < _l; _i += 3)for(var _j = 0; _j < 3; _j++){
                        var _edge = indices.getX(_i + _j), _edge2 = indices.getX(_i + (_j + 1) % 3);
                        edge[0] = Math.min(_edge, _edge2), edge[1] = Math.max(_edge, _edge2);
                        var _key2 = edge[0] + ',' + edge[1];
                        void 0 === edges[_key2] && (edges[_key2] = {
                            index1: edge[0],
                            index2: edge[1]
                        });
                    }
                    for(var _key3 in edges){
                        var _e = edges[_key3];
                        _vertex.fromBufferAttribute(position, _e.index1), vertices.push(_vertex.x, _vertex.y, _vertex.z), _vertex.fromBufferAttribute(position, _e.index2), vertices.push(_vertex.x, _vertex.y, _vertex.z);
                    }
                } else for(var _position = geometry.attributes.position, _i2 = 0, _l2 = _position.count / 3; _i2 < _l2; _i2++)for(var _j2 = 0; _j2 < 3; _j2++){
                    var index1 = 3 * _i2 + _j2;
                    _vertex.fromBufferAttribute(_position, index1), vertices.push(_vertex.x, _vertex.y, _vertex.z);
                    var index2 = 3 * _i2 + (_j2 + 1) % 3;
                    _vertex.fromBufferAttribute(_position, index2), vertices.push(_vertex.x, _vertex.y, _vertex.z);
                }
            }
            return _this.setAttribute('position', new Float32BufferAttribute(vertices, 3)), _this;
        }
        return _inheritsLoose(WireframeGeometry, _BufferGeometry), WireframeGeometry;
    }(BufferGeometry), Geometries = Object.freeze({
        __proto__: null,
        BoxGeometry: BoxGeometry,
        BoxBufferGeometry: BoxBufferGeometry,
        CircleGeometry: CircleGeometry,
        CircleBufferGeometry: CircleBufferGeometry,
        ConeGeometry: ConeGeometry,
        ConeBufferGeometry: ConeBufferGeometry,
        CylinderGeometry: CylinderGeometry,
        CylinderBufferGeometry: CylinderBufferGeometry,
        DodecahedronGeometry: DodecahedronGeometry,
        DodecahedronBufferGeometry: DodecahedronBufferGeometry,
        EdgesGeometry: EdgesGeometry,
        ExtrudeGeometry: ExtrudeGeometry,
        ExtrudeBufferGeometry: ExtrudeBufferGeometry,
        IcosahedronGeometry: IcosahedronGeometry,
        IcosahedronBufferGeometry: IcosahedronBufferGeometry,
        LatheGeometry: LatheGeometry,
        LatheBufferGeometry: LatheBufferGeometry,
        OctahedronGeometry: OctahedronGeometry,
        OctahedronBufferGeometry: OctahedronBufferGeometry,
        ParametricGeometry: ParametricGeometry,
        ParametricBufferGeometry: ParametricBufferGeometry,
        PlaneGeometry: PlaneGeometry,
        PlaneBufferGeometry: PlaneBufferGeometry,
        PolyhedronGeometry: PolyhedronGeometry,
        PolyhedronBufferGeometry: PolyhedronBufferGeometry,
        RingGeometry: RingGeometry,
        RingBufferGeometry: RingBufferGeometry,
        ShapeGeometry: ShapeGeometry,
        ShapeBufferGeometry: ShapeBufferGeometry,
        SphereGeometry: SphereGeometry,
        SphereBufferGeometry: SphereBufferGeometry,
        TetrahedronGeometry: TetrahedronGeometry,
        TetrahedronBufferGeometry: TetrahedronBufferGeometry,
        TextGeometry: TextGeometry,
        TextBufferGeometry: TextBufferGeometry,
        TorusGeometry: TorusGeometry,
        TorusBufferGeometry: TorusBufferGeometry,
        TorusKnotGeometry: TorusKnotGeometry,
        TorusKnotBufferGeometry: TorusKnotBufferGeometry,
        TubeGeometry: TubeGeometry,
        TubeBufferGeometry: TubeBufferGeometry,
        WireframeGeometry: WireframeGeometry
    });
    function ShadowMaterial(parameters) {
        Material.call(this), this.type = 'ShadowMaterial', this.color = new Color(0x000000), this.transparent = !0, this.setValues(parameters);
    }
    function RawShaderMaterial(parameters) {
        ShaderMaterial.call(this, parameters), this.type = 'RawShaderMaterial';
    }
    function MeshStandardMaterial(parameters) {
        Material.call(this), this.defines = {
            STANDARD: ''
        }, this.type = 'MeshStandardMaterial', this.color = new Color(0xffffff), this.roughness = 1.0, this.metalness = 0.0, this.map = null, this.lightMap = null, this.lightMapIntensity = 1.0, this.aoMap = null, this.aoMapIntensity = 1.0, this.emissive = new Color(0x000000), this.emissiveIntensity = 1.0, this.emissiveMap = null, this.bumpMap = null, this.bumpScale = 1, this.normalMap = null, this.normalMapType = 0, this.normalScale = new Vector2(1, 1), this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.roughnessMap = null, this.metalnessMap = null, this.alphaMap = null, this.envMap = null, this.envMapIntensity = 1.0, this.refractionRatio = 0.98, this.wireframe = !1, this.wireframeLinewidth = 1, this.wireframeLinecap = 'round', this.wireframeLinejoin = 'round', this.skinning = !1, this.morphTargets = !1, this.morphNormals = !1, this.vertexTangents = !1, this.setValues(parameters);
    }
    function MeshPhysicalMaterial(parameters) {
        MeshStandardMaterial.call(this), this.defines = {
            STANDARD: '',
            PHYSICAL: ''
        }, this.type = 'MeshPhysicalMaterial', this.clearcoat = 0.0, this.clearcoatMap = null, this.clearcoatRoughness = 0.0, this.clearcoatRoughnessMap = null, this.clearcoatNormalScale = new Vector2(1, 1), this.clearcoatNormalMap = null, this.reflectivity = 0.5, Object.defineProperty(this, 'ior', {
            get: function() {
                return (1 + 0.4 * this.reflectivity) / (1 - 0.4 * this.reflectivity);
            },
            set: function(ior) {
                this.reflectivity = MathUtils.clamp(2.5 * (ior - 1) / (ior + 1), 0, 1);
            }
        }), this.sheen = null, this.transmission = 0.0, this.transmissionMap = null, this.setValues(parameters);
    }
    function MeshPhongMaterial(parameters) {
        Material.call(this), this.type = 'MeshPhongMaterial', this.color = new Color(0xffffff), this.specular = new Color(0x111111), this.shininess = 30, this.map = null, this.lightMap = null, this.lightMapIntensity = 1.0, this.aoMap = null, this.aoMapIntensity = 1.0, this.emissive = new Color(0x000000), this.emissiveIntensity = 1.0, this.emissiveMap = null, this.bumpMap = null, this.bumpScale = 1, this.normalMap = null, this.normalMapType = 0, this.normalScale = new Vector2(1, 1), this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.specularMap = null, this.alphaMap = null, this.envMap = null, this.combine = 0, this.reflectivity = 1, this.refractionRatio = 0.98, this.wireframe = !1, this.wireframeLinewidth = 1, this.wireframeLinecap = 'round', this.wireframeLinejoin = 'round', this.skinning = !1, this.morphTargets = !1, this.morphNormals = !1, this.setValues(parameters);
    }
    function MeshToonMaterial(parameters) {
        Material.call(this), this.defines = {
            TOON: ''
        }, this.type = 'MeshToonMaterial', this.color = new Color(0xffffff), this.map = null, this.gradientMap = null, this.lightMap = null, this.lightMapIntensity = 1.0, this.aoMap = null, this.aoMapIntensity = 1.0, this.emissive = new Color(0x000000), this.emissiveIntensity = 1.0, this.emissiveMap = null, this.bumpMap = null, this.bumpScale = 1, this.normalMap = null, this.normalMapType = 0, this.normalScale = new Vector2(1, 1), this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.alphaMap = null, this.wireframe = !1, this.wireframeLinewidth = 1, this.wireframeLinecap = 'round', this.wireframeLinejoin = 'round', this.skinning = !1, this.morphTargets = !1, this.morphNormals = !1, this.setValues(parameters);
    }
    function MeshNormalMaterial(parameters) {
        Material.call(this), this.type = 'MeshNormalMaterial', this.bumpMap = null, this.bumpScale = 1, this.normalMap = null, this.normalMapType = 0, this.normalScale = new Vector2(1, 1), this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.wireframe = !1, this.wireframeLinewidth = 1, this.fog = !1, this.skinning = !1, this.morphTargets = !1, this.morphNormals = !1, this.setValues(parameters);
    }
    function MeshLambertMaterial(parameters) {
        Material.call(this), this.type = 'MeshLambertMaterial', this.color = new Color(0xffffff), this.map = null, this.lightMap = null, this.lightMapIntensity = 1.0, this.aoMap = null, this.aoMapIntensity = 1.0, this.emissive = new Color(0x000000), this.emissiveIntensity = 1.0, this.emissiveMap = null, this.specularMap = null, this.alphaMap = null, this.envMap = null, this.combine = 0, this.reflectivity = 1, this.refractionRatio = 0.98, this.wireframe = !1, this.wireframeLinewidth = 1, this.wireframeLinecap = 'round', this.wireframeLinejoin = 'round', this.skinning = !1, this.morphTargets = !1, this.morphNormals = !1, this.setValues(parameters);
    }
    function MeshMatcapMaterial(parameters) {
        Material.call(this), this.defines = {
            MATCAP: ''
        }, this.type = 'MeshMatcapMaterial', this.color = new Color(0xffffff), this.matcap = null, this.map = null, this.bumpMap = null, this.bumpScale = 1, this.normalMap = null, this.normalMapType = 0, this.normalScale = new Vector2(1, 1), this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.alphaMap = null, this.skinning = !1, this.morphTargets = !1, this.morphNormals = !1, this.setValues(parameters);
    }
    function LineDashedMaterial(parameters) {
        LineBasicMaterial.call(this), this.type = 'LineDashedMaterial', this.scale = 1, this.dashSize = 3, this.gapSize = 1, this.setValues(parameters);
    }
    ShadowMaterial.prototype = Object.create(Material.prototype), ShadowMaterial.prototype.constructor = ShadowMaterial, ShadowMaterial.prototype.isShadowMaterial = !0, ShadowMaterial.prototype.copy = function(source) {
        return Material.prototype.copy.call(this, source), this.color.copy(source.color), this;
    }, RawShaderMaterial.prototype = Object.create(ShaderMaterial.prototype), RawShaderMaterial.prototype.constructor = RawShaderMaterial, RawShaderMaterial.prototype.isRawShaderMaterial = !0, MeshStandardMaterial.prototype = Object.create(Material.prototype), MeshStandardMaterial.prototype.constructor = MeshStandardMaterial, MeshStandardMaterial.prototype.isMeshStandardMaterial = !0, MeshStandardMaterial.prototype.copy = function(source) {
        return Material.prototype.copy.call(this, source), this.defines = {
            STANDARD: ''
        }, this.color.copy(source.color), this.roughness = source.roughness, this.metalness = source.metalness, this.map = source.map, this.lightMap = source.lightMap, this.lightMapIntensity = source.lightMapIntensity, this.aoMap = source.aoMap, this.aoMapIntensity = source.aoMapIntensity, this.emissive.copy(source.emissive), this.emissiveMap = source.emissiveMap, this.emissiveIntensity = source.emissiveIntensity, this.bumpMap = source.bumpMap, this.bumpScale = source.bumpScale, this.normalMap = source.normalMap, this.normalMapType = source.normalMapType, this.normalScale.copy(source.normalScale), this.displacementMap = source.displacementMap, this.displacementScale = source.displacementScale, this.displacementBias = source.displacementBias, this.roughnessMap = source.roughnessMap, this.metalnessMap = source.metalnessMap, this.alphaMap = source.alphaMap, this.envMap = source.envMap, this.envMapIntensity = source.envMapIntensity, this.refractionRatio = source.refractionRatio, this.wireframe = source.wireframe, this.wireframeLinewidth = source.wireframeLinewidth, this.wireframeLinecap = source.wireframeLinecap, this.wireframeLinejoin = source.wireframeLinejoin, this.skinning = source.skinning, this.morphTargets = source.morphTargets, this.morphNormals = source.morphNormals, this.vertexTangents = source.vertexTangents, this;
    }, MeshPhysicalMaterial.prototype = Object.create(MeshStandardMaterial.prototype), MeshPhysicalMaterial.prototype.constructor = MeshPhysicalMaterial, MeshPhysicalMaterial.prototype.isMeshPhysicalMaterial = !0, MeshPhysicalMaterial.prototype.copy = function(source) {
        return MeshStandardMaterial.prototype.copy.call(this, source), this.defines = {
            STANDARD: '',
            PHYSICAL: ''
        }, this.clearcoat = source.clearcoat, this.clearcoatMap = source.clearcoatMap, this.clearcoatRoughness = source.clearcoatRoughness, this.clearcoatRoughnessMap = source.clearcoatRoughnessMap, this.clearcoatNormalMap = source.clearcoatNormalMap, this.clearcoatNormalScale.copy(source.clearcoatNormalScale), this.reflectivity = source.reflectivity, source.sheen ? this.sheen = (this.sheen || new Color()).copy(source.sheen) : this.sheen = null, this.transmission = source.transmission, this.transmissionMap = source.transmissionMap, this;
    }, MeshPhongMaterial.prototype = Object.create(Material.prototype), MeshPhongMaterial.prototype.constructor = MeshPhongMaterial, MeshPhongMaterial.prototype.isMeshPhongMaterial = !0, MeshPhongMaterial.prototype.copy = function(source) {
        return Material.prototype.copy.call(this, source), this.color.copy(source.color), this.specular.copy(source.specular), this.shininess = source.shininess, this.map = source.map, this.lightMap = source.lightMap, this.lightMapIntensity = source.lightMapIntensity, this.aoMap = source.aoMap, this.aoMapIntensity = source.aoMapIntensity, this.emissive.copy(source.emissive), this.emissiveMap = source.emissiveMap, this.emissiveIntensity = source.emissiveIntensity, this.bumpMap = source.bumpMap, this.bumpScale = source.bumpScale, this.normalMap = source.normalMap, this.normalMapType = source.normalMapType, this.normalScale.copy(source.normalScale), this.displacementMap = source.displacementMap, this.displacementScale = source.displacementScale, this.displacementBias = source.displacementBias, this.specularMap = source.specularMap, this.alphaMap = source.alphaMap, this.envMap = source.envMap, this.combine = source.combine, this.reflectivity = source.reflectivity, this.refractionRatio = source.refractionRatio, this.wireframe = source.wireframe, this.wireframeLinewidth = source.wireframeLinewidth, this.wireframeLinecap = source.wireframeLinecap, this.wireframeLinejoin = source.wireframeLinejoin, this.skinning = source.skinning, this.morphTargets = source.morphTargets, this.morphNormals = source.morphNormals, this;
    }, MeshToonMaterial.prototype = Object.create(Material.prototype), MeshToonMaterial.prototype.constructor = MeshToonMaterial, MeshToonMaterial.prototype.isMeshToonMaterial = !0, MeshToonMaterial.prototype.copy = function(source) {
        return Material.prototype.copy.call(this, source), this.color.copy(source.color), this.map = source.map, this.gradientMap = source.gradientMap, this.lightMap = source.lightMap, this.lightMapIntensity = source.lightMapIntensity, this.aoMap = source.aoMap, this.aoMapIntensity = source.aoMapIntensity, this.emissive.copy(source.emissive), this.emissiveMap = source.emissiveMap, this.emissiveIntensity = source.emissiveIntensity, this.bumpMap = source.bumpMap, this.bumpScale = source.bumpScale, this.normalMap = source.normalMap, this.normalMapType = source.normalMapType, this.normalScale.copy(source.normalScale), this.displacementMap = source.displacementMap, this.displacementScale = source.displacementScale, this.displacementBias = source.displacementBias, this.alphaMap = source.alphaMap, this.wireframe = source.wireframe, this.wireframeLinewidth = source.wireframeLinewidth, this.wireframeLinecap = source.wireframeLinecap, this.wireframeLinejoin = source.wireframeLinejoin, this.skinning = source.skinning, this.morphTargets = source.morphTargets, this.morphNormals = source.morphNormals, this;
    }, MeshNormalMaterial.prototype = Object.create(Material.prototype), MeshNormalMaterial.prototype.constructor = MeshNormalMaterial, MeshNormalMaterial.prototype.isMeshNormalMaterial = !0, MeshNormalMaterial.prototype.copy = function(source) {
        return Material.prototype.copy.call(this, source), this.bumpMap = source.bumpMap, this.bumpScale = source.bumpScale, this.normalMap = source.normalMap, this.normalMapType = source.normalMapType, this.normalScale.copy(source.normalScale), this.displacementMap = source.displacementMap, this.displacementScale = source.displacementScale, this.displacementBias = source.displacementBias, this.wireframe = source.wireframe, this.wireframeLinewidth = source.wireframeLinewidth, this.skinning = source.skinning, this.morphTargets = source.morphTargets, this.morphNormals = source.morphNormals, this;
    }, MeshLambertMaterial.prototype = Object.create(Material.prototype), MeshLambertMaterial.prototype.constructor = MeshLambertMaterial, MeshLambertMaterial.prototype.isMeshLambertMaterial = !0, MeshLambertMaterial.prototype.copy = function(source) {
        return Material.prototype.copy.call(this, source), this.color.copy(source.color), this.map = source.map, this.lightMap = source.lightMap, this.lightMapIntensity = source.lightMapIntensity, this.aoMap = source.aoMap, this.aoMapIntensity = source.aoMapIntensity, this.emissive.copy(source.emissive), this.emissiveMap = source.emissiveMap, this.emissiveIntensity = source.emissiveIntensity, this.specularMap = source.specularMap, this.alphaMap = source.alphaMap, this.envMap = source.envMap, this.combine = source.combine, this.reflectivity = source.reflectivity, this.refractionRatio = source.refractionRatio, this.wireframe = source.wireframe, this.wireframeLinewidth = source.wireframeLinewidth, this.wireframeLinecap = source.wireframeLinecap, this.wireframeLinejoin = source.wireframeLinejoin, this.skinning = source.skinning, this.morphTargets = source.morphTargets, this.morphNormals = source.morphNormals, this;
    }, MeshMatcapMaterial.prototype = Object.create(Material.prototype), MeshMatcapMaterial.prototype.constructor = MeshMatcapMaterial, MeshMatcapMaterial.prototype.isMeshMatcapMaterial = !0, MeshMatcapMaterial.prototype.copy = function(source) {
        return Material.prototype.copy.call(this, source), this.defines = {
            MATCAP: ''
        }, this.color.copy(source.color), this.matcap = source.matcap, this.map = source.map, this.bumpMap = source.bumpMap, this.bumpScale = source.bumpScale, this.normalMap = source.normalMap, this.normalMapType = source.normalMapType, this.normalScale.copy(source.normalScale), this.displacementMap = source.displacementMap, this.displacementScale = source.displacementScale, this.displacementBias = source.displacementBias, this.alphaMap = source.alphaMap, this.skinning = source.skinning, this.morphTargets = source.morphTargets, this.morphNormals = source.morphNormals, this;
    }, LineDashedMaterial.prototype = Object.create(LineBasicMaterial.prototype), LineDashedMaterial.prototype.constructor = LineDashedMaterial, LineDashedMaterial.prototype.isLineDashedMaterial = !0, LineDashedMaterial.prototype.copy = function(source) {
        return LineBasicMaterial.prototype.copy.call(this, source), this.scale = source.scale, this.dashSize = source.dashSize, this.gapSize = source.gapSize, this;
    };
    var Materials = Object.freeze({
        __proto__: null,
        ShadowMaterial: ShadowMaterial,
        SpriteMaterial: SpriteMaterial,
        RawShaderMaterial: RawShaderMaterial,
        ShaderMaterial: ShaderMaterial,
        PointsMaterial: PointsMaterial,
        MeshPhysicalMaterial: MeshPhysicalMaterial,
        MeshStandardMaterial: MeshStandardMaterial,
        MeshPhongMaterial: MeshPhongMaterial,
        MeshToonMaterial: MeshToonMaterial,
        MeshNormalMaterial: MeshNormalMaterial,
        MeshLambertMaterial: MeshLambertMaterial,
        MeshDepthMaterial: MeshDepthMaterial,
        MeshDistanceMaterial: MeshDistanceMaterial,
        MeshBasicMaterial: MeshBasicMaterial,
        MeshMatcapMaterial: MeshMatcapMaterial,
        LineDashedMaterial: LineDashedMaterial,
        LineBasicMaterial: LineBasicMaterial,
        Material: Material
    }), AnimationUtils = {
        arraySlice: function(array, from, to) {
            return AnimationUtils.isTypedArray(array) ? new array.constructor(array.subarray(from, void 0 !== to ? to : array.length)) : array.slice(from, to);
        },
        convertArray: function(array, type, forceClone) {
            return array && (forceClone || array.constructor !== type) ? 'number' == typeof type.BYTES_PER_ELEMENT ? new type(array) : Array.prototype.slice.call(array) : array;
        },
        isTypedArray: function(object) {
            return ArrayBuffer.isView(object) && !(object instanceof DataView);
        },
        getKeyframeOrder: function(times) {
            for(var n = times.length, result = Array(n), i = 0; i !== n; ++i)result[i] = i;
            return result.sort(function(i, j) {
                return times[i] - times[j];
            }), result;
        },
        sortedArray: function(values, stride, order) {
            for(var nValues = values.length, result = new values.constructor(nValues), i = 0, dstOffset = 0; dstOffset !== nValues; ++i)for(var srcOffset = order[i] * stride, j = 0; j !== stride; ++j)result[dstOffset++] = values[srcOffset + j];
            return result;
        },
        flattenJSON: function(jsonKeys, times, values, valuePropertyName) {
            for(var i = 1, key = jsonKeys[0]; void 0 !== key && void 0 === key[valuePropertyName];)key = jsonKeys[i++];
            if (void 0 !== key) {
                var value = key[valuePropertyName];
                if (void 0 !== value) {
                    if (Array.isArray(value)) do void 0 !== (value = key[valuePropertyName]) && (times.push(key.time), values.push.apply(values, value)), key = jsonKeys[i++];
                    while (void 0 !== key)
                    else if (void 0 !== value.toArray) do void 0 !== (value = key[valuePropertyName]) && (times.push(key.time), value.toArray(values, values.length)), key = jsonKeys[i++];
                    while (void 0 !== key)
                    else do void 0 !== (value = key[valuePropertyName]) && (times.push(key.time), values.push(value)), key = jsonKeys[i++];
                    while (void 0 !== key)
                }
            }
        },
        subclip: function(sourceClip, name, startFrame, endFrame, fps) {
            void 0 === fps && (fps = 30);
            var clip = sourceClip.clone();
            clip.name = name;
            for(var tracks = [], i = 0; i < clip.tracks.length; ++i){
                for(var track = clip.tracks[i], valueSize = track.getValueSize(), times = [], values = [], j = 0; j < track.times.length; ++j){
                    var frame = track.times[j] * fps;
                    if (!(frame < startFrame) && !(frame >= endFrame)) {
                        times.push(track.times[j]);
                        for(var k = 0; k < valueSize; ++k)values.push(track.values[j * valueSize + k]);
                    }
                }
                0 !== times.length && (track.times = AnimationUtils.convertArray(times, track.times.constructor), track.values = AnimationUtils.convertArray(values, track.values.constructor), tracks.push(track));
            }
            clip.tracks = tracks;
            for(var minStartTime = 1 / 0, _i = 0; _i < clip.tracks.length; ++_i)minStartTime > clip.tracks[_i].times[0] && (minStartTime = clip.tracks[_i].times[0]);
            for(var _i2 = 0; _i2 < clip.tracks.length; ++_i2)clip.tracks[_i2].shift(-1 * minStartTime);
            return clip.resetDuration(), clip;
        },
        makeClipAdditive: function(targetClip, referenceFrame, referenceClip, fps) {
            void 0 === referenceFrame && (referenceFrame = 0), void 0 === referenceClip && (referenceClip = targetClip), void 0 === fps && (fps = 30), fps <= 0 && (fps = 30);
            for(var numTracks = referenceClip.tracks.length, referenceTime = referenceFrame / fps, i = 0; i < numTracks; ++i)if ("continue" === function(i) {
                var referenceTrack = referenceClip.tracks[i], referenceTrackType = referenceTrack.ValueTypeName;
                if ('bool' === referenceTrackType || 'string' === referenceTrackType) return "continue";
                var targetTrack = targetClip.tracks.find(function(track) {
                    return track.name === referenceTrack.name && track.ValueTypeName === referenceTrackType;
                });
                if (void 0 === targetTrack) return "continue";
                var referenceOffset = 0, referenceValueSize = referenceTrack.getValueSize();
                referenceTrack.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline && (referenceOffset = referenceValueSize / 3);
                var targetOffset = 0, targetValueSize = targetTrack.getValueSize();
                targetTrack.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline && (targetOffset = targetValueSize / 3);
                var lastIndex = referenceTrack.times.length - 1, referenceValue = void 0;
                if (referenceTime <= referenceTrack.times[0]) {
                    var startIndex = referenceOffset, endIndex = referenceValueSize - referenceOffset;
                    referenceValue = AnimationUtils.arraySlice(referenceTrack.values, startIndex, endIndex);
                } else if (referenceTime >= referenceTrack.times[lastIndex]) {
                    var _startIndex = lastIndex * referenceValueSize + referenceOffset, _endIndex = _startIndex + referenceValueSize - referenceOffset;
                    referenceValue = AnimationUtils.arraySlice(referenceTrack.values, _startIndex, _endIndex);
                } else {
                    var interpolant = referenceTrack.createInterpolant(), _startIndex2 = referenceOffset, _endIndex2 = referenceValueSize - referenceOffset;
                    interpolant.evaluate(referenceTime), referenceValue = AnimationUtils.arraySlice(interpolant.resultBuffer, _startIndex2, _endIndex2);
                }
                'quaternion' === referenceTrackType && new Quaternion().fromArray(referenceValue).normalize().conjugate().toArray(referenceValue);
                for(var numTimes = targetTrack.times.length, j = 0; j < numTimes; ++j){
                    var valueStart = j * targetValueSize + targetOffset;
                    if ('quaternion' === referenceTrackType) Quaternion.multiplyQuaternionsFlat(targetTrack.values, valueStart, referenceValue, 0, targetTrack.values, valueStart);
                    else for(var valueEnd = targetValueSize - 2 * targetOffset, k = 0; k < valueEnd; ++k)targetTrack.values[valueStart + k] -= referenceValue[k];
                }
            }(i)) continue;
            return targetClip.blendMode = 2501, targetClip;
        }
    };
    function Interpolant(parameterPositions, sampleValues, sampleSize, resultBuffer) {
        this.parameterPositions = parameterPositions, this._cachedIndex = 0, this.resultBuffer = void 0 !== resultBuffer ? resultBuffer : new sampleValues.constructor(sampleSize), this.sampleValues = sampleValues, this.valueSize = sampleSize;
    }
    function CubicInterpolant(parameterPositions, sampleValues, sampleSize, resultBuffer) {
        Interpolant.call(this, parameterPositions, sampleValues, sampleSize, resultBuffer), this._weightPrev = -0, this._offsetPrev = -0, this._weightNext = -0, this._offsetNext = -0;
    }
    function LinearInterpolant(parameterPositions, sampleValues, sampleSize, resultBuffer) {
        Interpolant.call(this, parameterPositions, sampleValues, sampleSize, resultBuffer);
    }
    function DiscreteInterpolant(parameterPositions, sampleValues, sampleSize, resultBuffer) {
        Interpolant.call(this, parameterPositions, sampleValues, sampleSize, resultBuffer);
    }
    function KeyframeTrack(name, times, values, interpolation) {
        if (void 0 === name) throw Error('THREE.KeyframeTrack: track name is undefined');
        if (void 0 === times || 0 === times.length) throw Error('THREE.KeyframeTrack: no keyframes in track named ' + name);
        this.name = name, this.times = AnimationUtils.convertArray(times, this.TimeBufferType), this.values = AnimationUtils.convertArray(values, this.ValueBufferType), this.setInterpolation(interpolation || this.DefaultInterpolation);
    }
    function BooleanKeyframeTrack(name, times, values) {
        KeyframeTrack.call(this, name, times, values);
    }
    function ColorKeyframeTrack(name, times, values, interpolation) {
        KeyframeTrack.call(this, name, times, values, interpolation);
    }
    function NumberKeyframeTrack(name, times, values, interpolation) {
        KeyframeTrack.call(this, name, times, values, interpolation);
    }
    function QuaternionLinearInterpolant(parameterPositions, sampleValues, sampleSize, resultBuffer) {
        Interpolant.call(this, parameterPositions, sampleValues, sampleSize, resultBuffer);
    }
    function QuaternionKeyframeTrack(name, times, values, interpolation) {
        KeyframeTrack.call(this, name, times, values, interpolation);
    }
    function StringKeyframeTrack(name, times, values, interpolation) {
        KeyframeTrack.call(this, name, times, values, interpolation);
    }
    function VectorKeyframeTrack(name, times, values, interpolation) {
        KeyframeTrack.call(this, name, times, values, interpolation);
    }
    function AnimationClip(name, duration, tracks, blendMode) {
        void 0 === duration && (duration = -1), void 0 === blendMode && (blendMode = 2500), this.name = name, this.tracks = tracks, this.duration = duration, this.blendMode = blendMode, this.uuid = MathUtils.generateUUID(), this.duration < 0 && this.resetDuration();
    }
    Object.assign(Interpolant.prototype, {
        evaluate: function(t) {
            var right, pp = this.parameterPositions, i1 = this._cachedIndex, t1 = pp[i1], t0 = pp[i1 - 1];
            validate_interval: {
                seek: {
                    linear_scan: {
                        forward_scan: if (!(t < t1)) {
                            for(var giveUpAt = i1 + 2;;){
                                if (void 0 === t1) {
                                    if (t < t0) break forward_scan;
                                    return i1 = pp.length, this._cachedIndex = i1, this.afterEnd_(i1 - 1, t, t0);
                                }
                                if (i1 === giveUpAt) break;
                                if (t0 = t1, t < (t1 = pp[++i1])) break seek;
                            }
                            right = pp.length;
                            break linear_scan;
                        }
                        if (!(t >= t0)) {
                            var t1global = pp[1];
                            t < t1global && (i1 = 2, t0 = t1global);
                            for(var _giveUpAt = i1 - 2;;){
                                if (void 0 === t0) return this._cachedIndex = 0, this.beforeStart_(0, t, t1);
                                if (i1 === _giveUpAt) break;
                                if (t1 = t0, t >= (t0 = pp[--i1 - 1])) break seek;
                            }
                            right = i1, i1 = 0;
                            break linear_scan;
                        }
                        break validate_interval;
                    }
                    for(; i1 < right;){
                        var mid = i1 + right >>> 1;
                        t < pp[mid] ? right = mid : i1 = mid + 1;
                    }
                    if (t1 = pp[i1], void 0 === (t0 = pp[i1 - 1])) return this._cachedIndex = 0, this.beforeStart_(0, t, t1);
                    if (void 0 === t1) return i1 = pp.length, this._cachedIndex = i1, this.afterEnd_(i1 - 1, t0, t);
                }
                this._cachedIndex = i1, this.intervalChanged_(i1, t0, t1);
            }
            return this.interpolate_(i1, t0, t, t1);
        },
        settings: null,
        DefaultSettings_: {},
        getSettings_: function() {
            return this.settings || this.DefaultSettings_;
        },
        copySampleValue_: function(index) {
            for(var result = this.resultBuffer, values = this.sampleValues, stride = this.valueSize, offset = index * stride, i = 0; i !== stride; ++i)result[i] = values[offset + i];
            return result;
        },
        interpolate_: function() {
            throw Error('call to abstract method');
        },
        intervalChanged_: function() {}
    }), Object.assign(Interpolant.prototype, {
        beforeStart_: Interpolant.prototype.copySampleValue_,
        afterEnd_: Interpolant.prototype.copySampleValue_
    }), CubicInterpolant.prototype = Object.assign(Object.create(Interpolant.prototype), {
        constructor: CubicInterpolant,
        DefaultSettings_: {
            endingStart: 2400,
            endingEnd: 2400
        },
        intervalChanged_: function(i1, t0, t1) {
            var pp = this.parameterPositions, iPrev = i1 - 2, iNext = i1 + 1, tPrev = pp[iPrev], tNext = pp[iNext];
            if (void 0 === tPrev) switch(this.getSettings_().endingStart){
                case 2401:
                    iPrev = i1, tPrev = 2 * t0 - t1;
                    break;
                case 2402:
                    iPrev = pp.length - 2, tPrev = t0 + pp[iPrev] - pp[iPrev + 1];
                    break;
                default:
                    iPrev = i1, tPrev = t1;
            }
            if (void 0 === tNext) switch(this.getSettings_().endingEnd){
                case 2401:
                    iNext = i1, tNext = 2 * t1 - t0;
                    break;
                case 2402:
                    iNext = 1, tNext = t1 + pp[1] - pp[0];
                    break;
                default:
                    iNext = i1 - 1, tNext = t0;
            }
            var halfDt = (t1 - t0) * 0.5, stride = this.valueSize;
            this._weightPrev = halfDt / (t0 - tPrev), this._weightNext = halfDt / (tNext - t1), this._offsetPrev = iPrev * stride, this._offsetNext = iNext * stride;
        },
        interpolate_: function(i1, t0, t, t1) {
            for(var result = this.resultBuffer, values = this.sampleValues, stride = this.valueSize, o1 = i1 * stride, o0 = o1 - stride, oP = this._offsetPrev, oN = this._offsetNext, wP = this._weightPrev, wN = this._weightNext, p = (t - t0) / (t1 - t0), pp = p * p, ppp = pp * p, sP = -wP * ppp + 2 * wP * pp - wP * p, s0 = (1 + wP) * ppp + (-1.5 - 2 * wP) * pp + (-0.5 + wP) * p + 1, s1 = (-1 - wN) * ppp + (1.5 + wN) * pp + 0.5 * p, sN = wN * ppp - wN * pp, i = 0; i !== stride; ++i)result[i] = sP * values[oP + i] + s0 * values[o0 + i] + s1 * values[o1 + i] + sN * values[oN + i];
            return result;
        }
    }), LinearInterpolant.prototype = Object.assign(Object.create(Interpolant.prototype), {
        constructor: LinearInterpolant,
        interpolate_: function(i1, t0, t, t1) {
            for(var result = this.resultBuffer, values = this.sampleValues, stride = this.valueSize, offset1 = i1 * stride, offset0 = offset1 - stride, weight1 = (t - t0) / (t1 - t0), weight0 = 1 - weight1, i = 0; i !== stride; ++i)result[i] = values[offset0 + i] * weight0 + values[offset1 + i] * weight1;
            return result;
        }
    }), DiscreteInterpolant.prototype = Object.assign(Object.create(Interpolant.prototype), {
        constructor: DiscreteInterpolant,
        interpolate_: function(i1) {
            return this.copySampleValue_(i1 - 1);
        }
    }), Object.assign(KeyframeTrack, {
        toJSON: function(track) {
            var json, trackType = track.constructor;
            if (void 0 !== trackType.toJSON) json = trackType.toJSON(track);
            else {
                json = {
                    name: track.name,
                    times: AnimationUtils.convertArray(track.times, Array),
                    values: AnimationUtils.convertArray(track.values, Array)
                };
                var interpolation = track.getInterpolation();
                interpolation !== track.DefaultInterpolation && (json.interpolation = interpolation);
            }
            return json.type = track.ValueTypeName, json;
        }
    }), Object.assign(KeyframeTrack.prototype, {
        constructor: KeyframeTrack,
        TimeBufferType: Float32Array,
        ValueBufferType: Float32Array,
        DefaultInterpolation: 2301,
        InterpolantFactoryMethodDiscrete: function(result) {
            return new DiscreteInterpolant(this.times, this.values, this.getValueSize(), result);
        },
        InterpolantFactoryMethodLinear: function(result) {
            return new LinearInterpolant(this.times, this.values, this.getValueSize(), result);
        },
        InterpolantFactoryMethodSmooth: function(result) {
            return new CubicInterpolant(this.times, this.values, this.getValueSize(), result);
        },
        setInterpolation: function(interpolation) {
            var factoryMethod;
            switch(interpolation){
                case 2300:
                    factoryMethod = this.InterpolantFactoryMethodDiscrete;
                    break;
                case 2301:
                    factoryMethod = this.InterpolantFactoryMethodLinear;
                    break;
                case 2302:
                    factoryMethod = this.InterpolantFactoryMethodSmooth;
            }
            if (void 0 === factoryMethod) {
                var message = 'unsupported interpolation for ' + this.ValueTypeName + ' keyframe track named ' + this.name;
                if (void 0 === this.createInterpolant) {
                    if (interpolation !== this.DefaultInterpolation) this.setInterpolation(this.DefaultInterpolation);
                    else throw Error(message);
                }
                return console.warn('THREE.KeyframeTrack:', message), this;
            }
            return this.createInterpolant = factoryMethod, this;
        },
        getInterpolation: function() {
            switch(this.createInterpolant){
                case this.InterpolantFactoryMethodDiscrete:
                    return 2300;
                case this.InterpolantFactoryMethodLinear:
                    return 2301;
                case this.InterpolantFactoryMethodSmooth:
                    return 2302;
            }
        },
        getValueSize: function() {
            return this.values.length / this.times.length;
        },
        shift: function(timeOffset) {
            if (0.0 !== timeOffset) for(var times = this.times, i = 0, n = times.length; i !== n; ++i)times[i] += timeOffset;
            return this;
        },
        scale: function(timeScale) {
            if (1.0 !== timeScale) for(var times = this.times, i = 0, n = times.length; i !== n; ++i)times[i] *= timeScale;
            return this;
        },
        trim: function(startTime, endTime) {
            for(var times = this.times, nKeys = times.length, from = 0, to = nKeys - 1; from !== nKeys && times[from] < startTime;)++from;
            for(; -1 !== to && times[to] > endTime;)--to;
            if (++to, 0 !== from || to !== nKeys) {
                from >= to && (from = (to = Math.max(to, 1)) - 1);
                var stride = this.getValueSize();
                this.times = AnimationUtils.arraySlice(times, from, to), this.values = AnimationUtils.arraySlice(this.values, from * stride, to * stride);
            }
            return this;
        },
        validate: function() {
            var valid = !0, valueSize = this.getValueSize();
            valueSize - Math.floor(valueSize) != 0 && (console.error('THREE.KeyframeTrack: Invalid value size in track.', this), valid = !1);
            var times = this.times, values = this.values, nKeys = times.length;
            0 === nKeys && (console.error('THREE.KeyframeTrack: Track is empty.', this), valid = !1);
            for(var prevTime = null, i = 0; i !== nKeys; i++){
                var currTime = times[i];
                if ('number' == typeof currTime && isNaN(currTime)) {
                    console.error('THREE.KeyframeTrack: Time is not a valid number.', this, i, currTime), valid = !1;
                    break;
                }
                if (null !== prevTime && prevTime > currTime) {
                    console.error('THREE.KeyframeTrack: Out of order keys.', this, i, currTime, prevTime), valid = !1;
                    break;
                }
                prevTime = currTime;
            }
            if (void 0 !== values && AnimationUtils.isTypedArray(values)) for(var _i = 0, n = values.length; _i !== n; ++_i){
                var value = values[_i];
                if (isNaN(value)) {
                    console.error('THREE.KeyframeTrack: Value is not a valid number.', this, _i, value), valid = !1;
                    break;
                }
            }
            return valid;
        },
        optimize: function() {
            for(var times = AnimationUtils.arraySlice(this.times), values = AnimationUtils.arraySlice(this.values), stride = this.getValueSize(), smoothInterpolation = 2302 === this.getInterpolation(), lastIndex = times.length - 1, writeIndex = 1, i = 1; i < lastIndex; ++i){
                var keep = !1, time = times[i];
                if (time !== times[i + 1] && (1 !== i || time !== time[0])) {
                    if (smoothInterpolation) keep = !0;
                    else for(var offset = i * stride, offsetP = offset - stride, offsetN = offset + stride, j = 0; j !== stride; ++j){
                        var value = values[offset + j];
                        if (value !== values[offsetP + j] || value !== values[offsetN + j]) {
                            keep = !0;
                            break;
                        }
                    }
                }
                if (keep) {
                    if (i !== writeIndex) {
                        times[writeIndex] = times[i];
                        for(var readOffset = i * stride, writeOffset = writeIndex * stride, _j = 0; _j !== stride; ++_j)values[writeOffset + _j] = values[readOffset + _j];
                    }
                    ++writeIndex;
                }
            }
            if (lastIndex > 0) {
                times[writeIndex] = times[lastIndex];
                for(var _readOffset = lastIndex * stride, _writeOffset = writeIndex * stride, _j2 = 0; _j2 !== stride; ++_j2)values[_writeOffset + _j2] = values[_readOffset + _j2];
                ++writeIndex;
            }
            return writeIndex !== times.length ? (this.times = AnimationUtils.arraySlice(times, 0, writeIndex), this.values = AnimationUtils.arraySlice(values, 0, writeIndex * stride)) : (this.times = times, this.values = values), this;
        },
        clone: function() {
            var times = AnimationUtils.arraySlice(this.times, 0), values = AnimationUtils.arraySlice(this.values, 0), track = new this.constructor(this.name, times, values);
            return track.createInterpolant = this.createInterpolant, track;
        }
    }), BooleanKeyframeTrack.prototype = Object.assign(Object.create(KeyframeTrack.prototype), {
        constructor: BooleanKeyframeTrack,
        ValueTypeName: 'bool',
        ValueBufferType: Array,
        DefaultInterpolation: 2300,
        InterpolantFactoryMethodLinear: void 0,
        InterpolantFactoryMethodSmooth: void 0
    }), ColorKeyframeTrack.prototype = Object.assign(Object.create(KeyframeTrack.prototype), {
        constructor: ColorKeyframeTrack,
        ValueTypeName: 'color'
    }), NumberKeyframeTrack.prototype = Object.assign(Object.create(KeyframeTrack.prototype), {
        constructor: NumberKeyframeTrack,
        ValueTypeName: 'number'
    }), QuaternionLinearInterpolant.prototype = Object.assign(Object.create(Interpolant.prototype), {
        constructor: QuaternionLinearInterpolant,
        interpolate_: function(i1, t0, t, t1) {
            for(var result = this.resultBuffer, values = this.sampleValues, stride = this.valueSize, alpha = (t - t0) / (t1 - t0), offset = i1 * stride, end = offset + stride; offset !== end; offset += 4)Quaternion.slerpFlat(result, 0, values, offset - stride, values, offset, alpha);
            return result;
        }
    }), QuaternionKeyframeTrack.prototype = Object.assign(Object.create(KeyframeTrack.prototype), {
        constructor: QuaternionKeyframeTrack,
        ValueTypeName: 'quaternion',
        DefaultInterpolation: 2301,
        InterpolantFactoryMethodLinear: function(result) {
            return new QuaternionLinearInterpolant(this.times, this.values, this.getValueSize(), result);
        },
        InterpolantFactoryMethodSmooth: void 0
    }), StringKeyframeTrack.prototype = Object.assign(Object.create(KeyframeTrack.prototype), {
        constructor: StringKeyframeTrack,
        ValueTypeName: 'string',
        ValueBufferType: Array,
        DefaultInterpolation: 2300,
        InterpolantFactoryMethodLinear: void 0,
        InterpolantFactoryMethodSmooth: void 0
    }), VectorKeyframeTrack.prototype = Object.assign(Object.create(KeyframeTrack.prototype), {
        constructor: VectorKeyframeTrack,
        ValueTypeName: 'vector'
    }), Object.assign(AnimationClip, {
        parse: function(json) {
            for(var tracks = [], jsonTracks = json.tracks, frameTime = 1.0 / (json.fps || 1.0), i = 0, n = jsonTracks.length; i !== n; ++i)tracks.push((function(json) {
                if (void 0 === json.type) throw Error('THREE.KeyframeTrack: track type undefined, can not parse');
                var trackType = function(typeName) {
                    switch(typeName.toLowerCase()){
                        case 'scalar':
                        case 'double':
                        case 'float':
                        case 'number':
                        case 'integer':
                            return NumberKeyframeTrack;
                        case 'vector':
                        case 'vector2':
                        case 'vector3':
                        case 'vector4':
                            return VectorKeyframeTrack;
                        case 'color':
                            return ColorKeyframeTrack;
                        case 'quaternion':
                            return QuaternionKeyframeTrack;
                        case 'bool':
                        case 'boolean':
                            return BooleanKeyframeTrack;
                        case 'string':
                            return StringKeyframeTrack;
                    }
                    throw Error('THREE.KeyframeTrack: Unsupported typeName: ' + typeName);
                }(json.type);
                if (void 0 === json.times) {
                    var times = [], values = [];
                    AnimationUtils.flattenJSON(json.keys, times, values, 'value'), json.times = times, json.values = values;
                }
                return void 0 !== trackType.parse ? trackType.parse(json) : new trackType(json.name, json.times, json.values, json.interpolation);
            })(jsonTracks[i]).scale(frameTime));
            var clip = new AnimationClip(json.name, json.duration, tracks, json.blendMode);
            return clip.uuid = json.uuid, clip;
        },
        toJSON: function(clip) {
            for(var tracks = [], clipTracks = clip.tracks, json = {
                name: clip.name,
                duration: clip.duration,
                tracks: tracks,
                uuid: clip.uuid,
                blendMode: clip.blendMode
            }, i = 0, n = clipTracks.length; i !== n; ++i)tracks.push(KeyframeTrack.toJSON(clipTracks[i]));
            return json;
        },
        CreateFromMorphTargetSequence: function(name, morphTargetSequence, fps, noLoop) {
            for(var numMorphTargets = morphTargetSequence.length, tracks = [], i = 0; i < numMorphTargets; i++){
                var times = [], values = [];
                times.push((i + numMorphTargets - 1) % numMorphTargets, i, (i + 1) % numMorphTargets), values.push(0, 1, 0);
                var order = AnimationUtils.getKeyframeOrder(times);
                times = AnimationUtils.sortedArray(times, 1, order), values = AnimationUtils.sortedArray(values, 1, order), noLoop || 0 !== times[0] || (times.push(numMorphTargets), values.push(values[0])), tracks.push(new NumberKeyframeTrack('.morphTargetInfluences[' + morphTargetSequence[i].name + ']', times, values).scale(1.0 / fps));
            }
            return new AnimationClip(name, -1, tracks);
        },
        findByName: function(objectOrClipArray, name) {
            var clipArray = objectOrClipArray;
            Array.isArray(objectOrClipArray) || (clipArray = objectOrClipArray.geometry && objectOrClipArray.geometry.animations || objectOrClipArray.animations);
            for(var i = 0; i < clipArray.length; i++)if (clipArray[i].name === name) return clipArray[i];
            return null;
        },
        CreateClipsFromMorphTargetSequences: function(morphTargets, fps, noLoop) {
            for(var animationToMorphTargets = {}, pattern = /^([\w-]*?)([\d]+)$/, i = 0, il = morphTargets.length; i < il; i++){
                var morphTarget = morphTargets[i], parts = morphTarget.name.match(pattern);
                if (parts && parts.length > 1) {
                    var name = parts[1], animationMorphTargets = animationToMorphTargets[name];
                    animationMorphTargets || (animationToMorphTargets[name] = animationMorphTargets = []), animationMorphTargets.push(morphTarget);
                }
            }
            var clips = [];
            for(var _name in animationToMorphTargets)clips.push(AnimationClip.CreateFromMorphTargetSequence(_name, animationToMorphTargets[_name], fps, noLoop));
            return clips;
        },
        parseAnimation: function(animation, bones) {
            if (!animation) return console.error('THREE.AnimationClip: No animation in JSONLoader data.'), null;
            for(var addNonemptyTrack = function(trackType, trackName, animationKeys, propertyName, destTracks) {
                if (0 !== animationKeys.length) {
                    var times = [], values = [];
                    AnimationUtils.flattenJSON(animationKeys, times, values, propertyName), 0 !== times.length && destTracks.push(new trackType(trackName, times, values));
                }
            }, tracks = [], clipName = animation.name || 'default', fps = animation.fps || 30, blendMode = animation.blendMode, duration = animation.length || -1, hierarchyTracks = animation.hierarchy || [], h = 0; h < hierarchyTracks.length; h++){
                var animationKeys = hierarchyTracks[h].keys;
                if (animationKeys && 0 !== animationKeys.length) {
                    if (animationKeys[0].morphTargets) {
                        var morphTargetNames = {}, k = void 0;
                        for(k = 0; k < animationKeys.length; k++)if (animationKeys[k].morphTargets) for(var m = 0; m < animationKeys[k].morphTargets.length; m++)morphTargetNames[animationKeys[k].morphTargets[m]] = -1;
                        for(var morphTargetName in morphTargetNames){
                            for(var times = [], values = [], _m = 0; _m !== animationKeys[k].morphTargets.length; ++_m){
                                var animationKey = animationKeys[k];
                                times.push(animationKey.time), values.push(animationKey.morphTarget === morphTargetName ? 1 : 0);
                            }
                            tracks.push(new NumberKeyframeTrack('.morphTargetInfluence[' + morphTargetName + ']', times, values));
                        }
                        duration = morphTargetNames.length * (fps || 1.0);
                    } else {
                        var boneName = '.bones[' + bones[h].name + ']';
                        addNonemptyTrack(VectorKeyframeTrack, boneName + '.position', animationKeys, 'pos', tracks), addNonemptyTrack(QuaternionKeyframeTrack, boneName + '.quaternion', animationKeys, 'rot', tracks), addNonemptyTrack(VectorKeyframeTrack, boneName + '.scale', animationKeys, 'scl', tracks);
                    }
                }
            }
            return 0 === tracks.length ? null : new AnimationClip(clipName, duration, tracks, blendMode);
        }
    }), Object.assign(AnimationClip.prototype, {
        resetDuration: function() {
            for(var tracks = this.tracks, duration = 0, i = 0, n = tracks.length; i !== n; ++i){
                var track = this.tracks[i];
                duration = Math.max(duration, track.times[track.times.length - 1]);
            }
            return this.duration = duration, this;
        },
        trim: function() {
            for(var i = 0; i < this.tracks.length; i++)this.tracks[i].trim(0, this.duration);
            return this;
        },
        validate: function() {
            for(var valid = !0, i = 0; i < this.tracks.length; i++)valid = valid && this.tracks[i].validate();
            return valid;
        },
        optimize: function() {
            for(var i = 0; i < this.tracks.length; i++)this.tracks[i].optimize();
            return this;
        },
        clone: function() {
            for(var tracks = [], i = 0; i < this.tracks.length; i++)tracks.push(this.tracks[i].clone());
            return new AnimationClip(this.name, this.duration, tracks, this.blendMode);
        },
        toJSON: function() {
            return AnimationClip.toJSON(this);
        }
    });
    var Cache = {
        enabled: !1,
        files: {},
        add: function(key, file) {
            !1 !== this.enabled && (this.files[key] = file);
        },
        get: function(key) {
            if (!1 !== this.enabled) return this.files[key];
        },
        remove: function(key) {
            delete this.files[key];
        },
        clear: function() {
            this.files = {};
        }
    };
    function LoadingManager(onLoad, onProgress, onError) {
        var scope = this, isLoading = !1, itemsLoaded = 0, itemsTotal = 0, urlModifier = void 0, handlers = [];
        this.onStart = void 0, this.onLoad = onLoad, this.onProgress = onProgress, this.onError = onError, this.itemStart = function(url) {
            itemsTotal++, !1 === isLoading && void 0 !== scope.onStart && scope.onStart(url, itemsLoaded, itemsTotal), isLoading = !0;
        }, this.itemEnd = function(url) {
            itemsLoaded++, void 0 !== scope.onProgress && scope.onProgress(url, itemsLoaded, itemsTotal), itemsLoaded === itemsTotal && (isLoading = !1, void 0 !== scope.onLoad && scope.onLoad());
        }, this.itemError = function(url) {
            void 0 !== scope.onError && scope.onError(url);
        }, this.resolveURL = function(url) {
            return urlModifier ? urlModifier(url) : url;
        }, this.setURLModifier = function(transform) {
            return urlModifier = transform, this;
        }, this.addHandler = function(regex, loader) {
            return handlers.push(regex, loader), this;
        }, this.removeHandler = function(regex) {
            var index = handlers.indexOf(regex);
            return -1 !== index && handlers.splice(index, 2), this;
        }, this.getHandler = function(file) {
            for(var i = 0, l = handlers.length; i < l; i += 2){
                var regex = handlers[i], loader = handlers[i + 1];
                if (regex.global && (regex.lastIndex = 0), regex.test(file)) return loader;
            }
            return null;
        };
    }
    var DefaultLoadingManager = new LoadingManager();
    function Loader(manager) {
        this.manager = void 0 !== manager ? manager : DefaultLoadingManager, this.crossOrigin = 'anonymous', this.withCredentials = !1, this.path = '', this.resourcePath = '', this.requestHeader = {};
    }
    Object.assign(Loader.prototype, {
        load: function() {},
        loadAsync: function(url, onProgress) {
            var scope = this;
            return new Promise(function(resolve, reject) {
                scope.load(url, resolve, onProgress, reject);
            });
        },
        parse: function() {},
        setCrossOrigin: function(crossOrigin) {
            return this.crossOrigin = crossOrigin, this;
        },
        setWithCredentials: function(value) {
            return this.withCredentials = value, this;
        },
        setPath: function(path) {
            return this.path = path, this;
        },
        setResourcePath: function(resourcePath) {
            return this.resourcePath = resourcePath, this;
        },
        setRequestHeader: function(requestHeader) {
            return this.requestHeader = requestHeader, this;
        }
    });
    var loading = {};
    function FileLoader(manager) {
        Loader.call(this, manager);
    }
    function AnimationLoader(manager) {
        Loader.call(this, manager);
    }
    function CompressedTextureLoader(manager) {
        Loader.call(this, manager);
    }
    function ImageLoader(manager) {
        Loader.call(this, manager);
    }
    function CubeTextureLoader(manager) {
        Loader.call(this, manager);
    }
    function DataTextureLoader(manager) {
        Loader.call(this, manager);
    }
    function TextureLoader(manager) {
        Loader.call(this, manager);
    }
    function Curve() {
        this.type = 'Curve', this.arcLengthDivisions = 200;
    }
    function EllipseCurve(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation) {
        Curve.call(this), this.type = 'EllipseCurve', this.aX = aX || 0, this.aY = aY || 0, this.xRadius = xRadius || 1, this.yRadius = yRadius || 1, this.aStartAngle = aStartAngle || 0, this.aEndAngle = aEndAngle || 2 * Math.PI, this.aClockwise = aClockwise || !1, this.aRotation = aRotation || 0;
    }
    function ArcCurve(aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise) {
        EllipseCurve.call(this, aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise), this.type = 'ArcCurve';
    }
    function CubicPoly() {
        var c0 = 0, c1 = 0, c2 = 0, c3 = 0;
        function init(x0, x1, t0, t1) {
            c0 = x0, c1 = t0, c2 = -3 * x0 + 3 * x1 - 2 * t0 - t1, c3 = 2 * x0 - 2 * x1 + t0 + t1;
        }
        return {
            initCatmullRom: function(x0, x1, x2, x3, tension) {
                init(x1, x2, tension * (x2 - x0), tension * (x3 - x1));
            },
            initNonuniformCatmullRom: function(x0, x1, x2, x3, dt0, dt1, dt2) {
                var t1 = (x1 - x0) / dt0 - (x2 - x0) / (dt0 + dt1) + (x2 - x1) / dt1, t2 = (x2 - x1) / dt1 - (x3 - x1) / (dt1 + dt2) + (x3 - x2) / dt2;
                init(x1, x2, t1 *= dt1, t2 *= dt1);
            },
            calc: function(t) {
                var t2 = t * t;
                return c0 + c1 * t + c2 * t2 + c3 * (t2 * t);
            }
        };
    }
    FileLoader.prototype = Object.assign(Object.create(Loader.prototype), {
        constructor: FileLoader,
        load: function(url, onLoad, onProgress, onError) {
            void 0 === url && (url = ''), void 0 !== this.path && (url = this.path + url), url = this.manager.resolveURL(url);
            var scope = this, cached = Cache.get(url);
            if (void 0 !== cached) return scope.manager.itemStart(url), setTimeout(function() {
                onLoad && onLoad(cached), scope.manager.itemEnd(url);
            }, 0), cached;
            if (void 0 !== loading[url]) {
                loading[url].push({
                    onLoad: onLoad,
                    onProgress: onProgress,
                    onError: onError
                });
                return;
            }
            var dataUriRegexResult = url.match(/^data:(.*?)(;base64)?,(.*)$/);
            if (dataUriRegexResult) {
                var mimeType = dataUriRegexResult[1], isBase64 = !!dataUriRegexResult[2], data = dataUriRegexResult[3];
                data = decodeURIComponent(data), isBase64 && (data = atob(data));
                try {
                    var request, response, responseType = (this.responseType || '').toLowerCase();
                    switch(responseType){
                        case 'arraybuffer':
                        case 'blob':
                            for(var view = new Uint8Array(data.length), i = 0; i < data.length; i++)view[i] = data.charCodeAt(i);
                            response = 'blob' === responseType ? new Blob([
                                view.buffer
                            ], {
                                type: mimeType
                            }) : view.buffer;
                            break;
                        case 'document':
                            response = new DOMParser().parseFromString(data, mimeType);
                            break;
                        case 'json':
                            response = JSON.parse(data);
                            break;
                        default:
                            response = data;
                    }
                    setTimeout(function() {
                        onLoad && onLoad(response), scope.manager.itemEnd(url);
                    }, 0);
                } catch (error) {
                    setTimeout(function() {
                        onError && onError(error), scope.manager.itemError(url), scope.manager.itemEnd(url);
                    }, 0);
                }
            } else {
                for(var header in loading[url] = [], loading[url].push({
                    onLoad: onLoad,
                    onProgress: onProgress,
                    onError: onError
                }), (request = new XMLHttpRequest()).open('GET', url, !0), request.addEventListener('load', function(event) {
                    var response = this.response, callbacks = loading[url];
                    if (delete loading[url], 200 === this.status || 0 === this.status) {
                        0 === this.status && console.warn('THREE.FileLoader: HTTP Status 0 received.'), Cache.add(url, response);
                        for(var _i = 0, il = callbacks.length; _i < il; _i++){
                            var callback = callbacks[_i];
                            callback.onLoad && callback.onLoad(response);
                        }
                        scope.manager.itemEnd(url);
                    } else {
                        for(var _i2 = 0, _il = callbacks.length; _i2 < _il; _i2++){
                            var _callback = callbacks[_i2];
                            _callback.onError && _callback.onError(event);
                        }
                        scope.manager.itemError(url), scope.manager.itemEnd(url);
                    }
                }, !1), request.addEventListener('progress', function(event) {
                    for(var callbacks = loading[url], _i3 = 0, il = callbacks.length; _i3 < il; _i3++){
                        var callback = callbacks[_i3];
                        callback.onProgress && callback.onProgress(event);
                    }
                }, !1), request.addEventListener('error', function(event) {
                    var callbacks = loading[url];
                    delete loading[url];
                    for(var _i4 = 0, il = callbacks.length; _i4 < il; _i4++){
                        var callback = callbacks[_i4];
                        callback.onError && callback.onError(event);
                    }
                    scope.manager.itemError(url), scope.manager.itemEnd(url);
                }, !1), request.addEventListener('abort', function(event) {
                    var callbacks = loading[url];
                    delete loading[url];
                    for(var _i5 = 0, il = callbacks.length; _i5 < il; _i5++){
                        var callback = callbacks[_i5];
                        callback.onError && callback.onError(event);
                    }
                    scope.manager.itemError(url), scope.manager.itemEnd(url);
                }, !1), void 0 !== this.responseType && (request.responseType = this.responseType), void 0 !== this.withCredentials && (request.withCredentials = this.withCredentials), request.overrideMimeType && request.overrideMimeType(void 0 !== this.mimeType ? this.mimeType : 'text/plain'), this.requestHeader)request.setRequestHeader(header, this.requestHeader[header]);
                request.send(null);
            }
            return scope.manager.itemStart(url), request;
        },
        setResponseType: function(value) {
            return this.responseType = value, this;
        },
        setMimeType: function(value) {
            return this.mimeType = value, this;
        }
    }), AnimationLoader.prototype = Object.assign(Object.create(Loader.prototype), {
        constructor: AnimationLoader,
        load: function(url, onLoad, onProgress, onError) {
            var scope = this, loader = new FileLoader(scope.manager);
            loader.setPath(scope.path), loader.setRequestHeader(scope.requestHeader), loader.setWithCredentials(scope.withCredentials), loader.load(url, function(text) {
                try {
                    onLoad(scope.parse(JSON.parse(text)));
                } catch (e) {
                    onError ? onError(e) : console.error(e), scope.manager.itemError(url);
                }
            }, onProgress, onError);
        },
        parse: function(json) {
            for(var animations = [], i = 0; i < json.length; i++){
                var clip = AnimationClip.parse(json[i]);
                animations.push(clip);
            }
            return animations;
        }
    }), CompressedTextureLoader.prototype = Object.assign(Object.create(Loader.prototype), {
        constructor: CompressedTextureLoader,
        load: function(url, onLoad, onProgress, onError) {
            var scope = this, images = [], texture = new CompressedTexture(), loader = new FileLoader(this.manager);
            loader.setPath(this.path), loader.setResponseType('arraybuffer'), loader.setRequestHeader(this.requestHeader), loader.setWithCredentials(scope.withCredentials);
            var loaded = 0;
            if (Array.isArray(url)) for(var i = 0, il = url.length; i < il; ++i)!function(i) {
                loader.load(url[i], function(buffer) {
                    var texDatas = scope.parse(buffer, !0);
                    images[i] = {
                        width: texDatas.width,
                        height: texDatas.height,
                        format: texDatas.format,
                        mipmaps: texDatas.mipmaps
                    }, 6 === (loaded += 1) && (1 === texDatas.mipmapCount && (texture.minFilter = 1006), texture.image = images, texture.format = texDatas.format, texture.needsUpdate = !0, onLoad && onLoad(texture));
                }, onProgress, onError);
            }(i);
            else loader.load(url, function(buffer) {
                var texDatas = scope.parse(buffer, !0);
                if (texDatas.isCubemap) {
                    for(var faces = texDatas.mipmaps.length / texDatas.mipmapCount, f = 0; f < faces; f++){
                        images[f] = {
                            mipmaps: []
                        };
                        for(var _i = 0; _i < texDatas.mipmapCount; _i++)images[f].mipmaps.push(texDatas.mipmaps[f * texDatas.mipmapCount + _i]), images[f].format = texDatas.format, images[f].width = texDatas.width, images[f].height = texDatas.height;
                    }
                    texture.image = images;
                } else texture.image.width = texDatas.width, texture.image.height = texDatas.height, texture.mipmaps = texDatas.mipmaps;
                1 === texDatas.mipmapCount && (texture.minFilter = 1006), texture.format = texDatas.format, texture.needsUpdate = !0, onLoad && onLoad(texture);
            }, onProgress, onError);
            return texture;
        }
    }), ImageLoader.prototype = Object.assign(Object.create(Loader.prototype), {
        constructor: ImageLoader,
        load: function(url, onLoad, onProgress, onError) {
            void 0 !== this.path && (url = this.path + url), url = this.manager.resolveURL(url);
            var scope = this, cached = Cache.get(url);
            if (void 0 !== cached) return scope.manager.itemStart(url), setTimeout(function() {
                onLoad && onLoad(cached), scope.manager.itemEnd(url);
            }, 0), cached;
            var image = document.createElementNS('http://www.w3.org/1999/xhtml', 'img');
            function onImageLoad() {
                image.removeEventListener('load', onImageLoad, !1), image.removeEventListener('error', onImageError, !1), Cache.add(url, this), onLoad && onLoad(this), scope.manager.itemEnd(url);
            }
            function onImageError(event) {
                image.removeEventListener('load', onImageLoad, !1), image.removeEventListener('error', onImageError, !1), onError && onError(event), scope.manager.itemError(url), scope.manager.itemEnd(url);
            }
            return image.addEventListener('load', onImageLoad, !1), image.addEventListener('error', onImageError, !1), 'data:' !== url.substr(0, 5) && void 0 !== this.crossOrigin && (image.crossOrigin = this.crossOrigin), scope.manager.itemStart(url), image.src = url, image;
        }
    }), CubeTextureLoader.prototype = Object.assign(Object.create(Loader.prototype), {
        constructor: CubeTextureLoader,
        load: function(urls, onLoad, onProgress, onError) {
            var texture = new CubeTexture(), loader = new ImageLoader(this.manager);
            loader.setCrossOrigin(this.crossOrigin), loader.setPath(this.path);
            for(var loaded = 0, i = 0; i < urls.length; ++i)!function(i) {
                loader.load(urls[i], function(image) {
                    texture.images[i] = image, 6 == ++loaded && (texture.needsUpdate = !0, onLoad && onLoad(texture));
                }, void 0, onError);
            }(i);
            return texture;
        }
    }), DataTextureLoader.prototype = Object.assign(Object.create(Loader.prototype), {
        constructor: DataTextureLoader,
        load: function(url, onLoad, onProgress, onError) {
            var scope = this, texture = new DataTexture(), loader = new FileLoader(this.manager);
            return loader.setResponseType('arraybuffer'), loader.setRequestHeader(this.requestHeader), loader.setPath(this.path), loader.setWithCredentials(scope.withCredentials), loader.load(url, function(buffer) {
                var texData = scope.parse(buffer);
                texData && (void 0 !== texData.image ? texture.image = texData.image : void 0 !== texData.data && (texture.image.width = texData.width, texture.image.height = texData.height, texture.image.data = texData.data), texture.wrapS = void 0 !== texData.wrapS ? texData.wrapS : 1001, texture.wrapT = void 0 !== texData.wrapT ? texData.wrapT : 1001, texture.magFilter = void 0 !== texData.magFilter ? texData.magFilter : 1006, texture.minFilter = void 0 !== texData.minFilter ? texData.minFilter : 1006, texture.anisotropy = void 0 !== texData.anisotropy ? texData.anisotropy : 1, void 0 !== texData.format && (texture.format = texData.format), void 0 !== texData.type && (texture.type = texData.type), void 0 !== texData.mipmaps && (texture.mipmaps = texData.mipmaps, texture.minFilter = 1008), 1 === texData.mipmapCount && (texture.minFilter = 1006), texture.needsUpdate = !0, onLoad && onLoad(texture, texData));
            }, onProgress, onError), texture;
        }
    }), TextureLoader.prototype = Object.assign(Object.create(Loader.prototype), {
        constructor: TextureLoader,
        load: function(url, onLoad, onProgress, onError) {
            var texture = new Texture(), loader = new ImageLoader(this.manager);
            return loader.setCrossOrigin(this.crossOrigin), loader.setPath(this.path), loader.load(url, function(image) {
                texture.image = image;
                var isJPEG = url.search(/\.jpe?g($|\?)/i) > 0 || 0 === url.search(/^data\:image\/jpeg/);
                texture.format = isJPEG ? 1022 : 1023, texture.needsUpdate = !0, void 0 !== onLoad && onLoad(texture);
            }, onProgress, onError), texture;
        }
    }), Object.assign(Curve.prototype, {
        getPoint: function() {
            return console.warn('THREE.Curve: .getPoint() not implemented.'), null;
        },
        getPointAt: function(u, optionalTarget) {
            var t = this.getUtoTmapping(u);
            return this.getPoint(t, optionalTarget);
        },
        getPoints: function(divisions) {
            void 0 === divisions && (divisions = 5);
            for(var points = [], d = 0; d <= divisions; d++)points.push(this.getPoint(d / divisions));
            return points;
        },
        getSpacedPoints: function(divisions) {
            void 0 === divisions && (divisions = 5);
            for(var points = [], d = 0; d <= divisions; d++)points.push(this.getPointAt(d / divisions));
            return points;
        },
        getLength: function() {
            var lengths = this.getLengths();
            return lengths[lengths.length - 1];
        },
        getLengths: function(divisions) {
            if (void 0 === divisions && (divisions = this.arcLengthDivisions), this.cacheArcLengths && this.cacheArcLengths.length === divisions + 1 && !this.needsUpdate) return this.cacheArcLengths;
            this.needsUpdate = !1;
            var current, cache = [], last = this.getPoint(0), sum = 0;
            cache.push(0);
            for(var p = 1; p <= divisions; p++)cache.push(sum += (current = this.getPoint(p / divisions)).distanceTo(last)), last = current;
            return this.cacheArcLengths = cache, cache;
        },
        updateArcLengths: function() {
            this.needsUpdate = !0, this.getLengths();
        },
        getUtoTmapping: function(u, distance) {
            var arcLengths = this.getLengths(), i = 0, il = arcLengths.length;
            targetArcLength = distance || u * arcLengths[il - 1];
            for(var targetArcLength, comparison, low = 0, high = il - 1; low <= high;)if ((comparison = arcLengths[i = Math.floor(low + (high - low) / 2)] - targetArcLength) < 0) low = i + 1;
            else if (comparison > 0) high = i - 1;
            else {
                high = i;
                break;
            }
            if (arcLengths[i = high] === targetArcLength) return i / (il - 1);
            var lengthBefore = arcLengths[i], lengthAfter = arcLengths[i + 1];
            return (i + (targetArcLength - lengthBefore) / (lengthAfter - lengthBefore)) / (il - 1);
        },
        getTangent: function(t, optionalTarget) {
            var t1 = t - 0.0001, t2 = t + 0.0001;
            t1 < 0 && (t1 = 0), t2 > 1 && (t2 = 1);
            var pt1 = this.getPoint(t1), pt2 = this.getPoint(t2), tangent = optionalTarget || (pt1.isVector2 ? new Vector2() : new Vector3());
            return tangent.copy(pt2).sub(pt1).normalize(), tangent;
        },
        getTangentAt: function(u, optionalTarget) {
            var t = this.getUtoTmapping(u);
            return this.getTangent(t, optionalTarget);
        },
        computeFrenetFrames: function(segments, closed) {
            for(var normal = new Vector3(), tangents = [], normals = [], binormals = [], vec = new Vector3(), mat = new Matrix4(), i = 0; i <= segments; i++){
                var u = i / segments;
                tangents[i] = this.getTangentAt(u, new Vector3()), tangents[i].normalize();
            }
            normals[0] = new Vector3(), binormals[0] = new Vector3();
            var min = Number.MAX_VALUE, tx = Math.abs(tangents[0].x), ty = Math.abs(tangents[0].y), tz = Math.abs(tangents[0].z);
            tx <= min && (min = tx, normal.set(1, 0, 0)), ty <= min && (min = ty, normal.set(0, 1, 0)), tz <= min && normal.set(0, 0, 1), vec.crossVectors(tangents[0], normal).normalize(), normals[0].crossVectors(tangents[0], vec), binormals[0].crossVectors(tangents[0], normals[0]);
            for(var _i = 1; _i <= segments; _i++){
                if (normals[_i] = normals[_i - 1].clone(), binormals[_i] = binormals[_i - 1].clone(), vec.crossVectors(tangents[_i - 1], tangents[_i]), vec.length() > Number.EPSILON) {
                    vec.normalize();
                    var theta = Math.acos(MathUtils.clamp(tangents[_i - 1].dot(tangents[_i]), -1, 1));
                    normals[_i].applyMatrix4(mat.makeRotationAxis(vec, theta));
                }
                binormals[_i].crossVectors(tangents[_i], normals[_i]);
            }
            if (!0 === closed) {
                var _theta = Math.acos(MathUtils.clamp(normals[0].dot(normals[segments]), -1, 1));
                _theta /= segments, tangents[0].dot(vec.crossVectors(normals[0], normals[segments])) > 0 && (_theta = -_theta);
                for(var _i2 = 1; _i2 <= segments; _i2++)normals[_i2].applyMatrix4(mat.makeRotationAxis(tangents[_i2], _theta * _i2)), binormals[_i2].crossVectors(tangents[_i2], normals[_i2]);
            }
            return {
                tangents: tangents,
                normals: normals,
                binormals: binormals
            };
        },
        clone: function() {
            return new this.constructor().copy(this);
        },
        copy: function(source) {
            return this.arcLengthDivisions = source.arcLengthDivisions, this;
        },
        toJSON: function() {
            var data = {
                metadata: {
                    version: 4.5,
                    type: 'Curve',
                    generator: 'Curve.toJSON'
                }
            };
            return data.arcLengthDivisions = this.arcLengthDivisions, data.type = this.type, data;
        },
        fromJSON: function(json) {
            return this.arcLengthDivisions = json.arcLengthDivisions, this;
        }
    }), EllipseCurve.prototype = Object.create(Curve.prototype), EllipseCurve.prototype.constructor = EllipseCurve, EllipseCurve.prototype.isEllipseCurve = !0, EllipseCurve.prototype.getPoint = function(t, optionalTarget) {
        for(var point = optionalTarget || new Vector2(), twoPi = 2 * Math.PI, deltaAngle = this.aEndAngle - this.aStartAngle, samePoints = Math.abs(deltaAngle) < Number.EPSILON; deltaAngle < 0;)deltaAngle += twoPi;
        for(; deltaAngle > twoPi;)deltaAngle -= twoPi;
        deltaAngle < Number.EPSILON && (deltaAngle = samePoints ? 0 : twoPi), !0 !== this.aClockwise || samePoints || (deltaAngle === twoPi ? deltaAngle = -twoPi : deltaAngle -= twoPi);
        var angle = this.aStartAngle + t * deltaAngle, x = this.aX + this.xRadius * Math.cos(angle), y = this.aY + this.yRadius * Math.sin(angle);
        if (0 !== this.aRotation) {
            var cos = Math.cos(this.aRotation), sin = Math.sin(this.aRotation), tx = x - this.aX, ty = y - this.aY;
            x = tx * cos - ty * sin + this.aX, y = tx * sin + ty * cos + this.aY;
        }
        return point.set(x, y);
    }, EllipseCurve.prototype.copy = function(source) {
        return Curve.prototype.copy.call(this, source), this.aX = source.aX, this.aY = source.aY, this.xRadius = source.xRadius, this.yRadius = source.yRadius, this.aStartAngle = source.aStartAngle, this.aEndAngle = source.aEndAngle, this.aClockwise = source.aClockwise, this.aRotation = source.aRotation, this;
    }, EllipseCurve.prototype.toJSON = function() {
        var data = Curve.prototype.toJSON.call(this);
        return data.aX = this.aX, data.aY = this.aY, data.xRadius = this.xRadius, data.yRadius = this.yRadius, data.aStartAngle = this.aStartAngle, data.aEndAngle = this.aEndAngle, data.aClockwise = this.aClockwise, data.aRotation = this.aRotation, data;
    }, EllipseCurve.prototype.fromJSON = function(json) {
        return Curve.prototype.fromJSON.call(this, json), this.aX = json.aX, this.aY = json.aY, this.xRadius = json.xRadius, this.yRadius = json.yRadius, this.aStartAngle = json.aStartAngle, this.aEndAngle = json.aEndAngle, this.aClockwise = json.aClockwise, this.aRotation = json.aRotation, this;
    }, ArcCurve.prototype = Object.create(EllipseCurve.prototype), ArcCurve.prototype.constructor = ArcCurve, ArcCurve.prototype.isArcCurve = !0;
    var tmp = new Vector3(), px = new CubicPoly(), py = new CubicPoly(), pz = new CubicPoly();
    function CatmullRomCurve3(points, closed, curveType, tension) {
        void 0 === points && (points = []), void 0 === closed && (closed = !1), void 0 === curveType && (curveType = 'centripetal'), void 0 === tension && (tension = 0.5), Curve.call(this), this.type = 'CatmullRomCurve3', this.points = points, this.closed = closed, this.curveType = curveType, this.tension = tension;
    }
    function CatmullRom(t, p0, p1, p2, p3) {
        var v0 = (p2 - p0) * 0.5, v1 = (p3 - p1) * 0.5, t2 = t * t;
        return (2 * p1 - 2 * p2 + v0 + v1) * (t * t2) + (-3 * p1 + 3 * p2 - 2 * v0 - v1) * t2 + v0 * t + p1;
    }
    function QuadraticBezier(t, p0, p1, p2) {
        var k;
        return (k = 1 - t) * k * p0 + 2 * (1 - t) * t * p1 + t * t * p2;
    }
    function CubicBezier(t, p0, p1, p2, p3) {
        var k, k1;
        return (k = 1 - t) * k * k * p0 + 3 * (k1 = 1 - t) * k1 * t * p1 + 3 * (1 - t) * t * t * p2 + t * t * t * p3;
    }
    function CubicBezierCurve(v0, v1, v2, v3) {
        void 0 === v0 && (v0 = new Vector2()), void 0 === v1 && (v1 = new Vector2()), void 0 === v2 && (v2 = new Vector2()), void 0 === v3 && (v3 = new Vector2()), Curve.call(this), this.type = 'CubicBezierCurve', this.v0 = v0, this.v1 = v1, this.v2 = v2, this.v3 = v3;
    }
    function CubicBezierCurve3(v0, v1, v2, v3) {
        void 0 === v0 && (v0 = new Vector3()), void 0 === v1 && (v1 = new Vector3()), void 0 === v2 && (v2 = new Vector3()), void 0 === v3 && (v3 = new Vector3()), Curve.call(this), this.type = 'CubicBezierCurve3', this.v0 = v0, this.v1 = v1, this.v2 = v2, this.v3 = v3;
    }
    function LineCurve(v1, v2) {
        void 0 === v1 && (v1 = new Vector2()), void 0 === v2 && (v2 = new Vector2()), Curve.call(this), this.type = 'LineCurve', this.v1 = v1, this.v2 = v2;
    }
    function LineCurve3(v1, v2) {
        void 0 === v1 && (v1 = new Vector3()), void 0 === v2 && (v2 = new Vector3()), Curve.call(this), this.type = 'LineCurve3', this.v1 = v1, this.v2 = v2;
    }
    function QuadraticBezierCurve(v0, v1, v2) {
        void 0 === v0 && (v0 = new Vector2()), void 0 === v1 && (v1 = new Vector2()), void 0 === v2 && (v2 = new Vector2()), Curve.call(this), this.type = 'QuadraticBezierCurve', this.v0 = v0, this.v1 = v1, this.v2 = v2;
    }
    function QuadraticBezierCurve3(v0, v1, v2) {
        void 0 === v0 && (v0 = new Vector3()), void 0 === v1 && (v1 = new Vector3()), void 0 === v2 && (v2 = new Vector3()), Curve.call(this), this.type = 'QuadraticBezierCurve3', this.v0 = v0, this.v1 = v1, this.v2 = v2;
    }
    function SplineCurve(points) {
        void 0 === points && (points = []), Curve.call(this), this.type = 'SplineCurve', this.points = points;
    }
    CatmullRomCurve3.prototype = Object.create(Curve.prototype), CatmullRomCurve3.prototype.constructor = CatmullRomCurve3, CatmullRomCurve3.prototype.isCatmullRomCurve3 = !0, CatmullRomCurve3.prototype.getPoint = function(t, optionalTarget) {
        void 0 === optionalTarget && (optionalTarget = new Vector3());
        var p0, p3, point = optionalTarget, points = this.points, l = points.length, p = (l - (this.closed ? 0 : 1)) * t, intPoint = Math.floor(p), weight = p - intPoint;
        this.closed ? intPoint += intPoint > 0 ? 0 : (Math.floor(Math.abs(intPoint) / l) + 1) * l : 0 === weight && intPoint === l - 1 && (intPoint = l - 2, weight = 1), this.closed || intPoint > 0 ? p0 = points[(intPoint - 1) % l] : (tmp.subVectors(points[0], points[1]).add(points[0]), p0 = tmp);
        var p1 = points[intPoint % l], p2 = points[(intPoint + 1) % l];
        if (this.closed || intPoint + 2 < l ? p3 = points[(intPoint + 2) % l] : (tmp.subVectors(points[l - 1], points[l - 2]).add(points[l - 1]), p3 = tmp), 'centripetal' === this.curveType || 'chordal' === this.curveType) {
            var pow = 'chordal' === this.curveType ? 0.5 : 0.25, dt0 = Math.pow(p0.distanceToSquared(p1), pow), dt1 = Math.pow(p1.distanceToSquared(p2), pow), dt2 = Math.pow(p2.distanceToSquared(p3), pow);
            dt1 < 1e-4 && (dt1 = 1.0), dt0 < 1e-4 && (dt0 = dt1), dt2 < 1e-4 && (dt2 = dt1), px.initNonuniformCatmullRom(p0.x, p1.x, p2.x, p3.x, dt0, dt1, dt2), py.initNonuniformCatmullRom(p0.y, p1.y, p2.y, p3.y, dt0, dt1, dt2), pz.initNonuniformCatmullRom(p0.z, p1.z, p2.z, p3.z, dt0, dt1, dt2);
        } else 'catmullrom' === this.curveType && (px.initCatmullRom(p0.x, p1.x, p2.x, p3.x, this.tension), py.initCatmullRom(p0.y, p1.y, p2.y, p3.y, this.tension), pz.initCatmullRom(p0.z, p1.z, p2.z, p3.z, this.tension));
        return point.set(px.calc(weight), py.calc(weight), pz.calc(weight)), point;
    }, CatmullRomCurve3.prototype.copy = function(source) {
        Curve.prototype.copy.call(this, source), this.points = [];
        for(var i = 0, l = source.points.length; i < l; i++){
            var point = source.points[i];
            this.points.push(point.clone());
        }
        return this.closed = source.closed, this.curveType = source.curveType, this.tension = source.tension, this;
    }, CatmullRomCurve3.prototype.toJSON = function() {
        var data = Curve.prototype.toJSON.call(this);
        data.points = [];
        for(var i = 0, l = this.points.length; i < l; i++){
            var point = this.points[i];
            data.points.push(point.toArray());
        }
        return data.closed = this.closed, data.curveType = this.curveType, data.tension = this.tension, data;
    }, CatmullRomCurve3.prototype.fromJSON = function(json) {
        Curve.prototype.fromJSON.call(this, json), this.points = [];
        for(var i = 0, l = json.points.length; i < l; i++){
            var point = json.points[i];
            this.points.push(new Vector3().fromArray(point));
        }
        return this.closed = json.closed, this.curveType = json.curveType, this.tension = json.tension, this;
    }, CubicBezierCurve.prototype = Object.create(Curve.prototype), CubicBezierCurve.prototype.constructor = CubicBezierCurve, CubicBezierCurve.prototype.isCubicBezierCurve = !0, CubicBezierCurve.prototype.getPoint = function(t, optionalTarget) {
        void 0 === optionalTarget && (optionalTarget = new Vector2());
        var point = optionalTarget, v0 = this.v0, v1 = this.v1, v2 = this.v2, v3 = this.v3;
        return point.set(CubicBezier(t, v0.x, v1.x, v2.x, v3.x), CubicBezier(t, v0.y, v1.y, v2.y, v3.y)), point;
    }, CubicBezierCurve.prototype.copy = function(source) {
        return Curve.prototype.copy.call(this, source), this.v0.copy(source.v0), this.v1.copy(source.v1), this.v2.copy(source.v2), this.v3.copy(source.v3), this;
    }, CubicBezierCurve.prototype.toJSON = function() {
        var data = Curve.prototype.toJSON.call(this);
        return data.v0 = this.v0.toArray(), data.v1 = this.v1.toArray(), data.v2 = this.v2.toArray(), data.v3 = this.v3.toArray(), data;
    }, CubicBezierCurve.prototype.fromJSON = function(json) {
        return Curve.prototype.fromJSON.call(this, json), this.v0.fromArray(json.v0), this.v1.fromArray(json.v1), this.v2.fromArray(json.v2), this.v3.fromArray(json.v3), this;
    }, CubicBezierCurve3.prototype = Object.create(Curve.prototype), CubicBezierCurve3.prototype.constructor = CubicBezierCurve3, CubicBezierCurve3.prototype.isCubicBezierCurve3 = !0, CubicBezierCurve3.prototype.getPoint = function(t, optionalTarget) {
        void 0 === optionalTarget && (optionalTarget = new Vector3());
        var point = optionalTarget, v0 = this.v0, v1 = this.v1, v2 = this.v2, v3 = this.v3;
        return point.set(CubicBezier(t, v0.x, v1.x, v2.x, v3.x), CubicBezier(t, v0.y, v1.y, v2.y, v3.y), CubicBezier(t, v0.z, v1.z, v2.z, v3.z)), point;
    }, CubicBezierCurve3.prototype.copy = function(source) {
        return Curve.prototype.copy.call(this, source), this.v0.copy(source.v0), this.v1.copy(source.v1), this.v2.copy(source.v2), this.v3.copy(source.v3), this;
    }, CubicBezierCurve3.prototype.toJSON = function() {
        var data = Curve.prototype.toJSON.call(this);
        return data.v0 = this.v0.toArray(), data.v1 = this.v1.toArray(), data.v2 = this.v2.toArray(), data.v3 = this.v3.toArray(), data;
    }, CubicBezierCurve3.prototype.fromJSON = function(json) {
        return Curve.prototype.fromJSON.call(this, json), this.v0.fromArray(json.v0), this.v1.fromArray(json.v1), this.v2.fromArray(json.v2), this.v3.fromArray(json.v3), this;
    }, LineCurve.prototype = Object.create(Curve.prototype), LineCurve.prototype.constructor = LineCurve, LineCurve.prototype.isLineCurve = !0, LineCurve.prototype.getPoint = function(t, optionalTarget) {
        void 0 === optionalTarget && (optionalTarget = new Vector2());
        var point = optionalTarget;
        return 1 === t ? point.copy(this.v2) : (point.copy(this.v2).sub(this.v1), point.multiplyScalar(t).add(this.v1)), point;
    }, LineCurve.prototype.getPointAt = function(u, optionalTarget) {
        return this.getPoint(u, optionalTarget);
    }, LineCurve.prototype.getTangent = function(t, optionalTarget) {
        var tangent = optionalTarget || new Vector2();
        return tangent.copy(this.v2).sub(this.v1).normalize(), tangent;
    }, LineCurve.prototype.copy = function(source) {
        return Curve.prototype.copy.call(this, source), this.v1.copy(source.v1), this.v2.copy(source.v2), this;
    }, LineCurve.prototype.toJSON = function() {
        var data = Curve.prototype.toJSON.call(this);
        return data.v1 = this.v1.toArray(), data.v2 = this.v2.toArray(), data;
    }, LineCurve.prototype.fromJSON = function(json) {
        return Curve.prototype.fromJSON.call(this, json), this.v1.fromArray(json.v1), this.v2.fromArray(json.v2), this;
    }, LineCurve3.prototype = Object.create(Curve.prototype), LineCurve3.prototype.constructor = LineCurve3, LineCurve3.prototype.isLineCurve3 = !0, LineCurve3.prototype.getPoint = function(t, optionalTarget) {
        void 0 === optionalTarget && (optionalTarget = new Vector3());
        var point = optionalTarget;
        return 1 === t ? point.copy(this.v2) : (point.copy(this.v2).sub(this.v1), point.multiplyScalar(t).add(this.v1)), point;
    }, LineCurve3.prototype.getPointAt = function(u, optionalTarget) {
        return this.getPoint(u, optionalTarget);
    }, LineCurve3.prototype.copy = function(source) {
        return Curve.prototype.copy.call(this, source), this.v1.copy(source.v1), this.v2.copy(source.v2), this;
    }, LineCurve3.prototype.toJSON = function() {
        var data = Curve.prototype.toJSON.call(this);
        return data.v1 = this.v1.toArray(), data.v2 = this.v2.toArray(), data;
    }, LineCurve3.prototype.fromJSON = function(json) {
        return Curve.prototype.fromJSON.call(this, json), this.v1.fromArray(json.v1), this.v2.fromArray(json.v2), this;
    }, QuadraticBezierCurve.prototype = Object.create(Curve.prototype), QuadraticBezierCurve.prototype.constructor = QuadraticBezierCurve, QuadraticBezierCurve.prototype.isQuadraticBezierCurve = !0, QuadraticBezierCurve.prototype.getPoint = function(t, optionalTarget) {
        void 0 === optionalTarget && (optionalTarget = new Vector2());
        var point = optionalTarget, v0 = this.v0, v1 = this.v1, v2 = this.v2;
        return point.set(QuadraticBezier(t, v0.x, v1.x, v2.x), QuadraticBezier(t, v0.y, v1.y, v2.y)), point;
    }, QuadraticBezierCurve.prototype.copy = function(source) {
        return Curve.prototype.copy.call(this, source), this.v0.copy(source.v0), this.v1.copy(source.v1), this.v2.copy(source.v2), this;
    }, QuadraticBezierCurve.prototype.toJSON = function() {
        var data = Curve.prototype.toJSON.call(this);
        return data.v0 = this.v0.toArray(), data.v1 = this.v1.toArray(), data.v2 = this.v2.toArray(), data;
    }, QuadraticBezierCurve.prototype.fromJSON = function(json) {
        return Curve.prototype.fromJSON.call(this, json), this.v0.fromArray(json.v0), this.v1.fromArray(json.v1), this.v2.fromArray(json.v2), this;
    }, QuadraticBezierCurve3.prototype = Object.create(Curve.prototype), QuadraticBezierCurve3.prototype.constructor = QuadraticBezierCurve3, QuadraticBezierCurve3.prototype.isQuadraticBezierCurve3 = !0, QuadraticBezierCurve3.prototype.getPoint = function(t, optionalTarget) {
        void 0 === optionalTarget && (optionalTarget = new Vector3());
        var point = optionalTarget, v0 = this.v0, v1 = this.v1, v2 = this.v2;
        return point.set(QuadraticBezier(t, v0.x, v1.x, v2.x), QuadraticBezier(t, v0.y, v1.y, v2.y), QuadraticBezier(t, v0.z, v1.z, v2.z)), point;
    }, QuadraticBezierCurve3.prototype.copy = function(source) {
        return Curve.prototype.copy.call(this, source), this.v0.copy(source.v0), this.v1.copy(source.v1), this.v2.copy(source.v2), this;
    }, QuadraticBezierCurve3.prototype.toJSON = function() {
        var data = Curve.prototype.toJSON.call(this);
        return data.v0 = this.v0.toArray(), data.v1 = this.v1.toArray(), data.v2 = this.v2.toArray(), data;
    }, QuadraticBezierCurve3.prototype.fromJSON = function(json) {
        return Curve.prototype.fromJSON.call(this, json), this.v0.fromArray(json.v0), this.v1.fromArray(json.v1), this.v2.fromArray(json.v2), this;
    }, SplineCurve.prototype = Object.create(Curve.prototype), SplineCurve.prototype.constructor = SplineCurve, SplineCurve.prototype.isSplineCurve = !0, SplineCurve.prototype.getPoint = function(t, optionalTarget) {
        void 0 === optionalTarget && (optionalTarget = new Vector2());
        var point = optionalTarget, points = this.points, p = (points.length - 1) * t, intPoint = Math.floor(p), weight = p - intPoint, p0 = points[0 === intPoint ? intPoint : intPoint - 1], p1 = points[intPoint], p2 = points[intPoint > points.length - 2 ? points.length - 1 : intPoint + 1], p3 = points[intPoint > points.length - 3 ? points.length - 1 : intPoint + 2];
        return point.set(CatmullRom(weight, p0.x, p1.x, p2.x, p3.x), CatmullRom(weight, p0.y, p1.y, p2.y, p3.y)), point;
    }, SplineCurve.prototype.copy = function(source) {
        Curve.prototype.copy.call(this, source), this.points = [];
        for(var i = 0, l = source.points.length; i < l; i++){
            var point = source.points[i];
            this.points.push(point.clone());
        }
        return this;
    }, SplineCurve.prototype.toJSON = function() {
        var data = Curve.prototype.toJSON.call(this);
        data.points = [];
        for(var i = 0, l = this.points.length; i < l; i++){
            var point = this.points[i];
            data.points.push(point.toArray());
        }
        return data;
    }, SplineCurve.prototype.fromJSON = function(json) {
        Curve.prototype.fromJSON.call(this, json), this.points = [];
        for(var i = 0, l = json.points.length; i < l; i++){
            var point = json.points[i];
            this.points.push(new Vector2().fromArray(point));
        }
        return this;
    };
    var Curves = Object.freeze({
        __proto__: null,
        ArcCurve: ArcCurve,
        CatmullRomCurve3: CatmullRomCurve3,
        CubicBezierCurve: CubicBezierCurve,
        CubicBezierCurve3: CubicBezierCurve3,
        EllipseCurve: EllipseCurve,
        LineCurve: LineCurve,
        LineCurve3: LineCurve3,
        QuadraticBezierCurve: QuadraticBezierCurve,
        QuadraticBezierCurve3: QuadraticBezierCurve3,
        SplineCurve: SplineCurve
    });
    function CurvePath() {
        Curve.call(this), this.type = 'CurvePath', this.curves = [], this.autoClose = !1;
    }
    function Path(points) {
        CurvePath.call(this), this.type = 'Path', this.currentPoint = new Vector2(), points && this.setFromPoints(points);
    }
    function Shape(points) {
        Path.call(this, points), this.uuid = MathUtils.generateUUID(), this.type = 'Shape', this.holes = [];
    }
    function Light(color, intensity) {
        void 0 === intensity && (intensity = 1), Object3D.call(this), this.type = 'Light', this.color = new Color(color), this.intensity = intensity;
    }
    function HemisphereLight(skyColor, groundColor, intensity) {
        Light.call(this, skyColor, intensity), this.type = 'HemisphereLight', this.position.copy(Object3D.DefaultUp), this.updateMatrix(), this.groundColor = new Color(groundColor);
    }
    function LightShadow(camera) {
        this.camera = camera, this.bias = 0, this.normalBias = 0, this.radius = 1, this.mapSize = new Vector2(512, 512), this.map = null, this.mapPass = null, this.matrix = new Matrix4(), this.autoUpdate = !0, this.needsUpdate = !1, this._frustum = new Frustum(), this._frameExtents = new Vector2(1, 1), this._viewportCount = 1, this._viewports = [
            new Vector4(0, 0, 1, 1)
        ];
    }
    function SpotLightShadow() {
        LightShadow.call(this, new PerspectiveCamera(50, 1, 0.5, 500)), this.focus = 1;
    }
    function SpotLight(color, intensity, distance, angle, penumbra, decay) {
        Light.call(this, color, intensity), this.type = 'SpotLight', this.position.copy(Object3D.DefaultUp), this.updateMatrix(), this.target = new Object3D(), Object.defineProperty(this, 'power', {
            get: function() {
                return this.intensity * Math.PI;
            },
            set: function(power) {
                this.intensity = power / Math.PI;
            }
        }), this.distance = void 0 !== distance ? distance : 0, this.angle = void 0 !== angle ? angle : Math.PI / 3, this.penumbra = void 0 !== penumbra ? penumbra : 0, this.decay = void 0 !== decay ? decay : 1, this.shadow = new SpotLightShadow();
    }
    function PointLightShadow() {
        LightShadow.call(this, new PerspectiveCamera(90, 1, 0.5, 500)), this._frameExtents = new Vector2(4, 2), this._viewportCount = 6, this._viewports = [
            new Vector4(2, 1, 1, 1),
            new Vector4(0, 1, 1, 1),
            new Vector4(3, 1, 1, 1),
            new Vector4(1, 1, 1, 1),
            new Vector4(3, 0, 1, 1),
            new Vector4(1, 0, 1, 1)
        ], this._cubeDirections = [
            new Vector3(1, 0, 0),
            new Vector3(-1, 0, 0),
            new Vector3(0, 0, 1),
            new Vector3(0, 0, -1),
            new Vector3(0, 1, 0),
            new Vector3(0, -1, 0)
        ], this._cubeUps = [
            new Vector3(0, 1, 0),
            new Vector3(0, 1, 0),
            new Vector3(0, 1, 0),
            new Vector3(0, 1, 0),
            new Vector3(0, 0, 1),
            new Vector3(0, 0, -1)
        ];
    }
    function PointLight(color, intensity, distance, decay) {
        Light.call(this, color, intensity), this.type = 'PointLight', Object.defineProperty(this, 'power', {
            get: function() {
                return 4 * this.intensity * Math.PI;
            },
            set: function(power) {
                this.intensity = power / (4 * Math.PI);
            }
        }), this.distance = void 0 !== distance ? distance : 0, this.decay = void 0 !== decay ? decay : 1, this.shadow = new PointLightShadow();
    }
    function OrthographicCamera(left, right, top, bottom, near, far) {
        void 0 === left && (left = -1), void 0 === right && (right = 1), void 0 === top && (top = 1), void 0 === bottom && (bottom = -1), void 0 === near && (near = 0.1), void 0 === far && (far = 2000), Camera.call(this), this.type = 'OrthographicCamera', this.zoom = 1, this.view = null, this.left = left, this.right = right, this.top = top, this.bottom = bottom, this.near = near, this.far = far, this.updateProjectionMatrix();
    }
    function DirectionalLightShadow() {
        LightShadow.call(this, new OrthographicCamera(-5, 5, 5, -5, 0.5, 500));
    }
    function DirectionalLight(color, intensity) {
        Light.call(this, color, intensity), this.type = 'DirectionalLight', this.position.copy(Object3D.DefaultUp), this.updateMatrix(), this.target = new Object3D(), this.shadow = new DirectionalLightShadow();
    }
    function AmbientLight(color, intensity) {
        Light.call(this, color, intensity), this.type = 'AmbientLight';
    }
    function RectAreaLight(color, intensity, width, height) {
        Light.call(this, color, intensity), this.type = 'RectAreaLight', this.width = void 0 !== width ? width : 10, this.height = void 0 !== height ? height : 10;
    }
    CurvePath.prototype = Object.assign(Object.create(Curve.prototype), {
        constructor: CurvePath,
        add: function(curve) {
            this.curves.push(curve);
        },
        closePath: function() {
            var startPoint = this.curves[0].getPoint(0), endPoint = this.curves[this.curves.length - 1].getPoint(1);
            startPoint.equals(endPoint) || this.curves.push(new LineCurve(endPoint, startPoint));
        },
        getPoint: function(t) {
            for(var d = t * this.getLength(), curveLengths = this.getCurveLengths(), i = 0; i < curveLengths.length;){
                if (curveLengths[i] >= d) {
                    var diff = curveLengths[i] - d, curve = this.curves[i], segmentLength = curve.getLength(), u = 0 === segmentLength ? 0 : 1 - diff / segmentLength;
                    return curve.getPointAt(u);
                }
                i++;
            }
            return null;
        },
        getLength: function() {
            var lens = this.getCurveLengths();
            return lens[lens.length - 1];
        },
        updateArcLengths: function() {
            this.needsUpdate = !0, this.cacheLengths = null, this.getCurveLengths();
        },
        getCurveLengths: function() {
            if (this.cacheLengths && this.cacheLengths.length === this.curves.length) return this.cacheLengths;
            for(var lengths = [], sums = 0, i = 0, l = this.curves.length; i < l; i++)lengths.push(sums += this.curves[i].getLength());
            return this.cacheLengths = lengths, lengths;
        },
        getSpacedPoints: function(divisions) {
            void 0 === divisions && (divisions = 40);
            for(var points = [], i = 0; i <= divisions; i++)points.push(this.getPoint(i / divisions));
            return this.autoClose && points.push(points[0]), points;
        },
        getPoints: function(divisions) {
            void 0 === divisions && (divisions = 12);
            for(var last, points = [], i = 0, curves = this.curves; i < curves.length; i++)for(var curve = curves[i], resolution = curve && curve.isEllipseCurve ? 2 * divisions : curve && (curve.isLineCurve || curve.isLineCurve3) ? 1 : curve && curve.isSplineCurve ? divisions * curve.points.length : divisions, pts = curve.getPoints(resolution), j = 0; j < pts.length; j++){
                var point = pts[j];
                last && last.equals(point) || (points.push(point), last = point);
            }
            return this.autoClose && points.length > 1 && !points[points.length - 1].equals(points[0]) && points.push(points[0]), points;
        },
        copy: function(source) {
            Curve.prototype.copy.call(this, source), this.curves = [];
            for(var i = 0, l = source.curves.length; i < l; i++){
                var curve = source.curves[i];
                this.curves.push(curve.clone());
            }
            return this.autoClose = source.autoClose, this;
        },
        toJSON: function() {
            var data = Curve.prototype.toJSON.call(this);
            data.autoClose = this.autoClose, data.curves = [];
            for(var i = 0, l = this.curves.length; i < l; i++){
                var curve = this.curves[i];
                data.curves.push(curve.toJSON());
            }
            return data;
        },
        fromJSON: function(json) {
            Curve.prototype.fromJSON.call(this, json), this.autoClose = json.autoClose, this.curves = [];
            for(var i = 0, l = json.curves.length; i < l; i++){
                var curve = json.curves[i];
                this.curves.push(new Curves[curve.type]().fromJSON(curve));
            }
            return this;
        }
    }), Path.prototype = Object.assign(Object.create(CurvePath.prototype), {
        constructor: Path,
        setFromPoints: function(points) {
            this.moveTo(points[0].x, points[0].y);
            for(var i = 1, l = points.length; i < l; i++)this.lineTo(points[i].x, points[i].y);
            return this;
        },
        moveTo: function(x, y) {
            return this.currentPoint.set(x, y), this;
        },
        lineTo: function(x, y) {
            var curve = new LineCurve(this.currentPoint.clone(), new Vector2(x, y));
            return this.curves.push(curve), this.currentPoint.set(x, y), this;
        },
        quadraticCurveTo: function(aCPx, aCPy, aX, aY) {
            var curve = new QuadraticBezierCurve(this.currentPoint.clone(), new Vector2(aCPx, aCPy), new Vector2(aX, aY));
            return this.curves.push(curve), this.currentPoint.set(aX, aY), this;
        },
        bezierCurveTo: function(aCP1x, aCP1y, aCP2x, aCP2y, aX, aY) {
            var curve = new CubicBezierCurve(this.currentPoint.clone(), new Vector2(aCP1x, aCP1y), new Vector2(aCP2x, aCP2y), new Vector2(aX, aY));
            return this.curves.push(curve), this.currentPoint.set(aX, aY), this;
        },
        splineThru: function(pts) {
            var npts = [
                this.currentPoint.clone()
            ].concat(pts), curve = new SplineCurve(npts);
            return this.curves.push(curve), this.currentPoint.copy(pts[pts.length - 1]), this;
        },
        arc: function(aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise) {
            var x0 = this.currentPoint.x, y0 = this.currentPoint.y;
            return this.absarc(aX + x0, aY + y0, aRadius, aStartAngle, aEndAngle, aClockwise), this;
        },
        absarc: function(aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise) {
            return this.absellipse(aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise), this;
        },
        ellipse: function(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation) {
            var x0 = this.currentPoint.x, y0 = this.currentPoint.y;
            return this.absellipse(aX + x0, aY + y0, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation), this;
        },
        absellipse: function(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation) {
            var curve = new EllipseCurve(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation);
            if (this.curves.length > 0) {
                var firstPoint = curve.getPoint(0);
                firstPoint.equals(this.currentPoint) || this.lineTo(firstPoint.x, firstPoint.y);
            }
            this.curves.push(curve);
            var lastPoint = curve.getPoint(1);
            return this.currentPoint.copy(lastPoint), this;
        },
        copy: function(source) {
            return CurvePath.prototype.copy.call(this, source), this.currentPoint.copy(source.currentPoint), this;
        },
        toJSON: function() {
            var data = CurvePath.prototype.toJSON.call(this);
            return data.currentPoint = this.currentPoint.toArray(), data;
        },
        fromJSON: function(json) {
            return CurvePath.prototype.fromJSON.call(this, json), this.currentPoint.fromArray(json.currentPoint), this;
        }
    }), Shape.prototype = Object.assign(Object.create(Path.prototype), {
        constructor: Shape,
        getPointsHoles: function(divisions) {
            for(var holesPts = [], i = 0, l = this.holes.length; i < l; i++)holesPts[i] = this.holes[i].getPoints(divisions);
            return holesPts;
        },
        extractPoints: function(divisions) {
            return {
                shape: this.getPoints(divisions),
                holes: this.getPointsHoles(divisions)
            };
        },
        copy: function(source) {
            Path.prototype.copy.call(this, source), this.holes = [];
            for(var i = 0, l = source.holes.length; i < l; i++){
                var hole = source.holes[i];
                this.holes.push(hole.clone());
            }
            return this;
        },
        toJSON: function() {
            var data = Path.prototype.toJSON.call(this);
            data.uuid = this.uuid, data.holes = [];
            for(var i = 0, l = this.holes.length; i < l; i++){
                var hole = this.holes[i];
                data.holes.push(hole.toJSON());
            }
            return data;
        },
        fromJSON: function(json) {
            Path.prototype.fromJSON.call(this, json), this.uuid = json.uuid, this.holes = [];
            for(var i = 0, l = json.holes.length; i < l; i++){
                var hole = json.holes[i];
                this.holes.push(new Path().fromJSON(hole));
            }
            return this;
        }
    }), Light.prototype = Object.assign(Object.create(Object3D.prototype), {
        constructor: Light,
        isLight: !0,
        copy: function(source) {
            return Object3D.prototype.copy.call(this, source), this.color.copy(source.color), this.intensity = source.intensity, this;
        },
        toJSON: function(meta) {
            var data = Object3D.prototype.toJSON.call(this, meta);
            return data.object.color = this.color.getHex(), data.object.intensity = this.intensity, void 0 !== this.groundColor && (data.object.groundColor = this.groundColor.getHex()), void 0 !== this.distance && (data.object.distance = this.distance), void 0 !== this.angle && (data.object.angle = this.angle), void 0 !== this.decay && (data.object.decay = this.decay), void 0 !== this.penumbra && (data.object.penumbra = this.penumbra), void 0 !== this.shadow && (data.object.shadow = this.shadow.toJSON()), data;
        }
    }), HemisphereLight.prototype = Object.assign(Object.create(Light.prototype), {
        constructor: HemisphereLight,
        isHemisphereLight: !0,
        copy: function(source) {
            return Light.prototype.copy.call(this, source), this.groundColor.copy(source.groundColor), this;
        }
    }), Object.assign(LightShadow.prototype, {
        _projScreenMatrix: new Matrix4(),
        _lightPositionWorld: new Vector3(),
        _lookTarget: new Vector3(),
        getViewportCount: function() {
            return this._viewportCount;
        },
        getFrustum: function() {
            return this._frustum;
        },
        updateMatrices: function(light) {
            var shadowCamera = this.camera, shadowMatrix = this.matrix, projScreenMatrix = this._projScreenMatrix, lookTarget = this._lookTarget, lightPositionWorld = this._lightPositionWorld;
            lightPositionWorld.setFromMatrixPosition(light.matrixWorld), shadowCamera.position.copy(lightPositionWorld), lookTarget.setFromMatrixPosition(light.target.matrixWorld), shadowCamera.lookAt(lookTarget), shadowCamera.updateMatrixWorld(), projScreenMatrix.multiplyMatrices(shadowCamera.projectionMatrix, shadowCamera.matrixWorldInverse), this._frustum.setFromProjectionMatrix(projScreenMatrix), shadowMatrix.set(0.5, 0.0, 0.0, 0.5, 0.0, 0.5, 0.0, 0.5, 0.0, 0.0, 0.5, 0.5, 0.0, 0.0, 0.0, 1.0), shadowMatrix.multiply(shadowCamera.projectionMatrix), shadowMatrix.multiply(shadowCamera.matrixWorldInverse);
        },
        getViewport: function(viewportIndex) {
            return this._viewports[viewportIndex];
        },
        getFrameExtents: function() {
            return this._frameExtents;
        },
        copy: function(source) {
            return this.camera = source.camera.clone(), this.bias = source.bias, this.radius = source.radius, this.mapSize.copy(source.mapSize), this;
        },
        clone: function() {
            return new this.constructor().copy(this);
        },
        toJSON: function() {
            var object = {};
            return 0 !== this.bias && (object.bias = this.bias), 0 !== this.normalBias && (object.normalBias = this.normalBias), 1 !== this.radius && (object.radius = this.radius), (512 !== this.mapSize.x || 512 !== this.mapSize.y) && (object.mapSize = this.mapSize.toArray()), object.camera = this.camera.toJSON(!1).object, delete object.camera.matrix, object;
        }
    }), SpotLightShadow.prototype = Object.assign(Object.create(LightShadow.prototype), {
        constructor: SpotLightShadow,
        isSpotLightShadow: !0,
        updateMatrices: function(light) {
            var camera = this.camera, fov = 2 * MathUtils.RAD2DEG * light.angle * this.focus, aspect = this.mapSize.width / this.mapSize.height, far = light.distance || camera.far;
            (fov !== camera.fov || aspect !== camera.aspect || far !== camera.far) && (camera.fov = fov, camera.aspect = aspect, camera.far = far, camera.updateProjectionMatrix()), LightShadow.prototype.updateMatrices.call(this, light);
        }
    }), SpotLight.prototype = Object.assign(Object.create(Light.prototype), {
        constructor: SpotLight,
        isSpotLight: !0,
        copy: function(source) {
            return Light.prototype.copy.call(this, source), this.distance = source.distance, this.angle = source.angle, this.penumbra = source.penumbra, this.decay = source.decay, this.target = source.target.clone(), this.shadow = source.shadow.clone(), this;
        }
    }), PointLightShadow.prototype = Object.assign(Object.create(LightShadow.prototype), {
        constructor: PointLightShadow,
        isPointLightShadow: !0,
        updateMatrices: function(light, viewportIndex) {
            void 0 === viewportIndex && (viewportIndex = 0);
            var camera = this.camera, shadowMatrix = this.matrix, lightPositionWorld = this._lightPositionWorld, lookTarget = this._lookTarget, projScreenMatrix = this._projScreenMatrix;
            lightPositionWorld.setFromMatrixPosition(light.matrixWorld), camera.position.copy(lightPositionWorld), lookTarget.copy(camera.position), lookTarget.add(this._cubeDirections[viewportIndex]), camera.up.copy(this._cubeUps[viewportIndex]), camera.lookAt(lookTarget), camera.updateMatrixWorld(), shadowMatrix.makeTranslation(-lightPositionWorld.x, -lightPositionWorld.y, -lightPositionWorld.z), projScreenMatrix.multiplyMatrices(camera.projectionMatrix, camera.matrixWorldInverse), this._frustum.setFromProjectionMatrix(projScreenMatrix);
        }
    }), PointLight.prototype = Object.assign(Object.create(Light.prototype), {
        constructor: PointLight,
        isPointLight: !0,
        copy: function(source) {
            return Light.prototype.copy.call(this, source), this.distance = source.distance, this.decay = source.decay, this.shadow = source.shadow.clone(), this;
        }
    }), OrthographicCamera.prototype = Object.assign(Object.create(Camera.prototype), {
        constructor: OrthographicCamera,
        isOrthographicCamera: !0,
        copy: function(source, recursive) {
            return Camera.prototype.copy.call(this, source, recursive), this.left = source.left, this.right = source.right, this.top = source.top, this.bottom = source.bottom, this.near = source.near, this.far = source.far, this.zoom = source.zoom, this.view = null === source.view ? null : Object.assign({}, source.view), this;
        },
        setViewOffset: function(fullWidth, fullHeight, x, y, width, height) {
            null === this.view && (this.view = {
                enabled: !0,
                fullWidth: 1,
                fullHeight: 1,
                offsetX: 0,
                offsetY: 0,
                width: 1,
                height: 1
            }), this.view.enabled = !0, this.view.fullWidth = fullWidth, this.view.fullHeight = fullHeight, this.view.offsetX = x, this.view.offsetY = y, this.view.width = width, this.view.height = height, this.updateProjectionMatrix();
        },
        clearViewOffset: function() {
            null !== this.view && (this.view.enabled = !1), this.updateProjectionMatrix();
        },
        updateProjectionMatrix: function() {
            var dx = (this.right - this.left) / (2 * this.zoom), dy = (this.top - this.bottom) / (2 * this.zoom), cx = (this.right + this.left) / 2, cy = (this.top + this.bottom) / 2, left = cx - dx, right = cx + dx, top = cy + dy, bottom = cy - dy;
            if (null !== this.view && this.view.enabled) {
                var scaleW = (this.right - this.left) / this.view.fullWidth / this.zoom, scaleH = (this.top - this.bottom) / this.view.fullHeight / this.zoom;
                left += scaleW * this.view.offsetX, right = left + scaleW * this.view.width, top -= scaleH * this.view.offsetY, bottom = top - scaleH * this.view.height;
            }
            this.projectionMatrix.makeOrthographic(left, right, top, bottom, this.near, this.far), this.projectionMatrixInverse.copy(this.projectionMatrix).invert();
        },
        toJSON: function(meta) {
            var data = Object3D.prototype.toJSON.call(this, meta);
            return data.object.zoom = this.zoom, data.object.left = this.left, data.object.right = this.right, data.object.top = this.top, data.object.bottom = this.bottom, data.object.near = this.near, data.object.far = this.far, null !== this.view && (data.object.view = Object.assign({}, this.view)), data;
        }
    }), DirectionalLightShadow.prototype = Object.assign(Object.create(LightShadow.prototype), {
        constructor: DirectionalLightShadow,
        isDirectionalLightShadow: !0,
        updateMatrices: function(light) {
            LightShadow.prototype.updateMatrices.call(this, light);
        }
    }), DirectionalLight.prototype = Object.assign(Object.create(Light.prototype), {
        constructor: DirectionalLight,
        isDirectionalLight: !0,
        copy: function(source) {
            return Light.prototype.copy.call(this, source), this.target = source.target.clone(), this.shadow = source.shadow.clone(), this;
        }
    }), AmbientLight.prototype = Object.assign(Object.create(Light.prototype), {
        constructor: AmbientLight,
        isAmbientLight: !0
    }), RectAreaLight.prototype = Object.assign(Object.create(Light.prototype), {
        constructor: RectAreaLight,
        isRectAreaLight: !0,
        copy: function(source) {
            return Light.prototype.copy.call(this, source), this.width = source.width, this.height = source.height, this;
        },
        toJSON: function(meta) {
            var data = Light.prototype.toJSON.call(this, meta);
            return data.object.width = this.width, data.object.height = this.height, data;
        }
    });
    var SphericalHarmonics3 = function() {
        function SphericalHarmonics3() {
            Object.defineProperty(this, 'isSphericalHarmonics3', {
                value: !0
            }), this.coefficients = [];
            for(var i = 0; i < 9; i++)this.coefficients.push(new Vector3());
        }
        var _proto = SphericalHarmonics3.prototype;
        return _proto.set = function(coefficients) {
            for(var i = 0; i < 9; i++)this.coefficients[i].copy(coefficients[i]);
            return this;
        }, _proto.zero = function() {
            for(var i = 0; i < 9; i++)this.coefficients[i].set(0, 0, 0);
            return this;
        }, _proto.getAt = function(normal, target) {
            var x = normal.x, y = normal.y, z = normal.z, coeff = this.coefficients;
            return target.copy(coeff[0]).multiplyScalar(0.282095), target.addScaledVector(coeff[1], 0.488603 * y), target.addScaledVector(coeff[2], 0.488603 * z), target.addScaledVector(coeff[3], 0.488603 * x), target.addScaledVector(coeff[4], 1.092548 * (x * y)), target.addScaledVector(coeff[5], 1.092548 * (y * z)), target.addScaledVector(coeff[6], 0.315392 * (3.0 * z * z - 1.0)), target.addScaledVector(coeff[7], 1.092548 * (x * z)), target.addScaledVector(coeff[8], 0.546274 * (x * x - y * y)), target;
        }, _proto.getIrradianceAt = function(normal, target) {
            var x = normal.x, y = normal.y, z = normal.z, coeff = this.coefficients;
            return target.copy(coeff[0]).multiplyScalar(0.886227), target.addScaledVector(coeff[1], 1.023328 * y), target.addScaledVector(coeff[2], 1.023328 * z), target.addScaledVector(coeff[3], 1.023328 * x), target.addScaledVector(coeff[4], 0.858086 * x * y), target.addScaledVector(coeff[5], 0.858086 * y * z), target.addScaledVector(coeff[6], 0.743125 * z * z - 0.247708), target.addScaledVector(coeff[7], 0.858086 * x * z), target.addScaledVector(coeff[8], 0.429043 * (x * x - y * y)), target;
        }, _proto.add = function(sh) {
            for(var i = 0; i < 9; i++)this.coefficients[i].add(sh.coefficients[i]);
            return this;
        }, _proto.addScaledSH = function(sh, s) {
            for(var i = 0; i < 9; i++)this.coefficients[i].addScaledVector(sh.coefficients[i], s);
            return this;
        }, _proto.scale = function(s) {
            for(var i = 0; i < 9; i++)this.coefficients[i].multiplyScalar(s);
            return this;
        }, _proto.lerp = function(sh, alpha) {
            for(var i = 0; i < 9; i++)this.coefficients[i].lerp(sh.coefficients[i], alpha);
            return this;
        }, _proto.equals = function(sh) {
            for(var i = 0; i < 9; i++)if (!this.coefficients[i].equals(sh.coefficients[i])) return !1;
            return !0;
        }, _proto.copy = function(sh) {
            return this.set(sh.coefficients);
        }, _proto.clone = function() {
            return new this.constructor().copy(this);
        }, _proto.fromArray = function(array, offset) {
            void 0 === offset && (offset = 0);
            for(var coefficients = this.coefficients, i = 0; i < 9; i++)coefficients[i].fromArray(array, offset + 3 * i);
            return this;
        }, _proto.toArray = function(array, offset) {
            void 0 === array && (array = []), void 0 === offset && (offset = 0);
            for(var coefficients = this.coefficients, i = 0; i < 9; i++)coefficients[i].toArray(array, offset + 3 * i);
            return array;
        }, SphericalHarmonics3.getBasisAt = function(normal, shBasis) {
            var x = normal.x, y = normal.y, z = normal.z;
            shBasis[0] = 0.282095, shBasis[1] = 0.488603 * y, shBasis[2] = 0.488603 * z, shBasis[3] = 0.488603 * x, shBasis[4] = 1.092548 * x * y, shBasis[5] = 1.092548 * y * z, shBasis[6] = 0.315392 * (3 * z * z - 1), shBasis[7] = 1.092548 * x * z, shBasis[8] = 0.546274 * (x * x - y * y);
        }, SphericalHarmonics3;
    }();
    function LightProbe(sh, intensity) {
        Light.call(this, void 0, intensity), this.type = 'LightProbe', this.sh = void 0 !== sh ? sh : new SphericalHarmonics3();
    }
    function MaterialLoader(manager) {
        Loader.call(this, manager), this.textures = {};
    }
    LightProbe.prototype = Object.assign(Object.create(Light.prototype), {
        constructor: LightProbe,
        isLightProbe: !0,
        copy: function(source) {
            return Light.prototype.copy.call(this, source), this.sh.copy(source.sh), this;
        },
        fromJSON: function(json) {
            return this.intensity = json.intensity, this.sh.fromArray(json.sh), this;
        },
        toJSON: function(meta) {
            var data = Light.prototype.toJSON.call(this, meta);
            return data.object.sh = this.sh.toArray(), data;
        }
    }), MaterialLoader.prototype = Object.assign(Object.create(Loader.prototype), {
        constructor: MaterialLoader,
        load: function(url, onLoad, onProgress, onError) {
            var scope = this, loader = new FileLoader(scope.manager);
            loader.setPath(scope.path), loader.setRequestHeader(scope.requestHeader), loader.setWithCredentials(scope.withCredentials), loader.load(url, function(text) {
                try {
                    onLoad(scope.parse(JSON.parse(text)));
                } catch (e) {
                    onError ? onError(e) : console.error(e), scope.manager.itemError(url);
                }
            }, onProgress, onError);
        },
        parse: function(json) {
            var textures = this.textures;
            function getTexture(name) {
                return void 0 === textures[name] && console.warn('THREE.MaterialLoader: Undefined texture', name), textures[name];
            }
            var material = new Materials[json.type]();
            if (void 0 !== json.uuid && (material.uuid = json.uuid), void 0 !== json.name && (material.name = json.name), void 0 !== json.color && void 0 !== material.color && material.color.setHex(json.color), void 0 !== json.roughness && (material.roughness = json.roughness), void 0 !== json.metalness && (material.metalness = json.metalness), void 0 !== json.sheen && (material.sheen = new Color().setHex(json.sheen)), void 0 !== json.emissive && void 0 !== material.emissive && material.emissive.setHex(json.emissive), void 0 !== json.specular && void 0 !== material.specular && material.specular.setHex(json.specular), void 0 !== json.shininess && (material.shininess = json.shininess), void 0 !== json.clearcoat && (material.clearcoat = json.clearcoat), void 0 !== json.clearcoatRoughness && (material.clearcoatRoughness = json.clearcoatRoughness), void 0 !== json.fog && (material.fog = json.fog), void 0 !== json.flatShading && (material.flatShading = json.flatShading), void 0 !== json.blending && (material.blending = json.blending), void 0 !== json.combine && (material.combine = json.combine), void 0 !== json.side && (material.side = json.side), void 0 !== json.opacity && (material.opacity = json.opacity), void 0 !== json.transparent && (material.transparent = json.transparent), void 0 !== json.alphaTest && (material.alphaTest = json.alphaTest), void 0 !== json.depthTest && (material.depthTest = json.depthTest), void 0 !== json.depthWrite && (material.depthWrite = json.depthWrite), void 0 !== json.colorWrite && (material.colorWrite = json.colorWrite), void 0 !== json.stencilWrite && (material.stencilWrite = json.stencilWrite), void 0 !== json.stencilWriteMask && (material.stencilWriteMask = json.stencilWriteMask), void 0 !== json.stencilFunc && (material.stencilFunc = json.stencilFunc), void 0 !== json.stencilRef && (material.stencilRef = json.stencilRef), void 0 !== json.stencilFuncMask && (material.stencilFuncMask = json.stencilFuncMask), void 0 !== json.stencilFail && (material.stencilFail = json.stencilFail), void 0 !== json.stencilZFail && (material.stencilZFail = json.stencilZFail), void 0 !== json.stencilZPass && (material.stencilZPass = json.stencilZPass), void 0 !== json.wireframe && (material.wireframe = json.wireframe), void 0 !== json.wireframeLinewidth && (material.wireframeLinewidth = json.wireframeLinewidth), void 0 !== json.wireframeLinecap && (material.wireframeLinecap = json.wireframeLinecap), void 0 !== json.wireframeLinejoin && (material.wireframeLinejoin = json.wireframeLinejoin), void 0 !== json.rotation && (material.rotation = json.rotation), 1 !== json.linewidth && (material.linewidth = json.linewidth), void 0 !== json.dashSize && (material.dashSize = json.dashSize), void 0 !== json.gapSize && (material.gapSize = json.gapSize), void 0 !== json.scale && (material.scale = json.scale), void 0 !== json.polygonOffset && (material.polygonOffset = json.polygonOffset), void 0 !== json.polygonOffsetFactor && (material.polygonOffsetFactor = json.polygonOffsetFactor), void 0 !== json.polygonOffsetUnits && (material.polygonOffsetUnits = json.polygonOffsetUnits), void 0 !== json.skinning && (material.skinning = json.skinning), void 0 !== json.morphTargets && (material.morphTargets = json.morphTargets), void 0 !== json.morphNormals && (material.morphNormals = json.morphNormals), void 0 !== json.dithering && (material.dithering = json.dithering), void 0 !== json.vertexTangents && (material.vertexTangents = json.vertexTangents), void 0 !== json.visible && (material.visible = json.visible), void 0 !== json.toneMapped && (material.toneMapped = json.toneMapped), void 0 !== json.userData && (material.userData = json.userData), void 0 !== json.vertexColors && ('number' == typeof json.vertexColors ? material.vertexColors = json.vertexColors > 0 : material.vertexColors = json.vertexColors), void 0 !== json.uniforms) for(var name in json.uniforms){
                var uniform = json.uniforms[name];
                switch(material.uniforms[name] = {}, uniform.type){
                    case 't':
                        material.uniforms[name].value = getTexture(uniform.value);
                        break;
                    case 'c':
                        material.uniforms[name].value = new Color().setHex(uniform.value);
                        break;
                    case 'v2':
                        material.uniforms[name].value = new Vector2().fromArray(uniform.value);
                        break;
                    case 'v3':
                        material.uniforms[name].value = new Vector3().fromArray(uniform.value);
                        break;
                    case 'v4':
                        material.uniforms[name].value = new Vector4().fromArray(uniform.value);
                        break;
                    case 'm3':
                        material.uniforms[name].value = new Matrix3().fromArray(uniform.value);
                        break;
                    case 'm4':
                        material.uniforms[name].value = new Matrix4().fromArray(uniform.value);
                        break;
                    default:
                        material.uniforms[name].value = uniform.value;
                }
            }
            if (void 0 !== json.defines && (material.defines = json.defines), void 0 !== json.vertexShader && (material.vertexShader = json.vertexShader), void 0 !== json.fragmentShader && (material.fragmentShader = json.fragmentShader), void 0 !== json.extensions) for(var key in json.extensions)material.extensions[key] = json.extensions[key];
            if (void 0 !== json.shading && (material.flatShading = 1 === json.shading), void 0 !== json.size && (material.size = json.size), void 0 !== json.sizeAttenuation && (material.sizeAttenuation = json.sizeAttenuation), void 0 !== json.map && (material.map = getTexture(json.map)), void 0 !== json.matcap && (material.matcap = getTexture(json.matcap)), void 0 !== json.alphaMap && (material.alphaMap = getTexture(json.alphaMap)), void 0 !== json.bumpMap && (material.bumpMap = getTexture(json.bumpMap)), void 0 !== json.bumpScale && (material.bumpScale = json.bumpScale), void 0 !== json.normalMap && (material.normalMap = getTexture(json.normalMap)), void 0 !== json.normalMapType && (material.normalMapType = json.normalMapType), void 0 !== json.normalScale) {
                var normalScale = json.normalScale;
                !1 === Array.isArray(normalScale) && (normalScale = [
                    normalScale,
                    normalScale
                ]), material.normalScale = new Vector2().fromArray(normalScale);
            }
            return void 0 !== json.displacementMap && (material.displacementMap = getTexture(json.displacementMap)), void 0 !== json.displacementScale && (material.displacementScale = json.displacementScale), void 0 !== json.displacementBias && (material.displacementBias = json.displacementBias), void 0 !== json.roughnessMap && (material.roughnessMap = getTexture(json.roughnessMap)), void 0 !== json.metalnessMap && (material.metalnessMap = getTexture(json.metalnessMap)), void 0 !== json.emissiveMap && (material.emissiveMap = getTexture(json.emissiveMap)), void 0 !== json.emissiveIntensity && (material.emissiveIntensity = json.emissiveIntensity), void 0 !== json.specularMap && (material.specularMap = getTexture(json.specularMap)), void 0 !== json.envMap && (material.envMap = getTexture(json.envMap)), void 0 !== json.envMapIntensity && (material.envMapIntensity = json.envMapIntensity), void 0 !== json.reflectivity && (material.reflectivity = json.reflectivity), void 0 !== json.refractionRatio && (material.refractionRatio = json.refractionRatio), void 0 !== json.lightMap && (material.lightMap = getTexture(json.lightMap)), void 0 !== json.lightMapIntensity && (material.lightMapIntensity = json.lightMapIntensity), void 0 !== json.aoMap && (material.aoMap = getTexture(json.aoMap)), void 0 !== json.aoMapIntensity && (material.aoMapIntensity = json.aoMapIntensity), void 0 !== json.gradientMap && (material.gradientMap = getTexture(json.gradientMap)), void 0 !== json.clearcoatMap && (material.clearcoatMap = getTexture(json.clearcoatMap)), void 0 !== json.clearcoatRoughnessMap && (material.clearcoatRoughnessMap = getTexture(json.clearcoatRoughnessMap)), void 0 !== json.clearcoatNormalMap && (material.clearcoatNormalMap = getTexture(json.clearcoatNormalMap)), void 0 !== json.clearcoatNormalScale && (material.clearcoatNormalScale = new Vector2().fromArray(json.clearcoatNormalScale)), void 0 !== json.transmission && (material.transmission = json.transmission), void 0 !== json.transmissionMap && (material.transmissionMap = getTexture(json.transmissionMap)), material;
        },
        setTextures: function(value) {
            return this.textures = value, this;
        }
    });
    var LoaderUtils = {
        decodeText: function(array) {
            if ('undefined' != typeof TextDecoder) return new TextDecoder().decode(array);
            for(var s = '', i = 0, il = array.length; i < il; i++)s += String.fromCharCode(array[i]);
            try {
                return decodeURIComponent(escape(s));
            } catch (e) {
                return s;
            }
        },
        extractUrlBase: function(url) {
            var index = url.lastIndexOf('/');
            return -1 === index ? './' : url.substr(0, index + 1);
        }
    };
    function InstancedBufferGeometry() {
        BufferGeometry.call(this), this.type = 'InstancedBufferGeometry', this.instanceCount = 1 / 0;
    }
    function InstancedBufferAttribute(array, itemSize, normalized, meshPerAttribute) {
        'number' == typeof normalized && (meshPerAttribute = normalized, normalized = !1, console.error('THREE.InstancedBufferAttribute: The constructor now expects normalized as the third argument.')), BufferAttribute.call(this, array, itemSize, normalized), this.meshPerAttribute = meshPerAttribute || 1;
    }
    function BufferGeometryLoader(manager) {
        Loader.call(this, manager);
    }
    InstancedBufferGeometry.prototype = Object.assign(Object.create(BufferGeometry.prototype), {
        constructor: InstancedBufferGeometry,
        isInstancedBufferGeometry: !0,
        copy: function(source) {
            return BufferGeometry.prototype.copy.call(this, source), this.instanceCount = source.instanceCount, this;
        },
        clone: function() {
            return new this.constructor().copy(this);
        },
        toJSON: function() {
            var data = BufferGeometry.prototype.toJSON.call(this);
            return data.instanceCount = this.instanceCount, data.isInstancedBufferGeometry = !0, data;
        }
    }), InstancedBufferAttribute.prototype = Object.assign(Object.create(BufferAttribute.prototype), {
        constructor: InstancedBufferAttribute,
        isInstancedBufferAttribute: !0,
        copy: function(source) {
            return BufferAttribute.prototype.copy.call(this, source), this.meshPerAttribute = source.meshPerAttribute, this;
        },
        toJSON: function() {
            var data = BufferAttribute.prototype.toJSON.call(this);
            return data.meshPerAttribute = this.meshPerAttribute, data.isInstancedBufferAttribute = !0, data;
        }
    }), BufferGeometryLoader.prototype = Object.assign(Object.create(Loader.prototype), {
        constructor: BufferGeometryLoader,
        load: function(url, onLoad, onProgress, onError) {
            var scope = this, loader = new FileLoader(scope.manager);
            loader.setPath(scope.path), loader.setRequestHeader(scope.requestHeader), loader.setWithCredentials(scope.withCredentials), loader.load(url, function(text) {
                try {
                    onLoad(scope.parse(JSON.parse(text)));
                } catch (e) {
                    onError ? onError(e) : console.error(e), scope.manager.itemError(url);
                }
            }, onProgress, onError);
        },
        parse: function(json) {
            var interleavedBufferMap = {}, arrayBufferMap = {};
            function getInterleavedBuffer(json, uuid) {
                if (void 0 !== interleavedBufferMap[uuid]) return interleavedBufferMap[uuid];
                var interleavedBuffer = json.interleavedBuffers[uuid], buffer = function(json, uuid) {
                    if (void 0 !== arrayBufferMap[uuid]) return arrayBufferMap[uuid];
                    var arrayBuffer = json.arrayBuffers[uuid], ab = new Uint32Array(arrayBuffer).buffer;
                    return arrayBufferMap[uuid] = ab, ab;
                }(json, interleavedBuffer.buffer), array = getTypedArray(interleavedBuffer.type, buffer), ib = new InterleavedBuffer(array, interleavedBuffer.stride);
                return ib.uuid = interleavedBuffer.uuid, interleavedBufferMap[uuid] = ib, ib;
            }
            var geometry = json.isInstancedBufferGeometry ? new InstancedBufferGeometry() : new BufferGeometry(), index = json.data.index;
            if (void 0 !== index) {
                var typedArray = getTypedArray(index.type, index.array);
                geometry.setIndex(new BufferAttribute(typedArray, 1));
            }
            var attributes = json.data.attributes;
            for(var key in attributes){
                var attribute = attributes[key], bufferAttribute = void 0;
                if (attribute.isInterleavedBufferAttribute) {
                    var interleavedBuffer = getInterleavedBuffer(json.data, attribute.data);
                    bufferAttribute = new InterleavedBufferAttribute(interleavedBuffer, attribute.itemSize, attribute.offset, attribute.normalized);
                } else {
                    var _typedArray = getTypedArray(attribute.type, attribute.array);
                    bufferAttribute = new (attribute.isInstancedBufferAttribute ? InstancedBufferAttribute : BufferAttribute)(_typedArray, attribute.itemSize, attribute.normalized);
                }
                void 0 !== attribute.name && (bufferAttribute.name = attribute.name), geometry.setAttribute(key, bufferAttribute);
            }
            var morphAttributes = json.data.morphAttributes;
            if (morphAttributes) for(var _key in morphAttributes){
                for(var attributeArray = morphAttributes[_key], array = [], i = 0, il = attributeArray.length; i < il; i++){
                    var _attribute = attributeArray[i], _bufferAttribute = void 0;
                    if (_attribute.isInterleavedBufferAttribute) {
                        var _interleavedBuffer = getInterleavedBuffer(json.data, _attribute.data);
                        _bufferAttribute = new InterleavedBufferAttribute(_interleavedBuffer, _attribute.itemSize, _attribute.offset, _attribute.normalized);
                    } else {
                        var _typedArray2 = getTypedArray(_attribute.type, _attribute.array);
                        _bufferAttribute = new BufferAttribute(_typedArray2, _attribute.itemSize, _attribute.normalized);
                    }
                    void 0 !== _attribute.name && (_bufferAttribute.name = _attribute.name), array.push(_bufferAttribute);
                }
                geometry.morphAttributes[_key] = array;
            }
            json.data.morphTargetsRelative && (geometry.morphTargetsRelative = !0);
            var groups = json.data.groups || json.data.drawcalls || json.data.offsets;
            if (void 0 !== groups) for(var _i = 0, n = groups.length; _i !== n; ++_i){
                var group = groups[_i];
                geometry.addGroup(group.start, group.count, group.materialIndex);
            }
            var boundingSphere = json.data.boundingSphere;
            if (void 0 !== boundingSphere) {
                var center = new Vector3();
                void 0 !== boundingSphere.center && center.fromArray(boundingSphere.center), geometry.boundingSphere = new Sphere(center, boundingSphere.radius);
            }
            return json.name && (geometry.name = json.name), json.userData && (geometry.userData = json.userData), geometry;
        }
    });
    var ObjectLoader = function(_Loader) {
        function ObjectLoader(manager) {
            return _Loader.call(this, manager) || this;
        }
        _inheritsLoose(ObjectLoader, _Loader);
        var _proto = ObjectLoader.prototype;
        return _proto.load = function(url, onLoad, onProgress, onError) {
            var scope = this, path = '' === this.path ? LoaderUtils.extractUrlBase(url) : this.path;
            this.resourcePath = this.resourcePath || path;
            var loader = new FileLoader(this.manager);
            loader.setPath(this.path), loader.setRequestHeader(this.requestHeader), loader.setWithCredentials(this.withCredentials), loader.load(url, function(text) {
                var json = null;
                try {
                    json = JSON.parse(text);
                } catch (error) {
                    void 0 !== onError && onError(error), console.error('THREE:ObjectLoader: Can\'t parse ' + url + '.', error.message);
                    return;
                }
                var metadata = json.metadata;
                if (void 0 === metadata || void 0 === metadata.type || 'geometry' === metadata.type.toLowerCase()) {
                    console.error('THREE.ObjectLoader: Can\'t load ' + url);
                    return;
                }
                scope.parse(json, onLoad);
            }, onProgress, onError);
        }, _proto.parse = function(json, onLoad) {
            var animations = this.parseAnimations(json.animations), shapes = this.parseShapes(json.shapes), geometries = this.parseGeometries(json.geometries, shapes), images = this.parseImages(json.images, function() {
                void 0 !== onLoad && onLoad(object);
            }), textures = this.parseTextures(json.textures, images), materials = this.parseMaterials(json.materials, textures), object = this.parseObject(json.object, geometries, materials, animations), skeletons = this.parseSkeletons(json.skeletons, object);
            if (this.bindSkeletons(object, skeletons), void 0 !== onLoad) {
                var hasImages = !1;
                for(var uuid in images)if (images[uuid] instanceof HTMLImageElement) {
                    hasImages = !0;
                    break;
                }
                !1 === hasImages && onLoad(object);
            }
            return object;
        }, _proto.parseShapes = function(json) {
            var shapes = {};
            if (void 0 !== json) for(var i = 0, l = json.length; i < l; i++){
                var shape = new Shape().fromJSON(json[i]);
                shapes[shape.uuid] = shape;
            }
            return shapes;
        }, _proto.parseSkeletons = function(json, object) {
            var skeletons = {}, bones = {};
            if (object.traverse(function(child) {
                child.isBone && (bones[child.uuid] = child);
            }), void 0 !== json) for(var i = 0, l = json.length; i < l; i++){
                var skeleton = new Skeleton().fromJSON(json[i], bones);
                skeletons[skeleton.uuid] = skeleton;
            }
            return skeletons;
        }, _proto.parseGeometries = function(json, shapes) {
            var geometryShapes, geometries = {};
            if (void 0 !== json) for(var bufferGeometryLoader = new BufferGeometryLoader(), i = 0, l = json.length; i < l; i++){
                var geometry = void 0, data = json[i];
                switch(data.type){
                    case 'PlaneGeometry':
                    case 'PlaneBufferGeometry':
                        geometry = new Geometries[data.type](data.width, data.height, data.widthSegments, data.heightSegments);
                        break;
                    case 'BoxGeometry':
                    case 'BoxBufferGeometry':
                    case 'CubeGeometry':
                        geometry = new Geometries[data.type](data.width, data.height, data.depth, data.widthSegments, data.heightSegments, data.depthSegments);
                        break;
                    case 'CircleGeometry':
                    case 'CircleBufferGeometry':
                        geometry = new Geometries[data.type](data.radius, data.segments, data.thetaStart, data.thetaLength);
                        break;
                    case 'CylinderGeometry':
                    case 'CylinderBufferGeometry':
                        geometry = new Geometries[data.type](data.radiusTop, data.radiusBottom, data.height, data.radialSegments, data.heightSegments, data.openEnded, data.thetaStart, data.thetaLength);
                        break;
                    case 'ConeGeometry':
                    case 'ConeBufferGeometry':
                        geometry = new Geometries[data.type](data.radius, data.height, data.radialSegments, data.heightSegments, data.openEnded, data.thetaStart, data.thetaLength);
                        break;
                    case 'SphereGeometry':
                    case 'SphereBufferGeometry':
                        geometry = new Geometries[data.type](data.radius, data.widthSegments, data.heightSegments, data.phiStart, data.phiLength, data.thetaStart, data.thetaLength);
                        break;
                    case 'DodecahedronGeometry':
                    case 'DodecahedronBufferGeometry':
                    case 'IcosahedronGeometry':
                    case 'IcosahedronBufferGeometry':
                    case 'OctahedronGeometry':
                    case 'OctahedronBufferGeometry':
                    case 'TetrahedronGeometry':
                    case 'TetrahedronBufferGeometry':
                        geometry = new Geometries[data.type](data.radius, data.detail);
                        break;
                    case 'RingGeometry':
                    case 'RingBufferGeometry':
                        geometry = new Geometries[data.type](data.innerRadius, data.outerRadius, data.thetaSegments, data.phiSegments, data.thetaStart, data.thetaLength);
                        break;
                    case 'TorusGeometry':
                    case 'TorusBufferGeometry':
                        geometry = new Geometries[data.type](data.radius, data.tube, data.radialSegments, data.tubularSegments, data.arc);
                        break;
                    case 'TorusKnotGeometry':
                    case 'TorusKnotBufferGeometry':
                        geometry = new Geometries[data.type](data.radius, data.tube, data.tubularSegments, data.radialSegments, data.p, data.q);
                        break;
                    case 'TubeGeometry':
                    case 'TubeBufferGeometry':
                        geometry = new Geometries[data.type](new Curves[data.path.type]().fromJSON(data.path), data.tubularSegments, data.radius, data.radialSegments, data.closed);
                        break;
                    case 'LatheGeometry':
                    case 'LatheBufferGeometry':
                        geometry = new Geometries[data.type](data.points, data.segments, data.phiStart, data.phiLength);
                        break;
                    case 'PolyhedronGeometry':
                    case 'PolyhedronBufferGeometry':
                        geometry = new Geometries[data.type](data.vertices, data.indices, data.radius, data.details);
                        break;
                    case 'ShapeGeometry':
                    case 'ShapeBufferGeometry':
                        geometryShapes = [];
                        for(var j = 0, jl = data.shapes.length; j < jl; j++){
                            var shape = shapes[data.shapes[j]];
                            geometryShapes.push(shape);
                        }
                        geometry = new Geometries[data.type](geometryShapes, data.curveSegments);
                        break;
                    case 'ExtrudeGeometry':
                    case 'ExtrudeBufferGeometry':
                        geometryShapes = [];
                        for(var _j = 0, _jl = data.shapes.length; _j < _jl; _j++){
                            var _shape = shapes[data.shapes[_j]];
                            geometryShapes.push(_shape);
                        }
                        var extrudePath = data.options.extrudePath;
                        void 0 !== extrudePath && (data.options.extrudePath = new Curves[extrudePath.type]().fromJSON(extrudePath)), geometry = new Geometries[data.type](geometryShapes, data.options);
                        break;
                    case 'BufferGeometry':
                    case 'InstancedBufferGeometry':
                        geometry = bufferGeometryLoader.parse(data);
                        break;
                    case 'Geometry':
                        console.error('THREE.ObjectLoader: Loading "Geometry" is not supported anymore.');
                        break;
                    default:
                        console.warn('THREE.ObjectLoader: Unsupported geometry type "' + data.type + '"');
                        continue;
                }
                geometry.uuid = data.uuid, void 0 !== data.name && (geometry.name = data.name), !0 === geometry.isBufferGeometry && void 0 !== data.userData && (geometry.userData = data.userData), geometries[data.uuid] = geometry;
            }
            return geometries;
        }, _proto.parseMaterials = function(json, textures) {
            var cache = {}, materials = {};
            if (void 0 !== json) {
                var loader = new MaterialLoader();
                loader.setTextures(textures);
                for(var i = 0, l = json.length; i < l; i++){
                    var data = json[i];
                    if ('MultiMaterial' === data.type) {
                        for(var array = [], j = 0; j < data.materials.length; j++){
                            var material = data.materials[j];
                            void 0 === cache[material.uuid] && (cache[material.uuid] = loader.parse(material)), array.push(cache[material.uuid]);
                        }
                        materials[data.uuid] = array;
                    } else void 0 === cache[data.uuid] && (cache[data.uuid] = loader.parse(data)), materials[data.uuid] = cache[data.uuid];
                }
            }
            return materials;
        }, _proto.parseAnimations = function(json) {
            var animations = {};
            if (void 0 !== json) for(var i = 0; i < json.length; i++){
                var data = json[i], clip = AnimationClip.parse(data);
                animations[clip.uuid] = clip;
            }
            return animations;
        }, _proto.parseImages = function(json, onLoad) {
            var loader, scope = this, images = {};
            function deserializeImage(image) {
                if ('string' == typeof image) {
                    var url;
                    return url = /^(\/\/)|([a-z]+:(\/\/)?)/i.test(image) ? image : scope.resourcePath + image, scope.manager.itemStart(url), loader.load(url, function() {
                        scope.manager.itemEnd(url);
                    }, void 0, function() {
                        scope.manager.itemError(url), scope.manager.itemEnd(url);
                    });
                }
                return image.data ? {
                    data: getTypedArray(image.type, image.data),
                    width: image.width,
                    height: image.height
                } : null;
            }
            if (void 0 !== json && json.length > 0) {
                var manager = new LoadingManager(onLoad);
                (loader = new ImageLoader(manager)).setCrossOrigin(this.crossOrigin);
                for(var i = 0, il = json.length; i < il; i++){
                    var image = json[i], url = image.url;
                    if (Array.isArray(url)) {
                        images[image.uuid] = [];
                        for(var j = 0, jl = url.length; j < jl; j++){
                            var deserializedImage = deserializeImage(url[j]);
                            null !== deserializedImage && (deserializedImage instanceof HTMLImageElement ? images[image.uuid].push(deserializedImage) : images[image.uuid].push(new DataTexture(deserializedImage.data, deserializedImage.width, deserializedImage.height)));
                        }
                    } else {
                        var _deserializedImage = deserializeImage(image.url);
                        null !== _deserializedImage && (images[image.uuid] = _deserializedImage);
                    }
                }
            }
            return images;
        }, _proto.parseTextures = function(json, images) {
            function parseConstant(value, type) {
                return 'number' == typeof value ? value : (console.warn('THREE.ObjectLoader.parseTexture: Constant should be in numeric form.', value), type[value]);
            }
            var textures = {};
            if (void 0 !== json) for(var i = 0, l = json.length; i < l; i++){
                var data = json[i];
                void 0 === data.image && console.warn('THREE.ObjectLoader: No "image" specified for', data.uuid), void 0 === images[data.image] && console.warn('THREE.ObjectLoader: Undefined image', data.image);
                var texture = void 0, image = images[data.image];
                Array.isArray(image) ? (texture = new CubeTexture(image), 6 === image.length && (texture.needsUpdate = !0)) : (texture = image && image.data ? new DataTexture(image.data, image.width, image.height) : new Texture(image), image && (texture.needsUpdate = !0)), texture.uuid = data.uuid, void 0 !== data.name && (texture.name = data.name), void 0 !== data.mapping && (texture.mapping = parseConstant(data.mapping, TEXTURE_MAPPING)), void 0 !== data.offset && texture.offset.fromArray(data.offset), void 0 !== data.repeat && texture.repeat.fromArray(data.repeat), void 0 !== data.center && texture.center.fromArray(data.center), void 0 !== data.rotation && (texture.rotation = data.rotation), void 0 !== data.wrap && (texture.wrapS = parseConstant(data.wrap[0], TEXTURE_WRAPPING), texture.wrapT = parseConstant(data.wrap[1], TEXTURE_WRAPPING)), void 0 !== data.format && (texture.format = data.format), void 0 !== data.type && (texture.type = data.type), void 0 !== data.encoding && (texture.encoding = data.encoding), void 0 !== data.minFilter && (texture.minFilter = parseConstant(data.minFilter, TEXTURE_FILTER)), void 0 !== data.magFilter && (texture.magFilter = parseConstant(data.magFilter, TEXTURE_FILTER)), void 0 !== data.anisotropy && (texture.anisotropy = data.anisotropy), void 0 !== data.flipY && (texture.flipY = data.flipY), void 0 !== data.premultiplyAlpha && (texture.premultiplyAlpha = data.premultiplyAlpha), void 0 !== data.unpackAlignment && (texture.unpackAlignment = data.unpackAlignment), textures[data.uuid] = texture;
            }
            return textures;
        }, _proto.parseObject = function(data, geometries, materials, animations) {
            function getGeometry(name) {
                return void 0 === geometries[name] && console.warn('THREE.ObjectLoader: Undefined geometry', name), geometries[name];
            }
            function getMaterial(name) {
                if (void 0 !== name) {
                    if (Array.isArray(name)) {
                        for(var array = [], i = 0, l = name.length; i < l; i++){
                            var uuid = name[i];
                            void 0 === materials[uuid] && console.warn('THREE.ObjectLoader: Undefined material', uuid), array.push(materials[uuid]);
                        }
                        return array;
                    }
                    return void 0 === materials[name] && console.warn('THREE.ObjectLoader: Undefined material', name), materials[name];
                }
            }
            switch(data.type){
                case 'Scene':
                    object = new Scene(), void 0 !== data.background && Number.isInteger(data.background) && (object.background = new Color(data.background)), void 0 !== data.fog && ('Fog' === data.fog.type ? object.fog = new Fog(data.fog.color, data.fog.near, data.fog.far) : 'FogExp2' === data.fog.type && (object.fog = new FogExp2(data.fog.color, data.fog.density)));
                    break;
                case 'PerspectiveCamera':
                    object = new PerspectiveCamera(data.fov, data.aspect, data.near, data.far), void 0 !== data.focus && (object.focus = data.focus), void 0 !== data.zoom && (object.zoom = data.zoom), void 0 !== data.filmGauge && (object.filmGauge = data.filmGauge), void 0 !== data.filmOffset && (object.filmOffset = data.filmOffset), void 0 !== data.view && (object.view = Object.assign({}, data.view));
                    break;
                case 'OrthographicCamera':
                    object = new OrthographicCamera(data.left, data.right, data.top, data.bottom, data.near, data.far), void 0 !== data.zoom && (object.zoom = data.zoom), void 0 !== data.view && (object.view = Object.assign({}, data.view));
                    break;
                case 'AmbientLight':
                    object = new AmbientLight(data.color, data.intensity);
                    break;
                case 'DirectionalLight':
                    object = new DirectionalLight(data.color, data.intensity);
                    break;
                case 'PointLight':
                    object = new PointLight(data.color, data.intensity, data.distance, data.decay);
                    break;
                case 'RectAreaLight':
                    object = new RectAreaLight(data.color, data.intensity, data.width, data.height);
                    break;
                case 'SpotLight':
                    object = new SpotLight(data.color, data.intensity, data.distance, data.angle, data.penumbra, data.decay);
                    break;
                case 'HemisphereLight':
                    object = new HemisphereLight(data.color, data.groundColor, data.intensity);
                    break;
                case 'LightProbe':
                    object = new LightProbe().fromJSON(data);
                    break;
                case 'SkinnedMesh':
                    geometry = getGeometry(data.geometry), material = getMaterial(data.material), object = new SkinnedMesh(geometry, material), void 0 !== data.bindMode && (object.bindMode = data.bindMode), void 0 !== data.bindMatrix && object.bindMatrix.fromArray(data.bindMatrix), void 0 !== data.skeleton && (object.skeleton = data.skeleton);
                    break;
                case 'Mesh':
                    geometry = getGeometry(data.geometry), material = getMaterial(data.material), object = new Mesh(geometry, material);
                    break;
                case 'InstancedMesh':
                    geometry = getGeometry(data.geometry), material = getMaterial(data.material);
                    var object, geometry, material, count = data.count, instanceMatrix = data.instanceMatrix;
                    (object = new InstancedMesh(geometry, material, count)).instanceMatrix = new BufferAttribute(new Float32Array(instanceMatrix.array), 16);
                    break;
                case 'LOD':
                    object = new LOD();
                    break;
                case 'Line':
                    object = new Line(getGeometry(data.geometry), getMaterial(data.material));
                    break;
                case 'LineLoop':
                    object = new LineLoop(getGeometry(data.geometry), getMaterial(data.material));
                    break;
                case 'LineSegments':
                    object = new LineSegments(getGeometry(data.geometry), getMaterial(data.material));
                    break;
                case 'PointCloud':
                case 'Points':
                    object = new Points(getGeometry(data.geometry), getMaterial(data.material));
                    break;
                case 'Sprite':
                    object = new Sprite(getMaterial(data.material));
                    break;
                case 'Group':
                    object = new Group();
                    break;
                case 'Bone':
                    object = new Bone();
                    break;
                default:
                    object = new Object3D();
            }
            if (object.uuid = data.uuid, void 0 !== data.name && (object.name = data.name), void 0 !== data.matrix ? (object.matrix.fromArray(data.matrix), void 0 !== data.matrixAutoUpdate && (object.matrixAutoUpdate = data.matrixAutoUpdate), object.matrixAutoUpdate && object.matrix.decompose(object.position, object.quaternion, object.scale)) : (void 0 !== data.position && object.position.fromArray(data.position), void 0 !== data.rotation && object.rotation.fromArray(data.rotation), void 0 !== data.quaternion && object.quaternion.fromArray(data.quaternion), void 0 !== data.scale && object.scale.fromArray(data.scale)), void 0 !== data.castShadow && (object.castShadow = data.castShadow), void 0 !== data.receiveShadow && (object.receiveShadow = data.receiveShadow), data.shadow && (void 0 !== data.shadow.bias && (object.shadow.bias = data.shadow.bias), void 0 !== data.shadow.normalBias && (object.shadow.normalBias = data.shadow.normalBias), void 0 !== data.shadow.radius && (object.shadow.radius = data.shadow.radius), void 0 !== data.shadow.mapSize && object.shadow.mapSize.fromArray(data.shadow.mapSize), void 0 !== data.shadow.camera && (object.shadow.camera = this.parseObject(data.shadow.camera))), void 0 !== data.visible && (object.visible = data.visible), void 0 !== data.frustumCulled && (object.frustumCulled = data.frustumCulled), void 0 !== data.renderOrder && (object.renderOrder = data.renderOrder), void 0 !== data.userData && (object.userData = data.userData), void 0 !== data.layers && (object.layers.mask = data.layers), void 0 !== data.children) for(var children = data.children, i = 0; i < children.length; i++)object.add(this.parseObject(children[i], geometries, materials, animations));
            if (void 0 !== data.animations) for(var objectAnimations = data.animations, _i = 0; _i < objectAnimations.length; _i++){
                var uuid = objectAnimations[_i];
                object.animations.push(animations[uuid]);
            }
            if ('LOD' === data.type) {
                void 0 !== data.autoUpdate && (object.autoUpdate = data.autoUpdate);
                for(var levels = data.levels, l = 0; l < levels.length; l++){
                    var level = levels[l], child = object.getObjectByProperty('uuid', level.object);
                    void 0 !== child && object.addLevel(child, level.distance);
                }
            }
            return object;
        }, _proto.bindSkeletons = function(object, skeletons) {
            0 !== Object.keys(skeletons).length && object.traverse(function(child) {
                if (!0 === child.isSkinnedMesh && void 0 !== child.skeleton) {
                    var skeleton = skeletons[child.skeleton];
                    void 0 === skeleton ? console.warn('THREE.ObjectLoader: No skeleton found with UUID:', child.skeleton) : child.bind(skeleton, child.bindMatrix);
                }
            });
        }, _proto.setTexturePath = function(value) {
            return console.warn('THREE.ObjectLoader: .setTexturePath() has been renamed to .setResourcePath().'), this.setResourcePath(value);
        }, ObjectLoader;
    }(Loader), TEXTURE_MAPPING = {
        UVMapping: 300,
        CubeReflectionMapping: 301,
        CubeRefractionMapping: 302,
        EquirectangularReflectionMapping: 303,
        EquirectangularRefractionMapping: 304,
        CubeUVReflectionMapping: 306,
        CubeUVRefractionMapping: 307
    }, TEXTURE_WRAPPING = {
        RepeatWrapping: 1000,
        ClampToEdgeWrapping: 1001,
        MirroredRepeatWrapping: 1002
    }, TEXTURE_FILTER = {
        NearestFilter: 1003,
        NearestMipmapNearestFilter: 1004,
        NearestMipmapLinearFilter: 1005,
        LinearFilter: 1006,
        LinearMipmapNearestFilter: 1007,
        LinearMipmapLinearFilter: 1008
    };
    function ImageBitmapLoader(manager) {
        'undefined' == typeof createImageBitmap && console.warn('THREE.ImageBitmapLoader: createImageBitmap() not supported.'), 'undefined' == typeof fetch && console.warn('THREE.ImageBitmapLoader: fetch() not supported.'), Loader.call(this, manager), this.options = {
            premultiplyAlpha: 'none'
        };
    }
    function ShapePath() {
        this.type = 'ShapePath', this.color = new Color(), this.subPaths = [], this.currentPath = null;
    }
    function Font(data) {
        this.type = 'Font', this.data = data;
    }
    function FontLoader(manager) {
        Loader.call(this, manager);
    }
    ImageBitmapLoader.prototype = Object.assign(Object.create(Loader.prototype), {
        constructor: ImageBitmapLoader,
        isImageBitmapLoader: !0,
        setOptions: function(options) {
            return this.options = options, this;
        },
        load: function(url, onLoad, onProgress, onError) {
            void 0 === url && (url = ''), void 0 !== this.path && (url = this.path + url), url = this.manager.resolveURL(url);
            var scope = this, cached = Cache.get(url);
            if (void 0 !== cached) return scope.manager.itemStart(url), setTimeout(function() {
                onLoad && onLoad(cached), scope.manager.itemEnd(url);
            }, 0), cached;
            var fetchOptions = {};
            fetchOptions.credentials = 'anonymous' === this.crossOrigin ? 'same-origin' : 'include', fetch(url, fetchOptions).then(function(res) {
                return res.blob();
            }).then(function(blob) {
                return createImageBitmap(blob, scope.options);
            }).then(function(imageBitmap) {
                Cache.add(url, imageBitmap), onLoad && onLoad(imageBitmap), scope.manager.itemEnd(url);
            }).catch(function(e) {
                onError && onError(e), scope.manager.itemError(url), scope.manager.itemEnd(url);
            }), scope.manager.itemStart(url);
        }
    }), Object.assign(ShapePath.prototype, {
        moveTo: function(x, y) {
            return this.currentPath = new Path(), this.subPaths.push(this.currentPath), this.currentPath.moveTo(x, y), this;
        },
        lineTo: function(x, y) {
            return this.currentPath.lineTo(x, y), this;
        },
        quadraticCurveTo: function(aCPx, aCPy, aX, aY) {
            return this.currentPath.quadraticCurveTo(aCPx, aCPy, aX, aY), this;
        },
        bezierCurveTo: function(aCP1x, aCP1y, aCP2x, aCP2y, aX, aY) {
            return this.currentPath.bezierCurveTo(aCP1x, aCP1y, aCP2x, aCP2y, aX, aY), this;
        },
        splineThru: function(pts) {
            return this.currentPath.splineThru(pts), this;
        },
        toShapes: function(isCCW, noHoles) {
            function toShapesNoHoles(inSubpaths) {
                for(var shapes = [], i = 0, l = inSubpaths.length; i < l; i++){
                    var _tmpPath = inSubpaths[i], _tmpShape = new Shape();
                    _tmpShape.curves = _tmpPath.curves, shapes.push(_tmpShape);
                }
                return shapes;
            }
            var solid, tmpPath, tmpShape, tmpPoints, tmpHoles, isClockWise = ShapeUtils.isClockWise, subPaths = this.subPaths;
            if (0 === subPaths.length) return [];
            if (!0 === noHoles) return toShapesNoHoles(subPaths);
            var shapes = [];
            if (1 === subPaths.length) return tmpPath = subPaths[0], (tmpShape = new Shape()).curves = tmpPath.curves, shapes.push(tmpShape), shapes;
            var holesFirst = !isClockWise(subPaths[0].getPoints());
            holesFirst = isCCW ? !holesFirst : holesFirst;
            var betterShapeHoles = [], newShapes = [], newShapeHoles = [], mainIdx = 0;
            newShapes[0] = void 0, newShapeHoles[mainIdx] = [];
            for(var i = 0, l = subPaths.length; i < l; i++)solid = isClockWise(tmpPoints = (tmpPath = subPaths[i]).getPoints()), (solid = isCCW ? !solid : solid) ? (!holesFirst && newShapes[mainIdx] && mainIdx++, newShapes[mainIdx] = {
                s: new Shape(),
                p: tmpPoints
            }, newShapes[mainIdx].s.curves = tmpPath.curves, holesFirst && mainIdx++, newShapeHoles[mainIdx] = []) : newShapeHoles[mainIdx].push({
                h: tmpPath,
                p: tmpPoints[0]
            });
            if (!newShapes[0]) return toShapesNoHoles(subPaths);
            if (newShapes.length > 1) {
                for(var ambiguous = !1, toChange = [], sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx++)betterShapeHoles[sIdx] = [];
                for(var _sIdx = 0, _sLen = newShapes.length; _sIdx < _sLen; _sIdx++)for(var sho = newShapeHoles[_sIdx], hIdx = 0; hIdx < sho.length; hIdx++){
                    for(var ho = sho[hIdx], hole_unassigned = !0, s2Idx = 0; s2Idx < newShapes.length; s2Idx++)(function(inPt, inPolygon) {
                        for(var polyLen = inPolygon.length, inside = !1, p = polyLen - 1, q = 0; q < polyLen; p = q++){
                            var edgeLowPt = inPolygon[p], edgeHighPt = inPolygon[q], edgeDx = edgeHighPt.x - edgeLowPt.x, edgeDy = edgeHighPt.y - edgeLowPt.y;
                            if (Math.abs(edgeDy) > Number.EPSILON) {
                                if (edgeDy < 0 && (edgeLowPt = inPolygon[q], edgeDx = -edgeDx, edgeHighPt = inPolygon[p], edgeDy = -edgeDy), inPt.y < edgeLowPt.y || inPt.y > edgeHighPt.y) continue;
                                if (inPt.y === edgeLowPt.y) {
                                    if (inPt.x === edgeLowPt.x) return !0;
                                } else {
                                    var perpEdge = edgeDy * (inPt.x - edgeLowPt.x) - edgeDx * (inPt.y - edgeLowPt.y);
                                    if (0 === perpEdge) return !0;
                                    if (perpEdge < 0) continue;
                                    inside = !inside;
                                }
                            } else {
                                if (inPt.y !== edgeLowPt.y) continue;
                                if (edgeHighPt.x <= inPt.x && inPt.x <= edgeLowPt.x || edgeLowPt.x <= inPt.x && inPt.x <= edgeHighPt.x) return !0;
                            }
                        }
                        return inside;
                    })(ho.p, newShapes[s2Idx].p) && (_sIdx !== s2Idx && toChange.push({
                        froms: _sIdx,
                        tos: s2Idx,
                        hole: hIdx
                    }), hole_unassigned ? (hole_unassigned = !1, betterShapeHoles[s2Idx].push(ho)) : ambiguous = !0);
                    hole_unassigned && betterShapeHoles[_sIdx].push(ho);
                }
                toChange.length > 0 && !ambiguous && (newShapeHoles = betterShapeHoles);
            }
            for(var _i = 0, il = newShapes.length; _i < il; _i++){
                tmpShape = newShapes[_i].s, shapes.push(tmpShape), tmpHoles = newShapeHoles[_i];
                for(var j = 0, jl = tmpHoles.length; j < jl; j++)tmpShape.holes.push(tmpHoles[j].h);
            }
            return shapes;
        }
    }), Object.assign(Font.prototype, {
        isFont: !0,
        generateShapes: function(text, size) {
            void 0 === size && (size = 100);
            for(var shapes = [], paths = function(text, size, data) {
                for(var chars = Array.from ? Array.from(text) : String(text).split(''), scale = size / data.resolution, line_height = (data.boundingBox.yMax - data.boundingBox.yMin + data.underlineThickness) * scale, paths = [], offsetX = 0, offsetY = 0, i = 0; i < chars.length; i++){
                    var char = chars[i];
                    if ('\n' === char) offsetX = 0, offsetY -= line_height;
                    else {
                        var ret = function(char, scale, offsetX, offsetY, data) {
                            var x, y, cpx, cpy, cpx1, cpy1, cpx2, cpy2, glyph = data.glyphs[char] || data.glyphs['?'];
                            if (!glyph) {
                                console.error('THREE.Font: character "' + char + '" does not exists in font family ' + data.familyName + '.');
                                return;
                            }
                            var path = new ShapePath();
                            if (glyph.o) for(var outline = glyph._cachedOutline || (glyph._cachedOutline = glyph.o.split(' ')), i = 0, l = outline.length; i < l;)switch(outline[i++]){
                                case 'm':
                                    x = outline[i++] * scale + offsetX, y = outline[i++] * scale + offsetY, path.moveTo(x, y);
                                    break;
                                case 'l':
                                    x = outline[i++] * scale + offsetX, y = outline[i++] * scale + offsetY, path.lineTo(x, y);
                                    break;
                                case 'q':
                                    cpx = outline[i++] * scale + offsetX, cpy = outline[i++] * scale + offsetY, cpx1 = outline[i++] * scale + offsetX, cpy1 = outline[i++] * scale + offsetY, path.quadraticCurveTo(cpx1, cpy1, cpx, cpy);
                                    break;
                                case 'b':
                                    cpx = outline[i++] * scale + offsetX, cpy = outline[i++] * scale + offsetY, cpx1 = outline[i++] * scale + offsetX, cpy1 = outline[i++] * scale + offsetY, cpx2 = outline[i++] * scale + offsetX, cpy2 = outline[i++] * scale + offsetY, path.bezierCurveTo(cpx1, cpy1, cpx2, cpy2, cpx, cpy);
                            }
                            return {
                                offsetX: glyph.ha * scale,
                                path: path
                            };
                        }(char, scale, offsetX, offsetY, data);
                        offsetX += ret.offsetX, paths.push(ret.path);
                    }
                }
                return paths;
            }(text, size, this.data), p = 0, pl = paths.length; p < pl; p++)Array.prototype.push.apply(shapes, paths[p].toShapes());
            return shapes;
        }
    }), FontLoader.prototype = Object.assign(Object.create(Loader.prototype), {
        constructor: FontLoader,
        load: function(url, onLoad, onProgress, onError) {
            var scope = this, loader = new FileLoader(this.manager);
            loader.setPath(this.path), loader.setRequestHeader(this.requestHeader), loader.setWithCredentials(scope.withCredentials), loader.load(url, function(text) {
                try {
                    json = JSON.parse(text);
                } catch (e) {
                    console.warn('THREE.FontLoader: typeface.js support is being deprecated. Use typeface.json instead.'), json = JSON.parse(text.substring(65, text.length - 2));
                }
                var json, font = scope.parse(json);
                onLoad && onLoad(font);
            }, onProgress, onError);
        },
        parse: function(json) {
            return new Font(json);
        }
    });
    var AudioContext = {
        getContext: function() {
            return void 0 === _context && (_context = new (window.AudioContext || window.webkitAudioContext)()), _context;
        },
        setContext: function(value) {
            _context = value;
        }
    };
    function AudioLoader(manager) {
        Loader.call(this, manager);
    }
    function HemisphereLightProbe(skyColor, groundColor, intensity) {
        LightProbe.call(this, void 0, intensity);
        var color1 = new Color().set(skyColor), color2 = new Color().set(groundColor), sky = new Vector3(color1.r, color1.g, color1.b), ground = new Vector3(color2.r, color2.g, color2.b), c0 = Math.sqrt(Math.PI), c1 = c0 * Math.sqrt(0.75);
        this.sh.coefficients[0].copy(sky).add(ground).multiplyScalar(c0), this.sh.coefficients[1].copy(sky).sub(ground).multiplyScalar(c1);
    }
    function AmbientLightProbe(color, intensity) {
        LightProbe.call(this, void 0, intensity);
        var color1 = new Color().set(color);
        this.sh.coefficients[0].set(color1.r, color1.g, color1.b).multiplyScalar(2 * Math.sqrt(Math.PI));
    }
    AudioLoader.prototype = Object.assign(Object.create(Loader.prototype), {
        constructor: AudioLoader,
        load: function(url, onLoad, onProgress, onError) {
            var scope = this, loader = new FileLoader(scope.manager);
            loader.setResponseType('arraybuffer'), loader.setPath(scope.path), loader.setRequestHeader(scope.requestHeader), loader.setWithCredentials(scope.withCredentials), loader.load(url, function(buffer) {
                try {
                    var bufferCopy = buffer.slice(0);
                    AudioContext.getContext().decodeAudioData(bufferCopy, function(audioBuffer) {
                        onLoad(audioBuffer);
                    });
                } catch (e) {
                    onError ? onError(e) : console.error(e), scope.manager.itemError(url);
                }
            }, onProgress, onError);
        }
    }), HemisphereLightProbe.prototype = Object.assign(Object.create(LightProbe.prototype), {
        constructor: HemisphereLightProbe,
        isHemisphereLightProbe: !0,
        copy: function(source) {
            return LightProbe.prototype.copy.call(this, source), this;
        },
        toJSON: function(meta) {
            return LightProbe.prototype.toJSON.call(this, meta);
        }
    }), AmbientLightProbe.prototype = Object.assign(Object.create(LightProbe.prototype), {
        constructor: AmbientLightProbe,
        isAmbientLightProbe: !0,
        copy: function(source) {
            return LightProbe.prototype.copy.call(this, source), this;
        },
        toJSON: function(meta) {
            return LightProbe.prototype.toJSON.call(this, meta);
        }
    });
    var _eyeRight = new Matrix4(), _eyeLeft = new Matrix4();
    function StereoCamera() {
        this.type = 'StereoCamera', this.aspect = 1, this.eyeSep = 0.064, this.cameraL = new PerspectiveCamera(), this.cameraL.layers.enable(1), this.cameraL.matrixAutoUpdate = !1, this.cameraR = new PerspectiveCamera(), this.cameraR.layers.enable(2), this.cameraR.matrixAutoUpdate = !1, this._cache = {
            focus: null,
            fov: null,
            aspect: null,
            near: null,
            far: null,
            zoom: null,
            eyeSep: null
        };
    }
    Object.assign(StereoCamera.prototype, {
        update: function(camera) {
            var cache = this._cache;
            if (cache.focus !== camera.focus || cache.fov !== camera.fov || cache.aspect !== camera.aspect * this.aspect || cache.near !== camera.near || cache.far !== camera.far || cache.zoom !== camera.zoom || cache.eyeSep !== this.eyeSep) {
                cache.focus = camera.focus, cache.fov = camera.fov, cache.aspect = camera.aspect * this.aspect, cache.near = camera.near, cache.far = camera.far, cache.zoom = camera.zoom, cache.eyeSep = this.eyeSep;
                var xmin, xmax, projectionMatrix = camera.projectionMatrix.clone(), eyeSepHalf = cache.eyeSep / 2, eyeSepOnProjection = eyeSepHalf * cache.near / cache.focus, ymax = cache.near * Math.tan(MathUtils.DEG2RAD * cache.fov * 0.5) / cache.zoom;
                _eyeLeft.elements[12] = -eyeSepHalf, _eyeRight.elements[12] = eyeSepHalf, xmin = -ymax * cache.aspect + eyeSepOnProjection, xmax = ymax * cache.aspect + eyeSepOnProjection, projectionMatrix.elements[0] = 2 * cache.near / (xmax - xmin), projectionMatrix.elements[8] = (xmax + xmin) / (xmax - xmin), this.cameraL.projectionMatrix.copy(projectionMatrix), xmin = -ymax * cache.aspect - eyeSepOnProjection, xmax = ymax * cache.aspect - eyeSepOnProjection, projectionMatrix.elements[0] = 2 * cache.near / (xmax - xmin), projectionMatrix.elements[8] = (xmax + xmin) / (xmax - xmin), this.cameraR.projectionMatrix.copy(projectionMatrix);
            }
            this.cameraL.matrixWorld.copy(camera.matrixWorld).multiply(_eyeLeft), this.cameraR.matrixWorld.copy(camera.matrixWorld).multiply(_eyeRight);
        }
    });
    var Clock = function() {
        function Clock(autoStart) {
            this.autoStart = void 0 === autoStart || autoStart, this.startTime = 0, this.oldTime = 0, this.elapsedTime = 0, this.running = !1;
        }
        var _proto = Clock.prototype;
        return _proto.start = function() {
            this.startTime = now(), this.oldTime = this.startTime, this.elapsedTime = 0, this.running = !0;
        }, _proto.stop = function() {
            this.getElapsedTime(), this.running = !1, this.autoStart = !1;
        }, _proto.getElapsedTime = function() {
            return this.getDelta(), this.elapsedTime;
        }, _proto.getDelta = function() {
            var diff = 0;
            if (this.autoStart && !this.running) return this.start(), 0;
            if (this.running) {
                var newTime = now();
                diff = (newTime - this.oldTime) / 1000, this.oldTime = newTime, this.elapsedTime += diff;
            }
            return diff;
        }, Clock;
    }();
    function now() {
        return ('undefined' == typeof performance ? Date : performance).now();
    }
    var _position$2 = new Vector3(), _quaternion$3 = new Quaternion(), _scale$1 = new Vector3(), _orientation = new Vector3(), AudioListener = function(_Object3D) {
        function AudioListener() {
            var _this;
            return (_this = _Object3D.call(this) || this).type = 'AudioListener', _this.context = AudioContext.getContext(), _this.gain = _this.context.createGain(), _this.gain.connect(_this.context.destination), _this.filter = null, _this.timeDelta = 0, _this._clock = new Clock(), _this;
        }
        _inheritsLoose(AudioListener, _Object3D);
        var _proto = AudioListener.prototype;
        return _proto.getInput = function() {
            return this.gain;
        }, _proto.removeFilter = function() {
            return null !== this.filter && (this.gain.disconnect(this.filter), this.filter.disconnect(this.context.destination), this.gain.connect(this.context.destination), this.filter = null), this;
        }, _proto.getFilter = function() {
            return this.filter;
        }, _proto.setFilter = function(value) {
            return null !== this.filter ? (this.gain.disconnect(this.filter), this.filter.disconnect(this.context.destination)) : this.gain.disconnect(this.context.destination), this.filter = value, this.gain.connect(this.filter), this.filter.connect(this.context.destination), this;
        }, _proto.getMasterVolume = function() {
            return this.gain.gain.value;
        }, _proto.setMasterVolume = function(value) {
            return this.gain.gain.setTargetAtTime(value, this.context.currentTime, 0.01), this;
        }, _proto.updateMatrixWorld = function(force) {
            _Object3D.prototype.updateMatrixWorld.call(this, force);
            var listener = this.context.listener, up = this.up;
            if (this.timeDelta = this._clock.getDelta(), this.matrixWorld.decompose(_position$2, _quaternion$3, _scale$1), _orientation.set(0, 0, -1).applyQuaternion(_quaternion$3), listener.positionX) {
                var endTime = this.context.currentTime + this.timeDelta;
                listener.positionX.linearRampToValueAtTime(_position$2.x, endTime), listener.positionY.linearRampToValueAtTime(_position$2.y, endTime), listener.positionZ.linearRampToValueAtTime(_position$2.z, endTime), listener.forwardX.linearRampToValueAtTime(_orientation.x, endTime), listener.forwardY.linearRampToValueAtTime(_orientation.y, endTime), listener.forwardZ.linearRampToValueAtTime(_orientation.z, endTime), listener.upX.linearRampToValueAtTime(up.x, endTime), listener.upY.linearRampToValueAtTime(up.y, endTime), listener.upZ.linearRampToValueAtTime(up.z, endTime);
            } else listener.setPosition(_position$2.x, _position$2.y, _position$2.z), listener.setOrientation(_orientation.x, _orientation.y, _orientation.z, up.x, up.y, up.z);
        }, AudioListener;
    }(Object3D), Audio = function(_Object3D) {
        function Audio(listener) {
            var _this;
            return (_this = _Object3D.call(this) || this).type = 'Audio', _this.listener = listener, _this.context = listener.context, _this.gain = _this.context.createGain(), _this.gain.connect(listener.getInput()), _this.autoplay = !1, _this.buffer = null, _this.detune = 0, _this.loop = !1, _this.loopStart = 0, _this.loopEnd = 0, _this.offset = 0, _this.duration = void 0, _this.playbackRate = 1, _this.isPlaying = !1, _this.hasPlaybackControl = !0, _this.source = null, _this.sourceType = 'empty', _this._startedAt = 0, _this._progress = 0, _this._connected = !1, _this.filters = [], _this;
        }
        _inheritsLoose(Audio, _Object3D);
        var _proto = Audio.prototype;
        return _proto.getOutput = function() {
            return this.gain;
        }, _proto.setNodeSource = function(audioNode) {
            return this.hasPlaybackControl = !1, this.sourceType = 'audioNode', this.source = audioNode, this.connect(), this;
        }, _proto.setMediaElementSource = function(mediaElement) {
            return this.hasPlaybackControl = !1, this.sourceType = 'mediaNode', this.source = this.context.createMediaElementSource(mediaElement), this.connect(), this;
        }, _proto.setMediaStreamSource = function(mediaStream) {
            return this.hasPlaybackControl = !1, this.sourceType = 'mediaStreamNode', this.source = this.context.createMediaStreamSource(mediaStream), this.connect(), this;
        }, _proto.setBuffer = function(audioBuffer) {
            return this.buffer = audioBuffer, this.sourceType = 'buffer', this.autoplay && this.play(), this;
        }, _proto.play = function(delay) {
            if (void 0 === delay && (delay = 0), !0 === this.isPlaying) {
                console.warn('THREE.Audio: Audio is already playing.');
                return;
            }
            if (!1 === this.hasPlaybackControl) {
                console.warn('THREE.Audio: this Audio has no playback control.');
                return;
            }
            this._startedAt = this.context.currentTime + delay;
            var source = this.context.createBufferSource();
            return source.buffer = this.buffer, source.loop = this.loop, source.loopStart = this.loopStart, source.loopEnd = this.loopEnd, source.onended = this.onEnded.bind(this), source.start(this._startedAt, this._progress + this.offset, this.duration), this.isPlaying = !0, this.source = source, this.setDetune(this.detune), this.setPlaybackRate(this.playbackRate), this.connect();
        }, _proto.pause = function() {
            if (!1 === this.hasPlaybackControl) {
                console.warn('THREE.Audio: this Audio has no playback control.');
                return;
            }
            return !0 === this.isPlaying && (this._progress += Math.max(this.context.currentTime - this._startedAt, 0) * this.playbackRate, !0 === this.loop && (this._progress = this._progress % (this.duration || this.buffer.duration)), this.source.stop(), this.source.onended = null, this.isPlaying = !1), this;
        }, _proto.stop = function() {
            if (!1 === this.hasPlaybackControl) {
                console.warn('THREE.Audio: this Audio has no playback control.');
                return;
            }
            return this._progress = 0, this.source.stop(), this.source.onended = null, this.isPlaying = !1, this;
        }, _proto.connect = function() {
            if (this.filters.length > 0) {
                this.source.connect(this.filters[0]);
                for(var i = 1, l = this.filters.length; i < l; i++)this.filters[i - 1].connect(this.filters[i]);
                this.filters[this.filters.length - 1].connect(this.getOutput());
            } else this.source.connect(this.getOutput());
            return this._connected = !0, this;
        }, _proto.disconnect = function() {
            if (this.filters.length > 0) {
                this.source.disconnect(this.filters[0]);
                for(var i = 1, l = this.filters.length; i < l; i++)this.filters[i - 1].disconnect(this.filters[i]);
                this.filters[this.filters.length - 1].disconnect(this.getOutput());
            } else this.source.disconnect(this.getOutput());
            return this._connected = !1, this;
        }, _proto.getFilters = function() {
            return this.filters;
        }, _proto.setFilters = function(value) {
            return value || (value = []), !0 === this._connected ? (this.disconnect(), this.filters = value.slice(), this.connect()) : this.filters = value.slice(), this;
        }, _proto.setDetune = function(value) {
            if (this.detune = value, void 0 !== this.source.detune) return !0 === this.isPlaying && this.source.detune.setTargetAtTime(this.detune, this.context.currentTime, 0.01), this;
        }, _proto.getDetune = function() {
            return this.detune;
        }, _proto.getFilter = function() {
            return this.getFilters()[0];
        }, _proto.setFilter = function(filter) {
            return this.setFilters(filter ? [
                filter
            ] : []);
        }, _proto.setPlaybackRate = function(value) {
            if (!1 === this.hasPlaybackControl) {
                console.warn('THREE.Audio: this Audio has no playback control.');
                return;
            }
            return this.playbackRate = value, !0 === this.isPlaying && this.source.playbackRate.setTargetAtTime(this.playbackRate, this.context.currentTime, 0.01), this;
        }, _proto.getPlaybackRate = function() {
            return this.playbackRate;
        }, _proto.onEnded = function() {
            this.isPlaying = !1;
        }, _proto.getLoop = function() {
            return !1 === this.hasPlaybackControl ? (console.warn('THREE.Audio: this Audio has no playback control.'), !1) : this.loop;
        }, _proto.setLoop = function(value) {
            if (!1 === this.hasPlaybackControl) {
                console.warn('THREE.Audio: this Audio has no playback control.');
                return;
            }
            return this.loop = value, !0 === this.isPlaying && (this.source.loop = this.loop), this;
        }, _proto.setLoopStart = function(value) {
            return this.loopStart = value, this;
        }, _proto.setLoopEnd = function(value) {
            return this.loopEnd = value, this;
        }, _proto.getVolume = function() {
            return this.gain.gain.value;
        }, _proto.setVolume = function(value) {
            return this.gain.gain.setTargetAtTime(value, this.context.currentTime, 0.01), this;
        }, Audio;
    }(Object3D), _position$3 = new Vector3(), _quaternion$4 = new Quaternion(), _scale$2 = new Vector3(), _orientation$1 = new Vector3(), PositionalAudio = function(_Audio) {
        function PositionalAudio(listener) {
            var _this;
            return (_this = _Audio.call(this, listener) || this).panner = _this.context.createPanner(), _this.panner.panningModel = 'HRTF', _this.panner.connect(_this.gain), _this;
        }
        _inheritsLoose(PositionalAudio, _Audio);
        var _proto = PositionalAudio.prototype;
        return _proto.getOutput = function() {
            return this.panner;
        }, _proto.getRefDistance = function() {
            return this.panner.refDistance;
        }, _proto.setRefDistance = function(value) {
            return this.panner.refDistance = value, this;
        }, _proto.getRolloffFactor = function() {
            return this.panner.rolloffFactor;
        }, _proto.setRolloffFactor = function(value) {
            return this.panner.rolloffFactor = value, this;
        }, _proto.getDistanceModel = function() {
            return this.panner.distanceModel;
        }, _proto.setDistanceModel = function(value) {
            return this.panner.distanceModel = value, this;
        }, _proto.getMaxDistance = function() {
            return this.panner.maxDistance;
        }, _proto.setMaxDistance = function(value) {
            return this.panner.maxDistance = value, this;
        }, _proto.setDirectionalCone = function(coneInnerAngle, coneOuterAngle, coneOuterGain) {
            return this.panner.coneInnerAngle = coneInnerAngle, this.panner.coneOuterAngle = coneOuterAngle, this.panner.coneOuterGain = coneOuterGain, this;
        }, _proto.updateMatrixWorld = function(force) {
            if (_Audio.prototype.updateMatrixWorld.call(this, force), !0 !== this.hasPlaybackControl || !1 !== this.isPlaying) {
                this.matrixWorld.decompose(_position$3, _quaternion$4, _scale$2), _orientation$1.set(0, 0, 1).applyQuaternion(_quaternion$4);
                var panner = this.panner;
                if (panner.positionX) {
                    var endTime = this.context.currentTime + this.listener.timeDelta;
                    panner.positionX.linearRampToValueAtTime(_position$3.x, endTime), panner.positionY.linearRampToValueAtTime(_position$3.y, endTime), panner.positionZ.linearRampToValueAtTime(_position$3.z, endTime), panner.orientationX.linearRampToValueAtTime(_orientation$1.x, endTime), panner.orientationY.linearRampToValueAtTime(_orientation$1.y, endTime), panner.orientationZ.linearRampToValueAtTime(_orientation$1.z, endTime);
                } else panner.setPosition(_position$3.x, _position$3.y, _position$3.z), panner.setOrientation(_orientation$1.x, _orientation$1.y, _orientation$1.z);
            }
        }, PositionalAudio;
    }(Audio), AudioAnalyser = function() {
        function AudioAnalyser(audio, fftSize) {
            void 0 === fftSize && (fftSize = 2048), this.analyser = audio.context.createAnalyser(), this.analyser.fftSize = fftSize, this.data = new Uint8Array(this.analyser.frequencyBinCount), audio.getOutput().connect(this.analyser);
        }
        var _proto = AudioAnalyser.prototype;
        return _proto.getFrequencyData = function() {
            return this.analyser.getByteFrequencyData(this.data), this.data;
        }, _proto.getAverageFrequency = function() {
            for(var value = 0, data = this.getFrequencyData(), i = 0; i < data.length; i++)value += data[i];
            return value / data.length;
        }, AudioAnalyser;
    }();
    function PropertyMixer(binding, typeName, valueSize) {
        var mixFunction, mixFunctionAdditive, setIdentity;
        switch(this.binding = binding, this.valueSize = valueSize, typeName){
            case 'quaternion':
                mixFunction = this._slerp, mixFunctionAdditive = this._slerpAdditive, setIdentity = this._setAdditiveIdentityQuaternion, this.buffer = new Float64Array(6 * valueSize), this._workIndex = 5;
                break;
            case 'string':
            case 'bool':
                mixFunction = this._select, mixFunctionAdditive = this._select, setIdentity = this._setAdditiveIdentityOther, this.buffer = Array(5 * valueSize);
                break;
            default:
                mixFunction = this._lerp, mixFunctionAdditive = this._lerpAdditive, setIdentity = this._setAdditiveIdentityNumeric, this.buffer = new Float64Array(5 * valueSize);
        }
        this._mixBufferRegion = mixFunction, this._mixBufferRegionAdditive = mixFunctionAdditive, this._setIdentity = setIdentity, this._origIndex = 3, this._addIndex = 4, this.cumulativeWeight = 0, this.cumulativeWeightAdditive = 0, this.useCount = 0, this.referenceCount = 0;
    }
    Object.assign(PropertyMixer.prototype, {
        accumulate: function(accuIndex, weight) {
            var buffer = this.buffer, stride = this.valueSize, offset = accuIndex * stride + stride, currentWeight = this.cumulativeWeight;
            if (0 === currentWeight) {
                for(var i = 0; i !== stride; ++i)buffer[offset + i] = buffer[i];
                currentWeight = weight;
            } else {
                currentWeight += weight;
                var mix = weight / currentWeight;
                this._mixBufferRegion(buffer, offset, 0, mix, stride);
            }
            this.cumulativeWeight = currentWeight;
        },
        accumulateAdditive: function(weight) {
            var buffer = this.buffer, stride = this.valueSize, offset = stride * this._addIndex;
            0 === this.cumulativeWeightAdditive && this._setIdentity(), this._mixBufferRegionAdditive(buffer, offset, 0, weight, stride), this.cumulativeWeightAdditive += weight;
        },
        apply: function(accuIndex) {
            var stride = this.valueSize, buffer = this.buffer, offset = accuIndex * stride + stride, weight = this.cumulativeWeight, weightAdditive = this.cumulativeWeightAdditive, binding = this.binding;
            if (this.cumulativeWeight = 0, this.cumulativeWeightAdditive = 0, weight < 1) {
                var originalValueOffset = stride * this._origIndex;
                this._mixBufferRegion(buffer, offset, originalValueOffset, 1 - weight, stride);
            }
            weightAdditive > 0 && this._mixBufferRegionAdditive(buffer, offset, this._addIndex * stride, 1, stride);
            for(var i = stride, e = stride + stride; i !== e; ++i)if (buffer[i] !== buffer[i + stride]) {
                binding.setValue(buffer, offset);
                break;
            }
        },
        saveOriginalState: function() {
            var binding = this.binding, buffer = this.buffer, stride = this.valueSize, originalValueOffset = stride * this._origIndex;
            binding.getValue(buffer, originalValueOffset);
            for(var i = stride; i !== originalValueOffset; ++i)buffer[i] = buffer[originalValueOffset + i % stride];
            this._setIdentity(), this.cumulativeWeight = 0, this.cumulativeWeightAdditive = 0;
        },
        restoreOriginalState: function() {
            var originalValueOffset = 3 * this.valueSize;
            this.binding.setValue(this.buffer, originalValueOffset);
        },
        _setAdditiveIdentityNumeric: function() {
            for(var startIndex = this._addIndex * this.valueSize, endIndex = startIndex + this.valueSize, i = startIndex; i < endIndex; i++)this.buffer[i] = 0;
        },
        _setAdditiveIdentityQuaternion: function() {
            this._setAdditiveIdentityNumeric(), this.buffer[this._addIndex * this.valueSize + 3] = 1;
        },
        _setAdditiveIdentityOther: function() {
            for(var startIndex = this._origIndex * this.valueSize, targetIndex = this._addIndex * this.valueSize, i = 0; i < this.valueSize; i++)this.buffer[targetIndex + i] = this.buffer[startIndex + i];
        },
        _select: function(buffer, dstOffset, srcOffset, t, stride) {
            if (t >= 0.5) for(var i = 0; i !== stride; ++i)buffer[dstOffset + i] = buffer[srcOffset + i];
        },
        _slerp: function(buffer, dstOffset, srcOffset, t) {
            Quaternion.slerpFlat(buffer, dstOffset, buffer, dstOffset, buffer, srcOffset, t);
        },
        _slerpAdditive: function(buffer, dstOffset, srcOffset, t, stride) {
            var workOffset = this._workIndex * stride;
            Quaternion.multiplyQuaternionsFlat(buffer, workOffset, buffer, dstOffset, buffer, srcOffset), Quaternion.slerpFlat(buffer, dstOffset, buffer, dstOffset, buffer, workOffset, t);
        },
        _lerp: function(buffer, dstOffset, srcOffset, t, stride) {
            for(var s = 1 - t, i = 0; i !== stride; ++i){
                var j = dstOffset + i;
                buffer[j] = buffer[j] * s + buffer[srcOffset + i] * t;
            }
        },
        _lerpAdditive: function(buffer, dstOffset, srcOffset, t, stride) {
            for(var i = 0; i !== stride; ++i){
                var j = dstOffset + i;
                buffer[j] = buffer[j] + buffer[srcOffset + i] * t;
            }
        }
    });
    var _RESERVED_CHARS_RE = '\\[\\]\\.:\\/', _reservedRe = RegExp('[' + _RESERVED_CHARS_RE + ']', 'g'), _wordChar = '[^' + _RESERVED_CHARS_RE + ']', _wordCharOrDot = '[^' + _RESERVED_CHARS_RE.replace('\\.', '') + ']', _trackRe = RegExp("^" + /((?:WC+[\/:])*)/.source.replace('WC', _wordChar) + /(WCOD+)?/.source.replace('WCOD', _wordCharOrDot) + /(?:\.(WC+)(?:\[(.+)\])?)?/.source.replace('WC', _wordChar) + /\.(WC+)(?:\[(.+)\])?/.source.replace('WC', _wordChar) + '$'), _supportedObjectNames = [
        'material',
        'materials',
        'bones'
    ];
    function Composite(targetGroup, path, optionalParsedPath) {
        var parsedPath = optionalParsedPath || PropertyBinding.parseTrackName(path);
        this._targetGroup = targetGroup, this._bindings = targetGroup.subscribe_(path, parsedPath);
    }
    function PropertyBinding(rootNode, path, parsedPath) {
        this.path = path, this.parsedPath = parsedPath || PropertyBinding.parseTrackName(path), this.node = PropertyBinding.findNode(rootNode, this.parsedPath.nodeName) || rootNode, this.rootNode = rootNode;
    }
    function AnimationObjectGroup() {
        this.uuid = MathUtils.generateUUID(), this._objects = Array.prototype.slice.call(arguments), this.nCachedObjects_ = 0;
        var indices = {};
        this._indicesByUUID = indices;
        for(var i = 0, n = arguments.length; i !== n; ++i)indices[arguments[i].uuid] = i;
        this._paths = [], this._parsedPaths = [], this._bindings = [], this._bindingsIndicesByPath = {};
        var scope = this;
        this.stats = {
            objects: {
                get total () {
                    return scope._objects.length;
                },
                get inUse () {
                    return this.total - scope.nCachedObjects_;
                }
            },
            get bindingsPerObject () {
                return scope._bindings.length;
            }
        };
    }
    Object.assign(Composite.prototype, {
        getValue: function(array, offset) {
            this.bind();
            var firstValidIndex = this._targetGroup.nCachedObjects_, binding = this._bindings[firstValidIndex];
            void 0 !== binding && binding.getValue(array, offset);
        },
        setValue: function(array, offset) {
            for(var bindings = this._bindings, i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++i)bindings[i].setValue(array, offset);
        },
        bind: function() {
            for(var bindings = this._bindings, i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++i)bindings[i].bind();
        },
        unbind: function() {
            for(var bindings = this._bindings, i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++i)bindings[i].unbind();
        }
    }), Object.assign(PropertyBinding, {
        Composite: Composite,
        create: function(root, path, parsedPath) {
            return root && root.isAnimationObjectGroup ? new PropertyBinding.Composite(root, path, parsedPath) : new PropertyBinding(root, path, parsedPath);
        },
        sanitizeNodeName: function(name) {
            return name.replace(/\s/g, '_').replace(_reservedRe, '');
        },
        parseTrackName: function(trackName) {
            var matches = _trackRe.exec(trackName);
            if (!matches) throw Error('PropertyBinding: Cannot parse trackName: ' + trackName);
            var results = {
                nodeName: matches[2],
                objectName: matches[3],
                objectIndex: matches[4],
                propertyName: matches[5],
                propertyIndex: matches[6]
            }, lastDot = results.nodeName && results.nodeName.lastIndexOf('.');
            if (void 0 !== lastDot && -1 !== lastDot) {
                var objectName = results.nodeName.substring(lastDot + 1);
                -1 !== _supportedObjectNames.indexOf(objectName) && (results.nodeName = results.nodeName.substring(0, lastDot), results.objectName = objectName);
            }
            if (null === results.propertyName || 0 === results.propertyName.length) throw Error('PropertyBinding: can not parse propertyName from trackName: ' + trackName);
            return results;
        },
        findNode: function(root, nodeName) {
            if (!nodeName || '' === nodeName || '.' === nodeName || -1 === nodeName || nodeName === root.name || nodeName === root.uuid) return root;
            if (root.skeleton) {
                var bone = root.skeleton.getBoneByName(nodeName);
                if (void 0 !== bone) return bone;
            }
            if (root.children) {
                var subTreeNode = function searchNodeSubtree(children) {
                    for(var i = 0; i < children.length; i++){
                        var childNode = children[i];
                        if (childNode.name === nodeName || childNode.uuid === nodeName) return childNode;
                        var result = searchNodeSubtree(childNode.children);
                        if (result) return result;
                    }
                    return null;
                }(root.children);
                if (subTreeNode) return subTreeNode;
            }
            return null;
        }
    }), Object.assign(PropertyBinding.prototype, {
        _getValue_unavailable: function() {},
        _setValue_unavailable: function() {},
        BindingType: {
            Direct: 0,
            EntireArray: 1,
            ArrayElement: 2,
            HasFromToArray: 3
        },
        Versioning: {
            None: 0,
            NeedsUpdate: 1,
            MatrixWorldNeedsUpdate: 2
        },
        GetterByBindingType: [
            function(buffer, offset) {
                buffer[offset] = this.node[this.propertyName];
            },
            function(buffer, offset) {
                for(var source = this.resolvedProperty, i = 0, n = source.length; i !== n; ++i)buffer[offset++] = source[i];
            },
            function(buffer, offset) {
                buffer[offset] = this.resolvedProperty[this.propertyIndex];
            },
            function(buffer, offset) {
                this.resolvedProperty.toArray(buffer, offset);
            }
        ],
        SetterByBindingTypeAndVersioning: [
            [
                function(buffer, offset) {
                    this.targetObject[this.propertyName] = buffer[offset];
                },
                function(buffer, offset) {
                    this.targetObject[this.propertyName] = buffer[offset], this.targetObject.needsUpdate = !0;
                },
                function(buffer, offset) {
                    this.targetObject[this.propertyName] = buffer[offset], this.targetObject.matrixWorldNeedsUpdate = !0;
                }
            ],
            [
                function(buffer, offset) {
                    for(var dest = this.resolvedProperty, i = 0, n = dest.length; i !== n; ++i)dest[i] = buffer[offset++];
                },
                function(buffer, offset) {
                    for(var dest = this.resolvedProperty, i = 0, n = dest.length; i !== n; ++i)dest[i] = buffer[offset++];
                    this.targetObject.needsUpdate = !0;
                },
                function(buffer, offset) {
                    for(var dest = this.resolvedProperty, i = 0, n = dest.length; i !== n; ++i)dest[i] = buffer[offset++];
                    this.targetObject.matrixWorldNeedsUpdate = !0;
                }
            ],
            [
                function(buffer, offset) {
                    this.resolvedProperty[this.propertyIndex] = buffer[offset];
                },
                function(buffer, offset) {
                    this.resolvedProperty[this.propertyIndex] = buffer[offset], this.targetObject.needsUpdate = !0;
                },
                function(buffer, offset) {
                    this.resolvedProperty[this.propertyIndex] = buffer[offset], this.targetObject.matrixWorldNeedsUpdate = !0;
                }
            ],
            [
                function(buffer, offset) {
                    this.resolvedProperty.fromArray(buffer, offset);
                },
                function(buffer, offset) {
                    this.resolvedProperty.fromArray(buffer, offset), this.targetObject.needsUpdate = !0;
                },
                function(buffer, offset) {
                    this.resolvedProperty.fromArray(buffer, offset), this.targetObject.matrixWorldNeedsUpdate = !0;
                }
            ]
        ],
        getValue: function(targetArray, offset) {
            this.bind(), this.getValue(targetArray, offset);
        },
        setValue: function(sourceArray, offset) {
            this.bind(), this.setValue(sourceArray, offset);
        },
        bind: function() {
            var targetObject = this.node, parsedPath = this.parsedPath, objectName = parsedPath.objectName, propertyName = parsedPath.propertyName, propertyIndex = parsedPath.propertyIndex;
            if (targetObject || (targetObject = PropertyBinding.findNode(this.rootNode, parsedPath.nodeName) || this.rootNode, this.node = targetObject), this.getValue = this._getValue_unavailable, this.setValue = this._setValue_unavailable, !targetObject) {
                console.error('THREE.PropertyBinding: Trying to update node for track: ' + this.path + ' but it wasn\'t found.');
                return;
            }
            if (objectName) {
                var objectIndex = parsedPath.objectIndex;
                switch(objectName){
                    case 'materials':
                        if (!targetObject.material) {
                            console.error('THREE.PropertyBinding: Can not bind to material as node does not have a material.', this);
                            return;
                        }
                        if (!targetObject.material.materials) {
                            console.error('THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.', this);
                            return;
                        }
                        targetObject = targetObject.material.materials;
                        break;
                    case 'bones':
                        if (!targetObject.skeleton) {
                            console.error('THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.', this);
                            return;
                        }
                        targetObject = targetObject.skeleton.bones;
                        for(var i = 0; i < targetObject.length; i++)if (targetObject[i].name === objectIndex) {
                            objectIndex = i;
                            break;
                        }
                        break;
                    default:
                        if (void 0 === targetObject[objectName]) {
                            console.error('THREE.PropertyBinding: Can not bind to objectName of node undefined.', this);
                            return;
                        }
                        targetObject = targetObject[objectName];
                }
                if (void 0 !== objectIndex) {
                    if (void 0 === targetObject[objectIndex]) {
                        console.error('THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.', this, targetObject);
                        return;
                    }
                    targetObject = targetObject[objectIndex];
                }
            }
            var nodeProperty = targetObject[propertyName];
            if (void 0 === nodeProperty) {
                console.error('THREE.PropertyBinding: Trying to update property for track: ' + parsedPath.nodeName + '.' + propertyName + ' but it wasn\'t found.', targetObject);
                return;
            }
            var versioning = this.Versioning.None;
            this.targetObject = targetObject, void 0 !== targetObject.needsUpdate ? versioning = this.Versioning.NeedsUpdate : void 0 !== targetObject.matrixWorldNeedsUpdate && (versioning = this.Versioning.MatrixWorldNeedsUpdate);
            var bindingType = this.BindingType.Direct;
            if (void 0 !== propertyIndex) {
                if ('morphTargetInfluences' === propertyName) {
                    if (!targetObject.geometry) {
                        console.error('THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.', this);
                        return;
                    }
                    if (targetObject.geometry.isBufferGeometry) {
                        if (!targetObject.geometry.morphAttributes) {
                            console.error('THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.', this);
                            return;
                        }
                        void 0 !== targetObject.morphTargetDictionary[propertyIndex] && (propertyIndex = targetObject.morphTargetDictionary[propertyIndex]);
                    } else {
                        console.error('THREE.PropertyBinding: Can not bind to morphTargetInfluences on THREE.Geometry. Use THREE.BufferGeometry instead.', this);
                        return;
                    }
                }
                bindingType = this.BindingType.ArrayElement, this.resolvedProperty = nodeProperty, this.propertyIndex = propertyIndex;
            } else void 0 !== nodeProperty.fromArray && void 0 !== nodeProperty.toArray ? (bindingType = this.BindingType.HasFromToArray, this.resolvedProperty = nodeProperty) : Array.isArray(nodeProperty) ? (bindingType = this.BindingType.EntireArray, this.resolvedProperty = nodeProperty) : this.propertyName = propertyName;
            this.getValue = this.GetterByBindingType[bindingType], this.setValue = this.SetterByBindingTypeAndVersioning[bindingType][versioning];
        },
        unbind: function() {
            this.node = null, this.getValue = this._getValue_unbound, this.setValue = this._setValue_unbound;
        }
    }), Object.assign(PropertyBinding.prototype, {
        _getValue_unbound: PropertyBinding.prototype.getValue,
        _setValue_unbound: PropertyBinding.prototype.setValue
    }), Object.assign(AnimationObjectGroup.prototype, {
        isAnimationObjectGroup: !0,
        add: function() {
            for(var objects = this._objects, indicesByUUID = this._indicesByUUID, paths = this._paths, parsedPaths = this._parsedPaths, bindings = this._bindings, nBindings = bindings.length, knownObject = void 0, nObjects = objects.length, nCachedObjects = this.nCachedObjects_, i = 0, n = arguments.length; i !== n; ++i){
                var object = arguments[i], uuid = object.uuid, index = indicesByUUID[uuid];
                if (void 0 === index) {
                    index = nObjects++, indicesByUUID[uuid] = index, objects.push(object);
                    for(var j = 0; j !== nBindings; ++j)bindings[j].push(new PropertyBinding(object, paths[j], parsedPaths[j]));
                } else if (index < nCachedObjects) {
                    knownObject = objects[index];
                    var firstActiveIndex = --nCachedObjects, lastCachedObject = objects[firstActiveIndex];
                    indicesByUUID[lastCachedObject.uuid] = index, objects[index] = lastCachedObject, indicesByUUID[uuid] = firstActiveIndex, objects[firstActiveIndex] = object;
                    for(var _j = 0; _j !== nBindings; ++_j){
                        var bindingsForPath = bindings[_j], lastCached = bindingsForPath[firstActiveIndex], binding = bindingsForPath[index];
                        bindingsForPath[index] = lastCached, void 0 === binding && (binding = new PropertyBinding(object, paths[_j], parsedPaths[_j])), bindingsForPath[firstActiveIndex] = binding;
                    }
                } else objects[index] !== knownObject && console.error("THREE.AnimationObjectGroup: Different objects with the same UUID detected. Clean the caches or recreate your infrastructure when reloading scenes.");
            }
            this.nCachedObjects_ = nCachedObjects;
        },
        remove: function() {
            for(var objects = this._objects, indicesByUUID = this._indicesByUUID, bindings = this._bindings, nBindings = bindings.length, nCachedObjects = this.nCachedObjects_, i = 0, n = arguments.length; i !== n; ++i){
                var object = arguments[i], uuid = object.uuid, index = indicesByUUID[uuid];
                if (void 0 !== index && index >= nCachedObjects) {
                    var lastCachedIndex = nCachedObjects++, firstActiveObject = objects[lastCachedIndex];
                    indicesByUUID[firstActiveObject.uuid] = index, objects[index] = firstActiveObject, indicesByUUID[uuid] = lastCachedIndex, objects[lastCachedIndex] = object;
                    for(var j = 0; j !== nBindings; ++j){
                        var bindingsForPath = bindings[j], firstActive = bindingsForPath[lastCachedIndex], binding = bindingsForPath[index];
                        bindingsForPath[index] = firstActive, bindingsForPath[lastCachedIndex] = binding;
                    }
                }
            }
            this.nCachedObjects_ = nCachedObjects;
        },
        uncache: function() {
            for(var objects = this._objects, indicesByUUID = this._indicesByUUID, bindings = this._bindings, nBindings = bindings.length, nCachedObjects = this.nCachedObjects_, nObjects = objects.length, i = 0, n = arguments.length; i !== n; ++i){
                var object = arguments[i], uuid = object.uuid, index = indicesByUUID[uuid];
                if (void 0 !== index) {
                    if (delete indicesByUUID[uuid], index < nCachedObjects) {
                        var firstActiveIndex = --nCachedObjects, lastCachedObject = objects[firstActiveIndex], lastIndex = --nObjects, lastObject = objects[lastIndex];
                        indicesByUUID[lastCachedObject.uuid] = index, objects[index] = lastCachedObject, indicesByUUID[lastObject.uuid] = firstActiveIndex, objects[firstActiveIndex] = lastObject, objects.pop();
                        for(var j = 0; j !== nBindings; ++j){
                            var bindingsForPath = bindings[j], lastCached = bindingsForPath[firstActiveIndex], last = bindingsForPath[lastIndex];
                            bindingsForPath[index] = lastCached, bindingsForPath[firstActiveIndex] = last, bindingsForPath.pop();
                        }
                    } else {
                        var _lastIndex = --nObjects, _lastObject = objects[_lastIndex];
                        _lastIndex > 0 && (indicesByUUID[_lastObject.uuid] = index), objects[index] = _lastObject, objects.pop();
                        for(var _j2 = 0; _j2 !== nBindings; ++_j2){
                            var _bindingsForPath = bindings[_j2];
                            _bindingsForPath[index] = _bindingsForPath[_lastIndex], _bindingsForPath.pop();
                        }
                    }
                }
            }
            this.nCachedObjects_ = nCachedObjects;
        },
        subscribe_: function(path, parsedPath) {
            var indicesByPath = this._bindingsIndicesByPath, index = indicesByPath[path], bindings = this._bindings;
            if (void 0 !== index) return bindings[index];
            var paths = this._paths, parsedPaths = this._parsedPaths, objects = this._objects, nObjects = objects.length, nCachedObjects = this.nCachedObjects_, bindingsForPath = Array(nObjects);
            index = bindings.length, indicesByPath[path] = index, paths.push(path), parsedPaths.push(parsedPath), bindings.push(bindingsForPath);
            for(var i = nCachedObjects, n = objects.length; i !== n; ++i){
                var object = objects[i];
                bindingsForPath[i] = new PropertyBinding(object, path, parsedPath);
            }
            return bindingsForPath;
        },
        unsubscribe_: function(path) {
            var indicesByPath = this._bindingsIndicesByPath, index = indicesByPath[path];
            if (void 0 !== index) {
                var paths = this._paths, parsedPaths = this._parsedPaths, bindings = this._bindings, lastBindingsIndex = bindings.length - 1, lastBindings = bindings[lastBindingsIndex];
                indicesByPath[path[lastBindingsIndex]] = index, bindings[index] = lastBindings, bindings.pop(), parsedPaths[index] = parsedPaths[lastBindingsIndex], parsedPaths.pop(), paths[index] = paths[lastBindingsIndex], paths.pop();
            }
        }
    });
    var AnimationAction = function() {
        function AnimationAction(mixer, clip, localRoot, blendMode) {
            void 0 === localRoot && (localRoot = null), void 0 === blendMode && (blendMode = clip.blendMode), this._mixer = mixer, this._clip = clip, this._localRoot = localRoot, this.blendMode = blendMode;
            for(var tracks = clip.tracks, nTracks = tracks.length, interpolants = Array(nTracks), interpolantSettings = {
                endingStart: 2400,
                endingEnd: 2400
            }, i = 0; i !== nTracks; ++i){
                var interpolant = tracks[i].createInterpolant(null);
                interpolants[i] = interpolant, interpolant.settings = interpolantSettings;
            }
            this._interpolantSettings = interpolantSettings, this._interpolants = interpolants, this._propertyBindings = Array(nTracks), this._cacheIndex = null, this._byClipCacheIndex = null, this._timeScaleInterpolant = null, this._weightInterpolant = null, this.loop = 2201, this._loopCount = -1, this._startTime = null, this.time = 0, this.timeScale = 1, this._effectiveTimeScale = 1, this.weight = 1, this._effectiveWeight = 1, this.repetitions = 1 / 0, this.paused = !1, this.enabled = !0, this.clampWhenFinished = !1, this.zeroSlopeAtStart = !0, this.zeroSlopeAtEnd = !0;
        }
        var _proto = AnimationAction.prototype;
        return _proto.play = function() {
            return this._mixer._activateAction(this), this;
        }, _proto.stop = function() {
            return this._mixer._deactivateAction(this), this.reset();
        }, _proto.reset = function() {
            return this.paused = !1, this.enabled = !0, this.time = 0, this._loopCount = -1, this._startTime = null, this.stopFading().stopWarping();
        }, _proto.isRunning = function() {
            return this.enabled && !this.paused && 0 !== this.timeScale && null === this._startTime && this._mixer._isActiveAction(this);
        }, _proto.isScheduled = function() {
            return this._mixer._isActiveAction(this);
        }, _proto.startAt = function(time) {
            return this._startTime = time, this;
        }, _proto.setLoop = function(mode, repetitions) {
            return this.loop = mode, this.repetitions = repetitions, this;
        }, _proto.setEffectiveWeight = function(weight) {
            return this.weight = weight, this._effectiveWeight = this.enabled ? weight : 0, this.stopFading();
        }, _proto.getEffectiveWeight = function() {
            return this._effectiveWeight;
        }, _proto.fadeIn = function(duration) {
            return this._scheduleFading(duration, 0, 1);
        }, _proto.fadeOut = function(duration) {
            return this._scheduleFading(duration, 1, 0);
        }, _proto.crossFadeFrom = function(fadeOutAction, duration, warp) {
            if (fadeOutAction.fadeOut(duration), this.fadeIn(duration), warp) {
                var fadeInDuration = this._clip.duration, fadeOutDuration = fadeOutAction._clip.duration;
                fadeOutAction.warp(1.0, fadeOutDuration / fadeInDuration, duration), this.warp(fadeInDuration / fadeOutDuration, 1.0, duration);
            }
            return this;
        }, _proto.crossFadeTo = function(fadeInAction, duration, warp) {
            return fadeInAction.crossFadeFrom(this, duration, warp);
        }, _proto.stopFading = function() {
            var weightInterpolant = this._weightInterpolant;
            return null !== weightInterpolant && (this._weightInterpolant = null, this._mixer._takeBackControlInterpolant(weightInterpolant)), this;
        }, _proto.setEffectiveTimeScale = function(timeScale) {
            return this.timeScale = timeScale, this._effectiveTimeScale = this.paused ? 0 : timeScale, this.stopWarping();
        }, _proto.getEffectiveTimeScale = function() {
            return this._effectiveTimeScale;
        }, _proto.setDuration = function(duration) {
            return this.timeScale = this._clip.duration / duration, this.stopWarping();
        }, _proto.syncWith = function(action) {
            return this.time = action.time, this.timeScale = action.timeScale, this.stopWarping();
        }, _proto.halt = function(duration) {
            return this.warp(this._effectiveTimeScale, 0, duration);
        }, _proto.warp = function(startTimeScale, endTimeScale, duration) {
            var mixer = this._mixer, now = mixer.time, timeScale = this.timeScale, interpolant = this._timeScaleInterpolant;
            null === interpolant && (interpolant = mixer._lendControlInterpolant(), this._timeScaleInterpolant = interpolant);
            var times = interpolant.parameterPositions, values = interpolant.sampleValues;
            return times[0] = now, times[1] = now + duration, values[0] = startTimeScale / timeScale, values[1] = endTimeScale / timeScale, this;
        }, _proto.stopWarping = function() {
            var timeScaleInterpolant = this._timeScaleInterpolant;
            return null !== timeScaleInterpolant && (this._timeScaleInterpolant = null, this._mixer._takeBackControlInterpolant(timeScaleInterpolant)), this;
        }, _proto.getMixer = function() {
            return this._mixer;
        }, _proto.getClip = function() {
            return this._clip;
        }, _proto.getRoot = function() {
            return this._localRoot || this._mixer._root;
        }, _proto._update = function(time, deltaTime, timeDirection, accuIndex) {
            if (!this.enabled) {
                this._updateWeight(time);
                return;
            }
            var startTime = this._startTime;
            if (null !== startTime) {
                var timeRunning = (time - startTime) * timeDirection;
                if (timeRunning < 0 || 0 === timeDirection) return;
                this._startTime = null, deltaTime = timeDirection * timeRunning;
            }
            deltaTime *= this._updateTimeScale(time);
            var clipTime = this._updateTime(deltaTime), weight = this._updateWeight(time);
            if (weight > 0) {
                var _interpolants = this._interpolants, propertyMixers = this._propertyBindings;
                if (2501 === this.blendMode) for(var j = 0, m = _interpolants.length; j !== m; ++j)_interpolants[j].evaluate(clipTime), propertyMixers[j].accumulateAdditive(weight);
                else for(var _j = 0, _m = _interpolants.length; _j !== _m; ++_j)_interpolants[_j].evaluate(clipTime), propertyMixers[_j].accumulate(accuIndex, weight);
            }
        }, _proto._updateWeight = function(time) {
            var weight = 0;
            if (this.enabled) {
                weight = this.weight;
                var interpolant = this._weightInterpolant;
                if (null !== interpolant) {
                    var interpolantValue = interpolant.evaluate(time)[0];
                    weight *= interpolantValue, time > interpolant.parameterPositions[1] && (this.stopFading(), 0 === interpolantValue && (this.enabled = !1));
                }
            }
            return this._effectiveWeight = weight, weight;
        }, _proto._updateTimeScale = function(time) {
            var timeScale = 0;
            if (!this.paused) {
                timeScale = this.timeScale;
                var interpolant = this._timeScaleInterpolant;
                null !== interpolant && (timeScale *= interpolant.evaluate(time)[0], time > interpolant.parameterPositions[1] && (this.stopWarping(), 0 === timeScale ? this.paused = !0 : this.timeScale = timeScale));
            }
            return this._effectiveTimeScale = timeScale, timeScale;
        }, _proto._updateTime = function(deltaTime) {
            var duration = this._clip.duration, loop = this.loop, time = this.time + deltaTime, loopCount = this._loopCount, pingPong = 2202 === loop;
            if (0 === deltaTime) return -1 === loopCount ? time : pingPong && (1 & loopCount) == 1 ? duration - time : time;
            if (2200 === loop) {
                -1 === loopCount && (this._loopCount = 0, this._setEndings(!0, !0, !1));
                handle_stop: {
                    if (time >= duration) time = duration;
                    else if (time < 0) time = 0;
                    else {
                        this.time = time;
                        break handle_stop;
                    }
                    this.clampWhenFinished ? this.paused = !0 : this.enabled = !1, this.time = time, this._mixer.dispatchEvent({
                        type: 'finished',
                        action: this,
                        direction: deltaTime < 0 ? -1 : 1
                    });
                }
            } else {
                if (-1 === loopCount && (deltaTime >= 0 ? (loopCount = 0, this._setEndings(!0, 0 === this.repetitions, pingPong)) : this._setEndings(0 === this.repetitions, !0, pingPong)), time >= duration || time < 0) {
                    var loopDelta = Math.floor(time / duration);
                    time -= duration * loopDelta, loopCount += Math.abs(loopDelta);
                    var pending = this.repetitions - loopCount;
                    if (pending <= 0) this.clampWhenFinished ? this.paused = !0 : this.enabled = !1, time = deltaTime > 0 ? duration : 0, this.time = time, this._mixer.dispatchEvent({
                        type: 'finished',
                        action: this,
                        direction: deltaTime > 0 ? 1 : -1
                    });
                    else {
                        if (1 === pending) {
                            var atStart = deltaTime < 0;
                            this._setEndings(atStart, !atStart, pingPong);
                        } else this._setEndings(!1, !1, pingPong);
                        this._loopCount = loopCount, this.time = time, this._mixer.dispatchEvent({
                            type: 'loop',
                            action: this,
                            loopDelta: loopDelta
                        });
                    }
                } else this.time = time;
                if (pingPong && (1 & loopCount) == 1) return duration - time;
            }
            return time;
        }, _proto._setEndings = function(atStart, atEnd, pingPong) {
            var settings = this._interpolantSettings;
            pingPong ? (settings.endingStart = 2401, settings.endingEnd = 2401) : (atStart ? settings.endingStart = this.zeroSlopeAtStart ? 2401 : 2400 : settings.endingStart = 2402, atEnd ? settings.endingEnd = this.zeroSlopeAtEnd ? 2401 : 2400 : settings.endingEnd = 2402);
        }, _proto._scheduleFading = function(duration, weightNow, weightThen) {
            var mixer = this._mixer, now = mixer.time, interpolant = this._weightInterpolant;
            null === interpolant && (interpolant = mixer._lendControlInterpolant(), this._weightInterpolant = interpolant);
            var times = interpolant.parameterPositions, values = interpolant.sampleValues;
            return times[0] = now, values[0] = weightNow, times[1] = now + duration, values[1] = weightThen, this;
        }, AnimationAction;
    }();
    function AnimationMixer(root) {
        this._root = root, this._initMemoryManager(), this._accuIndex = 0, this.time = 0, this.timeScale = 1.0;
    }
    AnimationMixer.prototype = Object.assign(Object.create(EventDispatcher.prototype), {
        constructor: AnimationMixer,
        _bindAction: function(action, prototypeAction) {
            var root = action._localRoot || this._root, tracks = action._clip.tracks, nTracks = tracks.length, bindings = action._propertyBindings, interpolants = action._interpolants, rootUuid = root.uuid, bindingsByRoot = this._bindingsByRootAndName, bindingsByName = bindingsByRoot[rootUuid];
            void 0 === bindingsByName && (bindingsByName = {}, bindingsByRoot[rootUuid] = bindingsByName);
            for(var i = 0; i !== nTracks; ++i){
                var track = tracks[i], trackName = track.name, binding = bindingsByName[trackName];
                if (void 0 !== binding) bindings[i] = binding;
                else {
                    if (void 0 !== (binding = bindings[i])) {
                        null === binding._cacheIndex && (++binding.referenceCount, this._addInactiveBinding(binding, rootUuid, trackName));
                        continue;
                    }
                    var path = prototypeAction && prototypeAction._propertyBindings[i].binding.parsedPath;
                    binding = new PropertyMixer(PropertyBinding.create(root, trackName, path), track.ValueTypeName, track.getValueSize()), ++binding.referenceCount, this._addInactiveBinding(binding, rootUuid, trackName), bindings[i] = binding;
                }
                interpolants[i].resultBuffer = binding.buffer;
            }
        },
        _activateAction: function(action) {
            if (!this._isActiveAction(action)) {
                if (null === action._cacheIndex) {
                    var rootUuid = (action._localRoot || this._root).uuid, clipUuid = action._clip.uuid, actionsForClip = this._actionsByClip[clipUuid];
                    this._bindAction(action, actionsForClip && actionsForClip.knownActions[0]), this._addInactiveAction(action, clipUuid, rootUuid);
                }
                for(var bindings = action._propertyBindings, i = 0, n = bindings.length; i !== n; ++i){
                    var binding = bindings[i];
                    0 == binding.useCount++ && (this._lendBinding(binding), binding.saveOriginalState());
                }
                this._lendAction(action);
            }
        },
        _deactivateAction: function(action) {
            if (this._isActiveAction(action)) {
                for(var bindings = action._propertyBindings, i = 0, n = bindings.length; i !== n; ++i){
                    var binding = bindings[i];
                    0 == --binding.useCount && (binding.restoreOriginalState(), this._takeBackBinding(binding));
                }
                this._takeBackAction(action);
            }
        },
        _initMemoryManager: function() {
            this._actions = [], this._nActiveActions = 0, this._actionsByClip = {}, this._bindings = [], this._nActiveBindings = 0, this._bindingsByRootAndName = {}, this._controlInterpolants = [], this._nActiveControlInterpolants = 0;
            var scope = this;
            this.stats = {
                actions: {
                    get total () {
                        return scope._actions.length;
                    },
                    get inUse () {
                        return scope._nActiveActions;
                    }
                },
                bindings: {
                    get total () {
                        return scope._bindings.length;
                    },
                    get inUse () {
                        return scope._nActiveBindings;
                    }
                },
                controlInterpolants: {
                    get total () {
                        return scope._controlInterpolants.length;
                    },
                    get inUse () {
                        return scope._nActiveControlInterpolants;
                    }
                }
            };
        },
        _isActiveAction: function(action) {
            var index = action._cacheIndex;
            return null !== index && index < this._nActiveActions;
        },
        _addInactiveAction: function(action, clipUuid, rootUuid) {
            var actions = this._actions, actionsByClip = this._actionsByClip, actionsForClip = actionsByClip[clipUuid];
            if (void 0 === actionsForClip) actionsForClip = {
                knownActions: [
                    action
                ],
                actionByRoot: {}
            }, action._byClipCacheIndex = 0, actionsByClip[clipUuid] = actionsForClip;
            else {
                var knownActions = actionsForClip.knownActions;
                action._byClipCacheIndex = knownActions.length, knownActions.push(action);
            }
            action._cacheIndex = actions.length, actions.push(action), actionsForClip.actionByRoot[rootUuid] = action;
        },
        _removeInactiveAction: function(action) {
            var actions = this._actions, lastInactiveAction = actions[actions.length - 1], cacheIndex = action._cacheIndex;
            lastInactiveAction._cacheIndex = cacheIndex, actions[cacheIndex] = lastInactiveAction, actions.pop(), action._cacheIndex = null;
            var clipUuid = action._clip.uuid, actionsByClip = this._actionsByClip, actionsForClip = actionsByClip[clipUuid], knownActionsForClip = actionsForClip.knownActions, lastKnownAction = knownActionsForClip[knownActionsForClip.length - 1], byClipCacheIndex = action._byClipCacheIndex;
            lastKnownAction._byClipCacheIndex = byClipCacheIndex, knownActionsForClip[byClipCacheIndex] = lastKnownAction, knownActionsForClip.pop(), action._byClipCacheIndex = null;
            var rootUuid = (action._localRoot || this._root).uuid;
            delete actionsForClip.actionByRoot[rootUuid], 0 === knownActionsForClip.length && delete actionsByClip[clipUuid], this._removeInactiveBindingsForAction(action);
        },
        _removeInactiveBindingsForAction: function(action) {
            for(var bindings = action._propertyBindings, i = 0, n = bindings.length; i !== n; ++i){
                var binding = bindings[i];
                0 == --binding.referenceCount && this._removeInactiveBinding(binding);
            }
        },
        _lendAction: function(action) {
            var actions = this._actions, prevIndex = action._cacheIndex, lastActiveIndex = this._nActiveActions++, firstInactiveAction = actions[lastActiveIndex];
            action._cacheIndex = lastActiveIndex, actions[lastActiveIndex] = action, firstInactiveAction._cacheIndex = prevIndex, actions[prevIndex] = firstInactiveAction;
        },
        _takeBackAction: function(action) {
            var actions = this._actions, prevIndex = action._cacheIndex, firstInactiveIndex = --this._nActiveActions, lastActiveAction = actions[firstInactiveIndex];
            action._cacheIndex = firstInactiveIndex, actions[firstInactiveIndex] = action, lastActiveAction._cacheIndex = prevIndex, actions[prevIndex] = lastActiveAction;
        },
        _addInactiveBinding: function(binding, rootUuid, trackName) {
            var bindingsByRoot = this._bindingsByRootAndName, bindings = this._bindings, bindingByName = bindingsByRoot[rootUuid];
            void 0 === bindingByName && (bindingByName = {}, bindingsByRoot[rootUuid] = bindingByName), bindingByName[trackName] = binding, binding._cacheIndex = bindings.length, bindings.push(binding);
        },
        _removeInactiveBinding: function(binding) {
            var bindings = this._bindings, propBinding = binding.binding, rootUuid = propBinding.rootNode.uuid, trackName = propBinding.path, bindingsByRoot = this._bindingsByRootAndName, bindingByName = bindingsByRoot[rootUuid], lastInactiveBinding = bindings[bindings.length - 1], cacheIndex = binding._cacheIndex;
            lastInactiveBinding._cacheIndex = cacheIndex, bindings[cacheIndex] = lastInactiveBinding, bindings.pop(), delete bindingByName[trackName], 0 === Object.keys(bindingByName).length && delete bindingsByRoot[rootUuid];
        },
        _lendBinding: function(binding) {
            var bindings = this._bindings, prevIndex = binding._cacheIndex, lastActiveIndex = this._nActiveBindings++, firstInactiveBinding = bindings[lastActiveIndex];
            binding._cacheIndex = lastActiveIndex, bindings[lastActiveIndex] = binding, firstInactiveBinding._cacheIndex = prevIndex, bindings[prevIndex] = firstInactiveBinding;
        },
        _takeBackBinding: function(binding) {
            var bindings = this._bindings, prevIndex = binding._cacheIndex, firstInactiveIndex = --this._nActiveBindings, lastActiveBinding = bindings[firstInactiveIndex];
            binding._cacheIndex = firstInactiveIndex, bindings[firstInactiveIndex] = binding, lastActiveBinding._cacheIndex = prevIndex, bindings[prevIndex] = lastActiveBinding;
        },
        _lendControlInterpolant: function() {
            var interpolants = this._controlInterpolants, lastActiveIndex = this._nActiveControlInterpolants++, interpolant = interpolants[lastActiveIndex];
            return void 0 === interpolant && ((interpolant = new LinearInterpolant(new Float32Array(2), new Float32Array(2), 1, this._controlInterpolantsResultBuffer)).__cacheIndex = lastActiveIndex, interpolants[lastActiveIndex] = interpolant), interpolant;
        },
        _takeBackControlInterpolant: function(interpolant) {
            var interpolants = this._controlInterpolants, prevIndex = interpolant.__cacheIndex, firstInactiveIndex = --this._nActiveControlInterpolants, lastActiveInterpolant = interpolants[firstInactiveIndex];
            interpolant.__cacheIndex = firstInactiveIndex, interpolants[firstInactiveIndex] = interpolant, lastActiveInterpolant.__cacheIndex = prevIndex, interpolants[prevIndex] = lastActiveInterpolant;
        },
        _controlInterpolantsResultBuffer: new Float32Array(1),
        clipAction: function(clip, optionalRoot, blendMode) {
            var root = optionalRoot || this._root, rootUuid = root.uuid, clipObject = 'string' == typeof clip ? AnimationClip.findByName(root, clip) : clip, clipUuid = null !== clipObject ? clipObject.uuid : clip, actionsForClip = this._actionsByClip[clipUuid], prototypeAction = null;
            if (void 0 === blendMode && (blendMode = null !== clipObject ? clipObject.blendMode : 2500), void 0 !== actionsForClip) {
                var existingAction = actionsForClip.actionByRoot[rootUuid];
                if (void 0 !== existingAction && existingAction.blendMode === blendMode) return existingAction;
                prototypeAction = actionsForClip.knownActions[0], null === clipObject && (clipObject = prototypeAction._clip);
            }
            if (null === clipObject) return null;
            var newAction = new AnimationAction(this, clipObject, optionalRoot, blendMode);
            return this._bindAction(newAction, prototypeAction), this._addInactiveAction(newAction, clipUuid, rootUuid), newAction;
        },
        existingAction: function(clip, optionalRoot) {
            var root = optionalRoot || this._root, rootUuid = root.uuid, clipObject = 'string' == typeof clip ? AnimationClip.findByName(root, clip) : clip, clipUuid = clipObject ? clipObject.uuid : clip, actionsForClip = this._actionsByClip[clipUuid];
            return void 0 !== actionsForClip && actionsForClip.actionByRoot[rootUuid] || null;
        },
        stopAllAction: function() {
            for(var actions = this._actions, nActions = this._nActiveActions, i = nActions - 1; i >= 0; --i)actions[i].stop();
            return this;
        },
        update: function(deltaTime) {
            deltaTime *= this.timeScale;
            for(var actions = this._actions, nActions = this._nActiveActions, time = this.time += deltaTime, timeDirection = Math.sign(deltaTime), accuIndex = this._accuIndex ^= 1, i = 0; i !== nActions; ++i)actions[i]._update(time, deltaTime, timeDirection, accuIndex);
            for(var bindings = this._bindings, nBindings = this._nActiveBindings, _i = 0; _i !== nBindings; ++_i)bindings[_i].apply(accuIndex);
            return this;
        },
        setTime: function(timeInSeconds) {
            this.time = 0;
            for(var i = 0; i < this._actions.length; i++)this._actions[i].time = 0;
            return this.update(timeInSeconds);
        },
        getRoot: function() {
            return this._root;
        },
        uncacheClip: function(clip) {
            var actions = this._actions, clipUuid = clip.uuid, actionsByClip = this._actionsByClip, actionsForClip = actionsByClip[clipUuid];
            if (void 0 !== actionsForClip) {
                for(var actionsToRemove = actionsForClip.knownActions, i = 0, n = actionsToRemove.length; i !== n; ++i){
                    var action = actionsToRemove[i];
                    this._deactivateAction(action);
                    var cacheIndex = action._cacheIndex, lastInactiveAction = actions[actions.length - 1];
                    action._cacheIndex = null, action._byClipCacheIndex = null, lastInactiveAction._cacheIndex = cacheIndex, actions[cacheIndex] = lastInactiveAction, actions.pop(), this._removeInactiveBindingsForAction(action);
                }
                delete actionsByClip[clipUuid];
            }
        },
        uncacheRoot: function(root) {
            var rootUuid = root.uuid, actionsByClip = this._actionsByClip;
            for(var clipUuid in actionsByClip){
                var action = actionsByClip[clipUuid].actionByRoot[rootUuid];
                void 0 !== action && (this._deactivateAction(action), this._removeInactiveAction(action));
            }
            var bindingByName = this._bindingsByRootAndName[rootUuid];
            if (void 0 !== bindingByName) for(var trackName in bindingByName){
                var binding = bindingByName[trackName];
                binding.restoreOriginalState(), this._removeInactiveBinding(binding);
            }
        },
        uncacheAction: function(clip, optionalRoot) {
            var action = this.existingAction(clip, optionalRoot);
            null !== action && (this._deactivateAction(action), this._removeInactiveAction(action));
        }
    });
    var Uniform = function() {
        function Uniform(value) {
            'string' == typeof value && (console.warn('THREE.Uniform: Type parameter is no longer needed.'), value = arguments[1]), this.value = value;
        }
        return Uniform.prototype.clone = function() {
            return new Uniform(void 0 === this.value.clone ? this.value : this.value.clone());
        }, Uniform;
    }();
    function InstancedInterleavedBuffer(array, stride, meshPerAttribute) {
        InterleavedBuffer.call(this, array, stride), this.meshPerAttribute = meshPerAttribute || 1;
    }
    function GLBufferAttribute(buffer, type, itemSize, elementSize, count) {
        this.buffer = buffer, this.type = type, this.itemSize = itemSize, this.elementSize = elementSize, this.count = count, this.version = 0;
    }
    function Raycaster(origin, direction, near, far) {
        this.ray = new Ray(origin, direction), this.near = near || 0, this.far = far || 1 / 0, this.camera = null, this.layers = new Layers(), this.params = {
            Mesh: {},
            Line: {
                threshold: 1
            },
            LOD: {},
            Points: {
                threshold: 1
            },
            Sprite: {}
        }, Object.defineProperties(this.params, {
            PointCloud: {
                get: function() {
                    return console.warn('THREE.Raycaster: params.PointCloud has been renamed to params.Points.'), this.Points;
                }
            }
        });
    }
    function ascSort(a, b) {
        return a.distance - b.distance;
    }
    function _intersectObject(object, raycaster, intersects, recursive) {
        if (object.layers.test(raycaster.layers) && object.raycast(raycaster, intersects), !0 === recursive) for(var children = object.children, i = 0, l = children.length; i < l; i++)_intersectObject(children[i], raycaster, intersects, !0);
    }
    InstancedInterleavedBuffer.prototype = Object.assign(Object.create(InterleavedBuffer.prototype), {
        constructor: InstancedInterleavedBuffer,
        isInstancedInterleavedBuffer: !0,
        copy: function(source) {
            return InterleavedBuffer.prototype.copy.call(this, source), this.meshPerAttribute = source.meshPerAttribute, this;
        },
        clone: function(data) {
            var ib = InterleavedBuffer.prototype.clone.call(this, data);
            return ib.meshPerAttribute = this.meshPerAttribute, ib;
        },
        toJSON: function(data) {
            var json = InterleavedBuffer.prototype.toJSON.call(this, data);
            return json.isInstancedInterleavedBuffer = !0, json.meshPerAttribute = this.meshPerAttribute, json;
        }
    }), Object.defineProperty(GLBufferAttribute.prototype, 'needsUpdate', {
        set: function(value) {
            !0 === value && this.version++;
        }
    }), Object.assign(GLBufferAttribute.prototype, {
        isGLBufferAttribute: !0,
        setBuffer: function(buffer) {
            return this.buffer = buffer, this;
        },
        setType: function(type, elementSize) {
            return this.type = type, this.elementSize = elementSize, this;
        },
        setItemSize: function(itemSize) {
            return this.itemSize = itemSize, this;
        },
        setCount: function(count) {
            return this.count = count, this;
        }
    }), Object.assign(Raycaster.prototype, {
        set: function(origin, direction) {
            this.ray.set(origin, direction);
        },
        setFromCamera: function(coords, camera) {
            camera && camera.isPerspectiveCamera ? (this.ray.origin.setFromMatrixPosition(camera.matrixWorld), this.ray.direction.set(coords.x, coords.y, 0.5).unproject(camera).sub(this.ray.origin).normalize(), this.camera = camera) : camera && camera.isOrthographicCamera ? (this.ray.origin.set(coords.x, coords.y, (camera.near + camera.far) / (camera.near - camera.far)).unproject(camera), this.ray.direction.set(0, 0, -1).transformDirection(camera.matrixWorld), this.camera = camera) : console.error('THREE.Raycaster: Unsupported camera type: ' + camera.type);
        },
        intersectObject: function(object, recursive, optionalTarget) {
            var intersects = optionalTarget || [];
            return _intersectObject(object, this, intersects, recursive), intersects.sort(ascSort), intersects;
        },
        intersectObjects: function(objects, recursive, optionalTarget) {
            var intersects = optionalTarget || [];
            if (!1 === Array.isArray(objects)) return console.warn('THREE.Raycaster.intersectObjects: objects is not an Array.'), intersects;
            for(var i = 0, l = objects.length; i < l; i++)_intersectObject(objects[i], this, intersects, recursive);
            return intersects.sort(ascSort), intersects;
        }
    });
    var Spherical = function() {
        function Spherical(radius, phi, theta) {
            return void 0 === radius && (radius = 1), void 0 === phi && (phi = 0), void 0 === theta && (theta = 0), this.radius = radius, this.phi = phi, this.theta = theta, this;
        }
        var _proto = Spherical.prototype;
        return _proto.set = function(radius, phi, theta) {
            return this.radius = radius, this.phi = phi, this.theta = theta, this;
        }, _proto.clone = function() {
            return new this.constructor().copy(this);
        }, _proto.copy = function(other) {
            return this.radius = other.radius, this.phi = other.phi, this.theta = other.theta, this;
        }, _proto.makeSafe = function() {
            return this.phi = Math.max(0.000001, Math.min(Math.PI - 0.000001, this.phi)), this;
        }, _proto.setFromVector3 = function(v) {
            return this.setFromCartesianCoords(v.x, v.y, v.z);
        }, _proto.setFromCartesianCoords = function(x, y, z) {
            return this.radius = Math.sqrt(x * x + y * y + z * z), 0 === this.radius ? (this.theta = 0, this.phi = 0) : (this.theta = Math.atan2(x, z), this.phi = Math.acos(MathUtils.clamp(y / this.radius, -1, 1))), this;
        }, Spherical;
    }(), Cylindrical = function() {
        function Cylindrical(radius, theta, y) {
            return this.radius = void 0 !== radius ? radius : 1.0, this.theta = void 0 !== theta ? theta : 0, this.y = void 0 !== y ? y : 0, this;
        }
        var _proto = Cylindrical.prototype;
        return _proto.set = function(radius, theta, y) {
            return this.radius = radius, this.theta = theta, this.y = y, this;
        }, _proto.clone = function() {
            return new this.constructor().copy(this);
        }, _proto.copy = function(other) {
            return this.radius = other.radius, this.theta = other.theta, this.y = other.y, this;
        }, _proto.setFromVector3 = function(v) {
            return this.setFromCartesianCoords(v.x, v.y, v.z);
        }, _proto.setFromCartesianCoords = function(x, y, z) {
            return this.radius = Math.sqrt(x * x + z * z), this.theta = Math.atan2(x, z), this.y = y, this;
        }, Cylindrical;
    }(), _vector$8 = new Vector2(), Box2 = function() {
        function Box2(min, max) {
            Object.defineProperty(this, 'isBox2', {
                value: !0
            }), this.min = void 0 !== min ? min : new Vector2(Infinity, Infinity), this.max = void 0 !== max ? max : new Vector2(-1 / 0, -1 / 0);
        }
        var _proto = Box2.prototype;
        return _proto.set = function(min, max) {
            return this.min.copy(min), this.max.copy(max), this;
        }, _proto.setFromPoints = function(points) {
            this.makeEmpty();
            for(var i = 0, il = points.length; i < il; i++)this.expandByPoint(points[i]);
            return this;
        }, _proto.setFromCenterAndSize = function(center, size) {
            var halfSize = _vector$8.copy(size).multiplyScalar(0.5);
            return this.min.copy(center).sub(halfSize), this.max.copy(center).add(halfSize), this;
        }, _proto.clone = function() {
            return new this.constructor().copy(this);
        }, _proto.copy = function(box) {
            return this.min.copy(box.min), this.max.copy(box.max), this;
        }, _proto.makeEmpty = function() {
            return this.min.x = this.min.y = Infinity, this.max.x = this.max.y = -1 / 0, this;
        }, _proto.isEmpty = function() {
            return this.max.x < this.min.x || this.max.y < this.min.y;
        }, _proto.getCenter = function(target) {
            return void 0 === target && (console.warn('THREE.Box2: .getCenter() target is now required'), target = new Vector2()), this.isEmpty() ? target.set(0, 0) : target.addVectors(this.min, this.max).multiplyScalar(0.5);
        }, _proto.getSize = function(target) {
            return void 0 === target && (console.warn('THREE.Box2: .getSize() target is now required'), target = new Vector2()), this.isEmpty() ? target.set(0, 0) : target.subVectors(this.max, this.min);
        }, _proto.expandByPoint = function(point) {
            return this.min.min(point), this.max.max(point), this;
        }, _proto.expandByVector = function(vector) {
            return this.min.sub(vector), this.max.add(vector), this;
        }, _proto.expandByScalar = function(scalar) {
            return this.min.addScalar(-scalar), this.max.addScalar(scalar), this;
        }, _proto.containsPoint = function(point) {
            return !(point.x < this.min.x) && !(point.x > this.max.x) && !(point.y < this.min.y) && !(point.y > this.max.y);
        }, _proto.containsBox = function(box) {
            return this.min.x <= box.min.x && box.max.x <= this.max.x && this.min.y <= box.min.y && box.max.y <= this.max.y;
        }, _proto.getParameter = function(point, target) {
            return void 0 === target && (console.warn('THREE.Box2: .getParameter() target is now required'), target = new Vector2()), target.set((point.x - this.min.x) / (this.max.x - this.min.x), (point.y - this.min.y) / (this.max.y - this.min.y));
        }, _proto.intersectsBox = function(box) {
            return !(box.max.x < this.min.x) && !(box.min.x > this.max.x) && !(box.max.y < this.min.y) && !(box.min.y > this.max.y);
        }, _proto.clampPoint = function(point, target) {
            return void 0 === target && (console.warn('THREE.Box2: .clampPoint() target is now required'), target = new Vector2()), target.copy(point).clamp(this.min, this.max);
        }, _proto.distanceToPoint = function(point) {
            return _vector$8.copy(point).clamp(this.min, this.max).sub(point).length();
        }, _proto.intersect = function(box) {
            return this.min.max(box.min), this.max.min(box.max), this;
        }, _proto.union = function(box) {
            return this.min.min(box.min), this.max.max(box.max), this;
        }, _proto.translate = function(offset) {
            return this.min.add(offset), this.max.add(offset), this;
        }, _proto.equals = function(box) {
            return box.min.equals(this.min) && box.max.equals(this.max);
        }, Box2;
    }(), _startP = new Vector3(), _startEnd = new Vector3(), Line3 = function() {
        function Line3(start, end) {
            this.start = void 0 !== start ? start : new Vector3(), this.end = void 0 !== end ? end : new Vector3();
        }
        var _proto = Line3.prototype;
        return _proto.set = function(start, end) {
            return this.start.copy(start), this.end.copy(end), this;
        }, _proto.clone = function() {
            return new this.constructor().copy(this);
        }, _proto.copy = function(line) {
            return this.start.copy(line.start), this.end.copy(line.end), this;
        }, _proto.getCenter = function(target) {
            return void 0 === target && (console.warn('THREE.Line3: .getCenter() target is now required'), target = new Vector3()), target.addVectors(this.start, this.end).multiplyScalar(0.5);
        }, _proto.delta = function(target) {
            return void 0 === target && (console.warn('THREE.Line3: .delta() target is now required'), target = new Vector3()), target.subVectors(this.end, this.start);
        }, _proto.distanceSq = function() {
            return this.start.distanceToSquared(this.end);
        }, _proto.distance = function() {
            return this.start.distanceTo(this.end);
        }, _proto.at = function(t, target) {
            return void 0 === target && (console.warn('THREE.Line3: .at() target is now required'), target = new Vector3()), this.delta(target).multiplyScalar(t).add(this.start);
        }, _proto.closestPointToPointParameter = function(point, clampToLine) {
            _startP.subVectors(point, this.start), _startEnd.subVectors(this.end, this.start);
            var startEnd2 = _startEnd.dot(_startEnd), t = _startEnd.dot(_startP) / startEnd2;
            return clampToLine && (t = MathUtils.clamp(t, 0, 1)), t;
        }, _proto.closestPointToPoint = function(point, clampToLine, target) {
            var t = this.closestPointToPointParameter(point, clampToLine);
            return void 0 === target && (console.warn('THREE.Line3: .closestPointToPoint() target is now required'), target = new Vector3()), this.delta(target).multiplyScalar(t).add(this.start);
        }, _proto.applyMatrix4 = function(matrix) {
            return this.start.applyMatrix4(matrix), this.end.applyMatrix4(matrix), this;
        }, _proto.equals = function(line) {
            return line.start.equals(this.start) && line.end.equals(this.end);
        }, Line3;
    }();
    function ImmediateRenderObject(material) {
        Object3D.call(this), this.material = material, this.render = function() {}, this.hasPositions = !1, this.hasNormals = !1, this.hasColors = !1, this.hasUvs = !1, this.positionArray = null, this.normalArray = null, this.colorArray = null, this.uvArray = null, this.count = 0;
    }
    ImmediateRenderObject.prototype = Object.create(Object3D.prototype), ImmediateRenderObject.prototype.constructor = ImmediateRenderObject, ImmediateRenderObject.prototype.isImmediateRenderObject = !0;
    var _vector$9 = new Vector3(), SpotLightHelper = function(_Object3D) {
        function SpotLightHelper(light, color) {
            (_this = _Object3D.call(this) || this).light = light, _this.light.updateMatrixWorld(), _this.matrix = light.matrixWorld, _this.matrixAutoUpdate = !1, _this.color = color;
            for(var _this, geometry = new BufferGeometry(), positions = [
                0,
                0,
                0,
                0,
                0,
                1,
                0,
                0,
                0,
                1,
                0,
                1,
                0,
                0,
                0,
                -1,
                0,
                1,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                -1,
                1
            ], i = 0, j = 1; i < 32; i++, j++){
                var p1 = i / 32 * Math.PI * 2, p2 = j / 32 * Math.PI * 2;
                positions.push(Math.cos(p1), Math.sin(p1), 1, Math.cos(p2), Math.sin(p2), 1);
            }
            geometry.setAttribute('position', new Float32BufferAttribute(positions, 3));
            var material = new LineBasicMaterial({
                fog: !1,
                toneMapped: !1
            });
            return _this.cone = new LineSegments(geometry, material), _this.add(_this.cone), _this.update(), _this;
        }
        _inheritsLoose(SpotLightHelper, _Object3D);
        var _proto = SpotLightHelper.prototype;
        return _proto.dispose = function() {
            this.cone.geometry.dispose(), this.cone.material.dispose();
        }, _proto.update = function() {
            this.light.updateMatrixWorld();
            var coneLength = this.light.distance ? this.light.distance : 1000, coneWidth = coneLength * Math.tan(this.light.angle);
            this.cone.scale.set(coneWidth, coneWidth, coneLength), _vector$9.setFromMatrixPosition(this.light.target.matrixWorld), this.cone.lookAt(_vector$9), void 0 !== this.color ? this.cone.material.color.set(this.color) : this.cone.material.color.copy(this.light.color);
        }, SpotLightHelper;
    }(Object3D), _vector$a = new Vector3(), _boneMatrix = new Matrix4(), _matrixWorldInv = new Matrix4(), SkeletonHelper = function(_LineSegments) {
        function SkeletonHelper(object) {
            for(var _this, bones = function getBoneList(object) {
                var boneList = [];
                object && object.isBone && boneList.push(object);
                for(var i = 0; i < object.children.length; i++)boneList.push.apply(boneList, getBoneList(object.children[i]));
                return boneList;
            }(object), geometry = new BufferGeometry(), vertices = [], colors = [], color1 = new Color(0, 0, 1), color2 = new Color(0, 1, 0), i = 0; i < bones.length; i++){
                var bone = bones[i];
                bone.parent && bone.parent.isBone && (vertices.push(0, 0, 0), vertices.push(0, 0, 0), colors.push(color1.r, color1.g, color1.b), colors.push(color2.r, color2.g, color2.b));
            }
            geometry.setAttribute('position', new Float32BufferAttribute(vertices, 3)), geometry.setAttribute('color', new Float32BufferAttribute(colors, 3));
            var material = new LineBasicMaterial({
                vertexColors: !0,
                depthTest: !1,
                depthWrite: !1,
                toneMapped: !1,
                transparent: !0
            });
            return (_this = _LineSegments.call(this, geometry, material) || this).type = 'SkeletonHelper', _this.isSkeletonHelper = !0, _this.root = object, _this.bones = bones, _this.matrix = object.matrixWorld, _this.matrixAutoUpdate = !1, _this;
        }
        return _inheritsLoose(SkeletonHelper, _LineSegments), SkeletonHelper.prototype.updateMatrixWorld = function(force) {
            var bones = this.bones, geometry = this.geometry, position = geometry.getAttribute('position');
            _matrixWorldInv.copy(this.root.matrixWorld).invert();
            for(var i = 0, j = 0; i < bones.length; i++){
                var bone = bones[i];
                bone.parent && bone.parent.isBone && (_boneMatrix.multiplyMatrices(_matrixWorldInv, bone.matrixWorld), _vector$a.setFromMatrixPosition(_boneMatrix), position.setXYZ(j, _vector$a.x, _vector$a.y, _vector$a.z), _boneMatrix.multiplyMatrices(_matrixWorldInv, bone.parent.matrixWorld), _vector$a.setFromMatrixPosition(_boneMatrix), position.setXYZ(j + 1, _vector$a.x, _vector$a.y, _vector$a.z), j += 2);
            }
            geometry.getAttribute('position').needsUpdate = !0, _LineSegments.prototype.updateMatrixWorld.call(this, force);
        }, SkeletonHelper;
    }(LineSegments), PointLightHelper = function(_Mesh) {
        function PointLightHelper(light, sphereSize, color) {
            var _this, geometry = new SphereBufferGeometry(sphereSize, 4, 2), material = new MeshBasicMaterial({
                wireframe: !0,
                fog: !1,
                toneMapped: !1
            });
            return (_this = _Mesh.call(this, geometry, material) || this).light = light, _this.light.updateMatrixWorld(), _this.color = color, _this.type = 'PointLightHelper', _this.matrix = _this.light.matrixWorld, _this.matrixAutoUpdate = !1, _this.update(), _this;
        }
        _inheritsLoose(PointLightHelper, _Mesh);
        var _proto = PointLightHelper.prototype;
        return _proto.dispose = function() {
            this.geometry.dispose(), this.material.dispose();
        }, _proto.update = function() {
            void 0 !== this.color ? this.material.color.set(this.color) : this.material.color.copy(this.light.color);
        }, PointLightHelper;
    }(Mesh), _vector$b = new Vector3(), _color1 = new Color(), _color2 = new Color(), HemisphereLightHelper = function(_Object3D) {
        function HemisphereLightHelper(light, size, color) {
            (_this = _Object3D.call(this) || this).light = light, _this.light.updateMatrixWorld(), _this.matrix = light.matrixWorld, _this.matrixAutoUpdate = !1, _this.color = color;
            var _this, geometry = new OctahedronBufferGeometry(size);
            geometry.rotateY(0.5 * Math.PI), _this.material = new MeshBasicMaterial({
                wireframe: !0,
                fog: !1,
                toneMapped: !1
            }), void 0 === _this.color && (_this.material.vertexColors = !0);
            var position = geometry.getAttribute('position'), colors = new Float32Array(3 * position.count);
            return geometry.setAttribute('color', new BufferAttribute(colors, 3)), _this.add(new Mesh(geometry, _this.material)), _this.update(), _this;
        }
        _inheritsLoose(HemisphereLightHelper, _Object3D);
        var _proto = HemisphereLightHelper.prototype;
        return _proto.dispose = function() {
            this.children[0].geometry.dispose(), this.children[0].material.dispose();
        }, _proto.update = function() {
            var mesh = this.children[0];
            if (void 0 !== this.color) this.material.color.set(this.color);
            else {
                var colors = mesh.geometry.getAttribute('color');
                _color1.copy(this.light.color), _color2.copy(this.light.groundColor);
                for(var i = 0, l = colors.count; i < l; i++){
                    var color = i < l / 2 ? _color1 : _color2;
                    colors.setXYZ(i, color.r, color.g, color.b);
                }
                colors.needsUpdate = !0;
            }
            mesh.lookAt(_vector$b.setFromMatrixPosition(this.light.matrixWorld).negate());
        }, HemisphereLightHelper;
    }(Object3D), GridHelper = function(_LineSegments) {
        function GridHelper(size, divisions, color1, color2) {
            void 0 === size && (size = 10), void 0 === divisions && (divisions = 10), void 0 === color1 && (color1 = 0x444444), void 0 === color2 && (color2 = 0x888888), color1 = new Color(color1), color2 = new Color(color2);
            for(var _this, center = divisions / 2, step = size / divisions, halfSize = size / 2, vertices = [], colors = [], i = 0, j = 0, k = -halfSize; i <= divisions; i++, k += step){
                vertices.push(-halfSize, 0, k, halfSize, 0, k), vertices.push(k, 0, -halfSize, k, 0, halfSize);
                var color = i === center ? color1 : color2;
                color.toArray(colors, j), j += 3, color.toArray(colors, j), j += 3, color.toArray(colors, j), j += 3, color.toArray(colors, j), j += 3;
            }
            var geometry = new BufferGeometry();
            geometry.setAttribute('position', new Float32BufferAttribute(vertices, 3)), geometry.setAttribute('color', new Float32BufferAttribute(colors, 3));
            var material = new LineBasicMaterial({
                vertexColors: !0,
                toneMapped: !1
            });
            return (_this = _LineSegments.call(this, geometry, material) || this).type = 'GridHelper', _this;
        }
        return _inheritsLoose(GridHelper, _LineSegments), GridHelper;
    }(LineSegments), PolarGridHelper = function(_LineSegments) {
        function PolarGridHelper(radius, radials, circles, divisions, color1, color2) {
            void 0 === radius && (radius = 10), void 0 === radials && (radials = 16), void 0 === circles && (circles = 8), void 0 === divisions && (divisions = 64), void 0 === color1 && (color1 = 0x444444), void 0 === color2 && (color2 = 0x888888), color1 = new Color(color1), color2 = new Color(color2);
            for(var _this, vertices = [], colors = [], i = 0; i <= radials; i++){
                var v = i / radials * (2 * Math.PI), x = Math.sin(v) * radius, z = Math.cos(v) * radius;
                vertices.push(0, 0, 0), vertices.push(x, 0, z);
                var color = 1 & i ? color1 : color2;
                colors.push(color.r, color.g, color.b), colors.push(color.r, color.g, color.b);
            }
            for(var _i = 0; _i <= circles; _i++)for(var _color = 1 & _i ? color1 : color2, r = radius - radius / circles * _i, j = 0; j < divisions; j++){
                var _v = j / divisions * (2 * Math.PI), _x = Math.sin(_v) * r, _z = Math.cos(_v) * r;
                vertices.push(_x, 0, _z), colors.push(_color.r, _color.g, _color.b), _x = Math.sin(_v = (j + 1) / divisions * (2 * Math.PI)) * r, _z = Math.cos(_v) * r, vertices.push(_x, 0, _z), colors.push(_color.r, _color.g, _color.b);
            }
            var geometry = new BufferGeometry();
            geometry.setAttribute('position', new Float32BufferAttribute(vertices, 3)), geometry.setAttribute('color', new Float32BufferAttribute(colors, 3));
            var material = new LineBasicMaterial({
                vertexColors: !0,
                toneMapped: !1
            });
            return (_this = _LineSegments.call(this, geometry, material) || this).type = 'PolarGridHelper', _this;
        }
        return _inheritsLoose(PolarGridHelper, _LineSegments), PolarGridHelper;
    }(LineSegments), _v1$6 = new Vector3(), _v2$3 = new Vector3(), _v3$1 = new Vector3(), DirectionalLightHelper = function(_Object3D) {
        function DirectionalLightHelper(light, size, color) {
            (_this = _Object3D.call(this) || this).light = light, _this.light.updateMatrixWorld(), _this.matrix = light.matrixWorld, _this.matrixAutoUpdate = !1, _this.color = color, void 0 === size && (size = 1);
            var _this, geometry = new BufferGeometry();
            geometry.setAttribute('position', new Float32BufferAttribute([
                -size,
                size,
                0,
                size,
                size,
                0,
                size,
                -size,
                0,
                -size,
                -size,
                0,
                -size,
                size,
                0
            ], 3));
            var material = new LineBasicMaterial({
                fog: !1,
                toneMapped: !1
            });
            return _this.lightPlane = new Line(geometry, material), _this.add(_this.lightPlane), (geometry = new BufferGeometry()).setAttribute('position', new Float32BufferAttribute([
                0,
                0,
                0,
                0,
                0,
                1
            ], 3)), _this.targetLine = new Line(geometry, material), _this.add(_this.targetLine), _this.update(), _this;
        }
        _inheritsLoose(DirectionalLightHelper, _Object3D);
        var _proto = DirectionalLightHelper.prototype;
        return _proto.dispose = function() {
            this.lightPlane.geometry.dispose(), this.lightPlane.material.dispose(), this.targetLine.geometry.dispose(), this.targetLine.material.dispose();
        }, _proto.update = function() {
            _v1$6.setFromMatrixPosition(this.light.matrixWorld), _v2$3.setFromMatrixPosition(this.light.target.matrixWorld), _v3$1.subVectors(_v2$3, _v1$6), this.lightPlane.lookAt(_v2$3), void 0 !== this.color ? (this.lightPlane.material.color.set(this.color), this.targetLine.material.color.set(this.color)) : (this.lightPlane.material.color.copy(this.light.color), this.targetLine.material.color.copy(this.light.color)), this.targetLine.lookAt(_v2$3), this.targetLine.scale.z = _v3$1.length();
        }, DirectionalLightHelper;
    }(Object3D), _vector$c = new Vector3(), _camera = new Camera(), CameraHelper = function(_LineSegments) {
        function CameraHelper(camera) {
            var _this, geometry = new BufferGeometry(), material = new LineBasicMaterial({
                color: 0xffffff,
                vertexColors: !0,
                toneMapped: !1
            }), vertices = [], colors = [], pointMap = {}, colorFrustum = new Color(0xffaa00), colorCone = new Color(0xff0000), colorUp = new Color(0x00aaff), colorTarget = new Color(0xffffff), colorCross = new Color(0x333333);
            function addLine(a, b, color) {
                addPoint(a, color), addPoint(b, color);
            }
            function addPoint(id, color) {
                vertices.push(0, 0, 0), colors.push(color.r, color.g, color.b), void 0 === pointMap[id] && (pointMap[id] = []), pointMap[id].push(vertices.length / 3 - 1);
            }
            return addLine('n1', 'n2', colorFrustum), addLine('n2', 'n4', colorFrustum), addLine('n4', 'n3', colorFrustum), addLine('n3', 'n1', colorFrustum), addLine('f1', 'f2', colorFrustum), addLine('f2', 'f4', colorFrustum), addLine('f4', 'f3', colorFrustum), addLine('f3', 'f1', colorFrustum), addLine('n1', 'f1', colorFrustum), addLine('n2', 'f2', colorFrustum), addLine('n3', 'f3', colorFrustum), addLine('n4', 'f4', colorFrustum), addLine('p', 'n1', colorCone), addLine('p', 'n2', colorCone), addLine('p', 'n3', colorCone), addLine('p', 'n4', colorCone), addLine('u1', 'u2', colorUp), addLine('u2', 'u3', colorUp), addLine('u3', 'u1', colorUp), addLine('c', 't', colorTarget), addLine('p', 'c', colorCross), addLine('cn1', 'cn2', colorCross), addLine('cn3', 'cn4', colorCross), addLine('cf1', 'cf2', colorCross), addLine('cf3', 'cf4', colorCross), geometry.setAttribute('position', new Float32BufferAttribute(vertices, 3)), geometry.setAttribute('color', new Float32BufferAttribute(colors, 3)), (_this = _LineSegments.call(this, geometry, material) || this).type = 'CameraHelper', _this.camera = camera, _this.camera.updateProjectionMatrix && _this.camera.updateProjectionMatrix(), _this.matrix = camera.matrixWorld, _this.matrixAutoUpdate = !1, _this.pointMap = pointMap, _this.update(), _this;
        }
        return _inheritsLoose(CameraHelper, _LineSegments), CameraHelper.prototype.update = function() {
            var geometry = this.geometry, pointMap = this.pointMap;
            _camera.projectionMatrixInverse.copy(this.camera.projectionMatrixInverse), setPoint('c', pointMap, geometry, _camera, 0, 0, -1), setPoint('t', pointMap, geometry, _camera, 0, 0, 1), setPoint('n1', pointMap, geometry, _camera, -1, -1, -1), setPoint('n2', pointMap, geometry, _camera, 1, -1, -1), setPoint('n3', pointMap, geometry, _camera, -1, 1, -1), setPoint('n4', pointMap, geometry, _camera, 1, 1, -1), setPoint('f1', pointMap, geometry, _camera, -1, -1, 1), setPoint('f2', pointMap, geometry, _camera, 1, -1, 1), setPoint('f3', pointMap, geometry, _camera, -1, 1, 1), setPoint('f4', pointMap, geometry, _camera, 1, 1, 1), setPoint('u1', pointMap, geometry, _camera, 0.7, 1.1, -1), setPoint('u2', pointMap, geometry, _camera, -0.7, 1.1, -1), setPoint('u3', pointMap, geometry, _camera, 0, 2, -1), setPoint('cf1', pointMap, geometry, _camera, -1, 0, 1), setPoint('cf2', pointMap, geometry, _camera, 1, 0, 1), setPoint('cf3', pointMap, geometry, _camera, 0, -1, 1), setPoint('cf4', pointMap, geometry, _camera, 0, 1, 1), setPoint('cn1', pointMap, geometry, _camera, -1, 0, -1), setPoint('cn2', pointMap, geometry, _camera, 1, 0, -1), setPoint('cn3', pointMap, geometry, _camera, 0, -1, -1), setPoint('cn4', pointMap, geometry, _camera, 0, 1, -1), geometry.getAttribute('position').needsUpdate = !0;
        }, CameraHelper;
    }(LineSegments);
    function setPoint(point, pointMap, geometry, camera, x, y, z) {
        _vector$c.set(x, y, z).unproject(camera);
        var points = pointMap[point];
        if (void 0 !== points) for(var position = geometry.getAttribute('position'), i = 0, l = points.length; i < l; i++)position.setXYZ(points[i], _vector$c.x, _vector$c.y, _vector$c.z);
    }
    var _box$3 = new Box3(), BoxHelper = function(_LineSegments) {
        function BoxHelper(object, color) {
            void 0 === color && (color = 0xffff00);
            var _this, indices = new Uint16Array([
                0,
                1,
                1,
                2,
                2,
                3,
                3,
                0,
                4,
                5,
                5,
                6,
                6,
                7,
                7,
                4,
                0,
                4,
                1,
                5,
                2,
                6,
                3,
                7
            ]), positions = new Float32Array(24), geometry = new BufferGeometry();
            return geometry.setIndex(new BufferAttribute(indices, 1)), geometry.setAttribute('position', new BufferAttribute(positions, 3)), (_this = _LineSegments.call(this, geometry, new LineBasicMaterial({
                color: color,
                toneMapped: !1
            })) || this).object = object, _this.type = 'BoxHelper', _this.matrixAutoUpdate = !1, _this.update(), _this;
        }
        _inheritsLoose(BoxHelper, _LineSegments);
        var _proto = BoxHelper.prototype;
        return _proto.update = function(object) {
            if (void 0 !== object && console.warn('THREE.BoxHelper: .update() has no longer arguments.'), void 0 !== this.object && _box$3.setFromObject(this.object), !_box$3.isEmpty()) {
                var min = _box$3.min, max = _box$3.max, position = this.geometry.attributes.position, array = position.array;
                array[0] = max.x, array[1] = max.y, array[2] = max.z, array[3] = min.x, array[4] = max.y, array[5] = max.z, array[6] = min.x, array[7] = min.y, array[8] = max.z, array[9] = max.x, array[10] = min.y, array[11] = max.z, array[12] = max.x, array[13] = max.y, array[14] = min.z, array[15] = min.x, array[16] = max.y, array[17] = min.z, array[18] = min.x, array[19] = min.y, array[20] = min.z, array[21] = max.x, array[22] = min.y, array[23] = min.z, position.needsUpdate = !0, this.geometry.computeBoundingSphere();
            }
        }, _proto.setFromObject = function(object) {
            return this.object = object, this.update(), this;
        }, _proto.copy = function(source) {
            return LineSegments.prototype.copy.call(this, source), this.object = source.object, this;
        }, BoxHelper;
    }(LineSegments), Box3Helper = function(_LineSegments) {
        function Box3Helper(box, color) {
            void 0 === color && (color = 0xffff00);
            var _this, indices = new Uint16Array([
                0,
                1,
                1,
                2,
                2,
                3,
                3,
                0,
                4,
                5,
                5,
                6,
                6,
                7,
                7,
                4,
                0,
                4,
                1,
                5,
                2,
                6,
                3,
                7
            ]), geometry = new BufferGeometry();
            return geometry.setIndex(new BufferAttribute(indices, 1)), geometry.setAttribute('position', new Float32BufferAttribute([
                1,
                1,
                1,
                -1,
                1,
                1,
                -1,
                -1,
                1,
                1,
                -1,
                1,
                1,
                1,
                -1,
                -1,
                1,
                -1,
                -1,
                -1,
                -1,
                1,
                -1,
                -1
            ], 3)), (_this = _LineSegments.call(this, geometry, new LineBasicMaterial({
                color: color,
                toneMapped: !1
            })) || this).box = box, _this.type = 'Box3Helper', _this.geometry.computeBoundingSphere(), _this;
        }
        return _inheritsLoose(Box3Helper, _LineSegments), Box3Helper.prototype.updateMatrixWorld = function(force) {
            var box = this.box;
            box.isEmpty() || (box.getCenter(this.position), box.getSize(this.scale), this.scale.multiplyScalar(0.5), _LineSegments.prototype.updateMatrixWorld.call(this, force));
        }, Box3Helper;
    }(LineSegments), PlaneHelper = function(_Line) {
        function PlaneHelper(plane, size, hex) {
            void 0 === size && (size = 1), void 0 === hex && (hex = 0xffff00);
            var _this, color = hex, geometry = new BufferGeometry();
            geometry.setAttribute('position', new Float32BufferAttribute([
                1,
                -1,
                1,
                -1,
                1,
                1,
                -1,
                -1,
                1,
                1,
                1,
                1,
                -1,
                1,
                1,
                -1,
                -1,
                1,
                1,
                -1,
                1,
                1,
                1,
                1,
                0,
                0,
                1,
                0,
                0,
                0
            ], 3)), geometry.computeBoundingSphere(), (_this = _Line.call(this, geometry, new LineBasicMaterial({
                color: color,
                toneMapped: !1
            })) || this).type = 'PlaneHelper', _this.plane = plane, _this.size = size;
            var geometry2 = new BufferGeometry();
            return geometry2.setAttribute('position', new Float32BufferAttribute([
                1,
                1,
                1,
                -1,
                1,
                1,
                -1,
                -1,
                1,
                1,
                1,
                1,
                -1,
                -1,
                1,
                1,
                -1,
                1
            ], 3)), geometry2.computeBoundingSphere(), _this.add(new Mesh(geometry2, new MeshBasicMaterial({
                color: color,
                opacity: 0.2,
                transparent: !0,
                depthWrite: !1,
                toneMapped: !1
            }))), _this;
        }
        return _inheritsLoose(PlaneHelper, _Line), PlaneHelper.prototype.updateMatrixWorld = function(force) {
            var scale = -this.plane.constant;
            1e-8 > Math.abs(scale) && (scale = 1e-8), this.scale.set(0.5 * this.size, 0.5 * this.size, scale), this.children[0].material.side = scale < 0 ? 1 : 0, this.lookAt(this.plane.normal), _Line.prototype.updateMatrixWorld.call(this, force);
        }, PlaneHelper;
    }(Line), _axis = new Vector3(), ArrowHelper = function(_Object3D) {
        function ArrowHelper(dir, origin, length, color, headLength, headWidth) {
            var _this;
            return (_this = _Object3D.call(this) || this).type = 'ArrowHelper', void 0 === dir && (dir = new Vector3(0, 0, 1)), void 0 === origin && (origin = new Vector3(0, 0, 0)), void 0 === length && (length = 1), void 0 === color && (color = 0xffff00), void 0 === headLength && (headLength = 0.2 * length), void 0 === headWidth && (headWidth = 0.2 * headLength), void 0 === _lineGeometry && ((_lineGeometry = new BufferGeometry()).setAttribute('position', new Float32BufferAttribute([
                0,
                0,
                0,
                0,
                1,
                0
            ], 3)), (_coneGeometry = new CylinderBufferGeometry(0, 0.5, 1, 5, 1)).translate(0, -0.5, 0)), _this.position.copy(origin), _this.line = new Line(_lineGeometry, new LineBasicMaterial({
                color: color,
                toneMapped: !1
            })), _this.line.matrixAutoUpdate = !1, _this.add(_this.line), _this.cone = new Mesh(_coneGeometry, new MeshBasicMaterial({
                color: color,
                toneMapped: !1
            })), _this.cone.matrixAutoUpdate = !1, _this.add(_this.cone), _this.setDirection(dir), _this.setLength(length, headLength, headWidth), _this;
        }
        _inheritsLoose(ArrowHelper, _Object3D);
        var _proto = ArrowHelper.prototype;
        return _proto.setDirection = function(dir) {
            if (dir.y > 0.99999) this.quaternion.set(0, 0, 0, 1);
            else if (dir.y < -0.99999) this.quaternion.set(1, 0, 0, 0);
            else {
                _axis.set(dir.z, 0, -dir.x).normalize();
                var radians = Math.acos(dir.y);
                this.quaternion.setFromAxisAngle(_axis, radians);
            }
        }, _proto.setLength = function(length, headLength, headWidth) {
            void 0 === headLength && (headLength = 0.2 * length), void 0 === headWidth && (headWidth = 0.2 * headLength), this.line.scale.set(1, Math.max(0.0001, length - headLength), 1), this.line.updateMatrix(), this.cone.scale.set(headWidth, headLength, headWidth), this.cone.position.y = length, this.cone.updateMatrix();
        }, _proto.setColor = function(color) {
            this.line.material.color.set(color), this.cone.material.color.set(color);
        }, _proto.copy = function(source) {
            return _Object3D.prototype.copy.call(this, source, !1), this.line.copy(source.line), this.cone.copy(source.cone), this;
        }, ArrowHelper;
    }(Object3D), AxesHelper = function(_LineSegments) {
        function AxesHelper(size) {
            void 0 === size && (size = 1);
            var _this, vertices = [
                0,
                0,
                0,
                size,
                0,
                0,
                0,
                0,
                0,
                0,
                size,
                0,
                0,
                0,
                0,
                0,
                0,
                size
            ], geometry = new BufferGeometry();
            geometry.setAttribute('position', new Float32BufferAttribute(vertices, 3)), geometry.setAttribute('color', new Float32BufferAttribute([
                1,
                0,
                0,
                1,
                0.6,
                0,
                0,
                1,
                0,
                0.6,
                1,
                0,
                0,
                0,
                1,
                0,
                0.6,
                1
            ], 3));
            var material = new LineBasicMaterial({
                vertexColors: !0,
                toneMapped: !1
            });
            return (_this = _LineSegments.call(this, geometry, material) || this).type = 'AxesHelper', _this;
        }
        return _inheritsLoose(AxesHelper, _LineSegments), AxesHelper;
    }(LineSegments), _floatView = new Float32Array(1), _int32View = new Int32Array(_floatView.buffer), EXTRA_LOD_SIGMA = [
        0.125,
        0.215,
        0.35,
        0.446,
        0.526,
        0.582
    ], TOTAL_LODS = 5 + EXTRA_LOD_SIGMA.length, ENCODINGS = ((_ENCODINGS = {})[3000] = 0, _ENCODINGS[3001] = 1, _ENCODINGS[3002] = 2, _ENCODINGS[3004] = 3, _ENCODINGS[3005] = 4, _ENCODINGS[3006] = 5, _ENCODINGS[3007] = 6, _ENCODINGS), _flatCamera = new OrthographicCamera(), _createPlanes2 = function() {
        for(var _lodPlanes = [], _sizeLods = [], _sigmas = [], lod = 8, i = 0; i < TOTAL_LODS; i++){
            var sizeLod = Math.pow(2, lod);
            _sizeLods.push(sizeLod);
            var sigma = 1.0 / sizeLod;
            i > 4 ? sigma = EXTRA_LOD_SIGMA[i - 8 + 4 - 1] : 0 == i && (sigma = 0), _sigmas.push(sigma);
            for(var texelSize = 1.0 / (sizeLod - 1), min = -texelSize / 2, max = 1 + texelSize / 2, uv1 = [
                min,
                min,
                max,
                min,
                max,
                max,
                min,
                min,
                max,
                max,
                min,
                max
            ], position = new Float32Array(108), uv = new Float32Array(72), faceIndex = new Float32Array(36), face = 0; face < 6; face++){
                var x = face % 3 * 2 / 3 - 1, y = face > 2 ? 0 : -1, coordinates = [
                    x,
                    y,
                    0,
                    x + 2 / 3,
                    y,
                    0,
                    x + 2 / 3,
                    y + 1,
                    0,
                    x,
                    y,
                    0,
                    x + 2 / 3,
                    y + 1,
                    0,
                    x,
                    y + 1,
                    0
                ];
                position.set(coordinates, 18 * face), uv.set(uv1, 12 * face);
                var fill = [
                    face,
                    face,
                    face,
                    face,
                    face,
                    face
                ];
                faceIndex.set(fill, 6 * face);
            }
            var planes = new BufferGeometry();
            planes.setAttribute('position', new BufferAttribute(position, 3)), planes.setAttribute('uv', new BufferAttribute(uv, 2)), planes.setAttribute('faceIndex', new BufferAttribute(faceIndex, 1)), _lodPlanes.push(planes), lod > 4 && lod--;
        }
        return {
            _lodPlanes: _lodPlanes,
            _sizeLods: _sizeLods,
            _sigmas: _sigmas
        };
    }(), _lodPlanes = _createPlanes2._lodPlanes, _sizeLods = _createPlanes2._sizeLods, _sigmas = _createPlanes2._sigmas, _clearColor = new Color(), _oldTarget = null, PHI = (1 + Math.sqrt(5)) / 2, INV_PHI = 1 / PHI, _axisDirections = [
        new Vector3(1, 1, 1),
        new Vector3(-1, 1, 1),
        new Vector3(1, 1, -1),
        new Vector3(-1, 1, -1),
        new Vector3(0, PHI, INV_PHI),
        new Vector3(0, PHI, -INV_PHI),
        new Vector3(INV_PHI, 0, PHI),
        new Vector3(-INV_PHI, 0, PHI),
        new Vector3(PHI, INV_PHI, 0),
        new Vector3(-PHI, INV_PHI, 0)
    ], PMREMGenerator = function() {
        function PMREMGenerator(renderer) {
            var weights, poleAxis;
            this._renderer = renderer, this._pingPongRenderTarget = null, this._blurMaterial = (weights = new Float32Array(20), poleAxis = new Vector3(0, 1, 0), new RawShaderMaterial({
                name: 'SphericalGaussianBlur',
                defines: {
                    n: 20
                },
                uniforms: {
                    envMap: {
                        value: null
                    },
                    samples: {
                        value: 1
                    },
                    weights: {
                        value: weights
                    },
                    latitudinal: {
                        value: !1
                    },
                    dTheta: {
                        value: 0
                    },
                    mipInt: {
                        value: 0
                    },
                    poleAxis: {
                        value: poleAxis
                    },
                    inputEncoding: {
                        value: ENCODINGS[3000]
                    },
                    outputEncoding: {
                        value: ENCODINGS[3000]
                    }
                },
                vertexShader: _getCommonVertexShader(),
                fragmentShader: "\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform sampler2D envMap;\n\t\t\tuniform int samples;\n\t\t\tuniform float weights[ n ];\n\t\t\tuniform bool latitudinal;\n\t\t\tuniform float dTheta;\n\t\t\tuniform float mipInt;\n\t\t\tuniform vec3 poleAxis;\n\n\t\t\t" + _getEncodings() + "\n\n\t\t\t#define ENVMAP_TYPE_CUBE_UV\n\t\t\t#include <cube_uv_reflection_fragment>\n\n\t\t\tvec3 getSample( float theta, vec3 axis ) {\n\n\t\t\t\tfloat cosTheta = cos( theta );\n\t\t\t\t// Rodrigues' axis-angle rotation\n\t\t\t\tvec3 sampleDirection = vOutputDirection * cosTheta\n\t\t\t\t\t+ cross( axis, vOutputDirection ) * sin( theta )\n\t\t\t\t\t+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );\n\n\t\t\t\treturn bilinearCubeUV( envMap, sampleDirection, mipInt );\n\n\t\t\t}\n\n\t\t\tvoid main() {\n\n\t\t\t\tvec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );\n\n\t\t\t\tif ( all( equal( axis, vec3( 0.0 ) ) ) ) {\n\n\t\t\t\t\taxis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );\n\n\t\t\t\t}\n\n\t\t\t\taxis = normalize( axis );\n\n\t\t\t\tgl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n\t\t\t\tgl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );\n\n\t\t\t\tfor ( int i = 1; i < n; i++ ) {\n\n\t\t\t\t\tif ( i >= samples ) {\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfloat theta = dTheta * float( i );\n\t\t\t\t\tgl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );\n\t\t\t\t\tgl_FragColor.rgb += weights[ i ] * getSample( theta, axis );\n\n\t\t\t\t}\n\n\t\t\t\tgl_FragColor = linearToOutputTexel( gl_FragColor );\n\n\t\t\t}\n\t\t",
                blending: 0,
                depthTest: !1,
                depthWrite: !1
            })), this._equirectShader = null, this._cubemapShader = null, this._compileMaterial(this._blurMaterial);
        }
        var _proto = PMREMGenerator.prototype;
        return _proto.fromScene = function(scene, sigma, near, far) {
            void 0 === sigma && (sigma = 0), void 0 === near && (near = 0.1), void 0 === far && (far = 100), _oldTarget = this._renderer.getRenderTarget();
            var cubeUVRenderTarget = this._allocateTargets();
            return this._sceneToCubeUV(scene, near, far, cubeUVRenderTarget), sigma > 0 && this._blur(cubeUVRenderTarget, 0, 0, sigma), this._applyPMREM(cubeUVRenderTarget), this._cleanup(cubeUVRenderTarget), cubeUVRenderTarget;
        }, _proto.fromEquirectangular = function(equirectangular) {
            return this._fromTexture(equirectangular);
        }, _proto.fromCubemap = function(cubemap) {
            return this._fromTexture(cubemap);
        }, _proto.compileCubemapShader = function() {
            null === this._cubemapShader && (this._cubemapShader = _getCubemapShader(), this._compileMaterial(this._cubemapShader));
        }, _proto.compileEquirectangularShader = function() {
            null === this._equirectShader && (this._equirectShader = _getEquirectShader(), this._compileMaterial(this._equirectShader));
        }, _proto.dispose = function() {
            this._blurMaterial.dispose(), null !== this._cubemapShader && this._cubemapShader.dispose(), null !== this._equirectShader && this._equirectShader.dispose();
            for(var i = 0; i < _lodPlanes.length; i++)_lodPlanes[i].dispose();
        }, _proto._cleanup = function(outputTarget) {
            this._pingPongRenderTarget.dispose(), this._renderer.setRenderTarget(_oldTarget), outputTarget.scissorTest = !1, _setViewport(outputTarget, 0, 0, outputTarget.width, outputTarget.height);
        }, _proto._fromTexture = function(texture) {
            _oldTarget = this._renderer.getRenderTarget();
            var cubeUVRenderTarget = this._allocateTargets(texture);
            return this._textureToCubeUV(texture, cubeUVRenderTarget), this._applyPMREM(cubeUVRenderTarget), this._cleanup(cubeUVRenderTarget), cubeUVRenderTarget;
        }, _proto._allocateTargets = function(texture) {
            var params = {
                magFilter: 1003,
                minFilter: 1003,
                generateMipmaps: !1,
                type: 1009,
                format: 1023,
                encoding: void 0 !== texture && 1009 === texture.type && (3000 === texture.encoding || 3001 === texture.encoding || 3007 === texture.encoding) ? texture.encoding : 3002,
                depthBuffer: !1
            }, cubeUVRenderTarget = _createRenderTarget(params);
            return cubeUVRenderTarget.depthBuffer = !texture, this._pingPongRenderTarget = _createRenderTarget(params), cubeUVRenderTarget;
        }, _proto._compileMaterial = function(material) {
            var tmpMesh = new Mesh(_lodPlanes[0], material);
            this._renderer.compile(tmpMesh, _flatCamera);
        }, _proto._sceneToCubeUV = function(scene, near, far, cubeUVRenderTarget) {
            var cubeCamera = new PerspectiveCamera(90, 1, near, far), upSign = [
                1,
                -1,
                1,
                1,
                1,
                1
            ], forwardSign = [
                1,
                1,
                1,
                -1,
                -1,
                -1
            ], renderer = this._renderer, outputEncoding = renderer.outputEncoding, toneMapping = renderer.toneMapping;
            renderer.getClearColor(_clearColor);
            var clearAlpha = renderer.getClearAlpha();
            renderer.toneMapping = 0, renderer.outputEncoding = 3000;
            var background = scene.background;
            if (background && background.isColor) {
                background.convertSRGBToLinear();
                var fExp = Math.min(Math.max(Math.ceil(Math.log2(Math.max(background.r, background.g, background.b))), -128), 127.0);
                background = background.multiplyScalar(Math.pow(2.0, -fExp)), renderer.setClearColor(background, (fExp + 128.0) / 255.0), scene.background = null;
            }
            for(var i = 0; i < 6; i++){
                var col = i % 3;
                0 == col ? (cubeCamera.up.set(0, upSign[i], 0), cubeCamera.lookAt(forwardSign[i], 0, 0)) : 1 == col ? (cubeCamera.up.set(0, 0, upSign[i]), cubeCamera.lookAt(0, forwardSign[i], 0)) : (cubeCamera.up.set(0, upSign[i], 0), cubeCamera.lookAt(0, 0, forwardSign[i])), _setViewport(cubeUVRenderTarget, 256 * col, i > 2 ? 256 : 0, 256, 256), renderer.setRenderTarget(cubeUVRenderTarget), renderer.render(scene, cubeCamera);
            }
            renderer.toneMapping = toneMapping, renderer.outputEncoding = outputEncoding, renderer.setClearColor(_clearColor, clearAlpha);
        }, _proto._textureToCubeUV = function(texture, cubeUVRenderTarget) {
            var renderer = this._renderer;
            texture.isCubeTexture ? null == this._cubemapShader && (this._cubemapShader = _getCubemapShader()) : null == this._equirectShader && (this._equirectShader = _getEquirectShader());
            var material = texture.isCubeTexture ? this._cubemapShader : this._equirectShader, mesh = new Mesh(_lodPlanes[0], material), uniforms = material.uniforms;
            uniforms.envMap.value = texture, texture.isCubeTexture || uniforms.texelSize.value.set(1.0 / texture.image.width, 1.0 / texture.image.height), uniforms.inputEncoding.value = ENCODINGS[texture.encoding], uniforms.outputEncoding.value = ENCODINGS[cubeUVRenderTarget.texture.encoding], _setViewport(cubeUVRenderTarget, 0, 0, 768, 512), renderer.setRenderTarget(cubeUVRenderTarget), renderer.render(mesh, _flatCamera);
        }, _proto._applyPMREM = function(cubeUVRenderTarget) {
            var renderer = this._renderer, autoClear = renderer.autoClear;
            renderer.autoClear = !1;
            for(var i = 1; i < TOTAL_LODS; i++){
                var sigma = Math.sqrt(_sigmas[i] * _sigmas[i] - _sigmas[i - 1] * _sigmas[i - 1]), poleAxis = _axisDirections[(i - 1) % _axisDirections.length];
                this._blur(cubeUVRenderTarget, i - 1, i, sigma, poleAxis);
            }
            renderer.autoClear = autoClear;
        }, _proto._blur = function(cubeUVRenderTarget, lodIn, lodOut, sigma, poleAxis) {
            var pingPongRenderTarget = this._pingPongRenderTarget;
            this._halfBlur(cubeUVRenderTarget, pingPongRenderTarget, lodIn, lodOut, sigma, 'latitudinal', poleAxis), this._halfBlur(pingPongRenderTarget, cubeUVRenderTarget, lodOut, lodOut, sigma, 'longitudinal', poleAxis);
        }, _proto._halfBlur = function(targetIn, targetOut, lodIn, lodOut, sigmaRadians, direction, poleAxis) {
            var renderer = this._renderer, blurMaterial = this._blurMaterial;
            'latitudinal' !== direction && 'longitudinal' !== direction && console.error('blur direction must be either latitudinal or longitudinal!');
            var blurMesh = new Mesh(_lodPlanes[lodOut], blurMaterial), blurUniforms = blurMaterial.uniforms, pixels = _sizeLods[lodIn] - 1, radiansPerPixel = isFinite(sigmaRadians) ? Math.PI / (2 * pixels) : 2 * Math.PI / 39, sigmaPixels = sigmaRadians / radiansPerPixel, samples = isFinite(sigmaRadians) ? 1 + Math.floor(3 * sigmaPixels) : 20;
            samples > 20 && console.warn("sigmaRadians, " + sigmaRadians + ", is too large and will clip, as it requested " + samples + " samples when the maximum is set to 20");
            for(var weights = [], sum = 0, i = 0; i < 20; ++i){
                var _x = i / sigmaPixels, weight = Math.exp(-_x * _x / 2);
                weights.push(weight), 0 == i ? sum += weight : i < samples && (sum += 2 * weight);
            }
            for(var _i = 0; _i < weights.length; _i++)weights[_i] = weights[_i] / sum;
            blurUniforms.envMap.value = targetIn.texture, blurUniforms.samples.value = samples, blurUniforms.weights.value = weights, blurUniforms.latitudinal.value = 'latitudinal' === direction, poleAxis && (blurUniforms.poleAxis.value = poleAxis), blurUniforms.dTheta.value = radiansPerPixel, blurUniforms.mipInt.value = 8 - lodIn, blurUniforms.inputEncoding.value = ENCODINGS[targetIn.texture.encoding], blurUniforms.outputEncoding.value = ENCODINGS[targetIn.texture.encoding];
            var outputSize = _sizeLods[lodOut];
            _setViewport(targetOut, 3 * Math.max(0, 256 - 2 * outputSize), (0 === lodOut ? 0 : 512) + 2 * outputSize * (lodOut > 4 ? lodOut - 8 + 4 : 0), 3 * outputSize, 2 * outputSize), renderer.setRenderTarget(targetOut), renderer.render(blurMesh, _flatCamera);
        }, PMREMGenerator;
    }();
    function _createRenderTarget(params) {
        var cubeUVRenderTarget = new WebGLRenderTarget(768, 768, params);
        return cubeUVRenderTarget.texture.mapping = 306, cubeUVRenderTarget.texture.name = 'PMREM.cubeUv', cubeUVRenderTarget.scissorTest = !0, cubeUVRenderTarget;
    }
    function _setViewport(target, x, y, width, height) {
        target.viewport.set(x, y, width, height), target.scissor.set(x, y, width, height);
    }
    function _getEquirectShader() {
        var texelSize = new Vector2(1, 1);
        return new RawShaderMaterial({
            name: 'EquirectangularToCubeUV',
            uniforms: {
                envMap: {
                    value: null
                },
                texelSize: {
                    value: texelSize
                },
                inputEncoding: {
                    value: ENCODINGS[3000]
                },
                outputEncoding: {
                    value: ENCODINGS[3000]
                }
            },
            vertexShader: _getCommonVertexShader(),
            fragmentShader: "\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform sampler2D envMap;\n\t\t\tuniform vec2 texelSize;\n\n\t\t\t" + _getEncodings() + "\n\n\t\t\t#include <common>\n\n\t\t\tvoid main() {\n\n\t\t\t\tgl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n\n\t\t\t\tvec3 outputDirection = normalize( vOutputDirection );\n\t\t\t\tvec2 uv = equirectUv( outputDirection );\n\n\t\t\t\tvec2 f = fract( uv / texelSize - 0.5 );\n\t\t\t\tuv -= f * texelSize;\n\t\t\t\tvec3 tl = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;\n\t\t\t\tuv.x += texelSize.x;\n\t\t\t\tvec3 tr = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;\n\t\t\t\tuv.y += texelSize.y;\n\t\t\t\tvec3 br = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;\n\t\t\t\tuv.x -= texelSize.x;\n\t\t\t\tvec3 bl = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;\n\n\t\t\t\tvec3 tm = mix( tl, tr, f.x );\n\t\t\t\tvec3 bm = mix( bl, br, f.x );\n\t\t\t\tgl_FragColor.rgb = mix( tm, bm, f.y );\n\n\t\t\t\tgl_FragColor = linearToOutputTexel( gl_FragColor );\n\n\t\t\t}\n\t\t",
            blending: 0,
            depthTest: !1,
            depthWrite: !1
        });
    }
    function _getCubemapShader() {
        return new RawShaderMaterial({
            name: 'CubemapToCubeUV',
            uniforms: {
                envMap: {
                    value: null
                },
                inputEncoding: {
                    value: ENCODINGS[3000]
                },
                outputEncoding: {
                    value: ENCODINGS[3000]
                }
            },
            vertexShader: _getCommonVertexShader(),
            fragmentShader: "\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform samplerCube envMap;\n\n\t\t\t" + _getEncodings() + "\n\n\t\t\tvoid main() {\n\n\t\t\t\tgl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n\t\t\t\tgl_FragColor.rgb = envMapTexelToLinear( textureCube( envMap, vec3( - vOutputDirection.x, vOutputDirection.yz ) ) ).rgb;\n\t\t\t\tgl_FragColor = linearToOutputTexel( gl_FragColor );\n\n\t\t\t}\n\t\t",
            blending: 0,
            depthTest: !1,
            depthWrite: !1
        });
    }
    function _getCommonVertexShader() {
        return "\n\n\t\tprecision mediump float;\n\t\tprecision mediump int;\n\n\t\tattribute vec3 position;\n\t\tattribute vec2 uv;\n\t\tattribute float faceIndex;\n\n\t\tvarying vec3 vOutputDirection;\n\n\t\t// RH coordinate system; PMREM face-indexing convention\n\t\tvec3 getDirection( vec2 uv, float face ) {\n\n\t\t\tuv = 2.0 * uv - 1.0;\n\n\t\t\tvec3 direction = vec3( uv, 1.0 );\n\n\t\t\tif ( face == 0.0 ) {\n\n\t\t\t\tdirection = direction.zyx; // ( 1, v, u ) pos x\n\n\t\t\t} else if ( face == 1.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xz *= -1.0; // ( -u, 1, -v ) pos y\n\n\t\t\t} else if ( face == 2.0 ) {\n\n\t\t\t\tdirection.x *= -1.0; // ( -u, v, 1 ) pos z\n\n\t\t\t} else if ( face == 3.0 ) {\n\n\t\t\t\tdirection = direction.zyx;\n\t\t\t\tdirection.xz *= -1.0; // ( -1, v, -u ) neg x\n\n\t\t\t} else if ( face == 4.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xy *= -1.0; // ( -u, -1, v ) neg y\n\n\t\t\t} else if ( face == 5.0 ) {\n\n\t\t\t\tdirection.z *= -1.0; // ( u, v, -1 ) neg z\n\n\t\t\t}\n\n\t\t\treturn direction;\n\n\t\t}\n\n\t\tvoid main() {\n\n\t\t\tvOutputDirection = getDirection( uv, faceIndex );\n\t\t\tgl_Position = vec4( position, 1.0 );\n\n\t\t}\n\t";
    }
    function _getEncodings() {
        return "\n\n\t\tuniform int inputEncoding;\n\t\tuniform int outputEncoding;\n\n\t\t#include <encodings_pars_fragment>\n\n\t\tvec4 inputTexelToLinear( vec4 value ) {\n\n\t\t\tif ( inputEncoding == 0 ) {\n\n\t\t\t\treturn value;\n\n\t\t\t} else if ( inputEncoding == 1 ) {\n\n\t\t\t\treturn sRGBToLinear( value );\n\n\t\t\t} else if ( inputEncoding == 2 ) {\n\n\t\t\t\treturn RGBEToLinear( value );\n\n\t\t\t} else if ( inputEncoding == 3 ) {\n\n\t\t\t\treturn RGBMToLinear( value, 7.0 );\n\n\t\t\t} else if ( inputEncoding == 4 ) {\n\n\t\t\t\treturn RGBMToLinear( value, 16.0 );\n\n\t\t\t} else if ( inputEncoding == 5 ) {\n\n\t\t\t\treturn RGBDToLinear( value, 256.0 );\n\n\t\t\t} else {\n\n\t\t\t\treturn GammaToLinear( value, 2.2 );\n\n\t\t\t}\n\n\t\t}\n\n\t\tvec4 linearToOutputTexel( vec4 value ) {\n\n\t\t\tif ( outputEncoding == 0 ) {\n\n\t\t\t\treturn value;\n\n\t\t\t} else if ( outputEncoding == 1 ) {\n\n\t\t\t\treturn LinearTosRGB( value );\n\n\t\t\t} else if ( outputEncoding == 2 ) {\n\n\t\t\t\treturn LinearToRGBE( value );\n\n\t\t\t} else if ( outputEncoding == 3 ) {\n\n\t\t\t\treturn LinearToRGBM( value, 7.0 );\n\n\t\t\t} else if ( outputEncoding == 4 ) {\n\n\t\t\t\treturn LinearToRGBM( value, 16.0 );\n\n\t\t\t} else if ( outputEncoding == 5 ) {\n\n\t\t\t\treturn LinearToRGBD( value, 256.0 );\n\n\t\t\t} else {\n\n\t\t\t\treturn LinearToGamma( value, 2.2 );\n\n\t\t\t}\n\n\t\t}\n\n\t\tvec4 envMapTexelToLinear( vec4 color ) {\n\n\t\t\treturn inputTexelToLinear( color );\n\n\t\t}\n\t";
    }
    function ClosedSplineCurve3(points) {
        console.warn('THREE.ClosedSplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead.'), CatmullRomCurve3.call(this, points), this.type = 'catmullrom', this.closed = !0;
    }
    function SplineCurve3(points) {
        console.warn('THREE.SplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead.'), CatmullRomCurve3.call(this, points), this.type = 'catmullrom';
    }
    function Spline(points) {
        console.warn('THREE.Spline has been removed. Use THREE.CatmullRomCurve3 instead.'), CatmullRomCurve3.call(this, points), this.type = 'catmullrom';
    }
    Curve.create = function(construct, getPoint) {
        return console.log('THREE.Curve.create() has been deprecated'), construct.prototype = Object.create(Curve.prototype), construct.prototype.constructor = construct, construct.prototype.getPoint = getPoint, construct;
    }, Object.assign(CurvePath.prototype, {
        createPointsGeometry: function(divisions) {
            console.warn('THREE.CurvePath: .createPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.');
            var pts = this.getPoints(divisions);
            return this.createGeometry(pts);
        },
        createSpacedPointsGeometry: function(divisions) {
            console.warn('THREE.CurvePath: .createSpacedPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.');
            var pts = this.getSpacedPoints(divisions);
            return this.createGeometry(pts);
        },
        createGeometry: function(points) {
            console.warn('THREE.CurvePath: .createGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.');
            for(var geometry = new Geometry(), i = 0, l = points.length; i < l; i++){
                var point = points[i];
                geometry.vertices.push(new Vector3(point.x, point.y, point.z || 0));
            }
            return geometry;
        }
    }), Object.assign(Path.prototype, {
        fromPoints: function(points) {
            return console.warn('THREE.Path: .fromPoints() has been renamed to .setFromPoints().'), this.setFromPoints(points);
        }
    }), ClosedSplineCurve3.prototype = Object.create(CatmullRomCurve3.prototype), SplineCurve3.prototype = Object.create(CatmullRomCurve3.prototype), Spline.prototype = Object.create(CatmullRomCurve3.prototype), Object.assign(Spline.prototype, {
        initFromArray: function() {
            console.error('THREE.Spline: .initFromArray() has been removed.');
        },
        getControlPointsArray: function() {
            console.error('THREE.Spline: .getControlPointsArray() has been removed.');
        },
        reparametrizeByArcLength: function() {
            console.error('THREE.Spline: .reparametrizeByArcLength() has been removed.');
        }
    }), GridHelper.prototype.setColors = function() {
        console.error('THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.');
    }, SkeletonHelper.prototype.update = function() {
        console.error('THREE.SkeletonHelper: update() no longer needs to be called.');
    }, Object.assign(Loader.prototype, {
        extractUrlBase: function(url) {
            return console.warn('THREE.Loader: .extractUrlBase() has been deprecated. Use THREE.LoaderUtils.extractUrlBase() instead.'), LoaderUtils.extractUrlBase(url);
        }
    }), Loader.Handlers = {
        add: function() {
            console.error('THREE.Loader: Handlers.add() has been removed. Use LoadingManager.addHandler() instead.');
        },
        get: function() {
            console.error('THREE.Loader: Handlers.get() has been removed. Use LoadingManager.getHandler() instead.');
        }
    }, Object.assign(Box2.prototype, {
        center: function(optionalTarget) {
            return console.warn('THREE.Box2: .center() has been renamed to .getCenter().'), this.getCenter(optionalTarget);
        },
        empty: function() {
            return console.warn('THREE.Box2: .empty() has been renamed to .isEmpty().'), this.isEmpty();
        },
        isIntersectionBox: function(box) {
            return console.warn('THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox().'), this.intersectsBox(box);
        },
        size: function(optionalTarget) {
            return console.warn('THREE.Box2: .size() has been renamed to .getSize().'), this.getSize(optionalTarget);
        }
    }), Object.assign(Box3.prototype, {
        center: function(optionalTarget) {
            return console.warn('THREE.Box3: .center() has been renamed to .getCenter().'), this.getCenter(optionalTarget);
        },
        empty: function() {
            return console.warn('THREE.Box3: .empty() has been renamed to .isEmpty().'), this.isEmpty();
        },
        isIntersectionBox: function(box) {
            return console.warn('THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox().'), this.intersectsBox(box);
        },
        isIntersectionSphere: function(sphere) {
            return console.warn('THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere().'), this.intersectsSphere(sphere);
        },
        size: function(optionalTarget) {
            return console.warn('THREE.Box3: .size() has been renamed to .getSize().'), this.getSize(optionalTarget);
        }
    }), Object.assign(Sphere.prototype, {
        empty: function() {
            return console.warn('THREE.Sphere: .empty() has been renamed to .isEmpty().'), this.isEmpty();
        }
    }), Frustum.prototype.setFromMatrix = function(m) {
        return console.warn('THREE.Frustum: .setFromMatrix() has been renamed to .setFromProjectionMatrix().'), this.setFromProjectionMatrix(m);
    }, Line3.prototype.center = function(optionalTarget) {
        return console.warn('THREE.Line3: .center() has been renamed to .getCenter().'), this.getCenter(optionalTarget);
    }, Object.assign(MathUtils, {
        random16: function() {
            return console.warn('THREE.Math: .random16() has been deprecated. Use Math.random() instead.'), Math.random();
        },
        nearestPowerOfTwo: function(value) {
            return console.warn('THREE.Math: .nearestPowerOfTwo() has been renamed to .floorPowerOfTwo().'), MathUtils.floorPowerOfTwo(value);
        },
        nextPowerOfTwo: function(value) {
            return console.warn('THREE.Math: .nextPowerOfTwo() has been renamed to .ceilPowerOfTwo().'), MathUtils.ceilPowerOfTwo(value);
        }
    }), Object.assign(Matrix3.prototype, {
        flattenToArrayOffset: function(array, offset) {
            return console.warn('THREE.Matrix3: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.'), this.toArray(array, offset);
        },
        multiplyVector3: function(vector) {
            return console.warn('THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.'), vector.applyMatrix3(this);
        },
        multiplyVector3Array: function() {
            console.error('THREE.Matrix3: .multiplyVector3Array() has been removed.');
        },
        applyToBufferAttribute: function(attribute) {
            return console.warn('THREE.Matrix3: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix3( matrix ) instead.'), attribute.applyMatrix3(this);
        },
        applyToVector3Array: function() {
            console.error('THREE.Matrix3: .applyToVector3Array() has been removed.');
        },
        getInverse: function(matrix) {
            return console.warn('THREE.Matrix3: .getInverse() has been removed. Use matrixInv.copy( matrix ).invert(); instead.'), this.copy(matrix).invert();
        }
    }), Object.assign(Matrix4.prototype, {
        extractPosition: function(m) {
            return console.warn('THREE.Matrix4: .extractPosition() has been renamed to .copyPosition().'), this.copyPosition(m);
        },
        flattenToArrayOffset: function(array, offset) {
            return console.warn('THREE.Matrix4: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.'), this.toArray(array, offset);
        },
        getPosition: function() {
            return console.warn('THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead.'), new Vector3().setFromMatrixColumn(this, 3);
        },
        setRotationFromQuaternion: function(q) {
            return console.warn('THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion().'), this.makeRotationFromQuaternion(q);
        },
        multiplyToArray: function() {
            console.warn('THREE.Matrix4: .multiplyToArray() has been removed.');
        },
        multiplyVector3: function(vector) {
            return console.warn('THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) instead.'), vector.applyMatrix4(this);
        },
        multiplyVector4: function(vector) {
            return console.warn('THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.'), vector.applyMatrix4(this);
        },
        multiplyVector3Array: function() {
            console.error('THREE.Matrix4: .multiplyVector3Array() has been removed.');
        },
        rotateAxis: function(v) {
            console.warn('THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.'), v.transformDirection(this);
        },
        crossVector: function(vector) {
            return console.warn('THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.'), vector.applyMatrix4(this);
        },
        translate: function() {
            console.error('THREE.Matrix4: .translate() has been removed.');
        },
        rotateX: function() {
            console.error('THREE.Matrix4: .rotateX() has been removed.');
        },
        rotateY: function() {
            console.error('THREE.Matrix4: .rotateY() has been removed.');
        },
        rotateZ: function() {
            console.error('THREE.Matrix4: .rotateZ() has been removed.');
        },
        rotateByAxis: function() {
            console.error('THREE.Matrix4: .rotateByAxis() has been removed.');
        },
        applyToBufferAttribute: function(attribute) {
            return console.warn('THREE.Matrix4: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix4( matrix ) instead.'), attribute.applyMatrix4(this);
        },
        applyToVector3Array: function() {
            console.error('THREE.Matrix4: .applyToVector3Array() has been removed.');
        },
        makeFrustum: function(left, right, bottom, top, near, far) {
            return console.warn('THREE.Matrix4: .makeFrustum() has been removed. Use .makePerspective( left, right, top, bottom, near, far ) instead.'), this.makePerspective(left, right, top, bottom, near, far);
        },
        getInverse: function(matrix) {
            return console.warn('THREE.Matrix4: .getInverse() has been removed. Use matrixInv.copy( matrix ).invert(); instead.'), this.copy(matrix).invert();
        }
    }), Plane.prototype.isIntersectionLine = function(line) {
        return console.warn('THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine().'), this.intersectsLine(line);
    }, Object.assign(Quaternion.prototype, {
        multiplyVector3: function(vector) {
            return console.warn('THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.'), vector.applyQuaternion(this);
        },
        inverse: function() {
            return console.warn('THREE.Quaternion: .inverse() has been renamed to invert().'), this.invert();
        }
    }), Object.assign(Ray.prototype, {
        isIntersectionBox: function(box) {
            return console.warn('THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox().'), this.intersectsBox(box);
        },
        isIntersectionPlane: function(plane) {
            return console.warn('THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane().'), this.intersectsPlane(plane);
        },
        isIntersectionSphere: function(sphere) {
            return console.warn('THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere().'), this.intersectsSphere(sphere);
        }
    }), Object.assign(Triangle.prototype, {
        area: function() {
            return console.warn('THREE.Triangle: .area() has been renamed to .getArea().'), this.getArea();
        },
        barycoordFromPoint: function(point, target) {
            return console.warn('THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().'), this.getBarycoord(point, target);
        },
        midpoint: function(target) {
            return console.warn('THREE.Triangle: .midpoint() has been renamed to .getMidpoint().'), this.getMidpoint(target);
        },
        normal: function(target) {
            return console.warn('THREE.Triangle: .normal() has been renamed to .getNormal().'), this.getNormal(target);
        },
        plane: function(target) {
            return console.warn('THREE.Triangle: .plane() has been renamed to .getPlane().'), this.getPlane(target);
        }
    }), Object.assign(Triangle, {
        barycoordFromPoint: function(point, a, b, c, target) {
            return console.warn('THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().'), Triangle.getBarycoord(point, a, b, c, target);
        },
        normal: function(a, b, c, target) {
            return console.warn('THREE.Triangle: .normal() has been renamed to .getNormal().'), Triangle.getNormal(a, b, c, target);
        }
    }), Object.assign(Shape.prototype, {
        extractAllPoints: function(divisions) {
            return console.warn('THREE.Shape: .extractAllPoints() has been removed. Use .extractPoints() instead.'), this.extractPoints(divisions);
        },
        extrude: function(options) {
            return console.warn('THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead.'), new ExtrudeGeometry(this, options);
        },
        makeGeometry: function(options) {
            return console.warn('THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead.'), new ShapeGeometry(this, options);
        }
    }), Object.assign(Vector2.prototype, {
        fromAttribute: function(attribute, index, offset) {
            return console.warn('THREE.Vector2: .fromAttribute() has been renamed to .fromBufferAttribute().'), this.fromBufferAttribute(attribute, index, offset);
        },
        distanceToManhattan: function(v) {
            return console.warn('THREE.Vector2: .distanceToManhattan() has been renamed to .manhattanDistanceTo().'), this.manhattanDistanceTo(v);
        },
        lengthManhattan: function() {
            return console.warn('THREE.Vector2: .lengthManhattan() has been renamed to .manhattanLength().'), this.manhattanLength();
        }
    }), Object.assign(Vector3.prototype, {
        setEulerFromRotationMatrix: function() {
            console.error('THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.');
        },
        setEulerFromQuaternion: function() {
            console.error('THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.');
        },
        getPositionFromMatrix: function(m) {
            return console.warn('THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition().'), this.setFromMatrixPosition(m);
        },
        getScaleFromMatrix: function(m) {
            return console.warn('THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale().'), this.setFromMatrixScale(m);
        },
        getColumnFromMatrix: function(index, matrix) {
            return console.warn('THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn().'), this.setFromMatrixColumn(matrix, index);
        },
        applyProjection: function(m) {
            return console.warn('THREE.Vector3: .applyProjection() has been removed. Use .applyMatrix4( m ) instead.'), this.applyMatrix4(m);
        },
        fromAttribute: function(attribute, index, offset) {
            return console.warn('THREE.Vector3: .fromAttribute() has been renamed to .fromBufferAttribute().'), this.fromBufferAttribute(attribute, index, offset);
        },
        distanceToManhattan: function(v) {
            return console.warn('THREE.Vector3: .distanceToManhattan() has been renamed to .manhattanDistanceTo().'), this.manhattanDistanceTo(v);
        },
        lengthManhattan: function() {
            return console.warn('THREE.Vector3: .lengthManhattan() has been renamed to .manhattanLength().'), this.manhattanLength();
        }
    }), Object.assign(Vector4.prototype, {
        fromAttribute: function(attribute, index, offset) {
            return console.warn('THREE.Vector4: .fromAttribute() has been renamed to .fromBufferAttribute().'), this.fromBufferAttribute(attribute, index, offset);
        },
        lengthManhattan: function() {
            return console.warn('THREE.Vector4: .lengthManhattan() has been renamed to .manhattanLength().'), this.manhattanLength();
        }
    }), Object.assign(Geometry.prototype, {
        computeTangents: function() {
            console.error('THREE.Geometry: .computeTangents() has been removed.');
        },
        computeLineDistances: function() {
            console.error('THREE.Geometry: .computeLineDistances() has been removed. Use THREE.Line.computeLineDistances() instead.');
        },
        applyMatrix: function(matrix) {
            return console.warn('THREE.Geometry: .applyMatrix() has been renamed to .applyMatrix4().'), this.applyMatrix4(matrix);
        }
    }), Object.assign(Object3D.prototype, {
        getChildByName: function(name) {
            return console.warn('THREE.Object3D: .getChildByName() has been renamed to .getObjectByName().'), this.getObjectByName(name);
        },
        renderDepth: function() {
            console.warn('THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.');
        },
        translate: function(distance, axis) {
            return console.warn('THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead.'), this.translateOnAxis(axis, distance);
        },
        getWorldRotation: function() {
            console.error('THREE.Object3D: .getWorldRotation() has been removed. Use THREE.Object3D.getWorldQuaternion( target ) instead.');
        },
        applyMatrix: function(matrix) {
            return console.warn('THREE.Object3D: .applyMatrix() has been renamed to .applyMatrix4().'), this.applyMatrix4(matrix);
        }
    }), Object.defineProperties(Object3D.prototype, {
        eulerOrder: {
            get: function() {
                return console.warn('THREE.Object3D: .eulerOrder is now .rotation.order.'), this.rotation.order;
            },
            set: function(value) {
                console.warn('THREE.Object3D: .eulerOrder is now .rotation.order.'), this.rotation.order = value;
            }
        },
        useQuaternion: {
            get: function() {
                console.warn('THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.');
            },
            set: function() {
                console.warn('THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.');
            }
        }
    }), Object.assign(Mesh.prototype, {
        setDrawMode: function() {
            console.error('THREE.Mesh: .setDrawMode() has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.');
        }
    }), Object.defineProperties(Mesh.prototype, {
        drawMode: {
            get: function() {
                return console.error('THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode.'), 0;
            },
            set: function() {
                console.error('THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.');
            }
        }
    }), Object.defineProperties(LOD.prototype, {
        objects: {
            get: function() {
                return console.warn('THREE.LOD: .objects has been renamed to .levels.'), this.levels;
            }
        }
    }), Object.defineProperty(Skeleton.prototype, 'useVertexTexture', {
        get: function() {
            console.warn('THREE.Skeleton: useVertexTexture has been removed.');
        },
        set: function() {
            console.warn('THREE.Skeleton: useVertexTexture has been removed.');
        }
    }), SkinnedMesh.prototype.initBones = function() {
        console.error('THREE.SkinnedMesh: initBones() has been removed.');
    }, Object.defineProperty(Curve.prototype, '__arcLengthDivisions', {
        get: function() {
            return console.warn('THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions.'), this.arcLengthDivisions;
        },
        set: function(value) {
            console.warn('THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions.'), this.arcLengthDivisions = value;
        }
    }), PerspectiveCamera.prototype.setLens = function(focalLength, filmGauge) {
        console.warn("THREE.PerspectiveCamera.setLens is deprecated. Use .setFocalLength and .filmGauge for a photographic setup."), void 0 !== filmGauge && (this.filmGauge = filmGauge), this.setFocalLength(focalLength);
    }, Object.defineProperties(Light.prototype, {
        onlyShadow: {
            set: function() {
                console.warn('THREE.Light: .onlyShadow has been removed.');
            }
        },
        shadowCameraFov: {
            set: function(value) {
                console.warn('THREE.Light: .shadowCameraFov is now .shadow.camera.fov.'), this.shadow.camera.fov = value;
            }
        },
        shadowCameraLeft: {
            set: function(value) {
                console.warn('THREE.Light: .shadowCameraLeft is now .shadow.camera.left.'), this.shadow.camera.left = value;
            }
        },
        shadowCameraRight: {
            set: function(value) {
                console.warn('THREE.Light: .shadowCameraRight is now .shadow.camera.right.'), this.shadow.camera.right = value;
            }
        },
        shadowCameraTop: {
            set: function(value) {
                console.warn('THREE.Light: .shadowCameraTop is now .shadow.camera.top.'), this.shadow.camera.top = value;
            }
        },
        shadowCameraBottom: {
            set: function(value) {
                console.warn('THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom.'), this.shadow.camera.bottom = value;
            }
        },
        shadowCameraNear: {
            set: function(value) {
                console.warn('THREE.Light: .shadowCameraNear is now .shadow.camera.near.'), this.shadow.camera.near = value;
            }
        },
        shadowCameraFar: {
            set: function(value) {
                console.warn('THREE.Light: .shadowCameraFar is now .shadow.camera.far.'), this.shadow.camera.far = value;
            }
        },
        shadowCameraVisible: {
            set: function() {
                console.warn('THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.');
            }
        },
        shadowBias: {
            set: function(value) {
                console.warn('THREE.Light: .shadowBias is now .shadow.bias.'), this.shadow.bias = value;
            }
        },
        shadowDarkness: {
            set: function() {
                console.warn('THREE.Light: .shadowDarkness has been removed.');
            }
        },
        shadowMapWidth: {
            set: function(value) {
                console.warn('THREE.Light: .shadowMapWidth is now .shadow.mapSize.width.'), this.shadow.mapSize.width = value;
            }
        },
        shadowMapHeight: {
            set: function(value) {
                console.warn('THREE.Light: .shadowMapHeight is now .shadow.mapSize.height.'), this.shadow.mapSize.height = value;
            }
        }
    }), Object.defineProperties(BufferAttribute.prototype, {
        length: {
            get: function() {
                return console.warn('THREE.BufferAttribute: .length has been deprecated. Use .count instead.'), this.array.length;
            }
        },
        dynamic: {
            get: function() {
                return console.warn('THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead.'), 35048 === this.usage;
            },
            set: function() {
                console.warn('THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead.'), this.setUsage(35048);
            }
        }
    }), Object.assign(BufferAttribute.prototype, {
        setDynamic: function(value) {
            return console.warn('THREE.BufferAttribute: .setDynamic() has been deprecated. Use .setUsage() instead.'), this.setUsage(!0 === value ? 35048 : 35044), this;
        },
        copyIndicesArray: function() {
            console.error('THREE.BufferAttribute: .copyIndicesArray() has been removed.');
        },
        setArray: function() {
            console.error('THREE.BufferAttribute: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers');
        }
    }), Object.assign(BufferGeometry.prototype, {
        addIndex: function(index) {
            console.warn('THREE.BufferGeometry: .addIndex() has been renamed to .setIndex().'), this.setIndex(index);
        },
        addAttribute: function(name, attribute) {
            return (console.warn('THREE.BufferGeometry: .addAttribute() has been renamed to .setAttribute().'), attribute && attribute.isBufferAttribute || attribute && attribute.isInterleavedBufferAttribute) ? 'index' === name ? (console.warn('THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute.'), this.setIndex(attribute), this) : this.setAttribute(name, attribute) : (console.warn('THREE.BufferGeometry: .addAttribute() now expects ( name, attribute ).'), this.setAttribute(name, new BufferAttribute(arguments[1], arguments[2])));
        },
        addDrawCall: function(start, count, indexOffset) {
            void 0 !== indexOffset && console.warn('THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset.'), console.warn('THREE.BufferGeometry: .addDrawCall() is now .addGroup().'), this.addGroup(start, count);
        },
        clearDrawCalls: function() {
            console.warn('THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups().'), this.clearGroups();
        },
        computeTangents: function() {
            console.warn('THREE.BufferGeometry: .computeTangents() has been removed.');
        },
        computeOffsets: function() {
            console.warn('THREE.BufferGeometry: .computeOffsets() has been removed.');
        },
        removeAttribute: function(name) {
            return console.warn('THREE.BufferGeometry: .removeAttribute() has been renamed to .deleteAttribute().'), this.deleteAttribute(name);
        },
        applyMatrix: function(matrix) {
            return console.warn('THREE.BufferGeometry: .applyMatrix() has been renamed to .applyMatrix4().'), this.applyMatrix4(matrix);
        }
    }), Object.defineProperties(BufferGeometry.prototype, {
        drawcalls: {
            get: function() {
                return console.error('THREE.BufferGeometry: .drawcalls has been renamed to .groups.'), this.groups;
            }
        },
        offsets: {
            get: function() {
                return console.warn('THREE.BufferGeometry: .offsets has been renamed to .groups.'), this.groups;
            }
        }
    }), Object.defineProperties(InstancedBufferGeometry.prototype, {
        maxInstancedCount: {
            get: function() {
                return console.warn('THREE.InstancedBufferGeometry: .maxInstancedCount has been renamed to .instanceCount.'), this.instanceCount;
            },
            set: function(value) {
                console.warn('THREE.InstancedBufferGeometry: .maxInstancedCount has been renamed to .instanceCount.'), this.instanceCount = value;
            }
        }
    }), Object.defineProperties(Raycaster.prototype, {
        linePrecision: {
            get: function() {
                return console.warn('THREE.Raycaster: .linePrecision has been deprecated. Use .params.Line.threshold instead.'), this.params.Line.threshold;
            },
            set: function(value) {
                console.warn('THREE.Raycaster: .linePrecision has been deprecated. Use .params.Line.threshold instead.'), this.params.Line.threshold = value;
            }
        }
    }), Object.defineProperties(InterleavedBuffer.prototype, {
        dynamic: {
            get: function() {
                return console.warn('THREE.InterleavedBuffer: .length has been deprecated. Use .usage instead.'), 35048 === this.usage;
            },
            set: function(value) {
                console.warn('THREE.InterleavedBuffer: .length has been deprecated. Use .usage instead.'), this.setUsage(value);
            }
        }
    }), Object.assign(InterleavedBuffer.prototype, {
        setDynamic: function(value) {
            return console.warn('THREE.InterleavedBuffer: .setDynamic() has been deprecated. Use .setUsage() instead.'), this.setUsage(!0 === value ? 35048 : 35044), this;
        },
        setArray: function() {
            console.error('THREE.InterleavedBuffer: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers');
        }
    }), Object.assign(ExtrudeBufferGeometry.prototype, {
        getArrays: function() {
            console.error('THREE.ExtrudeBufferGeometry: .getArrays() has been removed.');
        },
        addShapeList: function() {
            console.error('THREE.ExtrudeBufferGeometry: .addShapeList() has been removed.');
        },
        addShape: function() {
            console.error('THREE.ExtrudeBufferGeometry: .addShape() has been removed.');
        }
    }), Object.assign(Scene.prototype, {
        dispose: function() {
            console.error('THREE.Scene: .dispose() has been removed.');
        }
    }), Object.defineProperties(Uniform.prototype, {
        dynamic: {
            set: function() {
                console.warn('THREE.Uniform: .dynamic has been removed. Use object.onBeforeRender() instead.');
            }
        },
        onUpdate: {
            value: function() {
                return console.warn('THREE.Uniform: .onUpdate() has been removed. Use object.onBeforeRender() instead.'), this;
            }
        }
    }), Object.defineProperties(Material.prototype, {
        wrapAround: {
            get: function() {
                console.warn('THREE.Material: .wrapAround has been removed.');
            },
            set: function() {
                console.warn('THREE.Material: .wrapAround has been removed.');
            }
        },
        overdraw: {
            get: function() {
                console.warn('THREE.Material: .overdraw has been removed.');
            },
            set: function() {
                console.warn('THREE.Material: .overdraw has been removed.');
            }
        },
        wrapRGB: {
            get: function() {
                return console.warn('THREE.Material: .wrapRGB has been removed.'), new Color();
            }
        },
        shading: {
            get: function() {
                console.error('THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.');
            },
            set: function(value) {
                console.warn('THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.'), this.flatShading = 1 === value;
            }
        },
        stencilMask: {
            get: function() {
                return console.warn('THREE.' + this.type + ': .stencilMask has been removed. Use .stencilFuncMask instead.'), this.stencilFuncMask;
            },
            set: function(value) {
                console.warn('THREE.' + this.type + ': .stencilMask has been removed. Use .stencilFuncMask instead.'), this.stencilFuncMask = value;
            }
        }
    }), Object.defineProperties(MeshPhongMaterial.prototype, {
        metal: {
            get: function() {
                return console.warn('THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead.'), !1;
            },
            set: function() {
                console.warn('THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead');
            }
        }
    }), Object.defineProperties(MeshPhysicalMaterial.prototype, {
        transparency: {
            get: function() {
                return console.warn('THREE.MeshPhysicalMaterial: .transparency has been renamed to .transmission.'), this.transmission;
            },
            set: function(value) {
                console.warn('THREE.MeshPhysicalMaterial: .transparency has been renamed to .transmission.'), this.transmission = value;
            }
        }
    }), Object.defineProperties(ShaderMaterial.prototype, {
        derivatives: {
            get: function() {
                return console.warn('THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives.'), this.extensions.derivatives;
            },
            set: function(value) {
                console.warn('THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives.'), this.extensions.derivatives = value;
            }
        }
    }), Object.assign(WebGLRenderer.prototype, {
        clearTarget: function(renderTarget, color, depth, stencil) {
            console.warn('THREE.WebGLRenderer: .clearTarget() has been deprecated. Use .setRenderTarget() and .clear() instead.'), this.setRenderTarget(renderTarget), this.clear(color, depth, stencil);
        },
        animate: function(callback) {
            console.warn('THREE.WebGLRenderer: .animate() is now .setAnimationLoop().'), this.setAnimationLoop(callback);
        },
        getCurrentRenderTarget: function() {
            return console.warn('THREE.WebGLRenderer: .getCurrentRenderTarget() is now .getRenderTarget().'), this.getRenderTarget();
        },
        getMaxAnisotropy: function() {
            return console.warn('THREE.WebGLRenderer: .getMaxAnisotropy() is now .capabilities.getMaxAnisotropy().'), this.capabilities.getMaxAnisotropy();
        },
        getPrecision: function() {
            return console.warn('THREE.WebGLRenderer: .getPrecision() is now .capabilities.precision.'), this.capabilities.precision;
        },
        resetGLState: function() {
            return console.warn('THREE.WebGLRenderer: .resetGLState() is now .state.reset().'), this.state.reset();
        },
        supportsFloatTextures: function() {
            return console.warn('THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( \'OES_texture_float\' ).'), this.extensions.get('OES_texture_float');
        },
        supportsHalfFloatTextures: function() {
            return console.warn('THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( \'OES_texture_half_float\' ).'), this.extensions.get('OES_texture_half_float');
        },
        supportsStandardDerivatives: function() {
            return console.warn('THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( \'OES_standard_derivatives\' ).'), this.extensions.get('OES_standard_derivatives');
        },
        supportsCompressedTextureS3TC: function() {
            return console.warn('THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( \'WEBGL_compressed_texture_s3tc\' ).'), this.extensions.get('WEBGL_compressed_texture_s3tc');
        },
        supportsCompressedTexturePVRTC: function() {
            return console.warn('THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( \'WEBGL_compressed_texture_pvrtc\' ).'), this.extensions.get('WEBGL_compressed_texture_pvrtc');
        },
        supportsBlendMinMax: function() {
            return console.warn('THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( \'EXT_blend_minmax\' ).'), this.extensions.get('EXT_blend_minmax');
        },
        supportsVertexTextures: function() {
            return console.warn('THREE.WebGLRenderer: .supportsVertexTextures() is now .capabilities.vertexTextures.'), this.capabilities.vertexTextures;
        },
        supportsInstancedArrays: function() {
            return console.warn('THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( \'ANGLE_instanced_arrays\' ).'), this.extensions.get('ANGLE_instanced_arrays');
        },
        enableScissorTest: function(boolean) {
            console.warn('THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest().'), this.setScissorTest(boolean);
        },
        initMaterial: function() {
            console.warn('THREE.WebGLRenderer: .initMaterial() has been removed.');
        },
        addPrePlugin: function() {
            console.warn('THREE.WebGLRenderer: .addPrePlugin() has been removed.');
        },
        addPostPlugin: function() {
            console.warn('THREE.WebGLRenderer: .addPostPlugin() has been removed.');
        },
        updateShadowMap: function() {
            console.warn('THREE.WebGLRenderer: .updateShadowMap() has been removed.');
        },
        setFaceCulling: function() {
            console.warn('THREE.WebGLRenderer: .setFaceCulling() has been removed.');
        },
        allocTextureUnit: function() {
            console.warn('THREE.WebGLRenderer: .allocTextureUnit() has been removed.');
        },
        setTexture: function() {
            console.warn('THREE.WebGLRenderer: .setTexture() has been removed.');
        },
        setTexture2D: function() {
            console.warn('THREE.WebGLRenderer: .setTexture2D() has been removed.');
        },
        setTextureCube: function() {
            console.warn('THREE.WebGLRenderer: .setTextureCube() has been removed.');
        },
        getActiveMipMapLevel: function() {
            return console.warn('THREE.WebGLRenderer: .getActiveMipMapLevel() is now .getActiveMipmapLevel().'), this.getActiveMipmapLevel();
        }
    }), Object.defineProperties(WebGLRenderer.prototype, {
        shadowMapEnabled: {
            get: function() {
                return this.shadowMap.enabled;
            },
            set: function(value) {
                console.warn('THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled.'), this.shadowMap.enabled = value;
            }
        },
        shadowMapType: {
            get: function() {
                return this.shadowMap.type;
            },
            set: function(value) {
                console.warn('THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type.'), this.shadowMap.type = value;
            }
        },
        shadowMapCullFace: {
            get: function() {
                console.warn('THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.');
            },
            set: function() {
                console.warn('THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.');
            }
        },
        context: {
            get: function() {
                return console.warn('THREE.WebGLRenderer: .context has been removed. Use .getContext() instead.'), this.getContext();
            }
        },
        vr: {
            get: function() {
                return console.warn('THREE.WebGLRenderer: .vr has been renamed to .xr'), this.xr;
            }
        },
        gammaInput: {
            get: function() {
                return console.warn('THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead.'), !1;
            },
            set: function() {
                console.warn('THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead.');
            }
        },
        gammaOutput: {
            get: function() {
                return console.warn('THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead.'), !1;
            },
            set: function(value) {
                console.warn('THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead.'), this.outputEncoding = !0 === value ? 3001 : 3000;
            }
        },
        toneMappingWhitePoint: {
            get: function() {
                return console.warn('THREE.WebGLRenderer: .toneMappingWhitePoint has been removed.'), 1.0;
            },
            set: function() {
                console.warn('THREE.WebGLRenderer: .toneMappingWhitePoint has been removed.');
            }
        }
    }), Object.defineProperties(WebGLShadowMap.prototype, {
        cullFace: {
            get: function() {
                console.warn('THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.');
            },
            set: function() {
                console.warn('THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.');
            }
        },
        renderReverseSided: {
            get: function() {
                console.warn('THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.');
            },
            set: function() {
                console.warn('THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.');
            }
        },
        renderSingleSided: {
            get: function() {
                console.warn('THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.');
            },
            set: function() {
                console.warn('THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.');
            }
        }
    }), Object.defineProperties(WebGLRenderTarget.prototype, {
        wrapS: {
            get: function() {
                return console.warn('THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.'), this.texture.wrapS;
            },
            set: function(value) {
                console.warn('THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.'), this.texture.wrapS = value;
            }
        },
        wrapT: {
            get: function() {
                return console.warn('THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.'), this.texture.wrapT;
            },
            set: function(value) {
                console.warn('THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.'), this.texture.wrapT = value;
            }
        },
        magFilter: {
            get: function() {
                return console.warn('THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.'), this.texture.magFilter;
            },
            set: function(value) {
                console.warn('THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.'), this.texture.magFilter = value;
            }
        },
        minFilter: {
            get: function() {
                return console.warn('THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.'), this.texture.minFilter;
            },
            set: function(value) {
                console.warn('THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.'), this.texture.minFilter = value;
            }
        },
        anisotropy: {
            get: function() {
                return console.warn('THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.'), this.texture.anisotropy;
            },
            set: function(value) {
                console.warn('THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.'), this.texture.anisotropy = value;
            }
        },
        offset: {
            get: function() {
                return console.warn('THREE.WebGLRenderTarget: .offset is now .texture.offset.'), this.texture.offset;
            },
            set: function(value) {
                console.warn('THREE.WebGLRenderTarget: .offset is now .texture.offset.'), this.texture.offset = value;
            }
        },
        repeat: {
            get: function() {
                return console.warn('THREE.WebGLRenderTarget: .repeat is now .texture.repeat.'), this.texture.repeat;
            },
            set: function(value) {
                console.warn('THREE.WebGLRenderTarget: .repeat is now .texture.repeat.'), this.texture.repeat = value;
            }
        },
        format: {
            get: function() {
                return console.warn('THREE.WebGLRenderTarget: .format is now .texture.format.'), this.texture.format;
            },
            set: function(value) {
                console.warn('THREE.WebGLRenderTarget: .format is now .texture.format.'), this.texture.format = value;
            }
        },
        type: {
            get: function() {
                return console.warn('THREE.WebGLRenderTarget: .type is now .texture.type.'), this.texture.type;
            },
            set: function(value) {
                console.warn('THREE.WebGLRenderTarget: .type is now .texture.type.'), this.texture.type = value;
            }
        },
        generateMipmaps: {
            get: function() {
                return console.warn('THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.'), this.texture.generateMipmaps;
            },
            set: function(value) {
                console.warn('THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.'), this.texture.generateMipmaps = value;
            }
        }
    }), Object.defineProperties(Audio.prototype, {
        load: {
            value: function(file) {
                console.warn('THREE.Audio: .load has been deprecated. Use THREE.AudioLoader instead.');
                var scope = this;
                return new AudioLoader().load(file, function(buffer) {
                    scope.setBuffer(buffer);
                }), this;
            }
        },
        startTime: {
            set: function() {
                console.warn('THREE.Audio: .startTime is now .play( delay ).');
            }
        }
    }), AudioAnalyser.prototype.getData = function() {
        return console.warn('THREE.AudioAnalyser: .getData() is now .getFrequencyData().'), this.getFrequencyData();
    }, CubeCamera.prototype.updateCubeMap = function(renderer, scene) {
        return console.warn('THREE.CubeCamera: .updateCubeMap() is now .update().'), this.update(renderer, scene);
    }, CubeCamera.prototype.clear = function(renderer, color, depth, stencil) {
        return console.warn('THREE.CubeCamera: .clear() is now .renderTarget.clear().'), this.renderTarget.clear(renderer, color, depth, stencil);
    }, ImageUtils.crossOrigin = void 0, ImageUtils.loadTexture = function(url, mapping, onLoad, onError) {
        console.warn('THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.');
        var loader = new TextureLoader();
        loader.setCrossOrigin(this.crossOrigin);
        var texture = loader.load(url, onLoad, void 0, onError);
        return mapping && (texture.mapping = mapping), texture;
    }, ImageUtils.loadTextureCube = function(urls, mapping, onLoad, onError) {
        console.warn('THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.');
        var loader = new CubeTextureLoader();
        loader.setCrossOrigin(this.crossOrigin);
        var texture = loader.load(urls, onLoad, void 0, onError);
        return mapping && (texture.mapping = mapping), texture;
    }, ImageUtils.loadCompressedTexture = function() {
        console.error('THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.');
    }, ImageUtils.loadCompressedTextureCube = function() {
        console.error('THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.');
    }, 'undefined' != typeof __THREE_DEVTOOLS__ && __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent('register', {
        detail: {
            revision: '124'
        }
    })), exports1.ACESFilmicToneMapping = 4, exports1.AddEquation = 100, exports1.AddOperation = 2, exports1.AdditiveAnimationBlendMode = 2501, exports1.AdditiveBlending = 2, exports1.AlphaFormat = 1021, exports1.AlwaysDepth = 1, exports1.AlwaysStencilFunc = 519, exports1.AmbientLight = AmbientLight, exports1.AmbientLightProbe = AmbientLightProbe, exports1.AnimationClip = AnimationClip, exports1.AnimationLoader = AnimationLoader, exports1.AnimationMixer = AnimationMixer, exports1.AnimationObjectGroup = AnimationObjectGroup, exports1.AnimationUtils = AnimationUtils, exports1.ArcCurve = ArcCurve, exports1.ArrayCamera = ArrayCamera, exports1.ArrowHelper = ArrowHelper, exports1.Audio = Audio, exports1.AudioAnalyser = AudioAnalyser, exports1.AudioContext = AudioContext, exports1.AudioListener = AudioListener, exports1.AudioLoader = AudioLoader, exports1.AxesHelper = AxesHelper, exports1.AxisHelper = function(size) {
        return console.warn('THREE.AxisHelper has been renamed to THREE.AxesHelper.'), new AxesHelper(size);
    }, exports1.BackSide = 1, exports1.BasicDepthPacking = 3200, exports1.BasicShadowMap = 0, exports1.BinaryTextureLoader = function(manager) {
        return console.warn('THREE.BinaryTextureLoader has been renamed to THREE.DataTextureLoader.'), new DataTextureLoader(manager);
    }, exports1.Bone = Bone, exports1.BooleanKeyframeTrack = BooleanKeyframeTrack, exports1.BoundingBoxHelper = function(object, color) {
        return console.warn('THREE.BoundingBoxHelper has been deprecated. Creating a THREE.BoxHelper instead.'), new BoxHelper(object, color);
    }, exports1.Box2 = Box2, exports1.Box3 = Box3, exports1.Box3Helper = Box3Helper, exports1.BoxBufferGeometry = BoxBufferGeometry, exports1.BoxGeometry = BoxGeometry, exports1.BoxHelper = BoxHelper, exports1.BufferAttribute = BufferAttribute, exports1.BufferGeometry = BufferGeometry, exports1.BufferGeometryLoader = BufferGeometryLoader, exports1.ByteType = 1010, exports1.Cache = Cache, exports1.Camera = Camera, exports1.CameraHelper = CameraHelper, exports1.CanvasRenderer = function() {
        console.error('THREE.CanvasRenderer has been removed');
    }, exports1.CanvasTexture = CanvasTexture, exports1.CatmullRomCurve3 = CatmullRomCurve3, exports1.CineonToneMapping = 3, exports1.CircleBufferGeometry = CircleBufferGeometry, exports1.CircleGeometry = CircleGeometry, exports1.ClampToEdgeWrapping = 1001, exports1.Clock = Clock, exports1.ClosedSplineCurve3 = ClosedSplineCurve3, exports1.Color = Color, exports1.ColorKeyframeTrack = ColorKeyframeTrack, exports1.CompressedTexture = CompressedTexture, exports1.CompressedTextureLoader = CompressedTextureLoader, exports1.ConeBufferGeometry = ConeBufferGeometry, exports1.ConeGeometry = ConeGeometry, exports1.CubeCamera = CubeCamera, exports1.CubeGeometry = BoxGeometry, exports1.CubeReflectionMapping = 301, exports1.CubeRefractionMapping = 302, exports1.CubeTexture = CubeTexture, exports1.CubeTextureLoader = CubeTextureLoader, exports1.CubeUVReflectionMapping = 306, exports1.CubeUVRefractionMapping = 307, exports1.CubicBezierCurve = CubicBezierCurve, exports1.CubicBezierCurve3 = CubicBezierCurve3, exports1.CubicInterpolant = CubicInterpolant, exports1.CullFaceBack = 1, exports1.CullFaceFront = 2, exports1.CullFaceFrontBack = 3, exports1.CullFaceNone = 0, exports1.Curve = Curve, exports1.CurvePath = CurvePath, exports1.CustomBlending = 5, exports1.CustomToneMapping = 5, exports1.CylinderBufferGeometry = CylinderBufferGeometry, exports1.CylinderGeometry = CylinderGeometry, exports1.Cylindrical = Cylindrical, exports1.DataTexture = DataTexture, exports1.DataTexture2DArray = DataTexture2DArray, exports1.DataTexture3D = DataTexture3D, exports1.DataTextureLoader = DataTextureLoader, exports1.DataUtils = {
        toHalfFloat: function(val) {
            _floatView[0] = val;
            var x = _int32View[0], bits = x >> 16 & 0x8000, m = x >> 12 & 0x07ff, e = x >> 23 & 0xff;
            return e < 103 ? bits : e > 142 ? (bits |= 0x7c00, bits |= (255 == e ? 0 : 1) && 0x007fffff & x) : e < 113 ? (m |= 0x0800, bits |= (m >> 114 - e) + (m >> 113 - e & 1)) : (bits |= e - 112 << 10 | m >> 1, bits += 1 & m);
        }
    }, exports1.DecrementStencilOp = 7683, exports1.DecrementWrapStencilOp = 34056, exports1.DefaultLoadingManager = DefaultLoadingManager, exports1.DepthFormat = 1026, exports1.DepthStencilFormat = 1027, exports1.DepthTexture = DepthTexture, exports1.DirectionalLight = DirectionalLight, exports1.DirectionalLightHelper = DirectionalLightHelper, exports1.DiscreteInterpolant = DiscreteInterpolant, exports1.DodecahedronBufferGeometry = DodecahedronBufferGeometry, exports1.DodecahedronGeometry = DodecahedronGeometry, exports1.DoubleSide = 2, exports1.DstAlphaFactor = 206, exports1.DstColorFactor = 208, exports1.DynamicBufferAttribute = function(array, itemSize) {
        return console.warn('THREE.DynamicBufferAttribute has been removed. Use new THREE.BufferAttribute().setUsage( THREE.DynamicDrawUsage ) instead.'), new BufferAttribute(array, itemSize).setUsage(35048);
    }, exports1.DynamicCopyUsage = 35050, exports1.DynamicDrawUsage = 35048, exports1.DynamicReadUsage = 35049, exports1.EdgesGeometry = EdgesGeometry, exports1.EdgesHelper = function(object, hex) {
        return console.warn('THREE.EdgesHelper has been removed. Use THREE.EdgesGeometry instead.'), new LineSegments(new EdgesGeometry(object.geometry), new LineBasicMaterial({
            color: void 0 !== hex ? hex : 0xffffff
        }));
    }, exports1.EllipseCurve = EllipseCurve, exports1.EqualDepth = 4, exports1.EqualStencilFunc = 514, exports1.EquirectangularReflectionMapping = 303, exports1.EquirectangularRefractionMapping = 304, exports1.Euler = Euler, exports1.EventDispatcher = EventDispatcher, exports1.ExtrudeBufferGeometry = ExtrudeBufferGeometry, exports1.ExtrudeGeometry = ExtrudeGeometry, exports1.Face3 = Face3, exports1.Face4 = function(a, b, c, d, normal, color, materialIndex) {
        return console.warn('THREE.Face4 has been removed. A THREE.Face3 will be created instead.'), new Face3(a, b, c, normal, color, materialIndex);
    }, exports1.FaceColors = 1, exports1.FileLoader = FileLoader, exports1.FlatShading = 1, exports1.Float16BufferAttribute = Float16BufferAttribute, exports1.Float32Attribute = function(array, itemSize) {
        return console.warn('THREE.Float32Attribute has been removed. Use new THREE.Float32BufferAttribute() instead.'), new Float32BufferAttribute(array, itemSize);
    }, exports1.Float32BufferAttribute = Float32BufferAttribute, exports1.Float64Attribute = function(array, itemSize) {
        return console.warn('THREE.Float64Attribute has been removed. Use new THREE.Float64BufferAttribute() instead.'), new Float64BufferAttribute(array, itemSize);
    }, exports1.Float64BufferAttribute = Float64BufferAttribute, exports1.FloatType = 1015, exports1.Fog = Fog, exports1.FogExp2 = FogExp2, exports1.Font = Font, exports1.FontLoader = FontLoader, exports1.FrontSide = 0, exports1.Frustum = Frustum, exports1.GLBufferAttribute = GLBufferAttribute, exports1.GLSL1 = '100', exports1.GLSL3 = GLSL3, exports1.GammaEncoding = 3007, exports1.Geometry = Geometry, exports1.GeometryUtils = {
        merge: function(geometry1, geometry2, materialIndexOffset) {
            var matrix;
            console.warn('THREE.GeometryUtils: .merge() has been moved to Geometry. Use geometry.merge( geometry2, matrix, materialIndexOffset ) instead.'), geometry2.isMesh && (geometry2.matrixAutoUpdate && geometry2.updateMatrix(), matrix = geometry2.matrix, geometry2 = geometry2.geometry), geometry1.merge(geometry2, matrix, materialIndexOffset);
        },
        center: function(geometry) {
            return console.warn('THREE.GeometryUtils: .center() has been moved to Geometry. Use geometry.center() instead.'), geometry.center();
        }
    }, exports1.GreaterDepth = 6, exports1.GreaterEqualDepth = 5, exports1.GreaterEqualStencilFunc = 518, exports1.GreaterStencilFunc = 516, exports1.GridHelper = GridHelper, exports1.Group = Group, exports1.HalfFloatType = 1016, exports1.HemisphereLight = HemisphereLight, exports1.HemisphereLightHelper = HemisphereLightHelper, exports1.HemisphereLightProbe = HemisphereLightProbe, exports1.IcosahedronBufferGeometry = IcosahedronBufferGeometry, exports1.IcosahedronGeometry = IcosahedronGeometry, exports1.ImageBitmapLoader = ImageBitmapLoader, exports1.ImageLoader = ImageLoader, exports1.ImageUtils = ImageUtils, exports1.ImmediateRenderObject = ImmediateRenderObject, exports1.IncrementStencilOp = 7682, exports1.IncrementWrapStencilOp = 34055, exports1.InstancedBufferAttribute = InstancedBufferAttribute, exports1.InstancedBufferGeometry = InstancedBufferGeometry, exports1.InstancedInterleavedBuffer = InstancedInterleavedBuffer, exports1.InstancedMesh = InstancedMesh, exports1.Int16Attribute = function(array, itemSize) {
        return console.warn('THREE.Int16Attribute has been removed. Use new THREE.Int16BufferAttribute() instead.'), new Int16BufferAttribute(array, itemSize);
    }, exports1.Int16BufferAttribute = Int16BufferAttribute, exports1.Int32Attribute = function(array, itemSize) {
        return console.warn('THREE.Int32Attribute has been removed. Use new THREE.Int32BufferAttribute() instead.'), new Int32BufferAttribute(array, itemSize);
    }, exports1.Int32BufferAttribute = Int32BufferAttribute, exports1.Int8Attribute = function(array, itemSize) {
        return console.warn('THREE.Int8Attribute has been removed. Use new THREE.Int8BufferAttribute() instead.'), new Int8BufferAttribute(array, itemSize);
    }, exports1.Int8BufferAttribute = Int8BufferAttribute, exports1.IntType = 1013, exports1.InterleavedBuffer = InterleavedBuffer, exports1.InterleavedBufferAttribute = InterleavedBufferAttribute, exports1.Interpolant = Interpolant, exports1.InterpolateDiscrete = 2300, exports1.InterpolateLinear = 2301, exports1.InterpolateSmooth = 2302, exports1.InvertStencilOp = 5386, exports1.JSONLoader = function() {
        console.error('THREE.JSONLoader has been removed.');
    }, exports1.KeepStencilOp = 7680, exports1.KeyframeTrack = KeyframeTrack, exports1.LOD = LOD, exports1.LatheBufferGeometry = LatheBufferGeometry, exports1.LatheGeometry = LatheGeometry, exports1.Layers = Layers, exports1.LensFlare = function() {
        console.error('THREE.LensFlare has been moved to /examples/jsm/objects/Lensflare.js');
    }, exports1.LessDepth = 2, exports1.LessEqualDepth = 3, exports1.LessEqualStencilFunc = 515, exports1.LessStencilFunc = 513, exports1.Light = Light, exports1.LightProbe = LightProbe, exports1.Line = Line, exports1.Line3 = Line3, exports1.LineBasicMaterial = LineBasicMaterial, exports1.LineCurve = LineCurve, exports1.LineCurve3 = LineCurve3, exports1.LineDashedMaterial = LineDashedMaterial, exports1.LineLoop = LineLoop, exports1.LinePieces = 1, exports1.LineSegments = LineSegments, exports1.LineStrip = 0, exports1.LinearEncoding = 3000, exports1.LinearFilter = 1006, exports1.LinearInterpolant = LinearInterpolant, exports1.LinearMipMapLinearFilter = 1008, exports1.LinearMipMapNearestFilter = 1007, exports1.LinearMipmapLinearFilter = 1008, exports1.LinearMipmapNearestFilter = 1007, exports1.LinearToneMapping = 1, exports1.Loader = Loader, exports1.LoaderUtils = LoaderUtils, exports1.LoadingManager = LoadingManager, exports1.LogLuvEncoding = 3003, exports1.LoopOnce = 2200, exports1.LoopPingPong = 2202, exports1.LoopRepeat = 2201, exports1.LuminanceAlphaFormat = 1025, exports1.LuminanceFormat = 1024, exports1.MOUSE = {
        LEFT: 0,
        MIDDLE: 1,
        RIGHT: 2,
        ROTATE: 0,
        DOLLY: 1,
        PAN: 2
    }, exports1.Material = Material, exports1.MaterialLoader = MaterialLoader, exports1.Math = MathUtils, exports1.MathUtils = MathUtils, exports1.Matrix3 = Matrix3, exports1.Matrix4 = Matrix4, exports1.MaxEquation = 104, exports1.Mesh = Mesh, exports1.MeshBasicMaterial = MeshBasicMaterial, exports1.MeshDepthMaterial = MeshDepthMaterial, exports1.MeshDistanceMaterial = MeshDistanceMaterial, exports1.MeshFaceMaterial = function(materials) {
        return console.warn('THREE.MeshFaceMaterial has been removed. Use an Array instead.'), materials;
    }, exports1.MeshLambertMaterial = MeshLambertMaterial, exports1.MeshMatcapMaterial = MeshMatcapMaterial, exports1.MeshNormalMaterial = MeshNormalMaterial, exports1.MeshPhongMaterial = MeshPhongMaterial, exports1.MeshPhysicalMaterial = MeshPhysicalMaterial, exports1.MeshStandardMaterial = MeshStandardMaterial, exports1.MeshToonMaterial = MeshToonMaterial, exports1.MinEquation = 103, exports1.MirroredRepeatWrapping = 1002, exports1.MixOperation = 1, exports1.MultiMaterial = function(materials) {
        return void 0 === materials && (materials = []), console.warn('THREE.MultiMaterial has been removed. Use an Array instead.'), materials.isMultiMaterial = !0, materials.materials = materials, materials.clone = function() {
            return materials.slice();
        }, materials;
    }, exports1.MultiplyBlending = 4, exports1.MultiplyOperation = 0, exports1.NearestFilter = 1003, exports1.NearestMipMapLinearFilter = 1005, exports1.NearestMipMapNearestFilter = 1004, exports1.NearestMipmapLinearFilter = 1005, exports1.NearestMipmapNearestFilter = 1004, exports1.NeverDepth = 0, exports1.NeverStencilFunc = 512, exports1.NoBlending = 0, exports1.NoColors = 0, exports1.NoToneMapping = 0, exports1.NormalAnimationBlendMode = 2500, exports1.NormalBlending = 1, exports1.NotEqualDepth = 7, exports1.NotEqualStencilFunc = 517, exports1.NumberKeyframeTrack = NumberKeyframeTrack, exports1.Object3D = Object3D, exports1.ObjectLoader = ObjectLoader, exports1.ObjectSpaceNormalMap = 1, exports1.OctahedronBufferGeometry = OctahedronBufferGeometry, exports1.OctahedronGeometry = OctahedronGeometry, exports1.OneFactor = 201, exports1.OneMinusDstAlphaFactor = 207, exports1.OneMinusDstColorFactor = 209, exports1.OneMinusSrcAlphaFactor = 205, exports1.OneMinusSrcColorFactor = 203, exports1.OrthographicCamera = OrthographicCamera, exports1.PCFShadowMap = 1, exports1.PCFSoftShadowMap = 2, exports1.PMREMGenerator = PMREMGenerator, exports1.ParametricBufferGeometry = ParametricBufferGeometry, exports1.ParametricGeometry = ParametricGeometry, exports1.Particle = function(material) {
        return console.warn('THREE.Particle has been renamed to THREE.Sprite.'), new Sprite(material);
    }, exports1.ParticleBasicMaterial = function(parameters) {
        return console.warn('THREE.ParticleBasicMaterial has been renamed to THREE.PointsMaterial.'), new PointsMaterial(parameters);
    }, exports1.ParticleSystem = function(geometry, material) {
        return console.warn('THREE.ParticleSystem has been renamed to THREE.Points.'), new Points(geometry, material);
    }, exports1.ParticleSystemMaterial = function(parameters) {
        return console.warn('THREE.ParticleSystemMaterial has been renamed to THREE.PointsMaterial.'), new PointsMaterial(parameters);
    }, exports1.Path = Path, exports1.PerspectiveCamera = PerspectiveCamera, exports1.Plane = Plane, exports1.PlaneBufferGeometry = PlaneBufferGeometry, exports1.PlaneGeometry = PlaneGeometry, exports1.PlaneHelper = PlaneHelper, exports1.PointCloud = function(geometry, material) {
        return console.warn('THREE.PointCloud has been renamed to THREE.Points.'), new Points(geometry, material);
    }, exports1.PointCloudMaterial = function(parameters) {
        return console.warn('THREE.PointCloudMaterial has been renamed to THREE.PointsMaterial.'), new PointsMaterial(parameters);
    }, exports1.PointLight = PointLight, exports1.PointLightHelper = PointLightHelper, exports1.Points = Points, exports1.PointsMaterial = PointsMaterial, exports1.PolarGridHelper = PolarGridHelper, exports1.PolyhedronBufferGeometry = PolyhedronBufferGeometry, exports1.PolyhedronGeometry = PolyhedronGeometry, exports1.PositionalAudio = PositionalAudio, exports1.PropertyBinding = PropertyBinding, exports1.PropertyMixer = PropertyMixer, exports1.QuadraticBezierCurve = QuadraticBezierCurve, exports1.QuadraticBezierCurve3 = QuadraticBezierCurve3, exports1.Quaternion = Quaternion, exports1.QuaternionKeyframeTrack = QuaternionKeyframeTrack, exports1.QuaternionLinearInterpolant = QuaternionLinearInterpolant, exports1.REVISION = '124', exports1.RGBADepthPacking = 3201, exports1.RGBAFormat = 1023, exports1.RGBAIntegerFormat = 1033, exports1.RGBA_ASTC_10x10_Format = 37819, exports1.RGBA_ASTC_10x5_Format = 37816, exports1.RGBA_ASTC_10x6_Format = 37817, exports1.RGBA_ASTC_10x8_Format = 37818, exports1.RGBA_ASTC_12x10_Format = 37820, exports1.RGBA_ASTC_12x12_Format = 37821, exports1.RGBA_ASTC_4x4_Format = 37808, exports1.RGBA_ASTC_5x4_Format = 37809, exports1.RGBA_ASTC_5x5_Format = 37810, exports1.RGBA_ASTC_6x5_Format = 37811, exports1.RGBA_ASTC_6x6_Format = 37812, exports1.RGBA_ASTC_8x5_Format = 37813, exports1.RGBA_ASTC_8x6_Format = 37814, exports1.RGBA_ASTC_8x8_Format = 37815, exports1.RGBA_BPTC_Format = 36492, exports1.RGBA_ETC2_EAC_Format = 37496, exports1.RGBA_PVRTC_2BPPV1_Format = 35843, exports1.RGBA_PVRTC_4BPPV1_Format = 35842, exports1.RGBA_S3TC_DXT1_Format = 33777, exports1.RGBA_S3TC_DXT3_Format = 33778, exports1.RGBA_S3TC_DXT5_Format = 33779, exports1.RGBDEncoding = 3006, exports1.RGBEEncoding = 3002, exports1.RGBEFormat = 1023, exports1.RGBFormat = 1022, exports1.RGBIntegerFormat = 1032, exports1.RGBM16Encoding = 3005, exports1.RGBM7Encoding = 3004, exports1.RGB_ETC1_Format = 36196, exports1.RGB_ETC2_Format = 37492, exports1.RGB_PVRTC_2BPPV1_Format = 35841, exports1.RGB_PVRTC_4BPPV1_Format = 35840, exports1.RGB_S3TC_DXT1_Format = 33776, exports1.RGFormat = 1030, exports1.RGIntegerFormat = 1031, exports1.RawShaderMaterial = RawShaderMaterial, exports1.Ray = Ray, exports1.Raycaster = Raycaster, exports1.RectAreaLight = RectAreaLight, exports1.RedFormat = 1028, exports1.RedIntegerFormat = 1029, exports1.ReinhardToneMapping = 2, exports1.RepeatWrapping = 1000, exports1.ReplaceStencilOp = 7681, exports1.ReverseSubtractEquation = 102, exports1.RingBufferGeometry = RingBufferGeometry, exports1.RingGeometry = RingGeometry, exports1.SRGB8_ALPHA8_ASTC_10x10_Format = 37851, exports1.SRGB8_ALPHA8_ASTC_10x5_Format = 37848, exports1.SRGB8_ALPHA8_ASTC_10x6_Format = 37849, exports1.SRGB8_ALPHA8_ASTC_10x8_Format = 37850, exports1.SRGB8_ALPHA8_ASTC_12x10_Format = 37852, exports1.SRGB8_ALPHA8_ASTC_12x12_Format = 37853, exports1.SRGB8_ALPHA8_ASTC_4x4_Format = 37840, exports1.SRGB8_ALPHA8_ASTC_5x4_Format = 37841, exports1.SRGB8_ALPHA8_ASTC_5x5_Format = 37842, exports1.SRGB8_ALPHA8_ASTC_6x5_Format = 37843, exports1.SRGB8_ALPHA8_ASTC_6x6_Format = 37844, exports1.SRGB8_ALPHA8_ASTC_8x5_Format = 37845, exports1.SRGB8_ALPHA8_ASTC_8x6_Format = 37846, exports1.SRGB8_ALPHA8_ASTC_8x8_Format = 37847, exports1.Scene = Scene, exports1.SceneUtils = {
        createMultiMaterialObject: function() {
            console.error('THREE.SceneUtils has been moved to /examples/jsm/utils/SceneUtils.js');
        },
        detach: function() {
            console.error('THREE.SceneUtils has been moved to /examples/jsm/utils/SceneUtils.js');
        },
        attach: function() {
            console.error('THREE.SceneUtils has been moved to /examples/jsm/utils/SceneUtils.js');
        }
    }, exports1.ShaderChunk = ShaderChunk, exports1.ShaderLib = ShaderLib, exports1.ShaderMaterial = ShaderMaterial, exports1.ShadowMaterial = ShadowMaterial, exports1.Shape = Shape, exports1.ShapeBufferGeometry = ShapeBufferGeometry, exports1.ShapeGeometry = ShapeGeometry, exports1.ShapePath = ShapePath, exports1.ShapeUtils = ShapeUtils, exports1.ShortType = 1011, exports1.Skeleton = Skeleton, exports1.SkeletonHelper = SkeletonHelper, exports1.SkinnedMesh = SkinnedMesh, exports1.SmoothShading = 2, exports1.Sphere = Sphere, exports1.SphereBufferGeometry = SphereBufferGeometry, exports1.SphereGeometry = SphereGeometry, exports1.Spherical = Spherical, exports1.SphericalHarmonics3 = SphericalHarmonics3, exports1.Spline = Spline, exports1.SplineCurve = SplineCurve, exports1.SplineCurve3 = SplineCurve3, exports1.SpotLight = SpotLight, exports1.SpotLightHelper = SpotLightHelper, exports1.Sprite = Sprite, exports1.SpriteMaterial = SpriteMaterial, exports1.SrcAlphaFactor = 204, exports1.SrcAlphaSaturateFactor = 210, exports1.SrcColorFactor = 202, exports1.StaticCopyUsage = 35046, exports1.StaticDrawUsage = 35044, exports1.StaticReadUsage = 35045, exports1.StereoCamera = StereoCamera, exports1.StreamCopyUsage = 35042, exports1.StreamDrawUsage = 35040, exports1.StreamReadUsage = 35041, exports1.StringKeyframeTrack = StringKeyframeTrack, exports1.SubtractEquation = 101, exports1.SubtractiveBlending = 3, exports1.TOUCH = {
        ROTATE: 0,
        PAN: 1,
        DOLLY_PAN: 2,
        DOLLY_ROTATE: 3
    }, exports1.TangentSpaceNormalMap = 0, exports1.TetrahedronBufferGeometry = TetrahedronBufferGeometry, exports1.TetrahedronGeometry = TetrahedronGeometry, exports1.TextBufferGeometry = TextBufferGeometry, exports1.TextGeometry = TextGeometry, exports1.Texture = Texture, exports1.TextureLoader = TextureLoader, exports1.TorusBufferGeometry = TorusBufferGeometry, exports1.TorusGeometry = TorusGeometry, exports1.TorusKnotBufferGeometry = TorusKnotBufferGeometry, exports1.TorusKnotGeometry = TorusKnotGeometry, exports1.Triangle = Triangle, exports1.TriangleFanDrawMode = 2, exports1.TriangleStripDrawMode = 1, exports1.TrianglesDrawMode = 0, exports1.TubeBufferGeometry = TubeBufferGeometry, exports1.TubeGeometry = TubeGeometry, exports1.UVMapping = 300, exports1.Uint16Attribute = function(array, itemSize) {
        return console.warn('THREE.Uint16Attribute has been removed. Use new THREE.Uint16BufferAttribute() instead.'), new Uint16BufferAttribute(array, itemSize);
    }, exports1.Uint16BufferAttribute = Uint16BufferAttribute, exports1.Uint32Attribute = function(array, itemSize) {
        return console.warn('THREE.Uint32Attribute has been removed. Use new THREE.Uint32BufferAttribute() instead.'), new Uint32BufferAttribute(array, itemSize);
    }, exports1.Uint32BufferAttribute = Uint32BufferAttribute, exports1.Uint8Attribute = function(array, itemSize) {
        return console.warn('THREE.Uint8Attribute has been removed. Use new THREE.Uint8BufferAttribute() instead.'), new Uint8BufferAttribute(array, itemSize);
    }, exports1.Uint8BufferAttribute = Uint8BufferAttribute, exports1.Uint8ClampedAttribute = function(array, itemSize) {
        return console.warn('THREE.Uint8ClampedAttribute has been removed. Use new THREE.Uint8ClampedBufferAttribute() instead.'), new Uint8ClampedBufferAttribute(array, itemSize);
    }, exports1.Uint8ClampedBufferAttribute = Uint8ClampedBufferAttribute, exports1.Uniform = Uniform, exports1.UniformsLib = UniformsLib, exports1.UniformsUtils = UniformsUtils, exports1.UnsignedByteType = 1009, exports1.UnsignedInt248Type = 1020, exports1.UnsignedIntType = 1014, exports1.UnsignedShort4444Type = 1017, exports1.UnsignedShort5551Type = 1018, exports1.UnsignedShort565Type = 1019, exports1.UnsignedShortType = 1012, exports1.VSMShadowMap = 3, exports1.Vector2 = Vector2, exports1.Vector3 = Vector3, exports1.Vector4 = Vector4, exports1.VectorKeyframeTrack = VectorKeyframeTrack, exports1.Vertex = function(x, y, z) {
        return console.warn('THREE.Vertex has been removed. Use THREE.Vector3 instead.'), new Vector3(x, y, z);
    }, exports1.VertexColors = 2, exports1.VideoTexture = VideoTexture, exports1.WebGL1Renderer = WebGL1Renderer, exports1.WebGLCubeRenderTarget = WebGLCubeRenderTarget, exports1.WebGLMultisampleRenderTarget = WebGLMultisampleRenderTarget, exports1.WebGLRenderTarget = WebGLRenderTarget, exports1.WebGLRenderTargetCube = function(width, height, options) {
        return console.warn('THREE.WebGLRenderTargetCube( width, height, options ) is now WebGLCubeRenderTarget( size, options ).'), new WebGLCubeRenderTarget(width, options);
    }, exports1.WebGLRenderer = WebGLRenderer, exports1.WebGLUtils = WebGLUtils, exports1.WireframeGeometry = WireframeGeometry, exports1.WireframeHelper = function(object, hex) {
        return console.warn('THREE.WireframeHelper has been removed. Use THREE.WireframeGeometry instead.'), new LineSegments(new WireframeGeometry(object.geometry), new LineBasicMaterial({
            color: void 0 !== hex ? hex : 0xffffff
        }));
    }, exports1.WrapAroundEnding = 2402, exports1.XHRLoader = function(manager) {
        return console.warn('THREE.XHRLoader has been renamed to THREE.FileLoader.'), new FileLoader(manager);
    }, exports1.ZeroCurvatureEnding = 2400, exports1.ZeroFactor = 200, exports1.ZeroSlopeEnding = 2401, exports1.ZeroStencilOp = 0, exports1.sRGBEncoding = 3001, Object.defineProperty(exports1, '__esModule', {
        value: !0
    });
});
