[package]
authors       = ["강동윤 <kdy1997.dev@gmail.com>"]
description   = "EcmaScript code minifier."
documentation = "https://rustdoc.swc.rs/swc_ecma_minifier/"
edition       = "2021"
include       = ["Cargo.toml", "src/**/*.rs", "src/lists/*.json"]
license       = "Apache-2.0"
name          = "swc_ecma_minifier"
repository    = "https://github.com/swc-project/swc.git"
version       = "0.200.4"

  [package.metadata.docs.rs]
  all-features = true
  rustdoc-args = ["--cfg", "docsrs"]

[lib]
bench = false

[features]
# This enables global concurrent mode
concurrent = [
  "swc_common/concurrent",
  "swc_ecma_transforms_base/concurrent-renamer",
  "swc_ecma_transforms_optimization/concurrent",
  "rayon",
  "indexmap/rayon",
]
debug = ["backtrace", "swc_ecma_transforms_optimization/debug"]
default = ["serde-impl"]
# Implement serialize/deserialize for more types
extra-serde = ["swc_ecma_ast/serde-impl", "serde-impl"]
serde-impl  = []
trace-ast   = []

[dependencies]
arrayvec          = { workspace = true }
backtrace         = { workspace = true, optional = true }
indexmap          = { workspace = true }
num-bigint        = { workspace = true }
num_cpus          = { workspace = true }
once_cell         = { workspace = true }
parking_lot       = { workspace = true }
phf               = { workspace = true }
pretty_assertions = { workspace = true, optional = true }
radix_fmt         = { workspace = true }
rayon             = { workspace = true, optional = true }
regex             = { workspace = true }
rustc-hash        = { workspace = true }
ryu-js            = { workspace = true }
serde             = { workspace = true, features = ["derive"] }
serde_json        = { workspace = true }
tracing           = { workspace = true }

swc_allocator = { version = "0.1.7", path = "../swc_allocator", default-features = false }
swc_atoms = { version = "0.6.5", path = "../swc_atoms" }
swc_common = { version = "0.36.0", path = "../swc_common" }
swc_config = { version = "0.1.13", path = "../swc_config", features = [
  "sourcemap",
] }
swc_ecma_ast = { version = "0.117.0", path = "../swc_ecma_ast", features = [
  "serde",
] }
swc_ecma_codegen = { version = "0.154.0", path = "../swc_ecma_codegen" }
swc_ecma_parser = { version = "0.148.0", path = "../swc_ecma_parser" }
swc_ecma_transforms_base = { version = "0.143.0", path = "../swc_ecma_transforms_base" }
swc_ecma_transforms_optimization = { version = "0.204.0", path = "../swc_ecma_transforms_optimization" }
swc_ecma_usage_analyzer = { version = "0.29.0", path = "../swc_ecma_usage_analyzer" }
swc_ecma_utils = { version = "0.133.0", path = "../swc_ecma_utils" }
swc_ecma_visit = { version = "0.103.0", path = "../swc_ecma_visit" }
swc_timer = { version = "0.24.0", path = "../swc_timer" }

[dev-dependencies]
ansi_term         = { workspace = true }
anyhow            = { workspace = true }
criterion         = { workspace = true }
pretty_assertions = { workspace = true }
walkdir           = { workspace = true }

codspeed-criterion-compat = { workspace = true }
swc_allocator             = { version = "0.1.7", path = "../swc_allocator" }
swc_ecma_testing          = { version = "0.25.0", path = "../swc_ecma_testing" }
swc_malloc                = { version = "0.5.10", path = "../swc_malloc" }
testing                   = { version = "0.38.0", path = "../testing" }

[[bench]]
harness = false
name    = "full"
