[package]
authors       = ["강동윤 <kdy1997.dev@gmail.com>"]
description   = "EcmaScript code minifier."
documentation = "https://rustdoc.swc.rs/swc_ecma_minifier/"
edition       = { workspace = true }
include       = ["Cargo.toml", "src/**/*.rs", "src/lists/*.json"]
license       = { workspace = true }
name          = "swc_ecma_minifier"
repository    = { workspace = true }
version       = "33.0.0"

  [package.metadata.docs.rs]
  all-features = true
  rustdoc-args = ["--cfg", "docsrs"]

[lib]
bench = false

[lints.rust]
unexpected_cfgs = { level = "warn", check-cfg = ['cfg(swc_ast_unknown)'] }

[features]
# This enables global concurrent mode
concurrent = [
  "swc_common/concurrent",
  "swc_ecma_transforms_base/concurrent-renamer",
  "swc_ecma_transforms_optimization/concurrent",
]
debug = [ "swc_ecma_transforms_optimization/debug"]
default = ["serde-impl"]
# Implement serialize/deserialize for more types
extra-serde = ["swc_ecma_ast/serde-impl", "serde-impl"]
serde-impl  = []
trace-ast   = []

[dependencies]
arrayvec          = { workspace = true }
bitflags          = { workspace = true }
indexmap          = { workspace = true }
num-bigint        = { workspace = true }
num_cpus          = { workspace = true }
once_cell         = { workspace = true }
par-core          = { workspace = true }
par-iter          = { workspace = true }
parking_lot       = { workspace = true }
phf               = { workspace = true }
pretty_assertions = { workspace = true, optional = true }
radix_fmt         = { workspace = true }
rustc-hash        = { workspace = true }
ryu-js            = { workspace = true }
serde             = { workspace = true, features = ["derive"] }
serde_json        = { workspace = true }
tracing           = { workspace = true }
swc_atoms = { version = "7.0.0", path = "../swc_atoms" }
swc_common = { version = "14.0.4", path = "../swc_common" }
swc_config = { version = "3.1.2", path = "../swc_config", features = [
  "sourcemap",
  "file_pattern",
  "regex_js",
] }
swc_ecma_ast = { version = "15.0.0", path = "../swc_ecma_ast", features = [
  "serde",
] }
swc_ecma_codegen = { version = "17.0.2", path = "../swc_ecma_codegen" }
swc_ecma_parser = { version = "24.0.3", path = "../swc_ecma_parser", default-features = false, features = ["typescript"] }
swc_ecma_transforms_base = { version = "27.0.0", path = "../swc_ecma_transforms_base" }
swc_ecma_transforms_optimization = { version = "29.0.0", path = "../swc_ecma_transforms_optimization" }
swc_ecma_usage_analyzer = { version = "22.0.1", path = "../swc_ecma_usage_analyzer" }
swc_ecma_utils = { version = "21.0.0", path = "../swc_ecma_utils" }
swc_ecma_visit = { version = "15.0.0", path = "../swc_ecma_visit" }
swc_timer = { version = "1.0.0", path = "../swc_timer" }

[dev-dependencies]
ansi_term                 = { workspace = true }
anyhow                    = { workspace = true }
codspeed-criterion-compat = { workspace = true }
flate2                    = { workspace = true }
humansize                 = { workspace = true }
par-core                  = { workspace = true, features = ["chili"] }
pretty_assertions         = { workspace = true }
walkdir                   = { workspace = true }
swc_ecma_testing = { version = "15.0.0", path = "../swc_ecma_testing" }
swc_malloc       = { version = "1.2.3", path = "../swc_malloc" }
testing          = { version = "15.0.0", path = "../testing" }

[[bench]]
harness = false
name    = "full"
