{
  "mappings": ";;;AAAA,SACIA,IAAI,EACJC,UAAU,EACVC,MAAM,EACNC,GAAG,EACHC,KAAK,EACLC,IAAI,EACJC,GAAG,EACHC,SAAS,EACTC,eAAe,QACZ,iBAAiB;AAExB,SACIC,qBAAqB,EACrBC,oBAAoB,EACpBC,qBAAqB,EACrBC,iBAAiB,EACjBC,4BAA4B,EAC5BC,oBAAoB,EACpBC,oBAAoB,QACjB,gCAAgC;AACvC,SAASC,kCAAkC,QAAQ,0DAA0D;AAC7G,SAASX,QAAQY,QAAQ,QAAQ,kCAAkC;AACnE,SAASC,WAAW,QAAQ,2BAA2B;AACvD,SAASC,aAAa,QAAQ,iCAAiC;AAC/D,SAASC,YAAY,QAAQ,mCAAmC;AAChE,SAASC,IAAI,QAAQ,mCAAmC;AACxD,SAASA,QAAQC,QAAQ,QAAQ,kCAAkC;AACnE,SAASC,gBAAgB,QAAQ,uCAAuC;AACxE,SAASC,cAAc,QAAQ,iCAAiC;AAChE,SAASC,OAAO,QAAQ,wCAAwC;AAIhE,OAAO,MAAMC;IACTC,YAAY,AAAQC,WAAwB,EAAE,AAAQC,cAA8B,CAAE;aAAlED,cAAAA;aAAkCC,iBAAAA;IAAkC;IAGjFC,WAAW;QACd,OAAO,IAAI,CAACF,WAAW,CAACG,MAAM;IAClC;IAGOC,QAAQ,AAAaC,EAAU,EAAE;QACpC,OAAO,IAAI,CAACL,WAAW,CAACM,OAAO,CAACD;IACpC;IAIOE,WAAW,AAAQC,aAA4B,EAAE,AAAQC,IAAc,EAAE;QAC5E,OAAO,IAAI,CAACT,WAAW,CAACU,MAAM,CAACF,eAAeC,KAAKJ,EAAE;IACzD;IAIOM,WACH,AAAaN,EAAU,EACvB,AAAQO,aAA4B,EACpC,AAAQH,IAAc,EACxB;QACE,OAAO,IAAI,CAACT,WAAW,CAACa,MAAM,CAACR,IAAIO,eAAeH,KAAKJ,EAAE;IAC7D;IAIOS,WAAW,AAAaT,EAAU,EAAE,AAAQI,IAAc,EAAE;QAC/D,OAAO,IAAI,CAACT,WAAW,CAACe,MAAM,CAACV,IAAII,KAAKJ,EAAE;IAC9C;IAKOW,kBACH,AAAaX,EAAU,EACvB,AAAQY,gBAAkC,EAC1C,AAAQR,IAAc,EACxB;QACE,OAAO,IAAI,CAACR,cAAc,CAACS,MAAM,CAACO,kBAAkBZ,IAAII,KAAKJ,EAAE;IACnE;AACJ;;IA1CK9B,IAAIQ;;;;GAHIe;;IAQRvB,IAAIS;IACWR,aAAAA,MAAM;;;;;;GATbsB;;IAaRnB,UAAUa;IACVf,KAAKS;IACad,aAAAA;IAAsCqB,aAAAA;;;eAAhB,yCAAA;eAA6B,oCAAA;;;GAf7DK;;IAmBRnB,UAAUa;IACVd,IAAIS;IAEAX,aAAAA,MAAM;IACNJ,aAAAA;IACAqB,aAAAA;;;;eADsB,yCAAA;eACT,oCAAA;;;GAxBTK;;IA6BRnB,UAAUa;IACVlB,OAAOQ;IACWN,aAAAA,MAAM;IAAmBiB,aAAAA;;;;eAAa,oCAAA;;;GA/BhDK;;IAmCRlB,gBAAgBQ,mCAAmCS;IACnDlB,UAAUa;IACVf,KAAKQ;IAEDT,aAAAA,MAAM;IACNJ,aAAAA;IACAqB,aAAAA;;;;eADyB,4CAAA;eACZ,oCAAA;;;GAzCTK;AAAAA;IAFZzB,WAAWQ;IACXD,gBAAgBQ,mCAAmCC;;;eAEf,uCAAA;eAAqC,0CAAA;;GAD7DS",
  "names": [
    "Body",
    "Controller",
    "Delete",
    "Get",
    "Param",
    "Post",
    "Put",
    "UseGuards",
    "UseInterceptors",
    "POST_CONTROLLER_ROUTE",
    "POST_DELETE_ENDPOINT",
    "POST_GET_ALL_ENDPOINT",
    "POST_GET_ENDPOINT",
    "POST_CREATE_COMMENT_ENDPOINT",
    "POST_CREATE_ENDPOINT",
    "POST_UPDATE_ENDPOINT",
    "MongooseClassSerializerInterceptor",
    "PostType",
    "PostService",
    "CreatePostDto",
    "JwtAuthGuard",
    "User",
    "UserType",
    "CreateCommentDto",
    "CommentService",
    "Comment",
    "PostController",
    "constructor",
    "postService",
    "commentService",
    "getPosts",
    "getAll",
    "getPost",
    "id",
    "getById",
    "createPost",
    "createPostDto",
    "user",
    "create",
    "updatePost",
    "updatePostDto",
    "update",
    "deletePost",
    "delete",
    "createPostComment",
    "createCommentDto"
  ],
  "rangeMappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;",
  "sources": [
    "../../input/PistController.ts"
  ],
  "sourcesContent": [
    "import {\n    Body,\n    Controller,\n    Delete,\n    Get,\n    Param,\n    Post,\n    Put,\n    UseGuards,\n    UseInterceptors,\n} from '@nestjs/common';\n\nimport {\n    POST_CONTROLLER_ROUTE,\n    POST_DELETE_ENDPOINT,\n    POST_GET_ALL_ENDPOINT,\n    POST_GET_ENDPOINT,\n    POST_CREATE_COMMENT_ENDPOINT,\n    POST_CREATE_ENDPOINT,\n    POST_UPDATE_ENDPOINT,\n} from '@server/constants/controllers';\nimport { MongooseClassSerializerInterceptor } from '@server/interceptors/MongooseClassSerializerInterceptor';\nimport { Post as PostType } from '@server/post/schemas/PostSchema';\nimport { PostService } from '@server/post/PostService';\nimport { CreatePostDto } from '@server/post/dto/CreatePostDto';\nimport { JwtAuthGuard } from '@server/auth/guards/JwtAuthGuard';\nimport { User } from '@server/decorators/UserDecorator';\nimport { User as UserType } from '@server/user/schemas/UserSchema';\nimport { CreateCommentDto } from '@server/comment/dto/CreateCommentDto';\nimport { CommentService } from '@server/comment/CommentService';\nimport { Comment } from '@server/comment/schemas/CommentSchema';\n\n@Controller(POST_CONTROLLER_ROUTE)\n@UseInterceptors(MongooseClassSerializerInterceptor(PostType))\nexport class PostController {\n    constructor(private postService: PostService, private commentService: CommentService) { }\n\n    @Get(POST_GET_ALL_ENDPOINT)\n    public getPosts() {\n        return this.postService.getAll();\n    }\n\n    @Get(POST_GET_ENDPOINT)\n    public getPost(@Param('id') id: string) {\n        return this.postService.getById(id);\n    }\n\n    @UseGuards(JwtAuthGuard)\n    @Post(POST_CREATE_ENDPOINT)\n    public createPost(@Body() createPostDto: CreatePostDto, @User() user: UserType) {\n        return this.postService.create(createPostDto, user.id);\n    }\n\n    @UseGuards(JwtAuthGuard)\n    @Put(POST_UPDATE_ENDPOINT)\n    public updatePost(\n        @Param('id') id: string,\n        @Body() updatePostDto: CreatePostDto,\n        @User() user: UserType,\n    ) {\n        return this.postService.update(id, updatePostDto, user.id);\n    }\n\n    @UseGuards(JwtAuthGuard)\n    @Delete(POST_DELETE_ENDPOINT)\n    public deletePost(@Param('id') id: string, @User() user: UserType) {\n        return this.postService.delete(id, user.id);\n    }\n\n    @UseInterceptors(MongooseClassSerializerInterceptor(Comment))\n    @UseGuards(JwtAuthGuard)\n    @Post(POST_CREATE_COMMENT_ENDPOINT)\n    public createPostComment(\n        @Param('id') id: string,\n        @Body() createCommentDto: CreateCommentDto,\n        @User() user: UserType,\n    ) {\n        return this.commentService.create(createCommentDto, id, user.id);\n    }\n}\n"
  ],
  "version": 3
}
