{
  "mappings": "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",
  "names": [
    "Body",
    "Controller",
    "Delete",
    "Get",
    "Param",
    "Post",
    "Put",
    "UseGuards",
    "UseInterceptors",
    "POST_CONTROLLER_ROUTE",
    "POST_DELETE_ENDPOINT",
    "POST_GET_ALL_ENDPOINT",
    "POST_GET_ENDPOINT",
    "POST_CREATE_COMMENT_ENDPOINT",
    "POST_CREATE_ENDPOINT",
    "POST_UPDATE_ENDPOINT",
    "MongooseClassSerializerInterceptor",
    "PostType",
    "PostService",
    "CreatePostDto",
    "JwtAuthGuard",
    "User",
    "UserType",
    "CreateCommentDto",
    "CommentService",
    "Comment",
    "PostController",
    "constructor",
    "postService",
    "commentService",
    "getPosts",
    "getAll",
    "getPost",
    "id",
    "getById",
    "createPost",
    "createPostDto",
    "user",
    "create",
    "updatePost",
    "updatePostDto",
    "update",
    "deletePost",
    "delete",
    "createPostComment",
    "createCommentDto"
  ],
  "sources": [
    "../../input/PistController.ts"
  ],
  "sourcesContent": [
    "import {\n    Body,\n    Controller,\n    Delete,\n    Get,\n    Param,\n    Post,\n    Put,\n    UseGuards,\n    UseInterceptors,\n} from '@nestjs/common';\n\nimport {\n    POST_CONTROLLER_ROUTE,\n    POST_DELETE_ENDPOINT,\n    POST_GET_ALL_ENDPOINT,\n    POST_GET_ENDPOINT,\n    POST_CREATE_COMMENT_ENDPOINT,\n    POST_CREATE_ENDPOINT,\n    POST_UPDATE_ENDPOINT,\n} from '@server/constants/controllers';\nimport { MongooseClassSerializerInterceptor } from '@server/interceptors/MongooseClassSerializerInterceptor';\nimport { Post as PostType } from '@server/post/schemas/PostSchema';\nimport { PostService } from '@server/post/PostService';\nimport { CreatePostDto } from '@server/post/dto/CreatePostDto';\nimport { JwtAuthGuard } from '@server/auth/guards/JwtAuthGuard';\nimport { User } from '@server/decorators/UserDecorator';\nimport { User as UserType } from '@server/user/schemas/UserSchema';\nimport { CreateCommentDto } from '@server/comment/dto/CreateCommentDto';\nimport { CommentService } from '@server/comment/CommentService';\nimport { Comment } from '@server/comment/schemas/CommentSchema';\n\n@Controller(POST_CONTROLLER_ROUTE)\n@UseInterceptors(MongooseClassSerializerInterceptor(PostType))\nexport class PostController {\n    constructor(private postService: PostService, private commentService: CommentService) { }\n\n    @Get(POST_GET_ALL_ENDPOINT)\n    public getPosts() {\n        return this.postService.getAll();\n    }\n\n    @Get(POST_GET_ENDPOINT)\n    public getPost(@Param('id') id: string) {\n        return this.postService.getById(id);\n    }\n\n    @UseGuards(JwtAuthGuard)\n    @Post(POST_CREATE_ENDPOINT)\n    public createPost(@Body() createPostDto: CreatePostDto, @User() user: UserType) {\n        return this.postService.create(createPostDto, user.id);\n    }\n\n    @UseGuards(JwtAuthGuard)\n    @Put(POST_UPDATE_ENDPOINT)\n    public updatePost(\n        @Param('id') id: string,\n        @Body() updatePostDto: CreatePostDto,\n        @User() user: UserType,\n    ) {\n        return this.postService.update(id, updatePostDto, user.id);\n    }\n\n    @UseGuards(JwtAuthGuard)\n    @Delete(POST_DELETE_ENDPOINT)\n    public deletePost(@Param('id') id: string, @User() user: UserType) {\n        return this.postService.delete(id, user.id);\n    }\n\n    @UseInterceptors(MongooseClassSerializerInterceptor(Comment))\n    @UseGuards(JwtAuthGuard)\n    @Post(POST_CREATE_COMMENT_ENDPOINT)\n    public createPostComment(\n        @Param('id') id: string,\n        @Body() createCommentDto: CreateCommentDto,\n        @User() user: UserType,\n    ) {\n        return this.commentService.create(createCommentDto, id, user.id);\n    }\n}\n"
  ],
  "version": 3
}
