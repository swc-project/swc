{
  "mappings": "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",
  "names": [
    "Body",
    "Controller",
    "Delete",
    "Get",
    "Param",
    "Post",
    "Put",
    "UseGuards",
    "UseInterceptors",
    "POST_CONTROLLER_ROUTE",
    "POST_DELETE_ENDPOINT",
    "POST_GET_ALL_ENDPOINT",
    "POST_GET_ENDPOINT",
    "POST_CREATE_COMMENT_ENDPOINT",
    "POST_CREATE_ENDPOINT",
    "POST_UPDATE_ENDPOINT",
    "MongooseClassSerializerInterceptor",
    "PostType",
    "PostService",
    "CreatePostDto",
    "JwtAuthGuard",
    "User",
    "UserType",
    "CreateCommentDto",
    "CommentService",
    "Comment",
    "PostController",
    "constructor",
    "postService",
    "commentService",
    "getPosts",
    "getAll",
    "getPost",
    "id",
    "getById",
    "createPost",
    "createPostDto",
    "user",
    "create",
    "updatePost",
    "updatePostDto",
    "update",
    "deletePost",
    "delete",
    "createPostComment",
    "createCommentDto"
  ],
  "sources": [
    "../../input/PistController.ts"
  ],
  "sourcesContent": [
    "import {\n    Body,\n    Controller,\n    Delete,\n    Get,\n    Param,\n    Post,\n    Put,\n    UseGuards,\n    UseInterceptors,\n} from '@nestjs/common';\n\nimport {\n    POST_CONTROLLER_ROUTE,\n    POST_DELETE_ENDPOINT,\n    POST_GET_ALL_ENDPOINT,\n    POST_GET_ENDPOINT,\n    POST_CREATE_COMMENT_ENDPOINT,\n    POST_CREATE_ENDPOINT,\n    POST_UPDATE_ENDPOINT,\n} from '@server/constants/controllers';\nimport { MongooseClassSerializerInterceptor } from '@server/interceptors/MongooseClassSerializerInterceptor';\nimport { Post as PostType } from '@server/post/schemas/PostSchema';\nimport { PostService } from '@server/post/PostService';\nimport { CreatePostDto } from '@server/post/dto/CreatePostDto';\nimport { JwtAuthGuard } from '@server/auth/guards/JwtAuthGuard';\nimport { User } from '@server/decorators/UserDecorator';\nimport { User as UserType } from '@server/user/schemas/UserSchema';\nimport { CreateCommentDto } from '@server/comment/dto/CreateCommentDto';\nimport { CommentService } from '@server/comment/CommentService';\nimport { Comment } from '@server/comment/schemas/CommentSchema';\n\n@Controller(POST_CONTROLLER_ROUTE)\n@UseInterceptors(MongooseClassSerializerInterceptor(PostType))\nexport class PostController {\n    constructor(private postService: PostService, private commentService: CommentService) { }\n\n    @Get(POST_GET_ALL_ENDPOINT)\n    public getPosts() {\n        return this.postService.getAll();\n    }\n\n    @Get(POST_GET_ENDPOINT)\n    public getPost(@Param('id') id: string) {\n        return this.postService.getById(id);\n    }\n\n    @UseGuards(JwtAuthGuard)\n    @Post(POST_CREATE_ENDPOINT)\n    public createPost(@Body() createPostDto: CreatePostDto, @User() user: UserType) {\n        return this.postService.create(createPostDto, user.id);\n    }\n\n    @UseGuards(JwtAuthGuard)\n    @Put(POST_UPDATE_ENDPOINT)\n    public updatePost(\n        @Param('id') id: string,\n        @Body() updatePostDto: CreatePostDto,\n        @User() user: UserType,\n    ) {\n        return this.postService.update(id, updatePostDto, user.id);\n    }\n\n    @UseGuards(JwtAuthGuard)\n    @Delete(POST_DELETE_ENDPOINT)\n    public deletePost(@Param('id') id: string, @User() user: UserType) {\n        return this.postService.delete(id, user.id);\n    }\n\n    @UseInterceptors(MongooseClassSerializerInterceptor(Comment))\n    @UseGuards(JwtAuthGuard)\n    @Post(POST_CREATE_COMMENT_ENDPOINT)\n    public createPostComment(\n        @Param('id') id: string,\n        @Body() createCommentDto: CreateCommentDto,\n        @User() user: UserType,\n    ) {\n        return this.commentService.create(createCommentDto, id, user.id);\n    }\n}\n"
  ],
  "version": 3
}
