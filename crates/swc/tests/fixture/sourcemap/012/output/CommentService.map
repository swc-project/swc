{
  "mappings": "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",
  "names": [
    "Model",
    "Connection",
    "MongooseConnection",
    "ForbiddenException",
    "Injectable",
    "InternalServerErrorException",
    "NotFoundException",
    "InjectModel",
    "InjectConnection",
    "Comment",
    "Post",
    "CommentService",
    "commentModel",
    "postModel",
    "connection",
    "getById",
    "commentId",
    "comment",
    "findById",
    "populate",
    "create",
    "postId",
    "userId",
    "session",
    "createdComment",
    "modifiedCount",
    "startSession",
    "startTransaction",
    "author",
    "updateOne",
    "_id",
    "$push",
    "comments",
    "id",
    "useFindAndModify",
    "commitTransaction",
    "abortTransaction",
    "endSession",
    "update",
    "updatedComment",
    "findByIdAndUpdate",
    "new",
    "delete",
    "deletedCount",
    "deleteOne",
    "$pull",
    "name"
  ],
  "sources": [
    "../../input/CommentService.ts"
  ],
  "sourcesContent": [
    "import { Model, Connection as MongooseConnection } from 'mongoose';\nimport {\n  ForbiddenException,\n  Injectable,\n  InternalServerErrorException,\n  NotFoundException,\n} from '@nestjs/common';\nimport { InjectModel, InjectConnection } from '@nestjs/mongoose';\n\nimport { Comment, CommentDocument } from '@server/comment/schemas/CommentSchema';\nimport { CreateCommentDto } from '@server/comment/dto/CreateCommentDto';\nimport { UpdateCommentDto } from '@server/comment/dto/UpdateCommentDto';\nimport { Post, PostDocument } from '@server/post/schemas/PostSchema';\n\n@Injectable()\nexport class CommentService {\n  constructor(\n    @InjectModel(Comment.name) private commentModel: Model<CommentDocument>,\n    @InjectModel(Post.name) private postModel: Model<PostDocument>,\n    @InjectConnection() private readonly connection: MongooseConnection,\n  ) {}\n\n  async getById(commentId: string): Promise<CommentDocument> {\n    const comment = await this.commentModel.findById(commentId);\n\n    if (!comment) {\n      throw new NotFoundException();\n    }\n\n    return comment.populate('author');\n  }\n\n  async create(\n    comment: CreateCommentDto,\n    postId: string,\n    userId: string,\n  ): Promise<CommentDocument> {\n    const session = await this.connection.startSession();\n\n    session.startTransaction();\n\n    try {\n      const createdComment = await this.commentModel.create({\n        ...comment,\n        author: userId,\n        postId,\n      });\n\n      if (!createdComment) {\n        throw new InternalServerErrorException('Comment was not created');\n      }\n\n      const { modifiedCount } = await this.postModel.updateOne(\n        { _id: createdComment.postId },\n        {\n          $push: { comments: createdComment.id },\n        },\n        { useFindAndModify: false },\n      );\n\n      if (modifiedCount === 0) {\n        throw new InternalServerErrorException('Comment was not created');\n      }\n\n      await session.commitTransaction();\n\n      return createdComment.populate('author');\n    } catch (error) {\n      await session.abortTransaction();\n\n      throw error;\n    } finally {\n      session.endSession();\n    }\n  }\n\n  async update(\n    commentId: string,\n    comment: UpdateCommentDto,\n    userId: string,\n  ): Promise<CommentDocument> {\n    const { author } = await this.getById(commentId);\n\n    if (author.id !== userId) {\n      throw new ForbiddenException();\n    }\n\n    const updatedComment = await this.commentModel.findByIdAndUpdate(commentId, comment, {\n      new: true,\n    });\n\n    if (!updatedComment) {\n      throw new InternalServerErrorException('Comment was not updated');\n    }\n\n    return updatedComment.populate('author');\n  }\n\n  async delete(commentId: string, userId: string): Promise<void> {\n    const session = await this.connection.startSession();\n\n    session.startTransaction();\n\n    try {\n      const { author, postId } = await this.getById(commentId);\n\n      if (author.id !== userId) {\n        throw new ForbiddenException();\n      }\n\n      const { deletedCount } = await this.commentModel.deleteOne({ _id: commentId });\n\n      const { modifiedCount } = await this.postModel.updateOne(\n        { _id: postId },\n        {\n          $pull: { comments: commentId },\n        },\n        { useFindAndModify: false },\n      );\n\n      if (deletedCount === 0 || modifiedCount === 0) {\n        throw new InternalServerErrorException('Comment was not deleted');\n      }\n\n      await session.commitTransaction();\n    } catch (error) {\n      await session.abortTransaction();\n\n      throw error;\n    } finally {\n      session.endSession();\n    }\n  }\n}\n"
  ],
  "version": 3
}
