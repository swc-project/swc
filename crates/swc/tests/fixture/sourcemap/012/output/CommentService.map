{
  "mappings": "AAAA;;;AAAA,SAASA,KAAK,AAAD,EAAGC,UAAU,IAAIC,kBAAkB,AAAD,QAAS,UAAS,CAAC;AAClE,SACEC,kBAAkB,AAAD,EACjBC,UAAU,AAAD,EACTC,4BAA4B,AAAD,EAC3BC,iBAAiB,AAAD,QACX,gBAAe,CAAC;AACvB,SAASC,WAAW,AAAD,EAAGC,gBAAgB,AAAD,QAAS,kBAAiB,CAAC;AAEhE,SAASC,OAAO,AAAD,QAA0B,uCAAsC,CAAC;AAGhF,SAASC,IAAI,AAAD,QAAuB,iCAAgC,CAAC;AAGpE,WAAaC,cAAc,GAApB;IACLC,YACqCC,YAAoC,EACvCC,SAA8B,EACzBC,UAA8B,CACnE;QAHmCF,oBAAAA,YAAoC,AAAD,CAAC;QACvCC,iBAAAA,SAA8B,AAAD,CAAC;QACzBC,kBAAAA,UAA8B,AAAD,CAAC;KAClE;UAEGC,OAAO,CAACC,SAAiB,AAAD,EAA6B;QACzD,MAAMC,OAAO,GAAG,MAAM,IAAI,CAACL,YAAY,AAAD,CAAEM,QAAQ,AAAD,CAAEF,SAAS,CAAA,AAAC;QAE3D,IAAI,CAACC,OAAO,AAAD,EAAG;YACZ,MAAM,IAAIZ,iBAAiB,EAAC,CAAC;SAC/B;QAEA,OAAOY,OAAO,CAACE,QAAQ,AAAD,CAAE,QAAO,CAAC,CAAC;KACnC;UAEMC,MAAM,CACVH,OAAyB,AAAD,EACxBI,MAAc,AAAD,EACbC,MAAc,AAAD,EACa;QAC1B,MAAMC,OAAO,GAAG,MAAM,IAAI,CAACT,UAAU,AAAD,CAAEU,YAAY,AAAD,EAAE,AAAC;QAEpDD,OAAO,CAACE,gBAAgB,AAAD,EAAE,AAAC,CAAC;QAE3B,IAAI;YACF,MAAMC,cAAc,GAAG,MAAM,IAAI,CAACd,YAAY,AAAD,CAAEQ,MAAM,AAAD,CAAE;gBACpD,GAAGH,OAAO,AAAD;gBACTU,MAAM,EAAEL,MAAM;gBACdD,MAAM;aACR,CAAC,AAAC;YAEF,IAAI,CAACK,cAAc,AAAD,EAAG;gBACnB,MAAM,IAAItB,4BAA4B,CAAC,yBAAwB,CAAC,CAAC;aACnE;YAEA,MAAM,EAAEwB,aAAa,CAAD,EAAE,GAAI,MAAM,IAAI,CAACf,SAAS,AAAD,CAAEgB,SAAS,AAAD,CACrD;gBAAEC,GAAG,EAAEJ,cAAc,CAACL,MAAM,AAAD;aAAE,EAC7B;gBACEU,KAAK,EAAE;oBAAEC,QAAQ,EAAEN,cAAc,CAACO,EAAE,AAAD;iBAAE,AAAC;aACxC,EACA;gBAAEC,gBAAgB,EAAE,KAAK;aAAC,CAC5B,AAAC;YAED,IAAIN,aAAa,KAAK,CAAC,AAAD,EAAG;gBACvB,MAAM,IAAIxB,4BAA4B,CAAC,yBAAwB,CAAC,CAAC;aACnE;YAEA,MAAMmB,OAAO,CAACY,iBAAiB,AAAD,EAAE,AAAC,CAAC;YAElC,OAAOT,cAAc,CAACP,QAAQ,AAAD,CAAE,QAAO,CAAC,CAAC;SAC1C,CAAE,OAAOiB,KAAK,EAAE;YACd,MAAMb,OAAO,CAACc,gBAAgB,AAAD,EAAE,AAAC,CAAC;YAEjC,MAAMD,KAAK,CAAA;SACb,QAAU;YACRb,OAAO,CAACe,UAAU,AAAD,EAAE,AAAC,CAAC;SACvB;KACF;UAEMC,MAAM,CACVvB,SAAiB,AAAD,EAChBC,OAAyB,AAAD,EACxBK,MAAc,AAAD,EACa;QAC1B,MAAM,EAAEK,MAAM,CAAD,EAAE,GAAI,MAAM,IAAI,CAACZ,OAAO,AAAD,CAAEC,SAAS,CAAA,AAAC;QAEhD,IAAIW,MAAM,CAACM,EAAE,AAAD,KAAMX,MAAM,AAAD,EAAG;YACxB,MAAM,IAAIpB,kBAAkB,EAAC,CAAC;SAChC;QAEA,MAAMsC,cAAc,GAAG,MAAM,IAAI,CAAC5B,YAAY,AAAD,CAAE6B,iBAAiB,AAAD,CAAEzB,SAAS,EAAEC,OAAO,EAAE;YACnFyB,GAAG,EAAE,IAAI;SACX,CAAC,AAAC;QAEF,IAAI,CAACF,cAAc,AAAD,EAAG;YACnB,MAAM,IAAIpC,4BAA4B,CAAC,yBAAwB,CAAC,CAAC;SACnE;QAEA,OAAOoC,cAAc,CAACrB,QAAQ,AAAD,CAAE,QAAO,CAAC,CAAC;KAC1C;UAEMwB,MAAM,CAAC3B,SAAiB,AAAD,EAAGM,MAAc,AAAD,EAAkB;QAC7D,MAAMC,OAAO,GAAG,MAAM,IAAI,CAACT,UAAU,AAAD,CAAEU,YAAY,AAAD,EAAE,AAAC;QAEpDD,OAAO,CAACE,gBAAgB,AAAD,EAAE,AAAC,CAAC;QAE3B,IAAI;YACF,MAAM,EAAEE,MAAM,CAAD,EAAGN,MAAM,CAAD,EAAE,GAAI,MAAM,IAAI,CAACN,OAAO,AAAD,CAAEC,SAAS,CAAA,AAAC;YAExD,IAAIW,MAAM,CAACM,EAAE,AAAD,KAAMX,MAAM,AAAD,EAAG;gBACxB,MAAM,IAAIpB,kBAAkB,EAAC,CAAC;aAChC;YAEA,MAAM,EAAE0C,YAAY,CAAD,EAAE,GAAI,MAAM,IAAI,CAAChC,YAAY,AAAD,CAAEiC,SAAS,AAAD,CAAE;gBAAEf,GAAG,EAAEd,SAAS;aAAC,CAAC,AAAC;YAE9E,MAAM,EAAEY,aAAa,CAAD,EAAE,GAAI,MAAM,IAAI,CAACf,SAAS,AAAD,CAAEgB,SAAS,AAAD,CACrD;gBAAEC,GAAG,EAAET,MAAM;aAAC,EACd;gBACEyB,KAAK,EAAE;oBAAEd,QAAQ,EAAEhB,SAAS;iBAAC,AAAC;aAChC,EACA;gBAAEkB,gBAAgB,EAAE,KAAK;aAAC,CAC5B,AAAC;YAED,IAAIU,YAAY,KAAK,CAAC,IAAIhB,aAAa,KAAK,CAAC,AAAD,EAAG;gBAC7C,MAAM,IAAIxB,4BAA4B,CAAC,yBAAwB,CAAC,CAAC;aACnE;YAEA,MAAMmB,OAAO,CAACY,iBAAiB,AAAD,EAAE,AAAC,CAAC;SACpC,CAAE,OAAOC,KAAK,EAAE;YACd,MAAMb,OAAO,CAACc,gBAAgB,AAAD,EAAE,AAAC,CAAC;YAEjC,MAAMD,KAAK,CAAA;SACb,QAAU;YACRb,OAAO,CAACe,UAAU,AAAD,EAAE,AAAC,CAAC;SACvB;KACF;CACF,CAAA;AAtHa5B,cAAc;IAD1BP,UAAU,EAAC;IAGPG,aAAAA,WAAW,CAACE,OAAO,CAACuC,IAAI,AAAD,CAAC,CAAA;IACxBzC,aAAAA,WAAW,CAACG,IAAI,CAACsC,IAAI,AAAD,CAAC,CAAA;IACrBxC,aAAAA,gBAAgB,EAAC,CAAA;;;eAF+B,KAAK,4BAAL,KAAK;eACX,KAAK,4BAAL,KAAK;eACC,kBAAkB,4BAAlB,kBAAkB;;GAJ1DG,cAAc",
  "names": [
    "Model",
    "Connection",
    "MongooseConnection",
    "ForbiddenException",
    "Injectable",
    "InternalServerErrorException",
    "NotFoundException",
    "InjectModel",
    "InjectConnection",
    "Comment",
    "Post",
    "CommentService",
    "constructor",
    "commentModel",
    "postModel",
    "connection",
    "getById",
    "commentId",
    "comment",
    "findById",
    "populate",
    "create",
    "postId",
    "userId",
    "session",
    "startSession",
    "startTransaction",
    "createdComment",
    "author",
    "modifiedCount",
    "updateOne",
    "_id",
    "$push",
    "comments",
    "id",
    "useFindAndModify",
    "commitTransaction",
    "error",
    "abortTransaction",
    "endSession",
    "update",
    "updatedComment",
    "findByIdAndUpdate",
    "new",
    "delete",
    "deletedCount",
    "deleteOne",
    "$pull",
    "name"
  ],
  "sources": [
    "../../input/CommentService.ts"
  ],
  "sourcesContent": [
    "import { Model, Connection as MongooseConnection } from 'mongoose';\nimport {\n  ForbiddenException,\n  Injectable,\n  InternalServerErrorException,\n  NotFoundException,\n} from '@nestjs/common';\nimport { InjectModel, InjectConnection } from '@nestjs/mongoose';\n\nimport { Comment, CommentDocument } from '@server/comment/schemas/CommentSchema';\nimport { CreateCommentDto } from '@server/comment/dto/CreateCommentDto';\nimport { UpdateCommentDto } from '@server/comment/dto/UpdateCommentDto';\nimport { Post, PostDocument } from '@server/post/schemas/PostSchema';\n\n@Injectable()\nexport class CommentService {\n  constructor(\n    @InjectModel(Comment.name) private commentModel: Model<CommentDocument>,\n    @InjectModel(Post.name) private postModel: Model<PostDocument>,\n    @InjectConnection() private readonly connection: MongooseConnection,\n  ) {}\n\n  async getById(commentId: string): Promise<CommentDocument> {\n    const comment = await this.commentModel.findById(commentId);\n\n    if (!comment) {\n      throw new NotFoundException();\n    }\n\n    return comment.populate('author');\n  }\n\n  async create(\n    comment: CreateCommentDto,\n    postId: string,\n    userId: string,\n  ): Promise<CommentDocument> {\n    const session = await this.connection.startSession();\n\n    session.startTransaction();\n\n    try {\n      const createdComment = await this.commentModel.create({\n        ...comment,\n        author: userId,\n        postId,\n      });\n\n      if (!createdComment) {\n        throw new InternalServerErrorException('Comment was not created');\n      }\n\n      const { modifiedCount } = await this.postModel.updateOne(\n        { _id: createdComment.postId },\n        {\n          $push: { comments: createdComment.id },\n        },\n        { useFindAndModify: false },\n      );\n\n      if (modifiedCount === 0) {\n        throw new InternalServerErrorException('Comment was not created');\n      }\n\n      await session.commitTransaction();\n\n      return createdComment.populate('author');\n    } catch (error) {\n      await session.abortTransaction();\n\n      throw error;\n    } finally {\n      session.endSession();\n    }\n  }\n\n  async update(\n    commentId: string,\n    comment: UpdateCommentDto,\n    userId: string,\n  ): Promise<CommentDocument> {\n    const { author } = await this.getById(commentId);\n\n    if (author.id !== userId) {\n      throw new ForbiddenException();\n    }\n\n    const updatedComment = await this.commentModel.findByIdAndUpdate(commentId, comment, {\n      new: true,\n    });\n\n    if (!updatedComment) {\n      throw new InternalServerErrorException('Comment was not updated');\n    }\n\n    return updatedComment.populate('author');\n  }\n\n  async delete(commentId: string, userId: string): Promise<void> {\n    const session = await this.connection.startSession();\n\n    session.startTransaction();\n\n    try {\n      const { author, postId } = await this.getById(commentId);\n\n      if (author.id !== userId) {\n        throw new ForbiddenException();\n      }\n\n      const { deletedCount } = await this.commentModel.deleteOne({ _id: commentId });\n\n      const { modifiedCount } = await this.postModel.updateOne(\n        { _id: postId },\n        {\n          $pull: { comments: commentId },\n        },\n        { useFindAndModify: false },\n      );\n\n      if (deletedCount === 0 || modifiedCount === 0) {\n        throw new InternalServerErrorException('Comment was not deleted');\n      }\n\n      await session.commitTransaction();\n    } catch (error) {\n      await session.abortTransaction();\n\n      throw error;\n    } finally {\n      session.endSession();\n    }\n  }\n}\n"
  ],
  "version": 3
}
