{
  "mappings": "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",
  "names": [
    "Model",
    "Connection",
    "MongooseConnection",
    "ForbiddenException",
    "Injectable",
    "InternalServerErrorException",
    "NotFoundException",
    "InjectModel",
    "InjectConnection",
    "Comment",
    "Post",
    "CommentService",
    "constructor",
    "commentModel",
    "postModel",
    "connection",
    "getById",
    "commentId",
    "comment",
    "findById",
    "populate",
    "create",
    "postId",
    "userId",
    "session",
    "startSession",
    "startTransaction",
    "createdComment",
    "author",
    "modifiedCount",
    "updateOne",
    "_id",
    "$push",
    "comments",
    "id",
    "useFindAndModify",
    "commitTransaction",
    "error",
    "abortTransaction",
    "endSession",
    "update",
    "updatedComment",
    "findByIdAndUpdate",
    "new",
    "delete",
    "deletedCount",
    "deleteOne",
    "$pull",
    "name"
  ],
  "sources": [
    "../../input/CommentService.ts"
  ],
  "sourcesContent": [
    "import { Model, Connection as MongooseConnection } from 'mongoose';\nimport {\n  ForbiddenException,\n  Injectable,\n  InternalServerErrorException,\n  NotFoundException,\n} from '@nestjs/common';\nimport { InjectModel, InjectConnection } from '@nestjs/mongoose';\n\nimport { Comment, CommentDocument } from '@server/comment/schemas/CommentSchema';\nimport { CreateCommentDto } from '@server/comment/dto/CreateCommentDto';\nimport { UpdateCommentDto } from '@server/comment/dto/UpdateCommentDto';\nimport { Post, PostDocument } from '@server/post/schemas/PostSchema';\n\n@Injectable()\nexport class CommentService {\n  constructor(\n    @InjectModel(Comment.name) private commentModel: Model<CommentDocument>,\n    @InjectModel(Post.name) private postModel: Model<PostDocument>,\n    @InjectConnection() private readonly connection: MongooseConnection,\n  ) {}\n\n  async getById(commentId: string): Promise<CommentDocument> {\n    const comment = await this.commentModel.findById(commentId);\n\n    if (!comment) {\n      throw new NotFoundException();\n    }\n\n    return comment.populate('author');\n  }\n\n  async create(\n    comment: CreateCommentDto,\n    postId: string,\n    userId: string,\n  ): Promise<CommentDocument> {\n    const session = await this.connection.startSession();\n\n    session.startTransaction();\n\n    try {\n      const createdComment = await this.commentModel.create({\n        ...comment,\n        author: userId,\n        postId,\n      });\n\n      if (!createdComment) {\n        throw new InternalServerErrorException('Comment was not created');\n      }\n\n      const { modifiedCount } = await this.postModel.updateOne(\n        { _id: createdComment.postId },\n        {\n          $push: { comments: createdComment.id },\n        },\n        { useFindAndModify: false },\n      );\n\n      if (modifiedCount === 0) {\n        throw new InternalServerErrorException('Comment was not created');\n      }\n\n      await session.commitTransaction();\n\n      return createdComment.populate('author');\n    } catch (error) {\n      await session.abortTransaction();\n\n      throw error;\n    } finally {\n      session.endSession();\n    }\n  }\n\n  async update(\n    commentId: string,\n    comment: UpdateCommentDto,\n    userId: string,\n  ): Promise<CommentDocument> {\n    const { author } = await this.getById(commentId);\n\n    if (author.id !== userId) {\n      throw new ForbiddenException();\n    }\n\n    const updatedComment = await this.commentModel.findByIdAndUpdate(commentId, comment, {\n      new: true,\n    });\n\n    if (!updatedComment) {\n      throw new InternalServerErrorException('Comment was not updated');\n    }\n\n    return updatedComment.populate('author');\n  }\n\n  async delete(commentId: string, userId: string): Promise<void> {\n    const session = await this.connection.startSession();\n\n    session.startTransaction();\n\n    try {\n      const { author, postId } = await this.getById(commentId);\n\n      if (author.id !== userId) {\n        throw new ForbiddenException();\n      }\n\n      const { deletedCount } = await this.commentModel.deleteOne({ _id: commentId });\n\n      const { modifiedCount } = await this.postModel.updateOne(\n        { _id: postId },\n        {\n          $pull: { comments: commentId },\n        },\n        { useFindAndModify: false },\n      );\n\n      if (deletedCount === 0 || modifiedCount === 0) {\n        throw new InternalServerErrorException('Comment was not deleted');\n      }\n\n      await session.commitTransaction();\n    } catch (error) {\n      await session.abortTransaction();\n\n      throw error;\n    } finally {\n      session.endSession();\n    }\n  }\n}\n"
  ],
  "version": 3
}
