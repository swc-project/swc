{
  "mappings": ";;AAAAA,EAAE,CAAC,CAA6D,kHAAE,QAAQ,WAAI,CAAC;QACrEC,KAAK,EACLC,IAAI,EAQJC,IAAI,EAQJC,IAAI,EAQJC,IAAI,EACJC,IAAI,EACJC,IAAI;;;;gBA3BJN,KAAK,GAAG,CAAC;oBAACO,GAAG,EAAE,CAAW;oBAAEC,CAAC,EAADA,CAAC;oBAAEC,CAAC,EAAE,EAAE;gBAAC,CAAC,AADhD;6BAAA;uBAEuBC,YAAY,CAACC,OAAO,EAAE,CAAc,eAAEX,KAAK,EAAE,CAAC;oBAC7DY,OAAO,EAAE,CAAC;wBACNC,MAAM,EAAE,CAAY;oBACxB,CAAC;gBACL,CAAC;;gBAJKZ,IAAI,YAFdF,CAMM;gBACFe,MAAM,CAACb,IAAI,CAACc,MAAM,EAAEC,IAAI,CAAC,GAAG,CAPhC;gBAQIF,MAAM,CAACb,IAAI,CAACW,OAAO,CAACK,GAAG,CAAC,CAAc,gBAAGD,IAAI,CAAC,CAAY,YAR9D;6BAAA;uBAUuBN,YAAY,CAACC,OAAO,EAAE,CAAc,eAAEX,KAAK,EAAE,CAAC;oBAC7DY,OAAO,EAAE,CAAC;wBACNC,MAAM,EAAE,CAAY;oBACxB,CAAC;gBACL,CAAC;;gBAJKX,IAAI,YAVdH,CAcM;gBACFe,MAAM,CAACZ,IAAI,CAACa,MAAM,EAAEC,IAAI,CAAC,GAAG,CAfhC;gBAgBIF,MAAM,CAACZ,IAAI,CAACU,OAAO,CAACK,GAAG,CAAC,CAAc,gBAAGD,IAAI,CAAC,CAAY,YAhB9D;8BAAA;uBAkBuBN,YAAY,CAACC,OAAO,EAAE,CAAc,eAAEX,KAAK,EAAE,CAAC;oBAC7DY,OAAO,EAAE,CAAC;wBACNC,MAAM,EAAE,CAAY;oBACxB,CAAC;gBACL,CAAC;;gBAJKV,IAAI,YAlBdJ,CAsBM;gBACFe,MAAM,CAACX,IAAI,CAACY,MAAM,EAAEC,IAAI,CAAC,GAAG,CAvBhC;gBAwBIF,MAAM,CAACX,IAAI,CAACS,OAAO,CAACK,GAAG,CAAC,CAAc,gBAAGD,IAAI,CAAC,CAAY,YAxB9D;8BAAA;uBA0BwBf,IAAI,CAACiB,MAAM;;gBAAzBd,IAAI,aAAyBe,UAAU,AA1BjDpB,CA0BiD;8BA1BjD;uBA2BwBG,IAAI,CAACgB,MAAM;;gBAAzBb,IAAI,aAAyBc,UAAU,AA3BjDpB,CA2BiD;8BA3BjD;uBA4BwBI,IAAI,CAACe,MAAM;;gBAAzBZ,IAAI,aAAyBa,UAAU,AA5BjDpB,CA4BiD;gBAE7CqB,OAAO,CAACC,GAAG,CAAC,CAAC;oBAACC,OAAO,EAAPA,OAAO;oBAAEd,CAAC,EAADA,CAAC;oBAAEJ,IAAI,EAAJA,IAAI;oBAAEC,IAAI,EAAJA,IAAI;oBAAEC,IAAI,EAAJA,IAAI;gBAAC,CAAC,CA9BhD;gBAgCIQ,MAAM,CAACT,IAAI,EAAEkB,YAAY,CAACjB,IAAI,CAhClC;gBAiCIQ,MAAM,CAACV,IAAI,EAAEmB,YAAY,CAAClB,IAAI,CAjClC;;;;;;AAkCA,CAAC,GAlCD",
  "names": [
    "it",
    "query",
    "res1",
    "res2",
    "res3",
    "avif",
    "webp",
    "jpeg",
    "url",
    "w",
    "q",
    "fetchViaHTTP",
    "appPort",
    "headers",
    "accept",
    "expect",
    "status",
    "toBe",
    "get",
    "buffer",
    "byteLength",
    "console",
    "log",
    "isSharp",
    "toBeLessThan"
  ],
  "sources": [
    "../../input/index.js"
  ],
  "sourcesContent": [
    "it('should compress avif smaller than webp and smaller than jpg', async () => {\n    const query = { url: '/test.jpg', w, q: 75 }\n    const res1 = await fetchViaHTTP(appPort, '/_next/image', query, {\n        headers: {\n            accept: 'image/avif',\n        },\n    })\n    expect(res1.status).toBe(200)\n    expect(res1.headers.get('Content-Type')).toBe('image/avif')\n\n    const res2 = await fetchViaHTTP(appPort, '/_next/image', query, {\n        headers: {\n            accept: 'image/webp',\n        },\n    })\n    expect(res2.status).toBe(200)\n    expect(res2.headers.get('Content-Type')).toBe('image/webp')\n\n    const res3 = await fetchViaHTTP(appPort, '/_next/image', query, {\n        headers: {\n            accept: 'image/jpeg',\n        },\n    })\n    expect(res3.status).toBe(200)\n    expect(res3.headers.get('Content-Type')).toBe('image/jpeg')\n\n    const avif = (await res1.buffer()).byteLength\n    const webp = (await res2.buffer()).byteLength\n    const jpeg = (await res3.buffer()).byteLength\n\n    console.log({ isSharp, w, avif, webp, jpeg })\n\n    expect(webp).toBeLessThan(jpeg)\n    expect(avif).toBeLessThan(webp)\n})"
  ],
  "version": 3
}
