{
  "mappings": "AAAAA;;AAAAA,EAAE,CAAC,6DAA4D,gBAAG,0DAAA,mBAAY;QACpEC,KAAK,EACLC,IAAI,EAQJC,IAAI,EAQJC,IAAI,EAQJC,IAAI,EACJC,IAAI,EACJC,IAAI;;;;gBA3BJN,KAAK,GAAG;oBAAEO,GAAG,EAAE,WAAU,AAAC;oBAAEC,CAAC,EAADA,CAAC;oBAAEC,CAAC,EAAE,EAAE;iBAAC,AAAC,CAAC;;uBAC1BC,YAAY,CAACC,OAAO,EAAE,cAAa,EAAGX,KAAK,EAAE;oBAC5DY,OAAO,EAAE;wBACLC,MAAM,EAAE,YAAW,AAAC;qBACxB,AAAC;iBACL,CAAC;;gBAJKZ,IAAI,YAIT,CAAC;gBACFa,MAAM,CAACb,IAAI,CAACc,MAAM,AAAD,CAAC,CAAEC,IAAI,AAAD,CAAE,GAAG,CAAA,AAAC,CAAC;gBAC9BF,MAAM,CAACb,IAAI,CAACW,OAAO,AAAD,CAAEK,GAAG,AAAD,CAAE,cAAa,CAAC,CAAC,CAAED,IAAI,AAAD,CAAE,YAAW,CAAC,AAAC,CAAC;;uBAEzCN,YAAY,CAACC,OAAO,EAAE,cAAa,EAAGX,KAAK,EAAE;oBAC5DY,OAAO,EAAE;wBACLC,MAAM,EAAE,YAAW,AAAC;qBACxB,AAAC;iBACL,CAAC;;gBAJKX,IAAI,YAIT,CAAC;gBACFY,MAAM,CAACZ,IAAI,CAACa,MAAM,AAAD,CAAC,CAAEC,IAAI,AAAD,CAAE,GAAG,CAAA,AAAC,CAAC;gBAC9BF,MAAM,CAACZ,IAAI,CAACU,OAAO,AAAD,CAAEK,GAAG,AAAD,CAAE,cAAa,CAAC,CAAC,CAAED,IAAI,AAAD,CAAE,YAAW,CAAC,AAAC,CAAC;;uBAEzCN,YAAY,CAACC,OAAO,EAAE,cAAa,EAAGX,KAAK,EAAE;oBAC5DY,OAAO,EAAE;wBACLC,MAAM,EAAE,YAAW,AAAC;qBACxB,AAAC;iBACL,CAAC;;gBAJKV,IAAI,YAIT,CAAC;gBACFW,MAAM,CAACX,IAAI,CAACY,MAAM,AAAD,CAAC,CAAEC,IAAI,AAAD,CAAE,GAAG,CAAA,AAAC,CAAC;gBAC9BF,MAAM,CAACX,IAAI,CAACS,OAAO,AAAD,CAAEK,GAAG,AAAD,CAAE,cAAa,CAAC,CAAC,CAAED,IAAI,AAAD,CAAE,YAAW,CAAC,AAAC,CAAC;;uBAExCf,IAAI,CAACiB,MAAM,AAAD,EAAE;;gBAA1Bd,IAAI,GAAG,UAAsBe,UAAU,AAAD,CAAC;;uBACzBjB,IAAI,CAACgB,MAAM,AAAD,EAAE;;gBAA1Bb,IAAI,GAAG,UAAsBc,UAAU,AAAD,CAAC;;uBACzBhB,IAAI,CAACe,MAAM,AAAD,EAAE;;gBAA1BZ,IAAI,GAAG,UAAsBa,UAAU,AAAD,CAAC;gBAE7CC,OAAO,CAACC,GAAG,AAAD,CAAE;oBAAEC,OAAO,EAAPA,OAAO;oBAAEd,CAAC,EAADA,CAAC;oBAAEJ,IAAI,EAAJA,IAAI;oBAAEC,IAAI,EAAJA,IAAI;oBAAEC,IAAI,EAAJA,IAAI;iBAAC,CAAC,AAAC,CAAC;gBAE9CQ,MAAM,CAACT,IAAI,CAAA,CAAEkB,YAAY,AAAD,CAAEjB,IAAI,CAAA,AAAC,CAAC;gBAChCQ,MAAM,CAACV,IAAI,CAAA,CAAEmB,YAAY,AAAD,CAAElB,IAAI,CAAA,AAAC,CAAC;;;;;;CACpC,EAAA,CAAC,AAAC,CAAC",
  "names": [
    "it",
    "query",
    "res1",
    "res2",
    "res3",
    "avif",
    "webp",
    "jpeg",
    "url",
    "w",
    "q",
    "fetchViaHTTP",
    "appPort",
    "headers",
    "accept",
    "expect",
    "status",
    "toBe",
    "get",
    "buffer",
    "byteLength",
    "console",
    "log",
    "isSharp",
    "toBeLessThan"
  ],
  "sources": [
    "../../input/index.js",
    "<<jsx-config-pragmaFrag.js>>"
  ],
  "sourcesContent": [
    "it(\"should compress avif smaller than webp and smaller than jpg\", async () => {\n    const query = { url: \"/test.jpg\", w, q: 75 };\n    const res1 = await fetchViaHTTP(appPort, \"/_next/image\", query, {\n        headers: {\n            accept: \"image/avif\",\n        },\n    });\n    expect(res1.status).toBe(200);\n    expect(res1.headers.get(\"Content-Type\")).toBe(\"image/avif\");\n\n    const res2 = await fetchViaHTTP(appPort, \"/_next/image\", query, {\n        headers: {\n            accept: \"image/webp\",\n        },\n    });\n    expect(res2.status).toBe(200);\n    expect(res2.headers.get(\"Content-Type\")).toBe(\"image/webp\");\n\n    const res3 = await fetchViaHTTP(appPort, \"/_next/image\", query, {\n        headers: {\n            accept: \"image/jpeg\",\n        },\n    });\n    expect(res3.status).toBe(200);\n    expect(res3.headers.get(\"Content-Type\")).toBe(\"image/jpeg\");\n\n    const avif = (await res1.buffer()).byteLength;\n    const webp = (await res2.buffer()).byteLength;\n    const jpeg = (await res3.buffer()).byteLength;\n\n    console.log({ isSharp, w, avif, webp, jpeg });\n\n    expect(webp).toBeLessThan(jpeg);\n    expect(avif).toBeLessThan(webp);\n});\n",
    "React.Fragment"
  ],
  "version": 3
}
