{
  "mappings": ";;AAAAA,GAAG,6EAA+D,oBAAA;QAOxDC,OACAC,MAQAC,MAQAC,MAQAC,MACAC,MACAC;;;;gBA3BAN,QAAQ;oBAAEO,KAAK;oBAAaC,GAAAA;oBAAGC,GAAG;gBAAG;gBAC9B;;oBAAMC,aAAaC,SAAS,gBAAgBX,OAAO;wBAC5DY,SAAS;4BACLC,QAAQ;wBACZ;oBACJ;;;gBAJMZ,OAAO;gBAKba,OAAOb,KAAKc,QAAQC,KAAK;gBACzBF,OAAOb,KAAKW,QAAQK,IAAI,iBAAiBD,KAAK;gBAEjC;;oBAAMN,aAAaC,SAAS,gBAAgBX,OAAO;wBAC5DY,SAAS;4BACLC,QAAQ;wBACZ;oBACJ;;;gBAJMX,OAAO;gBAKbY,OAAOZ,KAAKa,QAAQC,KAAK;gBACzBF,OAAOZ,KAAKU,QAAQK,IAAI,iBAAiBD,KAAK;gBAEjC;;oBAAMN,aAAaC,SAAS,gBAAgBX,OAAO;wBAC5DY,SAAS;4BACLC,QAAQ;wBACZ;oBACJ;;;gBAJMV,OAAO;gBAKbW,OAAOX,KAAKY,QAAQC,KAAK;gBACzBF,OAAOX,KAAKS,QAAQK,IAAI,iBAAiBD,KAAK;gBAEhC;;oBAAMf,KAAKiB;;;gBAAnBd,OAAO,AAAC,cAAqBe;gBACrB;;oBAAMjB,KAAKgB;;;gBAAnBb,OAAO,AAAC,cAAqBc;gBACrB;;oBAAMhB,KAAKe;;;gBAAnBZ,OAAO,AAAC,cAAqBa;gBAEnCC,QAAQC,IAAI;oBAAEC,SAAAA;oBAASd,GAAAA;oBAAGJ,MAAAA;oBAAMC,MAAAA;oBAAMC,MAAAA;gBAAK;gBAE3CQ,OAAOT,MAAMkB,aAAajB;gBAC1BQ,OAAOV,MAAMmB,aAAalB;;;;;;AAC9B",
  "names": [
    "it",
    "query",
    "res1",
    "res2",
    "res3",
    "avif",
    "webp",
    "jpeg",
    "url",
    "w",
    "q",
    "fetchViaHTTP",
    "appPort",
    "headers",
    "accept",
    "expect",
    "status",
    "toBe",
    "get",
    "buffer",
    "byteLength",
    "console",
    "log",
    "isSharp",
    "toBeLessThan"
  ],
  "sources": [
    "../../input/index.js"
  ],
  "sourcesContent": [
    "it(\"should compress avif smaller than webp and smaller than jpg\", async () => {\n    /**\n     *\n     * 'Foo bar baz'\n     *\n     * Return @\n     */\n    const query = { url: \"/test.jpg\", w, q: 75 };\n    const res1 = await fetchViaHTTP(appPort, \"/_next/image\", query, {\n        headers: {\n            accept: \"image/avif\",\n        },\n    });\n    expect(res1.status).toBe(200);\n    expect(res1.headers.get(\"Content-Type\")).toBe(\"image/avif\");\n\n    const res2 = await fetchViaHTTP(appPort, \"/_next/image\", query, {\n        headers: {\n            accept: \"image/webp\",\n        },\n    });\n    expect(res2.status).toBe(200);\n    expect(res2.headers.get(\"Content-Type\")).toBe(\"image/webp\");\n\n    const res3 = await fetchViaHTTP(appPort, \"/_next/image\", query, {\n        headers: {\n            accept: \"image/jpeg\",\n        },\n    });\n    expect(res3.status).toBe(200);\n    expect(res3.headers.get(\"Content-Type\")).toBe(\"image/jpeg\");\n\n    const avif = (await res1.buffer()).byteLength;\n    const webp = (await res2.buffer()).byteLength;\n    const jpeg = (await res3.buffer()).byteLength;\n\n    console.log({ isSharp, w, avif, webp, jpeg });\n\n    expect(webp).toBeLessThan(jpeg);\n    expect(avif).toBeLessThan(webp);\n});\n"
  ],
  "version": 3
}
