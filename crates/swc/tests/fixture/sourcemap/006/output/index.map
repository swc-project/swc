{
  "mappings": ";;;;;qB;;;;sB;;kD;;;;;;;;;sF;;;qF;;4B;;;;;AAAAA,EAAE,CAAC,CAA6D,wGAAE,QAAQ,WAAI,CAAC;QAQrEC,KAAK,EACLC,IAAI,EAQJC,IAAI,EAQJC,IAAI,EAQJC,IAAI,EACJC,IAAI,EACJC,IAAI;;;;gBA3BJN,KAAK,GAAG,CAAC;oBAACO,GAAG,EAAE,CAAW;oBAAEC,CAAC,EAADA,CAAC;oBAAEC,CAAC,EAAE,EAAE;gBAAC,CAAC,A;6B;uBACzBC,YAAY,CAACC,OAAO,EAAE,CAAc,eAAEX,KAAK,EAAE,CAAC;oBAC7DY,OAAO,EAAE,CAAC;wBACNC,MAAM,EAAE,CAAY;oBACxB,CAAC;gBACL,CAAC;;gBAJKZ,IAAI,YATdF,CAaM;gBACFe,MAAM,CAACb,IAAI,CAACc,MAAM,EAAEC,IAAI,CAAC,GAAG,C;gBAC5BF,MAAM,CAACb,IAAI,CAACW,OAAO,CAACK,GAAG,CAAC,CAAc,gBAAGD,IAAI,CAAC,CAAY,Y;6B;uBAEvCN,YAAY,CAACC,OAAO,EAAE,CAAc,eAAEX,KAAK,EAAE,CAAC;oBAC7DY,OAAO,EAAE,CAAC;wBACNC,MAAM,EAAE,CAAY;oBACxB,CAAC;gBACL,CAAC;;gBAJKX,IAAI,YAjBdH,CAqBM;gBACFe,MAAM,CAACZ,IAAI,CAACa,MAAM,EAAEC,IAAI,CAAC,GAAG,C;gBAC5BF,MAAM,CAACZ,IAAI,CAACU,OAAO,CAACK,GAAG,CAAC,CAAc,gBAAGD,IAAI,CAAC,CAAY,Y;8B;uBAEvCN,YAAY,CAACC,OAAO,EAAE,CAAc,eAAEX,KAAK,EAAE,CAAC;oBAC7DY,OAAO,EAAE,CAAC;wBACNC,MAAM,EAAE,CAAY;oBACxB,CAAC;gBACL,CAAC;;gBAJKV,IAAI,YAzBdJ,CA6BM;gBACFe,MAAM,CAACX,IAAI,CAACY,MAAM,EAAEC,IAAI,CAAC,GAAG,C;gBAC5BF,MAAM,CAACX,IAAI,CAACS,OAAO,CAACK,GAAG,CAAC,CAAc,gBAAGD,IAAI,CAAC,CAAY,Y;8B;uBAEtCf,IAAI,CAACiB,MAAM;;gBAAzBd,IAAI,aAAyBe,UAAU,AAjCjDpB,CAiCiD;8B;uBACzBG,IAAI,CAACgB,MAAM;;gBAAzBb,IAAI,aAAyBc,UAAU,AAlCjDpB,CAkCiD;8B;uBACzBI,IAAI,CAACe,MAAM;;gBAAzBZ,IAAI,aAAyBa,UAAU,AAnCjDpB,CAmCiD;gBAE7CqB,OAAO,CAACC,GAAG,CAAC,CAAC;oBAACC,OAAO,EAAPA,OAAO;oBAAEd,CAAC,EAADA,CAAC;oBAAEJ,IAAI,EAAJA,IAAI;oBAAEC,IAAI,EAAJA,IAAI;oBAAEC,IAAI,EAAJA,IAAI;gBAAC,CAAC,C;gBAE5CQ,MAAM,CAACT,IAAI,EAAEkB,YAAY,CAACjB,IAAI,C;gBAC9BQ,MAAM,CAACV,IAAI,EAAEmB,YAAY,CAAClB,IAAI,C;;;;;;AAClC,CAAC,G",
  "names": [
    "it",
    "query",
    "res1",
    "res2",
    "res3",
    "avif",
    "webp",
    "jpeg",
    "url",
    "w",
    "q",
    "fetchViaHTTP",
    "appPort",
    "headers",
    "accept",
    "expect",
    "status",
    "toBe",
    "get",
    "buffer",
    "byteLength",
    "console",
    "log",
    "isSharp",
    "toBeLessThan"
  ],
  "sources": [
    "../../input/index.js"
  ],
  "sourcesContent": [
    "it('should compress avif smaller than webp and smaller than jpg', async () => {\n\n    /**\n     * \n     * 'Foo bar baz'\n     * \n     * Return @\n     */\n    const query = { url: '/test.jpg', w, q: 75 }\n    const res1 = await fetchViaHTTP(appPort, '/_next/image', query, {\n        headers: {\n            accept: 'image/avif',\n        },\n    })\n    expect(res1.status).toBe(200)\n    expect(res1.headers.get('Content-Type')).toBe('image/avif')\n\n    const res2 = await fetchViaHTTP(appPort, '/_next/image', query, {\n        headers: {\n            accept: 'image/webp',\n        },\n    })\n    expect(res2.status).toBe(200)\n    expect(res2.headers.get('Content-Type')).toBe('image/webp')\n\n    const res3 = await fetchViaHTTP(appPort, '/_next/image', query, {\n        headers: {\n            accept: 'image/jpeg',\n        },\n    })\n    expect(res3.status).toBe(200)\n    expect(res3.headers.get('Content-Type')).toBe('image/jpeg')\n\n    const avif = (await res1.buffer()).byteLength\n    const webp = (await res2.buffer()).byteLength\n    const jpeg = (await res3.buffer()).byteLength\n\n    console.log({ isSharp, w, avif, webp, jpeg })\n\n    expect(webp).toBeLessThan(jpeg)\n    expect(avif).toBeLessThan(webp)\n})"
  ],
  "version": 3
}
