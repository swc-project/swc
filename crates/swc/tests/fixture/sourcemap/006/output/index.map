{
  "mappings": ";;AAAAA,GAAG,+DAA+D;;YAOxDC,OACAC,MAQAC,MAQAC,MAQAC,MACAC,MACAC;;;;oBAjCN;;;;;KAKC,GACKN,QAAQ;wBAAEO,KAAK;wBAAaC,GAAAA;wBAAGC,GAAG;oBAAG;oBAC9B;;wBAAMC,aAAaC,SAAS,gBAAgBX,OAAO;4BAC5DY,SAAS;gCACLC,QAAQ;4BACZ;wBACJ;;;oBAJMZ,OAAO;oBAKba,OAAOb,KAAKc,MAAM,EAAEC,IAAI,CAAC;oBACzBF,OAAOb,KAAKW,OAAO,CAACK,GAAG,CAAC,iBAAiBD,IAAI,CAAC;oBAEjC;;wBAAMN,aAAaC,SAAS,gBAAgBX,OAAO;4BAC5DY,SAAS;gCACLC,QAAQ;4BACZ;wBACJ;;;oBAJMX,OAAO;oBAKbY,OAAOZ,KAAKa,MAAM,EAAEC,IAAI,CAAC;oBACzBF,OAAOZ,KAAKU,OAAO,CAACK,GAAG,CAAC,iBAAiBD,IAAI,CAAC;oBAEjC;;wBAAMN,aAAaC,SAAS,gBAAgBX,OAAO;4BAC5DY,SAAS;gCACLC,QAAQ;4BACZ;wBACJ;;;oBAJMV,OAAO;oBAKbW,OAAOX,KAAKY,MAAM,EAAEC,IAAI,CAAC;oBACzBF,OAAOX,KAAKS,OAAO,CAACK,GAAG,CAAC,iBAAiBD,IAAI,CAAC;oBAEhC;;wBAAMf,KAAKiB,MAAM;;;oBAAzBd,OAAO,AAAC,cAAqBe,UAAU;oBAC/B;;wBAAMjB,KAAKgB,MAAM;;;oBAAzBb,OAAO,AAAC,cAAqBc,UAAU;oBAC/B;;wBAAMhB,KAAKe,MAAM;;;oBAAzBZ,OAAO,AAAC,cAAqBa,UAAU;oBAE7CC,QAAQC,GAAG,CAAC;wBAAEC,SAAAA;wBAASd,GAAAA;wBAAGJ,MAAAA;wBAAMC,MAAAA;wBAAMC,MAAAA;oBAAK;oBAE3CQ,OAAOT,MAAMkB,YAAY,CAACjB;oBAC1BQ,OAAOV,MAAMmB,YAAY,CAAClB;;;;;;IAC9B",
  "names": [
    "it",
    "query",
    "res1",
    "res2",
    "res3",
    "avif",
    "webp",
    "jpeg",
    "url",
    "w",
    "q",
    "fetchViaHTTP",
    "appPort",
    "headers",
    "accept",
    "expect",
    "status",
    "toBe",
    "get",
    "buffer",
    "byteLength",
    "console",
    "log",
    "isSharp",
    "toBeLessThan"
  ],
  "sources": [
    "../input/index.js"
  ],
  "sourcesContent": [
    "it(\"should compress avif smaller than webp and smaller than jpg\", async () => {\n    /**\n     *\n     * 'Foo bar baz'\n     *\n     * Return @\n     */\n    const query = { url: \"/test.jpg\", w, q: 75 };\n    const res1 = await fetchViaHTTP(appPort, \"/_next/image\", query, {\n        headers: {\n            accept: \"image/avif\",\n        },\n    });\n    expect(res1.status).toBe(200);\n    expect(res1.headers.get(\"Content-Type\")).toBe(\"image/avif\");\n\n    const res2 = await fetchViaHTTP(appPort, \"/_next/image\", query, {\n        headers: {\n            accept: \"image/webp\",\n        },\n    });\n    expect(res2.status).toBe(200);\n    expect(res2.headers.get(\"Content-Type\")).toBe(\"image/webp\");\n\n    const res3 = await fetchViaHTTP(appPort, \"/_next/image\", query, {\n        headers: {\n            accept: \"image/jpeg\",\n        },\n    });\n    expect(res3.status).toBe(200);\n    expect(res3.headers.get(\"Content-Type\")).toBe(\"image/jpeg\");\n\n    const avif = (await res1.buffer()).byteLength;\n    const webp = (await res2.buffer()).byteLength;\n    const jpeg = (await res3.buffer()).byteLength;\n\n    console.log({ isSharp, w, avif, webp, jpeg });\n\n    expect(webp).toBeLessThan(jpeg);\n    expect(avif).toBeLessThan(webp);\n});\n"
  ],
  "version": 3
}
