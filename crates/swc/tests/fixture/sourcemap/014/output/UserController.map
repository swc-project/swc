{
  "mappings": "AAAA;;;AAAA,SACIA,UAAU,AAAD,EACTC,IAAI,AAAD,EACHC,SAAS,AAAD,EACRC,IAAI,AAAD,EACHC,GAAG,AAAD,EACFC,KAAK,AAAD,EACJC,kBAAkB,AAAD,EACjBC,eAAe,AAAD,QACX,gBAAe,CAAC;AAEvB,SACIC,qBAAqB,AAAD,EACpBC,oBAAoB,AAAD,EACnBC,oBAAoB,AAAD,QAChB,+BAA8B,CAAC;AACtC,SAASC,aAAa,AAAD,QAAS,gCAA+B,CAAC;AAC9D,SAASC,aAAa,AAAD,QAAS,gCAA+B,CAAC;AAC9D,SAASC,YAAY,AAAD,QAAS,kCAAiC,CAAC;AAC/D,SAASC,IAAI,AAAD,QAAS,kCAAiC,CAAC;AACvD,SAASA,IAAI,IAAIC,QAAQ,AAAD,QAAS,iCAAgC,CAAC;AAClE,SAASC,kCAAkC,AAAD,QAAS,yDAAwD,CAAC;AAC5G,SAASC,WAAW,AAAD,QAAS,0BAAyB,CAAC;AAItD,WAAaC,cAAc,GAApB;IACHC,YAAoBC,WAAwB,CAAE;QAA1BA,mBAAAA,WAAwB,AAAD,CAAC;KAAI;UAG1CC,MAAM,CAAC,AAAQC,aAA4B,AAAD,EAAG;QAC/C,OAAO,IAAI,CAACF,WAAW,AAAD,CAAEG,MAAM,AAAD,CAAED,aAAa,CAAA,CAAC;KACjD;UAIME,MAAM,CACR,AAAaC,MAAc,AAAD,EAC1B,AAAQC,aAA4B,AAAD,EACnC,AAAQC,IAAc,AAAD,EACvB;QACE,IAAIA,IAAI,CAACC,EAAE,AAAD,KAAMH,MAAM,AAAD,EAAG;YACpB,MAAM,IAAInB,kBAAkB,EAAC,CAAC;SAClC;QAEA,OAAO,IAAI,CAACc,WAAW,AAAD,CAAEI,MAAM,AAAD,CAAEC,MAAM,EAAEC,aAAa,CAAA,CAAC;KACzD;CACJ,CAAA;;IAlBKzB,IAAI,CAACQ,oBAAoB,CAAA;IACZN,aAAAA,IAAI,EAAC,CAAA;;;eAAiB,aAAa,4BAAb,aAAa;;GAJxCe,cAAc;;IAQtBhB,SAAS,CAACW,YAAY,CAAA;IACtBT,GAAG,CAACM,oBAAoB,CAAA;IAEpBL,aAAAA,KAAK,CAAC,IAAG,CAAC,CAAA;IACVF,aAAAA,IAAI,EAAC,CAAA;IACLW,aAAAA,IAAI,EAAC,CAAA;;;;eADiB,aAAa,4BAAb,aAAa;eACtB,QAAQ,4BAAR,QAAQ;;GAbjBI,cAAc;AAAdA,cAAc;IAF1BlB,UAAU,CAACQ,qBAAqB,CAAA;IAChCD,eAAe,CAACS,kCAAkC,CAACD,QAAQ,CAAA,CAAC;;;eAExB,WAAW,4BAAX,WAAW;;GADnCG,cAAc",
  "names": [
    "Controller",
    "Post",
    "UseGuards",
    "Body",
    "Put",
    "Param",
    "ForbiddenException",
    "UseInterceptors",
    "USER_CONTROLLER_ROUTE",
    "USER_CREATE_ENDPOINT",
    "USER_UPDATE_ENDPOINT",
    "CreateUserDto",
    "UpdateUserDto",
    "JwtAuthGuard",
    "User",
    "UserType",
    "MongooseClassSerializerInterceptor",
    "UserService",
    "UserController",
    "constructor",
    "userService",
    "signup",
    "createUserDto",
    "create",
    "update",
    "userId",
    "updateUserDto",
    "user",
    "id"
  ],
  "sources": [
    "../../input/UserController.ts"
  ],
  "sourcesContent": [
    "import {\n    Controller,\n    Post,\n    UseGuards,\n    Body,\n    Put,\n    Param,\n    ForbiddenException,\n    UseInterceptors,\n} from '@nestjs/common';\n\nimport {\n    USER_CONTROLLER_ROUTE,\n    USER_CREATE_ENDPOINT,\n    USER_UPDATE_ENDPOINT,\n} from '@server/constants/controllers';\nimport { CreateUserDto } from '@server/user/dto/CreateUserDto';\nimport { UpdateUserDto } from '@server/user/dto/UpdateUserDto';\nimport { JwtAuthGuard } from '@server/auth/guards/JwtAuthGuard';\nimport { User } from '@server/decorators/UserDecorator';\nimport { User as UserType } from '@server/user/schemas/UserSchema';\nimport { MongooseClassSerializerInterceptor } from '@server/interceptors/MongooseClassSerializerInterceptor';\nimport { UserService } from '@server/user/UserService';\n\n@Controller(USER_CONTROLLER_ROUTE)\n@UseInterceptors(MongooseClassSerializerInterceptor(UserType))\nexport class UserController {\n    constructor(private userService: UserService) { }\n\n    @Post(USER_CREATE_ENDPOINT)\n    async signup(@Body() createUserDto: CreateUserDto) {\n        return this.userService.create(createUserDto);\n    }\n\n    @UseGuards(JwtAuthGuard)\n    @Put(USER_UPDATE_ENDPOINT)\n    async update(\n        @Param('id') userId: string,\n        @Body() updateUserDto: UpdateUserDto,\n        @User() user: UserType,\n    ) {\n        if (user.id !== userId) {\n            throw new ForbiddenException();\n        }\n\n        return this.userService.update(userId, updateUserDto);\n    }\n}\n"
  ],
  "version": 3
}
