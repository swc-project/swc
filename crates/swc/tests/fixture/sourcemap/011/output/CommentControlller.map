{
  "mappings": "AAAA;;;AAAA,SAASA,IAAI,EAAEC,UAAU,EAAEC,MAAM,EAAEC,KAAK,EAAEC,GAAG,EAAEC,SAAS,EAAEC,eAAe,QAAQ,gBAAgB,CAAC;AAElG,SACIC,wBAAwB,EACxBC,uBAAuB,EACvBC,uBAAuB,QACpB,+BAA+B,CAAC;AACvC,SAASC,kCAAkC,QAAQ,yDAAyD,CAAC;AAC7G,SAASC,OAAO,QAAQ,uCAAuC,CAAC;AAChE,SAASC,cAAc,QAAQ,gCAAgC,CAAC;AAChE,SAASC,YAAY,QAAQ,kCAAkC,CAAC;AAChE,SAASC,IAAI,QAAQ,kCAAkC,CAAC;AACxD,SAASA,IAAI,IAAIC,QAAQ,QAAQ,iCAAiC,CAAC;AACnE,SAASC,gBAAgB,QAAQ,sCAAsC,CAAC;AAIxE,WAAaC,iBAAiB,GAAvB;IACHC,YAAoBC,cAA8B,CAAE;QAAhCA,sBAAAA,cAA8B,CAAA;IAAI;IAI/CC,aAAa,CAChB,AAAaC,EAAU,EACvB,AAAQC,gBAAkC,EAC1C,AAAQC,IAAc,EACxB;QACE,OAAO,IAAI,CAACJ,cAAc,CAACK,MAAM,CAACH,EAAE,EAAEC,gBAAgB,EAAEC,IAAI,CAACF,EAAE,CAAC,CAAC;IACrE;IAIOI,aAAa,CAAC,AAAaJ,EAAU,EAAE,AAAQE,IAAc,EAAE;QAClE,OAAO,IAAI,CAACJ,cAAc,CAACO,MAAM,CAACL,EAAE,EAAEE,IAAI,CAACF,EAAE,CAAC,CAAC;IACnD;CACH,CAAA;;IAfIhB,SAAS,CAACQ,YAAY,CAAC;IACvBT,GAAG,CAACK,uBAAuB,CAAC;IAExBN,aAAAA,KAAK,CAAC,IAAI,CAAC,CAAA;IACXH,aAAAA,IAAI,EAAE,CAAA;IACNc,aAAAA,IAAI,EAAE,CAAA;;;;eADmB,gBAAgB,4BAAhB,gBAAgB;eAC5B,QAAQ,4BAAR,QAAQ;;GARjBG,iBAAiB;;IAazBZ,SAAS,CAACQ,YAAY,CAAC;IACvBX,MAAM,CAACM,uBAAuB,CAAC;IACVL,aAAAA,KAAK,CAAC,IAAI,CAAC,CAAA;IAAcW,aAAAA,IAAI,EAAE,CAAA;;;;eAAO,QAAQ,4BAAR,QAAQ;;GAf3DG,iBAAiB;AAAjBA,iBAAiB;IAF7BhB,UAAU,CAACM,wBAAwB,CAAC;IACpCD,eAAe,CAACI,kCAAkC,CAACC,OAAO,CAAC,CAAC;;;eAErB,cAAc,4BAAd,cAAc;;GADzCM,iBAAiB",
  "names": [
    "Body",
    "Controller",
    "Delete",
    "Param",
    "Put",
    "UseGuards",
    "UseInterceptors",
    "COMMENT_CONTROLLER_ROUTE",
    "COMMENT_DELETE_ENDPOINT",
    "COMMENT_UPDATE_ENDPOINT",
    "MongooseClassSerializerInterceptor",
    "Comment",
    "CommentService",
    "JwtAuthGuard",
    "User",
    "UserType",
    "UpdateCommentDto",
    "CommentController",
    "constructor",
    "commentService",
    "updateComment",
    "id",
    "updateCommentDto",
    "user",
    "update",
    "deleteComment",
    "delete"
  ],
  "sources": [
    "../../input/CommentControlller.ts"
  ],
  "sourcesContent": [
    "import { Body, Controller, Delete, Param, Put, UseGuards, UseInterceptors } from '@nestjs/common';\n\nimport {\n    COMMENT_CONTROLLER_ROUTE,\n    COMMENT_DELETE_ENDPOINT,\n    COMMENT_UPDATE_ENDPOINT,\n} from '@server/constants/controllers';\nimport { MongooseClassSerializerInterceptor } from '@server/interceptors/MongooseClassSerializerInterceptor';\nimport { Comment } from '@server/comment/schemas/CommentSchema';\nimport { CommentService } from '@server/comment/CommentService';\nimport { JwtAuthGuard } from '@server/auth/guards/JwtAuthGuard';\nimport { User } from '@server/decorators/UserDecorator';\nimport { User as UserType } from '@server/user/schemas/UserSchema';\nimport { UpdateCommentDto } from '@server/comment/dto/UpdateCommentDto';\n\n@Controller(COMMENT_CONTROLLER_ROUTE)\n@UseInterceptors(MongooseClassSerializerInterceptor(Comment))\nexport class CommentController {\n    constructor(private commentService: CommentService) { }\n\n    @UseGuards(JwtAuthGuard)\n    @Put(COMMENT_UPDATE_ENDPOINT)\n    public updateComment(\n        @Param('id') id: string,\n        @Body() updateCommentDto: UpdateCommentDto,\n        @User() user: UserType,\n    ) {\n        return this.commentService.update(id, updateCommentDto, user.id);\n    }\n\n    @UseGuards(JwtAuthGuard)\n    @Delete(COMMENT_DELETE_ENDPOINT)\n    public deleteComment(@Param('id') id: string, @User() user: UserType) {\n        return this.commentService.delete(id, user.id);\n    }\n}\n"
  ],
  "version": 3
}
