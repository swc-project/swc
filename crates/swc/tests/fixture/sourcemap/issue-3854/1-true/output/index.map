{
  "mappings": "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",
  "names": [
    "node",
    "create",
    "trustBox",
    "opener",
    "stage",
    "header",
    "source",
    "sources",
    "seq",
    "BodyBuilder",
    "TrustBoxBuilder",
    "OpenerBuilder",
    "BodyStageBuilder",
    "BodyHeaderBuilder",
    "nodes",
    "ArticleSourceBuilder",
    "ArticleSourcesBuilder",
    "BodyStageSeqBuilder",
    "ArticleSourceSeqBuilder",
    "AbstractBuilder",
    "stages",
    "map",
    "mapBuildArg",
    "disclaimer",
    "articleSources",
    "build",
    "undefined",
    "hidden",
    "element",
    "image",
    "AbstractSeqBuilder",
    "mapBuildArgs",
    "companions",
    "commercialsEndOfStage",
    "buildListItem",
    "seqNextElement",
    "id",
    "hash",
    "array",
    "maybe",
    "seqBuilder",
    "variant",
    "constructor"
  ],
  "sources": [
    "../../input/index.ts"
  ],
  "sourcesContent": [
    "import { AbstractBuilder, AbstractSeqBuilder } from \"./AbstractBuilders\";\nimport { hash, mapBuildArg, mapBuildArgs } from \"./Builder.utils\";\nimport { image } from \"./ElementBuilder\";\n\nimport type {\n    Body,\n    BodyStage,\n    TrustBox,\n    RichText,\n    Opener,\n    BodyHeader,\n    Stage,\n    ArticleSource,\n    ArticleSources,\n} from \"@paper/models\";\nimport type {\n    BuildArg,\n    BuildArgs,\n    CreateBuilder,\n    SeqElement,\n    SeqNextElementConverter,\n} from \"./types\";\n\n/**\n * @deprecated use {Builder.body.node.img()}\n */\nexport * from \"./BodyNodesBuilder\";\nexport * as node from \"./BodyNodesBuilder\";\n\nexport const create: CreateBuilder<BodyBuilder> = () => new BodyBuilder();\nexport const trustBox: CreateBuilder<TrustBoxBuilder> = () =>\n    new TrustBoxBuilder();\nexport const opener: CreateBuilder<OpenerBuilder> = () => new OpenerBuilder();\nexport const stage: CreateBuilder<BodyStageBuilder> = () =>\n    new BodyStageBuilder();\nexport const header: CreateBuilder<BodyHeaderBuilder> = () =>\n    new BodyHeaderBuilder();\nexport const source: CreateBuilder<\n    ArticleSourceBuilder,\n    BuildArgs<RichText.Node>\n> = (nodes: BuildArgs<RichText.Node> = []) =>\n    new ArticleSourceBuilder(...nodes);\nexport const sources: CreateBuilder<ArticleSourcesBuilder> = () =>\n    new ArticleSourcesBuilder();\n\nexport const seq = {\n    stage: (() =>\n        new BodyStageSeqBuilder()) as CreateBuilder<BodyStageSeqBuilder>,\n    source: (() =>\n        new ArticleSourceSeqBuilder()) as CreateBuilder<ArticleSourceSeqBuilder>,\n} as const;\n\nclass BodyBuilder extends AbstractBuilder<Body> {\n    #stages: BodyStage[] = [];\n    #trustBox?: TrustBox = undefined;\n    #disclaimer?: RichText.Node[] = undefined;\n    #articleSources?: ArticleSources = undefined;\n\n    stages(...stages: BuildArgs<BodyStage>): this {\n        this.#stages = stages.map(mapBuildArg);\n        return this;\n    }\n\n    trustBox(trustBox?: BuildArg<TrustBox>): this {\n        this.#trustBox = mapBuildArg(trustBox);\n        return this;\n    }\n\n    disclaimer(disclaimer?: BuildArgs<RichText.Node>): this {\n        this.#disclaimer = disclaimer?.map(mapBuildArg);\n        return this;\n    }\n\n    articleSources(articleSources?: BuildArg<ArticleSources>): this {\n        this.#articleSources = mapBuildArg(articleSources);\n        return this;\n    }\n\n    build(): Body {\n        return {\n            stages: this.#stages,\n            trustBox: this.#trustBox,\n            disclaimer: this.#disclaimer,\n            articleSources: this.#articleSources,\n        };\n    }\n}\n\nclass TrustBoxBuilder extends AbstractBuilder<TrustBox> {\n    #nodes: RichText.Node[] = [];\n    #hidden: RichText.Node[] = [];\n\n    nodes(nodes: BuildArgs<RichText.Node>): this {\n        this.#nodes = nodes.map(mapBuildArg);\n        return this;\n    }\n\n    hidden(hidden: BuildArgs<RichText.Node>): this {\n        this.#hidden = hidden.map(mapBuildArg);\n        return this;\n    }\n\n    build(): TrustBox {\n        return {\n            nodes: this.#nodes,\n            hidden: this.#hidden,\n        };\n    }\n}\n\nclass OpenerBuilder extends AbstractBuilder<Opener> {\n    #element: Opener[\"element\"] = image().build();\n\n    element(element: BuildArg<Opener[\"element\"]>): this {\n        this.#element = mapBuildArg(element);\n        return this;\n    }\n\n    build(): Opener {\n        return {\n            element: this.#element,\n        };\n    }\n}\n\nclass BodyStageSeqBuilder extends AbstractSeqBuilder<BodyStage> {\n    #nodes: SeqElement<RichText.Node[]> = [];\n    #header?: SeqElement<BodyHeader> = undefined;\n    #companions: SeqElement<Stage.CompanionItem[]> = [];\n    #commercialsEndOfStage: SeqElement<RichText.Node[]> = [];\n\n    nodes(nodes: SeqElement<BuildArgs<RichText.Node>>): this {\n        this.#nodes = nodes.map(mapBuildArgs);\n        return this;\n    }\n\n    header(header?: SeqElement<BuildArg<BodyHeader>>): this {\n        this.#header = mapBuildArgs(header ?? []);\n        return this;\n    }\n\n    companions(companions: SeqElement<BuildArgs<Stage.CompanionItem>>): this {\n        this.#companions = companions.map(mapBuildArgs);\n        return this;\n    }\n\n    commercialsEndOfStage(\n        commercialsEndOfStage: SeqElement<BuildArgs<RichText.Node>>\n    ): this {\n        this.#commercialsEndOfStage = commercialsEndOfStage.map(mapBuildArgs);\n        return this;\n    }\n\n    buildListItem(seqNextElement: SeqNextElementConverter): BodyStage {\n        return {\n            id: hash(\n                \"bodyStage\",\n                this.#nodes,\n                this.#companions,\n                this.#commercialsEndOfStage,\n                this.#header\n            ),\n            nodes: seqNextElement.array(this.#nodes),\n            header: seqNextElement.maybe(this.#header),\n            companions: seqNextElement.array(this.#companions),\n            commercialsEndOfStage: seqNextElement.array(\n                this.#commercialsEndOfStage\n            ),\n        };\n    }\n}\n\nclass BodyStageBuilder extends AbstractBuilder<BodyStage> {\n    #seqBuilder: BodyStageSeqBuilder = new BodyStageSeqBuilder();\n\n    nodes(nodes: BuildArgs<RichText.Node>): this {\n        this.#seqBuilder.nodes([nodes]);\n        return this;\n    }\n\n    header(header?: BuildArg<BodyHeader>): this {\n        if (header) {\n            this.#seqBuilder.header([header]);\n        }\n        return this;\n    }\n\n    companions(companions: BuildArgs<Stage.CompanionItem>): this {\n        this.#seqBuilder.companions([companions]);\n        return this;\n    }\n\n    commercialsEndOfStage(\n        commercialsEndOfStage: BuildArgs<RichText.Node>\n    ): this {\n        this.#seqBuilder.commercialsEndOfStage([commercialsEndOfStage]);\n        return this;\n    }\n\n    build(): BodyStage {\n        return this.#seqBuilder.build();\n    }\n}\n\nclass BodyHeaderBuilder extends AbstractBuilder<BodyHeader> {\n    #variant: BodyHeader[\"variant\"] = \"full\";\n    #opener?: Opener = undefined;\n\n    variant(variant: BodyHeader[\"variant\"]): this {\n        this.#variant = variant;\n        return this;\n    }\n\n    opener(opener: BuildArg<Opener>): this {\n        this.#opener = mapBuildArg(opener);\n        return this;\n    }\n\n    build(): BodyHeader {\n        return {\n            variant: this.#variant,\n            opener: this.#opener,\n        };\n    }\n}\n\nclass ArticleSourceSeqBuilder extends AbstractSeqBuilder<ArticleSource> {\n    #nodes: SeqElement<RichText.Node[]> = [];\n\n    nodes(nodes: SeqElement<BuildArgs<RichText.Node>>): this {\n        this.#nodes = nodes.map(mapBuildArgs);\n        return this;\n    }\n\n    buildListItem(seqNextElement: SeqNextElementConverter): ArticleSource {\n        const id = hash(\"article-source\", this.#nodes);\n        return {\n            id,\n            nodes: seqNextElement.array(this.#nodes),\n        };\n    }\n}\n\nclass ArticleSourceBuilder extends AbstractBuilder<ArticleSource> {\n    #seqBuilder: ArticleSourceSeqBuilder = new ArticleSourceSeqBuilder();\n\n    constructor(...nodes: BuildArgs<RichText.Node>) {\n        super();\n        this.nodes(...nodes);\n    }\n\n    nodes(...nodes: BuildArgs<RichText.Node>): this {\n        this.#seqBuilder.nodes([nodes]);\n        return this;\n    }\n\n    build(): ArticleSource {\n        return this.#seqBuilder.build();\n    }\n}\n\nclass ArticleSourcesBuilder extends AbstractBuilder<ArticleSources> {\n    #nodes: ArticleSource[] = [];\n    #hidden: ArticleSource[] = [];\n\n    nodes(...nodes: BuildArgs<ArticleSource>): this {\n        this.#nodes = nodes.map(mapBuildArg);\n        return this;\n    }\n\n    hidden(...hidden: BuildArgs<ArticleSource>): this {\n        this.#hidden = hidden.map(mapBuildArg);\n        return this;\n    }\n\n    build(): ArticleSources {\n        return {\n            nodes: this.#nodes,\n            hidden: this.#hidden,\n        };\n    }\n}\n"
  ],
  "version": 3
}
