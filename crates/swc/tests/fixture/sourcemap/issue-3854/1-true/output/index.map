{
  "mappings": "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",
  "names": [
    "node",
    "create",
    "BodyBuilder",
    "trustBox",
    "TrustBoxBuilder",
    "opener",
    "OpenerBuilder",
    "stage",
    "BodyStageBuilder",
    "header",
    "BodyHeaderBuilder",
    "source",
    "nodes",
    "ArticleSourceBuilder",
    "sources",
    "ArticleSourcesBuilder",
    "seq",
    "BodyStageSeqBuilder",
    "ArticleSourceSeqBuilder",
    "AbstractBuilder",
    "stages",
    "map",
    "mapBuildArg",
    "disclaimer",
    "articleSources",
    "build",
    "undefined",
    "hidden",
    "element",
    "image",
    "AbstractSeqBuilder",
    "mapBuildArgs",
    "companions",
    "commercialsEndOfStage",
    "buildListItem",
    "seqNextElement",
    "id",
    "hash",
    "array",
    "maybe",
    "seqBuilder",
    "variant",
    "constructor"
  ],
  "sources": [
    "../../input/index.ts"
  ],
  "sourcesContent": [
    "import { AbstractBuilder, AbstractSeqBuilder } from './AbstractBuilders';\nimport { hash, mapBuildArg, mapBuildArgs } from './Builder.utils';\nimport { image } from './ElementBuilder';\n\nimport type {\n    Body,\n    BodyStage,\n    TrustBox,\n    RichText,\n    Opener,\n    BodyHeader,\n    Stage,\n    ArticleSource,\n    ArticleSources,\n} from '@paper/models';\nimport type { BuildArg, BuildArgs, CreateBuilder, SeqElement, SeqNextElementConverter } from './types';\n\n/**\n * @deprecated use {Builder.body.node.img()}\n */\nexport * from './BodyNodesBuilder';\nexport * as node from './BodyNodesBuilder';\n\nexport const create: CreateBuilder<BodyBuilder> = () => new BodyBuilder();\nexport const trustBox: CreateBuilder<TrustBoxBuilder> = () => new TrustBoxBuilder();\nexport const opener: CreateBuilder<OpenerBuilder> = () => new OpenerBuilder();\nexport const stage: CreateBuilder<BodyStageBuilder> = () => new BodyStageBuilder();\nexport const header: CreateBuilder<BodyHeaderBuilder> = () => new BodyHeaderBuilder();\nexport const source: CreateBuilder<ArticleSourceBuilder, BuildArgs<RichText.Node>> = (\n    nodes: BuildArgs<RichText.Node> = [],\n) => new ArticleSourceBuilder(...nodes);\nexport const sources: CreateBuilder<ArticleSourcesBuilder> = () => new ArticleSourcesBuilder();\n\nexport const seq = {\n    stage: (() => new BodyStageSeqBuilder()) as CreateBuilder<BodyStageSeqBuilder>,\n    source: (() => new ArticleSourceSeqBuilder()) as CreateBuilder<ArticleSourceSeqBuilder>,\n} as const;\n\nclass BodyBuilder extends AbstractBuilder<Body> {\n    #stages: BodyStage[] = [];\n    #trustBox?: TrustBox = undefined;\n    #disclaimer?: RichText.Node[] = undefined;\n    #articleSources?: ArticleSources = undefined;\n\n    stages(...stages: BuildArgs<BodyStage>): this {\n        this.#stages = stages.map(mapBuildArg);\n        return this;\n    }\n\n    trustBox(trustBox?: BuildArg<TrustBox>): this {\n        this.#trustBox = mapBuildArg(trustBox);\n        return this;\n    }\n\n    disclaimer(disclaimer?: BuildArgs<RichText.Node>): this {\n        this.#disclaimer = disclaimer?.map(mapBuildArg);\n        return this;\n    }\n\n    articleSources(articleSources?: BuildArg<ArticleSources>): this {\n        this.#articleSources = mapBuildArg(articleSources);\n        return this;\n    }\n\n    build(): Body {\n        return {\n            stages: this.#stages,\n            trustBox: this.#trustBox,\n            disclaimer: this.#disclaimer,\n            articleSources: this.#articleSources,\n        };\n    }\n}\n\nclass TrustBoxBuilder extends AbstractBuilder<TrustBox> {\n    #nodes: RichText.Node[] = [];\n    #hidden: RichText.Node[] = [];\n\n    nodes(nodes: BuildArgs<RichText.Node>): this {\n        this.#nodes = nodes.map(mapBuildArg);\n        return this;\n    }\n\n    hidden(hidden: BuildArgs<RichText.Node>): this {\n        this.#hidden = hidden.map(mapBuildArg);\n        return this;\n    }\n\n    build(): TrustBox {\n        return {\n            nodes: this.#nodes,\n            hidden: this.#hidden,\n        };\n    }\n}\n\nclass OpenerBuilder extends AbstractBuilder<Opener> {\n    #element: Opener['element'] = image().build();\n\n    element(element: BuildArg<Opener['element']>): this {\n        this.#element = mapBuildArg(element);\n        return this;\n    }\n\n    build(): Opener {\n        return {\n            element: this.#element,\n        };\n    }\n}\n\nclass BodyStageSeqBuilder extends AbstractSeqBuilder<BodyStage> {\n    #nodes: SeqElement<RichText.Node[]> = [];\n    #header?: SeqElement<BodyHeader> = undefined;\n    #companions: SeqElement<Stage.CompanionItem[]> = [];\n    #commercialsEndOfStage: SeqElement<RichText.Node[]> = [];\n\n    nodes(nodes: SeqElement<BuildArgs<RichText.Node>>): this {\n        this.#nodes = nodes.map(mapBuildArgs);\n        return this;\n    }\n\n    header(header?: SeqElement<BuildArg<BodyHeader>>): this {\n        this.#header = mapBuildArgs(header ?? []);\n        return this;\n    }\n\n    companions(companions: SeqElement<BuildArgs<Stage.CompanionItem>>): this {\n        this.#companions = companions.map(mapBuildArgs);\n        return this;\n    }\n\n    commercialsEndOfStage(commercialsEndOfStage: SeqElement<BuildArgs<RichText.Node>>): this {\n        this.#commercialsEndOfStage = commercialsEndOfStage.map(mapBuildArgs);\n        return this;\n    }\n\n    buildListItem(seqNextElement: SeqNextElementConverter): BodyStage {\n        return {\n            id: hash('bodyStage', this.#nodes, this.#companions, this.#commercialsEndOfStage, this.#header),\n            nodes: seqNextElement.array(this.#nodes),\n            header: seqNextElement.maybe(this.#header),\n            companions: seqNextElement.array(this.#companions),\n            commercialsEndOfStage: seqNextElement.array(this.#commercialsEndOfStage),\n        };\n    }\n}\n\nclass BodyStageBuilder extends AbstractBuilder<BodyStage> {\n    #seqBuilder: BodyStageSeqBuilder = new BodyStageSeqBuilder();\n\n    nodes(nodes: BuildArgs<RichText.Node>): this {\n        this.#seqBuilder.nodes([nodes]);\n        return this;\n    }\n\n    header(header?: BuildArg<BodyHeader>): this {\n        if (header) {\n            this.#seqBuilder.header([header]);\n        }\n        return this;\n    }\n\n    companions(companions: BuildArgs<Stage.CompanionItem>): this {\n        this.#seqBuilder.companions([companions]);\n        return this;\n    }\n\n    commercialsEndOfStage(commercialsEndOfStage: BuildArgs<RichText.Node>): this {\n        this.#seqBuilder.commercialsEndOfStage([commercialsEndOfStage]);\n        return this;\n    }\n\n    build(): BodyStage {\n        return this.#seqBuilder.build();\n    }\n}\n\nclass BodyHeaderBuilder extends AbstractBuilder<BodyHeader> {\n    #variant: BodyHeader['variant'] = 'full';\n    #opener?: Opener = undefined;\n\n    variant(variant: BodyHeader['variant']): this {\n        this.#variant = variant;\n        return this;\n    }\n\n    opener(opener: BuildArg<Opener>): this {\n        this.#opener = mapBuildArg(opener);\n        return this;\n    }\n\n    build(): BodyHeader {\n        return {\n            variant: this.#variant,\n            opener: this.#opener,\n        };\n    }\n}\n\nclass ArticleSourceSeqBuilder extends AbstractSeqBuilder<ArticleSource> {\n    #nodes: SeqElement<RichText.Node[]> = [];\n\n    nodes(nodes: SeqElement<BuildArgs<RichText.Node>>): this {\n        this.#nodes = nodes.map(mapBuildArgs);\n        return this;\n    }\n\n    buildListItem(seqNextElement: SeqNextElementConverter): ArticleSource {\n        const id = hash('article-source', this.#nodes);\n        return {\n            id,\n            nodes: seqNextElement.array(this.#nodes),\n        };\n    }\n}\n\nclass ArticleSourceBuilder extends AbstractBuilder<ArticleSource> {\n    #seqBuilder: ArticleSourceSeqBuilder = new ArticleSourceSeqBuilder();\n\n    constructor(...nodes: BuildArgs<RichText.Node>) {\n        super();\n        this.nodes(...nodes);\n    }\n\n    nodes(...nodes: BuildArgs<RichText.Node>): this {\n        this.#seqBuilder.nodes([nodes]);\n        return this;\n    }\n\n    build(): ArticleSource {\n        return this.#seqBuilder.build();\n    }\n}\n\nclass ArticleSourcesBuilder extends AbstractBuilder<ArticleSources> {\n    #nodes: ArticleSource[] = [];\n    #hidden: ArticleSource[] = [];\n\n    nodes(...nodes: BuildArgs<ArticleSource>): this {\n        this.#nodes = nodes.map(mapBuildArg);\n        return this;\n    }\n\n    hidden(...hidden: BuildArgs<ArticleSource>): this {\n        this.#hidden = hidden.map(mapBuildArg);\n        return this;\n    }\n\n    build(): ArticleSources {\n        return {\n            nodes: this.#nodes,\n            hidden: this.#hidden,\n        };\n    }\n}"
  ],
  "version": 3
}
