{
  "mappings": "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",
  "names": [
    "node",
    "create",
    "BodyBuilder",
    "trustBox",
    "TrustBoxBuilder",
    "opener",
    "OpenerBuilder",
    "stage",
    "BodyStageBuilder",
    "header",
    "BodyHeaderBuilder",
    "source",
    "nodes",
    "ArticleSourceBuilder",
    "sources",
    "ArticleSourcesBuilder",
    "seq",
    "BodyStageSeqBuilder",
    "ArticleSourceSeqBuilder",
    "AbstractBuilder",
    "stages",
    "map",
    "mapBuildArg",
    "disclaimer",
    "articleSources",
    "build",
    "undefined",
    "hidden",
    "element",
    "image",
    "AbstractSeqBuilder",
    "mapBuildArgs",
    "companions",
    "commercialsEndOfStage",
    "buildListItem",
    "seqNextElement",
    "id",
    "hash",
    "array",
    "maybe",
    "seqBuilder",
    "variant"
  ],
  "sources": [
    "../../input/index.ts"
  ],
  "sourcesContent": [
    "import { AbstractBuilder, AbstractSeqBuilder } from './AbstractBuilders';\nimport { hash, mapBuildArg, mapBuildArgs } from './Builder.utils';\nimport { image } from './ElementBuilder';\n\nimport type {\n    Body,\n    BodyStage,\n    TrustBox,\n    RichText,\n    Opener,\n    BodyHeader,\n    Stage,\n    ArticleSource,\n    ArticleSources,\n} from '@paper/models';\nimport type { BuildArg, BuildArgs, CreateBuilder, SeqElement, SeqNextElementConverter } from './types';\n\n/**\n * @deprecated use {Builder.body.node.img()}\n */\nexport * from './BodyNodesBuilder';\nexport * as node from './BodyNodesBuilder';\n\nexport const create: CreateBuilder<BodyBuilder> = () => new BodyBuilder();\nexport const trustBox: CreateBuilder<TrustBoxBuilder> = () => new TrustBoxBuilder();\nexport const opener: CreateBuilder<OpenerBuilder> = () => new OpenerBuilder();\nexport const stage: CreateBuilder<BodyStageBuilder> = () => new BodyStageBuilder();\nexport const header: CreateBuilder<BodyHeaderBuilder> = () => new BodyHeaderBuilder();\nexport const source: CreateBuilder<ArticleSourceBuilder, BuildArgs<RichText.Node>> = (\n    nodes: BuildArgs<RichText.Node> = [],\n) => new ArticleSourceBuilder(...nodes);\nexport const sources: CreateBuilder<ArticleSourcesBuilder> = () => new ArticleSourcesBuilder();\n\nexport const seq = {\n    stage: (() => new BodyStageSeqBuilder()) as CreateBuilder<BodyStageSeqBuilder>,\n    source: (() => new ArticleSourceSeqBuilder()) as CreateBuilder<ArticleSourceSeqBuilder>,\n} as const;\n\nclass BodyBuilder extends AbstractBuilder<Body> {\n    #stages: BodyStage[] = [];\n    #trustBox?: TrustBox = undefined;\n    #disclaimer?: RichText.Node[] = undefined;\n    #articleSources?: ArticleSources = undefined;\n\n    stages(...stages: BuildArgs<BodyStage>): this {\n        this.#stages = stages.map(mapBuildArg);\n        return this;\n    }\n\n    trustBox(trustBox?: BuildArg<TrustBox>): this {\n        this.#trustBox = mapBuildArg(trustBox);\n        return this;\n    }\n\n    disclaimer(disclaimer?: BuildArgs<RichText.Node>): this {\n        this.#disclaimer = disclaimer?.map(mapBuildArg);\n        return this;\n    }\n\n    articleSources(articleSources?: BuildArg<ArticleSources>): this {\n        this.#articleSources = mapBuildArg(articleSources);\n        return this;\n    }\n\n    build(): Body {\n        return {\n            stages: this.#stages,\n            trustBox: this.#trustBox,\n            disclaimer: this.#disclaimer,\n            articleSources: this.#articleSources,\n        };\n    }\n}\n\nclass TrustBoxBuilder extends AbstractBuilder<TrustBox> {\n    #nodes: RichText.Node[] = [];\n    #hidden: RichText.Node[] = [];\n\n    nodes(nodes: BuildArgs<RichText.Node>): this {\n        this.#nodes = nodes.map(mapBuildArg);\n        return this;\n    }\n\n    hidden(hidden: BuildArgs<RichText.Node>): this {\n        this.#hidden = hidden.map(mapBuildArg);\n        return this;\n    }\n\n    build(): TrustBox {\n        return {\n            nodes: this.#nodes,\n            hidden: this.#hidden,\n        };\n    }\n}\n\nclass OpenerBuilder extends AbstractBuilder<Opener> {\n    #element: Opener['element'] = image().build();\n\n    element(element: BuildArg<Opener['element']>): this {\n        this.#element = mapBuildArg(element);\n        return this;\n    }\n\n    build(): Opener {\n        return {\n            element: this.#element,\n        };\n    }\n}\n\nclass BodyStageSeqBuilder extends AbstractSeqBuilder<BodyStage> {\n    #nodes: SeqElement<RichText.Node[]> = [];\n    #header?: SeqElement<BodyHeader> = undefined;\n    #companions: SeqElement<Stage.CompanionItem[]> = [];\n    #commercialsEndOfStage: SeqElement<RichText.Node[]> = [];\n\n    nodes(nodes: SeqElement<BuildArgs<RichText.Node>>): this {\n        this.#nodes = nodes.map(mapBuildArgs);\n        return this;\n    }\n\n    header(header?: SeqElement<BuildArg<BodyHeader>>): this {\n        this.#header = mapBuildArgs(header ?? []);\n        return this;\n    }\n\n    companions(companions: SeqElement<BuildArgs<Stage.CompanionItem>>): this {\n        this.#companions = companions.map(mapBuildArgs);\n        return this;\n    }\n\n    commercialsEndOfStage(commercialsEndOfStage: SeqElement<BuildArgs<RichText.Node>>): this {\n        this.#commercialsEndOfStage = commercialsEndOfStage.map(mapBuildArgs);\n        return this;\n    }\n\n    buildListItem(seqNextElement: SeqNextElementConverter): BodyStage {\n        return {\n            id: hash('bodyStage', this.#nodes, this.#companions, this.#commercialsEndOfStage, this.#header),\n            nodes: seqNextElement.array(this.#nodes),\n            header: seqNextElement.maybe(this.#header),\n            companions: seqNextElement.array(this.#companions),\n            commercialsEndOfStage: seqNextElement.array(this.#commercialsEndOfStage),\n        };\n    }\n}\n\nclass BodyStageBuilder extends AbstractBuilder<BodyStage> {\n    #seqBuilder: BodyStageSeqBuilder = new BodyStageSeqBuilder();\n\n    nodes(nodes: BuildArgs<RichText.Node>): this {\n        this.#seqBuilder.nodes([nodes]);\n        return this;\n    }\n\n    header(header?: BuildArg<BodyHeader>): this {\n        if (header) {\n            this.#seqBuilder.header([header]);\n        }\n        return this;\n    }\n\n    companions(companions: BuildArgs<Stage.CompanionItem>): this {\n        this.#seqBuilder.companions([companions]);\n        return this;\n    }\n\n    commercialsEndOfStage(commercialsEndOfStage: BuildArgs<RichText.Node>): this {\n        this.#seqBuilder.commercialsEndOfStage([commercialsEndOfStage]);\n        return this;\n    }\n\n    build(): BodyStage {\n        return this.#seqBuilder.build();\n    }\n}\n\nclass BodyHeaderBuilder extends AbstractBuilder<BodyHeader> {\n    #variant: BodyHeader['variant'] = 'full';\n    #opener?: Opener = undefined;\n\n    variant(variant: BodyHeader['variant']): this {\n        this.#variant = variant;\n        return this;\n    }\n\n    opener(opener: BuildArg<Opener>): this {\n        this.#opener = mapBuildArg(opener);\n        return this;\n    }\n\n    build(): BodyHeader {\n        return {\n            variant: this.#variant,\n            opener: this.#opener,\n        };\n    }\n}\n\nclass ArticleSourceSeqBuilder extends AbstractSeqBuilder<ArticleSource> {\n    #nodes: SeqElement<RichText.Node[]> = [];\n\n    nodes(nodes: SeqElement<BuildArgs<RichText.Node>>): this {\n        this.#nodes = nodes.map(mapBuildArgs);\n        return this;\n    }\n\n    buildListItem(seqNextElement: SeqNextElementConverter): ArticleSource {\n        const id = hash('article-source', this.#nodes);\n        return {\n            id,\n            nodes: seqNextElement.array(this.#nodes),\n        };\n    }\n}\n\nclass ArticleSourceBuilder extends AbstractBuilder<ArticleSource> {\n    #seqBuilder: ArticleSourceSeqBuilder = new ArticleSourceSeqBuilder();\n\n    constructor(...nodes: BuildArgs<RichText.Node>) {\n        super();\n        this.nodes(...nodes);\n    }\n\n    nodes(...nodes: BuildArgs<RichText.Node>): this {\n        this.#seqBuilder.nodes([nodes]);\n        return this;\n    }\n\n    build(): ArticleSource {\n        return this.#seqBuilder.build();\n    }\n}\n\nclass ArticleSourcesBuilder extends AbstractBuilder<ArticleSources> {\n    #nodes: ArticleSource[] = [];\n    #hidden: ArticleSource[] = [];\n\n    nodes(...nodes: BuildArgs<ArticleSource>): this {\n        this.#nodes = nodes.map(mapBuildArg);\n        return this;\n    }\n\n    hidden(...hidden: BuildArgs<ArticleSource>): this {\n        this.#hidden = hidden.map(mapBuildArg);\n        return this;\n    }\n\n    build(): ArticleSources {\n        return {\n            nodes: this.#nodes,\n            hidden: this.#hidden,\n        };\n    }\n}"
  ],
  "version": 3
}
