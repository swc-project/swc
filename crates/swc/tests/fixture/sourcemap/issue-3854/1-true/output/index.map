{
  "mappings": "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",
  "names": [
    "create",
    "header",
    "node",
    "opener",
    "seq",
    "source",
    "sources",
    "stage",
    "trustBox",
    "BodyBuilder",
    "TrustBoxBuilder",
    "OpenerBuilder",
    "BodyStageBuilder",
    "BodyHeaderBuilder",
    "nodes",
    "ArticleSourceBuilder",
    "ArticleSourcesBuilder",
    "BodyStageSeqBuilder",
    "ArticleSourceSeqBuilder",
    "AbstractBuilder",
    "stages",
    "map",
    "mapBuildArg",
    "disclaimer",
    "articleSources",
    "build",
    "undefined",
    "hidden",
    "element",
    "image",
    "AbstractSeqBuilder",
    "mapBuildArgs",
    "companions",
    "commercialsEndOfStage",
    "buildListItem",
    "seqNextElement",
    "id",
    "hash",
    "array",
    "maybe",
    "seqBuilder",
    "variant",
    "constructor"
  ],
  "rangeMappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;",
  "sources": [
    "../../input/index.ts"
  ],
  "sourcesContent": [
    "import { AbstractBuilder, AbstractSeqBuilder } from \"./AbstractBuilders\";\nimport { hash, mapBuildArg, mapBuildArgs } from \"./Builder.utils\";\nimport { image } from \"./ElementBuilder\";\n\nimport type {\n    Body,\n    BodyStage,\n    TrustBox,\n    RichText,\n    Opener,\n    BodyHeader,\n    Stage,\n    ArticleSource,\n    ArticleSources,\n} from \"@paper/models\";\nimport type {\n    BuildArg,\n    BuildArgs,\n    CreateBuilder,\n    SeqElement,\n    SeqNextElementConverter,\n} from \"./types\";\n\n/**\n * @deprecated use {Builder.body.node.img()}\n */\nexport * from \"./BodyNodesBuilder\";\nexport * as node from \"./BodyNodesBuilder\";\n\nexport const create: CreateBuilder<BodyBuilder> = () => new BodyBuilder();\nexport const trustBox: CreateBuilder<TrustBoxBuilder> = () =>\n    new TrustBoxBuilder();\nexport const opener: CreateBuilder<OpenerBuilder> = () => new OpenerBuilder();\nexport const stage: CreateBuilder<BodyStageBuilder> = () =>\n    new BodyStageBuilder();\nexport const header: CreateBuilder<BodyHeaderBuilder> = () =>\n    new BodyHeaderBuilder();\nexport const source: CreateBuilder<\n    ArticleSourceBuilder,\n    BuildArgs<RichText.Node>\n> = (nodes: BuildArgs<RichText.Node> = []) =>\n    new ArticleSourceBuilder(...nodes);\nexport const sources: CreateBuilder<ArticleSourcesBuilder> = () =>\n    new ArticleSourcesBuilder();\n\nexport const seq = {\n    stage: (() =>\n        new BodyStageSeqBuilder()) as CreateBuilder<BodyStageSeqBuilder>,\n    source: (() =>\n        new ArticleSourceSeqBuilder()) as CreateBuilder<ArticleSourceSeqBuilder>,\n} as const;\n\nclass BodyBuilder extends AbstractBuilder<Body> {\n    #stages: BodyStage[] = [];\n    #trustBox?: TrustBox = undefined;\n    #disclaimer?: RichText.Node[] = undefined;\n    #articleSources?: ArticleSources = undefined;\n\n    stages(...stages: BuildArgs<BodyStage>): this {\n        this.#stages = stages.map(mapBuildArg);\n        return this;\n    }\n\n    trustBox(trustBox?: BuildArg<TrustBox>): this {\n        this.#trustBox = mapBuildArg(trustBox);\n        return this;\n    }\n\n    disclaimer(disclaimer?: BuildArgs<RichText.Node>): this {\n        this.#disclaimer = disclaimer?.map(mapBuildArg);\n        return this;\n    }\n\n    articleSources(articleSources?: BuildArg<ArticleSources>): this {\n        this.#articleSources = mapBuildArg(articleSources);\n        return this;\n    }\n\n    build(): Body {\n        return {\n            stages: this.#stages,\n            trustBox: this.#trustBox,\n            disclaimer: this.#disclaimer,\n            articleSources: this.#articleSources,\n        };\n    }\n}\n\nclass TrustBoxBuilder extends AbstractBuilder<TrustBox> {\n    #nodes: RichText.Node[] = [];\n    #hidden: RichText.Node[] = [];\n\n    nodes(nodes: BuildArgs<RichText.Node>): this {\n        this.#nodes = nodes.map(mapBuildArg);\n        return this;\n    }\n\n    hidden(hidden: BuildArgs<RichText.Node>): this {\n        this.#hidden = hidden.map(mapBuildArg);\n        return this;\n    }\n\n    build(): TrustBox {\n        return {\n            nodes: this.#nodes,\n            hidden: this.#hidden,\n        };\n    }\n}\n\nclass OpenerBuilder extends AbstractBuilder<Opener> {\n    #element: Opener[\"element\"] = image().build();\n\n    element(element: BuildArg<Opener[\"element\"]>): this {\n        this.#element = mapBuildArg(element);\n        return this;\n    }\n\n    build(): Opener {\n        return {\n            element: this.#element,\n        };\n    }\n}\n\nclass BodyStageSeqBuilder extends AbstractSeqBuilder<BodyStage> {\n    #nodes: SeqElement<RichText.Node[]> = [];\n    #header?: SeqElement<BodyHeader> = undefined;\n    #companions: SeqElement<Stage.CompanionItem[]> = [];\n    #commercialsEndOfStage: SeqElement<RichText.Node[]> = [];\n\n    nodes(nodes: SeqElement<BuildArgs<RichText.Node>>): this {\n        this.#nodes = nodes.map(mapBuildArgs);\n        return this;\n    }\n\n    header(header?: SeqElement<BuildArg<BodyHeader>>): this {\n        this.#header = mapBuildArgs(header ?? []);\n        return this;\n    }\n\n    companions(companions: SeqElement<BuildArgs<Stage.CompanionItem>>): this {\n        this.#companions = companions.map(mapBuildArgs);\n        return this;\n    }\n\n    commercialsEndOfStage(\n        commercialsEndOfStage: SeqElement<BuildArgs<RichText.Node>>\n    ): this {\n        this.#commercialsEndOfStage = commercialsEndOfStage.map(mapBuildArgs);\n        return this;\n    }\n\n    buildListItem(seqNextElement: SeqNextElementConverter): BodyStage {\n        return {\n            id: hash(\n                \"bodyStage\",\n                this.#nodes,\n                this.#companions,\n                this.#commercialsEndOfStage,\n                this.#header\n            ),\n            nodes: seqNextElement.array(this.#nodes),\n            header: seqNextElement.maybe(this.#header),\n            companions: seqNextElement.array(this.#companions),\n            commercialsEndOfStage: seqNextElement.array(\n                this.#commercialsEndOfStage\n            ),\n        };\n    }\n}\n\nclass BodyStageBuilder extends AbstractBuilder<BodyStage> {\n    #seqBuilder: BodyStageSeqBuilder = new BodyStageSeqBuilder();\n\n    nodes(nodes: BuildArgs<RichText.Node>): this {\n        this.#seqBuilder.nodes([nodes]);\n        return this;\n    }\n\n    header(header?: BuildArg<BodyHeader>): this {\n        if (header) {\n            this.#seqBuilder.header([header]);\n        }\n        return this;\n    }\n\n    companions(companions: BuildArgs<Stage.CompanionItem>): this {\n        this.#seqBuilder.companions([companions]);\n        return this;\n    }\n\n    commercialsEndOfStage(\n        commercialsEndOfStage: BuildArgs<RichText.Node>\n    ): this {\n        this.#seqBuilder.commercialsEndOfStage([commercialsEndOfStage]);\n        return this;\n    }\n\n    build(): BodyStage {\n        return this.#seqBuilder.build();\n    }\n}\n\nclass BodyHeaderBuilder extends AbstractBuilder<BodyHeader> {\n    #variant: BodyHeader[\"variant\"] = \"full\";\n    #opener?: Opener = undefined;\n\n    variant(variant: BodyHeader[\"variant\"]): this {\n        this.#variant = variant;\n        return this;\n    }\n\n    opener(opener: BuildArg<Opener>): this {\n        this.#opener = mapBuildArg(opener);\n        return this;\n    }\n\n    build(): BodyHeader {\n        return {\n            variant: this.#variant,\n            opener: this.#opener,\n        };\n    }\n}\n\nclass ArticleSourceSeqBuilder extends AbstractSeqBuilder<ArticleSource> {\n    #nodes: SeqElement<RichText.Node[]> = [];\n\n    nodes(nodes: SeqElement<BuildArgs<RichText.Node>>): this {\n        this.#nodes = nodes.map(mapBuildArgs);\n        return this;\n    }\n\n    buildListItem(seqNextElement: SeqNextElementConverter): ArticleSource {\n        const id = hash(\"article-source\", this.#nodes);\n        return {\n            id,\n            nodes: seqNextElement.array(this.#nodes),\n        };\n    }\n}\n\nclass ArticleSourceBuilder extends AbstractBuilder<ArticleSource> {\n    #seqBuilder: ArticleSourceSeqBuilder = new ArticleSourceSeqBuilder();\n\n    constructor(...nodes: BuildArgs<RichText.Node>) {\n        super();\n        this.nodes(...nodes);\n    }\n\n    nodes(...nodes: BuildArgs<RichText.Node>): this {\n        this.#seqBuilder.nodes([nodes]);\n        return this;\n    }\n\n    build(): ArticleSource {\n        return this.#seqBuilder.build();\n    }\n}\n\nclass ArticleSourcesBuilder extends AbstractBuilder<ArticleSources> {\n    #nodes: ArticleSource[] = [];\n    #hidden: ArticleSource[] = [];\n\n    nodes(...nodes: BuildArgs<ArticleSource>): this {\n        this.#nodes = nodes.map(mapBuildArg);\n        return this;\n    }\n\n    hidden(...hidden: BuildArgs<ArticleSource>): this {\n        this.#hidden = hidden.map(mapBuildArg);\n        return this;\n    }\n\n    build(): ArticleSources {\n        return {\n            nodes: this.#nodes,\n            hidden: this.#hidden,\n        };\n    }\n}\n"
  ],
  "version": 3
}
