  x Use the isNaN function to compare with NaN
   ,-[1:1]
 1 | if (foo == NaN) {}
   :     ^^^^^|^^^^
   :          `-- this will always return false
 2 | 
 3 | if (NaN == foo) {}
   `----
  help: NaN is a special value and `NaN == NaN` is false
  x Use the isNaN function to compare with NaN
   ,-[3:1]
 1 | if (foo == NaN) {}
 2 | 
 3 | if (NaN == foo) {}
   :     ^^^^^|^^^^
   :          `-- this will always return false
 4 | 
 5 | if (foo != NaN) {}
   `----
  help: NaN is a special value and `NaN == NaN` is false
  x Use the isNaN function to compare with NaN
   ,-[5:1]
 2 | 
 3 | if (NaN == foo) {}
 4 | 
 5 | if (foo != NaN) {}
   :     ^^^^^|^^^^
   :          `-- this will always return true
 6 | 
 7 | if (foo == Number.NaN) {}
   `----
  help: NaN is a special value and `NaN == NaN` is false
  x Use the isNaN function to compare with NaN
   ,-[7:1]
 4 | 
 5 | if (foo != NaN) {}
 6 | 
 7 | if (foo == Number.NaN) {}
   :     ^^^^^^^^|^^^^^^^^
   :             `-- this will always return false
 8 | 
 9 | if (foo != Number.NaN) {}
   `----
  help: NaN is a special value and `NaN == NaN` is false
  x Use the isNaN function to compare with NaN
    ,-[9:1]
  6 | 
  7 | if (foo == Number.NaN) {}
  8 | 
  9 | if (foo != Number.NaN) {}
    :     ^^^^^^^^|^^^^^^^^
    :             `-- this will always return true
 10 | 
 11 | if (foo == Number['NaN']) {}
    `----
  help: NaN is a special value and `NaN == NaN` is false
  x Use the isNaN function to compare with NaN
    ,-[11:1]
  8 | 
  9 | if (foo != Number.NaN) {}
 10 | 
 11 | if (foo == Number['NaN']) {}
    :     ^^^^^^^^^^|^^^^^^^^^
    :               `-- this will always return false
 12 | 
 13 | if (foo === NaN) {}
    `----
  help: NaN is a special value and `NaN == NaN` is false
  x Use the isNaN function to compare with NaN
    ,-[20:1]
 17 | if (foo == Obj.NaN) {}
 18 | 
 19 | 
 20 | myArray.indexOf(NaN);
    : ^^^^^^^^^^|^^^^^^^^^
    :           `-- this will always return -1
 21 | 
 22 | myArray.lastIndexOf(NaN);
    `----
  help: NaN is a special value and `NaN == NaN` is false
  x Use the isNaN function to compare with NaN
    ,-[22:1]
 19 | 
 20 | myArray.indexOf(NaN);
 21 | 
 22 | myArray.lastIndexOf(NaN);
    : ^^^^^^^^^^^^|^^^^^^^^^^^
    :             `-- this will always return -1
 23 | 
 24 | myArray.lastIndexOf(Number.NaN);
    `----
  help: NaN is a special value and `NaN == NaN` is false
  x Use the isNaN function to compare with NaN
    ,-[24:1]
 21 | 
 22 | myArray.lastIndexOf(NaN);
 23 | 
 24 | myArray.lastIndexOf(Number.NaN);
    : ^^^^^^^^^^^^^^^|^^^^^^^^^^^^^^^
    :                `-- this will always return -1
 25 | 
 26 | myArray.lastIndexOf(Number['NaN']);
    `----
  help: NaN is a special value and `NaN == NaN` is false
  x Use the isNaN function to compare with NaN
    ,-[26:1]
 23 | 
 24 | myArray.lastIndexOf(Number.NaN);
 25 | 
 26 | myArray.lastIndexOf(Number['NaN']);
    : ^^^^^^^^^^^^^^^^^|^^^^^^^^^^^^^^^^
    :                  `-- this will always return -1
 27 | 
 28 | myArray.lastIndexOf(NoN);
    `----
  help: NaN is a special value and `NaN == NaN` is false
  x Use the isNaN function to compare with NaN
    ,-[33:1]
 30 | myArray.lastIndexOf(1);
 31 | 
 32 | switch (foo) {
 33 |   case NaN:
    :        ^|^
    :         `-- this will never match the discriminant
 34 |       bar();
 35 |       break;
 36 |   case 1:
    `----
  help: NaN is a special value and `NaN == NaN` is false
  x Use the isNaN function to compare with NaN
    ,-[41:1]
 38 |       break;
 39 | }
 40 | 
 41 | switch (NaN) {
    :         ^|^
    :          `-- this will never match the test of any case
 42 |   case a:
 43 |       bar();
 44 |       break;
    `----
  help: NaN is a special value and `NaN == NaN` is false
