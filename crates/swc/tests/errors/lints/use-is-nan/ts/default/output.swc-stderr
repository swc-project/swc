
  x Use the isNaN function to compare with NaN
   ,----
 1 | switch (NaN as any) {
   :         ^^^^^|^^^^
   :              `-- this will never match the test of any case
   `----
  help: NaN is a special value and `NaN == NaN` is false

  x Use the isNaN function to compare with NaN
   ,----
 2 | case NaN as any:
   :      ^^^^^|^^^^
   :           `-- this will never match the discriminant
   `----
  help: NaN is a special value and `NaN == NaN` is false

  x Use the isNaN function to compare with NaN
   ,----
 3 | case Number.NaN as any:
   :      ^^^^^^^^|^^^^^^^^
   :              `-- this will never match the discriminant
   `----
  help: NaN is a special value and `NaN == NaN` is false

  x Use the isNaN function to compare with NaN
   ,----
 8 | if (foo == Number.NaN as any) {}
   :     ^^^^^^^^^^^^|^^^^^^^^^^^
   :                 `-- this will always return false
   `----
  help: NaN is a special value and `NaN == NaN` is false

  x Use the isNaN function to compare with NaN
    ,----
 10 | myArray.lastIndexOf(NaN as any);
    : ^^^^^^^^^^^^^^^|^^^^^^^^^^^^^^^
    :                `-- this will always return -1
    `----
  help: NaN is a special value and `NaN == NaN` is false

  x Use the isNaN function to compare with NaN
    ,----
 12 | myArray.lastIndexOf(Number.NaN as any);
    : ^^^^^^^^^^^^^^^^^^^|^^^^^^^^^^^^^^^^^^
    :                    `-- this will always return -1
    `----
  help: NaN is a special value and `NaN == NaN` is false

  x Use the isNaN function to compare with NaN
    ,----
 14 | myArray.lastIndexOf(Number['NaN'] as any);
    : ^^^^^^^^^^^^^^^^^^^^|^^^^^^^^^^^^^^^^^^^^
    :                     `-- this will always return -1
    `----
  help: NaN is a special value and `NaN == NaN` is false
