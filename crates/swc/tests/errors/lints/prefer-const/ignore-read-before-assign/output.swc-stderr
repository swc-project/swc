  x 'x1' is never reassigned. Use 'const' insted
   ,-[2:1]
 1 | () => {
 2 |     let x1 = 1;
   :         ^^
 3 |     foo(x1);
 4 | };
   `----
  x 'i' is never reassigned. Use 'const' insted
    ,-[7:1]
  4 | };
  5 | 
  6 | () => {
  7 |     for (let i in [1, 2, 3]) {
    :              ^
  8 |         foo(i);
  9 |     }
 10 | }
    `----
  x 'x2' is never reassigned. Use 'const' insted
    ,-[13:1]
 10 | }
 11 | 
 12 | () => {
 13 |     let [x2 = -1, y2] = [1, 2];
    :          ^^
 14 |     y2 = 0;
 15 | }
    `----
  x 'x3' is never reassigned. Use 'const' insted
    ,-[18:1]
 15 | }
 16 | 
 17 | () => {
 18 |     let { a: x3 = -1, b: y3 } = { a: 1, b: 2 };
    :              ^^
 19 |     y3 = 0;
 20 | }
    `----
  x 'x' is never reassigned. Use 'const' insted
    ,-[22:1]
 19 |     y3 = 0;
 20 | }
 21 | 
 22 | (function () { let x = 1; foo(x); })();
    :                    ^
 23 | 
 24 | (function () { for (let i in [1, 2, 3]) { foo(i); } })();
    `----
  x 'i' is never reassigned. Use 'const' insted
    ,-[24:1]
 21 | 
 22 | (function () { let x = 1; foo(x); })();
 23 | 
 24 | (function () { for (let i in [1, 2, 3]) { foo(i); } })();
    :                         ^
 25 | 
 26 | (function () { for (let x of [1, 2, 3]) { foo(x); } })();
    `----
  x 'x' is never reassigned. Use 'const' insted
    ,-[26:1]
 23 | 
 24 | (function () { for (let i in [1, 2, 3]) { foo(i); } })();
 25 | 
 26 | (function () { for (let x of [1, 2, 3]) { foo(x); } })();
    :                         ^
 27 | 
 28 | (function () { let [x = -1, y] = [1, 2]; y = 0; })();
    `----
  x 'x' is never reassigned. Use 'const' insted
    ,-[28:1]
 25 | 
 26 | (function () { for (let x of [1, 2, 3]) { foo(x); } })();
 27 | 
 28 | (function () { let [x = -1, y] = [1, 2]; y = 0; })();
    :                     ^
 29 | 
 30 | () => {
 31 |     let f = (function () { let g = x; })();
    `----
  x 'g' is never reassigned. Use 'const' insted
    ,-[31:1]
 28 | (function () { let [x = -1, y] = [1, 2]; y = 0; })();
 29 | 
 30 | () => {
 31 |     let f = (function () { let g = x; })();
    :                                ^
 32 |     f = 1;
 33 | }
    `----
  x 'x' is never reassigned. Use 'const' insted
    ,-[35:1]
 32 |     f = 1;
 33 | }
 34 | 
 35 | (function () { let { a: x = -1, b: y } = { a: 1, b: 2 }; y = 0; })();
    :                         ^
 36 | 
 37 | () => {
 38 |     let x = 0;
    `----
  x 'x' is never reassigned. Use 'const' insted
    ,-[39:1]
 36 | 
 37 | () => {
 38 |     let x = 0;
 39 |     { let x = 1; foo(x); }
    :           ^
 40 |     x = 0;
 41 | }
    `----
  x 'x' is never reassigned. Use 'const' insted
    ,-[44:1]
 41 | }
 42 | 
 43 | () => {
 44 |     for (let i = 0; i < 10; ++i) { let x = 1; foo(x); }
    :                                        ^
 45 | }
 46 | 
 47 | () => {
    `----
  x 'i' is never reassigned. Use 'const' insted
    ,-[48:1]
 45 | }
 46 | 
 47 | () => {
 48 |     for (let i in [1, 2, 3]) { let x = 1; foo(x); }
    :              ^
 49 | }
 50 | 
 51 | () => {
    `----
  x 'x' is never reassigned. Use 'const' insted
    ,-[48:1]
 45 | }
 46 | 
 47 | () => {
 48 |     for (let i in [1, 2, 3]) { let x = 1; foo(x); }
    :                                    ^
 49 | }
 50 | 
 51 | () => {
    `----
  x 'l' is never reassigned. Use 'const' insted
    ,-[54:1]
 51 | () => {
 52 |     var foo = function () {
 53 |         for (const b5 of c5) {
 54 |             let l;
    :                 ^
 55 |             l = 1;
 56 |         }
 57 |     };
    `----
  x 'a' is never reassigned. Use 'const' insted
    ,-[64:1]
 61 |     var foo = function () {
 62 |         for (const b of c) {
 63 |             let a;
 64 |             ({ a } = 1);
    :                ^
 65 |         }
 66 |     };
 67 | }
    `----
  x 'x' is never reassigned. Use 'const' insted
    ,-[70:1]
 67 | }
 68 | 
 69 | () => {
 70 |     let x;
    :         ^
 71 |     x = 0;
 72 | }
    `----
  x 'x' is never reassigned. Use 'const' insted
    ,-[75:1]
 72 | }
 73 | 
 74 | () => {
 75 |     switch (a) { case 0: let x; x = 0; }
    :                              ^
 76 | }
 77 | 
 78 | (function () { let x; x = 1; })();
    `----
  x 'x' is never reassigned. Use 'const' insted
    ,-[78:1]
 75 |     switch (a) { case 0: let x; x = 0; }
 76 | }
 77 | 
 78 | (function () { let x; x = 1; })();
    :                    ^
 79 | 
 80 | () => {
 81 |     let { a = 0, b } = obj; b = 0; foo(a, b);
    `----
  x 'a' is never reassigned. Use 'const' insted
    ,-[81:1]
 78 | (function () { let x; x = 1; })();
 79 | 
 80 | () => {
 81 |     let { a = 0, b } = obj; b = 0; foo(a, b);
    :           ^
 82 | }
 83 | 
 84 | () => {
    `----
  x 'c' is never reassigned. Use 'const' insted
    ,-[85:1]
 82 | }
 83 | 
 84 | () => {
 85 |     let { a: { b, c } } = { a: { b: 1, c: 2 } }; b = 3;
    :                   ^
 86 | }
 87 | 
 88 | () => {
    `----
  x 'b' is never reassigned. Use 'const' insted
    ,-[89:1]
 86 | }
 87 | 
 88 | () => {
 89 |     let { a: { b, c } } = { a: { b: 1, c: 2 } }
    :                ^
 90 | }
 91 | 
 92 | () => {
    `----
  x 'c' is never reassigned. Use 'const' insted
    ,-[89:1]
 86 | }
 87 | 
 88 | () => {
 89 |     let { a: { b, c } } = { a: { b: 1, c: 2 } }
    :                   ^
 90 | }
 91 | 
 92 | () => {
    `----
  x 'a' is never reassigned. Use 'const' insted
    ,-[93:1]
 90 | }
 91 | 
 92 | () => {
 93 |     let [a] = [1]
    :          ^
 94 | }
 95 | 
 96 | () => {
    `----
  x 'predicate' is never reassigned. Use 'const' insted
     ,-[98:1]
  95 | 
  96 | () => {
  97 |     let predicate;
  98 |     [, { foo: returnType, predicate }] = foo();
     :                           ^^^^^^^^^
  99 | }
 100 | 
 101 | () => {
     `----
  x 'x' is never reassigned. Use 'const' insted
     ,-[102:1]
  99 | }
 100 | 
 101 | () => {
 102 |     let x = 'x', y = 'y';
     :         ^
 103 | }
 104 | 
     `----
  x 'y' is never reassigned. Use 'const' insted
     ,-[102:1]
  99 | }
 100 | 
 101 | () => {
 102 |     let x = 'x', y = 'y';
     :                  ^
 103 | }
 104 | 
     `----
  x 'rest' is never reassigned. Use 'const' insted
     ,-[116:1]
 113 | 
 114 | 
 115 | () => {
 116 |     let { l, ...rest } = {};
     :                 ^^^^
 117 |     l = 1;
 118 | }
     `----
