  x 'x1' is never reassigned. Use 'const' insted
   ,-[2:1]
 1 | () => {
 2 |     let x1 = 1;
   :         ^^
 3 |     foo(x1);
 4 | };
   `----
  x 'i' is never reassigned. Use 'const' insted
    ,-[7:1]
  4 | };
  5 | 
  6 | () => {
  7 |     for (let i in [1, 2, 3]) {
    :              ^
  8 |         foo(i);
  9 |     }
 10 | }
    `----
  x 'x2' is never reassigned. Use 'const' insted
    ,-[13:1]
 10 | }
 11 | 
 12 | () => {
 13 |     let [x2 = -1, y2] = [1, 2];
    :          ^^
 14 |     y2 = 0;
 15 | }
    `----
  x 'x3' is never reassigned. Use 'const' insted
    ,-[18:1]
 15 | }
 16 | 
 17 | () => {
 18 |     let { a: x3 = -1, b: y3 } = { a: 1, b: 2 };
    :              ^^
 19 |     y3 = 0;
 20 | }
    `----
  x 'x' is never reassigned. Use 'const' insted
    ,-[23:1]
 20 | }
 21 | 
 22 | 
 23 | (function () { let x = 1; foo(x); })();
    :                    ^
 24 | 
 25 | (function () { for (let i in [1, 2, 3]) { foo(i); } })();
    `----
  x 'i' is never reassigned. Use 'const' insted
    ,-[25:1]
 22 | 
 23 | (function () { let x = 1; foo(x); })();
 24 | 
 25 | (function () { for (let i in [1, 2, 3]) { foo(i); } })();
    :                         ^
 26 | 
 27 | (function () { for (let x of [1, 2, 3]) { foo(x); } })();
    `----
  x 'x' is never reassigned. Use 'const' insted
    ,-[27:1]
 24 | 
 25 | (function () { for (let i in [1, 2, 3]) { foo(i); } })();
 26 | 
 27 | (function () { for (let x of [1, 2, 3]) { foo(x); } })();
    :                         ^
 28 | 
 29 | (function () { let [x = -1, y] = [1, 2]; y = 0; })();
    `----
  x 'x' is never reassigned. Use 'const' insted
    ,-[29:1]
 26 | 
 27 | (function () { for (let x of [1, 2, 3]) { foo(x); } })();
 28 | 
 29 | (function () { let [x = -1, y] = [1, 2]; y = 0; })();
    :                     ^
 30 | 
 31 | () => {
 32 |     let f = (function () { let g = x; })();
    `----
  x 'g' is never reassigned. Use 'const' insted
    ,-[32:1]
 29 | (function () { let [x = -1, y] = [1, 2]; y = 0; })();
 30 | 
 31 | () => {
 32 |     let f = (function () { let g = x; })();
    :                                ^
 33 |     f = 1;
 34 | }
    `----
  x 'x' is never reassigned. Use 'const' insted
    ,-[36:1]
 33 |     f = 1;
 34 | }
 35 | 
 36 | (function () { let { a: x = -1, b: y } = { a: 1, b: 2 }; y = 0; })();
    :                         ^
 37 | 
 38 | () => {
 39 |     let x = 0;
    `----
  x 'x' is never reassigned. Use 'const' insted
    ,-[40:1]
 37 | 
 38 | () => {
 39 |     let x = 0;
 40 |     { let x = 1; foo(x); }
    :           ^
 41 |     x = 0;
 42 | }
    `----
  x 'x' is never reassigned. Use 'const' insted
    ,-[45:1]
 42 | }
 43 | 
 44 | () => {
 45 |     for (let i = 0; i < 10; ++i) { let x = 1; foo(x); }
    :                                        ^
 46 | }
 47 | 
 48 | () => {
    `----
  x 'i' is never reassigned. Use 'const' insted
    ,-[49:1]
 46 | }
 47 | 
 48 | () => {
 49 |     for (let i in [1, 2, 3]) { let x = 1; foo(x); }
    :              ^
 50 | }
 51 | 
 52 | () => {
    `----
  x 'x' is never reassigned. Use 'const' insted
    ,-[49:1]
 46 | }
 47 | 
 48 | () => {
 49 |     for (let i in [1, 2, 3]) { let x = 1; foo(x); }
    :                                    ^
 50 | }
 51 | 
 52 | () => {
    `----
  x 'l' is never reassigned. Use 'const' insted
    ,-[55:1]
 52 | () => {
 53 |     var foo = function () {
 54 |         for (const b5 of c5) {
 55 |             let l;
    :                 ^
 56 |             l = 1;
 57 |         }
 58 |     };
    `----
  x 'a' is never reassigned. Use 'const' insted
    ,-[65:1]
 62 |     var foo = function () {
 63 |         for (const b of c) {
 64 |             let a;
 65 |             ({ a } = 1);
    :                ^
 66 |         }
 67 |     };
 68 | }
    `----
  x 'x' is never reassigned. Use 'const' insted
    ,-[71:1]
 68 | }
 69 | 
 70 | () => {
 71 |     let x;
    :         ^
 72 |     x = 0;
 73 | }
    `----
  x 'x' is never reassigned. Use 'const' insted
    ,-[76:1]
 73 | }
 74 | 
 75 | () => {
 76 |     switch (a) { case 0: let x; x = 0; }
    :                              ^
 77 | }
 78 | 
 79 | (function () { let x; x = 1; })();
    `----
  x 'x' is never reassigned. Use 'const' insted
    ,-[79:1]
 76 |     switch (a) { case 0: let x; x = 0; }
 77 | }
 78 | 
 79 | (function () { let x; x = 1; })();
    :                    ^
 80 | 
 81 | () => {
 82 |     let { a = 0, b } = obj; b = 0; foo(a, b);
    `----
  x 'a' is never reassigned. Use 'const' insted
    ,-[82:1]
 79 | (function () { let x; x = 1; })();
 80 | 
 81 | () => {
 82 |     let { a = 0, b } = obj; b = 0; foo(a, b);
    :           ^
 83 | }
 84 | 
 85 | () => {
    `----
  x 'c' is never reassigned. Use 'const' insted
    ,-[86:1]
 83 | }
 84 | 
 85 | () => {
 86 |     let { a: { b, c } } = { a: { b: 1, c: 2 } }; b = 3;
    :                   ^
 87 | }
 88 | 
 89 | () => {
    `----
  x 'b' is never reassigned. Use 'const' insted
    ,-[90:1]
 87 | }
 88 | 
 89 | () => {
 90 |     let { a: { b, c } } = { a: { b: 1, c: 2 } }
    :                ^
 91 | }
 92 | 
 93 | () => {
    `----
  x 'c' is never reassigned. Use 'const' insted
    ,-[90:1]
 87 | }
 88 | 
 89 | () => {
 90 |     let { a: { b, c } } = { a: { b: 1, c: 2 } }
    :                   ^
 91 | }
 92 | 
 93 | () => {
    `----
  x 'a' is never reassigned. Use 'const' insted
    ,-[94:1]
 91 | }
 92 | 
 93 | () => {
 94 |     let [a] = [1]
    :          ^
 95 | }
 96 | 
 97 | () => {
    `----
  x 'predicate' is never reassigned. Use 'const' insted
     ,-[99:1]
  96 | 
  97 | () => {
  98 |     let predicate;
  99 |     [, { foo: returnType, predicate }] = foo();
     :                           ^^^^^^^^^
 100 | }
 101 | 
 102 | () => {
     `----
  x 'x' is never reassigned. Use 'const' insted
     ,-[103:1]
 100 | }
 101 | 
 102 | () => {
 103 |     let x = 'x', y = 'y';
     :         ^
 104 | }
 105 | 
     `----
  x 'y' is never reassigned. Use 'const' insted
     ,-[103:1]
 100 | }
 101 | 
 102 | () => {
 103 |     let x = 'x', y = 'y';
     :                  ^
 104 | }
 105 | 
     `----
  x 'timer' is never reassigned. Use 'const' insted
     ,-[107:1]
 104 | }
 105 | 
 106 | 
 107 | let timer;
     :     ^^^^^
 108 | function initialize() {
 109 |     if (foo()) {
 110 |         clearInterval(timer);
     `----
  x 'rest' is never reassigned. Use 'const' insted
     ,-[117:1]
 114 | 
 115 | 
 116 | () => {
 117 |     let { l, ...rest } = {};
     :                 ^^^^
 118 |     l = 1;
 119 | }
     `----
