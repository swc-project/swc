#![doc = r" This file is generated by `tools/generate-code`. DO NOT MODIFY."]
#![allow(unused_variables)]
#![allow(clippy::all)]
pub use ::swc_visit::All;
use swc_css_ast::*;
#[doc = r" A visitor trait for traversing the AST."]
pub trait Visit {
    #[doc = "Visit a node of type `AbsoluteColorBase`.\n\nBy default, this method calls \
             [`AbsoluteColorBase::visit_children_with`]. If you want to recurse, you need to call \
             it manually."]
    #[inline]
    fn visit_absolute_color_base(&mut self, node: &AbsoluteColorBase) {
        <AbsoluteColorBase as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `AlphaValue`.\n\nBy default, this method calls \
             [`AlphaValue::visit_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_alpha_value(&mut self, node: &AlphaValue) {
        <AlphaValue as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `AnPlusB`.\n\nBy default, this method calls \
             [`AnPlusB::visit_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_an_plus_b(&mut self, node: &AnPlusB) {
        <AnPlusB as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `AnPlusBNotation`.\n\nBy default, this method calls \
             [`AnPlusBNotation::visit_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_an_plus_b_notation(&mut self, node: &AnPlusBNotation) {
        <AnPlusBNotation as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `Angle`.\n\nBy default, this method calls \
             [`Angle::visit_children_with`]. If you want to recurse, you need to call it manually."]
    #[inline]
    fn visit_angle(&mut self, node: &Angle) {
        <Angle as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `AnglePercentage`.\n\nBy default, this method calls \
             [`AnglePercentage::visit_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_angle_percentage(&mut self, node: &AnglePercentage) {
        <AnglePercentage as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `AnyNamespace`.\n\nBy default, this method calls \
             [`AnyNamespace::visit_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_any_namespace(&mut self, node: &AnyNamespace) {
        <AnyNamespace as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `AtRule`.\n\nBy default, this method calls \
             [`AtRule::visit_children_with`]. If you want to recurse, you need to call it manually."]
    #[inline]
    fn visit_at_rule(&mut self, node: &AtRule) {
        <AtRule as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `AtRuleName`.\n\nBy default, this method calls \
             [`AtRuleName::visit_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_at_rule_name(&mut self, node: &AtRuleName) {
        <AtRuleName as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `AtRulePrelude`.\n\nBy default, this method calls \
             [`AtRulePrelude::visit_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_at_rule_prelude(&mut self, node: &AtRulePrelude) {
        <AtRulePrelude as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `swc_atoms :: Atom`.\n\nBy default, this method calls \
             [`swc_atoms :: Atom::visit_children_with`]. If you want to recurse, you need to call \
             it manually."]
    #[inline]
    fn visit_atom(&mut self, node: &swc_atoms::Atom) {
        <swc_atoms::Atom as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `AttributeSelector`.\n\nBy default, this method calls \
             [`AttributeSelector::visit_children_with`]. If you want to recurse, you need to call \
             it manually."]
    #[inline]
    fn visit_attribute_selector(&mut self, node: &AttributeSelector) {
        <AttributeSelector as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `AttributeSelectorMatcher`.\n\nBy default, this method calls \
             [`AttributeSelectorMatcher::visit_children_with`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn visit_attribute_selector_matcher(&mut self, node: &AttributeSelectorMatcher) {
        <AttributeSelectorMatcher as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `AttributeSelectorMatcherValue`.\n\nBy default, this method \
             calls [`AttributeSelectorMatcherValue::visit_children_with`]. If you want to recurse, \
             you need to call it manually."]
    #[inline]
    fn visit_attribute_selector_matcher_value(&mut self, node: &AttributeSelectorMatcherValue) {
        <AttributeSelectorMatcherValue as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `AttributeSelectorModifier`.\n\nBy default, this method calls \
             [`AttributeSelectorModifier::visit_children_with`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn visit_attribute_selector_modifier(&mut self, node: &AttributeSelectorModifier) {
        <AttributeSelectorModifier as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `AttributeSelectorValue`.\n\nBy default, this method calls \
             [`AttributeSelectorValue::visit_children_with`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_attribute_selector_value(&mut self, node: &AttributeSelectorValue) {
        <AttributeSelectorValue as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `BinOp`.\n\nBy default, this method calls \
             [`BinOp::visit_children_with`]. If you want to recurse, you need to call it manually."]
    #[inline]
    fn visit_bin_op(&mut self, node: &BinOp) {
        <BinOp as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `CalcOperator`.\n\nBy default, this method calls \
             [`CalcOperator::visit_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_calc_operator(&mut self, node: &CalcOperator) {
        <CalcOperator as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `CalcOperatorType`.\n\nBy default, this method calls \
             [`CalcOperatorType::visit_children_with`]. If you want to recurse, you need to call \
             it manually."]
    #[inline]
    fn visit_calc_operator_type(&mut self, node: &CalcOperatorType) {
        <CalcOperatorType as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `CalcProduct`.\n\nBy default, this method calls \
             [`CalcProduct::visit_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_calc_product(&mut self, node: &CalcProduct) {
        <CalcProduct as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `CalcProductOrOperator`.\n\nBy default, this method calls \
             [`CalcProductOrOperator::visit_children_with`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_calc_product_or_operator(&mut self, node: &CalcProductOrOperator) {
        <CalcProductOrOperator as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `Vec < CalcProductOrOperator >`.\n\nBy default, this method \
             calls [`Vec < CalcProductOrOperator >::visit_children_with`]. If you want to recurse, \
             you need to call it manually."]
    #[inline]
    fn visit_calc_product_or_operators(&mut self, node: &[CalcProductOrOperator]) {
        <[CalcProductOrOperator] as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `CalcSum`.\n\nBy default, this method calls \
             [`CalcSum::visit_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_calc_sum(&mut self, node: &CalcSum) {
        <CalcSum as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `CalcValue`.\n\nBy default, this method calls \
             [`CalcValue::visit_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_calc_value(&mut self, node: &CalcValue) {
        <CalcValue as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `CalcValueOrOperator`.\n\nBy default, this method calls \
             [`CalcValueOrOperator::visit_children_with`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_calc_value_or_operator(&mut self, node: &CalcValueOrOperator) {
        <CalcValueOrOperator as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `Vec < CalcValueOrOperator >`.\n\nBy default, this method calls \
             [`Vec < CalcValueOrOperator >::visit_children_with`]. If you want to recurse, you \
             need to call it manually."]
    #[inline]
    fn visit_calc_value_or_operators(&mut self, node: &[CalcValueOrOperator]) {
        <[CalcValueOrOperator] as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `ClassSelector`.\n\nBy default, this method calls \
             [`ClassSelector::visit_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_class_selector(&mut self, node: &ClassSelector) {
        <ClassSelector as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `CmykComponent`.\n\nBy default, this method calls \
             [`CmykComponent::visit_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_cmyk_component(&mut self, node: &CmykComponent) {
        <CmykComponent as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `Color`.\n\nBy default, this method calls \
             [`Color::visit_children_with`]. If you want to recurse, you need to call it manually."]
    #[inline]
    fn visit_color(&mut self, node: &Color) {
        <Color as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `ColorProfileName`.\n\nBy default, this method calls \
             [`ColorProfileName::visit_children_with`]. If you want to recurse, you need to call \
             it manually."]
    #[inline]
    fn visit_color_profile_name(&mut self, node: &ColorProfileName) {
        <ColorProfileName as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `Combinator`.\n\nBy default, this method calls \
             [`Combinator::visit_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_combinator(&mut self, node: &Combinator) {
        <Combinator as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `CombinatorValue`.\n\nBy default, this method calls \
             [`CombinatorValue::visit_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_combinator_value(&mut self, node: &CombinatorValue) {
        <CombinatorValue as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `ComplexSelector`.\n\nBy default, this method calls \
             [`ComplexSelector::visit_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_complex_selector(&mut self, node: &ComplexSelector) {
        <ComplexSelector as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `ComplexSelectorChildren`.\n\nBy default, this method calls \
             [`ComplexSelectorChildren::visit_children_with`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_complex_selector_children(&mut self, node: &ComplexSelectorChildren) {
        <ComplexSelectorChildren as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `Vec < ComplexSelectorChildren >`.\n\nBy default, this method \
             calls [`Vec < ComplexSelectorChildren >::visit_children_with`]. If you want to \
             recurse, you need to call it manually."]
    #[inline]
    fn visit_complex_selector_childrens(&mut self, node: &[ComplexSelectorChildren]) {
        <[ComplexSelectorChildren] as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `Vec < ComplexSelector >`.\n\nBy default, this method calls \
             [`Vec < ComplexSelector >::visit_children_with`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_complex_selectors(&mut self, node: &[ComplexSelector]) {
        <[ComplexSelector] as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `ComponentValue`.\n\nBy default, this method calls \
             [`ComponentValue::visit_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_component_value(&mut self, node: &ComponentValue) {
        <ComponentValue as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `Vec < ComponentValue >`.\n\nBy default, this method calls [`Vec \
             < ComponentValue >::visit_children_with`]. If you want to recurse, you need to call \
             it manually."]
    #[inline]
    fn visit_component_values(&mut self, node: &[ComponentValue]) {
        <[ComponentValue] as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `CompoundSelector`.\n\nBy default, this method calls \
             [`CompoundSelector::visit_children_with`]. If you want to recurse, you need to call \
             it manually."]
    #[inline]
    fn visit_compound_selector(&mut self, node: &CompoundSelector) {
        <CompoundSelector as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `CompoundSelectorList`.\n\nBy default, this method calls \
             [`CompoundSelectorList::visit_children_with`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_compound_selector_list(&mut self, node: &CompoundSelectorList) {
        <CompoundSelectorList as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `Vec < CompoundSelector >`.\n\nBy default, this method calls \
             [`Vec < CompoundSelector >::visit_children_with`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn visit_compound_selectors(&mut self, node: &[CompoundSelector]) {
        <[CompoundSelector] as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `ContainerCondition`.\n\nBy default, this method calls \
             [`ContainerCondition::visit_children_with`]. If you want to recurse, you need to call \
             it manually."]
    #[inline]
    fn visit_container_condition(&mut self, node: &ContainerCondition) {
        <ContainerCondition as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `ContainerName`.\n\nBy default, this method calls \
             [`ContainerName::visit_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_container_name(&mut self, node: &ContainerName) {
        <ContainerName as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `ContainerQuery`.\n\nBy default, this method calls \
             [`ContainerQuery::visit_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_container_query(&mut self, node: &ContainerQuery) {
        <ContainerQuery as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `ContainerQueryAnd`.\n\nBy default, this method calls \
             [`ContainerQueryAnd::visit_children_with`]. If you want to recurse, you need to call \
             it manually."]
    #[inline]
    fn visit_container_query_and(&mut self, node: &ContainerQueryAnd) {
        <ContainerQueryAnd as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `ContainerQueryNot`.\n\nBy default, this method calls \
             [`ContainerQueryNot::visit_children_with`]. If you want to recurse, you need to call \
             it manually."]
    #[inline]
    fn visit_container_query_not(&mut self, node: &ContainerQueryNot) {
        <ContainerQueryNot as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `ContainerQueryOr`.\n\nBy default, this method calls \
             [`ContainerQueryOr::visit_children_with`]. If you want to recurse, you need to call \
             it manually."]
    #[inline]
    fn visit_container_query_or(&mut self, node: &ContainerQueryOr) {
        <ContainerQueryOr as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `ContainerQueryType`.\n\nBy default, this method calls \
             [`ContainerQueryType::visit_children_with`]. If you want to recurse, you need to call \
             it manually."]
    #[inline]
    fn visit_container_query_type(&mut self, node: &ContainerQueryType) {
        <ContainerQueryType as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `Vec < ContainerQueryType >`.\n\nBy default, this method calls \
             [`Vec < ContainerQueryType >::visit_children_with`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn visit_container_query_types(&mut self, node: &[ContainerQueryType]) {
        <[ContainerQueryType] as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `CustomHighlightName`.\n\nBy default, this method calls \
             [`CustomHighlightName::visit_children_with`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_custom_highlight_name(&mut self, node: &CustomHighlightName) {
        <CustomHighlightName as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `CustomIdent`.\n\nBy default, this method calls \
             [`CustomIdent::visit_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_custom_ident(&mut self, node: &CustomIdent) {
        <CustomIdent as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `Vec < CustomIdent >`.\n\nBy default, this method calls [`Vec < \
             CustomIdent >::visit_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_custom_idents(&mut self, node: &[CustomIdent]) {
        <[CustomIdent] as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `CustomMediaQuery`.\n\nBy default, this method calls \
             [`CustomMediaQuery::visit_children_with`]. If you want to recurse, you need to call \
             it manually."]
    #[inline]
    fn visit_custom_media_query(&mut self, node: &CustomMediaQuery) {
        <CustomMediaQuery as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `CustomMediaQueryMediaType`.\n\nBy default, this method calls \
             [`CustomMediaQueryMediaType::visit_children_with`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn visit_custom_media_query_media_type(&mut self, node: &CustomMediaQueryMediaType) {
        <CustomMediaQueryMediaType as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `CustomPropertyName`.\n\nBy default, this method calls \
             [`CustomPropertyName::visit_children_with`]. If you want to recurse, you need to call \
             it manually."]
    #[inline]
    fn visit_custom_property_name(&mut self, node: &CustomPropertyName) {
        <CustomPropertyName as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `DashedIdent`.\n\nBy default, this method calls \
             [`DashedIdent::visit_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_dashed_ident(&mut self, node: &DashedIdent) {
        <DashedIdent as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `Declaration`.\n\nBy default, this method calls \
             [`Declaration::visit_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_declaration(&mut self, node: &Declaration) {
        <Declaration as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `DeclarationName`.\n\nBy default, this method calls \
             [`DeclarationName::visit_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_declaration_name(&mut self, node: &DeclarationName) {
        <DeclarationName as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `DeclarationOrAtRule`.\n\nBy default, this method calls \
             [`DeclarationOrAtRule::visit_children_with`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_declaration_or_at_rule(&mut self, node: &DeclarationOrAtRule) {
        <DeclarationOrAtRule as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `Delimiter`.\n\nBy default, this method calls \
             [`Delimiter::visit_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_delimiter(&mut self, node: &Delimiter) {
        <Delimiter as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `DelimiterValue`.\n\nBy default, this method calls \
             [`DelimiterValue::visit_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_delimiter_value(&mut self, node: &DelimiterValue) {
        <DelimiterValue as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `Dimension`.\n\nBy default, this method calls \
             [`Dimension::visit_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_dimension(&mut self, node: &Dimension) {
        <Dimension as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `DimensionToken`.\n\nBy default, this method calls \
             [`DimensionToken::visit_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_dimension_token(&mut self, node: &DimensionToken) {
        <DimensionToken as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `DocumentPrelude`.\n\nBy default, this method calls \
             [`DocumentPrelude::visit_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_document_prelude(&mut self, node: &DocumentPrelude) {
        <DocumentPrelude as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `DocumentPreludeMatchingFunction`.\n\nBy default, this method \
             calls [`DocumentPreludeMatchingFunction::visit_children_with`]. If you want to \
             recurse, you need to call it manually."]
    #[inline]
    fn visit_document_prelude_matching_function(&mut self, node: &DocumentPreludeMatchingFunction) {
        <DocumentPreludeMatchingFunction as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `Vec < DocumentPreludeMatchingFunction >`.\n\nBy default, this \
             method calls [`Vec < DocumentPreludeMatchingFunction >::visit_children_with`]. If you \
             want to recurse, you need to call it manually."]
    #[inline]
    fn visit_document_prelude_matching_functions(
        &mut self,
        node: &[DocumentPreludeMatchingFunction],
    ) {
        <[DocumentPreludeMatchingFunction] as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `ExtensionName`.\n\nBy default, this method calls \
             [`ExtensionName::visit_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_extension_name(&mut self, node: &ExtensionName) {
        <ExtensionName as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `FamilyName`.\n\nBy default, this method calls \
             [`FamilyName::visit_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_family_name(&mut self, node: &FamilyName) {
        <FamilyName as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `Vec < FamilyName >`.\n\nBy default, this method calls [`Vec < \
             FamilyName >::visit_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_family_names(&mut self, node: &[FamilyName]) {
        <[FamilyName] as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `Flex`.\n\nBy default, this method calls \
             [`Flex::visit_children_with`]. If you want to recurse, you need to call it manually."]
    #[inline]
    fn visit_flex(&mut self, node: &Flex) {
        <Flex as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `FontFeatureValuesPrelude`.\n\nBy default, this method calls \
             [`FontFeatureValuesPrelude::visit_children_with`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn visit_font_feature_values_prelude(&mut self, node: &FontFeatureValuesPrelude) {
        <FontFeatureValuesPrelude as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `ForgivingComplexSelector`.\n\nBy default, this method calls \
             [`ForgivingComplexSelector::visit_children_with`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn visit_forgiving_complex_selector(&mut self, node: &ForgivingComplexSelector) {
        <ForgivingComplexSelector as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `Vec < ForgivingComplexSelector >`.\n\nBy default, this method \
             calls [`Vec < ForgivingComplexSelector >::visit_children_with`]. If you want to \
             recurse, you need to call it manually."]
    #[inline]
    fn visit_forgiving_complex_selectors(&mut self, node: &[ForgivingComplexSelector]) {
        <[ForgivingComplexSelector] as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `ForgivingRelativeSelector`.\n\nBy default, this method calls \
             [`ForgivingRelativeSelector::visit_children_with`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn visit_forgiving_relative_selector(&mut self, node: &ForgivingRelativeSelector) {
        <ForgivingRelativeSelector as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `ForgivingRelativeSelectorList`.\n\nBy default, this method \
             calls [`ForgivingRelativeSelectorList::visit_children_with`]. If you want to recurse, \
             you need to call it manually."]
    #[inline]
    fn visit_forgiving_relative_selector_list(&mut self, node: &ForgivingRelativeSelectorList) {
        <ForgivingRelativeSelectorList as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `Vec < ForgivingRelativeSelector >`.\n\nBy default, this method \
             calls [`Vec < ForgivingRelativeSelector >::visit_children_with`]. If you want to \
             recurse, you need to call it manually."]
    #[inline]
    fn visit_forgiving_relative_selectors(&mut self, node: &[ForgivingRelativeSelector]) {
        <[ForgivingRelativeSelector] as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `ForgivingSelectorList`.\n\nBy default, this method calls \
             [`ForgivingSelectorList::visit_children_with`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_forgiving_selector_list(&mut self, node: &ForgivingSelectorList) {
        <ForgivingSelectorList as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `Frequency`.\n\nBy default, this method calls \
             [`Frequency::visit_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_frequency(&mut self, node: &Frequency) {
        <Frequency as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `FrequencyPercentage`.\n\nBy default, this method calls \
             [`FrequencyPercentage::visit_children_with`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_frequency_percentage(&mut self, node: &FrequencyPercentage) {
        <FrequencyPercentage as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `Function`.\n\nBy default, this method calls \
             [`Function::visit_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_function(&mut self, node: &Function) {
        <Function as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `FunctionName`.\n\nBy default, this method calls \
             [`FunctionName::visit_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_function_name(&mut self, node: &FunctionName) {
        <FunctionName as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `GeneralEnclosed`.\n\nBy default, this method calls \
             [`GeneralEnclosed::visit_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_general_enclosed(&mut self, node: &GeneralEnclosed) {
        <GeneralEnclosed as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `HexColor`.\n\nBy default, this method calls \
             [`HexColor::visit_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_hex_color(&mut self, node: &HexColor) {
        <HexColor as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `Hue`.\n\nBy default, this method calls \
             [`Hue::visit_children_with`]. If you want to recurse, you need to call it manually."]
    #[inline]
    fn visit_hue(&mut self, node: &Hue) {
        <Hue as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `IdSelector`.\n\nBy default, this method calls \
             [`IdSelector::visit_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_id_selector(&mut self, node: &IdSelector) {
        <IdSelector as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `Ident`.\n\nBy default, this method calls \
             [`Ident::visit_children_with`]. If you want to recurse, you need to call it manually."]
    #[inline]
    fn visit_ident(&mut self, node: &Ident) {
        <Ident as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `Vec < Ident >`.\n\nBy default, this method calls [`Vec < Ident \
             >::visit_children_with`]. If you want to recurse, you need to call it manually."]
    #[inline]
    fn visit_idents(&mut self, node: &[Ident]) {
        <[Ident] as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `ImportConditions`.\n\nBy default, this method calls \
             [`ImportConditions::visit_children_with`]. If you want to recurse, you need to call \
             it manually."]
    #[inline]
    fn visit_import_conditions(&mut self, node: &ImportConditions) {
        <ImportConditions as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `ImportHref`.\n\nBy default, this method calls \
             [`ImportHref::visit_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_import_href(&mut self, node: &ImportHref) {
        <ImportHref as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `ImportLayerName`.\n\nBy default, this method calls \
             [`ImportLayerName::visit_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_import_layer_name(&mut self, node: &ImportLayerName) {
        <ImportLayerName as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `ImportPrelude`.\n\nBy default, this method calls \
             [`ImportPrelude::visit_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_import_prelude(&mut self, node: &ImportPrelude) {
        <ImportPrelude as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `ImportantFlag`.\n\nBy default, this method calls \
             [`ImportantFlag::visit_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_important_flag(&mut self, node: &ImportantFlag) {
        <ImportantFlag as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `Integer`.\n\nBy default, this method calls \
             [`Integer::visit_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_integer(&mut self, node: &Integer) {
        <Integer as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `KeyframeBlock`.\n\nBy default, this method calls \
             [`KeyframeBlock::visit_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_keyframe_block(&mut self, node: &KeyframeBlock) {
        <KeyframeBlock as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `KeyframeSelector`.\n\nBy default, this method calls \
             [`KeyframeSelector::visit_children_with`]. If you want to recurse, you need to call \
             it manually."]
    #[inline]
    fn visit_keyframe_selector(&mut self, node: &KeyframeSelector) {
        <KeyframeSelector as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `Vec < KeyframeSelector >`.\n\nBy default, this method calls \
             [`Vec < KeyframeSelector >::visit_children_with`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn visit_keyframe_selectors(&mut self, node: &[KeyframeSelector]) {
        <[KeyframeSelector] as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `KeyframesName`.\n\nBy default, this method calls \
             [`KeyframesName::visit_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_keyframes_name(&mut self, node: &KeyframesName) {
        <KeyframesName as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `KeyframesPseudoFunction`.\n\nBy default, this method calls \
             [`KeyframesPseudoFunction::visit_children_with`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_keyframes_pseudo_function(&mut self, node: &KeyframesPseudoFunction) {
        <KeyframesPseudoFunction as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `KeyframesPseudoPrefix`.\n\nBy default, this method calls \
             [`KeyframesPseudoPrefix::visit_children_with`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_keyframes_pseudo_prefix(&mut self, node: &KeyframesPseudoPrefix) {
        <KeyframesPseudoPrefix as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `LayerName`.\n\nBy default, this method calls \
             [`LayerName::visit_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_layer_name(&mut self, node: &LayerName) {
        <LayerName as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `LayerNameList`.\n\nBy default, this method calls \
             [`LayerNameList::visit_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_layer_name_list(&mut self, node: &LayerNameList) {
        <LayerNameList as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `Vec < LayerName >`.\n\nBy default, this method calls [`Vec < \
             LayerName >::visit_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_layer_names(&mut self, node: &[LayerName]) {
        <[LayerName] as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `LayerPrelude`.\n\nBy default, this method calls \
             [`LayerPrelude::visit_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_layer_prelude(&mut self, node: &LayerPrelude) {
        <LayerPrelude as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `Length`.\n\nBy default, this method calls \
             [`Length::visit_children_with`]. If you want to recurse, you need to call it manually."]
    #[inline]
    fn visit_length(&mut self, node: &Length) {
        <Length as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `LengthPercentage`.\n\nBy default, this method calls \
             [`LengthPercentage::visit_children_with`]. If you want to recurse, you need to call \
             it manually."]
    #[inline]
    fn visit_length_percentage(&mut self, node: &LengthPercentage) {
        <LengthPercentage as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `ListOfComponentValues`.\n\nBy default, this method calls \
             [`ListOfComponentValues::visit_children_with`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_list_of_component_values(&mut self, node: &ListOfComponentValues) {
        <ListOfComponentValues as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `MediaAnd`.\n\nBy default, this method calls \
             [`MediaAnd::visit_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_media_and(&mut self, node: &MediaAnd) {
        <MediaAnd as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `MediaCondition`.\n\nBy default, this method calls \
             [`MediaCondition::visit_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_media_condition(&mut self, node: &MediaCondition) {
        <MediaCondition as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `MediaConditionAllType`.\n\nBy default, this method calls \
             [`MediaConditionAllType::visit_children_with`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_media_condition_all_type(&mut self, node: &MediaConditionAllType) {
        <MediaConditionAllType as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `Vec < MediaConditionAllType >`.\n\nBy default, this method \
             calls [`Vec < MediaConditionAllType >::visit_children_with`]. If you want to recurse, \
             you need to call it manually."]
    #[inline]
    fn visit_media_condition_all_types(&mut self, node: &[MediaConditionAllType]) {
        <[MediaConditionAllType] as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `MediaConditionType`.\n\nBy default, this method calls \
             [`MediaConditionType::visit_children_with`]. If you want to recurse, you need to call \
             it manually."]
    #[inline]
    fn visit_media_condition_type(&mut self, node: &MediaConditionType) {
        <MediaConditionType as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `MediaConditionWithoutOr`.\n\nBy default, this method calls \
             [`MediaConditionWithoutOr::visit_children_with`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_media_condition_without_or(&mut self, node: &MediaConditionWithoutOr) {
        <MediaConditionWithoutOr as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `MediaConditionWithoutOrType`.\n\nBy default, this method calls \
             [`MediaConditionWithoutOrType::visit_children_with`]. If you want to recurse, you \
             need to call it manually."]
    #[inline]
    fn visit_media_condition_without_or_type(&mut self, node: &MediaConditionWithoutOrType) {
        <MediaConditionWithoutOrType as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `Vec < MediaConditionWithoutOrType >`.\n\nBy default, this \
             method calls [`Vec < MediaConditionWithoutOrType >::visit_children_with`]. If you \
             want to recurse, you need to call it manually."]
    #[inline]
    fn visit_media_condition_without_or_types(&mut self, node: &[MediaConditionWithoutOrType]) {
        <[MediaConditionWithoutOrType] as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `MediaFeature`.\n\nBy default, this method calls \
             [`MediaFeature::visit_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_media_feature(&mut self, node: &MediaFeature) {
        <MediaFeature as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `MediaFeatureBoolean`.\n\nBy default, this method calls \
             [`MediaFeatureBoolean::visit_children_with`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_media_feature_boolean(&mut self, node: &MediaFeatureBoolean) {
        <MediaFeatureBoolean as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `MediaFeatureName`.\n\nBy default, this method calls \
             [`MediaFeatureName::visit_children_with`]. If you want to recurse, you need to call \
             it manually."]
    #[inline]
    fn visit_media_feature_name(&mut self, node: &MediaFeatureName) {
        <MediaFeatureName as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `MediaFeaturePlain`.\n\nBy default, this method calls \
             [`MediaFeaturePlain::visit_children_with`]. If you want to recurse, you need to call \
             it manually."]
    #[inline]
    fn visit_media_feature_plain(&mut self, node: &MediaFeaturePlain) {
        <MediaFeaturePlain as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `MediaFeatureRange`.\n\nBy default, this method calls \
             [`MediaFeatureRange::visit_children_with`]. If you want to recurse, you need to call \
             it manually."]
    #[inline]
    fn visit_media_feature_range(&mut self, node: &MediaFeatureRange) {
        <MediaFeatureRange as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `MediaFeatureRangeComparison`.\n\nBy default, this method calls \
             [`MediaFeatureRangeComparison::visit_children_with`]. If you want to recurse, you \
             need to call it manually."]
    #[inline]
    fn visit_media_feature_range_comparison(&mut self, node: &MediaFeatureRangeComparison) {
        <MediaFeatureRangeComparison as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `MediaFeatureRangeInterval`.\n\nBy default, this method calls \
             [`MediaFeatureRangeInterval::visit_children_with`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn visit_media_feature_range_interval(&mut self, node: &MediaFeatureRangeInterval) {
        <MediaFeatureRangeInterval as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `MediaFeatureValue`.\n\nBy default, this method calls \
             [`MediaFeatureValue::visit_children_with`]. If you want to recurse, you need to call \
             it manually."]
    #[inline]
    fn visit_media_feature_value(&mut self, node: &MediaFeatureValue) {
        <MediaFeatureValue as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `MediaInParens`.\n\nBy default, this method calls \
             [`MediaInParens::visit_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_media_in_parens(&mut self, node: &MediaInParens) {
        <MediaInParens as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `MediaNot`.\n\nBy default, this method calls \
             [`MediaNot::visit_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_media_not(&mut self, node: &MediaNot) {
        <MediaNot as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `MediaOr`.\n\nBy default, this method calls \
             [`MediaOr::visit_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_media_or(&mut self, node: &MediaOr) {
        <MediaOr as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `MediaQuery`.\n\nBy default, this method calls \
             [`MediaQuery::visit_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_media_query(&mut self, node: &MediaQuery) {
        <MediaQuery as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `MediaQueryList`.\n\nBy default, this method calls \
             [`MediaQueryList::visit_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_media_query_list(&mut self, node: &MediaQueryList) {
        <MediaQueryList as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `Vec < MediaQuery >`.\n\nBy default, this method calls [`Vec < \
             MediaQuery >::visit_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_media_querys(&mut self, node: &[MediaQuery]) {
        <[MediaQuery] as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `MediaType`.\n\nBy default, this method calls \
             [`MediaType::visit_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_media_type(&mut self, node: &MediaType) {
        <MediaType as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `NamedNamespace`.\n\nBy default, this method calls \
             [`NamedNamespace::visit_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_named_namespace(&mut self, node: &NamedNamespace) {
        <NamedNamespace as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `Namespace`.\n\nBy default, this method calls \
             [`Namespace::visit_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_namespace(&mut self, node: &Namespace) {
        <Namespace as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `NamespacePrefix`.\n\nBy default, this method calls \
             [`NamespacePrefix::visit_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_namespace_prefix(&mut self, node: &NamespacePrefix) {
        <NamespacePrefix as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `NamespacePrelude`.\n\nBy default, this method calls \
             [`NamespacePrelude::visit_children_with`]. If you want to recurse, you need to call \
             it manually."]
    #[inline]
    fn visit_namespace_prelude(&mut self, node: &NamespacePrelude) {
        <NamespacePrelude as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `NamespacePreludeUri`.\n\nBy default, this method calls \
             [`NamespacePreludeUri::visit_children_with`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_namespace_prelude_uri(&mut self, node: &NamespacePreludeUri) {
        <NamespacePreludeUri as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `NestingSelector`.\n\nBy default, this method calls \
             [`NestingSelector::visit_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_nesting_selector(&mut self, node: &NestingSelector) {
        <NestingSelector as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `Number`.\n\nBy default, this method calls \
             [`Number::visit_children_with`]. If you want to recurse, you need to call it manually."]
    #[inline]
    fn visit_number(&mut self, node: &Number) {
        <Number as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `NumberType`.\n\nBy default, this method calls \
             [`NumberType::visit_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_number_type(&mut self, node: &NumberType) {
        <NumberType as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `Option < Box < AtRulePrelude > >`.\n\nBy default, this method \
             calls [`Option < Box < AtRulePrelude > >::visit_children_with`]. If you want to \
             recurse, you need to call it manually."]
    #[inline]
    fn visit_opt_at_rule_prelude(&mut self, node: &Option<Box<AtRulePrelude>>) {
        <Option<Box<AtRulePrelude>> as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `Option < swc_atoms :: Atom >`.\n\nBy default, this method calls \
             [`Option < swc_atoms :: Atom >::visit_children_with`]. If you want to recurse, you \
             need to call it manually."]
    #[inline]
    fn visit_opt_atom(&mut self, node: &Option<swc_atoms::Atom>) {
        <Option<swc_atoms::Atom> as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `Option < AttributeSelectorMatcher >`.\n\nBy default, this \
             method calls [`Option < AttributeSelectorMatcher >::visit_children_with`]. If you \
             want to recurse, you need to call it manually."]
    #[inline]
    fn visit_opt_attribute_selector_matcher(&mut self, node: &Option<AttributeSelectorMatcher>) {
        <Option<AttributeSelectorMatcher> as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `Option < AttributeSelectorModifier >`.\n\nBy default, this \
             method calls [`Option < AttributeSelectorModifier >::visit_children_with`]. If you \
             want to recurse, you need to call it manually."]
    #[inline]
    fn visit_opt_attribute_selector_modifier(&mut self, node: &Option<AttributeSelectorModifier>) {
        <Option<AttributeSelectorModifier> as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `Option < AttributeSelectorValue >`.\n\nBy default, this method \
             calls [`Option < AttributeSelectorValue >::visit_children_with`]. If you want to \
             recurse, you need to call it manually."]
    #[inline]
    fn visit_opt_attribute_selector_value(&mut self, node: &Option<AttributeSelectorValue>) {
        <Option<AttributeSelectorValue> as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `Option < Combinator >`.\n\nBy default, this method calls \
             [`Option < Combinator >::visit_children_with`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_opt_combinator(&mut self, node: &Option<Combinator>) {
        <Option<Combinator> as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `Option < ContainerName >`.\n\nBy default, this method calls \
             [`Option < ContainerName >::visit_children_with`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn visit_opt_container_name(&mut self, node: &Option<ContainerName>) {
        <Option<ContainerName> as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `Option < ForgivingSelectorList >`.\n\nBy default, this method \
             calls [`Option < ForgivingSelectorList >::visit_children_with`]. If you want to \
             recurse, you need to call it manually."]
    #[inline]
    fn visit_opt_forgiving_selector_list(&mut self, node: &Option<ForgivingSelectorList>) {
        <Option<ForgivingSelectorList> as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `Option < Box < Function > >`.\n\nBy default, this method calls \
             [`Option < Box < Function > >::visit_children_with`]. If you want to recurse, you \
             need to call it manually."]
    #[inline]
    fn visit_opt_function(&mut self, node: &Option<Box<Function>>) {
        <Option<Box<Function>> as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `Option < Ident >`.\n\nBy default, this method calls [`Option < \
             Ident >::visit_children_with`]. If you want to recurse, you need to call it manually."]
    #[inline]
    fn visit_opt_ident(&mut self, node: &Option<Ident>) {
        <Option<Ident> as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `Option < Box < ImportConditions > >`.\n\nBy default, this \
             method calls [`Option < Box < ImportConditions > >::visit_children_with`]. If you \
             want to recurse, you need to call it manually."]
    #[inline]
    fn visit_opt_import_conditions(&mut self, node: &Option<Box<ImportConditions>>) {
        <Option<Box<ImportConditions>> as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `Option < Box < ImportLayerName > >`.\n\nBy default, this method \
             calls [`Option < Box < ImportLayerName > >::visit_children_with`]. If you want to \
             recurse, you need to call it manually."]
    #[inline]
    fn visit_opt_import_layer_name(&mut self, node: &Option<Box<ImportLayerName>>) {
        <Option<Box<ImportLayerName>> as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `Option < ImportantFlag >`.\n\nBy default, this method calls \
             [`Option < ImportantFlag >::visit_children_with`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn visit_opt_important_flag(&mut self, node: &Option<ImportantFlag>) {
        <Option<ImportantFlag> as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `Option < Box < MediaConditionType > >`.\n\nBy default, this \
             method calls [`Option < Box < MediaConditionType > >::visit_children_with`]. If you \
             want to recurse, you need to call it manually."]
    #[inline]
    fn visit_opt_media_condition_type(&mut self, node: &Option<Box<MediaConditionType>>) {
        <Option<Box<MediaConditionType>> as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `Option < Box < MediaQueryList > >`.\n\nBy default, this method \
             calls [`Option < Box < MediaQueryList > >::visit_children_with`]. If you want to \
             recurse, you need to call it manually."]
    #[inline]
    fn visit_opt_media_query_list(&mut self, node: &Option<Box<MediaQueryList>>) {
        <Option<Box<MediaQueryList>> as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `Option < MediaType >`.\n\nBy default, this method calls \
             [`Option < MediaType >::visit_children_with`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_opt_media_type(&mut self, node: &Option<MediaType>) {
        <Option<MediaType> as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `Option < Namespace >`.\n\nBy default, this method calls \
             [`Option < Namespace >::visit_children_with`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_opt_namespace(&mut self, node: &Option<Namespace>) {
        <Option<Namespace> as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `Option < NamespacePrefix >`.\n\nBy default, this method calls \
             [`Option < NamespacePrefix >::visit_children_with`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn visit_opt_namespace_prefix(&mut self, node: &Option<NamespacePrefix>) {
        <Option<NamespacePrefix> as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `Option < NestingSelector >`.\n\nBy default, this method calls \
             [`Option < NestingSelector >::visit_children_with`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn visit_opt_nesting_selector(&mut self, node: &Option<NestingSelector>) {
        <Option<NestingSelector> as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `Option < Number >`.\n\nBy default, this method calls [`Option < \
             Number >::visit_children_with`]. If you want to recurse, you need to call it manually."]
    #[inline]
    fn visit_opt_number(&mut self, node: &Option<Number>) {
        <Option<Number> as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `Option < Vec < PageSelectorPseudo > >`.\n\nBy default, this \
             method calls [`Option < Vec < PageSelectorPseudo > >::visit_children_with`]. If you \
             want to recurse, you need to call it manually."]
    #[inline]
    fn visit_opt_page_selector_pseudos(&mut self, node: &Option<Vec<PageSelectorPseudo>>) {
        <Option<Vec<PageSelectorPseudo>> as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `Option < PageSelectorType >`.\n\nBy default, this method calls \
             [`Option < PageSelectorType >::visit_children_with`]. If you want to recurse, you \
             need to call it manually."]
    #[inline]
    fn visit_opt_page_selector_type(&mut self, node: &Option<PageSelectorType>) {
        <Option<PageSelectorType> as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `Option < Vec < PseudoClassSelectorChildren > >`.\n\nBy default, \
             this method calls [`Option < Vec < PseudoClassSelectorChildren > \
             >::visit_children_with`]. If you want to recurse, you need to call it manually."]
    #[inline]
    fn visit_opt_pseudo_class_selector_childrens(
        &mut self,
        node: &Option<Vec<PseudoClassSelectorChildren>>,
    ) {
        <Option<Vec<PseudoClassSelectorChildren>> as VisitWith<Self>>::visit_children_with(
            node, self,
        )
    }
    #[doc = "Visit a node of type `Option < Vec < PseudoElementSelectorChildren > >`.\n\nBy \
             default, this method calls [`Option < Vec < PseudoElementSelectorChildren > \
             >::visit_children_with`]. If you want to recurse, you need to call it manually."]
    #[inline]
    fn visit_opt_pseudo_element_selector_childrens(
        &mut self,
        node: &Option<Vec<PseudoElementSelectorChildren>>,
    ) {
        <Option<Vec<PseudoElementSelectorChildren>> as VisitWith<Self>>::visit_children_with(
            node, self,
        )
    }
    #[doc = "Visit a node of type `Option < SimpleBlock >`.\n\nBy default, this method calls \
             [`Option < SimpleBlock >::visit_children_with`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_opt_simple_block(&mut self, node: &Option<SimpleBlock>) {
        <Option<SimpleBlock> as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `Option < Box < TypeSelector > >`.\n\nBy default, this method \
             calls [`Option < Box < TypeSelector > >::visit_children_with`]. If you want to \
             recurse, you need to call it manually."]
    #[inline]
    fn visit_opt_type_selector(&mut self, node: &Option<Box<TypeSelector>>) {
        <Option<Box<TypeSelector>> as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `Option < Vec < UrlModifier > >`.\n\nBy default, this method \
             calls [`Option < Vec < UrlModifier > >::visit_children_with`]. If you want to \
             recurse, you need to call it manually."]
    #[inline]
    fn visit_opt_url_modifiers(&mut self, node: &Option<Vec<UrlModifier>>) {
        <Option<Vec<UrlModifier>> as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `Option < Box < UrlValue > >`.\n\nBy default, this method calls \
             [`Option < Box < UrlValue > >::visit_children_with`]. If you want to recurse, you \
             need to call it manually."]
    #[inline]
    fn visit_opt_url_value(&mut self, node: &Option<Box<UrlValue>>) {
        <Option<Box<UrlValue>> as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `PageSelector`.\n\nBy default, this method calls \
             [`PageSelector::visit_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_page_selector(&mut self, node: &PageSelector) {
        <PageSelector as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `PageSelectorList`.\n\nBy default, this method calls \
             [`PageSelectorList::visit_children_with`]. If you want to recurse, you need to call \
             it manually."]
    #[inline]
    fn visit_page_selector_list(&mut self, node: &PageSelectorList) {
        <PageSelectorList as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `PageSelectorPseudo`.\n\nBy default, this method calls \
             [`PageSelectorPseudo::visit_children_with`]. If you want to recurse, you need to call \
             it manually."]
    #[inline]
    fn visit_page_selector_pseudo(&mut self, node: &PageSelectorPseudo) {
        <PageSelectorPseudo as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `Vec < PageSelectorPseudo >`.\n\nBy default, this method calls \
             [`Vec < PageSelectorPseudo >::visit_children_with`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn visit_page_selector_pseudos(&mut self, node: &[PageSelectorPseudo]) {
        <[PageSelectorPseudo] as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `PageSelectorType`.\n\nBy default, this method calls \
             [`PageSelectorType::visit_children_with`]. If you want to recurse, you need to call \
             it manually."]
    #[inline]
    fn visit_page_selector_type(&mut self, node: &PageSelectorType) {
        <PageSelectorType as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `Vec < PageSelector >`.\n\nBy default, this method calls [`Vec < \
             PageSelector >::visit_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_page_selectors(&mut self, node: &[PageSelector]) {
        <[PageSelector] as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `Percentage`.\n\nBy default, this method calls \
             [`Percentage::visit_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_percentage(&mut self, node: &Percentage) {
        <Percentage as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `PseudoClassSelector`.\n\nBy default, this method calls \
             [`PseudoClassSelector::visit_children_with`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_pseudo_class_selector(&mut self, node: &PseudoClassSelector) {
        <PseudoClassSelector as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `PseudoClassSelectorChildren`.\n\nBy default, this method calls \
             [`PseudoClassSelectorChildren::visit_children_with`]. If you want to recurse, you \
             need to call it manually."]
    #[inline]
    fn visit_pseudo_class_selector_children(&mut self, node: &PseudoClassSelectorChildren) {
        <PseudoClassSelectorChildren as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `Vec < PseudoClassSelectorChildren >`.\n\nBy default, this \
             method calls [`Vec < PseudoClassSelectorChildren >::visit_children_with`]. If you \
             want to recurse, you need to call it manually."]
    #[inline]
    fn visit_pseudo_class_selector_childrens(&mut self, node: &[PseudoClassSelectorChildren]) {
        <[PseudoClassSelectorChildren] as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `PseudoElementSelector`.\n\nBy default, this method calls \
             [`PseudoElementSelector::visit_children_with`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_pseudo_element_selector(&mut self, node: &PseudoElementSelector) {
        <PseudoElementSelector as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `PseudoElementSelectorChildren`.\n\nBy default, this method \
             calls [`PseudoElementSelectorChildren::visit_children_with`]. If you want to recurse, \
             you need to call it manually."]
    #[inline]
    fn visit_pseudo_element_selector_children(&mut self, node: &PseudoElementSelectorChildren) {
        <PseudoElementSelectorChildren as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `Vec < PseudoElementSelectorChildren >`.\n\nBy default, this \
             method calls [`Vec < PseudoElementSelectorChildren >::visit_children_with`]. If you \
             want to recurse, you need to call it manually."]
    #[inline]
    fn visit_pseudo_element_selector_childrens(&mut self, node: &[PseudoElementSelectorChildren]) {
        <[PseudoElementSelectorChildren] as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `QualifiedRule`.\n\nBy default, this method calls \
             [`QualifiedRule::visit_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_qualified_rule(&mut self, node: &QualifiedRule) {
        <QualifiedRule as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `QualifiedRulePrelude`.\n\nBy default, this method calls \
             [`QualifiedRulePrelude::visit_children_with`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_qualified_rule_prelude(&mut self, node: &QualifiedRulePrelude) {
        <QualifiedRulePrelude as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `QueryInParens`.\n\nBy default, this method calls \
             [`QueryInParens::visit_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_query_in_parens(&mut self, node: &QueryInParens) {
        <QueryInParens as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `Ratio`.\n\nBy default, this method calls \
             [`Ratio::visit_children_with`]. If you want to recurse, you need to call it manually."]
    #[inline]
    fn visit_ratio(&mut self, node: &Ratio) {
        <Ratio as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `RelativeSelector`.\n\nBy default, this method calls \
             [`RelativeSelector::visit_children_with`]. If you want to recurse, you need to call \
             it manually."]
    #[inline]
    fn visit_relative_selector(&mut self, node: &RelativeSelector) {
        <RelativeSelector as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `RelativeSelectorList`.\n\nBy default, this method calls \
             [`RelativeSelectorList::visit_children_with`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_relative_selector_list(&mut self, node: &RelativeSelectorList) {
        <RelativeSelectorList as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `Vec < RelativeSelector >`.\n\nBy default, this method calls \
             [`Vec < RelativeSelector >::visit_children_with`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn visit_relative_selectors(&mut self, node: &[RelativeSelector]) {
        <[RelativeSelector] as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `Resolution`.\n\nBy default, this method calls \
             [`Resolution::visit_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_resolution(&mut self, node: &Resolution) {
        <Resolution as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `Rule`.\n\nBy default, this method calls \
             [`Rule::visit_children_with`]. If you want to recurse, you need to call it manually."]
    #[inline]
    fn visit_rule(&mut self, node: &Rule) {
        <Rule as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `Vec < Rule >`.\n\nBy default, this method calls [`Vec < Rule \
             >::visit_children_with`]. If you want to recurse, you need to call it manually."]
    #[inline]
    fn visit_rules(&mut self, node: &[Rule]) {
        <[Rule] as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `ScopeRange`.\n\nBy default, this method calls \
             [`ScopeRange::visit_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_scope_range(&mut self, node: &ScopeRange) {
        <ScopeRange as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `SelectorList`.\n\nBy default, this method calls \
             [`SelectorList::visit_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_selector_list(&mut self, node: &SelectorList) {
        <SelectorList as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `SequenceOfCustomIdents`.\n\nBy default, this method calls \
             [`SequenceOfCustomIdents::visit_children_with`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_sequence_of_custom_idents(&mut self, node: &SequenceOfCustomIdents) {
        <SequenceOfCustomIdents as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `SimpleBlock`.\n\nBy default, this method calls \
             [`SimpleBlock::visit_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_simple_block(&mut self, node: &SimpleBlock) {
        <SimpleBlock as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `SizeFeature`.\n\nBy default, this method calls \
             [`SizeFeature::visit_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_size_feature(&mut self, node: &SizeFeature) {
        <SizeFeature as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `SizeFeatureBoolean`.\n\nBy default, this method calls \
             [`SizeFeatureBoolean::visit_children_with`]. If you want to recurse, you need to call \
             it manually."]
    #[inline]
    fn visit_size_feature_boolean(&mut self, node: &SizeFeatureBoolean) {
        <SizeFeatureBoolean as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `SizeFeatureName`.\n\nBy default, this method calls \
             [`SizeFeatureName::visit_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_size_feature_name(&mut self, node: &SizeFeatureName) {
        <SizeFeatureName as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `SizeFeaturePlain`.\n\nBy default, this method calls \
             [`SizeFeaturePlain::visit_children_with`]. If you want to recurse, you need to call \
             it manually."]
    #[inline]
    fn visit_size_feature_plain(&mut self, node: &SizeFeaturePlain) {
        <SizeFeaturePlain as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `SizeFeatureRange`.\n\nBy default, this method calls \
             [`SizeFeatureRange::visit_children_with`]. If you want to recurse, you need to call \
             it manually."]
    #[inline]
    fn visit_size_feature_range(&mut self, node: &SizeFeatureRange) {
        <SizeFeatureRange as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `SizeFeatureRangeComparison`.\n\nBy default, this method calls \
             [`SizeFeatureRangeComparison::visit_children_with`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn visit_size_feature_range_comparison(&mut self, node: &SizeFeatureRangeComparison) {
        <SizeFeatureRangeComparison as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `SizeFeatureRangeInterval`.\n\nBy default, this method calls \
             [`SizeFeatureRangeInterval::visit_children_with`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn visit_size_feature_range_interval(&mut self, node: &SizeFeatureRangeInterval) {
        <SizeFeatureRangeInterval as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `SizeFeatureValue`.\n\nBy default, this method calls \
             [`SizeFeatureValue::visit_children_with`]. If you want to recurse, you need to call \
             it manually."]
    #[inline]
    fn visit_size_feature_value(&mut self, node: &SizeFeatureValue) {
        <SizeFeatureValue as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `swc_common :: Span`.\n\nBy default, this method calls \
             [`swc_common :: Span::visit_children_with`]. If you want to recurse, you need to call \
             it manually."]
    #[inline]
    fn visit_span(&mut self, node: &swc_common::Span) {
        <swc_common::Span as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `Str`.\n\nBy default, this method calls \
             [`Str::visit_children_with`]. If you want to recurse, you need to call it manually."]
    #[inline]
    fn visit_str(&mut self, node: &Str) {
        <Str as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `StyleBlock`.\n\nBy default, this method calls \
             [`StyleBlock::visit_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_style_block(&mut self, node: &StyleBlock) {
        <StyleBlock as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `Stylesheet`.\n\nBy default, this method calls \
             [`Stylesheet::visit_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_stylesheet(&mut self, node: &Stylesheet) {
        <Stylesheet as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `SubclassSelector`.\n\nBy default, this method calls \
             [`SubclassSelector::visit_children_with`]. If you want to recurse, you need to call \
             it manually."]
    #[inline]
    fn visit_subclass_selector(&mut self, node: &SubclassSelector) {
        <SubclassSelector as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `Vec < SubclassSelector >`.\n\nBy default, this method calls \
             [`Vec < SubclassSelector >::visit_children_with`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn visit_subclass_selectors(&mut self, node: &[SubclassSelector]) {
        <[SubclassSelector] as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `SupportsAnd`.\n\nBy default, this method calls \
             [`SupportsAnd::visit_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_supports_and(&mut self, node: &SupportsAnd) {
        <SupportsAnd as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `SupportsCondition`.\n\nBy default, this method calls \
             [`SupportsCondition::visit_children_with`]. If you want to recurse, you need to call \
             it manually."]
    #[inline]
    fn visit_supports_condition(&mut self, node: &SupportsCondition) {
        <SupportsCondition as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `SupportsConditionType`.\n\nBy default, this method calls \
             [`SupportsConditionType::visit_children_with`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_supports_condition_type(&mut self, node: &SupportsConditionType) {
        <SupportsConditionType as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `Vec < SupportsConditionType >`.\n\nBy default, this method \
             calls [`Vec < SupportsConditionType >::visit_children_with`]. If you want to recurse, \
             you need to call it manually."]
    #[inline]
    fn visit_supports_condition_types(&mut self, node: &[SupportsConditionType]) {
        <[SupportsConditionType] as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `SupportsFeature`.\n\nBy default, this method calls \
             [`SupportsFeature::visit_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_supports_feature(&mut self, node: &SupportsFeature) {
        <SupportsFeature as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `SupportsInParens`.\n\nBy default, this method calls \
             [`SupportsInParens::visit_children_with`]. If you want to recurse, you need to call \
             it manually."]
    #[inline]
    fn visit_supports_in_parens(&mut self, node: &SupportsInParens) {
        <SupportsInParens as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `SupportsNot`.\n\nBy default, this method calls \
             [`SupportsNot::visit_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_supports_not(&mut self, node: &SupportsNot) {
        <SupportsNot as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `SupportsOr`.\n\nBy default, this method calls \
             [`SupportsOr::visit_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_supports_or(&mut self, node: &SupportsOr) {
        <SupportsOr as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `TagNameSelector`.\n\nBy default, this method calls \
             [`TagNameSelector::visit_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_tag_name_selector(&mut self, node: &TagNameSelector) {
        <TagNameSelector as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `Time`.\n\nBy default, this method calls \
             [`Time::visit_children_with`]. If you want to recurse, you need to call it manually."]
    #[inline]
    fn visit_time(&mut self, node: &Time) {
        <Time as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `TimePercentage`.\n\nBy default, this method calls \
             [`TimePercentage::visit_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_time_percentage(&mut self, node: &TimePercentage) {
        <TimePercentage as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `Token`.\n\nBy default, this method calls \
             [`Token::visit_children_with`]. If you want to recurse, you need to call it manually."]
    #[inline]
    fn visit_token(&mut self, node: &Token) {
        <Token as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `TokenAndSpan`.\n\nBy default, this method calls \
             [`TokenAndSpan::visit_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_token_and_span(&mut self, node: &TokenAndSpan) {
        <TokenAndSpan as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `TypeSelector`.\n\nBy default, this method calls \
             [`TypeSelector::visit_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_type_selector(&mut self, node: &TypeSelector) {
        <TypeSelector as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `UnicodeRange`.\n\nBy default, this method calls \
             [`UnicodeRange::visit_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_unicode_range(&mut self, node: &UnicodeRange) {
        <UnicodeRange as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `UniversalSelector`.\n\nBy default, this method calls \
             [`UniversalSelector::visit_children_with`]. If you want to recurse, you need to call \
             it manually."]
    #[inline]
    fn visit_universal_selector(&mut self, node: &UniversalSelector) {
        <UniversalSelector as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `UnknownDimension`.\n\nBy default, this method calls \
             [`UnknownDimension::visit_children_with`]. If you want to recurse, you need to call \
             it manually."]
    #[inline]
    fn visit_unknown_dimension(&mut self, node: &UnknownDimension) {
        <UnknownDimension as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `Url`.\n\nBy default, this method calls \
             [`Url::visit_children_with`]. If you want to recurse, you need to call it manually."]
    #[inline]
    fn visit_url(&mut self, node: &Url) {
        <Url as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `UrlKeyValue`.\n\nBy default, this method calls \
             [`UrlKeyValue::visit_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_url_key_value(&mut self, node: &UrlKeyValue) {
        <UrlKeyValue as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `UrlModifier`.\n\nBy default, this method calls \
             [`UrlModifier::visit_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_url_modifier(&mut self, node: &UrlModifier) {
        <UrlModifier as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `Vec < UrlModifier >`.\n\nBy default, this method calls [`Vec < \
             UrlModifier >::visit_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_url_modifiers(&mut self, node: &[UrlModifier]) {
        <[UrlModifier] as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `UrlValue`.\n\nBy default, this method calls \
             [`UrlValue::visit_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_url_value(&mut self, node: &UrlValue) {
        <UrlValue as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `UrlValueRaw`.\n\nBy default, this method calls \
             [`UrlValueRaw::visit_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_url_value_raw(&mut self, node: &UrlValueRaw) {
        <UrlValueRaw as VisitWith<Self>>::visit_children_with(node, self)
    }
    #[doc = "Visit a node of type `WqName`.\n\nBy default, this method calls \
             [`WqName::visit_children_with`]. If you want to recurse, you need to call it manually."]
    #[inline]
    fn visit_wq_name(&mut self, node: &WqName) {
        <WqName as VisitWith<Self>>::visit_children_with(node, self)
    }
}
impl<V> Visit for &mut V
where
    V: ?Sized + Visit,
{
    #[inline]
    fn visit_absolute_color_base(&mut self, node: &AbsoluteColorBase) {
        <V as Visit>::visit_absolute_color_base(&mut **self, node)
    }

    #[inline]
    fn visit_alpha_value(&mut self, node: &AlphaValue) {
        <V as Visit>::visit_alpha_value(&mut **self, node)
    }

    #[inline]
    fn visit_an_plus_b(&mut self, node: &AnPlusB) {
        <V as Visit>::visit_an_plus_b(&mut **self, node)
    }

    #[inline]
    fn visit_an_plus_b_notation(&mut self, node: &AnPlusBNotation) {
        <V as Visit>::visit_an_plus_b_notation(&mut **self, node)
    }

    #[inline]
    fn visit_angle(&mut self, node: &Angle) {
        <V as Visit>::visit_angle(&mut **self, node)
    }

    #[inline]
    fn visit_angle_percentage(&mut self, node: &AnglePercentage) {
        <V as Visit>::visit_angle_percentage(&mut **self, node)
    }

    #[inline]
    fn visit_any_namespace(&mut self, node: &AnyNamespace) {
        <V as Visit>::visit_any_namespace(&mut **self, node)
    }

    #[inline]
    fn visit_at_rule(&mut self, node: &AtRule) {
        <V as Visit>::visit_at_rule(&mut **self, node)
    }

    #[inline]
    fn visit_at_rule_name(&mut self, node: &AtRuleName) {
        <V as Visit>::visit_at_rule_name(&mut **self, node)
    }

    #[inline]
    fn visit_at_rule_prelude(&mut self, node: &AtRulePrelude) {
        <V as Visit>::visit_at_rule_prelude(&mut **self, node)
    }

    #[inline]
    fn visit_atom(&mut self, node: &swc_atoms::Atom) {
        <V as Visit>::visit_atom(&mut **self, node)
    }

    #[inline]
    fn visit_attribute_selector(&mut self, node: &AttributeSelector) {
        <V as Visit>::visit_attribute_selector(&mut **self, node)
    }

    #[inline]
    fn visit_attribute_selector_matcher(&mut self, node: &AttributeSelectorMatcher) {
        <V as Visit>::visit_attribute_selector_matcher(&mut **self, node)
    }

    #[inline]
    fn visit_attribute_selector_matcher_value(&mut self, node: &AttributeSelectorMatcherValue) {
        <V as Visit>::visit_attribute_selector_matcher_value(&mut **self, node)
    }

    #[inline]
    fn visit_attribute_selector_modifier(&mut self, node: &AttributeSelectorModifier) {
        <V as Visit>::visit_attribute_selector_modifier(&mut **self, node)
    }

    #[inline]
    fn visit_attribute_selector_value(&mut self, node: &AttributeSelectorValue) {
        <V as Visit>::visit_attribute_selector_value(&mut **self, node)
    }

    #[inline]
    fn visit_bin_op(&mut self, node: &BinOp) {
        <V as Visit>::visit_bin_op(&mut **self, node)
    }

    #[inline]
    fn visit_calc_operator(&mut self, node: &CalcOperator) {
        <V as Visit>::visit_calc_operator(&mut **self, node)
    }

    #[inline]
    fn visit_calc_operator_type(&mut self, node: &CalcOperatorType) {
        <V as Visit>::visit_calc_operator_type(&mut **self, node)
    }

    #[inline]
    fn visit_calc_product(&mut self, node: &CalcProduct) {
        <V as Visit>::visit_calc_product(&mut **self, node)
    }

    #[inline]
    fn visit_calc_product_or_operator(&mut self, node: &CalcProductOrOperator) {
        <V as Visit>::visit_calc_product_or_operator(&mut **self, node)
    }

    #[inline]
    fn visit_calc_product_or_operators(&mut self, node: &[CalcProductOrOperator]) {
        <V as Visit>::visit_calc_product_or_operators(&mut **self, node)
    }

    #[inline]
    fn visit_calc_sum(&mut self, node: &CalcSum) {
        <V as Visit>::visit_calc_sum(&mut **self, node)
    }

    #[inline]
    fn visit_calc_value(&mut self, node: &CalcValue) {
        <V as Visit>::visit_calc_value(&mut **self, node)
    }

    #[inline]
    fn visit_calc_value_or_operator(&mut self, node: &CalcValueOrOperator) {
        <V as Visit>::visit_calc_value_or_operator(&mut **self, node)
    }

    #[inline]
    fn visit_calc_value_or_operators(&mut self, node: &[CalcValueOrOperator]) {
        <V as Visit>::visit_calc_value_or_operators(&mut **self, node)
    }

    #[inline]
    fn visit_class_selector(&mut self, node: &ClassSelector) {
        <V as Visit>::visit_class_selector(&mut **self, node)
    }

    #[inline]
    fn visit_cmyk_component(&mut self, node: &CmykComponent) {
        <V as Visit>::visit_cmyk_component(&mut **self, node)
    }

    #[inline]
    fn visit_color(&mut self, node: &Color) {
        <V as Visit>::visit_color(&mut **self, node)
    }

    #[inline]
    fn visit_color_profile_name(&mut self, node: &ColorProfileName) {
        <V as Visit>::visit_color_profile_name(&mut **self, node)
    }

    #[inline]
    fn visit_combinator(&mut self, node: &Combinator) {
        <V as Visit>::visit_combinator(&mut **self, node)
    }

    #[inline]
    fn visit_combinator_value(&mut self, node: &CombinatorValue) {
        <V as Visit>::visit_combinator_value(&mut **self, node)
    }

    #[inline]
    fn visit_complex_selector(&mut self, node: &ComplexSelector) {
        <V as Visit>::visit_complex_selector(&mut **self, node)
    }

    #[inline]
    fn visit_complex_selector_children(&mut self, node: &ComplexSelectorChildren) {
        <V as Visit>::visit_complex_selector_children(&mut **self, node)
    }

    #[inline]
    fn visit_complex_selector_childrens(&mut self, node: &[ComplexSelectorChildren]) {
        <V as Visit>::visit_complex_selector_childrens(&mut **self, node)
    }

    #[inline]
    fn visit_complex_selectors(&mut self, node: &[ComplexSelector]) {
        <V as Visit>::visit_complex_selectors(&mut **self, node)
    }

    #[inline]
    fn visit_component_value(&mut self, node: &ComponentValue) {
        <V as Visit>::visit_component_value(&mut **self, node)
    }

    #[inline]
    fn visit_component_values(&mut self, node: &[ComponentValue]) {
        <V as Visit>::visit_component_values(&mut **self, node)
    }

    #[inline]
    fn visit_compound_selector(&mut self, node: &CompoundSelector) {
        <V as Visit>::visit_compound_selector(&mut **self, node)
    }

    #[inline]
    fn visit_compound_selector_list(&mut self, node: &CompoundSelectorList) {
        <V as Visit>::visit_compound_selector_list(&mut **self, node)
    }

    #[inline]
    fn visit_compound_selectors(&mut self, node: &[CompoundSelector]) {
        <V as Visit>::visit_compound_selectors(&mut **self, node)
    }

    #[inline]
    fn visit_container_condition(&mut self, node: &ContainerCondition) {
        <V as Visit>::visit_container_condition(&mut **self, node)
    }

    #[inline]
    fn visit_container_name(&mut self, node: &ContainerName) {
        <V as Visit>::visit_container_name(&mut **self, node)
    }

    #[inline]
    fn visit_container_query(&mut self, node: &ContainerQuery) {
        <V as Visit>::visit_container_query(&mut **self, node)
    }

    #[inline]
    fn visit_container_query_and(&mut self, node: &ContainerQueryAnd) {
        <V as Visit>::visit_container_query_and(&mut **self, node)
    }

    #[inline]
    fn visit_container_query_not(&mut self, node: &ContainerQueryNot) {
        <V as Visit>::visit_container_query_not(&mut **self, node)
    }

    #[inline]
    fn visit_container_query_or(&mut self, node: &ContainerQueryOr) {
        <V as Visit>::visit_container_query_or(&mut **self, node)
    }

    #[inline]
    fn visit_container_query_type(&mut self, node: &ContainerQueryType) {
        <V as Visit>::visit_container_query_type(&mut **self, node)
    }

    #[inline]
    fn visit_container_query_types(&mut self, node: &[ContainerQueryType]) {
        <V as Visit>::visit_container_query_types(&mut **self, node)
    }

    #[inline]
    fn visit_custom_highlight_name(&mut self, node: &CustomHighlightName) {
        <V as Visit>::visit_custom_highlight_name(&mut **self, node)
    }

    #[inline]
    fn visit_custom_ident(&mut self, node: &CustomIdent) {
        <V as Visit>::visit_custom_ident(&mut **self, node)
    }

    #[inline]
    fn visit_custom_idents(&mut self, node: &[CustomIdent]) {
        <V as Visit>::visit_custom_idents(&mut **self, node)
    }

    #[inline]
    fn visit_custom_media_query(&mut self, node: &CustomMediaQuery) {
        <V as Visit>::visit_custom_media_query(&mut **self, node)
    }

    #[inline]
    fn visit_custom_media_query_media_type(&mut self, node: &CustomMediaQueryMediaType) {
        <V as Visit>::visit_custom_media_query_media_type(&mut **self, node)
    }

    #[inline]
    fn visit_custom_property_name(&mut self, node: &CustomPropertyName) {
        <V as Visit>::visit_custom_property_name(&mut **self, node)
    }

    #[inline]
    fn visit_dashed_ident(&mut self, node: &DashedIdent) {
        <V as Visit>::visit_dashed_ident(&mut **self, node)
    }

    #[inline]
    fn visit_declaration(&mut self, node: &Declaration) {
        <V as Visit>::visit_declaration(&mut **self, node)
    }

    #[inline]
    fn visit_declaration_name(&mut self, node: &DeclarationName) {
        <V as Visit>::visit_declaration_name(&mut **self, node)
    }

    #[inline]
    fn visit_declaration_or_at_rule(&mut self, node: &DeclarationOrAtRule) {
        <V as Visit>::visit_declaration_or_at_rule(&mut **self, node)
    }

    #[inline]
    fn visit_delimiter(&mut self, node: &Delimiter) {
        <V as Visit>::visit_delimiter(&mut **self, node)
    }

    #[inline]
    fn visit_delimiter_value(&mut self, node: &DelimiterValue) {
        <V as Visit>::visit_delimiter_value(&mut **self, node)
    }

    #[inline]
    fn visit_dimension(&mut self, node: &Dimension) {
        <V as Visit>::visit_dimension(&mut **self, node)
    }

    #[inline]
    fn visit_dimension_token(&mut self, node: &DimensionToken) {
        <V as Visit>::visit_dimension_token(&mut **self, node)
    }

    #[inline]
    fn visit_document_prelude(&mut self, node: &DocumentPrelude) {
        <V as Visit>::visit_document_prelude(&mut **self, node)
    }

    #[inline]
    fn visit_document_prelude_matching_function(&mut self, node: &DocumentPreludeMatchingFunction) {
        <V as Visit>::visit_document_prelude_matching_function(&mut **self, node)
    }

    #[inline]
    fn visit_document_prelude_matching_functions(
        &mut self,
        node: &[DocumentPreludeMatchingFunction],
    ) {
        <V as Visit>::visit_document_prelude_matching_functions(&mut **self, node)
    }

    #[inline]
    fn visit_extension_name(&mut self, node: &ExtensionName) {
        <V as Visit>::visit_extension_name(&mut **self, node)
    }

    #[inline]
    fn visit_family_name(&mut self, node: &FamilyName) {
        <V as Visit>::visit_family_name(&mut **self, node)
    }

    #[inline]
    fn visit_family_names(&mut self, node: &[FamilyName]) {
        <V as Visit>::visit_family_names(&mut **self, node)
    }

    #[inline]
    fn visit_flex(&mut self, node: &Flex) {
        <V as Visit>::visit_flex(&mut **self, node)
    }

    #[inline]
    fn visit_font_feature_values_prelude(&mut self, node: &FontFeatureValuesPrelude) {
        <V as Visit>::visit_font_feature_values_prelude(&mut **self, node)
    }

    #[inline]
    fn visit_forgiving_complex_selector(&mut self, node: &ForgivingComplexSelector) {
        <V as Visit>::visit_forgiving_complex_selector(&mut **self, node)
    }

    #[inline]
    fn visit_forgiving_complex_selectors(&mut self, node: &[ForgivingComplexSelector]) {
        <V as Visit>::visit_forgiving_complex_selectors(&mut **self, node)
    }

    #[inline]
    fn visit_forgiving_relative_selector(&mut self, node: &ForgivingRelativeSelector) {
        <V as Visit>::visit_forgiving_relative_selector(&mut **self, node)
    }

    #[inline]
    fn visit_forgiving_relative_selector_list(&mut self, node: &ForgivingRelativeSelectorList) {
        <V as Visit>::visit_forgiving_relative_selector_list(&mut **self, node)
    }

    #[inline]
    fn visit_forgiving_relative_selectors(&mut self, node: &[ForgivingRelativeSelector]) {
        <V as Visit>::visit_forgiving_relative_selectors(&mut **self, node)
    }

    #[inline]
    fn visit_forgiving_selector_list(&mut self, node: &ForgivingSelectorList) {
        <V as Visit>::visit_forgiving_selector_list(&mut **self, node)
    }

    #[inline]
    fn visit_frequency(&mut self, node: &Frequency) {
        <V as Visit>::visit_frequency(&mut **self, node)
    }

    #[inline]
    fn visit_frequency_percentage(&mut self, node: &FrequencyPercentage) {
        <V as Visit>::visit_frequency_percentage(&mut **self, node)
    }

    #[inline]
    fn visit_function(&mut self, node: &Function) {
        <V as Visit>::visit_function(&mut **self, node)
    }

    #[inline]
    fn visit_function_name(&mut self, node: &FunctionName) {
        <V as Visit>::visit_function_name(&mut **self, node)
    }

    #[inline]
    fn visit_general_enclosed(&mut self, node: &GeneralEnclosed) {
        <V as Visit>::visit_general_enclosed(&mut **self, node)
    }

    #[inline]
    fn visit_hex_color(&mut self, node: &HexColor) {
        <V as Visit>::visit_hex_color(&mut **self, node)
    }

    #[inline]
    fn visit_hue(&mut self, node: &Hue) {
        <V as Visit>::visit_hue(&mut **self, node)
    }

    #[inline]
    fn visit_id_selector(&mut self, node: &IdSelector) {
        <V as Visit>::visit_id_selector(&mut **self, node)
    }

    #[inline]
    fn visit_ident(&mut self, node: &Ident) {
        <V as Visit>::visit_ident(&mut **self, node)
    }

    #[inline]
    fn visit_idents(&mut self, node: &[Ident]) {
        <V as Visit>::visit_idents(&mut **self, node)
    }

    #[inline]
    fn visit_import_conditions(&mut self, node: &ImportConditions) {
        <V as Visit>::visit_import_conditions(&mut **self, node)
    }

    #[inline]
    fn visit_import_href(&mut self, node: &ImportHref) {
        <V as Visit>::visit_import_href(&mut **self, node)
    }

    #[inline]
    fn visit_import_layer_name(&mut self, node: &ImportLayerName) {
        <V as Visit>::visit_import_layer_name(&mut **self, node)
    }

    #[inline]
    fn visit_import_prelude(&mut self, node: &ImportPrelude) {
        <V as Visit>::visit_import_prelude(&mut **self, node)
    }

    #[inline]
    fn visit_important_flag(&mut self, node: &ImportantFlag) {
        <V as Visit>::visit_important_flag(&mut **self, node)
    }

    #[inline]
    fn visit_integer(&mut self, node: &Integer) {
        <V as Visit>::visit_integer(&mut **self, node)
    }

    #[inline]
    fn visit_keyframe_block(&mut self, node: &KeyframeBlock) {
        <V as Visit>::visit_keyframe_block(&mut **self, node)
    }

    #[inline]
    fn visit_keyframe_selector(&mut self, node: &KeyframeSelector) {
        <V as Visit>::visit_keyframe_selector(&mut **self, node)
    }

    #[inline]
    fn visit_keyframe_selectors(&mut self, node: &[KeyframeSelector]) {
        <V as Visit>::visit_keyframe_selectors(&mut **self, node)
    }

    #[inline]
    fn visit_keyframes_name(&mut self, node: &KeyframesName) {
        <V as Visit>::visit_keyframes_name(&mut **self, node)
    }

    #[inline]
    fn visit_keyframes_pseudo_function(&mut self, node: &KeyframesPseudoFunction) {
        <V as Visit>::visit_keyframes_pseudo_function(&mut **self, node)
    }

    #[inline]
    fn visit_keyframes_pseudo_prefix(&mut self, node: &KeyframesPseudoPrefix) {
        <V as Visit>::visit_keyframes_pseudo_prefix(&mut **self, node)
    }

    #[inline]
    fn visit_layer_name(&mut self, node: &LayerName) {
        <V as Visit>::visit_layer_name(&mut **self, node)
    }

    #[inline]
    fn visit_layer_name_list(&mut self, node: &LayerNameList) {
        <V as Visit>::visit_layer_name_list(&mut **self, node)
    }

    #[inline]
    fn visit_layer_names(&mut self, node: &[LayerName]) {
        <V as Visit>::visit_layer_names(&mut **self, node)
    }

    #[inline]
    fn visit_layer_prelude(&mut self, node: &LayerPrelude) {
        <V as Visit>::visit_layer_prelude(&mut **self, node)
    }

    #[inline]
    fn visit_length(&mut self, node: &Length) {
        <V as Visit>::visit_length(&mut **self, node)
    }

    #[inline]
    fn visit_length_percentage(&mut self, node: &LengthPercentage) {
        <V as Visit>::visit_length_percentage(&mut **self, node)
    }

    #[inline]
    fn visit_list_of_component_values(&mut self, node: &ListOfComponentValues) {
        <V as Visit>::visit_list_of_component_values(&mut **self, node)
    }

    #[inline]
    fn visit_media_and(&mut self, node: &MediaAnd) {
        <V as Visit>::visit_media_and(&mut **self, node)
    }

    #[inline]
    fn visit_media_condition(&mut self, node: &MediaCondition) {
        <V as Visit>::visit_media_condition(&mut **self, node)
    }

    #[inline]
    fn visit_media_condition_all_type(&mut self, node: &MediaConditionAllType) {
        <V as Visit>::visit_media_condition_all_type(&mut **self, node)
    }

    #[inline]
    fn visit_media_condition_all_types(&mut self, node: &[MediaConditionAllType]) {
        <V as Visit>::visit_media_condition_all_types(&mut **self, node)
    }

    #[inline]
    fn visit_media_condition_type(&mut self, node: &MediaConditionType) {
        <V as Visit>::visit_media_condition_type(&mut **self, node)
    }

    #[inline]
    fn visit_media_condition_without_or(&mut self, node: &MediaConditionWithoutOr) {
        <V as Visit>::visit_media_condition_without_or(&mut **self, node)
    }

    #[inline]
    fn visit_media_condition_without_or_type(&mut self, node: &MediaConditionWithoutOrType) {
        <V as Visit>::visit_media_condition_without_or_type(&mut **self, node)
    }

    #[inline]
    fn visit_media_condition_without_or_types(&mut self, node: &[MediaConditionWithoutOrType]) {
        <V as Visit>::visit_media_condition_without_or_types(&mut **self, node)
    }

    #[inline]
    fn visit_media_feature(&mut self, node: &MediaFeature) {
        <V as Visit>::visit_media_feature(&mut **self, node)
    }

    #[inline]
    fn visit_media_feature_boolean(&mut self, node: &MediaFeatureBoolean) {
        <V as Visit>::visit_media_feature_boolean(&mut **self, node)
    }

    #[inline]
    fn visit_media_feature_name(&mut self, node: &MediaFeatureName) {
        <V as Visit>::visit_media_feature_name(&mut **self, node)
    }

    #[inline]
    fn visit_media_feature_plain(&mut self, node: &MediaFeaturePlain) {
        <V as Visit>::visit_media_feature_plain(&mut **self, node)
    }

    #[inline]
    fn visit_media_feature_range(&mut self, node: &MediaFeatureRange) {
        <V as Visit>::visit_media_feature_range(&mut **self, node)
    }

    #[inline]
    fn visit_media_feature_range_comparison(&mut self, node: &MediaFeatureRangeComparison) {
        <V as Visit>::visit_media_feature_range_comparison(&mut **self, node)
    }

    #[inline]
    fn visit_media_feature_range_interval(&mut self, node: &MediaFeatureRangeInterval) {
        <V as Visit>::visit_media_feature_range_interval(&mut **self, node)
    }

    #[inline]
    fn visit_media_feature_value(&mut self, node: &MediaFeatureValue) {
        <V as Visit>::visit_media_feature_value(&mut **self, node)
    }

    #[inline]
    fn visit_media_in_parens(&mut self, node: &MediaInParens) {
        <V as Visit>::visit_media_in_parens(&mut **self, node)
    }

    #[inline]
    fn visit_media_not(&mut self, node: &MediaNot) {
        <V as Visit>::visit_media_not(&mut **self, node)
    }

    #[inline]
    fn visit_media_or(&mut self, node: &MediaOr) {
        <V as Visit>::visit_media_or(&mut **self, node)
    }

    #[inline]
    fn visit_media_query(&mut self, node: &MediaQuery) {
        <V as Visit>::visit_media_query(&mut **self, node)
    }

    #[inline]
    fn visit_media_query_list(&mut self, node: &MediaQueryList) {
        <V as Visit>::visit_media_query_list(&mut **self, node)
    }

    #[inline]
    fn visit_media_querys(&mut self, node: &[MediaQuery]) {
        <V as Visit>::visit_media_querys(&mut **self, node)
    }

    #[inline]
    fn visit_media_type(&mut self, node: &MediaType) {
        <V as Visit>::visit_media_type(&mut **self, node)
    }

    #[inline]
    fn visit_named_namespace(&mut self, node: &NamedNamespace) {
        <V as Visit>::visit_named_namespace(&mut **self, node)
    }

    #[inline]
    fn visit_namespace(&mut self, node: &Namespace) {
        <V as Visit>::visit_namespace(&mut **self, node)
    }

    #[inline]
    fn visit_namespace_prefix(&mut self, node: &NamespacePrefix) {
        <V as Visit>::visit_namespace_prefix(&mut **self, node)
    }

    #[inline]
    fn visit_namespace_prelude(&mut self, node: &NamespacePrelude) {
        <V as Visit>::visit_namespace_prelude(&mut **self, node)
    }

    #[inline]
    fn visit_namespace_prelude_uri(&mut self, node: &NamespacePreludeUri) {
        <V as Visit>::visit_namespace_prelude_uri(&mut **self, node)
    }

    #[inline]
    fn visit_nesting_selector(&mut self, node: &NestingSelector) {
        <V as Visit>::visit_nesting_selector(&mut **self, node)
    }

    #[inline]
    fn visit_number(&mut self, node: &Number) {
        <V as Visit>::visit_number(&mut **self, node)
    }

    #[inline]
    fn visit_number_type(&mut self, node: &NumberType) {
        <V as Visit>::visit_number_type(&mut **self, node)
    }

    #[inline]
    fn visit_opt_at_rule_prelude(&mut self, node: &Option<Box<AtRulePrelude>>) {
        <V as Visit>::visit_opt_at_rule_prelude(&mut **self, node)
    }

    #[inline]
    fn visit_opt_atom(&mut self, node: &Option<swc_atoms::Atom>) {
        <V as Visit>::visit_opt_atom(&mut **self, node)
    }

    #[inline]
    fn visit_opt_attribute_selector_matcher(&mut self, node: &Option<AttributeSelectorMatcher>) {
        <V as Visit>::visit_opt_attribute_selector_matcher(&mut **self, node)
    }

    #[inline]
    fn visit_opt_attribute_selector_modifier(&mut self, node: &Option<AttributeSelectorModifier>) {
        <V as Visit>::visit_opt_attribute_selector_modifier(&mut **self, node)
    }

    #[inline]
    fn visit_opt_attribute_selector_value(&mut self, node: &Option<AttributeSelectorValue>) {
        <V as Visit>::visit_opt_attribute_selector_value(&mut **self, node)
    }

    #[inline]
    fn visit_opt_combinator(&mut self, node: &Option<Combinator>) {
        <V as Visit>::visit_opt_combinator(&mut **self, node)
    }

    #[inline]
    fn visit_opt_container_name(&mut self, node: &Option<ContainerName>) {
        <V as Visit>::visit_opt_container_name(&mut **self, node)
    }

    #[inline]
    fn visit_opt_forgiving_selector_list(&mut self, node: &Option<ForgivingSelectorList>) {
        <V as Visit>::visit_opt_forgiving_selector_list(&mut **self, node)
    }

    #[inline]
    fn visit_opt_function(&mut self, node: &Option<Box<Function>>) {
        <V as Visit>::visit_opt_function(&mut **self, node)
    }

    #[inline]
    fn visit_opt_ident(&mut self, node: &Option<Ident>) {
        <V as Visit>::visit_opt_ident(&mut **self, node)
    }

    #[inline]
    fn visit_opt_import_conditions(&mut self, node: &Option<Box<ImportConditions>>) {
        <V as Visit>::visit_opt_import_conditions(&mut **self, node)
    }

    #[inline]
    fn visit_opt_import_layer_name(&mut self, node: &Option<Box<ImportLayerName>>) {
        <V as Visit>::visit_opt_import_layer_name(&mut **self, node)
    }

    #[inline]
    fn visit_opt_important_flag(&mut self, node: &Option<ImportantFlag>) {
        <V as Visit>::visit_opt_important_flag(&mut **self, node)
    }

    #[inline]
    fn visit_opt_media_condition_type(&mut self, node: &Option<Box<MediaConditionType>>) {
        <V as Visit>::visit_opt_media_condition_type(&mut **self, node)
    }

    #[inline]
    fn visit_opt_media_query_list(&mut self, node: &Option<Box<MediaQueryList>>) {
        <V as Visit>::visit_opt_media_query_list(&mut **self, node)
    }

    #[inline]
    fn visit_opt_media_type(&mut self, node: &Option<MediaType>) {
        <V as Visit>::visit_opt_media_type(&mut **self, node)
    }

    #[inline]
    fn visit_opt_namespace(&mut self, node: &Option<Namespace>) {
        <V as Visit>::visit_opt_namespace(&mut **self, node)
    }

    #[inline]
    fn visit_opt_namespace_prefix(&mut self, node: &Option<NamespacePrefix>) {
        <V as Visit>::visit_opt_namespace_prefix(&mut **self, node)
    }

    #[inline]
    fn visit_opt_nesting_selector(&mut self, node: &Option<NestingSelector>) {
        <V as Visit>::visit_opt_nesting_selector(&mut **self, node)
    }

    #[inline]
    fn visit_opt_number(&mut self, node: &Option<Number>) {
        <V as Visit>::visit_opt_number(&mut **self, node)
    }

    #[inline]
    fn visit_opt_page_selector_pseudos(&mut self, node: &Option<Vec<PageSelectorPseudo>>) {
        <V as Visit>::visit_opt_page_selector_pseudos(&mut **self, node)
    }

    #[inline]
    fn visit_opt_page_selector_type(&mut self, node: &Option<PageSelectorType>) {
        <V as Visit>::visit_opt_page_selector_type(&mut **self, node)
    }

    #[inline]
    fn visit_opt_pseudo_class_selector_childrens(
        &mut self,
        node: &Option<Vec<PseudoClassSelectorChildren>>,
    ) {
        <V as Visit>::visit_opt_pseudo_class_selector_childrens(&mut **self, node)
    }

    #[inline]
    fn visit_opt_pseudo_element_selector_childrens(
        &mut self,
        node: &Option<Vec<PseudoElementSelectorChildren>>,
    ) {
        <V as Visit>::visit_opt_pseudo_element_selector_childrens(&mut **self, node)
    }

    #[inline]
    fn visit_opt_simple_block(&mut self, node: &Option<SimpleBlock>) {
        <V as Visit>::visit_opt_simple_block(&mut **self, node)
    }

    #[inline]
    fn visit_opt_type_selector(&mut self, node: &Option<Box<TypeSelector>>) {
        <V as Visit>::visit_opt_type_selector(&mut **self, node)
    }

    #[inline]
    fn visit_opt_url_modifiers(&mut self, node: &Option<Vec<UrlModifier>>) {
        <V as Visit>::visit_opt_url_modifiers(&mut **self, node)
    }

    #[inline]
    fn visit_opt_url_value(&mut self, node: &Option<Box<UrlValue>>) {
        <V as Visit>::visit_opt_url_value(&mut **self, node)
    }

    #[inline]
    fn visit_page_selector(&mut self, node: &PageSelector) {
        <V as Visit>::visit_page_selector(&mut **self, node)
    }

    #[inline]
    fn visit_page_selector_list(&mut self, node: &PageSelectorList) {
        <V as Visit>::visit_page_selector_list(&mut **self, node)
    }

    #[inline]
    fn visit_page_selector_pseudo(&mut self, node: &PageSelectorPseudo) {
        <V as Visit>::visit_page_selector_pseudo(&mut **self, node)
    }

    #[inline]
    fn visit_page_selector_pseudos(&mut self, node: &[PageSelectorPseudo]) {
        <V as Visit>::visit_page_selector_pseudos(&mut **self, node)
    }

    #[inline]
    fn visit_page_selector_type(&mut self, node: &PageSelectorType) {
        <V as Visit>::visit_page_selector_type(&mut **self, node)
    }

    #[inline]
    fn visit_page_selectors(&mut self, node: &[PageSelector]) {
        <V as Visit>::visit_page_selectors(&mut **self, node)
    }

    #[inline]
    fn visit_percentage(&mut self, node: &Percentage) {
        <V as Visit>::visit_percentage(&mut **self, node)
    }

    #[inline]
    fn visit_pseudo_class_selector(&mut self, node: &PseudoClassSelector) {
        <V as Visit>::visit_pseudo_class_selector(&mut **self, node)
    }

    #[inline]
    fn visit_pseudo_class_selector_children(&mut self, node: &PseudoClassSelectorChildren) {
        <V as Visit>::visit_pseudo_class_selector_children(&mut **self, node)
    }

    #[inline]
    fn visit_pseudo_class_selector_childrens(&mut self, node: &[PseudoClassSelectorChildren]) {
        <V as Visit>::visit_pseudo_class_selector_childrens(&mut **self, node)
    }

    #[inline]
    fn visit_pseudo_element_selector(&mut self, node: &PseudoElementSelector) {
        <V as Visit>::visit_pseudo_element_selector(&mut **self, node)
    }

    #[inline]
    fn visit_pseudo_element_selector_children(&mut self, node: &PseudoElementSelectorChildren) {
        <V as Visit>::visit_pseudo_element_selector_children(&mut **self, node)
    }

    #[inline]
    fn visit_pseudo_element_selector_childrens(&mut self, node: &[PseudoElementSelectorChildren]) {
        <V as Visit>::visit_pseudo_element_selector_childrens(&mut **self, node)
    }

    #[inline]
    fn visit_qualified_rule(&mut self, node: &QualifiedRule) {
        <V as Visit>::visit_qualified_rule(&mut **self, node)
    }

    #[inline]
    fn visit_qualified_rule_prelude(&mut self, node: &QualifiedRulePrelude) {
        <V as Visit>::visit_qualified_rule_prelude(&mut **self, node)
    }

    #[inline]
    fn visit_query_in_parens(&mut self, node: &QueryInParens) {
        <V as Visit>::visit_query_in_parens(&mut **self, node)
    }

    #[inline]
    fn visit_ratio(&mut self, node: &Ratio) {
        <V as Visit>::visit_ratio(&mut **self, node)
    }

    #[inline]
    fn visit_relative_selector(&mut self, node: &RelativeSelector) {
        <V as Visit>::visit_relative_selector(&mut **self, node)
    }

    #[inline]
    fn visit_relative_selector_list(&mut self, node: &RelativeSelectorList) {
        <V as Visit>::visit_relative_selector_list(&mut **self, node)
    }

    #[inline]
    fn visit_relative_selectors(&mut self, node: &[RelativeSelector]) {
        <V as Visit>::visit_relative_selectors(&mut **self, node)
    }

    #[inline]
    fn visit_resolution(&mut self, node: &Resolution) {
        <V as Visit>::visit_resolution(&mut **self, node)
    }

    #[inline]
    fn visit_rule(&mut self, node: &Rule) {
        <V as Visit>::visit_rule(&mut **self, node)
    }

    #[inline]
    fn visit_rules(&mut self, node: &[Rule]) {
        <V as Visit>::visit_rules(&mut **self, node)
    }

    #[inline]
    fn visit_scope_range(&mut self, node: &ScopeRange) {
        <V as Visit>::visit_scope_range(&mut **self, node)
    }

    #[inline]
    fn visit_selector_list(&mut self, node: &SelectorList) {
        <V as Visit>::visit_selector_list(&mut **self, node)
    }

    #[inline]
    fn visit_sequence_of_custom_idents(&mut self, node: &SequenceOfCustomIdents) {
        <V as Visit>::visit_sequence_of_custom_idents(&mut **self, node)
    }

    #[inline]
    fn visit_simple_block(&mut self, node: &SimpleBlock) {
        <V as Visit>::visit_simple_block(&mut **self, node)
    }

    #[inline]
    fn visit_size_feature(&mut self, node: &SizeFeature) {
        <V as Visit>::visit_size_feature(&mut **self, node)
    }

    #[inline]
    fn visit_size_feature_boolean(&mut self, node: &SizeFeatureBoolean) {
        <V as Visit>::visit_size_feature_boolean(&mut **self, node)
    }

    #[inline]
    fn visit_size_feature_name(&mut self, node: &SizeFeatureName) {
        <V as Visit>::visit_size_feature_name(&mut **self, node)
    }

    #[inline]
    fn visit_size_feature_plain(&mut self, node: &SizeFeaturePlain) {
        <V as Visit>::visit_size_feature_plain(&mut **self, node)
    }

    #[inline]
    fn visit_size_feature_range(&mut self, node: &SizeFeatureRange) {
        <V as Visit>::visit_size_feature_range(&mut **self, node)
    }

    #[inline]
    fn visit_size_feature_range_comparison(&mut self, node: &SizeFeatureRangeComparison) {
        <V as Visit>::visit_size_feature_range_comparison(&mut **self, node)
    }

    #[inline]
    fn visit_size_feature_range_interval(&mut self, node: &SizeFeatureRangeInterval) {
        <V as Visit>::visit_size_feature_range_interval(&mut **self, node)
    }

    #[inline]
    fn visit_size_feature_value(&mut self, node: &SizeFeatureValue) {
        <V as Visit>::visit_size_feature_value(&mut **self, node)
    }

    #[inline]
    fn visit_span(&mut self, node: &swc_common::Span) {
        <V as Visit>::visit_span(&mut **self, node)
    }

    #[inline]
    fn visit_str(&mut self, node: &Str) {
        <V as Visit>::visit_str(&mut **self, node)
    }

    #[inline]
    fn visit_style_block(&mut self, node: &StyleBlock) {
        <V as Visit>::visit_style_block(&mut **self, node)
    }

    #[inline]
    fn visit_stylesheet(&mut self, node: &Stylesheet) {
        <V as Visit>::visit_stylesheet(&mut **self, node)
    }

    #[inline]
    fn visit_subclass_selector(&mut self, node: &SubclassSelector) {
        <V as Visit>::visit_subclass_selector(&mut **self, node)
    }

    #[inline]
    fn visit_subclass_selectors(&mut self, node: &[SubclassSelector]) {
        <V as Visit>::visit_subclass_selectors(&mut **self, node)
    }

    #[inline]
    fn visit_supports_and(&mut self, node: &SupportsAnd) {
        <V as Visit>::visit_supports_and(&mut **self, node)
    }

    #[inline]
    fn visit_supports_condition(&mut self, node: &SupportsCondition) {
        <V as Visit>::visit_supports_condition(&mut **self, node)
    }

    #[inline]
    fn visit_supports_condition_type(&mut self, node: &SupportsConditionType) {
        <V as Visit>::visit_supports_condition_type(&mut **self, node)
    }

    #[inline]
    fn visit_supports_condition_types(&mut self, node: &[SupportsConditionType]) {
        <V as Visit>::visit_supports_condition_types(&mut **self, node)
    }

    #[inline]
    fn visit_supports_feature(&mut self, node: &SupportsFeature) {
        <V as Visit>::visit_supports_feature(&mut **self, node)
    }

    #[inline]
    fn visit_supports_in_parens(&mut self, node: &SupportsInParens) {
        <V as Visit>::visit_supports_in_parens(&mut **self, node)
    }

    #[inline]
    fn visit_supports_not(&mut self, node: &SupportsNot) {
        <V as Visit>::visit_supports_not(&mut **self, node)
    }

    #[inline]
    fn visit_supports_or(&mut self, node: &SupportsOr) {
        <V as Visit>::visit_supports_or(&mut **self, node)
    }

    #[inline]
    fn visit_tag_name_selector(&mut self, node: &TagNameSelector) {
        <V as Visit>::visit_tag_name_selector(&mut **self, node)
    }

    #[inline]
    fn visit_time(&mut self, node: &Time) {
        <V as Visit>::visit_time(&mut **self, node)
    }

    #[inline]
    fn visit_time_percentage(&mut self, node: &TimePercentage) {
        <V as Visit>::visit_time_percentage(&mut **self, node)
    }

    #[inline]
    fn visit_token(&mut self, node: &Token) {
        <V as Visit>::visit_token(&mut **self, node)
    }

    #[inline]
    fn visit_token_and_span(&mut self, node: &TokenAndSpan) {
        <V as Visit>::visit_token_and_span(&mut **self, node)
    }

    #[inline]
    fn visit_type_selector(&mut self, node: &TypeSelector) {
        <V as Visit>::visit_type_selector(&mut **self, node)
    }

    #[inline]
    fn visit_unicode_range(&mut self, node: &UnicodeRange) {
        <V as Visit>::visit_unicode_range(&mut **self, node)
    }

    #[inline]
    fn visit_universal_selector(&mut self, node: &UniversalSelector) {
        <V as Visit>::visit_universal_selector(&mut **self, node)
    }

    #[inline]
    fn visit_unknown_dimension(&mut self, node: &UnknownDimension) {
        <V as Visit>::visit_unknown_dimension(&mut **self, node)
    }

    #[inline]
    fn visit_url(&mut self, node: &Url) {
        <V as Visit>::visit_url(&mut **self, node)
    }

    #[inline]
    fn visit_url_key_value(&mut self, node: &UrlKeyValue) {
        <V as Visit>::visit_url_key_value(&mut **self, node)
    }

    #[inline]
    fn visit_url_modifier(&mut self, node: &UrlModifier) {
        <V as Visit>::visit_url_modifier(&mut **self, node)
    }

    #[inline]
    fn visit_url_modifiers(&mut self, node: &[UrlModifier]) {
        <V as Visit>::visit_url_modifiers(&mut **self, node)
    }

    #[inline]
    fn visit_url_value(&mut self, node: &UrlValue) {
        <V as Visit>::visit_url_value(&mut **self, node)
    }

    #[inline]
    fn visit_url_value_raw(&mut self, node: &UrlValueRaw) {
        <V as Visit>::visit_url_value_raw(&mut **self, node)
    }

    #[inline]
    fn visit_wq_name(&mut self, node: &WqName) {
        <V as Visit>::visit_wq_name(&mut **self, node)
    }
}
impl<V> Visit for Box<V>
where
    V: ?Sized + Visit,
{
    #[inline]
    fn visit_absolute_color_base(&mut self, node: &AbsoluteColorBase) {
        <V as Visit>::visit_absolute_color_base(&mut **self, node)
    }

    #[inline]
    fn visit_alpha_value(&mut self, node: &AlphaValue) {
        <V as Visit>::visit_alpha_value(&mut **self, node)
    }

    #[inline]
    fn visit_an_plus_b(&mut self, node: &AnPlusB) {
        <V as Visit>::visit_an_plus_b(&mut **self, node)
    }

    #[inline]
    fn visit_an_plus_b_notation(&mut self, node: &AnPlusBNotation) {
        <V as Visit>::visit_an_plus_b_notation(&mut **self, node)
    }

    #[inline]
    fn visit_angle(&mut self, node: &Angle) {
        <V as Visit>::visit_angle(&mut **self, node)
    }

    #[inline]
    fn visit_angle_percentage(&mut self, node: &AnglePercentage) {
        <V as Visit>::visit_angle_percentage(&mut **self, node)
    }

    #[inline]
    fn visit_any_namespace(&mut self, node: &AnyNamespace) {
        <V as Visit>::visit_any_namespace(&mut **self, node)
    }

    #[inline]
    fn visit_at_rule(&mut self, node: &AtRule) {
        <V as Visit>::visit_at_rule(&mut **self, node)
    }

    #[inline]
    fn visit_at_rule_name(&mut self, node: &AtRuleName) {
        <V as Visit>::visit_at_rule_name(&mut **self, node)
    }

    #[inline]
    fn visit_at_rule_prelude(&mut self, node: &AtRulePrelude) {
        <V as Visit>::visit_at_rule_prelude(&mut **self, node)
    }

    #[inline]
    fn visit_atom(&mut self, node: &swc_atoms::Atom) {
        <V as Visit>::visit_atom(&mut **self, node)
    }

    #[inline]
    fn visit_attribute_selector(&mut self, node: &AttributeSelector) {
        <V as Visit>::visit_attribute_selector(&mut **self, node)
    }

    #[inline]
    fn visit_attribute_selector_matcher(&mut self, node: &AttributeSelectorMatcher) {
        <V as Visit>::visit_attribute_selector_matcher(&mut **self, node)
    }

    #[inline]
    fn visit_attribute_selector_matcher_value(&mut self, node: &AttributeSelectorMatcherValue) {
        <V as Visit>::visit_attribute_selector_matcher_value(&mut **self, node)
    }

    #[inline]
    fn visit_attribute_selector_modifier(&mut self, node: &AttributeSelectorModifier) {
        <V as Visit>::visit_attribute_selector_modifier(&mut **self, node)
    }

    #[inline]
    fn visit_attribute_selector_value(&mut self, node: &AttributeSelectorValue) {
        <V as Visit>::visit_attribute_selector_value(&mut **self, node)
    }

    #[inline]
    fn visit_bin_op(&mut self, node: &BinOp) {
        <V as Visit>::visit_bin_op(&mut **self, node)
    }

    #[inline]
    fn visit_calc_operator(&mut self, node: &CalcOperator) {
        <V as Visit>::visit_calc_operator(&mut **self, node)
    }

    #[inline]
    fn visit_calc_operator_type(&mut self, node: &CalcOperatorType) {
        <V as Visit>::visit_calc_operator_type(&mut **self, node)
    }

    #[inline]
    fn visit_calc_product(&mut self, node: &CalcProduct) {
        <V as Visit>::visit_calc_product(&mut **self, node)
    }

    #[inline]
    fn visit_calc_product_or_operator(&mut self, node: &CalcProductOrOperator) {
        <V as Visit>::visit_calc_product_or_operator(&mut **self, node)
    }

    #[inline]
    fn visit_calc_product_or_operators(&mut self, node: &[CalcProductOrOperator]) {
        <V as Visit>::visit_calc_product_or_operators(&mut **self, node)
    }

    #[inline]
    fn visit_calc_sum(&mut self, node: &CalcSum) {
        <V as Visit>::visit_calc_sum(&mut **self, node)
    }

    #[inline]
    fn visit_calc_value(&mut self, node: &CalcValue) {
        <V as Visit>::visit_calc_value(&mut **self, node)
    }

    #[inline]
    fn visit_calc_value_or_operator(&mut self, node: &CalcValueOrOperator) {
        <V as Visit>::visit_calc_value_or_operator(&mut **self, node)
    }

    #[inline]
    fn visit_calc_value_or_operators(&mut self, node: &[CalcValueOrOperator]) {
        <V as Visit>::visit_calc_value_or_operators(&mut **self, node)
    }

    #[inline]
    fn visit_class_selector(&mut self, node: &ClassSelector) {
        <V as Visit>::visit_class_selector(&mut **self, node)
    }

    #[inline]
    fn visit_cmyk_component(&mut self, node: &CmykComponent) {
        <V as Visit>::visit_cmyk_component(&mut **self, node)
    }

    #[inline]
    fn visit_color(&mut self, node: &Color) {
        <V as Visit>::visit_color(&mut **self, node)
    }

    #[inline]
    fn visit_color_profile_name(&mut self, node: &ColorProfileName) {
        <V as Visit>::visit_color_profile_name(&mut **self, node)
    }

    #[inline]
    fn visit_combinator(&mut self, node: &Combinator) {
        <V as Visit>::visit_combinator(&mut **self, node)
    }

    #[inline]
    fn visit_combinator_value(&mut self, node: &CombinatorValue) {
        <V as Visit>::visit_combinator_value(&mut **self, node)
    }

    #[inline]
    fn visit_complex_selector(&mut self, node: &ComplexSelector) {
        <V as Visit>::visit_complex_selector(&mut **self, node)
    }

    #[inline]
    fn visit_complex_selector_children(&mut self, node: &ComplexSelectorChildren) {
        <V as Visit>::visit_complex_selector_children(&mut **self, node)
    }

    #[inline]
    fn visit_complex_selector_childrens(&mut self, node: &[ComplexSelectorChildren]) {
        <V as Visit>::visit_complex_selector_childrens(&mut **self, node)
    }

    #[inline]
    fn visit_complex_selectors(&mut self, node: &[ComplexSelector]) {
        <V as Visit>::visit_complex_selectors(&mut **self, node)
    }

    #[inline]
    fn visit_component_value(&mut self, node: &ComponentValue) {
        <V as Visit>::visit_component_value(&mut **self, node)
    }

    #[inline]
    fn visit_component_values(&mut self, node: &[ComponentValue]) {
        <V as Visit>::visit_component_values(&mut **self, node)
    }

    #[inline]
    fn visit_compound_selector(&mut self, node: &CompoundSelector) {
        <V as Visit>::visit_compound_selector(&mut **self, node)
    }

    #[inline]
    fn visit_compound_selector_list(&mut self, node: &CompoundSelectorList) {
        <V as Visit>::visit_compound_selector_list(&mut **self, node)
    }

    #[inline]
    fn visit_compound_selectors(&mut self, node: &[CompoundSelector]) {
        <V as Visit>::visit_compound_selectors(&mut **self, node)
    }

    #[inline]
    fn visit_container_condition(&mut self, node: &ContainerCondition) {
        <V as Visit>::visit_container_condition(&mut **self, node)
    }

    #[inline]
    fn visit_container_name(&mut self, node: &ContainerName) {
        <V as Visit>::visit_container_name(&mut **self, node)
    }

    #[inline]
    fn visit_container_query(&mut self, node: &ContainerQuery) {
        <V as Visit>::visit_container_query(&mut **self, node)
    }

    #[inline]
    fn visit_container_query_and(&mut self, node: &ContainerQueryAnd) {
        <V as Visit>::visit_container_query_and(&mut **self, node)
    }

    #[inline]
    fn visit_container_query_not(&mut self, node: &ContainerQueryNot) {
        <V as Visit>::visit_container_query_not(&mut **self, node)
    }

    #[inline]
    fn visit_container_query_or(&mut self, node: &ContainerQueryOr) {
        <V as Visit>::visit_container_query_or(&mut **self, node)
    }

    #[inline]
    fn visit_container_query_type(&mut self, node: &ContainerQueryType) {
        <V as Visit>::visit_container_query_type(&mut **self, node)
    }

    #[inline]
    fn visit_container_query_types(&mut self, node: &[ContainerQueryType]) {
        <V as Visit>::visit_container_query_types(&mut **self, node)
    }

    #[inline]
    fn visit_custom_highlight_name(&mut self, node: &CustomHighlightName) {
        <V as Visit>::visit_custom_highlight_name(&mut **self, node)
    }

    #[inline]
    fn visit_custom_ident(&mut self, node: &CustomIdent) {
        <V as Visit>::visit_custom_ident(&mut **self, node)
    }

    #[inline]
    fn visit_custom_idents(&mut self, node: &[CustomIdent]) {
        <V as Visit>::visit_custom_idents(&mut **self, node)
    }

    #[inline]
    fn visit_custom_media_query(&mut self, node: &CustomMediaQuery) {
        <V as Visit>::visit_custom_media_query(&mut **self, node)
    }

    #[inline]
    fn visit_custom_media_query_media_type(&mut self, node: &CustomMediaQueryMediaType) {
        <V as Visit>::visit_custom_media_query_media_type(&mut **self, node)
    }

    #[inline]
    fn visit_custom_property_name(&mut self, node: &CustomPropertyName) {
        <V as Visit>::visit_custom_property_name(&mut **self, node)
    }

    #[inline]
    fn visit_dashed_ident(&mut self, node: &DashedIdent) {
        <V as Visit>::visit_dashed_ident(&mut **self, node)
    }

    #[inline]
    fn visit_declaration(&mut self, node: &Declaration) {
        <V as Visit>::visit_declaration(&mut **self, node)
    }

    #[inline]
    fn visit_declaration_name(&mut self, node: &DeclarationName) {
        <V as Visit>::visit_declaration_name(&mut **self, node)
    }

    #[inline]
    fn visit_declaration_or_at_rule(&mut self, node: &DeclarationOrAtRule) {
        <V as Visit>::visit_declaration_or_at_rule(&mut **self, node)
    }

    #[inline]
    fn visit_delimiter(&mut self, node: &Delimiter) {
        <V as Visit>::visit_delimiter(&mut **self, node)
    }

    #[inline]
    fn visit_delimiter_value(&mut self, node: &DelimiterValue) {
        <V as Visit>::visit_delimiter_value(&mut **self, node)
    }

    #[inline]
    fn visit_dimension(&mut self, node: &Dimension) {
        <V as Visit>::visit_dimension(&mut **self, node)
    }

    #[inline]
    fn visit_dimension_token(&mut self, node: &DimensionToken) {
        <V as Visit>::visit_dimension_token(&mut **self, node)
    }

    #[inline]
    fn visit_document_prelude(&mut self, node: &DocumentPrelude) {
        <V as Visit>::visit_document_prelude(&mut **self, node)
    }

    #[inline]
    fn visit_document_prelude_matching_function(&mut self, node: &DocumentPreludeMatchingFunction) {
        <V as Visit>::visit_document_prelude_matching_function(&mut **self, node)
    }

    #[inline]
    fn visit_document_prelude_matching_functions(
        &mut self,
        node: &[DocumentPreludeMatchingFunction],
    ) {
        <V as Visit>::visit_document_prelude_matching_functions(&mut **self, node)
    }

    #[inline]
    fn visit_extension_name(&mut self, node: &ExtensionName) {
        <V as Visit>::visit_extension_name(&mut **self, node)
    }

    #[inline]
    fn visit_family_name(&mut self, node: &FamilyName) {
        <V as Visit>::visit_family_name(&mut **self, node)
    }

    #[inline]
    fn visit_family_names(&mut self, node: &[FamilyName]) {
        <V as Visit>::visit_family_names(&mut **self, node)
    }

    #[inline]
    fn visit_flex(&mut self, node: &Flex) {
        <V as Visit>::visit_flex(&mut **self, node)
    }

    #[inline]
    fn visit_font_feature_values_prelude(&mut self, node: &FontFeatureValuesPrelude) {
        <V as Visit>::visit_font_feature_values_prelude(&mut **self, node)
    }

    #[inline]
    fn visit_forgiving_complex_selector(&mut self, node: &ForgivingComplexSelector) {
        <V as Visit>::visit_forgiving_complex_selector(&mut **self, node)
    }

    #[inline]
    fn visit_forgiving_complex_selectors(&mut self, node: &[ForgivingComplexSelector]) {
        <V as Visit>::visit_forgiving_complex_selectors(&mut **self, node)
    }

    #[inline]
    fn visit_forgiving_relative_selector(&mut self, node: &ForgivingRelativeSelector) {
        <V as Visit>::visit_forgiving_relative_selector(&mut **self, node)
    }

    #[inline]
    fn visit_forgiving_relative_selector_list(&mut self, node: &ForgivingRelativeSelectorList) {
        <V as Visit>::visit_forgiving_relative_selector_list(&mut **self, node)
    }

    #[inline]
    fn visit_forgiving_relative_selectors(&mut self, node: &[ForgivingRelativeSelector]) {
        <V as Visit>::visit_forgiving_relative_selectors(&mut **self, node)
    }

    #[inline]
    fn visit_forgiving_selector_list(&mut self, node: &ForgivingSelectorList) {
        <V as Visit>::visit_forgiving_selector_list(&mut **self, node)
    }

    #[inline]
    fn visit_frequency(&mut self, node: &Frequency) {
        <V as Visit>::visit_frequency(&mut **self, node)
    }

    #[inline]
    fn visit_frequency_percentage(&mut self, node: &FrequencyPercentage) {
        <V as Visit>::visit_frequency_percentage(&mut **self, node)
    }

    #[inline]
    fn visit_function(&mut self, node: &Function) {
        <V as Visit>::visit_function(&mut **self, node)
    }

    #[inline]
    fn visit_function_name(&mut self, node: &FunctionName) {
        <V as Visit>::visit_function_name(&mut **self, node)
    }

    #[inline]
    fn visit_general_enclosed(&mut self, node: &GeneralEnclosed) {
        <V as Visit>::visit_general_enclosed(&mut **self, node)
    }

    #[inline]
    fn visit_hex_color(&mut self, node: &HexColor) {
        <V as Visit>::visit_hex_color(&mut **self, node)
    }

    #[inline]
    fn visit_hue(&mut self, node: &Hue) {
        <V as Visit>::visit_hue(&mut **self, node)
    }

    #[inline]
    fn visit_id_selector(&mut self, node: &IdSelector) {
        <V as Visit>::visit_id_selector(&mut **self, node)
    }

    #[inline]
    fn visit_ident(&mut self, node: &Ident) {
        <V as Visit>::visit_ident(&mut **self, node)
    }

    #[inline]
    fn visit_idents(&mut self, node: &[Ident]) {
        <V as Visit>::visit_idents(&mut **self, node)
    }

    #[inline]
    fn visit_import_conditions(&mut self, node: &ImportConditions) {
        <V as Visit>::visit_import_conditions(&mut **self, node)
    }

    #[inline]
    fn visit_import_href(&mut self, node: &ImportHref) {
        <V as Visit>::visit_import_href(&mut **self, node)
    }

    #[inline]
    fn visit_import_layer_name(&mut self, node: &ImportLayerName) {
        <V as Visit>::visit_import_layer_name(&mut **self, node)
    }

    #[inline]
    fn visit_import_prelude(&mut self, node: &ImportPrelude) {
        <V as Visit>::visit_import_prelude(&mut **self, node)
    }

    #[inline]
    fn visit_important_flag(&mut self, node: &ImportantFlag) {
        <V as Visit>::visit_important_flag(&mut **self, node)
    }

    #[inline]
    fn visit_integer(&mut self, node: &Integer) {
        <V as Visit>::visit_integer(&mut **self, node)
    }

    #[inline]
    fn visit_keyframe_block(&mut self, node: &KeyframeBlock) {
        <V as Visit>::visit_keyframe_block(&mut **self, node)
    }

    #[inline]
    fn visit_keyframe_selector(&mut self, node: &KeyframeSelector) {
        <V as Visit>::visit_keyframe_selector(&mut **self, node)
    }

    #[inline]
    fn visit_keyframe_selectors(&mut self, node: &[KeyframeSelector]) {
        <V as Visit>::visit_keyframe_selectors(&mut **self, node)
    }

    #[inline]
    fn visit_keyframes_name(&mut self, node: &KeyframesName) {
        <V as Visit>::visit_keyframes_name(&mut **self, node)
    }

    #[inline]
    fn visit_keyframes_pseudo_function(&mut self, node: &KeyframesPseudoFunction) {
        <V as Visit>::visit_keyframes_pseudo_function(&mut **self, node)
    }

    #[inline]
    fn visit_keyframes_pseudo_prefix(&mut self, node: &KeyframesPseudoPrefix) {
        <V as Visit>::visit_keyframes_pseudo_prefix(&mut **self, node)
    }

    #[inline]
    fn visit_layer_name(&mut self, node: &LayerName) {
        <V as Visit>::visit_layer_name(&mut **self, node)
    }

    #[inline]
    fn visit_layer_name_list(&mut self, node: &LayerNameList) {
        <V as Visit>::visit_layer_name_list(&mut **self, node)
    }

    #[inline]
    fn visit_layer_names(&mut self, node: &[LayerName]) {
        <V as Visit>::visit_layer_names(&mut **self, node)
    }

    #[inline]
    fn visit_layer_prelude(&mut self, node: &LayerPrelude) {
        <V as Visit>::visit_layer_prelude(&mut **self, node)
    }

    #[inline]
    fn visit_length(&mut self, node: &Length) {
        <V as Visit>::visit_length(&mut **self, node)
    }

    #[inline]
    fn visit_length_percentage(&mut self, node: &LengthPercentage) {
        <V as Visit>::visit_length_percentage(&mut **self, node)
    }

    #[inline]
    fn visit_list_of_component_values(&mut self, node: &ListOfComponentValues) {
        <V as Visit>::visit_list_of_component_values(&mut **self, node)
    }

    #[inline]
    fn visit_media_and(&mut self, node: &MediaAnd) {
        <V as Visit>::visit_media_and(&mut **self, node)
    }

    #[inline]
    fn visit_media_condition(&mut self, node: &MediaCondition) {
        <V as Visit>::visit_media_condition(&mut **self, node)
    }

    #[inline]
    fn visit_media_condition_all_type(&mut self, node: &MediaConditionAllType) {
        <V as Visit>::visit_media_condition_all_type(&mut **self, node)
    }

    #[inline]
    fn visit_media_condition_all_types(&mut self, node: &[MediaConditionAllType]) {
        <V as Visit>::visit_media_condition_all_types(&mut **self, node)
    }

    #[inline]
    fn visit_media_condition_type(&mut self, node: &MediaConditionType) {
        <V as Visit>::visit_media_condition_type(&mut **self, node)
    }

    #[inline]
    fn visit_media_condition_without_or(&mut self, node: &MediaConditionWithoutOr) {
        <V as Visit>::visit_media_condition_without_or(&mut **self, node)
    }

    #[inline]
    fn visit_media_condition_without_or_type(&mut self, node: &MediaConditionWithoutOrType) {
        <V as Visit>::visit_media_condition_without_or_type(&mut **self, node)
    }

    #[inline]
    fn visit_media_condition_without_or_types(&mut self, node: &[MediaConditionWithoutOrType]) {
        <V as Visit>::visit_media_condition_without_or_types(&mut **self, node)
    }

    #[inline]
    fn visit_media_feature(&mut self, node: &MediaFeature) {
        <V as Visit>::visit_media_feature(&mut **self, node)
    }

    #[inline]
    fn visit_media_feature_boolean(&mut self, node: &MediaFeatureBoolean) {
        <V as Visit>::visit_media_feature_boolean(&mut **self, node)
    }

    #[inline]
    fn visit_media_feature_name(&mut self, node: &MediaFeatureName) {
        <V as Visit>::visit_media_feature_name(&mut **self, node)
    }

    #[inline]
    fn visit_media_feature_plain(&mut self, node: &MediaFeaturePlain) {
        <V as Visit>::visit_media_feature_plain(&mut **self, node)
    }

    #[inline]
    fn visit_media_feature_range(&mut self, node: &MediaFeatureRange) {
        <V as Visit>::visit_media_feature_range(&mut **self, node)
    }

    #[inline]
    fn visit_media_feature_range_comparison(&mut self, node: &MediaFeatureRangeComparison) {
        <V as Visit>::visit_media_feature_range_comparison(&mut **self, node)
    }

    #[inline]
    fn visit_media_feature_range_interval(&mut self, node: &MediaFeatureRangeInterval) {
        <V as Visit>::visit_media_feature_range_interval(&mut **self, node)
    }

    #[inline]
    fn visit_media_feature_value(&mut self, node: &MediaFeatureValue) {
        <V as Visit>::visit_media_feature_value(&mut **self, node)
    }

    #[inline]
    fn visit_media_in_parens(&mut self, node: &MediaInParens) {
        <V as Visit>::visit_media_in_parens(&mut **self, node)
    }

    #[inline]
    fn visit_media_not(&mut self, node: &MediaNot) {
        <V as Visit>::visit_media_not(&mut **self, node)
    }

    #[inline]
    fn visit_media_or(&mut self, node: &MediaOr) {
        <V as Visit>::visit_media_or(&mut **self, node)
    }

    #[inline]
    fn visit_media_query(&mut self, node: &MediaQuery) {
        <V as Visit>::visit_media_query(&mut **self, node)
    }

    #[inline]
    fn visit_media_query_list(&mut self, node: &MediaQueryList) {
        <V as Visit>::visit_media_query_list(&mut **self, node)
    }

    #[inline]
    fn visit_media_querys(&mut self, node: &[MediaQuery]) {
        <V as Visit>::visit_media_querys(&mut **self, node)
    }

    #[inline]
    fn visit_media_type(&mut self, node: &MediaType) {
        <V as Visit>::visit_media_type(&mut **self, node)
    }

    #[inline]
    fn visit_named_namespace(&mut self, node: &NamedNamespace) {
        <V as Visit>::visit_named_namespace(&mut **self, node)
    }

    #[inline]
    fn visit_namespace(&mut self, node: &Namespace) {
        <V as Visit>::visit_namespace(&mut **self, node)
    }

    #[inline]
    fn visit_namespace_prefix(&mut self, node: &NamespacePrefix) {
        <V as Visit>::visit_namespace_prefix(&mut **self, node)
    }

    #[inline]
    fn visit_namespace_prelude(&mut self, node: &NamespacePrelude) {
        <V as Visit>::visit_namespace_prelude(&mut **self, node)
    }

    #[inline]
    fn visit_namespace_prelude_uri(&mut self, node: &NamespacePreludeUri) {
        <V as Visit>::visit_namespace_prelude_uri(&mut **self, node)
    }

    #[inline]
    fn visit_nesting_selector(&mut self, node: &NestingSelector) {
        <V as Visit>::visit_nesting_selector(&mut **self, node)
    }

    #[inline]
    fn visit_number(&mut self, node: &Number) {
        <V as Visit>::visit_number(&mut **self, node)
    }

    #[inline]
    fn visit_number_type(&mut self, node: &NumberType) {
        <V as Visit>::visit_number_type(&mut **self, node)
    }

    #[inline]
    fn visit_opt_at_rule_prelude(&mut self, node: &Option<Box<AtRulePrelude>>) {
        <V as Visit>::visit_opt_at_rule_prelude(&mut **self, node)
    }

    #[inline]
    fn visit_opt_atom(&mut self, node: &Option<swc_atoms::Atom>) {
        <V as Visit>::visit_opt_atom(&mut **self, node)
    }

    #[inline]
    fn visit_opt_attribute_selector_matcher(&mut self, node: &Option<AttributeSelectorMatcher>) {
        <V as Visit>::visit_opt_attribute_selector_matcher(&mut **self, node)
    }

    #[inline]
    fn visit_opt_attribute_selector_modifier(&mut self, node: &Option<AttributeSelectorModifier>) {
        <V as Visit>::visit_opt_attribute_selector_modifier(&mut **self, node)
    }

    #[inline]
    fn visit_opt_attribute_selector_value(&mut self, node: &Option<AttributeSelectorValue>) {
        <V as Visit>::visit_opt_attribute_selector_value(&mut **self, node)
    }

    #[inline]
    fn visit_opt_combinator(&mut self, node: &Option<Combinator>) {
        <V as Visit>::visit_opt_combinator(&mut **self, node)
    }

    #[inline]
    fn visit_opt_container_name(&mut self, node: &Option<ContainerName>) {
        <V as Visit>::visit_opt_container_name(&mut **self, node)
    }

    #[inline]
    fn visit_opt_forgiving_selector_list(&mut self, node: &Option<ForgivingSelectorList>) {
        <V as Visit>::visit_opt_forgiving_selector_list(&mut **self, node)
    }

    #[inline]
    fn visit_opt_function(&mut self, node: &Option<Box<Function>>) {
        <V as Visit>::visit_opt_function(&mut **self, node)
    }

    #[inline]
    fn visit_opt_ident(&mut self, node: &Option<Ident>) {
        <V as Visit>::visit_opt_ident(&mut **self, node)
    }

    #[inline]
    fn visit_opt_import_conditions(&mut self, node: &Option<Box<ImportConditions>>) {
        <V as Visit>::visit_opt_import_conditions(&mut **self, node)
    }

    #[inline]
    fn visit_opt_import_layer_name(&mut self, node: &Option<Box<ImportLayerName>>) {
        <V as Visit>::visit_opt_import_layer_name(&mut **self, node)
    }

    #[inline]
    fn visit_opt_important_flag(&mut self, node: &Option<ImportantFlag>) {
        <V as Visit>::visit_opt_important_flag(&mut **self, node)
    }

    #[inline]
    fn visit_opt_media_condition_type(&mut self, node: &Option<Box<MediaConditionType>>) {
        <V as Visit>::visit_opt_media_condition_type(&mut **self, node)
    }

    #[inline]
    fn visit_opt_media_query_list(&mut self, node: &Option<Box<MediaQueryList>>) {
        <V as Visit>::visit_opt_media_query_list(&mut **self, node)
    }

    #[inline]
    fn visit_opt_media_type(&mut self, node: &Option<MediaType>) {
        <V as Visit>::visit_opt_media_type(&mut **self, node)
    }

    #[inline]
    fn visit_opt_namespace(&mut self, node: &Option<Namespace>) {
        <V as Visit>::visit_opt_namespace(&mut **self, node)
    }

    #[inline]
    fn visit_opt_namespace_prefix(&mut self, node: &Option<NamespacePrefix>) {
        <V as Visit>::visit_opt_namespace_prefix(&mut **self, node)
    }

    #[inline]
    fn visit_opt_nesting_selector(&mut self, node: &Option<NestingSelector>) {
        <V as Visit>::visit_opt_nesting_selector(&mut **self, node)
    }

    #[inline]
    fn visit_opt_number(&mut self, node: &Option<Number>) {
        <V as Visit>::visit_opt_number(&mut **self, node)
    }

    #[inline]
    fn visit_opt_page_selector_pseudos(&mut self, node: &Option<Vec<PageSelectorPseudo>>) {
        <V as Visit>::visit_opt_page_selector_pseudos(&mut **self, node)
    }

    #[inline]
    fn visit_opt_page_selector_type(&mut self, node: &Option<PageSelectorType>) {
        <V as Visit>::visit_opt_page_selector_type(&mut **self, node)
    }

    #[inline]
    fn visit_opt_pseudo_class_selector_childrens(
        &mut self,
        node: &Option<Vec<PseudoClassSelectorChildren>>,
    ) {
        <V as Visit>::visit_opt_pseudo_class_selector_childrens(&mut **self, node)
    }

    #[inline]
    fn visit_opt_pseudo_element_selector_childrens(
        &mut self,
        node: &Option<Vec<PseudoElementSelectorChildren>>,
    ) {
        <V as Visit>::visit_opt_pseudo_element_selector_childrens(&mut **self, node)
    }

    #[inline]
    fn visit_opt_simple_block(&mut self, node: &Option<SimpleBlock>) {
        <V as Visit>::visit_opt_simple_block(&mut **self, node)
    }

    #[inline]
    fn visit_opt_type_selector(&mut self, node: &Option<Box<TypeSelector>>) {
        <V as Visit>::visit_opt_type_selector(&mut **self, node)
    }

    #[inline]
    fn visit_opt_url_modifiers(&mut self, node: &Option<Vec<UrlModifier>>) {
        <V as Visit>::visit_opt_url_modifiers(&mut **self, node)
    }

    #[inline]
    fn visit_opt_url_value(&mut self, node: &Option<Box<UrlValue>>) {
        <V as Visit>::visit_opt_url_value(&mut **self, node)
    }

    #[inline]
    fn visit_page_selector(&mut self, node: &PageSelector) {
        <V as Visit>::visit_page_selector(&mut **self, node)
    }

    #[inline]
    fn visit_page_selector_list(&mut self, node: &PageSelectorList) {
        <V as Visit>::visit_page_selector_list(&mut **self, node)
    }

    #[inline]
    fn visit_page_selector_pseudo(&mut self, node: &PageSelectorPseudo) {
        <V as Visit>::visit_page_selector_pseudo(&mut **self, node)
    }

    #[inline]
    fn visit_page_selector_pseudos(&mut self, node: &[PageSelectorPseudo]) {
        <V as Visit>::visit_page_selector_pseudos(&mut **self, node)
    }

    #[inline]
    fn visit_page_selector_type(&mut self, node: &PageSelectorType) {
        <V as Visit>::visit_page_selector_type(&mut **self, node)
    }

    #[inline]
    fn visit_page_selectors(&mut self, node: &[PageSelector]) {
        <V as Visit>::visit_page_selectors(&mut **self, node)
    }

    #[inline]
    fn visit_percentage(&mut self, node: &Percentage) {
        <V as Visit>::visit_percentage(&mut **self, node)
    }

    #[inline]
    fn visit_pseudo_class_selector(&mut self, node: &PseudoClassSelector) {
        <V as Visit>::visit_pseudo_class_selector(&mut **self, node)
    }

    #[inline]
    fn visit_pseudo_class_selector_children(&mut self, node: &PseudoClassSelectorChildren) {
        <V as Visit>::visit_pseudo_class_selector_children(&mut **self, node)
    }

    #[inline]
    fn visit_pseudo_class_selector_childrens(&mut self, node: &[PseudoClassSelectorChildren]) {
        <V as Visit>::visit_pseudo_class_selector_childrens(&mut **self, node)
    }

    #[inline]
    fn visit_pseudo_element_selector(&mut self, node: &PseudoElementSelector) {
        <V as Visit>::visit_pseudo_element_selector(&mut **self, node)
    }

    #[inline]
    fn visit_pseudo_element_selector_children(&mut self, node: &PseudoElementSelectorChildren) {
        <V as Visit>::visit_pseudo_element_selector_children(&mut **self, node)
    }

    #[inline]
    fn visit_pseudo_element_selector_childrens(&mut self, node: &[PseudoElementSelectorChildren]) {
        <V as Visit>::visit_pseudo_element_selector_childrens(&mut **self, node)
    }

    #[inline]
    fn visit_qualified_rule(&mut self, node: &QualifiedRule) {
        <V as Visit>::visit_qualified_rule(&mut **self, node)
    }

    #[inline]
    fn visit_qualified_rule_prelude(&mut self, node: &QualifiedRulePrelude) {
        <V as Visit>::visit_qualified_rule_prelude(&mut **self, node)
    }

    #[inline]
    fn visit_query_in_parens(&mut self, node: &QueryInParens) {
        <V as Visit>::visit_query_in_parens(&mut **self, node)
    }

    #[inline]
    fn visit_ratio(&mut self, node: &Ratio) {
        <V as Visit>::visit_ratio(&mut **self, node)
    }

    #[inline]
    fn visit_relative_selector(&mut self, node: &RelativeSelector) {
        <V as Visit>::visit_relative_selector(&mut **self, node)
    }

    #[inline]
    fn visit_relative_selector_list(&mut self, node: &RelativeSelectorList) {
        <V as Visit>::visit_relative_selector_list(&mut **self, node)
    }

    #[inline]
    fn visit_relative_selectors(&mut self, node: &[RelativeSelector]) {
        <V as Visit>::visit_relative_selectors(&mut **self, node)
    }

    #[inline]
    fn visit_resolution(&mut self, node: &Resolution) {
        <V as Visit>::visit_resolution(&mut **self, node)
    }

    #[inline]
    fn visit_rule(&mut self, node: &Rule) {
        <V as Visit>::visit_rule(&mut **self, node)
    }

    #[inline]
    fn visit_rules(&mut self, node: &[Rule]) {
        <V as Visit>::visit_rules(&mut **self, node)
    }

    #[inline]
    fn visit_scope_range(&mut self, node: &ScopeRange) {
        <V as Visit>::visit_scope_range(&mut **self, node)
    }

    #[inline]
    fn visit_selector_list(&mut self, node: &SelectorList) {
        <V as Visit>::visit_selector_list(&mut **self, node)
    }

    #[inline]
    fn visit_sequence_of_custom_idents(&mut self, node: &SequenceOfCustomIdents) {
        <V as Visit>::visit_sequence_of_custom_idents(&mut **self, node)
    }

    #[inline]
    fn visit_simple_block(&mut self, node: &SimpleBlock) {
        <V as Visit>::visit_simple_block(&mut **self, node)
    }

    #[inline]
    fn visit_size_feature(&mut self, node: &SizeFeature) {
        <V as Visit>::visit_size_feature(&mut **self, node)
    }

    #[inline]
    fn visit_size_feature_boolean(&mut self, node: &SizeFeatureBoolean) {
        <V as Visit>::visit_size_feature_boolean(&mut **self, node)
    }

    #[inline]
    fn visit_size_feature_name(&mut self, node: &SizeFeatureName) {
        <V as Visit>::visit_size_feature_name(&mut **self, node)
    }

    #[inline]
    fn visit_size_feature_plain(&mut self, node: &SizeFeaturePlain) {
        <V as Visit>::visit_size_feature_plain(&mut **self, node)
    }

    #[inline]
    fn visit_size_feature_range(&mut self, node: &SizeFeatureRange) {
        <V as Visit>::visit_size_feature_range(&mut **self, node)
    }

    #[inline]
    fn visit_size_feature_range_comparison(&mut self, node: &SizeFeatureRangeComparison) {
        <V as Visit>::visit_size_feature_range_comparison(&mut **self, node)
    }

    #[inline]
    fn visit_size_feature_range_interval(&mut self, node: &SizeFeatureRangeInterval) {
        <V as Visit>::visit_size_feature_range_interval(&mut **self, node)
    }

    #[inline]
    fn visit_size_feature_value(&mut self, node: &SizeFeatureValue) {
        <V as Visit>::visit_size_feature_value(&mut **self, node)
    }

    #[inline]
    fn visit_span(&mut self, node: &swc_common::Span) {
        <V as Visit>::visit_span(&mut **self, node)
    }

    #[inline]
    fn visit_str(&mut self, node: &Str) {
        <V as Visit>::visit_str(&mut **self, node)
    }

    #[inline]
    fn visit_style_block(&mut self, node: &StyleBlock) {
        <V as Visit>::visit_style_block(&mut **self, node)
    }

    #[inline]
    fn visit_stylesheet(&mut self, node: &Stylesheet) {
        <V as Visit>::visit_stylesheet(&mut **self, node)
    }

    #[inline]
    fn visit_subclass_selector(&mut self, node: &SubclassSelector) {
        <V as Visit>::visit_subclass_selector(&mut **self, node)
    }

    #[inline]
    fn visit_subclass_selectors(&mut self, node: &[SubclassSelector]) {
        <V as Visit>::visit_subclass_selectors(&mut **self, node)
    }

    #[inline]
    fn visit_supports_and(&mut self, node: &SupportsAnd) {
        <V as Visit>::visit_supports_and(&mut **self, node)
    }

    #[inline]
    fn visit_supports_condition(&mut self, node: &SupportsCondition) {
        <V as Visit>::visit_supports_condition(&mut **self, node)
    }

    #[inline]
    fn visit_supports_condition_type(&mut self, node: &SupportsConditionType) {
        <V as Visit>::visit_supports_condition_type(&mut **self, node)
    }

    #[inline]
    fn visit_supports_condition_types(&mut self, node: &[SupportsConditionType]) {
        <V as Visit>::visit_supports_condition_types(&mut **self, node)
    }

    #[inline]
    fn visit_supports_feature(&mut self, node: &SupportsFeature) {
        <V as Visit>::visit_supports_feature(&mut **self, node)
    }

    #[inline]
    fn visit_supports_in_parens(&mut self, node: &SupportsInParens) {
        <V as Visit>::visit_supports_in_parens(&mut **self, node)
    }

    #[inline]
    fn visit_supports_not(&mut self, node: &SupportsNot) {
        <V as Visit>::visit_supports_not(&mut **self, node)
    }

    #[inline]
    fn visit_supports_or(&mut self, node: &SupportsOr) {
        <V as Visit>::visit_supports_or(&mut **self, node)
    }

    #[inline]
    fn visit_tag_name_selector(&mut self, node: &TagNameSelector) {
        <V as Visit>::visit_tag_name_selector(&mut **self, node)
    }

    #[inline]
    fn visit_time(&mut self, node: &Time) {
        <V as Visit>::visit_time(&mut **self, node)
    }

    #[inline]
    fn visit_time_percentage(&mut self, node: &TimePercentage) {
        <V as Visit>::visit_time_percentage(&mut **self, node)
    }

    #[inline]
    fn visit_token(&mut self, node: &Token) {
        <V as Visit>::visit_token(&mut **self, node)
    }

    #[inline]
    fn visit_token_and_span(&mut self, node: &TokenAndSpan) {
        <V as Visit>::visit_token_and_span(&mut **self, node)
    }

    #[inline]
    fn visit_type_selector(&mut self, node: &TypeSelector) {
        <V as Visit>::visit_type_selector(&mut **self, node)
    }

    #[inline]
    fn visit_unicode_range(&mut self, node: &UnicodeRange) {
        <V as Visit>::visit_unicode_range(&mut **self, node)
    }

    #[inline]
    fn visit_universal_selector(&mut self, node: &UniversalSelector) {
        <V as Visit>::visit_universal_selector(&mut **self, node)
    }

    #[inline]
    fn visit_unknown_dimension(&mut self, node: &UnknownDimension) {
        <V as Visit>::visit_unknown_dimension(&mut **self, node)
    }

    #[inline]
    fn visit_url(&mut self, node: &Url) {
        <V as Visit>::visit_url(&mut **self, node)
    }

    #[inline]
    fn visit_url_key_value(&mut self, node: &UrlKeyValue) {
        <V as Visit>::visit_url_key_value(&mut **self, node)
    }

    #[inline]
    fn visit_url_modifier(&mut self, node: &UrlModifier) {
        <V as Visit>::visit_url_modifier(&mut **self, node)
    }

    #[inline]
    fn visit_url_modifiers(&mut self, node: &[UrlModifier]) {
        <V as Visit>::visit_url_modifiers(&mut **self, node)
    }

    #[inline]
    fn visit_url_value(&mut self, node: &UrlValue) {
        <V as Visit>::visit_url_value(&mut **self, node)
    }

    #[inline]
    fn visit_url_value_raw(&mut self, node: &UrlValueRaw) {
        <V as Visit>::visit_url_value_raw(&mut **self, node)
    }

    #[inline]
    fn visit_wq_name(&mut self, node: &WqName) {
        <V as Visit>::visit_wq_name(&mut **self, node)
    }
}
impl<A, B> Visit for ::swc_visit::Either<A, B>
where
    A: Visit,
    B: Visit,
{
    #[inline]
    fn visit_absolute_color_base(&mut self, node: &AbsoluteColorBase) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_absolute_color_base(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_absolute_color_base(visitor, node),
        }
    }

    #[inline]
    fn visit_alpha_value(&mut self, node: &AlphaValue) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_alpha_value(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_alpha_value(visitor, node),
        }
    }

    #[inline]
    fn visit_an_plus_b(&mut self, node: &AnPlusB) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_an_plus_b(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_an_plus_b(visitor, node),
        }
    }

    #[inline]
    fn visit_an_plus_b_notation(&mut self, node: &AnPlusBNotation) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_an_plus_b_notation(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_an_plus_b_notation(visitor, node),
        }
    }

    #[inline]
    fn visit_angle(&mut self, node: &Angle) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_angle(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_angle(visitor, node),
        }
    }

    #[inline]
    fn visit_angle_percentage(&mut self, node: &AnglePercentage) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_angle_percentage(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_angle_percentage(visitor, node),
        }
    }

    #[inline]
    fn visit_any_namespace(&mut self, node: &AnyNamespace) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_any_namespace(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_any_namespace(visitor, node),
        }
    }

    #[inline]
    fn visit_at_rule(&mut self, node: &AtRule) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_at_rule(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_at_rule(visitor, node),
        }
    }

    #[inline]
    fn visit_at_rule_name(&mut self, node: &AtRuleName) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_at_rule_name(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_at_rule_name(visitor, node),
        }
    }

    #[inline]
    fn visit_at_rule_prelude(&mut self, node: &AtRulePrelude) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_at_rule_prelude(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_at_rule_prelude(visitor, node),
        }
    }

    #[inline]
    fn visit_atom(&mut self, node: &swc_atoms::Atom) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_atom(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_atom(visitor, node),
        }
    }

    #[inline]
    fn visit_attribute_selector(&mut self, node: &AttributeSelector) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_attribute_selector(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_attribute_selector(visitor, node),
        }
    }

    #[inline]
    fn visit_attribute_selector_matcher(&mut self, node: &AttributeSelectorMatcher) {
        match self {
            swc_visit::Either::Left(visitor) => {
                Visit::visit_attribute_selector_matcher(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                Visit::visit_attribute_selector_matcher(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_attribute_selector_matcher_value(&mut self, node: &AttributeSelectorMatcherValue) {
        match self {
            swc_visit::Either::Left(visitor) => {
                Visit::visit_attribute_selector_matcher_value(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                Visit::visit_attribute_selector_matcher_value(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_attribute_selector_modifier(&mut self, node: &AttributeSelectorModifier) {
        match self {
            swc_visit::Either::Left(visitor) => {
                Visit::visit_attribute_selector_modifier(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                Visit::visit_attribute_selector_modifier(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_attribute_selector_value(&mut self, node: &AttributeSelectorValue) {
        match self {
            swc_visit::Either::Left(visitor) => {
                Visit::visit_attribute_selector_value(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                Visit::visit_attribute_selector_value(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_bin_op(&mut self, node: &BinOp) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_bin_op(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_bin_op(visitor, node),
        }
    }

    #[inline]
    fn visit_calc_operator(&mut self, node: &CalcOperator) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_calc_operator(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_calc_operator(visitor, node),
        }
    }

    #[inline]
    fn visit_calc_operator_type(&mut self, node: &CalcOperatorType) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_calc_operator_type(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_calc_operator_type(visitor, node),
        }
    }

    #[inline]
    fn visit_calc_product(&mut self, node: &CalcProduct) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_calc_product(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_calc_product(visitor, node),
        }
    }

    #[inline]
    fn visit_calc_product_or_operator(&mut self, node: &CalcProductOrOperator) {
        match self {
            swc_visit::Either::Left(visitor) => {
                Visit::visit_calc_product_or_operator(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                Visit::visit_calc_product_or_operator(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_calc_product_or_operators(&mut self, node: &[CalcProductOrOperator]) {
        match self {
            swc_visit::Either::Left(visitor) => {
                Visit::visit_calc_product_or_operators(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                Visit::visit_calc_product_or_operators(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_calc_sum(&mut self, node: &CalcSum) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_calc_sum(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_calc_sum(visitor, node),
        }
    }

    #[inline]
    fn visit_calc_value(&mut self, node: &CalcValue) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_calc_value(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_calc_value(visitor, node),
        }
    }

    #[inline]
    fn visit_calc_value_or_operator(&mut self, node: &CalcValueOrOperator) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_calc_value_or_operator(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_calc_value_or_operator(visitor, node),
        }
    }

    #[inline]
    fn visit_calc_value_or_operators(&mut self, node: &[CalcValueOrOperator]) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_calc_value_or_operators(visitor, node),
            swc_visit::Either::Right(visitor) => {
                Visit::visit_calc_value_or_operators(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_class_selector(&mut self, node: &ClassSelector) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_class_selector(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_class_selector(visitor, node),
        }
    }

    #[inline]
    fn visit_cmyk_component(&mut self, node: &CmykComponent) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_cmyk_component(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_cmyk_component(visitor, node),
        }
    }

    #[inline]
    fn visit_color(&mut self, node: &Color) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_color(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_color(visitor, node),
        }
    }

    #[inline]
    fn visit_color_profile_name(&mut self, node: &ColorProfileName) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_color_profile_name(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_color_profile_name(visitor, node),
        }
    }

    #[inline]
    fn visit_combinator(&mut self, node: &Combinator) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_combinator(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_combinator(visitor, node),
        }
    }

    #[inline]
    fn visit_combinator_value(&mut self, node: &CombinatorValue) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_combinator_value(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_combinator_value(visitor, node),
        }
    }

    #[inline]
    fn visit_complex_selector(&mut self, node: &ComplexSelector) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_complex_selector(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_complex_selector(visitor, node),
        }
    }

    #[inline]
    fn visit_complex_selector_children(&mut self, node: &ComplexSelectorChildren) {
        match self {
            swc_visit::Either::Left(visitor) => {
                Visit::visit_complex_selector_children(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                Visit::visit_complex_selector_children(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_complex_selector_childrens(&mut self, node: &[ComplexSelectorChildren]) {
        match self {
            swc_visit::Either::Left(visitor) => {
                Visit::visit_complex_selector_childrens(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                Visit::visit_complex_selector_childrens(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_complex_selectors(&mut self, node: &[ComplexSelector]) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_complex_selectors(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_complex_selectors(visitor, node),
        }
    }

    #[inline]
    fn visit_component_value(&mut self, node: &ComponentValue) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_component_value(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_component_value(visitor, node),
        }
    }

    #[inline]
    fn visit_component_values(&mut self, node: &[ComponentValue]) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_component_values(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_component_values(visitor, node),
        }
    }

    #[inline]
    fn visit_compound_selector(&mut self, node: &CompoundSelector) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_compound_selector(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_compound_selector(visitor, node),
        }
    }

    #[inline]
    fn visit_compound_selector_list(&mut self, node: &CompoundSelectorList) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_compound_selector_list(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_compound_selector_list(visitor, node),
        }
    }

    #[inline]
    fn visit_compound_selectors(&mut self, node: &[CompoundSelector]) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_compound_selectors(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_compound_selectors(visitor, node),
        }
    }

    #[inline]
    fn visit_container_condition(&mut self, node: &ContainerCondition) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_container_condition(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_container_condition(visitor, node),
        }
    }

    #[inline]
    fn visit_container_name(&mut self, node: &ContainerName) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_container_name(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_container_name(visitor, node),
        }
    }

    #[inline]
    fn visit_container_query(&mut self, node: &ContainerQuery) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_container_query(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_container_query(visitor, node),
        }
    }

    #[inline]
    fn visit_container_query_and(&mut self, node: &ContainerQueryAnd) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_container_query_and(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_container_query_and(visitor, node),
        }
    }

    #[inline]
    fn visit_container_query_not(&mut self, node: &ContainerQueryNot) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_container_query_not(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_container_query_not(visitor, node),
        }
    }

    #[inline]
    fn visit_container_query_or(&mut self, node: &ContainerQueryOr) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_container_query_or(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_container_query_or(visitor, node),
        }
    }

    #[inline]
    fn visit_container_query_type(&mut self, node: &ContainerQueryType) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_container_query_type(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_container_query_type(visitor, node),
        }
    }

    #[inline]
    fn visit_container_query_types(&mut self, node: &[ContainerQueryType]) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_container_query_types(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_container_query_types(visitor, node),
        }
    }

    #[inline]
    fn visit_custom_highlight_name(&mut self, node: &CustomHighlightName) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_custom_highlight_name(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_custom_highlight_name(visitor, node),
        }
    }

    #[inline]
    fn visit_custom_ident(&mut self, node: &CustomIdent) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_custom_ident(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_custom_ident(visitor, node),
        }
    }

    #[inline]
    fn visit_custom_idents(&mut self, node: &[CustomIdent]) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_custom_idents(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_custom_idents(visitor, node),
        }
    }

    #[inline]
    fn visit_custom_media_query(&mut self, node: &CustomMediaQuery) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_custom_media_query(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_custom_media_query(visitor, node),
        }
    }

    #[inline]
    fn visit_custom_media_query_media_type(&mut self, node: &CustomMediaQueryMediaType) {
        match self {
            swc_visit::Either::Left(visitor) => {
                Visit::visit_custom_media_query_media_type(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                Visit::visit_custom_media_query_media_type(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_custom_property_name(&mut self, node: &CustomPropertyName) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_custom_property_name(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_custom_property_name(visitor, node),
        }
    }

    #[inline]
    fn visit_dashed_ident(&mut self, node: &DashedIdent) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_dashed_ident(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_dashed_ident(visitor, node),
        }
    }

    #[inline]
    fn visit_declaration(&mut self, node: &Declaration) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_declaration(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_declaration(visitor, node),
        }
    }

    #[inline]
    fn visit_declaration_name(&mut self, node: &DeclarationName) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_declaration_name(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_declaration_name(visitor, node),
        }
    }

    #[inline]
    fn visit_declaration_or_at_rule(&mut self, node: &DeclarationOrAtRule) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_declaration_or_at_rule(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_declaration_or_at_rule(visitor, node),
        }
    }

    #[inline]
    fn visit_delimiter(&mut self, node: &Delimiter) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_delimiter(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_delimiter(visitor, node),
        }
    }

    #[inline]
    fn visit_delimiter_value(&mut self, node: &DelimiterValue) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_delimiter_value(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_delimiter_value(visitor, node),
        }
    }

    #[inline]
    fn visit_dimension(&mut self, node: &Dimension) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_dimension(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_dimension(visitor, node),
        }
    }

    #[inline]
    fn visit_dimension_token(&mut self, node: &DimensionToken) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_dimension_token(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_dimension_token(visitor, node),
        }
    }

    #[inline]
    fn visit_document_prelude(&mut self, node: &DocumentPrelude) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_document_prelude(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_document_prelude(visitor, node),
        }
    }

    #[inline]
    fn visit_document_prelude_matching_function(&mut self, node: &DocumentPreludeMatchingFunction) {
        match self {
            swc_visit::Either::Left(visitor) => {
                Visit::visit_document_prelude_matching_function(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                Visit::visit_document_prelude_matching_function(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_document_prelude_matching_functions(
        &mut self,
        node: &[DocumentPreludeMatchingFunction],
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                Visit::visit_document_prelude_matching_functions(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                Visit::visit_document_prelude_matching_functions(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_extension_name(&mut self, node: &ExtensionName) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_extension_name(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_extension_name(visitor, node),
        }
    }

    #[inline]
    fn visit_family_name(&mut self, node: &FamilyName) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_family_name(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_family_name(visitor, node),
        }
    }

    #[inline]
    fn visit_family_names(&mut self, node: &[FamilyName]) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_family_names(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_family_names(visitor, node),
        }
    }

    #[inline]
    fn visit_flex(&mut self, node: &Flex) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_flex(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_flex(visitor, node),
        }
    }

    #[inline]
    fn visit_font_feature_values_prelude(&mut self, node: &FontFeatureValuesPrelude) {
        match self {
            swc_visit::Either::Left(visitor) => {
                Visit::visit_font_feature_values_prelude(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                Visit::visit_font_feature_values_prelude(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_forgiving_complex_selector(&mut self, node: &ForgivingComplexSelector) {
        match self {
            swc_visit::Either::Left(visitor) => {
                Visit::visit_forgiving_complex_selector(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                Visit::visit_forgiving_complex_selector(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_forgiving_complex_selectors(&mut self, node: &[ForgivingComplexSelector]) {
        match self {
            swc_visit::Either::Left(visitor) => {
                Visit::visit_forgiving_complex_selectors(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                Visit::visit_forgiving_complex_selectors(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_forgiving_relative_selector(&mut self, node: &ForgivingRelativeSelector) {
        match self {
            swc_visit::Either::Left(visitor) => {
                Visit::visit_forgiving_relative_selector(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                Visit::visit_forgiving_relative_selector(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_forgiving_relative_selector_list(&mut self, node: &ForgivingRelativeSelectorList) {
        match self {
            swc_visit::Either::Left(visitor) => {
                Visit::visit_forgiving_relative_selector_list(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                Visit::visit_forgiving_relative_selector_list(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_forgiving_relative_selectors(&mut self, node: &[ForgivingRelativeSelector]) {
        match self {
            swc_visit::Either::Left(visitor) => {
                Visit::visit_forgiving_relative_selectors(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                Visit::visit_forgiving_relative_selectors(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_forgiving_selector_list(&mut self, node: &ForgivingSelectorList) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_forgiving_selector_list(visitor, node),
            swc_visit::Either::Right(visitor) => {
                Visit::visit_forgiving_selector_list(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_frequency(&mut self, node: &Frequency) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_frequency(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_frequency(visitor, node),
        }
    }

    #[inline]
    fn visit_frequency_percentage(&mut self, node: &FrequencyPercentage) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_frequency_percentage(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_frequency_percentage(visitor, node),
        }
    }

    #[inline]
    fn visit_function(&mut self, node: &Function) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_function(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_function(visitor, node),
        }
    }

    #[inline]
    fn visit_function_name(&mut self, node: &FunctionName) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_function_name(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_function_name(visitor, node),
        }
    }

    #[inline]
    fn visit_general_enclosed(&mut self, node: &GeneralEnclosed) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_general_enclosed(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_general_enclosed(visitor, node),
        }
    }

    #[inline]
    fn visit_hex_color(&mut self, node: &HexColor) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_hex_color(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_hex_color(visitor, node),
        }
    }

    #[inline]
    fn visit_hue(&mut self, node: &Hue) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_hue(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_hue(visitor, node),
        }
    }

    #[inline]
    fn visit_id_selector(&mut self, node: &IdSelector) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_id_selector(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_id_selector(visitor, node),
        }
    }

    #[inline]
    fn visit_ident(&mut self, node: &Ident) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_ident(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_ident(visitor, node),
        }
    }

    #[inline]
    fn visit_idents(&mut self, node: &[Ident]) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_idents(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_idents(visitor, node),
        }
    }

    #[inline]
    fn visit_import_conditions(&mut self, node: &ImportConditions) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_import_conditions(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_import_conditions(visitor, node),
        }
    }

    #[inline]
    fn visit_import_href(&mut self, node: &ImportHref) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_import_href(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_import_href(visitor, node),
        }
    }

    #[inline]
    fn visit_import_layer_name(&mut self, node: &ImportLayerName) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_import_layer_name(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_import_layer_name(visitor, node),
        }
    }

    #[inline]
    fn visit_import_prelude(&mut self, node: &ImportPrelude) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_import_prelude(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_import_prelude(visitor, node),
        }
    }

    #[inline]
    fn visit_important_flag(&mut self, node: &ImportantFlag) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_important_flag(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_important_flag(visitor, node),
        }
    }

    #[inline]
    fn visit_integer(&mut self, node: &Integer) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_integer(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_integer(visitor, node),
        }
    }

    #[inline]
    fn visit_keyframe_block(&mut self, node: &KeyframeBlock) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_keyframe_block(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_keyframe_block(visitor, node),
        }
    }

    #[inline]
    fn visit_keyframe_selector(&mut self, node: &KeyframeSelector) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_keyframe_selector(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_keyframe_selector(visitor, node),
        }
    }

    #[inline]
    fn visit_keyframe_selectors(&mut self, node: &[KeyframeSelector]) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_keyframe_selectors(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_keyframe_selectors(visitor, node),
        }
    }

    #[inline]
    fn visit_keyframes_name(&mut self, node: &KeyframesName) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_keyframes_name(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_keyframes_name(visitor, node),
        }
    }

    #[inline]
    fn visit_keyframes_pseudo_function(&mut self, node: &KeyframesPseudoFunction) {
        match self {
            swc_visit::Either::Left(visitor) => {
                Visit::visit_keyframes_pseudo_function(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                Visit::visit_keyframes_pseudo_function(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_keyframes_pseudo_prefix(&mut self, node: &KeyframesPseudoPrefix) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_keyframes_pseudo_prefix(visitor, node),
            swc_visit::Either::Right(visitor) => {
                Visit::visit_keyframes_pseudo_prefix(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_layer_name(&mut self, node: &LayerName) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_layer_name(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_layer_name(visitor, node),
        }
    }

    #[inline]
    fn visit_layer_name_list(&mut self, node: &LayerNameList) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_layer_name_list(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_layer_name_list(visitor, node),
        }
    }

    #[inline]
    fn visit_layer_names(&mut self, node: &[LayerName]) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_layer_names(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_layer_names(visitor, node),
        }
    }

    #[inline]
    fn visit_layer_prelude(&mut self, node: &LayerPrelude) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_layer_prelude(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_layer_prelude(visitor, node),
        }
    }

    #[inline]
    fn visit_length(&mut self, node: &Length) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_length(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_length(visitor, node),
        }
    }

    #[inline]
    fn visit_length_percentage(&mut self, node: &LengthPercentage) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_length_percentage(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_length_percentage(visitor, node),
        }
    }

    #[inline]
    fn visit_list_of_component_values(&mut self, node: &ListOfComponentValues) {
        match self {
            swc_visit::Either::Left(visitor) => {
                Visit::visit_list_of_component_values(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                Visit::visit_list_of_component_values(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_media_and(&mut self, node: &MediaAnd) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_media_and(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_media_and(visitor, node),
        }
    }

    #[inline]
    fn visit_media_condition(&mut self, node: &MediaCondition) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_media_condition(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_media_condition(visitor, node),
        }
    }

    #[inline]
    fn visit_media_condition_all_type(&mut self, node: &MediaConditionAllType) {
        match self {
            swc_visit::Either::Left(visitor) => {
                Visit::visit_media_condition_all_type(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                Visit::visit_media_condition_all_type(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_media_condition_all_types(&mut self, node: &[MediaConditionAllType]) {
        match self {
            swc_visit::Either::Left(visitor) => {
                Visit::visit_media_condition_all_types(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                Visit::visit_media_condition_all_types(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_media_condition_type(&mut self, node: &MediaConditionType) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_media_condition_type(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_media_condition_type(visitor, node),
        }
    }

    #[inline]
    fn visit_media_condition_without_or(&mut self, node: &MediaConditionWithoutOr) {
        match self {
            swc_visit::Either::Left(visitor) => {
                Visit::visit_media_condition_without_or(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                Visit::visit_media_condition_without_or(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_media_condition_without_or_type(&mut self, node: &MediaConditionWithoutOrType) {
        match self {
            swc_visit::Either::Left(visitor) => {
                Visit::visit_media_condition_without_or_type(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                Visit::visit_media_condition_without_or_type(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_media_condition_without_or_types(&mut self, node: &[MediaConditionWithoutOrType]) {
        match self {
            swc_visit::Either::Left(visitor) => {
                Visit::visit_media_condition_without_or_types(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                Visit::visit_media_condition_without_or_types(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_media_feature(&mut self, node: &MediaFeature) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_media_feature(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_media_feature(visitor, node),
        }
    }

    #[inline]
    fn visit_media_feature_boolean(&mut self, node: &MediaFeatureBoolean) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_media_feature_boolean(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_media_feature_boolean(visitor, node),
        }
    }

    #[inline]
    fn visit_media_feature_name(&mut self, node: &MediaFeatureName) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_media_feature_name(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_media_feature_name(visitor, node),
        }
    }

    #[inline]
    fn visit_media_feature_plain(&mut self, node: &MediaFeaturePlain) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_media_feature_plain(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_media_feature_plain(visitor, node),
        }
    }

    #[inline]
    fn visit_media_feature_range(&mut self, node: &MediaFeatureRange) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_media_feature_range(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_media_feature_range(visitor, node),
        }
    }

    #[inline]
    fn visit_media_feature_range_comparison(&mut self, node: &MediaFeatureRangeComparison) {
        match self {
            swc_visit::Either::Left(visitor) => {
                Visit::visit_media_feature_range_comparison(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                Visit::visit_media_feature_range_comparison(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_media_feature_range_interval(&mut self, node: &MediaFeatureRangeInterval) {
        match self {
            swc_visit::Either::Left(visitor) => {
                Visit::visit_media_feature_range_interval(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                Visit::visit_media_feature_range_interval(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_media_feature_value(&mut self, node: &MediaFeatureValue) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_media_feature_value(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_media_feature_value(visitor, node),
        }
    }

    #[inline]
    fn visit_media_in_parens(&mut self, node: &MediaInParens) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_media_in_parens(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_media_in_parens(visitor, node),
        }
    }

    #[inline]
    fn visit_media_not(&mut self, node: &MediaNot) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_media_not(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_media_not(visitor, node),
        }
    }

    #[inline]
    fn visit_media_or(&mut self, node: &MediaOr) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_media_or(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_media_or(visitor, node),
        }
    }

    #[inline]
    fn visit_media_query(&mut self, node: &MediaQuery) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_media_query(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_media_query(visitor, node),
        }
    }

    #[inline]
    fn visit_media_query_list(&mut self, node: &MediaQueryList) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_media_query_list(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_media_query_list(visitor, node),
        }
    }

    #[inline]
    fn visit_media_querys(&mut self, node: &[MediaQuery]) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_media_querys(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_media_querys(visitor, node),
        }
    }

    #[inline]
    fn visit_media_type(&mut self, node: &MediaType) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_media_type(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_media_type(visitor, node),
        }
    }

    #[inline]
    fn visit_named_namespace(&mut self, node: &NamedNamespace) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_named_namespace(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_named_namespace(visitor, node),
        }
    }

    #[inline]
    fn visit_namespace(&mut self, node: &Namespace) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_namespace(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_namespace(visitor, node),
        }
    }

    #[inline]
    fn visit_namespace_prefix(&mut self, node: &NamespacePrefix) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_namespace_prefix(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_namespace_prefix(visitor, node),
        }
    }

    #[inline]
    fn visit_namespace_prelude(&mut self, node: &NamespacePrelude) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_namespace_prelude(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_namespace_prelude(visitor, node),
        }
    }

    #[inline]
    fn visit_namespace_prelude_uri(&mut self, node: &NamespacePreludeUri) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_namespace_prelude_uri(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_namespace_prelude_uri(visitor, node),
        }
    }

    #[inline]
    fn visit_nesting_selector(&mut self, node: &NestingSelector) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_nesting_selector(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_nesting_selector(visitor, node),
        }
    }

    #[inline]
    fn visit_number(&mut self, node: &Number) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_number(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_number(visitor, node),
        }
    }

    #[inline]
    fn visit_number_type(&mut self, node: &NumberType) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_number_type(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_number_type(visitor, node),
        }
    }

    #[inline]
    fn visit_opt_at_rule_prelude(&mut self, node: &Option<Box<AtRulePrelude>>) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_opt_at_rule_prelude(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_opt_at_rule_prelude(visitor, node),
        }
    }

    #[inline]
    fn visit_opt_atom(&mut self, node: &Option<swc_atoms::Atom>) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_opt_atom(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_opt_atom(visitor, node),
        }
    }

    #[inline]
    fn visit_opt_attribute_selector_matcher(&mut self, node: &Option<AttributeSelectorMatcher>) {
        match self {
            swc_visit::Either::Left(visitor) => {
                Visit::visit_opt_attribute_selector_matcher(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                Visit::visit_opt_attribute_selector_matcher(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_opt_attribute_selector_modifier(&mut self, node: &Option<AttributeSelectorModifier>) {
        match self {
            swc_visit::Either::Left(visitor) => {
                Visit::visit_opt_attribute_selector_modifier(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                Visit::visit_opt_attribute_selector_modifier(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_opt_attribute_selector_value(&mut self, node: &Option<AttributeSelectorValue>) {
        match self {
            swc_visit::Either::Left(visitor) => {
                Visit::visit_opt_attribute_selector_value(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                Visit::visit_opt_attribute_selector_value(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_opt_combinator(&mut self, node: &Option<Combinator>) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_opt_combinator(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_opt_combinator(visitor, node),
        }
    }

    #[inline]
    fn visit_opt_container_name(&mut self, node: &Option<ContainerName>) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_opt_container_name(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_opt_container_name(visitor, node),
        }
    }

    #[inline]
    fn visit_opt_forgiving_selector_list(&mut self, node: &Option<ForgivingSelectorList>) {
        match self {
            swc_visit::Either::Left(visitor) => {
                Visit::visit_opt_forgiving_selector_list(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                Visit::visit_opt_forgiving_selector_list(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_opt_function(&mut self, node: &Option<Box<Function>>) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_opt_function(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_opt_function(visitor, node),
        }
    }

    #[inline]
    fn visit_opt_ident(&mut self, node: &Option<Ident>) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_opt_ident(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_opt_ident(visitor, node),
        }
    }

    #[inline]
    fn visit_opt_import_conditions(&mut self, node: &Option<Box<ImportConditions>>) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_opt_import_conditions(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_opt_import_conditions(visitor, node),
        }
    }

    #[inline]
    fn visit_opt_import_layer_name(&mut self, node: &Option<Box<ImportLayerName>>) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_opt_import_layer_name(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_opt_import_layer_name(visitor, node),
        }
    }

    #[inline]
    fn visit_opt_important_flag(&mut self, node: &Option<ImportantFlag>) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_opt_important_flag(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_opt_important_flag(visitor, node),
        }
    }

    #[inline]
    fn visit_opt_media_condition_type(&mut self, node: &Option<Box<MediaConditionType>>) {
        match self {
            swc_visit::Either::Left(visitor) => {
                Visit::visit_opt_media_condition_type(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                Visit::visit_opt_media_condition_type(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_opt_media_query_list(&mut self, node: &Option<Box<MediaQueryList>>) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_opt_media_query_list(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_opt_media_query_list(visitor, node),
        }
    }

    #[inline]
    fn visit_opt_media_type(&mut self, node: &Option<MediaType>) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_opt_media_type(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_opt_media_type(visitor, node),
        }
    }

    #[inline]
    fn visit_opt_namespace(&mut self, node: &Option<Namespace>) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_opt_namespace(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_opt_namespace(visitor, node),
        }
    }

    #[inline]
    fn visit_opt_namespace_prefix(&mut self, node: &Option<NamespacePrefix>) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_opt_namespace_prefix(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_opt_namespace_prefix(visitor, node),
        }
    }

    #[inline]
    fn visit_opt_nesting_selector(&mut self, node: &Option<NestingSelector>) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_opt_nesting_selector(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_opt_nesting_selector(visitor, node),
        }
    }

    #[inline]
    fn visit_opt_number(&mut self, node: &Option<Number>) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_opt_number(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_opt_number(visitor, node),
        }
    }

    #[inline]
    fn visit_opt_page_selector_pseudos(&mut self, node: &Option<Vec<PageSelectorPseudo>>) {
        match self {
            swc_visit::Either::Left(visitor) => {
                Visit::visit_opt_page_selector_pseudos(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                Visit::visit_opt_page_selector_pseudos(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_opt_page_selector_type(&mut self, node: &Option<PageSelectorType>) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_opt_page_selector_type(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_opt_page_selector_type(visitor, node),
        }
    }

    #[inline]
    fn visit_opt_pseudo_class_selector_childrens(
        &mut self,
        node: &Option<Vec<PseudoClassSelectorChildren>>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                Visit::visit_opt_pseudo_class_selector_childrens(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                Visit::visit_opt_pseudo_class_selector_childrens(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_opt_pseudo_element_selector_childrens(
        &mut self,
        node: &Option<Vec<PseudoElementSelectorChildren>>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                Visit::visit_opt_pseudo_element_selector_childrens(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                Visit::visit_opt_pseudo_element_selector_childrens(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_opt_simple_block(&mut self, node: &Option<SimpleBlock>) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_opt_simple_block(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_opt_simple_block(visitor, node),
        }
    }

    #[inline]
    fn visit_opt_type_selector(&mut self, node: &Option<Box<TypeSelector>>) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_opt_type_selector(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_opt_type_selector(visitor, node),
        }
    }

    #[inline]
    fn visit_opt_url_modifiers(&mut self, node: &Option<Vec<UrlModifier>>) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_opt_url_modifiers(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_opt_url_modifiers(visitor, node),
        }
    }

    #[inline]
    fn visit_opt_url_value(&mut self, node: &Option<Box<UrlValue>>) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_opt_url_value(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_opt_url_value(visitor, node),
        }
    }

    #[inline]
    fn visit_page_selector(&mut self, node: &PageSelector) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_page_selector(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_page_selector(visitor, node),
        }
    }

    #[inline]
    fn visit_page_selector_list(&mut self, node: &PageSelectorList) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_page_selector_list(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_page_selector_list(visitor, node),
        }
    }

    #[inline]
    fn visit_page_selector_pseudo(&mut self, node: &PageSelectorPseudo) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_page_selector_pseudo(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_page_selector_pseudo(visitor, node),
        }
    }

    #[inline]
    fn visit_page_selector_pseudos(&mut self, node: &[PageSelectorPseudo]) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_page_selector_pseudos(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_page_selector_pseudos(visitor, node),
        }
    }

    #[inline]
    fn visit_page_selector_type(&mut self, node: &PageSelectorType) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_page_selector_type(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_page_selector_type(visitor, node),
        }
    }

    #[inline]
    fn visit_page_selectors(&mut self, node: &[PageSelector]) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_page_selectors(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_page_selectors(visitor, node),
        }
    }

    #[inline]
    fn visit_percentage(&mut self, node: &Percentage) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_percentage(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_percentage(visitor, node),
        }
    }

    #[inline]
    fn visit_pseudo_class_selector(&mut self, node: &PseudoClassSelector) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_pseudo_class_selector(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_pseudo_class_selector(visitor, node),
        }
    }

    #[inline]
    fn visit_pseudo_class_selector_children(&mut self, node: &PseudoClassSelectorChildren) {
        match self {
            swc_visit::Either::Left(visitor) => {
                Visit::visit_pseudo_class_selector_children(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                Visit::visit_pseudo_class_selector_children(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_pseudo_class_selector_childrens(&mut self, node: &[PseudoClassSelectorChildren]) {
        match self {
            swc_visit::Either::Left(visitor) => {
                Visit::visit_pseudo_class_selector_childrens(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                Visit::visit_pseudo_class_selector_childrens(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_pseudo_element_selector(&mut self, node: &PseudoElementSelector) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_pseudo_element_selector(visitor, node),
            swc_visit::Either::Right(visitor) => {
                Visit::visit_pseudo_element_selector(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_pseudo_element_selector_children(&mut self, node: &PseudoElementSelectorChildren) {
        match self {
            swc_visit::Either::Left(visitor) => {
                Visit::visit_pseudo_element_selector_children(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                Visit::visit_pseudo_element_selector_children(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_pseudo_element_selector_childrens(&mut self, node: &[PseudoElementSelectorChildren]) {
        match self {
            swc_visit::Either::Left(visitor) => {
                Visit::visit_pseudo_element_selector_childrens(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                Visit::visit_pseudo_element_selector_childrens(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_qualified_rule(&mut self, node: &QualifiedRule) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_qualified_rule(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_qualified_rule(visitor, node),
        }
    }

    #[inline]
    fn visit_qualified_rule_prelude(&mut self, node: &QualifiedRulePrelude) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_qualified_rule_prelude(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_qualified_rule_prelude(visitor, node),
        }
    }

    #[inline]
    fn visit_query_in_parens(&mut self, node: &QueryInParens) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_query_in_parens(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_query_in_parens(visitor, node),
        }
    }

    #[inline]
    fn visit_ratio(&mut self, node: &Ratio) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_ratio(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_ratio(visitor, node),
        }
    }

    #[inline]
    fn visit_relative_selector(&mut self, node: &RelativeSelector) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_relative_selector(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_relative_selector(visitor, node),
        }
    }

    #[inline]
    fn visit_relative_selector_list(&mut self, node: &RelativeSelectorList) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_relative_selector_list(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_relative_selector_list(visitor, node),
        }
    }

    #[inline]
    fn visit_relative_selectors(&mut self, node: &[RelativeSelector]) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_relative_selectors(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_relative_selectors(visitor, node),
        }
    }

    #[inline]
    fn visit_resolution(&mut self, node: &Resolution) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_resolution(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_resolution(visitor, node),
        }
    }

    #[inline]
    fn visit_rule(&mut self, node: &Rule) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_rule(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_rule(visitor, node),
        }
    }

    #[inline]
    fn visit_rules(&mut self, node: &[Rule]) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_rules(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_rules(visitor, node),
        }
    }

    #[inline]
    fn visit_scope_range(&mut self, node: &ScopeRange) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_scope_range(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_scope_range(visitor, node),
        }
    }

    #[inline]
    fn visit_selector_list(&mut self, node: &SelectorList) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_selector_list(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_selector_list(visitor, node),
        }
    }

    #[inline]
    fn visit_sequence_of_custom_idents(&mut self, node: &SequenceOfCustomIdents) {
        match self {
            swc_visit::Either::Left(visitor) => {
                Visit::visit_sequence_of_custom_idents(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                Visit::visit_sequence_of_custom_idents(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_simple_block(&mut self, node: &SimpleBlock) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_simple_block(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_simple_block(visitor, node),
        }
    }

    #[inline]
    fn visit_size_feature(&mut self, node: &SizeFeature) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_size_feature(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_size_feature(visitor, node),
        }
    }

    #[inline]
    fn visit_size_feature_boolean(&mut self, node: &SizeFeatureBoolean) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_size_feature_boolean(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_size_feature_boolean(visitor, node),
        }
    }

    #[inline]
    fn visit_size_feature_name(&mut self, node: &SizeFeatureName) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_size_feature_name(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_size_feature_name(visitor, node),
        }
    }

    #[inline]
    fn visit_size_feature_plain(&mut self, node: &SizeFeaturePlain) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_size_feature_plain(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_size_feature_plain(visitor, node),
        }
    }

    #[inline]
    fn visit_size_feature_range(&mut self, node: &SizeFeatureRange) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_size_feature_range(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_size_feature_range(visitor, node),
        }
    }

    #[inline]
    fn visit_size_feature_range_comparison(&mut self, node: &SizeFeatureRangeComparison) {
        match self {
            swc_visit::Either::Left(visitor) => {
                Visit::visit_size_feature_range_comparison(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                Visit::visit_size_feature_range_comparison(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_size_feature_range_interval(&mut self, node: &SizeFeatureRangeInterval) {
        match self {
            swc_visit::Either::Left(visitor) => {
                Visit::visit_size_feature_range_interval(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                Visit::visit_size_feature_range_interval(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_size_feature_value(&mut self, node: &SizeFeatureValue) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_size_feature_value(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_size_feature_value(visitor, node),
        }
    }

    #[inline]
    fn visit_span(&mut self, node: &swc_common::Span) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_span(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_span(visitor, node),
        }
    }

    #[inline]
    fn visit_str(&mut self, node: &Str) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_str(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_str(visitor, node),
        }
    }

    #[inline]
    fn visit_style_block(&mut self, node: &StyleBlock) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_style_block(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_style_block(visitor, node),
        }
    }

    #[inline]
    fn visit_stylesheet(&mut self, node: &Stylesheet) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_stylesheet(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_stylesheet(visitor, node),
        }
    }

    #[inline]
    fn visit_subclass_selector(&mut self, node: &SubclassSelector) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_subclass_selector(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_subclass_selector(visitor, node),
        }
    }

    #[inline]
    fn visit_subclass_selectors(&mut self, node: &[SubclassSelector]) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_subclass_selectors(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_subclass_selectors(visitor, node),
        }
    }

    #[inline]
    fn visit_supports_and(&mut self, node: &SupportsAnd) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_supports_and(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_supports_and(visitor, node),
        }
    }

    #[inline]
    fn visit_supports_condition(&mut self, node: &SupportsCondition) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_supports_condition(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_supports_condition(visitor, node),
        }
    }

    #[inline]
    fn visit_supports_condition_type(&mut self, node: &SupportsConditionType) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_supports_condition_type(visitor, node),
            swc_visit::Either::Right(visitor) => {
                Visit::visit_supports_condition_type(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_supports_condition_types(&mut self, node: &[SupportsConditionType]) {
        match self {
            swc_visit::Either::Left(visitor) => {
                Visit::visit_supports_condition_types(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                Visit::visit_supports_condition_types(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_supports_feature(&mut self, node: &SupportsFeature) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_supports_feature(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_supports_feature(visitor, node),
        }
    }

    #[inline]
    fn visit_supports_in_parens(&mut self, node: &SupportsInParens) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_supports_in_parens(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_supports_in_parens(visitor, node),
        }
    }

    #[inline]
    fn visit_supports_not(&mut self, node: &SupportsNot) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_supports_not(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_supports_not(visitor, node),
        }
    }

    #[inline]
    fn visit_supports_or(&mut self, node: &SupportsOr) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_supports_or(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_supports_or(visitor, node),
        }
    }

    #[inline]
    fn visit_tag_name_selector(&mut self, node: &TagNameSelector) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_tag_name_selector(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_tag_name_selector(visitor, node),
        }
    }

    #[inline]
    fn visit_time(&mut self, node: &Time) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_time(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_time(visitor, node),
        }
    }

    #[inline]
    fn visit_time_percentage(&mut self, node: &TimePercentage) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_time_percentage(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_time_percentage(visitor, node),
        }
    }

    #[inline]
    fn visit_token(&mut self, node: &Token) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_token(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_token(visitor, node),
        }
    }

    #[inline]
    fn visit_token_and_span(&mut self, node: &TokenAndSpan) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_token_and_span(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_token_and_span(visitor, node),
        }
    }

    #[inline]
    fn visit_type_selector(&mut self, node: &TypeSelector) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_type_selector(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_type_selector(visitor, node),
        }
    }

    #[inline]
    fn visit_unicode_range(&mut self, node: &UnicodeRange) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_unicode_range(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_unicode_range(visitor, node),
        }
    }

    #[inline]
    fn visit_universal_selector(&mut self, node: &UniversalSelector) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_universal_selector(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_universal_selector(visitor, node),
        }
    }

    #[inline]
    fn visit_unknown_dimension(&mut self, node: &UnknownDimension) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_unknown_dimension(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_unknown_dimension(visitor, node),
        }
    }

    #[inline]
    fn visit_url(&mut self, node: &Url) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_url(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_url(visitor, node),
        }
    }

    #[inline]
    fn visit_url_key_value(&mut self, node: &UrlKeyValue) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_url_key_value(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_url_key_value(visitor, node),
        }
    }

    #[inline]
    fn visit_url_modifier(&mut self, node: &UrlModifier) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_url_modifier(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_url_modifier(visitor, node),
        }
    }

    #[inline]
    fn visit_url_modifiers(&mut self, node: &[UrlModifier]) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_url_modifiers(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_url_modifiers(visitor, node),
        }
    }

    #[inline]
    fn visit_url_value(&mut self, node: &UrlValue) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_url_value(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_url_value(visitor, node),
        }
    }

    #[inline]
    fn visit_url_value_raw(&mut self, node: &UrlValueRaw) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_url_value_raw(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_url_value_raw(visitor, node),
        }
    }

    #[inline]
    fn visit_wq_name(&mut self, node: &WqName) {
        match self {
            swc_visit::Either::Left(visitor) => Visit::visit_wq_name(visitor, node),
            swc_visit::Either::Right(visitor) => Visit::visit_wq_name(visitor, node),
        }
    }
}
impl<V> Visit for ::swc_visit::Optional<V>
where
    V: Visit,
{
    #[inline]
    fn visit_absolute_color_base(&mut self, node: &AbsoluteColorBase) {
        if self.enabled {
            <V as Visit>::visit_absolute_color_base(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_alpha_value(&mut self, node: &AlphaValue) {
        if self.enabled {
            <V as Visit>::visit_alpha_value(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_an_plus_b(&mut self, node: &AnPlusB) {
        if self.enabled {
            <V as Visit>::visit_an_plus_b(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_an_plus_b_notation(&mut self, node: &AnPlusBNotation) {
        if self.enabled {
            <V as Visit>::visit_an_plus_b_notation(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_angle(&mut self, node: &Angle) {
        if self.enabled {
            <V as Visit>::visit_angle(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_angle_percentage(&mut self, node: &AnglePercentage) {
        if self.enabled {
            <V as Visit>::visit_angle_percentage(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_any_namespace(&mut self, node: &AnyNamespace) {
        if self.enabled {
            <V as Visit>::visit_any_namespace(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_at_rule(&mut self, node: &AtRule) {
        if self.enabled {
            <V as Visit>::visit_at_rule(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_at_rule_name(&mut self, node: &AtRuleName) {
        if self.enabled {
            <V as Visit>::visit_at_rule_name(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_at_rule_prelude(&mut self, node: &AtRulePrelude) {
        if self.enabled {
            <V as Visit>::visit_at_rule_prelude(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_atom(&mut self, node: &swc_atoms::Atom) {
        if self.enabled {
            <V as Visit>::visit_atom(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_attribute_selector(&mut self, node: &AttributeSelector) {
        if self.enabled {
            <V as Visit>::visit_attribute_selector(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_attribute_selector_matcher(&mut self, node: &AttributeSelectorMatcher) {
        if self.enabled {
            <V as Visit>::visit_attribute_selector_matcher(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_attribute_selector_matcher_value(&mut self, node: &AttributeSelectorMatcherValue) {
        if self.enabled {
            <V as Visit>::visit_attribute_selector_matcher_value(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_attribute_selector_modifier(&mut self, node: &AttributeSelectorModifier) {
        if self.enabled {
            <V as Visit>::visit_attribute_selector_modifier(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_attribute_selector_value(&mut self, node: &AttributeSelectorValue) {
        if self.enabled {
            <V as Visit>::visit_attribute_selector_value(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_bin_op(&mut self, node: &BinOp) {
        if self.enabled {
            <V as Visit>::visit_bin_op(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_calc_operator(&mut self, node: &CalcOperator) {
        if self.enabled {
            <V as Visit>::visit_calc_operator(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_calc_operator_type(&mut self, node: &CalcOperatorType) {
        if self.enabled {
            <V as Visit>::visit_calc_operator_type(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_calc_product(&mut self, node: &CalcProduct) {
        if self.enabled {
            <V as Visit>::visit_calc_product(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_calc_product_or_operator(&mut self, node: &CalcProductOrOperator) {
        if self.enabled {
            <V as Visit>::visit_calc_product_or_operator(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_calc_product_or_operators(&mut self, node: &[CalcProductOrOperator]) {
        if self.enabled {
            <V as Visit>::visit_calc_product_or_operators(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_calc_sum(&mut self, node: &CalcSum) {
        if self.enabled {
            <V as Visit>::visit_calc_sum(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_calc_value(&mut self, node: &CalcValue) {
        if self.enabled {
            <V as Visit>::visit_calc_value(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_calc_value_or_operator(&mut self, node: &CalcValueOrOperator) {
        if self.enabled {
            <V as Visit>::visit_calc_value_or_operator(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_calc_value_or_operators(&mut self, node: &[CalcValueOrOperator]) {
        if self.enabled {
            <V as Visit>::visit_calc_value_or_operators(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_class_selector(&mut self, node: &ClassSelector) {
        if self.enabled {
            <V as Visit>::visit_class_selector(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_cmyk_component(&mut self, node: &CmykComponent) {
        if self.enabled {
            <V as Visit>::visit_cmyk_component(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_color(&mut self, node: &Color) {
        if self.enabled {
            <V as Visit>::visit_color(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_color_profile_name(&mut self, node: &ColorProfileName) {
        if self.enabled {
            <V as Visit>::visit_color_profile_name(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_combinator(&mut self, node: &Combinator) {
        if self.enabled {
            <V as Visit>::visit_combinator(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_combinator_value(&mut self, node: &CombinatorValue) {
        if self.enabled {
            <V as Visit>::visit_combinator_value(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_complex_selector(&mut self, node: &ComplexSelector) {
        if self.enabled {
            <V as Visit>::visit_complex_selector(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_complex_selector_children(&mut self, node: &ComplexSelectorChildren) {
        if self.enabled {
            <V as Visit>::visit_complex_selector_children(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_complex_selector_childrens(&mut self, node: &[ComplexSelectorChildren]) {
        if self.enabled {
            <V as Visit>::visit_complex_selector_childrens(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_complex_selectors(&mut self, node: &[ComplexSelector]) {
        if self.enabled {
            <V as Visit>::visit_complex_selectors(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_component_value(&mut self, node: &ComponentValue) {
        if self.enabled {
            <V as Visit>::visit_component_value(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_component_values(&mut self, node: &[ComponentValue]) {
        if self.enabled {
            <V as Visit>::visit_component_values(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_compound_selector(&mut self, node: &CompoundSelector) {
        if self.enabled {
            <V as Visit>::visit_compound_selector(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_compound_selector_list(&mut self, node: &CompoundSelectorList) {
        if self.enabled {
            <V as Visit>::visit_compound_selector_list(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_compound_selectors(&mut self, node: &[CompoundSelector]) {
        if self.enabled {
            <V as Visit>::visit_compound_selectors(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_container_condition(&mut self, node: &ContainerCondition) {
        if self.enabled {
            <V as Visit>::visit_container_condition(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_container_name(&mut self, node: &ContainerName) {
        if self.enabled {
            <V as Visit>::visit_container_name(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_container_query(&mut self, node: &ContainerQuery) {
        if self.enabled {
            <V as Visit>::visit_container_query(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_container_query_and(&mut self, node: &ContainerQueryAnd) {
        if self.enabled {
            <V as Visit>::visit_container_query_and(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_container_query_not(&mut self, node: &ContainerQueryNot) {
        if self.enabled {
            <V as Visit>::visit_container_query_not(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_container_query_or(&mut self, node: &ContainerQueryOr) {
        if self.enabled {
            <V as Visit>::visit_container_query_or(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_container_query_type(&mut self, node: &ContainerQueryType) {
        if self.enabled {
            <V as Visit>::visit_container_query_type(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_container_query_types(&mut self, node: &[ContainerQueryType]) {
        if self.enabled {
            <V as Visit>::visit_container_query_types(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_custom_highlight_name(&mut self, node: &CustomHighlightName) {
        if self.enabled {
            <V as Visit>::visit_custom_highlight_name(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_custom_ident(&mut self, node: &CustomIdent) {
        if self.enabled {
            <V as Visit>::visit_custom_ident(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_custom_idents(&mut self, node: &[CustomIdent]) {
        if self.enabled {
            <V as Visit>::visit_custom_idents(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_custom_media_query(&mut self, node: &CustomMediaQuery) {
        if self.enabled {
            <V as Visit>::visit_custom_media_query(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_custom_media_query_media_type(&mut self, node: &CustomMediaQueryMediaType) {
        if self.enabled {
            <V as Visit>::visit_custom_media_query_media_type(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_custom_property_name(&mut self, node: &CustomPropertyName) {
        if self.enabled {
            <V as Visit>::visit_custom_property_name(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_dashed_ident(&mut self, node: &DashedIdent) {
        if self.enabled {
            <V as Visit>::visit_dashed_ident(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_declaration(&mut self, node: &Declaration) {
        if self.enabled {
            <V as Visit>::visit_declaration(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_declaration_name(&mut self, node: &DeclarationName) {
        if self.enabled {
            <V as Visit>::visit_declaration_name(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_declaration_or_at_rule(&mut self, node: &DeclarationOrAtRule) {
        if self.enabled {
            <V as Visit>::visit_declaration_or_at_rule(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_delimiter(&mut self, node: &Delimiter) {
        if self.enabled {
            <V as Visit>::visit_delimiter(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_delimiter_value(&mut self, node: &DelimiterValue) {
        if self.enabled {
            <V as Visit>::visit_delimiter_value(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_dimension(&mut self, node: &Dimension) {
        if self.enabled {
            <V as Visit>::visit_dimension(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_dimension_token(&mut self, node: &DimensionToken) {
        if self.enabled {
            <V as Visit>::visit_dimension_token(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_document_prelude(&mut self, node: &DocumentPrelude) {
        if self.enabled {
            <V as Visit>::visit_document_prelude(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_document_prelude_matching_function(&mut self, node: &DocumentPreludeMatchingFunction) {
        if self.enabled {
            <V as Visit>::visit_document_prelude_matching_function(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_document_prelude_matching_functions(
        &mut self,
        node: &[DocumentPreludeMatchingFunction],
    ) {
        if self.enabled {
            <V as Visit>::visit_document_prelude_matching_functions(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_extension_name(&mut self, node: &ExtensionName) {
        if self.enabled {
            <V as Visit>::visit_extension_name(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_family_name(&mut self, node: &FamilyName) {
        if self.enabled {
            <V as Visit>::visit_family_name(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_family_names(&mut self, node: &[FamilyName]) {
        if self.enabled {
            <V as Visit>::visit_family_names(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_flex(&mut self, node: &Flex) {
        if self.enabled {
            <V as Visit>::visit_flex(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_font_feature_values_prelude(&mut self, node: &FontFeatureValuesPrelude) {
        if self.enabled {
            <V as Visit>::visit_font_feature_values_prelude(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_forgiving_complex_selector(&mut self, node: &ForgivingComplexSelector) {
        if self.enabled {
            <V as Visit>::visit_forgiving_complex_selector(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_forgiving_complex_selectors(&mut self, node: &[ForgivingComplexSelector]) {
        if self.enabled {
            <V as Visit>::visit_forgiving_complex_selectors(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_forgiving_relative_selector(&mut self, node: &ForgivingRelativeSelector) {
        if self.enabled {
            <V as Visit>::visit_forgiving_relative_selector(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_forgiving_relative_selector_list(&mut self, node: &ForgivingRelativeSelectorList) {
        if self.enabled {
            <V as Visit>::visit_forgiving_relative_selector_list(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_forgiving_relative_selectors(&mut self, node: &[ForgivingRelativeSelector]) {
        if self.enabled {
            <V as Visit>::visit_forgiving_relative_selectors(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_forgiving_selector_list(&mut self, node: &ForgivingSelectorList) {
        if self.enabled {
            <V as Visit>::visit_forgiving_selector_list(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_frequency(&mut self, node: &Frequency) {
        if self.enabled {
            <V as Visit>::visit_frequency(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_frequency_percentage(&mut self, node: &FrequencyPercentage) {
        if self.enabled {
            <V as Visit>::visit_frequency_percentage(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_function(&mut self, node: &Function) {
        if self.enabled {
            <V as Visit>::visit_function(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_function_name(&mut self, node: &FunctionName) {
        if self.enabled {
            <V as Visit>::visit_function_name(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_general_enclosed(&mut self, node: &GeneralEnclosed) {
        if self.enabled {
            <V as Visit>::visit_general_enclosed(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_hex_color(&mut self, node: &HexColor) {
        if self.enabled {
            <V as Visit>::visit_hex_color(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_hue(&mut self, node: &Hue) {
        if self.enabled {
            <V as Visit>::visit_hue(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_id_selector(&mut self, node: &IdSelector) {
        if self.enabled {
            <V as Visit>::visit_id_selector(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_ident(&mut self, node: &Ident) {
        if self.enabled {
            <V as Visit>::visit_ident(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_idents(&mut self, node: &[Ident]) {
        if self.enabled {
            <V as Visit>::visit_idents(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_import_conditions(&mut self, node: &ImportConditions) {
        if self.enabled {
            <V as Visit>::visit_import_conditions(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_import_href(&mut self, node: &ImportHref) {
        if self.enabled {
            <V as Visit>::visit_import_href(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_import_layer_name(&mut self, node: &ImportLayerName) {
        if self.enabled {
            <V as Visit>::visit_import_layer_name(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_import_prelude(&mut self, node: &ImportPrelude) {
        if self.enabled {
            <V as Visit>::visit_import_prelude(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_important_flag(&mut self, node: &ImportantFlag) {
        if self.enabled {
            <V as Visit>::visit_important_flag(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_integer(&mut self, node: &Integer) {
        if self.enabled {
            <V as Visit>::visit_integer(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_keyframe_block(&mut self, node: &KeyframeBlock) {
        if self.enabled {
            <V as Visit>::visit_keyframe_block(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_keyframe_selector(&mut self, node: &KeyframeSelector) {
        if self.enabled {
            <V as Visit>::visit_keyframe_selector(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_keyframe_selectors(&mut self, node: &[KeyframeSelector]) {
        if self.enabled {
            <V as Visit>::visit_keyframe_selectors(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_keyframes_name(&mut self, node: &KeyframesName) {
        if self.enabled {
            <V as Visit>::visit_keyframes_name(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_keyframes_pseudo_function(&mut self, node: &KeyframesPseudoFunction) {
        if self.enabled {
            <V as Visit>::visit_keyframes_pseudo_function(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_keyframes_pseudo_prefix(&mut self, node: &KeyframesPseudoPrefix) {
        if self.enabled {
            <V as Visit>::visit_keyframes_pseudo_prefix(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_layer_name(&mut self, node: &LayerName) {
        if self.enabled {
            <V as Visit>::visit_layer_name(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_layer_name_list(&mut self, node: &LayerNameList) {
        if self.enabled {
            <V as Visit>::visit_layer_name_list(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_layer_names(&mut self, node: &[LayerName]) {
        if self.enabled {
            <V as Visit>::visit_layer_names(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_layer_prelude(&mut self, node: &LayerPrelude) {
        if self.enabled {
            <V as Visit>::visit_layer_prelude(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_length(&mut self, node: &Length) {
        if self.enabled {
            <V as Visit>::visit_length(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_length_percentage(&mut self, node: &LengthPercentage) {
        if self.enabled {
            <V as Visit>::visit_length_percentage(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_list_of_component_values(&mut self, node: &ListOfComponentValues) {
        if self.enabled {
            <V as Visit>::visit_list_of_component_values(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_media_and(&mut self, node: &MediaAnd) {
        if self.enabled {
            <V as Visit>::visit_media_and(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_media_condition(&mut self, node: &MediaCondition) {
        if self.enabled {
            <V as Visit>::visit_media_condition(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_media_condition_all_type(&mut self, node: &MediaConditionAllType) {
        if self.enabled {
            <V as Visit>::visit_media_condition_all_type(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_media_condition_all_types(&mut self, node: &[MediaConditionAllType]) {
        if self.enabled {
            <V as Visit>::visit_media_condition_all_types(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_media_condition_type(&mut self, node: &MediaConditionType) {
        if self.enabled {
            <V as Visit>::visit_media_condition_type(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_media_condition_without_or(&mut self, node: &MediaConditionWithoutOr) {
        if self.enabled {
            <V as Visit>::visit_media_condition_without_or(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_media_condition_without_or_type(&mut self, node: &MediaConditionWithoutOrType) {
        if self.enabled {
            <V as Visit>::visit_media_condition_without_or_type(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_media_condition_without_or_types(&mut self, node: &[MediaConditionWithoutOrType]) {
        if self.enabled {
            <V as Visit>::visit_media_condition_without_or_types(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_media_feature(&mut self, node: &MediaFeature) {
        if self.enabled {
            <V as Visit>::visit_media_feature(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_media_feature_boolean(&mut self, node: &MediaFeatureBoolean) {
        if self.enabled {
            <V as Visit>::visit_media_feature_boolean(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_media_feature_name(&mut self, node: &MediaFeatureName) {
        if self.enabled {
            <V as Visit>::visit_media_feature_name(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_media_feature_plain(&mut self, node: &MediaFeaturePlain) {
        if self.enabled {
            <V as Visit>::visit_media_feature_plain(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_media_feature_range(&mut self, node: &MediaFeatureRange) {
        if self.enabled {
            <V as Visit>::visit_media_feature_range(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_media_feature_range_comparison(&mut self, node: &MediaFeatureRangeComparison) {
        if self.enabled {
            <V as Visit>::visit_media_feature_range_comparison(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_media_feature_range_interval(&mut self, node: &MediaFeatureRangeInterval) {
        if self.enabled {
            <V as Visit>::visit_media_feature_range_interval(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_media_feature_value(&mut self, node: &MediaFeatureValue) {
        if self.enabled {
            <V as Visit>::visit_media_feature_value(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_media_in_parens(&mut self, node: &MediaInParens) {
        if self.enabled {
            <V as Visit>::visit_media_in_parens(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_media_not(&mut self, node: &MediaNot) {
        if self.enabled {
            <V as Visit>::visit_media_not(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_media_or(&mut self, node: &MediaOr) {
        if self.enabled {
            <V as Visit>::visit_media_or(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_media_query(&mut self, node: &MediaQuery) {
        if self.enabled {
            <V as Visit>::visit_media_query(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_media_query_list(&mut self, node: &MediaQueryList) {
        if self.enabled {
            <V as Visit>::visit_media_query_list(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_media_querys(&mut self, node: &[MediaQuery]) {
        if self.enabled {
            <V as Visit>::visit_media_querys(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_media_type(&mut self, node: &MediaType) {
        if self.enabled {
            <V as Visit>::visit_media_type(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_named_namespace(&mut self, node: &NamedNamespace) {
        if self.enabled {
            <V as Visit>::visit_named_namespace(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_namespace(&mut self, node: &Namespace) {
        if self.enabled {
            <V as Visit>::visit_namespace(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_namespace_prefix(&mut self, node: &NamespacePrefix) {
        if self.enabled {
            <V as Visit>::visit_namespace_prefix(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_namespace_prelude(&mut self, node: &NamespacePrelude) {
        if self.enabled {
            <V as Visit>::visit_namespace_prelude(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_namespace_prelude_uri(&mut self, node: &NamespacePreludeUri) {
        if self.enabled {
            <V as Visit>::visit_namespace_prelude_uri(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_nesting_selector(&mut self, node: &NestingSelector) {
        if self.enabled {
            <V as Visit>::visit_nesting_selector(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_number(&mut self, node: &Number) {
        if self.enabled {
            <V as Visit>::visit_number(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_number_type(&mut self, node: &NumberType) {
        if self.enabled {
            <V as Visit>::visit_number_type(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_opt_at_rule_prelude(&mut self, node: &Option<Box<AtRulePrelude>>) {
        if self.enabled {
            <V as Visit>::visit_opt_at_rule_prelude(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_opt_atom(&mut self, node: &Option<swc_atoms::Atom>) {
        if self.enabled {
            <V as Visit>::visit_opt_atom(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_opt_attribute_selector_matcher(&mut self, node: &Option<AttributeSelectorMatcher>) {
        if self.enabled {
            <V as Visit>::visit_opt_attribute_selector_matcher(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_opt_attribute_selector_modifier(&mut self, node: &Option<AttributeSelectorModifier>) {
        if self.enabled {
            <V as Visit>::visit_opt_attribute_selector_modifier(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_opt_attribute_selector_value(&mut self, node: &Option<AttributeSelectorValue>) {
        if self.enabled {
            <V as Visit>::visit_opt_attribute_selector_value(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_opt_combinator(&mut self, node: &Option<Combinator>) {
        if self.enabled {
            <V as Visit>::visit_opt_combinator(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_opt_container_name(&mut self, node: &Option<ContainerName>) {
        if self.enabled {
            <V as Visit>::visit_opt_container_name(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_opt_forgiving_selector_list(&mut self, node: &Option<ForgivingSelectorList>) {
        if self.enabled {
            <V as Visit>::visit_opt_forgiving_selector_list(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_opt_function(&mut self, node: &Option<Box<Function>>) {
        if self.enabled {
            <V as Visit>::visit_opt_function(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_opt_ident(&mut self, node: &Option<Ident>) {
        if self.enabled {
            <V as Visit>::visit_opt_ident(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_opt_import_conditions(&mut self, node: &Option<Box<ImportConditions>>) {
        if self.enabled {
            <V as Visit>::visit_opt_import_conditions(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_opt_import_layer_name(&mut self, node: &Option<Box<ImportLayerName>>) {
        if self.enabled {
            <V as Visit>::visit_opt_import_layer_name(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_opt_important_flag(&mut self, node: &Option<ImportantFlag>) {
        if self.enabled {
            <V as Visit>::visit_opt_important_flag(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_opt_media_condition_type(&mut self, node: &Option<Box<MediaConditionType>>) {
        if self.enabled {
            <V as Visit>::visit_opt_media_condition_type(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_opt_media_query_list(&mut self, node: &Option<Box<MediaQueryList>>) {
        if self.enabled {
            <V as Visit>::visit_opt_media_query_list(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_opt_media_type(&mut self, node: &Option<MediaType>) {
        if self.enabled {
            <V as Visit>::visit_opt_media_type(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_opt_namespace(&mut self, node: &Option<Namespace>) {
        if self.enabled {
            <V as Visit>::visit_opt_namespace(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_opt_namespace_prefix(&mut self, node: &Option<NamespacePrefix>) {
        if self.enabled {
            <V as Visit>::visit_opt_namespace_prefix(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_opt_nesting_selector(&mut self, node: &Option<NestingSelector>) {
        if self.enabled {
            <V as Visit>::visit_opt_nesting_selector(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_opt_number(&mut self, node: &Option<Number>) {
        if self.enabled {
            <V as Visit>::visit_opt_number(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_opt_page_selector_pseudos(&mut self, node: &Option<Vec<PageSelectorPseudo>>) {
        if self.enabled {
            <V as Visit>::visit_opt_page_selector_pseudos(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_opt_page_selector_type(&mut self, node: &Option<PageSelectorType>) {
        if self.enabled {
            <V as Visit>::visit_opt_page_selector_type(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_opt_pseudo_class_selector_childrens(
        &mut self,
        node: &Option<Vec<PseudoClassSelectorChildren>>,
    ) {
        if self.enabled {
            <V as Visit>::visit_opt_pseudo_class_selector_childrens(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_opt_pseudo_element_selector_childrens(
        &mut self,
        node: &Option<Vec<PseudoElementSelectorChildren>>,
    ) {
        if self.enabled {
            <V as Visit>::visit_opt_pseudo_element_selector_childrens(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_opt_simple_block(&mut self, node: &Option<SimpleBlock>) {
        if self.enabled {
            <V as Visit>::visit_opt_simple_block(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_opt_type_selector(&mut self, node: &Option<Box<TypeSelector>>) {
        if self.enabled {
            <V as Visit>::visit_opt_type_selector(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_opt_url_modifiers(&mut self, node: &Option<Vec<UrlModifier>>) {
        if self.enabled {
            <V as Visit>::visit_opt_url_modifiers(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_opt_url_value(&mut self, node: &Option<Box<UrlValue>>) {
        if self.enabled {
            <V as Visit>::visit_opt_url_value(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_page_selector(&mut self, node: &PageSelector) {
        if self.enabled {
            <V as Visit>::visit_page_selector(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_page_selector_list(&mut self, node: &PageSelectorList) {
        if self.enabled {
            <V as Visit>::visit_page_selector_list(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_page_selector_pseudo(&mut self, node: &PageSelectorPseudo) {
        if self.enabled {
            <V as Visit>::visit_page_selector_pseudo(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_page_selector_pseudos(&mut self, node: &[PageSelectorPseudo]) {
        if self.enabled {
            <V as Visit>::visit_page_selector_pseudos(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_page_selector_type(&mut self, node: &PageSelectorType) {
        if self.enabled {
            <V as Visit>::visit_page_selector_type(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_page_selectors(&mut self, node: &[PageSelector]) {
        if self.enabled {
            <V as Visit>::visit_page_selectors(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_percentage(&mut self, node: &Percentage) {
        if self.enabled {
            <V as Visit>::visit_percentage(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_pseudo_class_selector(&mut self, node: &PseudoClassSelector) {
        if self.enabled {
            <V as Visit>::visit_pseudo_class_selector(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_pseudo_class_selector_children(&mut self, node: &PseudoClassSelectorChildren) {
        if self.enabled {
            <V as Visit>::visit_pseudo_class_selector_children(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_pseudo_class_selector_childrens(&mut self, node: &[PseudoClassSelectorChildren]) {
        if self.enabled {
            <V as Visit>::visit_pseudo_class_selector_childrens(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_pseudo_element_selector(&mut self, node: &PseudoElementSelector) {
        if self.enabled {
            <V as Visit>::visit_pseudo_element_selector(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_pseudo_element_selector_children(&mut self, node: &PseudoElementSelectorChildren) {
        if self.enabled {
            <V as Visit>::visit_pseudo_element_selector_children(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_pseudo_element_selector_childrens(&mut self, node: &[PseudoElementSelectorChildren]) {
        if self.enabled {
            <V as Visit>::visit_pseudo_element_selector_childrens(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_qualified_rule(&mut self, node: &QualifiedRule) {
        if self.enabled {
            <V as Visit>::visit_qualified_rule(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_qualified_rule_prelude(&mut self, node: &QualifiedRulePrelude) {
        if self.enabled {
            <V as Visit>::visit_qualified_rule_prelude(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_query_in_parens(&mut self, node: &QueryInParens) {
        if self.enabled {
            <V as Visit>::visit_query_in_parens(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_ratio(&mut self, node: &Ratio) {
        if self.enabled {
            <V as Visit>::visit_ratio(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_relative_selector(&mut self, node: &RelativeSelector) {
        if self.enabled {
            <V as Visit>::visit_relative_selector(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_relative_selector_list(&mut self, node: &RelativeSelectorList) {
        if self.enabled {
            <V as Visit>::visit_relative_selector_list(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_relative_selectors(&mut self, node: &[RelativeSelector]) {
        if self.enabled {
            <V as Visit>::visit_relative_selectors(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_resolution(&mut self, node: &Resolution) {
        if self.enabled {
            <V as Visit>::visit_resolution(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_rule(&mut self, node: &Rule) {
        if self.enabled {
            <V as Visit>::visit_rule(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_rules(&mut self, node: &[Rule]) {
        if self.enabled {
            <V as Visit>::visit_rules(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_scope_range(&mut self, node: &ScopeRange) {
        if self.enabled {
            <V as Visit>::visit_scope_range(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_selector_list(&mut self, node: &SelectorList) {
        if self.enabled {
            <V as Visit>::visit_selector_list(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_sequence_of_custom_idents(&mut self, node: &SequenceOfCustomIdents) {
        if self.enabled {
            <V as Visit>::visit_sequence_of_custom_idents(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_simple_block(&mut self, node: &SimpleBlock) {
        if self.enabled {
            <V as Visit>::visit_simple_block(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_size_feature(&mut self, node: &SizeFeature) {
        if self.enabled {
            <V as Visit>::visit_size_feature(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_size_feature_boolean(&mut self, node: &SizeFeatureBoolean) {
        if self.enabled {
            <V as Visit>::visit_size_feature_boolean(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_size_feature_name(&mut self, node: &SizeFeatureName) {
        if self.enabled {
            <V as Visit>::visit_size_feature_name(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_size_feature_plain(&mut self, node: &SizeFeaturePlain) {
        if self.enabled {
            <V as Visit>::visit_size_feature_plain(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_size_feature_range(&mut self, node: &SizeFeatureRange) {
        if self.enabled {
            <V as Visit>::visit_size_feature_range(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_size_feature_range_comparison(&mut self, node: &SizeFeatureRangeComparison) {
        if self.enabled {
            <V as Visit>::visit_size_feature_range_comparison(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_size_feature_range_interval(&mut self, node: &SizeFeatureRangeInterval) {
        if self.enabled {
            <V as Visit>::visit_size_feature_range_interval(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_size_feature_value(&mut self, node: &SizeFeatureValue) {
        if self.enabled {
            <V as Visit>::visit_size_feature_value(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_span(&mut self, node: &swc_common::Span) {
        if self.enabled {
            <V as Visit>::visit_span(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_str(&mut self, node: &Str) {
        if self.enabled {
            <V as Visit>::visit_str(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_style_block(&mut self, node: &StyleBlock) {
        if self.enabled {
            <V as Visit>::visit_style_block(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_stylesheet(&mut self, node: &Stylesheet) {
        if self.enabled {
            <V as Visit>::visit_stylesheet(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_subclass_selector(&mut self, node: &SubclassSelector) {
        if self.enabled {
            <V as Visit>::visit_subclass_selector(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_subclass_selectors(&mut self, node: &[SubclassSelector]) {
        if self.enabled {
            <V as Visit>::visit_subclass_selectors(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_supports_and(&mut self, node: &SupportsAnd) {
        if self.enabled {
            <V as Visit>::visit_supports_and(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_supports_condition(&mut self, node: &SupportsCondition) {
        if self.enabled {
            <V as Visit>::visit_supports_condition(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_supports_condition_type(&mut self, node: &SupportsConditionType) {
        if self.enabled {
            <V as Visit>::visit_supports_condition_type(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_supports_condition_types(&mut self, node: &[SupportsConditionType]) {
        if self.enabled {
            <V as Visit>::visit_supports_condition_types(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_supports_feature(&mut self, node: &SupportsFeature) {
        if self.enabled {
            <V as Visit>::visit_supports_feature(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_supports_in_parens(&mut self, node: &SupportsInParens) {
        if self.enabled {
            <V as Visit>::visit_supports_in_parens(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_supports_not(&mut self, node: &SupportsNot) {
        if self.enabled {
            <V as Visit>::visit_supports_not(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_supports_or(&mut self, node: &SupportsOr) {
        if self.enabled {
            <V as Visit>::visit_supports_or(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_tag_name_selector(&mut self, node: &TagNameSelector) {
        if self.enabled {
            <V as Visit>::visit_tag_name_selector(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_time(&mut self, node: &Time) {
        if self.enabled {
            <V as Visit>::visit_time(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_time_percentage(&mut self, node: &TimePercentage) {
        if self.enabled {
            <V as Visit>::visit_time_percentage(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_token(&mut self, node: &Token) {
        if self.enabled {
            <V as Visit>::visit_token(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_token_and_span(&mut self, node: &TokenAndSpan) {
        if self.enabled {
            <V as Visit>::visit_token_and_span(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_type_selector(&mut self, node: &TypeSelector) {
        if self.enabled {
            <V as Visit>::visit_type_selector(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_unicode_range(&mut self, node: &UnicodeRange) {
        if self.enabled {
            <V as Visit>::visit_unicode_range(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_universal_selector(&mut self, node: &UniversalSelector) {
        if self.enabled {
            <V as Visit>::visit_universal_selector(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_unknown_dimension(&mut self, node: &UnknownDimension) {
        if self.enabled {
            <V as Visit>::visit_unknown_dimension(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_url(&mut self, node: &Url) {
        if self.enabled {
            <V as Visit>::visit_url(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_url_key_value(&mut self, node: &UrlKeyValue) {
        if self.enabled {
            <V as Visit>::visit_url_key_value(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_url_modifier(&mut self, node: &UrlModifier) {
        if self.enabled {
            <V as Visit>::visit_url_modifier(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_url_modifiers(&mut self, node: &[UrlModifier]) {
        if self.enabled {
            <V as Visit>::visit_url_modifiers(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_url_value(&mut self, node: &UrlValue) {
        if self.enabled {
            <V as Visit>::visit_url_value(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_url_value_raw(&mut self, node: &UrlValueRaw) {
        if self.enabled {
            <V as Visit>::visit_url_value_raw(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_wq_name(&mut self, node: &WqName) {
        if self.enabled {
            <V as Visit>::visit_wq_name(&mut self.visitor, node)
        } else {
        }
    }
}
#[doc = r" A trait implemented for types that can be visited using a visitor."]
pub trait VisitWith<V: ?Sized + Visit> {
    #[doc = r" Calls a visitor method (visitor.fold_xxx) with self."]
    fn visit_with(&self, visitor: &mut V);
    #[doc = r" Visit children nodes of `self`` with `visitor`."]
    fn visit_children_with(&self, visitor: &mut V);
}
impl<V: ?Sized + Visit> VisitWith<V> for AbsoluteColorBase {
    #[doc = "Calls [Visit`::visit_absolute_color_base`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_absolute_color_base(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            AbsoluteColorBase::HexColor { 0: _field_0 } => {
                <HexColor as VisitWith<V>>::visit_with(_field_0, visitor);
            }
            AbsoluteColorBase::NamedColorOrTransparent { 0: _field_0 } => {
                <Ident as VisitWith<V>>::visit_with(_field_0, visitor);
            }
            AbsoluteColorBase::Function { 0: _field_0 } => {
                <Function as VisitWith<V>>::visit_with(_field_0, visitor);
            }
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for AlphaValue {
    #[doc = "Calls [Visit`::visit_alpha_value`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_alpha_value(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            AlphaValue::Number { 0: _field_0 } => {
                <Number as VisitWith<V>>::visit_with(_field_0, visitor);
            }
            AlphaValue::Percentage { 0: _field_0 } => {
                <Percentage as VisitWith<V>>::visit_with(_field_0, visitor);
            }
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for AnPlusB {
    #[doc = "Calls [Visit`::visit_an_plus_b`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_an_plus_b(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            AnPlusB::Ident { 0: _field_0 } => {
                <Ident as VisitWith<V>>::visit_with(_field_0, visitor);
            }
            AnPlusB::AnPlusBNotation { 0: _field_0 } => {
                <AnPlusBNotation as VisitWith<V>>::visit_with(_field_0, visitor);
            }
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for AnPlusBNotation {
    #[doc = "Calls [Visit`::visit_an_plus_b_notation`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_an_plus_b_notation(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            AnPlusBNotation {
                span,
                a,
                a_raw,
                b,
                b_raw,
            } => {
                {
                    <swc_common::Span as VisitWith<V>>::visit_with(span, visitor)
                };
                {
                    <Option<swc_atoms::Atom> as VisitWith<V>>::visit_with(a_raw, visitor)
                };
                {
                    <Option<swc_atoms::Atom> as VisitWith<V>>::visit_with(b_raw, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for Angle {
    #[doc = "Calls [Visit`::visit_angle`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_angle(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            Angle { span, value, unit } => {
                {
                    <swc_common::Span as VisitWith<V>>::visit_with(span, visitor)
                };
                {
                    <Number as VisitWith<V>>::visit_with(value, visitor)
                };
                {
                    <Ident as VisitWith<V>>::visit_with(unit, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for AnglePercentage {
    #[doc = "Calls [Visit`::visit_angle_percentage`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_angle_percentage(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            AnglePercentage::Angle { 0: _field_0 } => {
                <Angle as VisitWith<V>>::visit_with(_field_0, visitor);
            }
            AnglePercentage::Percentage { 0: _field_0 } => {
                <Percentage as VisitWith<V>>::visit_with(_field_0, visitor);
            }
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for AnyNamespace {
    #[doc = "Calls [Visit`::visit_any_namespace`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_any_namespace(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            AnyNamespace { span } => {
                {
                    <swc_common::Span as VisitWith<V>>::visit_with(span, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for AtRule {
    #[doc = "Calls [Visit`::visit_at_rule`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_at_rule(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            AtRule {
                span,
                name,
                prelude,
                block,
            } => {
                {
                    <swc_common::Span as VisitWith<V>>::visit_with(span, visitor)
                };
                {
                    <AtRuleName as VisitWith<V>>::visit_with(name, visitor)
                };
                {
                    <Option<Box<AtRulePrelude>> as VisitWith<V>>::visit_with(prelude, visitor)
                };
                {
                    <Option<SimpleBlock> as VisitWith<V>>::visit_with(block, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for AtRuleName {
    #[doc = "Calls [Visit`::visit_at_rule_name`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_at_rule_name(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            AtRuleName::DashedIdent { 0: _field_0 } => {
                <DashedIdent as VisitWith<V>>::visit_with(_field_0, visitor);
            }
            AtRuleName::Ident { 0: _field_0 } => {
                <Ident as VisitWith<V>>::visit_with(_field_0, visitor);
            }
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for AtRulePrelude {
    #[doc = "Calls [Visit`::visit_at_rule_prelude`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_at_rule_prelude(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            AtRulePrelude::ListOfComponentValues { 0: _field_0 } => {
                <ListOfComponentValues as VisitWith<V>>::visit_with(_field_0, visitor);
            }
            AtRulePrelude::CharsetPrelude { 0: _field_0 } => {
                <Str as VisitWith<V>>::visit_with(_field_0, visitor);
            }
            AtRulePrelude::PropertyPrelude { 0: _field_0 } => {
                <CustomPropertyName as VisitWith<V>>::visit_with(_field_0, visitor);
            }
            AtRulePrelude::CounterStylePrelude { 0: _field_0 } => {
                <CustomIdent as VisitWith<V>>::visit_with(_field_0, visitor);
            }
            AtRulePrelude::ColorProfilePrelude { 0: _field_0 } => {
                <ColorProfileName as VisitWith<V>>::visit_with(_field_0, visitor);
            }
            AtRulePrelude::DocumentPrelude { 0: _field_0 } => {
                <DocumentPrelude as VisitWith<V>>::visit_with(_field_0, visitor);
            }
            AtRulePrelude::FontPaletteValuesPrelude { 0: _field_0 } => {
                <DashedIdent as VisitWith<V>>::visit_with(_field_0, visitor);
            }
            AtRulePrelude::FontFeatureValuesPrelude { 0: _field_0 } => {
                <FontFeatureValuesPrelude as VisitWith<V>>::visit_with(_field_0, visitor);
            }
            AtRulePrelude::NestPrelude { 0: _field_0 } => {
                <SelectorList as VisitWith<V>>::visit_with(_field_0, visitor);
            }
            AtRulePrelude::KeyframesPrelude { 0: _field_0 } => {
                <KeyframesName as VisitWith<V>>::visit_with(_field_0, visitor);
            }
            AtRulePrelude::ImportPrelude { 0: _field_0 } => {
                <ImportPrelude as VisitWith<V>>::visit_with(_field_0, visitor);
            }
            AtRulePrelude::NamespacePrelude { 0: _field_0 } => {
                <NamespacePrelude as VisitWith<V>>::visit_with(_field_0, visitor);
            }
            AtRulePrelude::MediaPrelude { 0: _field_0 } => {
                <MediaQueryList as VisitWith<V>>::visit_with(_field_0, visitor);
            }
            AtRulePrelude::SupportsPrelude { 0: _field_0 } => {
                <SupportsCondition as VisitWith<V>>::visit_with(_field_0, visitor);
            }
            AtRulePrelude::PagePrelude { 0: _field_0 } => {
                <PageSelectorList as VisitWith<V>>::visit_with(_field_0, visitor);
            }
            AtRulePrelude::LayerPrelude { 0: _field_0 } => {
                <LayerPrelude as VisitWith<V>>::visit_with(_field_0, visitor);
            }
            AtRulePrelude::ContainerPrelude { 0: _field_0 } => {
                <ContainerCondition as VisitWith<V>>::visit_with(_field_0, visitor);
            }
            AtRulePrelude::CustomMediaPrelude { 0: _field_0 } => {
                <CustomMediaQuery as VisitWith<V>>::visit_with(_field_0, visitor);
            }
            AtRulePrelude::ScopePrelude { 0: _field_0 } => {
                <ScopeRange as VisitWith<V>>::visit_with(_field_0, visitor);
            }
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for AttributeSelector {
    #[doc = "Calls [Visit`::visit_attribute_selector`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_attribute_selector(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            AttributeSelector {
                span,
                name,
                matcher,
                value,
                modifier,
            } => {
                {
                    <swc_common::Span as VisitWith<V>>::visit_with(span, visitor)
                };
                {
                    <WqName as VisitWith<V>>::visit_with(name, visitor)
                };
                {
                    <Option<AttributeSelectorMatcher> as VisitWith<V>>::visit_with(matcher, visitor)
                };
                {
                    <Option<AttributeSelectorValue> as VisitWith<V>>::visit_with(value, visitor)
                };
                {
                    <Option<AttributeSelectorModifier> as VisitWith<V>>::visit_with(
                        modifier, visitor,
                    )
                };
            }
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for AttributeSelectorMatcher {
    #[doc = "Calls [Visit`::visit_attribute_selector_matcher`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_attribute_selector_matcher(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            AttributeSelectorMatcher { span, value } => {
                {
                    <swc_common::Span as VisitWith<V>>::visit_with(span, visitor)
                };
                {
                    <AttributeSelectorMatcherValue as VisitWith<V>>::visit_with(value, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for AttributeSelectorMatcherValue {
    #[doc = "Calls [Visit`::visit_attribute_selector_matcher_value`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_attribute_selector_matcher_value(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            AttributeSelectorMatcherValue::Equals => {}
            AttributeSelectorMatcherValue::Tilde => {}
            AttributeSelectorMatcherValue::Bar => {}
            AttributeSelectorMatcherValue::Caret => {}
            AttributeSelectorMatcherValue::Dollar => {}
            AttributeSelectorMatcherValue::Asterisk => {}
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for AttributeSelectorModifier {
    #[doc = "Calls [Visit`::visit_attribute_selector_modifier`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_attribute_selector_modifier(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            AttributeSelectorModifier { span, value } => {
                {
                    <swc_common::Span as VisitWith<V>>::visit_with(span, visitor)
                };
                {
                    <Ident as VisitWith<V>>::visit_with(value, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for AttributeSelectorValue {
    #[doc = "Calls [Visit`::visit_attribute_selector_value`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_attribute_selector_value(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            AttributeSelectorValue::Str { 0: _field_0 } => {
                <Str as VisitWith<V>>::visit_with(_field_0, visitor);
            }
            AttributeSelectorValue::Ident { 0: _field_0 } => {
                <Ident as VisitWith<V>>::visit_with(_field_0, visitor);
            }
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for BinOp {
    #[doc = "Calls [Visit`::visit_bin_op`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_bin_op(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            BinOp::Add => {}
            BinOp::Sub => {}
            BinOp::Mul => {}
            BinOp::Div => {}
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for CalcOperator {
    #[doc = "Calls [Visit`::visit_calc_operator`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_calc_operator(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            CalcOperator { span, value } => {
                {
                    <swc_common::Span as VisitWith<V>>::visit_with(span, visitor)
                };
                {
                    <CalcOperatorType as VisitWith<V>>::visit_with(value, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for CalcOperatorType {
    #[doc = "Calls [Visit`::visit_calc_operator_type`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_calc_operator_type(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            CalcOperatorType::Add => {}
            CalcOperatorType::Sub => {}
            CalcOperatorType::Mul => {}
            CalcOperatorType::Div => {}
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for CalcProduct {
    #[doc = "Calls [Visit`::visit_calc_product`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_calc_product(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            CalcProduct { span, expressions } => {
                {
                    <swc_common::Span as VisitWith<V>>::visit_with(span, visitor)
                };
                {
                    <Vec<CalcValueOrOperator> as VisitWith<V>>::visit_with(expressions, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for CalcProductOrOperator {
    #[doc = "Calls [Visit`::visit_calc_product_or_operator`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_calc_product_or_operator(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            CalcProductOrOperator::Product { 0: _field_0 } => {
                <CalcProduct as VisitWith<V>>::visit_with(_field_0, visitor);
            }
            CalcProductOrOperator::Operator { 0: _field_0 } => {
                <CalcOperator as VisitWith<V>>::visit_with(_field_0, visitor);
            }
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for CalcSum {
    #[doc = "Calls [Visit`::visit_calc_sum`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_calc_sum(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            CalcSum { span, expressions } => {
                {
                    <swc_common::Span as VisitWith<V>>::visit_with(span, visitor)
                };
                {
                    <Vec<CalcProductOrOperator> as VisitWith<V>>::visit_with(expressions, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for CalcValue {
    #[doc = "Calls [Visit`::visit_calc_value`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_calc_value(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            CalcValue::Number { 0: _field_0 } => {
                <Number as VisitWith<V>>::visit_with(_field_0, visitor);
            }
            CalcValue::Dimension { 0: _field_0 } => {
                <Dimension as VisitWith<V>>::visit_with(_field_0, visitor);
            }
            CalcValue::Percentage { 0: _field_0 } => {
                <Percentage as VisitWith<V>>::visit_with(_field_0, visitor);
            }
            CalcValue::Constant { 0: _field_0 } => {
                <Ident as VisitWith<V>>::visit_with(_field_0, visitor);
            }
            CalcValue::Sum { 0: _field_0 } => {
                <CalcSum as VisitWith<V>>::visit_with(_field_0, visitor);
            }
            CalcValue::Function { 0: _field_0 } => {
                <Function as VisitWith<V>>::visit_with(_field_0, visitor);
            }
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for CalcValueOrOperator {
    #[doc = "Calls [Visit`::visit_calc_value_or_operator`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_calc_value_or_operator(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            CalcValueOrOperator::Value { 0: _field_0 } => {
                <CalcValue as VisitWith<V>>::visit_with(_field_0, visitor);
            }
            CalcValueOrOperator::Operator { 0: _field_0 } => {
                <CalcOperator as VisitWith<V>>::visit_with(_field_0, visitor);
            }
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for ClassSelector {
    #[doc = "Calls [Visit`::visit_class_selector`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_class_selector(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            ClassSelector { span, text } => {
                {
                    <swc_common::Span as VisitWith<V>>::visit_with(span, visitor)
                };
                {
                    <Ident as VisitWith<V>>::visit_with(text, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for CmykComponent {
    #[doc = "Calls [Visit`::visit_cmyk_component`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_cmyk_component(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            CmykComponent::Number { 0: _field_0 } => {
                <Number as VisitWith<V>>::visit_with(_field_0, visitor);
            }
            CmykComponent::Percentage { 0: _field_0 } => {
                <Percentage as VisitWith<V>>::visit_with(_field_0, visitor);
            }
            CmykComponent::Function { 0: _field_0 } => {
                <Function as VisitWith<V>>::visit_with(_field_0, visitor);
            }
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for Color {
    #[doc = "Calls [Visit`::visit_color`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_color(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            Color::AbsoluteColorBase { 0: _field_0 } => {
                <AbsoluteColorBase as VisitWith<V>>::visit_with(_field_0, visitor);
            }
            Color::CurrentColorOrSystemColor { 0: _field_0 } => {
                <Ident as VisitWith<V>>::visit_with(_field_0, visitor);
            }
            Color::Function { 0: _field_0 } => {
                <Function as VisitWith<V>>::visit_with(_field_0, visitor);
            }
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for ColorProfileName {
    #[doc = "Calls [Visit`::visit_color_profile_name`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_color_profile_name(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            ColorProfileName::DashedIdent { 0: _field_0 } => {
                <DashedIdent as VisitWith<V>>::visit_with(_field_0, visitor);
            }
            ColorProfileName::Ident { 0: _field_0 } => {
                <Ident as VisitWith<V>>::visit_with(_field_0, visitor);
            }
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for Combinator {
    #[doc = "Calls [Visit`::visit_combinator`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_combinator(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            Combinator { span, value } => {
                {
                    <swc_common::Span as VisitWith<V>>::visit_with(span, visitor)
                };
                {
                    <CombinatorValue as VisitWith<V>>::visit_with(value, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for CombinatorValue {
    #[doc = "Calls [Visit`::visit_combinator_value`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_combinator_value(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            CombinatorValue::Descendant => {}
            CombinatorValue::NextSibling => {}
            CombinatorValue::Child => {}
            CombinatorValue::LaterSibling => {}
            CombinatorValue::Column => {}
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for ComplexSelector {
    #[doc = "Calls [Visit`::visit_complex_selector`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_complex_selector(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            ComplexSelector { span, children } => {
                {
                    <swc_common::Span as VisitWith<V>>::visit_with(span, visitor)
                };
                {
                    <Vec<ComplexSelectorChildren> as VisitWith<V>>::visit_with(children, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for ComplexSelectorChildren {
    #[doc = "Calls [Visit`::visit_complex_selector_children`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_complex_selector_children(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            ComplexSelectorChildren::CompoundSelector { 0: _field_0 } => {
                <CompoundSelector as VisitWith<V>>::visit_with(_field_0, visitor);
            }
            ComplexSelectorChildren::Combinator { 0: _field_0 } => {
                <Combinator as VisitWith<V>>::visit_with(_field_0, visitor);
            }
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for ComponentValue {
    #[doc = "Calls [Visit`::visit_component_value`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_component_value(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            ComponentValue::PreservedToken { 0: _field_0 } => {
                <Box<TokenAndSpan> as VisitWith<V>>::visit_with(_field_0, visitor);
            }
            ComponentValue::Function { 0: _field_0 } => {
                <Box<Function> as VisitWith<V>>::visit_with(_field_0, visitor);
            }
            ComponentValue::SimpleBlock { 0: _field_0 } => {
                <Box<SimpleBlock> as VisitWith<V>>::visit_with(_field_0, visitor);
            }
            ComponentValue::AtRule { 0: _field_0 } => {
                <Box<AtRule> as VisitWith<V>>::visit_with(_field_0, visitor);
            }
            ComponentValue::QualifiedRule { 0: _field_0 } => {
                <Box<QualifiedRule> as VisitWith<V>>::visit_with(_field_0, visitor);
            }
            ComponentValue::ListOfComponentValues { 0: _field_0 } => {
                <Box<ListOfComponentValues> as VisitWith<V>>::visit_with(_field_0, visitor);
            }
            ComponentValue::KeyframeBlock { 0: _field_0 } => {
                <Box<KeyframeBlock> as VisitWith<V>>::visit_with(_field_0, visitor);
            }
            ComponentValue::Ident { 0: _field_0 } => {
                <Box<Ident> as VisitWith<V>>::visit_with(_field_0, visitor);
            }
            ComponentValue::DashedIdent { 0: _field_0 } => {
                <Box<DashedIdent> as VisitWith<V>>::visit_with(_field_0, visitor);
            }
            ComponentValue::Str { 0: _field_0 } => {
                <Box<Str> as VisitWith<V>>::visit_with(_field_0, visitor);
            }
            ComponentValue::Url { 0: _field_0 } => {
                <Box<Url> as VisitWith<V>>::visit_with(_field_0, visitor);
            }
            ComponentValue::Integer { 0: _field_0 } => {
                <Box<Integer> as VisitWith<V>>::visit_with(_field_0, visitor);
            }
            ComponentValue::Number { 0: _field_0 } => {
                <Box<Number> as VisitWith<V>>::visit_with(_field_0, visitor);
            }
            ComponentValue::Percentage { 0: _field_0 } => {
                <Box<Percentage> as VisitWith<V>>::visit_with(_field_0, visitor);
            }
            ComponentValue::Dimension { 0: _field_0 } => {
                <Box<Dimension> as VisitWith<V>>::visit_with(_field_0, visitor);
            }
            ComponentValue::LengthPercentage { 0: _field_0 } => {
                <Box<LengthPercentage> as VisitWith<V>>::visit_with(_field_0, visitor);
            }
            ComponentValue::FrequencyPercentage { 0: _field_0 } => {
                <Box<FrequencyPercentage> as VisitWith<V>>::visit_with(_field_0, visitor);
            }
            ComponentValue::AnglePercentage { 0: _field_0 } => {
                <Box<AnglePercentage> as VisitWith<V>>::visit_with(_field_0, visitor);
            }
            ComponentValue::TimePercentage { 0: _field_0 } => {
                <Box<TimePercentage> as VisitWith<V>>::visit_with(_field_0, visitor);
            }
            ComponentValue::Ratio { 0: _field_0 } => {
                <Box<Ratio> as VisitWith<V>>::visit_with(_field_0, visitor);
            }
            ComponentValue::UnicodeRange { 0: _field_0 } => {
                <Box<UnicodeRange> as VisitWith<V>>::visit_with(_field_0, visitor);
            }
            ComponentValue::Color { 0: _field_0 } => {
                <Box<Color> as VisitWith<V>>::visit_with(_field_0, visitor);
            }
            ComponentValue::AlphaValue { 0: _field_0 } => {
                <Box<AlphaValue> as VisitWith<V>>::visit_with(_field_0, visitor);
            }
            ComponentValue::Hue { 0: _field_0 } => {
                <Box<Hue> as VisitWith<V>>::visit_with(_field_0, visitor);
            }
            ComponentValue::CmykComponent { 0: _field_0 } => {
                <Box<CmykComponent> as VisitWith<V>>::visit_with(_field_0, visitor);
            }
            ComponentValue::Delimiter { 0: _field_0 } => {
                <Box<Delimiter> as VisitWith<V>>::visit_with(_field_0, visitor);
            }
            ComponentValue::CalcSum { 0: _field_0 } => {
                <Box<CalcSum> as VisitWith<V>>::visit_with(_field_0, visitor);
            }
            ComponentValue::ComplexSelector { 0: _field_0 } => {
                <Box<ComplexSelector> as VisitWith<V>>::visit_with(_field_0, visitor);
            }
            ComponentValue::LayerName { 0: _field_0 } => {
                <Box<LayerName> as VisitWith<V>>::visit_with(_field_0, visitor);
            }
            ComponentValue::SupportsCondition { 0: _field_0 } => {
                <Box<SupportsCondition> as VisitWith<V>>::visit_with(_field_0, visitor);
            }
            ComponentValue::Declaration { 0: _field_0 } => {
                <Box<Declaration> as VisitWith<V>>::visit_with(_field_0, visitor);
            }
            ComponentValue::IdSelector { 0: _field_0 } => {
                <Box<IdSelector> as VisitWith<V>>::visit_with(_field_0, visitor);
            }
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for CompoundSelector {
    #[doc = "Calls [Visit`::visit_compound_selector`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_compound_selector(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            CompoundSelector {
                span,
                nesting_selector,
                type_selector,
                subclass_selectors,
            } => {
                {
                    <swc_common::Span as VisitWith<V>>::visit_with(span, visitor)
                };
                {
                    <Option<NestingSelector> as VisitWith<V>>::visit_with(nesting_selector, visitor)
                };
                {
                    <Option<Box<TypeSelector>> as VisitWith<V>>::visit_with(type_selector, visitor)
                };
                {
                    <Vec<SubclassSelector> as VisitWith<V>>::visit_with(subclass_selectors, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for CompoundSelectorList {
    #[doc = "Calls [Visit`::visit_compound_selector_list`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_compound_selector_list(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            CompoundSelectorList { span, children } => {
                {
                    <swc_common::Span as VisitWith<V>>::visit_with(span, visitor)
                };
                {
                    <Vec<CompoundSelector> as VisitWith<V>>::visit_with(children, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for ContainerCondition {
    #[doc = "Calls [Visit`::visit_container_condition`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_container_condition(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            ContainerCondition { span, name, query } => {
                {
                    <swc_common::Span as VisitWith<V>>::visit_with(span, visitor)
                };
                {
                    <Option<ContainerName> as VisitWith<V>>::visit_with(name, visitor)
                };
                {
                    <ContainerQuery as VisitWith<V>>::visit_with(query, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for ContainerName {
    #[doc = "Calls [Visit`::visit_container_name`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_container_name(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            ContainerName::CustomIdent { 0: _field_0 } => {
                <CustomIdent as VisitWith<V>>::visit_with(_field_0, visitor);
            }
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for ContainerQuery {
    #[doc = "Calls [Visit`::visit_container_query`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_container_query(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            ContainerQuery { span, queries } => {
                {
                    <swc_common::Span as VisitWith<V>>::visit_with(span, visitor)
                };
                {
                    <Vec<ContainerQueryType> as VisitWith<V>>::visit_with(queries, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for ContainerQueryAnd {
    #[doc = "Calls [Visit`::visit_container_query_and`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_container_query_and(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            ContainerQueryAnd {
                span,
                keyword,
                query,
            } => {
                {
                    <swc_common::Span as VisitWith<V>>::visit_with(span, visitor)
                };
                {
                    <Option<Ident> as VisitWith<V>>::visit_with(keyword, visitor)
                };
                {
                    <QueryInParens as VisitWith<V>>::visit_with(query, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for ContainerQueryNot {
    #[doc = "Calls [Visit`::visit_container_query_not`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_container_query_not(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            ContainerQueryNot {
                span,
                keyword,
                query,
            } => {
                {
                    <swc_common::Span as VisitWith<V>>::visit_with(span, visitor)
                };
                {
                    <Option<Ident> as VisitWith<V>>::visit_with(keyword, visitor)
                };
                {
                    <QueryInParens as VisitWith<V>>::visit_with(query, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for ContainerQueryOr {
    #[doc = "Calls [Visit`::visit_container_query_or`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_container_query_or(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            ContainerQueryOr {
                span,
                keyword,
                query,
            } => {
                {
                    <swc_common::Span as VisitWith<V>>::visit_with(span, visitor)
                };
                {
                    <Option<Ident> as VisitWith<V>>::visit_with(keyword, visitor)
                };
                {
                    <QueryInParens as VisitWith<V>>::visit_with(query, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for ContainerQueryType {
    #[doc = "Calls [Visit`::visit_container_query_type`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_container_query_type(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            ContainerQueryType::Not { 0: _field_0 } => {
                <ContainerQueryNot as VisitWith<V>>::visit_with(_field_0, visitor);
            }
            ContainerQueryType::And { 0: _field_0 } => {
                <ContainerQueryAnd as VisitWith<V>>::visit_with(_field_0, visitor);
            }
            ContainerQueryType::Or { 0: _field_0 } => {
                <ContainerQueryOr as VisitWith<V>>::visit_with(_field_0, visitor);
            }
            ContainerQueryType::QueryInParens { 0: _field_0 } => {
                <QueryInParens as VisitWith<V>>::visit_with(_field_0, visitor);
            }
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for CustomHighlightName {
    #[doc = "Calls [Visit`::visit_custom_highlight_name`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_custom_highlight_name(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            CustomHighlightName { span, value, raw } => {
                {
                    <swc_common::Span as VisitWith<V>>::visit_with(span, visitor)
                };
                {
                    <swc_atoms::Atom as VisitWith<V>>::visit_with(value, visitor)
                };
                {
                    <Option<swc_atoms::Atom> as VisitWith<V>>::visit_with(raw, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for CustomIdent {
    #[doc = "Calls [Visit`::visit_custom_ident`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_custom_ident(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            CustomIdent { span, value, raw } => {
                {
                    <swc_common::Span as VisitWith<V>>::visit_with(span, visitor)
                };
                {
                    <swc_atoms::Atom as VisitWith<V>>::visit_with(value, visitor)
                };
                {
                    <Option<swc_atoms::Atom> as VisitWith<V>>::visit_with(raw, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for CustomMediaQuery {
    #[doc = "Calls [Visit`::visit_custom_media_query`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_custom_media_query(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            CustomMediaQuery { span, name, media } => {
                {
                    <swc_common::Span as VisitWith<V>>::visit_with(span, visitor)
                };
                {
                    <ExtensionName as VisitWith<V>>::visit_with(name, visitor)
                };
                {
                    <CustomMediaQueryMediaType as VisitWith<V>>::visit_with(media, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for CustomMediaQueryMediaType {
    #[doc = "Calls [Visit`::visit_custom_media_query_media_type`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_custom_media_query_media_type(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            CustomMediaQueryMediaType::Ident { 0: _field_0 } => {
                <Ident as VisitWith<V>>::visit_with(_field_0, visitor);
            }
            CustomMediaQueryMediaType::MediaQueryList { 0: _field_0 } => {
                <MediaQueryList as VisitWith<V>>::visit_with(_field_0, visitor);
            }
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for CustomPropertyName {
    #[doc = "Calls [Visit`::visit_custom_property_name`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_custom_property_name(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            CustomPropertyName { span, value, raw } => {
                {
                    <swc_common::Span as VisitWith<V>>::visit_with(span, visitor)
                };
                {
                    <swc_atoms::Atom as VisitWith<V>>::visit_with(value, visitor)
                };
                {
                    <Option<swc_atoms::Atom> as VisitWith<V>>::visit_with(raw, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for DashedIdent {
    #[doc = "Calls [Visit`::visit_dashed_ident`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_dashed_ident(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            DashedIdent { span, value, raw } => {
                {
                    <swc_common::Span as VisitWith<V>>::visit_with(span, visitor)
                };
                {
                    <swc_atoms::Atom as VisitWith<V>>::visit_with(value, visitor)
                };
                {
                    <Option<swc_atoms::Atom> as VisitWith<V>>::visit_with(raw, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for Declaration {
    #[doc = "Calls [Visit`::visit_declaration`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_declaration(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            Declaration {
                span,
                name,
                value,
                important,
            } => {
                {
                    <swc_common::Span as VisitWith<V>>::visit_with(span, visitor)
                };
                {
                    <DeclarationName as VisitWith<V>>::visit_with(name, visitor)
                };
                {
                    <Vec<ComponentValue> as VisitWith<V>>::visit_with(value, visitor)
                };
                {
                    <Option<ImportantFlag> as VisitWith<V>>::visit_with(important, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for DeclarationName {
    #[doc = "Calls [Visit`::visit_declaration_name`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_declaration_name(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            DeclarationName::Ident { 0: _field_0 } => {
                <Ident as VisitWith<V>>::visit_with(_field_0, visitor);
            }
            DeclarationName::DashedIdent { 0: _field_0 } => {
                <DashedIdent as VisitWith<V>>::visit_with(_field_0, visitor);
            }
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for DeclarationOrAtRule {
    #[doc = "Calls [Visit`::visit_declaration_or_at_rule`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_declaration_or_at_rule(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            DeclarationOrAtRule::Declaration { 0: _field_0 } => {
                <Box<Declaration> as VisitWith<V>>::visit_with(_field_0, visitor);
            }
            DeclarationOrAtRule::AtRule { 0: _field_0 } => {
                <Box<AtRule> as VisitWith<V>>::visit_with(_field_0, visitor);
            }
            DeclarationOrAtRule::ListOfComponentValues { 0: _field_0 } => {
                <Box<ListOfComponentValues> as VisitWith<V>>::visit_with(_field_0, visitor);
            }
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for Delimiter {
    #[doc = "Calls [Visit`::visit_delimiter`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_delimiter(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            Delimiter { span, value } => {
                {
                    <swc_common::Span as VisitWith<V>>::visit_with(span, visitor)
                };
                {
                    <DelimiterValue as VisitWith<V>>::visit_with(value, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for DelimiterValue {
    #[doc = "Calls [Visit`::visit_delimiter_value`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_delimiter_value(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            DelimiterValue::Comma => {}
            DelimiterValue::Solidus => {}
            DelimiterValue::Semicolon => {}
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for Dimension {
    #[doc = "Calls [Visit`::visit_dimension`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_dimension(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            Dimension::Length { 0: _field_0 } => {
                <Length as VisitWith<V>>::visit_with(_field_0, visitor);
            }
            Dimension::Angle { 0: _field_0 } => {
                <Angle as VisitWith<V>>::visit_with(_field_0, visitor);
            }
            Dimension::Time { 0: _field_0 } => {
                <Time as VisitWith<V>>::visit_with(_field_0, visitor);
            }
            Dimension::Frequency { 0: _field_0 } => {
                <Frequency as VisitWith<V>>::visit_with(_field_0, visitor);
            }
            Dimension::Resolution { 0: _field_0 } => {
                <Resolution as VisitWith<V>>::visit_with(_field_0, visitor);
            }
            Dimension::Flex { 0: _field_0 } => {
                <Flex as VisitWith<V>>::visit_with(_field_0, visitor);
            }
            Dimension::UnknownDimension { 0: _field_0 } => {
                <UnknownDimension as VisitWith<V>>::visit_with(_field_0, visitor);
            }
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for DimensionToken {
    #[doc = "Calls [Visit`::visit_dimension_token`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_dimension_token(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            DimensionToken {
                value,
                raw_value,
                unit,
                type_flag,
                raw_unit,
            } => {
                {
                    <swc_atoms::Atom as VisitWith<V>>::visit_with(raw_value, visitor)
                };
                {
                    <swc_atoms::Atom as VisitWith<V>>::visit_with(unit, visitor)
                };
                {
                    <NumberType as VisitWith<V>>::visit_with(type_flag, visitor)
                };
                {
                    <swc_atoms::Atom as VisitWith<V>>::visit_with(raw_unit, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for DocumentPrelude {
    #[doc = "Calls [Visit`::visit_document_prelude`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_document_prelude(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            DocumentPrelude {
                span,
                matching_functions,
            } => {
                {
                    <swc_common::Span as VisitWith<V>>::visit_with(span, visitor)
                };
                {
                    <Vec<DocumentPreludeMatchingFunction> as VisitWith<V>>::visit_with(
                        matching_functions,
                        visitor,
                    )
                };
            }
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for DocumentPreludeMatchingFunction {
    #[doc = "Calls [Visit`::visit_document_prelude_matching_function`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_document_prelude_matching_function(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            DocumentPreludeMatchingFunction::Url { 0: _field_0 } => {
                <Url as VisitWith<V>>::visit_with(_field_0, visitor);
            }
            DocumentPreludeMatchingFunction::Function { 0: _field_0 } => {
                <Function as VisitWith<V>>::visit_with(_field_0, visitor);
            }
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for ExtensionName {
    #[doc = "Calls [Visit`::visit_extension_name`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_extension_name(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            ExtensionName { span, value, raw } => {
                {
                    <swc_common::Span as VisitWith<V>>::visit_with(span, visitor)
                };
                {
                    <swc_atoms::Atom as VisitWith<V>>::visit_with(value, visitor)
                };
                {
                    <Option<swc_atoms::Atom> as VisitWith<V>>::visit_with(raw, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for FamilyName {
    #[doc = "Calls [Visit`::visit_family_name`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_family_name(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            FamilyName::Str { 0: _field_0 } => {
                <Str as VisitWith<V>>::visit_with(_field_0, visitor);
            }
            FamilyName::SequenceOfCustomIdents { 0: _field_0 } => {
                <SequenceOfCustomIdents as VisitWith<V>>::visit_with(_field_0, visitor);
            }
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for Flex {
    #[doc = "Calls [Visit`::visit_flex`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_flex(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            Flex { span, value, unit } => {
                {
                    <swc_common::Span as VisitWith<V>>::visit_with(span, visitor)
                };
                {
                    <Number as VisitWith<V>>::visit_with(value, visitor)
                };
                {
                    <Ident as VisitWith<V>>::visit_with(unit, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for FontFeatureValuesPrelude {
    #[doc = "Calls [Visit`::visit_font_feature_values_prelude`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_font_feature_values_prelude(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            FontFeatureValuesPrelude { span, font_family } => {
                {
                    <swc_common::Span as VisitWith<V>>::visit_with(span, visitor)
                };
                {
                    <Vec<FamilyName> as VisitWith<V>>::visit_with(font_family, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for ForgivingComplexSelector {
    #[doc = "Calls [Visit`::visit_forgiving_complex_selector`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_forgiving_complex_selector(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            ForgivingComplexSelector::ComplexSelector { 0: _field_0 } => {
                <ComplexSelector as VisitWith<V>>::visit_with(_field_0, visitor);
            }
            ForgivingComplexSelector::ListOfComponentValues { 0: _field_0 } => {
                <ListOfComponentValues as VisitWith<V>>::visit_with(_field_0, visitor);
            }
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for ForgivingRelativeSelector {
    #[doc = "Calls [Visit`::visit_forgiving_relative_selector`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_forgiving_relative_selector(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            ForgivingRelativeSelector::RelativeSelector { 0: _field_0 } => {
                <RelativeSelector as VisitWith<V>>::visit_with(_field_0, visitor);
            }
            ForgivingRelativeSelector::ListOfComponentValues { 0: _field_0 } => {
                <ListOfComponentValues as VisitWith<V>>::visit_with(_field_0, visitor);
            }
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for ForgivingRelativeSelectorList {
    #[doc = "Calls [Visit`::visit_forgiving_relative_selector_list`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_forgiving_relative_selector_list(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            ForgivingRelativeSelectorList { span, children } => {
                {
                    <swc_common::Span as VisitWith<V>>::visit_with(span, visitor)
                };
                {
                    <Vec<ForgivingRelativeSelector> as VisitWith<V>>::visit_with(children, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for ForgivingSelectorList {
    #[doc = "Calls [Visit`::visit_forgiving_selector_list`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_forgiving_selector_list(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            ForgivingSelectorList { span, children } => {
                {
                    <swc_common::Span as VisitWith<V>>::visit_with(span, visitor)
                };
                {
                    <Vec<ForgivingComplexSelector> as VisitWith<V>>::visit_with(children, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for Frequency {
    #[doc = "Calls [Visit`::visit_frequency`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_frequency(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            Frequency { span, value, unit } => {
                {
                    <swc_common::Span as VisitWith<V>>::visit_with(span, visitor)
                };
                {
                    <Number as VisitWith<V>>::visit_with(value, visitor)
                };
                {
                    <Ident as VisitWith<V>>::visit_with(unit, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for FrequencyPercentage {
    #[doc = "Calls [Visit`::visit_frequency_percentage`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_frequency_percentage(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            FrequencyPercentage::Frequency { 0: _field_0 } => {
                <Frequency as VisitWith<V>>::visit_with(_field_0, visitor);
            }
            FrequencyPercentage::Percentage { 0: _field_0 } => {
                <Percentage as VisitWith<V>>::visit_with(_field_0, visitor);
            }
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for Function {
    #[doc = "Calls [Visit`::visit_function`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_function(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            Function { span, name, value } => {
                {
                    <swc_common::Span as VisitWith<V>>::visit_with(span, visitor)
                };
                {
                    <FunctionName as VisitWith<V>>::visit_with(name, visitor)
                };
                {
                    <Vec<ComponentValue> as VisitWith<V>>::visit_with(value, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for FunctionName {
    #[doc = "Calls [Visit`::visit_function_name`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_function_name(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            FunctionName::Ident { 0: _field_0 } => {
                <Ident as VisitWith<V>>::visit_with(_field_0, visitor);
            }
            FunctionName::DashedIdent { 0: _field_0 } => {
                <DashedIdent as VisitWith<V>>::visit_with(_field_0, visitor);
            }
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for GeneralEnclosed {
    #[doc = "Calls [Visit`::visit_general_enclosed`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_general_enclosed(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            GeneralEnclosed::Function { 0: _field_0 } => {
                <Function as VisitWith<V>>::visit_with(_field_0, visitor);
            }
            GeneralEnclosed::SimpleBlock { 0: _field_0 } => {
                <SimpleBlock as VisitWith<V>>::visit_with(_field_0, visitor);
            }
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for HexColor {
    #[doc = "Calls [Visit`::visit_hex_color`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_hex_color(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            HexColor { span, value, raw } => {
                {
                    <swc_common::Span as VisitWith<V>>::visit_with(span, visitor)
                };
                {
                    <swc_atoms::Atom as VisitWith<V>>::visit_with(value, visitor)
                };
                {
                    <Option<swc_atoms::Atom> as VisitWith<V>>::visit_with(raw, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for Hue {
    #[doc = "Calls [Visit`::visit_hue`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_hue(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            Hue::Number { 0: _field_0 } => {
                <Number as VisitWith<V>>::visit_with(_field_0, visitor);
            }
            Hue::Angle { 0: _field_0 } => {
                <Angle as VisitWith<V>>::visit_with(_field_0, visitor);
            }
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for IdSelector {
    #[doc = "Calls [Visit`::visit_id_selector`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_id_selector(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            IdSelector { span, text } => {
                {
                    <swc_common::Span as VisitWith<V>>::visit_with(span, visitor)
                };
                {
                    <Ident as VisitWith<V>>::visit_with(text, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for Ident {
    #[doc = "Calls [Visit`::visit_ident`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_ident(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            Ident { span, value, raw } => {
                {
                    <swc_common::Span as VisitWith<V>>::visit_with(span, visitor)
                };
                {
                    <swc_atoms::Atom as VisitWith<V>>::visit_with(value, visitor)
                };
                {
                    <Option<swc_atoms::Atom> as VisitWith<V>>::visit_with(raw, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for ImportConditions {
    #[doc = "Calls [Visit`::visit_import_conditions`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_import_conditions(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            ImportConditions {
                span,
                supports,
                media,
            } => {
                {
                    <swc_common::Span as VisitWith<V>>::visit_with(span, visitor)
                };
                {
                    <Option<Box<Function>> as VisitWith<V>>::visit_with(supports, visitor)
                };
                {
                    <Option<Box<MediaQueryList>> as VisitWith<V>>::visit_with(media, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for ImportHref {
    #[doc = "Calls [Visit`::visit_import_href`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_import_href(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            ImportHref::Url { 0: _field_0 } => {
                <Url as VisitWith<V>>::visit_with(_field_0, visitor);
            }
            ImportHref::Str { 0: _field_0 } => {
                <Str as VisitWith<V>>::visit_with(_field_0, visitor);
            }
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for ImportLayerName {
    #[doc = "Calls [Visit`::visit_import_layer_name`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_import_layer_name(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            ImportLayerName::Ident { 0: _field_0 } => {
                <Ident as VisitWith<V>>::visit_with(_field_0, visitor);
            }
            ImportLayerName::Function { 0: _field_0 } => {
                <Function as VisitWith<V>>::visit_with(_field_0, visitor);
            }
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for ImportPrelude {
    #[doc = "Calls [Visit`::visit_import_prelude`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_import_prelude(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            ImportPrelude {
                span,
                href,
                layer_name,
                import_conditions,
            } => {
                {
                    <swc_common::Span as VisitWith<V>>::visit_with(span, visitor)
                };
                {
                    <Box<ImportHref> as VisitWith<V>>::visit_with(href, visitor)
                };
                {
                    <Option<Box<ImportLayerName>> as VisitWith<V>>::visit_with(layer_name, visitor)
                };
                {
                    <Option<Box<ImportConditions>> as VisitWith<V>>::visit_with(
                        import_conditions,
                        visitor,
                    )
                };
            }
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for ImportantFlag {
    #[doc = "Calls [Visit`::visit_important_flag`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_important_flag(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            ImportantFlag { span, value } => {
                {
                    <swc_common::Span as VisitWith<V>>::visit_with(span, visitor)
                };
                {
                    <Ident as VisitWith<V>>::visit_with(value, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for Integer {
    #[doc = "Calls [Visit`::visit_integer`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_integer(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            Integer { span, value, raw } => {
                {
                    <swc_common::Span as VisitWith<V>>::visit_with(span, visitor)
                };
                {
                    <Option<swc_atoms::Atom> as VisitWith<V>>::visit_with(raw, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for KeyframeBlock {
    #[doc = "Calls [Visit`::visit_keyframe_block`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_keyframe_block(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            KeyframeBlock {
                span,
                prelude,
                block,
            } => {
                {
                    <swc_common::Span as VisitWith<V>>::visit_with(span, visitor)
                };
                {
                    <Vec<KeyframeSelector> as VisitWith<V>>::visit_with(prelude, visitor)
                };
                {
                    <SimpleBlock as VisitWith<V>>::visit_with(block, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for KeyframeSelector {
    #[doc = "Calls [Visit`::visit_keyframe_selector`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_keyframe_selector(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            KeyframeSelector::Ident { 0: _field_0 } => {
                <Ident as VisitWith<V>>::visit_with(_field_0, visitor);
            }
            KeyframeSelector::Percentage { 0: _field_0 } => {
                <Percentage as VisitWith<V>>::visit_with(_field_0, visitor);
            }
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for KeyframesName {
    #[doc = "Calls [Visit`::visit_keyframes_name`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_keyframes_name(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            KeyframesName::CustomIdent { 0: _field_0 } => {
                <Box<CustomIdent> as VisitWith<V>>::visit_with(_field_0, visitor);
            }
            KeyframesName::Str { 0: _field_0 } => {
                <Box<Str> as VisitWith<V>>::visit_with(_field_0, visitor);
            }
            KeyframesName::PseudoPrefix { 0: _field_0 } => {
                <Box<KeyframesPseudoPrefix> as VisitWith<V>>::visit_with(_field_0, visitor);
            }
            KeyframesName::PseudoFunction { 0: _field_0 } => {
                <Box<KeyframesPseudoFunction> as VisitWith<V>>::visit_with(_field_0, visitor);
            }
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for KeyframesPseudoFunction {
    #[doc = "Calls [Visit`::visit_keyframes_pseudo_function`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_keyframes_pseudo_function(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            KeyframesPseudoFunction { span, pseudo, name } => {
                {
                    <swc_common::Span as VisitWith<V>>::visit_with(span, visitor)
                };
                {
                    <Ident as VisitWith<V>>::visit_with(pseudo, visitor)
                };
                {
                    <KeyframesName as VisitWith<V>>::visit_with(name, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for KeyframesPseudoPrefix {
    #[doc = "Calls [Visit`::visit_keyframes_pseudo_prefix`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_keyframes_pseudo_prefix(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            KeyframesPseudoPrefix { span, pseudo, name } => {
                {
                    <swc_common::Span as VisitWith<V>>::visit_with(span, visitor)
                };
                {
                    <Ident as VisitWith<V>>::visit_with(pseudo, visitor)
                };
                {
                    <KeyframesName as VisitWith<V>>::visit_with(name, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for LayerName {
    #[doc = "Calls [Visit`::visit_layer_name`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_layer_name(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            LayerName { span, name } => {
                {
                    <swc_common::Span as VisitWith<V>>::visit_with(span, visitor)
                };
                {
                    <Vec<Ident> as VisitWith<V>>::visit_with(name, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for LayerNameList {
    #[doc = "Calls [Visit`::visit_layer_name_list`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_layer_name_list(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            LayerNameList { span, name_list } => {
                {
                    <swc_common::Span as VisitWith<V>>::visit_with(span, visitor)
                };
                {
                    <Vec<LayerName> as VisitWith<V>>::visit_with(name_list, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for LayerPrelude {
    #[doc = "Calls [Visit`::visit_layer_prelude`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_layer_prelude(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            LayerPrelude::Name { 0: _field_0 } => {
                <LayerName as VisitWith<V>>::visit_with(_field_0, visitor);
            }
            LayerPrelude::NameList { 0: _field_0 } => {
                <LayerNameList as VisitWith<V>>::visit_with(_field_0, visitor);
            }
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for Length {
    #[doc = "Calls [Visit`::visit_length`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_length(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            Length { span, value, unit } => {
                {
                    <swc_common::Span as VisitWith<V>>::visit_with(span, visitor)
                };
                {
                    <Number as VisitWith<V>>::visit_with(value, visitor)
                };
                {
                    <Ident as VisitWith<V>>::visit_with(unit, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for LengthPercentage {
    #[doc = "Calls [Visit`::visit_length_percentage`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_length_percentage(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            LengthPercentage::Length { 0: _field_0 } => {
                <Length as VisitWith<V>>::visit_with(_field_0, visitor);
            }
            LengthPercentage::Percentage { 0: _field_0 } => {
                <Percentage as VisitWith<V>>::visit_with(_field_0, visitor);
            }
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for ListOfComponentValues {
    #[doc = "Calls [Visit`::visit_list_of_component_values`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_list_of_component_values(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            ListOfComponentValues { span, children } => {
                {
                    <swc_common::Span as VisitWith<V>>::visit_with(span, visitor)
                };
                {
                    <Vec<ComponentValue> as VisitWith<V>>::visit_with(children, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for MediaAnd {
    #[doc = "Calls [Visit`::visit_media_and`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_media_and(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            MediaAnd {
                span,
                keyword,
                condition,
            } => {
                {
                    <swc_common::Span as VisitWith<V>>::visit_with(span, visitor)
                };
                {
                    <Option<Ident> as VisitWith<V>>::visit_with(keyword, visitor)
                };
                {
                    <MediaInParens as VisitWith<V>>::visit_with(condition, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for MediaCondition {
    #[doc = "Calls [Visit`::visit_media_condition`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_media_condition(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            MediaCondition { span, conditions } => {
                {
                    <swc_common::Span as VisitWith<V>>::visit_with(span, visitor)
                };
                {
                    <Vec<MediaConditionAllType> as VisitWith<V>>::visit_with(conditions, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for MediaConditionAllType {
    #[doc = "Calls [Visit`::visit_media_condition_all_type`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_media_condition_all_type(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            MediaConditionAllType::Not { 0: _field_0 } => {
                <MediaNot as VisitWith<V>>::visit_with(_field_0, visitor);
            }
            MediaConditionAllType::And { 0: _field_0 } => {
                <MediaAnd as VisitWith<V>>::visit_with(_field_0, visitor);
            }
            MediaConditionAllType::Or { 0: _field_0 } => {
                <MediaOr as VisitWith<V>>::visit_with(_field_0, visitor);
            }
            MediaConditionAllType::MediaInParens { 0: _field_0 } => {
                <MediaInParens as VisitWith<V>>::visit_with(_field_0, visitor);
            }
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for MediaConditionType {
    #[doc = "Calls [Visit`::visit_media_condition_type`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_media_condition_type(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            MediaConditionType::All { 0: _field_0 } => {
                <MediaCondition as VisitWith<V>>::visit_with(_field_0, visitor);
            }
            MediaConditionType::WithoutOr { 0: _field_0 } => {
                <MediaConditionWithoutOr as VisitWith<V>>::visit_with(_field_0, visitor);
            }
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for MediaConditionWithoutOr {
    #[doc = "Calls [Visit`::visit_media_condition_without_or`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_media_condition_without_or(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            MediaConditionWithoutOr { span, conditions } => {
                {
                    <swc_common::Span as VisitWith<V>>::visit_with(span, visitor)
                };
                {
                    <Vec<MediaConditionWithoutOrType> as VisitWith<V>>::visit_with(
                        conditions, visitor,
                    )
                };
            }
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for MediaConditionWithoutOrType {
    #[doc = "Calls [Visit`::visit_media_condition_without_or_type`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_media_condition_without_or_type(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            MediaConditionWithoutOrType::Not { 0: _field_0 } => {
                <MediaNot as VisitWith<V>>::visit_with(_field_0, visitor);
            }
            MediaConditionWithoutOrType::And { 0: _field_0 } => {
                <MediaAnd as VisitWith<V>>::visit_with(_field_0, visitor);
            }
            MediaConditionWithoutOrType::MediaInParens { 0: _field_0 } => {
                <MediaInParens as VisitWith<V>>::visit_with(_field_0, visitor);
            }
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for MediaFeature {
    #[doc = "Calls [Visit`::visit_media_feature`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_media_feature(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            MediaFeature::Plain { 0: _field_0 } => {
                <MediaFeaturePlain as VisitWith<V>>::visit_with(_field_0, visitor);
            }
            MediaFeature::Boolean { 0: _field_0 } => {
                <MediaFeatureBoolean as VisitWith<V>>::visit_with(_field_0, visitor);
            }
            MediaFeature::Range { 0: _field_0 } => {
                <MediaFeatureRange as VisitWith<V>>::visit_with(_field_0, visitor);
            }
            MediaFeature::RangeInterval { 0: _field_0 } => {
                <MediaFeatureRangeInterval as VisitWith<V>>::visit_with(_field_0, visitor);
            }
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for MediaFeatureBoolean {
    #[doc = "Calls [Visit`::visit_media_feature_boolean`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_media_feature_boolean(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            MediaFeatureBoolean { span, name } => {
                {
                    <swc_common::Span as VisitWith<V>>::visit_with(span, visitor)
                };
                {
                    <MediaFeatureName as VisitWith<V>>::visit_with(name, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for MediaFeatureName {
    #[doc = "Calls [Visit`::visit_media_feature_name`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_media_feature_name(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            MediaFeatureName::Ident { 0: _field_0 } => {
                <Ident as VisitWith<V>>::visit_with(_field_0, visitor);
            }
            MediaFeatureName::ExtensionName { 0: _field_0 } => {
                <ExtensionName as VisitWith<V>>::visit_with(_field_0, visitor);
            }
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for MediaFeaturePlain {
    #[doc = "Calls [Visit`::visit_media_feature_plain`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_media_feature_plain(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            MediaFeaturePlain { span, name, value } => {
                {
                    <swc_common::Span as VisitWith<V>>::visit_with(span, visitor)
                };
                {
                    <MediaFeatureName as VisitWith<V>>::visit_with(name, visitor)
                };
                {
                    <Box<MediaFeatureValue> as VisitWith<V>>::visit_with(value, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for MediaFeatureRange {
    #[doc = "Calls [Visit`::visit_media_feature_range`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_media_feature_range(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            MediaFeatureRange {
                span,
                left,
                comparison,
                right,
            } => {
                {
                    <swc_common::Span as VisitWith<V>>::visit_with(span, visitor)
                };
                {
                    <Box<MediaFeatureValue> as VisitWith<V>>::visit_with(left, visitor)
                };
                {
                    <MediaFeatureRangeComparison as VisitWith<V>>::visit_with(comparison, visitor)
                };
                {
                    <Box<MediaFeatureValue> as VisitWith<V>>::visit_with(right, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for MediaFeatureRangeComparison {
    #[doc = "Calls [Visit`::visit_media_feature_range_comparison`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_media_feature_range_comparison(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            MediaFeatureRangeComparison::Lt => {}
            MediaFeatureRangeComparison::Le => {}
            MediaFeatureRangeComparison::Gt => {}
            MediaFeatureRangeComparison::Ge => {}
            MediaFeatureRangeComparison::Eq => {}
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for MediaFeatureRangeInterval {
    #[doc = "Calls [Visit`::visit_media_feature_range_interval`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_media_feature_range_interval(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            MediaFeatureRangeInterval {
                span,
                left,
                left_comparison,
                name,
                right_comparison,
                right,
            } => {
                {
                    <swc_common::Span as VisitWith<V>>::visit_with(span, visitor)
                };
                {
                    <Box<MediaFeatureValue> as VisitWith<V>>::visit_with(left, visitor)
                };
                {
                    <MediaFeatureRangeComparison as VisitWith<V>>::visit_with(
                        left_comparison,
                        visitor,
                    )
                };
                {
                    <MediaFeatureName as VisitWith<V>>::visit_with(name, visitor)
                };
                {
                    <MediaFeatureRangeComparison as VisitWith<V>>::visit_with(
                        right_comparison,
                        visitor,
                    )
                };
                {
                    <Box<MediaFeatureValue> as VisitWith<V>>::visit_with(right, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for MediaFeatureValue {
    #[doc = "Calls [Visit`::visit_media_feature_value`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_media_feature_value(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            MediaFeatureValue::Number { 0: _field_0 } => {
                <Number as VisitWith<V>>::visit_with(_field_0, visitor);
            }
            MediaFeatureValue::Dimension { 0: _field_0 } => {
                <Dimension as VisitWith<V>>::visit_with(_field_0, visitor);
            }
            MediaFeatureValue::Ident { 0: _field_0 } => {
                <Ident as VisitWith<V>>::visit_with(_field_0, visitor);
            }
            MediaFeatureValue::Ratio { 0: _field_0 } => {
                <Ratio as VisitWith<V>>::visit_with(_field_0, visitor);
            }
            MediaFeatureValue::Function { 0: _field_0 } => {
                <Function as VisitWith<V>>::visit_with(_field_0, visitor);
            }
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for MediaInParens {
    #[doc = "Calls [Visit`::visit_media_in_parens`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_media_in_parens(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            MediaInParens::MediaCondition { 0: _field_0 } => {
                <MediaCondition as VisitWith<V>>::visit_with(_field_0, visitor);
            }
            MediaInParens::Feature { 0: _field_0 } => {
                <Box<MediaFeature> as VisitWith<V>>::visit_with(_field_0, visitor);
            }
            MediaInParens::GeneralEnclosed { 0: _field_0 } => {
                <GeneralEnclosed as VisitWith<V>>::visit_with(_field_0, visitor);
            }
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for MediaNot {
    #[doc = "Calls [Visit`::visit_media_not`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_media_not(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            MediaNot {
                span,
                keyword,
                condition,
            } => {
                {
                    <swc_common::Span as VisitWith<V>>::visit_with(span, visitor)
                };
                {
                    <Option<Ident> as VisitWith<V>>::visit_with(keyword, visitor)
                };
                {
                    <MediaInParens as VisitWith<V>>::visit_with(condition, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for MediaOr {
    #[doc = "Calls [Visit`::visit_media_or`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_media_or(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            MediaOr {
                span,
                keyword,
                condition,
            } => {
                {
                    <swc_common::Span as VisitWith<V>>::visit_with(span, visitor)
                };
                {
                    <Option<Ident> as VisitWith<V>>::visit_with(keyword, visitor)
                };
                {
                    <MediaInParens as VisitWith<V>>::visit_with(condition, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for MediaQuery {
    #[doc = "Calls [Visit`::visit_media_query`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_media_query(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            MediaQuery {
                span,
                modifier,
                media_type,
                keyword,
                condition,
            } => {
                {
                    <swc_common::Span as VisitWith<V>>::visit_with(span, visitor)
                };
                {
                    <Option<Ident> as VisitWith<V>>::visit_with(modifier, visitor)
                };
                {
                    <Option<MediaType> as VisitWith<V>>::visit_with(media_type, visitor)
                };
                {
                    <Option<Ident> as VisitWith<V>>::visit_with(keyword, visitor)
                };
                {
                    <Option<Box<MediaConditionType>> as VisitWith<V>>::visit_with(
                        condition, visitor,
                    )
                };
            }
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for MediaQueryList {
    #[doc = "Calls [Visit`::visit_media_query_list`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_media_query_list(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            MediaQueryList { span, queries } => {
                {
                    <swc_common::Span as VisitWith<V>>::visit_with(span, visitor)
                };
                {
                    <Vec<MediaQuery> as VisitWith<V>>::visit_with(queries, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for MediaType {
    #[doc = "Calls [Visit`::visit_media_type`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_media_type(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            MediaType::Ident { 0: _field_0 } => {
                <Ident as VisitWith<V>>::visit_with(_field_0, visitor);
            }
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for NamedNamespace {
    #[doc = "Calls [Visit`::visit_named_namespace`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_named_namespace(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            NamedNamespace { span, name } => {
                {
                    <swc_common::Span as VisitWith<V>>::visit_with(span, visitor)
                };
                {
                    <Ident as VisitWith<V>>::visit_with(name, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for Namespace {
    #[doc = "Calls [Visit`::visit_namespace`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_namespace(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            Namespace::Named { 0: _field_0 } => {
                <NamedNamespace as VisitWith<V>>::visit_with(_field_0, visitor);
            }
            Namespace::Any { 0: _field_0 } => {
                <AnyNamespace as VisitWith<V>>::visit_with(_field_0, visitor);
            }
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for NamespacePrefix {
    #[doc = "Calls [Visit`::visit_namespace_prefix`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_namespace_prefix(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            NamespacePrefix { span, namespace } => {
                {
                    <swc_common::Span as VisitWith<V>>::visit_with(span, visitor)
                };
                {
                    <Option<Namespace> as VisitWith<V>>::visit_with(namespace, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for NamespacePrelude {
    #[doc = "Calls [Visit`::visit_namespace_prelude`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_namespace_prelude(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            NamespacePrelude { span, prefix, uri } => {
                {
                    <swc_common::Span as VisitWith<V>>::visit_with(span, visitor)
                };
                {
                    <Option<Ident> as VisitWith<V>>::visit_with(prefix, visitor)
                };
                {
                    <Box<NamespacePreludeUri> as VisitWith<V>>::visit_with(uri, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for NamespacePreludeUri {
    #[doc = "Calls [Visit`::visit_namespace_prelude_uri`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_namespace_prelude_uri(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            NamespacePreludeUri::Url { 0: _field_0 } => {
                <Url as VisitWith<V>>::visit_with(_field_0, visitor);
            }
            NamespacePreludeUri::Str { 0: _field_0 } => {
                <Str as VisitWith<V>>::visit_with(_field_0, visitor);
            }
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for NestingSelector {
    #[doc = "Calls [Visit`::visit_nesting_selector`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_nesting_selector(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            NestingSelector { span } => {
                {
                    <swc_common::Span as VisitWith<V>>::visit_with(span, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for Number {
    #[doc = "Calls [Visit`::visit_number`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_number(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            Number { span, value, raw } => {
                {
                    <swc_common::Span as VisitWith<V>>::visit_with(span, visitor)
                };
                {
                    <Option<swc_atoms::Atom> as VisitWith<V>>::visit_with(raw, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for NumberType {
    #[doc = "Calls [Visit`::visit_number_type`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_number_type(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            NumberType::Integer => {}
            NumberType::Number => {}
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for PageSelector {
    #[doc = "Calls [Visit`::visit_page_selector`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_page_selector(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            PageSelector {
                span,
                page_type,
                pseudos,
            } => {
                {
                    <swc_common::Span as VisitWith<V>>::visit_with(span, visitor)
                };
                {
                    <Option<PageSelectorType> as VisitWith<V>>::visit_with(page_type, visitor)
                };
                {
                    <Option<Vec<PageSelectorPseudo>> as VisitWith<V>>::visit_with(pseudos, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for PageSelectorList {
    #[doc = "Calls [Visit`::visit_page_selector_list`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_page_selector_list(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            PageSelectorList { span, selectors } => {
                {
                    <swc_common::Span as VisitWith<V>>::visit_with(span, visitor)
                };
                {
                    <Vec<PageSelector> as VisitWith<V>>::visit_with(selectors, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for PageSelectorPseudo {
    #[doc = "Calls [Visit`::visit_page_selector_pseudo`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_page_selector_pseudo(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            PageSelectorPseudo { span, value } => {
                {
                    <swc_common::Span as VisitWith<V>>::visit_with(span, visitor)
                };
                {
                    <Ident as VisitWith<V>>::visit_with(value, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for PageSelectorType {
    #[doc = "Calls [Visit`::visit_page_selector_type`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_page_selector_type(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            PageSelectorType { span, value } => {
                {
                    <swc_common::Span as VisitWith<V>>::visit_with(span, visitor)
                };
                {
                    <Ident as VisitWith<V>>::visit_with(value, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for Percentage {
    #[doc = "Calls [Visit`::visit_percentage`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_percentage(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            Percentage { span, value } => {
                {
                    <swc_common::Span as VisitWith<V>>::visit_with(span, visitor)
                };
                {
                    <Number as VisitWith<V>>::visit_with(value, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for PseudoClassSelector {
    #[doc = "Calls [Visit`::visit_pseudo_class_selector`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_pseudo_class_selector(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            PseudoClassSelector {
                span,
                name,
                children,
            } => {
                {
                    <swc_common::Span as VisitWith<V>>::visit_with(span, visitor)
                };
                {
                    <Ident as VisitWith<V>>::visit_with(name, visitor)
                };
                {
                    <Option<Vec<PseudoClassSelectorChildren>> as VisitWith<V>>::visit_with(
                        children, visitor,
                    )
                };
            }
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for PseudoClassSelectorChildren {
    #[doc = "Calls [Visit`::visit_pseudo_class_selector_children`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_pseudo_class_selector_children(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            PseudoClassSelectorChildren::PreservedToken { 0: _field_0 } => {
                <TokenAndSpan as VisitWith<V>>::visit_with(_field_0, visitor);
            }
            PseudoClassSelectorChildren::AnPlusB { 0: _field_0 } => {
                <AnPlusB as VisitWith<V>>::visit_with(_field_0, visitor);
            }
            PseudoClassSelectorChildren::Ident { 0: _field_0 } => {
                <Ident as VisitWith<V>>::visit_with(_field_0, visitor);
            }
            PseudoClassSelectorChildren::Str { 0: _field_0 } => {
                <Str as VisitWith<V>>::visit_with(_field_0, visitor);
            }
            PseudoClassSelectorChildren::Delimiter { 0: _field_0 } => {
                <Delimiter as VisitWith<V>>::visit_with(_field_0, visitor);
            }
            PseudoClassSelectorChildren::ComplexSelector { 0: _field_0 } => {
                <ComplexSelector as VisitWith<V>>::visit_with(_field_0, visitor);
            }
            PseudoClassSelectorChildren::SelectorList { 0: _field_0 } => {
                <SelectorList as VisitWith<V>>::visit_with(_field_0, visitor);
            }
            PseudoClassSelectorChildren::ForgivingSelectorList { 0: _field_0 } => {
                <ForgivingSelectorList as VisitWith<V>>::visit_with(_field_0, visitor);
            }
            PseudoClassSelectorChildren::CompoundSelectorList { 0: _field_0 } => {
                <CompoundSelectorList as VisitWith<V>>::visit_with(_field_0, visitor);
            }
            PseudoClassSelectorChildren::RelativeSelectorList { 0: _field_0 } => {
                <RelativeSelectorList as VisitWith<V>>::visit_with(_field_0, visitor);
            }
            PseudoClassSelectorChildren::ForgivingRelativeSelectorList { 0: _field_0 } => {
                <ForgivingRelativeSelectorList as VisitWith<V>>::visit_with(_field_0, visitor);
            }
            PseudoClassSelectorChildren::CompoundSelector { 0: _field_0 } => {
                <CompoundSelector as VisitWith<V>>::visit_with(_field_0, visitor);
            }
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for PseudoElementSelector {
    #[doc = "Calls [Visit`::visit_pseudo_element_selector`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_pseudo_element_selector(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            PseudoElementSelector {
                span,
                name,
                children,
            } => {
                {
                    <swc_common::Span as VisitWith<V>>::visit_with(span, visitor)
                };
                {
                    <Ident as VisitWith<V>>::visit_with(name, visitor)
                };
                {
                    <Option<Vec<PseudoElementSelectorChildren>> as VisitWith<V>>::visit_with(
                        children, visitor,
                    )
                };
            }
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for PseudoElementSelectorChildren {
    #[doc = "Calls [Visit`::visit_pseudo_element_selector_children`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_pseudo_element_selector_children(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            PseudoElementSelectorChildren::PreservedToken { 0: _field_0 } => {
                <TokenAndSpan as VisitWith<V>>::visit_with(_field_0, visitor);
            }
            PseudoElementSelectorChildren::Ident { 0: _field_0 } => {
                <Ident as VisitWith<V>>::visit_with(_field_0, visitor);
            }
            PseudoElementSelectorChildren::CompoundSelector { 0: _field_0 } => {
                <CompoundSelector as VisitWith<V>>::visit_with(_field_0, visitor);
            }
            PseudoElementSelectorChildren::CustomHighlightName { 0: _field_0 } => {
                <CustomHighlightName as VisitWith<V>>::visit_with(_field_0, visitor);
            }
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for QualifiedRule {
    #[doc = "Calls [Visit`::visit_qualified_rule`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_qualified_rule(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            QualifiedRule {
                span,
                prelude,
                block,
            } => {
                {
                    <swc_common::Span as VisitWith<V>>::visit_with(span, visitor)
                };
                {
                    <QualifiedRulePrelude as VisitWith<V>>::visit_with(prelude, visitor)
                };
                {
                    <SimpleBlock as VisitWith<V>>::visit_with(block, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for QualifiedRulePrelude {
    #[doc = "Calls [Visit`::visit_qualified_rule_prelude`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_qualified_rule_prelude(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            QualifiedRulePrelude::SelectorList { 0: _field_0 } => {
                <SelectorList as VisitWith<V>>::visit_with(_field_0, visitor);
            }
            QualifiedRulePrelude::RelativeSelectorList { 0: _field_0 } => {
                <RelativeSelectorList as VisitWith<V>>::visit_with(_field_0, visitor);
            }
            QualifiedRulePrelude::ListOfComponentValues { 0: _field_0 } => {
                <ListOfComponentValues as VisitWith<V>>::visit_with(_field_0, visitor);
            }
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for QueryInParens {
    #[doc = "Calls [Visit`::visit_query_in_parens`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_query_in_parens(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            QueryInParens::ContainerQuery { 0: _field_0 } => {
                <Box<ContainerQuery> as VisitWith<V>>::visit_with(_field_0, visitor);
            }
            QueryInParens::SizeFeature { 0: _field_0 } => {
                <SizeFeature as VisitWith<V>>::visit_with(_field_0, visitor);
            }
            QueryInParens::GeneralEnclosed { 0: _field_0 } => {
                <GeneralEnclosed as VisitWith<V>>::visit_with(_field_0, visitor);
            }
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for Ratio {
    #[doc = "Calls [Visit`::visit_ratio`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_ratio(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            Ratio { span, left, right } => {
                {
                    <swc_common::Span as VisitWith<V>>::visit_with(span, visitor)
                };
                {
                    <Number as VisitWith<V>>::visit_with(left, visitor)
                };
                {
                    <Option<Number> as VisitWith<V>>::visit_with(right, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for RelativeSelector {
    #[doc = "Calls [Visit`::visit_relative_selector`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_relative_selector(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            RelativeSelector {
                span,
                combinator,
                selector,
            } => {
                {
                    <swc_common::Span as VisitWith<V>>::visit_with(span, visitor)
                };
                {
                    <Option<Combinator> as VisitWith<V>>::visit_with(combinator, visitor)
                };
                {
                    <ComplexSelector as VisitWith<V>>::visit_with(selector, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for RelativeSelectorList {
    #[doc = "Calls [Visit`::visit_relative_selector_list`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_relative_selector_list(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            RelativeSelectorList { span, children } => {
                {
                    <swc_common::Span as VisitWith<V>>::visit_with(span, visitor)
                };
                {
                    <Vec<RelativeSelector> as VisitWith<V>>::visit_with(children, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for Resolution {
    #[doc = "Calls [Visit`::visit_resolution`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_resolution(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            Resolution { span, value, unit } => {
                {
                    <swc_common::Span as VisitWith<V>>::visit_with(span, visitor)
                };
                {
                    <Number as VisitWith<V>>::visit_with(value, visitor)
                };
                {
                    <Ident as VisitWith<V>>::visit_with(unit, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for Rule {
    #[doc = "Calls [Visit`::visit_rule`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_rule(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            Rule::QualifiedRule { 0: _field_0 } => {
                <Box<QualifiedRule> as VisitWith<V>>::visit_with(_field_0, visitor);
            }
            Rule::AtRule { 0: _field_0 } => {
                <Box<AtRule> as VisitWith<V>>::visit_with(_field_0, visitor);
            }
            Rule::ListOfComponentValues { 0: _field_0 } => {
                <Box<ListOfComponentValues> as VisitWith<V>>::visit_with(_field_0, visitor);
            }
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for ScopeRange {
    #[doc = "Calls [Visit`::visit_scope_range`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_scope_range(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            ScopeRange {
                span,
                scope_start,
                scope_end,
            } => {
                {
                    <swc_common::Span as VisitWith<V>>::visit_with(span, visitor)
                };
                {
                    <Option<ForgivingSelectorList> as VisitWith<V>>::visit_with(
                        scope_start,
                        visitor,
                    )
                };
                {
                    <Option<ForgivingSelectorList> as VisitWith<V>>::visit_with(scope_end, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for SelectorList {
    #[doc = "Calls [Visit`::visit_selector_list`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_selector_list(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            SelectorList { span, children } => {
                {
                    <swc_common::Span as VisitWith<V>>::visit_with(span, visitor)
                };
                {
                    <Vec<ComplexSelector> as VisitWith<V>>::visit_with(children, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for SequenceOfCustomIdents {
    #[doc = "Calls [Visit`::visit_sequence_of_custom_idents`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_sequence_of_custom_idents(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            SequenceOfCustomIdents { span, value } => {
                {
                    <swc_common::Span as VisitWith<V>>::visit_with(span, visitor)
                };
                {
                    <Vec<CustomIdent> as VisitWith<V>>::visit_with(value, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for SimpleBlock {
    #[doc = "Calls [Visit`::visit_simple_block`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_simple_block(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            SimpleBlock { span, name, value } => {
                {
                    <swc_common::Span as VisitWith<V>>::visit_with(span, visitor)
                };
                {
                    <TokenAndSpan as VisitWith<V>>::visit_with(name, visitor)
                };
                {
                    <Vec<ComponentValue> as VisitWith<V>>::visit_with(value, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for SizeFeature {
    #[doc = "Calls [Visit`::visit_size_feature`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_size_feature(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            SizeFeature::Plain { 0: _field_0 } => {
                <SizeFeaturePlain as VisitWith<V>>::visit_with(_field_0, visitor);
            }
            SizeFeature::Boolean { 0: _field_0 } => {
                <SizeFeatureBoolean as VisitWith<V>>::visit_with(_field_0, visitor);
            }
            SizeFeature::Range { 0: _field_0 } => {
                <SizeFeatureRange as VisitWith<V>>::visit_with(_field_0, visitor);
            }
            SizeFeature::RangeInterval { 0: _field_0 } => {
                <SizeFeatureRangeInterval as VisitWith<V>>::visit_with(_field_0, visitor);
            }
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for SizeFeatureBoolean {
    #[doc = "Calls [Visit`::visit_size_feature_boolean`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_size_feature_boolean(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            SizeFeatureBoolean { span, name } => {
                {
                    <swc_common::Span as VisitWith<V>>::visit_with(span, visitor)
                };
                {
                    <SizeFeatureName as VisitWith<V>>::visit_with(name, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for SizeFeatureName {
    #[doc = "Calls [Visit`::visit_size_feature_name`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_size_feature_name(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            SizeFeatureName::Ident { 0: _field_0 } => {
                <Ident as VisitWith<V>>::visit_with(_field_0, visitor);
            }
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for SizeFeaturePlain {
    #[doc = "Calls [Visit`::visit_size_feature_plain`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_size_feature_plain(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            SizeFeaturePlain { span, name, value } => {
                {
                    <swc_common::Span as VisitWith<V>>::visit_with(span, visitor)
                };
                {
                    <SizeFeatureName as VisitWith<V>>::visit_with(name, visitor)
                };
                {
                    <Box<SizeFeatureValue> as VisitWith<V>>::visit_with(value, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for SizeFeatureRange {
    #[doc = "Calls [Visit`::visit_size_feature_range`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_size_feature_range(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            SizeFeatureRange {
                span,
                left,
                comparison,
                right,
            } => {
                {
                    <swc_common::Span as VisitWith<V>>::visit_with(span, visitor)
                };
                {
                    <Box<SizeFeatureValue> as VisitWith<V>>::visit_with(left, visitor)
                };
                {
                    <SizeFeatureRangeComparison as VisitWith<V>>::visit_with(comparison, visitor)
                };
                {
                    <Box<SizeFeatureValue> as VisitWith<V>>::visit_with(right, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for SizeFeatureRangeComparison {
    #[doc = "Calls [Visit`::visit_size_feature_range_comparison`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_size_feature_range_comparison(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            SizeFeatureRangeComparison::Lt => {}
            SizeFeatureRangeComparison::Le => {}
            SizeFeatureRangeComparison::Gt => {}
            SizeFeatureRangeComparison::Ge => {}
            SizeFeatureRangeComparison::Eq => {}
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for SizeFeatureRangeInterval {
    #[doc = "Calls [Visit`::visit_size_feature_range_interval`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_size_feature_range_interval(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            SizeFeatureRangeInterval {
                span,
                left,
                left_comparison,
                name,
                right_comparison,
                right,
            } => {
                {
                    <swc_common::Span as VisitWith<V>>::visit_with(span, visitor)
                };
                {
                    <Box<SizeFeatureValue> as VisitWith<V>>::visit_with(left, visitor)
                };
                {
                    <SizeFeatureRangeComparison as VisitWith<V>>::visit_with(
                        left_comparison,
                        visitor,
                    )
                };
                {
                    <SizeFeatureName as VisitWith<V>>::visit_with(name, visitor)
                };
                {
                    <SizeFeatureRangeComparison as VisitWith<V>>::visit_with(
                        right_comparison,
                        visitor,
                    )
                };
                {
                    <Box<SizeFeatureValue> as VisitWith<V>>::visit_with(right, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for SizeFeatureValue {
    #[doc = "Calls [Visit`::visit_size_feature_value`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_size_feature_value(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            SizeFeatureValue::Number { 0: _field_0 } => {
                <Number as VisitWith<V>>::visit_with(_field_0, visitor);
            }
            SizeFeatureValue::Dimension { 0: _field_0 } => {
                <Dimension as VisitWith<V>>::visit_with(_field_0, visitor);
            }
            SizeFeatureValue::Ident { 0: _field_0 } => {
                <Ident as VisitWith<V>>::visit_with(_field_0, visitor);
            }
            SizeFeatureValue::Ratio { 0: _field_0 } => {
                <Ratio as VisitWith<V>>::visit_with(_field_0, visitor);
            }
            SizeFeatureValue::Function { 0: _field_0 } => {
                <Function as VisitWith<V>>::visit_with(_field_0, visitor);
            }
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for Str {
    #[doc = "Calls [Visit`::visit_str`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_str(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            Str { span, value, raw } => {
                {
                    <swc_common::Span as VisitWith<V>>::visit_with(span, visitor)
                };
                {
                    <swc_atoms::Atom as VisitWith<V>>::visit_with(value, visitor)
                };
                {
                    <Option<swc_atoms::Atom> as VisitWith<V>>::visit_with(raw, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for StyleBlock {
    #[doc = "Calls [Visit`::visit_style_block`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_style_block(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            StyleBlock::AtRule { 0: _field_0 } => {
                <Box<AtRule> as VisitWith<V>>::visit_with(_field_0, visitor);
            }
            StyleBlock::Declaration { 0: _field_0 } => {
                <Box<Declaration> as VisitWith<V>>::visit_with(_field_0, visitor);
            }
            StyleBlock::QualifiedRule { 0: _field_0 } => {
                <Box<QualifiedRule> as VisitWith<V>>::visit_with(_field_0, visitor);
            }
            StyleBlock::ListOfComponentValues { 0: _field_0 } => {
                <Box<ListOfComponentValues> as VisitWith<V>>::visit_with(_field_0, visitor);
            }
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for Stylesheet {
    #[doc = "Calls [Visit`::visit_stylesheet`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_stylesheet(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            Stylesheet { span, rules } => {
                {
                    <swc_common::Span as VisitWith<V>>::visit_with(span, visitor)
                };
                {
                    <Vec<Rule> as VisitWith<V>>::visit_with(rules, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for SubclassSelector {
    #[doc = "Calls [Visit`::visit_subclass_selector`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_subclass_selector(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            SubclassSelector::Id { 0: _field_0 } => {
                <IdSelector as VisitWith<V>>::visit_with(_field_0, visitor);
            }
            SubclassSelector::Class { 0: _field_0 } => {
                <ClassSelector as VisitWith<V>>::visit_with(_field_0, visitor);
            }
            SubclassSelector::Attribute { 0: _field_0 } => {
                <Box<AttributeSelector> as VisitWith<V>>::visit_with(_field_0, visitor);
            }
            SubclassSelector::PseudoClass { 0: _field_0 } => {
                <PseudoClassSelector as VisitWith<V>>::visit_with(_field_0, visitor);
            }
            SubclassSelector::PseudoElement { 0: _field_0 } => {
                <PseudoElementSelector as VisitWith<V>>::visit_with(_field_0, visitor);
            }
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for SupportsAnd {
    #[doc = "Calls [Visit`::visit_supports_and`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_supports_and(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            SupportsAnd {
                span,
                keyword,
                condition,
            } => {
                {
                    <swc_common::Span as VisitWith<V>>::visit_with(span, visitor)
                };
                {
                    <Option<Ident> as VisitWith<V>>::visit_with(keyword, visitor)
                };
                {
                    <Box<SupportsInParens> as VisitWith<V>>::visit_with(condition, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for SupportsCondition {
    #[doc = "Calls [Visit`::visit_supports_condition`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_supports_condition(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            SupportsCondition { span, conditions } => {
                {
                    <swc_common::Span as VisitWith<V>>::visit_with(span, visitor)
                };
                {
                    <Vec<SupportsConditionType> as VisitWith<V>>::visit_with(conditions, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for SupportsConditionType {
    #[doc = "Calls [Visit`::visit_supports_condition_type`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_supports_condition_type(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            SupportsConditionType::Not { 0: _field_0 } => {
                <SupportsNot as VisitWith<V>>::visit_with(_field_0, visitor);
            }
            SupportsConditionType::And { 0: _field_0 } => {
                <SupportsAnd as VisitWith<V>>::visit_with(_field_0, visitor);
            }
            SupportsConditionType::Or { 0: _field_0 } => {
                <SupportsOr as VisitWith<V>>::visit_with(_field_0, visitor);
            }
            SupportsConditionType::SupportsInParens { 0: _field_0 } => {
                <SupportsInParens as VisitWith<V>>::visit_with(_field_0, visitor);
            }
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for SupportsFeature {
    #[doc = "Calls [Visit`::visit_supports_feature`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_supports_feature(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            SupportsFeature::Declaration { 0: _field_0 } => {
                <Box<Declaration> as VisitWith<V>>::visit_with(_field_0, visitor);
            }
            SupportsFeature::Function { 0: _field_0 } => {
                <Function as VisitWith<V>>::visit_with(_field_0, visitor);
            }
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for SupportsInParens {
    #[doc = "Calls [Visit`::visit_supports_in_parens`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_supports_in_parens(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            SupportsInParens::SupportsCondition { 0: _field_0 } => {
                <SupportsCondition as VisitWith<V>>::visit_with(_field_0, visitor);
            }
            SupportsInParens::Feature { 0: _field_0 } => {
                <SupportsFeature as VisitWith<V>>::visit_with(_field_0, visitor);
            }
            SupportsInParens::GeneralEnclosed { 0: _field_0 } => {
                <GeneralEnclosed as VisitWith<V>>::visit_with(_field_0, visitor);
            }
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for SupportsNot {
    #[doc = "Calls [Visit`::visit_supports_not`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_supports_not(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            SupportsNot {
                span,
                keyword,
                condition,
            } => {
                {
                    <swc_common::Span as VisitWith<V>>::visit_with(span, visitor)
                };
                {
                    <Option<Ident> as VisitWith<V>>::visit_with(keyword, visitor)
                };
                {
                    <Box<SupportsInParens> as VisitWith<V>>::visit_with(condition, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for SupportsOr {
    #[doc = "Calls [Visit`::visit_supports_or`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_supports_or(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            SupportsOr {
                span,
                keyword,
                condition,
            } => {
                {
                    <swc_common::Span as VisitWith<V>>::visit_with(span, visitor)
                };
                {
                    <Option<Ident> as VisitWith<V>>::visit_with(keyword, visitor)
                };
                {
                    <Box<SupportsInParens> as VisitWith<V>>::visit_with(condition, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for TagNameSelector {
    #[doc = "Calls [Visit`::visit_tag_name_selector`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_tag_name_selector(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            TagNameSelector { span, name } => {
                {
                    <swc_common::Span as VisitWith<V>>::visit_with(span, visitor)
                };
                {
                    <WqName as VisitWith<V>>::visit_with(name, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for Time {
    #[doc = "Calls [Visit`::visit_time`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_time(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            Time { span, value, unit } => {
                {
                    <swc_common::Span as VisitWith<V>>::visit_with(span, visitor)
                };
                {
                    <Number as VisitWith<V>>::visit_with(value, visitor)
                };
                {
                    <Ident as VisitWith<V>>::visit_with(unit, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for TimePercentage {
    #[doc = "Calls [Visit`::visit_time_percentage`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_time_percentage(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            TimePercentage::Time { 0: _field_0 } => {
                <Time as VisitWith<V>>::visit_with(_field_0, visitor);
            }
            TimePercentage::Percentage { 0: _field_0 } => {
                <Percentage as VisitWith<V>>::visit_with(_field_0, visitor);
            }
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for Token {
    #[doc = "Calls [Visit`::visit_token`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_token(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            Token::Ident { value, raw } => {
                {
                    <swc_atoms::Atom as VisitWith<V>>::visit_with(value, visitor)
                };
                {
                    <swc_atoms::Atom as VisitWith<V>>::visit_with(raw, visitor)
                };
            }
            Token::Function { value, raw } => {
                {
                    <swc_atoms::Atom as VisitWith<V>>::visit_with(value, visitor)
                };
                {
                    <swc_atoms::Atom as VisitWith<V>>::visit_with(raw, visitor)
                };
            }
            Token::AtKeyword { value, raw } => {
                {
                    <swc_atoms::Atom as VisitWith<V>>::visit_with(value, visitor)
                };
                {
                    <swc_atoms::Atom as VisitWith<V>>::visit_with(raw, visitor)
                };
            }
            Token::Hash { is_id, value, raw } => {
                {
                    <swc_atoms::Atom as VisitWith<V>>::visit_with(value, visitor)
                };
                {
                    <swc_atoms::Atom as VisitWith<V>>::visit_with(raw, visitor)
                };
            }
            Token::String { value, raw } => {
                {
                    <swc_atoms::Atom as VisitWith<V>>::visit_with(value, visitor)
                };
                {
                    <swc_atoms::Atom as VisitWith<V>>::visit_with(raw, visitor)
                };
            }
            Token::BadString { raw } => {
                {
                    <swc_atoms::Atom as VisitWith<V>>::visit_with(raw, visitor)
                };
            }
            Token::Url { value, raw } => {
                {
                    <swc_atoms::Atom as VisitWith<V>>::visit_with(value, visitor)
                };
                {
                    <Box<UrlKeyValue> as VisitWith<V>>::visit_with(raw, visitor)
                };
            }
            Token::BadUrl { raw } => {
                {
                    <swc_atoms::Atom as VisitWith<V>>::visit_with(raw, visitor)
                };
            }
            Token::Delim { value } => {}
            Token::Number {
                value,
                raw,
                type_flag,
            } => {
                {
                    <swc_atoms::Atom as VisitWith<V>>::visit_with(raw, visitor)
                };
                {
                    <NumberType as VisitWith<V>>::visit_with(type_flag, visitor)
                };
            }
            Token::Percentage { value, raw } => {
                {
                    <swc_atoms::Atom as VisitWith<V>>::visit_with(raw, visitor)
                };
            }
            Token::Dimension { 0: _field_0 } => {
                <Box<DimensionToken> as VisitWith<V>>::visit_with(_field_0, visitor);
            }
            Token::WhiteSpace { value } => {
                {
                    <swc_atoms::Atom as VisitWith<V>>::visit_with(value, visitor)
                };
            }
            Token::CDO => {}
            Token::CDC => {}
            Token::Colon => {}
            Token::Semi => {}
            Token::Comma => {}
            Token::LBracket => {}
            Token::RBracket => {}
            Token::LParen => {}
            Token::RParen => {}
            Token::LBrace => {}
            Token::RBrace => {}
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for TokenAndSpan {
    #[doc = "Calls [Visit`::visit_token_and_span`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_token_and_span(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            TokenAndSpan { span, token } => {
                {
                    <swc_common::Span as VisitWith<V>>::visit_with(span, visitor)
                };
                {
                    <Token as VisitWith<V>>::visit_with(token, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for TypeSelector {
    #[doc = "Calls [Visit`::visit_type_selector`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_type_selector(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            TypeSelector::TagName { 0: _field_0 } => {
                <TagNameSelector as VisitWith<V>>::visit_with(_field_0, visitor);
            }
            TypeSelector::Universal { 0: _field_0 } => {
                <UniversalSelector as VisitWith<V>>::visit_with(_field_0, visitor);
            }
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for UnicodeRange {
    #[doc = "Calls [Visit`::visit_unicode_range`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_unicode_range(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            UnicodeRange {
                span,
                start,
                end,
                raw,
            } => {
                {
                    <swc_common::Span as VisitWith<V>>::visit_with(span, visitor)
                };
                {
                    <swc_atoms::Atom as VisitWith<V>>::visit_with(start, visitor)
                };
                {
                    <Option<swc_atoms::Atom> as VisitWith<V>>::visit_with(end, visitor)
                };
                {
                    <Option<swc_atoms::Atom> as VisitWith<V>>::visit_with(raw, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for UniversalSelector {
    #[doc = "Calls [Visit`::visit_universal_selector`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_universal_selector(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            UniversalSelector { span, prefix } => {
                {
                    <swc_common::Span as VisitWith<V>>::visit_with(span, visitor)
                };
                {
                    <Option<NamespacePrefix> as VisitWith<V>>::visit_with(prefix, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for UnknownDimension {
    #[doc = "Calls [Visit`::visit_unknown_dimension`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_unknown_dimension(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            UnknownDimension { span, value, unit } => {
                {
                    <swc_common::Span as VisitWith<V>>::visit_with(span, visitor)
                };
                {
                    <Number as VisitWith<V>>::visit_with(value, visitor)
                };
                {
                    <Ident as VisitWith<V>>::visit_with(unit, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for Url {
    #[doc = "Calls [Visit`::visit_url`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_url(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            Url {
                span,
                name,
                value,
                modifiers,
            } => {
                {
                    <swc_common::Span as VisitWith<V>>::visit_with(span, visitor)
                };
                {
                    <Ident as VisitWith<V>>::visit_with(name, visitor)
                };
                {
                    <Option<Box<UrlValue>> as VisitWith<V>>::visit_with(value, visitor)
                };
                {
                    <Option<Vec<UrlModifier>> as VisitWith<V>>::visit_with(modifiers, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for UrlKeyValue {
    #[doc = "Calls [Visit`::visit_url_key_value`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_url_key_value(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            UrlKeyValue {
                0: _field_0,
                1: _field_1,
            } => {
                <swc_atoms::Atom as VisitWith<V>>::visit_with(_field_0, visitor);
                <swc_atoms::Atom as VisitWith<V>>::visit_with(_field_1, visitor);
            }
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for UrlModifier {
    #[doc = "Calls [Visit`::visit_url_modifier`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_url_modifier(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            UrlModifier::Ident { 0: _field_0 } => {
                <Ident as VisitWith<V>>::visit_with(_field_0, visitor);
            }
            UrlModifier::Function { 0: _field_0 } => {
                <Function as VisitWith<V>>::visit_with(_field_0, visitor);
            }
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for UrlValue {
    #[doc = "Calls [Visit`::visit_url_value`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_url_value(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            UrlValue::Str { 0: _field_0 } => {
                <Str as VisitWith<V>>::visit_with(_field_0, visitor);
            }
            UrlValue::Raw { 0: _field_0 } => {
                <UrlValueRaw as VisitWith<V>>::visit_with(_field_0, visitor);
            }
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for UrlValueRaw {
    #[doc = "Calls [Visit`::visit_url_value_raw`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_url_value_raw(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            UrlValueRaw { span, value, raw } => {
                {
                    <swc_common::Span as VisitWith<V>>::visit_with(span, visitor)
                };
                {
                    <swc_atoms::Atom as VisitWith<V>>::visit_with(value, visitor)
                };
                {
                    <Option<swc_atoms::Atom> as VisitWith<V>>::visit_with(raw, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for WqName {
    #[doc = "Calls [Visit`::visit_wq_name`] with `self`."]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_wq_name(visitor, self)
    }

    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            WqName {
                span,
                prefix,
                value,
            } => {
                {
                    <swc_common::Span as VisitWith<V>>::visit_with(span, visitor)
                };
                {
                    <Option<NamespacePrefix> as VisitWith<V>>::visit_with(prefix, visitor)
                };
                {
                    <Ident as VisitWith<V>>::visit_with(value, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for swc_atoms::Atom {
    #[doc = "Calls [Visit`::visit_atom`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_atom(visitor, self)
    }

    #[inline]
    fn visit_children_with(&self, visitor: &mut V) {
        {}
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for [CalcProductOrOperator] {
    #[doc = "Calls [Visit`::visit_calc_product_or_operators`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_calc_product_or_operators(visitor, self)
    }

    #[inline]
    fn visit_children_with(&self, visitor: &mut V) {
        self.iter()
            .for_each(|item| <CalcProductOrOperator as VisitWith<V>>::visit_with(item, visitor))
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for [CalcValueOrOperator] {
    #[doc = "Calls [Visit`::visit_calc_value_or_operators`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_calc_value_or_operators(visitor, self)
    }

    #[inline]
    fn visit_children_with(&self, visitor: &mut V) {
        self.iter()
            .for_each(|item| <CalcValueOrOperator as VisitWith<V>>::visit_with(item, visitor))
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for [ComplexSelectorChildren] {
    #[doc = "Calls [Visit`::visit_complex_selector_childrens`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_complex_selector_childrens(visitor, self)
    }

    #[inline]
    fn visit_children_with(&self, visitor: &mut V) {
        self.iter()
            .for_each(|item| <ComplexSelectorChildren as VisitWith<V>>::visit_with(item, visitor))
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for [ComplexSelector] {
    #[doc = "Calls [Visit`::visit_complex_selectors`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_complex_selectors(visitor, self)
    }

    #[inline]
    fn visit_children_with(&self, visitor: &mut V) {
        self.iter()
            .for_each(|item| <ComplexSelector as VisitWith<V>>::visit_with(item, visitor))
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for [ComponentValue] {
    #[doc = "Calls [Visit`::visit_component_values`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_component_values(visitor, self)
    }

    #[inline]
    fn visit_children_with(&self, visitor: &mut V) {
        self.iter()
            .for_each(|item| <ComponentValue as VisitWith<V>>::visit_with(item, visitor))
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for [CompoundSelector] {
    #[doc = "Calls [Visit`::visit_compound_selectors`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_compound_selectors(visitor, self)
    }

    #[inline]
    fn visit_children_with(&self, visitor: &mut V) {
        self.iter()
            .for_each(|item| <CompoundSelector as VisitWith<V>>::visit_with(item, visitor))
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for [ContainerQueryType] {
    #[doc = "Calls [Visit`::visit_container_query_types`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_container_query_types(visitor, self)
    }

    #[inline]
    fn visit_children_with(&self, visitor: &mut V) {
        self.iter()
            .for_each(|item| <ContainerQueryType as VisitWith<V>>::visit_with(item, visitor))
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for [CustomIdent] {
    #[doc = "Calls [Visit`::visit_custom_idents`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_custom_idents(visitor, self)
    }

    #[inline]
    fn visit_children_with(&self, visitor: &mut V) {
        self.iter()
            .for_each(|item| <CustomIdent as VisitWith<V>>::visit_with(item, visitor))
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for [DocumentPreludeMatchingFunction] {
    #[doc = "Calls [Visit`::visit_document_prelude_matching_functions`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_document_prelude_matching_functions(visitor, self)
    }

    #[inline]
    fn visit_children_with(&self, visitor: &mut V) {
        self.iter().for_each(|item| {
            <DocumentPreludeMatchingFunction as VisitWith<V>>::visit_with(item, visitor)
        })
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for [FamilyName] {
    #[doc = "Calls [Visit`::visit_family_names`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_family_names(visitor, self)
    }

    #[inline]
    fn visit_children_with(&self, visitor: &mut V) {
        self.iter()
            .for_each(|item| <FamilyName as VisitWith<V>>::visit_with(item, visitor))
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for [ForgivingComplexSelector] {
    #[doc = "Calls [Visit`::visit_forgiving_complex_selectors`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_forgiving_complex_selectors(visitor, self)
    }

    #[inline]
    fn visit_children_with(&self, visitor: &mut V) {
        self.iter()
            .for_each(|item| <ForgivingComplexSelector as VisitWith<V>>::visit_with(item, visitor))
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for [ForgivingRelativeSelector] {
    #[doc = "Calls [Visit`::visit_forgiving_relative_selectors`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_forgiving_relative_selectors(visitor, self)
    }

    #[inline]
    fn visit_children_with(&self, visitor: &mut V) {
        self.iter()
            .for_each(|item| <ForgivingRelativeSelector as VisitWith<V>>::visit_with(item, visitor))
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for [Ident] {
    #[doc = "Calls [Visit`::visit_idents`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_idents(visitor, self)
    }

    #[inline]
    fn visit_children_with(&self, visitor: &mut V) {
        self.iter()
            .for_each(|item| <Ident as VisitWith<V>>::visit_with(item, visitor))
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for [KeyframeSelector] {
    #[doc = "Calls [Visit`::visit_keyframe_selectors`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_keyframe_selectors(visitor, self)
    }

    #[inline]
    fn visit_children_with(&self, visitor: &mut V) {
        self.iter()
            .for_each(|item| <KeyframeSelector as VisitWith<V>>::visit_with(item, visitor))
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for [LayerName] {
    #[doc = "Calls [Visit`::visit_layer_names`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_layer_names(visitor, self)
    }

    #[inline]
    fn visit_children_with(&self, visitor: &mut V) {
        self.iter()
            .for_each(|item| <LayerName as VisitWith<V>>::visit_with(item, visitor))
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for [MediaConditionAllType] {
    #[doc = "Calls [Visit`::visit_media_condition_all_types`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_media_condition_all_types(visitor, self)
    }

    #[inline]
    fn visit_children_with(&self, visitor: &mut V) {
        self.iter()
            .for_each(|item| <MediaConditionAllType as VisitWith<V>>::visit_with(item, visitor))
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for [MediaConditionWithoutOrType] {
    #[doc = "Calls [Visit`::visit_media_condition_without_or_types`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_media_condition_without_or_types(visitor, self)
    }

    #[inline]
    fn visit_children_with(&self, visitor: &mut V) {
        self.iter().for_each(|item| {
            <MediaConditionWithoutOrType as VisitWith<V>>::visit_with(item, visitor)
        })
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for [MediaQuery] {
    #[doc = "Calls [Visit`::visit_media_querys`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_media_querys(visitor, self)
    }

    #[inline]
    fn visit_children_with(&self, visitor: &mut V) {
        self.iter()
            .for_each(|item| <MediaQuery as VisitWith<V>>::visit_with(item, visitor))
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for Option<Box<AtRulePrelude>> {
    #[doc = "Calls [Visit`::visit_opt_at_rule_prelude`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_opt_at_rule_prelude(visitor, self)
    }

    #[inline]
    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            Some(inner) => <Box<AtRulePrelude> as VisitWith<V>>::visit_with(inner, visitor),
            None => {}
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for Option<swc_atoms::Atom> {
    #[doc = "Calls [Visit`::visit_opt_atom`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_opt_atom(visitor, self)
    }

    #[inline]
    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            Some(inner) => <swc_atoms::Atom as VisitWith<V>>::visit_with(inner, visitor),
            None => {}
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for Option<AttributeSelectorMatcher> {
    #[doc = "Calls [Visit`::visit_opt_attribute_selector_matcher`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_opt_attribute_selector_matcher(visitor, self)
    }

    #[inline]
    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            Some(inner) => <AttributeSelectorMatcher as VisitWith<V>>::visit_with(inner, visitor),
            None => {}
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for Option<AttributeSelectorModifier> {
    #[doc = "Calls [Visit`::visit_opt_attribute_selector_modifier`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_opt_attribute_selector_modifier(visitor, self)
    }

    #[inline]
    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            Some(inner) => <AttributeSelectorModifier as VisitWith<V>>::visit_with(inner, visitor),
            None => {}
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for Option<AttributeSelectorValue> {
    #[doc = "Calls [Visit`::visit_opt_attribute_selector_value`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_opt_attribute_selector_value(visitor, self)
    }

    #[inline]
    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            Some(inner) => <AttributeSelectorValue as VisitWith<V>>::visit_with(inner, visitor),
            None => {}
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for Option<Combinator> {
    #[doc = "Calls [Visit`::visit_opt_combinator`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_opt_combinator(visitor, self)
    }

    #[inline]
    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            Some(inner) => <Combinator as VisitWith<V>>::visit_with(inner, visitor),
            None => {}
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for Option<ContainerName> {
    #[doc = "Calls [Visit`::visit_opt_container_name`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_opt_container_name(visitor, self)
    }

    #[inline]
    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            Some(inner) => <ContainerName as VisitWith<V>>::visit_with(inner, visitor),
            None => {}
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for Option<ForgivingSelectorList> {
    #[doc = "Calls [Visit`::visit_opt_forgiving_selector_list`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_opt_forgiving_selector_list(visitor, self)
    }

    #[inline]
    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            Some(inner) => <ForgivingSelectorList as VisitWith<V>>::visit_with(inner, visitor),
            None => {}
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for Option<Box<Function>> {
    #[doc = "Calls [Visit`::visit_opt_function`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_opt_function(visitor, self)
    }

    #[inline]
    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            Some(inner) => <Box<Function> as VisitWith<V>>::visit_with(inner, visitor),
            None => {}
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for Option<Ident> {
    #[doc = "Calls [Visit`::visit_opt_ident`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_opt_ident(visitor, self)
    }

    #[inline]
    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            Some(inner) => <Ident as VisitWith<V>>::visit_with(inner, visitor),
            None => {}
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for Option<Box<ImportConditions>> {
    #[doc = "Calls [Visit`::visit_opt_import_conditions`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_opt_import_conditions(visitor, self)
    }

    #[inline]
    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            Some(inner) => <Box<ImportConditions> as VisitWith<V>>::visit_with(inner, visitor),
            None => {}
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for Option<Box<ImportLayerName>> {
    #[doc = "Calls [Visit`::visit_opt_import_layer_name`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_opt_import_layer_name(visitor, self)
    }

    #[inline]
    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            Some(inner) => <Box<ImportLayerName> as VisitWith<V>>::visit_with(inner, visitor),
            None => {}
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for Option<ImportantFlag> {
    #[doc = "Calls [Visit`::visit_opt_important_flag`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_opt_important_flag(visitor, self)
    }

    #[inline]
    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            Some(inner) => <ImportantFlag as VisitWith<V>>::visit_with(inner, visitor),
            None => {}
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for Option<Box<MediaConditionType>> {
    #[doc = "Calls [Visit`::visit_opt_media_condition_type`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_opt_media_condition_type(visitor, self)
    }

    #[inline]
    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            Some(inner) => <Box<MediaConditionType> as VisitWith<V>>::visit_with(inner, visitor),
            None => {}
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for Option<Box<MediaQueryList>> {
    #[doc = "Calls [Visit`::visit_opt_media_query_list`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_opt_media_query_list(visitor, self)
    }

    #[inline]
    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            Some(inner) => <Box<MediaQueryList> as VisitWith<V>>::visit_with(inner, visitor),
            None => {}
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for Option<MediaType> {
    #[doc = "Calls [Visit`::visit_opt_media_type`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_opt_media_type(visitor, self)
    }

    #[inline]
    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            Some(inner) => <MediaType as VisitWith<V>>::visit_with(inner, visitor),
            None => {}
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for Option<Namespace> {
    #[doc = "Calls [Visit`::visit_opt_namespace`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_opt_namespace(visitor, self)
    }

    #[inline]
    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            Some(inner) => <Namespace as VisitWith<V>>::visit_with(inner, visitor),
            None => {}
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for Option<NamespacePrefix> {
    #[doc = "Calls [Visit`::visit_opt_namespace_prefix`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_opt_namespace_prefix(visitor, self)
    }

    #[inline]
    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            Some(inner) => <NamespacePrefix as VisitWith<V>>::visit_with(inner, visitor),
            None => {}
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for Option<NestingSelector> {
    #[doc = "Calls [Visit`::visit_opt_nesting_selector`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_opt_nesting_selector(visitor, self)
    }

    #[inline]
    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            Some(inner) => <NestingSelector as VisitWith<V>>::visit_with(inner, visitor),
            None => {}
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for Option<Number> {
    #[doc = "Calls [Visit`::visit_opt_number`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_opt_number(visitor, self)
    }

    #[inline]
    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            Some(inner) => <Number as VisitWith<V>>::visit_with(inner, visitor),
            None => {}
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for Option<Vec<PageSelectorPseudo>> {
    #[doc = "Calls [Visit`::visit_opt_page_selector_pseudos`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_opt_page_selector_pseudos(visitor, self)
    }

    #[inline]
    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            Some(inner) => <Vec<PageSelectorPseudo> as VisitWith<V>>::visit_with(inner, visitor),
            None => {}
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for Option<PageSelectorType> {
    #[doc = "Calls [Visit`::visit_opt_page_selector_type`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_opt_page_selector_type(visitor, self)
    }

    #[inline]
    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            Some(inner) => <PageSelectorType as VisitWith<V>>::visit_with(inner, visitor),
            None => {}
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for Option<Vec<PseudoClassSelectorChildren>> {
    #[doc = "Calls [Visit`::visit_opt_pseudo_class_selector_childrens`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_opt_pseudo_class_selector_childrens(visitor, self)
    }

    #[inline]
    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            Some(inner) => {
                <Vec<PseudoClassSelectorChildren> as VisitWith<V>>::visit_with(inner, visitor)
            }
            None => {}
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for Option<Vec<PseudoElementSelectorChildren>> {
    #[doc = "Calls [Visit`::visit_opt_pseudo_element_selector_childrens`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_opt_pseudo_element_selector_childrens(visitor, self)
    }

    #[inline]
    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            Some(inner) => {
                <Vec<PseudoElementSelectorChildren> as VisitWith<V>>::visit_with(inner, visitor)
            }
            None => {}
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for Option<SimpleBlock> {
    #[doc = "Calls [Visit`::visit_opt_simple_block`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_opt_simple_block(visitor, self)
    }

    #[inline]
    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            Some(inner) => <SimpleBlock as VisitWith<V>>::visit_with(inner, visitor),
            None => {}
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for Option<Box<TypeSelector>> {
    #[doc = "Calls [Visit`::visit_opt_type_selector`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_opt_type_selector(visitor, self)
    }

    #[inline]
    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            Some(inner) => <Box<TypeSelector> as VisitWith<V>>::visit_with(inner, visitor),
            None => {}
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for Option<Vec<UrlModifier>> {
    #[doc = "Calls [Visit`::visit_opt_url_modifiers`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_opt_url_modifiers(visitor, self)
    }

    #[inline]
    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            Some(inner) => <Vec<UrlModifier> as VisitWith<V>>::visit_with(inner, visitor),
            None => {}
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for Option<Box<UrlValue>> {
    #[doc = "Calls [Visit`::visit_opt_url_value`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_opt_url_value(visitor, self)
    }

    #[inline]
    fn visit_children_with(&self, visitor: &mut V) {
        match self {
            Some(inner) => <Box<UrlValue> as VisitWith<V>>::visit_with(inner, visitor),
            None => {}
        }
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for [PageSelectorPseudo] {
    #[doc = "Calls [Visit`::visit_page_selector_pseudos`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_page_selector_pseudos(visitor, self)
    }

    #[inline]
    fn visit_children_with(&self, visitor: &mut V) {
        self.iter()
            .for_each(|item| <PageSelectorPseudo as VisitWith<V>>::visit_with(item, visitor))
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for [PageSelector] {
    #[doc = "Calls [Visit`::visit_page_selectors`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_page_selectors(visitor, self)
    }

    #[inline]
    fn visit_children_with(&self, visitor: &mut V) {
        self.iter()
            .for_each(|item| <PageSelector as VisitWith<V>>::visit_with(item, visitor))
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for [PseudoClassSelectorChildren] {
    #[doc = "Calls [Visit`::visit_pseudo_class_selector_childrens`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_pseudo_class_selector_childrens(visitor, self)
    }

    #[inline]
    fn visit_children_with(&self, visitor: &mut V) {
        self.iter().for_each(|item| {
            <PseudoClassSelectorChildren as VisitWith<V>>::visit_with(item, visitor)
        })
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for [PseudoElementSelectorChildren] {
    #[doc = "Calls [Visit`::visit_pseudo_element_selector_childrens`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_pseudo_element_selector_childrens(visitor, self)
    }

    #[inline]
    fn visit_children_with(&self, visitor: &mut V) {
        self.iter().for_each(|item| {
            <PseudoElementSelectorChildren as VisitWith<V>>::visit_with(item, visitor)
        })
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for [RelativeSelector] {
    #[doc = "Calls [Visit`::visit_relative_selectors`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_relative_selectors(visitor, self)
    }

    #[inline]
    fn visit_children_with(&self, visitor: &mut V) {
        self.iter()
            .for_each(|item| <RelativeSelector as VisitWith<V>>::visit_with(item, visitor))
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for [Rule] {
    #[doc = "Calls [Visit`::visit_rules`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_rules(visitor, self)
    }

    #[inline]
    fn visit_children_with(&self, visitor: &mut V) {
        self.iter()
            .for_each(|item| <Rule as VisitWith<V>>::visit_with(item, visitor))
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for swc_common::Span {
    #[doc = "Calls [Visit`::visit_span`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_span(visitor, self)
    }

    #[inline]
    fn visit_children_with(&self, visitor: &mut V) {
        {}
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for [SubclassSelector] {
    #[doc = "Calls [Visit`::visit_subclass_selectors`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_subclass_selectors(visitor, self)
    }

    #[inline]
    fn visit_children_with(&self, visitor: &mut V) {
        self.iter()
            .for_each(|item| <SubclassSelector as VisitWith<V>>::visit_with(item, visitor))
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for [SupportsConditionType] {
    #[doc = "Calls [Visit`::visit_supports_condition_types`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_supports_condition_types(visitor, self)
    }

    #[inline]
    fn visit_children_with(&self, visitor: &mut V) {
        self.iter()
            .for_each(|item| <SupportsConditionType as VisitWith<V>>::visit_with(item, visitor))
    }
}
impl<V: ?Sized + Visit> VisitWith<V> for [UrlModifier] {
    #[doc = "Calls [Visit`::visit_url_modifiers`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_with(&self, visitor: &mut V) {
        <V as Visit>::visit_url_modifiers(visitor, self)
    }

    #[inline]
    fn visit_children_with(&self, visitor: &mut V) {
        self.iter()
            .for_each(|item| <UrlModifier as VisitWith<V>>::visit_with(item, visitor))
    }
}
impl<V, T> VisitWith<V> for std::boxed::Box<T>
where
    V: ?Sized + Visit,
    T: VisitWith<V>,
{
    #[inline]
    fn visit_with(&self, visitor: &mut V) {
        let v = <T as VisitWith<V>>::visit_with(&**self, visitor);
        v
    }

    #[inline]
    fn visit_children_with(&self, visitor: &mut V) {
        let v = <T as VisitWith<V>>::visit_children_with(&**self, visitor);
        v
    }
}
impl<V, T> VisitWith<V> for std::vec::Vec<T>
where
    V: ?Sized + Visit,
    [T]: VisitWith<V>,
{
    #[inline]
    fn visit_with(&self, visitor: &mut V) {
        let v = <[T] as VisitWith<V>>::visit_with(self, visitor);
        v
    }

    #[inline]
    fn visit_children_with(&self, visitor: &mut V) {
        let v = <[T] as VisitWith<V>>::visit_children_with(self, visitor);
        v
    }
}
#[doc = r" A visitor trait for traversing the AST."]
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
pub trait VisitAstPath {
    #[doc = "Visit a node of type `AbsoluteColorBase`.\n\nBy default, this method calls \
             [`AbsoluteColorBase::visit_children_with_ast_path`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn visit_absolute_color_base<'ast: 'r, 'r>(
        &mut self,
        node: &'ast AbsoluteColorBase,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <AbsoluteColorBase as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `AlphaValue`.\n\nBy default, this method calls \
             [`AlphaValue::visit_children_with_ast_path`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_alpha_value<'ast: 'r, 'r>(
        &mut self,
        node: &'ast AlphaValue,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <AlphaValue as VisitWithAstPath<Self>>::visit_children_with_ast_path(node, self, __ast_path)
    }
    #[doc = "Visit a node of type `AnPlusB`.\n\nBy default, this method calls \
             [`AnPlusB::visit_children_with_ast_path`]. If you want to recurse, you need to call \
             it manually."]
    #[inline]
    fn visit_an_plus_b<'ast: 'r, 'r>(
        &mut self,
        node: &'ast AnPlusB,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <AnPlusB as VisitWithAstPath<Self>>::visit_children_with_ast_path(node, self, __ast_path)
    }
    #[doc = "Visit a node of type `AnPlusBNotation`.\n\nBy default, this method calls \
             [`AnPlusBNotation::visit_children_with_ast_path`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn visit_an_plus_b_notation<'ast: 'r, 'r>(
        &mut self,
        node: &'ast AnPlusBNotation,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <AnPlusBNotation as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Angle`.\n\nBy default, this method calls \
             [`Angle::visit_children_with_ast_path`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_angle<'ast: 'r, 'r>(&mut self, node: &'ast Angle, __ast_path: &mut AstNodePath<'r>) {
        <Angle as VisitWithAstPath<Self>>::visit_children_with_ast_path(node, self, __ast_path)
    }
    #[doc = "Visit a node of type `AnglePercentage`.\n\nBy default, this method calls \
             [`AnglePercentage::visit_children_with_ast_path`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn visit_angle_percentage<'ast: 'r, 'r>(
        &mut self,
        node: &'ast AnglePercentage,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <AnglePercentage as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `AnyNamespace`.\n\nBy default, this method calls \
             [`AnyNamespace::visit_children_with_ast_path`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_any_namespace<'ast: 'r, 'r>(
        &mut self,
        node: &'ast AnyNamespace,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <AnyNamespace as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `AtRule`.\n\nBy default, this method calls \
             [`AtRule::visit_children_with_ast_path`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_at_rule<'ast: 'r, 'r>(
        &mut self,
        node: &'ast AtRule,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <AtRule as VisitWithAstPath<Self>>::visit_children_with_ast_path(node, self, __ast_path)
    }
    #[doc = "Visit a node of type `AtRuleName`.\n\nBy default, this method calls \
             [`AtRuleName::visit_children_with_ast_path`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_at_rule_name<'ast: 'r, 'r>(
        &mut self,
        node: &'ast AtRuleName,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <AtRuleName as VisitWithAstPath<Self>>::visit_children_with_ast_path(node, self, __ast_path)
    }
    #[doc = "Visit a node of type `AtRulePrelude`.\n\nBy default, this method calls \
             [`AtRulePrelude::visit_children_with_ast_path`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_at_rule_prelude<'ast: 'r, 'r>(
        &mut self,
        node: &'ast AtRulePrelude,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <AtRulePrelude as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `swc_atoms :: Atom`.\n\nBy default, this method calls \
             [`swc_atoms :: Atom::visit_children_with_ast_path`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn visit_atom<'ast: 'r, 'r>(
        &mut self,
        node: &'ast swc_atoms::Atom,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <swc_atoms::Atom as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `AttributeSelector`.\n\nBy default, this method calls \
             [`AttributeSelector::visit_children_with_ast_path`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn visit_attribute_selector<'ast: 'r, 'r>(
        &mut self,
        node: &'ast AttributeSelector,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <AttributeSelector as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `AttributeSelectorMatcher`.\n\nBy default, this method calls \
             [`AttributeSelectorMatcher::visit_children_with_ast_path`]. If you want to recurse, \
             you need to call it manually."]
    #[inline]
    fn visit_attribute_selector_matcher<'ast: 'r, 'r>(
        &mut self,
        node: &'ast AttributeSelectorMatcher,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <AttributeSelectorMatcher as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `AttributeSelectorMatcherValue`.\n\nBy default, this method \
             calls [`AttributeSelectorMatcherValue::visit_children_with_ast_path`]. If you want to \
             recurse, you need to call it manually."]
    #[inline]
    fn visit_attribute_selector_matcher_value<'ast: 'r, 'r>(
        &mut self,
        node: &'ast AttributeSelectorMatcherValue,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <AttributeSelectorMatcherValue as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `AttributeSelectorModifier`.\n\nBy default, this method calls \
             [`AttributeSelectorModifier::visit_children_with_ast_path`]. If you want to recurse, \
             you need to call it manually."]
    #[inline]
    fn visit_attribute_selector_modifier<'ast: 'r, 'r>(
        &mut self,
        node: &'ast AttributeSelectorModifier,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <AttributeSelectorModifier as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `AttributeSelectorValue`.\n\nBy default, this method calls \
             [`AttributeSelectorValue::visit_children_with_ast_path`]. If you want to recurse, you \
             need to call it manually."]
    #[inline]
    fn visit_attribute_selector_value<'ast: 'r, 'r>(
        &mut self,
        node: &'ast AttributeSelectorValue,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <AttributeSelectorValue as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `BinOp`.\n\nBy default, this method calls \
             [`BinOp::visit_children_with_ast_path`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_bin_op<'ast: 'r, 'r>(&mut self, node: &'ast BinOp, __ast_path: &mut AstNodePath<'r>) {
        <BinOp as VisitWithAstPath<Self>>::visit_children_with_ast_path(node, self, __ast_path)
    }
    #[doc = "Visit a node of type `CalcOperator`.\n\nBy default, this method calls \
             [`CalcOperator::visit_children_with_ast_path`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_calc_operator<'ast: 'r, 'r>(
        &mut self,
        node: &'ast CalcOperator,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <CalcOperator as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `CalcOperatorType`.\n\nBy default, this method calls \
             [`CalcOperatorType::visit_children_with_ast_path`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn visit_calc_operator_type<'ast: 'r, 'r>(
        &mut self,
        node: &'ast CalcOperatorType,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <CalcOperatorType as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `CalcProduct`.\n\nBy default, this method calls \
             [`CalcProduct::visit_children_with_ast_path`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_calc_product<'ast: 'r, 'r>(
        &mut self,
        node: &'ast CalcProduct,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <CalcProduct as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `CalcProductOrOperator`.\n\nBy default, this method calls \
             [`CalcProductOrOperator::visit_children_with_ast_path`]. If you want to recurse, you \
             need to call it manually."]
    #[inline]
    fn visit_calc_product_or_operator<'ast: 'r, 'r>(
        &mut self,
        node: &'ast CalcProductOrOperator,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <CalcProductOrOperator as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Vec < CalcProductOrOperator >`.\n\nBy default, this method \
             calls [`Vec < CalcProductOrOperator >::visit_children_with_ast_path`]. If you want to \
             recurse, you need to call it manually."]
    #[inline]
    fn visit_calc_product_or_operators<'ast: 'r, 'r>(
        &mut self,
        node: &'ast [CalcProductOrOperator],
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <[CalcProductOrOperator] as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `CalcSum`.\n\nBy default, this method calls \
             [`CalcSum::visit_children_with_ast_path`]. If you want to recurse, you need to call \
             it manually."]
    #[inline]
    fn visit_calc_sum<'ast: 'r, 'r>(
        &mut self,
        node: &'ast CalcSum,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <CalcSum as VisitWithAstPath<Self>>::visit_children_with_ast_path(node, self, __ast_path)
    }
    #[doc = "Visit a node of type `CalcValue`.\n\nBy default, this method calls \
             [`CalcValue::visit_children_with_ast_path`]. If you want to recurse, you need to call \
             it manually."]
    #[inline]
    fn visit_calc_value<'ast: 'r, 'r>(
        &mut self,
        node: &'ast CalcValue,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <CalcValue as VisitWithAstPath<Self>>::visit_children_with_ast_path(node, self, __ast_path)
    }
    #[doc = "Visit a node of type `CalcValueOrOperator`.\n\nBy default, this method calls \
             [`CalcValueOrOperator::visit_children_with_ast_path`]. If you want to recurse, you \
             need to call it manually."]
    #[inline]
    fn visit_calc_value_or_operator<'ast: 'r, 'r>(
        &mut self,
        node: &'ast CalcValueOrOperator,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <CalcValueOrOperator as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Vec < CalcValueOrOperator >`.\n\nBy default, this method calls \
             [`Vec < CalcValueOrOperator >::visit_children_with_ast_path`]. If you want to \
             recurse, you need to call it manually."]
    #[inline]
    fn visit_calc_value_or_operators<'ast: 'r, 'r>(
        &mut self,
        node: &'ast [CalcValueOrOperator],
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <[CalcValueOrOperator] as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `ClassSelector`.\n\nBy default, this method calls \
             [`ClassSelector::visit_children_with_ast_path`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_class_selector<'ast: 'r, 'r>(
        &mut self,
        node: &'ast ClassSelector,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <ClassSelector as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `CmykComponent`.\n\nBy default, this method calls \
             [`CmykComponent::visit_children_with_ast_path`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_cmyk_component<'ast: 'r, 'r>(
        &mut self,
        node: &'ast CmykComponent,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <CmykComponent as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Color`.\n\nBy default, this method calls \
             [`Color::visit_children_with_ast_path`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_color<'ast: 'r, 'r>(&mut self, node: &'ast Color, __ast_path: &mut AstNodePath<'r>) {
        <Color as VisitWithAstPath<Self>>::visit_children_with_ast_path(node, self, __ast_path)
    }
    #[doc = "Visit a node of type `ColorProfileName`.\n\nBy default, this method calls \
             [`ColorProfileName::visit_children_with_ast_path`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn visit_color_profile_name<'ast: 'r, 'r>(
        &mut self,
        node: &'ast ColorProfileName,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <ColorProfileName as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Combinator`.\n\nBy default, this method calls \
             [`Combinator::visit_children_with_ast_path`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_combinator<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Combinator,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <Combinator as VisitWithAstPath<Self>>::visit_children_with_ast_path(node, self, __ast_path)
    }
    #[doc = "Visit a node of type `CombinatorValue`.\n\nBy default, this method calls \
             [`CombinatorValue::visit_children_with_ast_path`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn visit_combinator_value<'ast: 'r, 'r>(
        &mut self,
        node: &'ast CombinatorValue,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <CombinatorValue as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `ComplexSelector`.\n\nBy default, this method calls \
             [`ComplexSelector::visit_children_with_ast_path`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn visit_complex_selector<'ast: 'r, 'r>(
        &mut self,
        node: &'ast ComplexSelector,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <ComplexSelector as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `ComplexSelectorChildren`.\n\nBy default, this method calls \
             [`ComplexSelectorChildren::visit_children_with_ast_path`]. If you want to recurse, \
             you need to call it manually."]
    #[inline]
    fn visit_complex_selector_children<'ast: 'r, 'r>(
        &mut self,
        node: &'ast ComplexSelectorChildren,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <ComplexSelectorChildren as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Vec < ComplexSelectorChildren >`.\n\nBy default, this method \
             calls [`Vec < ComplexSelectorChildren >::visit_children_with_ast_path`]. If you want \
             to recurse, you need to call it manually."]
    #[inline]
    fn visit_complex_selector_childrens<'ast: 'r, 'r>(
        &mut self,
        node: &'ast [ComplexSelectorChildren],
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <[ComplexSelectorChildren] as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Vec < ComplexSelector >`.\n\nBy default, this method calls \
             [`Vec < ComplexSelector >::visit_children_with_ast_path`]. If you want to recurse, \
             you need to call it manually."]
    #[inline]
    fn visit_complex_selectors<'ast: 'r, 'r>(
        &mut self,
        node: &'ast [ComplexSelector],
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <[ComplexSelector] as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `ComponentValue`.\n\nBy default, this method calls \
             [`ComponentValue::visit_children_with_ast_path`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_component_value<'ast: 'r, 'r>(
        &mut self,
        node: &'ast ComponentValue,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <ComponentValue as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Vec < ComponentValue >`.\n\nBy default, this method calls [`Vec \
             < ComponentValue >::visit_children_with_ast_path`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn visit_component_values<'ast: 'r, 'r>(
        &mut self,
        node: &'ast [ComponentValue],
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <[ComponentValue] as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `CompoundSelector`.\n\nBy default, this method calls \
             [`CompoundSelector::visit_children_with_ast_path`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn visit_compound_selector<'ast: 'r, 'r>(
        &mut self,
        node: &'ast CompoundSelector,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <CompoundSelector as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `CompoundSelectorList`.\n\nBy default, this method calls \
             [`CompoundSelectorList::visit_children_with_ast_path`]. If you want to recurse, you \
             need to call it manually."]
    #[inline]
    fn visit_compound_selector_list<'ast: 'r, 'r>(
        &mut self,
        node: &'ast CompoundSelectorList,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <CompoundSelectorList as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Vec < CompoundSelector >`.\n\nBy default, this method calls \
             [`Vec < CompoundSelector >::visit_children_with_ast_path`]. If you want to recurse, \
             you need to call it manually."]
    #[inline]
    fn visit_compound_selectors<'ast: 'r, 'r>(
        &mut self,
        node: &'ast [CompoundSelector],
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <[CompoundSelector] as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `ContainerCondition`.\n\nBy default, this method calls \
             [`ContainerCondition::visit_children_with_ast_path`]. If you want to recurse, you \
             need to call it manually."]
    #[inline]
    fn visit_container_condition<'ast: 'r, 'r>(
        &mut self,
        node: &'ast ContainerCondition,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <ContainerCondition as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `ContainerName`.\n\nBy default, this method calls \
             [`ContainerName::visit_children_with_ast_path`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_container_name<'ast: 'r, 'r>(
        &mut self,
        node: &'ast ContainerName,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <ContainerName as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `ContainerQuery`.\n\nBy default, this method calls \
             [`ContainerQuery::visit_children_with_ast_path`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_container_query<'ast: 'r, 'r>(
        &mut self,
        node: &'ast ContainerQuery,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <ContainerQuery as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `ContainerQueryAnd`.\n\nBy default, this method calls \
             [`ContainerQueryAnd::visit_children_with_ast_path`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn visit_container_query_and<'ast: 'r, 'r>(
        &mut self,
        node: &'ast ContainerQueryAnd,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <ContainerQueryAnd as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `ContainerQueryNot`.\n\nBy default, this method calls \
             [`ContainerQueryNot::visit_children_with_ast_path`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn visit_container_query_not<'ast: 'r, 'r>(
        &mut self,
        node: &'ast ContainerQueryNot,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <ContainerQueryNot as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `ContainerQueryOr`.\n\nBy default, this method calls \
             [`ContainerQueryOr::visit_children_with_ast_path`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn visit_container_query_or<'ast: 'r, 'r>(
        &mut self,
        node: &'ast ContainerQueryOr,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <ContainerQueryOr as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `ContainerQueryType`.\n\nBy default, this method calls \
             [`ContainerQueryType::visit_children_with_ast_path`]. If you want to recurse, you \
             need to call it manually."]
    #[inline]
    fn visit_container_query_type<'ast: 'r, 'r>(
        &mut self,
        node: &'ast ContainerQueryType,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <ContainerQueryType as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Vec < ContainerQueryType >`.\n\nBy default, this method calls \
             [`Vec < ContainerQueryType >::visit_children_with_ast_path`]. If you want to recurse, \
             you need to call it manually."]
    #[inline]
    fn visit_container_query_types<'ast: 'r, 'r>(
        &mut self,
        node: &'ast [ContainerQueryType],
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <[ContainerQueryType] as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `CustomHighlightName`.\n\nBy default, this method calls \
             [`CustomHighlightName::visit_children_with_ast_path`]. If you want to recurse, you \
             need to call it manually."]
    #[inline]
    fn visit_custom_highlight_name<'ast: 'r, 'r>(
        &mut self,
        node: &'ast CustomHighlightName,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <CustomHighlightName as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `CustomIdent`.\n\nBy default, this method calls \
             [`CustomIdent::visit_children_with_ast_path`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_custom_ident<'ast: 'r, 'r>(
        &mut self,
        node: &'ast CustomIdent,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <CustomIdent as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Vec < CustomIdent >`.\n\nBy default, this method calls [`Vec < \
             CustomIdent >::visit_children_with_ast_path`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_custom_idents<'ast: 'r, 'r>(
        &mut self,
        node: &'ast [CustomIdent],
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <[CustomIdent] as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `CustomMediaQuery`.\n\nBy default, this method calls \
             [`CustomMediaQuery::visit_children_with_ast_path`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn visit_custom_media_query<'ast: 'r, 'r>(
        &mut self,
        node: &'ast CustomMediaQuery,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <CustomMediaQuery as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `CustomMediaQueryMediaType`.\n\nBy default, this method calls \
             [`CustomMediaQueryMediaType::visit_children_with_ast_path`]. If you want to recurse, \
             you need to call it manually."]
    #[inline]
    fn visit_custom_media_query_media_type<'ast: 'r, 'r>(
        &mut self,
        node: &'ast CustomMediaQueryMediaType,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <CustomMediaQueryMediaType as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `CustomPropertyName`.\n\nBy default, this method calls \
             [`CustomPropertyName::visit_children_with_ast_path`]. If you want to recurse, you \
             need to call it manually."]
    #[inline]
    fn visit_custom_property_name<'ast: 'r, 'r>(
        &mut self,
        node: &'ast CustomPropertyName,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <CustomPropertyName as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `DashedIdent`.\n\nBy default, this method calls \
             [`DashedIdent::visit_children_with_ast_path`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_dashed_ident<'ast: 'r, 'r>(
        &mut self,
        node: &'ast DashedIdent,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <DashedIdent as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Declaration`.\n\nBy default, this method calls \
             [`Declaration::visit_children_with_ast_path`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_declaration<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Declaration,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <Declaration as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `DeclarationName`.\n\nBy default, this method calls \
             [`DeclarationName::visit_children_with_ast_path`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn visit_declaration_name<'ast: 'r, 'r>(
        &mut self,
        node: &'ast DeclarationName,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <DeclarationName as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `DeclarationOrAtRule`.\n\nBy default, this method calls \
             [`DeclarationOrAtRule::visit_children_with_ast_path`]. If you want to recurse, you \
             need to call it manually."]
    #[inline]
    fn visit_declaration_or_at_rule<'ast: 'r, 'r>(
        &mut self,
        node: &'ast DeclarationOrAtRule,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <DeclarationOrAtRule as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Delimiter`.\n\nBy default, this method calls \
             [`Delimiter::visit_children_with_ast_path`]. If you want to recurse, you need to call \
             it manually."]
    #[inline]
    fn visit_delimiter<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Delimiter,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <Delimiter as VisitWithAstPath<Self>>::visit_children_with_ast_path(node, self, __ast_path)
    }
    #[doc = "Visit a node of type `DelimiterValue`.\n\nBy default, this method calls \
             [`DelimiterValue::visit_children_with_ast_path`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_delimiter_value<'ast: 'r, 'r>(
        &mut self,
        node: &'ast DelimiterValue,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <DelimiterValue as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Dimension`.\n\nBy default, this method calls \
             [`Dimension::visit_children_with_ast_path`]. If you want to recurse, you need to call \
             it manually."]
    #[inline]
    fn visit_dimension<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Dimension,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <Dimension as VisitWithAstPath<Self>>::visit_children_with_ast_path(node, self, __ast_path)
    }
    #[doc = "Visit a node of type `DimensionToken`.\n\nBy default, this method calls \
             [`DimensionToken::visit_children_with_ast_path`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_dimension_token<'ast: 'r, 'r>(
        &mut self,
        node: &'ast DimensionToken,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <DimensionToken as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `DocumentPrelude`.\n\nBy default, this method calls \
             [`DocumentPrelude::visit_children_with_ast_path`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn visit_document_prelude<'ast: 'r, 'r>(
        &mut self,
        node: &'ast DocumentPrelude,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <DocumentPrelude as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `DocumentPreludeMatchingFunction`.\n\nBy default, this method \
             calls [`DocumentPreludeMatchingFunction::visit_children_with_ast_path`]. If you want \
             to recurse, you need to call it manually."]
    #[inline]
    fn visit_document_prelude_matching_function<'ast: 'r, 'r>(
        &mut self,
        node: &'ast DocumentPreludeMatchingFunction,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <DocumentPreludeMatchingFunction as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Vec < DocumentPreludeMatchingFunction >`.\n\nBy default, this \
             method calls [`Vec < DocumentPreludeMatchingFunction \
             >::visit_children_with_ast_path`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_document_prelude_matching_functions<'ast: 'r, 'r>(
        &mut self,
        node: &'ast [DocumentPreludeMatchingFunction],
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <[DocumentPreludeMatchingFunction] as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `ExtensionName`.\n\nBy default, this method calls \
             [`ExtensionName::visit_children_with_ast_path`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_extension_name<'ast: 'r, 'r>(
        &mut self,
        node: &'ast ExtensionName,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <ExtensionName as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `FamilyName`.\n\nBy default, this method calls \
             [`FamilyName::visit_children_with_ast_path`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_family_name<'ast: 'r, 'r>(
        &mut self,
        node: &'ast FamilyName,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <FamilyName as VisitWithAstPath<Self>>::visit_children_with_ast_path(node, self, __ast_path)
    }
    #[doc = "Visit a node of type `Vec < FamilyName >`.\n\nBy default, this method calls [`Vec < \
             FamilyName >::visit_children_with_ast_path`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_family_names<'ast: 'r, 'r>(
        &mut self,
        node: &'ast [FamilyName],
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <[FamilyName] as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Flex`.\n\nBy default, this method calls \
             [`Flex::visit_children_with_ast_path`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_flex<'ast: 'r, 'r>(&mut self, node: &'ast Flex, __ast_path: &mut AstNodePath<'r>) {
        <Flex as VisitWithAstPath<Self>>::visit_children_with_ast_path(node, self, __ast_path)
    }
    #[doc = "Visit a node of type `FontFeatureValuesPrelude`.\n\nBy default, this method calls \
             [`FontFeatureValuesPrelude::visit_children_with_ast_path`]. If you want to recurse, \
             you need to call it manually."]
    #[inline]
    fn visit_font_feature_values_prelude<'ast: 'r, 'r>(
        &mut self,
        node: &'ast FontFeatureValuesPrelude,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <FontFeatureValuesPrelude as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `ForgivingComplexSelector`.\n\nBy default, this method calls \
             [`ForgivingComplexSelector::visit_children_with_ast_path`]. If you want to recurse, \
             you need to call it manually."]
    #[inline]
    fn visit_forgiving_complex_selector<'ast: 'r, 'r>(
        &mut self,
        node: &'ast ForgivingComplexSelector,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <ForgivingComplexSelector as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Vec < ForgivingComplexSelector >`.\n\nBy default, this method \
             calls [`Vec < ForgivingComplexSelector >::visit_children_with_ast_path`]. If you want \
             to recurse, you need to call it manually."]
    #[inline]
    fn visit_forgiving_complex_selectors<'ast: 'r, 'r>(
        &mut self,
        node: &'ast [ForgivingComplexSelector],
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <[ForgivingComplexSelector] as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `ForgivingRelativeSelector`.\n\nBy default, this method calls \
             [`ForgivingRelativeSelector::visit_children_with_ast_path`]. If you want to recurse, \
             you need to call it manually."]
    #[inline]
    fn visit_forgiving_relative_selector<'ast: 'r, 'r>(
        &mut self,
        node: &'ast ForgivingRelativeSelector,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <ForgivingRelativeSelector as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `ForgivingRelativeSelectorList`.\n\nBy default, this method \
             calls [`ForgivingRelativeSelectorList::visit_children_with_ast_path`]. If you want to \
             recurse, you need to call it manually."]
    #[inline]
    fn visit_forgiving_relative_selector_list<'ast: 'r, 'r>(
        &mut self,
        node: &'ast ForgivingRelativeSelectorList,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <ForgivingRelativeSelectorList as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Vec < ForgivingRelativeSelector >`.\n\nBy default, this method \
             calls [`Vec < ForgivingRelativeSelector >::visit_children_with_ast_path`]. If you \
             want to recurse, you need to call it manually."]
    #[inline]
    fn visit_forgiving_relative_selectors<'ast: 'r, 'r>(
        &mut self,
        node: &'ast [ForgivingRelativeSelector],
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <[ForgivingRelativeSelector] as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `ForgivingSelectorList`.\n\nBy default, this method calls \
             [`ForgivingSelectorList::visit_children_with_ast_path`]. If you want to recurse, you \
             need to call it manually."]
    #[inline]
    fn visit_forgiving_selector_list<'ast: 'r, 'r>(
        &mut self,
        node: &'ast ForgivingSelectorList,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <ForgivingSelectorList as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Frequency`.\n\nBy default, this method calls \
             [`Frequency::visit_children_with_ast_path`]. If you want to recurse, you need to call \
             it manually."]
    #[inline]
    fn visit_frequency<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Frequency,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <Frequency as VisitWithAstPath<Self>>::visit_children_with_ast_path(node, self, __ast_path)
    }
    #[doc = "Visit a node of type `FrequencyPercentage`.\n\nBy default, this method calls \
             [`FrequencyPercentage::visit_children_with_ast_path`]. If you want to recurse, you \
             need to call it manually."]
    #[inline]
    fn visit_frequency_percentage<'ast: 'r, 'r>(
        &mut self,
        node: &'ast FrequencyPercentage,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <FrequencyPercentage as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Function`.\n\nBy default, this method calls \
             [`Function::visit_children_with_ast_path`]. If you want to recurse, you need to call \
             it manually."]
    #[inline]
    fn visit_function<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Function,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <Function as VisitWithAstPath<Self>>::visit_children_with_ast_path(node, self, __ast_path)
    }
    #[doc = "Visit a node of type `FunctionName`.\n\nBy default, this method calls \
             [`FunctionName::visit_children_with_ast_path`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_function_name<'ast: 'r, 'r>(
        &mut self,
        node: &'ast FunctionName,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <FunctionName as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `GeneralEnclosed`.\n\nBy default, this method calls \
             [`GeneralEnclosed::visit_children_with_ast_path`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn visit_general_enclosed<'ast: 'r, 'r>(
        &mut self,
        node: &'ast GeneralEnclosed,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <GeneralEnclosed as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `HexColor`.\n\nBy default, this method calls \
             [`HexColor::visit_children_with_ast_path`]. If you want to recurse, you need to call \
             it manually."]
    #[inline]
    fn visit_hex_color<'ast: 'r, 'r>(
        &mut self,
        node: &'ast HexColor,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <HexColor as VisitWithAstPath<Self>>::visit_children_with_ast_path(node, self, __ast_path)
    }
    #[doc = "Visit a node of type `Hue`.\n\nBy default, this method calls \
             [`Hue::visit_children_with_ast_path`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_hue<'ast: 'r, 'r>(&mut self, node: &'ast Hue, __ast_path: &mut AstNodePath<'r>) {
        <Hue as VisitWithAstPath<Self>>::visit_children_with_ast_path(node, self, __ast_path)
    }
    #[doc = "Visit a node of type `IdSelector`.\n\nBy default, this method calls \
             [`IdSelector::visit_children_with_ast_path`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_id_selector<'ast: 'r, 'r>(
        &mut self,
        node: &'ast IdSelector,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <IdSelector as VisitWithAstPath<Self>>::visit_children_with_ast_path(node, self, __ast_path)
    }
    #[doc = "Visit a node of type `Ident`.\n\nBy default, this method calls \
             [`Ident::visit_children_with_ast_path`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_ident<'ast: 'r, 'r>(&mut self, node: &'ast Ident, __ast_path: &mut AstNodePath<'r>) {
        <Ident as VisitWithAstPath<Self>>::visit_children_with_ast_path(node, self, __ast_path)
    }
    #[doc = "Visit a node of type `Vec < Ident >`.\n\nBy default, this method calls [`Vec < Ident \
             >::visit_children_with_ast_path`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_idents<'ast: 'r, 'r>(
        &mut self,
        node: &'ast [Ident],
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <[Ident] as VisitWithAstPath<Self>>::visit_children_with_ast_path(node, self, __ast_path)
    }
    #[doc = "Visit a node of type `ImportConditions`.\n\nBy default, this method calls \
             [`ImportConditions::visit_children_with_ast_path`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn visit_import_conditions<'ast: 'r, 'r>(
        &mut self,
        node: &'ast ImportConditions,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <ImportConditions as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `ImportHref`.\n\nBy default, this method calls \
             [`ImportHref::visit_children_with_ast_path`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_import_href<'ast: 'r, 'r>(
        &mut self,
        node: &'ast ImportHref,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <ImportHref as VisitWithAstPath<Self>>::visit_children_with_ast_path(node, self, __ast_path)
    }
    #[doc = "Visit a node of type `ImportLayerName`.\n\nBy default, this method calls \
             [`ImportLayerName::visit_children_with_ast_path`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn visit_import_layer_name<'ast: 'r, 'r>(
        &mut self,
        node: &'ast ImportLayerName,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <ImportLayerName as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `ImportPrelude`.\n\nBy default, this method calls \
             [`ImportPrelude::visit_children_with_ast_path`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_import_prelude<'ast: 'r, 'r>(
        &mut self,
        node: &'ast ImportPrelude,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <ImportPrelude as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `ImportantFlag`.\n\nBy default, this method calls \
             [`ImportantFlag::visit_children_with_ast_path`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_important_flag<'ast: 'r, 'r>(
        &mut self,
        node: &'ast ImportantFlag,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <ImportantFlag as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Integer`.\n\nBy default, this method calls \
             [`Integer::visit_children_with_ast_path`]. If you want to recurse, you need to call \
             it manually."]
    #[inline]
    fn visit_integer<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Integer,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <Integer as VisitWithAstPath<Self>>::visit_children_with_ast_path(node, self, __ast_path)
    }
    #[doc = "Visit a node of type `KeyframeBlock`.\n\nBy default, this method calls \
             [`KeyframeBlock::visit_children_with_ast_path`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_keyframe_block<'ast: 'r, 'r>(
        &mut self,
        node: &'ast KeyframeBlock,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <KeyframeBlock as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `KeyframeSelector`.\n\nBy default, this method calls \
             [`KeyframeSelector::visit_children_with_ast_path`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn visit_keyframe_selector<'ast: 'r, 'r>(
        &mut self,
        node: &'ast KeyframeSelector,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <KeyframeSelector as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Vec < KeyframeSelector >`.\n\nBy default, this method calls \
             [`Vec < KeyframeSelector >::visit_children_with_ast_path`]. If you want to recurse, \
             you need to call it manually."]
    #[inline]
    fn visit_keyframe_selectors<'ast: 'r, 'r>(
        &mut self,
        node: &'ast [KeyframeSelector],
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <[KeyframeSelector] as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `KeyframesName`.\n\nBy default, this method calls \
             [`KeyframesName::visit_children_with_ast_path`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_keyframes_name<'ast: 'r, 'r>(
        &mut self,
        node: &'ast KeyframesName,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <KeyframesName as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `KeyframesPseudoFunction`.\n\nBy default, this method calls \
             [`KeyframesPseudoFunction::visit_children_with_ast_path`]. If you want to recurse, \
             you need to call it manually."]
    #[inline]
    fn visit_keyframes_pseudo_function<'ast: 'r, 'r>(
        &mut self,
        node: &'ast KeyframesPseudoFunction,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <KeyframesPseudoFunction as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `KeyframesPseudoPrefix`.\n\nBy default, this method calls \
             [`KeyframesPseudoPrefix::visit_children_with_ast_path`]. If you want to recurse, you \
             need to call it manually."]
    #[inline]
    fn visit_keyframes_pseudo_prefix<'ast: 'r, 'r>(
        &mut self,
        node: &'ast KeyframesPseudoPrefix,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <KeyframesPseudoPrefix as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `LayerName`.\n\nBy default, this method calls \
             [`LayerName::visit_children_with_ast_path`]. If you want to recurse, you need to call \
             it manually."]
    #[inline]
    fn visit_layer_name<'ast: 'r, 'r>(
        &mut self,
        node: &'ast LayerName,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <LayerName as VisitWithAstPath<Self>>::visit_children_with_ast_path(node, self, __ast_path)
    }
    #[doc = "Visit a node of type `LayerNameList`.\n\nBy default, this method calls \
             [`LayerNameList::visit_children_with_ast_path`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_layer_name_list<'ast: 'r, 'r>(
        &mut self,
        node: &'ast LayerNameList,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <LayerNameList as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Vec < LayerName >`.\n\nBy default, this method calls [`Vec < \
             LayerName >::visit_children_with_ast_path`]. If you want to recurse, you need to call \
             it manually."]
    #[inline]
    fn visit_layer_names<'ast: 'r, 'r>(
        &mut self,
        node: &'ast [LayerName],
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <[LayerName] as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `LayerPrelude`.\n\nBy default, this method calls \
             [`LayerPrelude::visit_children_with_ast_path`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_layer_prelude<'ast: 'r, 'r>(
        &mut self,
        node: &'ast LayerPrelude,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <LayerPrelude as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Length`.\n\nBy default, this method calls \
             [`Length::visit_children_with_ast_path`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_length<'ast: 'r, 'r>(&mut self, node: &'ast Length, __ast_path: &mut AstNodePath<'r>) {
        <Length as VisitWithAstPath<Self>>::visit_children_with_ast_path(node, self, __ast_path)
    }
    #[doc = "Visit a node of type `LengthPercentage`.\n\nBy default, this method calls \
             [`LengthPercentage::visit_children_with_ast_path`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn visit_length_percentage<'ast: 'r, 'r>(
        &mut self,
        node: &'ast LengthPercentage,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <LengthPercentage as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `ListOfComponentValues`.\n\nBy default, this method calls \
             [`ListOfComponentValues::visit_children_with_ast_path`]. If you want to recurse, you \
             need to call it manually."]
    #[inline]
    fn visit_list_of_component_values<'ast: 'r, 'r>(
        &mut self,
        node: &'ast ListOfComponentValues,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <ListOfComponentValues as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `MediaAnd`.\n\nBy default, this method calls \
             [`MediaAnd::visit_children_with_ast_path`]. If you want to recurse, you need to call \
             it manually."]
    #[inline]
    fn visit_media_and<'ast: 'r, 'r>(
        &mut self,
        node: &'ast MediaAnd,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <MediaAnd as VisitWithAstPath<Self>>::visit_children_with_ast_path(node, self, __ast_path)
    }
    #[doc = "Visit a node of type `MediaCondition`.\n\nBy default, this method calls \
             [`MediaCondition::visit_children_with_ast_path`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_media_condition<'ast: 'r, 'r>(
        &mut self,
        node: &'ast MediaCondition,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <MediaCondition as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `MediaConditionAllType`.\n\nBy default, this method calls \
             [`MediaConditionAllType::visit_children_with_ast_path`]. If you want to recurse, you \
             need to call it manually."]
    #[inline]
    fn visit_media_condition_all_type<'ast: 'r, 'r>(
        &mut self,
        node: &'ast MediaConditionAllType,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <MediaConditionAllType as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Vec < MediaConditionAllType >`.\n\nBy default, this method \
             calls [`Vec < MediaConditionAllType >::visit_children_with_ast_path`]. If you want to \
             recurse, you need to call it manually."]
    #[inline]
    fn visit_media_condition_all_types<'ast: 'r, 'r>(
        &mut self,
        node: &'ast [MediaConditionAllType],
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <[MediaConditionAllType] as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `MediaConditionType`.\n\nBy default, this method calls \
             [`MediaConditionType::visit_children_with_ast_path`]. If you want to recurse, you \
             need to call it manually."]
    #[inline]
    fn visit_media_condition_type<'ast: 'r, 'r>(
        &mut self,
        node: &'ast MediaConditionType,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <MediaConditionType as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `MediaConditionWithoutOr`.\n\nBy default, this method calls \
             [`MediaConditionWithoutOr::visit_children_with_ast_path`]. If you want to recurse, \
             you need to call it manually."]
    #[inline]
    fn visit_media_condition_without_or<'ast: 'r, 'r>(
        &mut self,
        node: &'ast MediaConditionWithoutOr,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <MediaConditionWithoutOr as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `MediaConditionWithoutOrType`.\n\nBy default, this method calls \
             [`MediaConditionWithoutOrType::visit_children_with_ast_path`]. If you want to \
             recurse, you need to call it manually."]
    #[inline]
    fn visit_media_condition_without_or_type<'ast: 'r, 'r>(
        &mut self,
        node: &'ast MediaConditionWithoutOrType,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <MediaConditionWithoutOrType as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Vec < MediaConditionWithoutOrType >`.\n\nBy default, this \
             method calls [`Vec < MediaConditionWithoutOrType >::visit_children_with_ast_path`]. \
             If you want to recurse, you need to call it manually."]
    #[inline]
    fn visit_media_condition_without_or_types<'ast: 'r, 'r>(
        &mut self,
        node: &'ast [MediaConditionWithoutOrType],
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <[MediaConditionWithoutOrType] as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `MediaFeature`.\n\nBy default, this method calls \
             [`MediaFeature::visit_children_with_ast_path`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_media_feature<'ast: 'r, 'r>(
        &mut self,
        node: &'ast MediaFeature,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <MediaFeature as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `MediaFeatureBoolean`.\n\nBy default, this method calls \
             [`MediaFeatureBoolean::visit_children_with_ast_path`]. If you want to recurse, you \
             need to call it manually."]
    #[inline]
    fn visit_media_feature_boolean<'ast: 'r, 'r>(
        &mut self,
        node: &'ast MediaFeatureBoolean,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <MediaFeatureBoolean as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `MediaFeatureName`.\n\nBy default, this method calls \
             [`MediaFeatureName::visit_children_with_ast_path`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn visit_media_feature_name<'ast: 'r, 'r>(
        &mut self,
        node: &'ast MediaFeatureName,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <MediaFeatureName as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `MediaFeaturePlain`.\n\nBy default, this method calls \
             [`MediaFeaturePlain::visit_children_with_ast_path`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn visit_media_feature_plain<'ast: 'r, 'r>(
        &mut self,
        node: &'ast MediaFeaturePlain,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <MediaFeaturePlain as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `MediaFeatureRange`.\n\nBy default, this method calls \
             [`MediaFeatureRange::visit_children_with_ast_path`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn visit_media_feature_range<'ast: 'r, 'r>(
        &mut self,
        node: &'ast MediaFeatureRange,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <MediaFeatureRange as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `MediaFeatureRangeComparison`.\n\nBy default, this method calls \
             [`MediaFeatureRangeComparison::visit_children_with_ast_path`]. If you want to \
             recurse, you need to call it manually."]
    #[inline]
    fn visit_media_feature_range_comparison<'ast: 'r, 'r>(
        &mut self,
        node: &'ast MediaFeatureRangeComparison,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <MediaFeatureRangeComparison as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `MediaFeatureRangeInterval`.\n\nBy default, this method calls \
             [`MediaFeatureRangeInterval::visit_children_with_ast_path`]. If you want to recurse, \
             you need to call it manually."]
    #[inline]
    fn visit_media_feature_range_interval<'ast: 'r, 'r>(
        &mut self,
        node: &'ast MediaFeatureRangeInterval,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <MediaFeatureRangeInterval as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `MediaFeatureValue`.\n\nBy default, this method calls \
             [`MediaFeatureValue::visit_children_with_ast_path`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn visit_media_feature_value<'ast: 'r, 'r>(
        &mut self,
        node: &'ast MediaFeatureValue,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <MediaFeatureValue as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `MediaInParens`.\n\nBy default, this method calls \
             [`MediaInParens::visit_children_with_ast_path`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_media_in_parens<'ast: 'r, 'r>(
        &mut self,
        node: &'ast MediaInParens,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <MediaInParens as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `MediaNot`.\n\nBy default, this method calls \
             [`MediaNot::visit_children_with_ast_path`]. If you want to recurse, you need to call \
             it manually."]
    #[inline]
    fn visit_media_not<'ast: 'r, 'r>(
        &mut self,
        node: &'ast MediaNot,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <MediaNot as VisitWithAstPath<Self>>::visit_children_with_ast_path(node, self, __ast_path)
    }
    #[doc = "Visit a node of type `MediaOr`.\n\nBy default, this method calls \
             [`MediaOr::visit_children_with_ast_path`]. If you want to recurse, you need to call \
             it manually."]
    #[inline]
    fn visit_media_or<'ast: 'r, 'r>(
        &mut self,
        node: &'ast MediaOr,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <MediaOr as VisitWithAstPath<Self>>::visit_children_with_ast_path(node, self, __ast_path)
    }
    #[doc = "Visit a node of type `MediaQuery`.\n\nBy default, this method calls \
             [`MediaQuery::visit_children_with_ast_path`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_media_query<'ast: 'r, 'r>(
        &mut self,
        node: &'ast MediaQuery,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <MediaQuery as VisitWithAstPath<Self>>::visit_children_with_ast_path(node, self, __ast_path)
    }
    #[doc = "Visit a node of type `MediaQueryList`.\n\nBy default, this method calls \
             [`MediaQueryList::visit_children_with_ast_path`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_media_query_list<'ast: 'r, 'r>(
        &mut self,
        node: &'ast MediaQueryList,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <MediaQueryList as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Vec < MediaQuery >`.\n\nBy default, this method calls [`Vec < \
             MediaQuery >::visit_children_with_ast_path`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_media_querys<'ast: 'r, 'r>(
        &mut self,
        node: &'ast [MediaQuery],
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <[MediaQuery] as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `MediaType`.\n\nBy default, this method calls \
             [`MediaType::visit_children_with_ast_path`]. If you want to recurse, you need to call \
             it manually."]
    #[inline]
    fn visit_media_type<'ast: 'r, 'r>(
        &mut self,
        node: &'ast MediaType,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <MediaType as VisitWithAstPath<Self>>::visit_children_with_ast_path(node, self, __ast_path)
    }
    #[doc = "Visit a node of type `NamedNamespace`.\n\nBy default, this method calls \
             [`NamedNamespace::visit_children_with_ast_path`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_named_namespace<'ast: 'r, 'r>(
        &mut self,
        node: &'ast NamedNamespace,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <NamedNamespace as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Namespace`.\n\nBy default, this method calls \
             [`Namespace::visit_children_with_ast_path`]. If you want to recurse, you need to call \
             it manually."]
    #[inline]
    fn visit_namespace<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Namespace,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <Namespace as VisitWithAstPath<Self>>::visit_children_with_ast_path(node, self, __ast_path)
    }
    #[doc = "Visit a node of type `NamespacePrefix`.\n\nBy default, this method calls \
             [`NamespacePrefix::visit_children_with_ast_path`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn visit_namespace_prefix<'ast: 'r, 'r>(
        &mut self,
        node: &'ast NamespacePrefix,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <NamespacePrefix as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `NamespacePrelude`.\n\nBy default, this method calls \
             [`NamespacePrelude::visit_children_with_ast_path`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn visit_namespace_prelude<'ast: 'r, 'r>(
        &mut self,
        node: &'ast NamespacePrelude,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <NamespacePrelude as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `NamespacePreludeUri`.\n\nBy default, this method calls \
             [`NamespacePreludeUri::visit_children_with_ast_path`]. If you want to recurse, you \
             need to call it manually."]
    #[inline]
    fn visit_namespace_prelude_uri<'ast: 'r, 'r>(
        &mut self,
        node: &'ast NamespacePreludeUri,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <NamespacePreludeUri as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `NestingSelector`.\n\nBy default, this method calls \
             [`NestingSelector::visit_children_with_ast_path`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn visit_nesting_selector<'ast: 'r, 'r>(
        &mut self,
        node: &'ast NestingSelector,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <NestingSelector as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Number`.\n\nBy default, this method calls \
             [`Number::visit_children_with_ast_path`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_number<'ast: 'r, 'r>(&mut self, node: &'ast Number, __ast_path: &mut AstNodePath<'r>) {
        <Number as VisitWithAstPath<Self>>::visit_children_with_ast_path(node, self, __ast_path)
    }
    #[doc = "Visit a node of type `NumberType`.\n\nBy default, this method calls \
             [`NumberType::visit_children_with_ast_path`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_number_type<'ast: 'r, 'r>(
        &mut self,
        node: &'ast NumberType,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <NumberType as VisitWithAstPath<Self>>::visit_children_with_ast_path(node, self, __ast_path)
    }
    #[doc = "Visit a node of type `Option < Box < AtRulePrelude > >`.\n\nBy default, this method \
             calls [`Option < Box < AtRulePrelude > >::visit_children_with_ast_path`]. If you want \
             to recurse, you need to call it manually."]
    #[inline]
    fn visit_opt_at_rule_prelude<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Option<Box<AtRulePrelude>>,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <Option<Box<AtRulePrelude>> as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Option < swc_atoms :: Atom >`.\n\nBy default, this method calls \
             [`Option < swc_atoms :: Atom >::visit_children_with_ast_path`]. If you want to \
             recurse, you need to call it manually."]
    #[inline]
    fn visit_opt_atom<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Option<swc_atoms::Atom>,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <Option<swc_atoms::Atom> as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Option < AttributeSelectorMatcher >`.\n\nBy default, this \
             method calls [`Option < AttributeSelectorMatcher >::visit_children_with_ast_path`]. \
             If you want to recurse, you need to call it manually."]
    #[inline]
    fn visit_opt_attribute_selector_matcher<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Option<AttributeSelectorMatcher>,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <Option<AttributeSelectorMatcher> as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Option < AttributeSelectorModifier >`.\n\nBy default, this \
             method calls [`Option < AttributeSelectorModifier >::visit_children_with_ast_path`]. \
             If you want to recurse, you need to call it manually."]
    #[inline]
    fn visit_opt_attribute_selector_modifier<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Option<AttributeSelectorModifier>,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <Option<AttributeSelectorModifier> as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Option < AttributeSelectorValue >`.\n\nBy default, this method \
             calls [`Option < AttributeSelectorValue >::visit_children_with_ast_path`]. If you \
             want to recurse, you need to call it manually."]
    #[inline]
    fn visit_opt_attribute_selector_value<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Option<AttributeSelectorValue>,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <Option<AttributeSelectorValue> as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Option < Combinator >`.\n\nBy default, this method calls \
             [`Option < Combinator >::visit_children_with_ast_path`]. If you want to recurse, you \
             need to call it manually."]
    #[inline]
    fn visit_opt_combinator<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Option<Combinator>,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <Option<Combinator> as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Option < ContainerName >`.\n\nBy default, this method calls \
             [`Option < ContainerName >::visit_children_with_ast_path`]. If you want to recurse, \
             you need to call it manually."]
    #[inline]
    fn visit_opt_container_name<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Option<ContainerName>,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <Option<ContainerName> as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Option < ForgivingSelectorList >`.\n\nBy default, this method \
             calls [`Option < ForgivingSelectorList >::visit_children_with_ast_path`]. If you want \
             to recurse, you need to call it manually."]
    #[inline]
    fn visit_opt_forgiving_selector_list<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Option<ForgivingSelectorList>,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <Option<ForgivingSelectorList> as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Option < Box < Function > >`.\n\nBy default, this method calls \
             [`Option < Box < Function > >::visit_children_with_ast_path`]. If you want to \
             recurse, you need to call it manually."]
    #[inline]
    fn visit_opt_function<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Option<Box<Function>>,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <Option<Box<Function>> as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Option < Ident >`.\n\nBy default, this method calls [`Option < \
             Ident >::visit_children_with_ast_path`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_opt_ident<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Option<Ident>,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <Option<Ident> as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Option < Box < ImportConditions > >`.\n\nBy default, this \
             method calls [`Option < Box < ImportConditions > >::visit_children_with_ast_path`]. \
             If you want to recurse, you need to call it manually."]
    #[inline]
    fn visit_opt_import_conditions<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Option<Box<ImportConditions>>,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <Option<Box<ImportConditions>> as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Option < Box < ImportLayerName > >`.\n\nBy default, this method \
             calls [`Option < Box < ImportLayerName > >::visit_children_with_ast_path`]. If you \
             want to recurse, you need to call it manually."]
    #[inline]
    fn visit_opt_import_layer_name<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Option<Box<ImportLayerName>>,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <Option<Box<ImportLayerName>> as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Option < ImportantFlag >`.\n\nBy default, this method calls \
             [`Option < ImportantFlag >::visit_children_with_ast_path`]. If you want to recurse, \
             you need to call it manually."]
    #[inline]
    fn visit_opt_important_flag<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Option<ImportantFlag>,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <Option<ImportantFlag> as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Option < Box < MediaConditionType > >`.\n\nBy default, this \
             method calls [`Option < Box < MediaConditionType > >::visit_children_with_ast_path`]. \
             If you want to recurse, you need to call it manually."]
    #[inline]
    fn visit_opt_media_condition_type<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Option<Box<MediaConditionType>>,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <Option<Box<MediaConditionType>> as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Option < Box < MediaQueryList > >`.\n\nBy default, this method \
             calls [`Option < Box < MediaQueryList > >::visit_children_with_ast_path`]. If you \
             want to recurse, you need to call it manually."]
    #[inline]
    fn visit_opt_media_query_list<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Option<Box<MediaQueryList>>,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <Option<Box<MediaQueryList>> as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Option < MediaType >`.\n\nBy default, this method calls \
             [`Option < MediaType >::visit_children_with_ast_path`]. If you want to recurse, you \
             need to call it manually."]
    #[inline]
    fn visit_opt_media_type<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Option<MediaType>,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <Option<MediaType> as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Option < Namespace >`.\n\nBy default, this method calls \
             [`Option < Namespace >::visit_children_with_ast_path`]. If you want to recurse, you \
             need to call it manually."]
    #[inline]
    fn visit_opt_namespace<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Option<Namespace>,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <Option<Namespace> as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Option < NamespacePrefix >`.\n\nBy default, this method calls \
             [`Option < NamespacePrefix >::visit_children_with_ast_path`]. If you want to recurse, \
             you need to call it manually."]
    #[inline]
    fn visit_opt_namespace_prefix<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Option<NamespacePrefix>,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <Option<NamespacePrefix> as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Option < NestingSelector >`.\n\nBy default, this method calls \
             [`Option < NestingSelector >::visit_children_with_ast_path`]. If you want to recurse, \
             you need to call it manually."]
    #[inline]
    fn visit_opt_nesting_selector<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Option<NestingSelector>,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <Option<NestingSelector> as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Option < Number >`.\n\nBy default, this method calls [`Option < \
             Number >::visit_children_with_ast_path`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_opt_number<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Option<Number>,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <Option<Number> as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Option < Vec < PageSelectorPseudo > >`.\n\nBy default, this \
             method calls [`Option < Vec < PageSelectorPseudo > >::visit_children_with_ast_path`]. \
             If you want to recurse, you need to call it manually."]
    #[inline]
    fn visit_opt_page_selector_pseudos<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Option<Vec<PageSelectorPseudo>>,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <Option<Vec<PageSelectorPseudo>> as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Option < PageSelectorType >`.\n\nBy default, this method calls \
             [`Option < PageSelectorType >::visit_children_with_ast_path`]. If you want to \
             recurse, you need to call it manually."]
    #[inline]
    fn visit_opt_page_selector_type<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Option<PageSelectorType>,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <Option<PageSelectorType> as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Option < Vec < PseudoClassSelectorChildren > >`.\n\nBy default, \
             this method calls [`Option < Vec < PseudoClassSelectorChildren > \
             >::visit_children_with_ast_path`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_opt_pseudo_class_selector_childrens<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Option<Vec<PseudoClassSelectorChildren>>,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        < Option < Vec < PseudoClassSelectorChildren > > as VisitWithAstPath < Self > > :: visit_children_with_ast_path (node , self , __ast_path)
    }
    #[doc = "Visit a node of type `Option < Vec < PseudoElementSelectorChildren > >`.\n\nBy \
             default, this method calls [`Option < Vec < PseudoElementSelectorChildren > \
             >::visit_children_with_ast_path`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_opt_pseudo_element_selector_childrens<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Option<Vec<PseudoElementSelectorChildren>>,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        < Option < Vec < PseudoElementSelectorChildren > > as VisitWithAstPath < Self > > :: visit_children_with_ast_path (node , self , __ast_path)
    }
    #[doc = "Visit a node of type `Option < SimpleBlock >`.\n\nBy default, this method calls \
             [`Option < SimpleBlock >::visit_children_with_ast_path`]. If you want to recurse, you \
             need to call it manually."]
    #[inline]
    fn visit_opt_simple_block<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Option<SimpleBlock>,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <Option<SimpleBlock> as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Option < Box < TypeSelector > >`.\n\nBy default, this method \
             calls [`Option < Box < TypeSelector > >::visit_children_with_ast_path`]. If you want \
             to recurse, you need to call it manually."]
    #[inline]
    fn visit_opt_type_selector<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Option<Box<TypeSelector>>,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <Option<Box<TypeSelector>> as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Option < Vec < UrlModifier > >`.\n\nBy default, this method \
             calls [`Option < Vec < UrlModifier > >::visit_children_with_ast_path`]. If you want \
             to recurse, you need to call it manually."]
    #[inline]
    fn visit_opt_url_modifiers<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Option<Vec<UrlModifier>>,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <Option<Vec<UrlModifier>> as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Option < Box < UrlValue > >`.\n\nBy default, this method calls \
             [`Option < Box < UrlValue > >::visit_children_with_ast_path`]. If you want to \
             recurse, you need to call it manually."]
    #[inline]
    fn visit_opt_url_value<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Option<Box<UrlValue>>,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <Option<Box<UrlValue>> as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `PageSelector`.\n\nBy default, this method calls \
             [`PageSelector::visit_children_with_ast_path`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_page_selector<'ast: 'r, 'r>(
        &mut self,
        node: &'ast PageSelector,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <PageSelector as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `PageSelectorList`.\n\nBy default, this method calls \
             [`PageSelectorList::visit_children_with_ast_path`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn visit_page_selector_list<'ast: 'r, 'r>(
        &mut self,
        node: &'ast PageSelectorList,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <PageSelectorList as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `PageSelectorPseudo`.\n\nBy default, this method calls \
             [`PageSelectorPseudo::visit_children_with_ast_path`]. If you want to recurse, you \
             need to call it manually."]
    #[inline]
    fn visit_page_selector_pseudo<'ast: 'r, 'r>(
        &mut self,
        node: &'ast PageSelectorPseudo,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <PageSelectorPseudo as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Vec < PageSelectorPseudo >`.\n\nBy default, this method calls \
             [`Vec < PageSelectorPseudo >::visit_children_with_ast_path`]. If you want to recurse, \
             you need to call it manually."]
    #[inline]
    fn visit_page_selector_pseudos<'ast: 'r, 'r>(
        &mut self,
        node: &'ast [PageSelectorPseudo],
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <[PageSelectorPseudo] as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `PageSelectorType`.\n\nBy default, this method calls \
             [`PageSelectorType::visit_children_with_ast_path`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn visit_page_selector_type<'ast: 'r, 'r>(
        &mut self,
        node: &'ast PageSelectorType,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <PageSelectorType as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Vec < PageSelector >`.\n\nBy default, this method calls [`Vec < \
             PageSelector >::visit_children_with_ast_path`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_page_selectors<'ast: 'r, 'r>(
        &mut self,
        node: &'ast [PageSelector],
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <[PageSelector] as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Percentage`.\n\nBy default, this method calls \
             [`Percentage::visit_children_with_ast_path`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_percentage<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Percentage,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <Percentage as VisitWithAstPath<Self>>::visit_children_with_ast_path(node, self, __ast_path)
    }
    #[doc = "Visit a node of type `PseudoClassSelector`.\n\nBy default, this method calls \
             [`PseudoClassSelector::visit_children_with_ast_path`]. If you want to recurse, you \
             need to call it manually."]
    #[inline]
    fn visit_pseudo_class_selector<'ast: 'r, 'r>(
        &mut self,
        node: &'ast PseudoClassSelector,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <PseudoClassSelector as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `PseudoClassSelectorChildren`.\n\nBy default, this method calls \
             [`PseudoClassSelectorChildren::visit_children_with_ast_path`]. If you want to \
             recurse, you need to call it manually."]
    #[inline]
    fn visit_pseudo_class_selector_children<'ast: 'r, 'r>(
        &mut self,
        node: &'ast PseudoClassSelectorChildren,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <PseudoClassSelectorChildren as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Vec < PseudoClassSelectorChildren >`.\n\nBy default, this \
             method calls [`Vec < PseudoClassSelectorChildren >::visit_children_with_ast_path`]. \
             If you want to recurse, you need to call it manually."]
    #[inline]
    fn visit_pseudo_class_selector_childrens<'ast: 'r, 'r>(
        &mut self,
        node: &'ast [PseudoClassSelectorChildren],
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <[PseudoClassSelectorChildren] as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `PseudoElementSelector`.\n\nBy default, this method calls \
             [`PseudoElementSelector::visit_children_with_ast_path`]. If you want to recurse, you \
             need to call it manually."]
    #[inline]
    fn visit_pseudo_element_selector<'ast: 'r, 'r>(
        &mut self,
        node: &'ast PseudoElementSelector,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <PseudoElementSelector as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `PseudoElementSelectorChildren`.\n\nBy default, this method \
             calls [`PseudoElementSelectorChildren::visit_children_with_ast_path`]. If you want to \
             recurse, you need to call it manually."]
    #[inline]
    fn visit_pseudo_element_selector_children<'ast: 'r, 'r>(
        &mut self,
        node: &'ast PseudoElementSelectorChildren,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <PseudoElementSelectorChildren as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Vec < PseudoElementSelectorChildren >`.\n\nBy default, this \
             method calls [`Vec < PseudoElementSelectorChildren >::visit_children_with_ast_path`]. \
             If you want to recurse, you need to call it manually."]
    #[inline]
    fn visit_pseudo_element_selector_childrens<'ast: 'r, 'r>(
        &mut self,
        node: &'ast [PseudoElementSelectorChildren],
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <[PseudoElementSelectorChildren] as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `QualifiedRule`.\n\nBy default, this method calls \
             [`QualifiedRule::visit_children_with_ast_path`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_qualified_rule<'ast: 'r, 'r>(
        &mut self,
        node: &'ast QualifiedRule,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <QualifiedRule as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `QualifiedRulePrelude`.\n\nBy default, this method calls \
             [`QualifiedRulePrelude::visit_children_with_ast_path`]. If you want to recurse, you \
             need to call it manually."]
    #[inline]
    fn visit_qualified_rule_prelude<'ast: 'r, 'r>(
        &mut self,
        node: &'ast QualifiedRulePrelude,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <QualifiedRulePrelude as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `QueryInParens`.\n\nBy default, this method calls \
             [`QueryInParens::visit_children_with_ast_path`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_query_in_parens<'ast: 'r, 'r>(
        &mut self,
        node: &'ast QueryInParens,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <QueryInParens as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Ratio`.\n\nBy default, this method calls \
             [`Ratio::visit_children_with_ast_path`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_ratio<'ast: 'r, 'r>(&mut self, node: &'ast Ratio, __ast_path: &mut AstNodePath<'r>) {
        <Ratio as VisitWithAstPath<Self>>::visit_children_with_ast_path(node, self, __ast_path)
    }
    #[doc = "Visit a node of type `RelativeSelector`.\n\nBy default, this method calls \
             [`RelativeSelector::visit_children_with_ast_path`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn visit_relative_selector<'ast: 'r, 'r>(
        &mut self,
        node: &'ast RelativeSelector,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <RelativeSelector as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `RelativeSelectorList`.\n\nBy default, this method calls \
             [`RelativeSelectorList::visit_children_with_ast_path`]. If you want to recurse, you \
             need to call it manually."]
    #[inline]
    fn visit_relative_selector_list<'ast: 'r, 'r>(
        &mut self,
        node: &'ast RelativeSelectorList,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <RelativeSelectorList as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Vec < RelativeSelector >`.\n\nBy default, this method calls \
             [`Vec < RelativeSelector >::visit_children_with_ast_path`]. If you want to recurse, \
             you need to call it manually."]
    #[inline]
    fn visit_relative_selectors<'ast: 'r, 'r>(
        &mut self,
        node: &'ast [RelativeSelector],
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <[RelativeSelector] as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Resolution`.\n\nBy default, this method calls \
             [`Resolution::visit_children_with_ast_path`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_resolution<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Resolution,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <Resolution as VisitWithAstPath<Self>>::visit_children_with_ast_path(node, self, __ast_path)
    }
    #[doc = "Visit a node of type `Rule`.\n\nBy default, this method calls \
             [`Rule::visit_children_with_ast_path`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_rule<'ast: 'r, 'r>(&mut self, node: &'ast Rule, __ast_path: &mut AstNodePath<'r>) {
        <Rule as VisitWithAstPath<Self>>::visit_children_with_ast_path(node, self, __ast_path)
    }
    #[doc = "Visit a node of type `Vec < Rule >`.\n\nBy default, this method calls [`Vec < Rule \
             >::visit_children_with_ast_path`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_rules<'ast: 'r, 'r>(&mut self, node: &'ast [Rule], __ast_path: &mut AstNodePath<'r>) {
        <[Rule] as VisitWithAstPath<Self>>::visit_children_with_ast_path(node, self, __ast_path)
    }
    #[doc = "Visit a node of type `ScopeRange`.\n\nBy default, this method calls \
             [`ScopeRange::visit_children_with_ast_path`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_scope_range<'ast: 'r, 'r>(
        &mut self,
        node: &'ast ScopeRange,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <ScopeRange as VisitWithAstPath<Self>>::visit_children_with_ast_path(node, self, __ast_path)
    }
    #[doc = "Visit a node of type `SelectorList`.\n\nBy default, this method calls \
             [`SelectorList::visit_children_with_ast_path`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_selector_list<'ast: 'r, 'r>(
        &mut self,
        node: &'ast SelectorList,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <SelectorList as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `SequenceOfCustomIdents`.\n\nBy default, this method calls \
             [`SequenceOfCustomIdents::visit_children_with_ast_path`]. If you want to recurse, you \
             need to call it manually."]
    #[inline]
    fn visit_sequence_of_custom_idents<'ast: 'r, 'r>(
        &mut self,
        node: &'ast SequenceOfCustomIdents,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <SequenceOfCustomIdents as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `SimpleBlock`.\n\nBy default, this method calls \
             [`SimpleBlock::visit_children_with_ast_path`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_simple_block<'ast: 'r, 'r>(
        &mut self,
        node: &'ast SimpleBlock,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <SimpleBlock as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `SizeFeature`.\n\nBy default, this method calls \
             [`SizeFeature::visit_children_with_ast_path`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_size_feature<'ast: 'r, 'r>(
        &mut self,
        node: &'ast SizeFeature,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <SizeFeature as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `SizeFeatureBoolean`.\n\nBy default, this method calls \
             [`SizeFeatureBoolean::visit_children_with_ast_path`]. If you want to recurse, you \
             need to call it manually."]
    #[inline]
    fn visit_size_feature_boolean<'ast: 'r, 'r>(
        &mut self,
        node: &'ast SizeFeatureBoolean,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <SizeFeatureBoolean as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `SizeFeatureName`.\n\nBy default, this method calls \
             [`SizeFeatureName::visit_children_with_ast_path`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn visit_size_feature_name<'ast: 'r, 'r>(
        &mut self,
        node: &'ast SizeFeatureName,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <SizeFeatureName as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `SizeFeaturePlain`.\n\nBy default, this method calls \
             [`SizeFeaturePlain::visit_children_with_ast_path`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn visit_size_feature_plain<'ast: 'r, 'r>(
        &mut self,
        node: &'ast SizeFeaturePlain,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <SizeFeaturePlain as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `SizeFeatureRange`.\n\nBy default, this method calls \
             [`SizeFeatureRange::visit_children_with_ast_path`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn visit_size_feature_range<'ast: 'r, 'r>(
        &mut self,
        node: &'ast SizeFeatureRange,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <SizeFeatureRange as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `SizeFeatureRangeComparison`.\n\nBy default, this method calls \
             [`SizeFeatureRangeComparison::visit_children_with_ast_path`]. If you want to recurse, \
             you need to call it manually."]
    #[inline]
    fn visit_size_feature_range_comparison<'ast: 'r, 'r>(
        &mut self,
        node: &'ast SizeFeatureRangeComparison,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <SizeFeatureRangeComparison as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `SizeFeatureRangeInterval`.\n\nBy default, this method calls \
             [`SizeFeatureRangeInterval::visit_children_with_ast_path`]. If you want to recurse, \
             you need to call it manually."]
    #[inline]
    fn visit_size_feature_range_interval<'ast: 'r, 'r>(
        &mut self,
        node: &'ast SizeFeatureRangeInterval,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <SizeFeatureRangeInterval as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `SizeFeatureValue`.\n\nBy default, this method calls \
             [`SizeFeatureValue::visit_children_with_ast_path`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn visit_size_feature_value<'ast: 'r, 'r>(
        &mut self,
        node: &'ast SizeFeatureValue,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <SizeFeatureValue as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `swc_common :: Span`.\n\nBy default, this method calls \
             [`swc_common :: Span::visit_children_with_ast_path`]. If you want to recurse, you \
             need to call it manually."]
    #[inline]
    fn visit_span<'ast: 'r, 'r>(
        &mut self,
        node: &'ast swc_common::Span,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <swc_common::Span as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Str`.\n\nBy default, this method calls \
             [`Str::visit_children_with_ast_path`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_str<'ast: 'r, 'r>(&mut self, node: &'ast Str, __ast_path: &mut AstNodePath<'r>) {
        <Str as VisitWithAstPath<Self>>::visit_children_with_ast_path(node, self, __ast_path)
    }
    #[doc = "Visit a node of type `StyleBlock`.\n\nBy default, this method calls \
             [`StyleBlock::visit_children_with_ast_path`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_style_block<'ast: 'r, 'r>(
        &mut self,
        node: &'ast StyleBlock,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <StyleBlock as VisitWithAstPath<Self>>::visit_children_with_ast_path(node, self, __ast_path)
    }
    #[doc = "Visit a node of type `Stylesheet`.\n\nBy default, this method calls \
             [`Stylesheet::visit_children_with_ast_path`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_stylesheet<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Stylesheet,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <Stylesheet as VisitWithAstPath<Self>>::visit_children_with_ast_path(node, self, __ast_path)
    }
    #[doc = "Visit a node of type `SubclassSelector`.\n\nBy default, this method calls \
             [`SubclassSelector::visit_children_with_ast_path`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn visit_subclass_selector<'ast: 'r, 'r>(
        &mut self,
        node: &'ast SubclassSelector,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <SubclassSelector as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Vec < SubclassSelector >`.\n\nBy default, this method calls \
             [`Vec < SubclassSelector >::visit_children_with_ast_path`]. If you want to recurse, \
             you need to call it manually."]
    #[inline]
    fn visit_subclass_selectors<'ast: 'r, 'r>(
        &mut self,
        node: &'ast [SubclassSelector],
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <[SubclassSelector] as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `SupportsAnd`.\n\nBy default, this method calls \
             [`SupportsAnd::visit_children_with_ast_path`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_supports_and<'ast: 'r, 'r>(
        &mut self,
        node: &'ast SupportsAnd,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <SupportsAnd as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `SupportsCondition`.\n\nBy default, this method calls \
             [`SupportsCondition::visit_children_with_ast_path`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn visit_supports_condition<'ast: 'r, 'r>(
        &mut self,
        node: &'ast SupportsCondition,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <SupportsCondition as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `SupportsConditionType`.\n\nBy default, this method calls \
             [`SupportsConditionType::visit_children_with_ast_path`]. If you want to recurse, you \
             need to call it manually."]
    #[inline]
    fn visit_supports_condition_type<'ast: 'r, 'r>(
        &mut self,
        node: &'ast SupportsConditionType,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <SupportsConditionType as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Vec < SupportsConditionType >`.\n\nBy default, this method \
             calls [`Vec < SupportsConditionType >::visit_children_with_ast_path`]. If you want to \
             recurse, you need to call it manually."]
    #[inline]
    fn visit_supports_condition_types<'ast: 'r, 'r>(
        &mut self,
        node: &'ast [SupportsConditionType],
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <[SupportsConditionType] as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `SupportsFeature`.\n\nBy default, this method calls \
             [`SupportsFeature::visit_children_with_ast_path`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn visit_supports_feature<'ast: 'r, 'r>(
        &mut self,
        node: &'ast SupportsFeature,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <SupportsFeature as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `SupportsInParens`.\n\nBy default, this method calls \
             [`SupportsInParens::visit_children_with_ast_path`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn visit_supports_in_parens<'ast: 'r, 'r>(
        &mut self,
        node: &'ast SupportsInParens,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <SupportsInParens as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `SupportsNot`.\n\nBy default, this method calls \
             [`SupportsNot::visit_children_with_ast_path`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_supports_not<'ast: 'r, 'r>(
        &mut self,
        node: &'ast SupportsNot,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <SupportsNot as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `SupportsOr`.\n\nBy default, this method calls \
             [`SupportsOr::visit_children_with_ast_path`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_supports_or<'ast: 'r, 'r>(
        &mut self,
        node: &'ast SupportsOr,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <SupportsOr as VisitWithAstPath<Self>>::visit_children_with_ast_path(node, self, __ast_path)
    }
    #[doc = "Visit a node of type `TagNameSelector`.\n\nBy default, this method calls \
             [`TagNameSelector::visit_children_with_ast_path`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn visit_tag_name_selector<'ast: 'r, 'r>(
        &mut self,
        node: &'ast TagNameSelector,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <TagNameSelector as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Time`.\n\nBy default, this method calls \
             [`Time::visit_children_with_ast_path`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_time<'ast: 'r, 'r>(&mut self, node: &'ast Time, __ast_path: &mut AstNodePath<'r>) {
        <Time as VisitWithAstPath<Self>>::visit_children_with_ast_path(node, self, __ast_path)
    }
    #[doc = "Visit a node of type `TimePercentage`.\n\nBy default, this method calls \
             [`TimePercentage::visit_children_with_ast_path`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_time_percentage<'ast: 'r, 'r>(
        &mut self,
        node: &'ast TimePercentage,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <TimePercentage as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Token`.\n\nBy default, this method calls \
             [`Token::visit_children_with_ast_path`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_token<'ast: 'r, 'r>(&mut self, node: &'ast Token, __ast_path: &mut AstNodePath<'r>) {
        <Token as VisitWithAstPath<Self>>::visit_children_with_ast_path(node, self, __ast_path)
    }
    #[doc = "Visit a node of type `TokenAndSpan`.\n\nBy default, this method calls \
             [`TokenAndSpan::visit_children_with_ast_path`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_token_and_span<'ast: 'r, 'r>(
        &mut self,
        node: &'ast TokenAndSpan,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <TokenAndSpan as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `TypeSelector`.\n\nBy default, this method calls \
             [`TypeSelector::visit_children_with_ast_path`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_type_selector<'ast: 'r, 'r>(
        &mut self,
        node: &'ast TypeSelector,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <TypeSelector as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `UnicodeRange`.\n\nBy default, this method calls \
             [`UnicodeRange::visit_children_with_ast_path`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_unicode_range<'ast: 'r, 'r>(
        &mut self,
        node: &'ast UnicodeRange,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <UnicodeRange as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `UniversalSelector`.\n\nBy default, this method calls \
             [`UniversalSelector::visit_children_with_ast_path`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn visit_universal_selector<'ast: 'r, 'r>(
        &mut self,
        node: &'ast UniversalSelector,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <UniversalSelector as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `UnknownDimension`.\n\nBy default, this method calls \
             [`UnknownDimension::visit_children_with_ast_path`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn visit_unknown_dimension<'ast: 'r, 'r>(
        &mut self,
        node: &'ast UnknownDimension,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <UnknownDimension as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Url`.\n\nBy default, this method calls \
             [`Url::visit_children_with_ast_path`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_url<'ast: 'r, 'r>(&mut self, node: &'ast Url, __ast_path: &mut AstNodePath<'r>) {
        <Url as VisitWithAstPath<Self>>::visit_children_with_ast_path(node, self, __ast_path)
    }
    #[doc = "Visit a node of type `UrlKeyValue`.\n\nBy default, this method calls \
             [`UrlKeyValue::visit_children_with_ast_path`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_url_key_value<'ast: 'r, 'r>(
        &mut self,
        node: &'ast UrlKeyValue,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <UrlKeyValue as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `UrlModifier`.\n\nBy default, this method calls \
             [`UrlModifier::visit_children_with_ast_path`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_url_modifier<'ast: 'r, 'r>(
        &mut self,
        node: &'ast UrlModifier,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <UrlModifier as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Vec < UrlModifier >`.\n\nBy default, this method calls [`Vec < \
             UrlModifier >::visit_children_with_ast_path`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_url_modifiers<'ast: 'r, 'r>(
        &mut self,
        node: &'ast [UrlModifier],
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <[UrlModifier] as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `UrlValue`.\n\nBy default, this method calls \
             [`UrlValue::visit_children_with_ast_path`]. If you want to recurse, you need to call \
             it manually."]
    #[inline]
    fn visit_url_value<'ast: 'r, 'r>(
        &mut self,
        node: &'ast UrlValue,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <UrlValue as VisitWithAstPath<Self>>::visit_children_with_ast_path(node, self, __ast_path)
    }
    #[doc = "Visit a node of type `UrlValueRaw`.\n\nBy default, this method calls \
             [`UrlValueRaw::visit_children_with_ast_path`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_url_value_raw<'ast: 'r, 'r>(
        &mut self,
        node: &'ast UrlValueRaw,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <UrlValueRaw as VisitWithAstPath<Self>>::visit_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `WqName`.\n\nBy default, this method calls \
             [`WqName::visit_children_with_ast_path`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_wq_name<'ast: 'r, 'r>(
        &mut self,
        node: &'ast WqName,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <WqName as VisitWithAstPath<Self>>::visit_children_with_ast_path(node, self, __ast_path)
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V> VisitAstPath for &mut V
where
    V: ?Sized + VisitAstPath,
{
    #[inline]
    fn visit_absolute_color_base<'ast: 'r, 'r>(
        &mut self,
        node: &'ast AbsoluteColorBase,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_absolute_color_base(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_alpha_value<'ast: 'r, 'r>(
        &mut self,
        node: &'ast AlphaValue,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_alpha_value(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_an_plus_b<'ast: 'r, 'r>(
        &mut self,
        node: &'ast AnPlusB,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_an_plus_b(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_an_plus_b_notation<'ast: 'r, 'r>(
        &mut self,
        node: &'ast AnPlusBNotation,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_an_plus_b_notation(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_angle<'ast: 'r, 'r>(&mut self, node: &'ast Angle, __ast_path: &mut AstNodePath<'r>) {
        <V as VisitAstPath>::visit_angle(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_angle_percentage<'ast: 'r, 'r>(
        &mut self,
        node: &'ast AnglePercentage,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_angle_percentage(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_any_namespace<'ast: 'r, 'r>(
        &mut self,
        node: &'ast AnyNamespace,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_any_namespace(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_at_rule<'ast: 'r, 'r>(
        &mut self,
        node: &'ast AtRule,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_at_rule(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_at_rule_name<'ast: 'r, 'r>(
        &mut self,
        node: &'ast AtRuleName,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_at_rule_name(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_at_rule_prelude<'ast: 'r, 'r>(
        &mut self,
        node: &'ast AtRulePrelude,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_at_rule_prelude(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_atom<'ast: 'r, 'r>(
        &mut self,
        node: &'ast swc_atoms::Atom,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_atom(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_attribute_selector<'ast: 'r, 'r>(
        &mut self,
        node: &'ast AttributeSelector,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_attribute_selector(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_attribute_selector_matcher<'ast: 'r, 'r>(
        &mut self,
        node: &'ast AttributeSelectorMatcher,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_attribute_selector_matcher(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_attribute_selector_matcher_value<'ast: 'r, 'r>(
        &mut self,
        node: &'ast AttributeSelectorMatcherValue,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_attribute_selector_matcher_value(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_attribute_selector_modifier<'ast: 'r, 'r>(
        &mut self,
        node: &'ast AttributeSelectorModifier,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_attribute_selector_modifier(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_attribute_selector_value<'ast: 'r, 'r>(
        &mut self,
        node: &'ast AttributeSelectorValue,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_attribute_selector_value(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_bin_op<'ast: 'r, 'r>(&mut self, node: &'ast BinOp, __ast_path: &mut AstNodePath<'r>) {
        <V as VisitAstPath>::visit_bin_op(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_calc_operator<'ast: 'r, 'r>(
        &mut self,
        node: &'ast CalcOperator,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_calc_operator(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_calc_operator_type<'ast: 'r, 'r>(
        &mut self,
        node: &'ast CalcOperatorType,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_calc_operator_type(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_calc_product<'ast: 'r, 'r>(
        &mut self,
        node: &'ast CalcProduct,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_calc_product(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_calc_product_or_operator<'ast: 'r, 'r>(
        &mut self,
        node: &'ast CalcProductOrOperator,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_calc_product_or_operator(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_calc_product_or_operators<'ast: 'r, 'r>(
        &mut self,
        node: &'ast [CalcProductOrOperator],
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_calc_product_or_operators(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_calc_sum<'ast: 'r, 'r>(
        &mut self,
        node: &'ast CalcSum,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_calc_sum(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_calc_value<'ast: 'r, 'r>(
        &mut self,
        node: &'ast CalcValue,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_calc_value(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_calc_value_or_operator<'ast: 'r, 'r>(
        &mut self,
        node: &'ast CalcValueOrOperator,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_calc_value_or_operator(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_calc_value_or_operators<'ast: 'r, 'r>(
        &mut self,
        node: &'ast [CalcValueOrOperator],
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_calc_value_or_operators(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_class_selector<'ast: 'r, 'r>(
        &mut self,
        node: &'ast ClassSelector,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_class_selector(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_cmyk_component<'ast: 'r, 'r>(
        &mut self,
        node: &'ast CmykComponent,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_cmyk_component(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_color<'ast: 'r, 'r>(&mut self, node: &'ast Color, __ast_path: &mut AstNodePath<'r>) {
        <V as VisitAstPath>::visit_color(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_color_profile_name<'ast: 'r, 'r>(
        &mut self,
        node: &'ast ColorProfileName,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_color_profile_name(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_combinator<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Combinator,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_combinator(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_combinator_value<'ast: 'r, 'r>(
        &mut self,
        node: &'ast CombinatorValue,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_combinator_value(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_complex_selector<'ast: 'r, 'r>(
        &mut self,
        node: &'ast ComplexSelector,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_complex_selector(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_complex_selector_children<'ast: 'r, 'r>(
        &mut self,
        node: &'ast ComplexSelectorChildren,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_complex_selector_children(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_complex_selector_childrens<'ast: 'r, 'r>(
        &mut self,
        node: &'ast [ComplexSelectorChildren],
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_complex_selector_childrens(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_complex_selectors<'ast: 'r, 'r>(
        &mut self,
        node: &'ast [ComplexSelector],
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_complex_selectors(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_component_value<'ast: 'r, 'r>(
        &mut self,
        node: &'ast ComponentValue,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_component_value(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_component_values<'ast: 'r, 'r>(
        &mut self,
        node: &'ast [ComponentValue],
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_component_values(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_compound_selector<'ast: 'r, 'r>(
        &mut self,
        node: &'ast CompoundSelector,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_compound_selector(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_compound_selector_list<'ast: 'r, 'r>(
        &mut self,
        node: &'ast CompoundSelectorList,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_compound_selector_list(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_compound_selectors<'ast: 'r, 'r>(
        &mut self,
        node: &'ast [CompoundSelector],
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_compound_selectors(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_container_condition<'ast: 'r, 'r>(
        &mut self,
        node: &'ast ContainerCondition,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_container_condition(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_container_name<'ast: 'r, 'r>(
        &mut self,
        node: &'ast ContainerName,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_container_name(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_container_query<'ast: 'r, 'r>(
        &mut self,
        node: &'ast ContainerQuery,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_container_query(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_container_query_and<'ast: 'r, 'r>(
        &mut self,
        node: &'ast ContainerQueryAnd,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_container_query_and(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_container_query_not<'ast: 'r, 'r>(
        &mut self,
        node: &'ast ContainerQueryNot,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_container_query_not(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_container_query_or<'ast: 'r, 'r>(
        &mut self,
        node: &'ast ContainerQueryOr,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_container_query_or(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_container_query_type<'ast: 'r, 'r>(
        &mut self,
        node: &'ast ContainerQueryType,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_container_query_type(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_container_query_types<'ast: 'r, 'r>(
        &mut self,
        node: &'ast [ContainerQueryType],
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_container_query_types(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_custom_highlight_name<'ast: 'r, 'r>(
        &mut self,
        node: &'ast CustomHighlightName,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_custom_highlight_name(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_custom_ident<'ast: 'r, 'r>(
        &mut self,
        node: &'ast CustomIdent,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_custom_ident(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_custom_idents<'ast: 'r, 'r>(
        &mut self,
        node: &'ast [CustomIdent],
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_custom_idents(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_custom_media_query<'ast: 'r, 'r>(
        &mut self,
        node: &'ast CustomMediaQuery,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_custom_media_query(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_custom_media_query_media_type<'ast: 'r, 'r>(
        &mut self,
        node: &'ast CustomMediaQueryMediaType,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_custom_media_query_media_type(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_custom_property_name<'ast: 'r, 'r>(
        &mut self,
        node: &'ast CustomPropertyName,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_custom_property_name(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_dashed_ident<'ast: 'r, 'r>(
        &mut self,
        node: &'ast DashedIdent,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_dashed_ident(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_declaration<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Declaration,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_declaration(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_declaration_name<'ast: 'r, 'r>(
        &mut self,
        node: &'ast DeclarationName,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_declaration_name(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_declaration_or_at_rule<'ast: 'r, 'r>(
        &mut self,
        node: &'ast DeclarationOrAtRule,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_declaration_or_at_rule(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_delimiter<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Delimiter,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_delimiter(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_delimiter_value<'ast: 'r, 'r>(
        &mut self,
        node: &'ast DelimiterValue,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_delimiter_value(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_dimension<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Dimension,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_dimension(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_dimension_token<'ast: 'r, 'r>(
        &mut self,
        node: &'ast DimensionToken,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_dimension_token(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_document_prelude<'ast: 'r, 'r>(
        &mut self,
        node: &'ast DocumentPrelude,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_document_prelude(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_document_prelude_matching_function<'ast: 'r, 'r>(
        &mut self,
        node: &'ast DocumentPreludeMatchingFunction,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_document_prelude_matching_function(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_document_prelude_matching_functions<'ast: 'r, 'r>(
        &mut self,
        node: &'ast [DocumentPreludeMatchingFunction],
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_document_prelude_matching_functions(
            &mut **self,
            node,
            __ast_path,
        )
    }

    #[inline]
    fn visit_extension_name<'ast: 'r, 'r>(
        &mut self,
        node: &'ast ExtensionName,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_extension_name(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_family_name<'ast: 'r, 'r>(
        &mut self,
        node: &'ast FamilyName,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_family_name(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_family_names<'ast: 'r, 'r>(
        &mut self,
        node: &'ast [FamilyName],
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_family_names(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_flex<'ast: 'r, 'r>(&mut self, node: &'ast Flex, __ast_path: &mut AstNodePath<'r>) {
        <V as VisitAstPath>::visit_flex(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_font_feature_values_prelude<'ast: 'r, 'r>(
        &mut self,
        node: &'ast FontFeatureValuesPrelude,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_font_feature_values_prelude(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_forgiving_complex_selector<'ast: 'r, 'r>(
        &mut self,
        node: &'ast ForgivingComplexSelector,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_forgiving_complex_selector(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_forgiving_complex_selectors<'ast: 'r, 'r>(
        &mut self,
        node: &'ast [ForgivingComplexSelector],
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_forgiving_complex_selectors(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_forgiving_relative_selector<'ast: 'r, 'r>(
        &mut self,
        node: &'ast ForgivingRelativeSelector,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_forgiving_relative_selector(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_forgiving_relative_selector_list<'ast: 'r, 'r>(
        &mut self,
        node: &'ast ForgivingRelativeSelectorList,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_forgiving_relative_selector_list(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_forgiving_relative_selectors<'ast: 'r, 'r>(
        &mut self,
        node: &'ast [ForgivingRelativeSelector],
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_forgiving_relative_selectors(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_forgiving_selector_list<'ast: 'r, 'r>(
        &mut self,
        node: &'ast ForgivingSelectorList,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_forgiving_selector_list(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_frequency<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Frequency,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_frequency(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_frequency_percentage<'ast: 'r, 'r>(
        &mut self,
        node: &'ast FrequencyPercentage,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_frequency_percentage(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_function<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Function,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_function(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_function_name<'ast: 'r, 'r>(
        &mut self,
        node: &'ast FunctionName,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_function_name(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_general_enclosed<'ast: 'r, 'r>(
        &mut self,
        node: &'ast GeneralEnclosed,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_general_enclosed(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_hex_color<'ast: 'r, 'r>(
        &mut self,
        node: &'ast HexColor,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_hex_color(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_hue<'ast: 'r, 'r>(&mut self, node: &'ast Hue, __ast_path: &mut AstNodePath<'r>) {
        <V as VisitAstPath>::visit_hue(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_id_selector<'ast: 'r, 'r>(
        &mut self,
        node: &'ast IdSelector,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_id_selector(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_ident<'ast: 'r, 'r>(&mut self, node: &'ast Ident, __ast_path: &mut AstNodePath<'r>) {
        <V as VisitAstPath>::visit_ident(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_idents<'ast: 'r, 'r>(
        &mut self,
        node: &'ast [Ident],
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_idents(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_import_conditions<'ast: 'r, 'r>(
        &mut self,
        node: &'ast ImportConditions,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_import_conditions(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_import_href<'ast: 'r, 'r>(
        &mut self,
        node: &'ast ImportHref,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_import_href(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_import_layer_name<'ast: 'r, 'r>(
        &mut self,
        node: &'ast ImportLayerName,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_import_layer_name(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_import_prelude<'ast: 'r, 'r>(
        &mut self,
        node: &'ast ImportPrelude,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_import_prelude(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_important_flag<'ast: 'r, 'r>(
        &mut self,
        node: &'ast ImportantFlag,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_important_flag(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_integer<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Integer,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_integer(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_keyframe_block<'ast: 'r, 'r>(
        &mut self,
        node: &'ast KeyframeBlock,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_keyframe_block(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_keyframe_selector<'ast: 'r, 'r>(
        &mut self,
        node: &'ast KeyframeSelector,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_keyframe_selector(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_keyframe_selectors<'ast: 'r, 'r>(
        &mut self,
        node: &'ast [KeyframeSelector],
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_keyframe_selectors(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_keyframes_name<'ast: 'r, 'r>(
        &mut self,
        node: &'ast KeyframesName,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_keyframes_name(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_keyframes_pseudo_function<'ast: 'r, 'r>(
        &mut self,
        node: &'ast KeyframesPseudoFunction,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_keyframes_pseudo_function(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_keyframes_pseudo_prefix<'ast: 'r, 'r>(
        &mut self,
        node: &'ast KeyframesPseudoPrefix,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_keyframes_pseudo_prefix(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_layer_name<'ast: 'r, 'r>(
        &mut self,
        node: &'ast LayerName,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_layer_name(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_layer_name_list<'ast: 'r, 'r>(
        &mut self,
        node: &'ast LayerNameList,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_layer_name_list(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_layer_names<'ast: 'r, 'r>(
        &mut self,
        node: &'ast [LayerName],
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_layer_names(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_layer_prelude<'ast: 'r, 'r>(
        &mut self,
        node: &'ast LayerPrelude,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_layer_prelude(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_length<'ast: 'r, 'r>(&mut self, node: &'ast Length, __ast_path: &mut AstNodePath<'r>) {
        <V as VisitAstPath>::visit_length(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_length_percentage<'ast: 'r, 'r>(
        &mut self,
        node: &'ast LengthPercentage,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_length_percentage(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_list_of_component_values<'ast: 'r, 'r>(
        &mut self,
        node: &'ast ListOfComponentValues,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_list_of_component_values(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_media_and<'ast: 'r, 'r>(
        &mut self,
        node: &'ast MediaAnd,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_media_and(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_media_condition<'ast: 'r, 'r>(
        &mut self,
        node: &'ast MediaCondition,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_media_condition(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_media_condition_all_type<'ast: 'r, 'r>(
        &mut self,
        node: &'ast MediaConditionAllType,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_media_condition_all_type(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_media_condition_all_types<'ast: 'r, 'r>(
        &mut self,
        node: &'ast [MediaConditionAllType],
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_media_condition_all_types(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_media_condition_type<'ast: 'r, 'r>(
        &mut self,
        node: &'ast MediaConditionType,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_media_condition_type(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_media_condition_without_or<'ast: 'r, 'r>(
        &mut self,
        node: &'ast MediaConditionWithoutOr,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_media_condition_without_or(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_media_condition_without_or_type<'ast: 'r, 'r>(
        &mut self,
        node: &'ast MediaConditionWithoutOrType,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_media_condition_without_or_type(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_media_condition_without_or_types<'ast: 'r, 'r>(
        &mut self,
        node: &'ast [MediaConditionWithoutOrType],
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_media_condition_without_or_types(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_media_feature<'ast: 'r, 'r>(
        &mut self,
        node: &'ast MediaFeature,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_media_feature(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_media_feature_boolean<'ast: 'r, 'r>(
        &mut self,
        node: &'ast MediaFeatureBoolean,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_media_feature_boolean(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_media_feature_name<'ast: 'r, 'r>(
        &mut self,
        node: &'ast MediaFeatureName,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_media_feature_name(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_media_feature_plain<'ast: 'r, 'r>(
        &mut self,
        node: &'ast MediaFeaturePlain,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_media_feature_plain(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_media_feature_range<'ast: 'r, 'r>(
        &mut self,
        node: &'ast MediaFeatureRange,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_media_feature_range(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_media_feature_range_comparison<'ast: 'r, 'r>(
        &mut self,
        node: &'ast MediaFeatureRangeComparison,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_media_feature_range_comparison(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_media_feature_range_interval<'ast: 'r, 'r>(
        &mut self,
        node: &'ast MediaFeatureRangeInterval,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_media_feature_range_interval(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_media_feature_value<'ast: 'r, 'r>(
        &mut self,
        node: &'ast MediaFeatureValue,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_media_feature_value(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_media_in_parens<'ast: 'r, 'r>(
        &mut self,
        node: &'ast MediaInParens,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_media_in_parens(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_media_not<'ast: 'r, 'r>(
        &mut self,
        node: &'ast MediaNot,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_media_not(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_media_or<'ast: 'r, 'r>(
        &mut self,
        node: &'ast MediaOr,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_media_or(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_media_query<'ast: 'r, 'r>(
        &mut self,
        node: &'ast MediaQuery,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_media_query(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_media_query_list<'ast: 'r, 'r>(
        &mut self,
        node: &'ast MediaQueryList,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_media_query_list(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_media_querys<'ast: 'r, 'r>(
        &mut self,
        node: &'ast [MediaQuery],
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_media_querys(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_media_type<'ast: 'r, 'r>(
        &mut self,
        node: &'ast MediaType,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_media_type(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_named_namespace<'ast: 'r, 'r>(
        &mut self,
        node: &'ast NamedNamespace,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_named_namespace(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_namespace<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Namespace,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_namespace(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_namespace_prefix<'ast: 'r, 'r>(
        &mut self,
        node: &'ast NamespacePrefix,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_namespace_prefix(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_namespace_prelude<'ast: 'r, 'r>(
        &mut self,
        node: &'ast NamespacePrelude,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_namespace_prelude(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_namespace_prelude_uri<'ast: 'r, 'r>(
        &mut self,
        node: &'ast NamespacePreludeUri,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_namespace_prelude_uri(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_nesting_selector<'ast: 'r, 'r>(
        &mut self,
        node: &'ast NestingSelector,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_nesting_selector(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_number<'ast: 'r, 'r>(&mut self, node: &'ast Number, __ast_path: &mut AstNodePath<'r>) {
        <V as VisitAstPath>::visit_number(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_number_type<'ast: 'r, 'r>(
        &mut self,
        node: &'ast NumberType,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_number_type(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_opt_at_rule_prelude<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Option<Box<AtRulePrelude>>,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_opt_at_rule_prelude(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_opt_atom<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Option<swc_atoms::Atom>,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_opt_atom(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_opt_attribute_selector_matcher<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Option<AttributeSelectorMatcher>,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_opt_attribute_selector_matcher(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_opt_attribute_selector_modifier<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Option<AttributeSelectorModifier>,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_opt_attribute_selector_modifier(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_opt_attribute_selector_value<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Option<AttributeSelectorValue>,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_opt_attribute_selector_value(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_opt_combinator<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Option<Combinator>,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_opt_combinator(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_opt_container_name<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Option<ContainerName>,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_opt_container_name(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_opt_forgiving_selector_list<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Option<ForgivingSelectorList>,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_opt_forgiving_selector_list(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_opt_function<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Option<Box<Function>>,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_opt_function(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_opt_ident<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Option<Ident>,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_opt_ident(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_opt_import_conditions<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Option<Box<ImportConditions>>,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_opt_import_conditions(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_opt_import_layer_name<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Option<Box<ImportLayerName>>,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_opt_import_layer_name(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_opt_important_flag<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Option<ImportantFlag>,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_opt_important_flag(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_opt_media_condition_type<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Option<Box<MediaConditionType>>,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_opt_media_condition_type(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_opt_media_query_list<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Option<Box<MediaQueryList>>,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_opt_media_query_list(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_opt_media_type<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Option<MediaType>,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_opt_media_type(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_opt_namespace<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Option<Namespace>,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_opt_namespace(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_opt_namespace_prefix<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Option<NamespacePrefix>,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_opt_namespace_prefix(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_opt_nesting_selector<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Option<NestingSelector>,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_opt_nesting_selector(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_opt_number<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Option<Number>,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_opt_number(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_opt_page_selector_pseudos<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Option<Vec<PageSelectorPseudo>>,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_opt_page_selector_pseudos(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_opt_page_selector_type<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Option<PageSelectorType>,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_opt_page_selector_type(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_opt_pseudo_class_selector_childrens<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Option<Vec<PseudoClassSelectorChildren>>,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_opt_pseudo_class_selector_childrens(
            &mut **self,
            node,
            __ast_path,
        )
    }

    #[inline]
    fn visit_opt_pseudo_element_selector_childrens<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Option<Vec<PseudoElementSelectorChildren>>,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_opt_pseudo_element_selector_childrens(
            &mut **self,
            node,
            __ast_path,
        )
    }

    #[inline]
    fn visit_opt_simple_block<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Option<SimpleBlock>,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_opt_simple_block(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_opt_type_selector<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Option<Box<TypeSelector>>,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_opt_type_selector(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_opt_url_modifiers<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Option<Vec<UrlModifier>>,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_opt_url_modifiers(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_opt_url_value<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Option<Box<UrlValue>>,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_opt_url_value(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_page_selector<'ast: 'r, 'r>(
        &mut self,
        node: &'ast PageSelector,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_page_selector(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_page_selector_list<'ast: 'r, 'r>(
        &mut self,
        node: &'ast PageSelectorList,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_page_selector_list(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_page_selector_pseudo<'ast: 'r, 'r>(
        &mut self,
        node: &'ast PageSelectorPseudo,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_page_selector_pseudo(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_page_selector_pseudos<'ast: 'r, 'r>(
        &mut self,
        node: &'ast [PageSelectorPseudo],
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_page_selector_pseudos(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_page_selector_type<'ast: 'r, 'r>(
        &mut self,
        node: &'ast PageSelectorType,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_page_selector_type(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_page_selectors<'ast: 'r, 'r>(
        &mut self,
        node: &'ast [PageSelector],
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_page_selectors(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_percentage<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Percentage,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_percentage(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_pseudo_class_selector<'ast: 'r, 'r>(
        &mut self,
        node: &'ast PseudoClassSelector,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_pseudo_class_selector(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_pseudo_class_selector_children<'ast: 'r, 'r>(
        &mut self,
        node: &'ast PseudoClassSelectorChildren,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_pseudo_class_selector_children(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_pseudo_class_selector_childrens<'ast: 'r, 'r>(
        &mut self,
        node: &'ast [PseudoClassSelectorChildren],
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_pseudo_class_selector_childrens(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_pseudo_element_selector<'ast: 'r, 'r>(
        &mut self,
        node: &'ast PseudoElementSelector,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_pseudo_element_selector(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_pseudo_element_selector_children<'ast: 'r, 'r>(
        &mut self,
        node: &'ast PseudoElementSelectorChildren,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_pseudo_element_selector_children(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_pseudo_element_selector_childrens<'ast: 'r, 'r>(
        &mut self,
        node: &'ast [PseudoElementSelectorChildren],
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_pseudo_element_selector_childrens(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_qualified_rule<'ast: 'r, 'r>(
        &mut self,
        node: &'ast QualifiedRule,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_qualified_rule(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_qualified_rule_prelude<'ast: 'r, 'r>(
        &mut self,
        node: &'ast QualifiedRulePrelude,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_qualified_rule_prelude(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_query_in_parens<'ast: 'r, 'r>(
        &mut self,
        node: &'ast QueryInParens,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_query_in_parens(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_ratio<'ast: 'r, 'r>(&mut self, node: &'ast Ratio, __ast_path: &mut AstNodePath<'r>) {
        <V as VisitAstPath>::visit_ratio(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_relative_selector<'ast: 'r, 'r>(
        &mut self,
        node: &'ast RelativeSelector,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_relative_selector(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_relative_selector_list<'ast: 'r, 'r>(
        &mut self,
        node: &'ast RelativeSelectorList,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_relative_selector_list(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_relative_selectors<'ast: 'r, 'r>(
        &mut self,
        node: &'ast [RelativeSelector],
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_relative_selectors(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_resolution<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Resolution,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_resolution(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_rule<'ast: 'r, 'r>(&mut self, node: &'ast Rule, __ast_path: &mut AstNodePath<'r>) {
        <V as VisitAstPath>::visit_rule(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_rules<'ast: 'r, 'r>(&mut self, node: &'ast [Rule], __ast_path: &mut AstNodePath<'r>) {
        <V as VisitAstPath>::visit_rules(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_scope_range<'ast: 'r, 'r>(
        &mut self,
        node: &'ast ScopeRange,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_scope_range(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_selector_list<'ast: 'r, 'r>(
        &mut self,
        node: &'ast SelectorList,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_selector_list(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_sequence_of_custom_idents<'ast: 'r, 'r>(
        &mut self,
        node: &'ast SequenceOfCustomIdents,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_sequence_of_custom_idents(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_simple_block<'ast: 'r, 'r>(
        &mut self,
        node: &'ast SimpleBlock,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_simple_block(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_size_feature<'ast: 'r, 'r>(
        &mut self,
        node: &'ast SizeFeature,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_size_feature(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_size_feature_boolean<'ast: 'r, 'r>(
        &mut self,
        node: &'ast SizeFeatureBoolean,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_size_feature_boolean(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_size_feature_name<'ast: 'r, 'r>(
        &mut self,
        node: &'ast SizeFeatureName,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_size_feature_name(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_size_feature_plain<'ast: 'r, 'r>(
        &mut self,
        node: &'ast SizeFeaturePlain,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_size_feature_plain(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_size_feature_range<'ast: 'r, 'r>(
        &mut self,
        node: &'ast SizeFeatureRange,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_size_feature_range(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_size_feature_range_comparison<'ast: 'r, 'r>(
        &mut self,
        node: &'ast SizeFeatureRangeComparison,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_size_feature_range_comparison(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_size_feature_range_interval<'ast: 'r, 'r>(
        &mut self,
        node: &'ast SizeFeatureRangeInterval,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_size_feature_range_interval(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_size_feature_value<'ast: 'r, 'r>(
        &mut self,
        node: &'ast SizeFeatureValue,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_size_feature_value(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_span<'ast: 'r, 'r>(
        &mut self,
        node: &'ast swc_common::Span,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_span(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_str<'ast: 'r, 'r>(&mut self, node: &'ast Str, __ast_path: &mut AstNodePath<'r>) {
        <V as VisitAstPath>::visit_str(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_style_block<'ast: 'r, 'r>(
        &mut self,
        node: &'ast StyleBlock,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_style_block(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_stylesheet<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Stylesheet,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_stylesheet(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_subclass_selector<'ast: 'r, 'r>(
        &mut self,
        node: &'ast SubclassSelector,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_subclass_selector(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_subclass_selectors<'ast: 'r, 'r>(
        &mut self,
        node: &'ast [SubclassSelector],
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_subclass_selectors(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_supports_and<'ast: 'r, 'r>(
        &mut self,
        node: &'ast SupportsAnd,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_supports_and(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_supports_condition<'ast: 'r, 'r>(
        &mut self,
        node: &'ast SupportsCondition,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_supports_condition(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_supports_condition_type<'ast: 'r, 'r>(
        &mut self,
        node: &'ast SupportsConditionType,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_supports_condition_type(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_supports_condition_types<'ast: 'r, 'r>(
        &mut self,
        node: &'ast [SupportsConditionType],
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_supports_condition_types(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_supports_feature<'ast: 'r, 'r>(
        &mut self,
        node: &'ast SupportsFeature,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_supports_feature(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_supports_in_parens<'ast: 'r, 'r>(
        &mut self,
        node: &'ast SupportsInParens,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_supports_in_parens(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_supports_not<'ast: 'r, 'r>(
        &mut self,
        node: &'ast SupportsNot,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_supports_not(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_supports_or<'ast: 'r, 'r>(
        &mut self,
        node: &'ast SupportsOr,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_supports_or(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_tag_name_selector<'ast: 'r, 'r>(
        &mut self,
        node: &'ast TagNameSelector,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_tag_name_selector(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_time<'ast: 'r, 'r>(&mut self, node: &'ast Time, __ast_path: &mut AstNodePath<'r>) {
        <V as VisitAstPath>::visit_time(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_time_percentage<'ast: 'r, 'r>(
        &mut self,
        node: &'ast TimePercentage,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_time_percentage(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_token<'ast: 'r, 'r>(&mut self, node: &'ast Token, __ast_path: &mut AstNodePath<'r>) {
        <V as VisitAstPath>::visit_token(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_token_and_span<'ast: 'r, 'r>(
        &mut self,
        node: &'ast TokenAndSpan,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_token_and_span(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_type_selector<'ast: 'r, 'r>(
        &mut self,
        node: &'ast TypeSelector,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_type_selector(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_unicode_range<'ast: 'r, 'r>(
        &mut self,
        node: &'ast UnicodeRange,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_unicode_range(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_universal_selector<'ast: 'r, 'r>(
        &mut self,
        node: &'ast UniversalSelector,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_universal_selector(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_unknown_dimension<'ast: 'r, 'r>(
        &mut self,
        node: &'ast UnknownDimension,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_unknown_dimension(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_url<'ast: 'r, 'r>(&mut self, node: &'ast Url, __ast_path: &mut AstNodePath<'r>) {
        <V as VisitAstPath>::visit_url(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_url_key_value<'ast: 'r, 'r>(
        &mut self,
        node: &'ast UrlKeyValue,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_url_key_value(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_url_modifier<'ast: 'r, 'r>(
        &mut self,
        node: &'ast UrlModifier,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_url_modifier(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_url_modifiers<'ast: 'r, 'r>(
        &mut self,
        node: &'ast [UrlModifier],
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_url_modifiers(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_url_value<'ast: 'r, 'r>(
        &mut self,
        node: &'ast UrlValue,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_url_value(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_url_value_raw<'ast: 'r, 'r>(
        &mut self,
        node: &'ast UrlValueRaw,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_url_value_raw(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_wq_name<'ast: 'r, 'r>(
        &mut self,
        node: &'ast WqName,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_wq_name(&mut **self, node, __ast_path)
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V> VisitAstPath for Box<V>
where
    V: ?Sized + VisitAstPath,
{
    #[inline]
    fn visit_absolute_color_base<'ast: 'r, 'r>(
        &mut self,
        node: &'ast AbsoluteColorBase,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_absolute_color_base(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_alpha_value<'ast: 'r, 'r>(
        &mut self,
        node: &'ast AlphaValue,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_alpha_value(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_an_plus_b<'ast: 'r, 'r>(
        &mut self,
        node: &'ast AnPlusB,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_an_plus_b(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_an_plus_b_notation<'ast: 'r, 'r>(
        &mut self,
        node: &'ast AnPlusBNotation,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_an_plus_b_notation(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_angle<'ast: 'r, 'r>(&mut self, node: &'ast Angle, __ast_path: &mut AstNodePath<'r>) {
        <V as VisitAstPath>::visit_angle(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_angle_percentage<'ast: 'r, 'r>(
        &mut self,
        node: &'ast AnglePercentage,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_angle_percentage(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_any_namespace<'ast: 'r, 'r>(
        &mut self,
        node: &'ast AnyNamespace,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_any_namespace(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_at_rule<'ast: 'r, 'r>(
        &mut self,
        node: &'ast AtRule,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_at_rule(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_at_rule_name<'ast: 'r, 'r>(
        &mut self,
        node: &'ast AtRuleName,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_at_rule_name(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_at_rule_prelude<'ast: 'r, 'r>(
        &mut self,
        node: &'ast AtRulePrelude,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_at_rule_prelude(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_atom<'ast: 'r, 'r>(
        &mut self,
        node: &'ast swc_atoms::Atom,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_atom(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_attribute_selector<'ast: 'r, 'r>(
        &mut self,
        node: &'ast AttributeSelector,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_attribute_selector(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_attribute_selector_matcher<'ast: 'r, 'r>(
        &mut self,
        node: &'ast AttributeSelectorMatcher,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_attribute_selector_matcher(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_attribute_selector_matcher_value<'ast: 'r, 'r>(
        &mut self,
        node: &'ast AttributeSelectorMatcherValue,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_attribute_selector_matcher_value(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_attribute_selector_modifier<'ast: 'r, 'r>(
        &mut self,
        node: &'ast AttributeSelectorModifier,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_attribute_selector_modifier(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_attribute_selector_value<'ast: 'r, 'r>(
        &mut self,
        node: &'ast AttributeSelectorValue,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_attribute_selector_value(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_bin_op<'ast: 'r, 'r>(&mut self, node: &'ast BinOp, __ast_path: &mut AstNodePath<'r>) {
        <V as VisitAstPath>::visit_bin_op(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_calc_operator<'ast: 'r, 'r>(
        &mut self,
        node: &'ast CalcOperator,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_calc_operator(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_calc_operator_type<'ast: 'r, 'r>(
        &mut self,
        node: &'ast CalcOperatorType,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_calc_operator_type(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_calc_product<'ast: 'r, 'r>(
        &mut self,
        node: &'ast CalcProduct,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_calc_product(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_calc_product_or_operator<'ast: 'r, 'r>(
        &mut self,
        node: &'ast CalcProductOrOperator,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_calc_product_or_operator(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_calc_product_or_operators<'ast: 'r, 'r>(
        &mut self,
        node: &'ast [CalcProductOrOperator],
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_calc_product_or_operators(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_calc_sum<'ast: 'r, 'r>(
        &mut self,
        node: &'ast CalcSum,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_calc_sum(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_calc_value<'ast: 'r, 'r>(
        &mut self,
        node: &'ast CalcValue,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_calc_value(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_calc_value_or_operator<'ast: 'r, 'r>(
        &mut self,
        node: &'ast CalcValueOrOperator,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_calc_value_or_operator(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_calc_value_or_operators<'ast: 'r, 'r>(
        &mut self,
        node: &'ast [CalcValueOrOperator],
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_calc_value_or_operators(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_class_selector<'ast: 'r, 'r>(
        &mut self,
        node: &'ast ClassSelector,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_class_selector(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_cmyk_component<'ast: 'r, 'r>(
        &mut self,
        node: &'ast CmykComponent,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_cmyk_component(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_color<'ast: 'r, 'r>(&mut self, node: &'ast Color, __ast_path: &mut AstNodePath<'r>) {
        <V as VisitAstPath>::visit_color(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_color_profile_name<'ast: 'r, 'r>(
        &mut self,
        node: &'ast ColorProfileName,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_color_profile_name(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_combinator<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Combinator,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_combinator(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_combinator_value<'ast: 'r, 'r>(
        &mut self,
        node: &'ast CombinatorValue,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_combinator_value(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_complex_selector<'ast: 'r, 'r>(
        &mut self,
        node: &'ast ComplexSelector,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_complex_selector(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_complex_selector_children<'ast: 'r, 'r>(
        &mut self,
        node: &'ast ComplexSelectorChildren,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_complex_selector_children(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_complex_selector_childrens<'ast: 'r, 'r>(
        &mut self,
        node: &'ast [ComplexSelectorChildren],
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_complex_selector_childrens(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_complex_selectors<'ast: 'r, 'r>(
        &mut self,
        node: &'ast [ComplexSelector],
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_complex_selectors(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_component_value<'ast: 'r, 'r>(
        &mut self,
        node: &'ast ComponentValue,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_component_value(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_component_values<'ast: 'r, 'r>(
        &mut self,
        node: &'ast [ComponentValue],
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_component_values(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_compound_selector<'ast: 'r, 'r>(
        &mut self,
        node: &'ast CompoundSelector,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_compound_selector(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_compound_selector_list<'ast: 'r, 'r>(
        &mut self,
        node: &'ast CompoundSelectorList,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_compound_selector_list(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_compound_selectors<'ast: 'r, 'r>(
        &mut self,
        node: &'ast [CompoundSelector],
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_compound_selectors(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_container_condition<'ast: 'r, 'r>(
        &mut self,
        node: &'ast ContainerCondition,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_container_condition(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_container_name<'ast: 'r, 'r>(
        &mut self,
        node: &'ast ContainerName,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_container_name(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_container_query<'ast: 'r, 'r>(
        &mut self,
        node: &'ast ContainerQuery,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_container_query(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_container_query_and<'ast: 'r, 'r>(
        &mut self,
        node: &'ast ContainerQueryAnd,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_container_query_and(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_container_query_not<'ast: 'r, 'r>(
        &mut self,
        node: &'ast ContainerQueryNot,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_container_query_not(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_container_query_or<'ast: 'r, 'r>(
        &mut self,
        node: &'ast ContainerQueryOr,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_container_query_or(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_container_query_type<'ast: 'r, 'r>(
        &mut self,
        node: &'ast ContainerQueryType,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_container_query_type(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_container_query_types<'ast: 'r, 'r>(
        &mut self,
        node: &'ast [ContainerQueryType],
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_container_query_types(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_custom_highlight_name<'ast: 'r, 'r>(
        &mut self,
        node: &'ast CustomHighlightName,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_custom_highlight_name(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_custom_ident<'ast: 'r, 'r>(
        &mut self,
        node: &'ast CustomIdent,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_custom_ident(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_custom_idents<'ast: 'r, 'r>(
        &mut self,
        node: &'ast [CustomIdent],
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_custom_idents(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_custom_media_query<'ast: 'r, 'r>(
        &mut self,
        node: &'ast CustomMediaQuery,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_custom_media_query(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_custom_media_query_media_type<'ast: 'r, 'r>(
        &mut self,
        node: &'ast CustomMediaQueryMediaType,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_custom_media_query_media_type(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_custom_property_name<'ast: 'r, 'r>(
        &mut self,
        node: &'ast CustomPropertyName,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_custom_property_name(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_dashed_ident<'ast: 'r, 'r>(
        &mut self,
        node: &'ast DashedIdent,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_dashed_ident(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_declaration<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Declaration,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_declaration(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_declaration_name<'ast: 'r, 'r>(
        &mut self,
        node: &'ast DeclarationName,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_declaration_name(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_declaration_or_at_rule<'ast: 'r, 'r>(
        &mut self,
        node: &'ast DeclarationOrAtRule,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_declaration_or_at_rule(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_delimiter<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Delimiter,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_delimiter(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_delimiter_value<'ast: 'r, 'r>(
        &mut self,
        node: &'ast DelimiterValue,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_delimiter_value(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_dimension<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Dimension,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_dimension(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_dimension_token<'ast: 'r, 'r>(
        &mut self,
        node: &'ast DimensionToken,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_dimension_token(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_document_prelude<'ast: 'r, 'r>(
        &mut self,
        node: &'ast DocumentPrelude,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_document_prelude(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_document_prelude_matching_function<'ast: 'r, 'r>(
        &mut self,
        node: &'ast DocumentPreludeMatchingFunction,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_document_prelude_matching_function(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_document_prelude_matching_functions<'ast: 'r, 'r>(
        &mut self,
        node: &'ast [DocumentPreludeMatchingFunction],
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_document_prelude_matching_functions(
            &mut **self,
            node,
            __ast_path,
        )
    }

    #[inline]
    fn visit_extension_name<'ast: 'r, 'r>(
        &mut self,
        node: &'ast ExtensionName,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_extension_name(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_family_name<'ast: 'r, 'r>(
        &mut self,
        node: &'ast FamilyName,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_family_name(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_family_names<'ast: 'r, 'r>(
        &mut self,
        node: &'ast [FamilyName],
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_family_names(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_flex<'ast: 'r, 'r>(&mut self, node: &'ast Flex, __ast_path: &mut AstNodePath<'r>) {
        <V as VisitAstPath>::visit_flex(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_font_feature_values_prelude<'ast: 'r, 'r>(
        &mut self,
        node: &'ast FontFeatureValuesPrelude,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_font_feature_values_prelude(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_forgiving_complex_selector<'ast: 'r, 'r>(
        &mut self,
        node: &'ast ForgivingComplexSelector,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_forgiving_complex_selector(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_forgiving_complex_selectors<'ast: 'r, 'r>(
        &mut self,
        node: &'ast [ForgivingComplexSelector],
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_forgiving_complex_selectors(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_forgiving_relative_selector<'ast: 'r, 'r>(
        &mut self,
        node: &'ast ForgivingRelativeSelector,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_forgiving_relative_selector(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_forgiving_relative_selector_list<'ast: 'r, 'r>(
        &mut self,
        node: &'ast ForgivingRelativeSelectorList,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_forgiving_relative_selector_list(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_forgiving_relative_selectors<'ast: 'r, 'r>(
        &mut self,
        node: &'ast [ForgivingRelativeSelector],
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_forgiving_relative_selectors(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_forgiving_selector_list<'ast: 'r, 'r>(
        &mut self,
        node: &'ast ForgivingSelectorList,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_forgiving_selector_list(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_frequency<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Frequency,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_frequency(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_frequency_percentage<'ast: 'r, 'r>(
        &mut self,
        node: &'ast FrequencyPercentage,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_frequency_percentage(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_function<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Function,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_function(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_function_name<'ast: 'r, 'r>(
        &mut self,
        node: &'ast FunctionName,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_function_name(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_general_enclosed<'ast: 'r, 'r>(
        &mut self,
        node: &'ast GeneralEnclosed,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_general_enclosed(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_hex_color<'ast: 'r, 'r>(
        &mut self,
        node: &'ast HexColor,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_hex_color(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_hue<'ast: 'r, 'r>(&mut self, node: &'ast Hue, __ast_path: &mut AstNodePath<'r>) {
        <V as VisitAstPath>::visit_hue(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_id_selector<'ast: 'r, 'r>(
        &mut self,
        node: &'ast IdSelector,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_id_selector(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_ident<'ast: 'r, 'r>(&mut self, node: &'ast Ident, __ast_path: &mut AstNodePath<'r>) {
        <V as VisitAstPath>::visit_ident(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_idents<'ast: 'r, 'r>(
        &mut self,
        node: &'ast [Ident],
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_idents(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_import_conditions<'ast: 'r, 'r>(
        &mut self,
        node: &'ast ImportConditions,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_import_conditions(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_import_href<'ast: 'r, 'r>(
        &mut self,
        node: &'ast ImportHref,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_import_href(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_import_layer_name<'ast: 'r, 'r>(
        &mut self,
        node: &'ast ImportLayerName,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_import_layer_name(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_import_prelude<'ast: 'r, 'r>(
        &mut self,
        node: &'ast ImportPrelude,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_import_prelude(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_important_flag<'ast: 'r, 'r>(
        &mut self,
        node: &'ast ImportantFlag,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_important_flag(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_integer<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Integer,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_integer(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_keyframe_block<'ast: 'r, 'r>(
        &mut self,
        node: &'ast KeyframeBlock,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_keyframe_block(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_keyframe_selector<'ast: 'r, 'r>(
        &mut self,
        node: &'ast KeyframeSelector,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_keyframe_selector(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_keyframe_selectors<'ast: 'r, 'r>(
        &mut self,
        node: &'ast [KeyframeSelector],
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_keyframe_selectors(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_keyframes_name<'ast: 'r, 'r>(
        &mut self,
        node: &'ast KeyframesName,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_keyframes_name(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_keyframes_pseudo_function<'ast: 'r, 'r>(
        &mut self,
        node: &'ast KeyframesPseudoFunction,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_keyframes_pseudo_function(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_keyframes_pseudo_prefix<'ast: 'r, 'r>(
        &mut self,
        node: &'ast KeyframesPseudoPrefix,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_keyframes_pseudo_prefix(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_layer_name<'ast: 'r, 'r>(
        &mut self,
        node: &'ast LayerName,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_layer_name(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_layer_name_list<'ast: 'r, 'r>(
        &mut self,
        node: &'ast LayerNameList,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_layer_name_list(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_layer_names<'ast: 'r, 'r>(
        &mut self,
        node: &'ast [LayerName],
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_layer_names(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_layer_prelude<'ast: 'r, 'r>(
        &mut self,
        node: &'ast LayerPrelude,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_layer_prelude(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_length<'ast: 'r, 'r>(&mut self, node: &'ast Length, __ast_path: &mut AstNodePath<'r>) {
        <V as VisitAstPath>::visit_length(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_length_percentage<'ast: 'r, 'r>(
        &mut self,
        node: &'ast LengthPercentage,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_length_percentage(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_list_of_component_values<'ast: 'r, 'r>(
        &mut self,
        node: &'ast ListOfComponentValues,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_list_of_component_values(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_media_and<'ast: 'r, 'r>(
        &mut self,
        node: &'ast MediaAnd,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_media_and(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_media_condition<'ast: 'r, 'r>(
        &mut self,
        node: &'ast MediaCondition,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_media_condition(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_media_condition_all_type<'ast: 'r, 'r>(
        &mut self,
        node: &'ast MediaConditionAllType,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_media_condition_all_type(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_media_condition_all_types<'ast: 'r, 'r>(
        &mut self,
        node: &'ast [MediaConditionAllType],
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_media_condition_all_types(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_media_condition_type<'ast: 'r, 'r>(
        &mut self,
        node: &'ast MediaConditionType,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_media_condition_type(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_media_condition_without_or<'ast: 'r, 'r>(
        &mut self,
        node: &'ast MediaConditionWithoutOr,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_media_condition_without_or(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_media_condition_without_or_type<'ast: 'r, 'r>(
        &mut self,
        node: &'ast MediaConditionWithoutOrType,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_media_condition_without_or_type(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_media_condition_without_or_types<'ast: 'r, 'r>(
        &mut self,
        node: &'ast [MediaConditionWithoutOrType],
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_media_condition_without_or_types(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_media_feature<'ast: 'r, 'r>(
        &mut self,
        node: &'ast MediaFeature,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_media_feature(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_media_feature_boolean<'ast: 'r, 'r>(
        &mut self,
        node: &'ast MediaFeatureBoolean,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_media_feature_boolean(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_media_feature_name<'ast: 'r, 'r>(
        &mut self,
        node: &'ast MediaFeatureName,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_media_feature_name(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_media_feature_plain<'ast: 'r, 'r>(
        &mut self,
        node: &'ast MediaFeaturePlain,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_media_feature_plain(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_media_feature_range<'ast: 'r, 'r>(
        &mut self,
        node: &'ast MediaFeatureRange,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_media_feature_range(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_media_feature_range_comparison<'ast: 'r, 'r>(
        &mut self,
        node: &'ast MediaFeatureRangeComparison,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_media_feature_range_comparison(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_media_feature_range_interval<'ast: 'r, 'r>(
        &mut self,
        node: &'ast MediaFeatureRangeInterval,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_media_feature_range_interval(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_media_feature_value<'ast: 'r, 'r>(
        &mut self,
        node: &'ast MediaFeatureValue,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_media_feature_value(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_media_in_parens<'ast: 'r, 'r>(
        &mut self,
        node: &'ast MediaInParens,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_media_in_parens(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_media_not<'ast: 'r, 'r>(
        &mut self,
        node: &'ast MediaNot,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_media_not(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_media_or<'ast: 'r, 'r>(
        &mut self,
        node: &'ast MediaOr,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_media_or(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_media_query<'ast: 'r, 'r>(
        &mut self,
        node: &'ast MediaQuery,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_media_query(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_media_query_list<'ast: 'r, 'r>(
        &mut self,
        node: &'ast MediaQueryList,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_media_query_list(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_media_querys<'ast: 'r, 'r>(
        &mut self,
        node: &'ast [MediaQuery],
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_media_querys(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_media_type<'ast: 'r, 'r>(
        &mut self,
        node: &'ast MediaType,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_media_type(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_named_namespace<'ast: 'r, 'r>(
        &mut self,
        node: &'ast NamedNamespace,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_named_namespace(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_namespace<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Namespace,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_namespace(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_namespace_prefix<'ast: 'r, 'r>(
        &mut self,
        node: &'ast NamespacePrefix,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_namespace_prefix(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_namespace_prelude<'ast: 'r, 'r>(
        &mut self,
        node: &'ast NamespacePrelude,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_namespace_prelude(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_namespace_prelude_uri<'ast: 'r, 'r>(
        &mut self,
        node: &'ast NamespacePreludeUri,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_namespace_prelude_uri(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_nesting_selector<'ast: 'r, 'r>(
        &mut self,
        node: &'ast NestingSelector,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_nesting_selector(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_number<'ast: 'r, 'r>(&mut self, node: &'ast Number, __ast_path: &mut AstNodePath<'r>) {
        <V as VisitAstPath>::visit_number(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_number_type<'ast: 'r, 'r>(
        &mut self,
        node: &'ast NumberType,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_number_type(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_opt_at_rule_prelude<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Option<Box<AtRulePrelude>>,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_opt_at_rule_prelude(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_opt_atom<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Option<swc_atoms::Atom>,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_opt_atom(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_opt_attribute_selector_matcher<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Option<AttributeSelectorMatcher>,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_opt_attribute_selector_matcher(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_opt_attribute_selector_modifier<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Option<AttributeSelectorModifier>,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_opt_attribute_selector_modifier(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_opt_attribute_selector_value<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Option<AttributeSelectorValue>,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_opt_attribute_selector_value(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_opt_combinator<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Option<Combinator>,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_opt_combinator(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_opt_container_name<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Option<ContainerName>,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_opt_container_name(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_opt_forgiving_selector_list<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Option<ForgivingSelectorList>,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_opt_forgiving_selector_list(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_opt_function<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Option<Box<Function>>,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_opt_function(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_opt_ident<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Option<Ident>,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_opt_ident(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_opt_import_conditions<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Option<Box<ImportConditions>>,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_opt_import_conditions(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_opt_import_layer_name<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Option<Box<ImportLayerName>>,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_opt_import_layer_name(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_opt_important_flag<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Option<ImportantFlag>,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_opt_important_flag(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_opt_media_condition_type<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Option<Box<MediaConditionType>>,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_opt_media_condition_type(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_opt_media_query_list<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Option<Box<MediaQueryList>>,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_opt_media_query_list(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_opt_media_type<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Option<MediaType>,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_opt_media_type(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_opt_namespace<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Option<Namespace>,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_opt_namespace(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_opt_namespace_prefix<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Option<NamespacePrefix>,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_opt_namespace_prefix(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_opt_nesting_selector<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Option<NestingSelector>,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_opt_nesting_selector(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_opt_number<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Option<Number>,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_opt_number(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_opt_page_selector_pseudos<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Option<Vec<PageSelectorPseudo>>,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_opt_page_selector_pseudos(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_opt_page_selector_type<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Option<PageSelectorType>,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_opt_page_selector_type(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_opt_pseudo_class_selector_childrens<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Option<Vec<PseudoClassSelectorChildren>>,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_opt_pseudo_class_selector_childrens(
            &mut **self,
            node,
            __ast_path,
        )
    }

    #[inline]
    fn visit_opt_pseudo_element_selector_childrens<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Option<Vec<PseudoElementSelectorChildren>>,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_opt_pseudo_element_selector_childrens(
            &mut **self,
            node,
            __ast_path,
        )
    }

    #[inline]
    fn visit_opt_simple_block<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Option<SimpleBlock>,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_opt_simple_block(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_opt_type_selector<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Option<Box<TypeSelector>>,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_opt_type_selector(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_opt_url_modifiers<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Option<Vec<UrlModifier>>,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_opt_url_modifiers(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_opt_url_value<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Option<Box<UrlValue>>,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_opt_url_value(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_page_selector<'ast: 'r, 'r>(
        &mut self,
        node: &'ast PageSelector,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_page_selector(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_page_selector_list<'ast: 'r, 'r>(
        &mut self,
        node: &'ast PageSelectorList,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_page_selector_list(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_page_selector_pseudo<'ast: 'r, 'r>(
        &mut self,
        node: &'ast PageSelectorPseudo,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_page_selector_pseudo(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_page_selector_pseudos<'ast: 'r, 'r>(
        &mut self,
        node: &'ast [PageSelectorPseudo],
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_page_selector_pseudos(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_page_selector_type<'ast: 'r, 'r>(
        &mut self,
        node: &'ast PageSelectorType,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_page_selector_type(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_page_selectors<'ast: 'r, 'r>(
        &mut self,
        node: &'ast [PageSelector],
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_page_selectors(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_percentage<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Percentage,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_percentage(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_pseudo_class_selector<'ast: 'r, 'r>(
        &mut self,
        node: &'ast PseudoClassSelector,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_pseudo_class_selector(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_pseudo_class_selector_children<'ast: 'r, 'r>(
        &mut self,
        node: &'ast PseudoClassSelectorChildren,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_pseudo_class_selector_children(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_pseudo_class_selector_childrens<'ast: 'r, 'r>(
        &mut self,
        node: &'ast [PseudoClassSelectorChildren],
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_pseudo_class_selector_childrens(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_pseudo_element_selector<'ast: 'r, 'r>(
        &mut self,
        node: &'ast PseudoElementSelector,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_pseudo_element_selector(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_pseudo_element_selector_children<'ast: 'r, 'r>(
        &mut self,
        node: &'ast PseudoElementSelectorChildren,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_pseudo_element_selector_children(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_pseudo_element_selector_childrens<'ast: 'r, 'r>(
        &mut self,
        node: &'ast [PseudoElementSelectorChildren],
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_pseudo_element_selector_childrens(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_qualified_rule<'ast: 'r, 'r>(
        &mut self,
        node: &'ast QualifiedRule,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_qualified_rule(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_qualified_rule_prelude<'ast: 'r, 'r>(
        &mut self,
        node: &'ast QualifiedRulePrelude,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_qualified_rule_prelude(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_query_in_parens<'ast: 'r, 'r>(
        &mut self,
        node: &'ast QueryInParens,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_query_in_parens(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_ratio<'ast: 'r, 'r>(&mut self, node: &'ast Ratio, __ast_path: &mut AstNodePath<'r>) {
        <V as VisitAstPath>::visit_ratio(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_relative_selector<'ast: 'r, 'r>(
        &mut self,
        node: &'ast RelativeSelector,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_relative_selector(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_relative_selector_list<'ast: 'r, 'r>(
        &mut self,
        node: &'ast RelativeSelectorList,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_relative_selector_list(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_relative_selectors<'ast: 'r, 'r>(
        &mut self,
        node: &'ast [RelativeSelector],
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_relative_selectors(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_resolution<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Resolution,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_resolution(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_rule<'ast: 'r, 'r>(&mut self, node: &'ast Rule, __ast_path: &mut AstNodePath<'r>) {
        <V as VisitAstPath>::visit_rule(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_rules<'ast: 'r, 'r>(&mut self, node: &'ast [Rule], __ast_path: &mut AstNodePath<'r>) {
        <V as VisitAstPath>::visit_rules(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_scope_range<'ast: 'r, 'r>(
        &mut self,
        node: &'ast ScopeRange,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_scope_range(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_selector_list<'ast: 'r, 'r>(
        &mut self,
        node: &'ast SelectorList,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_selector_list(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_sequence_of_custom_idents<'ast: 'r, 'r>(
        &mut self,
        node: &'ast SequenceOfCustomIdents,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_sequence_of_custom_idents(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_simple_block<'ast: 'r, 'r>(
        &mut self,
        node: &'ast SimpleBlock,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_simple_block(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_size_feature<'ast: 'r, 'r>(
        &mut self,
        node: &'ast SizeFeature,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_size_feature(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_size_feature_boolean<'ast: 'r, 'r>(
        &mut self,
        node: &'ast SizeFeatureBoolean,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_size_feature_boolean(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_size_feature_name<'ast: 'r, 'r>(
        &mut self,
        node: &'ast SizeFeatureName,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_size_feature_name(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_size_feature_plain<'ast: 'r, 'r>(
        &mut self,
        node: &'ast SizeFeaturePlain,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_size_feature_plain(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_size_feature_range<'ast: 'r, 'r>(
        &mut self,
        node: &'ast SizeFeatureRange,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_size_feature_range(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_size_feature_range_comparison<'ast: 'r, 'r>(
        &mut self,
        node: &'ast SizeFeatureRangeComparison,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_size_feature_range_comparison(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_size_feature_range_interval<'ast: 'r, 'r>(
        &mut self,
        node: &'ast SizeFeatureRangeInterval,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_size_feature_range_interval(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_size_feature_value<'ast: 'r, 'r>(
        &mut self,
        node: &'ast SizeFeatureValue,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_size_feature_value(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_span<'ast: 'r, 'r>(
        &mut self,
        node: &'ast swc_common::Span,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_span(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_str<'ast: 'r, 'r>(&mut self, node: &'ast Str, __ast_path: &mut AstNodePath<'r>) {
        <V as VisitAstPath>::visit_str(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_style_block<'ast: 'r, 'r>(
        &mut self,
        node: &'ast StyleBlock,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_style_block(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_stylesheet<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Stylesheet,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_stylesheet(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_subclass_selector<'ast: 'r, 'r>(
        &mut self,
        node: &'ast SubclassSelector,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_subclass_selector(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_subclass_selectors<'ast: 'r, 'r>(
        &mut self,
        node: &'ast [SubclassSelector],
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_subclass_selectors(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_supports_and<'ast: 'r, 'r>(
        &mut self,
        node: &'ast SupportsAnd,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_supports_and(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_supports_condition<'ast: 'r, 'r>(
        &mut self,
        node: &'ast SupportsCondition,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_supports_condition(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_supports_condition_type<'ast: 'r, 'r>(
        &mut self,
        node: &'ast SupportsConditionType,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_supports_condition_type(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_supports_condition_types<'ast: 'r, 'r>(
        &mut self,
        node: &'ast [SupportsConditionType],
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_supports_condition_types(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_supports_feature<'ast: 'r, 'r>(
        &mut self,
        node: &'ast SupportsFeature,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_supports_feature(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_supports_in_parens<'ast: 'r, 'r>(
        &mut self,
        node: &'ast SupportsInParens,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_supports_in_parens(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_supports_not<'ast: 'r, 'r>(
        &mut self,
        node: &'ast SupportsNot,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_supports_not(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_supports_or<'ast: 'r, 'r>(
        &mut self,
        node: &'ast SupportsOr,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_supports_or(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_tag_name_selector<'ast: 'r, 'r>(
        &mut self,
        node: &'ast TagNameSelector,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_tag_name_selector(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_time<'ast: 'r, 'r>(&mut self, node: &'ast Time, __ast_path: &mut AstNodePath<'r>) {
        <V as VisitAstPath>::visit_time(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_time_percentage<'ast: 'r, 'r>(
        &mut self,
        node: &'ast TimePercentage,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_time_percentage(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_token<'ast: 'r, 'r>(&mut self, node: &'ast Token, __ast_path: &mut AstNodePath<'r>) {
        <V as VisitAstPath>::visit_token(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_token_and_span<'ast: 'r, 'r>(
        &mut self,
        node: &'ast TokenAndSpan,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_token_and_span(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_type_selector<'ast: 'r, 'r>(
        &mut self,
        node: &'ast TypeSelector,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_type_selector(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_unicode_range<'ast: 'r, 'r>(
        &mut self,
        node: &'ast UnicodeRange,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_unicode_range(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_universal_selector<'ast: 'r, 'r>(
        &mut self,
        node: &'ast UniversalSelector,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_universal_selector(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_unknown_dimension<'ast: 'r, 'r>(
        &mut self,
        node: &'ast UnknownDimension,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_unknown_dimension(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_url<'ast: 'r, 'r>(&mut self, node: &'ast Url, __ast_path: &mut AstNodePath<'r>) {
        <V as VisitAstPath>::visit_url(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_url_key_value<'ast: 'r, 'r>(
        &mut self,
        node: &'ast UrlKeyValue,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_url_key_value(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_url_modifier<'ast: 'r, 'r>(
        &mut self,
        node: &'ast UrlModifier,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_url_modifier(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_url_modifiers<'ast: 'r, 'r>(
        &mut self,
        node: &'ast [UrlModifier],
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_url_modifiers(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_url_value<'ast: 'r, 'r>(
        &mut self,
        node: &'ast UrlValue,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_url_value(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_url_value_raw<'ast: 'r, 'r>(
        &mut self,
        node: &'ast UrlValueRaw,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_url_value_raw(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_wq_name<'ast: 'r, 'r>(
        &mut self,
        node: &'ast WqName,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_wq_name(&mut **self, node, __ast_path)
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<A, B> VisitAstPath for ::swc_visit::Either<A, B>
where
    A: VisitAstPath,
    B: VisitAstPath,
{
    #[inline]
    fn visit_absolute_color_base<'ast: 'r, 'r>(
        &mut self,
        node: &'ast AbsoluteColorBase,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_absolute_color_base(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_absolute_color_base(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_alpha_value<'ast: 'r, 'r>(
        &mut self,
        node: &'ast AlphaValue,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_alpha_value(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_alpha_value(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_an_plus_b<'ast: 'r, 'r>(
        &mut self,
        node: &'ast AnPlusB,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_an_plus_b(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_an_plus_b(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_an_plus_b_notation<'ast: 'r, 'r>(
        &mut self,
        node: &'ast AnPlusBNotation,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_an_plus_b_notation(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_an_plus_b_notation(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_angle<'ast: 'r, 'r>(&mut self, node: &'ast Angle, __ast_path: &mut AstNodePath<'r>) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_angle(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_angle(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_angle_percentage<'ast: 'r, 'r>(
        &mut self,
        node: &'ast AnglePercentage,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_angle_percentage(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_angle_percentage(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_any_namespace<'ast: 'r, 'r>(
        &mut self,
        node: &'ast AnyNamespace,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_any_namespace(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_any_namespace(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_at_rule<'ast: 'r, 'r>(
        &mut self,
        node: &'ast AtRule,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_at_rule(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_at_rule(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_at_rule_name<'ast: 'r, 'r>(
        &mut self,
        node: &'ast AtRuleName,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_at_rule_name(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_at_rule_name(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_at_rule_prelude<'ast: 'r, 'r>(
        &mut self,
        node: &'ast AtRulePrelude,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_at_rule_prelude(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_at_rule_prelude(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_atom<'ast: 'r, 'r>(
        &mut self,
        node: &'ast swc_atoms::Atom,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => VisitAstPath::visit_atom(visitor, node, __ast_path),
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_atom(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_attribute_selector<'ast: 'r, 'r>(
        &mut self,
        node: &'ast AttributeSelector,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_attribute_selector(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_attribute_selector(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_attribute_selector_matcher<'ast: 'r, 'r>(
        &mut self,
        node: &'ast AttributeSelectorMatcher,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_attribute_selector_matcher(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_attribute_selector_matcher(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_attribute_selector_matcher_value<'ast: 'r, 'r>(
        &mut self,
        node: &'ast AttributeSelectorMatcherValue,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_attribute_selector_matcher_value(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_attribute_selector_matcher_value(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_attribute_selector_modifier<'ast: 'r, 'r>(
        &mut self,
        node: &'ast AttributeSelectorModifier,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_attribute_selector_modifier(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_attribute_selector_modifier(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_attribute_selector_value<'ast: 'r, 'r>(
        &mut self,
        node: &'ast AttributeSelectorValue,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_attribute_selector_value(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_attribute_selector_value(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_bin_op<'ast: 'r, 'r>(&mut self, node: &'ast BinOp, __ast_path: &mut AstNodePath<'r>) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_bin_op(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_bin_op(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_calc_operator<'ast: 'r, 'r>(
        &mut self,
        node: &'ast CalcOperator,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_calc_operator(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_calc_operator(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_calc_operator_type<'ast: 'r, 'r>(
        &mut self,
        node: &'ast CalcOperatorType,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_calc_operator_type(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_calc_operator_type(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_calc_product<'ast: 'r, 'r>(
        &mut self,
        node: &'ast CalcProduct,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_calc_product(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_calc_product(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_calc_product_or_operator<'ast: 'r, 'r>(
        &mut self,
        node: &'ast CalcProductOrOperator,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_calc_product_or_operator(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_calc_product_or_operator(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_calc_product_or_operators<'ast: 'r, 'r>(
        &mut self,
        node: &'ast [CalcProductOrOperator],
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_calc_product_or_operators(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_calc_product_or_operators(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_calc_sum<'ast: 'r, 'r>(
        &mut self,
        node: &'ast CalcSum,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_calc_sum(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_calc_sum(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_calc_value<'ast: 'r, 'r>(
        &mut self,
        node: &'ast CalcValue,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_calc_value(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_calc_value(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_calc_value_or_operator<'ast: 'r, 'r>(
        &mut self,
        node: &'ast CalcValueOrOperator,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_calc_value_or_operator(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_calc_value_or_operator(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_calc_value_or_operators<'ast: 'r, 'r>(
        &mut self,
        node: &'ast [CalcValueOrOperator],
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_calc_value_or_operators(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_calc_value_or_operators(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_class_selector<'ast: 'r, 'r>(
        &mut self,
        node: &'ast ClassSelector,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_class_selector(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_class_selector(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_cmyk_component<'ast: 'r, 'r>(
        &mut self,
        node: &'ast CmykComponent,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_cmyk_component(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_cmyk_component(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_color<'ast: 'r, 'r>(&mut self, node: &'ast Color, __ast_path: &mut AstNodePath<'r>) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_color(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_color(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_color_profile_name<'ast: 'r, 'r>(
        &mut self,
        node: &'ast ColorProfileName,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_color_profile_name(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_color_profile_name(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_combinator<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Combinator,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_combinator(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_combinator(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_combinator_value<'ast: 'r, 'r>(
        &mut self,
        node: &'ast CombinatorValue,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_combinator_value(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_combinator_value(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_complex_selector<'ast: 'r, 'r>(
        &mut self,
        node: &'ast ComplexSelector,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_complex_selector(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_complex_selector(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_complex_selector_children<'ast: 'r, 'r>(
        &mut self,
        node: &'ast ComplexSelectorChildren,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_complex_selector_children(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_complex_selector_children(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_complex_selector_childrens<'ast: 'r, 'r>(
        &mut self,
        node: &'ast [ComplexSelectorChildren],
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_complex_selector_childrens(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_complex_selector_childrens(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_complex_selectors<'ast: 'r, 'r>(
        &mut self,
        node: &'ast [ComplexSelector],
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_complex_selectors(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_complex_selectors(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_component_value<'ast: 'r, 'r>(
        &mut self,
        node: &'ast ComponentValue,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_component_value(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_component_value(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_component_values<'ast: 'r, 'r>(
        &mut self,
        node: &'ast [ComponentValue],
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_component_values(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_component_values(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_compound_selector<'ast: 'r, 'r>(
        &mut self,
        node: &'ast CompoundSelector,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_compound_selector(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_compound_selector(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_compound_selector_list<'ast: 'r, 'r>(
        &mut self,
        node: &'ast CompoundSelectorList,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_compound_selector_list(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_compound_selector_list(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_compound_selectors<'ast: 'r, 'r>(
        &mut self,
        node: &'ast [CompoundSelector],
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_compound_selectors(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_compound_selectors(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_container_condition<'ast: 'r, 'r>(
        &mut self,
        node: &'ast ContainerCondition,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_container_condition(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_container_condition(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_container_name<'ast: 'r, 'r>(
        &mut self,
        node: &'ast ContainerName,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_container_name(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_container_name(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_container_query<'ast: 'r, 'r>(
        &mut self,
        node: &'ast ContainerQuery,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_container_query(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_container_query(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_container_query_and<'ast: 'r, 'r>(
        &mut self,
        node: &'ast ContainerQueryAnd,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_container_query_and(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_container_query_and(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_container_query_not<'ast: 'r, 'r>(
        &mut self,
        node: &'ast ContainerQueryNot,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_container_query_not(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_container_query_not(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_container_query_or<'ast: 'r, 'r>(
        &mut self,
        node: &'ast ContainerQueryOr,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_container_query_or(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_container_query_or(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_container_query_type<'ast: 'r, 'r>(
        &mut self,
        node: &'ast ContainerQueryType,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_container_query_type(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_container_query_type(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_container_query_types<'ast: 'r, 'r>(
        &mut self,
        node: &'ast [ContainerQueryType],
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_container_query_types(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_container_query_types(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_custom_highlight_name<'ast: 'r, 'r>(
        &mut self,
        node: &'ast CustomHighlightName,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_custom_highlight_name(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_custom_highlight_name(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_custom_ident<'ast: 'r, 'r>(
        &mut self,
        node: &'ast CustomIdent,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_custom_ident(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_custom_ident(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_custom_idents<'ast: 'r, 'r>(
        &mut self,
        node: &'ast [CustomIdent],
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_custom_idents(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_custom_idents(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_custom_media_query<'ast: 'r, 'r>(
        &mut self,
        node: &'ast CustomMediaQuery,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_custom_media_query(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_custom_media_query(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_custom_media_query_media_type<'ast: 'r, 'r>(
        &mut self,
        node: &'ast CustomMediaQueryMediaType,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_custom_media_query_media_type(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_custom_media_query_media_type(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_custom_property_name<'ast: 'r, 'r>(
        &mut self,
        node: &'ast CustomPropertyName,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_custom_property_name(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_custom_property_name(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_dashed_ident<'ast: 'r, 'r>(
        &mut self,
        node: &'ast DashedIdent,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_dashed_ident(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_dashed_ident(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_declaration<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Declaration,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_declaration(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_declaration(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_declaration_name<'ast: 'r, 'r>(
        &mut self,
        node: &'ast DeclarationName,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_declaration_name(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_declaration_name(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_declaration_or_at_rule<'ast: 'r, 'r>(
        &mut self,
        node: &'ast DeclarationOrAtRule,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_declaration_or_at_rule(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_declaration_or_at_rule(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_delimiter<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Delimiter,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_delimiter(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_delimiter(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_delimiter_value<'ast: 'r, 'r>(
        &mut self,
        node: &'ast DelimiterValue,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_delimiter_value(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_delimiter_value(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_dimension<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Dimension,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_dimension(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_dimension(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_dimension_token<'ast: 'r, 'r>(
        &mut self,
        node: &'ast DimensionToken,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_dimension_token(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_dimension_token(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_document_prelude<'ast: 'r, 'r>(
        &mut self,
        node: &'ast DocumentPrelude,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_document_prelude(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_document_prelude(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_document_prelude_matching_function<'ast: 'r, 'r>(
        &mut self,
        node: &'ast DocumentPreludeMatchingFunction,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_document_prelude_matching_function(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_document_prelude_matching_function(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_document_prelude_matching_functions<'ast: 'r, 'r>(
        &mut self,
        node: &'ast [DocumentPreludeMatchingFunction],
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_document_prelude_matching_functions(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_document_prelude_matching_functions(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_extension_name<'ast: 'r, 'r>(
        &mut self,
        node: &'ast ExtensionName,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_extension_name(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_extension_name(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_family_name<'ast: 'r, 'r>(
        &mut self,
        node: &'ast FamilyName,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_family_name(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_family_name(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_family_names<'ast: 'r, 'r>(
        &mut self,
        node: &'ast [FamilyName],
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_family_names(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_family_names(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_flex<'ast: 'r, 'r>(&mut self, node: &'ast Flex, __ast_path: &mut AstNodePath<'r>) {
        match self {
            swc_visit::Either::Left(visitor) => VisitAstPath::visit_flex(visitor, node, __ast_path),
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_flex(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_font_feature_values_prelude<'ast: 'r, 'r>(
        &mut self,
        node: &'ast FontFeatureValuesPrelude,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_font_feature_values_prelude(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_font_feature_values_prelude(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_forgiving_complex_selector<'ast: 'r, 'r>(
        &mut self,
        node: &'ast ForgivingComplexSelector,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_forgiving_complex_selector(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_forgiving_complex_selector(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_forgiving_complex_selectors<'ast: 'r, 'r>(
        &mut self,
        node: &'ast [ForgivingComplexSelector],
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_forgiving_complex_selectors(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_forgiving_complex_selectors(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_forgiving_relative_selector<'ast: 'r, 'r>(
        &mut self,
        node: &'ast ForgivingRelativeSelector,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_forgiving_relative_selector(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_forgiving_relative_selector(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_forgiving_relative_selector_list<'ast: 'r, 'r>(
        &mut self,
        node: &'ast ForgivingRelativeSelectorList,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_forgiving_relative_selector_list(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_forgiving_relative_selector_list(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_forgiving_relative_selectors<'ast: 'r, 'r>(
        &mut self,
        node: &'ast [ForgivingRelativeSelector],
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_forgiving_relative_selectors(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_forgiving_relative_selectors(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_forgiving_selector_list<'ast: 'r, 'r>(
        &mut self,
        node: &'ast ForgivingSelectorList,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_forgiving_selector_list(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_forgiving_selector_list(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_frequency<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Frequency,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_frequency(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_frequency(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_frequency_percentage<'ast: 'r, 'r>(
        &mut self,
        node: &'ast FrequencyPercentage,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_frequency_percentage(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_frequency_percentage(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_function<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Function,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_function(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_function(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_function_name<'ast: 'r, 'r>(
        &mut self,
        node: &'ast FunctionName,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_function_name(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_function_name(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_general_enclosed<'ast: 'r, 'r>(
        &mut self,
        node: &'ast GeneralEnclosed,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_general_enclosed(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_general_enclosed(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_hex_color<'ast: 'r, 'r>(
        &mut self,
        node: &'ast HexColor,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_hex_color(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_hex_color(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_hue<'ast: 'r, 'r>(&mut self, node: &'ast Hue, __ast_path: &mut AstNodePath<'r>) {
        match self {
            swc_visit::Either::Left(visitor) => VisitAstPath::visit_hue(visitor, node, __ast_path),
            swc_visit::Either::Right(visitor) => VisitAstPath::visit_hue(visitor, node, __ast_path),
        }
    }

    #[inline]
    fn visit_id_selector<'ast: 'r, 'r>(
        &mut self,
        node: &'ast IdSelector,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_id_selector(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_id_selector(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_ident<'ast: 'r, 'r>(&mut self, node: &'ast Ident, __ast_path: &mut AstNodePath<'r>) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_ident(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_ident(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_idents<'ast: 'r, 'r>(
        &mut self,
        node: &'ast [Ident],
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_idents(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_idents(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_import_conditions<'ast: 'r, 'r>(
        &mut self,
        node: &'ast ImportConditions,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_import_conditions(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_import_conditions(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_import_href<'ast: 'r, 'r>(
        &mut self,
        node: &'ast ImportHref,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_import_href(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_import_href(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_import_layer_name<'ast: 'r, 'r>(
        &mut self,
        node: &'ast ImportLayerName,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_import_layer_name(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_import_layer_name(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_import_prelude<'ast: 'r, 'r>(
        &mut self,
        node: &'ast ImportPrelude,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_import_prelude(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_import_prelude(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_important_flag<'ast: 'r, 'r>(
        &mut self,
        node: &'ast ImportantFlag,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_important_flag(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_important_flag(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_integer<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Integer,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_integer(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_integer(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_keyframe_block<'ast: 'r, 'r>(
        &mut self,
        node: &'ast KeyframeBlock,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_keyframe_block(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_keyframe_block(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_keyframe_selector<'ast: 'r, 'r>(
        &mut self,
        node: &'ast KeyframeSelector,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_keyframe_selector(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_keyframe_selector(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_keyframe_selectors<'ast: 'r, 'r>(
        &mut self,
        node: &'ast [KeyframeSelector],
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_keyframe_selectors(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_keyframe_selectors(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_keyframes_name<'ast: 'r, 'r>(
        &mut self,
        node: &'ast KeyframesName,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_keyframes_name(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_keyframes_name(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_keyframes_pseudo_function<'ast: 'r, 'r>(
        &mut self,
        node: &'ast KeyframesPseudoFunction,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_keyframes_pseudo_function(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_keyframes_pseudo_function(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_keyframes_pseudo_prefix<'ast: 'r, 'r>(
        &mut self,
        node: &'ast KeyframesPseudoPrefix,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_keyframes_pseudo_prefix(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_keyframes_pseudo_prefix(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_layer_name<'ast: 'r, 'r>(
        &mut self,
        node: &'ast LayerName,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_layer_name(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_layer_name(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_layer_name_list<'ast: 'r, 'r>(
        &mut self,
        node: &'ast LayerNameList,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_layer_name_list(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_layer_name_list(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_layer_names<'ast: 'r, 'r>(
        &mut self,
        node: &'ast [LayerName],
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_layer_names(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_layer_names(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_layer_prelude<'ast: 'r, 'r>(
        &mut self,
        node: &'ast LayerPrelude,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_layer_prelude(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_layer_prelude(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_length<'ast: 'r, 'r>(&mut self, node: &'ast Length, __ast_path: &mut AstNodePath<'r>) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_length(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_length(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_length_percentage<'ast: 'r, 'r>(
        &mut self,
        node: &'ast LengthPercentage,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_length_percentage(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_length_percentage(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_list_of_component_values<'ast: 'r, 'r>(
        &mut self,
        node: &'ast ListOfComponentValues,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_list_of_component_values(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_list_of_component_values(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_media_and<'ast: 'r, 'r>(
        &mut self,
        node: &'ast MediaAnd,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_media_and(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_media_and(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_media_condition<'ast: 'r, 'r>(
        &mut self,
        node: &'ast MediaCondition,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_media_condition(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_media_condition(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_media_condition_all_type<'ast: 'r, 'r>(
        &mut self,
        node: &'ast MediaConditionAllType,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_media_condition_all_type(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_media_condition_all_type(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_media_condition_all_types<'ast: 'r, 'r>(
        &mut self,
        node: &'ast [MediaConditionAllType],
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_media_condition_all_types(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_media_condition_all_types(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_media_condition_type<'ast: 'r, 'r>(
        &mut self,
        node: &'ast MediaConditionType,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_media_condition_type(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_media_condition_type(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_media_condition_without_or<'ast: 'r, 'r>(
        &mut self,
        node: &'ast MediaConditionWithoutOr,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_media_condition_without_or(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_media_condition_without_or(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_media_condition_without_or_type<'ast: 'r, 'r>(
        &mut self,
        node: &'ast MediaConditionWithoutOrType,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_media_condition_without_or_type(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_media_condition_without_or_type(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_media_condition_without_or_types<'ast: 'r, 'r>(
        &mut self,
        node: &'ast [MediaConditionWithoutOrType],
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_media_condition_without_or_types(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_media_condition_without_or_types(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_media_feature<'ast: 'r, 'r>(
        &mut self,
        node: &'ast MediaFeature,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_media_feature(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_media_feature(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_media_feature_boolean<'ast: 'r, 'r>(
        &mut self,
        node: &'ast MediaFeatureBoolean,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_media_feature_boolean(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_media_feature_boolean(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_media_feature_name<'ast: 'r, 'r>(
        &mut self,
        node: &'ast MediaFeatureName,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_media_feature_name(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_media_feature_name(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_media_feature_plain<'ast: 'r, 'r>(
        &mut self,
        node: &'ast MediaFeaturePlain,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_media_feature_plain(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_media_feature_plain(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_media_feature_range<'ast: 'r, 'r>(
        &mut self,
        node: &'ast MediaFeatureRange,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_media_feature_range(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_media_feature_range(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_media_feature_range_comparison<'ast: 'r, 'r>(
        &mut self,
        node: &'ast MediaFeatureRangeComparison,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_media_feature_range_comparison(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_media_feature_range_comparison(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_media_feature_range_interval<'ast: 'r, 'r>(
        &mut self,
        node: &'ast MediaFeatureRangeInterval,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_media_feature_range_interval(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_media_feature_range_interval(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_media_feature_value<'ast: 'r, 'r>(
        &mut self,
        node: &'ast MediaFeatureValue,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_media_feature_value(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_media_feature_value(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_media_in_parens<'ast: 'r, 'r>(
        &mut self,
        node: &'ast MediaInParens,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_media_in_parens(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_media_in_parens(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_media_not<'ast: 'r, 'r>(
        &mut self,
        node: &'ast MediaNot,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_media_not(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_media_not(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_media_or<'ast: 'r, 'r>(
        &mut self,
        node: &'ast MediaOr,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_media_or(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_media_or(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_media_query<'ast: 'r, 'r>(
        &mut self,
        node: &'ast MediaQuery,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_media_query(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_media_query(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_media_query_list<'ast: 'r, 'r>(
        &mut self,
        node: &'ast MediaQueryList,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_media_query_list(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_media_query_list(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_media_querys<'ast: 'r, 'r>(
        &mut self,
        node: &'ast [MediaQuery],
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_media_querys(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_media_querys(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_media_type<'ast: 'r, 'r>(
        &mut self,
        node: &'ast MediaType,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_media_type(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_media_type(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_named_namespace<'ast: 'r, 'r>(
        &mut self,
        node: &'ast NamedNamespace,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_named_namespace(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_named_namespace(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_namespace<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Namespace,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_namespace(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_namespace(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_namespace_prefix<'ast: 'r, 'r>(
        &mut self,
        node: &'ast NamespacePrefix,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_namespace_prefix(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_namespace_prefix(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_namespace_prelude<'ast: 'r, 'r>(
        &mut self,
        node: &'ast NamespacePrelude,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_namespace_prelude(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_namespace_prelude(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_namespace_prelude_uri<'ast: 'r, 'r>(
        &mut self,
        node: &'ast NamespacePreludeUri,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_namespace_prelude_uri(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_namespace_prelude_uri(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_nesting_selector<'ast: 'r, 'r>(
        &mut self,
        node: &'ast NestingSelector,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_nesting_selector(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_nesting_selector(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_number<'ast: 'r, 'r>(&mut self, node: &'ast Number, __ast_path: &mut AstNodePath<'r>) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_number(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_number(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_number_type<'ast: 'r, 'r>(
        &mut self,
        node: &'ast NumberType,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_number_type(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_number_type(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_opt_at_rule_prelude<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Option<Box<AtRulePrelude>>,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_opt_at_rule_prelude(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_opt_at_rule_prelude(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_opt_atom<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Option<swc_atoms::Atom>,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_opt_atom(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_opt_atom(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_opt_attribute_selector_matcher<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Option<AttributeSelectorMatcher>,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_opt_attribute_selector_matcher(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_opt_attribute_selector_matcher(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_opt_attribute_selector_modifier<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Option<AttributeSelectorModifier>,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_opt_attribute_selector_modifier(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_opt_attribute_selector_modifier(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_opt_attribute_selector_value<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Option<AttributeSelectorValue>,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_opt_attribute_selector_value(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_opt_attribute_selector_value(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_opt_combinator<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Option<Combinator>,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_opt_combinator(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_opt_combinator(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_opt_container_name<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Option<ContainerName>,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_opt_container_name(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_opt_container_name(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_opt_forgiving_selector_list<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Option<ForgivingSelectorList>,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_opt_forgiving_selector_list(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_opt_forgiving_selector_list(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_opt_function<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Option<Box<Function>>,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_opt_function(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_opt_function(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_opt_ident<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Option<Ident>,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_opt_ident(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_opt_ident(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_opt_import_conditions<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Option<Box<ImportConditions>>,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_opt_import_conditions(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_opt_import_conditions(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_opt_import_layer_name<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Option<Box<ImportLayerName>>,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_opt_import_layer_name(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_opt_import_layer_name(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_opt_important_flag<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Option<ImportantFlag>,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_opt_important_flag(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_opt_important_flag(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_opt_media_condition_type<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Option<Box<MediaConditionType>>,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_opt_media_condition_type(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_opt_media_condition_type(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_opt_media_query_list<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Option<Box<MediaQueryList>>,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_opt_media_query_list(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_opt_media_query_list(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_opt_media_type<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Option<MediaType>,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_opt_media_type(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_opt_media_type(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_opt_namespace<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Option<Namespace>,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_opt_namespace(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_opt_namespace(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_opt_namespace_prefix<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Option<NamespacePrefix>,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_opt_namespace_prefix(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_opt_namespace_prefix(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_opt_nesting_selector<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Option<NestingSelector>,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_opt_nesting_selector(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_opt_nesting_selector(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_opt_number<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Option<Number>,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_opt_number(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_opt_number(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_opt_page_selector_pseudos<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Option<Vec<PageSelectorPseudo>>,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_opt_page_selector_pseudos(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_opt_page_selector_pseudos(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_opt_page_selector_type<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Option<PageSelectorType>,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_opt_page_selector_type(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_opt_page_selector_type(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_opt_pseudo_class_selector_childrens<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Option<Vec<PseudoClassSelectorChildren>>,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_opt_pseudo_class_selector_childrens(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_opt_pseudo_class_selector_childrens(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_opt_pseudo_element_selector_childrens<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Option<Vec<PseudoElementSelectorChildren>>,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_opt_pseudo_element_selector_childrens(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_opt_pseudo_element_selector_childrens(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_opt_simple_block<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Option<SimpleBlock>,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_opt_simple_block(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_opt_simple_block(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_opt_type_selector<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Option<Box<TypeSelector>>,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_opt_type_selector(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_opt_type_selector(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_opt_url_modifiers<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Option<Vec<UrlModifier>>,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_opt_url_modifiers(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_opt_url_modifiers(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_opt_url_value<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Option<Box<UrlValue>>,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_opt_url_value(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_opt_url_value(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_page_selector<'ast: 'r, 'r>(
        &mut self,
        node: &'ast PageSelector,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_page_selector(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_page_selector(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_page_selector_list<'ast: 'r, 'r>(
        &mut self,
        node: &'ast PageSelectorList,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_page_selector_list(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_page_selector_list(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_page_selector_pseudo<'ast: 'r, 'r>(
        &mut self,
        node: &'ast PageSelectorPseudo,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_page_selector_pseudo(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_page_selector_pseudo(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_page_selector_pseudos<'ast: 'r, 'r>(
        &mut self,
        node: &'ast [PageSelectorPseudo],
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_page_selector_pseudos(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_page_selector_pseudos(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_page_selector_type<'ast: 'r, 'r>(
        &mut self,
        node: &'ast PageSelectorType,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_page_selector_type(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_page_selector_type(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_page_selectors<'ast: 'r, 'r>(
        &mut self,
        node: &'ast [PageSelector],
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_page_selectors(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_page_selectors(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_percentage<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Percentage,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_percentage(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_percentage(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_pseudo_class_selector<'ast: 'r, 'r>(
        &mut self,
        node: &'ast PseudoClassSelector,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_pseudo_class_selector(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_pseudo_class_selector(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_pseudo_class_selector_children<'ast: 'r, 'r>(
        &mut self,
        node: &'ast PseudoClassSelectorChildren,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_pseudo_class_selector_children(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_pseudo_class_selector_children(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_pseudo_class_selector_childrens<'ast: 'r, 'r>(
        &mut self,
        node: &'ast [PseudoClassSelectorChildren],
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_pseudo_class_selector_childrens(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_pseudo_class_selector_childrens(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_pseudo_element_selector<'ast: 'r, 'r>(
        &mut self,
        node: &'ast PseudoElementSelector,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_pseudo_element_selector(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_pseudo_element_selector(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_pseudo_element_selector_children<'ast: 'r, 'r>(
        &mut self,
        node: &'ast PseudoElementSelectorChildren,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_pseudo_element_selector_children(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_pseudo_element_selector_children(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_pseudo_element_selector_childrens<'ast: 'r, 'r>(
        &mut self,
        node: &'ast [PseudoElementSelectorChildren],
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_pseudo_element_selector_childrens(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_pseudo_element_selector_childrens(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_qualified_rule<'ast: 'r, 'r>(
        &mut self,
        node: &'ast QualifiedRule,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_qualified_rule(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_qualified_rule(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_qualified_rule_prelude<'ast: 'r, 'r>(
        &mut self,
        node: &'ast QualifiedRulePrelude,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_qualified_rule_prelude(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_qualified_rule_prelude(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_query_in_parens<'ast: 'r, 'r>(
        &mut self,
        node: &'ast QueryInParens,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_query_in_parens(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_query_in_parens(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_ratio<'ast: 'r, 'r>(&mut self, node: &'ast Ratio, __ast_path: &mut AstNodePath<'r>) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_ratio(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_ratio(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_relative_selector<'ast: 'r, 'r>(
        &mut self,
        node: &'ast RelativeSelector,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_relative_selector(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_relative_selector(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_relative_selector_list<'ast: 'r, 'r>(
        &mut self,
        node: &'ast RelativeSelectorList,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_relative_selector_list(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_relative_selector_list(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_relative_selectors<'ast: 'r, 'r>(
        &mut self,
        node: &'ast [RelativeSelector],
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_relative_selectors(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_relative_selectors(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_resolution<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Resolution,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_resolution(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_resolution(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_rule<'ast: 'r, 'r>(&mut self, node: &'ast Rule, __ast_path: &mut AstNodePath<'r>) {
        match self {
            swc_visit::Either::Left(visitor) => VisitAstPath::visit_rule(visitor, node, __ast_path),
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_rule(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_rules<'ast: 'r, 'r>(&mut self, node: &'ast [Rule], __ast_path: &mut AstNodePath<'r>) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_rules(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_rules(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_scope_range<'ast: 'r, 'r>(
        &mut self,
        node: &'ast ScopeRange,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_scope_range(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_scope_range(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_selector_list<'ast: 'r, 'r>(
        &mut self,
        node: &'ast SelectorList,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_selector_list(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_selector_list(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_sequence_of_custom_idents<'ast: 'r, 'r>(
        &mut self,
        node: &'ast SequenceOfCustomIdents,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_sequence_of_custom_idents(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_sequence_of_custom_idents(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_simple_block<'ast: 'r, 'r>(
        &mut self,
        node: &'ast SimpleBlock,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_simple_block(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_simple_block(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_size_feature<'ast: 'r, 'r>(
        &mut self,
        node: &'ast SizeFeature,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_size_feature(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_size_feature(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_size_feature_boolean<'ast: 'r, 'r>(
        &mut self,
        node: &'ast SizeFeatureBoolean,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_size_feature_boolean(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_size_feature_boolean(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_size_feature_name<'ast: 'r, 'r>(
        &mut self,
        node: &'ast SizeFeatureName,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_size_feature_name(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_size_feature_name(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_size_feature_plain<'ast: 'r, 'r>(
        &mut self,
        node: &'ast SizeFeaturePlain,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_size_feature_plain(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_size_feature_plain(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_size_feature_range<'ast: 'r, 'r>(
        &mut self,
        node: &'ast SizeFeatureRange,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_size_feature_range(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_size_feature_range(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_size_feature_range_comparison<'ast: 'r, 'r>(
        &mut self,
        node: &'ast SizeFeatureRangeComparison,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_size_feature_range_comparison(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_size_feature_range_comparison(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_size_feature_range_interval<'ast: 'r, 'r>(
        &mut self,
        node: &'ast SizeFeatureRangeInterval,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_size_feature_range_interval(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_size_feature_range_interval(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_size_feature_value<'ast: 'r, 'r>(
        &mut self,
        node: &'ast SizeFeatureValue,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_size_feature_value(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_size_feature_value(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_span<'ast: 'r, 'r>(
        &mut self,
        node: &'ast swc_common::Span,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => VisitAstPath::visit_span(visitor, node, __ast_path),
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_span(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_str<'ast: 'r, 'r>(&mut self, node: &'ast Str, __ast_path: &mut AstNodePath<'r>) {
        match self {
            swc_visit::Either::Left(visitor) => VisitAstPath::visit_str(visitor, node, __ast_path),
            swc_visit::Either::Right(visitor) => VisitAstPath::visit_str(visitor, node, __ast_path),
        }
    }

    #[inline]
    fn visit_style_block<'ast: 'r, 'r>(
        &mut self,
        node: &'ast StyleBlock,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_style_block(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_style_block(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_stylesheet<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Stylesheet,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_stylesheet(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_stylesheet(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_subclass_selector<'ast: 'r, 'r>(
        &mut self,
        node: &'ast SubclassSelector,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_subclass_selector(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_subclass_selector(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_subclass_selectors<'ast: 'r, 'r>(
        &mut self,
        node: &'ast [SubclassSelector],
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_subclass_selectors(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_subclass_selectors(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_supports_and<'ast: 'r, 'r>(
        &mut self,
        node: &'ast SupportsAnd,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_supports_and(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_supports_and(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_supports_condition<'ast: 'r, 'r>(
        &mut self,
        node: &'ast SupportsCondition,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_supports_condition(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_supports_condition(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_supports_condition_type<'ast: 'r, 'r>(
        &mut self,
        node: &'ast SupportsConditionType,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_supports_condition_type(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_supports_condition_type(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_supports_condition_types<'ast: 'r, 'r>(
        &mut self,
        node: &'ast [SupportsConditionType],
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_supports_condition_types(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_supports_condition_types(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_supports_feature<'ast: 'r, 'r>(
        &mut self,
        node: &'ast SupportsFeature,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_supports_feature(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_supports_feature(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_supports_in_parens<'ast: 'r, 'r>(
        &mut self,
        node: &'ast SupportsInParens,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_supports_in_parens(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_supports_in_parens(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_supports_not<'ast: 'r, 'r>(
        &mut self,
        node: &'ast SupportsNot,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_supports_not(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_supports_not(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_supports_or<'ast: 'r, 'r>(
        &mut self,
        node: &'ast SupportsOr,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_supports_or(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_supports_or(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_tag_name_selector<'ast: 'r, 'r>(
        &mut self,
        node: &'ast TagNameSelector,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_tag_name_selector(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_tag_name_selector(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_time<'ast: 'r, 'r>(&mut self, node: &'ast Time, __ast_path: &mut AstNodePath<'r>) {
        match self {
            swc_visit::Either::Left(visitor) => VisitAstPath::visit_time(visitor, node, __ast_path),
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_time(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_time_percentage<'ast: 'r, 'r>(
        &mut self,
        node: &'ast TimePercentage,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_time_percentage(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_time_percentage(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_token<'ast: 'r, 'r>(&mut self, node: &'ast Token, __ast_path: &mut AstNodePath<'r>) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_token(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_token(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_token_and_span<'ast: 'r, 'r>(
        &mut self,
        node: &'ast TokenAndSpan,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_token_and_span(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_token_and_span(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_type_selector<'ast: 'r, 'r>(
        &mut self,
        node: &'ast TypeSelector,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_type_selector(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_type_selector(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_unicode_range<'ast: 'r, 'r>(
        &mut self,
        node: &'ast UnicodeRange,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_unicode_range(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_unicode_range(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_universal_selector<'ast: 'r, 'r>(
        &mut self,
        node: &'ast UniversalSelector,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_universal_selector(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_universal_selector(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_unknown_dimension<'ast: 'r, 'r>(
        &mut self,
        node: &'ast UnknownDimension,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_unknown_dimension(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_unknown_dimension(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_url<'ast: 'r, 'r>(&mut self, node: &'ast Url, __ast_path: &mut AstNodePath<'r>) {
        match self {
            swc_visit::Either::Left(visitor) => VisitAstPath::visit_url(visitor, node, __ast_path),
            swc_visit::Either::Right(visitor) => VisitAstPath::visit_url(visitor, node, __ast_path),
        }
    }

    #[inline]
    fn visit_url_key_value<'ast: 'r, 'r>(
        &mut self,
        node: &'ast UrlKeyValue,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_url_key_value(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_url_key_value(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_url_modifier<'ast: 'r, 'r>(
        &mut self,
        node: &'ast UrlModifier,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_url_modifier(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_url_modifier(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_url_modifiers<'ast: 'r, 'r>(
        &mut self,
        node: &'ast [UrlModifier],
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_url_modifiers(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_url_modifiers(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_url_value<'ast: 'r, 'r>(
        &mut self,
        node: &'ast UrlValue,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_url_value(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_url_value(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_url_value_raw<'ast: 'r, 'r>(
        &mut self,
        node: &'ast UrlValueRaw,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_url_value_raw(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_url_value_raw(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_wq_name<'ast: 'r, 'r>(
        &mut self,
        node: &'ast WqName,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitAstPath::visit_wq_name(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitAstPath::visit_wq_name(visitor, node, __ast_path)
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V> VisitAstPath for ::swc_visit::Optional<V>
where
    V: VisitAstPath,
{
    #[inline]
    fn visit_absolute_color_base<'ast: 'r, 'r>(
        &mut self,
        node: &'ast AbsoluteColorBase,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_absolute_color_base(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_alpha_value<'ast: 'r, 'r>(
        &mut self,
        node: &'ast AlphaValue,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_alpha_value(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_an_plus_b<'ast: 'r, 'r>(
        &mut self,
        node: &'ast AnPlusB,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_an_plus_b(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_an_plus_b_notation<'ast: 'r, 'r>(
        &mut self,
        node: &'ast AnPlusBNotation,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_an_plus_b_notation(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_angle<'ast: 'r, 'r>(&mut self, node: &'ast Angle, __ast_path: &mut AstNodePath<'r>) {
        if self.enabled {
            <V as VisitAstPath>::visit_angle(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_angle_percentage<'ast: 'r, 'r>(
        &mut self,
        node: &'ast AnglePercentage,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_angle_percentage(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_any_namespace<'ast: 'r, 'r>(
        &mut self,
        node: &'ast AnyNamespace,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_any_namespace(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_at_rule<'ast: 'r, 'r>(
        &mut self,
        node: &'ast AtRule,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_at_rule(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_at_rule_name<'ast: 'r, 'r>(
        &mut self,
        node: &'ast AtRuleName,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_at_rule_name(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_at_rule_prelude<'ast: 'r, 'r>(
        &mut self,
        node: &'ast AtRulePrelude,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_at_rule_prelude(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_atom<'ast: 'r, 'r>(
        &mut self,
        node: &'ast swc_atoms::Atom,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_atom(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_attribute_selector<'ast: 'r, 'r>(
        &mut self,
        node: &'ast AttributeSelector,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_attribute_selector(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_attribute_selector_matcher<'ast: 'r, 'r>(
        &mut self,
        node: &'ast AttributeSelectorMatcher,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_attribute_selector_matcher(
                &mut self.visitor,
                node,
                __ast_path,
            )
        } else {
        }
    }

    #[inline]
    fn visit_attribute_selector_matcher_value<'ast: 'r, 'r>(
        &mut self,
        node: &'ast AttributeSelectorMatcherValue,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_attribute_selector_matcher_value(
                &mut self.visitor,
                node,
                __ast_path,
            )
        } else {
        }
    }

    #[inline]
    fn visit_attribute_selector_modifier<'ast: 'r, 'r>(
        &mut self,
        node: &'ast AttributeSelectorModifier,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_attribute_selector_modifier(
                &mut self.visitor,
                node,
                __ast_path,
            )
        } else {
        }
    }

    #[inline]
    fn visit_attribute_selector_value<'ast: 'r, 'r>(
        &mut self,
        node: &'ast AttributeSelectorValue,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_attribute_selector_value(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_bin_op<'ast: 'r, 'r>(&mut self, node: &'ast BinOp, __ast_path: &mut AstNodePath<'r>) {
        if self.enabled {
            <V as VisitAstPath>::visit_bin_op(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_calc_operator<'ast: 'r, 'r>(
        &mut self,
        node: &'ast CalcOperator,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_calc_operator(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_calc_operator_type<'ast: 'r, 'r>(
        &mut self,
        node: &'ast CalcOperatorType,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_calc_operator_type(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_calc_product<'ast: 'r, 'r>(
        &mut self,
        node: &'ast CalcProduct,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_calc_product(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_calc_product_or_operator<'ast: 'r, 'r>(
        &mut self,
        node: &'ast CalcProductOrOperator,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_calc_product_or_operator(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_calc_product_or_operators<'ast: 'r, 'r>(
        &mut self,
        node: &'ast [CalcProductOrOperator],
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_calc_product_or_operators(
                &mut self.visitor,
                node,
                __ast_path,
            )
        } else {
        }
    }

    #[inline]
    fn visit_calc_sum<'ast: 'r, 'r>(
        &mut self,
        node: &'ast CalcSum,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_calc_sum(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_calc_value<'ast: 'r, 'r>(
        &mut self,
        node: &'ast CalcValue,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_calc_value(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_calc_value_or_operator<'ast: 'r, 'r>(
        &mut self,
        node: &'ast CalcValueOrOperator,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_calc_value_or_operator(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_calc_value_or_operators<'ast: 'r, 'r>(
        &mut self,
        node: &'ast [CalcValueOrOperator],
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_calc_value_or_operators(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_class_selector<'ast: 'r, 'r>(
        &mut self,
        node: &'ast ClassSelector,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_class_selector(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_cmyk_component<'ast: 'r, 'r>(
        &mut self,
        node: &'ast CmykComponent,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_cmyk_component(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_color<'ast: 'r, 'r>(&mut self, node: &'ast Color, __ast_path: &mut AstNodePath<'r>) {
        if self.enabled {
            <V as VisitAstPath>::visit_color(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_color_profile_name<'ast: 'r, 'r>(
        &mut self,
        node: &'ast ColorProfileName,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_color_profile_name(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_combinator<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Combinator,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_combinator(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_combinator_value<'ast: 'r, 'r>(
        &mut self,
        node: &'ast CombinatorValue,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_combinator_value(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_complex_selector<'ast: 'r, 'r>(
        &mut self,
        node: &'ast ComplexSelector,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_complex_selector(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_complex_selector_children<'ast: 'r, 'r>(
        &mut self,
        node: &'ast ComplexSelectorChildren,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_complex_selector_children(
                &mut self.visitor,
                node,
                __ast_path,
            )
        } else {
        }
    }

    #[inline]
    fn visit_complex_selector_childrens<'ast: 'r, 'r>(
        &mut self,
        node: &'ast [ComplexSelectorChildren],
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_complex_selector_childrens(
                &mut self.visitor,
                node,
                __ast_path,
            )
        } else {
        }
    }

    #[inline]
    fn visit_complex_selectors<'ast: 'r, 'r>(
        &mut self,
        node: &'ast [ComplexSelector],
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_complex_selectors(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_component_value<'ast: 'r, 'r>(
        &mut self,
        node: &'ast ComponentValue,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_component_value(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_component_values<'ast: 'r, 'r>(
        &mut self,
        node: &'ast [ComponentValue],
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_component_values(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_compound_selector<'ast: 'r, 'r>(
        &mut self,
        node: &'ast CompoundSelector,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_compound_selector(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_compound_selector_list<'ast: 'r, 'r>(
        &mut self,
        node: &'ast CompoundSelectorList,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_compound_selector_list(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_compound_selectors<'ast: 'r, 'r>(
        &mut self,
        node: &'ast [CompoundSelector],
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_compound_selectors(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_container_condition<'ast: 'r, 'r>(
        &mut self,
        node: &'ast ContainerCondition,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_container_condition(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_container_name<'ast: 'r, 'r>(
        &mut self,
        node: &'ast ContainerName,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_container_name(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_container_query<'ast: 'r, 'r>(
        &mut self,
        node: &'ast ContainerQuery,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_container_query(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_container_query_and<'ast: 'r, 'r>(
        &mut self,
        node: &'ast ContainerQueryAnd,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_container_query_and(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_container_query_not<'ast: 'r, 'r>(
        &mut self,
        node: &'ast ContainerQueryNot,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_container_query_not(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_container_query_or<'ast: 'r, 'r>(
        &mut self,
        node: &'ast ContainerQueryOr,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_container_query_or(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_container_query_type<'ast: 'r, 'r>(
        &mut self,
        node: &'ast ContainerQueryType,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_container_query_type(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_container_query_types<'ast: 'r, 'r>(
        &mut self,
        node: &'ast [ContainerQueryType],
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_container_query_types(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_custom_highlight_name<'ast: 'r, 'r>(
        &mut self,
        node: &'ast CustomHighlightName,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_custom_highlight_name(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_custom_ident<'ast: 'r, 'r>(
        &mut self,
        node: &'ast CustomIdent,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_custom_ident(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_custom_idents<'ast: 'r, 'r>(
        &mut self,
        node: &'ast [CustomIdent],
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_custom_idents(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_custom_media_query<'ast: 'r, 'r>(
        &mut self,
        node: &'ast CustomMediaQuery,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_custom_media_query(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_custom_media_query_media_type<'ast: 'r, 'r>(
        &mut self,
        node: &'ast CustomMediaQueryMediaType,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_custom_media_query_media_type(
                &mut self.visitor,
                node,
                __ast_path,
            )
        } else {
        }
    }

    #[inline]
    fn visit_custom_property_name<'ast: 'r, 'r>(
        &mut self,
        node: &'ast CustomPropertyName,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_custom_property_name(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_dashed_ident<'ast: 'r, 'r>(
        &mut self,
        node: &'ast DashedIdent,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_dashed_ident(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_declaration<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Declaration,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_declaration(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_declaration_name<'ast: 'r, 'r>(
        &mut self,
        node: &'ast DeclarationName,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_declaration_name(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_declaration_or_at_rule<'ast: 'r, 'r>(
        &mut self,
        node: &'ast DeclarationOrAtRule,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_declaration_or_at_rule(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_delimiter<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Delimiter,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_delimiter(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_delimiter_value<'ast: 'r, 'r>(
        &mut self,
        node: &'ast DelimiterValue,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_delimiter_value(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_dimension<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Dimension,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_dimension(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_dimension_token<'ast: 'r, 'r>(
        &mut self,
        node: &'ast DimensionToken,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_dimension_token(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_document_prelude<'ast: 'r, 'r>(
        &mut self,
        node: &'ast DocumentPrelude,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_document_prelude(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_document_prelude_matching_function<'ast: 'r, 'r>(
        &mut self,
        node: &'ast DocumentPreludeMatchingFunction,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_document_prelude_matching_function(
                &mut self.visitor,
                node,
                __ast_path,
            )
        } else {
        }
    }

    #[inline]
    fn visit_document_prelude_matching_functions<'ast: 'r, 'r>(
        &mut self,
        node: &'ast [DocumentPreludeMatchingFunction],
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_document_prelude_matching_functions(
                &mut self.visitor,
                node,
                __ast_path,
            )
        } else {
        }
    }

    #[inline]
    fn visit_extension_name<'ast: 'r, 'r>(
        &mut self,
        node: &'ast ExtensionName,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_extension_name(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_family_name<'ast: 'r, 'r>(
        &mut self,
        node: &'ast FamilyName,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_family_name(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_family_names<'ast: 'r, 'r>(
        &mut self,
        node: &'ast [FamilyName],
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_family_names(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_flex<'ast: 'r, 'r>(&mut self, node: &'ast Flex, __ast_path: &mut AstNodePath<'r>) {
        if self.enabled {
            <V as VisitAstPath>::visit_flex(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_font_feature_values_prelude<'ast: 'r, 'r>(
        &mut self,
        node: &'ast FontFeatureValuesPrelude,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_font_feature_values_prelude(
                &mut self.visitor,
                node,
                __ast_path,
            )
        } else {
        }
    }

    #[inline]
    fn visit_forgiving_complex_selector<'ast: 'r, 'r>(
        &mut self,
        node: &'ast ForgivingComplexSelector,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_forgiving_complex_selector(
                &mut self.visitor,
                node,
                __ast_path,
            )
        } else {
        }
    }

    #[inline]
    fn visit_forgiving_complex_selectors<'ast: 'r, 'r>(
        &mut self,
        node: &'ast [ForgivingComplexSelector],
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_forgiving_complex_selectors(
                &mut self.visitor,
                node,
                __ast_path,
            )
        } else {
        }
    }

    #[inline]
    fn visit_forgiving_relative_selector<'ast: 'r, 'r>(
        &mut self,
        node: &'ast ForgivingRelativeSelector,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_forgiving_relative_selector(
                &mut self.visitor,
                node,
                __ast_path,
            )
        } else {
        }
    }

    #[inline]
    fn visit_forgiving_relative_selector_list<'ast: 'r, 'r>(
        &mut self,
        node: &'ast ForgivingRelativeSelectorList,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_forgiving_relative_selector_list(
                &mut self.visitor,
                node,
                __ast_path,
            )
        } else {
        }
    }

    #[inline]
    fn visit_forgiving_relative_selectors<'ast: 'r, 'r>(
        &mut self,
        node: &'ast [ForgivingRelativeSelector],
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_forgiving_relative_selectors(
                &mut self.visitor,
                node,
                __ast_path,
            )
        } else {
        }
    }

    #[inline]
    fn visit_forgiving_selector_list<'ast: 'r, 'r>(
        &mut self,
        node: &'ast ForgivingSelectorList,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_forgiving_selector_list(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_frequency<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Frequency,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_frequency(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_frequency_percentage<'ast: 'r, 'r>(
        &mut self,
        node: &'ast FrequencyPercentage,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_frequency_percentage(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_function<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Function,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_function(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_function_name<'ast: 'r, 'r>(
        &mut self,
        node: &'ast FunctionName,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_function_name(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_general_enclosed<'ast: 'r, 'r>(
        &mut self,
        node: &'ast GeneralEnclosed,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_general_enclosed(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_hex_color<'ast: 'r, 'r>(
        &mut self,
        node: &'ast HexColor,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_hex_color(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_hue<'ast: 'r, 'r>(&mut self, node: &'ast Hue, __ast_path: &mut AstNodePath<'r>) {
        if self.enabled {
            <V as VisitAstPath>::visit_hue(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_id_selector<'ast: 'r, 'r>(
        &mut self,
        node: &'ast IdSelector,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_id_selector(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_ident<'ast: 'r, 'r>(&mut self, node: &'ast Ident, __ast_path: &mut AstNodePath<'r>) {
        if self.enabled {
            <V as VisitAstPath>::visit_ident(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_idents<'ast: 'r, 'r>(
        &mut self,
        node: &'ast [Ident],
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_idents(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_import_conditions<'ast: 'r, 'r>(
        &mut self,
        node: &'ast ImportConditions,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_import_conditions(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_import_href<'ast: 'r, 'r>(
        &mut self,
        node: &'ast ImportHref,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_import_href(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_import_layer_name<'ast: 'r, 'r>(
        &mut self,
        node: &'ast ImportLayerName,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_import_layer_name(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_import_prelude<'ast: 'r, 'r>(
        &mut self,
        node: &'ast ImportPrelude,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_import_prelude(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_important_flag<'ast: 'r, 'r>(
        &mut self,
        node: &'ast ImportantFlag,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_important_flag(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_integer<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Integer,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_integer(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_keyframe_block<'ast: 'r, 'r>(
        &mut self,
        node: &'ast KeyframeBlock,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_keyframe_block(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_keyframe_selector<'ast: 'r, 'r>(
        &mut self,
        node: &'ast KeyframeSelector,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_keyframe_selector(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_keyframe_selectors<'ast: 'r, 'r>(
        &mut self,
        node: &'ast [KeyframeSelector],
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_keyframe_selectors(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_keyframes_name<'ast: 'r, 'r>(
        &mut self,
        node: &'ast KeyframesName,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_keyframes_name(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_keyframes_pseudo_function<'ast: 'r, 'r>(
        &mut self,
        node: &'ast KeyframesPseudoFunction,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_keyframes_pseudo_function(
                &mut self.visitor,
                node,
                __ast_path,
            )
        } else {
        }
    }

    #[inline]
    fn visit_keyframes_pseudo_prefix<'ast: 'r, 'r>(
        &mut self,
        node: &'ast KeyframesPseudoPrefix,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_keyframes_pseudo_prefix(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_layer_name<'ast: 'r, 'r>(
        &mut self,
        node: &'ast LayerName,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_layer_name(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_layer_name_list<'ast: 'r, 'r>(
        &mut self,
        node: &'ast LayerNameList,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_layer_name_list(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_layer_names<'ast: 'r, 'r>(
        &mut self,
        node: &'ast [LayerName],
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_layer_names(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_layer_prelude<'ast: 'r, 'r>(
        &mut self,
        node: &'ast LayerPrelude,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_layer_prelude(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_length<'ast: 'r, 'r>(&mut self, node: &'ast Length, __ast_path: &mut AstNodePath<'r>) {
        if self.enabled {
            <V as VisitAstPath>::visit_length(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_length_percentage<'ast: 'r, 'r>(
        &mut self,
        node: &'ast LengthPercentage,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_length_percentage(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_list_of_component_values<'ast: 'r, 'r>(
        &mut self,
        node: &'ast ListOfComponentValues,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_list_of_component_values(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_media_and<'ast: 'r, 'r>(
        &mut self,
        node: &'ast MediaAnd,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_media_and(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_media_condition<'ast: 'r, 'r>(
        &mut self,
        node: &'ast MediaCondition,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_media_condition(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_media_condition_all_type<'ast: 'r, 'r>(
        &mut self,
        node: &'ast MediaConditionAllType,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_media_condition_all_type(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_media_condition_all_types<'ast: 'r, 'r>(
        &mut self,
        node: &'ast [MediaConditionAllType],
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_media_condition_all_types(
                &mut self.visitor,
                node,
                __ast_path,
            )
        } else {
        }
    }

    #[inline]
    fn visit_media_condition_type<'ast: 'r, 'r>(
        &mut self,
        node: &'ast MediaConditionType,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_media_condition_type(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_media_condition_without_or<'ast: 'r, 'r>(
        &mut self,
        node: &'ast MediaConditionWithoutOr,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_media_condition_without_or(
                &mut self.visitor,
                node,
                __ast_path,
            )
        } else {
        }
    }

    #[inline]
    fn visit_media_condition_without_or_type<'ast: 'r, 'r>(
        &mut self,
        node: &'ast MediaConditionWithoutOrType,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_media_condition_without_or_type(
                &mut self.visitor,
                node,
                __ast_path,
            )
        } else {
        }
    }

    #[inline]
    fn visit_media_condition_without_or_types<'ast: 'r, 'r>(
        &mut self,
        node: &'ast [MediaConditionWithoutOrType],
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_media_condition_without_or_types(
                &mut self.visitor,
                node,
                __ast_path,
            )
        } else {
        }
    }

    #[inline]
    fn visit_media_feature<'ast: 'r, 'r>(
        &mut self,
        node: &'ast MediaFeature,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_media_feature(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_media_feature_boolean<'ast: 'r, 'r>(
        &mut self,
        node: &'ast MediaFeatureBoolean,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_media_feature_boolean(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_media_feature_name<'ast: 'r, 'r>(
        &mut self,
        node: &'ast MediaFeatureName,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_media_feature_name(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_media_feature_plain<'ast: 'r, 'r>(
        &mut self,
        node: &'ast MediaFeaturePlain,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_media_feature_plain(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_media_feature_range<'ast: 'r, 'r>(
        &mut self,
        node: &'ast MediaFeatureRange,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_media_feature_range(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_media_feature_range_comparison<'ast: 'r, 'r>(
        &mut self,
        node: &'ast MediaFeatureRangeComparison,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_media_feature_range_comparison(
                &mut self.visitor,
                node,
                __ast_path,
            )
        } else {
        }
    }

    #[inline]
    fn visit_media_feature_range_interval<'ast: 'r, 'r>(
        &mut self,
        node: &'ast MediaFeatureRangeInterval,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_media_feature_range_interval(
                &mut self.visitor,
                node,
                __ast_path,
            )
        } else {
        }
    }

    #[inline]
    fn visit_media_feature_value<'ast: 'r, 'r>(
        &mut self,
        node: &'ast MediaFeatureValue,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_media_feature_value(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_media_in_parens<'ast: 'r, 'r>(
        &mut self,
        node: &'ast MediaInParens,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_media_in_parens(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_media_not<'ast: 'r, 'r>(
        &mut self,
        node: &'ast MediaNot,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_media_not(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_media_or<'ast: 'r, 'r>(
        &mut self,
        node: &'ast MediaOr,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_media_or(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_media_query<'ast: 'r, 'r>(
        &mut self,
        node: &'ast MediaQuery,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_media_query(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_media_query_list<'ast: 'r, 'r>(
        &mut self,
        node: &'ast MediaQueryList,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_media_query_list(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_media_querys<'ast: 'r, 'r>(
        &mut self,
        node: &'ast [MediaQuery],
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_media_querys(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_media_type<'ast: 'r, 'r>(
        &mut self,
        node: &'ast MediaType,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_media_type(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_named_namespace<'ast: 'r, 'r>(
        &mut self,
        node: &'ast NamedNamespace,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_named_namespace(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_namespace<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Namespace,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_namespace(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_namespace_prefix<'ast: 'r, 'r>(
        &mut self,
        node: &'ast NamespacePrefix,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_namespace_prefix(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_namespace_prelude<'ast: 'r, 'r>(
        &mut self,
        node: &'ast NamespacePrelude,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_namespace_prelude(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_namespace_prelude_uri<'ast: 'r, 'r>(
        &mut self,
        node: &'ast NamespacePreludeUri,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_namespace_prelude_uri(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_nesting_selector<'ast: 'r, 'r>(
        &mut self,
        node: &'ast NestingSelector,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_nesting_selector(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_number<'ast: 'r, 'r>(&mut self, node: &'ast Number, __ast_path: &mut AstNodePath<'r>) {
        if self.enabled {
            <V as VisitAstPath>::visit_number(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_number_type<'ast: 'r, 'r>(
        &mut self,
        node: &'ast NumberType,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_number_type(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_opt_at_rule_prelude<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Option<Box<AtRulePrelude>>,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_opt_at_rule_prelude(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_opt_atom<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Option<swc_atoms::Atom>,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_opt_atom(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_opt_attribute_selector_matcher<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Option<AttributeSelectorMatcher>,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_opt_attribute_selector_matcher(
                &mut self.visitor,
                node,
                __ast_path,
            )
        } else {
        }
    }

    #[inline]
    fn visit_opt_attribute_selector_modifier<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Option<AttributeSelectorModifier>,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_opt_attribute_selector_modifier(
                &mut self.visitor,
                node,
                __ast_path,
            )
        } else {
        }
    }

    #[inline]
    fn visit_opt_attribute_selector_value<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Option<AttributeSelectorValue>,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_opt_attribute_selector_value(
                &mut self.visitor,
                node,
                __ast_path,
            )
        } else {
        }
    }

    #[inline]
    fn visit_opt_combinator<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Option<Combinator>,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_opt_combinator(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_opt_container_name<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Option<ContainerName>,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_opt_container_name(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_opt_forgiving_selector_list<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Option<ForgivingSelectorList>,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_opt_forgiving_selector_list(
                &mut self.visitor,
                node,
                __ast_path,
            )
        } else {
        }
    }

    #[inline]
    fn visit_opt_function<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Option<Box<Function>>,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_opt_function(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_opt_ident<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Option<Ident>,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_opt_ident(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_opt_import_conditions<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Option<Box<ImportConditions>>,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_opt_import_conditions(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_opt_import_layer_name<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Option<Box<ImportLayerName>>,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_opt_import_layer_name(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_opt_important_flag<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Option<ImportantFlag>,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_opt_important_flag(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_opt_media_condition_type<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Option<Box<MediaConditionType>>,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_opt_media_condition_type(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_opt_media_query_list<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Option<Box<MediaQueryList>>,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_opt_media_query_list(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_opt_media_type<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Option<MediaType>,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_opt_media_type(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_opt_namespace<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Option<Namespace>,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_opt_namespace(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_opt_namespace_prefix<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Option<NamespacePrefix>,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_opt_namespace_prefix(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_opt_nesting_selector<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Option<NestingSelector>,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_opt_nesting_selector(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_opt_number<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Option<Number>,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_opt_number(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_opt_page_selector_pseudos<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Option<Vec<PageSelectorPseudo>>,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_opt_page_selector_pseudos(
                &mut self.visitor,
                node,
                __ast_path,
            )
        } else {
        }
    }

    #[inline]
    fn visit_opt_page_selector_type<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Option<PageSelectorType>,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_opt_page_selector_type(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_opt_pseudo_class_selector_childrens<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Option<Vec<PseudoClassSelectorChildren>>,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_opt_pseudo_class_selector_childrens(
                &mut self.visitor,
                node,
                __ast_path,
            )
        } else {
        }
    }

    #[inline]
    fn visit_opt_pseudo_element_selector_childrens<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Option<Vec<PseudoElementSelectorChildren>>,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_opt_pseudo_element_selector_childrens(
                &mut self.visitor,
                node,
                __ast_path,
            )
        } else {
        }
    }

    #[inline]
    fn visit_opt_simple_block<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Option<SimpleBlock>,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_opt_simple_block(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_opt_type_selector<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Option<Box<TypeSelector>>,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_opt_type_selector(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_opt_url_modifiers<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Option<Vec<UrlModifier>>,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_opt_url_modifiers(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_opt_url_value<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Option<Box<UrlValue>>,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_opt_url_value(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_page_selector<'ast: 'r, 'r>(
        &mut self,
        node: &'ast PageSelector,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_page_selector(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_page_selector_list<'ast: 'r, 'r>(
        &mut self,
        node: &'ast PageSelectorList,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_page_selector_list(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_page_selector_pseudo<'ast: 'r, 'r>(
        &mut self,
        node: &'ast PageSelectorPseudo,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_page_selector_pseudo(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_page_selector_pseudos<'ast: 'r, 'r>(
        &mut self,
        node: &'ast [PageSelectorPseudo],
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_page_selector_pseudos(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_page_selector_type<'ast: 'r, 'r>(
        &mut self,
        node: &'ast PageSelectorType,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_page_selector_type(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_page_selectors<'ast: 'r, 'r>(
        &mut self,
        node: &'ast [PageSelector],
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_page_selectors(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_percentage<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Percentage,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_percentage(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_pseudo_class_selector<'ast: 'r, 'r>(
        &mut self,
        node: &'ast PseudoClassSelector,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_pseudo_class_selector(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_pseudo_class_selector_children<'ast: 'r, 'r>(
        &mut self,
        node: &'ast PseudoClassSelectorChildren,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_pseudo_class_selector_children(
                &mut self.visitor,
                node,
                __ast_path,
            )
        } else {
        }
    }

    #[inline]
    fn visit_pseudo_class_selector_childrens<'ast: 'r, 'r>(
        &mut self,
        node: &'ast [PseudoClassSelectorChildren],
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_pseudo_class_selector_childrens(
                &mut self.visitor,
                node,
                __ast_path,
            )
        } else {
        }
    }

    #[inline]
    fn visit_pseudo_element_selector<'ast: 'r, 'r>(
        &mut self,
        node: &'ast PseudoElementSelector,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_pseudo_element_selector(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_pseudo_element_selector_children<'ast: 'r, 'r>(
        &mut self,
        node: &'ast PseudoElementSelectorChildren,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_pseudo_element_selector_children(
                &mut self.visitor,
                node,
                __ast_path,
            )
        } else {
        }
    }

    #[inline]
    fn visit_pseudo_element_selector_childrens<'ast: 'r, 'r>(
        &mut self,
        node: &'ast [PseudoElementSelectorChildren],
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_pseudo_element_selector_childrens(
                &mut self.visitor,
                node,
                __ast_path,
            )
        } else {
        }
    }

    #[inline]
    fn visit_qualified_rule<'ast: 'r, 'r>(
        &mut self,
        node: &'ast QualifiedRule,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_qualified_rule(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_qualified_rule_prelude<'ast: 'r, 'r>(
        &mut self,
        node: &'ast QualifiedRulePrelude,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_qualified_rule_prelude(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_query_in_parens<'ast: 'r, 'r>(
        &mut self,
        node: &'ast QueryInParens,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_query_in_parens(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_ratio<'ast: 'r, 'r>(&mut self, node: &'ast Ratio, __ast_path: &mut AstNodePath<'r>) {
        if self.enabled {
            <V as VisitAstPath>::visit_ratio(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_relative_selector<'ast: 'r, 'r>(
        &mut self,
        node: &'ast RelativeSelector,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_relative_selector(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_relative_selector_list<'ast: 'r, 'r>(
        &mut self,
        node: &'ast RelativeSelectorList,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_relative_selector_list(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_relative_selectors<'ast: 'r, 'r>(
        &mut self,
        node: &'ast [RelativeSelector],
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_relative_selectors(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_resolution<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Resolution,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_resolution(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_rule<'ast: 'r, 'r>(&mut self, node: &'ast Rule, __ast_path: &mut AstNodePath<'r>) {
        if self.enabled {
            <V as VisitAstPath>::visit_rule(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_rules<'ast: 'r, 'r>(&mut self, node: &'ast [Rule], __ast_path: &mut AstNodePath<'r>) {
        if self.enabled {
            <V as VisitAstPath>::visit_rules(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_scope_range<'ast: 'r, 'r>(
        &mut self,
        node: &'ast ScopeRange,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_scope_range(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_selector_list<'ast: 'r, 'r>(
        &mut self,
        node: &'ast SelectorList,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_selector_list(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_sequence_of_custom_idents<'ast: 'r, 'r>(
        &mut self,
        node: &'ast SequenceOfCustomIdents,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_sequence_of_custom_idents(
                &mut self.visitor,
                node,
                __ast_path,
            )
        } else {
        }
    }

    #[inline]
    fn visit_simple_block<'ast: 'r, 'r>(
        &mut self,
        node: &'ast SimpleBlock,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_simple_block(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_size_feature<'ast: 'r, 'r>(
        &mut self,
        node: &'ast SizeFeature,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_size_feature(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_size_feature_boolean<'ast: 'r, 'r>(
        &mut self,
        node: &'ast SizeFeatureBoolean,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_size_feature_boolean(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_size_feature_name<'ast: 'r, 'r>(
        &mut self,
        node: &'ast SizeFeatureName,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_size_feature_name(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_size_feature_plain<'ast: 'r, 'r>(
        &mut self,
        node: &'ast SizeFeaturePlain,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_size_feature_plain(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_size_feature_range<'ast: 'r, 'r>(
        &mut self,
        node: &'ast SizeFeatureRange,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_size_feature_range(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_size_feature_range_comparison<'ast: 'r, 'r>(
        &mut self,
        node: &'ast SizeFeatureRangeComparison,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_size_feature_range_comparison(
                &mut self.visitor,
                node,
                __ast_path,
            )
        } else {
        }
    }

    #[inline]
    fn visit_size_feature_range_interval<'ast: 'r, 'r>(
        &mut self,
        node: &'ast SizeFeatureRangeInterval,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_size_feature_range_interval(
                &mut self.visitor,
                node,
                __ast_path,
            )
        } else {
        }
    }

    #[inline]
    fn visit_size_feature_value<'ast: 'r, 'r>(
        &mut self,
        node: &'ast SizeFeatureValue,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_size_feature_value(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_span<'ast: 'r, 'r>(
        &mut self,
        node: &'ast swc_common::Span,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_span(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_str<'ast: 'r, 'r>(&mut self, node: &'ast Str, __ast_path: &mut AstNodePath<'r>) {
        if self.enabled {
            <V as VisitAstPath>::visit_str(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_style_block<'ast: 'r, 'r>(
        &mut self,
        node: &'ast StyleBlock,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_style_block(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_stylesheet<'ast: 'r, 'r>(
        &mut self,
        node: &'ast Stylesheet,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_stylesheet(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_subclass_selector<'ast: 'r, 'r>(
        &mut self,
        node: &'ast SubclassSelector,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_subclass_selector(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_subclass_selectors<'ast: 'r, 'r>(
        &mut self,
        node: &'ast [SubclassSelector],
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_subclass_selectors(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_supports_and<'ast: 'r, 'r>(
        &mut self,
        node: &'ast SupportsAnd,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_supports_and(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_supports_condition<'ast: 'r, 'r>(
        &mut self,
        node: &'ast SupportsCondition,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_supports_condition(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_supports_condition_type<'ast: 'r, 'r>(
        &mut self,
        node: &'ast SupportsConditionType,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_supports_condition_type(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_supports_condition_types<'ast: 'r, 'r>(
        &mut self,
        node: &'ast [SupportsConditionType],
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_supports_condition_types(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_supports_feature<'ast: 'r, 'r>(
        &mut self,
        node: &'ast SupportsFeature,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_supports_feature(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_supports_in_parens<'ast: 'r, 'r>(
        &mut self,
        node: &'ast SupportsInParens,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_supports_in_parens(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_supports_not<'ast: 'r, 'r>(
        &mut self,
        node: &'ast SupportsNot,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_supports_not(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_supports_or<'ast: 'r, 'r>(
        &mut self,
        node: &'ast SupportsOr,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_supports_or(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_tag_name_selector<'ast: 'r, 'r>(
        &mut self,
        node: &'ast TagNameSelector,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_tag_name_selector(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_time<'ast: 'r, 'r>(&mut self, node: &'ast Time, __ast_path: &mut AstNodePath<'r>) {
        if self.enabled {
            <V as VisitAstPath>::visit_time(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_time_percentage<'ast: 'r, 'r>(
        &mut self,
        node: &'ast TimePercentage,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_time_percentage(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_token<'ast: 'r, 'r>(&mut self, node: &'ast Token, __ast_path: &mut AstNodePath<'r>) {
        if self.enabled {
            <V as VisitAstPath>::visit_token(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_token_and_span<'ast: 'r, 'r>(
        &mut self,
        node: &'ast TokenAndSpan,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_token_and_span(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_type_selector<'ast: 'r, 'r>(
        &mut self,
        node: &'ast TypeSelector,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_type_selector(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_unicode_range<'ast: 'r, 'r>(
        &mut self,
        node: &'ast UnicodeRange,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_unicode_range(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_universal_selector<'ast: 'r, 'r>(
        &mut self,
        node: &'ast UniversalSelector,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_universal_selector(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_unknown_dimension<'ast: 'r, 'r>(
        &mut self,
        node: &'ast UnknownDimension,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_unknown_dimension(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_url<'ast: 'r, 'r>(&mut self, node: &'ast Url, __ast_path: &mut AstNodePath<'r>) {
        if self.enabled {
            <V as VisitAstPath>::visit_url(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_url_key_value<'ast: 'r, 'r>(
        &mut self,
        node: &'ast UrlKeyValue,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_url_key_value(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_url_modifier<'ast: 'r, 'r>(
        &mut self,
        node: &'ast UrlModifier,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_url_modifier(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_url_modifiers<'ast: 'r, 'r>(
        &mut self,
        node: &'ast [UrlModifier],
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_url_modifiers(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_url_value<'ast: 'r, 'r>(
        &mut self,
        node: &'ast UrlValue,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_url_value(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_url_value_raw<'ast: 'r, 'r>(
        &mut self,
        node: &'ast UrlValueRaw,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_url_value_raw(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_wq_name<'ast: 'r, 'r>(
        &mut self,
        node: &'ast WqName,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        if self.enabled {
            <V as VisitAstPath>::visit_wq_name(&mut self.visitor, node, __ast_path)
        } else {
        }
    }
}
#[doc = r" A trait implemented for types that can be visited using a visitor."]
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
pub trait VisitWithAstPath<V: ?Sized + VisitAstPath> {
    #[doc = r" Calls a visitor method (visitor.fold_xxx) with self."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    );
    #[doc = r" Visit children nodes of `self`` with `visitor`."]
    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    );
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for AbsoluteColorBase {
    #[doc = "Calls [VisitAstPath`::visit_absolute_color_base`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_absolute_color_base(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            AbsoluteColorBase::HexColor { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::AbsoluteColorBase(
                    self,
                    self::fields::AbsoluteColorBaseField::HexColor,
                ));
                <HexColor as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            AbsoluteColorBase::NamedColorOrTransparent { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::AbsoluteColorBase(
                    self,
                    self::fields::AbsoluteColorBaseField::NamedColorOrTransparent,
                ));
                <Ident as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            AbsoluteColorBase::Function { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::AbsoluteColorBase(
                    self,
                    self::fields::AbsoluteColorBaseField::Function,
                ));
                <Function as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for AlphaValue {
    #[doc = "Calls [VisitAstPath`::visit_alpha_value`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_alpha_value(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            AlphaValue::Number { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::AlphaValue(
                    self,
                    self::fields::AlphaValueField::Number,
                ));
                <Number as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            AlphaValue::Percentage { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::AlphaValue(
                    self,
                    self::fields::AlphaValueField::Percentage,
                ));
                <Percentage as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for AnPlusB {
    #[doc = "Calls [VisitAstPath`::visit_an_plus_b`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_an_plus_b(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            AnPlusB::Ident { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::AnPlusB(
                    self,
                    self::fields::AnPlusBField::Ident,
                ));
                <Ident as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            AnPlusB::AnPlusBNotation { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::AnPlusB(
                    self,
                    self::fields::AnPlusBField::AnPlusBNotation,
                ));
                <AnPlusBNotation as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for AnPlusBNotation {
    #[doc = "Calls [VisitAstPath`::visit_an_plus_b_notation`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_an_plus_b_notation(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            AnPlusBNotation {
                span,
                a,
                a_raw,
                b,
                b_raw,
            } => {
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::AnPlusBNotation(
                        self,
                        self::fields::AnPlusBNotationField::Span,
                    ));
                    <swc_common::Span as VisitWithAstPath<V>>::visit_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::AnPlusBNotation(
                        self,
                        self::fields::AnPlusBNotationField::ARaw,
                    ));
                    <Option<swc_atoms::Atom> as VisitWithAstPath<V>>::visit_with_ast_path(
                        a_raw,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::AnPlusBNotation(
                        self,
                        self::fields::AnPlusBNotationField::BRaw,
                    ));
                    <Option<swc_atoms::Atom> as VisitWithAstPath<V>>::visit_with_ast_path(
                        b_raw,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for Angle {
    #[doc = "Calls [VisitAstPath`::visit_angle`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_angle(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            Angle { span, value, unit } => {
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::Angle(
                        self,
                        self::fields::AngleField::Span,
                    ));
                    <swc_common::Span as VisitWithAstPath<V>>::visit_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::Angle(
                        self,
                        self::fields::AngleField::Value,
                    ));
                    <Number as VisitWithAstPath<V>>::visit_with_ast_path(
                        value,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::Angle(
                        self,
                        self::fields::AngleField::Unit,
                    ));
                    <Ident as VisitWithAstPath<V>>::visit_with_ast_path(
                        unit,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for AnglePercentage {
    #[doc = "Calls [VisitAstPath`::visit_angle_percentage`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_angle_percentage(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            AnglePercentage::Angle { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::AnglePercentage(
                    self,
                    self::fields::AnglePercentageField::Angle,
                ));
                <Angle as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            AnglePercentage::Percentage { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::AnglePercentage(
                    self,
                    self::fields::AnglePercentageField::Percentage,
                ));
                <Percentage as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for AnyNamespace {
    #[doc = "Calls [VisitAstPath`::visit_any_namespace`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_any_namespace(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            AnyNamespace { span } => {
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::AnyNamespace(
                        self,
                        self::fields::AnyNamespaceField::Span,
                    ));
                    <swc_common::Span as VisitWithAstPath<V>>::visit_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for AtRule {
    #[doc = "Calls [VisitAstPath`::visit_at_rule`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_at_rule(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            AtRule {
                span,
                name,
                prelude,
                block,
            } => {
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::AtRule(
                        self,
                        self::fields::AtRuleField::Span,
                    ));
                    <swc_common::Span as VisitWithAstPath<V>>::visit_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::AtRule(
                        self,
                        self::fields::AtRuleField::Name,
                    ));
                    <AtRuleName as VisitWithAstPath<V>>::visit_with_ast_path(
                        name,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::AtRule(
                        self,
                        self::fields::AtRuleField::Prelude,
                    ));
                    <Option<Box<AtRulePrelude>> as VisitWithAstPath<V>>::visit_with_ast_path(
                        prelude,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::AtRule(
                        self,
                        self::fields::AtRuleField::Block,
                    ));
                    <Option<SimpleBlock> as VisitWithAstPath<V>>::visit_with_ast_path(
                        block,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for AtRuleName {
    #[doc = "Calls [VisitAstPath`::visit_at_rule_name`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_at_rule_name(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            AtRuleName::DashedIdent { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::AtRuleName(
                    self,
                    self::fields::AtRuleNameField::DashedIdent,
                ));
                <DashedIdent as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            AtRuleName::Ident { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::AtRuleName(
                    self,
                    self::fields::AtRuleNameField::Ident,
                ));
                <Ident as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for AtRulePrelude {
    #[doc = "Calls [VisitAstPath`::visit_at_rule_prelude`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_at_rule_prelude(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            AtRulePrelude::ListOfComponentValues { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::AtRulePrelude(
                    self,
                    self::fields::AtRulePreludeField::ListOfComponentValues,
                ));
                <ListOfComponentValues as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            AtRulePrelude::CharsetPrelude { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::AtRulePrelude(
                    self,
                    self::fields::AtRulePreludeField::CharsetPrelude,
                ));
                <Str as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            AtRulePrelude::PropertyPrelude { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::AtRulePrelude(
                    self,
                    self::fields::AtRulePreludeField::PropertyPrelude,
                ));
                <CustomPropertyName as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            AtRulePrelude::CounterStylePrelude { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::AtRulePrelude(
                    self,
                    self::fields::AtRulePreludeField::CounterStylePrelude,
                ));
                <CustomIdent as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            AtRulePrelude::ColorProfilePrelude { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::AtRulePrelude(
                    self,
                    self::fields::AtRulePreludeField::ColorProfilePrelude,
                ));
                <ColorProfileName as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            AtRulePrelude::DocumentPrelude { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::AtRulePrelude(
                    self,
                    self::fields::AtRulePreludeField::DocumentPrelude,
                ));
                <DocumentPrelude as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            AtRulePrelude::FontPaletteValuesPrelude { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::AtRulePrelude(
                    self,
                    self::fields::AtRulePreludeField::FontPaletteValuesPrelude,
                ));
                <DashedIdent as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            AtRulePrelude::FontFeatureValuesPrelude { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::AtRulePrelude(
                    self,
                    self::fields::AtRulePreludeField::FontFeatureValuesPrelude,
                ));
                <FontFeatureValuesPrelude as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            AtRulePrelude::NestPrelude { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::AtRulePrelude(
                    self,
                    self::fields::AtRulePreludeField::NestPrelude,
                ));
                <SelectorList as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            AtRulePrelude::KeyframesPrelude { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::AtRulePrelude(
                    self,
                    self::fields::AtRulePreludeField::KeyframesPrelude,
                ));
                <KeyframesName as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            AtRulePrelude::ImportPrelude { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::AtRulePrelude(
                    self,
                    self::fields::AtRulePreludeField::ImportPrelude,
                ));
                <ImportPrelude as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            AtRulePrelude::NamespacePrelude { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::AtRulePrelude(
                    self,
                    self::fields::AtRulePreludeField::NamespacePrelude,
                ));
                <NamespacePrelude as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            AtRulePrelude::MediaPrelude { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::AtRulePrelude(
                    self,
                    self::fields::AtRulePreludeField::MediaPrelude,
                ));
                <MediaQueryList as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            AtRulePrelude::SupportsPrelude { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::AtRulePrelude(
                    self,
                    self::fields::AtRulePreludeField::SupportsPrelude,
                ));
                <SupportsCondition as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            AtRulePrelude::PagePrelude { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::AtRulePrelude(
                    self,
                    self::fields::AtRulePreludeField::PagePrelude,
                ));
                <PageSelectorList as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            AtRulePrelude::LayerPrelude { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::AtRulePrelude(
                    self,
                    self::fields::AtRulePreludeField::LayerPrelude,
                ));
                <LayerPrelude as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            AtRulePrelude::ContainerPrelude { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::AtRulePrelude(
                    self,
                    self::fields::AtRulePreludeField::ContainerPrelude,
                ));
                <ContainerCondition as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            AtRulePrelude::CustomMediaPrelude { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::AtRulePrelude(
                    self,
                    self::fields::AtRulePreludeField::CustomMediaPrelude,
                ));
                <CustomMediaQuery as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            AtRulePrelude::ScopePrelude { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::AtRulePrelude(
                    self,
                    self::fields::AtRulePreludeField::ScopePrelude,
                ));
                <ScopeRange as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for AttributeSelector {
    #[doc = "Calls [VisitAstPath`::visit_attribute_selector`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_attribute_selector(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            AttributeSelector {
                span,
                name,
                matcher,
                value,
                modifier,
            } => {
                {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentNodeRef::AttributeSelector(
                            self,
                            self::fields::AttributeSelectorField::Span,
                        ));
                    <swc_common::Span as VisitWithAstPath<V>>::visit_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentNodeRef::AttributeSelector(
                            self,
                            self::fields::AttributeSelectorField::Name,
                        ));
                    <WqName as VisitWithAstPath<V>>::visit_with_ast_path(
                        name,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentNodeRef::AttributeSelector(
                            self,
                            self::fields::AttributeSelectorField::Matcher,
                        ));
                    <Option<AttributeSelectorMatcher> as VisitWithAstPath<V>>::visit_with_ast_path(
                        matcher,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentNodeRef::AttributeSelector(
                            self,
                            self::fields::AttributeSelectorField::Value,
                        ));
                    <Option<AttributeSelectorValue> as VisitWithAstPath<V>>::visit_with_ast_path(
                        value,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentNodeRef::AttributeSelector(
                            self,
                            self::fields::AttributeSelectorField::Modifier,
                        ));
                    <Option<AttributeSelectorModifier> as VisitWithAstPath<V>>::visit_with_ast_path(
                        modifier,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for AttributeSelectorMatcher {
    #[doc = "Calls [VisitAstPath`::visit_attribute_selector_matcher`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_attribute_selector_matcher(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            AttributeSelectorMatcher { span, value } => {
                {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentNodeRef::AttributeSelectorMatcher(
                            self,
                            self::fields::AttributeSelectorMatcherField::Span,
                        ));
                    <swc_common::Span as VisitWithAstPath<V>>::visit_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentNodeRef::AttributeSelectorMatcher(
                            self,
                            self::fields::AttributeSelectorMatcherField::Value,
                        ));
                    <AttributeSelectorMatcherValue as VisitWithAstPath<V>>::visit_with_ast_path(
                        value,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for AttributeSelectorMatcherValue {
    #[doc = "Calls [VisitAstPath`::visit_attribute_selector_matcher_value`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_attribute_selector_matcher_value(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            AttributeSelectorMatcherValue::Equals => {}
            AttributeSelectorMatcherValue::Tilde => {}
            AttributeSelectorMatcherValue::Bar => {}
            AttributeSelectorMatcherValue::Caret => {}
            AttributeSelectorMatcherValue::Dollar => {}
            AttributeSelectorMatcherValue::Asterisk => {}
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for AttributeSelectorModifier {
    #[doc = "Calls [VisitAstPath`::visit_attribute_selector_modifier`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_attribute_selector_modifier(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            AttributeSelectorModifier { span, value } => {
                {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentNodeRef::AttributeSelectorModifier(
                            self,
                            self::fields::AttributeSelectorModifierField::Span,
                        ));
                    <swc_common::Span as VisitWithAstPath<V>>::visit_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentNodeRef::AttributeSelectorModifier(
                            self,
                            self::fields::AttributeSelectorModifierField::Value,
                        ));
                    <Ident as VisitWithAstPath<V>>::visit_with_ast_path(
                        value,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for AttributeSelectorValue {
    #[doc = "Calls [VisitAstPath`::visit_attribute_selector_value`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_attribute_selector_value(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            AttributeSelectorValue::Str { 0: _field_0 } => {
                let mut __ast_path =
                    __ast_path.with_guard(AstParentNodeRef::AttributeSelectorValue(
                        self,
                        self::fields::AttributeSelectorValueField::Str,
                    ));
                <Str as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            AttributeSelectorValue::Ident { 0: _field_0 } => {
                let mut __ast_path =
                    __ast_path.with_guard(AstParentNodeRef::AttributeSelectorValue(
                        self,
                        self::fields::AttributeSelectorValueField::Ident,
                    ));
                <Ident as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for BinOp {
    #[doc = "Calls [VisitAstPath`::visit_bin_op`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_bin_op(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            BinOp::Add => {}
            BinOp::Sub => {}
            BinOp::Mul => {}
            BinOp::Div => {}
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for CalcOperator {
    #[doc = "Calls [VisitAstPath`::visit_calc_operator`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_calc_operator(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            CalcOperator { span, value } => {
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::CalcOperator(
                        self,
                        self::fields::CalcOperatorField::Span,
                    ));
                    <swc_common::Span as VisitWithAstPath<V>>::visit_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::CalcOperator(
                        self,
                        self::fields::CalcOperatorField::Value,
                    ));
                    <CalcOperatorType as VisitWithAstPath<V>>::visit_with_ast_path(
                        value,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for CalcOperatorType {
    #[doc = "Calls [VisitAstPath`::visit_calc_operator_type`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_calc_operator_type(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            CalcOperatorType::Add => {}
            CalcOperatorType::Sub => {}
            CalcOperatorType::Mul => {}
            CalcOperatorType::Div => {}
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for CalcProduct {
    #[doc = "Calls [VisitAstPath`::visit_calc_product`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_calc_product(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            CalcProduct { span, expressions } => {
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::CalcProduct(
                        self,
                        self::fields::CalcProductField::Span,
                    ));
                    <swc_common::Span as VisitWithAstPath<V>>::visit_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::CalcProduct(
                        self,
                        self::fields::CalcProductField::Expressions(usize::MAX),
                    ));
                    <Vec<CalcValueOrOperator> as VisitWithAstPath<V>>::visit_with_ast_path(
                        expressions,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for CalcProductOrOperator {
    #[doc = "Calls [VisitAstPath`::visit_calc_product_or_operator`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_calc_product_or_operator(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            CalcProductOrOperator::Product { 0: _field_0 } => {
                let mut __ast_path =
                    __ast_path.with_guard(AstParentNodeRef::CalcProductOrOperator(
                        self,
                        self::fields::CalcProductOrOperatorField::Product,
                    ));
                <CalcProduct as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            CalcProductOrOperator::Operator { 0: _field_0 } => {
                let mut __ast_path =
                    __ast_path.with_guard(AstParentNodeRef::CalcProductOrOperator(
                        self,
                        self::fields::CalcProductOrOperatorField::Operator,
                    ));
                <CalcOperator as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for CalcSum {
    #[doc = "Calls [VisitAstPath`::visit_calc_sum`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_calc_sum(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            CalcSum { span, expressions } => {
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::CalcSum(
                        self,
                        self::fields::CalcSumField::Span,
                    ));
                    <swc_common::Span as VisitWithAstPath<V>>::visit_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::CalcSum(
                        self,
                        self::fields::CalcSumField::Expressions(usize::MAX),
                    ));
                    <Vec<CalcProductOrOperator> as VisitWithAstPath<V>>::visit_with_ast_path(
                        expressions,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for CalcValue {
    #[doc = "Calls [VisitAstPath`::visit_calc_value`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_calc_value(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            CalcValue::Number { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::CalcValue(
                    self,
                    self::fields::CalcValueField::Number,
                ));
                <Number as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            CalcValue::Dimension { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::CalcValue(
                    self,
                    self::fields::CalcValueField::Dimension,
                ));
                <Dimension as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            CalcValue::Percentage { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::CalcValue(
                    self,
                    self::fields::CalcValueField::Percentage,
                ));
                <Percentage as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            CalcValue::Constant { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::CalcValue(
                    self,
                    self::fields::CalcValueField::Constant,
                ));
                <Ident as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            CalcValue::Sum { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::CalcValue(
                    self,
                    self::fields::CalcValueField::Sum,
                ));
                <CalcSum as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            CalcValue::Function { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::CalcValue(
                    self,
                    self::fields::CalcValueField::Function,
                ));
                <Function as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for CalcValueOrOperator {
    #[doc = "Calls [VisitAstPath`::visit_calc_value_or_operator`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_calc_value_or_operator(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            CalcValueOrOperator::Value { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::CalcValueOrOperator(
                    self,
                    self::fields::CalcValueOrOperatorField::Value,
                ));
                <CalcValue as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            CalcValueOrOperator::Operator { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::CalcValueOrOperator(
                    self,
                    self::fields::CalcValueOrOperatorField::Operator,
                ));
                <CalcOperator as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for ClassSelector {
    #[doc = "Calls [VisitAstPath`::visit_class_selector`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_class_selector(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            ClassSelector { span, text } => {
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::ClassSelector(
                        self,
                        self::fields::ClassSelectorField::Span,
                    ));
                    <swc_common::Span as VisitWithAstPath<V>>::visit_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::ClassSelector(
                        self,
                        self::fields::ClassSelectorField::Text,
                    ));
                    <Ident as VisitWithAstPath<V>>::visit_with_ast_path(
                        text,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for CmykComponent {
    #[doc = "Calls [VisitAstPath`::visit_cmyk_component`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_cmyk_component(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            CmykComponent::Number { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::CmykComponent(
                    self,
                    self::fields::CmykComponentField::Number,
                ));
                <Number as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            CmykComponent::Percentage { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::CmykComponent(
                    self,
                    self::fields::CmykComponentField::Percentage,
                ));
                <Percentage as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            CmykComponent::Function { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::CmykComponent(
                    self,
                    self::fields::CmykComponentField::Function,
                ));
                <Function as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for Color {
    #[doc = "Calls [VisitAstPath`::visit_color`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_color(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            Color::AbsoluteColorBase { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::Color(
                    self,
                    self::fields::ColorField::AbsoluteColorBase,
                ));
                <AbsoluteColorBase as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            Color::CurrentColorOrSystemColor { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::Color(
                    self,
                    self::fields::ColorField::CurrentColorOrSystemColor,
                ));
                <Ident as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            Color::Function { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::Color(
                    self,
                    self::fields::ColorField::Function,
                ));
                <Function as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for ColorProfileName {
    #[doc = "Calls [VisitAstPath`::visit_color_profile_name`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_color_profile_name(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            ColorProfileName::DashedIdent { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::ColorProfileName(
                    self,
                    self::fields::ColorProfileNameField::DashedIdent,
                ));
                <DashedIdent as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            ColorProfileName::Ident { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::ColorProfileName(
                    self,
                    self::fields::ColorProfileNameField::Ident,
                ));
                <Ident as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for Combinator {
    #[doc = "Calls [VisitAstPath`::visit_combinator`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_combinator(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            Combinator { span, value } => {
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::Combinator(
                        self,
                        self::fields::CombinatorField::Span,
                    ));
                    <swc_common::Span as VisitWithAstPath<V>>::visit_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::Combinator(
                        self,
                        self::fields::CombinatorField::Value,
                    ));
                    <CombinatorValue as VisitWithAstPath<V>>::visit_with_ast_path(
                        value,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for CombinatorValue {
    #[doc = "Calls [VisitAstPath`::visit_combinator_value`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_combinator_value(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            CombinatorValue::Descendant => {}
            CombinatorValue::NextSibling => {}
            CombinatorValue::Child => {}
            CombinatorValue::LaterSibling => {}
            CombinatorValue::Column => {}
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for ComplexSelector {
    #[doc = "Calls [VisitAstPath`::visit_complex_selector`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_complex_selector(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            ComplexSelector { span, children } => {
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::ComplexSelector(
                        self,
                        self::fields::ComplexSelectorField::Span,
                    ));
                    <swc_common::Span as VisitWithAstPath<V>>::visit_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::ComplexSelector(
                        self,
                        self::fields::ComplexSelectorField::Children(usize::MAX),
                    ));
                    <Vec<ComplexSelectorChildren> as VisitWithAstPath<V>>::visit_with_ast_path(
                        children,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for ComplexSelectorChildren {
    #[doc = "Calls [VisitAstPath`::visit_complex_selector_children`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_complex_selector_children(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            ComplexSelectorChildren::CompoundSelector { 0: _field_0 } => {
                let mut __ast_path =
                    __ast_path.with_guard(AstParentNodeRef::ComplexSelectorChildren(
                        self,
                        self::fields::ComplexSelectorChildrenField::CompoundSelector,
                    ));
                <CompoundSelector as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            ComplexSelectorChildren::Combinator { 0: _field_0 } => {
                let mut __ast_path =
                    __ast_path.with_guard(AstParentNodeRef::ComplexSelectorChildren(
                        self,
                        self::fields::ComplexSelectorChildrenField::Combinator,
                    ));
                <Combinator as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for ComponentValue {
    #[doc = "Calls [VisitAstPath`::visit_component_value`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_component_value(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            ComponentValue::PreservedToken { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::ComponentValue(
                    self,
                    self::fields::ComponentValueField::PreservedToken,
                ));
                <Box<TokenAndSpan> as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            ComponentValue::Function { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::ComponentValue(
                    self,
                    self::fields::ComponentValueField::Function,
                ));
                <Box<Function> as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            ComponentValue::SimpleBlock { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::ComponentValue(
                    self,
                    self::fields::ComponentValueField::SimpleBlock,
                ));
                <Box<SimpleBlock> as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            ComponentValue::AtRule { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::ComponentValue(
                    self,
                    self::fields::ComponentValueField::AtRule,
                ));
                <Box<AtRule> as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            ComponentValue::QualifiedRule { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::ComponentValue(
                    self,
                    self::fields::ComponentValueField::QualifiedRule,
                ));
                <Box<QualifiedRule> as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            ComponentValue::ListOfComponentValues { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::ComponentValue(
                    self,
                    self::fields::ComponentValueField::ListOfComponentValues,
                ));
                <Box<ListOfComponentValues> as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            ComponentValue::KeyframeBlock { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::ComponentValue(
                    self,
                    self::fields::ComponentValueField::KeyframeBlock,
                ));
                <Box<KeyframeBlock> as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            ComponentValue::Ident { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::ComponentValue(
                    self,
                    self::fields::ComponentValueField::Ident,
                ));
                <Box<Ident> as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            ComponentValue::DashedIdent { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::ComponentValue(
                    self,
                    self::fields::ComponentValueField::DashedIdent,
                ));
                <Box<DashedIdent> as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            ComponentValue::Str { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::ComponentValue(
                    self,
                    self::fields::ComponentValueField::Str,
                ));
                <Box<Str> as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            ComponentValue::Url { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::ComponentValue(
                    self,
                    self::fields::ComponentValueField::Url,
                ));
                <Box<Url> as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            ComponentValue::Integer { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::ComponentValue(
                    self,
                    self::fields::ComponentValueField::Integer,
                ));
                <Box<Integer> as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            ComponentValue::Number { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::ComponentValue(
                    self,
                    self::fields::ComponentValueField::Number,
                ));
                <Box<Number> as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            ComponentValue::Percentage { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::ComponentValue(
                    self,
                    self::fields::ComponentValueField::Percentage,
                ));
                <Box<Percentage> as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            ComponentValue::Dimension { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::ComponentValue(
                    self,
                    self::fields::ComponentValueField::Dimension,
                ));
                <Box<Dimension> as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            ComponentValue::LengthPercentage { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::ComponentValue(
                    self,
                    self::fields::ComponentValueField::LengthPercentage,
                ));
                <Box<LengthPercentage> as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            ComponentValue::FrequencyPercentage { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::ComponentValue(
                    self,
                    self::fields::ComponentValueField::FrequencyPercentage,
                ));
                <Box<FrequencyPercentage> as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            ComponentValue::AnglePercentage { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::ComponentValue(
                    self,
                    self::fields::ComponentValueField::AnglePercentage,
                ));
                <Box<AnglePercentage> as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            ComponentValue::TimePercentage { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::ComponentValue(
                    self,
                    self::fields::ComponentValueField::TimePercentage,
                ));
                <Box<TimePercentage> as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            ComponentValue::Ratio { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::ComponentValue(
                    self,
                    self::fields::ComponentValueField::Ratio,
                ));
                <Box<Ratio> as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            ComponentValue::UnicodeRange { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::ComponentValue(
                    self,
                    self::fields::ComponentValueField::UnicodeRange,
                ));
                <Box<UnicodeRange> as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            ComponentValue::Color { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::ComponentValue(
                    self,
                    self::fields::ComponentValueField::Color,
                ));
                <Box<Color> as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            ComponentValue::AlphaValue { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::ComponentValue(
                    self,
                    self::fields::ComponentValueField::AlphaValue,
                ));
                <Box<AlphaValue> as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            ComponentValue::Hue { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::ComponentValue(
                    self,
                    self::fields::ComponentValueField::Hue,
                ));
                <Box<Hue> as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            ComponentValue::CmykComponent { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::ComponentValue(
                    self,
                    self::fields::ComponentValueField::CmykComponent,
                ));
                <Box<CmykComponent> as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            ComponentValue::Delimiter { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::ComponentValue(
                    self,
                    self::fields::ComponentValueField::Delimiter,
                ));
                <Box<Delimiter> as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            ComponentValue::CalcSum { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::ComponentValue(
                    self,
                    self::fields::ComponentValueField::CalcSum,
                ));
                <Box<CalcSum> as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            ComponentValue::ComplexSelector { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::ComponentValue(
                    self,
                    self::fields::ComponentValueField::ComplexSelector,
                ));
                <Box<ComplexSelector> as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            ComponentValue::LayerName { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::ComponentValue(
                    self,
                    self::fields::ComponentValueField::LayerName,
                ));
                <Box<LayerName> as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            ComponentValue::SupportsCondition { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::ComponentValue(
                    self,
                    self::fields::ComponentValueField::SupportsCondition,
                ));
                <Box<SupportsCondition> as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            ComponentValue::Declaration { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::ComponentValue(
                    self,
                    self::fields::ComponentValueField::Declaration,
                ));
                <Box<Declaration> as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            ComponentValue::IdSelector { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::ComponentValue(
                    self,
                    self::fields::ComponentValueField::IdSelector,
                ));
                <Box<IdSelector> as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for CompoundSelector {
    #[doc = "Calls [VisitAstPath`::visit_compound_selector`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_compound_selector(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            CompoundSelector {
                span,
                nesting_selector,
                type_selector,
                subclass_selectors,
            } => {
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::CompoundSelector(
                        self,
                        self::fields::CompoundSelectorField::Span,
                    ));
                    <swc_common::Span as VisitWithAstPath<V>>::visit_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::CompoundSelector(
                        self,
                        self::fields::CompoundSelectorField::NestingSelector,
                    ));
                    <Option<NestingSelector> as VisitWithAstPath<V>>::visit_with_ast_path(
                        nesting_selector,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::CompoundSelector(
                        self,
                        self::fields::CompoundSelectorField::TypeSelector,
                    ));
                    <Option<Box<TypeSelector>> as VisitWithAstPath<V>>::visit_with_ast_path(
                        type_selector,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::CompoundSelector(
                        self,
                        self::fields::CompoundSelectorField::SubclassSelectors(usize::MAX),
                    ));
                    <Vec<SubclassSelector> as VisitWithAstPath<V>>::visit_with_ast_path(
                        subclass_selectors,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for CompoundSelectorList {
    #[doc = "Calls [VisitAstPath`::visit_compound_selector_list`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_compound_selector_list(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            CompoundSelectorList { span, children } => {
                {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentNodeRef::CompoundSelectorList(
                            self,
                            self::fields::CompoundSelectorListField::Span,
                        ));
                    <swc_common::Span as VisitWithAstPath<V>>::visit_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentNodeRef::CompoundSelectorList(
                            self,
                            self::fields::CompoundSelectorListField::Children(usize::MAX),
                        ));
                    <Vec<CompoundSelector> as VisitWithAstPath<V>>::visit_with_ast_path(
                        children,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for ContainerCondition {
    #[doc = "Calls [VisitAstPath`::visit_container_condition`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_container_condition(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            ContainerCondition { span, name, query } => {
                {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentNodeRef::ContainerCondition(
                            self,
                            self::fields::ContainerConditionField::Span,
                        ));
                    <swc_common::Span as VisitWithAstPath<V>>::visit_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentNodeRef::ContainerCondition(
                            self,
                            self::fields::ContainerConditionField::Name,
                        ));
                    <Option<ContainerName> as VisitWithAstPath<V>>::visit_with_ast_path(
                        name,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentNodeRef::ContainerCondition(
                            self,
                            self::fields::ContainerConditionField::Query,
                        ));
                    <ContainerQuery as VisitWithAstPath<V>>::visit_with_ast_path(
                        query,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for ContainerName {
    #[doc = "Calls [VisitAstPath`::visit_container_name`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_container_name(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            ContainerName::CustomIdent { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::ContainerName(
                    self,
                    self::fields::ContainerNameField::CustomIdent,
                ));
                <CustomIdent as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for ContainerQuery {
    #[doc = "Calls [VisitAstPath`::visit_container_query`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_container_query(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            ContainerQuery { span, queries } => {
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::ContainerQuery(
                        self,
                        self::fields::ContainerQueryField::Span,
                    ));
                    <swc_common::Span as VisitWithAstPath<V>>::visit_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::ContainerQuery(
                        self,
                        self::fields::ContainerQueryField::Queries(usize::MAX),
                    ));
                    <Vec<ContainerQueryType> as VisitWithAstPath<V>>::visit_with_ast_path(
                        queries,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for ContainerQueryAnd {
    #[doc = "Calls [VisitAstPath`::visit_container_query_and`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_container_query_and(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            ContainerQueryAnd {
                span,
                keyword,
                query,
            } => {
                {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentNodeRef::ContainerQueryAnd(
                            self,
                            self::fields::ContainerQueryAndField::Span,
                        ));
                    <swc_common::Span as VisitWithAstPath<V>>::visit_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentNodeRef::ContainerQueryAnd(
                            self,
                            self::fields::ContainerQueryAndField::Keyword,
                        ));
                    <Option<Ident> as VisitWithAstPath<V>>::visit_with_ast_path(
                        keyword,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentNodeRef::ContainerQueryAnd(
                            self,
                            self::fields::ContainerQueryAndField::Query,
                        ));
                    <QueryInParens as VisitWithAstPath<V>>::visit_with_ast_path(
                        query,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for ContainerQueryNot {
    #[doc = "Calls [VisitAstPath`::visit_container_query_not`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_container_query_not(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            ContainerQueryNot {
                span,
                keyword,
                query,
            } => {
                {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentNodeRef::ContainerQueryNot(
                            self,
                            self::fields::ContainerQueryNotField::Span,
                        ));
                    <swc_common::Span as VisitWithAstPath<V>>::visit_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentNodeRef::ContainerQueryNot(
                            self,
                            self::fields::ContainerQueryNotField::Keyword,
                        ));
                    <Option<Ident> as VisitWithAstPath<V>>::visit_with_ast_path(
                        keyword,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentNodeRef::ContainerQueryNot(
                            self,
                            self::fields::ContainerQueryNotField::Query,
                        ));
                    <QueryInParens as VisitWithAstPath<V>>::visit_with_ast_path(
                        query,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for ContainerQueryOr {
    #[doc = "Calls [VisitAstPath`::visit_container_query_or`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_container_query_or(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            ContainerQueryOr {
                span,
                keyword,
                query,
            } => {
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::ContainerQueryOr(
                        self,
                        self::fields::ContainerQueryOrField::Span,
                    ));
                    <swc_common::Span as VisitWithAstPath<V>>::visit_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::ContainerQueryOr(
                        self,
                        self::fields::ContainerQueryOrField::Keyword,
                    ));
                    <Option<Ident> as VisitWithAstPath<V>>::visit_with_ast_path(
                        keyword,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::ContainerQueryOr(
                        self,
                        self::fields::ContainerQueryOrField::Query,
                    ));
                    <QueryInParens as VisitWithAstPath<V>>::visit_with_ast_path(
                        query,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for ContainerQueryType {
    #[doc = "Calls [VisitAstPath`::visit_container_query_type`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_container_query_type(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            ContainerQueryType::Not { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::ContainerQueryType(
                    self,
                    self::fields::ContainerQueryTypeField::Not,
                ));
                <ContainerQueryNot as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            ContainerQueryType::And { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::ContainerQueryType(
                    self,
                    self::fields::ContainerQueryTypeField::And,
                ));
                <ContainerQueryAnd as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            ContainerQueryType::Or { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::ContainerQueryType(
                    self,
                    self::fields::ContainerQueryTypeField::Or,
                ));
                <ContainerQueryOr as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            ContainerQueryType::QueryInParens { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::ContainerQueryType(
                    self,
                    self::fields::ContainerQueryTypeField::QueryInParens,
                ));
                <QueryInParens as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for CustomHighlightName {
    #[doc = "Calls [VisitAstPath`::visit_custom_highlight_name`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_custom_highlight_name(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            CustomHighlightName { span, value, raw } => {
                {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentNodeRef::CustomHighlightName(
                            self,
                            self::fields::CustomHighlightNameField::Span,
                        ));
                    <swc_common::Span as VisitWithAstPath<V>>::visit_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentNodeRef::CustomHighlightName(
                            self,
                            self::fields::CustomHighlightNameField::Value,
                        ));
                    <swc_atoms::Atom as VisitWithAstPath<V>>::visit_with_ast_path(
                        value,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentNodeRef::CustomHighlightName(
                            self,
                            self::fields::CustomHighlightNameField::Raw,
                        ));
                    <Option<swc_atoms::Atom> as VisitWithAstPath<V>>::visit_with_ast_path(
                        raw,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for CustomIdent {
    #[doc = "Calls [VisitAstPath`::visit_custom_ident`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_custom_ident(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            CustomIdent { span, value, raw } => {
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::CustomIdent(
                        self,
                        self::fields::CustomIdentField::Span,
                    ));
                    <swc_common::Span as VisitWithAstPath<V>>::visit_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::CustomIdent(
                        self,
                        self::fields::CustomIdentField::Value,
                    ));
                    <swc_atoms::Atom as VisitWithAstPath<V>>::visit_with_ast_path(
                        value,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::CustomIdent(
                        self,
                        self::fields::CustomIdentField::Raw,
                    ));
                    <Option<swc_atoms::Atom> as VisitWithAstPath<V>>::visit_with_ast_path(
                        raw,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for CustomMediaQuery {
    #[doc = "Calls [VisitAstPath`::visit_custom_media_query`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_custom_media_query(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            CustomMediaQuery { span, name, media } => {
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::CustomMediaQuery(
                        self,
                        self::fields::CustomMediaQueryField::Span,
                    ));
                    <swc_common::Span as VisitWithAstPath<V>>::visit_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::CustomMediaQuery(
                        self,
                        self::fields::CustomMediaQueryField::Name,
                    ));
                    <ExtensionName as VisitWithAstPath<V>>::visit_with_ast_path(
                        name,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::CustomMediaQuery(
                        self,
                        self::fields::CustomMediaQueryField::Media,
                    ));
                    <CustomMediaQueryMediaType as VisitWithAstPath<V>>::visit_with_ast_path(
                        media,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for CustomMediaQueryMediaType {
    #[doc = "Calls [VisitAstPath`::visit_custom_media_query_media_type`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_custom_media_query_media_type(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            CustomMediaQueryMediaType::Ident { 0: _field_0 } => {
                let mut __ast_path =
                    __ast_path.with_guard(AstParentNodeRef::CustomMediaQueryMediaType(
                        self,
                        self::fields::CustomMediaQueryMediaTypeField::Ident,
                    ));
                <Ident as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            CustomMediaQueryMediaType::MediaQueryList { 0: _field_0 } => {
                let mut __ast_path =
                    __ast_path.with_guard(AstParentNodeRef::CustomMediaQueryMediaType(
                        self,
                        self::fields::CustomMediaQueryMediaTypeField::MediaQueryList,
                    ));
                <MediaQueryList as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for CustomPropertyName {
    #[doc = "Calls [VisitAstPath`::visit_custom_property_name`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_custom_property_name(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            CustomPropertyName { span, value, raw } => {
                {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentNodeRef::CustomPropertyName(
                            self,
                            self::fields::CustomPropertyNameField::Span,
                        ));
                    <swc_common::Span as VisitWithAstPath<V>>::visit_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentNodeRef::CustomPropertyName(
                            self,
                            self::fields::CustomPropertyNameField::Value,
                        ));
                    <swc_atoms::Atom as VisitWithAstPath<V>>::visit_with_ast_path(
                        value,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentNodeRef::CustomPropertyName(
                            self,
                            self::fields::CustomPropertyNameField::Raw,
                        ));
                    <Option<swc_atoms::Atom> as VisitWithAstPath<V>>::visit_with_ast_path(
                        raw,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for DashedIdent {
    #[doc = "Calls [VisitAstPath`::visit_dashed_ident`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_dashed_ident(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            DashedIdent { span, value, raw } => {
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::DashedIdent(
                        self,
                        self::fields::DashedIdentField::Span,
                    ));
                    <swc_common::Span as VisitWithAstPath<V>>::visit_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::DashedIdent(
                        self,
                        self::fields::DashedIdentField::Value,
                    ));
                    <swc_atoms::Atom as VisitWithAstPath<V>>::visit_with_ast_path(
                        value,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::DashedIdent(
                        self,
                        self::fields::DashedIdentField::Raw,
                    ));
                    <Option<swc_atoms::Atom> as VisitWithAstPath<V>>::visit_with_ast_path(
                        raw,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for Declaration {
    #[doc = "Calls [VisitAstPath`::visit_declaration`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_declaration(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            Declaration {
                span,
                name,
                value,
                important,
            } => {
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::Declaration(
                        self,
                        self::fields::DeclarationField::Span,
                    ));
                    <swc_common::Span as VisitWithAstPath<V>>::visit_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::Declaration(
                        self,
                        self::fields::DeclarationField::Name,
                    ));
                    <DeclarationName as VisitWithAstPath<V>>::visit_with_ast_path(
                        name,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::Declaration(
                        self,
                        self::fields::DeclarationField::Value(usize::MAX),
                    ));
                    <Vec<ComponentValue> as VisitWithAstPath<V>>::visit_with_ast_path(
                        value,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::Declaration(
                        self,
                        self::fields::DeclarationField::Important,
                    ));
                    <Option<ImportantFlag> as VisitWithAstPath<V>>::visit_with_ast_path(
                        important,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for DeclarationName {
    #[doc = "Calls [VisitAstPath`::visit_declaration_name`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_declaration_name(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            DeclarationName::Ident { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::DeclarationName(
                    self,
                    self::fields::DeclarationNameField::Ident,
                ));
                <Ident as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            DeclarationName::DashedIdent { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::DeclarationName(
                    self,
                    self::fields::DeclarationNameField::DashedIdent,
                ));
                <DashedIdent as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for DeclarationOrAtRule {
    #[doc = "Calls [VisitAstPath`::visit_declaration_or_at_rule`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_declaration_or_at_rule(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            DeclarationOrAtRule::Declaration { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::DeclarationOrAtRule(
                    self,
                    self::fields::DeclarationOrAtRuleField::Declaration,
                ));
                <Box<Declaration> as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            DeclarationOrAtRule::AtRule { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::DeclarationOrAtRule(
                    self,
                    self::fields::DeclarationOrAtRuleField::AtRule,
                ));
                <Box<AtRule> as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            DeclarationOrAtRule::ListOfComponentValues { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::DeclarationOrAtRule(
                    self,
                    self::fields::DeclarationOrAtRuleField::ListOfComponentValues,
                ));
                <Box<ListOfComponentValues> as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for Delimiter {
    #[doc = "Calls [VisitAstPath`::visit_delimiter`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_delimiter(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            Delimiter { span, value } => {
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::Delimiter(
                        self,
                        self::fields::DelimiterField::Span,
                    ));
                    <swc_common::Span as VisitWithAstPath<V>>::visit_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::Delimiter(
                        self,
                        self::fields::DelimiterField::Value,
                    ));
                    <DelimiterValue as VisitWithAstPath<V>>::visit_with_ast_path(
                        value,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for DelimiterValue {
    #[doc = "Calls [VisitAstPath`::visit_delimiter_value`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_delimiter_value(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            DelimiterValue::Comma => {}
            DelimiterValue::Solidus => {}
            DelimiterValue::Semicolon => {}
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for Dimension {
    #[doc = "Calls [VisitAstPath`::visit_dimension`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_dimension(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            Dimension::Length { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::Dimension(
                    self,
                    self::fields::DimensionField::Length,
                ));
                <Length as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            Dimension::Angle { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::Dimension(
                    self,
                    self::fields::DimensionField::Angle,
                ));
                <Angle as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            Dimension::Time { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::Dimension(
                    self,
                    self::fields::DimensionField::Time,
                ));
                <Time as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            Dimension::Frequency { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::Dimension(
                    self,
                    self::fields::DimensionField::Frequency,
                ));
                <Frequency as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            Dimension::Resolution { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::Dimension(
                    self,
                    self::fields::DimensionField::Resolution,
                ));
                <Resolution as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            Dimension::Flex { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::Dimension(
                    self,
                    self::fields::DimensionField::Flex,
                ));
                <Flex as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            Dimension::UnknownDimension { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::Dimension(
                    self,
                    self::fields::DimensionField::UnknownDimension,
                ));
                <UnknownDimension as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for DimensionToken {
    #[doc = "Calls [VisitAstPath`::visit_dimension_token`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_dimension_token(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            DimensionToken {
                value,
                raw_value,
                unit,
                type_flag,
                raw_unit,
            } => {
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::DimensionToken(
                        self,
                        self::fields::DimensionTokenField::RawValue,
                    ));
                    <swc_atoms::Atom as VisitWithAstPath<V>>::visit_with_ast_path(
                        raw_value,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::DimensionToken(
                        self,
                        self::fields::DimensionTokenField::Unit,
                    ));
                    <swc_atoms::Atom as VisitWithAstPath<V>>::visit_with_ast_path(
                        unit,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::DimensionToken(
                        self,
                        self::fields::DimensionTokenField::TypeFlag,
                    ));
                    <NumberType as VisitWithAstPath<V>>::visit_with_ast_path(
                        type_flag,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::DimensionToken(
                        self,
                        self::fields::DimensionTokenField::RawUnit,
                    ));
                    <swc_atoms::Atom as VisitWithAstPath<V>>::visit_with_ast_path(
                        raw_unit,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for DocumentPrelude {
    #[doc = "Calls [VisitAstPath`::visit_document_prelude`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_document_prelude(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            DocumentPrelude {
                span,
                matching_functions,
            } => {
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::DocumentPrelude(
                        self,
                        self::fields::DocumentPreludeField::Span,
                    ));
                    <swc_common::Span as VisitWithAstPath<V>>::visit_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::DocumentPrelude(
                        self,
                        self::fields::DocumentPreludeField::MatchingFunctions(usize::MAX),
                    ));
                    < Vec < DocumentPreludeMatchingFunction > as VisitWithAstPath < V > > :: visit_with_ast_path (matching_functions , visitor , & mut * __ast_path)
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for DocumentPreludeMatchingFunction {
    #[doc = "Calls [VisitAstPath`::visit_document_prelude_matching_function`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_document_prelude_matching_function(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            DocumentPreludeMatchingFunction::Url { 0: _field_0 } => {
                let mut __ast_path =
                    __ast_path.with_guard(AstParentNodeRef::DocumentPreludeMatchingFunction(
                        self,
                        self::fields::DocumentPreludeMatchingFunctionField::Url,
                    ));
                <Url as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            DocumentPreludeMatchingFunction::Function { 0: _field_0 } => {
                let mut __ast_path =
                    __ast_path.with_guard(AstParentNodeRef::DocumentPreludeMatchingFunction(
                        self,
                        self::fields::DocumentPreludeMatchingFunctionField::Function,
                    ));
                <Function as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for ExtensionName {
    #[doc = "Calls [VisitAstPath`::visit_extension_name`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_extension_name(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            ExtensionName { span, value, raw } => {
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::ExtensionName(
                        self,
                        self::fields::ExtensionNameField::Span,
                    ));
                    <swc_common::Span as VisitWithAstPath<V>>::visit_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::ExtensionName(
                        self,
                        self::fields::ExtensionNameField::Value,
                    ));
                    <swc_atoms::Atom as VisitWithAstPath<V>>::visit_with_ast_path(
                        value,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::ExtensionName(
                        self,
                        self::fields::ExtensionNameField::Raw,
                    ));
                    <Option<swc_atoms::Atom> as VisitWithAstPath<V>>::visit_with_ast_path(
                        raw,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for FamilyName {
    #[doc = "Calls [VisitAstPath`::visit_family_name`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_family_name(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            FamilyName::Str { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::FamilyName(
                    self,
                    self::fields::FamilyNameField::Str,
                ));
                <Str as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            FamilyName::SequenceOfCustomIdents { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::FamilyName(
                    self,
                    self::fields::FamilyNameField::SequenceOfCustomIdents,
                ));
                <SequenceOfCustomIdents as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for Flex {
    #[doc = "Calls [VisitAstPath`::visit_flex`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_flex(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            Flex { span, value, unit } => {
                {
                    let mut __ast_path = __ast_path
                        .with_guard(AstParentNodeRef::Flex(self, self::fields::FlexField::Span));
                    <swc_common::Span as VisitWithAstPath<V>>::visit_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path
                        .with_guard(AstParentNodeRef::Flex(self, self::fields::FlexField::Value));
                    <Number as VisitWithAstPath<V>>::visit_with_ast_path(
                        value,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path
                        .with_guard(AstParentNodeRef::Flex(self, self::fields::FlexField::Unit));
                    <Ident as VisitWithAstPath<V>>::visit_with_ast_path(
                        unit,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for FontFeatureValuesPrelude {
    #[doc = "Calls [VisitAstPath`::visit_font_feature_values_prelude`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_font_feature_values_prelude(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            FontFeatureValuesPrelude { span, font_family } => {
                {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentNodeRef::FontFeatureValuesPrelude(
                            self,
                            self::fields::FontFeatureValuesPreludeField::Span,
                        ));
                    <swc_common::Span as VisitWithAstPath<V>>::visit_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentNodeRef::FontFeatureValuesPrelude(
                            self,
                            self::fields::FontFeatureValuesPreludeField::FontFamily(usize::MAX),
                        ));
                    <Vec<FamilyName> as VisitWithAstPath<V>>::visit_with_ast_path(
                        font_family,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for ForgivingComplexSelector {
    #[doc = "Calls [VisitAstPath`::visit_forgiving_complex_selector`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_forgiving_complex_selector(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            ForgivingComplexSelector::ComplexSelector { 0: _field_0 } => {
                let mut __ast_path =
                    __ast_path.with_guard(AstParentNodeRef::ForgivingComplexSelector(
                        self,
                        self::fields::ForgivingComplexSelectorField::ComplexSelector,
                    ));
                <ComplexSelector as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            ForgivingComplexSelector::ListOfComponentValues { 0: _field_0 } => {
                let mut __ast_path =
                    __ast_path.with_guard(AstParentNodeRef::ForgivingComplexSelector(
                        self,
                        self::fields::ForgivingComplexSelectorField::ListOfComponentValues,
                    ));
                <ListOfComponentValues as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for ForgivingRelativeSelector {
    #[doc = "Calls [VisitAstPath`::visit_forgiving_relative_selector`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_forgiving_relative_selector(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            ForgivingRelativeSelector::RelativeSelector { 0: _field_0 } => {
                let mut __ast_path =
                    __ast_path.with_guard(AstParentNodeRef::ForgivingRelativeSelector(
                        self,
                        self::fields::ForgivingRelativeSelectorField::RelativeSelector,
                    ));
                <RelativeSelector as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            ForgivingRelativeSelector::ListOfComponentValues { 0: _field_0 } => {
                let mut __ast_path =
                    __ast_path.with_guard(AstParentNodeRef::ForgivingRelativeSelector(
                        self,
                        self::fields::ForgivingRelativeSelectorField::ListOfComponentValues,
                    ));
                <ListOfComponentValues as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for ForgivingRelativeSelectorList {
    #[doc = "Calls [VisitAstPath`::visit_forgiving_relative_selector_list`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_forgiving_relative_selector_list(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            ForgivingRelativeSelectorList { span, children } => {
                {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentNodeRef::ForgivingRelativeSelectorList(
                            self,
                            self::fields::ForgivingRelativeSelectorListField::Span,
                        ));
                    <swc_common::Span as VisitWithAstPath<V>>::visit_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentNodeRef::ForgivingRelativeSelectorList(
                            self,
                            self::fields::ForgivingRelativeSelectorListField::Children(usize::MAX),
                        ));
                    <Vec<ForgivingRelativeSelector> as VisitWithAstPath<V>>::visit_with_ast_path(
                        children,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for ForgivingSelectorList {
    #[doc = "Calls [VisitAstPath`::visit_forgiving_selector_list`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_forgiving_selector_list(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            ForgivingSelectorList { span, children } => {
                {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentNodeRef::ForgivingSelectorList(
                            self,
                            self::fields::ForgivingSelectorListField::Span,
                        ));
                    <swc_common::Span as VisitWithAstPath<V>>::visit_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentNodeRef::ForgivingSelectorList(
                            self,
                            self::fields::ForgivingSelectorListField::Children(usize::MAX),
                        ));
                    <Vec<ForgivingComplexSelector> as VisitWithAstPath<V>>::visit_with_ast_path(
                        children,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for Frequency {
    #[doc = "Calls [VisitAstPath`::visit_frequency`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_frequency(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            Frequency { span, value, unit } => {
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::Frequency(
                        self,
                        self::fields::FrequencyField::Span,
                    ));
                    <swc_common::Span as VisitWithAstPath<V>>::visit_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::Frequency(
                        self,
                        self::fields::FrequencyField::Value,
                    ));
                    <Number as VisitWithAstPath<V>>::visit_with_ast_path(
                        value,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::Frequency(
                        self,
                        self::fields::FrequencyField::Unit,
                    ));
                    <Ident as VisitWithAstPath<V>>::visit_with_ast_path(
                        unit,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for FrequencyPercentage {
    #[doc = "Calls [VisitAstPath`::visit_frequency_percentage`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_frequency_percentage(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            FrequencyPercentage::Frequency { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::FrequencyPercentage(
                    self,
                    self::fields::FrequencyPercentageField::Frequency,
                ));
                <Frequency as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            FrequencyPercentage::Percentage { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::FrequencyPercentage(
                    self,
                    self::fields::FrequencyPercentageField::Percentage,
                ));
                <Percentage as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for Function {
    #[doc = "Calls [VisitAstPath`::visit_function`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_function(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            Function { span, name, value } => {
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::Function(
                        self,
                        self::fields::FunctionField::Span,
                    ));
                    <swc_common::Span as VisitWithAstPath<V>>::visit_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::Function(
                        self,
                        self::fields::FunctionField::Name,
                    ));
                    <FunctionName as VisitWithAstPath<V>>::visit_with_ast_path(
                        name,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::Function(
                        self,
                        self::fields::FunctionField::Value(usize::MAX),
                    ));
                    <Vec<ComponentValue> as VisitWithAstPath<V>>::visit_with_ast_path(
                        value,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for FunctionName {
    #[doc = "Calls [VisitAstPath`::visit_function_name`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_function_name(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            FunctionName::Ident { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::FunctionName(
                    self,
                    self::fields::FunctionNameField::Ident,
                ));
                <Ident as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            FunctionName::DashedIdent { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::FunctionName(
                    self,
                    self::fields::FunctionNameField::DashedIdent,
                ));
                <DashedIdent as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for GeneralEnclosed {
    #[doc = "Calls [VisitAstPath`::visit_general_enclosed`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_general_enclosed(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            GeneralEnclosed::Function { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::GeneralEnclosed(
                    self,
                    self::fields::GeneralEnclosedField::Function,
                ));
                <Function as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            GeneralEnclosed::SimpleBlock { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::GeneralEnclosed(
                    self,
                    self::fields::GeneralEnclosedField::SimpleBlock,
                ));
                <SimpleBlock as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for HexColor {
    #[doc = "Calls [VisitAstPath`::visit_hex_color`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_hex_color(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            HexColor { span, value, raw } => {
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::HexColor(
                        self,
                        self::fields::HexColorField::Span,
                    ));
                    <swc_common::Span as VisitWithAstPath<V>>::visit_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::HexColor(
                        self,
                        self::fields::HexColorField::Value,
                    ));
                    <swc_atoms::Atom as VisitWithAstPath<V>>::visit_with_ast_path(
                        value,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::HexColor(
                        self,
                        self::fields::HexColorField::Raw,
                    ));
                    <Option<swc_atoms::Atom> as VisitWithAstPath<V>>::visit_with_ast_path(
                        raw,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for Hue {
    #[doc = "Calls [VisitAstPath`::visit_hue`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_hue(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            Hue::Number { 0: _field_0 } => {
                let mut __ast_path = __ast_path
                    .with_guard(AstParentNodeRef::Hue(self, self::fields::HueField::Number));
                <Number as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            Hue::Angle { 0: _field_0 } => {
                let mut __ast_path = __ast_path
                    .with_guard(AstParentNodeRef::Hue(self, self::fields::HueField::Angle));
                <Angle as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for IdSelector {
    #[doc = "Calls [VisitAstPath`::visit_id_selector`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_id_selector(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            IdSelector { span, text } => {
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::IdSelector(
                        self,
                        self::fields::IdSelectorField::Span,
                    ));
                    <swc_common::Span as VisitWithAstPath<V>>::visit_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::IdSelector(
                        self,
                        self::fields::IdSelectorField::Text,
                    ));
                    <Ident as VisitWithAstPath<V>>::visit_with_ast_path(
                        text,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for Ident {
    #[doc = "Calls [VisitAstPath`::visit_ident`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_ident(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            Ident { span, value, raw } => {
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::Ident(
                        self,
                        self::fields::IdentField::Span,
                    ));
                    <swc_common::Span as VisitWithAstPath<V>>::visit_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::Ident(
                        self,
                        self::fields::IdentField::Value,
                    ));
                    <swc_atoms::Atom as VisitWithAstPath<V>>::visit_with_ast_path(
                        value,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path
                        .with_guard(AstParentNodeRef::Ident(self, self::fields::IdentField::Raw));
                    <Option<swc_atoms::Atom> as VisitWithAstPath<V>>::visit_with_ast_path(
                        raw,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for ImportConditions {
    #[doc = "Calls [VisitAstPath`::visit_import_conditions`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_import_conditions(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            ImportConditions {
                span,
                supports,
                media,
            } => {
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::ImportConditions(
                        self,
                        self::fields::ImportConditionsField::Span,
                    ));
                    <swc_common::Span as VisitWithAstPath<V>>::visit_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::ImportConditions(
                        self,
                        self::fields::ImportConditionsField::Supports,
                    ));
                    <Option<Box<Function>> as VisitWithAstPath<V>>::visit_with_ast_path(
                        supports,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::ImportConditions(
                        self,
                        self::fields::ImportConditionsField::Media,
                    ));
                    <Option<Box<MediaQueryList>> as VisitWithAstPath<V>>::visit_with_ast_path(
                        media,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for ImportHref {
    #[doc = "Calls [VisitAstPath`::visit_import_href`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_import_href(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            ImportHref::Url { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::ImportHref(
                    self,
                    self::fields::ImportHrefField::Url,
                ));
                <Url as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            ImportHref::Str { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::ImportHref(
                    self,
                    self::fields::ImportHrefField::Str,
                ));
                <Str as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for ImportLayerName {
    #[doc = "Calls [VisitAstPath`::visit_import_layer_name`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_import_layer_name(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            ImportLayerName::Ident { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::ImportLayerName(
                    self,
                    self::fields::ImportLayerNameField::Ident,
                ));
                <Ident as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            ImportLayerName::Function { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::ImportLayerName(
                    self,
                    self::fields::ImportLayerNameField::Function,
                ));
                <Function as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for ImportPrelude {
    #[doc = "Calls [VisitAstPath`::visit_import_prelude`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_import_prelude(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            ImportPrelude {
                span,
                href,
                layer_name,
                import_conditions,
            } => {
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::ImportPrelude(
                        self,
                        self::fields::ImportPreludeField::Span,
                    ));
                    <swc_common::Span as VisitWithAstPath<V>>::visit_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::ImportPrelude(
                        self,
                        self::fields::ImportPreludeField::Href,
                    ));
                    <Box<ImportHref> as VisitWithAstPath<V>>::visit_with_ast_path(
                        href,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::ImportPrelude(
                        self,
                        self::fields::ImportPreludeField::LayerName,
                    ));
                    <Option<Box<ImportLayerName>> as VisitWithAstPath<V>>::visit_with_ast_path(
                        layer_name,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::ImportPrelude(
                        self,
                        self::fields::ImportPreludeField::ImportConditions,
                    ));
                    <Option<Box<ImportConditions>> as VisitWithAstPath<V>>::visit_with_ast_path(
                        import_conditions,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for ImportantFlag {
    #[doc = "Calls [VisitAstPath`::visit_important_flag`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_important_flag(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            ImportantFlag { span, value } => {
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::ImportantFlag(
                        self,
                        self::fields::ImportantFlagField::Span,
                    ));
                    <swc_common::Span as VisitWithAstPath<V>>::visit_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::ImportantFlag(
                        self,
                        self::fields::ImportantFlagField::Value,
                    ));
                    <Ident as VisitWithAstPath<V>>::visit_with_ast_path(
                        value,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for Integer {
    #[doc = "Calls [VisitAstPath`::visit_integer`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_integer(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            Integer { span, value, raw } => {
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::Integer(
                        self,
                        self::fields::IntegerField::Span,
                    ));
                    <swc_common::Span as VisitWithAstPath<V>>::visit_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::Integer(
                        self,
                        self::fields::IntegerField::Raw,
                    ));
                    <Option<swc_atoms::Atom> as VisitWithAstPath<V>>::visit_with_ast_path(
                        raw,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for KeyframeBlock {
    #[doc = "Calls [VisitAstPath`::visit_keyframe_block`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_keyframe_block(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            KeyframeBlock {
                span,
                prelude,
                block,
            } => {
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::KeyframeBlock(
                        self,
                        self::fields::KeyframeBlockField::Span,
                    ));
                    <swc_common::Span as VisitWithAstPath<V>>::visit_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::KeyframeBlock(
                        self,
                        self::fields::KeyframeBlockField::Prelude(usize::MAX),
                    ));
                    <Vec<KeyframeSelector> as VisitWithAstPath<V>>::visit_with_ast_path(
                        prelude,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::KeyframeBlock(
                        self,
                        self::fields::KeyframeBlockField::Block,
                    ));
                    <SimpleBlock as VisitWithAstPath<V>>::visit_with_ast_path(
                        block,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for KeyframeSelector {
    #[doc = "Calls [VisitAstPath`::visit_keyframe_selector`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_keyframe_selector(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            KeyframeSelector::Ident { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::KeyframeSelector(
                    self,
                    self::fields::KeyframeSelectorField::Ident,
                ));
                <Ident as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            KeyframeSelector::Percentage { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::KeyframeSelector(
                    self,
                    self::fields::KeyframeSelectorField::Percentage,
                ));
                <Percentage as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for KeyframesName {
    #[doc = "Calls [VisitAstPath`::visit_keyframes_name`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_keyframes_name(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            KeyframesName::CustomIdent { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::KeyframesName(
                    self,
                    self::fields::KeyframesNameField::CustomIdent,
                ));
                <Box<CustomIdent> as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            KeyframesName::Str { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::KeyframesName(
                    self,
                    self::fields::KeyframesNameField::Str,
                ));
                <Box<Str> as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            KeyframesName::PseudoPrefix { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::KeyframesName(
                    self,
                    self::fields::KeyframesNameField::PseudoPrefix,
                ));
                <Box<KeyframesPseudoPrefix> as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            KeyframesName::PseudoFunction { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::KeyframesName(
                    self,
                    self::fields::KeyframesNameField::PseudoFunction,
                ));
                <Box<KeyframesPseudoFunction> as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for KeyframesPseudoFunction {
    #[doc = "Calls [VisitAstPath`::visit_keyframes_pseudo_function`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_keyframes_pseudo_function(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            KeyframesPseudoFunction { span, pseudo, name } => {
                {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentNodeRef::KeyframesPseudoFunction(
                            self,
                            self::fields::KeyframesPseudoFunctionField::Span,
                        ));
                    <swc_common::Span as VisitWithAstPath<V>>::visit_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentNodeRef::KeyframesPseudoFunction(
                            self,
                            self::fields::KeyframesPseudoFunctionField::Pseudo,
                        ));
                    <Ident as VisitWithAstPath<V>>::visit_with_ast_path(
                        pseudo,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentNodeRef::KeyframesPseudoFunction(
                            self,
                            self::fields::KeyframesPseudoFunctionField::Name,
                        ));
                    <KeyframesName as VisitWithAstPath<V>>::visit_with_ast_path(
                        name,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for KeyframesPseudoPrefix {
    #[doc = "Calls [VisitAstPath`::visit_keyframes_pseudo_prefix`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_keyframes_pseudo_prefix(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            KeyframesPseudoPrefix { span, pseudo, name } => {
                {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentNodeRef::KeyframesPseudoPrefix(
                            self,
                            self::fields::KeyframesPseudoPrefixField::Span,
                        ));
                    <swc_common::Span as VisitWithAstPath<V>>::visit_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentNodeRef::KeyframesPseudoPrefix(
                            self,
                            self::fields::KeyframesPseudoPrefixField::Pseudo,
                        ));
                    <Ident as VisitWithAstPath<V>>::visit_with_ast_path(
                        pseudo,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentNodeRef::KeyframesPseudoPrefix(
                            self,
                            self::fields::KeyframesPseudoPrefixField::Name,
                        ));
                    <KeyframesName as VisitWithAstPath<V>>::visit_with_ast_path(
                        name,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for LayerName {
    #[doc = "Calls [VisitAstPath`::visit_layer_name`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_layer_name(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            LayerName { span, name } => {
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::LayerName(
                        self,
                        self::fields::LayerNameField::Span,
                    ));
                    <swc_common::Span as VisitWithAstPath<V>>::visit_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::LayerName(
                        self,
                        self::fields::LayerNameField::Name(usize::MAX),
                    ));
                    <Vec<Ident> as VisitWithAstPath<V>>::visit_with_ast_path(
                        name,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for LayerNameList {
    #[doc = "Calls [VisitAstPath`::visit_layer_name_list`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_layer_name_list(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            LayerNameList { span, name_list } => {
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::LayerNameList(
                        self,
                        self::fields::LayerNameListField::Span,
                    ));
                    <swc_common::Span as VisitWithAstPath<V>>::visit_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::LayerNameList(
                        self,
                        self::fields::LayerNameListField::NameList(usize::MAX),
                    ));
                    <Vec<LayerName> as VisitWithAstPath<V>>::visit_with_ast_path(
                        name_list,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for LayerPrelude {
    #[doc = "Calls [VisitAstPath`::visit_layer_prelude`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_layer_prelude(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            LayerPrelude::Name { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::LayerPrelude(
                    self,
                    self::fields::LayerPreludeField::Name,
                ));
                <LayerName as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            LayerPrelude::NameList { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::LayerPrelude(
                    self,
                    self::fields::LayerPreludeField::NameList,
                ));
                <LayerNameList as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for Length {
    #[doc = "Calls [VisitAstPath`::visit_length`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_length(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            Length { span, value, unit } => {
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::Length(
                        self,
                        self::fields::LengthField::Span,
                    ));
                    <swc_common::Span as VisitWithAstPath<V>>::visit_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::Length(
                        self,
                        self::fields::LengthField::Value,
                    ));
                    <Number as VisitWithAstPath<V>>::visit_with_ast_path(
                        value,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::Length(
                        self,
                        self::fields::LengthField::Unit,
                    ));
                    <Ident as VisitWithAstPath<V>>::visit_with_ast_path(
                        unit,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for LengthPercentage {
    #[doc = "Calls [VisitAstPath`::visit_length_percentage`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_length_percentage(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            LengthPercentage::Length { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::LengthPercentage(
                    self,
                    self::fields::LengthPercentageField::Length,
                ));
                <Length as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            LengthPercentage::Percentage { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::LengthPercentage(
                    self,
                    self::fields::LengthPercentageField::Percentage,
                ));
                <Percentage as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for ListOfComponentValues {
    #[doc = "Calls [VisitAstPath`::visit_list_of_component_values`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_list_of_component_values(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            ListOfComponentValues { span, children } => {
                {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentNodeRef::ListOfComponentValues(
                            self,
                            self::fields::ListOfComponentValuesField::Span,
                        ));
                    <swc_common::Span as VisitWithAstPath<V>>::visit_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentNodeRef::ListOfComponentValues(
                            self,
                            self::fields::ListOfComponentValuesField::Children(usize::MAX),
                        ));
                    <Vec<ComponentValue> as VisitWithAstPath<V>>::visit_with_ast_path(
                        children,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for MediaAnd {
    #[doc = "Calls [VisitAstPath`::visit_media_and`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_media_and(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            MediaAnd {
                span,
                keyword,
                condition,
            } => {
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::MediaAnd(
                        self,
                        self::fields::MediaAndField::Span,
                    ));
                    <swc_common::Span as VisitWithAstPath<V>>::visit_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::MediaAnd(
                        self,
                        self::fields::MediaAndField::Keyword,
                    ));
                    <Option<Ident> as VisitWithAstPath<V>>::visit_with_ast_path(
                        keyword,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::MediaAnd(
                        self,
                        self::fields::MediaAndField::Condition,
                    ));
                    <MediaInParens as VisitWithAstPath<V>>::visit_with_ast_path(
                        condition,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for MediaCondition {
    #[doc = "Calls [VisitAstPath`::visit_media_condition`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_media_condition(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            MediaCondition { span, conditions } => {
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::MediaCondition(
                        self,
                        self::fields::MediaConditionField::Span,
                    ));
                    <swc_common::Span as VisitWithAstPath<V>>::visit_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::MediaCondition(
                        self,
                        self::fields::MediaConditionField::Conditions(usize::MAX),
                    ));
                    <Vec<MediaConditionAllType> as VisitWithAstPath<V>>::visit_with_ast_path(
                        conditions,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for MediaConditionAllType {
    #[doc = "Calls [VisitAstPath`::visit_media_condition_all_type`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_media_condition_all_type(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            MediaConditionAllType::Not { 0: _field_0 } => {
                let mut __ast_path =
                    __ast_path.with_guard(AstParentNodeRef::MediaConditionAllType(
                        self,
                        self::fields::MediaConditionAllTypeField::Not,
                    ));
                <MediaNot as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            MediaConditionAllType::And { 0: _field_0 } => {
                let mut __ast_path =
                    __ast_path.with_guard(AstParentNodeRef::MediaConditionAllType(
                        self,
                        self::fields::MediaConditionAllTypeField::And,
                    ));
                <MediaAnd as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            MediaConditionAllType::Or { 0: _field_0 } => {
                let mut __ast_path =
                    __ast_path.with_guard(AstParentNodeRef::MediaConditionAllType(
                        self,
                        self::fields::MediaConditionAllTypeField::Or,
                    ));
                <MediaOr as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            MediaConditionAllType::MediaInParens { 0: _field_0 } => {
                let mut __ast_path =
                    __ast_path.with_guard(AstParentNodeRef::MediaConditionAllType(
                        self,
                        self::fields::MediaConditionAllTypeField::MediaInParens,
                    ));
                <MediaInParens as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for MediaConditionType {
    #[doc = "Calls [VisitAstPath`::visit_media_condition_type`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_media_condition_type(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            MediaConditionType::All { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::MediaConditionType(
                    self,
                    self::fields::MediaConditionTypeField::All,
                ));
                <MediaCondition as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            MediaConditionType::WithoutOr { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::MediaConditionType(
                    self,
                    self::fields::MediaConditionTypeField::WithoutOr,
                ));
                <MediaConditionWithoutOr as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for MediaConditionWithoutOr {
    #[doc = "Calls [VisitAstPath`::visit_media_condition_without_or`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_media_condition_without_or(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            MediaConditionWithoutOr { span, conditions } => {
                {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentNodeRef::MediaConditionWithoutOr(
                            self,
                            self::fields::MediaConditionWithoutOrField::Span,
                        ));
                    <swc_common::Span as VisitWithAstPath<V>>::visit_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentNodeRef::MediaConditionWithoutOr(
                            self,
                            self::fields::MediaConditionWithoutOrField::Conditions(usize::MAX),
                        ));
                    <Vec<MediaConditionWithoutOrType> as VisitWithAstPath<V>>::visit_with_ast_path(
                        conditions,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for MediaConditionWithoutOrType {
    #[doc = "Calls [VisitAstPath`::visit_media_condition_without_or_type`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_media_condition_without_or_type(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            MediaConditionWithoutOrType::Not { 0: _field_0 } => {
                let mut __ast_path =
                    __ast_path.with_guard(AstParentNodeRef::MediaConditionWithoutOrType(
                        self,
                        self::fields::MediaConditionWithoutOrTypeField::Not,
                    ));
                <MediaNot as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            MediaConditionWithoutOrType::And { 0: _field_0 } => {
                let mut __ast_path =
                    __ast_path.with_guard(AstParentNodeRef::MediaConditionWithoutOrType(
                        self,
                        self::fields::MediaConditionWithoutOrTypeField::And,
                    ));
                <MediaAnd as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            MediaConditionWithoutOrType::MediaInParens { 0: _field_0 } => {
                let mut __ast_path =
                    __ast_path.with_guard(AstParentNodeRef::MediaConditionWithoutOrType(
                        self,
                        self::fields::MediaConditionWithoutOrTypeField::MediaInParens,
                    ));
                <MediaInParens as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for MediaFeature {
    #[doc = "Calls [VisitAstPath`::visit_media_feature`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_media_feature(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            MediaFeature::Plain { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::MediaFeature(
                    self,
                    self::fields::MediaFeatureField::Plain,
                ));
                <MediaFeaturePlain as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            MediaFeature::Boolean { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::MediaFeature(
                    self,
                    self::fields::MediaFeatureField::Boolean,
                ));
                <MediaFeatureBoolean as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            MediaFeature::Range { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::MediaFeature(
                    self,
                    self::fields::MediaFeatureField::Range,
                ));
                <MediaFeatureRange as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            MediaFeature::RangeInterval { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::MediaFeature(
                    self,
                    self::fields::MediaFeatureField::RangeInterval,
                ));
                <MediaFeatureRangeInterval as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for MediaFeatureBoolean {
    #[doc = "Calls [VisitAstPath`::visit_media_feature_boolean`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_media_feature_boolean(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            MediaFeatureBoolean { span, name } => {
                {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentNodeRef::MediaFeatureBoolean(
                            self,
                            self::fields::MediaFeatureBooleanField::Span,
                        ));
                    <swc_common::Span as VisitWithAstPath<V>>::visit_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentNodeRef::MediaFeatureBoolean(
                            self,
                            self::fields::MediaFeatureBooleanField::Name,
                        ));
                    <MediaFeatureName as VisitWithAstPath<V>>::visit_with_ast_path(
                        name,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for MediaFeatureName {
    #[doc = "Calls [VisitAstPath`::visit_media_feature_name`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_media_feature_name(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            MediaFeatureName::Ident { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::MediaFeatureName(
                    self,
                    self::fields::MediaFeatureNameField::Ident,
                ));
                <Ident as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            MediaFeatureName::ExtensionName { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::MediaFeatureName(
                    self,
                    self::fields::MediaFeatureNameField::ExtensionName,
                ));
                <ExtensionName as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for MediaFeaturePlain {
    #[doc = "Calls [VisitAstPath`::visit_media_feature_plain`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_media_feature_plain(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            MediaFeaturePlain { span, name, value } => {
                {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentNodeRef::MediaFeaturePlain(
                            self,
                            self::fields::MediaFeaturePlainField::Span,
                        ));
                    <swc_common::Span as VisitWithAstPath<V>>::visit_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentNodeRef::MediaFeaturePlain(
                            self,
                            self::fields::MediaFeaturePlainField::Name,
                        ));
                    <MediaFeatureName as VisitWithAstPath<V>>::visit_with_ast_path(
                        name,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentNodeRef::MediaFeaturePlain(
                            self,
                            self::fields::MediaFeaturePlainField::Value,
                        ));
                    <Box<MediaFeatureValue> as VisitWithAstPath<V>>::visit_with_ast_path(
                        value,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for MediaFeatureRange {
    #[doc = "Calls [VisitAstPath`::visit_media_feature_range`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_media_feature_range(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            MediaFeatureRange {
                span,
                left,
                comparison,
                right,
            } => {
                {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentNodeRef::MediaFeatureRange(
                            self,
                            self::fields::MediaFeatureRangeField::Span,
                        ));
                    <swc_common::Span as VisitWithAstPath<V>>::visit_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentNodeRef::MediaFeatureRange(
                            self,
                            self::fields::MediaFeatureRangeField::Left,
                        ));
                    <Box<MediaFeatureValue> as VisitWithAstPath<V>>::visit_with_ast_path(
                        left,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentNodeRef::MediaFeatureRange(
                            self,
                            self::fields::MediaFeatureRangeField::Comparison,
                        ));
                    <MediaFeatureRangeComparison as VisitWithAstPath<V>>::visit_with_ast_path(
                        comparison,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentNodeRef::MediaFeatureRange(
                            self,
                            self::fields::MediaFeatureRangeField::Right,
                        ));
                    <Box<MediaFeatureValue> as VisitWithAstPath<V>>::visit_with_ast_path(
                        right,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for MediaFeatureRangeComparison {
    #[doc = "Calls [VisitAstPath`::visit_media_feature_range_comparison`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_media_feature_range_comparison(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            MediaFeatureRangeComparison::Lt => {}
            MediaFeatureRangeComparison::Le => {}
            MediaFeatureRangeComparison::Gt => {}
            MediaFeatureRangeComparison::Ge => {}
            MediaFeatureRangeComparison::Eq => {}
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for MediaFeatureRangeInterval {
    #[doc = "Calls [VisitAstPath`::visit_media_feature_range_interval`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_media_feature_range_interval(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            MediaFeatureRangeInterval {
                span,
                left,
                left_comparison,
                name,
                right_comparison,
                right,
            } => {
                {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentNodeRef::MediaFeatureRangeInterval(
                            self,
                            self::fields::MediaFeatureRangeIntervalField::Span,
                        ));
                    <swc_common::Span as VisitWithAstPath<V>>::visit_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentNodeRef::MediaFeatureRangeInterval(
                            self,
                            self::fields::MediaFeatureRangeIntervalField::Left,
                        ));
                    <Box<MediaFeatureValue> as VisitWithAstPath<V>>::visit_with_ast_path(
                        left,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentNodeRef::MediaFeatureRangeInterval(
                            self,
                            self::fields::MediaFeatureRangeIntervalField::LeftComparison,
                        ));
                    <MediaFeatureRangeComparison as VisitWithAstPath<V>>::visit_with_ast_path(
                        left_comparison,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentNodeRef::MediaFeatureRangeInterval(
                            self,
                            self::fields::MediaFeatureRangeIntervalField::Name,
                        ));
                    <MediaFeatureName as VisitWithAstPath<V>>::visit_with_ast_path(
                        name,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentNodeRef::MediaFeatureRangeInterval(
                            self,
                            self::fields::MediaFeatureRangeIntervalField::RightComparison,
                        ));
                    <MediaFeatureRangeComparison as VisitWithAstPath<V>>::visit_with_ast_path(
                        right_comparison,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentNodeRef::MediaFeatureRangeInterval(
                            self,
                            self::fields::MediaFeatureRangeIntervalField::Right,
                        ));
                    <Box<MediaFeatureValue> as VisitWithAstPath<V>>::visit_with_ast_path(
                        right,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for MediaFeatureValue {
    #[doc = "Calls [VisitAstPath`::visit_media_feature_value`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_media_feature_value(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            MediaFeatureValue::Number { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::MediaFeatureValue(
                    self,
                    self::fields::MediaFeatureValueField::Number,
                ));
                <Number as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            MediaFeatureValue::Dimension { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::MediaFeatureValue(
                    self,
                    self::fields::MediaFeatureValueField::Dimension,
                ));
                <Dimension as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            MediaFeatureValue::Ident { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::MediaFeatureValue(
                    self,
                    self::fields::MediaFeatureValueField::Ident,
                ));
                <Ident as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            MediaFeatureValue::Ratio { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::MediaFeatureValue(
                    self,
                    self::fields::MediaFeatureValueField::Ratio,
                ));
                <Ratio as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            MediaFeatureValue::Function { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::MediaFeatureValue(
                    self,
                    self::fields::MediaFeatureValueField::Function,
                ));
                <Function as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for MediaInParens {
    #[doc = "Calls [VisitAstPath`::visit_media_in_parens`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_media_in_parens(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            MediaInParens::MediaCondition { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::MediaInParens(
                    self,
                    self::fields::MediaInParensField::MediaCondition,
                ));
                <MediaCondition as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            MediaInParens::Feature { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::MediaInParens(
                    self,
                    self::fields::MediaInParensField::Feature,
                ));
                <Box<MediaFeature> as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            MediaInParens::GeneralEnclosed { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::MediaInParens(
                    self,
                    self::fields::MediaInParensField::GeneralEnclosed,
                ));
                <GeneralEnclosed as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for MediaNot {
    #[doc = "Calls [VisitAstPath`::visit_media_not`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_media_not(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            MediaNot {
                span,
                keyword,
                condition,
            } => {
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::MediaNot(
                        self,
                        self::fields::MediaNotField::Span,
                    ));
                    <swc_common::Span as VisitWithAstPath<V>>::visit_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::MediaNot(
                        self,
                        self::fields::MediaNotField::Keyword,
                    ));
                    <Option<Ident> as VisitWithAstPath<V>>::visit_with_ast_path(
                        keyword,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::MediaNot(
                        self,
                        self::fields::MediaNotField::Condition,
                    ));
                    <MediaInParens as VisitWithAstPath<V>>::visit_with_ast_path(
                        condition,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for MediaOr {
    #[doc = "Calls [VisitAstPath`::visit_media_or`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_media_or(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            MediaOr {
                span,
                keyword,
                condition,
            } => {
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::MediaOr(
                        self,
                        self::fields::MediaOrField::Span,
                    ));
                    <swc_common::Span as VisitWithAstPath<V>>::visit_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::MediaOr(
                        self,
                        self::fields::MediaOrField::Keyword,
                    ));
                    <Option<Ident> as VisitWithAstPath<V>>::visit_with_ast_path(
                        keyword,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::MediaOr(
                        self,
                        self::fields::MediaOrField::Condition,
                    ));
                    <MediaInParens as VisitWithAstPath<V>>::visit_with_ast_path(
                        condition,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for MediaQuery {
    #[doc = "Calls [VisitAstPath`::visit_media_query`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_media_query(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            MediaQuery {
                span,
                modifier,
                media_type,
                keyword,
                condition,
            } => {
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::MediaQuery(
                        self,
                        self::fields::MediaQueryField::Span,
                    ));
                    <swc_common::Span as VisitWithAstPath<V>>::visit_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::MediaQuery(
                        self,
                        self::fields::MediaQueryField::Modifier,
                    ));
                    <Option<Ident> as VisitWithAstPath<V>>::visit_with_ast_path(
                        modifier,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::MediaQuery(
                        self,
                        self::fields::MediaQueryField::MediaType,
                    ));
                    <Option<MediaType> as VisitWithAstPath<V>>::visit_with_ast_path(
                        media_type,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::MediaQuery(
                        self,
                        self::fields::MediaQueryField::Keyword,
                    ));
                    <Option<Ident> as VisitWithAstPath<V>>::visit_with_ast_path(
                        keyword,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::MediaQuery(
                        self,
                        self::fields::MediaQueryField::Condition,
                    ));
                    <Option<Box<MediaConditionType>> as VisitWithAstPath<V>>::visit_with_ast_path(
                        condition,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for MediaQueryList {
    #[doc = "Calls [VisitAstPath`::visit_media_query_list`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_media_query_list(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            MediaQueryList { span, queries } => {
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::MediaQueryList(
                        self,
                        self::fields::MediaQueryListField::Span,
                    ));
                    <swc_common::Span as VisitWithAstPath<V>>::visit_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::MediaQueryList(
                        self,
                        self::fields::MediaQueryListField::Queries(usize::MAX),
                    ));
                    <Vec<MediaQuery> as VisitWithAstPath<V>>::visit_with_ast_path(
                        queries,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for MediaType {
    #[doc = "Calls [VisitAstPath`::visit_media_type`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_media_type(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            MediaType::Ident { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::MediaType(
                    self,
                    self::fields::MediaTypeField::Ident,
                ));
                <Ident as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for NamedNamespace {
    #[doc = "Calls [VisitAstPath`::visit_named_namespace`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_named_namespace(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            NamedNamespace { span, name } => {
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::NamedNamespace(
                        self,
                        self::fields::NamedNamespaceField::Span,
                    ));
                    <swc_common::Span as VisitWithAstPath<V>>::visit_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::NamedNamespace(
                        self,
                        self::fields::NamedNamespaceField::Name,
                    ));
                    <Ident as VisitWithAstPath<V>>::visit_with_ast_path(
                        name,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for Namespace {
    #[doc = "Calls [VisitAstPath`::visit_namespace`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_namespace(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            Namespace::Named { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::Namespace(
                    self,
                    self::fields::NamespaceField::Named,
                ));
                <NamedNamespace as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            Namespace::Any { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::Namespace(
                    self,
                    self::fields::NamespaceField::Any,
                ));
                <AnyNamespace as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for NamespacePrefix {
    #[doc = "Calls [VisitAstPath`::visit_namespace_prefix`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_namespace_prefix(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            NamespacePrefix { span, namespace } => {
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::NamespacePrefix(
                        self,
                        self::fields::NamespacePrefixField::Span,
                    ));
                    <swc_common::Span as VisitWithAstPath<V>>::visit_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::NamespacePrefix(
                        self,
                        self::fields::NamespacePrefixField::Namespace,
                    ));
                    <Option<Namespace> as VisitWithAstPath<V>>::visit_with_ast_path(
                        namespace,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for NamespacePrelude {
    #[doc = "Calls [VisitAstPath`::visit_namespace_prelude`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_namespace_prelude(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            NamespacePrelude { span, prefix, uri } => {
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::NamespacePrelude(
                        self,
                        self::fields::NamespacePreludeField::Span,
                    ));
                    <swc_common::Span as VisitWithAstPath<V>>::visit_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::NamespacePrelude(
                        self,
                        self::fields::NamespacePreludeField::Prefix,
                    ));
                    <Option<Ident> as VisitWithAstPath<V>>::visit_with_ast_path(
                        prefix,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::NamespacePrelude(
                        self,
                        self::fields::NamespacePreludeField::Uri,
                    ));
                    <Box<NamespacePreludeUri> as VisitWithAstPath<V>>::visit_with_ast_path(
                        uri,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for NamespacePreludeUri {
    #[doc = "Calls [VisitAstPath`::visit_namespace_prelude_uri`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_namespace_prelude_uri(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            NamespacePreludeUri::Url { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::NamespacePreludeUri(
                    self,
                    self::fields::NamespacePreludeUriField::Url,
                ));
                <Url as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            NamespacePreludeUri::Str { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::NamespacePreludeUri(
                    self,
                    self::fields::NamespacePreludeUriField::Str,
                ));
                <Str as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for NestingSelector {
    #[doc = "Calls [VisitAstPath`::visit_nesting_selector`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_nesting_selector(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            NestingSelector { span } => {
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::NestingSelector(
                        self,
                        self::fields::NestingSelectorField::Span,
                    ));
                    <swc_common::Span as VisitWithAstPath<V>>::visit_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for Number {
    #[doc = "Calls [VisitAstPath`::visit_number`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_number(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            Number { span, value, raw } => {
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::Number(
                        self,
                        self::fields::NumberField::Span,
                    ));
                    <swc_common::Span as VisitWithAstPath<V>>::visit_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::Number(
                        self,
                        self::fields::NumberField::Raw,
                    ));
                    <Option<swc_atoms::Atom> as VisitWithAstPath<V>>::visit_with_ast_path(
                        raw,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for NumberType {
    #[doc = "Calls [VisitAstPath`::visit_number_type`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_number_type(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            NumberType::Integer => {}
            NumberType::Number => {}
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for PageSelector {
    #[doc = "Calls [VisitAstPath`::visit_page_selector`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_page_selector(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            PageSelector {
                span,
                page_type,
                pseudos,
            } => {
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::PageSelector(
                        self,
                        self::fields::PageSelectorField::Span,
                    ));
                    <swc_common::Span as VisitWithAstPath<V>>::visit_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::PageSelector(
                        self,
                        self::fields::PageSelectorField::PageType,
                    ));
                    <Option<PageSelectorType> as VisitWithAstPath<V>>::visit_with_ast_path(
                        page_type,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::PageSelector(
                        self,
                        self::fields::PageSelectorField::Pseudos(usize::MAX),
                    ));
                    <Option<Vec<PageSelectorPseudo>> as VisitWithAstPath<V>>::visit_with_ast_path(
                        pseudos,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for PageSelectorList {
    #[doc = "Calls [VisitAstPath`::visit_page_selector_list`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_page_selector_list(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            PageSelectorList { span, selectors } => {
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::PageSelectorList(
                        self,
                        self::fields::PageSelectorListField::Span,
                    ));
                    <swc_common::Span as VisitWithAstPath<V>>::visit_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::PageSelectorList(
                        self,
                        self::fields::PageSelectorListField::Selectors(usize::MAX),
                    ));
                    <Vec<PageSelector> as VisitWithAstPath<V>>::visit_with_ast_path(
                        selectors,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for PageSelectorPseudo {
    #[doc = "Calls [VisitAstPath`::visit_page_selector_pseudo`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_page_selector_pseudo(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            PageSelectorPseudo { span, value } => {
                {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentNodeRef::PageSelectorPseudo(
                            self,
                            self::fields::PageSelectorPseudoField::Span,
                        ));
                    <swc_common::Span as VisitWithAstPath<V>>::visit_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentNodeRef::PageSelectorPseudo(
                            self,
                            self::fields::PageSelectorPseudoField::Value,
                        ));
                    <Ident as VisitWithAstPath<V>>::visit_with_ast_path(
                        value,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for PageSelectorType {
    #[doc = "Calls [VisitAstPath`::visit_page_selector_type`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_page_selector_type(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            PageSelectorType { span, value } => {
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::PageSelectorType(
                        self,
                        self::fields::PageSelectorTypeField::Span,
                    ));
                    <swc_common::Span as VisitWithAstPath<V>>::visit_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::PageSelectorType(
                        self,
                        self::fields::PageSelectorTypeField::Value,
                    ));
                    <Ident as VisitWithAstPath<V>>::visit_with_ast_path(
                        value,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for Percentage {
    #[doc = "Calls [VisitAstPath`::visit_percentage`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_percentage(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            Percentage { span, value } => {
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::Percentage(
                        self,
                        self::fields::PercentageField::Span,
                    ));
                    <swc_common::Span as VisitWithAstPath<V>>::visit_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::Percentage(
                        self,
                        self::fields::PercentageField::Value,
                    ));
                    <Number as VisitWithAstPath<V>>::visit_with_ast_path(
                        value,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for PseudoClassSelector {
    #[doc = "Calls [VisitAstPath`::visit_pseudo_class_selector`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_pseudo_class_selector(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            PseudoClassSelector {
                span,
                name,
                children,
            } => {
                {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentNodeRef::PseudoClassSelector(
                            self,
                            self::fields::PseudoClassSelectorField::Span,
                        ));
                    <swc_common::Span as VisitWithAstPath<V>>::visit_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentNodeRef::PseudoClassSelector(
                            self,
                            self::fields::PseudoClassSelectorField::Name,
                        ));
                    <Ident as VisitWithAstPath<V>>::visit_with_ast_path(
                        name,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentNodeRef::PseudoClassSelector(
                            self,
                            self::fields::PseudoClassSelectorField::Children(usize::MAX),
                        ));
                    < Option < Vec < PseudoClassSelectorChildren > > as VisitWithAstPath < V > > :: visit_with_ast_path (children , visitor , & mut * __ast_path)
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for PseudoClassSelectorChildren {
    #[doc = "Calls [VisitAstPath`::visit_pseudo_class_selector_children`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_pseudo_class_selector_children(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            PseudoClassSelectorChildren::PreservedToken { 0: _field_0 } => {
                let mut __ast_path =
                    __ast_path.with_guard(AstParentNodeRef::PseudoClassSelectorChildren(
                        self,
                        self::fields::PseudoClassSelectorChildrenField::PreservedToken,
                    ));
                <TokenAndSpan as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            PseudoClassSelectorChildren::AnPlusB { 0: _field_0 } => {
                let mut __ast_path =
                    __ast_path.with_guard(AstParentNodeRef::PseudoClassSelectorChildren(
                        self,
                        self::fields::PseudoClassSelectorChildrenField::AnPlusB,
                    ));
                <AnPlusB as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            PseudoClassSelectorChildren::Ident { 0: _field_0 } => {
                let mut __ast_path =
                    __ast_path.with_guard(AstParentNodeRef::PseudoClassSelectorChildren(
                        self,
                        self::fields::PseudoClassSelectorChildrenField::Ident,
                    ));
                <Ident as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            PseudoClassSelectorChildren::Str { 0: _field_0 } => {
                let mut __ast_path =
                    __ast_path.with_guard(AstParentNodeRef::PseudoClassSelectorChildren(
                        self,
                        self::fields::PseudoClassSelectorChildrenField::Str,
                    ));
                <Str as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            PseudoClassSelectorChildren::Delimiter { 0: _field_0 } => {
                let mut __ast_path =
                    __ast_path.with_guard(AstParentNodeRef::PseudoClassSelectorChildren(
                        self,
                        self::fields::PseudoClassSelectorChildrenField::Delimiter,
                    ));
                <Delimiter as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            PseudoClassSelectorChildren::ComplexSelector { 0: _field_0 } => {
                let mut __ast_path =
                    __ast_path.with_guard(AstParentNodeRef::PseudoClassSelectorChildren(
                        self,
                        self::fields::PseudoClassSelectorChildrenField::ComplexSelector,
                    ));
                <ComplexSelector as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            PseudoClassSelectorChildren::SelectorList { 0: _field_0 } => {
                let mut __ast_path =
                    __ast_path.with_guard(AstParentNodeRef::PseudoClassSelectorChildren(
                        self,
                        self::fields::PseudoClassSelectorChildrenField::SelectorList,
                    ));
                <SelectorList as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            PseudoClassSelectorChildren::ForgivingSelectorList { 0: _field_0 } => {
                let mut __ast_path =
                    __ast_path.with_guard(AstParentNodeRef::PseudoClassSelectorChildren(
                        self,
                        self::fields::PseudoClassSelectorChildrenField::ForgivingSelectorList,
                    ));
                <ForgivingSelectorList as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            PseudoClassSelectorChildren::CompoundSelectorList { 0: _field_0 } => {
                let mut __ast_path =
                    __ast_path.with_guard(AstParentNodeRef::PseudoClassSelectorChildren(
                        self,
                        self::fields::PseudoClassSelectorChildrenField::CompoundSelectorList,
                    ));
                <CompoundSelectorList as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            PseudoClassSelectorChildren::RelativeSelectorList { 0: _field_0 } => {
                let mut __ast_path =
                    __ast_path.with_guard(AstParentNodeRef::PseudoClassSelectorChildren(
                        self,
                        self::fields::PseudoClassSelectorChildrenField::RelativeSelectorList,
                    ));
                <RelativeSelectorList as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            PseudoClassSelectorChildren::ForgivingRelativeSelectorList { 0: _field_0 } => {
                let mut __ast_path = __ast_path
                    .with_guard(AstParentNodeRef::PseudoClassSelectorChildren(
                    self,
                    self::fields::PseudoClassSelectorChildrenField::ForgivingRelativeSelectorList,
                ));
                <ForgivingRelativeSelectorList as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            PseudoClassSelectorChildren::CompoundSelector { 0: _field_0 } => {
                let mut __ast_path =
                    __ast_path.with_guard(AstParentNodeRef::PseudoClassSelectorChildren(
                        self,
                        self::fields::PseudoClassSelectorChildrenField::CompoundSelector,
                    ));
                <CompoundSelector as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for PseudoElementSelector {
    #[doc = "Calls [VisitAstPath`::visit_pseudo_element_selector`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_pseudo_element_selector(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            PseudoElementSelector {
                span,
                name,
                children,
            } => {
                {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentNodeRef::PseudoElementSelector(
                            self,
                            self::fields::PseudoElementSelectorField::Span,
                        ));
                    <swc_common::Span as VisitWithAstPath<V>>::visit_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentNodeRef::PseudoElementSelector(
                            self,
                            self::fields::PseudoElementSelectorField::Name,
                        ));
                    <Ident as VisitWithAstPath<V>>::visit_with_ast_path(
                        name,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentNodeRef::PseudoElementSelector(
                            self,
                            self::fields::PseudoElementSelectorField::Children(usize::MAX),
                        ));
                    < Option < Vec < PseudoElementSelectorChildren > > as VisitWithAstPath < V > > :: visit_with_ast_path (children , visitor , & mut * __ast_path)
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for PseudoElementSelectorChildren {
    #[doc = "Calls [VisitAstPath`::visit_pseudo_element_selector_children`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_pseudo_element_selector_children(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            PseudoElementSelectorChildren::PreservedToken { 0: _field_0 } => {
                let mut __ast_path =
                    __ast_path.with_guard(AstParentNodeRef::PseudoElementSelectorChildren(
                        self,
                        self::fields::PseudoElementSelectorChildrenField::PreservedToken,
                    ));
                <TokenAndSpan as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            PseudoElementSelectorChildren::Ident { 0: _field_0 } => {
                let mut __ast_path =
                    __ast_path.with_guard(AstParentNodeRef::PseudoElementSelectorChildren(
                        self,
                        self::fields::PseudoElementSelectorChildrenField::Ident,
                    ));
                <Ident as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            PseudoElementSelectorChildren::CompoundSelector { 0: _field_0 } => {
                let mut __ast_path =
                    __ast_path.with_guard(AstParentNodeRef::PseudoElementSelectorChildren(
                        self,
                        self::fields::PseudoElementSelectorChildrenField::CompoundSelector,
                    ));
                <CompoundSelector as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            PseudoElementSelectorChildren::CustomHighlightName { 0: _field_0 } => {
                let mut __ast_path =
                    __ast_path.with_guard(AstParentNodeRef::PseudoElementSelectorChildren(
                        self,
                        self::fields::PseudoElementSelectorChildrenField::CustomHighlightName,
                    ));
                <CustomHighlightName as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for QualifiedRule {
    #[doc = "Calls [VisitAstPath`::visit_qualified_rule`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_qualified_rule(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            QualifiedRule {
                span,
                prelude,
                block,
            } => {
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::QualifiedRule(
                        self,
                        self::fields::QualifiedRuleField::Span,
                    ));
                    <swc_common::Span as VisitWithAstPath<V>>::visit_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::QualifiedRule(
                        self,
                        self::fields::QualifiedRuleField::Prelude,
                    ));
                    <QualifiedRulePrelude as VisitWithAstPath<V>>::visit_with_ast_path(
                        prelude,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::QualifiedRule(
                        self,
                        self::fields::QualifiedRuleField::Block,
                    ));
                    <SimpleBlock as VisitWithAstPath<V>>::visit_with_ast_path(
                        block,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for QualifiedRulePrelude {
    #[doc = "Calls [VisitAstPath`::visit_qualified_rule_prelude`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_qualified_rule_prelude(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            QualifiedRulePrelude::SelectorList { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::QualifiedRulePrelude(
                    self,
                    self::fields::QualifiedRulePreludeField::SelectorList,
                ));
                <SelectorList as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            QualifiedRulePrelude::RelativeSelectorList { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::QualifiedRulePrelude(
                    self,
                    self::fields::QualifiedRulePreludeField::RelativeSelectorList,
                ));
                <RelativeSelectorList as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            QualifiedRulePrelude::ListOfComponentValues { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::QualifiedRulePrelude(
                    self,
                    self::fields::QualifiedRulePreludeField::ListOfComponentValues,
                ));
                <ListOfComponentValues as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for QueryInParens {
    #[doc = "Calls [VisitAstPath`::visit_query_in_parens`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_query_in_parens(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            QueryInParens::ContainerQuery { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::QueryInParens(
                    self,
                    self::fields::QueryInParensField::ContainerQuery,
                ));
                <Box<ContainerQuery> as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            QueryInParens::SizeFeature { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::QueryInParens(
                    self,
                    self::fields::QueryInParensField::SizeFeature,
                ));
                <SizeFeature as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            QueryInParens::GeneralEnclosed { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::QueryInParens(
                    self,
                    self::fields::QueryInParensField::GeneralEnclosed,
                ));
                <GeneralEnclosed as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for Ratio {
    #[doc = "Calls [VisitAstPath`::visit_ratio`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_ratio(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            Ratio { span, left, right } => {
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::Ratio(
                        self,
                        self::fields::RatioField::Span,
                    ));
                    <swc_common::Span as VisitWithAstPath<V>>::visit_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::Ratio(
                        self,
                        self::fields::RatioField::Left,
                    ));
                    <Number as VisitWithAstPath<V>>::visit_with_ast_path(
                        left,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::Ratio(
                        self,
                        self::fields::RatioField::Right,
                    ));
                    <Option<Number> as VisitWithAstPath<V>>::visit_with_ast_path(
                        right,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for RelativeSelector {
    #[doc = "Calls [VisitAstPath`::visit_relative_selector`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_relative_selector(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            RelativeSelector {
                span,
                combinator,
                selector,
            } => {
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::RelativeSelector(
                        self,
                        self::fields::RelativeSelectorField::Span,
                    ));
                    <swc_common::Span as VisitWithAstPath<V>>::visit_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::RelativeSelector(
                        self,
                        self::fields::RelativeSelectorField::Combinator,
                    ));
                    <Option<Combinator> as VisitWithAstPath<V>>::visit_with_ast_path(
                        combinator,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::RelativeSelector(
                        self,
                        self::fields::RelativeSelectorField::Selector,
                    ));
                    <ComplexSelector as VisitWithAstPath<V>>::visit_with_ast_path(
                        selector,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for RelativeSelectorList {
    #[doc = "Calls [VisitAstPath`::visit_relative_selector_list`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_relative_selector_list(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            RelativeSelectorList { span, children } => {
                {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentNodeRef::RelativeSelectorList(
                            self,
                            self::fields::RelativeSelectorListField::Span,
                        ));
                    <swc_common::Span as VisitWithAstPath<V>>::visit_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentNodeRef::RelativeSelectorList(
                            self,
                            self::fields::RelativeSelectorListField::Children(usize::MAX),
                        ));
                    <Vec<RelativeSelector> as VisitWithAstPath<V>>::visit_with_ast_path(
                        children,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for Resolution {
    #[doc = "Calls [VisitAstPath`::visit_resolution`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_resolution(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            Resolution { span, value, unit } => {
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::Resolution(
                        self,
                        self::fields::ResolutionField::Span,
                    ));
                    <swc_common::Span as VisitWithAstPath<V>>::visit_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::Resolution(
                        self,
                        self::fields::ResolutionField::Value,
                    ));
                    <Number as VisitWithAstPath<V>>::visit_with_ast_path(
                        value,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::Resolution(
                        self,
                        self::fields::ResolutionField::Unit,
                    ));
                    <Ident as VisitWithAstPath<V>>::visit_with_ast_path(
                        unit,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for Rule {
    #[doc = "Calls [VisitAstPath`::visit_rule`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_rule(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            Rule::QualifiedRule { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::Rule(
                    self,
                    self::fields::RuleField::QualifiedRule,
                ));
                <Box<QualifiedRule> as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            Rule::AtRule { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::Rule(
                    self,
                    self::fields::RuleField::AtRule,
                ));
                <Box<AtRule> as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            Rule::ListOfComponentValues { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::Rule(
                    self,
                    self::fields::RuleField::ListOfComponentValues,
                ));
                <Box<ListOfComponentValues> as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for ScopeRange {
    #[doc = "Calls [VisitAstPath`::visit_scope_range`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_scope_range(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            ScopeRange {
                span,
                scope_start,
                scope_end,
            } => {
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::ScopeRange(
                        self,
                        self::fields::ScopeRangeField::Span,
                    ));
                    <swc_common::Span as VisitWithAstPath<V>>::visit_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::ScopeRange(
                        self,
                        self::fields::ScopeRangeField::ScopeStart,
                    ));
                    <Option<ForgivingSelectorList> as VisitWithAstPath<V>>::visit_with_ast_path(
                        scope_start,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::ScopeRange(
                        self,
                        self::fields::ScopeRangeField::ScopeEnd,
                    ));
                    <Option<ForgivingSelectorList> as VisitWithAstPath<V>>::visit_with_ast_path(
                        scope_end,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for SelectorList {
    #[doc = "Calls [VisitAstPath`::visit_selector_list`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_selector_list(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            SelectorList { span, children } => {
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::SelectorList(
                        self,
                        self::fields::SelectorListField::Span,
                    ));
                    <swc_common::Span as VisitWithAstPath<V>>::visit_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::SelectorList(
                        self,
                        self::fields::SelectorListField::Children(usize::MAX),
                    ));
                    <Vec<ComplexSelector> as VisitWithAstPath<V>>::visit_with_ast_path(
                        children,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for SequenceOfCustomIdents {
    #[doc = "Calls [VisitAstPath`::visit_sequence_of_custom_idents`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_sequence_of_custom_idents(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            SequenceOfCustomIdents { span, value } => {
                {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentNodeRef::SequenceOfCustomIdents(
                            self,
                            self::fields::SequenceOfCustomIdentsField::Span,
                        ));
                    <swc_common::Span as VisitWithAstPath<V>>::visit_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentNodeRef::SequenceOfCustomIdents(
                            self,
                            self::fields::SequenceOfCustomIdentsField::Value(usize::MAX),
                        ));
                    <Vec<CustomIdent> as VisitWithAstPath<V>>::visit_with_ast_path(
                        value,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for SimpleBlock {
    #[doc = "Calls [VisitAstPath`::visit_simple_block`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_simple_block(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            SimpleBlock { span, name, value } => {
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::SimpleBlock(
                        self,
                        self::fields::SimpleBlockField::Span,
                    ));
                    <swc_common::Span as VisitWithAstPath<V>>::visit_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::SimpleBlock(
                        self,
                        self::fields::SimpleBlockField::Name,
                    ));
                    <TokenAndSpan as VisitWithAstPath<V>>::visit_with_ast_path(
                        name,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::SimpleBlock(
                        self,
                        self::fields::SimpleBlockField::Value(usize::MAX),
                    ));
                    <Vec<ComponentValue> as VisitWithAstPath<V>>::visit_with_ast_path(
                        value,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for SizeFeature {
    #[doc = "Calls [VisitAstPath`::visit_size_feature`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_size_feature(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            SizeFeature::Plain { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::SizeFeature(
                    self,
                    self::fields::SizeFeatureField::Plain,
                ));
                <SizeFeaturePlain as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            SizeFeature::Boolean { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::SizeFeature(
                    self,
                    self::fields::SizeFeatureField::Boolean,
                ));
                <SizeFeatureBoolean as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            SizeFeature::Range { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::SizeFeature(
                    self,
                    self::fields::SizeFeatureField::Range,
                ));
                <SizeFeatureRange as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            SizeFeature::RangeInterval { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::SizeFeature(
                    self,
                    self::fields::SizeFeatureField::RangeInterval,
                ));
                <SizeFeatureRangeInterval as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for SizeFeatureBoolean {
    #[doc = "Calls [VisitAstPath`::visit_size_feature_boolean`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_size_feature_boolean(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            SizeFeatureBoolean { span, name } => {
                {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentNodeRef::SizeFeatureBoolean(
                            self,
                            self::fields::SizeFeatureBooleanField::Span,
                        ));
                    <swc_common::Span as VisitWithAstPath<V>>::visit_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentNodeRef::SizeFeatureBoolean(
                            self,
                            self::fields::SizeFeatureBooleanField::Name,
                        ));
                    <SizeFeatureName as VisitWithAstPath<V>>::visit_with_ast_path(
                        name,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for SizeFeatureName {
    #[doc = "Calls [VisitAstPath`::visit_size_feature_name`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_size_feature_name(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            SizeFeatureName::Ident { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::SizeFeatureName(
                    self,
                    self::fields::SizeFeatureNameField::Ident,
                ));
                <Ident as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for SizeFeaturePlain {
    #[doc = "Calls [VisitAstPath`::visit_size_feature_plain`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_size_feature_plain(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            SizeFeaturePlain { span, name, value } => {
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::SizeFeaturePlain(
                        self,
                        self::fields::SizeFeaturePlainField::Span,
                    ));
                    <swc_common::Span as VisitWithAstPath<V>>::visit_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::SizeFeaturePlain(
                        self,
                        self::fields::SizeFeaturePlainField::Name,
                    ));
                    <SizeFeatureName as VisitWithAstPath<V>>::visit_with_ast_path(
                        name,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::SizeFeaturePlain(
                        self,
                        self::fields::SizeFeaturePlainField::Value,
                    ));
                    <Box<SizeFeatureValue> as VisitWithAstPath<V>>::visit_with_ast_path(
                        value,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for SizeFeatureRange {
    #[doc = "Calls [VisitAstPath`::visit_size_feature_range`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_size_feature_range(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            SizeFeatureRange {
                span,
                left,
                comparison,
                right,
            } => {
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::SizeFeatureRange(
                        self,
                        self::fields::SizeFeatureRangeField::Span,
                    ));
                    <swc_common::Span as VisitWithAstPath<V>>::visit_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::SizeFeatureRange(
                        self,
                        self::fields::SizeFeatureRangeField::Left,
                    ));
                    <Box<SizeFeatureValue> as VisitWithAstPath<V>>::visit_with_ast_path(
                        left,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::SizeFeatureRange(
                        self,
                        self::fields::SizeFeatureRangeField::Comparison,
                    ));
                    <SizeFeatureRangeComparison as VisitWithAstPath<V>>::visit_with_ast_path(
                        comparison,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::SizeFeatureRange(
                        self,
                        self::fields::SizeFeatureRangeField::Right,
                    ));
                    <Box<SizeFeatureValue> as VisitWithAstPath<V>>::visit_with_ast_path(
                        right,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for SizeFeatureRangeComparison {
    #[doc = "Calls [VisitAstPath`::visit_size_feature_range_comparison`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_size_feature_range_comparison(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            SizeFeatureRangeComparison::Lt => {}
            SizeFeatureRangeComparison::Le => {}
            SizeFeatureRangeComparison::Gt => {}
            SizeFeatureRangeComparison::Ge => {}
            SizeFeatureRangeComparison::Eq => {}
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for SizeFeatureRangeInterval {
    #[doc = "Calls [VisitAstPath`::visit_size_feature_range_interval`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_size_feature_range_interval(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            SizeFeatureRangeInterval {
                span,
                left,
                left_comparison,
                name,
                right_comparison,
                right,
            } => {
                {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentNodeRef::SizeFeatureRangeInterval(
                            self,
                            self::fields::SizeFeatureRangeIntervalField::Span,
                        ));
                    <swc_common::Span as VisitWithAstPath<V>>::visit_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentNodeRef::SizeFeatureRangeInterval(
                            self,
                            self::fields::SizeFeatureRangeIntervalField::Left,
                        ));
                    <Box<SizeFeatureValue> as VisitWithAstPath<V>>::visit_with_ast_path(
                        left,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentNodeRef::SizeFeatureRangeInterval(
                            self,
                            self::fields::SizeFeatureRangeIntervalField::LeftComparison,
                        ));
                    <SizeFeatureRangeComparison as VisitWithAstPath<V>>::visit_with_ast_path(
                        left_comparison,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentNodeRef::SizeFeatureRangeInterval(
                            self,
                            self::fields::SizeFeatureRangeIntervalField::Name,
                        ));
                    <SizeFeatureName as VisitWithAstPath<V>>::visit_with_ast_path(
                        name,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentNodeRef::SizeFeatureRangeInterval(
                            self,
                            self::fields::SizeFeatureRangeIntervalField::RightComparison,
                        ));
                    <SizeFeatureRangeComparison as VisitWithAstPath<V>>::visit_with_ast_path(
                        right_comparison,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentNodeRef::SizeFeatureRangeInterval(
                            self,
                            self::fields::SizeFeatureRangeIntervalField::Right,
                        ));
                    <Box<SizeFeatureValue> as VisitWithAstPath<V>>::visit_with_ast_path(
                        right,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for SizeFeatureValue {
    #[doc = "Calls [VisitAstPath`::visit_size_feature_value`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_size_feature_value(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            SizeFeatureValue::Number { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::SizeFeatureValue(
                    self,
                    self::fields::SizeFeatureValueField::Number,
                ));
                <Number as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            SizeFeatureValue::Dimension { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::SizeFeatureValue(
                    self,
                    self::fields::SizeFeatureValueField::Dimension,
                ));
                <Dimension as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            SizeFeatureValue::Ident { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::SizeFeatureValue(
                    self,
                    self::fields::SizeFeatureValueField::Ident,
                ));
                <Ident as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            SizeFeatureValue::Ratio { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::SizeFeatureValue(
                    self,
                    self::fields::SizeFeatureValueField::Ratio,
                ));
                <Ratio as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            SizeFeatureValue::Function { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::SizeFeatureValue(
                    self,
                    self::fields::SizeFeatureValueField::Function,
                ));
                <Function as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for Str {
    #[doc = "Calls [VisitAstPath`::visit_str`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_str(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            Str { span, value, raw } => {
                {
                    let mut __ast_path = __ast_path
                        .with_guard(AstParentNodeRef::Str(self, self::fields::StrField::Span));
                    <swc_common::Span as VisitWithAstPath<V>>::visit_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path
                        .with_guard(AstParentNodeRef::Str(self, self::fields::StrField::Value));
                    <swc_atoms::Atom as VisitWithAstPath<V>>::visit_with_ast_path(
                        value,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path
                        .with_guard(AstParentNodeRef::Str(self, self::fields::StrField::Raw));
                    <Option<swc_atoms::Atom> as VisitWithAstPath<V>>::visit_with_ast_path(
                        raw,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for StyleBlock {
    #[doc = "Calls [VisitAstPath`::visit_style_block`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_style_block(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            StyleBlock::AtRule { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::StyleBlock(
                    self,
                    self::fields::StyleBlockField::AtRule,
                ));
                <Box<AtRule> as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            StyleBlock::Declaration { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::StyleBlock(
                    self,
                    self::fields::StyleBlockField::Declaration,
                ));
                <Box<Declaration> as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            StyleBlock::QualifiedRule { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::StyleBlock(
                    self,
                    self::fields::StyleBlockField::QualifiedRule,
                ));
                <Box<QualifiedRule> as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            StyleBlock::ListOfComponentValues { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::StyleBlock(
                    self,
                    self::fields::StyleBlockField::ListOfComponentValues,
                ));
                <Box<ListOfComponentValues> as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for Stylesheet {
    #[doc = "Calls [VisitAstPath`::visit_stylesheet`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_stylesheet(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            Stylesheet { span, rules } => {
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::Stylesheet(
                        self,
                        self::fields::StylesheetField::Span,
                    ));
                    <swc_common::Span as VisitWithAstPath<V>>::visit_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::Stylesheet(
                        self,
                        self::fields::StylesheetField::Rules(usize::MAX),
                    ));
                    <Vec<Rule> as VisitWithAstPath<V>>::visit_with_ast_path(
                        rules,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for SubclassSelector {
    #[doc = "Calls [VisitAstPath`::visit_subclass_selector`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_subclass_selector(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            SubclassSelector::Id { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::SubclassSelector(
                    self,
                    self::fields::SubclassSelectorField::Id,
                ));
                <IdSelector as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            SubclassSelector::Class { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::SubclassSelector(
                    self,
                    self::fields::SubclassSelectorField::Class,
                ));
                <ClassSelector as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            SubclassSelector::Attribute { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::SubclassSelector(
                    self,
                    self::fields::SubclassSelectorField::Attribute,
                ));
                <Box<AttributeSelector> as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            SubclassSelector::PseudoClass { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::SubclassSelector(
                    self,
                    self::fields::SubclassSelectorField::PseudoClass,
                ));
                <PseudoClassSelector as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            SubclassSelector::PseudoElement { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::SubclassSelector(
                    self,
                    self::fields::SubclassSelectorField::PseudoElement,
                ));
                <PseudoElementSelector as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for SupportsAnd {
    #[doc = "Calls [VisitAstPath`::visit_supports_and`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_supports_and(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            SupportsAnd {
                span,
                keyword,
                condition,
            } => {
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::SupportsAnd(
                        self,
                        self::fields::SupportsAndField::Span,
                    ));
                    <swc_common::Span as VisitWithAstPath<V>>::visit_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::SupportsAnd(
                        self,
                        self::fields::SupportsAndField::Keyword,
                    ));
                    <Option<Ident> as VisitWithAstPath<V>>::visit_with_ast_path(
                        keyword,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::SupportsAnd(
                        self,
                        self::fields::SupportsAndField::Condition,
                    ));
                    <Box<SupportsInParens> as VisitWithAstPath<V>>::visit_with_ast_path(
                        condition,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for SupportsCondition {
    #[doc = "Calls [VisitAstPath`::visit_supports_condition`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_supports_condition(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            SupportsCondition { span, conditions } => {
                {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentNodeRef::SupportsCondition(
                            self,
                            self::fields::SupportsConditionField::Span,
                        ));
                    <swc_common::Span as VisitWithAstPath<V>>::visit_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentNodeRef::SupportsCondition(
                            self,
                            self::fields::SupportsConditionField::Conditions(usize::MAX),
                        ));
                    <Vec<SupportsConditionType> as VisitWithAstPath<V>>::visit_with_ast_path(
                        conditions,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for SupportsConditionType {
    #[doc = "Calls [VisitAstPath`::visit_supports_condition_type`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_supports_condition_type(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            SupportsConditionType::Not { 0: _field_0 } => {
                let mut __ast_path =
                    __ast_path.with_guard(AstParentNodeRef::SupportsConditionType(
                        self,
                        self::fields::SupportsConditionTypeField::Not,
                    ));
                <SupportsNot as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            SupportsConditionType::And { 0: _field_0 } => {
                let mut __ast_path =
                    __ast_path.with_guard(AstParentNodeRef::SupportsConditionType(
                        self,
                        self::fields::SupportsConditionTypeField::And,
                    ));
                <SupportsAnd as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            SupportsConditionType::Or { 0: _field_0 } => {
                let mut __ast_path =
                    __ast_path.with_guard(AstParentNodeRef::SupportsConditionType(
                        self,
                        self::fields::SupportsConditionTypeField::Or,
                    ));
                <SupportsOr as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            SupportsConditionType::SupportsInParens { 0: _field_0 } => {
                let mut __ast_path =
                    __ast_path.with_guard(AstParentNodeRef::SupportsConditionType(
                        self,
                        self::fields::SupportsConditionTypeField::SupportsInParens,
                    ));
                <SupportsInParens as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for SupportsFeature {
    #[doc = "Calls [VisitAstPath`::visit_supports_feature`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_supports_feature(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            SupportsFeature::Declaration { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::SupportsFeature(
                    self,
                    self::fields::SupportsFeatureField::Declaration,
                ));
                <Box<Declaration> as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            SupportsFeature::Function { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::SupportsFeature(
                    self,
                    self::fields::SupportsFeatureField::Function,
                ));
                <Function as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for SupportsInParens {
    #[doc = "Calls [VisitAstPath`::visit_supports_in_parens`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_supports_in_parens(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            SupportsInParens::SupportsCondition { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::SupportsInParens(
                    self,
                    self::fields::SupportsInParensField::SupportsCondition,
                ));
                <SupportsCondition as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            SupportsInParens::Feature { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::SupportsInParens(
                    self,
                    self::fields::SupportsInParensField::Feature,
                ));
                <SupportsFeature as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            SupportsInParens::GeneralEnclosed { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::SupportsInParens(
                    self,
                    self::fields::SupportsInParensField::GeneralEnclosed,
                ));
                <GeneralEnclosed as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for SupportsNot {
    #[doc = "Calls [VisitAstPath`::visit_supports_not`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_supports_not(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            SupportsNot {
                span,
                keyword,
                condition,
            } => {
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::SupportsNot(
                        self,
                        self::fields::SupportsNotField::Span,
                    ));
                    <swc_common::Span as VisitWithAstPath<V>>::visit_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::SupportsNot(
                        self,
                        self::fields::SupportsNotField::Keyword,
                    ));
                    <Option<Ident> as VisitWithAstPath<V>>::visit_with_ast_path(
                        keyword,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::SupportsNot(
                        self,
                        self::fields::SupportsNotField::Condition,
                    ));
                    <Box<SupportsInParens> as VisitWithAstPath<V>>::visit_with_ast_path(
                        condition,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for SupportsOr {
    #[doc = "Calls [VisitAstPath`::visit_supports_or`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_supports_or(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            SupportsOr {
                span,
                keyword,
                condition,
            } => {
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::SupportsOr(
                        self,
                        self::fields::SupportsOrField::Span,
                    ));
                    <swc_common::Span as VisitWithAstPath<V>>::visit_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::SupportsOr(
                        self,
                        self::fields::SupportsOrField::Keyword,
                    ));
                    <Option<Ident> as VisitWithAstPath<V>>::visit_with_ast_path(
                        keyword,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::SupportsOr(
                        self,
                        self::fields::SupportsOrField::Condition,
                    ));
                    <Box<SupportsInParens> as VisitWithAstPath<V>>::visit_with_ast_path(
                        condition,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for TagNameSelector {
    #[doc = "Calls [VisitAstPath`::visit_tag_name_selector`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_tag_name_selector(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            TagNameSelector { span, name } => {
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::TagNameSelector(
                        self,
                        self::fields::TagNameSelectorField::Span,
                    ));
                    <swc_common::Span as VisitWithAstPath<V>>::visit_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::TagNameSelector(
                        self,
                        self::fields::TagNameSelectorField::Name,
                    ));
                    <WqName as VisitWithAstPath<V>>::visit_with_ast_path(
                        name,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for Time {
    #[doc = "Calls [VisitAstPath`::visit_time`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_time(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            Time { span, value, unit } => {
                {
                    let mut __ast_path = __ast_path
                        .with_guard(AstParentNodeRef::Time(self, self::fields::TimeField::Span));
                    <swc_common::Span as VisitWithAstPath<V>>::visit_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path
                        .with_guard(AstParentNodeRef::Time(self, self::fields::TimeField::Value));
                    <Number as VisitWithAstPath<V>>::visit_with_ast_path(
                        value,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path
                        .with_guard(AstParentNodeRef::Time(self, self::fields::TimeField::Unit));
                    <Ident as VisitWithAstPath<V>>::visit_with_ast_path(
                        unit,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for TimePercentage {
    #[doc = "Calls [VisitAstPath`::visit_time_percentage`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_time_percentage(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            TimePercentage::Time { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::TimePercentage(
                    self,
                    self::fields::TimePercentageField::Time,
                ));
                <Time as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            TimePercentage::Percentage { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::TimePercentage(
                    self,
                    self::fields::TimePercentageField::Percentage,
                ));
                <Percentage as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for Token {
    #[doc = "Calls [VisitAstPath`::visit_token`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_token(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            Token::Ident { value, raw } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::Token(
                    self,
                    self::fields::TokenField::Ident,
                ));
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::Token(
                        self,
                        self::fields::TokenField::Value,
                    ));
                    <swc_atoms::Atom as VisitWithAstPath<V>>::visit_with_ast_path(
                        value,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path
                        .with_guard(AstParentNodeRef::Token(self, self::fields::TokenField::Raw));
                    <swc_atoms::Atom as VisitWithAstPath<V>>::visit_with_ast_path(
                        raw,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
            Token::Function { value, raw } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::Token(
                    self,
                    self::fields::TokenField::Function,
                ));
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::Token(
                        self,
                        self::fields::TokenField::Value,
                    ));
                    <swc_atoms::Atom as VisitWithAstPath<V>>::visit_with_ast_path(
                        value,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path
                        .with_guard(AstParentNodeRef::Token(self, self::fields::TokenField::Raw));
                    <swc_atoms::Atom as VisitWithAstPath<V>>::visit_with_ast_path(
                        raw,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
            Token::AtKeyword { value, raw } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::Token(
                    self,
                    self::fields::TokenField::AtKeyword,
                ));
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::Token(
                        self,
                        self::fields::TokenField::Value,
                    ));
                    <swc_atoms::Atom as VisitWithAstPath<V>>::visit_with_ast_path(
                        value,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path
                        .with_guard(AstParentNodeRef::Token(self, self::fields::TokenField::Raw));
                    <swc_atoms::Atom as VisitWithAstPath<V>>::visit_with_ast_path(
                        raw,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
            Token::Hash { is_id, value, raw } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::Token(
                    self,
                    self::fields::TokenField::Hash,
                ));
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::Token(
                        self,
                        self::fields::TokenField::Value,
                    ));
                    <swc_atoms::Atom as VisitWithAstPath<V>>::visit_with_ast_path(
                        value,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path
                        .with_guard(AstParentNodeRef::Token(self, self::fields::TokenField::Raw));
                    <swc_atoms::Atom as VisitWithAstPath<V>>::visit_with_ast_path(
                        raw,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
            Token::String { value, raw } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::Token(
                    self,
                    self::fields::TokenField::String,
                ));
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::Token(
                        self,
                        self::fields::TokenField::Value,
                    ));
                    <swc_atoms::Atom as VisitWithAstPath<V>>::visit_with_ast_path(
                        value,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path
                        .with_guard(AstParentNodeRef::Token(self, self::fields::TokenField::Raw));
                    <swc_atoms::Atom as VisitWithAstPath<V>>::visit_with_ast_path(
                        raw,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
            Token::BadString { raw } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::Token(
                    self,
                    self::fields::TokenField::BadString,
                ));
                {
                    let mut __ast_path = __ast_path
                        .with_guard(AstParentNodeRef::Token(self, self::fields::TokenField::Raw));
                    <swc_atoms::Atom as VisitWithAstPath<V>>::visit_with_ast_path(
                        raw,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
            Token::Url { value, raw } => {
                let mut __ast_path = __ast_path
                    .with_guard(AstParentNodeRef::Token(self, self::fields::TokenField::Url));
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::Token(
                        self,
                        self::fields::TokenField::Value,
                    ));
                    <swc_atoms::Atom as VisitWithAstPath<V>>::visit_with_ast_path(
                        value,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path
                        .with_guard(AstParentNodeRef::Token(self, self::fields::TokenField::Raw));
                    <Box<UrlKeyValue> as VisitWithAstPath<V>>::visit_with_ast_path(
                        raw,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
            Token::BadUrl { raw } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::Token(
                    self,
                    self::fields::TokenField::BadUrl,
                ));
                {
                    let mut __ast_path = __ast_path
                        .with_guard(AstParentNodeRef::Token(self, self::fields::TokenField::Raw));
                    <swc_atoms::Atom as VisitWithAstPath<V>>::visit_with_ast_path(
                        raw,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
            Token::Delim { value } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::Token(
                    self,
                    self::fields::TokenField::Delim,
                ));
            }
            Token::Number {
                value,
                raw,
                type_flag,
            } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::Token(
                    self,
                    self::fields::TokenField::Number,
                ));
                {
                    let mut __ast_path = __ast_path
                        .with_guard(AstParentNodeRef::Token(self, self::fields::TokenField::Raw));
                    <swc_atoms::Atom as VisitWithAstPath<V>>::visit_with_ast_path(
                        raw,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::Token(
                        self,
                        self::fields::TokenField::TypeFlag,
                    ));
                    <NumberType as VisitWithAstPath<V>>::visit_with_ast_path(
                        type_flag,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
            Token::Percentage { value, raw } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::Token(
                    self,
                    self::fields::TokenField::Percentage,
                ));
                {
                    let mut __ast_path = __ast_path
                        .with_guard(AstParentNodeRef::Token(self, self::fields::TokenField::Raw));
                    <swc_atoms::Atom as VisitWithAstPath<V>>::visit_with_ast_path(
                        raw,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
            Token::Dimension { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::Token(
                    self,
                    self::fields::TokenField::Dimension,
                ));
                <Box<DimensionToken> as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            Token::WhiteSpace { value } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::Token(
                    self,
                    self::fields::TokenField::WhiteSpace,
                ));
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::Token(
                        self,
                        self::fields::TokenField::Value,
                    ));
                    <swc_atoms::Atom as VisitWithAstPath<V>>::visit_with_ast_path(
                        value,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
            Token::CDO => {}
            Token::CDC => {}
            Token::Colon => {}
            Token::Semi => {}
            Token::Comma => {}
            Token::LBracket => {}
            Token::RBracket => {}
            Token::LParen => {}
            Token::RParen => {}
            Token::LBrace => {}
            Token::RBrace => {}
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for TokenAndSpan {
    #[doc = "Calls [VisitAstPath`::visit_token_and_span`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_token_and_span(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            TokenAndSpan { span, token } => {
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::TokenAndSpan(
                        self,
                        self::fields::TokenAndSpanField::Span,
                    ));
                    <swc_common::Span as VisitWithAstPath<V>>::visit_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::TokenAndSpan(
                        self,
                        self::fields::TokenAndSpanField::Token,
                    ));
                    <Token as VisitWithAstPath<V>>::visit_with_ast_path(
                        token,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for TypeSelector {
    #[doc = "Calls [VisitAstPath`::visit_type_selector`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_type_selector(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            TypeSelector::TagName { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::TypeSelector(
                    self,
                    self::fields::TypeSelectorField::TagName,
                ));
                <TagNameSelector as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            TypeSelector::Universal { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::TypeSelector(
                    self,
                    self::fields::TypeSelectorField::Universal,
                ));
                <UniversalSelector as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for UnicodeRange {
    #[doc = "Calls [VisitAstPath`::visit_unicode_range`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_unicode_range(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            UnicodeRange {
                span,
                start,
                end,
                raw,
            } => {
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::UnicodeRange(
                        self,
                        self::fields::UnicodeRangeField::Span,
                    ));
                    <swc_common::Span as VisitWithAstPath<V>>::visit_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::UnicodeRange(
                        self,
                        self::fields::UnicodeRangeField::Start,
                    ));
                    <swc_atoms::Atom as VisitWithAstPath<V>>::visit_with_ast_path(
                        start,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::UnicodeRange(
                        self,
                        self::fields::UnicodeRangeField::End,
                    ));
                    <Option<swc_atoms::Atom> as VisitWithAstPath<V>>::visit_with_ast_path(
                        end,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::UnicodeRange(
                        self,
                        self::fields::UnicodeRangeField::Raw,
                    ));
                    <Option<swc_atoms::Atom> as VisitWithAstPath<V>>::visit_with_ast_path(
                        raw,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for UniversalSelector {
    #[doc = "Calls [VisitAstPath`::visit_universal_selector`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_universal_selector(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            UniversalSelector { span, prefix } => {
                {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentNodeRef::UniversalSelector(
                            self,
                            self::fields::UniversalSelectorField::Span,
                        ));
                    <swc_common::Span as VisitWithAstPath<V>>::visit_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentNodeRef::UniversalSelector(
                            self,
                            self::fields::UniversalSelectorField::Prefix,
                        ));
                    <Option<NamespacePrefix> as VisitWithAstPath<V>>::visit_with_ast_path(
                        prefix,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for UnknownDimension {
    #[doc = "Calls [VisitAstPath`::visit_unknown_dimension`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_unknown_dimension(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            UnknownDimension { span, value, unit } => {
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::UnknownDimension(
                        self,
                        self::fields::UnknownDimensionField::Span,
                    ));
                    <swc_common::Span as VisitWithAstPath<V>>::visit_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::UnknownDimension(
                        self,
                        self::fields::UnknownDimensionField::Value,
                    ));
                    <Number as VisitWithAstPath<V>>::visit_with_ast_path(
                        value,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::UnknownDimension(
                        self,
                        self::fields::UnknownDimensionField::Unit,
                    ));
                    <Ident as VisitWithAstPath<V>>::visit_with_ast_path(
                        unit,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for Url {
    #[doc = "Calls [VisitAstPath`::visit_url`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_url(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            Url {
                span,
                name,
                value,
                modifiers,
            } => {
                {
                    let mut __ast_path = __ast_path
                        .with_guard(AstParentNodeRef::Url(self, self::fields::UrlField::Span));
                    <swc_common::Span as VisitWithAstPath<V>>::visit_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path
                        .with_guard(AstParentNodeRef::Url(self, self::fields::UrlField::Name));
                    <Ident as VisitWithAstPath<V>>::visit_with_ast_path(
                        name,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path
                        .with_guard(AstParentNodeRef::Url(self, self::fields::UrlField::Value));
                    <Option<Box<UrlValue>> as VisitWithAstPath<V>>::visit_with_ast_path(
                        value,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::Url(
                        self,
                        self::fields::UrlField::Modifiers(usize::MAX),
                    ));
                    <Option<Vec<UrlModifier>> as VisitWithAstPath<V>>::visit_with_ast_path(
                        modifiers,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for UrlKeyValue {
    #[doc = "Calls [VisitAstPath`::visit_url_key_value`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_url_key_value(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            UrlKeyValue {
                0: _field_0,
                1: _field_1,
            } => {
                <swc_atoms::Atom as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                <swc_atoms::Atom as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_1,
                    visitor,
                    &mut *__ast_path,
                );
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for UrlModifier {
    #[doc = "Calls [VisitAstPath`::visit_url_modifier`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_url_modifier(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            UrlModifier::Ident { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::UrlModifier(
                    self,
                    self::fields::UrlModifierField::Ident,
                ));
                <Ident as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            UrlModifier::Function { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::UrlModifier(
                    self,
                    self::fields::UrlModifierField::Function,
                ));
                <Function as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for UrlValue {
    #[doc = "Calls [VisitAstPath`::visit_url_value`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_url_value(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            UrlValue::Str { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::UrlValue(
                    self,
                    self::fields::UrlValueField::Str,
                ));
                <Str as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            UrlValue::Raw { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::UrlValue(
                    self,
                    self::fields::UrlValueField::Raw,
                ));
                <UrlValueRaw as VisitWithAstPath<V>>::visit_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for UrlValueRaw {
    #[doc = "Calls [VisitAstPath`::visit_url_value_raw`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_url_value_raw(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            UrlValueRaw { span, value, raw } => {
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::UrlValueRaw(
                        self,
                        self::fields::UrlValueRawField::Span,
                    ));
                    <swc_common::Span as VisitWithAstPath<V>>::visit_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::UrlValueRaw(
                        self,
                        self::fields::UrlValueRawField::Value,
                    ));
                    <swc_atoms::Atom as VisitWithAstPath<V>>::visit_with_ast_path(
                        value,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::UrlValueRaw(
                        self,
                        self::fields::UrlValueRawField::Raw,
                    ));
                    <Option<swc_atoms::Atom> as VisitWithAstPath<V>>::visit_with_ast_path(
                        raw,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for WqName {
    #[doc = "Calls [VisitAstPath`::visit_wq_name`] with `self`."]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_wq_name(visitor, self, __ast_path)
    }

    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            WqName {
                span,
                prefix,
                value,
            } => {
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::WqName(
                        self,
                        self::fields::WqNameField::Span,
                    ));
                    <swc_common::Span as VisitWithAstPath<V>>::visit_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::WqName(
                        self,
                        self::fields::WqNameField::Prefix,
                    ));
                    <Option<NamespacePrefix> as VisitWithAstPath<V>>::visit_with_ast_path(
                        prefix,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentNodeRef::WqName(
                        self,
                        self::fields::WqNameField::Value,
                    ));
                    <Ident as VisitWithAstPath<V>>::visit_with_ast_path(
                        value,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for swc_atoms::Atom {
    #[doc = "Calls [VisitAstPath`::visit_atom`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_atom(visitor, self, __ast_path)
    }

    #[inline]
    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        {}
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for [CalcProductOrOperator] {
    #[doc = "Calls [VisitAstPath`::visit_calc_product_or_operators`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_calc_product_or_operators(visitor, self, __ast_path)
    }

    #[inline]
    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        self.iter().enumerate().for_each(|(__idx, item)| {
            let mut __ast_path = __ast_path.with_index_guard(__idx);
            <CalcProductOrOperator as VisitWithAstPath<V>>::visit_with_ast_path(
                item,
                visitor,
                &mut *__ast_path,
            )
        })
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for [CalcValueOrOperator] {
    #[doc = "Calls [VisitAstPath`::visit_calc_value_or_operators`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_calc_value_or_operators(visitor, self, __ast_path)
    }

    #[inline]
    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        self.iter().enumerate().for_each(|(__idx, item)| {
            let mut __ast_path = __ast_path.with_index_guard(__idx);
            <CalcValueOrOperator as VisitWithAstPath<V>>::visit_with_ast_path(
                item,
                visitor,
                &mut *__ast_path,
            )
        })
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for [ComplexSelectorChildren] {
    #[doc = "Calls [VisitAstPath`::visit_complex_selector_childrens`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_complex_selector_childrens(visitor, self, __ast_path)
    }

    #[inline]
    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        self.iter().enumerate().for_each(|(__idx, item)| {
            let mut __ast_path = __ast_path.with_index_guard(__idx);
            <ComplexSelectorChildren as VisitWithAstPath<V>>::visit_with_ast_path(
                item,
                visitor,
                &mut *__ast_path,
            )
        })
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for [ComplexSelector] {
    #[doc = "Calls [VisitAstPath`::visit_complex_selectors`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_complex_selectors(visitor, self, __ast_path)
    }

    #[inline]
    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        self.iter().enumerate().for_each(|(__idx, item)| {
            let mut __ast_path = __ast_path.with_index_guard(__idx);
            <ComplexSelector as VisitWithAstPath<V>>::visit_with_ast_path(
                item,
                visitor,
                &mut *__ast_path,
            )
        })
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for [ComponentValue] {
    #[doc = "Calls [VisitAstPath`::visit_component_values`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_component_values(visitor, self, __ast_path)
    }

    #[inline]
    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        self.iter().enumerate().for_each(|(__idx, item)| {
            let mut __ast_path = __ast_path.with_index_guard(__idx);
            <ComponentValue as VisitWithAstPath<V>>::visit_with_ast_path(
                item,
                visitor,
                &mut *__ast_path,
            )
        })
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for [CompoundSelector] {
    #[doc = "Calls [VisitAstPath`::visit_compound_selectors`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_compound_selectors(visitor, self, __ast_path)
    }

    #[inline]
    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        self.iter().enumerate().for_each(|(__idx, item)| {
            let mut __ast_path = __ast_path.with_index_guard(__idx);
            <CompoundSelector as VisitWithAstPath<V>>::visit_with_ast_path(
                item,
                visitor,
                &mut *__ast_path,
            )
        })
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for [ContainerQueryType] {
    #[doc = "Calls [VisitAstPath`::visit_container_query_types`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_container_query_types(visitor, self, __ast_path)
    }

    #[inline]
    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        self.iter().enumerate().for_each(|(__idx, item)| {
            let mut __ast_path = __ast_path.with_index_guard(__idx);
            <ContainerQueryType as VisitWithAstPath<V>>::visit_with_ast_path(
                item,
                visitor,
                &mut *__ast_path,
            )
        })
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for [CustomIdent] {
    #[doc = "Calls [VisitAstPath`::visit_custom_idents`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_custom_idents(visitor, self, __ast_path)
    }

    #[inline]
    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        self.iter().enumerate().for_each(|(__idx, item)| {
            let mut __ast_path = __ast_path.with_index_guard(__idx);
            <CustomIdent as VisitWithAstPath<V>>::visit_with_ast_path(
                item,
                visitor,
                &mut *__ast_path,
            )
        })
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for [DocumentPreludeMatchingFunction] {
    #[doc = "Calls [VisitAstPath`::visit_document_prelude_matching_functions`] with `self`. (Extra \
             impl)"]
    #[inline]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_document_prelude_matching_functions(visitor, self, __ast_path)
    }

    #[inline]
    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        self.iter().enumerate().for_each(|(__idx, item)| {
            let mut __ast_path = __ast_path.with_index_guard(__idx);
            <DocumentPreludeMatchingFunction as VisitWithAstPath<V>>::visit_with_ast_path(
                item,
                visitor,
                &mut *__ast_path,
            )
        })
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for [FamilyName] {
    #[doc = "Calls [VisitAstPath`::visit_family_names`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_family_names(visitor, self, __ast_path)
    }

    #[inline]
    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        self.iter().enumerate().for_each(|(__idx, item)| {
            let mut __ast_path = __ast_path.with_index_guard(__idx);
            <FamilyName as VisitWithAstPath<V>>::visit_with_ast_path(
                item,
                visitor,
                &mut *__ast_path,
            )
        })
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for [ForgivingComplexSelector] {
    #[doc = "Calls [VisitAstPath`::visit_forgiving_complex_selectors`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_forgiving_complex_selectors(visitor, self, __ast_path)
    }

    #[inline]
    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        self.iter().enumerate().for_each(|(__idx, item)| {
            let mut __ast_path = __ast_path.with_index_guard(__idx);
            <ForgivingComplexSelector as VisitWithAstPath<V>>::visit_with_ast_path(
                item,
                visitor,
                &mut *__ast_path,
            )
        })
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for [ForgivingRelativeSelector] {
    #[doc = "Calls [VisitAstPath`::visit_forgiving_relative_selectors`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_forgiving_relative_selectors(visitor, self, __ast_path)
    }

    #[inline]
    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        self.iter().enumerate().for_each(|(__idx, item)| {
            let mut __ast_path = __ast_path.with_index_guard(__idx);
            <ForgivingRelativeSelector as VisitWithAstPath<V>>::visit_with_ast_path(
                item,
                visitor,
                &mut *__ast_path,
            )
        })
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for [Ident] {
    #[doc = "Calls [VisitAstPath`::visit_idents`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_idents(visitor, self, __ast_path)
    }

    #[inline]
    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        self.iter().enumerate().for_each(|(__idx, item)| {
            let mut __ast_path = __ast_path.with_index_guard(__idx);
            <Ident as VisitWithAstPath<V>>::visit_with_ast_path(item, visitor, &mut *__ast_path)
        })
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for [KeyframeSelector] {
    #[doc = "Calls [VisitAstPath`::visit_keyframe_selectors`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_keyframe_selectors(visitor, self, __ast_path)
    }

    #[inline]
    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        self.iter().enumerate().for_each(|(__idx, item)| {
            let mut __ast_path = __ast_path.with_index_guard(__idx);
            <KeyframeSelector as VisitWithAstPath<V>>::visit_with_ast_path(
                item,
                visitor,
                &mut *__ast_path,
            )
        })
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for [LayerName] {
    #[doc = "Calls [VisitAstPath`::visit_layer_names`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_layer_names(visitor, self, __ast_path)
    }

    #[inline]
    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        self.iter().enumerate().for_each(|(__idx, item)| {
            let mut __ast_path = __ast_path.with_index_guard(__idx);
            <LayerName as VisitWithAstPath<V>>::visit_with_ast_path(item, visitor, &mut *__ast_path)
        })
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for [MediaConditionAllType] {
    #[doc = "Calls [VisitAstPath`::visit_media_condition_all_types`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_media_condition_all_types(visitor, self, __ast_path)
    }

    #[inline]
    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        self.iter().enumerate().for_each(|(__idx, item)| {
            let mut __ast_path = __ast_path.with_index_guard(__idx);
            <MediaConditionAllType as VisitWithAstPath<V>>::visit_with_ast_path(
                item,
                visitor,
                &mut *__ast_path,
            )
        })
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for [MediaConditionWithoutOrType] {
    #[doc = "Calls [VisitAstPath`::visit_media_condition_without_or_types`] with `self`. (Extra \
             impl)"]
    #[inline]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_media_condition_without_or_types(visitor, self, __ast_path)
    }

    #[inline]
    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        self.iter().enumerate().for_each(|(__idx, item)| {
            let mut __ast_path = __ast_path.with_index_guard(__idx);
            <MediaConditionWithoutOrType as VisitWithAstPath<V>>::visit_with_ast_path(
                item,
                visitor,
                &mut *__ast_path,
            )
        })
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for [MediaQuery] {
    #[doc = "Calls [VisitAstPath`::visit_media_querys`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_media_querys(visitor, self, __ast_path)
    }

    #[inline]
    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        self.iter().enumerate().for_each(|(__idx, item)| {
            let mut __ast_path = __ast_path.with_index_guard(__idx);
            <MediaQuery as VisitWithAstPath<V>>::visit_with_ast_path(
                item,
                visitor,
                &mut *__ast_path,
            )
        })
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for Option<Box<AtRulePrelude>> {
    #[doc = "Calls [VisitAstPath`::visit_opt_at_rule_prelude`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_opt_at_rule_prelude(visitor, self, __ast_path)
    }

    #[inline]
    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            Some(inner) => <Box<AtRulePrelude> as VisitWithAstPath<V>>::visit_with_ast_path(
                inner, visitor, __ast_path,
            ),
            None => {}
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for Option<swc_atoms::Atom> {
    #[doc = "Calls [VisitAstPath`::visit_opt_atom`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_opt_atom(visitor, self, __ast_path)
    }

    #[inline]
    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            Some(inner) => <swc_atoms::Atom as VisitWithAstPath<V>>::visit_with_ast_path(
                inner, visitor, __ast_path,
            ),
            None => {}
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for Option<AttributeSelectorMatcher> {
    #[doc = "Calls [VisitAstPath`::visit_opt_attribute_selector_matcher`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_opt_attribute_selector_matcher(visitor, self, __ast_path)
    }

    #[inline]
    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            Some(inner) => <AttributeSelectorMatcher as VisitWithAstPath<V>>::visit_with_ast_path(
                inner, visitor, __ast_path,
            ),
            None => {}
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for Option<AttributeSelectorModifier> {
    #[doc = "Calls [VisitAstPath`::visit_opt_attribute_selector_modifier`] with `self`. (Extra \
             impl)"]
    #[inline]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_opt_attribute_selector_modifier(visitor, self, __ast_path)
    }

    #[inline]
    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            Some(inner) => <AttributeSelectorModifier as VisitWithAstPath<V>>::visit_with_ast_path(
                inner, visitor, __ast_path,
            ),
            None => {}
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for Option<AttributeSelectorValue> {
    #[doc = "Calls [VisitAstPath`::visit_opt_attribute_selector_value`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_opt_attribute_selector_value(visitor, self, __ast_path)
    }

    #[inline]
    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            Some(inner) => <AttributeSelectorValue as VisitWithAstPath<V>>::visit_with_ast_path(
                inner, visitor, __ast_path,
            ),
            None => {}
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for Option<Combinator> {
    #[doc = "Calls [VisitAstPath`::visit_opt_combinator`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_opt_combinator(visitor, self, __ast_path)
    }

    #[inline]
    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            Some(inner) => {
                <Combinator as VisitWithAstPath<V>>::visit_with_ast_path(inner, visitor, __ast_path)
            }
            None => {}
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for Option<ContainerName> {
    #[doc = "Calls [VisitAstPath`::visit_opt_container_name`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_opt_container_name(visitor, self, __ast_path)
    }

    #[inline]
    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            Some(inner) => <ContainerName as VisitWithAstPath<V>>::visit_with_ast_path(
                inner, visitor, __ast_path,
            ),
            None => {}
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for Option<ForgivingSelectorList> {
    #[doc = "Calls [VisitAstPath`::visit_opt_forgiving_selector_list`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_opt_forgiving_selector_list(visitor, self, __ast_path)
    }

    #[inline]
    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            Some(inner) => <ForgivingSelectorList as VisitWithAstPath<V>>::visit_with_ast_path(
                inner, visitor, __ast_path,
            ),
            None => {}
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for Option<Box<Function>> {
    #[doc = "Calls [VisitAstPath`::visit_opt_function`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_opt_function(visitor, self, __ast_path)
    }

    #[inline]
    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            Some(inner) => <Box<Function> as VisitWithAstPath<V>>::visit_with_ast_path(
                inner, visitor, __ast_path,
            ),
            None => {}
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for Option<Ident> {
    #[doc = "Calls [VisitAstPath`::visit_opt_ident`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_opt_ident(visitor, self, __ast_path)
    }

    #[inline]
    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            Some(inner) => {
                <Ident as VisitWithAstPath<V>>::visit_with_ast_path(inner, visitor, __ast_path)
            }
            None => {}
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for Option<Box<ImportConditions>> {
    #[doc = "Calls [VisitAstPath`::visit_opt_import_conditions`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_opt_import_conditions(visitor, self, __ast_path)
    }

    #[inline]
    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            Some(inner) => <Box<ImportConditions> as VisitWithAstPath<V>>::visit_with_ast_path(
                inner, visitor, __ast_path,
            ),
            None => {}
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for Option<Box<ImportLayerName>> {
    #[doc = "Calls [VisitAstPath`::visit_opt_import_layer_name`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_opt_import_layer_name(visitor, self, __ast_path)
    }

    #[inline]
    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            Some(inner) => <Box<ImportLayerName> as VisitWithAstPath<V>>::visit_with_ast_path(
                inner, visitor, __ast_path,
            ),
            None => {}
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for Option<ImportantFlag> {
    #[doc = "Calls [VisitAstPath`::visit_opt_important_flag`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_opt_important_flag(visitor, self, __ast_path)
    }

    #[inline]
    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            Some(inner) => <ImportantFlag as VisitWithAstPath<V>>::visit_with_ast_path(
                inner, visitor, __ast_path,
            ),
            None => {}
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for Option<Box<MediaConditionType>> {
    #[doc = "Calls [VisitAstPath`::visit_opt_media_condition_type`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_opt_media_condition_type(visitor, self, __ast_path)
    }

    #[inline]
    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            Some(inner) => <Box<MediaConditionType> as VisitWithAstPath<V>>::visit_with_ast_path(
                inner, visitor, __ast_path,
            ),
            None => {}
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for Option<Box<MediaQueryList>> {
    #[doc = "Calls [VisitAstPath`::visit_opt_media_query_list`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_opt_media_query_list(visitor, self, __ast_path)
    }

    #[inline]
    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            Some(inner) => <Box<MediaQueryList> as VisitWithAstPath<V>>::visit_with_ast_path(
                inner, visitor, __ast_path,
            ),
            None => {}
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for Option<MediaType> {
    #[doc = "Calls [VisitAstPath`::visit_opt_media_type`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_opt_media_type(visitor, self, __ast_path)
    }

    #[inline]
    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            Some(inner) => {
                <MediaType as VisitWithAstPath<V>>::visit_with_ast_path(inner, visitor, __ast_path)
            }
            None => {}
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for Option<Namespace> {
    #[doc = "Calls [VisitAstPath`::visit_opt_namespace`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_opt_namespace(visitor, self, __ast_path)
    }

    #[inline]
    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            Some(inner) => {
                <Namespace as VisitWithAstPath<V>>::visit_with_ast_path(inner, visitor, __ast_path)
            }
            None => {}
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for Option<NamespacePrefix> {
    #[doc = "Calls [VisitAstPath`::visit_opt_namespace_prefix`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_opt_namespace_prefix(visitor, self, __ast_path)
    }

    #[inline]
    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            Some(inner) => <NamespacePrefix as VisitWithAstPath<V>>::visit_with_ast_path(
                inner, visitor, __ast_path,
            ),
            None => {}
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for Option<NestingSelector> {
    #[doc = "Calls [VisitAstPath`::visit_opt_nesting_selector`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_opt_nesting_selector(visitor, self, __ast_path)
    }

    #[inline]
    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            Some(inner) => <NestingSelector as VisitWithAstPath<V>>::visit_with_ast_path(
                inner, visitor, __ast_path,
            ),
            None => {}
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for Option<Number> {
    #[doc = "Calls [VisitAstPath`::visit_opt_number`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_opt_number(visitor, self, __ast_path)
    }

    #[inline]
    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            Some(inner) => {
                <Number as VisitWithAstPath<V>>::visit_with_ast_path(inner, visitor, __ast_path)
            }
            None => {}
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for Option<Vec<PageSelectorPseudo>> {
    #[doc = "Calls [VisitAstPath`::visit_opt_page_selector_pseudos`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_opt_page_selector_pseudos(visitor, self, __ast_path)
    }

    #[inline]
    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            Some(inner) => <Vec<PageSelectorPseudo> as VisitWithAstPath<V>>::visit_with_ast_path(
                inner, visitor, __ast_path,
            ),
            None => {}
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for Option<PageSelectorType> {
    #[doc = "Calls [VisitAstPath`::visit_opt_page_selector_type`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_opt_page_selector_type(visitor, self, __ast_path)
    }

    #[inline]
    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            Some(inner) => <PageSelectorType as VisitWithAstPath<V>>::visit_with_ast_path(
                inner, visitor, __ast_path,
            ),
            None => {}
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for Option<Vec<PseudoClassSelectorChildren>> {
    #[doc = "Calls [VisitAstPath`::visit_opt_pseudo_class_selector_childrens`] with `self`. (Extra \
             impl)"]
    #[inline]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_opt_pseudo_class_selector_childrens(visitor, self, __ast_path)
    }

    #[inline]
    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            Some(inner) => {
                <Vec<PseudoClassSelectorChildren> as VisitWithAstPath<V>>::visit_with_ast_path(
                    inner, visitor, __ast_path,
                )
            }
            None => {}
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for Option<Vec<PseudoElementSelectorChildren>> {
    #[doc = "Calls [VisitAstPath`::visit_opt_pseudo_element_selector_childrens`] with `self`. \
             (Extra impl)"]
    #[inline]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_opt_pseudo_element_selector_childrens(visitor, self, __ast_path)
    }

    #[inline]
    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            Some(inner) => {
                <Vec<PseudoElementSelectorChildren> as VisitWithAstPath<V>>::visit_with_ast_path(
                    inner, visitor, __ast_path,
                )
            }
            None => {}
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for Option<SimpleBlock> {
    #[doc = "Calls [VisitAstPath`::visit_opt_simple_block`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_opt_simple_block(visitor, self, __ast_path)
    }

    #[inline]
    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            Some(inner) => <SimpleBlock as VisitWithAstPath<V>>::visit_with_ast_path(
                inner, visitor, __ast_path,
            ),
            None => {}
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for Option<Box<TypeSelector>> {
    #[doc = "Calls [VisitAstPath`::visit_opt_type_selector`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_opt_type_selector(visitor, self, __ast_path)
    }

    #[inline]
    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            Some(inner) => <Box<TypeSelector> as VisitWithAstPath<V>>::visit_with_ast_path(
                inner, visitor, __ast_path,
            ),
            None => {}
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for Option<Vec<UrlModifier>> {
    #[doc = "Calls [VisitAstPath`::visit_opt_url_modifiers`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_opt_url_modifiers(visitor, self, __ast_path)
    }

    #[inline]
    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            Some(inner) => <Vec<UrlModifier> as VisitWithAstPath<V>>::visit_with_ast_path(
                inner, visitor, __ast_path,
            ),
            None => {}
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for Option<Box<UrlValue>> {
    #[doc = "Calls [VisitAstPath`::visit_opt_url_value`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_opt_url_value(visitor, self, __ast_path)
    }

    #[inline]
    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        match self {
            Some(inner) => <Box<UrlValue> as VisitWithAstPath<V>>::visit_with_ast_path(
                inner, visitor, __ast_path,
            ),
            None => {}
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for [PageSelectorPseudo] {
    #[doc = "Calls [VisitAstPath`::visit_page_selector_pseudos`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_page_selector_pseudos(visitor, self, __ast_path)
    }

    #[inline]
    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        self.iter().enumerate().for_each(|(__idx, item)| {
            let mut __ast_path = __ast_path.with_index_guard(__idx);
            <PageSelectorPseudo as VisitWithAstPath<V>>::visit_with_ast_path(
                item,
                visitor,
                &mut *__ast_path,
            )
        })
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for [PageSelector] {
    #[doc = "Calls [VisitAstPath`::visit_page_selectors`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_page_selectors(visitor, self, __ast_path)
    }

    #[inline]
    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        self.iter().enumerate().for_each(|(__idx, item)| {
            let mut __ast_path = __ast_path.with_index_guard(__idx);
            <PageSelector as VisitWithAstPath<V>>::visit_with_ast_path(
                item,
                visitor,
                &mut *__ast_path,
            )
        })
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for [PseudoClassSelectorChildren] {
    #[doc = "Calls [VisitAstPath`::visit_pseudo_class_selector_childrens`] with `self`. (Extra \
             impl)"]
    #[inline]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_pseudo_class_selector_childrens(visitor, self, __ast_path)
    }

    #[inline]
    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        self.iter().enumerate().for_each(|(__idx, item)| {
            let mut __ast_path = __ast_path.with_index_guard(__idx);
            <PseudoClassSelectorChildren as VisitWithAstPath<V>>::visit_with_ast_path(
                item,
                visitor,
                &mut *__ast_path,
            )
        })
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for [PseudoElementSelectorChildren] {
    #[doc = "Calls [VisitAstPath`::visit_pseudo_element_selector_childrens`] with `self`. (Extra \
             impl)"]
    #[inline]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_pseudo_element_selector_childrens(visitor, self, __ast_path)
    }

    #[inline]
    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        self.iter().enumerate().for_each(|(__idx, item)| {
            let mut __ast_path = __ast_path.with_index_guard(__idx);
            <PseudoElementSelectorChildren as VisitWithAstPath<V>>::visit_with_ast_path(
                item,
                visitor,
                &mut *__ast_path,
            )
        })
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for [RelativeSelector] {
    #[doc = "Calls [VisitAstPath`::visit_relative_selectors`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_relative_selectors(visitor, self, __ast_path)
    }

    #[inline]
    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        self.iter().enumerate().for_each(|(__idx, item)| {
            let mut __ast_path = __ast_path.with_index_guard(__idx);
            <RelativeSelector as VisitWithAstPath<V>>::visit_with_ast_path(
                item,
                visitor,
                &mut *__ast_path,
            )
        })
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for [Rule] {
    #[doc = "Calls [VisitAstPath`::visit_rules`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_rules(visitor, self, __ast_path)
    }

    #[inline]
    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        self.iter().enumerate().for_each(|(__idx, item)| {
            let mut __ast_path = __ast_path.with_index_guard(__idx);
            <Rule as VisitWithAstPath<V>>::visit_with_ast_path(item, visitor, &mut *__ast_path)
        })
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for swc_common::Span {
    #[doc = "Calls [VisitAstPath`::visit_span`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_span(visitor, self, __ast_path)
    }

    #[inline]
    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        {}
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for [SubclassSelector] {
    #[doc = "Calls [VisitAstPath`::visit_subclass_selectors`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_subclass_selectors(visitor, self, __ast_path)
    }

    #[inline]
    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        self.iter().enumerate().for_each(|(__idx, item)| {
            let mut __ast_path = __ast_path.with_index_guard(__idx);
            <SubclassSelector as VisitWithAstPath<V>>::visit_with_ast_path(
                item,
                visitor,
                &mut *__ast_path,
            )
        })
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for [SupportsConditionType] {
    #[doc = "Calls [VisitAstPath`::visit_supports_condition_types`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_supports_condition_types(visitor, self, __ast_path)
    }

    #[inline]
    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        self.iter().enumerate().for_each(|(__idx, item)| {
            let mut __ast_path = __ast_path.with_index_guard(__idx);
            <SupportsConditionType as VisitWithAstPath<V>>::visit_with_ast_path(
                item,
                visitor,
                &mut *__ast_path,
            )
        })
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitAstPath> VisitWithAstPath<V> for [UrlModifier] {
    #[doc = "Calls [VisitAstPath`::visit_url_modifiers`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        <V as VisitAstPath>::visit_url_modifiers(visitor, self, __ast_path)
    }

    #[inline]
    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        self.iter().enumerate().for_each(|(__idx, item)| {
            let mut __ast_path = __ast_path.with_index_guard(__idx);
            <UrlModifier as VisitWithAstPath<V>>::visit_with_ast_path(
                item,
                visitor,
                &mut *__ast_path,
            )
        })
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V, T> VisitWithAstPath<V> for std::boxed::Box<T>
where
    V: ?Sized + VisitAstPath,
    T: VisitWithAstPath<V>,
{
    #[inline]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        let v = <T as VisitWithAstPath<V>>::visit_with_ast_path(&**self, visitor, __ast_path);
        v
    }

    #[inline]
    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        let v =
            <T as VisitWithAstPath<V>>::visit_children_with_ast_path(&**self, visitor, __ast_path);
        v
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V, T> VisitWithAstPath<V> for std::vec::Vec<T>
where
    V: ?Sized + VisitAstPath,
    [T]: VisitWithAstPath<V>,
{
    #[inline]
    fn visit_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        let v = <[T] as VisitWithAstPath<V>>::visit_with_ast_path(self, visitor, __ast_path);
        v
    }

    #[inline]
    fn visit_children_with_ast_path<'ast: 'r, 'r>(
        &'ast self,
        visitor: &mut V,
        __ast_path: &mut AstNodePath<'r>,
    ) {
        let v =
            <[T] as VisitWithAstPath<V>>::visit_children_with_ast_path(self, visitor, __ast_path);
        v
    }
}
#[doc = r" A visitor trait for traversing the AST."]
pub trait VisitMut {
    #[doc = "Visit a node of type `AbsoluteColorBase`.\n\nBy default, this method calls \
             [`AbsoluteColorBase::visit_mut_children_with`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_mut_absolute_color_base(&mut self, node: &mut AbsoluteColorBase) {
        <AbsoluteColorBase as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `AlphaValue`.\n\nBy default, this method calls \
             [`AlphaValue::visit_mut_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_mut_alpha_value(&mut self, node: &mut AlphaValue) {
        <AlphaValue as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `AnPlusB`.\n\nBy default, this method calls \
             [`AnPlusB::visit_mut_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_mut_an_plus_b(&mut self, node: &mut AnPlusB) {
        <AnPlusB as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `AnPlusBNotation`.\n\nBy default, this method calls \
             [`AnPlusBNotation::visit_mut_children_with`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_mut_an_plus_b_notation(&mut self, node: &mut AnPlusBNotation) {
        <AnPlusBNotation as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `Angle`.\n\nBy default, this method calls \
             [`Angle::visit_mut_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_mut_angle(&mut self, node: &mut Angle) {
        <Angle as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `AnglePercentage`.\n\nBy default, this method calls \
             [`AnglePercentage::visit_mut_children_with`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_mut_angle_percentage(&mut self, node: &mut AnglePercentage) {
        <AnglePercentage as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `AnyNamespace`.\n\nBy default, this method calls \
             [`AnyNamespace::visit_mut_children_with`]. If you want to recurse, you need to call \
             it manually."]
    #[inline]
    fn visit_mut_any_namespace(&mut self, node: &mut AnyNamespace) {
        <AnyNamespace as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `AtRule`.\n\nBy default, this method calls \
             [`AtRule::visit_mut_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_mut_at_rule(&mut self, node: &mut AtRule) {
        <AtRule as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `AtRuleName`.\n\nBy default, this method calls \
             [`AtRuleName::visit_mut_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_mut_at_rule_name(&mut self, node: &mut AtRuleName) {
        <AtRuleName as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `AtRulePrelude`.\n\nBy default, this method calls \
             [`AtRulePrelude::visit_mut_children_with`]. If you want to recurse, you need to call \
             it manually."]
    #[inline]
    fn visit_mut_at_rule_prelude(&mut self, node: &mut AtRulePrelude) {
        <AtRulePrelude as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `swc_atoms :: Atom`.\n\nBy default, this method calls \
             [`swc_atoms :: Atom::visit_mut_children_with`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_mut_atom(&mut self, node: &mut swc_atoms::Atom) {
        <swc_atoms::Atom as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `AttributeSelector`.\n\nBy default, this method calls \
             [`AttributeSelector::visit_mut_children_with`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_mut_attribute_selector(&mut self, node: &mut AttributeSelector) {
        <AttributeSelector as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `AttributeSelectorMatcher`.\n\nBy default, this method calls \
             [`AttributeSelectorMatcher::visit_mut_children_with`]. If you want to recurse, you \
             need to call it manually."]
    #[inline]
    fn visit_mut_attribute_selector_matcher(&mut self, node: &mut AttributeSelectorMatcher) {
        <AttributeSelectorMatcher as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `AttributeSelectorMatcherValue`.\n\nBy default, this method \
             calls [`AttributeSelectorMatcherValue::visit_mut_children_with`]. If you want to \
             recurse, you need to call it manually."]
    #[inline]
    fn visit_mut_attribute_selector_matcher_value(
        &mut self,
        node: &mut AttributeSelectorMatcherValue,
    ) {
        <AttributeSelectorMatcherValue as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `AttributeSelectorModifier`.\n\nBy default, this method calls \
             [`AttributeSelectorModifier::visit_mut_children_with`]. If you want to recurse, you \
             need to call it manually."]
    #[inline]
    fn visit_mut_attribute_selector_modifier(&mut self, node: &mut AttributeSelectorModifier) {
        <AttributeSelectorModifier as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `AttributeSelectorValue`.\n\nBy default, this method calls \
             [`AttributeSelectorValue::visit_mut_children_with`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn visit_mut_attribute_selector_value(&mut self, node: &mut AttributeSelectorValue) {
        <AttributeSelectorValue as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `BinOp`.\n\nBy default, this method calls \
             [`BinOp::visit_mut_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_mut_bin_op(&mut self, node: &mut BinOp) {
        <BinOp as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `CalcOperator`.\n\nBy default, this method calls \
             [`CalcOperator::visit_mut_children_with`]. If you want to recurse, you need to call \
             it manually."]
    #[inline]
    fn visit_mut_calc_operator(&mut self, node: &mut CalcOperator) {
        <CalcOperator as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `CalcOperatorType`.\n\nBy default, this method calls \
             [`CalcOperatorType::visit_mut_children_with`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_mut_calc_operator_type(&mut self, node: &mut CalcOperatorType) {
        <CalcOperatorType as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `CalcProduct`.\n\nBy default, this method calls \
             [`CalcProduct::visit_mut_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_mut_calc_product(&mut self, node: &mut CalcProduct) {
        <CalcProduct as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `CalcProductOrOperator`.\n\nBy default, this method calls \
             [`CalcProductOrOperator::visit_mut_children_with`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn visit_mut_calc_product_or_operator(&mut self, node: &mut CalcProductOrOperator) {
        <CalcProductOrOperator as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `Vec < CalcProductOrOperator >`.\n\nBy default, this method \
             calls [`Vec < CalcProductOrOperator >::visit_mut_children_with`]. If you want to \
             recurse, you need to call it manually."]
    #[inline]
    fn visit_mut_calc_product_or_operators(&mut self, node: &mut Vec<CalcProductOrOperator>) {
        <Vec<CalcProductOrOperator> as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `CalcSum`.\n\nBy default, this method calls \
             [`CalcSum::visit_mut_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_mut_calc_sum(&mut self, node: &mut CalcSum) {
        <CalcSum as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `CalcValue`.\n\nBy default, this method calls \
             [`CalcValue::visit_mut_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_mut_calc_value(&mut self, node: &mut CalcValue) {
        <CalcValue as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `CalcValueOrOperator`.\n\nBy default, this method calls \
             [`CalcValueOrOperator::visit_mut_children_with`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_mut_calc_value_or_operator(&mut self, node: &mut CalcValueOrOperator) {
        <CalcValueOrOperator as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `Vec < CalcValueOrOperator >`.\n\nBy default, this method calls \
             [`Vec < CalcValueOrOperator >::visit_mut_children_with`]. If you want to recurse, you \
             need to call it manually."]
    #[inline]
    fn visit_mut_calc_value_or_operators(&mut self, node: &mut Vec<CalcValueOrOperator>) {
        <Vec<CalcValueOrOperator> as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `ClassSelector`.\n\nBy default, this method calls \
             [`ClassSelector::visit_mut_children_with`]. If you want to recurse, you need to call \
             it manually."]
    #[inline]
    fn visit_mut_class_selector(&mut self, node: &mut ClassSelector) {
        <ClassSelector as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `CmykComponent`.\n\nBy default, this method calls \
             [`CmykComponent::visit_mut_children_with`]. If you want to recurse, you need to call \
             it manually."]
    #[inline]
    fn visit_mut_cmyk_component(&mut self, node: &mut CmykComponent) {
        <CmykComponent as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `Color`.\n\nBy default, this method calls \
             [`Color::visit_mut_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_mut_color(&mut self, node: &mut Color) {
        <Color as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `ColorProfileName`.\n\nBy default, this method calls \
             [`ColorProfileName::visit_mut_children_with`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_mut_color_profile_name(&mut self, node: &mut ColorProfileName) {
        <ColorProfileName as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `Combinator`.\n\nBy default, this method calls \
             [`Combinator::visit_mut_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_mut_combinator(&mut self, node: &mut Combinator) {
        <Combinator as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `CombinatorValue`.\n\nBy default, this method calls \
             [`CombinatorValue::visit_mut_children_with`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_mut_combinator_value(&mut self, node: &mut CombinatorValue) {
        <CombinatorValue as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `ComplexSelector`.\n\nBy default, this method calls \
             [`ComplexSelector::visit_mut_children_with`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_mut_complex_selector(&mut self, node: &mut ComplexSelector) {
        <ComplexSelector as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `ComplexSelectorChildren`.\n\nBy default, this method calls \
             [`ComplexSelectorChildren::visit_mut_children_with`]. If you want to recurse, you \
             need to call it manually."]
    #[inline]
    fn visit_mut_complex_selector_children(&mut self, node: &mut ComplexSelectorChildren) {
        <ComplexSelectorChildren as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `Vec < ComplexSelectorChildren >`.\n\nBy default, this method \
             calls [`Vec < ComplexSelectorChildren >::visit_mut_children_with`]. If you want to \
             recurse, you need to call it manually."]
    #[inline]
    fn visit_mut_complex_selector_childrens(&mut self, node: &mut Vec<ComplexSelectorChildren>) {
        <Vec<ComplexSelectorChildren> as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `Vec < ComplexSelector >`.\n\nBy default, this method calls \
             [`Vec < ComplexSelector >::visit_mut_children_with`]. If you want to recurse, you \
             need to call it manually."]
    #[inline]
    fn visit_mut_complex_selectors(&mut self, node: &mut Vec<ComplexSelector>) {
        <Vec<ComplexSelector> as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `ComponentValue`.\n\nBy default, this method calls \
             [`ComponentValue::visit_mut_children_with`]. If you want to recurse, you need to call \
             it manually."]
    #[inline]
    fn visit_mut_component_value(&mut self, node: &mut ComponentValue) {
        <ComponentValue as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `Vec < ComponentValue >`.\n\nBy default, this method calls [`Vec \
             < ComponentValue >::visit_mut_children_with`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_mut_component_values(&mut self, node: &mut Vec<ComponentValue>) {
        <Vec<ComponentValue> as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `CompoundSelector`.\n\nBy default, this method calls \
             [`CompoundSelector::visit_mut_children_with`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_mut_compound_selector(&mut self, node: &mut CompoundSelector) {
        <CompoundSelector as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `CompoundSelectorList`.\n\nBy default, this method calls \
             [`CompoundSelectorList::visit_mut_children_with`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn visit_mut_compound_selector_list(&mut self, node: &mut CompoundSelectorList) {
        <CompoundSelectorList as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `Vec < CompoundSelector >`.\n\nBy default, this method calls \
             [`Vec < CompoundSelector >::visit_mut_children_with`]. If you want to recurse, you \
             need to call it manually."]
    #[inline]
    fn visit_mut_compound_selectors(&mut self, node: &mut Vec<CompoundSelector>) {
        <Vec<CompoundSelector> as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `ContainerCondition`.\n\nBy default, this method calls \
             [`ContainerCondition::visit_mut_children_with`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_mut_container_condition(&mut self, node: &mut ContainerCondition) {
        <ContainerCondition as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `ContainerName`.\n\nBy default, this method calls \
             [`ContainerName::visit_mut_children_with`]. If you want to recurse, you need to call \
             it manually."]
    #[inline]
    fn visit_mut_container_name(&mut self, node: &mut ContainerName) {
        <ContainerName as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `ContainerQuery`.\n\nBy default, this method calls \
             [`ContainerQuery::visit_mut_children_with`]. If you want to recurse, you need to call \
             it manually."]
    #[inline]
    fn visit_mut_container_query(&mut self, node: &mut ContainerQuery) {
        <ContainerQuery as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `ContainerQueryAnd`.\n\nBy default, this method calls \
             [`ContainerQueryAnd::visit_mut_children_with`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_mut_container_query_and(&mut self, node: &mut ContainerQueryAnd) {
        <ContainerQueryAnd as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `ContainerQueryNot`.\n\nBy default, this method calls \
             [`ContainerQueryNot::visit_mut_children_with`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_mut_container_query_not(&mut self, node: &mut ContainerQueryNot) {
        <ContainerQueryNot as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `ContainerQueryOr`.\n\nBy default, this method calls \
             [`ContainerQueryOr::visit_mut_children_with`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_mut_container_query_or(&mut self, node: &mut ContainerQueryOr) {
        <ContainerQueryOr as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `ContainerQueryType`.\n\nBy default, this method calls \
             [`ContainerQueryType::visit_mut_children_with`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_mut_container_query_type(&mut self, node: &mut ContainerQueryType) {
        <ContainerQueryType as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `Vec < ContainerQueryType >`.\n\nBy default, this method calls \
             [`Vec < ContainerQueryType >::visit_mut_children_with`]. If you want to recurse, you \
             need to call it manually."]
    #[inline]
    fn visit_mut_container_query_types(&mut self, node: &mut Vec<ContainerQueryType>) {
        <Vec<ContainerQueryType> as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `CustomHighlightName`.\n\nBy default, this method calls \
             [`CustomHighlightName::visit_mut_children_with`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_mut_custom_highlight_name(&mut self, node: &mut CustomHighlightName) {
        <CustomHighlightName as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `CustomIdent`.\n\nBy default, this method calls \
             [`CustomIdent::visit_mut_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_mut_custom_ident(&mut self, node: &mut CustomIdent) {
        <CustomIdent as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `Vec < CustomIdent >`.\n\nBy default, this method calls [`Vec < \
             CustomIdent >::visit_mut_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_mut_custom_idents(&mut self, node: &mut Vec<CustomIdent>) {
        <Vec<CustomIdent> as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `CustomMediaQuery`.\n\nBy default, this method calls \
             [`CustomMediaQuery::visit_mut_children_with`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_mut_custom_media_query(&mut self, node: &mut CustomMediaQuery) {
        <CustomMediaQuery as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `CustomMediaQueryMediaType`.\n\nBy default, this method calls \
             [`CustomMediaQueryMediaType::visit_mut_children_with`]. If you want to recurse, you \
             need to call it manually."]
    #[inline]
    fn visit_mut_custom_media_query_media_type(&mut self, node: &mut CustomMediaQueryMediaType) {
        <CustomMediaQueryMediaType as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `CustomPropertyName`.\n\nBy default, this method calls \
             [`CustomPropertyName::visit_mut_children_with`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_mut_custom_property_name(&mut self, node: &mut CustomPropertyName) {
        <CustomPropertyName as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `DashedIdent`.\n\nBy default, this method calls \
             [`DashedIdent::visit_mut_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_mut_dashed_ident(&mut self, node: &mut DashedIdent) {
        <DashedIdent as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `Declaration`.\n\nBy default, this method calls \
             [`Declaration::visit_mut_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_mut_declaration(&mut self, node: &mut Declaration) {
        <Declaration as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `DeclarationName`.\n\nBy default, this method calls \
             [`DeclarationName::visit_mut_children_with`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_mut_declaration_name(&mut self, node: &mut DeclarationName) {
        <DeclarationName as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `DeclarationOrAtRule`.\n\nBy default, this method calls \
             [`DeclarationOrAtRule::visit_mut_children_with`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_mut_declaration_or_at_rule(&mut self, node: &mut DeclarationOrAtRule) {
        <DeclarationOrAtRule as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `Delimiter`.\n\nBy default, this method calls \
             [`Delimiter::visit_mut_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_mut_delimiter(&mut self, node: &mut Delimiter) {
        <Delimiter as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `DelimiterValue`.\n\nBy default, this method calls \
             [`DelimiterValue::visit_mut_children_with`]. If you want to recurse, you need to call \
             it manually."]
    #[inline]
    fn visit_mut_delimiter_value(&mut self, node: &mut DelimiterValue) {
        <DelimiterValue as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `Dimension`.\n\nBy default, this method calls \
             [`Dimension::visit_mut_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_mut_dimension(&mut self, node: &mut Dimension) {
        <Dimension as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `DimensionToken`.\n\nBy default, this method calls \
             [`DimensionToken::visit_mut_children_with`]. If you want to recurse, you need to call \
             it manually."]
    #[inline]
    fn visit_mut_dimension_token(&mut self, node: &mut DimensionToken) {
        <DimensionToken as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `DocumentPrelude`.\n\nBy default, this method calls \
             [`DocumentPrelude::visit_mut_children_with`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_mut_document_prelude(&mut self, node: &mut DocumentPrelude) {
        <DocumentPrelude as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `DocumentPreludeMatchingFunction`.\n\nBy default, this method \
             calls [`DocumentPreludeMatchingFunction::visit_mut_children_with`]. If you want to \
             recurse, you need to call it manually."]
    #[inline]
    fn visit_mut_document_prelude_matching_function(
        &mut self,
        node: &mut DocumentPreludeMatchingFunction,
    ) {
        <DocumentPreludeMatchingFunction as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `Vec < DocumentPreludeMatchingFunction >`.\n\nBy default, this \
             method calls [`Vec < DocumentPreludeMatchingFunction >::visit_mut_children_with`]. If \
             you want to recurse, you need to call it manually."]
    #[inline]
    fn visit_mut_document_prelude_matching_functions(
        &mut self,
        node: &mut Vec<DocumentPreludeMatchingFunction>,
    ) {
        <Vec<DocumentPreludeMatchingFunction> as VisitMutWith<Self>>::visit_mut_children_with(
            node, self,
        )
    }
    #[doc = "Visit a node of type `ExtensionName`.\n\nBy default, this method calls \
             [`ExtensionName::visit_mut_children_with`]. If you want to recurse, you need to call \
             it manually."]
    #[inline]
    fn visit_mut_extension_name(&mut self, node: &mut ExtensionName) {
        <ExtensionName as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `FamilyName`.\n\nBy default, this method calls \
             [`FamilyName::visit_mut_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_mut_family_name(&mut self, node: &mut FamilyName) {
        <FamilyName as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `Vec < FamilyName >`.\n\nBy default, this method calls [`Vec < \
             FamilyName >::visit_mut_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_mut_family_names(&mut self, node: &mut Vec<FamilyName>) {
        <Vec<FamilyName> as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `Flex`.\n\nBy default, this method calls \
             [`Flex::visit_mut_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_mut_flex(&mut self, node: &mut Flex) {
        <Flex as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `FontFeatureValuesPrelude`.\n\nBy default, this method calls \
             [`FontFeatureValuesPrelude::visit_mut_children_with`]. If you want to recurse, you \
             need to call it manually."]
    #[inline]
    fn visit_mut_font_feature_values_prelude(&mut self, node: &mut FontFeatureValuesPrelude) {
        <FontFeatureValuesPrelude as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `ForgivingComplexSelector`.\n\nBy default, this method calls \
             [`ForgivingComplexSelector::visit_mut_children_with`]. If you want to recurse, you \
             need to call it manually."]
    #[inline]
    fn visit_mut_forgiving_complex_selector(&mut self, node: &mut ForgivingComplexSelector) {
        <ForgivingComplexSelector as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `Vec < ForgivingComplexSelector >`.\n\nBy default, this method \
             calls [`Vec < ForgivingComplexSelector >::visit_mut_children_with`]. If you want to \
             recurse, you need to call it manually."]
    #[inline]
    fn visit_mut_forgiving_complex_selectors(&mut self, node: &mut Vec<ForgivingComplexSelector>) {
        <Vec<ForgivingComplexSelector> as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `ForgivingRelativeSelector`.\n\nBy default, this method calls \
             [`ForgivingRelativeSelector::visit_mut_children_with`]. If you want to recurse, you \
             need to call it manually."]
    #[inline]
    fn visit_mut_forgiving_relative_selector(&mut self, node: &mut ForgivingRelativeSelector) {
        <ForgivingRelativeSelector as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `ForgivingRelativeSelectorList`.\n\nBy default, this method \
             calls [`ForgivingRelativeSelectorList::visit_mut_children_with`]. If you want to \
             recurse, you need to call it manually."]
    #[inline]
    fn visit_mut_forgiving_relative_selector_list(
        &mut self,
        node: &mut ForgivingRelativeSelectorList,
    ) {
        <ForgivingRelativeSelectorList as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `Vec < ForgivingRelativeSelector >`.\n\nBy default, this method \
             calls [`Vec < ForgivingRelativeSelector >::visit_mut_children_with`]. If you want to \
             recurse, you need to call it manually."]
    #[inline]
    fn visit_mut_forgiving_relative_selectors(
        &mut self,
        node: &mut Vec<ForgivingRelativeSelector>,
    ) {
        <Vec<ForgivingRelativeSelector> as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `ForgivingSelectorList`.\n\nBy default, this method calls \
             [`ForgivingSelectorList::visit_mut_children_with`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn visit_mut_forgiving_selector_list(&mut self, node: &mut ForgivingSelectorList) {
        <ForgivingSelectorList as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `Frequency`.\n\nBy default, this method calls \
             [`Frequency::visit_mut_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_mut_frequency(&mut self, node: &mut Frequency) {
        <Frequency as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `FrequencyPercentage`.\n\nBy default, this method calls \
             [`FrequencyPercentage::visit_mut_children_with`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_mut_frequency_percentage(&mut self, node: &mut FrequencyPercentage) {
        <FrequencyPercentage as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `Function`.\n\nBy default, this method calls \
             [`Function::visit_mut_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_mut_function(&mut self, node: &mut Function) {
        <Function as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `FunctionName`.\n\nBy default, this method calls \
             [`FunctionName::visit_mut_children_with`]. If you want to recurse, you need to call \
             it manually."]
    #[inline]
    fn visit_mut_function_name(&mut self, node: &mut FunctionName) {
        <FunctionName as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `GeneralEnclosed`.\n\nBy default, this method calls \
             [`GeneralEnclosed::visit_mut_children_with`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_mut_general_enclosed(&mut self, node: &mut GeneralEnclosed) {
        <GeneralEnclosed as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `HexColor`.\n\nBy default, this method calls \
             [`HexColor::visit_mut_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_mut_hex_color(&mut self, node: &mut HexColor) {
        <HexColor as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `Hue`.\n\nBy default, this method calls \
             [`Hue::visit_mut_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_mut_hue(&mut self, node: &mut Hue) {
        <Hue as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `IdSelector`.\n\nBy default, this method calls \
             [`IdSelector::visit_mut_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_mut_id_selector(&mut self, node: &mut IdSelector) {
        <IdSelector as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `Ident`.\n\nBy default, this method calls \
             [`Ident::visit_mut_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_mut_ident(&mut self, node: &mut Ident) {
        <Ident as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `Vec < Ident >`.\n\nBy default, this method calls [`Vec < Ident \
             >::visit_mut_children_with`]. If you want to recurse, you need to call it manually."]
    #[inline]
    fn visit_mut_idents(&mut self, node: &mut Vec<Ident>) {
        <Vec<Ident> as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `ImportConditions`.\n\nBy default, this method calls \
             [`ImportConditions::visit_mut_children_with`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_mut_import_conditions(&mut self, node: &mut ImportConditions) {
        <ImportConditions as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `ImportHref`.\n\nBy default, this method calls \
             [`ImportHref::visit_mut_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_mut_import_href(&mut self, node: &mut ImportHref) {
        <ImportHref as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `ImportLayerName`.\n\nBy default, this method calls \
             [`ImportLayerName::visit_mut_children_with`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_mut_import_layer_name(&mut self, node: &mut ImportLayerName) {
        <ImportLayerName as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `ImportPrelude`.\n\nBy default, this method calls \
             [`ImportPrelude::visit_mut_children_with`]. If you want to recurse, you need to call \
             it manually."]
    #[inline]
    fn visit_mut_import_prelude(&mut self, node: &mut ImportPrelude) {
        <ImportPrelude as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `ImportantFlag`.\n\nBy default, this method calls \
             [`ImportantFlag::visit_mut_children_with`]. If you want to recurse, you need to call \
             it manually."]
    #[inline]
    fn visit_mut_important_flag(&mut self, node: &mut ImportantFlag) {
        <ImportantFlag as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `Integer`.\n\nBy default, this method calls \
             [`Integer::visit_mut_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_mut_integer(&mut self, node: &mut Integer) {
        <Integer as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `KeyframeBlock`.\n\nBy default, this method calls \
             [`KeyframeBlock::visit_mut_children_with`]. If you want to recurse, you need to call \
             it manually."]
    #[inline]
    fn visit_mut_keyframe_block(&mut self, node: &mut KeyframeBlock) {
        <KeyframeBlock as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `KeyframeSelector`.\n\nBy default, this method calls \
             [`KeyframeSelector::visit_mut_children_with`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_mut_keyframe_selector(&mut self, node: &mut KeyframeSelector) {
        <KeyframeSelector as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `Vec < KeyframeSelector >`.\n\nBy default, this method calls \
             [`Vec < KeyframeSelector >::visit_mut_children_with`]. If you want to recurse, you \
             need to call it manually."]
    #[inline]
    fn visit_mut_keyframe_selectors(&mut self, node: &mut Vec<KeyframeSelector>) {
        <Vec<KeyframeSelector> as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `KeyframesName`.\n\nBy default, this method calls \
             [`KeyframesName::visit_mut_children_with`]. If you want to recurse, you need to call \
             it manually."]
    #[inline]
    fn visit_mut_keyframes_name(&mut self, node: &mut KeyframesName) {
        <KeyframesName as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `KeyframesPseudoFunction`.\n\nBy default, this method calls \
             [`KeyframesPseudoFunction::visit_mut_children_with`]. If you want to recurse, you \
             need to call it manually."]
    #[inline]
    fn visit_mut_keyframes_pseudo_function(&mut self, node: &mut KeyframesPseudoFunction) {
        <KeyframesPseudoFunction as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `KeyframesPseudoPrefix`.\n\nBy default, this method calls \
             [`KeyframesPseudoPrefix::visit_mut_children_with`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn visit_mut_keyframes_pseudo_prefix(&mut self, node: &mut KeyframesPseudoPrefix) {
        <KeyframesPseudoPrefix as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `LayerName`.\n\nBy default, this method calls \
             [`LayerName::visit_mut_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_mut_layer_name(&mut self, node: &mut LayerName) {
        <LayerName as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `LayerNameList`.\n\nBy default, this method calls \
             [`LayerNameList::visit_mut_children_with`]. If you want to recurse, you need to call \
             it manually."]
    #[inline]
    fn visit_mut_layer_name_list(&mut self, node: &mut LayerNameList) {
        <LayerNameList as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `Vec < LayerName >`.\n\nBy default, this method calls [`Vec < \
             LayerName >::visit_mut_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_mut_layer_names(&mut self, node: &mut Vec<LayerName>) {
        <Vec<LayerName> as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `LayerPrelude`.\n\nBy default, this method calls \
             [`LayerPrelude::visit_mut_children_with`]. If you want to recurse, you need to call \
             it manually."]
    #[inline]
    fn visit_mut_layer_prelude(&mut self, node: &mut LayerPrelude) {
        <LayerPrelude as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `Length`.\n\nBy default, this method calls \
             [`Length::visit_mut_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_mut_length(&mut self, node: &mut Length) {
        <Length as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `LengthPercentage`.\n\nBy default, this method calls \
             [`LengthPercentage::visit_mut_children_with`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_mut_length_percentage(&mut self, node: &mut LengthPercentage) {
        <LengthPercentage as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `ListOfComponentValues`.\n\nBy default, this method calls \
             [`ListOfComponentValues::visit_mut_children_with`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn visit_mut_list_of_component_values(&mut self, node: &mut ListOfComponentValues) {
        <ListOfComponentValues as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `MediaAnd`.\n\nBy default, this method calls \
             [`MediaAnd::visit_mut_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_mut_media_and(&mut self, node: &mut MediaAnd) {
        <MediaAnd as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `MediaCondition`.\n\nBy default, this method calls \
             [`MediaCondition::visit_mut_children_with`]. If you want to recurse, you need to call \
             it manually."]
    #[inline]
    fn visit_mut_media_condition(&mut self, node: &mut MediaCondition) {
        <MediaCondition as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `MediaConditionAllType`.\n\nBy default, this method calls \
             [`MediaConditionAllType::visit_mut_children_with`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn visit_mut_media_condition_all_type(&mut self, node: &mut MediaConditionAllType) {
        <MediaConditionAllType as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `Vec < MediaConditionAllType >`.\n\nBy default, this method \
             calls [`Vec < MediaConditionAllType >::visit_mut_children_with`]. If you want to \
             recurse, you need to call it manually."]
    #[inline]
    fn visit_mut_media_condition_all_types(&mut self, node: &mut Vec<MediaConditionAllType>) {
        <Vec<MediaConditionAllType> as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `MediaConditionType`.\n\nBy default, this method calls \
             [`MediaConditionType::visit_mut_children_with`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_mut_media_condition_type(&mut self, node: &mut MediaConditionType) {
        <MediaConditionType as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `MediaConditionWithoutOr`.\n\nBy default, this method calls \
             [`MediaConditionWithoutOr::visit_mut_children_with`]. If you want to recurse, you \
             need to call it manually."]
    #[inline]
    fn visit_mut_media_condition_without_or(&mut self, node: &mut MediaConditionWithoutOr) {
        <MediaConditionWithoutOr as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `MediaConditionWithoutOrType`.\n\nBy default, this method calls \
             [`MediaConditionWithoutOrType::visit_mut_children_with`]. If you want to recurse, you \
             need to call it manually."]
    #[inline]
    fn visit_mut_media_condition_without_or_type(
        &mut self,
        node: &mut MediaConditionWithoutOrType,
    ) {
        <MediaConditionWithoutOrType as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `Vec < MediaConditionWithoutOrType >`.\n\nBy default, this \
             method calls [`Vec < MediaConditionWithoutOrType >::visit_mut_children_with`]. If you \
             want to recurse, you need to call it manually."]
    #[inline]
    fn visit_mut_media_condition_without_or_types(
        &mut self,
        node: &mut Vec<MediaConditionWithoutOrType>,
    ) {
        <Vec<MediaConditionWithoutOrType> as VisitMutWith<Self>>::visit_mut_children_with(
            node, self,
        )
    }
    #[doc = "Visit a node of type `MediaFeature`.\n\nBy default, this method calls \
             [`MediaFeature::visit_mut_children_with`]. If you want to recurse, you need to call \
             it manually."]
    #[inline]
    fn visit_mut_media_feature(&mut self, node: &mut MediaFeature) {
        <MediaFeature as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `MediaFeatureBoolean`.\n\nBy default, this method calls \
             [`MediaFeatureBoolean::visit_mut_children_with`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_mut_media_feature_boolean(&mut self, node: &mut MediaFeatureBoolean) {
        <MediaFeatureBoolean as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `MediaFeatureName`.\n\nBy default, this method calls \
             [`MediaFeatureName::visit_mut_children_with`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_mut_media_feature_name(&mut self, node: &mut MediaFeatureName) {
        <MediaFeatureName as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `MediaFeaturePlain`.\n\nBy default, this method calls \
             [`MediaFeaturePlain::visit_mut_children_with`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_mut_media_feature_plain(&mut self, node: &mut MediaFeaturePlain) {
        <MediaFeaturePlain as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `MediaFeatureRange`.\n\nBy default, this method calls \
             [`MediaFeatureRange::visit_mut_children_with`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_mut_media_feature_range(&mut self, node: &mut MediaFeatureRange) {
        <MediaFeatureRange as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `MediaFeatureRangeComparison`.\n\nBy default, this method calls \
             [`MediaFeatureRangeComparison::visit_mut_children_with`]. If you want to recurse, you \
             need to call it manually."]
    #[inline]
    fn visit_mut_media_feature_range_comparison(&mut self, node: &mut MediaFeatureRangeComparison) {
        <MediaFeatureRangeComparison as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `MediaFeatureRangeInterval`.\n\nBy default, this method calls \
             [`MediaFeatureRangeInterval::visit_mut_children_with`]. If you want to recurse, you \
             need to call it manually."]
    #[inline]
    fn visit_mut_media_feature_range_interval(&mut self, node: &mut MediaFeatureRangeInterval) {
        <MediaFeatureRangeInterval as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `MediaFeatureValue`.\n\nBy default, this method calls \
             [`MediaFeatureValue::visit_mut_children_with`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_mut_media_feature_value(&mut self, node: &mut MediaFeatureValue) {
        <MediaFeatureValue as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `MediaInParens`.\n\nBy default, this method calls \
             [`MediaInParens::visit_mut_children_with`]. If you want to recurse, you need to call \
             it manually."]
    #[inline]
    fn visit_mut_media_in_parens(&mut self, node: &mut MediaInParens) {
        <MediaInParens as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `MediaNot`.\n\nBy default, this method calls \
             [`MediaNot::visit_mut_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_mut_media_not(&mut self, node: &mut MediaNot) {
        <MediaNot as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `MediaOr`.\n\nBy default, this method calls \
             [`MediaOr::visit_mut_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_mut_media_or(&mut self, node: &mut MediaOr) {
        <MediaOr as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `MediaQuery`.\n\nBy default, this method calls \
             [`MediaQuery::visit_mut_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_mut_media_query(&mut self, node: &mut MediaQuery) {
        <MediaQuery as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `MediaQueryList`.\n\nBy default, this method calls \
             [`MediaQueryList::visit_mut_children_with`]. If you want to recurse, you need to call \
             it manually."]
    #[inline]
    fn visit_mut_media_query_list(&mut self, node: &mut MediaQueryList) {
        <MediaQueryList as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `Vec < MediaQuery >`.\n\nBy default, this method calls [`Vec < \
             MediaQuery >::visit_mut_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_mut_media_querys(&mut self, node: &mut Vec<MediaQuery>) {
        <Vec<MediaQuery> as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `MediaType`.\n\nBy default, this method calls \
             [`MediaType::visit_mut_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_mut_media_type(&mut self, node: &mut MediaType) {
        <MediaType as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `NamedNamespace`.\n\nBy default, this method calls \
             [`NamedNamespace::visit_mut_children_with`]. If you want to recurse, you need to call \
             it manually."]
    #[inline]
    fn visit_mut_named_namespace(&mut self, node: &mut NamedNamespace) {
        <NamedNamespace as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `Namespace`.\n\nBy default, this method calls \
             [`Namespace::visit_mut_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_mut_namespace(&mut self, node: &mut Namespace) {
        <Namespace as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `NamespacePrefix`.\n\nBy default, this method calls \
             [`NamespacePrefix::visit_mut_children_with`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_mut_namespace_prefix(&mut self, node: &mut NamespacePrefix) {
        <NamespacePrefix as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `NamespacePrelude`.\n\nBy default, this method calls \
             [`NamespacePrelude::visit_mut_children_with`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_mut_namespace_prelude(&mut self, node: &mut NamespacePrelude) {
        <NamespacePrelude as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `NamespacePreludeUri`.\n\nBy default, this method calls \
             [`NamespacePreludeUri::visit_mut_children_with`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_mut_namespace_prelude_uri(&mut self, node: &mut NamespacePreludeUri) {
        <NamespacePreludeUri as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `NestingSelector`.\n\nBy default, this method calls \
             [`NestingSelector::visit_mut_children_with`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_mut_nesting_selector(&mut self, node: &mut NestingSelector) {
        <NestingSelector as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `Number`.\n\nBy default, this method calls \
             [`Number::visit_mut_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_mut_number(&mut self, node: &mut Number) {
        <Number as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `NumberType`.\n\nBy default, this method calls \
             [`NumberType::visit_mut_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_mut_number_type(&mut self, node: &mut NumberType) {
        <NumberType as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `Option < Box < AtRulePrelude > >`.\n\nBy default, this method \
             calls [`Option < Box < AtRulePrelude > >::visit_mut_children_with`]. If you want to \
             recurse, you need to call it manually."]
    #[inline]
    fn visit_mut_opt_at_rule_prelude(&mut self, node: &mut Option<Box<AtRulePrelude>>) {
        <Option<Box<AtRulePrelude>> as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `Option < swc_atoms :: Atom >`.\n\nBy default, this method calls \
             [`Option < swc_atoms :: Atom >::visit_mut_children_with`]. If you want to recurse, \
             you need to call it manually."]
    #[inline]
    fn visit_mut_opt_atom(&mut self, node: &mut Option<swc_atoms::Atom>) {
        <Option<swc_atoms::Atom> as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `Option < AttributeSelectorMatcher >`.\n\nBy default, this \
             method calls [`Option < AttributeSelectorMatcher >::visit_mut_children_with`]. If you \
             want to recurse, you need to call it manually."]
    #[inline]
    fn visit_mut_opt_attribute_selector_matcher(
        &mut self,
        node: &mut Option<AttributeSelectorMatcher>,
    ) {
        <Option<AttributeSelectorMatcher> as VisitMutWith<Self>>::visit_mut_children_with(
            node, self,
        )
    }
    #[doc = "Visit a node of type `Option < AttributeSelectorModifier >`.\n\nBy default, this \
             method calls [`Option < AttributeSelectorModifier >::visit_mut_children_with`]. If \
             you want to recurse, you need to call it manually."]
    #[inline]
    fn visit_mut_opt_attribute_selector_modifier(
        &mut self,
        node: &mut Option<AttributeSelectorModifier>,
    ) {
        <Option<AttributeSelectorModifier> as VisitMutWith<Self>>::visit_mut_children_with(
            node, self,
        )
    }
    #[doc = "Visit a node of type `Option < AttributeSelectorValue >`.\n\nBy default, this method \
             calls [`Option < AttributeSelectorValue >::visit_mut_children_with`]. If you want to \
             recurse, you need to call it manually."]
    #[inline]
    fn visit_mut_opt_attribute_selector_value(
        &mut self,
        node: &mut Option<AttributeSelectorValue>,
    ) {
        <Option<AttributeSelectorValue> as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `Option < Combinator >`.\n\nBy default, this method calls \
             [`Option < Combinator >::visit_mut_children_with`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn visit_mut_opt_combinator(&mut self, node: &mut Option<Combinator>) {
        <Option<Combinator> as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `Option < ContainerName >`.\n\nBy default, this method calls \
             [`Option < ContainerName >::visit_mut_children_with`]. If you want to recurse, you \
             need to call it manually."]
    #[inline]
    fn visit_mut_opt_container_name(&mut self, node: &mut Option<ContainerName>) {
        <Option<ContainerName> as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `Option < ForgivingSelectorList >`.\n\nBy default, this method \
             calls [`Option < ForgivingSelectorList >::visit_mut_children_with`]. If you want to \
             recurse, you need to call it manually."]
    #[inline]
    fn visit_mut_opt_forgiving_selector_list(&mut self, node: &mut Option<ForgivingSelectorList>) {
        <Option<ForgivingSelectorList> as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `Option < Box < Function > >`.\n\nBy default, this method calls \
             [`Option < Box < Function > >::visit_mut_children_with`]. If you want to recurse, you \
             need to call it manually."]
    #[inline]
    fn visit_mut_opt_function(&mut self, node: &mut Option<Box<Function>>) {
        <Option<Box<Function>> as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `Option < Ident >`.\n\nBy default, this method calls [`Option < \
             Ident >::visit_mut_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_mut_opt_ident(&mut self, node: &mut Option<Ident>) {
        <Option<Ident> as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `Option < Box < ImportConditions > >`.\n\nBy default, this \
             method calls [`Option < Box < ImportConditions > >::visit_mut_children_with`]. If you \
             want to recurse, you need to call it manually."]
    #[inline]
    fn visit_mut_opt_import_conditions(&mut self, node: &mut Option<Box<ImportConditions>>) {
        <Option<Box<ImportConditions>> as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `Option < Box < ImportLayerName > >`.\n\nBy default, this method \
             calls [`Option < Box < ImportLayerName > >::visit_mut_children_with`]. If you want to \
             recurse, you need to call it manually."]
    #[inline]
    fn visit_mut_opt_import_layer_name(&mut self, node: &mut Option<Box<ImportLayerName>>) {
        <Option<Box<ImportLayerName>> as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `Option < ImportantFlag >`.\n\nBy default, this method calls \
             [`Option < ImportantFlag >::visit_mut_children_with`]. If you want to recurse, you \
             need to call it manually."]
    #[inline]
    fn visit_mut_opt_important_flag(&mut self, node: &mut Option<ImportantFlag>) {
        <Option<ImportantFlag> as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `Option < Box < MediaConditionType > >`.\n\nBy default, this \
             method calls [`Option < Box < MediaConditionType > >::visit_mut_children_with`]. If \
             you want to recurse, you need to call it manually."]
    #[inline]
    fn visit_mut_opt_media_condition_type(&mut self, node: &mut Option<Box<MediaConditionType>>) {
        <Option<Box<MediaConditionType>> as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `Option < Box < MediaQueryList > >`.\n\nBy default, this method \
             calls [`Option < Box < MediaQueryList > >::visit_mut_children_with`]. If you want to \
             recurse, you need to call it manually."]
    #[inline]
    fn visit_mut_opt_media_query_list(&mut self, node: &mut Option<Box<MediaQueryList>>) {
        <Option<Box<MediaQueryList>> as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `Option < MediaType >`.\n\nBy default, this method calls \
             [`Option < MediaType >::visit_mut_children_with`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn visit_mut_opt_media_type(&mut self, node: &mut Option<MediaType>) {
        <Option<MediaType> as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `Option < Namespace >`.\n\nBy default, this method calls \
             [`Option < Namespace >::visit_mut_children_with`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn visit_mut_opt_namespace(&mut self, node: &mut Option<Namespace>) {
        <Option<Namespace> as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `Option < NamespacePrefix >`.\n\nBy default, this method calls \
             [`Option < NamespacePrefix >::visit_mut_children_with`]. If you want to recurse, you \
             need to call it manually."]
    #[inline]
    fn visit_mut_opt_namespace_prefix(&mut self, node: &mut Option<NamespacePrefix>) {
        <Option<NamespacePrefix> as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `Option < NestingSelector >`.\n\nBy default, this method calls \
             [`Option < NestingSelector >::visit_mut_children_with`]. If you want to recurse, you \
             need to call it manually."]
    #[inline]
    fn visit_mut_opt_nesting_selector(&mut self, node: &mut Option<NestingSelector>) {
        <Option<NestingSelector> as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `Option < Number >`.\n\nBy default, this method calls [`Option < \
             Number >::visit_mut_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_mut_opt_number(&mut self, node: &mut Option<Number>) {
        <Option<Number> as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `Option < Vec < PageSelectorPseudo > >`.\n\nBy default, this \
             method calls [`Option < Vec < PageSelectorPseudo > >::visit_mut_children_with`]. If \
             you want to recurse, you need to call it manually."]
    #[inline]
    fn visit_mut_opt_page_selector_pseudos(&mut self, node: &mut Option<Vec<PageSelectorPseudo>>) {
        <Option<Vec<PageSelectorPseudo>> as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `Option < PageSelectorType >`.\n\nBy default, this method calls \
             [`Option < PageSelectorType >::visit_mut_children_with`]. If you want to recurse, you \
             need to call it manually."]
    #[inline]
    fn visit_mut_opt_page_selector_type(&mut self, node: &mut Option<PageSelectorType>) {
        <Option<PageSelectorType> as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `Option < Vec < PseudoClassSelectorChildren > >`.\n\nBy default, \
             this method calls [`Option < Vec < PseudoClassSelectorChildren > \
             >::visit_mut_children_with`]. If you want to recurse, you need to call it manually."]
    #[inline]
    fn visit_mut_opt_pseudo_class_selector_childrens(
        &mut self,
        node: &mut Option<Vec<PseudoClassSelectorChildren>>,
    ) {
        <Option<Vec<PseudoClassSelectorChildren>> as VisitMutWith<Self>>::visit_mut_children_with(
            node, self,
        )
    }
    #[doc = "Visit a node of type `Option < Vec < PseudoElementSelectorChildren > >`.\n\nBy \
             default, this method calls [`Option < Vec < PseudoElementSelectorChildren > \
             >::visit_mut_children_with`]. If you want to recurse, you need to call it manually."]
    #[inline]
    fn visit_mut_opt_pseudo_element_selector_childrens(
        &mut self,
        node: &mut Option<Vec<PseudoElementSelectorChildren>>,
    ) {
        <Option<Vec<PseudoElementSelectorChildren>> as VisitMutWith<Self>>::visit_mut_children_with(
            node, self,
        )
    }
    #[doc = "Visit a node of type `Option < SimpleBlock >`.\n\nBy default, this method calls \
             [`Option < SimpleBlock >::visit_mut_children_with`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn visit_mut_opt_simple_block(&mut self, node: &mut Option<SimpleBlock>) {
        <Option<SimpleBlock> as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `Option < Box < TypeSelector > >`.\n\nBy default, this method \
             calls [`Option < Box < TypeSelector > >::visit_mut_children_with`]. If you want to \
             recurse, you need to call it manually."]
    #[inline]
    fn visit_mut_opt_type_selector(&mut self, node: &mut Option<Box<TypeSelector>>) {
        <Option<Box<TypeSelector>> as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `Option < Vec < UrlModifier > >`.\n\nBy default, this method \
             calls [`Option < Vec < UrlModifier > >::visit_mut_children_with`]. If you want to \
             recurse, you need to call it manually."]
    #[inline]
    fn visit_mut_opt_url_modifiers(&mut self, node: &mut Option<Vec<UrlModifier>>) {
        <Option<Vec<UrlModifier>> as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `Option < Box < UrlValue > >`.\n\nBy default, this method calls \
             [`Option < Box < UrlValue > >::visit_mut_children_with`]. If you want to recurse, you \
             need to call it manually."]
    #[inline]
    fn visit_mut_opt_url_value(&mut self, node: &mut Option<Box<UrlValue>>) {
        <Option<Box<UrlValue>> as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `PageSelector`.\n\nBy default, this method calls \
             [`PageSelector::visit_mut_children_with`]. If you want to recurse, you need to call \
             it manually."]
    #[inline]
    fn visit_mut_page_selector(&mut self, node: &mut PageSelector) {
        <PageSelector as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `PageSelectorList`.\n\nBy default, this method calls \
             [`PageSelectorList::visit_mut_children_with`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_mut_page_selector_list(&mut self, node: &mut PageSelectorList) {
        <PageSelectorList as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `PageSelectorPseudo`.\n\nBy default, this method calls \
             [`PageSelectorPseudo::visit_mut_children_with`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_mut_page_selector_pseudo(&mut self, node: &mut PageSelectorPseudo) {
        <PageSelectorPseudo as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `Vec < PageSelectorPseudo >`.\n\nBy default, this method calls \
             [`Vec < PageSelectorPseudo >::visit_mut_children_with`]. If you want to recurse, you \
             need to call it manually."]
    #[inline]
    fn visit_mut_page_selector_pseudos(&mut self, node: &mut Vec<PageSelectorPseudo>) {
        <Vec<PageSelectorPseudo> as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `PageSelectorType`.\n\nBy default, this method calls \
             [`PageSelectorType::visit_mut_children_with`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_mut_page_selector_type(&mut self, node: &mut PageSelectorType) {
        <PageSelectorType as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `Vec < PageSelector >`.\n\nBy default, this method calls [`Vec < \
             PageSelector >::visit_mut_children_with`]. If you want to recurse, you need to call \
             it manually."]
    #[inline]
    fn visit_mut_page_selectors(&mut self, node: &mut Vec<PageSelector>) {
        <Vec<PageSelector> as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `Percentage`.\n\nBy default, this method calls \
             [`Percentage::visit_mut_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_mut_percentage(&mut self, node: &mut Percentage) {
        <Percentage as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `PseudoClassSelector`.\n\nBy default, this method calls \
             [`PseudoClassSelector::visit_mut_children_with`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_mut_pseudo_class_selector(&mut self, node: &mut PseudoClassSelector) {
        <PseudoClassSelector as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `PseudoClassSelectorChildren`.\n\nBy default, this method calls \
             [`PseudoClassSelectorChildren::visit_mut_children_with`]. If you want to recurse, you \
             need to call it manually."]
    #[inline]
    fn visit_mut_pseudo_class_selector_children(&mut self, node: &mut PseudoClassSelectorChildren) {
        <PseudoClassSelectorChildren as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `Vec < PseudoClassSelectorChildren >`.\n\nBy default, this \
             method calls [`Vec < PseudoClassSelectorChildren >::visit_mut_children_with`]. If you \
             want to recurse, you need to call it manually."]
    #[inline]
    fn visit_mut_pseudo_class_selector_childrens(
        &mut self,
        node: &mut Vec<PseudoClassSelectorChildren>,
    ) {
        <Vec<PseudoClassSelectorChildren> as VisitMutWith<Self>>::visit_mut_children_with(
            node, self,
        )
    }
    #[doc = "Visit a node of type `PseudoElementSelector`.\n\nBy default, this method calls \
             [`PseudoElementSelector::visit_mut_children_with`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn visit_mut_pseudo_element_selector(&mut self, node: &mut PseudoElementSelector) {
        <PseudoElementSelector as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `PseudoElementSelectorChildren`.\n\nBy default, this method \
             calls [`PseudoElementSelectorChildren::visit_mut_children_with`]. If you want to \
             recurse, you need to call it manually."]
    #[inline]
    fn visit_mut_pseudo_element_selector_children(
        &mut self,
        node: &mut PseudoElementSelectorChildren,
    ) {
        <PseudoElementSelectorChildren as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `Vec < PseudoElementSelectorChildren >`.\n\nBy default, this \
             method calls [`Vec < PseudoElementSelectorChildren >::visit_mut_children_with`]. If \
             you want to recurse, you need to call it manually."]
    #[inline]
    fn visit_mut_pseudo_element_selector_childrens(
        &mut self,
        node: &mut Vec<PseudoElementSelectorChildren>,
    ) {
        <Vec<PseudoElementSelectorChildren> as VisitMutWith<Self>>::visit_mut_children_with(
            node, self,
        )
    }
    #[doc = "Visit a node of type `QualifiedRule`.\n\nBy default, this method calls \
             [`QualifiedRule::visit_mut_children_with`]. If you want to recurse, you need to call \
             it manually."]
    #[inline]
    fn visit_mut_qualified_rule(&mut self, node: &mut QualifiedRule) {
        <QualifiedRule as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `QualifiedRulePrelude`.\n\nBy default, this method calls \
             [`QualifiedRulePrelude::visit_mut_children_with`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn visit_mut_qualified_rule_prelude(&mut self, node: &mut QualifiedRulePrelude) {
        <QualifiedRulePrelude as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `QueryInParens`.\n\nBy default, this method calls \
             [`QueryInParens::visit_mut_children_with`]. If you want to recurse, you need to call \
             it manually."]
    #[inline]
    fn visit_mut_query_in_parens(&mut self, node: &mut QueryInParens) {
        <QueryInParens as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `Ratio`.\n\nBy default, this method calls \
             [`Ratio::visit_mut_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_mut_ratio(&mut self, node: &mut Ratio) {
        <Ratio as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `RelativeSelector`.\n\nBy default, this method calls \
             [`RelativeSelector::visit_mut_children_with`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_mut_relative_selector(&mut self, node: &mut RelativeSelector) {
        <RelativeSelector as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `RelativeSelectorList`.\n\nBy default, this method calls \
             [`RelativeSelectorList::visit_mut_children_with`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn visit_mut_relative_selector_list(&mut self, node: &mut RelativeSelectorList) {
        <RelativeSelectorList as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `Vec < RelativeSelector >`.\n\nBy default, this method calls \
             [`Vec < RelativeSelector >::visit_mut_children_with`]. If you want to recurse, you \
             need to call it manually."]
    #[inline]
    fn visit_mut_relative_selectors(&mut self, node: &mut Vec<RelativeSelector>) {
        <Vec<RelativeSelector> as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `Resolution`.\n\nBy default, this method calls \
             [`Resolution::visit_mut_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_mut_resolution(&mut self, node: &mut Resolution) {
        <Resolution as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `Rule`.\n\nBy default, this method calls \
             [`Rule::visit_mut_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_mut_rule(&mut self, node: &mut Rule) {
        <Rule as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `Vec < Rule >`.\n\nBy default, this method calls [`Vec < Rule \
             >::visit_mut_children_with`]. If you want to recurse, you need to call it manually."]
    #[inline]
    fn visit_mut_rules(&mut self, node: &mut Vec<Rule>) {
        <Vec<Rule> as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `ScopeRange`.\n\nBy default, this method calls \
             [`ScopeRange::visit_mut_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_mut_scope_range(&mut self, node: &mut ScopeRange) {
        <ScopeRange as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `SelectorList`.\n\nBy default, this method calls \
             [`SelectorList::visit_mut_children_with`]. If you want to recurse, you need to call \
             it manually."]
    #[inline]
    fn visit_mut_selector_list(&mut self, node: &mut SelectorList) {
        <SelectorList as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `SequenceOfCustomIdents`.\n\nBy default, this method calls \
             [`SequenceOfCustomIdents::visit_mut_children_with`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn visit_mut_sequence_of_custom_idents(&mut self, node: &mut SequenceOfCustomIdents) {
        <SequenceOfCustomIdents as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `SimpleBlock`.\n\nBy default, this method calls \
             [`SimpleBlock::visit_mut_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_mut_simple_block(&mut self, node: &mut SimpleBlock) {
        <SimpleBlock as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `SizeFeature`.\n\nBy default, this method calls \
             [`SizeFeature::visit_mut_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_mut_size_feature(&mut self, node: &mut SizeFeature) {
        <SizeFeature as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `SizeFeatureBoolean`.\n\nBy default, this method calls \
             [`SizeFeatureBoolean::visit_mut_children_with`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_mut_size_feature_boolean(&mut self, node: &mut SizeFeatureBoolean) {
        <SizeFeatureBoolean as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `SizeFeatureName`.\n\nBy default, this method calls \
             [`SizeFeatureName::visit_mut_children_with`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_mut_size_feature_name(&mut self, node: &mut SizeFeatureName) {
        <SizeFeatureName as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `SizeFeaturePlain`.\n\nBy default, this method calls \
             [`SizeFeaturePlain::visit_mut_children_with`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_mut_size_feature_plain(&mut self, node: &mut SizeFeaturePlain) {
        <SizeFeaturePlain as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `SizeFeatureRange`.\n\nBy default, this method calls \
             [`SizeFeatureRange::visit_mut_children_with`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_mut_size_feature_range(&mut self, node: &mut SizeFeatureRange) {
        <SizeFeatureRange as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `SizeFeatureRangeComparison`.\n\nBy default, this method calls \
             [`SizeFeatureRangeComparison::visit_mut_children_with`]. If you want to recurse, you \
             need to call it manually."]
    #[inline]
    fn visit_mut_size_feature_range_comparison(&mut self, node: &mut SizeFeatureRangeComparison) {
        <SizeFeatureRangeComparison as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `SizeFeatureRangeInterval`.\n\nBy default, this method calls \
             [`SizeFeatureRangeInterval::visit_mut_children_with`]. If you want to recurse, you \
             need to call it manually."]
    #[inline]
    fn visit_mut_size_feature_range_interval(&mut self, node: &mut SizeFeatureRangeInterval) {
        <SizeFeatureRangeInterval as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `SizeFeatureValue`.\n\nBy default, this method calls \
             [`SizeFeatureValue::visit_mut_children_with`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_mut_size_feature_value(&mut self, node: &mut SizeFeatureValue) {
        <SizeFeatureValue as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `swc_common :: Span`.\n\nBy default, this method calls \
             [`swc_common :: Span::visit_mut_children_with`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_mut_span(&mut self, node: &mut swc_common::Span) {
        <swc_common::Span as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `Str`.\n\nBy default, this method calls \
             [`Str::visit_mut_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_mut_str(&mut self, node: &mut Str) {
        <Str as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `StyleBlock`.\n\nBy default, this method calls \
             [`StyleBlock::visit_mut_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_mut_style_block(&mut self, node: &mut StyleBlock) {
        <StyleBlock as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `Stylesheet`.\n\nBy default, this method calls \
             [`Stylesheet::visit_mut_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_mut_stylesheet(&mut self, node: &mut Stylesheet) {
        <Stylesheet as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `SubclassSelector`.\n\nBy default, this method calls \
             [`SubclassSelector::visit_mut_children_with`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_mut_subclass_selector(&mut self, node: &mut SubclassSelector) {
        <SubclassSelector as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `Vec < SubclassSelector >`.\n\nBy default, this method calls \
             [`Vec < SubclassSelector >::visit_mut_children_with`]. If you want to recurse, you \
             need to call it manually."]
    #[inline]
    fn visit_mut_subclass_selectors(&mut self, node: &mut Vec<SubclassSelector>) {
        <Vec<SubclassSelector> as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `SupportsAnd`.\n\nBy default, this method calls \
             [`SupportsAnd::visit_mut_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_mut_supports_and(&mut self, node: &mut SupportsAnd) {
        <SupportsAnd as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `SupportsCondition`.\n\nBy default, this method calls \
             [`SupportsCondition::visit_mut_children_with`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_mut_supports_condition(&mut self, node: &mut SupportsCondition) {
        <SupportsCondition as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `SupportsConditionType`.\n\nBy default, this method calls \
             [`SupportsConditionType::visit_mut_children_with`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn visit_mut_supports_condition_type(&mut self, node: &mut SupportsConditionType) {
        <SupportsConditionType as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `Vec < SupportsConditionType >`.\n\nBy default, this method \
             calls [`Vec < SupportsConditionType >::visit_mut_children_with`]. If you want to \
             recurse, you need to call it manually."]
    #[inline]
    fn visit_mut_supports_condition_types(&mut self, node: &mut Vec<SupportsConditionType>) {
        <Vec<SupportsConditionType> as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `SupportsFeature`.\n\nBy default, this method calls \
             [`SupportsFeature::visit_mut_children_with`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_mut_supports_feature(&mut self, node: &mut SupportsFeature) {
        <SupportsFeature as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `SupportsInParens`.\n\nBy default, this method calls \
             [`SupportsInParens::visit_mut_children_with`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_mut_supports_in_parens(&mut self, node: &mut SupportsInParens) {
        <SupportsInParens as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `SupportsNot`.\n\nBy default, this method calls \
             [`SupportsNot::visit_mut_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_mut_supports_not(&mut self, node: &mut SupportsNot) {
        <SupportsNot as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `SupportsOr`.\n\nBy default, this method calls \
             [`SupportsOr::visit_mut_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_mut_supports_or(&mut self, node: &mut SupportsOr) {
        <SupportsOr as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `TagNameSelector`.\n\nBy default, this method calls \
             [`TagNameSelector::visit_mut_children_with`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_mut_tag_name_selector(&mut self, node: &mut TagNameSelector) {
        <TagNameSelector as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `Time`.\n\nBy default, this method calls \
             [`Time::visit_mut_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_mut_time(&mut self, node: &mut Time) {
        <Time as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `TimePercentage`.\n\nBy default, this method calls \
             [`TimePercentage::visit_mut_children_with`]. If you want to recurse, you need to call \
             it manually."]
    #[inline]
    fn visit_mut_time_percentage(&mut self, node: &mut TimePercentage) {
        <TimePercentage as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `Token`.\n\nBy default, this method calls \
             [`Token::visit_mut_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_mut_token(&mut self, node: &mut Token) {
        <Token as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `TokenAndSpan`.\n\nBy default, this method calls \
             [`TokenAndSpan::visit_mut_children_with`]. If you want to recurse, you need to call \
             it manually."]
    #[inline]
    fn visit_mut_token_and_span(&mut self, node: &mut TokenAndSpan) {
        <TokenAndSpan as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `TypeSelector`.\n\nBy default, this method calls \
             [`TypeSelector::visit_mut_children_with`]. If you want to recurse, you need to call \
             it manually."]
    #[inline]
    fn visit_mut_type_selector(&mut self, node: &mut TypeSelector) {
        <TypeSelector as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `UnicodeRange`.\n\nBy default, this method calls \
             [`UnicodeRange::visit_mut_children_with`]. If you want to recurse, you need to call \
             it manually."]
    #[inline]
    fn visit_mut_unicode_range(&mut self, node: &mut UnicodeRange) {
        <UnicodeRange as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `UniversalSelector`.\n\nBy default, this method calls \
             [`UniversalSelector::visit_mut_children_with`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_mut_universal_selector(&mut self, node: &mut UniversalSelector) {
        <UniversalSelector as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `UnknownDimension`.\n\nBy default, this method calls \
             [`UnknownDimension::visit_mut_children_with`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_mut_unknown_dimension(&mut self, node: &mut UnknownDimension) {
        <UnknownDimension as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `Url`.\n\nBy default, this method calls \
             [`Url::visit_mut_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_mut_url(&mut self, node: &mut Url) {
        <Url as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `UrlKeyValue`.\n\nBy default, this method calls \
             [`UrlKeyValue::visit_mut_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_mut_url_key_value(&mut self, node: &mut UrlKeyValue) {
        <UrlKeyValue as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `UrlModifier`.\n\nBy default, this method calls \
             [`UrlModifier::visit_mut_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_mut_url_modifier(&mut self, node: &mut UrlModifier) {
        <UrlModifier as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `Vec < UrlModifier >`.\n\nBy default, this method calls [`Vec < \
             UrlModifier >::visit_mut_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_mut_url_modifiers(&mut self, node: &mut Vec<UrlModifier>) {
        <Vec<UrlModifier> as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `UrlValue`.\n\nBy default, this method calls \
             [`UrlValue::visit_mut_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_mut_url_value(&mut self, node: &mut UrlValue) {
        <UrlValue as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `UrlValueRaw`.\n\nBy default, this method calls \
             [`UrlValueRaw::visit_mut_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_mut_url_value_raw(&mut self, node: &mut UrlValueRaw) {
        <UrlValueRaw as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
    #[doc = "Visit a node of type `WqName`.\n\nBy default, this method calls \
             [`WqName::visit_mut_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_mut_wq_name(&mut self, node: &mut WqName) {
        <WqName as VisitMutWith<Self>>::visit_mut_children_with(node, self)
    }
}
impl<V> VisitMut for &mut V
where
    V: ?Sized + VisitMut,
{
    #[inline]
    fn visit_mut_absolute_color_base(&mut self, node: &mut AbsoluteColorBase) {
        <V as VisitMut>::visit_mut_absolute_color_base(&mut **self, node)
    }

    #[inline]
    fn visit_mut_alpha_value(&mut self, node: &mut AlphaValue) {
        <V as VisitMut>::visit_mut_alpha_value(&mut **self, node)
    }

    #[inline]
    fn visit_mut_an_plus_b(&mut self, node: &mut AnPlusB) {
        <V as VisitMut>::visit_mut_an_plus_b(&mut **self, node)
    }

    #[inline]
    fn visit_mut_an_plus_b_notation(&mut self, node: &mut AnPlusBNotation) {
        <V as VisitMut>::visit_mut_an_plus_b_notation(&mut **self, node)
    }

    #[inline]
    fn visit_mut_angle(&mut self, node: &mut Angle) {
        <V as VisitMut>::visit_mut_angle(&mut **self, node)
    }

    #[inline]
    fn visit_mut_angle_percentage(&mut self, node: &mut AnglePercentage) {
        <V as VisitMut>::visit_mut_angle_percentage(&mut **self, node)
    }

    #[inline]
    fn visit_mut_any_namespace(&mut self, node: &mut AnyNamespace) {
        <V as VisitMut>::visit_mut_any_namespace(&mut **self, node)
    }

    #[inline]
    fn visit_mut_at_rule(&mut self, node: &mut AtRule) {
        <V as VisitMut>::visit_mut_at_rule(&mut **self, node)
    }

    #[inline]
    fn visit_mut_at_rule_name(&mut self, node: &mut AtRuleName) {
        <V as VisitMut>::visit_mut_at_rule_name(&mut **self, node)
    }

    #[inline]
    fn visit_mut_at_rule_prelude(&mut self, node: &mut AtRulePrelude) {
        <V as VisitMut>::visit_mut_at_rule_prelude(&mut **self, node)
    }

    #[inline]
    fn visit_mut_atom(&mut self, node: &mut swc_atoms::Atom) {
        <V as VisitMut>::visit_mut_atom(&mut **self, node)
    }

    #[inline]
    fn visit_mut_attribute_selector(&mut self, node: &mut AttributeSelector) {
        <V as VisitMut>::visit_mut_attribute_selector(&mut **self, node)
    }

    #[inline]
    fn visit_mut_attribute_selector_matcher(&mut self, node: &mut AttributeSelectorMatcher) {
        <V as VisitMut>::visit_mut_attribute_selector_matcher(&mut **self, node)
    }

    #[inline]
    fn visit_mut_attribute_selector_matcher_value(
        &mut self,
        node: &mut AttributeSelectorMatcherValue,
    ) {
        <V as VisitMut>::visit_mut_attribute_selector_matcher_value(&mut **self, node)
    }

    #[inline]
    fn visit_mut_attribute_selector_modifier(&mut self, node: &mut AttributeSelectorModifier) {
        <V as VisitMut>::visit_mut_attribute_selector_modifier(&mut **self, node)
    }

    #[inline]
    fn visit_mut_attribute_selector_value(&mut self, node: &mut AttributeSelectorValue) {
        <V as VisitMut>::visit_mut_attribute_selector_value(&mut **self, node)
    }

    #[inline]
    fn visit_mut_bin_op(&mut self, node: &mut BinOp) {
        <V as VisitMut>::visit_mut_bin_op(&mut **self, node)
    }

    #[inline]
    fn visit_mut_calc_operator(&mut self, node: &mut CalcOperator) {
        <V as VisitMut>::visit_mut_calc_operator(&mut **self, node)
    }

    #[inline]
    fn visit_mut_calc_operator_type(&mut self, node: &mut CalcOperatorType) {
        <V as VisitMut>::visit_mut_calc_operator_type(&mut **self, node)
    }

    #[inline]
    fn visit_mut_calc_product(&mut self, node: &mut CalcProduct) {
        <V as VisitMut>::visit_mut_calc_product(&mut **self, node)
    }

    #[inline]
    fn visit_mut_calc_product_or_operator(&mut self, node: &mut CalcProductOrOperator) {
        <V as VisitMut>::visit_mut_calc_product_or_operator(&mut **self, node)
    }

    #[inline]
    fn visit_mut_calc_product_or_operators(&mut self, node: &mut Vec<CalcProductOrOperator>) {
        <V as VisitMut>::visit_mut_calc_product_or_operators(&mut **self, node)
    }

    #[inline]
    fn visit_mut_calc_sum(&mut self, node: &mut CalcSum) {
        <V as VisitMut>::visit_mut_calc_sum(&mut **self, node)
    }

    #[inline]
    fn visit_mut_calc_value(&mut self, node: &mut CalcValue) {
        <V as VisitMut>::visit_mut_calc_value(&mut **self, node)
    }

    #[inline]
    fn visit_mut_calc_value_or_operator(&mut self, node: &mut CalcValueOrOperator) {
        <V as VisitMut>::visit_mut_calc_value_or_operator(&mut **self, node)
    }

    #[inline]
    fn visit_mut_calc_value_or_operators(&mut self, node: &mut Vec<CalcValueOrOperator>) {
        <V as VisitMut>::visit_mut_calc_value_or_operators(&mut **self, node)
    }

    #[inline]
    fn visit_mut_class_selector(&mut self, node: &mut ClassSelector) {
        <V as VisitMut>::visit_mut_class_selector(&mut **self, node)
    }

    #[inline]
    fn visit_mut_cmyk_component(&mut self, node: &mut CmykComponent) {
        <V as VisitMut>::visit_mut_cmyk_component(&mut **self, node)
    }

    #[inline]
    fn visit_mut_color(&mut self, node: &mut Color) {
        <V as VisitMut>::visit_mut_color(&mut **self, node)
    }

    #[inline]
    fn visit_mut_color_profile_name(&mut self, node: &mut ColorProfileName) {
        <V as VisitMut>::visit_mut_color_profile_name(&mut **self, node)
    }

    #[inline]
    fn visit_mut_combinator(&mut self, node: &mut Combinator) {
        <V as VisitMut>::visit_mut_combinator(&mut **self, node)
    }

    #[inline]
    fn visit_mut_combinator_value(&mut self, node: &mut CombinatorValue) {
        <V as VisitMut>::visit_mut_combinator_value(&mut **self, node)
    }

    #[inline]
    fn visit_mut_complex_selector(&mut self, node: &mut ComplexSelector) {
        <V as VisitMut>::visit_mut_complex_selector(&mut **self, node)
    }

    #[inline]
    fn visit_mut_complex_selector_children(&mut self, node: &mut ComplexSelectorChildren) {
        <V as VisitMut>::visit_mut_complex_selector_children(&mut **self, node)
    }

    #[inline]
    fn visit_mut_complex_selector_childrens(&mut self, node: &mut Vec<ComplexSelectorChildren>) {
        <V as VisitMut>::visit_mut_complex_selector_childrens(&mut **self, node)
    }

    #[inline]
    fn visit_mut_complex_selectors(&mut self, node: &mut Vec<ComplexSelector>) {
        <V as VisitMut>::visit_mut_complex_selectors(&mut **self, node)
    }

    #[inline]
    fn visit_mut_component_value(&mut self, node: &mut ComponentValue) {
        <V as VisitMut>::visit_mut_component_value(&mut **self, node)
    }

    #[inline]
    fn visit_mut_component_values(&mut self, node: &mut Vec<ComponentValue>) {
        <V as VisitMut>::visit_mut_component_values(&mut **self, node)
    }

    #[inline]
    fn visit_mut_compound_selector(&mut self, node: &mut CompoundSelector) {
        <V as VisitMut>::visit_mut_compound_selector(&mut **self, node)
    }

    #[inline]
    fn visit_mut_compound_selector_list(&mut self, node: &mut CompoundSelectorList) {
        <V as VisitMut>::visit_mut_compound_selector_list(&mut **self, node)
    }

    #[inline]
    fn visit_mut_compound_selectors(&mut self, node: &mut Vec<CompoundSelector>) {
        <V as VisitMut>::visit_mut_compound_selectors(&mut **self, node)
    }

    #[inline]
    fn visit_mut_container_condition(&mut self, node: &mut ContainerCondition) {
        <V as VisitMut>::visit_mut_container_condition(&mut **self, node)
    }

    #[inline]
    fn visit_mut_container_name(&mut self, node: &mut ContainerName) {
        <V as VisitMut>::visit_mut_container_name(&mut **self, node)
    }

    #[inline]
    fn visit_mut_container_query(&mut self, node: &mut ContainerQuery) {
        <V as VisitMut>::visit_mut_container_query(&mut **self, node)
    }

    #[inline]
    fn visit_mut_container_query_and(&mut self, node: &mut ContainerQueryAnd) {
        <V as VisitMut>::visit_mut_container_query_and(&mut **self, node)
    }

    #[inline]
    fn visit_mut_container_query_not(&mut self, node: &mut ContainerQueryNot) {
        <V as VisitMut>::visit_mut_container_query_not(&mut **self, node)
    }

    #[inline]
    fn visit_mut_container_query_or(&mut self, node: &mut ContainerQueryOr) {
        <V as VisitMut>::visit_mut_container_query_or(&mut **self, node)
    }

    #[inline]
    fn visit_mut_container_query_type(&mut self, node: &mut ContainerQueryType) {
        <V as VisitMut>::visit_mut_container_query_type(&mut **self, node)
    }

    #[inline]
    fn visit_mut_container_query_types(&mut self, node: &mut Vec<ContainerQueryType>) {
        <V as VisitMut>::visit_mut_container_query_types(&mut **self, node)
    }

    #[inline]
    fn visit_mut_custom_highlight_name(&mut self, node: &mut CustomHighlightName) {
        <V as VisitMut>::visit_mut_custom_highlight_name(&mut **self, node)
    }

    #[inline]
    fn visit_mut_custom_ident(&mut self, node: &mut CustomIdent) {
        <V as VisitMut>::visit_mut_custom_ident(&mut **self, node)
    }

    #[inline]
    fn visit_mut_custom_idents(&mut self, node: &mut Vec<CustomIdent>) {
        <V as VisitMut>::visit_mut_custom_idents(&mut **self, node)
    }

    #[inline]
    fn visit_mut_custom_media_query(&mut self, node: &mut CustomMediaQuery) {
        <V as VisitMut>::visit_mut_custom_media_query(&mut **self, node)
    }

    #[inline]
    fn visit_mut_custom_media_query_media_type(&mut self, node: &mut CustomMediaQueryMediaType) {
        <V as VisitMut>::visit_mut_custom_media_query_media_type(&mut **self, node)
    }

    #[inline]
    fn visit_mut_custom_property_name(&mut self, node: &mut CustomPropertyName) {
        <V as VisitMut>::visit_mut_custom_property_name(&mut **self, node)
    }

    #[inline]
    fn visit_mut_dashed_ident(&mut self, node: &mut DashedIdent) {
        <V as VisitMut>::visit_mut_dashed_ident(&mut **self, node)
    }

    #[inline]
    fn visit_mut_declaration(&mut self, node: &mut Declaration) {
        <V as VisitMut>::visit_mut_declaration(&mut **self, node)
    }

    #[inline]
    fn visit_mut_declaration_name(&mut self, node: &mut DeclarationName) {
        <V as VisitMut>::visit_mut_declaration_name(&mut **self, node)
    }

    #[inline]
    fn visit_mut_declaration_or_at_rule(&mut self, node: &mut DeclarationOrAtRule) {
        <V as VisitMut>::visit_mut_declaration_or_at_rule(&mut **self, node)
    }

    #[inline]
    fn visit_mut_delimiter(&mut self, node: &mut Delimiter) {
        <V as VisitMut>::visit_mut_delimiter(&mut **self, node)
    }

    #[inline]
    fn visit_mut_delimiter_value(&mut self, node: &mut DelimiterValue) {
        <V as VisitMut>::visit_mut_delimiter_value(&mut **self, node)
    }

    #[inline]
    fn visit_mut_dimension(&mut self, node: &mut Dimension) {
        <V as VisitMut>::visit_mut_dimension(&mut **self, node)
    }

    #[inline]
    fn visit_mut_dimension_token(&mut self, node: &mut DimensionToken) {
        <V as VisitMut>::visit_mut_dimension_token(&mut **self, node)
    }

    #[inline]
    fn visit_mut_document_prelude(&mut self, node: &mut DocumentPrelude) {
        <V as VisitMut>::visit_mut_document_prelude(&mut **self, node)
    }

    #[inline]
    fn visit_mut_document_prelude_matching_function(
        &mut self,
        node: &mut DocumentPreludeMatchingFunction,
    ) {
        <V as VisitMut>::visit_mut_document_prelude_matching_function(&mut **self, node)
    }

    #[inline]
    fn visit_mut_document_prelude_matching_functions(
        &mut self,
        node: &mut Vec<DocumentPreludeMatchingFunction>,
    ) {
        <V as VisitMut>::visit_mut_document_prelude_matching_functions(&mut **self, node)
    }

    #[inline]
    fn visit_mut_extension_name(&mut self, node: &mut ExtensionName) {
        <V as VisitMut>::visit_mut_extension_name(&mut **self, node)
    }

    #[inline]
    fn visit_mut_family_name(&mut self, node: &mut FamilyName) {
        <V as VisitMut>::visit_mut_family_name(&mut **self, node)
    }

    #[inline]
    fn visit_mut_family_names(&mut self, node: &mut Vec<FamilyName>) {
        <V as VisitMut>::visit_mut_family_names(&mut **self, node)
    }

    #[inline]
    fn visit_mut_flex(&mut self, node: &mut Flex) {
        <V as VisitMut>::visit_mut_flex(&mut **self, node)
    }

    #[inline]
    fn visit_mut_font_feature_values_prelude(&mut self, node: &mut FontFeatureValuesPrelude) {
        <V as VisitMut>::visit_mut_font_feature_values_prelude(&mut **self, node)
    }

    #[inline]
    fn visit_mut_forgiving_complex_selector(&mut self, node: &mut ForgivingComplexSelector) {
        <V as VisitMut>::visit_mut_forgiving_complex_selector(&mut **self, node)
    }

    #[inline]
    fn visit_mut_forgiving_complex_selectors(&mut self, node: &mut Vec<ForgivingComplexSelector>) {
        <V as VisitMut>::visit_mut_forgiving_complex_selectors(&mut **self, node)
    }

    #[inline]
    fn visit_mut_forgiving_relative_selector(&mut self, node: &mut ForgivingRelativeSelector) {
        <V as VisitMut>::visit_mut_forgiving_relative_selector(&mut **self, node)
    }

    #[inline]
    fn visit_mut_forgiving_relative_selector_list(
        &mut self,
        node: &mut ForgivingRelativeSelectorList,
    ) {
        <V as VisitMut>::visit_mut_forgiving_relative_selector_list(&mut **self, node)
    }

    #[inline]
    fn visit_mut_forgiving_relative_selectors(
        &mut self,
        node: &mut Vec<ForgivingRelativeSelector>,
    ) {
        <V as VisitMut>::visit_mut_forgiving_relative_selectors(&mut **self, node)
    }

    #[inline]
    fn visit_mut_forgiving_selector_list(&mut self, node: &mut ForgivingSelectorList) {
        <V as VisitMut>::visit_mut_forgiving_selector_list(&mut **self, node)
    }

    #[inline]
    fn visit_mut_frequency(&mut self, node: &mut Frequency) {
        <V as VisitMut>::visit_mut_frequency(&mut **self, node)
    }

    #[inline]
    fn visit_mut_frequency_percentage(&mut self, node: &mut FrequencyPercentage) {
        <V as VisitMut>::visit_mut_frequency_percentage(&mut **self, node)
    }

    #[inline]
    fn visit_mut_function(&mut self, node: &mut Function) {
        <V as VisitMut>::visit_mut_function(&mut **self, node)
    }

    #[inline]
    fn visit_mut_function_name(&mut self, node: &mut FunctionName) {
        <V as VisitMut>::visit_mut_function_name(&mut **self, node)
    }

    #[inline]
    fn visit_mut_general_enclosed(&mut self, node: &mut GeneralEnclosed) {
        <V as VisitMut>::visit_mut_general_enclosed(&mut **self, node)
    }

    #[inline]
    fn visit_mut_hex_color(&mut self, node: &mut HexColor) {
        <V as VisitMut>::visit_mut_hex_color(&mut **self, node)
    }

    #[inline]
    fn visit_mut_hue(&mut self, node: &mut Hue) {
        <V as VisitMut>::visit_mut_hue(&mut **self, node)
    }

    #[inline]
    fn visit_mut_id_selector(&mut self, node: &mut IdSelector) {
        <V as VisitMut>::visit_mut_id_selector(&mut **self, node)
    }

    #[inline]
    fn visit_mut_ident(&mut self, node: &mut Ident) {
        <V as VisitMut>::visit_mut_ident(&mut **self, node)
    }

    #[inline]
    fn visit_mut_idents(&mut self, node: &mut Vec<Ident>) {
        <V as VisitMut>::visit_mut_idents(&mut **self, node)
    }

    #[inline]
    fn visit_mut_import_conditions(&mut self, node: &mut ImportConditions) {
        <V as VisitMut>::visit_mut_import_conditions(&mut **self, node)
    }

    #[inline]
    fn visit_mut_import_href(&mut self, node: &mut ImportHref) {
        <V as VisitMut>::visit_mut_import_href(&mut **self, node)
    }

    #[inline]
    fn visit_mut_import_layer_name(&mut self, node: &mut ImportLayerName) {
        <V as VisitMut>::visit_mut_import_layer_name(&mut **self, node)
    }

    #[inline]
    fn visit_mut_import_prelude(&mut self, node: &mut ImportPrelude) {
        <V as VisitMut>::visit_mut_import_prelude(&mut **self, node)
    }

    #[inline]
    fn visit_mut_important_flag(&mut self, node: &mut ImportantFlag) {
        <V as VisitMut>::visit_mut_important_flag(&mut **self, node)
    }

    #[inline]
    fn visit_mut_integer(&mut self, node: &mut Integer) {
        <V as VisitMut>::visit_mut_integer(&mut **self, node)
    }

    #[inline]
    fn visit_mut_keyframe_block(&mut self, node: &mut KeyframeBlock) {
        <V as VisitMut>::visit_mut_keyframe_block(&mut **self, node)
    }

    #[inline]
    fn visit_mut_keyframe_selector(&mut self, node: &mut KeyframeSelector) {
        <V as VisitMut>::visit_mut_keyframe_selector(&mut **self, node)
    }

    #[inline]
    fn visit_mut_keyframe_selectors(&mut self, node: &mut Vec<KeyframeSelector>) {
        <V as VisitMut>::visit_mut_keyframe_selectors(&mut **self, node)
    }

    #[inline]
    fn visit_mut_keyframes_name(&mut self, node: &mut KeyframesName) {
        <V as VisitMut>::visit_mut_keyframes_name(&mut **self, node)
    }

    #[inline]
    fn visit_mut_keyframes_pseudo_function(&mut self, node: &mut KeyframesPseudoFunction) {
        <V as VisitMut>::visit_mut_keyframes_pseudo_function(&mut **self, node)
    }

    #[inline]
    fn visit_mut_keyframes_pseudo_prefix(&mut self, node: &mut KeyframesPseudoPrefix) {
        <V as VisitMut>::visit_mut_keyframes_pseudo_prefix(&mut **self, node)
    }

    #[inline]
    fn visit_mut_layer_name(&mut self, node: &mut LayerName) {
        <V as VisitMut>::visit_mut_layer_name(&mut **self, node)
    }

    #[inline]
    fn visit_mut_layer_name_list(&mut self, node: &mut LayerNameList) {
        <V as VisitMut>::visit_mut_layer_name_list(&mut **self, node)
    }

    #[inline]
    fn visit_mut_layer_names(&mut self, node: &mut Vec<LayerName>) {
        <V as VisitMut>::visit_mut_layer_names(&mut **self, node)
    }

    #[inline]
    fn visit_mut_layer_prelude(&mut self, node: &mut LayerPrelude) {
        <V as VisitMut>::visit_mut_layer_prelude(&mut **self, node)
    }

    #[inline]
    fn visit_mut_length(&mut self, node: &mut Length) {
        <V as VisitMut>::visit_mut_length(&mut **self, node)
    }

    #[inline]
    fn visit_mut_length_percentage(&mut self, node: &mut LengthPercentage) {
        <V as VisitMut>::visit_mut_length_percentage(&mut **self, node)
    }

    #[inline]
    fn visit_mut_list_of_component_values(&mut self, node: &mut ListOfComponentValues) {
        <V as VisitMut>::visit_mut_list_of_component_values(&mut **self, node)
    }

    #[inline]
    fn visit_mut_media_and(&mut self, node: &mut MediaAnd) {
        <V as VisitMut>::visit_mut_media_and(&mut **self, node)
    }

    #[inline]
    fn visit_mut_media_condition(&mut self, node: &mut MediaCondition) {
        <V as VisitMut>::visit_mut_media_condition(&mut **self, node)
    }

    #[inline]
    fn visit_mut_media_condition_all_type(&mut self, node: &mut MediaConditionAllType) {
        <V as VisitMut>::visit_mut_media_condition_all_type(&mut **self, node)
    }

    #[inline]
    fn visit_mut_media_condition_all_types(&mut self, node: &mut Vec<MediaConditionAllType>) {
        <V as VisitMut>::visit_mut_media_condition_all_types(&mut **self, node)
    }

    #[inline]
    fn visit_mut_media_condition_type(&mut self, node: &mut MediaConditionType) {
        <V as VisitMut>::visit_mut_media_condition_type(&mut **self, node)
    }

    #[inline]
    fn visit_mut_media_condition_without_or(&mut self, node: &mut MediaConditionWithoutOr) {
        <V as VisitMut>::visit_mut_media_condition_without_or(&mut **self, node)
    }

    #[inline]
    fn visit_mut_media_condition_without_or_type(
        &mut self,
        node: &mut MediaConditionWithoutOrType,
    ) {
        <V as VisitMut>::visit_mut_media_condition_without_or_type(&mut **self, node)
    }

    #[inline]
    fn visit_mut_media_condition_without_or_types(
        &mut self,
        node: &mut Vec<MediaConditionWithoutOrType>,
    ) {
        <V as VisitMut>::visit_mut_media_condition_without_or_types(&mut **self, node)
    }

    #[inline]
    fn visit_mut_media_feature(&mut self, node: &mut MediaFeature) {
        <V as VisitMut>::visit_mut_media_feature(&mut **self, node)
    }

    #[inline]
    fn visit_mut_media_feature_boolean(&mut self, node: &mut MediaFeatureBoolean) {
        <V as VisitMut>::visit_mut_media_feature_boolean(&mut **self, node)
    }

    #[inline]
    fn visit_mut_media_feature_name(&mut self, node: &mut MediaFeatureName) {
        <V as VisitMut>::visit_mut_media_feature_name(&mut **self, node)
    }

    #[inline]
    fn visit_mut_media_feature_plain(&mut self, node: &mut MediaFeaturePlain) {
        <V as VisitMut>::visit_mut_media_feature_plain(&mut **self, node)
    }

    #[inline]
    fn visit_mut_media_feature_range(&mut self, node: &mut MediaFeatureRange) {
        <V as VisitMut>::visit_mut_media_feature_range(&mut **self, node)
    }

    #[inline]
    fn visit_mut_media_feature_range_comparison(&mut self, node: &mut MediaFeatureRangeComparison) {
        <V as VisitMut>::visit_mut_media_feature_range_comparison(&mut **self, node)
    }

    #[inline]
    fn visit_mut_media_feature_range_interval(&mut self, node: &mut MediaFeatureRangeInterval) {
        <V as VisitMut>::visit_mut_media_feature_range_interval(&mut **self, node)
    }

    #[inline]
    fn visit_mut_media_feature_value(&mut self, node: &mut MediaFeatureValue) {
        <V as VisitMut>::visit_mut_media_feature_value(&mut **self, node)
    }

    #[inline]
    fn visit_mut_media_in_parens(&mut self, node: &mut MediaInParens) {
        <V as VisitMut>::visit_mut_media_in_parens(&mut **self, node)
    }

    #[inline]
    fn visit_mut_media_not(&mut self, node: &mut MediaNot) {
        <V as VisitMut>::visit_mut_media_not(&mut **self, node)
    }

    #[inline]
    fn visit_mut_media_or(&mut self, node: &mut MediaOr) {
        <V as VisitMut>::visit_mut_media_or(&mut **self, node)
    }

    #[inline]
    fn visit_mut_media_query(&mut self, node: &mut MediaQuery) {
        <V as VisitMut>::visit_mut_media_query(&mut **self, node)
    }

    #[inline]
    fn visit_mut_media_query_list(&mut self, node: &mut MediaQueryList) {
        <V as VisitMut>::visit_mut_media_query_list(&mut **self, node)
    }

    #[inline]
    fn visit_mut_media_querys(&mut self, node: &mut Vec<MediaQuery>) {
        <V as VisitMut>::visit_mut_media_querys(&mut **self, node)
    }

    #[inline]
    fn visit_mut_media_type(&mut self, node: &mut MediaType) {
        <V as VisitMut>::visit_mut_media_type(&mut **self, node)
    }

    #[inline]
    fn visit_mut_named_namespace(&mut self, node: &mut NamedNamespace) {
        <V as VisitMut>::visit_mut_named_namespace(&mut **self, node)
    }

    #[inline]
    fn visit_mut_namespace(&mut self, node: &mut Namespace) {
        <V as VisitMut>::visit_mut_namespace(&mut **self, node)
    }

    #[inline]
    fn visit_mut_namespace_prefix(&mut self, node: &mut NamespacePrefix) {
        <V as VisitMut>::visit_mut_namespace_prefix(&mut **self, node)
    }

    #[inline]
    fn visit_mut_namespace_prelude(&mut self, node: &mut NamespacePrelude) {
        <V as VisitMut>::visit_mut_namespace_prelude(&mut **self, node)
    }

    #[inline]
    fn visit_mut_namespace_prelude_uri(&mut self, node: &mut NamespacePreludeUri) {
        <V as VisitMut>::visit_mut_namespace_prelude_uri(&mut **self, node)
    }

    #[inline]
    fn visit_mut_nesting_selector(&mut self, node: &mut NestingSelector) {
        <V as VisitMut>::visit_mut_nesting_selector(&mut **self, node)
    }

    #[inline]
    fn visit_mut_number(&mut self, node: &mut Number) {
        <V as VisitMut>::visit_mut_number(&mut **self, node)
    }

    #[inline]
    fn visit_mut_number_type(&mut self, node: &mut NumberType) {
        <V as VisitMut>::visit_mut_number_type(&mut **self, node)
    }

    #[inline]
    fn visit_mut_opt_at_rule_prelude(&mut self, node: &mut Option<Box<AtRulePrelude>>) {
        <V as VisitMut>::visit_mut_opt_at_rule_prelude(&mut **self, node)
    }

    #[inline]
    fn visit_mut_opt_atom(&mut self, node: &mut Option<swc_atoms::Atom>) {
        <V as VisitMut>::visit_mut_opt_atom(&mut **self, node)
    }

    #[inline]
    fn visit_mut_opt_attribute_selector_matcher(
        &mut self,
        node: &mut Option<AttributeSelectorMatcher>,
    ) {
        <V as VisitMut>::visit_mut_opt_attribute_selector_matcher(&mut **self, node)
    }

    #[inline]
    fn visit_mut_opt_attribute_selector_modifier(
        &mut self,
        node: &mut Option<AttributeSelectorModifier>,
    ) {
        <V as VisitMut>::visit_mut_opt_attribute_selector_modifier(&mut **self, node)
    }

    #[inline]
    fn visit_mut_opt_attribute_selector_value(
        &mut self,
        node: &mut Option<AttributeSelectorValue>,
    ) {
        <V as VisitMut>::visit_mut_opt_attribute_selector_value(&mut **self, node)
    }

    #[inline]
    fn visit_mut_opt_combinator(&mut self, node: &mut Option<Combinator>) {
        <V as VisitMut>::visit_mut_opt_combinator(&mut **self, node)
    }

    #[inline]
    fn visit_mut_opt_container_name(&mut self, node: &mut Option<ContainerName>) {
        <V as VisitMut>::visit_mut_opt_container_name(&mut **self, node)
    }

    #[inline]
    fn visit_mut_opt_forgiving_selector_list(&mut self, node: &mut Option<ForgivingSelectorList>) {
        <V as VisitMut>::visit_mut_opt_forgiving_selector_list(&mut **self, node)
    }

    #[inline]
    fn visit_mut_opt_function(&mut self, node: &mut Option<Box<Function>>) {
        <V as VisitMut>::visit_mut_opt_function(&mut **self, node)
    }

    #[inline]
    fn visit_mut_opt_ident(&mut self, node: &mut Option<Ident>) {
        <V as VisitMut>::visit_mut_opt_ident(&mut **self, node)
    }

    #[inline]
    fn visit_mut_opt_import_conditions(&mut self, node: &mut Option<Box<ImportConditions>>) {
        <V as VisitMut>::visit_mut_opt_import_conditions(&mut **self, node)
    }

    #[inline]
    fn visit_mut_opt_import_layer_name(&mut self, node: &mut Option<Box<ImportLayerName>>) {
        <V as VisitMut>::visit_mut_opt_import_layer_name(&mut **self, node)
    }

    #[inline]
    fn visit_mut_opt_important_flag(&mut self, node: &mut Option<ImportantFlag>) {
        <V as VisitMut>::visit_mut_opt_important_flag(&mut **self, node)
    }

    #[inline]
    fn visit_mut_opt_media_condition_type(&mut self, node: &mut Option<Box<MediaConditionType>>) {
        <V as VisitMut>::visit_mut_opt_media_condition_type(&mut **self, node)
    }

    #[inline]
    fn visit_mut_opt_media_query_list(&mut self, node: &mut Option<Box<MediaQueryList>>) {
        <V as VisitMut>::visit_mut_opt_media_query_list(&mut **self, node)
    }

    #[inline]
    fn visit_mut_opt_media_type(&mut self, node: &mut Option<MediaType>) {
        <V as VisitMut>::visit_mut_opt_media_type(&mut **self, node)
    }

    #[inline]
    fn visit_mut_opt_namespace(&mut self, node: &mut Option<Namespace>) {
        <V as VisitMut>::visit_mut_opt_namespace(&mut **self, node)
    }

    #[inline]
    fn visit_mut_opt_namespace_prefix(&mut self, node: &mut Option<NamespacePrefix>) {
        <V as VisitMut>::visit_mut_opt_namespace_prefix(&mut **self, node)
    }

    #[inline]
    fn visit_mut_opt_nesting_selector(&mut self, node: &mut Option<NestingSelector>) {
        <V as VisitMut>::visit_mut_opt_nesting_selector(&mut **self, node)
    }

    #[inline]
    fn visit_mut_opt_number(&mut self, node: &mut Option<Number>) {
        <V as VisitMut>::visit_mut_opt_number(&mut **self, node)
    }

    #[inline]
    fn visit_mut_opt_page_selector_pseudos(&mut self, node: &mut Option<Vec<PageSelectorPseudo>>) {
        <V as VisitMut>::visit_mut_opt_page_selector_pseudos(&mut **self, node)
    }

    #[inline]
    fn visit_mut_opt_page_selector_type(&mut self, node: &mut Option<PageSelectorType>) {
        <V as VisitMut>::visit_mut_opt_page_selector_type(&mut **self, node)
    }

    #[inline]
    fn visit_mut_opt_pseudo_class_selector_childrens(
        &mut self,
        node: &mut Option<Vec<PseudoClassSelectorChildren>>,
    ) {
        <V as VisitMut>::visit_mut_opt_pseudo_class_selector_childrens(&mut **self, node)
    }

    #[inline]
    fn visit_mut_opt_pseudo_element_selector_childrens(
        &mut self,
        node: &mut Option<Vec<PseudoElementSelectorChildren>>,
    ) {
        <V as VisitMut>::visit_mut_opt_pseudo_element_selector_childrens(&mut **self, node)
    }

    #[inline]
    fn visit_mut_opt_simple_block(&mut self, node: &mut Option<SimpleBlock>) {
        <V as VisitMut>::visit_mut_opt_simple_block(&mut **self, node)
    }

    #[inline]
    fn visit_mut_opt_type_selector(&mut self, node: &mut Option<Box<TypeSelector>>) {
        <V as VisitMut>::visit_mut_opt_type_selector(&mut **self, node)
    }

    #[inline]
    fn visit_mut_opt_url_modifiers(&mut self, node: &mut Option<Vec<UrlModifier>>) {
        <V as VisitMut>::visit_mut_opt_url_modifiers(&mut **self, node)
    }

    #[inline]
    fn visit_mut_opt_url_value(&mut self, node: &mut Option<Box<UrlValue>>) {
        <V as VisitMut>::visit_mut_opt_url_value(&mut **self, node)
    }

    #[inline]
    fn visit_mut_page_selector(&mut self, node: &mut PageSelector) {
        <V as VisitMut>::visit_mut_page_selector(&mut **self, node)
    }

    #[inline]
    fn visit_mut_page_selector_list(&mut self, node: &mut PageSelectorList) {
        <V as VisitMut>::visit_mut_page_selector_list(&mut **self, node)
    }

    #[inline]
    fn visit_mut_page_selector_pseudo(&mut self, node: &mut PageSelectorPseudo) {
        <V as VisitMut>::visit_mut_page_selector_pseudo(&mut **self, node)
    }

    #[inline]
    fn visit_mut_page_selector_pseudos(&mut self, node: &mut Vec<PageSelectorPseudo>) {
        <V as VisitMut>::visit_mut_page_selector_pseudos(&mut **self, node)
    }

    #[inline]
    fn visit_mut_page_selector_type(&mut self, node: &mut PageSelectorType) {
        <V as VisitMut>::visit_mut_page_selector_type(&mut **self, node)
    }

    #[inline]
    fn visit_mut_page_selectors(&mut self, node: &mut Vec<PageSelector>) {
        <V as VisitMut>::visit_mut_page_selectors(&mut **self, node)
    }

    #[inline]
    fn visit_mut_percentage(&mut self, node: &mut Percentage) {
        <V as VisitMut>::visit_mut_percentage(&mut **self, node)
    }

    #[inline]
    fn visit_mut_pseudo_class_selector(&mut self, node: &mut PseudoClassSelector) {
        <V as VisitMut>::visit_mut_pseudo_class_selector(&mut **self, node)
    }

    #[inline]
    fn visit_mut_pseudo_class_selector_children(&mut self, node: &mut PseudoClassSelectorChildren) {
        <V as VisitMut>::visit_mut_pseudo_class_selector_children(&mut **self, node)
    }

    #[inline]
    fn visit_mut_pseudo_class_selector_childrens(
        &mut self,
        node: &mut Vec<PseudoClassSelectorChildren>,
    ) {
        <V as VisitMut>::visit_mut_pseudo_class_selector_childrens(&mut **self, node)
    }

    #[inline]
    fn visit_mut_pseudo_element_selector(&mut self, node: &mut PseudoElementSelector) {
        <V as VisitMut>::visit_mut_pseudo_element_selector(&mut **self, node)
    }

    #[inline]
    fn visit_mut_pseudo_element_selector_children(
        &mut self,
        node: &mut PseudoElementSelectorChildren,
    ) {
        <V as VisitMut>::visit_mut_pseudo_element_selector_children(&mut **self, node)
    }

    #[inline]
    fn visit_mut_pseudo_element_selector_childrens(
        &mut self,
        node: &mut Vec<PseudoElementSelectorChildren>,
    ) {
        <V as VisitMut>::visit_mut_pseudo_element_selector_childrens(&mut **self, node)
    }

    #[inline]
    fn visit_mut_qualified_rule(&mut self, node: &mut QualifiedRule) {
        <V as VisitMut>::visit_mut_qualified_rule(&mut **self, node)
    }

    #[inline]
    fn visit_mut_qualified_rule_prelude(&mut self, node: &mut QualifiedRulePrelude) {
        <V as VisitMut>::visit_mut_qualified_rule_prelude(&mut **self, node)
    }

    #[inline]
    fn visit_mut_query_in_parens(&mut self, node: &mut QueryInParens) {
        <V as VisitMut>::visit_mut_query_in_parens(&mut **self, node)
    }

    #[inline]
    fn visit_mut_ratio(&mut self, node: &mut Ratio) {
        <V as VisitMut>::visit_mut_ratio(&mut **self, node)
    }

    #[inline]
    fn visit_mut_relative_selector(&mut self, node: &mut RelativeSelector) {
        <V as VisitMut>::visit_mut_relative_selector(&mut **self, node)
    }

    #[inline]
    fn visit_mut_relative_selector_list(&mut self, node: &mut RelativeSelectorList) {
        <V as VisitMut>::visit_mut_relative_selector_list(&mut **self, node)
    }

    #[inline]
    fn visit_mut_relative_selectors(&mut self, node: &mut Vec<RelativeSelector>) {
        <V as VisitMut>::visit_mut_relative_selectors(&mut **self, node)
    }

    #[inline]
    fn visit_mut_resolution(&mut self, node: &mut Resolution) {
        <V as VisitMut>::visit_mut_resolution(&mut **self, node)
    }

    #[inline]
    fn visit_mut_rule(&mut self, node: &mut Rule) {
        <V as VisitMut>::visit_mut_rule(&mut **self, node)
    }

    #[inline]
    fn visit_mut_rules(&mut self, node: &mut Vec<Rule>) {
        <V as VisitMut>::visit_mut_rules(&mut **self, node)
    }

    #[inline]
    fn visit_mut_scope_range(&mut self, node: &mut ScopeRange) {
        <V as VisitMut>::visit_mut_scope_range(&mut **self, node)
    }

    #[inline]
    fn visit_mut_selector_list(&mut self, node: &mut SelectorList) {
        <V as VisitMut>::visit_mut_selector_list(&mut **self, node)
    }

    #[inline]
    fn visit_mut_sequence_of_custom_idents(&mut self, node: &mut SequenceOfCustomIdents) {
        <V as VisitMut>::visit_mut_sequence_of_custom_idents(&mut **self, node)
    }

    #[inline]
    fn visit_mut_simple_block(&mut self, node: &mut SimpleBlock) {
        <V as VisitMut>::visit_mut_simple_block(&mut **self, node)
    }

    #[inline]
    fn visit_mut_size_feature(&mut self, node: &mut SizeFeature) {
        <V as VisitMut>::visit_mut_size_feature(&mut **self, node)
    }

    #[inline]
    fn visit_mut_size_feature_boolean(&mut self, node: &mut SizeFeatureBoolean) {
        <V as VisitMut>::visit_mut_size_feature_boolean(&mut **self, node)
    }

    #[inline]
    fn visit_mut_size_feature_name(&mut self, node: &mut SizeFeatureName) {
        <V as VisitMut>::visit_mut_size_feature_name(&mut **self, node)
    }

    #[inline]
    fn visit_mut_size_feature_plain(&mut self, node: &mut SizeFeaturePlain) {
        <V as VisitMut>::visit_mut_size_feature_plain(&mut **self, node)
    }

    #[inline]
    fn visit_mut_size_feature_range(&mut self, node: &mut SizeFeatureRange) {
        <V as VisitMut>::visit_mut_size_feature_range(&mut **self, node)
    }

    #[inline]
    fn visit_mut_size_feature_range_comparison(&mut self, node: &mut SizeFeatureRangeComparison) {
        <V as VisitMut>::visit_mut_size_feature_range_comparison(&mut **self, node)
    }

    #[inline]
    fn visit_mut_size_feature_range_interval(&mut self, node: &mut SizeFeatureRangeInterval) {
        <V as VisitMut>::visit_mut_size_feature_range_interval(&mut **self, node)
    }

    #[inline]
    fn visit_mut_size_feature_value(&mut self, node: &mut SizeFeatureValue) {
        <V as VisitMut>::visit_mut_size_feature_value(&mut **self, node)
    }

    #[inline]
    fn visit_mut_span(&mut self, node: &mut swc_common::Span) {
        <V as VisitMut>::visit_mut_span(&mut **self, node)
    }

    #[inline]
    fn visit_mut_str(&mut self, node: &mut Str) {
        <V as VisitMut>::visit_mut_str(&mut **self, node)
    }

    #[inline]
    fn visit_mut_style_block(&mut self, node: &mut StyleBlock) {
        <V as VisitMut>::visit_mut_style_block(&mut **self, node)
    }

    #[inline]
    fn visit_mut_stylesheet(&mut self, node: &mut Stylesheet) {
        <V as VisitMut>::visit_mut_stylesheet(&mut **self, node)
    }

    #[inline]
    fn visit_mut_subclass_selector(&mut self, node: &mut SubclassSelector) {
        <V as VisitMut>::visit_mut_subclass_selector(&mut **self, node)
    }

    #[inline]
    fn visit_mut_subclass_selectors(&mut self, node: &mut Vec<SubclassSelector>) {
        <V as VisitMut>::visit_mut_subclass_selectors(&mut **self, node)
    }

    #[inline]
    fn visit_mut_supports_and(&mut self, node: &mut SupportsAnd) {
        <V as VisitMut>::visit_mut_supports_and(&mut **self, node)
    }

    #[inline]
    fn visit_mut_supports_condition(&mut self, node: &mut SupportsCondition) {
        <V as VisitMut>::visit_mut_supports_condition(&mut **self, node)
    }

    #[inline]
    fn visit_mut_supports_condition_type(&mut self, node: &mut SupportsConditionType) {
        <V as VisitMut>::visit_mut_supports_condition_type(&mut **self, node)
    }

    #[inline]
    fn visit_mut_supports_condition_types(&mut self, node: &mut Vec<SupportsConditionType>) {
        <V as VisitMut>::visit_mut_supports_condition_types(&mut **self, node)
    }

    #[inline]
    fn visit_mut_supports_feature(&mut self, node: &mut SupportsFeature) {
        <V as VisitMut>::visit_mut_supports_feature(&mut **self, node)
    }

    #[inline]
    fn visit_mut_supports_in_parens(&mut self, node: &mut SupportsInParens) {
        <V as VisitMut>::visit_mut_supports_in_parens(&mut **self, node)
    }

    #[inline]
    fn visit_mut_supports_not(&mut self, node: &mut SupportsNot) {
        <V as VisitMut>::visit_mut_supports_not(&mut **self, node)
    }

    #[inline]
    fn visit_mut_supports_or(&mut self, node: &mut SupportsOr) {
        <V as VisitMut>::visit_mut_supports_or(&mut **self, node)
    }

    #[inline]
    fn visit_mut_tag_name_selector(&mut self, node: &mut TagNameSelector) {
        <V as VisitMut>::visit_mut_tag_name_selector(&mut **self, node)
    }

    #[inline]
    fn visit_mut_time(&mut self, node: &mut Time) {
        <V as VisitMut>::visit_mut_time(&mut **self, node)
    }

    #[inline]
    fn visit_mut_time_percentage(&mut self, node: &mut TimePercentage) {
        <V as VisitMut>::visit_mut_time_percentage(&mut **self, node)
    }

    #[inline]
    fn visit_mut_token(&mut self, node: &mut Token) {
        <V as VisitMut>::visit_mut_token(&mut **self, node)
    }

    #[inline]
    fn visit_mut_token_and_span(&mut self, node: &mut TokenAndSpan) {
        <V as VisitMut>::visit_mut_token_and_span(&mut **self, node)
    }

    #[inline]
    fn visit_mut_type_selector(&mut self, node: &mut TypeSelector) {
        <V as VisitMut>::visit_mut_type_selector(&mut **self, node)
    }

    #[inline]
    fn visit_mut_unicode_range(&mut self, node: &mut UnicodeRange) {
        <V as VisitMut>::visit_mut_unicode_range(&mut **self, node)
    }

    #[inline]
    fn visit_mut_universal_selector(&mut self, node: &mut UniversalSelector) {
        <V as VisitMut>::visit_mut_universal_selector(&mut **self, node)
    }

    #[inline]
    fn visit_mut_unknown_dimension(&mut self, node: &mut UnknownDimension) {
        <V as VisitMut>::visit_mut_unknown_dimension(&mut **self, node)
    }

    #[inline]
    fn visit_mut_url(&mut self, node: &mut Url) {
        <V as VisitMut>::visit_mut_url(&mut **self, node)
    }

    #[inline]
    fn visit_mut_url_key_value(&mut self, node: &mut UrlKeyValue) {
        <V as VisitMut>::visit_mut_url_key_value(&mut **self, node)
    }

    #[inline]
    fn visit_mut_url_modifier(&mut self, node: &mut UrlModifier) {
        <V as VisitMut>::visit_mut_url_modifier(&mut **self, node)
    }

    #[inline]
    fn visit_mut_url_modifiers(&mut self, node: &mut Vec<UrlModifier>) {
        <V as VisitMut>::visit_mut_url_modifiers(&mut **self, node)
    }

    #[inline]
    fn visit_mut_url_value(&mut self, node: &mut UrlValue) {
        <V as VisitMut>::visit_mut_url_value(&mut **self, node)
    }

    #[inline]
    fn visit_mut_url_value_raw(&mut self, node: &mut UrlValueRaw) {
        <V as VisitMut>::visit_mut_url_value_raw(&mut **self, node)
    }

    #[inline]
    fn visit_mut_wq_name(&mut self, node: &mut WqName) {
        <V as VisitMut>::visit_mut_wq_name(&mut **self, node)
    }
}
impl<V> VisitMut for Box<V>
where
    V: ?Sized + VisitMut,
{
    #[inline]
    fn visit_mut_absolute_color_base(&mut self, node: &mut AbsoluteColorBase) {
        <V as VisitMut>::visit_mut_absolute_color_base(&mut **self, node)
    }

    #[inline]
    fn visit_mut_alpha_value(&mut self, node: &mut AlphaValue) {
        <V as VisitMut>::visit_mut_alpha_value(&mut **self, node)
    }

    #[inline]
    fn visit_mut_an_plus_b(&mut self, node: &mut AnPlusB) {
        <V as VisitMut>::visit_mut_an_plus_b(&mut **self, node)
    }

    #[inline]
    fn visit_mut_an_plus_b_notation(&mut self, node: &mut AnPlusBNotation) {
        <V as VisitMut>::visit_mut_an_plus_b_notation(&mut **self, node)
    }

    #[inline]
    fn visit_mut_angle(&mut self, node: &mut Angle) {
        <V as VisitMut>::visit_mut_angle(&mut **self, node)
    }

    #[inline]
    fn visit_mut_angle_percentage(&mut self, node: &mut AnglePercentage) {
        <V as VisitMut>::visit_mut_angle_percentage(&mut **self, node)
    }

    #[inline]
    fn visit_mut_any_namespace(&mut self, node: &mut AnyNamespace) {
        <V as VisitMut>::visit_mut_any_namespace(&mut **self, node)
    }

    #[inline]
    fn visit_mut_at_rule(&mut self, node: &mut AtRule) {
        <V as VisitMut>::visit_mut_at_rule(&mut **self, node)
    }

    #[inline]
    fn visit_mut_at_rule_name(&mut self, node: &mut AtRuleName) {
        <V as VisitMut>::visit_mut_at_rule_name(&mut **self, node)
    }

    #[inline]
    fn visit_mut_at_rule_prelude(&mut self, node: &mut AtRulePrelude) {
        <V as VisitMut>::visit_mut_at_rule_prelude(&mut **self, node)
    }

    #[inline]
    fn visit_mut_atom(&mut self, node: &mut swc_atoms::Atom) {
        <V as VisitMut>::visit_mut_atom(&mut **self, node)
    }

    #[inline]
    fn visit_mut_attribute_selector(&mut self, node: &mut AttributeSelector) {
        <V as VisitMut>::visit_mut_attribute_selector(&mut **self, node)
    }

    #[inline]
    fn visit_mut_attribute_selector_matcher(&mut self, node: &mut AttributeSelectorMatcher) {
        <V as VisitMut>::visit_mut_attribute_selector_matcher(&mut **self, node)
    }

    #[inline]
    fn visit_mut_attribute_selector_matcher_value(
        &mut self,
        node: &mut AttributeSelectorMatcherValue,
    ) {
        <V as VisitMut>::visit_mut_attribute_selector_matcher_value(&mut **self, node)
    }

    #[inline]
    fn visit_mut_attribute_selector_modifier(&mut self, node: &mut AttributeSelectorModifier) {
        <V as VisitMut>::visit_mut_attribute_selector_modifier(&mut **self, node)
    }

    #[inline]
    fn visit_mut_attribute_selector_value(&mut self, node: &mut AttributeSelectorValue) {
        <V as VisitMut>::visit_mut_attribute_selector_value(&mut **self, node)
    }

    #[inline]
    fn visit_mut_bin_op(&mut self, node: &mut BinOp) {
        <V as VisitMut>::visit_mut_bin_op(&mut **self, node)
    }

    #[inline]
    fn visit_mut_calc_operator(&mut self, node: &mut CalcOperator) {
        <V as VisitMut>::visit_mut_calc_operator(&mut **self, node)
    }

    #[inline]
    fn visit_mut_calc_operator_type(&mut self, node: &mut CalcOperatorType) {
        <V as VisitMut>::visit_mut_calc_operator_type(&mut **self, node)
    }

    #[inline]
    fn visit_mut_calc_product(&mut self, node: &mut CalcProduct) {
        <V as VisitMut>::visit_mut_calc_product(&mut **self, node)
    }

    #[inline]
    fn visit_mut_calc_product_or_operator(&mut self, node: &mut CalcProductOrOperator) {
        <V as VisitMut>::visit_mut_calc_product_or_operator(&mut **self, node)
    }

    #[inline]
    fn visit_mut_calc_product_or_operators(&mut self, node: &mut Vec<CalcProductOrOperator>) {
        <V as VisitMut>::visit_mut_calc_product_or_operators(&mut **self, node)
    }

    #[inline]
    fn visit_mut_calc_sum(&mut self, node: &mut CalcSum) {
        <V as VisitMut>::visit_mut_calc_sum(&mut **self, node)
    }

    #[inline]
    fn visit_mut_calc_value(&mut self, node: &mut CalcValue) {
        <V as VisitMut>::visit_mut_calc_value(&mut **self, node)
    }

    #[inline]
    fn visit_mut_calc_value_or_operator(&mut self, node: &mut CalcValueOrOperator) {
        <V as VisitMut>::visit_mut_calc_value_or_operator(&mut **self, node)
    }

    #[inline]
    fn visit_mut_calc_value_or_operators(&mut self, node: &mut Vec<CalcValueOrOperator>) {
        <V as VisitMut>::visit_mut_calc_value_or_operators(&mut **self, node)
    }

    #[inline]
    fn visit_mut_class_selector(&mut self, node: &mut ClassSelector) {
        <V as VisitMut>::visit_mut_class_selector(&mut **self, node)
    }

    #[inline]
    fn visit_mut_cmyk_component(&mut self, node: &mut CmykComponent) {
        <V as VisitMut>::visit_mut_cmyk_component(&mut **self, node)
    }

    #[inline]
    fn visit_mut_color(&mut self, node: &mut Color) {
        <V as VisitMut>::visit_mut_color(&mut **self, node)
    }

    #[inline]
    fn visit_mut_color_profile_name(&mut self, node: &mut ColorProfileName) {
        <V as VisitMut>::visit_mut_color_profile_name(&mut **self, node)
    }

    #[inline]
    fn visit_mut_combinator(&mut self, node: &mut Combinator) {
        <V as VisitMut>::visit_mut_combinator(&mut **self, node)
    }

    #[inline]
    fn visit_mut_combinator_value(&mut self, node: &mut CombinatorValue) {
        <V as VisitMut>::visit_mut_combinator_value(&mut **self, node)
    }

    #[inline]
    fn visit_mut_complex_selector(&mut self, node: &mut ComplexSelector) {
        <V as VisitMut>::visit_mut_complex_selector(&mut **self, node)
    }

    #[inline]
    fn visit_mut_complex_selector_children(&mut self, node: &mut ComplexSelectorChildren) {
        <V as VisitMut>::visit_mut_complex_selector_children(&mut **self, node)
    }

    #[inline]
    fn visit_mut_complex_selector_childrens(&mut self, node: &mut Vec<ComplexSelectorChildren>) {
        <V as VisitMut>::visit_mut_complex_selector_childrens(&mut **self, node)
    }

    #[inline]
    fn visit_mut_complex_selectors(&mut self, node: &mut Vec<ComplexSelector>) {
        <V as VisitMut>::visit_mut_complex_selectors(&mut **self, node)
    }

    #[inline]
    fn visit_mut_component_value(&mut self, node: &mut ComponentValue) {
        <V as VisitMut>::visit_mut_component_value(&mut **self, node)
    }

    #[inline]
    fn visit_mut_component_values(&mut self, node: &mut Vec<ComponentValue>) {
        <V as VisitMut>::visit_mut_component_values(&mut **self, node)
    }

    #[inline]
    fn visit_mut_compound_selector(&mut self, node: &mut CompoundSelector) {
        <V as VisitMut>::visit_mut_compound_selector(&mut **self, node)
    }

    #[inline]
    fn visit_mut_compound_selector_list(&mut self, node: &mut CompoundSelectorList) {
        <V as VisitMut>::visit_mut_compound_selector_list(&mut **self, node)
    }

    #[inline]
    fn visit_mut_compound_selectors(&mut self, node: &mut Vec<CompoundSelector>) {
        <V as VisitMut>::visit_mut_compound_selectors(&mut **self, node)
    }

    #[inline]
    fn visit_mut_container_condition(&mut self, node: &mut ContainerCondition) {
        <V as VisitMut>::visit_mut_container_condition(&mut **self, node)
    }

    #[inline]
    fn visit_mut_container_name(&mut self, node: &mut ContainerName) {
        <V as VisitMut>::visit_mut_container_name(&mut **self, node)
    }

    #[inline]
    fn visit_mut_container_query(&mut self, node: &mut ContainerQuery) {
        <V as VisitMut>::visit_mut_container_query(&mut **self, node)
    }

    #[inline]
    fn visit_mut_container_query_and(&mut self, node: &mut ContainerQueryAnd) {
        <V as VisitMut>::visit_mut_container_query_and(&mut **self, node)
    }

    #[inline]
    fn visit_mut_container_query_not(&mut self, node: &mut ContainerQueryNot) {
        <V as VisitMut>::visit_mut_container_query_not(&mut **self, node)
    }

    #[inline]
    fn visit_mut_container_query_or(&mut self, node: &mut ContainerQueryOr) {
        <V as VisitMut>::visit_mut_container_query_or(&mut **self, node)
    }

    #[inline]
    fn visit_mut_container_query_type(&mut self, node: &mut ContainerQueryType) {
        <V as VisitMut>::visit_mut_container_query_type(&mut **self, node)
    }

    #[inline]
    fn visit_mut_container_query_types(&mut self, node: &mut Vec<ContainerQueryType>) {
        <V as VisitMut>::visit_mut_container_query_types(&mut **self, node)
    }

    #[inline]
    fn visit_mut_custom_highlight_name(&mut self, node: &mut CustomHighlightName) {
        <V as VisitMut>::visit_mut_custom_highlight_name(&mut **self, node)
    }

    #[inline]
    fn visit_mut_custom_ident(&mut self, node: &mut CustomIdent) {
        <V as VisitMut>::visit_mut_custom_ident(&mut **self, node)
    }

    #[inline]
    fn visit_mut_custom_idents(&mut self, node: &mut Vec<CustomIdent>) {
        <V as VisitMut>::visit_mut_custom_idents(&mut **self, node)
    }

    #[inline]
    fn visit_mut_custom_media_query(&mut self, node: &mut CustomMediaQuery) {
        <V as VisitMut>::visit_mut_custom_media_query(&mut **self, node)
    }

    #[inline]
    fn visit_mut_custom_media_query_media_type(&mut self, node: &mut CustomMediaQueryMediaType) {
        <V as VisitMut>::visit_mut_custom_media_query_media_type(&mut **self, node)
    }

    #[inline]
    fn visit_mut_custom_property_name(&mut self, node: &mut CustomPropertyName) {
        <V as VisitMut>::visit_mut_custom_property_name(&mut **self, node)
    }

    #[inline]
    fn visit_mut_dashed_ident(&mut self, node: &mut DashedIdent) {
        <V as VisitMut>::visit_mut_dashed_ident(&mut **self, node)
    }

    #[inline]
    fn visit_mut_declaration(&mut self, node: &mut Declaration) {
        <V as VisitMut>::visit_mut_declaration(&mut **self, node)
    }

    #[inline]
    fn visit_mut_declaration_name(&mut self, node: &mut DeclarationName) {
        <V as VisitMut>::visit_mut_declaration_name(&mut **self, node)
    }

    #[inline]
    fn visit_mut_declaration_or_at_rule(&mut self, node: &mut DeclarationOrAtRule) {
        <V as VisitMut>::visit_mut_declaration_or_at_rule(&mut **self, node)
    }

    #[inline]
    fn visit_mut_delimiter(&mut self, node: &mut Delimiter) {
        <V as VisitMut>::visit_mut_delimiter(&mut **self, node)
    }

    #[inline]
    fn visit_mut_delimiter_value(&mut self, node: &mut DelimiterValue) {
        <V as VisitMut>::visit_mut_delimiter_value(&mut **self, node)
    }

    #[inline]
    fn visit_mut_dimension(&mut self, node: &mut Dimension) {
        <V as VisitMut>::visit_mut_dimension(&mut **self, node)
    }

    #[inline]
    fn visit_mut_dimension_token(&mut self, node: &mut DimensionToken) {
        <V as VisitMut>::visit_mut_dimension_token(&mut **self, node)
    }

    #[inline]
    fn visit_mut_document_prelude(&mut self, node: &mut DocumentPrelude) {
        <V as VisitMut>::visit_mut_document_prelude(&mut **self, node)
    }

    #[inline]
    fn visit_mut_document_prelude_matching_function(
        &mut self,
        node: &mut DocumentPreludeMatchingFunction,
    ) {
        <V as VisitMut>::visit_mut_document_prelude_matching_function(&mut **self, node)
    }

    #[inline]
    fn visit_mut_document_prelude_matching_functions(
        &mut self,
        node: &mut Vec<DocumentPreludeMatchingFunction>,
    ) {
        <V as VisitMut>::visit_mut_document_prelude_matching_functions(&mut **self, node)
    }

    #[inline]
    fn visit_mut_extension_name(&mut self, node: &mut ExtensionName) {
        <V as VisitMut>::visit_mut_extension_name(&mut **self, node)
    }

    #[inline]
    fn visit_mut_family_name(&mut self, node: &mut FamilyName) {
        <V as VisitMut>::visit_mut_family_name(&mut **self, node)
    }

    #[inline]
    fn visit_mut_family_names(&mut self, node: &mut Vec<FamilyName>) {
        <V as VisitMut>::visit_mut_family_names(&mut **self, node)
    }

    #[inline]
    fn visit_mut_flex(&mut self, node: &mut Flex) {
        <V as VisitMut>::visit_mut_flex(&mut **self, node)
    }

    #[inline]
    fn visit_mut_font_feature_values_prelude(&mut self, node: &mut FontFeatureValuesPrelude) {
        <V as VisitMut>::visit_mut_font_feature_values_prelude(&mut **self, node)
    }

    #[inline]
    fn visit_mut_forgiving_complex_selector(&mut self, node: &mut ForgivingComplexSelector) {
        <V as VisitMut>::visit_mut_forgiving_complex_selector(&mut **self, node)
    }

    #[inline]
    fn visit_mut_forgiving_complex_selectors(&mut self, node: &mut Vec<ForgivingComplexSelector>) {
        <V as VisitMut>::visit_mut_forgiving_complex_selectors(&mut **self, node)
    }

    #[inline]
    fn visit_mut_forgiving_relative_selector(&mut self, node: &mut ForgivingRelativeSelector) {
        <V as VisitMut>::visit_mut_forgiving_relative_selector(&mut **self, node)
    }

    #[inline]
    fn visit_mut_forgiving_relative_selector_list(
        &mut self,
        node: &mut ForgivingRelativeSelectorList,
    ) {
        <V as VisitMut>::visit_mut_forgiving_relative_selector_list(&mut **self, node)
    }

    #[inline]
    fn visit_mut_forgiving_relative_selectors(
        &mut self,
        node: &mut Vec<ForgivingRelativeSelector>,
    ) {
        <V as VisitMut>::visit_mut_forgiving_relative_selectors(&mut **self, node)
    }

    #[inline]
    fn visit_mut_forgiving_selector_list(&mut self, node: &mut ForgivingSelectorList) {
        <V as VisitMut>::visit_mut_forgiving_selector_list(&mut **self, node)
    }

    #[inline]
    fn visit_mut_frequency(&mut self, node: &mut Frequency) {
        <V as VisitMut>::visit_mut_frequency(&mut **self, node)
    }

    #[inline]
    fn visit_mut_frequency_percentage(&mut self, node: &mut FrequencyPercentage) {
        <V as VisitMut>::visit_mut_frequency_percentage(&mut **self, node)
    }

    #[inline]
    fn visit_mut_function(&mut self, node: &mut Function) {
        <V as VisitMut>::visit_mut_function(&mut **self, node)
    }

    #[inline]
    fn visit_mut_function_name(&mut self, node: &mut FunctionName) {
        <V as VisitMut>::visit_mut_function_name(&mut **self, node)
    }

    #[inline]
    fn visit_mut_general_enclosed(&mut self, node: &mut GeneralEnclosed) {
        <V as VisitMut>::visit_mut_general_enclosed(&mut **self, node)
    }

    #[inline]
    fn visit_mut_hex_color(&mut self, node: &mut HexColor) {
        <V as VisitMut>::visit_mut_hex_color(&mut **self, node)
    }

    #[inline]
    fn visit_mut_hue(&mut self, node: &mut Hue) {
        <V as VisitMut>::visit_mut_hue(&mut **self, node)
    }

    #[inline]
    fn visit_mut_id_selector(&mut self, node: &mut IdSelector) {
        <V as VisitMut>::visit_mut_id_selector(&mut **self, node)
    }

    #[inline]
    fn visit_mut_ident(&mut self, node: &mut Ident) {
        <V as VisitMut>::visit_mut_ident(&mut **self, node)
    }

    #[inline]
    fn visit_mut_idents(&mut self, node: &mut Vec<Ident>) {
        <V as VisitMut>::visit_mut_idents(&mut **self, node)
    }

    #[inline]
    fn visit_mut_import_conditions(&mut self, node: &mut ImportConditions) {
        <V as VisitMut>::visit_mut_import_conditions(&mut **self, node)
    }

    #[inline]
    fn visit_mut_import_href(&mut self, node: &mut ImportHref) {
        <V as VisitMut>::visit_mut_import_href(&mut **self, node)
    }

    #[inline]
    fn visit_mut_import_layer_name(&mut self, node: &mut ImportLayerName) {
        <V as VisitMut>::visit_mut_import_layer_name(&mut **self, node)
    }

    #[inline]
    fn visit_mut_import_prelude(&mut self, node: &mut ImportPrelude) {
        <V as VisitMut>::visit_mut_import_prelude(&mut **self, node)
    }

    #[inline]
    fn visit_mut_important_flag(&mut self, node: &mut ImportantFlag) {
        <V as VisitMut>::visit_mut_important_flag(&mut **self, node)
    }

    #[inline]
    fn visit_mut_integer(&mut self, node: &mut Integer) {
        <V as VisitMut>::visit_mut_integer(&mut **self, node)
    }

    #[inline]
    fn visit_mut_keyframe_block(&mut self, node: &mut KeyframeBlock) {
        <V as VisitMut>::visit_mut_keyframe_block(&mut **self, node)
    }

    #[inline]
    fn visit_mut_keyframe_selector(&mut self, node: &mut KeyframeSelector) {
        <V as VisitMut>::visit_mut_keyframe_selector(&mut **self, node)
    }

    #[inline]
    fn visit_mut_keyframe_selectors(&mut self, node: &mut Vec<KeyframeSelector>) {
        <V as VisitMut>::visit_mut_keyframe_selectors(&mut **self, node)
    }

    #[inline]
    fn visit_mut_keyframes_name(&mut self, node: &mut KeyframesName) {
        <V as VisitMut>::visit_mut_keyframes_name(&mut **self, node)
    }

    #[inline]
    fn visit_mut_keyframes_pseudo_function(&mut self, node: &mut KeyframesPseudoFunction) {
        <V as VisitMut>::visit_mut_keyframes_pseudo_function(&mut **self, node)
    }

    #[inline]
    fn visit_mut_keyframes_pseudo_prefix(&mut self, node: &mut KeyframesPseudoPrefix) {
        <V as VisitMut>::visit_mut_keyframes_pseudo_prefix(&mut **self, node)
    }

    #[inline]
    fn visit_mut_layer_name(&mut self, node: &mut LayerName) {
        <V as VisitMut>::visit_mut_layer_name(&mut **self, node)
    }

    #[inline]
    fn visit_mut_layer_name_list(&mut self, node: &mut LayerNameList) {
        <V as VisitMut>::visit_mut_layer_name_list(&mut **self, node)
    }

    #[inline]
    fn visit_mut_layer_names(&mut self, node: &mut Vec<LayerName>) {
        <V as VisitMut>::visit_mut_layer_names(&mut **self, node)
    }

    #[inline]
    fn visit_mut_layer_prelude(&mut self, node: &mut LayerPrelude) {
        <V as VisitMut>::visit_mut_layer_prelude(&mut **self, node)
    }

    #[inline]
    fn visit_mut_length(&mut self, node: &mut Length) {
        <V as VisitMut>::visit_mut_length(&mut **self, node)
    }

    #[inline]
    fn visit_mut_length_percentage(&mut self, node: &mut LengthPercentage) {
        <V as VisitMut>::visit_mut_length_percentage(&mut **self, node)
    }

    #[inline]
    fn visit_mut_list_of_component_values(&mut self, node: &mut ListOfComponentValues) {
        <V as VisitMut>::visit_mut_list_of_component_values(&mut **self, node)
    }

    #[inline]
    fn visit_mut_media_and(&mut self, node: &mut MediaAnd) {
        <V as VisitMut>::visit_mut_media_and(&mut **self, node)
    }

    #[inline]
    fn visit_mut_media_condition(&mut self, node: &mut MediaCondition) {
        <V as VisitMut>::visit_mut_media_condition(&mut **self, node)
    }

    #[inline]
    fn visit_mut_media_condition_all_type(&mut self, node: &mut MediaConditionAllType) {
        <V as VisitMut>::visit_mut_media_condition_all_type(&mut **self, node)
    }

    #[inline]
    fn visit_mut_media_condition_all_types(&mut self, node: &mut Vec<MediaConditionAllType>) {
        <V as VisitMut>::visit_mut_media_condition_all_types(&mut **self, node)
    }

    #[inline]
    fn visit_mut_media_condition_type(&mut self, node: &mut MediaConditionType) {
        <V as VisitMut>::visit_mut_media_condition_type(&mut **self, node)
    }

    #[inline]
    fn visit_mut_media_condition_without_or(&mut self, node: &mut MediaConditionWithoutOr) {
        <V as VisitMut>::visit_mut_media_condition_without_or(&mut **self, node)
    }

    #[inline]
    fn visit_mut_media_condition_without_or_type(
        &mut self,
        node: &mut MediaConditionWithoutOrType,
    ) {
        <V as VisitMut>::visit_mut_media_condition_without_or_type(&mut **self, node)
    }

    #[inline]
    fn visit_mut_media_condition_without_or_types(
        &mut self,
        node: &mut Vec<MediaConditionWithoutOrType>,
    ) {
        <V as VisitMut>::visit_mut_media_condition_without_or_types(&mut **self, node)
    }

    #[inline]
    fn visit_mut_media_feature(&mut self, node: &mut MediaFeature) {
        <V as VisitMut>::visit_mut_media_feature(&mut **self, node)
    }

    #[inline]
    fn visit_mut_media_feature_boolean(&mut self, node: &mut MediaFeatureBoolean) {
        <V as VisitMut>::visit_mut_media_feature_boolean(&mut **self, node)
    }

    #[inline]
    fn visit_mut_media_feature_name(&mut self, node: &mut MediaFeatureName) {
        <V as VisitMut>::visit_mut_media_feature_name(&mut **self, node)
    }

    #[inline]
    fn visit_mut_media_feature_plain(&mut self, node: &mut MediaFeaturePlain) {
        <V as VisitMut>::visit_mut_media_feature_plain(&mut **self, node)
    }

    #[inline]
    fn visit_mut_media_feature_range(&mut self, node: &mut MediaFeatureRange) {
        <V as VisitMut>::visit_mut_media_feature_range(&mut **self, node)
    }

    #[inline]
    fn visit_mut_media_feature_range_comparison(&mut self, node: &mut MediaFeatureRangeComparison) {
        <V as VisitMut>::visit_mut_media_feature_range_comparison(&mut **self, node)
    }

    #[inline]
    fn visit_mut_media_feature_range_interval(&mut self, node: &mut MediaFeatureRangeInterval) {
        <V as VisitMut>::visit_mut_media_feature_range_interval(&mut **self, node)
    }

    #[inline]
    fn visit_mut_media_feature_value(&mut self, node: &mut MediaFeatureValue) {
        <V as VisitMut>::visit_mut_media_feature_value(&mut **self, node)
    }

    #[inline]
    fn visit_mut_media_in_parens(&mut self, node: &mut MediaInParens) {
        <V as VisitMut>::visit_mut_media_in_parens(&mut **self, node)
    }

    #[inline]
    fn visit_mut_media_not(&mut self, node: &mut MediaNot) {
        <V as VisitMut>::visit_mut_media_not(&mut **self, node)
    }

    #[inline]
    fn visit_mut_media_or(&mut self, node: &mut MediaOr) {
        <V as VisitMut>::visit_mut_media_or(&mut **self, node)
    }

    #[inline]
    fn visit_mut_media_query(&mut self, node: &mut MediaQuery) {
        <V as VisitMut>::visit_mut_media_query(&mut **self, node)
    }

    #[inline]
    fn visit_mut_media_query_list(&mut self, node: &mut MediaQueryList) {
        <V as VisitMut>::visit_mut_media_query_list(&mut **self, node)
    }

    #[inline]
    fn visit_mut_media_querys(&mut self, node: &mut Vec<MediaQuery>) {
        <V as VisitMut>::visit_mut_media_querys(&mut **self, node)
    }

    #[inline]
    fn visit_mut_media_type(&mut self, node: &mut MediaType) {
        <V as VisitMut>::visit_mut_media_type(&mut **self, node)
    }

    #[inline]
    fn visit_mut_named_namespace(&mut self, node: &mut NamedNamespace) {
        <V as VisitMut>::visit_mut_named_namespace(&mut **self, node)
    }

    #[inline]
    fn visit_mut_namespace(&mut self, node: &mut Namespace) {
        <V as VisitMut>::visit_mut_namespace(&mut **self, node)
    }

    #[inline]
    fn visit_mut_namespace_prefix(&mut self, node: &mut NamespacePrefix) {
        <V as VisitMut>::visit_mut_namespace_prefix(&mut **self, node)
    }

    #[inline]
    fn visit_mut_namespace_prelude(&mut self, node: &mut NamespacePrelude) {
        <V as VisitMut>::visit_mut_namespace_prelude(&mut **self, node)
    }

    #[inline]
    fn visit_mut_namespace_prelude_uri(&mut self, node: &mut NamespacePreludeUri) {
        <V as VisitMut>::visit_mut_namespace_prelude_uri(&mut **self, node)
    }

    #[inline]
    fn visit_mut_nesting_selector(&mut self, node: &mut NestingSelector) {
        <V as VisitMut>::visit_mut_nesting_selector(&mut **self, node)
    }

    #[inline]
    fn visit_mut_number(&mut self, node: &mut Number) {
        <V as VisitMut>::visit_mut_number(&mut **self, node)
    }

    #[inline]
    fn visit_mut_number_type(&mut self, node: &mut NumberType) {
        <V as VisitMut>::visit_mut_number_type(&mut **self, node)
    }

    #[inline]
    fn visit_mut_opt_at_rule_prelude(&mut self, node: &mut Option<Box<AtRulePrelude>>) {
        <V as VisitMut>::visit_mut_opt_at_rule_prelude(&mut **self, node)
    }

    #[inline]
    fn visit_mut_opt_atom(&mut self, node: &mut Option<swc_atoms::Atom>) {
        <V as VisitMut>::visit_mut_opt_atom(&mut **self, node)
    }

    #[inline]
    fn visit_mut_opt_attribute_selector_matcher(
        &mut self,
        node: &mut Option<AttributeSelectorMatcher>,
    ) {
        <V as VisitMut>::visit_mut_opt_attribute_selector_matcher(&mut **self, node)
    }

    #[inline]
    fn visit_mut_opt_attribute_selector_modifier(
        &mut self,
        node: &mut Option<AttributeSelectorModifier>,
    ) {
        <V as VisitMut>::visit_mut_opt_attribute_selector_modifier(&mut **self, node)
    }

    #[inline]
    fn visit_mut_opt_attribute_selector_value(
        &mut self,
        node: &mut Option<AttributeSelectorValue>,
    ) {
        <V as VisitMut>::visit_mut_opt_attribute_selector_value(&mut **self, node)
    }

    #[inline]
    fn visit_mut_opt_combinator(&mut self, node: &mut Option<Combinator>) {
        <V as VisitMut>::visit_mut_opt_combinator(&mut **self, node)
    }

    #[inline]
    fn visit_mut_opt_container_name(&mut self, node: &mut Option<ContainerName>) {
        <V as VisitMut>::visit_mut_opt_container_name(&mut **self, node)
    }

    #[inline]
    fn visit_mut_opt_forgiving_selector_list(&mut self, node: &mut Option<ForgivingSelectorList>) {
        <V as VisitMut>::visit_mut_opt_forgiving_selector_list(&mut **self, node)
    }

    #[inline]
    fn visit_mut_opt_function(&mut self, node: &mut Option<Box<Function>>) {
        <V as VisitMut>::visit_mut_opt_function(&mut **self, node)
    }

    #[inline]
    fn visit_mut_opt_ident(&mut self, node: &mut Option<Ident>) {
        <V as VisitMut>::visit_mut_opt_ident(&mut **self, node)
    }

    #[inline]
    fn visit_mut_opt_import_conditions(&mut self, node: &mut Option<Box<ImportConditions>>) {
        <V as VisitMut>::visit_mut_opt_import_conditions(&mut **self, node)
    }

    #[inline]
    fn visit_mut_opt_import_layer_name(&mut self, node: &mut Option<Box<ImportLayerName>>) {
        <V as VisitMut>::visit_mut_opt_import_layer_name(&mut **self, node)
    }

    #[inline]
    fn visit_mut_opt_important_flag(&mut self, node: &mut Option<ImportantFlag>) {
        <V as VisitMut>::visit_mut_opt_important_flag(&mut **self, node)
    }

    #[inline]
    fn visit_mut_opt_media_condition_type(&mut self, node: &mut Option<Box<MediaConditionType>>) {
        <V as VisitMut>::visit_mut_opt_media_condition_type(&mut **self, node)
    }

    #[inline]
    fn visit_mut_opt_media_query_list(&mut self, node: &mut Option<Box<MediaQueryList>>) {
        <V as VisitMut>::visit_mut_opt_media_query_list(&mut **self, node)
    }

    #[inline]
    fn visit_mut_opt_media_type(&mut self, node: &mut Option<MediaType>) {
        <V as VisitMut>::visit_mut_opt_media_type(&mut **self, node)
    }

    #[inline]
    fn visit_mut_opt_namespace(&mut self, node: &mut Option<Namespace>) {
        <V as VisitMut>::visit_mut_opt_namespace(&mut **self, node)
    }

    #[inline]
    fn visit_mut_opt_namespace_prefix(&mut self, node: &mut Option<NamespacePrefix>) {
        <V as VisitMut>::visit_mut_opt_namespace_prefix(&mut **self, node)
    }

    #[inline]
    fn visit_mut_opt_nesting_selector(&mut self, node: &mut Option<NestingSelector>) {
        <V as VisitMut>::visit_mut_opt_nesting_selector(&mut **self, node)
    }

    #[inline]
    fn visit_mut_opt_number(&mut self, node: &mut Option<Number>) {
        <V as VisitMut>::visit_mut_opt_number(&mut **self, node)
    }

    #[inline]
    fn visit_mut_opt_page_selector_pseudos(&mut self, node: &mut Option<Vec<PageSelectorPseudo>>) {
        <V as VisitMut>::visit_mut_opt_page_selector_pseudos(&mut **self, node)
    }

    #[inline]
    fn visit_mut_opt_page_selector_type(&mut self, node: &mut Option<PageSelectorType>) {
        <V as VisitMut>::visit_mut_opt_page_selector_type(&mut **self, node)
    }

    #[inline]
    fn visit_mut_opt_pseudo_class_selector_childrens(
        &mut self,
        node: &mut Option<Vec<PseudoClassSelectorChildren>>,
    ) {
        <V as VisitMut>::visit_mut_opt_pseudo_class_selector_childrens(&mut **self, node)
    }

    #[inline]
    fn visit_mut_opt_pseudo_element_selector_childrens(
        &mut self,
        node: &mut Option<Vec<PseudoElementSelectorChildren>>,
    ) {
        <V as VisitMut>::visit_mut_opt_pseudo_element_selector_childrens(&mut **self, node)
    }

    #[inline]
    fn visit_mut_opt_simple_block(&mut self, node: &mut Option<SimpleBlock>) {
        <V as VisitMut>::visit_mut_opt_simple_block(&mut **self, node)
    }

    #[inline]
    fn visit_mut_opt_type_selector(&mut self, node: &mut Option<Box<TypeSelector>>) {
        <V as VisitMut>::visit_mut_opt_type_selector(&mut **self, node)
    }

    #[inline]
    fn visit_mut_opt_url_modifiers(&mut self, node: &mut Option<Vec<UrlModifier>>) {
        <V as VisitMut>::visit_mut_opt_url_modifiers(&mut **self, node)
    }

    #[inline]
    fn visit_mut_opt_url_value(&mut self, node: &mut Option<Box<UrlValue>>) {
        <V as VisitMut>::visit_mut_opt_url_value(&mut **self, node)
    }

    #[inline]
    fn visit_mut_page_selector(&mut self, node: &mut PageSelector) {
        <V as VisitMut>::visit_mut_page_selector(&mut **self, node)
    }

    #[inline]
    fn visit_mut_page_selector_list(&mut self, node: &mut PageSelectorList) {
        <V as VisitMut>::visit_mut_page_selector_list(&mut **self, node)
    }

    #[inline]
    fn visit_mut_page_selector_pseudo(&mut self, node: &mut PageSelectorPseudo) {
        <V as VisitMut>::visit_mut_page_selector_pseudo(&mut **self, node)
    }

    #[inline]
    fn visit_mut_page_selector_pseudos(&mut self, node: &mut Vec<PageSelectorPseudo>) {
        <V as VisitMut>::visit_mut_page_selector_pseudos(&mut **self, node)
    }

    #[inline]
    fn visit_mut_page_selector_type(&mut self, node: &mut PageSelectorType) {
        <V as VisitMut>::visit_mut_page_selector_type(&mut **self, node)
    }

    #[inline]
    fn visit_mut_page_selectors(&mut self, node: &mut Vec<PageSelector>) {
        <V as VisitMut>::visit_mut_page_selectors(&mut **self, node)
    }

    #[inline]
    fn visit_mut_percentage(&mut self, node: &mut Percentage) {
        <V as VisitMut>::visit_mut_percentage(&mut **self, node)
    }

    #[inline]
    fn visit_mut_pseudo_class_selector(&mut self, node: &mut PseudoClassSelector) {
        <V as VisitMut>::visit_mut_pseudo_class_selector(&mut **self, node)
    }

    #[inline]
    fn visit_mut_pseudo_class_selector_children(&mut self, node: &mut PseudoClassSelectorChildren) {
        <V as VisitMut>::visit_mut_pseudo_class_selector_children(&mut **self, node)
    }

    #[inline]
    fn visit_mut_pseudo_class_selector_childrens(
        &mut self,
        node: &mut Vec<PseudoClassSelectorChildren>,
    ) {
        <V as VisitMut>::visit_mut_pseudo_class_selector_childrens(&mut **self, node)
    }

    #[inline]
    fn visit_mut_pseudo_element_selector(&mut self, node: &mut PseudoElementSelector) {
        <V as VisitMut>::visit_mut_pseudo_element_selector(&mut **self, node)
    }

    #[inline]
    fn visit_mut_pseudo_element_selector_children(
        &mut self,
        node: &mut PseudoElementSelectorChildren,
    ) {
        <V as VisitMut>::visit_mut_pseudo_element_selector_children(&mut **self, node)
    }

    #[inline]
    fn visit_mut_pseudo_element_selector_childrens(
        &mut self,
        node: &mut Vec<PseudoElementSelectorChildren>,
    ) {
        <V as VisitMut>::visit_mut_pseudo_element_selector_childrens(&mut **self, node)
    }

    #[inline]
    fn visit_mut_qualified_rule(&mut self, node: &mut QualifiedRule) {
        <V as VisitMut>::visit_mut_qualified_rule(&mut **self, node)
    }

    #[inline]
    fn visit_mut_qualified_rule_prelude(&mut self, node: &mut QualifiedRulePrelude) {
        <V as VisitMut>::visit_mut_qualified_rule_prelude(&mut **self, node)
    }

    #[inline]
    fn visit_mut_query_in_parens(&mut self, node: &mut QueryInParens) {
        <V as VisitMut>::visit_mut_query_in_parens(&mut **self, node)
    }

    #[inline]
    fn visit_mut_ratio(&mut self, node: &mut Ratio) {
        <V as VisitMut>::visit_mut_ratio(&mut **self, node)
    }

    #[inline]
    fn visit_mut_relative_selector(&mut self, node: &mut RelativeSelector) {
        <V as VisitMut>::visit_mut_relative_selector(&mut **self, node)
    }

    #[inline]
    fn visit_mut_relative_selector_list(&mut self, node: &mut RelativeSelectorList) {
        <V as VisitMut>::visit_mut_relative_selector_list(&mut **self, node)
    }

    #[inline]
    fn visit_mut_relative_selectors(&mut self, node: &mut Vec<RelativeSelector>) {
        <V as VisitMut>::visit_mut_relative_selectors(&mut **self, node)
    }

    #[inline]
    fn visit_mut_resolution(&mut self, node: &mut Resolution) {
        <V as VisitMut>::visit_mut_resolution(&mut **self, node)
    }

    #[inline]
    fn visit_mut_rule(&mut self, node: &mut Rule) {
        <V as VisitMut>::visit_mut_rule(&mut **self, node)
    }

    #[inline]
    fn visit_mut_rules(&mut self, node: &mut Vec<Rule>) {
        <V as VisitMut>::visit_mut_rules(&mut **self, node)
    }

    #[inline]
    fn visit_mut_scope_range(&mut self, node: &mut ScopeRange) {
        <V as VisitMut>::visit_mut_scope_range(&mut **self, node)
    }

    #[inline]
    fn visit_mut_selector_list(&mut self, node: &mut SelectorList) {
        <V as VisitMut>::visit_mut_selector_list(&mut **self, node)
    }

    #[inline]
    fn visit_mut_sequence_of_custom_idents(&mut self, node: &mut SequenceOfCustomIdents) {
        <V as VisitMut>::visit_mut_sequence_of_custom_idents(&mut **self, node)
    }

    #[inline]
    fn visit_mut_simple_block(&mut self, node: &mut SimpleBlock) {
        <V as VisitMut>::visit_mut_simple_block(&mut **self, node)
    }

    #[inline]
    fn visit_mut_size_feature(&mut self, node: &mut SizeFeature) {
        <V as VisitMut>::visit_mut_size_feature(&mut **self, node)
    }

    #[inline]
    fn visit_mut_size_feature_boolean(&mut self, node: &mut SizeFeatureBoolean) {
        <V as VisitMut>::visit_mut_size_feature_boolean(&mut **self, node)
    }

    #[inline]
    fn visit_mut_size_feature_name(&mut self, node: &mut SizeFeatureName) {
        <V as VisitMut>::visit_mut_size_feature_name(&mut **self, node)
    }

    #[inline]
    fn visit_mut_size_feature_plain(&mut self, node: &mut SizeFeaturePlain) {
        <V as VisitMut>::visit_mut_size_feature_plain(&mut **self, node)
    }

    #[inline]
    fn visit_mut_size_feature_range(&mut self, node: &mut SizeFeatureRange) {
        <V as VisitMut>::visit_mut_size_feature_range(&mut **self, node)
    }

    #[inline]
    fn visit_mut_size_feature_range_comparison(&mut self, node: &mut SizeFeatureRangeComparison) {
        <V as VisitMut>::visit_mut_size_feature_range_comparison(&mut **self, node)
    }

    #[inline]
    fn visit_mut_size_feature_range_interval(&mut self, node: &mut SizeFeatureRangeInterval) {
        <V as VisitMut>::visit_mut_size_feature_range_interval(&mut **self, node)
    }

    #[inline]
    fn visit_mut_size_feature_value(&mut self, node: &mut SizeFeatureValue) {
        <V as VisitMut>::visit_mut_size_feature_value(&mut **self, node)
    }

    #[inline]
    fn visit_mut_span(&mut self, node: &mut swc_common::Span) {
        <V as VisitMut>::visit_mut_span(&mut **self, node)
    }

    #[inline]
    fn visit_mut_str(&mut self, node: &mut Str) {
        <V as VisitMut>::visit_mut_str(&mut **self, node)
    }

    #[inline]
    fn visit_mut_style_block(&mut self, node: &mut StyleBlock) {
        <V as VisitMut>::visit_mut_style_block(&mut **self, node)
    }

    #[inline]
    fn visit_mut_stylesheet(&mut self, node: &mut Stylesheet) {
        <V as VisitMut>::visit_mut_stylesheet(&mut **self, node)
    }

    #[inline]
    fn visit_mut_subclass_selector(&mut self, node: &mut SubclassSelector) {
        <V as VisitMut>::visit_mut_subclass_selector(&mut **self, node)
    }

    #[inline]
    fn visit_mut_subclass_selectors(&mut self, node: &mut Vec<SubclassSelector>) {
        <V as VisitMut>::visit_mut_subclass_selectors(&mut **self, node)
    }

    #[inline]
    fn visit_mut_supports_and(&mut self, node: &mut SupportsAnd) {
        <V as VisitMut>::visit_mut_supports_and(&mut **self, node)
    }

    #[inline]
    fn visit_mut_supports_condition(&mut self, node: &mut SupportsCondition) {
        <V as VisitMut>::visit_mut_supports_condition(&mut **self, node)
    }

    #[inline]
    fn visit_mut_supports_condition_type(&mut self, node: &mut SupportsConditionType) {
        <V as VisitMut>::visit_mut_supports_condition_type(&mut **self, node)
    }

    #[inline]
    fn visit_mut_supports_condition_types(&mut self, node: &mut Vec<SupportsConditionType>) {
        <V as VisitMut>::visit_mut_supports_condition_types(&mut **self, node)
    }

    #[inline]
    fn visit_mut_supports_feature(&mut self, node: &mut SupportsFeature) {
        <V as VisitMut>::visit_mut_supports_feature(&mut **self, node)
    }

    #[inline]
    fn visit_mut_supports_in_parens(&mut self, node: &mut SupportsInParens) {
        <V as VisitMut>::visit_mut_supports_in_parens(&mut **self, node)
    }

    #[inline]
    fn visit_mut_supports_not(&mut self, node: &mut SupportsNot) {
        <V as VisitMut>::visit_mut_supports_not(&mut **self, node)
    }

    #[inline]
    fn visit_mut_supports_or(&mut self, node: &mut SupportsOr) {
        <V as VisitMut>::visit_mut_supports_or(&mut **self, node)
    }

    #[inline]
    fn visit_mut_tag_name_selector(&mut self, node: &mut TagNameSelector) {
        <V as VisitMut>::visit_mut_tag_name_selector(&mut **self, node)
    }

    #[inline]
    fn visit_mut_time(&mut self, node: &mut Time) {
        <V as VisitMut>::visit_mut_time(&mut **self, node)
    }

    #[inline]
    fn visit_mut_time_percentage(&mut self, node: &mut TimePercentage) {
        <V as VisitMut>::visit_mut_time_percentage(&mut **self, node)
    }

    #[inline]
    fn visit_mut_token(&mut self, node: &mut Token) {
        <V as VisitMut>::visit_mut_token(&mut **self, node)
    }

    #[inline]
    fn visit_mut_token_and_span(&mut self, node: &mut TokenAndSpan) {
        <V as VisitMut>::visit_mut_token_and_span(&mut **self, node)
    }

    #[inline]
    fn visit_mut_type_selector(&mut self, node: &mut TypeSelector) {
        <V as VisitMut>::visit_mut_type_selector(&mut **self, node)
    }

    #[inline]
    fn visit_mut_unicode_range(&mut self, node: &mut UnicodeRange) {
        <V as VisitMut>::visit_mut_unicode_range(&mut **self, node)
    }

    #[inline]
    fn visit_mut_universal_selector(&mut self, node: &mut UniversalSelector) {
        <V as VisitMut>::visit_mut_universal_selector(&mut **self, node)
    }

    #[inline]
    fn visit_mut_unknown_dimension(&mut self, node: &mut UnknownDimension) {
        <V as VisitMut>::visit_mut_unknown_dimension(&mut **self, node)
    }

    #[inline]
    fn visit_mut_url(&mut self, node: &mut Url) {
        <V as VisitMut>::visit_mut_url(&mut **self, node)
    }

    #[inline]
    fn visit_mut_url_key_value(&mut self, node: &mut UrlKeyValue) {
        <V as VisitMut>::visit_mut_url_key_value(&mut **self, node)
    }

    #[inline]
    fn visit_mut_url_modifier(&mut self, node: &mut UrlModifier) {
        <V as VisitMut>::visit_mut_url_modifier(&mut **self, node)
    }

    #[inline]
    fn visit_mut_url_modifiers(&mut self, node: &mut Vec<UrlModifier>) {
        <V as VisitMut>::visit_mut_url_modifiers(&mut **self, node)
    }

    #[inline]
    fn visit_mut_url_value(&mut self, node: &mut UrlValue) {
        <V as VisitMut>::visit_mut_url_value(&mut **self, node)
    }

    #[inline]
    fn visit_mut_url_value_raw(&mut self, node: &mut UrlValueRaw) {
        <V as VisitMut>::visit_mut_url_value_raw(&mut **self, node)
    }

    #[inline]
    fn visit_mut_wq_name(&mut self, node: &mut WqName) {
        <V as VisitMut>::visit_mut_wq_name(&mut **self, node)
    }
}
impl<A, B> VisitMut for ::swc_visit::Either<A, B>
where
    A: VisitMut,
    B: VisitMut,
{
    #[inline]
    fn visit_mut_absolute_color_base(&mut self, node: &mut AbsoluteColorBase) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMut::visit_mut_absolute_color_base(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMut::visit_mut_absolute_color_base(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_mut_alpha_value(&mut self, node: &mut AlphaValue) {
        match self {
            swc_visit::Either::Left(visitor) => VisitMut::visit_mut_alpha_value(visitor, node),
            swc_visit::Either::Right(visitor) => VisitMut::visit_mut_alpha_value(visitor, node),
        }
    }

    #[inline]
    fn visit_mut_an_plus_b(&mut self, node: &mut AnPlusB) {
        match self {
            swc_visit::Either::Left(visitor) => VisitMut::visit_mut_an_plus_b(visitor, node),
            swc_visit::Either::Right(visitor) => VisitMut::visit_mut_an_plus_b(visitor, node),
        }
    }

    #[inline]
    fn visit_mut_an_plus_b_notation(&mut self, node: &mut AnPlusBNotation) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMut::visit_mut_an_plus_b_notation(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMut::visit_mut_an_plus_b_notation(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_mut_angle(&mut self, node: &mut Angle) {
        match self {
            swc_visit::Either::Left(visitor) => VisitMut::visit_mut_angle(visitor, node),
            swc_visit::Either::Right(visitor) => VisitMut::visit_mut_angle(visitor, node),
        }
    }

    #[inline]
    fn visit_mut_angle_percentage(&mut self, node: &mut AnglePercentage) {
        match self {
            swc_visit::Either::Left(visitor) => VisitMut::visit_mut_angle_percentage(visitor, node),
            swc_visit::Either::Right(visitor) => {
                VisitMut::visit_mut_angle_percentage(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_mut_any_namespace(&mut self, node: &mut AnyNamespace) {
        match self {
            swc_visit::Either::Left(visitor) => VisitMut::visit_mut_any_namespace(visitor, node),
            swc_visit::Either::Right(visitor) => VisitMut::visit_mut_any_namespace(visitor, node),
        }
    }

    #[inline]
    fn visit_mut_at_rule(&mut self, node: &mut AtRule) {
        match self {
            swc_visit::Either::Left(visitor) => VisitMut::visit_mut_at_rule(visitor, node),
            swc_visit::Either::Right(visitor) => VisitMut::visit_mut_at_rule(visitor, node),
        }
    }

    #[inline]
    fn visit_mut_at_rule_name(&mut self, node: &mut AtRuleName) {
        match self {
            swc_visit::Either::Left(visitor) => VisitMut::visit_mut_at_rule_name(visitor, node),
            swc_visit::Either::Right(visitor) => VisitMut::visit_mut_at_rule_name(visitor, node),
        }
    }

    #[inline]
    fn visit_mut_at_rule_prelude(&mut self, node: &mut AtRulePrelude) {
        match self {
            swc_visit::Either::Left(visitor) => VisitMut::visit_mut_at_rule_prelude(visitor, node),
            swc_visit::Either::Right(visitor) => VisitMut::visit_mut_at_rule_prelude(visitor, node),
        }
    }

    #[inline]
    fn visit_mut_atom(&mut self, node: &mut swc_atoms::Atom) {
        match self {
            swc_visit::Either::Left(visitor) => VisitMut::visit_mut_atom(visitor, node),
            swc_visit::Either::Right(visitor) => VisitMut::visit_mut_atom(visitor, node),
        }
    }

    #[inline]
    fn visit_mut_attribute_selector(&mut self, node: &mut AttributeSelector) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMut::visit_mut_attribute_selector(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMut::visit_mut_attribute_selector(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_mut_attribute_selector_matcher(&mut self, node: &mut AttributeSelectorMatcher) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMut::visit_mut_attribute_selector_matcher(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMut::visit_mut_attribute_selector_matcher(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_mut_attribute_selector_matcher_value(
        &mut self,
        node: &mut AttributeSelectorMatcherValue,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMut::visit_mut_attribute_selector_matcher_value(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMut::visit_mut_attribute_selector_matcher_value(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_mut_attribute_selector_modifier(&mut self, node: &mut AttributeSelectorModifier) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMut::visit_mut_attribute_selector_modifier(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMut::visit_mut_attribute_selector_modifier(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_mut_attribute_selector_value(&mut self, node: &mut AttributeSelectorValue) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMut::visit_mut_attribute_selector_value(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMut::visit_mut_attribute_selector_value(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_mut_bin_op(&mut self, node: &mut BinOp) {
        match self {
            swc_visit::Either::Left(visitor) => VisitMut::visit_mut_bin_op(visitor, node),
            swc_visit::Either::Right(visitor) => VisitMut::visit_mut_bin_op(visitor, node),
        }
    }

    #[inline]
    fn visit_mut_calc_operator(&mut self, node: &mut CalcOperator) {
        match self {
            swc_visit::Either::Left(visitor) => VisitMut::visit_mut_calc_operator(visitor, node),
            swc_visit::Either::Right(visitor) => VisitMut::visit_mut_calc_operator(visitor, node),
        }
    }

    #[inline]
    fn visit_mut_calc_operator_type(&mut self, node: &mut CalcOperatorType) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMut::visit_mut_calc_operator_type(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMut::visit_mut_calc_operator_type(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_mut_calc_product(&mut self, node: &mut CalcProduct) {
        match self {
            swc_visit::Either::Left(visitor) => VisitMut::visit_mut_calc_product(visitor, node),
            swc_visit::Either::Right(visitor) => VisitMut::visit_mut_calc_product(visitor, node),
        }
    }

    #[inline]
    fn visit_mut_calc_product_or_operator(&mut self, node: &mut CalcProductOrOperator) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMut::visit_mut_calc_product_or_operator(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMut::visit_mut_calc_product_or_operator(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_mut_calc_product_or_operators(&mut self, node: &mut Vec<CalcProductOrOperator>) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMut::visit_mut_calc_product_or_operators(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMut::visit_mut_calc_product_or_operators(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_mut_calc_sum(&mut self, node: &mut CalcSum) {
        match self {
            swc_visit::Either::Left(visitor) => VisitMut::visit_mut_calc_sum(visitor, node),
            swc_visit::Either::Right(visitor) => VisitMut::visit_mut_calc_sum(visitor, node),
        }
    }

    #[inline]
    fn visit_mut_calc_value(&mut self, node: &mut CalcValue) {
        match self {
            swc_visit::Either::Left(visitor) => VisitMut::visit_mut_calc_value(visitor, node),
            swc_visit::Either::Right(visitor) => VisitMut::visit_mut_calc_value(visitor, node),
        }
    }

    #[inline]
    fn visit_mut_calc_value_or_operator(&mut self, node: &mut CalcValueOrOperator) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMut::visit_mut_calc_value_or_operator(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMut::visit_mut_calc_value_or_operator(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_mut_calc_value_or_operators(&mut self, node: &mut Vec<CalcValueOrOperator>) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMut::visit_mut_calc_value_or_operators(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMut::visit_mut_calc_value_or_operators(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_mut_class_selector(&mut self, node: &mut ClassSelector) {
        match self {
            swc_visit::Either::Left(visitor) => VisitMut::visit_mut_class_selector(visitor, node),
            swc_visit::Either::Right(visitor) => VisitMut::visit_mut_class_selector(visitor, node),
        }
    }

    #[inline]
    fn visit_mut_cmyk_component(&mut self, node: &mut CmykComponent) {
        match self {
            swc_visit::Either::Left(visitor) => VisitMut::visit_mut_cmyk_component(visitor, node),
            swc_visit::Either::Right(visitor) => VisitMut::visit_mut_cmyk_component(visitor, node),
        }
    }

    #[inline]
    fn visit_mut_color(&mut self, node: &mut Color) {
        match self {
            swc_visit::Either::Left(visitor) => VisitMut::visit_mut_color(visitor, node),
            swc_visit::Either::Right(visitor) => VisitMut::visit_mut_color(visitor, node),
        }
    }

    #[inline]
    fn visit_mut_color_profile_name(&mut self, node: &mut ColorProfileName) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMut::visit_mut_color_profile_name(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMut::visit_mut_color_profile_name(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_mut_combinator(&mut self, node: &mut Combinator) {
        match self {
            swc_visit::Either::Left(visitor) => VisitMut::visit_mut_combinator(visitor, node),
            swc_visit::Either::Right(visitor) => VisitMut::visit_mut_combinator(visitor, node),
        }
    }

    #[inline]
    fn visit_mut_combinator_value(&mut self, node: &mut CombinatorValue) {
        match self {
            swc_visit::Either::Left(visitor) => VisitMut::visit_mut_combinator_value(visitor, node),
            swc_visit::Either::Right(visitor) => {
                VisitMut::visit_mut_combinator_value(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_mut_complex_selector(&mut self, node: &mut ComplexSelector) {
        match self {
            swc_visit::Either::Left(visitor) => VisitMut::visit_mut_complex_selector(visitor, node),
            swc_visit::Either::Right(visitor) => {
                VisitMut::visit_mut_complex_selector(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_mut_complex_selector_children(&mut self, node: &mut ComplexSelectorChildren) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMut::visit_mut_complex_selector_children(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMut::visit_mut_complex_selector_children(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_mut_complex_selector_childrens(&mut self, node: &mut Vec<ComplexSelectorChildren>) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMut::visit_mut_complex_selector_childrens(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMut::visit_mut_complex_selector_childrens(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_mut_complex_selectors(&mut self, node: &mut Vec<ComplexSelector>) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMut::visit_mut_complex_selectors(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMut::visit_mut_complex_selectors(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_mut_component_value(&mut self, node: &mut ComponentValue) {
        match self {
            swc_visit::Either::Left(visitor) => VisitMut::visit_mut_component_value(visitor, node),
            swc_visit::Either::Right(visitor) => VisitMut::visit_mut_component_value(visitor, node),
        }
    }

    #[inline]
    fn visit_mut_component_values(&mut self, node: &mut Vec<ComponentValue>) {
        match self {
            swc_visit::Either::Left(visitor) => VisitMut::visit_mut_component_values(visitor, node),
            swc_visit::Either::Right(visitor) => {
                VisitMut::visit_mut_component_values(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_mut_compound_selector(&mut self, node: &mut CompoundSelector) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMut::visit_mut_compound_selector(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMut::visit_mut_compound_selector(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_mut_compound_selector_list(&mut self, node: &mut CompoundSelectorList) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMut::visit_mut_compound_selector_list(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMut::visit_mut_compound_selector_list(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_mut_compound_selectors(&mut self, node: &mut Vec<CompoundSelector>) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMut::visit_mut_compound_selectors(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMut::visit_mut_compound_selectors(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_mut_container_condition(&mut self, node: &mut ContainerCondition) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMut::visit_mut_container_condition(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMut::visit_mut_container_condition(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_mut_container_name(&mut self, node: &mut ContainerName) {
        match self {
            swc_visit::Either::Left(visitor) => VisitMut::visit_mut_container_name(visitor, node),
            swc_visit::Either::Right(visitor) => VisitMut::visit_mut_container_name(visitor, node),
        }
    }

    #[inline]
    fn visit_mut_container_query(&mut self, node: &mut ContainerQuery) {
        match self {
            swc_visit::Either::Left(visitor) => VisitMut::visit_mut_container_query(visitor, node),
            swc_visit::Either::Right(visitor) => VisitMut::visit_mut_container_query(visitor, node),
        }
    }

    #[inline]
    fn visit_mut_container_query_and(&mut self, node: &mut ContainerQueryAnd) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMut::visit_mut_container_query_and(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMut::visit_mut_container_query_and(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_mut_container_query_not(&mut self, node: &mut ContainerQueryNot) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMut::visit_mut_container_query_not(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMut::visit_mut_container_query_not(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_mut_container_query_or(&mut self, node: &mut ContainerQueryOr) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMut::visit_mut_container_query_or(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMut::visit_mut_container_query_or(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_mut_container_query_type(&mut self, node: &mut ContainerQueryType) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMut::visit_mut_container_query_type(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMut::visit_mut_container_query_type(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_mut_container_query_types(&mut self, node: &mut Vec<ContainerQueryType>) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMut::visit_mut_container_query_types(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMut::visit_mut_container_query_types(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_mut_custom_highlight_name(&mut self, node: &mut CustomHighlightName) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMut::visit_mut_custom_highlight_name(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMut::visit_mut_custom_highlight_name(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_mut_custom_ident(&mut self, node: &mut CustomIdent) {
        match self {
            swc_visit::Either::Left(visitor) => VisitMut::visit_mut_custom_ident(visitor, node),
            swc_visit::Either::Right(visitor) => VisitMut::visit_mut_custom_ident(visitor, node),
        }
    }

    #[inline]
    fn visit_mut_custom_idents(&mut self, node: &mut Vec<CustomIdent>) {
        match self {
            swc_visit::Either::Left(visitor) => VisitMut::visit_mut_custom_idents(visitor, node),
            swc_visit::Either::Right(visitor) => VisitMut::visit_mut_custom_idents(visitor, node),
        }
    }

    #[inline]
    fn visit_mut_custom_media_query(&mut self, node: &mut CustomMediaQuery) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMut::visit_mut_custom_media_query(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMut::visit_mut_custom_media_query(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_mut_custom_media_query_media_type(&mut self, node: &mut CustomMediaQueryMediaType) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMut::visit_mut_custom_media_query_media_type(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMut::visit_mut_custom_media_query_media_type(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_mut_custom_property_name(&mut self, node: &mut CustomPropertyName) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMut::visit_mut_custom_property_name(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMut::visit_mut_custom_property_name(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_mut_dashed_ident(&mut self, node: &mut DashedIdent) {
        match self {
            swc_visit::Either::Left(visitor) => VisitMut::visit_mut_dashed_ident(visitor, node),
            swc_visit::Either::Right(visitor) => VisitMut::visit_mut_dashed_ident(visitor, node),
        }
    }

    #[inline]
    fn visit_mut_declaration(&mut self, node: &mut Declaration) {
        match self {
            swc_visit::Either::Left(visitor) => VisitMut::visit_mut_declaration(visitor, node),
            swc_visit::Either::Right(visitor) => VisitMut::visit_mut_declaration(visitor, node),
        }
    }

    #[inline]
    fn visit_mut_declaration_name(&mut self, node: &mut DeclarationName) {
        match self {
            swc_visit::Either::Left(visitor) => VisitMut::visit_mut_declaration_name(visitor, node),
            swc_visit::Either::Right(visitor) => {
                VisitMut::visit_mut_declaration_name(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_mut_declaration_or_at_rule(&mut self, node: &mut DeclarationOrAtRule) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMut::visit_mut_declaration_or_at_rule(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMut::visit_mut_declaration_or_at_rule(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_mut_delimiter(&mut self, node: &mut Delimiter) {
        match self {
            swc_visit::Either::Left(visitor) => VisitMut::visit_mut_delimiter(visitor, node),
            swc_visit::Either::Right(visitor) => VisitMut::visit_mut_delimiter(visitor, node),
        }
    }

    #[inline]
    fn visit_mut_delimiter_value(&mut self, node: &mut DelimiterValue) {
        match self {
            swc_visit::Either::Left(visitor) => VisitMut::visit_mut_delimiter_value(visitor, node),
            swc_visit::Either::Right(visitor) => VisitMut::visit_mut_delimiter_value(visitor, node),
        }
    }

    #[inline]
    fn visit_mut_dimension(&mut self, node: &mut Dimension) {
        match self {
            swc_visit::Either::Left(visitor) => VisitMut::visit_mut_dimension(visitor, node),
            swc_visit::Either::Right(visitor) => VisitMut::visit_mut_dimension(visitor, node),
        }
    }

    #[inline]
    fn visit_mut_dimension_token(&mut self, node: &mut DimensionToken) {
        match self {
            swc_visit::Either::Left(visitor) => VisitMut::visit_mut_dimension_token(visitor, node),
            swc_visit::Either::Right(visitor) => VisitMut::visit_mut_dimension_token(visitor, node),
        }
    }

    #[inline]
    fn visit_mut_document_prelude(&mut self, node: &mut DocumentPrelude) {
        match self {
            swc_visit::Either::Left(visitor) => VisitMut::visit_mut_document_prelude(visitor, node),
            swc_visit::Either::Right(visitor) => {
                VisitMut::visit_mut_document_prelude(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_mut_document_prelude_matching_function(
        &mut self,
        node: &mut DocumentPreludeMatchingFunction,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMut::visit_mut_document_prelude_matching_function(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMut::visit_mut_document_prelude_matching_function(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_mut_document_prelude_matching_functions(
        &mut self,
        node: &mut Vec<DocumentPreludeMatchingFunction>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMut::visit_mut_document_prelude_matching_functions(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMut::visit_mut_document_prelude_matching_functions(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_mut_extension_name(&mut self, node: &mut ExtensionName) {
        match self {
            swc_visit::Either::Left(visitor) => VisitMut::visit_mut_extension_name(visitor, node),
            swc_visit::Either::Right(visitor) => VisitMut::visit_mut_extension_name(visitor, node),
        }
    }

    #[inline]
    fn visit_mut_family_name(&mut self, node: &mut FamilyName) {
        match self {
            swc_visit::Either::Left(visitor) => VisitMut::visit_mut_family_name(visitor, node),
            swc_visit::Either::Right(visitor) => VisitMut::visit_mut_family_name(visitor, node),
        }
    }

    #[inline]
    fn visit_mut_family_names(&mut self, node: &mut Vec<FamilyName>) {
        match self {
            swc_visit::Either::Left(visitor) => VisitMut::visit_mut_family_names(visitor, node),
            swc_visit::Either::Right(visitor) => VisitMut::visit_mut_family_names(visitor, node),
        }
    }

    #[inline]
    fn visit_mut_flex(&mut self, node: &mut Flex) {
        match self {
            swc_visit::Either::Left(visitor) => VisitMut::visit_mut_flex(visitor, node),
            swc_visit::Either::Right(visitor) => VisitMut::visit_mut_flex(visitor, node),
        }
    }

    #[inline]
    fn visit_mut_font_feature_values_prelude(&mut self, node: &mut FontFeatureValuesPrelude) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMut::visit_mut_font_feature_values_prelude(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMut::visit_mut_font_feature_values_prelude(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_mut_forgiving_complex_selector(&mut self, node: &mut ForgivingComplexSelector) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMut::visit_mut_forgiving_complex_selector(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMut::visit_mut_forgiving_complex_selector(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_mut_forgiving_complex_selectors(&mut self, node: &mut Vec<ForgivingComplexSelector>) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMut::visit_mut_forgiving_complex_selectors(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMut::visit_mut_forgiving_complex_selectors(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_mut_forgiving_relative_selector(&mut self, node: &mut ForgivingRelativeSelector) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMut::visit_mut_forgiving_relative_selector(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMut::visit_mut_forgiving_relative_selector(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_mut_forgiving_relative_selector_list(
        &mut self,
        node: &mut ForgivingRelativeSelectorList,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMut::visit_mut_forgiving_relative_selector_list(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMut::visit_mut_forgiving_relative_selector_list(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_mut_forgiving_relative_selectors(
        &mut self,
        node: &mut Vec<ForgivingRelativeSelector>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMut::visit_mut_forgiving_relative_selectors(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMut::visit_mut_forgiving_relative_selectors(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_mut_forgiving_selector_list(&mut self, node: &mut ForgivingSelectorList) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMut::visit_mut_forgiving_selector_list(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMut::visit_mut_forgiving_selector_list(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_mut_frequency(&mut self, node: &mut Frequency) {
        match self {
            swc_visit::Either::Left(visitor) => VisitMut::visit_mut_frequency(visitor, node),
            swc_visit::Either::Right(visitor) => VisitMut::visit_mut_frequency(visitor, node),
        }
    }

    #[inline]
    fn visit_mut_frequency_percentage(&mut self, node: &mut FrequencyPercentage) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMut::visit_mut_frequency_percentage(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMut::visit_mut_frequency_percentage(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_mut_function(&mut self, node: &mut Function) {
        match self {
            swc_visit::Either::Left(visitor) => VisitMut::visit_mut_function(visitor, node),
            swc_visit::Either::Right(visitor) => VisitMut::visit_mut_function(visitor, node),
        }
    }

    #[inline]
    fn visit_mut_function_name(&mut self, node: &mut FunctionName) {
        match self {
            swc_visit::Either::Left(visitor) => VisitMut::visit_mut_function_name(visitor, node),
            swc_visit::Either::Right(visitor) => VisitMut::visit_mut_function_name(visitor, node),
        }
    }

    #[inline]
    fn visit_mut_general_enclosed(&mut self, node: &mut GeneralEnclosed) {
        match self {
            swc_visit::Either::Left(visitor) => VisitMut::visit_mut_general_enclosed(visitor, node),
            swc_visit::Either::Right(visitor) => {
                VisitMut::visit_mut_general_enclosed(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_mut_hex_color(&mut self, node: &mut HexColor) {
        match self {
            swc_visit::Either::Left(visitor) => VisitMut::visit_mut_hex_color(visitor, node),
            swc_visit::Either::Right(visitor) => VisitMut::visit_mut_hex_color(visitor, node),
        }
    }

    #[inline]
    fn visit_mut_hue(&mut self, node: &mut Hue) {
        match self {
            swc_visit::Either::Left(visitor) => VisitMut::visit_mut_hue(visitor, node),
            swc_visit::Either::Right(visitor) => VisitMut::visit_mut_hue(visitor, node),
        }
    }

    #[inline]
    fn visit_mut_id_selector(&mut self, node: &mut IdSelector) {
        match self {
            swc_visit::Either::Left(visitor) => VisitMut::visit_mut_id_selector(visitor, node),
            swc_visit::Either::Right(visitor) => VisitMut::visit_mut_id_selector(visitor, node),
        }
    }

    #[inline]
    fn visit_mut_ident(&mut self, node: &mut Ident) {
        match self {
            swc_visit::Either::Left(visitor) => VisitMut::visit_mut_ident(visitor, node),
            swc_visit::Either::Right(visitor) => VisitMut::visit_mut_ident(visitor, node),
        }
    }

    #[inline]
    fn visit_mut_idents(&mut self, node: &mut Vec<Ident>) {
        match self {
            swc_visit::Either::Left(visitor) => VisitMut::visit_mut_idents(visitor, node),
            swc_visit::Either::Right(visitor) => VisitMut::visit_mut_idents(visitor, node),
        }
    }

    #[inline]
    fn visit_mut_import_conditions(&mut self, node: &mut ImportConditions) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMut::visit_mut_import_conditions(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMut::visit_mut_import_conditions(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_mut_import_href(&mut self, node: &mut ImportHref) {
        match self {
            swc_visit::Either::Left(visitor) => VisitMut::visit_mut_import_href(visitor, node),
            swc_visit::Either::Right(visitor) => VisitMut::visit_mut_import_href(visitor, node),
        }
    }

    #[inline]
    fn visit_mut_import_layer_name(&mut self, node: &mut ImportLayerName) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMut::visit_mut_import_layer_name(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMut::visit_mut_import_layer_name(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_mut_import_prelude(&mut self, node: &mut ImportPrelude) {
        match self {
            swc_visit::Either::Left(visitor) => VisitMut::visit_mut_import_prelude(visitor, node),
            swc_visit::Either::Right(visitor) => VisitMut::visit_mut_import_prelude(visitor, node),
        }
    }

    #[inline]
    fn visit_mut_important_flag(&mut self, node: &mut ImportantFlag) {
        match self {
            swc_visit::Either::Left(visitor) => VisitMut::visit_mut_important_flag(visitor, node),
            swc_visit::Either::Right(visitor) => VisitMut::visit_mut_important_flag(visitor, node),
        }
    }

    #[inline]
    fn visit_mut_integer(&mut self, node: &mut Integer) {
        match self {
            swc_visit::Either::Left(visitor) => VisitMut::visit_mut_integer(visitor, node),
            swc_visit::Either::Right(visitor) => VisitMut::visit_mut_integer(visitor, node),
        }
    }

    #[inline]
    fn visit_mut_keyframe_block(&mut self, node: &mut KeyframeBlock) {
        match self {
            swc_visit::Either::Left(visitor) => VisitMut::visit_mut_keyframe_block(visitor, node),
            swc_visit::Either::Right(visitor) => VisitMut::visit_mut_keyframe_block(visitor, node),
        }
    }

    #[inline]
    fn visit_mut_keyframe_selector(&mut self, node: &mut KeyframeSelector) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMut::visit_mut_keyframe_selector(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMut::visit_mut_keyframe_selector(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_mut_keyframe_selectors(&mut self, node: &mut Vec<KeyframeSelector>) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMut::visit_mut_keyframe_selectors(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMut::visit_mut_keyframe_selectors(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_mut_keyframes_name(&mut self, node: &mut KeyframesName) {
        match self {
            swc_visit::Either::Left(visitor) => VisitMut::visit_mut_keyframes_name(visitor, node),
            swc_visit::Either::Right(visitor) => VisitMut::visit_mut_keyframes_name(visitor, node),
        }
    }

    #[inline]
    fn visit_mut_keyframes_pseudo_function(&mut self, node: &mut KeyframesPseudoFunction) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMut::visit_mut_keyframes_pseudo_function(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMut::visit_mut_keyframes_pseudo_function(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_mut_keyframes_pseudo_prefix(&mut self, node: &mut KeyframesPseudoPrefix) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMut::visit_mut_keyframes_pseudo_prefix(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMut::visit_mut_keyframes_pseudo_prefix(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_mut_layer_name(&mut self, node: &mut LayerName) {
        match self {
            swc_visit::Either::Left(visitor) => VisitMut::visit_mut_layer_name(visitor, node),
            swc_visit::Either::Right(visitor) => VisitMut::visit_mut_layer_name(visitor, node),
        }
    }

    #[inline]
    fn visit_mut_layer_name_list(&mut self, node: &mut LayerNameList) {
        match self {
            swc_visit::Either::Left(visitor) => VisitMut::visit_mut_layer_name_list(visitor, node),
            swc_visit::Either::Right(visitor) => VisitMut::visit_mut_layer_name_list(visitor, node),
        }
    }

    #[inline]
    fn visit_mut_layer_names(&mut self, node: &mut Vec<LayerName>) {
        match self {
            swc_visit::Either::Left(visitor) => VisitMut::visit_mut_layer_names(visitor, node),
            swc_visit::Either::Right(visitor) => VisitMut::visit_mut_layer_names(visitor, node),
        }
    }

    #[inline]
    fn visit_mut_layer_prelude(&mut self, node: &mut LayerPrelude) {
        match self {
            swc_visit::Either::Left(visitor) => VisitMut::visit_mut_layer_prelude(visitor, node),
            swc_visit::Either::Right(visitor) => VisitMut::visit_mut_layer_prelude(visitor, node),
        }
    }

    #[inline]
    fn visit_mut_length(&mut self, node: &mut Length) {
        match self {
            swc_visit::Either::Left(visitor) => VisitMut::visit_mut_length(visitor, node),
            swc_visit::Either::Right(visitor) => VisitMut::visit_mut_length(visitor, node),
        }
    }

    #[inline]
    fn visit_mut_length_percentage(&mut self, node: &mut LengthPercentage) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMut::visit_mut_length_percentage(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMut::visit_mut_length_percentage(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_mut_list_of_component_values(&mut self, node: &mut ListOfComponentValues) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMut::visit_mut_list_of_component_values(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMut::visit_mut_list_of_component_values(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_mut_media_and(&mut self, node: &mut MediaAnd) {
        match self {
            swc_visit::Either::Left(visitor) => VisitMut::visit_mut_media_and(visitor, node),
            swc_visit::Either::Right(visitor) => VisitMut::visit_mut_media_and(visitor, node),
        }
    }

    #[inline]
    fn visit_mut_media_condition(&mut self, node: &mut MediaCondition) {
        match self {
            swc_visit::Either::Left(visitor) => VisitMut::visit_mut_media_condition(visitor, node),
            swc_visit::Either::Right(visitor) => VisitMut::visit_mut_media_condition(visitor, node),
        }
    }

    #[inline]
    fn visit_mut_media_condition_all_type(&mut self, node: &mut MediaConditionAllType) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMut::visit_mut_media_condition_all_type(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMut::visit_mut_media_condition_all_type(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_mut_media_condition_all_types(&mut self, node: &mut Vec<MediaConditionAllType>) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMut::visit_mut_media_condition_all_types(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMut::visit_mut_media_condition_all_types(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_mut_media_condition_type(&mut self, node: &mut MediaConditionType) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMut::visit_mut_media_condition_type(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMut::visit_mut_media_condition_type(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_mut_media_condition_without_or(&mut self, node: &mut MediaConditionWithoutOr) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMut::visit_mut_media_condition_without_or(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMut::visit_mut_media_condition_without_or(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_mut_media_condition_without_or_type(
        &mut self,
        node: &mut MediaConditionWithoutOrType,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMut::visit_mut_media_condition_without_or_type(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMut::visit_mut_media_condition_without_or_type(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_mut_media_condition_without_or_types(
        &mut self,
        node: &mut Vec<MediaConditionWithoutOrType>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMut::visit_mut_media_condition_without_or_types(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMut::visit_mut_media_condition_without_or_types(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_mut_media_feature(&mut self, node: &mut MediaFeature) {
        match self {
            swc_visit::Either::Left(visitor) => VisitMut::visit_mut_media_feature(visitor, node),
            swc_visit::Either::Right(visitor) => VisitMut::visit_mut_media_feature(visitor, node),
        }
    }

    #[inline]
    fn visit_mut_media_feature_boolean(&mut self, node: &mut MediaFeatureBoolean) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMut::visit_mut_media_feature_boolean(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMut::visit_mut_media_feature_boolean(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_mut_media_feature_name(&mut self, node: &mut MediaFeatureName) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMut::visit_mut_media_feature_name(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMut::visit_mut_media_feature_name(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_mut_media_feature_plain(&mut self, node: &mut MediaFeaturePlain) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMut::visit_mut_media_feature_plain(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMut::visit_mut_media_feature_plain(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_mut_media_feature_range(&mut self, node: &mut MediaFeatureRange) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMut::visit_mut_media_feature_range(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMut::visit_mut_media_feature_range(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_mut_media_feature_range_comparison(&mut self, node: &mut MediaFeatureRangeComparison) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMut::visit_mut_media_feature_range_comparison(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMut::visit_mut_media_feature_range_comparison(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_mut_media_feature_range_interval(&mut self, node: &mut MediaFeatureRangeInterval) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMut::visit_mut_media_feature_range_interval(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMut::visit_mut_media_feature_range_interval(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_mut_media_feature_value(&mut self, node: &mut MediaFeatureValue) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMut::visit_mut_media_feature_value(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMut::visit_mut_media_feature_value(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_mut_media_in_parens(&mut self, node: &mut MediaInParens) {
        match self {
            swc_visit::Either::Left(visitor) => VisitMut::visit_mut_media_in_parens(visitor, node),
            swc_visit::Either::Right(visitor) => VisitMut::visit_mut_media_in_parens(visitor, node),
        }
    }

    #[inline]
    fn visit_mut_media_not(&mut self, node: &mut MediaNot) {
        match self {
            swc_visit::Either::Left(visitor) => VisitMut::visit_mut_media_not(visitor, node),
            swc_visit::Either::Right(visitor) => VisitMut::visit_mut_media_not(visitor, node),
        }
    }

    #[inline]
    fn visit_mut_media_or(&mut self, node: &mut MediaOr) {
        match self {
            swc_visit::Either::Left(visitor) => VisitMut::visit_mut_media_or(visitor, node),
            swc_visit::Either::Right(visitor) => VisitMut::visit_mut_media_or(visitor, node),
        }
    }

    #[inline]
    fn visit_mut_media_query(&mut self, node: &mut MediaQuery) {
        match self {
            swc_visit::Either::Left(visitor) => VisitMut::visit_mut_media_query(visitor, node),
            swc_visit::Either::Right(visitor) => VisitMut::visit_mut_media_query(visitor, node),
        }
    }

    #[inline]
    fn visit_mut_media_query_list(&mut self, node: &mut MediaQueryList) {
        match self {
            swc_visit::Either::Left(visitor) => VisitMut::visit_mut_media_query_list(visitor, node),
            swc_visit::Either::Right(visitor) => {
                VisitMut::visit_mut_media_query_list(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_mut_media_querys(&mut self, node: &mut Vec<MediaQuery>) {
        match self {
            swc_visit::Either::Left(visitor) => VisitMut::visit_mut_media_querys(visitor, node),
            swc_visit::Either::Right(visitor) => VisitMut::visit_mut_media_querys(visitor, node),
        }
    }

    #[inline]
    fn visit_mut_media_type(&mut self, node: &mut MediaType) {
        match self {
            swc_visit::Either::Left(visitor) => VisitMut::visit_mut_media_type(visitor, node),
            swc_visit::Either::Right(visitor) => VisitMut::visit_mut_media_type(visitor, node),
        }
    }

    #[inline]
    fn visit_mut_named_namespace(&mut self, node: &mut NamedNamespace) {
        match self {
            swc_visit::Either::Left(visitor) => VisitMut::visit_mut_named_namespace(visitor, node),
            swc_visit::Either::Right(visitor) => VisitMut::visit_mut_named_namespace(visitor, node),
        }
    }

    #[inline]
    fn visit_mut_namespace(&mut self, node: &mut Namespace) {
        match self {
            swc_visit::Either::Left(visitor) => VisitMut::visit_mut_namespace(visitor, node),
            swc_visit::Either::Right(visitor) => VisitMut::visit_mut_namespace(visitor, node),
        }
    }

    #[inline]
    fn visit_mut_namespace_prefix(&mut self, node: &mut NamespacePrefix) {
        match self {
            swc_visit::Either::Left(visitor) => VisitMut::visit_mut_namespace_prefix(visitor, node),
            swc_visit::Either::Right(visitor) => {
                VisitMut::visit_mut_namespace_prefix(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_mut_namespace_prelude(&mut self, node: &mut NamespacePrelude) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMut::visit_mut_namespace_prelude(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMut::visit_mut_namespace_prelude(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_mut_namespace_prelude_uri(&mut self, node: &mut NamespacePreludeUri) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMut::visit_mut_namespace_prelude_uri(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMut::visit_mut_namespace_prelude_uri(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_mut_nesting_selector(&mut self, node: &mut NestingSelector) {
        match self {
            swc_visit::Either::Left(visitor) => VisitMut::visit_mut_nesting_selector(visitor, node),
            swc_visit::Either::Right(visitor) => {
                VisitMut::visit_mut_nesting_selector(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_mut_number(&mut self, node: &mut Number) {
        match self {
            swc_visit::Either::Left(visitor) => VisitMut::visit_mut_number(visitor, node),
            swc_visit::Either::Right(visitor) => VisitMut::visit_mut_number(visitor, node),
        }
    }

    #[inline]
    fn visit_mut_number_type(&mut self, node: &mut NumberType) {
        match self {
            swc_visit::Either::Left(visitor) => VisitMut::visit_mut_number_type(visitor, node),
            swc_visit::Either::Right(visitor) => VisitMut::visit_mut_number_type(visitor, node),
        }
    }

    #[inline]
    fn visit_mut_opt_at_rule_prelude(&mut self, node: &mut Option<Box<AtRulePrelude>>) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMut::visit_mut_opt_at_rule_prelude(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMut::visit_mut_opt_at_rule_prelude(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_mut_opt_atom(&mut self, node: &mut Option<swc_atoms::Atom>) {
        match self {
            swc_visit::Either::Left(visitor) => VisitMut::visit_mut_opt_atom(visitor, node),
            swc_visit::Either::Right(visitor) => VisitMut::visit_mut_opt_atom(visitor, node),
        }
    }

    #[inline]
    fn visit_mut_opt_attribute_selector_matcher(
        &mut self,
        node: &mut Option<AttributeSelectorMatcher>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMut::visit_mut_opt_attribute_selector_matcher(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMut::visit_mut_opt_attribute_selector_matcher(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_mut_opt_attribute_selector_modifier(
        &mut self,
        node: &mut Option<AttributeSelectorModifier>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMut::visit_mut_opt_attribute_selector_modifier(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMut::visit_mut_opt_attribute_selector_modifier(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_mut_opt_attribute_selector_value(
        &mut self,
        node: &mut Option<AttributeSelectorValue>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMut::visit_mut_opt_attribute_selector_value(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMut::visit_mut_opt_attribute_selector_value(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_mut_opt_combinator(&mut self, node: &mut Option<Combinator>) {
        match self {
            swc_visit::Either::Left(visitor) => VisitMut::visit_mut_opt_combinator(visitor, node),
            swc_visit::Either::Right(visitor) => VisitMut::visit_mut_opt_combinator(visitor, node),
        }
    }

    #[inline]
    fn visit_mut_opt_container_name(&mut self, node: &mut Option<ContainerName>) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMut::visit_mut_opt_container_name(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMut::visit_mut_opt_container_name(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_mut_opt_forgiving_selector_list(&mut self, node: &mut Option<ForgivingSelectorList>) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMut::visit_mut_opt_forgiving_selector_list(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMut::visit_mut_opt_forgiving_selector_list(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_mut_opt_function(&mut self, node: &mut Option<Box<Function>>) {
        match self {
            swc_visit::Either::Left(visitor) => VisitMut::visit_mut_opt_function(visitor, node),
            swc_visit::Either::Right(visitor) => VisitMut::visit_mut_opt_function(visitor, node),
        }
    }

    #[inline]
    fn visit_mut_opt_ident(&mut self, node: &mut Option<Ident>) {
        match self {
            swc_visit::Either::Left(visitor) => VisitMut::visit_mut_opt_ident(visitor, node),
            swc_visit::Either::Right(visitor) => VisitMut::visit_mut_opt_ident(visitor, node),
        }
    }

    #[inline]
    fn visit_mut_opt_import_conditions(&mut self, node: &mut Option<Box<ImportConditions>>) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMut::visit_mut_opt_import_conditions(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMut::visit_mut_opt_import_conditions(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_mut_opt_import_layer_name(&mut self, node: &mut Option<Box<ImportLayerName>>) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMut::visit_mut_opt_import_layer_name(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMut::visit_mut_opt_import_layer_name(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_mut_opt_important_flag(&mut self, node: &mut Option<ImportantFlag>) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMut::visit_mut_opt_important_flag(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMut::visit_mut_opt_important_flag(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_mut_opt_media_condition_type(&mut self, node: &mut Option<Box<MediaConditionType>>) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMut::visit_mut_opt_media_condition_type(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMut::visit_mut_opt_media_condition_type(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_mut_opt_media_query_list(&mut self, node: &mut Option<Box<MediaQueryList>>) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMut::visit_mut_opt_media_query_list(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMut::visit_mut_opt_media_query_list(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_mut_opt_media_type(&mut self, node: &mut Option<MediaType>) {
        match self {
            swc_visit::Either::Left(visitor) => VisitMut::visit_mut_opt_media_type(visitor, node),
            swc_visit::Either::Right(visitor) => VisitMut::visit_mut_opt_media_type(visitor, node),
        }
    }

    #[inline]
    fn visit_mut_opt_namespace(&mut self, node: &mut Option<Namespace>) {
        match self {
            swc_visit::Either::Left(visitor) => VisitMut::visit_mut_opt_namespace(visitor, node),
            swc_visit::Either::Right(visitor) => VisitMut::visit_mut_opt_namespace(visitor, node),
        }
    }

    #[inline]
    fn visit_mut_opt_namespace_prefix(&mut self, node: &mut Option<NamespacePrefix>) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMut::visit_mut_opt_namespace_prefix(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMut::visit_mut_opt_namespace_prefix(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_mut_opt_nesting_selector(&mut self, node: &mut Option<NestingSelector>) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMut::visit_mut_opt_nesting_selector(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMut::visit_mut_opt_nesting_selector(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_mut_opt_number(&mut self, node: &mut Option<Number>) {
        match self {
            swc_visit::Either::Left(visitor) => VisitMut::visit_mut_opt_number(visitor, node),
            swc_visit::Either::Right(visitor) => VisitMut::visit_mut_opt_number(visitor, node),
        }
    }

    #[inline]
    fn visit_mut_opt_page_selector_pseudos(&mut self, node: &mut Option<Vec<PageSelectorPseudo>>) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMut::visit_mut_opt_page_selector_pseudos(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMut::visit_mut_opt_page_selector_pseudos(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_mut_opt_page_selector_type(&mut self, node: &mut Option<PageSelectorType>) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMut::visit_mut_opt_page_selector_type(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMut::visit_mut_opt_page_selector_type(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_mut_opt_pseudo_class_selector_childrens(
        &mut self,
        node: &mut Option<Vec<PseudoClassSelectorChildren>>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMut::visit_mut_opt_pseudo_class_selector_childrens(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMut::visit_mut_opt_pseudo_class_selector_childrens(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_mut_opt_pseudo_element_selector_childrens(
        &mut self,
        node: &mut Option<Vec<PseudoElementSelectorChildren>>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMut::visit_mut_opt_pseudo_element_selector_childrens(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMut::visit_mut_opt_pseudo_element_selector_childrens(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_mut_opt_simple_block(&mut self, node: &mut Option<SimpleBlock>) {
        match self {
            swc_visit::Either::Left(visitor) => VisitMut::visit_mut_opt_simple_block(visitor, node),
            swc_visit::Either::Right(visitor) => {
                VisitMut::visit_mut_opt_simple_block(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_mut_opt_type_selector(&mut self, node: &mut Option<Box<TypeSelector>>) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMut::visit_mut_opt_type_selector(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMut::visit_mut_opt_type_selector(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_mut_opt_url_modifiers(&mut self, node: &mut Option<Vec<UrlModifier>>) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMut::visit_mut_opt_url_modifiers(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMut::visit_mut_opt_url_modifiers(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_mut_opt_url_value(&mut self, node: &mut Option<Box<UrlValue>>) {
        match self {
            swc_visit::Either::Left(visitor) => VisitMut::visit_mut_opt_url_value(visitor, node),
            swc_visit::Either::Right(visitor) => VisitMut::visit_mut_opt_url_value(visitor, node),
        }
    }

    #[inline]
    fn visit_mut_page_selector(&mut self, node: &mut PageSelector) {
        match self {
            swc_visit::Either::Left(visitor) => VisitMut::visit_mut_page_selector(visitor, node),
            swc_visit::Either::Right(visitor) => VisitMut::visit_mut_page_selector(visitor, node),
        }
    }

    #[inline]
    fn visit_mut_page_selector_list(&mut self, node: &mut PageSelectorList) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMut::visit_mut_page_selector_list(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMut::visit_mut_page_selector_list(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_mut_page_selector_pseudo(&mut self, node: &mut PageSelectorPseudo) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMut::visit_mut_page_selector_pseudo(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMut::visit_mut_page_selector_pseudo(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_mut_page_selector_pseudos(&mut self, node: &mut Vec<PageSelectorPseudo>) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMut::visit_mut_page_selector_pseudos(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMut::visit_mut_page_selector_pseudos(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_mut_page_selector_type(&mut self, node: &mut PageSelectorType) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMut::visit_mut_page_selector_type(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMut::visit_mut_page_selector_type(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_mut_page_selectors(&mut self, node: &mut Vec<PageSelector>) {
        match self {
            swc_visit::Either::Left(visitor) => VisitMut::visit_mut_page_selectors(visitor, node),
            swc_visit::Either::Right(visitor) => VisitMut::visit_mut_page_selectors(visitor, node),
        }
    }

    #[inline]
    fn visit_mut_percentage(&mut self, node: &mut Percentage) {
        match self {
            swc_visit::Either::Left(visitor) => VisitMut::visit_mut_percentage(visitor, node),
            swc_visit::Either::Right(visitor) => VisitMut::visit_mut_percentage(visitor, node),
        }
    }

    #[inline]
    fn visit_mut_pseudo_class_selector(&mut self, node: &mut PseudoClassSelector) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMut::visit_mut_pseudo_class_selector(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMut::visit_mut_pseudo_class_selector(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_mut_pseudo_class_selector_children(&mut self, node: &mut PseudoClassSelectorChildren) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMut::visit_mut_pseudo_class_selector_children(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMut::visit_mut_pseudo_class_selector_children(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_mut_pseudo_class_selector_childrens(
        &mut self,
        node: &mut Vec<PseudoClassSelectorChildren>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMut::visit_mut_pseudo_class_selector_childrens(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMut::visit_mut_pseudo_class_selector_childrens(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_mut_pseudo_element_selector(&mut self, node: &mut PseudoElementSelector) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMut::visit_mut_pseudo_element_selector(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMut::visit_mut_pseudo_element_selector(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_mut_pseudo_element_selector_children(
        &mut self,
        node: &mut PseudoElementSelectorChildren,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMut::visit_mut_pseudo_element_selector_children(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMut::visit_mut_pseudo_element_selector_children(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_mut_pseudo_element_selector_childrens(
        &mut self,
        node: &mut Vec<PseudoElementSelectorChildren>,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMut::visit_mut_pseudo_element_selector_childrens(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMut::visit_mut_pseudo_element_selector_childrens(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_mut_qualified_rule(&mut self, node: &mut QualifiedRule) {
        match self {
            swc_visit::Either::Left(visitor) => VisitMut::visit_mut_qualified_rule(visitor, node),
            swc_visit::Either::Right(visitor) => VisitMut::visit_mut_qualified_rule(visitor, node),
        }
    }

    #[inline]
    fn visit_mut_qualified_rule_prelude(&mut self, node: &mut QualifiedRulePrelude) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMut::visit_mut_qualified_rule_prelude(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMut::visit_mut_qualified_rule_prelude(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_mut_query_in_parens(&mut self, node: &mut QueryInParens) {
        match self {
            swc_visit::Either::Left(visitor) => VisitMut::visit_mut_query_in_parens(visitor, node),
            swc_visit::Either::Right(visitor) => VisitMut::visit_mut_query_in_parens(visitor, node),
        }
    }

    #[inline]
    fn visit_mut_ratio(&mut self, node: &mut Ratio) {
        match self {
            swc_visit::Either::Left(visitor) => VisitMut::visit_mut_ratio(visitor, node),
            swc_visit::Either::Right(visitor) => VisitMut::visit_mut_ratio(visitor, node),
        }
    }

    #[inline]
    fn visit_mut_relative_selector(&mut self, node: &mut RelativeSelector) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMut::visit_mut_relative_selector(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMut::visit_mut_relative_selector(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_mut_relative_selector_list(&mut self, node: &mut RelativeSelectorList) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMut::visit_mut_relative_selector_list(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMut::visit_mut_relative_selector_list(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_mut_relative_selectors(&mut self, node: &mut Vec<RelativeSelector>) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMut::visit_mut_relative_selectors(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMut::visit_mut_relative_selectors(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_mut_resolution(&mut self, node: &mut Resolution) {
        match self {
            swc_visit::Either::Left(visitor) => VisitMut::visit_mut_resolution(visitor, node),
            swc_visit::Either::Right(visitor) => VisitMut::visit_mut_resolution(visitor, node),
        }
    }

    #[inline]
    fn visit_mut_rule(&mut self, node: &mut Rule) {
        match self {
            swc_visit::Either::Left(visitor) => VisitMut::visit_mut_rule(visitor, node),
            swc_visit::Either::Right(visitor) => VisitMut::visit_mut_rule(visitor, node),
        }
    }

    #[inline]
    fn visit_mut_rules(&mut self, node: &mut Vec<Rule>) {
        match self {
            swc_visit::Either::Left(visitor) => VisitMut::visit_mut_rules(visitor, node),
            swc_visit::Either::Right(visitor) => VisitMut::visit_mut_rules(visitor, node),
        }
    }

    #[inline]
    fn visit_mut_scope_range(&mut self, node: &mut ScopeRange) {
        match self {
            swc_visit::Either::Left(visitor) => VisitMut::visit_mut_scope_range(visitor, node),
            swc_visit::Either::Right(visitor) => VisitMut::visit_mut_scope_range(visitor, node),
        }
    }

    #[inline]
    fn visit_mut_selector_list(&mut self, node: &mut SelectorList) {
        match self {
            swc_visit::Either::Left(visitor) => VisitMut::visit_mut_selector_list(visitor, node),
            swc_visit::Either::Right(visitor) => VisitMut::visit_mut_selector_list(visitor, node),
        }
    }

    #[inline]
    fn visit_mut_sequence_of_custom_idents(&mut self, node: &mut SequenceOfCustomIdents) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMut::visit_mut_sequence_of_custom_idents(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMut::visit_mut_sequence_of_custom_idents(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_mut_simple_block(&mut self, node: &mut SimpleBlock) {
        match self {
            swc_visit::Either::Left(visitor) => VisitMut::visit_mut_simple_block(visitor, node),
            swc_visit::Either::Right(visitor) => VisitMut::visit_mut_simple_block(visitor, node),
        }
    }

    #[inline]
    fn visit_mut_size_feature(&mut self, node: &mut SizeFeature) {
        match self {
            swc_visit::Either::Left(visitor) => VisitMut::visit_mut_size_feature(visitor, node),
            swc_visit::Either::Right(visitor) => VisitMut::visit_mut_size_feature(visitor, node),
        }
    }

    #[inline]
    fn visit_mut_size_feature_boolean(&mut self, node: &mut SizeFeatureBoolean) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMut::visit_mut_size_feature_boolean(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMut::visit_mut_size_feature_boolean(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_mut_size_feature_name(&mut self, node: &mut SizeFeatureName) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMut::visit_mut_size_feature_name(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMut::visit_mut_size_feature_name(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_mut_size_feature_plain(&mut self, node: &mut SizeFeaturePlain) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMut::visit_mut_size_feature_plain(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMut::visit_mut_size_feature_plain(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_mut_size_feature_range(&mut self, node: &mut SizeFeatureRange) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMut::visit_mut_size_feature_range(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMut::visit_mut_size_feature_range(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_mut_size_feature_range_comparison(&mut self, node: &mut SizeFeatureRangeComparison) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMut::visit_mut_size_feature_range_comparison(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMut::visit_mut_size_feature_range_comparison(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_mut_size_feature_range_interval(&mut self, node: &mut SizeFeatureRangeInterval) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMut::visit_mut_size_feature_range_interval(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMut::visit_mut_size_feature_range_interval(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_mut_size_feature_value(&mut self, node: &mut SizeFeatureValue) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMut::visit_mut_size_feature_value(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMut::visit_mut_size_feature_value(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_mut_span(&mut self, node: &mut swc_common::Span) {
        match self {
            swc_visit::Either::Left(visitor) => VisitMut::visit_mut_span(visitor, node),
            swc_visit::Either::Right(visitor) => VisitMut::visit_mut_span(visitor, node),
        }
    }

    #[inline]
    fn visit_mut_str(&mut self, node: &mut Str) {
        match self {
            swc_visit::Either::Left(visitor) => VisitMut::visit_mut_str(visitor, node),
            swc_visit::Either::Right(visitor) => VisitMut::visit_mut_str(visitor, node),
        }
    }

    #[inline]
    fn visit_mut_style_block(&mut self, node: &mut StyleBlock) {
        match self {
            swc_visit::Either::Left(visitor) => VisitMut::visit_mut_style_block(visitor, node),
            swc_visit::Either::Right(visitor) => VisitMut::visit_mut_style_block(visitor, node),
        }
    }

    #[inline]
    fn visit_mut_stylesheet(&mut self, node: &mut Stylesheet) {
        match self {
            swc_visit::Either::Left(visitor) => VisitMut::visit_mut_stylesheet(visitor, node),
            swc_visit::Either::Right(visitor) => VisitMut::visit_mut_stylesheet(visitor, node),
        }
    }

    #[inline]
    fn visit_mut_subclass_selector(&mut self, node: &mut SubclassSelector) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMut::visit_mut_subclass_selector(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMut::visit_mut_subclass_selector(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_mut_subclass_selectors(&mut self, node: &mut Vec<SubclassSelector>) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMut::visit_mut_subclass_selectors(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMut::visit_mut_subclass_selectors(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_mut_supports_and(&mut self, node: &mut SupportsAnd) {
        match self {
            swc_visit::Either::Left(visitor) => VisitMut::visit_mut_supports_and(visitor, node),
            swc_visit::Either::Right(visitor) => VisitMut::visit_mut_supports_and(visitor, node),
        }
    }

    #[inline]
    fn visit_mut_supports_condition(&mut self, node: &mut SupportsCondition) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMut::visit_mut_supports_condition(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMut::visit_mut_supports_condition(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_mut_supports_condition_type(&mut self, node: &mut SupportsConditionType) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMut::visit_mut_supports_condition_type(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMut::visit_mut_supports_condition_type(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_mut_supports_condition_types(&mut self, node: &mut Vec<SupportsConditionType>) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMut::visit_mut_supports_condition_types(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMut::visit_mut_supports_condition_types(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_mut_supports_feature(&mut self, node: &mut SupportsFeature) {
        match self {
            swc_visit::Either::Left(visitor) => VisitMut::visit_mut_supports_feature(visitor, node),
            swc_visit::Either::Right(visitor) => {
                VisitMut::visit_mut_supports_feature(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_mut_supports_in_parens(&mut self, node: &mut SupportsInParens) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMut::visit_mut_supports_in_parens(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMut::visit_mut_supports_in_parens(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_mut_supports_not(&mut self, node: &mut SupportsNot) {
        match self {
            swc_visit::Either::Left(visitor) => VisitMut::visit_mut_supports_not(visitor, node),
            swc_visit::Either::Right(visitor) => VisitMut::visit_mut_supports_not(visitor, node),
        }
    }

    #[inline]
    fn visit_mut_supports_or(&mut self, node: &mut SupportsOr) {
        match self {
            swc_visit::Either::Left(visitor) => VisitMut::visit_mut_supports_or(visitor, node),
            swc_visit::Either::Right(visitor) => VisitMut::visit_mut_supports_or(visitor, node),
        }
    }

    #[inline]
    fn visit_mut_tag_name_selector(&mut self, node: &mut TagNameSelector) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMut::visit_mut_tag_name_selector(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMut::visit_mut_tag_name_selector(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_mut_time(&mut self, node: &mut Time) {
        match self {
            swc_visit::Either::Left(visitor) => VisitMut::visit_mut_time(visitor, node),
            swc_visit::Either::Right(visitor) => VisitMut::visit_mut_time(visitor, node),
        }
    }

    #[inline]
    fn visit_mut_time_percentage(&mut self, node: &mut TimePercentage) {
        match self {
            swc_visit::Either::Left(visitor) => VisitMut::visit_mut_time_percentage(visitor, node),
            swc_visit::Either::Right(visitor) => VisitMut::visit_mut_time_percentage(visitor, node),
        }
    }

    #[inline]
    fn visit_mut_token(&mut self, node: &mut Token) {
        match self {
            swc_visit::Either::Left(visitor) => VisitMut::visit_mut_token(visitor, node),
            swc_visit::Either::Right(visitor) => VisitMut::visit_mut_token(visitor, node),
        }
    }

    #[inline]
    fn visit_mut_token_and_span(&mut self, node: &mut TokenAndSpan) {
        match self {
            swc_visit::Either::Left(visitor) => VisitMut::visit_mut_token_and_span(visitor, node),
            swc_visit::Either::Right(visitor) => VisitMut::visit_mut_token_and_span(visitor, node),
        }
    }

    #[inline]
    fn visit_mut_type_selector(&mut self, node: &mut TypeSelector) {
        match self {
            swc_visit::Either::Left(visitor) => VisitMut::visit_mut_type_selector(visitor, node),
            swc_visit::Either::Right(visitor) => VisitMut::visit_mut_type_selector(visitor, node),
        }
    }

    #[inline]
    fn visit_mut_unicode_range(&mut self, node: &mut UnicodeRange) {
        match self {
            swc_visit::Either::Left(visitor) => VisitMut::visit_mut_unicode_range(visitor, node),
            swc_visit::Either::Right(visitor) => VisitMut::visit_mut_unicode_range(visitor, node),
        }
    }

    #[inline]
    fn visit_mut_universal_selector(&mut self, node: &mut UniversalSelector) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMut::visit_mut_universal_selector(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMut::visit_mut_universal_selector(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_mut_unknown_dimension(&mut self, node: &mut UnknownDimension) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMut::visit_mut_unknown_dimension(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMut::visit_mut_unknown_dimension(visitor, node)
            }
        }
    }

    #[inline]
    fn visit_mut_url(&mut self, node: &mut Url) {
        match self {
            swc_visit::Either::Left(visitor) => VisitMut::visit_mut_url(visitor, node),
            swc_visit::Either::Right(visitor) => VisitMut::visit_mut_url(visitor, node),
        }
    }

    #[inline]
    fn visit_mut_url_key_value(&mut self, node: &mut UrlKeyValue) {
        match self {
            swc_visit::Either::Left(visitor) => VisitMut::visit_mut_url_key_value(visitor, node),
            swc_visit::Either::Right(visitor) => VisitMut::visit_mut_url_key_value(visitor, node),
        }
    }

    #[inline]
    fn visit_mut_url_modifier(&mut self, node: &mut UrlModifier) {
        match self {
            swc_visit::Either::Left(visitor) => VisitMut::visit_mut_url_modifier(visitor, node),
            swc_visit::Either::Right(visitor) => VisitMut::visit_mut_url_modifier(visitor, node),
        }
    }

    #[inline]
    fn visit_mut_url_modifiers(&mut self, node: &mut Vec<UrlModifier>) {
        match self {
            swc_visit::Either::Left(visitor) => VisitMut::visit_mut_url_modifiers(visitor, node),
            swc_visit::Either::Right(visitor) => VisitMut::visit_mut_url_modifiers(visitor, node),
        }
    }

    #[inline]
    fn visit_mut_url_value(&mut self, node: &mut UrlValue) {
        match self {
            swc_visit::Either::Left(visitor) => VisitMut::visit_mut_url_value(visitor, node),
            swc_visit::Either::Right(visitor) => VisitMut::visit_mut_url_value(visitor, node),
        }
    }

    #[inline]
    fn visit_mut_url_value_raw(&mut self, node: &mut UrlValueRaw) {
        match self {
            swc_visit::Either::Left(visitor) => VisitMut::visit_mut_url_value_raw(visitor, node),
            swc_visit::Either::Right(visitor) => VisitMut::visit_mut_url_value_raw(visitor, node),
        }
    }

    #[inline]
    fn visit_mut_wq_name(&mut self, node: &mut WqName) {
        match self {
            swc_visit::Either::Left(visitor) => VisitMut::visit_mut_wq_name(visitor, node),
            swc_visit::Either::Right(visitor) => VisitMut::visit_mut_wq_name(visitor, node),
        }
    }
}
impl<V> VisitMut for ::swc_visit::Optional<V>
where
    V: VisitMut,
{
    #[inline]
    fn visit_mut_absolute_color_base(&mut self, node: &mut AbsoluteColorBase) {
        if self.enabled {
            <V as VisitMut>::visit_mut_absolute_color_base(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_alpha_value(&mut self, node: &mut AlphaValue) {
        if self.enabled {
            <V as VisitMut>::visit_mut_alpha_value(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_an_plus_b(&mut self, node: &mut AnPlusB) {
        if self.enabled {
            <V as VisitMut>::visit_mut_an_plus_b(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_an_plus_b_notation(&mut self, node: &mut AnPlusBNotation) {
        if self.enabled {
            <V as VisitMut>::visit_mut_an_plus_b_notation(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_angle(&mut self, node: &mut Angle) {
        if self.enabled {
            <V as VisitMut>::visit_mut_angle(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_angle_percentage(&mut self, node: &mut AnglePercentage) {
        if self.enabled {
            <V as VisitMut>::visit_mut_angle_percentage(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_any_namespace(&mut self, node: &mut AnyNamespace) {
        if self.enabled {
            <V as VisitMut>::visit_mut_any_namespace(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_at_rule(&mut self, node: &mut AtRule) {
        if self.enabled {
            <V as VisitMut>::visit_mut_at_rule(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_at_rule_name(&mut self, node: &mut AtRuleName) {
        if self.enabled {
            <V as VisitMut>::visit_mut_at_rule_name(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_at_rule_prelude(&mut self, node: &mut AtRulePrelude) {
        if self.enabled {
            <V as VisitMut>::visit_mut_at_rule_prelude(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_atom(&mut self, node: &mut swc_atoms::Atom) {
        if self.enabled {
            <V as VisitMut>::visit_mut_atom(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_attribute_selector(&mut self, node: &mut AttributeSelector) {
        if self.enabled {
            <V as VisitMut>::visit_mut_attribute_selector(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_attribute_selector_matcher(&mut self, node: &mut AttributeSelectorMatcher) {
        if self.enabled {
            <V as VisitMut>::visit_mut_attribute_selector_matcher(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_attribute_selector_matcher_value(
        &mut self,
        node: &mut AttributeSelectorMatcherValue,
    ) {
        if self.enabled {
            <V as VisitMut>::visit_mut_attribute_selector_matcher_value(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_attribute_selector_modifier(&mut self, node: &mut AttributeSelectorModifier) {
        if self.enabled {
            <V as VisitMut>::visit_mut_attribute_selector_modifier(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_attribute_selector_value(&mut self, node: &mut AttributeSelectorValue) {
        if self.enabled {
            <V as VisitMut>::visit_mut_attribute_selector_value(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_bin_op(&mut self, node: &mut BinOp) {
        if self.enabled {
            <V as VisitMut>::visit_mut_bin_op(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_calc_operator(&mut self, node: &mut CalcOperator) {
        if self.enabled {
            <V as VisitMut>::visit_mut_calc_operator(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_calc_operator_type(&mut self, node: &mut CalcOperatorType) {
        if self.enabled {
            <V as VisitMut>::visit_mut_calc_operator_type(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_calc_product(&mut self, node: &mut CalcProduct) {
        if self.enabled {
            <V as VisitMut>::visit_mut_calc_product(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_calc_product_or_operator(&mut self, node: &mut CalcProductOrOperator) {
        if self.enabled {
            <V as VisitMut>::visit_mut_calc_product_or_operator(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_calc_product_or_operators(&mut self, node: &mut Vec<CalcProductOrOperator>) {
        if self.enabled {
            <V as VisitMut>::visit_mut_calc_product_or_operators(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_calc_sum(&mut self, node: &mut CalcSum) {
        if self.enabled {
            <V as VisitMut>::visit_mut_calc_sum(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_calc_value(&mut self, node: &mut CalcValue) {
        if self.enabled {
            <V as VisitMut>::visit_mut_calc_value(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_calc_value_or_operator(&mut self, node: &mut CalcValueOrOperator) {
        if self.enabled {
            <V as VisitMut>::visit_mut_calc_value_or_operator(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_calc_value_or_operators(&mut self, node: &mut Vec<CalcValueOrOperator>) {
        if self.enabled {
            <V as VisitMut>::visit_mut_calc_value_or_operators(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_class_selector(&mut self, node: &mut ClassSelector) {
        if self.enabled {
            <V as VisitMut>::visit_mut_class_selector(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_cmyk_component(&mut self, node: &mut CmykComponent) {
        if self.enabled {
            <V as VisitMut>::visit_mut_cmyk_component(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_color(&mut self, node: &mut Color) {
        if self.enabled {
            <V as VisitMut>::visit_mut_color(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_color_profile_name(&mut self, node: &mut ColorProfileName) {
        if self.enabled {
            <V as VisitMut>::visit_mut_color_profile_name(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_combinator(&mut self, node: &mut Combinator) {
        if self.enabled {
            <V as VisitMut>::visit_mut_combinator(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_combinator_value(&mut self, node: &mut CombinatorValue) {
        if self.enabled {
            <V as VisitMut>::visit_mut_combinator_value(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_complex_selector(&mut self, node: &mut ComplexSelector) {
        if self.enabled {
            <V as VisitMut>::visit_mut_complex_selector(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_complex_selector_children(&mut self, node: &mut ComplexSelectorChildren) {
        if self.enabled {
            <V as VisitMut>::visit_mut_complex_selector_children(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_complex_selector_childrens(&mut self, node: &mut Vec<ComplexSelectorChildren>) {
        if self.enabled {
            <V as VisitMut>::visit_mut_complex_selector_childrens(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_complex_selectors(&mut self, node: &mut Vec<ComplexSelector>) {
        if self.enabled {
            <V as VisitMut>::visit_mut_complex_selectors(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_component_value(&mut self, node: &mut ComponentValue) {
        if self.enabled {
            <V as VisitMut>::visit_mut_component_value(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_component_values(&mut self, node: &mut Vec<ComponentValue>) {
        if self.enabled {
            <V as VisitMut>::visit_mut_component_values(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_compound_selector(&mut self, node: &mut CompoundSelector) {
        if self.enabled {
            <V as VisitMut>::visit_mut_compound_selector(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_compound_selector_list(&mut self, node: &mut CompoundSelectorList) {
        if self.enabled {
            <V as VisitMut>::visit_mut_compound_selector_list(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_compound_selectors(&mut self, node: &mut Vec<CompoundSelector>) {
        if self.enabled {
            <V as VisitMut>::visit_mut_compound_selectors(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_container_condition(&mut self, node: &mut ContainerCondition) {
        if self.enabled {
            <V as VisitMut>::visit_mut_container_condition(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_container_name(&mut self, node: &mut ContainerName) {
        if self.enabled {
            <V as VisitMut>::visit_mut_container_name(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_container_query(&mut self, node: &mut ContainerQuery) {
        if self.enabled {
            <V as VisitMut>::visit_mut_container_query(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_container_query_and(&mut self, node: &mut ContainerQueryAnd) {
        if self.enabled {
            <V as VisitMut>::visit_mut_container_query_and(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_container_query_not(&mut self, node: &mut ContainerQueryNot) {
        if self.enabled {
            <V as VisitMut>::visit_mut_container_query_not(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_container_query_or(&mut self, node: &mut ContainerQueryOr) {
        if self.enabled {
            <V as VisitMut>::visit_mut_container_query_or(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_container_query_type(&mut self, node: &mut ContainerQueryType) {
        if self.enabled {
            <V as VisitMut>::visit_mut_container_query_type(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_container_query_types(&mut self, node: &mut Vec<ContainerQueryType>) {
        if self.enabled {
            <V as VisitMut>::visit_mut_container_query_types(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_custom_highlight_name(&mut self, node: &mut CustomHighlightName) {
        if self.enabled {
            <V as VisitMut>::visit_mut_custom_highlight_name(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_custom_ident(&mut self, node: &mut CustomIdent) {
        if self.enabled {
            <V as VisitMut>::visit_mut_custom_ident(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_custom_idents(&mut self, node: &mut Vec<CustomIdent>) {
        if self.enabled {
            <V as VisitMut>::visit_mut_custom_idents(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_custom_media_query(&mut self, node: &mut CustomMediaQuery) {
        if self.enabled {
            <V as VisitMut>::visit_mut_custom_media_query(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_custom_media_query_media_type(&mut self, node: &mut CustomMediaQueryMediaType) {
        if self.enabled {
            <V as VisitMut>::visit_mut_custom_media_query_media_type(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_custom_property_name(&mut self, node: &mut CustomPropertyName) {
        if self.enabled {
            <V as VisitMut>::visit_mut_custom_property_name(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_dashed_ident(&mut self, node: &mut DashedIdent) {
        if self.enabled {
            <V as VisitMut>::visit_mut_dashed_ident(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_declaration(&mut self, node: &mut Declaration) {
        if self.enabled {
            <V as VisitMut>::visit_mut_declaration(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_declaration_name(&mut self, node: &mut DeclarationName) {
        if self.enabled {
            <V as VisitMut>::visit_mut_declaration_name(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_declaration_or_at_rule(&mut self, node: &mut DeclarationOrAtRule) {
        if self.enabled {
            <V as VisitMut>::visit_mut_declaration_or_at_rule(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_delimiter(&mut self, node: &mut Delimiter) {
        if self.enabled {
            <V as VisitMut>::visit_mut_delimiter(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_delimiter_value(&mut self, node: &mut DelimiterValue) {
        if self.enabled {
            <V as VisitMut>::visit_mut_delimiter_value(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_dimension(&mut self, node: &mut Dimension) {
        if self.enabled {
            <V as VisitMut>::visit_mut_dimension(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_dimension_token(&mut self, node: &mut DimensionToken) {
        if self.enabled {
            <V as VisitMut>::visit_mut_dimension_token(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_document_prelude(&mut self, node: &mut DocumentPrelude) {
        if self.enabled {
            <V as VisitMut>::visit_mut_document_prelude(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_document_prelude_matching_function(
        &mut self,
        node: &mut DocumentPreludeMatchingFunction,
    ) {
        if self.enabled {
            <V as VisitMut>::visit_mut_document_prelude_matching_function(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_document_prelude_matching_functions(
        &mut self,
        node: &mut Vec<DocumentPreludeMatchingFunction>,
    ) {
        if self.enabled {
            <V as VisitMut>::visit_mut_document_prelude_matching_functions(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_extension_name(&mut self, node: &mut ExtensionName) {
        if self.enabled {
            <V as VisitMut>::visit_mut_extension_name(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_family_name(&mut self, node: &mut FamilyName) {
        if self.enabled {
            <V as VisitMut>::visit_mut_family_name(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_family_names(&mut self, node: &mut Vec<FamilyName>) {
        if self.enabled {
            <V as VisitMut>::visit_mut_family_names(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_flex(&mut self, node: &mut Flex) {
        if self.enabled {
            <V as VisitMut>::visit_mut_flex(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_font_feature_values_prelude(&mut self, node: &mut FontFeatureValuesPrelude) {
        if self.enabled {
            <V as VisitMut>::visit_mut_font_feature_values_prelude(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_forgiving_complex_selector(&mut self, node: &mut ForgivingComplexSelector) {
        if self.enabled {
            <V as VisitMut>::visit_mut_forgiving_complex_selector(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_forgiving_complex_selectors(&mut self, node: &mut Vec<ForgivingComplexSelector>) {
        if self.enabled {
            <V as VisitMut>::visit_mut_forgiving_complex_selectors(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_forgiving_relative_selector(&mut self, node: &mut ForgivingRelativeSelector) {
        if self.enabled {
            <V as VisitMut>::visit_mut_forgiving_relative_selector(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_forgiving_relative_selector_list(
        &mut self,
        node: &mut ForgivingRelativeSelectorList,
    ) {
        if self.enabled {
            <V as VisitMut>::visit_mut_forgiving_relative_selector_list(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_forgiving_relative_selectors(
        &mut self,
        node: &mut Vec<ForgivingRelativeSelector>,
    ) {
        if self.enabled {
            <V as VisitMut>::visit_mut_forgiving_relative_selectors(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_forgiving_selector_list(&mut self, node: &mut ForgivingSelectorList) {
        if self.enabled {
            <V as VisitMut>::visit_mut_forgiving_selector_list(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_frequency(&mut self, node: &mut Frequency) {
        if self.enabled {
            <V as VisitMut>::visit_mut_frequency(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_frequency_percentage(&mut self, node: &mut FrequencyPercentage) {
        if self.enabled {
            <V as VisitMut>::visit_mut_frequency_percentage(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_function(&mut self, node: &mut Function) {
        if self.enabled {
            <V as VisitMut>::visit_mut_function(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_function_name(&mut self, node: &mut FunctionName) {
        if self.enabled {
            <V as VisitMut>::visit_mut_function_name(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_general_enclosed(&mut self, node: &mut GeneralEnclosed) {
        if self.enabled {
            <V as VisitMut>::visit_mut_general_enclosed(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_hex_color(&mut self, node: &mut HexColor) {
        if self.enabled {
            <V as VisitMut>::visit_mut_hex_color(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_hue(&mut self, node: &mut Hue) {
        if self.enabled {
            <V as VisitMut>::visit_mut_hue(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_id_selector(&mut self, node: &mut IdSelector) {
        if self.enabled {
            <V as VisitMut>::visit_mut_id_selector(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_ident(&mut self, node: &mut Ident) {
        if self.enabled {
            <V as VisitMut>::visit_mut_ident(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_idents(&mut self, node: &mut Vec<Ident>) {
        if self.enabled {
            <V as VisitMut>::visit_mut_idents(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_import_conditions(&mut self, node: &mut ImportConditions) {
        if self.enabled {
            <V as VisitMut>::visit_mut_import_conditions(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_import_href(&mut self, node: &mut ImportHref) {
        if self.enabled {
            <V as VisitMut>::visit_mut_import_href(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_import_layer_name(&mut self, node: &mut ImportLayerName) {
        if self.enabled {
            <V as VisitMut>::visit_mut_import_layer_name(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_import_prelude(&mut self, node: &mut ImportPrelude) {
        if self.enabled {
            <V as VisitMut>::visit_mut_import_prelude(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_important_flag(&mut self, node: &mut ImportantFlag) {
        if self.enabled {
            <V as VisitMut>::visit_mut_important_flag(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_integer(&mut self, node: &mut Integer) {
        if self.enabled {
            <V as VisitMut>::visit_mut_integer(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_keyframe_block(&mut self, node: &mut KeyframeBlock) {
        if self.enabled {
            <V as VisitMut>::visit_mut_keyframe_block(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_keyframe_selector(&mut self, node: &mut KeyframeSelector) {
        if self.enabled {
            <V as VisitMut>::visit_mut_keyframe_selector(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_keyframe_selectors(&mut self, node: &mut Vec<KeyframeSelector>) {
        if self.enabled {
            <V as VisitMut>::visit_mut_keyframe_selectors(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_keyframes_name(&mut self, node: &mut KeyframesName) {
        if self.enabled {
            <V as VisitMut>::visit_mut_keyframes_name(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_keyframes_pseudo_function(&mut self, node: &mut KeyframesPseudoFunction) {
        if self.enabled {
            <V as VisitMut>::visit_mut_keyframes_pseudo_function(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_keyframes_pseudo_prefix(&mut self, node: &mut KeyframesPseudoPrefix) {
        if self.enabled {
            <V as VisitMut>::visit_mut_keyframes_pseudo_prefix(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_layer_name(&mut self, node: &mut LayerName) {
        if self.enabled {
            <V as VisitMut>::visit_mut_layer_name(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_layer_name_list(&mut self, node: &mut LayerNameList) {
        if self.enabled {
            <V as VisitMut>::visit_mut_layer_name_list(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_layer_names(&mut self, node: &mut Vec<LayerName>) {
        if self.enabled {
            <V as VisitMut>::visit_mut_layer_names(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_layer_prelude(&mut self, node: &mut LayerPrelude) {
        if self.enabled {
            <V as VisitMut>::visit_mut_layer_prelude(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_length(&mut self, node: &mut Length) {
        if self.enabled {
            <V as VisitMut>::visit_mut_length(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_length_percentage(&mut self, node: &mut LengthPercentage) {
        if self.enabled {
            <V as VisitMut>::visit_mut_length_percentage(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_list_of_component_values(&mut self, node: &mut ListOfComponentValues) {
        if self.enabled {
            <V as VisitMut>::visit_mut_list_of_component_values(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_media_and(&mut self, node: &mut MediaAnd) {
        if self.enabled {
            <V as VisitMut>::visit_mut_media_and(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_media_condition(&mut self, node: &mut MediaCondition) {
        if self.enabled {
            <V as VisitMut>::visit_mut_media_condition(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_media_condition_all_type(&mut self, node: &mut MediaConditionAllType) {
        if self.enabled {
            <V as VisitMut>::visit_mut_media_condition_all_type(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_media_condition_all_types(&mut self, node: &mut Vec<MediaConditionAllType>) {
        if self.enabled {
            <V as VisitMut>::visit_mut_media_condition_all_types(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_media_condition_type(&mut self, node: &mut MediaConditionType) {
        if self.enabled {
            <V as VisitMut>::visit_mut_media_condition_type(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_media_condition_without_or(&mut self, node: &mut MediaConditionWithoutOr) {
        if self.enabled {
            <V as VisitMut>::visit_mut_media_condition_without_or(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_media_condition_without_or_type(
        &mut self,
        node: &mut MediaConditionWithoutOrType,
    ) {
        if self.enabled {
            <V as VisitMut>::visit_mut_media_condition_without_or_type(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_media_condition_without_or_types(
        &mut self,
        node: &mut Vec<MediaConditionWithoutOrType>,
    ) {
        if self.enabled {
            <V as VisitMut>::visit_mut_media_condition_without_or_types(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_media_feature(&mut self, node: &mut MediaFeature) {
        if self.enabled {
            <V as VisitMut>::visit_mut_media_feature(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_media_feature_boolean(&mut self, node: &mut MediaFeatureBoolean) {
        if self.enabled {
            <V as VisitMut>::visit_mut_media_feature_boolean(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_media_feature_name(&mut self, node: &mut MediaFeatureName) {
        if self.enabled {
            <V as VisitMut>::visit_mut_media_feature_name(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_media_feature_plain(&mut self, node: &mut MediaFeaturePlain) {
        if self.enabled {
            <V as VisitMut>::visit_mut_media_feature_plain(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_media_feature_range(&mut self, node: &mut MediaFeatureRange) {
        if self.enabled {
            <V as VisitMut>::visit_mut_media_feature_range(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_media_feature_range_comparison(&mut self, node: &mut MediaFeatureRangeComparison) {
        if self.enabled {
            <V as VisitMut>::visit_mut_media_feature_range_comparison(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_media_feature_range_interval(&mut self, node: &mut MediaFeatureRangeInterval) {
        if self.enabled {
            <V as VisitMut>::visit_mut_media_feature_range_interval(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_media_feature_value(&mut self, node: &mut MediaFeatureValue) {
        if self.enabled {
            <V as VisitMut>::visit_mut_media_feature_value(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_media_in_parens(&mut self, node: &mut MediaInParens) {
        if self.enabled {
            <V as VisitMut>::visit_mut_media_in_parens(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_media_not(&mut self, node: &mut MediaNot) {
        if self.enabled {
            <V as VisitMut>::visit_mut_media_not(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_media_or(&mut self, node: &mut MediaOr) {
        if self.enabled {
            <V as VisitMut>::visit_mut_media_or(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_media_query(&mut self, node: &mut MediaQuery) {
        if self.enabled {
            <V as VisitMut>::visit_mut_media_query(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_media_query_list(&mut self, node: &mut MediaQueryList) {
        if self.enabled {
            <V as VisitMut>::visit_mut_media_query_list(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_media_querys(&mut self, node: &mut Vec<MediaQuery>) {
        if self.enabled {
            <V as VisitMut>::visit_mut_media_querys(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_media_type(&mut self, node: &mut MediaType) {
        if self.enabled {
            <V as VisitMut>::visit_mut_media_type(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_named_namespace(&mut self, node: &mut NamedNamespace) {
        if self.enabled {
            <V as VisitMut>::visit_mut_named_namespace(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_namespace(&mut self, node: &mut Namespace) {
        if self.enabled {
            <V as VisitMut>::visit_mut_namespace(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_namespace_prefix(&mut self, node: &mut NamespacePrefix) {
        if self.enabled {
            <V as VisitMut>::visit_mut_namespace_prefix(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_namespace_prelude(&mut self, node: &mut NamespacePrelude) {
        if self.enabled {
            <V as VisitMut>::visit_mut_namespace_prelude(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_namespace_prelude_uri(&mut self, node: &mut NamespacePreludeUri) {
        if self.enabled {
            <V as VisitMut>::visit_mut_namespace_prelude_uri(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_nesting_selector(&mut self, node: &mut NestingSelector) {
        if self.enabled {
            <V as VisitMut>::visit_mut_nesting_selector(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_number(&mut self, node: &mut Number) {
        if self.enabled {
            <V as VisitMut>::visit_mut_number(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_number_type(&mut self, node: &mut NumberType) {
        if self.enabled {
            <V as VisitMut>::visit_mut_number_type(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_opt_at_rule_prelude(&mut self, node: &mut Option<Box<AtRulePrelude>>) {
        if self.enabled {
            <V as VisitMut>::visit_mut_opt_at_rule_prelude(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_opt_atom(&mut self, node: &mut Option<swc_atoms::Atom>) {
        if self.enabled {
            <V as VisitMut>::visit_mut_opt_atom(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_opt_attribute_selector_matcher(
        &mut self,
        node: &mut Option<AttributeSelectorMatcher>,
    ) {
        if self.enabled {
            <V as VisitMut>::visit_mut_opt_attribute_selector_matcher(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_opt_attribute_selector_modifier(
        &mut self,
        node: &mut Option<AttributeSelectorModifier>,
    ) {
        if self.enabled {
            <V as VisitMut>::visit_mut_opt_attribute_selector_modifier(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_opt_attribute_selector_value(
        &mut self,
        node: &mut Option<AttributeSelectorValue>,
    ) {
        if self.enabled {
            <V as VisitMut>::visit_mut_opt_attribute_selector_value(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_opt_combinator(&mut self, node: &mut Option<Combinator>) {
        if self.enabled {
            <V as VisitMut>::visit_mut_opt_combinator(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_opt_container_name(&mut self, node: &mut Option<ContainerName>) {
        if self.enabled {
            <V as VisitMut>::visit_mut_opt_container_name(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_opt_forgiving_selector_list(&mut self, node: &mut Option<ForgivingSelectorList>) {
        if self.enabled {
            <V as VisitMut>::visit_mut_opt_forgiving_selector_list(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_opt_function(&mut self, node: &mut Option<Box<Function>>) {
        if self.enabled {
            <V as VisitMut>::visit_mut_opt_function(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_opt_ident(&mut self, node: &mut Option<Ident>) {
        if self.enabled {
            <V as VisitMut>::visit_mut_opt_ident(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_opt_import_conditions(&mut self, node: &mut Option<Box<ImportConditions>>) {
        if self.enabled {
            <V as VisitMut>::visit_mut_opt_import_conditions(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_opt_import_layer_name(&mut self, node: &mut Option<Box<ImportLayerName>>) {
        if self.enabled {
            <V as VisitMut>::visit_mut_opt_import_layer_name(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_opt_important_flag(&mut self, node: &mut Option<ImportantFlag>) {
        if self.enabled {
            <V as VisitMut>::visit_mut_opt_important_flag(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_opt_media_condition_type(&mut self, node: &mut Option<Box<MediaConditionType>>) {
        if self.enabled {
            <V as VisitMut>::visit_mut_opt_media_condition_type(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_opt_media_query_list(&mut self, node: &mut Option<Box<MediaQueryList>>) {
        if self.enabled {
            <V as VisitMut>::visit_mut_opt_media_query_list(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_opt_media_type(&mut self, node: &mut Option<MediaType>) {
        if self.enabled {
            <V as VisitMut>::visit_mut_opt_media_type(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_opt_namespace(&mut self, node: &mut Option<Namespace>) {
        if self.enabled {
            <V as VisitMut>::visit_mut_opt_namespace(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_opt_namespace_prefix(&mut self, node: &mut Option<NamespacePrefix>) {
        if self.enabled {
            <V as VisitMut>::visit_mut_opt_namespace_prefix(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_opt_nesting_selector(&mut self, node: &mut Option<NestingSelector>) {
        if self.enabled {
            <V as VisitMut>::visit_mut_opt_nesting_selector(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_opt_number(&mut self, node: &mut Option<Number>) {
        if self.enabled {
            <V as VisitMut>::visit_mut_opt_number(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_opt_page_selector_pseudos(&mut self, node: &mut Option<Vec<PageSelectorPseudo>>) {
        if self.enabled {
            <V as VisitMut>::visit_mut_opt_page_selector_pseudos(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_opt_page_selector_type(&mut self, node: &mut Option<PageSelectorType>) {
        if self.enabled {
            <V as VisitMut>::visit_mut_opt_page_selector_type(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_opt_pseudo_class_selector_childrens(
        &mut self,
        node: &mut Option<Vec<PseudoClassSelectorChildren>>,
    ) {
        if self.enabled {
            <V as VisitMut>::visit_mut_opt_pseudo_class_selector_childrens(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_opt_pseudo_element_selector_childrens(
        &mut self,
        node: &mut Option<Vec<PseudoElementSelectorChildren>>,
    ) {
        if self.enabled {
            <V as VisitMut>::visit_mut_opt_pseudo_element_selector_childrens(
                &mut self.visitor,
                node,
            )
        } else {
        }
    }

    #[inline]
    fn visit_mut_opt_simple_block(&mut self, node: &mut Option<SimpleBlock>) {
        if self.enabled {
            <V as VisitMut>::visit_mut_opt_simple_block(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_opt_type_selector(&mut self, node: &mut Option<Box<TypeSelector>>) {
        if self.enabled {
            <V as VisitMut>::visit_mut_opt_type_selector(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_opt_url_modifiers(&mut self, node: &mut Option<Vec<UrlModifier>>) {
        if self.enabled {
            <V as VisitMut>::visit_mut_opt_url_modifiers(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_opt_url_value(&mut self, node: &mut Option<Box<UrlValue>>) {
        if self.enabled {
            <V as VisitMut>::visit_mut_opt_url_value(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_page_selector(&mut self, node: &mut PageSelector) {
        if self.enabled {
            <V as VisitMut>::visit_mut_page_selector(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_page_selector_list(&mut self, node: &mut PageSelectorList) {
        if self.enabled {
            <V as VisitMut>::visit_mut_page_selector_list(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_page_selector_pseudo(&mut self, node: &mut PageSelectorPseudo) {
        if self.enabled {
            <V as VisitMut>::visit_mut_page_selector_pseudo(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_page_selector_pseudos(&mut self, node: &mut Vec<PageSelectorPseudo>) {
        if self.enabled {
            <V as VisitMut>::visit_mut_page_selector_pseudos(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_page_selector_type(&mut self, node: &mut PageSelectorType) {
        if self.enabled {
            <V as VisitMut>::visit_mut_page_selector_type(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_page_selectors(&mut self, node: &mut Vec<PageSelector>) {
        if self.enabled {
            <V as VisitMut>::visit_mut_page_selectors(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_percentage(&mut self, node: &mut Percentage) {
        if self.enabled {
            <V as VisitMut>::visit_mut_percentage(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_pseudo_class_selector(&mut self, node: &mut PseudoClassSelector) {
        if self.enabled {
            <V as VisitMut>::visit_mut_pseudo_class_selector(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_pseudo_class_selector_children(&mut self, node: &mut PseudoClassSelectorChildren) {
        if self.enabled {
            <V as VisitMut>::visit_mut_pseudo_class_selector_children(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_pseudo_class_selector_childrens(
        &mut self,
        node: &mut Vec<PseudoClassSelectorChildren>,
    ) {
        if self.enabled {
            <V as VisitMut>::visit_mut_pseudo_class_selector_childrens(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_pseudo_element_selector(&mut self, node: &mut PseudoElementSelector) {
        if self.enabled {
            <V as VisitMut>::visit_mut_pseudo_element_selector(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_pseudo_element_selector_children(
        &mut self,
        node: &mut PseudoElementSelectorChildren,
    ) {
        if self.enabled {
            <V as VisitMut>::visit_mut_pseudo_element_selector_children(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_pseudo_element_selector_childrens(
        &mut self,
        node: &mut Vec<PseudoElementSelectorChildren>,
    ) {
        if self.enabled {
            <V as VisitMut>::visit_mut_pseudo_element_selector_childrens(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_qualified_rule(&mut self, node: &mut QualifiedRule) {
        if self.enabled {
            <V as VisitMut>::visit_mut_qualified_rule(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_qualified_rule_prelude(&mut self, node: &mut QualifiedRulePrelude) {
        if self.enabled {
            <V as VisitMut>::visit_mut_qualified_rule_prelude(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_query_in_parens(&mut self, node: &mut QueryInParens) {
        if self.enabled {
            <V as VisitMut>::visit_mut_query_in_parens(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_ratio(&mut self, node: &mut Ratio) {
        if self.enabled {
            <V as VisitMut>::visit_mut_ratio(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_relative_selector(&mut self, node: &mut RelativeSelector) {
        if self.enabled {
            <V as VisitMut>::visit_mut_relative_selector(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_relative_selector_list(&mut self, node: &mut RelativeSelectorList) {
        if self.enabled {
            <V as VisitMut>::visit_mut_relative_selector_list(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_relative_selectors(&mut self, node: &mut Vec<RelativeSelector>) {
        if self.enabled {
            <V as VisitMut>::visit_mut_relative_selectors(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_resolution(&mut self, node: &mut Resolution) {
        if self.enabled {
            <V as VisitMut>::visit_mut_resolution(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_rule(&mut self, node: &mut Rule) {
        if self.enabled {
            <V as VisitMut>::visit_mut_rule(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_rules(&mut self, node: &mut Vec<Rule>) {
        if self.enabled {
            <V as VisitMut>::visit_mut_rules(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_scope_range(&mut self, node: &mut ScopeRange) {
        if self.enabled {
            <V as VisitMut>::visit_mut_scope_range(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_selector_list(&mut self, node: &mut SelectorList) {
        if self.enabled {
            <V as VisitMut>::visit_mut_selector_list(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_sequence_of_custom_idents(&mut self, node: &mut SequenceOfCustomIdents) {
        if self.enabled {
            <V as VisitMut>::visit_mut_sequence_of_custom_idents(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_simple_block(&mut self, node: &mut SimpleBlock) {
        if self.enabled {
            <V as VisitMut>::visit_mut_simple_block(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_size_feature(&mut self, node: &mut SizeFeature) {
        if self.enabled {
            <V as VisitMut>::visit_mut_size_feature(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_size_feature_boolean(&mut self, node: &mut SizeFeatureBoolean) {
        if self.enabled {
            <V as VisitMut>::visit_mut_size_feature_boolean(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_size_feature_name(&mut self, node: &mut SizeFeatureName) {
        if self.enabled {
            <V as VisitMut>::visit_mut_size_feature_name(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_size_feature_plain(&mut self, node: &mut SizeFeaturePlain) {
        if self.enabled {
            <V as VisitMut>::visit_mut_size_feature_plain(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_size_feature_range(&mut self, node: &mut SizeFeatureRange) {
        if self.enabled {
            <V as VisitMut>::visit_mut_size_feature_range(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_size_feature_range_comparison(&mut self, node: &mut SizeFeatureRangeComparison) {
        if self.enabled {
            <V as VisitMut>::visit_mut_size_feature_range_comparison(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_size_feature_range_interval(&mut self, node: &mut SizeFeatureRangeInterval) {
        if self.enabled {
            <V as VisitMut>::visit_mut_size_feature_range_interval(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_size_feature_value(&mut self, node: &mut SizeFeatureValue) {
        if self.enabled {
            <V as VisitMut>::visit_mut_size_feature_value(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_span(&mut self, node: &mut swc_common::Span) {
        if self.enabled {
            <V as VisitMut>::visit_mut_span(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_str(&mut self, node: &mut Str) {
        if self.enabled {
            <V as VisitMut>::visit_mut_str(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_style_block(&mut self, node: &mut StyleBlock) {
        if self.enabled {
            <V as VisitMut>::visit_mut_style_block(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_stylesheet(&mut self, node: &mut Stylesheet) {
        if self.enabled {
            <V as VisitMut>::visit_mut_stylesheet(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_subclass_selector(&mut self, node: &mut SubclassSelector) {
        if self.enabled {
            <V as VisitMut>::visit_mut_subclass_selector(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_subclass_selectors(&mut self, node: &mut Vec<SubclassSelector>) {
        if self.enabled {
            <V as VisitMut>::visit_mut_subclass_selectors(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_supports_and(&mut self, node: &mut SupportsAnd) {
        if self.enabled {
            <V as VisitMut>::visit_mut_supports_and(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_supports_condition(&mut self, node: &mut SupportsCondition) {
        if self.enabled {
            <V as VisitMut>::visit_mut_supports_condition(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_supports_condition_type(&mut self, node: &mut SupportsConditionType) {
        if self.enabled {
            <V as VisitMut>::visit_mut_supports_condition_type(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_supports_condition_types(&mut self, node: &mut Vec<SupportsConditionType>) {
        if self.enabled {
            <V as VisitMut>::visit_mut_supports_condition_types(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_supports_feature(&mut self, node: &mut SupportsFeature) {
        if self.enabled {
            <V as VisitMut>::visit_mut_supports_feature(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_supports_in_parens(&mut self, node: &mut SupportsInParens) {
        if self.enabled {
            <V as VisitMut>::visit_mut_supports_in_parens(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_supports_not(&mut self, node: &mut SupportsNot) {
        if self.enabled {
            <V as VisitMut>::visit_mut_supports_not(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_supports_or(&mut self, node: &mut SupportsOr) {
        if self.enabled {
            <V as VisitMut>::visit_mut_supports_or(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_tag_name_selector(&mut self, node: &mut TagNameSelector) {
        if self.enabled {
            <V as VisitMut>::visit_mut_tag_name_selector(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_time(&mut self, node: &mut Time) {
        if self.enabled {
            <V as VisitMut>::visit_mut_time(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_time_percentage(&mut self, node: &mut TimePercentage) {
        if self.enabled {
            <V as VisitMut>::visit_mut_time_percentage(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_token(&mut self, node: &mut Token) {
        if self.enabled {
            <V as VisitMut>::visit_mut_token(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_token_and_span(&mut self, node: &mut TokenAndSpan) {
        if self.enabled {
            <V as VisitMut>::visit_mut_token_and_span(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_type_selector(&mut self, node: &mut TypeSelector) {
        if self.enabled {
            <V as VisitMut>::visit_mut_type_selector(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_unicode_range(&mut self, node: &mut UnicodeRange) {
        if self.enabled {
            <V as VisitMut>::visit_mut_unicode_range(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_universal_selector(&mut self, node: &mut UniversalSelector) {
        if self.enabled {
            <V as VisitMut>::visit_mut_universal_selector(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_unknown_dimension(&mut self, node: &mut UnknownDimension) {
        if self.enabled {
            <V as VisitMut>::visit_mut_unknown_dimension(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_url(&mut self, node: &mut Url) {
        if self.enabled {
            <V as VisitMut>::visit_mut_url(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_url_key_value(&mut self, node: &mut UrlKeyValue) {
        if self.enabled {
            <V as VisitMut>::visit_mut_url_key_value(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_url_modifier(&mut self, node: &mut UrlModifier) {
        if self.enabled {
            <V as VisitMut>::visit_mut_url_modifier(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_url_modifiers(&mut self, node: &mut Vec<UrlModifier>) {
        if self.enabled {
            <V as VisitMut>::visit_mut_url_modifiers(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_url_value(&mut self, node: &mut UrlValue) {
        if self.enabled {
            <V as VisitMut>::visit_mut_url_value(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_url_value_raw(&mut self, node: &mut UrlValueRaw) {
        if self.enabled {
            <V as VisitMut>::visit_mut_url_value_raw(&mut self.visitor, node)
        } else {
        }
    }

    #[inline]
    fn visit_mut_wq_name(&mut self, node: &mut WqName) {
        if self.enabled {
            <V as VisitMut>::visit_mut_wq_name(&mut self.visitor, node)
        } else {
        }
    }
}
#[doc = r" A trait implemented for types that can be visited using a visitor."]
pub trait VisitMutWith<V: ?Sized + VisitMut> {
    #[doc = r" Calls a visitor method (visitor.fold_xxx) with self."]
    fn visit_mut_with(&mut self, visitor: &mut V);
    #[doc = r" Visit children nodes of `self`` with `visitor`."]
    fn visit_mut_children_with(&mut self, visitor: &mut V);
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for AbsoluteColorBase {
    #[doc = "Calls [VisitMut`::visit_mut_absolute_color_base`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_absolute_color_base(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            AbsoluteColorBase::HexColor { 0: _field_0 } => {
                <HexColor as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
            AbsoluteColorBase::NamedColorOrTransparent { 0: _field_0 } => {
                <Ident as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
            AbsoluteColorBase::Function { 0: _field_0 } => {
                <Function as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for AlphaValue {
    #[doc = "Calls [VisitMut`::visit_mut_alpha_value`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_alpha_value(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            AlphaValue::Number { 0: _field_0 } => {
                <Number as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
            AlphaValue::Percentage { 0: _field_0 } => {
                <Percentage as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for AnPlusB {
    #[doc = "Calls [VisitMut`::visit_mut_an_plus_b`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_an_plus_b(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            AnPlusB::Ident { 0: _field_0 } => {
                <Ident as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
            AnPlusB::AnPlusBNotation { 0: _field_0 } => {
                <AnPlusBNotation as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for AnPlusBNotation {
    #[doc = "Calls [VisitMut`::visit_mut_an_plus_b_notation`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_an_plus_b_notation(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            AnPlusBNotation {
                span,
                a,
                a_raw,
                b,
                b_raw,
            } => {
                {
                    <swc_common::Span as VisitMutWith<V>>::visit_mut_with(span, visitor)
                };
                {
                    <Option<swc_atoms::Atom> as VisitMutWith<V>>::visit_mut_with(a_raw, visitor)
                };
                {
                    <Option<swc_atoms::Atom> as VisitMutWith<V>>::visit_mut_with(b_raw, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for Angle {
    #[doc = "Calls [VisitMut`::visit_mut_angle`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_angle(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            Angle { span, value, unit } => {
                {
                    <swc_common::Span as VisitMutWith<V>>::visit_mut_with(span, visitor)
                };
                {
                    <Number as VisitMutWith<V>>::visit_mut_with(value, visitor)
                };
                {
                    <Ident as VisitMutWith<V>>::visit_mut_with(unit, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for AnglePercentage {
    #[doc = "Calls [VisitMut`::visit_mut_angle_percentage`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_angle_percentage(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            AnglePercentage::Angle { 0: _field_0 } => {
                <Angle as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
            AnglePercentage::Percentage { 0: _field_0 } => {
                <Percentage as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for AnyNamespace {
    #[doc = "Calls [VisitMut`::visit_mut_any_namespace`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_any_namespace(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            AnyNamespace { span } => {
                {
                    <swc_common::Span as VisitMutWith<V>>::visit_mut_with(span, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for AtRule {
    #[doc = "Calls [VisitMut`::visit_mut_at_rule`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_at_rule(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            AtRule {
                span,
                name,
                prelude,
                block,
            } => {
                {
                    <swc_common::Span as VisitMutWith<V>>::visit_mut_with(span, visitor)
                };
                {
                    <AtRuleName as VisitMutWith<V>>::visit_mut_with(name, visitor)
                };
                {
                    <Option<Box<AtRulePrelude>> as VisitMutWith<V>>::visit_mut_with(
                        prelude, visitor,
                    )
                };
                {
                    <Option<SimpleBlock> as VisitMutWith<V>>::visit_mut_with(block, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for AtRuleName {
    #[doc = "Calls [VisitMut`::visit_mut_at_rule_name`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_at_rule_name(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            AtRuleName::DashedIdent { 0: _field_0 } => {
                <DashedIdent as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
            AtRuleName::Ident { 0: _field_0 } => {
                <Ident as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for AtRulePrelude {
    #[doc = "Calls [VisitMut`::visit_mut_at_rule_prelude`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_at_rule_prelude(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            AtRulePrelude::ListOfComponentValues { 0: _field_0 } => {
                <ListOfComponentValues as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
            AtRulePrelude::CharsetPrelude { 0: _field_0 } => {
                <Str as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
            AtRulePrelude::PropertyPrelude { 0: _field_0 } => {
                <CustomPropertyName as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
            AtRulePrelude::CounterStylePrelude { 0: _field_0 } => {
                <CustomIdent as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
            AtRulePrelude::ColorProfilePrelude { 0: _field_0 } => {
                <ColorProfileName as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
            AtRulePrelude::DocumentPrelude { 0: _field_0 } => {
                <DocumentPrelude as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
            AtRulePrelude::FontPaletteValuesPrelude { 0: _field_0 } => {
                <DashedIdent as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
            AtRulePrelude::FontFeatureValuesPrelude { 0: _field_0 } => {
                <FontFeatureValuesPrelude as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
            AtRulePrelude::NestPrelude { 0: _field_0 } => {
                <SelectorList as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
            AtRulePrelude::KeyframesPrelude { 0: _field_0 } => {
                <KeyframesName as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
            AtRulePrelude::ImportPrelude { 0: _field_0 } => {
                <ImportPrelude as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
            AtRulePrelude::NamespacePrelude { 0: _field_0 } => {
                <NamespacePrelude as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
            AtRulePrelude::MediaPrelude { 0: _field_0 } => {
                <MediaQueryList as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
            AtRulePrelude::SupportsPrelude { 0: _field_0 } => {
                <SupportsCondition as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
            AtRulePrelude::PagePrelude { 0: _field_0 } => {
                <PageSelectorList as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
            AtRulePrelude::LayerPrelude { 0: _field_0 } => {
                <LayerPrelude as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
            AtRulePrelude::ContainerPrelude { 0: _field_0 } => {
                <ContainerCondition as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
            AtRulePrelude::CustomMediaPrelude { 0: _field_0 } => {
                <CustomMediaQuery as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
            AtRulePrelude::ScopePrelude { 0: _field_0 } => {
                <ScopeRange as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for AttributeSelector {
    #[doc = "Calls [VisitMut`::visit_mut_attribute_selector`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_attribute_selector(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            AttributeSelector {
                span,
                name,
                matcher,
                value,
                modifier,
            } => {
                {
                    <swc_common::Span as VisitMutWith<V>>::visit_mut_with(span, visitor)
                };
                {
                    <WqName as VisitMutWith<V>>::visit_mut_with(name, visitor)
                };
                {
                    <Option<AttributeSelectorMatcher> as VisitMutWith<V>>::visit_mut_with(
                        matcher, visitor,
                    )
                };
                {
                    <Option<AttributeSelectorValue> as VisitMutWith<V>>::visit_mut_with(
                        value, visitor,
                    )
                };
                {
                    <Option<AttributeSelectorModifier> as VisitMutWith<V>>::visit_mut_with(
                        modifier, visitor,
                    )
                };
            }
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for AttributeSelectorMatcher {
    #[doc = "Calls [VisitMut`::visit_mut_attribute_selector_matcher`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_attribute_selector_matcher(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            AttributeSelectorMatcher { span, value } => {
                {
                    <swc_common::Span as VisitMutWith<V>>::visit_mut_with(span, visitor)
                };
                {
                    <AttributeSelectorMatcherValue as VisitMutWith<V>>::visit_mut_with(
                        value, visitor,
                    )
                };
            }
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for AttributeSelectorMatcherValue {
    #[doc = "Calls [VisitMut`::visit_mut_attribute_selector_matcher_value`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_attribute_selector_matcher_value(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            AttributeSelectorMatcherValue::Equals => {}
            AttributeSelectorMatcherValue::Tilde => {}
            AttributeSelectorMatcherValue::Bar => {}
            AttributeSelectorMatcherValue::Caret => {}
            AttributeSelectorMatcherValue::Dollar => {}
            AttributeSelectorMatcherValue::Asterisk => {}
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for AttributeSelectorModifier {
    #[doc = "Calls [VisitMut`::visit_mut_attribute_selector_modifier`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_attribute_selector_modifier(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            AttributeSelectorModifier { span, value } => {
                {
                    <swc_common::Span as VisitMutWith<V>>::visit_mut_with(span, visitor)
                };
                {
                    <Ident as VisitMutWith<V>>::visit_mut_with(value, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for AttributeSelectorValue {
    #[doc = "Calls [VisitMut`::visit_mut_attribute_selector_value`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_attribute_selector_value(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            AttributeSelectorValue::Str { 0: _field_0 } => {
                <Str as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
            AttributeSelectorValue::Ident { 0: _field_0 } => {
                <Ident as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for BinOp {
    #[doc = "Calls [VisitMut`::visit_mut_bin_op`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_bin_op(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            BinOp::Add => {}
            BinOp::Sub => {}
            BinOp::Mul => {}
            BinOp::Div => {}
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for CalcOperator {
    #[doc = "Calls [VisitMut`::visit_mut_calc_operator`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_calc_operator(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            CalcOperator { span, value } => {
                {
                    <swc_common::Span as VisitMutWith<V>>::visit_mut_with(span, visitor)
                };
                {
                    <CalcOperatorType as VisitMutWith<V>>::visit_mut_with(value, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for CalcOperatorType {
    #[doc = "Calls [VisitMut`::visit_mut_calc_operator_type`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_calc_operator_type(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            CalcOperatorType::Add => {}
            CalcOperatorType::Sub => {}
            CalcOperatorType::Mul => {}
            CalcOperatorType::Div => {}
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for CalcProduct {
    #[doc = "Calls [VisitMut`::visit_mut_calc_product`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_calc_product(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            CalcProduct { span, expressions } => {
                {
                    <swc_common::Span as VisitMutWith<V>>::visit_mut_with(span, visitor)
                };
                {
                    <Vec<CalcValueOrOperator> as VisitMutWith<V>>::visit_mut_with(
                        expressions,
                        visitor,
                    )
                };
            }
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for CalcProductOrOperator {
    #[doc = "Calls [VisitMut`::visit_mut_calc_product_or_operator`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_calc_product_or_operator(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            CalcProductOrOperator::Product { 0: _field_0 } => {
                <CalcProduct as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
            CalcProductOrOperator::Operator { 0: _field_0 } => {
                <CalcOperator as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for CalcSum {
    #[doc = "Calls [VisitMut`::visit_mut_calc_sum`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_calc_sum(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            CalcSum { span, expressions } => {
                {
                    <swc_common::Span as VisitMutWith<V>>::visit_mut_with(span, visitor)
                };
                {
                    <Vec<CalcProductOrOperator> as VisitMutWith<V>>::visit_mut_with(
                        expressions,
                        visitor,
                    )
                };
            }
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for CalcValue {
    #[doc = "Calls [VisitMut`::visit_mut_calc_value`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_calc_value(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            CalcValue::Number { 0: _field_0 } => {
                <Number as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
            CalcValue::Dimension { 0: _field_0 } => {
                <Dimension as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
            CalcValue::Percentage { 0: _field_0 } => {
                <Percentage as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
            CalcValue::Constant { 0: _field_0 } => {
                <Ident as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
            CalcValue::Sum { 0: _field_0 } => {
                <CalcSum as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
            CalcValue::Function { 0: _field_0 } => {
                <Function as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for CalcValueOrOperator {
    #[doc = "Calls [VisitMut`::visit_mut_calc_value_or_operator`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_calc_value_or_operator(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            CalcValueOrOperator::Value { 0: _field_0 } => {
                <CalcValue as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
            CalcValueOrOperator::Operator { 0: _field_0 } => {
                <CalcOperator as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for ClassSelector {
    #[doc = "Calls [VisitMut`::visit_mut_class_selector`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_class_selector(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            ClassSelector { span, text } => {
                {
                    <swc_common::Span as VisitMutWith<V>>::visit_mut_with(span, visitor)
                };
                {
                    <Ident as VisitMutWith<V>>::visit_mut_with(text, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for CmykComponent {
    #[doc = "Calls [VisitMut`::visit_mut_cmyk_component`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_cmyk_component(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            CmykComponent::Number { 0: _field_0 } => {
                <Number as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
            CmykComponent::Percentage { 0: _field_0 } => {
                <Percentage as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
            CmykComponent::Function { 0: _field_0 } => {
                <Function as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for Color {
    #[doc = "Calls [VisitMut`::visit_mut_color`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_color(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            Color::AbsoluteColorBase { 0: _field_0 } => {
                <AbsoluteColorBase as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
            Color::CurrentColorOrSystemColor { 0: _field_0 } => {
                <Ident as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
            Color::Function { 0: _field_0 } => {
                <Function as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for ColorProfileName {
    #[doc = "Calls [VisitMut`::visit_mut_color_profile_name`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_color_profile_name(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            ColorProfileName::DashedIdent { 0: _field_0 } => {
                <DashedIdent as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
            ColorProfileName::Ident { 0: _field_0 } => {
                <Ident as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for Combinator {
    #[doc = "Calls [VisitMut`::visit_mut_combinator`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_combinator(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            Combinator { span, value } => {
                {
                    <swc_common::Span as VisitMutWith<V>>::visit_mut_with(span, visitor)
                };
                {
                    <CombinatorValue as VisitMutWith<V>>::visit_mut_with(value, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for CombinatorValue {
    #[doc = "Calls [VisitMut`::visit_mut_combinator_value`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_combinator_value(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            CombinatorValue::Descendant => {}
            CombinatorValue::NextSibling => {}
            CombinatorValue::Child => {}
            CombinatorValue::LaterSibling => {}
            CombinatorValue::Column => {}
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for ComplexSelector {
    #[doc = "Calls [VisitMut`::visit_mut_complex_selector`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_complex_selector(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            ComplexSelector { span, children } => {
                {
                    <swc_common::Span as VisitMutWith<V>>::visit_mut_with(span, visitor)
                };
                {
                    <Vec<ComplexSelectorChildren> as VisitMutWith<V>>::visit_mut_with(
                        children, visitor,
                    )
                };
            }
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for ComplexSelectorChildren {
    #[doc = "Calls [VisitMut`::visit_mut_complex_selector_children`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_complex_selector_children(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            ComplexSelectorChildren::CompoundSelector { 0: _field_0 } => {
                <CompoundSelector as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
            ComplexSelectorChildren::Combinator { 0: _field_0 } => {
                <Combinator as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for ComponentValue {
    #[doc = "Calls [VisitMut`::visit_mut_component_value`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_component_value(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            ComponentValue::PreservedToken { 0: _field_0 } => {
                <Box<TokenAndSpan> as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
            ComponentValue::Function { 0: _field_0 } => {
                <Box<Function> as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
            ComponentValue::SimpleBlock { 0: _field_0 } => {
                <Box<SimpleBlock> as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
            ComponentValue::AtRule { 0: _field_0 } => {
                <Box<AtRule> as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
            ComponentValue::QualifiedRule { 0: _field_0 } => {
                <Box<QualifiedRule> as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
            ComponentValue::ListOfComponentValues { 0: _field_0 } => {
                <Box<ListOfComponentValues> as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
            ComponentValue::KeyframeBlock { 0: _field_0 } => {
                <Box<KeyframeBlock> as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
            ComponentValue::Ident { 0: _field_0 } => {
                <Box<Ident> as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
            ComponentValue::DashedIdent { 0: _field_0 } => {
                <Box<DashedIdent> as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
            ComponentValue::Str { 0: _field_0 } => {
                <Box<Str> as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
            ComponentValue::Url { 0: _field_0 } => {
                <Box<Url> as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
            ComponentValue::Integer { 0: _field_0 } => {
                <Box<Integer> as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
            ComponentValue::Number { 0: _field_0 } => {
                <Box<Number> as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
            ComponentValue::Percentage { 0: _field_0 } => {
                <Box<Percentage> as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
            ComponentValue::Dimension { 0: _field_0 } => {
                <Box<Dimension> as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
            ComponentValue::LengthPercentage { 0: _field_0 } => {
                <Box<LengthPercentage> as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
            ComponentValue::FrequencyPercentage { 0: _field_0 } => {
                <Box<FrequencyPercentage> as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
            ComponentValue::AnglePercentage { 0: _field_0 } => {
                <Box<AnglePercentage> as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
            ComponentValue::TimePercentage { 0: _field_0 } => {
                <Box<TimePercentage> as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
            ComponentValue::Ratio { 0: _field_0 } => {
                <Box<Ratio> as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
            ComponentValue::UnicodeRange { 0: _field_0 } => {
                <Box<UnicodeRange> as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
            ComponentValue::Color { 0: _field_0 } => {
                <Box<Color> as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
            ComponentValue::AlphaValue { 0: _field_0 } => {
                <Box<AlphaValue> as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
            ComponentValue::Hue { 0: _field_0 } => {
                <Box<Hue> as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
            ComponentValue::CmykComponent { 0: _field_0 } => {
                <Box<CmykComponent> as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
            ComponentValue::Delimiter { 0: _field_0 } => {
                <Box<Delimiter> as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
            ComponentValue::CalcSum { 0: _field_0 } => {
                <Box<CalcSum> as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
            ComponentValue::ComplexSelector { 0: _field_0 } => {
                <Box<ComplexSelector> as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
            ComponentValue::LayerName { 0: _field_0 } => {
                <Box<LayerName> as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
            ComponentValue::SupportsCondition { 0: _field_0 } => {
                <Box<SupportsCondition> as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
            ComponentValue::Declaration { 0: _field_0 } => {
                <Box<Declaration> as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
            ComponentValue::IdSelector { 0: _field_0 } => {
                <Box<IdSelector> as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for CompoundSelector {
    #[doc = "Calls [VisitMut`::visit_mut_compound_selector`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_compound_selector(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            CompoundSelector {
                span,
                nesting_selector,
                type_selector,
                subclass_selectors,
            } => {
                {
                    <swc_common::Span as VisitMutWith<V>>::visit_mut_with(span, visitor)
                };
                {
                    <Option<NestingSelector> as VisitMutWith<V>>::visit_mut_with(
                        nesting_selector,
                        visitor,
                    )
                };
                {
                    <Option<Box<TypeSelector>> as VisitMutWith<V>>::visit_mut_with(
                        type_selector,
                        visitor,
                    )
                };
                {
                    <Vec<SubclassSelector> as VisitMutWith<V>>::visit_mut_with(
                        subclass_selectors,
                        visitor,
                    )
                };
            }
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for CompoundSelectorList {
    #[doc = "Calls [VisitMut`::visit_mut_compound_selector_list`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_compound_selector_list(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            CompoundSelectorList { span, children } => {
                {
                    <swc_common::Span as VisitMutWith<V>>::visit_mut_with(span, visitor)
                };
                {
                    <Vec<CompoundSelector> as VisitMutWith<V>>::visit_mut_with(children, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for ContainerCondition {
    #[doc = "Calls [VisitMut`::visit_mut_container_condition`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_container_condition(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            ContainerCondition { span, name, query } => {
                {
                    <swc_common::Span as VisitMutWith<V>>::visit_mut_with(span, visitor)
                };
                {
                    <Option<ContainerName> as VisitMutWith<V>>::visit_mut_with(name, visitor)
                };
                {
                    <ContainerQuery as VisitMutWith<V>>::visit_mut_with(query, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for ContainerName {
    #[doc = "Calls [VisitMut`::visit_mut_container_name`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_container_name(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            ContainerName::CustomIdent { 0: _field_0 } => {
                <CustomIdent as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for ContainerQuery {
    #[doc = "Calls [VisitMut`::visit_mut_container_query`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_container_query(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            ContainerQuery { span, queries } => {
                {
                    <swc_common::Span as VisitMutWith<V>>::visit_mut_with(span, visitor)
                };
                {
                    <Vec<ContainerQueryType> as VisitMutWith<V>>::visit_mut_with(queries, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for ContainerQueryAnd {
    #[doc = "Calls [VisitMut`::visit_mut_container_query_and`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_container_query_and(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            ContainerQueryAnd {
                span,
                keyword,
                query,
            } => {
                {
                    <swc_common::Span as VisitMutWith<V>>::visit_mut_with(span, visitor)
                };
                {
                    <Option<Ident> as VisitMutWith<V>>::visit_mut_with(keyword, visitor)
                };
                {
                    <QueryInParens as VisitMutWith<V>>::visit_mut_with(query, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for ContainerQueryNot {
    #[doc = "Calls [VisitMut`::visit_mut_container_query_not`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_container_query_not(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            ContainerQueryNot {
                span,
                keyword,
                query,
            } => {
                {
                    <swc_common::Span as VisitMutWith<V>>::visit_mut_with(span, visitor)
                };
                {
                    <Option<Ident> as VisitMutWith<V>>::visit_mut_with(keyword, visitor)
                };
                {
                    <QueryInParens as VisitMutWith<V>>::visit_mut_with(query, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for ContainerQueryOr {
    #[doc = "Calls [VisitMut`::visit_mut_container_query_or`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_container_query_or(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            ContainerQueryOr {
                span,
                keyword,
                query,
            } => {
                {
                    <swc_common::Span as VisitMutWith<V>>::visit_mut_with(span, visitor)
                };
                {
                    <Option<Ident> as VisitMutWith<V>>::visit_mut_with(keyword, visitor)
                };
                {
                    <QueryInParens as VisitMutWith<V>>::visit_mut_with(query, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for ContainerQueryType {
    #[doc = "Calls [VisitMut`::visit_mut_container_query_type`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_container_query_type(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            ContainerQueryType::Not { 0: _field_0 } => {
                <ContainerQueryNot as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
            ContainerQueryType::And { 0: _field_0 } => {
                <ContainerQueryAnd as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
            ContainerQueryType::Or { 0: _field_0 } => {
                <ContainerQueryOr as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
            ContainerQueryType::QueryInParens { 0: _field_0 } => {
                <QueryInParens as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for CustomHighlightName {
    #[doc = "Calls [VisitMut`::visit_mut_custom_highlight_name`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_custom_highlight_name(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            CustomHighlightName { span, value, raw } => {
                {
                    <swc_common::Span as VisitMutWith<V>>::visit_mut_with(span, visitor)
                };
                {
                    <swc_atoms::Atom as VisitMutWith<V>>::visit_mut_with(value, visitor)
                };
                {
                    <Option<swc_atoms::Atom> as VisitMutWith<V>>::visit_mut_with(raw, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for CustomIdent {
    #[doc = "Calls [VisitMut`::visit_mut_custom_ident`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_custom_ident(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            CustomIdent { span, value, raw } => {
                {
                    <swc_common::Span as VisitMutWith<V>>::visit_mut_with(span, visitor)
                };
                {
                    <swc_atoms::Atom as VisitMutWith<V>>::visit_mut_with(value, visitor)
                };
                {
                    <Option<swc_atoms::Atom> as VisitMutWith<V>>::visit_mut_with(raw, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for CustomMediaQuery {
    #[doc = "Calls [VisitMut`::visit_mut_custom_media_query`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_custom_media_query(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            CustomMediaQuery { span, name, media } => {
                {
                    <swc_common::Span as VisitMutWith<V>>::visit_mut_with(span, visitor)
                };
                {
                    <ExtensionName as VisitMutWith<V>>::visit_mut_with(name, visitor)
                };
                {
                    <CustomMediaQueryMediaType as VisitMutWith<V>>::visit_mut_with(media, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for CustomMediaQueryMediaType {
    #[doc = "Calls [VisitMut`::visit_mut_custom_media_query_media_type`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_custom_media_query_media_type(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            CustomMediaQueryMediaType::Ident { 0: _field_0 } => {
                <Ident as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
            CustomMediaQueryMediaType::MediaQueryList { 0: _field_0 } => {
                <MediaQueryList as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for CustomPropertyName {
    #[doc = "Calls [VisitMut`::visit_mut_custom_property_name`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_custom_property_name(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            CustomPropertyName { span, value, raw } => {
                {
                    <swc_common::Span as VisitMutWith<V>>::visit_mut_with(span, visitor)
                };
                {
                    <swc_atoms::Atom as VisitMutWith<V>>::visit_mut_with(value, visitor)
                };
                {
                    <Option<swc_atoms::Atom> as VisitMutWith<V>>::visit_mut_with(raw, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for DashedIdent {
    #[doc = "Calls [VisitMut`::visit_mut_dashed_ident`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_dashed_ident(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            DashedIdent { span, value, raw } => {
                {
                    <swc_common::Span as VisitMutWith<V>>::visit_mut_with(span, visitor)
                };
                {
                    <swc_atoms::Atom as VisitMutWith<V>>::visit_mut_with(value, visitor)
                };
                {
                    <Option<swc_atoms::Atom> as VisitMutWith<V>>::visit_mut_with(raw, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for Declaration {
    #[doc = "Calls [VisitMut`::visit_mut_declaration`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_declaration(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            Declaration {
                span,
                name,
                value,
                important,
            } => {
                {
                    <swc_common::Span as VisitMutWith<V>>::visit_mut_with(span, visitor)
                };
                {
                    <DeclarationName as VisitMutWith<V>>::visit_mut_with(name, visitor)
                };
                {
                    <Vec<ComponentValue> as VisitMutWith<V>>::visit_mut_with(value, visitor)
                };
                {
                    <Option<ImportantFlag> as VisitMutWith<V>>::visit_mut_with(important, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for DeclarationName {
    #[doc = "Calls [VisitMut`::visit_mut_declaration_name`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_declaration_name(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            DeclarationName::Ident { 0: _field_0 } => {
                <Ident as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
            DeclarationName::DashedIdent { 0: _field_0 } => {
                <DashedIdent as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for DeclarationOrAtRule {
    #[doc = "Calls [VisitMut`::visit_mut_declaration_or_at_rule`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_declaration_or_at_rule(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            DeclarationOrAtRule::Declaration { 0: _field_0 } => {
                <Box<Declaration> as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
            DeclarationOrAtRule::AtRule { 0: _field_0 } => {
                <Box<AtRule> as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
            DeclarationOrAtRule::ListOfComponentValues { 0: _field_0 } => {
                <Box<ListOfComponentValues> as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for Delimiter {
    #[doc = "Calls [VisitMut`::visit_mut_delimiter`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_delimiter(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            Delimiter { span, value } => {
                {
                    <swc_common::Span as VisitMutWith<V>>::visit_mut_with(span, visitor)
                };
                {
                    <DelimiterValue as VisitMutWith<V>>::visit_mut_with(value, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for DelimiterValue {
    #[doc = "Calls [VisitMut`::visit_mut_delimiter_value`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_delimiter_value(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            DelimiterValue::Comma => {}
            DelimiterValue::Solidus => {}
            DelimiterValue::Semicolon => {}
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for Dimension {
    #[doc = "Calls [VisitMut`::visit_mut_dimension`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_dimension(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            Dimension::Length { 0: _field_0 } => {
                <Length as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
            Dimension::Angle { 0: _field_0 } => {
                <Angle as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
            Dimension::Time { 0: _field_0 } => {
                <Time as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
            Dimension::Frequency { 0: _field_0 } => {
                <Frequency as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
            Dimension::Resolution { 0: _field_0 } => {
                <Resolution as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
            Dimension::Flex { 0: _field_0 } => {
                <Flex as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
            Dimension::UnknownDimension { 0: _field_0 } => {
                <UnknownDimension as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for DimensionToken {
    #[doc = "Calls [VisitMut`::visit_mut_dimension_token`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_dimension_token(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            DimensionToken {
                value,
                raw_value,
                unit,
                type_flag,
                raw_unit,
            } => {
                {
                    <swc_atoms::Atom as VisitMutWith<V>>::visit_mut_with(raw_value, visitor)
                };
                {
                    <swc_atoms::Atom as VisitMutWith<V>>::visit_mut_with(unit, visitor)
                };
                {
                    <NumberType as VisitMutWith<V>>::visit_mut_with(type_flag, visitor)
                };
                {
                    <swc_atoms::Atom as VisitMutWith<V>>::visit_mut_with(raw_unit, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for DocumentPrelude {
    #[doc = "Calls [VisitMut`::visit_mut_document_prelude`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_document_prelude(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            DocumentPrelude {
                span,
                matching_functions,
            } => {
                {
                    <swc_common::Span as VisitMutWith<V>>::visit_mut_with(span, visitor)
                };
                {
                    <Vec<DocumentPreludeMatchingFunction> as VisitMutWith<V>>::visit_mut_with(
                        matching_functions,
                        visitor,
                    )
                };
            }
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for DocumentPreludeMatchingFunction {
    #[doc = "Calls [VisitMut`::visit_mut_document_prelude_matching_function`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_document_prelude_matching_function(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            DocumentPreludeMatchingFunction::Url { 0: _field_0 } => {
                <Url as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
            DocumentPreludeMatchingFunction::Function { 0: _field_0 } => {
                <Function as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for ExtensionName {
    #[doc = "Calls [VisitMut`::visit_mut_extension_name`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_extension_name(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            ExtensionName { span, value, raw } => {
                {
                    <swc_common::Span as VisitMutWith<V>>::visit_mut_with(span, visitor)
                };
                {
                    <swc_atoms::Atom as VisitMutWith<V>>::visit_mut_with(value, visitor)
                };
                {
                    <Option<swc_atoms::Atom> as VisitMutWith<V>>::visit_mut_with(raw, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for FamilyName {
    #[doc = "Calls [VisitMut`::visit_mut_family_name`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_family_name(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            FamilyName::Str { 0: _field_0 } => {
                <Str as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
            FamilyName::SequenceOfCustomIdents { 0: _field_0 } => {
                <SequenceOfCustomIdents as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for Flex {
    #[doc = "Calls [VisitMut`::visit_mut_flex`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_flex(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            Flex { span, value, unit } => {
                {
                    <swc_common::Span as VisitMutWith<V>>::visit_mut_with(span, visitor)
                };
                {
                    <Number as VisitMutWith<V>>::visit_mut_with(value, visitor)
                };
                {
                    <Ident as VisitMutWith<V>>::visit_mut_with(unit, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for FontFeatureValuesPrelude {
    #[doc = "Calls [VisitMut`::visit_mut_font_feature_values_prelude`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_font_feature_values_prelude(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            FontFeatureValuesPrelude { span, font_family } => {
                {
                    <swc_common::Span as VisitMutWith<V>>::visit_mut_with(span, visitor)
                };
                {
                    <Vec<FamilyName> as VisitMutWith<V>>::visit_mut_with(font_family, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for ForgivingComplexSelector {
    #[doc = "Calls [VisitMut`::visit_mut_forgiving_complex_selector`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_forgiving_complex_selector(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            ForgivingComplexSelector::ComplexSelector { 0: _field_0 } => {
                <ComplexSelector as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
            ForgivingComplexSelector::ListOfComponentValues { 0: _field_0 } => {
                <ListOfComponentValues as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for ForgivingRelativeSelector {
    #[doc = "Calls [VisitMut`::visit_mut_forgiving_relative_selector`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_forgiving_relative_selector(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            ForgivingRelativeSelector::RelativeSelector { 0: _field_0 } => {
                <RelativeSelector as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
            ForgivingRelativeSelector::ListOfComponentValues { 0: _field_0 } => {
                <ListOfComponentValues as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for ForgivingRelativeSelectorList {
    #[doc = "Calls [VisitMut`::visit_mut_forgiving_relative_selector_list`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_forgiving_relative_selector_list(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            ForgivingRelativeSelectorList { span, children } => {
                {
                    <swc_common::Span as VisitMutWith<V>>::visit_mut_with(span, visitor)
                };
                {
                    <Vec<ForgivingRelativeSelector> as VisitMutWith<V>>::visit_mut_with(
                        children, visitor,
                    )
                };
            }
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for ForgivingSelectorList {
    #[doc = "Calls [VisitMut`::visit_mut_forgiving_selector_list`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_forgiving_selector_list(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            ForgivingSelectorList { span, children } => {
                {
                    <swc_common::Span as VisitMutWith<V>>::visit_mut_with(span, visitor)
                };
                {
                    <Vec<ForgivingComplexSelector> as VisitMutWith<V>>::visit_mut_with(
                        children, visitor,
                    )
                };
            }
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for Frequency {
    #[doc = "Calls [VisitMut`::visit_mut_frequency`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_frequency(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            Frequency { span, value, unit } => {
                {
                    <swc_common::Span as VisitMutWith<V>>::visit_mut_with(span, visitor)
                };
                {
                    <Number as VisitMutWith<V>>::visit_mut_with(value, visitor)
                };
                {
                    <Ident as VisitMutWith<V>>::visit_mut_with(unit, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for FrequencyPercentage {
    #[doc = "Calls [VisitMut`::visit_mut_frequency_percentage`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_frequency_percentage(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            FrequencyPercentage::Frequency { 0: _field_0 } => {
                <Frequency as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
            FrequencyPercentage::Percentage { 0: _field_0 } => {
                <Percentage as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for Function {
    #[doc = "Calls [VisitMut`::visit_mut_function`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_function(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            Function { span, name, value } => {
                {
                    <swc_common::Span as VisitMutWith<V>>::visit_mut_with(span, visitor)
                };
                {
                    <FunctionName as VisitMutWith<V>>::visit_mut_with(name, visitor)
                };
                {
                    <Vec<ComponentValue> as VisitMutWith<V>>::visit_mut_with(value, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for FunctionName {
    #[doc = "Calls [VisitMut`::visit_mut_function_name`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_function_name(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            FunctionName::Ident { 0: _field_0 } => {
                <Ident as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
            FunctionName::DashedIdent { 0: _field_0 } => {
                <DashedIdent as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for GeneralEnclosed {
    #[doc = "Calls [VisitMut`::visit_mut_general_enclosed`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_general_enclosed(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            GeneralEnclosed::Function { 0: _field_0 } => {
                <Function as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
            GeneralEnclosed::SimpleBlock { 0: _field_0 } => {
                <SimpleBlock as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for HexColor {
    #[doc = "Calls [VisitMut`::visit_mut_hex_color`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_hex_color(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            HexColor { span, value, raw } => {
                {
                    <swc_common::Span as VisitMutWith<V>>::visit_mut_with(span, visitor)
                };
                {
                    <swc_atoms::Atom as VisitMutWith<V>>::visit_mut_with(value, visitor)
                };
                {
                    <Option<swc_atoms::Atom> as VisitMutWith<V>>::visit_mut_with(raw, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for Hue {
    #[doc = "Calls [VisitMut`::visit_mut_hue`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_hue(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            Hue::Number { 0: _field_0 } => {
                <Number as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
            Hue::Angle { 0: _field_0 } => {
                <Angle as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for IdSelector {
    #[doc = "Calls [VisitMut`::visit_mut_id_selector`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_id_selector(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            IdSelector { span, text } => {
                {
                    <swc_common::Span as VisitMutWith<V>>::visit_mut_with(span, visitor)
                };
                {
                    <Ident as VisitMutWith<V>>::visit_mut_with(text, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for Ident {
    #[doc = "Calls [VisitMut`::visit_mut_ident`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_ident(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            Ident { span, value, raw } => {
                {
                    <swc_common::Span as VisitMutWith<V>>::visit_mut_with(span, visitor)
                };
                {
                    <swc_atoms::Atom as VisitMutWith<V>>::visit_mut_with(value, visitor)
                };
                {
                    <Option<swc_atoms::Atom> as VisitMutWith<V>>::visit_mut_with(raw, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for ImportConditions {
    #[doc = "Calls [VisitMut`::visit_mut_import_conditions`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_import_conditions(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            ImportConditions {
                span,
                supports,
                media,
            } => {
                {
                    <swc_common::Span as VisitMutWith<V>>::visit_mut_with(span, visitor)
                };
                {
                    <Option<Box<Function>> as VisitMutWith<V>>::visit_mut_with(supports, visitor)
                };
                {
                    <Option<Box<MediaQueryList>> as VisitMutWith<V>>::visit_mut_with(media, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for ImportHref {
    #[doc = "Calls [VisitMut`::visit_mut_import_href`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_import_href(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            ImportHref::Url { 0: _field_0 } => {
                <Url as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
            ImportHref::Str { 0: _field_0 } => {
                <Str as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for ImportLayerName {
    #[doc = "Calls [VisitMut`::visit_mut_import_layer_name`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_import_layer_name(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            ImportLayerName::Ident { 0: _field_0 } => {
                <Ident as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
            ImportLayerName::Function { 0: _field_0 } => {
                <Function as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for ImportPrelude {
    #[doc = "Calls [VisitMut`::visit_mut_import_prelude`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_import_prelude(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            ImportPrelude {
                span,
                href,
                layer_name,
                import_conditions,
            } => {
                {
                    <swc_common::Span as VisitMutWith<V>>::visit_mut_with(span, visitor)
                };
                {
                    <Box<ImportHref> as VisitMutWith<V>>::visit_mut_with(href, visitor)
                };
                {
                    <Option<Box<ImportLayerName>> as VisitMutWith<V>>::visit_mut_with(
                        layer_name, visitor,
                    )
                };
                {
                    <Option<Box<ImportConditions>> as VisitMutWith<V>>::visit_mut_with(
                        import_conditions,
                        visitor,
                    )
                };
            }
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for ImportantFlag {
    #[doc = "Calls [VisitMut`::visit_mut_important_flag`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_important_flag(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            ImportantFlag { span, value } => {
                {
                    <swc_common::Span as VisitMutWith<V>>::visit_mut_with(span, visitor)
                };
                {
                    <Ident as VisitMutWith<V>>::visit_mut_with(value, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for Integer {
    #[doc = "Calls [VisitMut`::visit_mut_integer`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_integer(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            Integer { span, value, raw } => {
                {
                    <swc_common::Span as VisitMutWith<V>>::visit_mut_with(span, visitor)
                };
                {
                    <Option<swc_atoms::Atom> as VisitMutWith<V>>::visit_mut_with(raw, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for KeyframeBlock {
    #[doc = "Calls [VisitMut`::visit_mut_keyframe_block`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_keyframe_block(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            KeyframeBlock {
                span,
                prelude,
                block,
            } => {
                {
                    <swc_common::Span as VisitMutWith<V>>::visit_mut_with(span, visitor)
                };
                {
                    <Vec<KeyframeSelector> as VisitMutWith<V>>::visit_mut_with(prelude, visitor)
                };
                {
                    <SimpleBlock as VisitMutWith<V>>::visit_mut_with(block, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for KeyframeSelector {
    #[doc = "Calls [VisitMut`::visit_mut_keyframe_selector`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_keyframe_selector(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            KeyframeSelector::Ident { 0: _field_0 } => {
                <Ident as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
            KeyframeSelector::Percentage { 0: _field_0 } => {
                <Percentage as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for KeyframesName {
    #[doc = "Calls [VisitMut`::visit_mut_keyframes_name`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_keyframes_name(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            KeyframesName::CustomIdent { 0: _field_0 } => {
                <Box<CustomIdent> as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
            KeyframesName::Str { 0: _field_0 } => {
                <Box<Str> as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
            KeyframesName::PseudoPrefix { 0: _field_0 } => {
                <Box<KeyframesPseudoPrefix> as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
            KeyframesName::PseudoFunction { 0: _field_0 } => {
                <Box<KeyframesPseudoFunction> as VisitMutWith<V>>::visit_mut_with(
                    _field_0, visitor,
                );
            }
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for KeyframesPseudoFunction {
    #[doc = "Calls [VisitMut`::visit_mut_keyframes_pseudo_function`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_keyframes_pseudo_function(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            KeyframesPseudoFunction { span, pseudo, name } => {
                {
                    <swc_common::Span as VisitMutWith<V>>::visit_mut_with(span, visitor)
                };
                {
                    <Ident as VisitMutWith<V>>::visit_mut_with(pseudo, visitor)
                };
                {
                    <KeyframesName as VisitMutWith<V>>::visit_mut_with(name, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for KeyframesPseudoPrefix {
    #[doc = "Calls [VisitMut`::visit_mut_keyframes_pseudo_prefix`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_keyframes_pseudo_prefix(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            KeyframesPseudoPrefix { span, pseudo, name } => {
                {
                    <swc_common::Span as VisitMutWith<V>>::visit_mut_with(span, visitor)
                };
                {
                    <Ident as VisitMutWith<V>>::visit_mut_with(pseudo, visitor)
                };
                {
                    <KeyframesName as VisitMutWith<V>>::visit_mut_with(name, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for LayerName {
    #[doc = "Calls [VisitMut`::visit_mut_layer_name`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_layer_name(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            LayerName { span, name } => {
                {
                    <swc_common::Span as VisitMutWith<V>>::visit_mut_with(span, visitor)
                };
                {
                    <Vec<Ident> as VisitMutWith<V>>::visit_mut_with(name, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for LayerNameList {
    #[doc = "Calls [VisitMut`::visit_mut_layer_name_list`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_layer_name_list(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            LayerNameList { span, name_list } => {
                {
                    <swc_common::Span as VisitMutWith<V>>::visit_mut_with(span, visitor)
                };
                {
                    <Vec<LayerName> as VisitMutWith<V>>::visit_mut_with(name_list, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for LayerPrelude {
    #[doc = "Calls [VisitMut`::visit_mut_layer_prelude`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_layer_prelude(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            LayerPrelude::Name { 0: _field_0 } => {
                <LayerName as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
            LayerPrelude::NameList { 0: _field_0 } => {
                <LayerNameList as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for Length {
    #[doc = "Calls [VisitMut`::visit_mut_length`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_length(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            Length { span, value, unit } => {
                {
                    <swc_common::Span as VisitMutWith<V>>::visit_mut_with(span, visitor)
                };
                {
                    <Number as VisitMutWith<V>>::visit_mut_with(value, visitor)
                };
                {
                    <Ident as VisitMutWith<V>>::visit_mut_with(unit, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for LengthPercentage {
    #[doc = "Calls [VisitMut`::visit_mut_length_percentage`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_length_percentage(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            LengthPercentage::Length { 0: _field_0 } => {
                <Length as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
            LengthPercentage::Percentage { 0: _field_0 } => {
                <Percentage as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for ListOfComponentValues {
    #[doc = "Calls [VisitMut`::visit_mut_list_of_component_values`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_list_of_component_values(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            ListOfComponentValues { span, children } => {
                {
                    <swc_common::Span as VisitMutWith<V>>::visit_mut_with(span, visitor)
                };
                {
                    <Vec<ComponentValue> as VisitMutWith<V>>::visit_mut_with(children, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for MediaAnd {
    #[doc = "Calls [VisitMut`::visit_mut_media_and`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_media_and(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            MediaAnd {
                span,
                keyword,
                condition,
            } => {
                {
                    <swc_common::Span as VisitMutWith<V>>::visit_mut_with(span, visitor)
                };
                {
                    <Option<Ident> as VisitMutWith<V>>::visit_mut_with(keyword, visitor)
                };
                {
                    <MediaInParens as VisitMutWith<V>>::visit_mut_with(condition, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for MediaCondition {
    #[doc = "Calls [VisitMut`::visit_mut_media_condition`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_media_condition(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            MediaCondition { span, conditions } => {
                {
                    <swc_common::Span as VisitMutWith<V>>::visit_mut_with(span, visitor)
                };
                {
                    <Vec<MediaConditionAllType> as VisitMutWith<V>>::visit_mut_with(
                        conditions, visitor,
                    )
                };
            }
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for MediaConditionAllType {
    #[doc = "Calls [VisitMut`::visit_mut_media_condition_all_type`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_media_condition_all_type(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            MediaConditionAllType::Not { 0: _field_0 } => {
                <MediaNot as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
            MediaConditionAllType::And { 0: _field_0 } => {
                <MediaAnd as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
            MediaConditionAllType::Or { 0: _field_0 } => {
                <MediaOr as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
            MediaConditionAllType::MediaInParens { 0: _field_0 } => {
                <MediaInParens as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for MediaConditionType {
    #[doc = "Calls [VisitMut`::visit_mut_media_condition_type`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_media_condition_type(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            MediaConditionType::All { 0: _field_0 } => {
                <MediaCondition as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
            MediaConditionType::WithoutOr { 0: _field_0 } => {
                <MediaConditionWithoutOr as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for MediaConditionWithoutOr {
    #[doc = "Calls [VisitMut`::visit_mut_media_condition_without_or`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_media_condition_without_or(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            MediaConditionWithoutOr { span, conditions } => {
                {
                    <swc_common::Span as VisitMutWith<V>>::visit_mut_with(span, visitor)
                };
                {
                    <Vec<MediaConditionWithoutOrType> as VisitMutWith<V>>::visit_mut_with(
                        conditions, visitor,
                    )
                };
            }
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for MediaConditionWithoutOrType {
    #[doc = "Calls [VisitMut`::visit_mut_media_condition_without_or_type`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_media_condition_without_or_type(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            MediaConditionWithoutOrType::Not { 0: _field_0 } => {
                <MediaNot as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
            MediaConditionWithoutOrType::And { 0: _field_0 } => {
                <MediaAnd as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
            MediaConditionWithoutOrType::MediaInParens { 0: _field_0 } => {
                <MediaInParens as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for MediaFeature {
    #[doc = "Calls [VisitMut`::visit_mut_media_feature`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_media_feature(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            MediaFeature::Plain { 0: _field_0 } => {
                <MediaFeaturePlain as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
            MediaFeature::Boolean { 0: _field_0 } => {
                <MediaFeatureBoolean as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
            MediaFeature::Range { 0: _field_0 } => {
                <MediaFeatureRange as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
            MediaFeature::RangeInterval { 0: _field_0 } => {
                <MediaFeatureRangeInterval as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for MediaFeatureBoolean {
    #[doc = "Calls [VisitMut`::visit_mut_media_feature_boolean`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_media_feature_boolean(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            MediaFeatureBoolean { span, name } => {
                {
                    <swc_common::Span as VisitMutWith<V>>::visit_mut_with(span, visitor)
                };
                {
                    <MediaFeatureName as VisitMutWith<V>>::visit_mut_with(name, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for MediaFeatureName {
    #[doc = "Calls [VisitMut`::visit_mut_media_feature_name`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_media_feature_name(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            MediaFeatureName::Ident { 0: _field_0 } => {
                <Ident as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
            MediaFeatureName::ExtensionName { 0: _field_0 } => {
                <ExtensionName as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for MediaFeaturePlain {
    #[doc = "Calls [VisitMut`::visit_mut_media_feature_plain`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_media_feature_plain(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            MediaFeaturePlain { span, name, value } => {
                {
                    <swc_common::Span as VisitMutWith<V>>::visit_mut_with(span, visitor)
                };
                {
                    <MediaFeatureName as VisitMutWith<V>>::visit_mut_with(name, visitor)
                };
                {
                    <Box<MediaFeatureValue> as VisitMutWith<V>>::visit_mut_with(value, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for MediaFeatureRange {
    #[doc = "Calls [VisitMut`::visit_mut_media_feature_range`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_media_feature_range(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            MediaFeatureRange {
                span,
                left,
                comparison,
                right,
            } => {
                {
                    <swc_common::Span as VisitMutWith<V>>::visit_mut_with(span, visitor)
                };
                {
                    <Box<MediaFeatureValue> as VisitMutWith<V>>::visit_mut_with(left, visitor)
                };
                {
                    <MediaFeatureRangeComparison as VisitMutWith<V>>::visit_mut_with(
                        comparison, visitor,
                    )
                };
                {
                    <Box<MediaFeatureValue> as VisitMutWith<V>>::visit_mut_with(right, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for MediaFeatureRangeComparison {
    #[doc = "Calls [VisitMut`::visit_mut_media_feature_range_comparison`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_media_feature_range_comparison(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            MediaFeatureRangeComparison::Lt => {}
            MediaFeatureRangeComparison::Le => {}
            MediaFeatureRangeComparison::Gt => {}
            MediaFeatureRangeComparison::Ge => {}
            MediaFeatureRangeComparison::Eq => {}
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for MediaFeatureRangeInterval {
    #[doc = "Calls [VisitMut`::visit_mut_media_feature_range_interval`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_media_feature_range_interval(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            MediaFeatureRangeInterval {
                span,
                left,
                left_comparison,
                name,
                right_comparison,
                right,
            } => {
                {
                    <swc_common::Span as VisitMutWith<V>>::visit_mut_with(span, visitor)
                };
                {
                    <Box<MediaFeatureValue> as VisitMutWith<V>>::visit_mut_with(left, visitor)
                };
                {
                    <MediaFeatureRangeComparison as VisitMutWith<V>>::visit_mut_with(
                        left_comparison,
                        visitor,
                    )
                };
                {
                    <MediaFeatureName as VisitMutWith<V>>::visit_mut_with(name, visitor)
                };
                {
                    <MediaFeatureRangeComparison as VisitMutWith<V>>::visit_mut_with(
                        right_comparison,
                        visitor,
                    )
                };
                {
                    <Box<MediaFeatureValue> as VisitMutWith<V>>::visit_mut_with(right, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for MediaFeatureValue {
    #[doc = "Calls [VisitMut`::visit_mut_media_feature_value`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_media_feature_value(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            MediaFeatureValue::Number { 0: _field_0 } => {
                <Number as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
            MediaFeatureValue::Dimension { 0: _field_0 } => {
                <Dimension as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
            MediaFeatureValue::Ident { 0: _field_0 } => {
                <Ident as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
            MediaFeatureValue::Ratio { 0: _field_0 } => {
                <Ratio as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
            MediaFeatureValue::Function { 0: _field_0 } => {
                <Function as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for MediaInParens {
    #[doc = "Calls [VisitMut`::visit_mut_media_in_parens`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_media_in_parens(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            MediaInParens::MediaCondition { 0: _field_0 } => {
                <MediaCondition as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
            MediaInParens::Feature { 0: _field_0 } => {
                <Box<MediaFeature> as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
            MediaInParens::GeneralEnclosed { 0: _field_0 } => {
                <GeneralEnclosed as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for MediaNot {
    #[doc = "Calls [VisitMut`::visit_mut_media_not`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_media_not(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            MediaNot {
                span,
                keyword,
                condition,
            } => {
                {
                    <swc_common::Span as VisitMutWith<V>>::visit_mut_with(span, visitor)
                };
                {
                    <Option<Ident> as VisitMutWith<V>>::visit_mut_with(keyword, visitor)
                };
                {
                    <MediaInParens as VisitMutWith<V>>::visit_mut_with(condition, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for MediaOr {
    #[doc = "Calls [VisitMut`::visit_mut_media_or`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_media_or(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            MediaOr {
                span,
                keyword,
                condition,
            } => {
                {
                    <swc_common::Span as VisitMutWith<V>>::visit_mut_with(span, visitor)
                };
                {
                    <Option<Ident> as VisitMutWith<V>>::visit_mut_with(keyword, visitor)
                };
                {
                    <MediaInParens as VisitMutWith<V>>::visit_mut_with(condition, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for MediaQuery {
    #[doc = "Calls [VisitMut`::visit_mut_media_query`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_media_query(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            MediaQuery {
                span,
                modifier,
                media_type,
                keyword,
                condition,
            } => {
                {
                    <swc_common::Span as VisitMutWith<V>>::visit_mut_with(span, visitor)
                };
                {
                    <Option<Ident> as VisitMutWith<V>>::visit_mut_with(modifier, visitor)
                };
                {
                    <Option<MediaType> as VisitMutWith<V>>::visit_mut_with(media_type, visitor)
                };
                {
                    <Option<Ident> as VisitMutWith<V>>::visit_mut_with(keyword, visitor)
                };
                {
                    <Option<Box<MediaConditionType>> as VisitMutWith<V>>::visit_mut_with(
                        condition, visitor,
                    )
                };
            }
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for MediaQueryList {
    #[doc = "Calls [VisitMut`::visit_mut_media_query_list`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_media_query_list(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            MediaQueryList { span, queries } => {
                {
                    <swc_common::Span as VisitMutWith<V>>::visit_mut_with(span, visitor)
                };
                {
                    <Vec<MediaQuery> as VisitMutWith<V>>::visit_mut_with(queries, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for MediaType {
    #[doc = "Calls [VisitMut`::visit_mut_media_type`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_media_type(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            MediaType::Ident { 0: _field_0 } => {
                <Ident as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for NamedNamespace {
    #[doc = "Calls [VisitMut`::visit_mut_named_namespace`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_named_namespace(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            NamedNamespace { span, name } => {
                {
                    <swc_common::Span as VisitMutWith<V>>::visit_mut_with(span, visitor)
                };
                {
                    <Ident as VisitMutWith<V>>::visit_mut_with(name, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for Namespace {
    #[doc = "Calls [VisitMut`::visit_mut_namespace`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_namespace(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            Namespace::Named { 0: _field_0 } => {
                <NamedNamespace as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
            Namespace::Any { 0: _field_0 } => {
                <AnyNamespace as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for NamespacePrefix {
    #[doc = "Calls [VisitMut`::visit_mut_namespace_prefix`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_namespace_prefix(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            NamespacePrefix { span, namespace } => {
                {
                    <swc_common::Span as VisitMutWith<V>>::visit_mut_with(span, visitor)
                };
                {
                    <Option<Namespace> as VisitMutWith<V>>::visit_mut_with(namespace, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for NamespacePrelude {
    #[doc = "Calls [VisitMut`::visit_mut_namespace_prelude`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_namespace_prelude(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            NamespacePrelude { span, prefix, uri } => {
                {
                    <swc_common::Span as VisitMutWith<V>>::visit_mut_with(span, visitor)
                };
                {
                    <Option<Ident> as VisitMutWith<V>>::visit_mut_with(prefix, visitor)
                };
                {
                    <Box<NamespacePreludeUri> as VisitMutWith<V>>::visit_mut_with(uri, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for NamespacePreludeUri {
    #[doc = "Calls [VisitMut`::visit_mut_namespace_prelude_uri`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_namespace_prelude_uri(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            NamespacePreludeUri::Url { 0: _field_0 } => {
                <Url as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
            NamespacePreludeUri::Str { 0: _field_0 } => {
                <Str as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for NestingSelector {
    #[doc = "Calls [VisitMut`::visit_mut_nesting_selector`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_nesting_selector(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            NestingSelector { span } => {
                {
                    <swc_common::Span as VisitMutWith<V>>::visit_mut_with(span, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for Number {
    #[doc = "Calls [VisitMut`::visit_mut_number`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_number(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            Number { span, value, raw } => {
                {
                    <swc_common::Span as VisitMutWith<V>>::visit_mut_with(span, visitor)
                };
                {
                    <Option<swc_atoms::Atom> as VisitMutWith<V>>::visit_mut_with(raw, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for NumberType {
    #[doc = "Calls [VisitMut`::visit_mut_number_type`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_number_type(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            NumberType::Integer => {}
            NumberType::Number => {}
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for PageSelector {
    #[doc = "Calls [VisitMut`::visit_mut_page_selector`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_page_selector(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            PageSelector {
                span,
                page_type,
                pseudos,
            } => {
                {
                    <swc_common::Span as VisitMutWith<V>>::visit_mut_with(span, visitor)
                };
                {
                    <Option<PageSelectorType> as VisitMutWith<V>>::visit_mut_with(
                        page_type, visitor,
                    )
                };
                {
                    <Option<Vec<PageSelectorPseudo>> as VisitMutWith<V>>::visit_mut_with(
                        pseudos, visitor,
                    )
                };
            }
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for PageSelectorList {
    #[doc = "Calls [VisitMut`::visit_mut_page_selector_list`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_page_selector_list(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            PageSelectorList { span, selectors } => {
                {
                    <swc_common::Span as VisitMutWith<V>>::visit_mut_with(span, visitor)
                };
                {
                    <Vec<PageSelector> as VisitMutWith<V>>::visit_mut_with(selectors, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for PageSelectorPseudo {
    #[doc = "Calls [VisitMut`::visit_mut_page_selector_pseudo`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_page_selector_pseudo(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            PageSelectorPseudo { span, value } => {
                {
                    <swc_common::Span as VisitMutWith<V>>::visit_mut_with(span, visitor)
                };
                {
                    <Ident as VisitMutWith<V>>::visit_mut_with(value, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for PageSelectorType {
    #[doc = "Calls [VisitMut`::visit_mut_page_selector_type`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_page_selector_type(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            PageSelectorType { span, value } => {
                {
                    <swc_common::Span as VisitMutWith<V>>::visit_mut_with(span, visitor)
                };
                {
                    <Ident as VisitMutWith<V>>::visit_mut_with(value, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for Percentage {
    #[doc = "Calls [VisitMut`::visit_mut_percentage`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_percentage(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            Percentage { span, value } => {
                {
                    <swc_common::Span as VisitMutWith<V>>::visit_mut_with(span, visitor)
                };
                {
                    <Number as VisitMutWith<V>>::visit_mut_with(value, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for PseudoClassSelector {
    #[doc = "Calls [VisitMut`::visit_mut_pseudo_class_selector`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_pseudo_class_selector(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            PseudoClassSelector {
                span,
                name,
                children,
            } => {
                {
                    <swc_common::Span as VisitMutWith<V>>::visit_mut_with(span, visitor)
                };
                {
                    <Ident as VisitMutWith<V>>::visit_mut_with(name, visitor)
                };
                {
                    <Option<Vec<PseudoClassSelectorChildren>> as VisitMutWith<V>>::visit_mut_with(
                        children, visitor,
                    )
                };
            }
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for PseudoClassSelectorChildren {
    #[doc = "Calls [VisitMut`::visit_mut_pseudo_class_selector_children`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_pseudo_class_selector_children(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            PseudoClassSelectorChildren::PreservedToken { 0: _field_0 } => {
                <TokenAndSpan as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
            PseudoClassSelectorChildren::AnPlusB { 0: _field_0 } => {
                <AnPlusB as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
            PseudoClassSelectorChildren::Ident { 0: _field_0 } => {
                <Ident as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
            PseudoClassSelectorChildren::Str { 0: _field_0 } => {
                <Str as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
            PseudoClassSelectorChildren::Delimiter { 0: _field_0 } => {
                <Delimiter as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
            PseudoClassSelectorChildren::ComplexSelector { 0: _field_0 } => {
                <ComplexSelector as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
            PseudoClassSelectorChildren::SelectorList { 0: _field_0 } => {
                <SelectorList as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
            PseudoClassSelectorChildren::ForgivingSelectorList { 0: _field_0 } => {
                <ForgivingSelectorList as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
            PseudoClassSelectorChildren::CompoundSelectorList { 0: _field_0 } => {
                <CompoundSelectorList as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
            PseudoClassSelectorChildren::RelativeSelectorList { 0: _field_0 } => {
                <RelativeSelectorList as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
            PseudoClassSelectorChildren::ForgivingRelativeSelectorList { 0: _field_0 } => {
                <ForgivingRelativeSelectorList as VisitMutWith<V>>::visit_mut_with(
                    _field_0, visitor,
                );
            }
            PseudoClassSelectorChildren::CompoundSelector { 0: _field_0 } => {
                <CompoundSelector as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for PseudoElementSelector {
    #[doc = "Calls [VisitMut`::visit_mut_pseudo_element_selector`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_pseudo_element_selector(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            PseudoElementSelector {
                span,
                name,
                children,
            } => {
                {
                    <swc_common::Span as VisitMutWith<V>>::visit_mut_with(span, visitor)
                };
                {
                    <Ident as VisitMutWith<V>>::visit_mut_with(name, visitor)
                };
                {
                    <Option<Vec<PseudoElementSelectorChildren>> as VisitMutWith<V>>::visit_mut_with(
                        children, visitor,
                    )
                };
            }
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for PseudoElementSelectorChildren {
    #[doc = "Calls [VisitMut`::visit_mut_pseudo_element_selector_children`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_pseudo_element_selector_children(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            PseudoElementSelectorChildren::PreservedToken { 0: _field_0 } => {
                <TokenAndSpan as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
            PseudoElementSelectorChildren::Ident { 0: _field_0 } => {
                <Ident as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
            PseudoElementSelectorChildren::CompoundSelector { 0: _field_0 } => {
                <CompoundSelector as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
            PseudoElementSelectorChildren::CustomHighlightName { 0: _field_0 } => {
                <CustomHighlightName as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for QualifiedRule {
    #[doc = "Calls [VisitMut`::visit_mut_qualified_rule`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_qualified_rule(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            QualifiedRule {
                span,
                prelude,
                block,
            } => {
                {
                    <swc_common::Span as VisitMutWith<V>>::visit_mut_with(span, visitor)
                };
                {
                    <QualifiedRulePrelude as VisitMutWith<V>>::visit_mut_with(prelude, visitor)
                };
                {
                    <SimpleBlock as VisitMutWith<V>>::visit_mut_with(block, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for QualifiedRulePrelude {
    #[doc = "Calls [VisitMut`::visit_mut_qualified_rule_prelude`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_qualified_rule_prelude(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            QualifiedRulePrelude::SelectorList { 0: _field_0 } => {
                <SelectorList as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
            QualifiedRulePrelude::RelativeSelectorList { 0: _field_0 } => {
                <RelativeSelectorList as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
            QualifiedRulePrelude::ListOfComponentValues { 0: _field_0 } => {
                <ListOfComponentValues as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for QueryInParens {
    #[doc = "Calls [VisitMut`::visit_mut_query_in_parens`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_query_in_parens(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            QueryInParens::ContainerQuery { 0: _field_0 } => {
                <Box<ContainerQuery> as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
            QueryInParens::SizeFeature { 0: _field_0 } => {
                <SizeFeature as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
            QueryInParens::GeneralEnclosed { 0: _field_0 } => {
                <GeneralEnclosed as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for Ratio {
    #[doc = "Calls [VisitMut`::visit_mut_ratio`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_ratio(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            Ratio { span, left, right } => {
                {
                    <swc_common::Span as VisitMutWith<V>>::visit_mut_with(span, visitor)
                };
                {
                    <Number as VisitMutWith<V>>::visit_mut_with(left, visitor)
                };
                {
                    <Option<Number> as VisitMutWith<V>>::visit_mut_with(right, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for RelativeSelector {
    #[doc = "Calls [VisitMut`::visit_mut_relative_selector`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_relative_selector(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            RelativeSelector {
                span,
                combinator,
                selector,
            } => {
                {
                    <swc_common::Span as VisitMutWith<V>>::visit_mut_with(span, visitor)
                };
                {
                    <Option<Combinator> as VisitMutWith<V>>::visit_mut_with(combinator, visitor)
                };
                {
                    <ComplexSelector as VisitMutWith<V>>::visit_mut_with(selector, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for RelativeSelectorList {
    #[doc = "Calls [VisitMut`::visit_mut_relative_selector_list`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_relative_selector_list(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            RelativeSelectorList { span, children } => {
                {
                    <swc_common::Span as VisitMutWith<V>>::visit_mut_with(span, visitor)
                };
                {
                    <Vec<RelativeSelector> as VisitMutWith<V>>::visit_mut_with(children, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for Resolution {
    #[doc = "Calls [VisitMut`::visit_mut_resolution`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_resolution(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            Resolution { span, value, unit } => {
                {
                    <swc_common::Span as VisitMutWith<V>>::visit_mut_with(span, visitor)
                };
                {
                    <Number as VisitMutWith<V>>::visit_mut_with(value, visitor)
                };
                {
                    <Ident as VisitMutWith<V>>::visit_mut_with(unit, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for Rule {
    #[doc = "Calls [VisitMut`::visit_mut_rule`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_rule(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            Rule::QualifiedRule { 0: _field_0 } => {
                <Box<QualifiedRule> as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
            Rule::AtRule { 0: _field_0 } => {
                <Box<AtRule> as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
            Rule::ListOfComponentValues { 0: _field_0 } => {
                <Box<ListOfComponentValues> as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for ScopeRange {
    #[doc = "Calls [VisitMut`::visit_mut_scope_range`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_scope_range(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            ScopeRange {
                span,
                scope_start,
                scope_end,
            } => {
                {
                    <swc_common::Span as VisitMutWith<V>>::visit_mut_with(span, visitor)
                };
                {
                    <Option<ForgivingSelectorList> as VisitMutWith<V>>::visit_mut_with(
                        scope_start,
                        visitor,
                    )
                };
                {
                    <Option<ForgivingSelectorList> as VisitMutWith<V>>::visit_mut_with(
                        scope_end, visitor,
                    )
                };
            }
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for SelectorList {
    #[doc = "Calls [VisitMut`::visit_mut_selector_list`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_selector_list(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            SelectorList { span, children } => {
                {
                    <swc_common::Span as VisitMutWith<V>>::visit_mut_with(span, visitor)
                };
                {
                    <Vec<ComplexSelector> as VisitMutWith<V>>::visit_mut_with(children, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for SequenceOfCustomIdents {
    #[doc = "Calls [VisitMut`::visit_mut_sequence_of_custom_idents`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_sequence_of_custom_idents(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            SequenceOfCustomIdents { span, value } => {
                {
                    <swc_common::Span as VisitMutWith<V>>::visit_mut_with(span, visitor)
                };
                {
                    <Vec<CustomIdent> as VisitMutWith<V>>::visit_mut_with(value, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for SimpleBlock {
    #[doc = "Calls [VisitMut`::visit_mut_simple_block`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_simple_block(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            SimpleBlock { span, name, value } => {
                {
                    <swc_common::Span as VisitMutWith<V>>::visit_mut_with(span, visitor)
                };
                {
                    <TokenAndSpan as VisitMutWith<V>>::visit_mut_with(name, visitor)
                };
                {
                    <Vec<ComponentValue> as VisitMutWith<V>>::visit_mut_with(value, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for SizeFeature {
    #[doc = "Calls [VisitMut`::visit_mut_size_feature`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_size_feature(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            SizeFeature::Plain { 0: _field_0 } => {
                <SizeFeaturePlain as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
            SizeFeature::Boolean { 0: _field_0 } => {
                <SizeFeatureBoolean as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
            SizeFeature::Range { 0: _field_0 } => {
                <SizeFeatureRange as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
            SizeFeature::RangeInterval { 0: _field_0 } => {
                <SizeFeatureRangeInterval as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for SizeFeatureBoolean {
    #[doc = "Calls [VisitMut`::visit_mut_size_feature_boolean`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_size_feature_boolean(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            SizeFeatureBoolean { span, name } => {
                {
                    <swc_common::Span as VisitMutWith<V>>::visit_mut_with(span, visitor)
                };
                {
                    <SizeFeatureName as VisitMutWith<V>>::visit_mut_with(name, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for SizeFeatureName {
    #[doc = "Calls [VisitMut`::visit_mut_size_feature_name`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_size_feature_name(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            SizeFeatureName::Ident { 0: _field_0 } => {
                <Ident as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for SizeFeaturePlain {
    #[doc = "Calls [VisitMut`::visit_mut_size_feature_plain`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_size_feature_plain(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            SizeFeaturePlain { span, name, value } => {
                {
                    <swc_common::Span as VisitMutWith<V>>::visit_mut_with(span, visitor)
                };
                {
                    <SizeFeatureName as VisitMutWith<V>>::visit_mut_with(name, visitor)
                };
                {
                    <Box<SizeFeatureValue> as VisitMutWith<V>>::visit_mut_with(value, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for SizeFeatureRange {
    #[doc = "Calls [VisitMut`::visit_mut_size_feature_range`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_size_feature_range(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            SizeFeatureRange {
                span,
                left,
                comparison,
                right,
            } => {
                {
                    <swc_common::Span as VisitMutWith<V>>::visit_mut_with(span, visitor)
                };
                {
                    <Box<SizeFeatureValue> as VisitMutWith<V>>::visit_mut_with(left, visitor)
                };
                {
                    <SizeFeatureRangeComparison as VisitMutWith<V>>::visit_mut_with(
                        comparison, visitor,
                    )
                };
                {
                    <Box<SizeFeatureValue> as VisitMutWith<V>>::visit_mut_with(right, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for SizeFeatureRangeComparison {
    #[doc = "Calls [VisitMut`::visit_mut_size_feature_range_comparison`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_size_feature_range_comparison(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            SizeFeatureRangeComparison::Lt => {}
            SizeFeatureRangeComparison::Le => {}
            SizeFeatureRangeComparison::Gt => {}
            SizeFeatureRangeComparison::Ge => {}
            SizeFeatureRangeComparison::Eq => {}
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for SizeFeatureRangeInterval {
    #[doc = "Calls [VisitMut`::visit_mut_size_feature_range_interval`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_size_feature_range_interval(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            SizeFeatureRangeInterval {
                span,
                left,
                left_comparison,
                name,
                right_comparison,
                right,
            } => {
                {
                    <swc_common::Span as VisitMutWith<V>>::visit_mut_with(span, visitor)
                };
                {
                    <Box<SizeFeatureValue> as VisitMutWith<V>>::visit_mut_with(left, visitor)
                };
                {
                    <SizeFeatureRangeComparison as VisitMutWith<V>>::visit_mut_with(
                        left_comparison,
                        visitor,
                    )
                };
                {
                    <SizeFeatureName as VisitMutWith<V>>::visit_mut_with(name, visitor)
                };
                {
                    <SizeFeatureRangeComparison as VisitMutWith<V>>::visit_mut_with(
                        right_comparison,
                        visitor,
                    )
                };
                {
                    <Box<SizeFeatureValue> as VisitMutWith<V>>::visit_mut_with(right, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for SizeFeatureValue {
    #[doc = "Calls [VisitMut`::visit_mut_size_feature_value`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_size_feature_value(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            SizeFeatureValue::Number { 0: _field_0 } => {
                <Number as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
            SizeFeatureValue::Dimension { 0: _field_0 } => {
                <Dimension as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
            SizeFeatureValue::Ident { 0: _field_0 } => {
                <Ident as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
            SizeFeatureValue::Ratio { 0: _field_0 } => {
                <Ratio as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
            SizeFeatureValue::Function { 0: _field_0 } => {
                <Function as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for Str {
    #[doc = "Calls [VisitMut`::visit_mut_str`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_str(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            Str { span, value, raw } => {
                {
                    <swc_common::Span as VisitMutWith<V>>::visit_mut_with(span, visitor)
                };
                {
                    <swc_atoms::Atom as VisitMutWith<V>>::visit_mut_with(value, visitor)
                };
                {
                    <Option<swc_atoms::Atom> as VisitMutWith<V>>::visit_mut_with(raw, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for StyleBlock {
    #[doc = "Calls [VisitMut`::visit_mut_style_block`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_style_block(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            StyleBlock::AtRule { 0: _field_0 } => {
                <Box<AtRule> as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
            StyleBlock::Declaration { 0: _field_0 } => {
                <Box<Declaration> as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
            StyleBlock::QualifiedRule { 0: _field_0 } => {
                <Box<QualifiedRule> as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
            StyleBlock::ListOfComponentValues { 0: _field_0 } => {
                <Box<ListOfComponentValues> as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for Stylesheet {
    #[doc = "Calls [VisitMut`::visit_mut_stylesheet`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_stylesheet(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            Stylesheet { span, rules } => {
                {
                    <swc_common::Span as VisitMutWith<V>>::visit_mut_with(span, visitor)
                };
                {
                    <Vec<Rule> as VisitMutWith<V>>::visit_mut_with(rules, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for SubclassSelector {
    #[doc = "Calls [VisitMut`::visit_mut_subclass_selector`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_subclass_selector(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            SubclassSelector::Id { 0: _field_0 } => {
                <IdSelector as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
            SubclassSelector::Class { 0: _field_0 } => {
                <ClassSelector as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
            SubclassSelector::Attribute { 0: _field_0 } => {
                <Box<AttributeSelector> as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
            SubclassSelector::PseudoClass { 0: _field_0 } => {
                <PseudoClassSelector as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
            SubclassSelector::PseudoElement { 0: _field_0 } => {
                <PseudoElementSelector as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for SupportsAnd {
    #[doc = "Calls [VisitMut`::visit_mut_supports_and`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_supports_and(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            SupportsAnd {
                span,
                keyword,
                condition,
            } => {
                {
                    <swc_common::Span as VisitMutWith<V>>::visit_mut_with(span, visitor)
                };
                {
                    <Option<Ident> as VisitMutWith<V>>::visit_mut_with(keyword, visitor)
                };
                {
                    <Box<SupportsInParens> as VisitMutWith<V>>::visit_mut_with(condition, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for SupportsCondition {
    #[doc = "Calls [VisitMut`::visit_mut_supports_condition`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_supports_condition(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            SupportsCondition { span, conditions } => {
                {
                    <swc_common::Span as VisitMutWith<V>>::visit_mut_with(span, visitor)
                };
                {
                    <Vec<SupportsConditionType> as VisitMutWith<V>>::visit_mut_with(
                        conditions, visitor,
                    )
                };
            }
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for SupportsConditionType {
    #[doc = "Calls [VisitMut`::visit_mut_supports_condition_type`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_supports_condition_type(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            SupportsConditionType::Not { 0: _field_0 } => {
                <SupportsNot as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
            SupportsConditionType::And { 0: _field_0 } => {
                <SupportsAnd as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
            SupportsConditionType::Or { 0: _field_0 } => {
                <SupportsOr as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
            SupportsConditionType::SupportsInParens { 0: _field_0 } => {
                <SupportsInParens as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for SupportsFeature {
    #[doc = "Calls [VisitMut`::visit_mut_supports_feature`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_supports_feature(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            SupportsFeature::Declaration { 0: _field_0 } => {
                <Box<Declaration> as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
            SupportsFeature::Function { 0: _field_0 } => {
                <Function as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for SupportsInParens {
    #[doc = "Calls [VisitMut`::visit_mut_supports_in_parens`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_supports_in_parens(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            SupportsInParens::SupportsCondition { 0: _field_0 } => {
                <SupportsCondition as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
            SupportsInParens::Feature { 0: _field_0 } => {
                <SupportsFeature as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
            SupportsInParens::GeneralEnclosed { 0: _field_0 } => {
                <GeneralEnclosed as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for SupportsNot {
    #[doc = "Calls [VisitMut`::visit_mut_supports_not`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_supports_not(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            SupportsNot {
                span,
                keyword,
                condition,
            } => {
                {
                    <swc_common::Span as VisitMutWith<V>>::visit_mut_with(span, visitor)
                };
                {
                    <Option<Ident> as VisitMutWith<V>>::visit_mut_with(keyword, visitor)
                };
                {
                    <Box<SupportsInParens> as VisitMutWith<V>>::visit_mut_with(condition, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for SupportsOr {
    #[doc = "Calls [VisitMut`::visit_mut_supports_or`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_supports_or(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            SupportsOr {
                span,
                keyword,
                condition,
            } => {
                {
                    <swc_common::Span as VisitMutWith<V>>::visit_mut_with(span, visitor)
                };
                {
                    <Option<Ident> as VisitMutWith<V>>::visit_mut_with(keyword, visitor)
                };
                {
                    <Box<SupportsInParens> as VisitMutWith<V>>::visit_mut_with(condition, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for TagNameSelector {
    #[doc = "Calls [VisitMut`::visit_mut_tag_name_selector`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_tag_name_selector(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            TagNameSelector { span, name } => {
                {
                    <swc_common::Span as VisitMutWith<V>>::visit_mut_with(span, visitor)
                };
                {
                    <WqName as VisitMutWith<V>>::visit_mut_with(name, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for Time {
    #[doc = "Calls [VisitMut`::visit_mut_time`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_time(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            Time { span, value, unit } => {
                {
                    <swc_common::Span as VisitMutWith<V>>::visit_mut_with(span, visitor)
                };
                {
                    <Number as VisitMutWith<V>>::visit_mut_with(value, visitor)
                };
                {
                    <Ident as VisitMutWith<V>>::visit_mut_with(unit, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for TimePercentage {
    #[doc = "Calls [VisitMut`::visit_mut_time_percentage`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_time_percentage(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            TimePercentage::Time { 0: _field_0 } => {
                <Time as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
            TimePercentage::Percentage { 0: _field_0 } => {
                <Percentage as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for Token {
    #[doc = "Calls [VisitMut`::visit_mut_token`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_token(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            Token::Ident { value, raw } => {
                {
                    <swc_atoms::Atom as VisitMutWith<V>>::visit_mut_with(value, visitor)
                };
                {
                    <swc_atoms::Atom as VisitMutWith<V>>::visit_mut_with(raw, visitor)
                };
            }
            Token::Function { value, raw } => {
                {
                    <swc_atoms::Atom as VisitMutWith<V>>::visit_mut_with(value, visitor)
                };
                {
                    <swc_atoms::Atom as VisitMutWith<V>>::visit_mut_with(raw, visitor)
                };
            }
            Token::AtKeyword { value, raw } => {
                {
                    <swc_atoms::Atom as VisitMutWith<V>>::visit_mut_with(value, visitor)
                };
                {
                    <swc_atoms::Atom as VisitMutWith<V>>::visit_mut_with(raw, visitor)
                };
            }
            Token::Hash { is_id, value, raw } => {
                {
                    <swc_atoms::Atom as VisitMutWith<V>>::visit_mut_with(value, visitor)
                };
                {
                    <swc_atoms::Atom as VisitMutWith<V>>::visit_mut_with(raw, visitor)
                };
            }
            Token::String { value, raw } => {
                {
                    <swc_atoms::Atom as VisitMutWith<V>>::visit_mut_with(value, visitor)
                };
                {
                    <swc_atoms::Atom as VisitMutWith<V>>::visit_mut_with(raw, visitor)
                };
            }
            Token::BadString { raw } => {
                {
                    <swc_atoms::Atom as VisitMutWith<V>>::visit_mut_with(raw, visitor)
                };
            }
            Token::Url { value, raw } => {
                {
                    <swc_atoms::Atom as VisitMutWith<V>>::visit_mut_with(value, visitor)
                };
                {
                    <Box<UrlKeyValue> as VisitMutWith<V>>::visit_mut_with(raw, visitor)
                };
            }
            Token::BadUrl { raw } => {
                {
                    <swc_atoms::Atom as VisitMutWith<V>>::visit_mut_with(raw, visitor)
                };
            }
            Token::Delim { value } => {}
            Token::Number {
                value,
                raw,
                type_flag,
            } => {
                {
                    <swc_atoms::Atom as VisitMutWith<V>>::visit_mut_with(raw, visitor)
                };
                {
                    <NumberType as VisitMutWith<V>>::visit_mut_with(type_flag, visitor)
                };
            }
            Token::Percentage { value, raw } => {
                {
                    <swc_atoms::Atom as VisitMutWith<V>>::visit_mut_with(raw, visitor)
                };
            }
            Token::Dimension { 0: _field_0 } => {
                <Box<DimensionToken> as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
            Token::WhiteSpace { value } => {
                {
                    <swc_atoms::Atom as VisitMutWith<V>>::visit_mut_with(value, visitor)
                };
            }
            Token::CDO => {}
            Token::CDC => {}
            Token::Colon => {}
            Token::Semi => {}
            Token::Comma => {}
            Token::LBracket => {}
            Token::RBracket => {}
            Token::LParen => {}
            Token::RParen => {}
            Token::LBrace => {}
            Token::RBrace => {}
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for TokenAndSpan {
    #[doc = "Calls [VisitMut`::visit_mut_token_and_span`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_token_and_span(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            TokenAndSpan { span, token } => {
                {
                    <swc_common::Span as VisitMutWith<V>>::visit_mut_with(span, visitor)
                };
                {
                    <Token as VisitMutWith<V>>::visit_mut_with(token, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for TypeSelector {
    #[doc = "Calls [VisitMut`::visit_mut_type_selector`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_type_selector(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            TypeSelector::TagName { 0: _field_0 } => {
                <TagNameSelector as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
            TypeSelector::Universal { 0: _field_0 } => {
                <UniversalSelector as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for UnicodeRange {
    #[doc = "Calls [VisitMut`::visit_mut_unicode_range`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_unicode_range(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            UnicodeRange {
                span,
                start,
                end,
                raw,
            } => {
                {
                    <swc_common::Span as VisitMutWith<V>>::visit_mut_with(span, visitor)
                };
                {
                    <swc_atoms::Atom as VisitMutWith<V>>::visit_mut_with(start, visitor)
                };
                {
                    <Option<swc_atoms::Atom> as VisitMutWith<V>>::visit_mut_with(end, visitor)
                };
                {
                    <Option<swc_atoms::Atom> as VisitMutWith<V>>::visit_mut_with(raw, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for UniversalSelector {
    #[doc = "Calls [VisitMut`::visit_mut_universal_selector`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_universal_selector(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            UniversalSelector { span, prefix } => {
                {
                    <swc_common::Span as VisitMutWith<V>>::visit_mut_with(span, visitor)
                };
                {
                    <Option<NamespacePrefix> as VisitMutWith<V>>::visit_mut_with(prefix, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for UnknownDimension {
    #[doc = "Calls [VisitMut`::visit_mut_unknown_dimension`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_unknown_dimension(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            UnknownDimension { span, value, unit } => {
                {
                    <swc_common::Span as VisitMutWith<V>>::visit_mut_with(span, visitor)
                };
                {
                    <Number as VisitMutWith<V>>::visit_mut_with(value, visitor)
                };
                {
                    <Ident as VisitMutWith<V>>::visit_mut_with(unit, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for Url {
    #[doc = "Calls [VisitMut`::visit_mut_url`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_url(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            Url {
                span,
                name,
                value,
                modifiers,
            } => {
                {
                    <swc_common::Span as VisitMutWith<V>>::visit_mut_with(span, visitor)
                };
                {
                    <Ident as VisitMutWith<V>>::visit_mut_with(name, visitor)
                };
                {
                    <Option<Box<UrlValue>> as VisitMutWith<V>>::visit_mut_with(value, visitor)
                };
                {
                    <Option<Vec<UrlModifier>> as VisitMutWith<V>>::visit_mut_with(
                        modifiers, visitor,
                    )
                };
            }
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for UrlKeyValue {
    #[doc = "Calls [VisitMut`::visit_mut_url_key_value`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_url_key_value(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            UrlKeyValue {
                0: _field_0,
                1: _field_1,
            } => {
                <swc_atoms::Atom as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
                <swc_atoms::Atom as VisitMutWith<V>>::visit_mut_with(_field_1, visitor);
            }
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for UrlModifier {
    #[doc = "Calls [VisitMut`::visit_mut_url_modifier`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_url_modifier(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            UrlModifier::Ident { 0: _field_0 } => {
                <Ident as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
            UrlModifier::Function { 0: _field_0 } => {
                <Function as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for UrlValue {
    #[doc = "Calls [VisitMut`::visit_mut_url_value`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_url_value(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            UrlValue::Str { 0: _field_0 } => {
                <Str as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
            UrlValue::Raw { 0: _field_0 } => {
                <UrlValueRaw as VisitMutWith<V>>::visit_mut_with(_field_0, visitor);
            }
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for UrlValueRaw {
    #[doc = "Calls [VisitMut`::visit_mut_url_value_raw`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_url_value_raw(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            UrlValueRaw { span, value, raw } => {
                {
                    <swc_common::Span as VisitMutWith<V>>::visit_mut_with(span, visitor)
                };
                {
                    <swc_atoms::Atom as VisitMutWith<V>>::visit_mut_with(value, visitor)
                };
                {
                    <Option<swc_atoms::Atom> as VisitMutWith<V>>::visit_mut_with(raw, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for WqName {
    #[doc = "Calls [VisitMut`::visit_mut_wq_name`] with `self`."]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_wq_name(visitor, self)
    }

    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            WqName {
                span,
                prefix,
                value,
            } => {
                {
                    <swc_common::Span as VisitMutWith<V>>::visit_mut_with(span, visitor)
                };
                {
                    <Option<NamespacePrefix> as VisitMutWith<V>>::visit_mut_with(prefix, visitor)
                };
                {
                    <Ident as VisitMutWith<V>>::visit_mut_with(value, visitor)
                };
            }
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for swc_atoms::Atom {
    #[doc = "Calls [VisitMut`::visit_mut_atom`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_atom(visitor, self)
    }

    #[inline]
    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        {}
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for Vec<CalcProductOrOperator> {
    #[doc = "Calls [VisitMut`::visit_mut_calc_product_or_operators`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_calc_product_or_operators(visitor, self)
    }

    #[inline]
    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        self.iter_mut().for_each(|item| {
            <CalcProductOrOperator as VisitMutWith<V>>::visit_mut_with(item, visitor)
        })
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for Vec<CalcValueOrOperator> {
    #[doc = "Calls [VisitMut`::visit_mut_calc_value_or_operators`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_calc_value_or_operators(visitor, self)
    }

    #[inline]
    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        self.iter_mut().for_each(|item| {
            <CalcValueOrOperator as VisitMutWith<V>>::visit_mut_with(item, visitor)
        })
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for Vec<ComplexSelectorChildren> {
    #[doc = "Calls [VisitMut`::visit_mut_complex_selector_childrens`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_complex_selector_childrens(visitor, self)
    }

    #[inline]
    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        self.iter_mut().for_each(|item| {
            <ComplexSelectorChildren as VisitMutWith<V>>::visit_mut_with(item, visitor)
        })
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for Vec<ComplexSelector> {
    #[doc = "Calls [VisitMut`::visit_mut_complex_selectors`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_complex_selectors(visitor, self)
    }

    #[inline]
    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        self.iter_mut()
            .for_each(|item| <ComplexSelector as VisitMutWith<V>>::visit_mut_with(item, visitor))
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for Vec<ComponentValue> {
    #[doc = "Calls [VisitMut`::visit_mut_component_values`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_component_values(visitor, self)
    }

    #[inline]
    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        self.iter_mut()
            .for_each(|item| <ComponentValue as VisitMutWith<V>>::visit_mut_with(item, visitor))
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for Vec<CompoundSelector> {
    #[doc = "Calls [VisitMut`::visit_mut_compound_selectors`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_compound_selectors(visitor, self)
    }

    #[inline]
    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        self.iter_mut()
            .for_each(|item| <CompoundSelector as VisitMutWith<V>>::visit_mut_with(item, visitor))
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for Vec<ContainerQueryType> {
    #[doc = "Calls [VisitMut`::visit_mut_container_query_types`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_container_query_types(visitor, self)
    }

    #[inline]
    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        self.iter_mut()
            .for_each(|item| <ContainerQueryType as VisitMutWith<V>>::visit_mut_with(item, visitor))
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for Vec<CustomIdent> {
    #[doc = "Calls [VisitMut`::visit_mut_custom_idents`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_custom_idents(visitor, self)
    }

    #[inline]
    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        self.iter_mut()
            .for_each(|item| <CustomIdent as VisitMutWith<V>>::visit_mut_with(item, visitor))
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for Vec<DocumentPreludeMatchingFunction> {
    #[doc = "Calls [VisitMut`::visit_mut_document_prelude_matching_functions`] with `self`. (Extra \
             impl)"]
    #[inline]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_document_prelude_matching_functions(visitor, self)
    }

    #[inline]
    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        self.iter_mut().for_each(|item| {
            <DocumentPreludeMatchingFunction as VisitMutWith<V>>::visit_mut_with(item, visitor)
        })
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for Vec<FamilyName> {
    #[doc = "Calls [VisitMut`::visit_mut_family_names`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_family_names(visitor, self)
    }

    #[inline]
    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        self.iter_mut()
            .for_each(|item| <FamilyName as VisitMutWith<V>>::visit_mut_with(item, visitor))
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for Vec<ForgivingComplexSelector> {
    #[doc = "Calls [VisitMut`::visit_mut_forgiving_complex_selectors`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_forgiving_complex_selectors(visitor, self)
    }

    #[inline]
    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        self.iter_mut().for_each(|item| {
            <ForgivingComplexSelector as VisitMutWith<V>>::visit_mut_with(item, visitor)
        })
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for Vec<ForgivingRelativeSelector> {
    #[doc = "Calls [VisitMut`::visit_mut_forgiving_relative_selectors`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_forgiving_relative_selectors(visitor, self)
    }

    #[inline]
    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        self.iter_mut().for_each(|item| {
            <ForgivingRelativeSelector as VisitMutWith<V>>::visit_mut_with(item, visitor)
        })
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for Vec<Ident> {
    #[doc = "Calls [VisitMut`::visit_mut_idents`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_idents(visitor, self)
    }

    #[inline]
    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        self.iter_mut()
            .for_each(|item| <Ident as VisitMutWith<V>>::visit_mut_with(item, visitor))
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for Vec<KeyframeSelector> {
    #[doc = "Calls [VisitMut`::visit_mut_keyframe_selectors`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_keyframe_selectors(visitor, self)
    }

    #[inline]
    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        self.iter_mut()
            .for_each(|item| <KeyframeSelector as VisitMutWith<V>>::visit_mut_with(item, visitor))
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for Vec<LayerName> {
    #[doc = "Calls [VisitMut`::visit_mut_layer_names`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_layer_names(visitor, self)
    }

    #[inline]
    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        self.iter_mut()
            .for_each(|item| <LayerName as VisitMutWith<V>>::visit_mut_with(item, visitor))
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for Vec<MediaConditionAllType> {
    #[doc = "Calls [VisitMut`::visit_mut_media_condition_all_types`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_media_condition_all_types(visitor, self)
    }

    #[inline]
    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        self.iter_mut().for_each(|item| {
            <MediaConditionAllType as VisitMutWith<V>>::visit_mut_with(item, visitor)
        })
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for Vec<MediaConditionWithoutOrType> {
    #[doc = "Calls [VisitMut`::visit_mut_media_condition_without_or_types`] with `self`. (Extra \
             impl)"]
    #[inline]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_media_condition_without_or_types(visitor, self)
    }

    #[inline]
    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        self.iter_mut().for_each(|item| {
            <MediaConditionWithoutOrType as VisitMutWith<V>>::visit_mut_with(item, visitor)
        })
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for Vec<MediaQuery> {
    #[doc = "Calls [VisitMut`::visit_mut_media_querys`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_media_querys(visitor, self)
    }

    #[inline]
    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        self.iter_mut()
            .for_each(|item| <MediaQuery as VisitMutWith<V>>::visit_mut_with(item, visitor))
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for Option<Box<AtRulePrelude>> {
    #[doc = "Calls [VisitMut`::visit_mut_opt_at_rule_prelude`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_opt_at_rule_prelude(visitor, self)
    }

    #[inline]
    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            Some(inner) => <Box<AtRulePrelude> as VisitMutWith<V>>::visit_mut_with(inner, visitor),
            None => {}
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for Option<swc_atoms::Atom> {
    #[doc = "Calls [VisitMut`::visit_mut_opt_atom`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_opt_atom(visitor, self)
    }

    #[inline]
    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            Some(inner) => <swc_atoms::Atom as VisitMutWith<V>>::visit_mut_with(inner, visitor),
            None => {}
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for Option<AttributeSelectorMatcher> {
    #[doc = "Calls [VisitMut`::visit_mut_opt_attribute_selector_matcher`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_opt_attribute_selector_matcher(visitor, self)
    }

    #[inline]
    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            Some(inner) => {
                <AttributeSelectorMatcher as VisitMutWith<V>>::visit_mut_with(inner, visitor)
            }
            None => {}
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for Option<AttributeSelectorModifier> {
    #[doc = "Calls [VisitMut`::visit_mut_opt_attribute_selector_modifier`] with `self`. (Extra \
             impl)"]
    #[inline]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_opt_attribute_selector_modifier(visitor, self)
    }

    #[inline]
    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            Some(inner) => {
                <AttributeSelectorModifier as VisitMutWith<V>>::visit_mut_with(inner, visitor)
            }
            None => {}
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for Option<AttributeSelectorValue> {
    #[doc = "Calls [VisitMut`::visit_mut_opt_attribute_selector_value`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_opt_attribute_selector_value(visitor, self)
    }

    #[inline]
    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            Some(inner) => {
                <AttributeSelectorValue as VisitMutWith<V>>::visit_mut_with(inner, visitor)
            }
            None => {}
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for Option<Combinator> {
    #[doc = "Calls [VisitMut`::visit_mut_opt_combinator`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_opt_combinator(visitor, self)
    }

    #[inline]
    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            Some(inner) => <Combinator as VisitMutWith<V>>::visit_mut_with(inner, visitor),
            None => {}
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for Option<ContainerName> {
    #[doc = "Calls [VisitMut`::visit_mut_opt_container_name`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_opt_container_name(visitor, self)
    }

    #[inline]
    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            Some(inner) => <ContainerName as VisitMutWith<V>>::visit_mut_with(inner, visitor),
            None => {}
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for Option<ForgivingSelectorList> {
    #[doc = "Calls [VisitMut`::visit_mut_opt_forgiving_selector_list`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_opt_forgiving_selector_list(visitor, self)
    }

    #[inline]
    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            Some(inner) => {
                <ForgivingSelectorList as VisitMutWith<V>>::visit_mut_with(inner, visitor)
            }
            None => {}
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for Option<Box<Function>> {
    #[doc = "Calls [VisitMut`::visit_mut_opt_function`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_opt_function(visitor, self)
    }

    #[inline]
    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            Some(inner) => <Box<Function> as VisitMutWith<V>>::visit_mut_with(inner, visitor),
            None => {}
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for Option<Ident> {
    #[doc = "Calls [VisitMut`::visit_mut_opt_ident`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_opt_ident(visitor, self)
    }

    #[inline]
    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            Some(inner) => <Ident as VisitMutWith<V>>::visit_mut_with(inner, visitor),
            None => {}
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for Option<Box<ImportConditions>> {
    #[doc = "Calls [VisitMut`::visit_mut_opt_import_conditions`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_opt_import_conditions(visitor, self)
    }

    #[inline]
    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            Some(inner) => {
                <Box<ImportConditions> as VisitMutWith<V>>::visit_mut_with(inner, visitor)
            }
            None => {}
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for Option<Box<ImportLayerName>> {
    #[doc = "Calls [VisitMut`::visit_mut_opt_import_layer_name`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_opt_import_layer_name(visitor, self)
    }

    #[inline]
    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            Some(inner) => {
                <Box<ImportLayerName> as VisitMutWith<V>>::visit_mut_with(inner, visitor)
            }
            None => {}
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for Option<ImportantFlag> {
    #[doc = "Calls [VisitMut`::visit_mut_opt_important_flag`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_opt_important_flag(visitor, self)
    }

    #[inline]
    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            Some(inner) => <ImportantFlag as VisitMutWith<V>>::visit_mut_with(inner, visitor),
            None => {}
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for Option<Box<MediaConditionType>> {
    #[doc = "Calls [VisitMut`::visit_mut_opt_media_condition_type`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_opt_media_condition_type(visitor, self)
    }

    #[inline]
    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            Some(inner) => {
                <Box<MediaConditionType> as VisitMutWith<V>>::visit_mut_with(inner, visitor)
            }
            None => {}
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for Option<Box<MediaQueryList>> {
    #[doc = "Calls [VisitMut`::visit_mut_opt_media_query_list`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_opt_media_query_list(visitor, self)
    }

    #[inline]
    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            Some(inner) => <Box<MediaQueryList> as VisitMutWith<V>>::visit_mut_with(inner, visitor),
            None => {}
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for Option<MediaType> {
    #[doc = "Calls [VisitMut`::visit_mut_opt_media_type`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_opt_media_type(visitor, self)
    }

    #[inline]
    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            Some(inner) => <MediaType as VisitMutWith<V>>::visit_mut_with(inner, visitor),
            None => {}
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for Option<Namespace> {
    #[doc = "Calls [VisitMut`::visit_mut_opt_namespace`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_opt_namespace(visitor, self)
    }

    #[inline]
    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            Some(inner) => <Namespace as VisitMutWith<V>>::visit_mut_with(inner, visitor),
            None => {}
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for Option<NamespacePrefix> {
    #[doc = "Calls [VisitMut`::visit_mut_opt_namespace_prefix`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_opt_namespace_prefix(visitor, self)
    }

    #[inline]
    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            Some(inner) => <NamespacePrefix as VisitMutWith<V>>::visit_mut_with(inner, visitor),
            None => {}
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for Option<NestingSelector> {
    #[doc = "Calls [VisitMut`::visit_mut_opt_nesting_selector`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_opt_nesting_selector(visitor, self)
    }

    #[inline]
    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            Some(inner) => <NestingSelector as VisitMutWith<V>>::visit_mut_with(inner, visitor),
            None => {}
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for Option<Number> {
    #[doc = "Calls [VisitMut`::visit_mut_opt_number`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_opt_number(visitor, self)
    }

    #[inline]
    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            Some(inner) => <Number as VisitMutWith<V>>::visit_mut_with(inner, visitor),
            None => {}
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for Option<Vec<PageSelectorPseudo>> {
    #[doc = "Calls [VisitMut`::visit_mut_opt_page_selector_pseudos`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_opt_page_selector_pseudos(visitor, self)
    }

    #[inline]
    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            Some(inner) => {
                <Vec<PageSelectorPseudo> as VisitMutWith<V>>::visit_mut_with(inner, visitor)
            }
            None => {}
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for Option<PageSelectorType> {
    #[doc = "Calls [VisitMut`::visit_mut_opt_page_selector_type`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_opt_page_selector_type(visitor, self)
    }

    #[inline]
    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            Some(inner) => <PageSelectorType as VisitMutWith<V>>::visit_mut_with(inner, visitor),
            None => {}
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for Option<Vec<PseudoClassSelectorChildren>> {
    #[doc = "Calls [VisitMut`::visit_mut_opt_pseudo_class_selector_childrens`] with `self`. (Extra \
             impl)"]
    #[inline]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_opt_pseudo_class_selector_childrens(visitor, self)
    }

    #[inline]
    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            Some(inner) => <Vec<PseudoClassSelectorChildren> as VisitMutWith<V>>::visit_mut_with(
                inner, visitor,
            ),
            None => {}
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for Option<Vec<PseudoElementSelectorChildren>> {
    #[doc = "Calls [VisitMut`::visit_mut_opt_pseudo_element_selector_childrens`] with `self`. \
             (Extra impl)"]
    #[inline]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_opt_pseudo_element_selector_childrens(visitor, self)
    }

    #[inline]
    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            Some(inner) => <Vec<PseudoElementSelectorChildren> as VisitMutWith<V>>::visit_mut_with(
                inner, visitor,
            ),
            None => {}
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for Option<SimpleBlock> {
    #[doc = "Calls [VisitMut`::visit_mut_opt_simple_block`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_opt_simple_block(visitor, self)
    }

    #[inline]
    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            Some(inner) => <SimpleBlock as VisitMutWith<V>>::visit_mut_with(inner, visitor),
            None => {}
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for Option<Box<TypeSelector>> {
    #[doc = "Calls [VisitMut`::visit_mut_opt_type_selector`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_opt_type_selector(visitor, self)
    }

    #[inline]
    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            Some(inner) => <Box<TypeSelector> as VisitMutWith<V>>::visit_mut_with(inner, visitor),
            None => {}
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for Option<Vec<UrlModifier>> {
    #[doc = "Calls [VisitMut`::visit_mut_opt_url_modifiers`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_opt_url_modifiers(visitor, self)
    }

    #[inline]
    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            Some(inner) => <Vec<UrlModifier> as VisitMutWith<V>>::visit_mut_with(inner, visitor),
            None => {}
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for Option<Box<UrlValue>> {
    #[doc = "Calls [VisitMut`::visit_mut_opt_url_value`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_opt_url_value(visitor, self)
    }

    #[inline]
    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        match self {
            Some(inner) => <Box<UrlValue> as VisitMutWith<V>>::visit_mut_with(inner, visitor),
            None => {}
        }
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for Vec<PageSelectorPseudo> {
    #[doc = "Calls [VisitMut`::visit_mut_page_selector_pseudos`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_page_selector_pseudos(visitor, self)
    }

    #[inline]
    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        self.iter_mut()
            .for_each(|item| <PageSelectorPseudo as VisitMutWith<V>>::visit_mut_with(item, visitor))
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for Vec<PageSelector> {
    #[doc = "Calls [VisitMut`::visit_mut_page_selectors`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_page_selectors(visitor, self)
    }

    #[inline]
    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        self.iter_mut()
            .for_each(|item| <PageSelector as VisitMutWith<V>>::visit_mut_with(item, visitor))
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for Vec<PseudoClassSelectorChildren> {
    #[doc = "Calls [VisitMut`::visit_mut_pseudo_class_selector_childrens`] with `self`. (Extra \
             impl)"]
    #[inline]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_pseudo_class_selector_childrens(visitor, self)
    }

    #[inline]
    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        self.iter_mut().for_each(|item| {
            <PseudoClassSelectorChildren as VisitMutWith<V>>::visit_mut_with(item, visitor)
        })
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for Vec<PseudoElementSelectorChildren> {
    #[doc = "Calls [VisitMut`::visit_mut_pseudo_element_selector_childrens`] with `self`. (Extra \
             impl)"]
    #[inline]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_pseudo_element_selector_childrens(visitor, self)
    }

    #[inline]
    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        self.iter_mut().for_each(|item| {
            <PseudoElementSelectorChildren as VisitMutWith<V>>::visit_mut_with(item, visitor)
        })
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for Vec<RelativeSelector> {
    #[doc = "Calls [VisitMut`::visit_mut_relative_selectors`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_relative_selectors(visitor, self)
    }

    #[inline]
    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        self.iter_mut()
            .for_each(|item| <RelativeSelector as VisitMutWith<V>>::visit_mut_with(item, visitor))
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for Vec<Rule> {
    #[doc = "Calls [VisitMut`::visit_mut_rules`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_rules(visitor, self)
    }

    #[inline]
    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        self.iter_mut()
            .for_each(|item| <Rule as VisitMutWith<V>>::visit_mut_with(item, visitor))
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for swc_common::Span {
    #[doc = "Calls [VisitMut`::visit_mut_span`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_span(visitor, self)
    }

    #[inline]
    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        {}
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for Vec<SubclassSelector> {
    #[doc = "Calls [VisitMut`::visit_mut_subclass_selectors`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_subclass_selectors(visitor, self)
    }

    #[inline]
    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        self.iter_mut()
            .for_each(|item| <SubclassSelector as VisitMutWith<V>>::visit_mut_with(item, visitor))
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for Vec<SupportsConditionType> {
    #[doc = "Calls [VisitMut`::visit_mut_supports_condition_types`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_supports_condition_types(visitor, self)
    }

    #[inline]
    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        self.iter_mut().for_each(|item| {
            <SupportsConditionType as VisitMutWith<V>>::visit_mut_with(item, visitor)
        })
    }
}
impl<V: ?Sized + VisitMut> VisitMutWith<V> for Vec<UrlModifier> {
    #[doc = "Calls [VisitMut`::visit_mut_url_modifiers`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        <V as VisitMut>::visit_mut_url_modifiers(visitor, self)
    }

    #[inline]
    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        self.iter_mut()
            .for_each(|item| <UrlModifier as VisitMutWith<V>>::visit_mut_with(item, visitor))
    }
}
impl<V, T> VisitMutWith<V> for std::boxed::Box<T>
where
    V: ?Sized + VisitMut,
    T: VisitMutWith<V>,
{
    #[inline]
    fn visit_mut_with(&mut self, visitor: &mut V) {
        let v = <T as VisitMutWith<V>>::visit_mut_with(&mut **self, visitor);
        v
    }

    #[inline]
    fn visit_mut_children_with(&mut self, visitor: &mut V) {
        let v = <T as VisitMutWith<V>>::visit_mut_children_with(&mut **self, visitor);
        v
    }
}
#[doc = r" A visitor trait for traversing the AST."]
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
pub trait VisitMutAstPath {
    #[doc = "Visit a node of type `AbsoluteColorBase`.\n\nBy default, this method calls \
             [`AbsoluteColorBase::visit_mut_children_with_ast_path`]. If you want to recurse, you \
             need to call it manually."]
    #[inline]
    fn visit_mut_absolute_color_base(
        &mut self,
        node: &mut AbsoluteColorBase,
        __ast_path: &mut AstKindPath,
    ) {
        <AbsoluteColorBase as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `AlphaValue`.\n\nBy default, this method calls \
             [`AlphaValue::visit_mut_children_with_ast_path`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_mut_alpha_value(&mut self, node: &mut AlphaValue, __ast_path: &mut AstKindPath) {
        <AlphaValue as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `AnPlusB`.\n\nBy default, this method calls \
             [`AnPlusB::visit_mut_children_with_ast_path`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_mut_an_plus_b(&mut self, node: &mut AnPlusB, __ast_path: &mut AstKindPath) {
        <AnPlusB as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `AnPlusBNotation`.\n\nBy default, this method calls \
             [`AnPlusBNotation::visit_mut_children_with_ast_path`]. If you want to recurse, you \
             need to call it manually."]
    #[inline]
    fn visit_mut_an_plus_b_notation(
        &mut self,
        node: &mut AnPlusBNotation,
        __ast_path: &mut AstKindPath,
    ) {
        <AnPlusBNotation as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Angle`.\n\nBy default, this method calls \
             [`Angle::visit_mut_children_with_ast_path`]. If you want to recurse, you need to call \
             it manually."]
    #[inline]
    fn visit_mut_angle(&mut self, node: &mut Angle, __ast_path: &mut AstKindPath) {
        <Angle as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `AnglePercentage`.\n\nBy default, this method calls \
             [`AnglePercentage::visit_mut_children_with_ast_path`]. If you want to recurse, you \
             need to call it manually."]
    #[inline]
    fn visit_mut_angle_percentage(
        &mut self,
        node: &mut AnglePercentage,
        __ast_path: &mut AstKindPath,
    ) {
        <AnglePercentage as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `AnyNamespace`.\n\nBy default, this method calls \
             [`AnyNamespace::visit_mut_children_with_ast_path`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn visit_mut_any_namespace(&mut self, node: &mut AnyNamespace, __ast_path: &mut AstKindPath) {
        <AnyNamespace as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `AtRule`.\n\nBy default, this method calls \
             [`AtRule::visit_mut_children_with_ast_path`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_mut_at_rule(&mut self, node: &mut AtRule, __ast_path: &mut AstKindPath) {
        <AtRule as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `AtRuleName`.\n\nBy default, this method calls \
             [`AtRuleName::visit_mut_children_with_ast_path`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_mut_at_rule_name(&mut self, node: &mut AtRuleName, __ast_path: &mut AstKindPath) {
        <AtRuleName as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `AtRulePrelude`.\n\nBy default, this method calls \
             [`AtRulePrelude::visit_mut_children_with_ast_path`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn visit_mut_at_rule_prelude(
        &mut self,
        node: &mut AtRulePrelude,
        __ast_path: &mut AstKindPath,
    ) {
        <AtRulePrelude as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `swc_atoms :: Atom`.\n\nBy default, this method calls \
             [`swc_atoms :: Atom::visit_mut_children_with_ast_path`]. If you want to recurse, you \
             need to call it manually."]
    #[inline]
    fn visit_mut_atom(&mut self, node: &mut swc_atoms::Atom, __ast_path: &mut AstKindPath) {
        <swc_atoms::Atom as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `AttributeSelector`.\n\nBy default, this method calls \
             [`AttributeSelector::visit_mut_children_with_ast_path`]. If you want to recurse, you \
             need to call it manually."]
    #[inline]
    fn visit_mut_attribute_selector(
        &mut self,
        node: &mut AttributeSelector,
        __ast_path: &mut AstKindPath,
    ) {
        <AttributeSelector as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `AttributeSelectorMatcher`.\n\nBy default, this method calls \
             [`AttributeSelectorMatcher::visit_mut_children_with_ast_path`]. If you want to \
             recurse, you need to call it manually."]
    #[inline]
    fn visit_mut_attribute_selector_matcher(
        &mut self,
        node: &mut AttributeSelectorMatcher,
        __ast_path: &mut AstKindPath,
    ) {
        <AttributeSelectorMatcher as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `AttributeSelectorMatcherValue`.\n\nBy default, this method \
             calls [`AttributeSelectorMatcherValue::visit_mut_children_with_ast_path`]. If you \
             want to recurse, you need to call it manually."]
    #[inline]
    fn visit_mut_attribute_selector_matcher_value(
        &mut self,
        node: &mut AttributeSelectorMatcherValue,
        __ast_path: &mut AstKindPath,
    ) {
        < AttributeSelectorMatcherValue as VisitMutWithAstPath < Self > > :: visit_mut_children_with_ast_path (node , self , __ast_path)
    }
    #[doc = "Visit a node of type `AttributeSelectorModifier`.\n\nBy default, this method calls \
             [`AttributeSelectorModifier::visit_mut_children_with_ast_path`]. If you want to \
             recurse, you need to call it manually."]
    #[inline]
    fn visit_mut_attribute_selector_modifier(
        &mut self,
        node: &mut AttributeSelectorModifier,
        __ast_path: &mut AstKindPath,
    ) {
        <AttributeSelectorModifier as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `AttributeSelectorValue`.\n\nBy default, this method calls \
             [`AttributeSelectorValue::visit_mut_children_with_ast_path`]. If you want to recurse, \
             you need to call it manually."]
    #[inline]
    fn visit_mut_attribute_selector_value(
        &mut self,
        node: &mut AttributeSelectorValue,
        __ast_path: &mut AstKindPath,
    ) {
        <AttributeSelectorValue as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `BinOp`.\n\nBy default, this method calls \
             [`BinOp::visit_mut_children_with_ast_path`]. If you want to recurse, you need to call \
             it manually."]
    #[inline]
    fn visit_mut_bin_op(&mut self, node: &mut BinOp, __ast_path: &mut AstKindPath) {
        <BinOp as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `CalcOperator`.\n\nBy default, this method calls \
             [`CalcOperator::visit_mut_children_with_ast_path`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn visit_mut_calc_operator(&mut self, node: &mut CalcOperator, __ast_path: &mut AstKindPath) {
        <CalcOperator as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `CalcOperatorType`.\n\nBy default, this method calls \
             [`CalcOperatorType::visit_mut_children_with_ast_path`]. If you want to recurse, you \
             need to call it manually."]
    #[inline]
    fn visit_mut_calc_operator_type(
        &mut self,
        node: &mut CalcOperatorType,
        __ast_path: &mut AstKindPath,
    ) {
        <CalcOperatorType as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `CalcProduct`.\n\nBy default, this method calls \
             [`CalcProduct::visit_mut_children_with_ast_path`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn visit_mut_calc_product(&mut self, node: &mut CalcProduct, __ast_path: &mut AstKindPath) {
        <CalcProduct as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `CalcProductOrOperator`.\n\nBy default, this method calls \
             [`CalcProductOrOperator::visit_mut_children_with_ast_path`]. If you want to recurse, \
             you need to call it manually."]
    #[inline]
    fn visit_mut_calc_product_or_operator(
        &mut self,
        node: &mut CalcProductOrOperator,
        __ast_path: &mut AstKindPath,
    ) {
        <CalcProductOrOperator as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Vec < CalcProductOrOperator >`.\n\nBy default, this method \
             calls [`Vec < CalcProductOrOperator >::visit_mut_children_with_ast_path`]. If you \
             want to recurse, you need to call it manually."]
    #[inline]
    fn visit_mut_calc_product_or_operators(
        &mut self,
        node: &mut Vec<CalcProductOrOperator>,
        __ast_path: &mut AstKindPath,
    ) {
        <Vec<CalcProductOrOperator> as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `CalcSum`.\n\nBy default, this method calls \
             [`CalcSum::visit_mut_children_with_ast_path`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_mut_calc_sum(&mut self, node: &mut CalcSum, __ast_path: &mut AstKindPath) {
        <CalcSum as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `CalcValue`.\n\nBy default, this method calls \
             [`CalcValue::visit_mut_children_with_ast_path`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_mut_calc_value(&mut self, node: &mut CalcValue, __ast_path: &mut AstKindPath) {
        <CalcValue as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `CalcValueOrOperator`.\n\nBy default, this method calls \
             [`CalcValueOrOperator::visit_mut_children_with_ast_path`]. If you want to recurse, \
             you need to call it manually."]
    #[inline]
    fn visit_mut_calc_value_or_operator(
        &mut self,
        node: &mut CalcValueOrOperator,
        __ast_path: &mut AstKindPath,
    ) {
        <CalcValueOrOperator as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Vec < CalcValueOrOperator >`.\n\nBy default, this method calls \
             [`Vec < CalcValueOrOperator >::visit_mut_children_with_ast_path`]. If you want to \
             recurse, you need to call it manually."]
    #[inline]
    fn visit_mut_calc_value_or_operators(
        &mut self,
        node: &mut Vec<CalcValueOrOperator>,
        __ast_path: &mut AstKindPath,
    ) {
        <Vec<CalcValueOrOperator> as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `ClassSelector`.\n\nBy default, this method calls \
             [`ClassSelector::visit_mut_children_with_ast_path`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn visit_mut_class_selector(&mut self, node: &mut ClassSelector, __ast_path: &mut AstKindPath) {
        <ClassSelector as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `CmykComponent`.\n\nBy default, this method calls \
             [`CmykComponent::visit_mut_children_with_ast_path`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn visit_mut_cmyk_component(&mut self, node: &mut CmykComponent, __ast_path: &mut AstKindPath) {
        <CmykComponent as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Color`.\n\nBy default, this method calls \
             [`Color::visit_mut_children_with_ast_path`]. If you want to recurse, you need to call \
             it manually."]
    #[inline]
    fn visit_mut_color(&mut self, node: &mut Color, __ast_path: &mut AstKindPath) {
        <Color as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `ColorProfileName`.\n\nBy default, this method calls \
             [`ColorProfileName::visit_mut_children_with_ast_path`]. If you want to recurse, you \
             need to call it manually."]
    #[inline]
    fn visit_mut_color_profile_name(
        &mut self,
        node: &mut ColorProfileName,
        __ast_path: &mut AstKindPath,
    ) {
        <ColorProfileName as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Combinator`.\n\nBy default, this method calls \
             [`Combinator::visit_mut_children_with_ast_path`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_mut_combinator(&mut self, node: &mut Combinator, __ast_path: &mut AstKindPath) {
        <Combinator as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `CombinatorValue`.\n\nBy default, this method calls \
             [`CombinatorValue::visit_mut_children_with_ast_path`]. If you want to recurse, you \
             need to call it manually."]
    #[inline]
    fn visit_mut_combinator_value(
        &mut self,
        node: &mut CombinatorValue,
        __ast_path: &mut AstKindPath,
    ) {
        <CombinatorValue as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `ComplexSelector`.\n\nBy default, this method calls \
             [`ComplexSelector::visit_mut_children_with_ast_path`]. If you want to recurse, you \
             need to call it manually."]
    #[inline]
    fn visit_mut_complex_selector(
        &mut self,
        node: &mut ComplexSelector,
        __ast_path: &mut AstKindPath,
    ) {
        <ComplexSelector as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `ComplexSelectorChildren`.\n\nBy default, this method calls \
             [`ComplexSelectorChildren::visit_mut_children_with_ast_path`]. If you want to \
             recurse, you need to call it manually."]
    #[inline]
    fn visit_mut_complex_selector_children(
        &mut self,
        node: &mut ComplexSelectorChildren,
        __ast_path: &mut AstKindPath,
    ) {
        <ComplexSelectorChildren as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Vec < ComplexSelectorChildren >`.\n\nBy default, this method \
             calls [`Vec < ComplexSelectorChildren >::visit_mut_children_with_ast_path`]. If you \
             want to recurse, you need to call it manually."]
    #[inline]
    fn visit_mut_complex_selector_childrens(
        &mut self,
        node: &mut Vec<ComplexSelectorChildren>,
        __ast_path: &mut AstKindPath,
    ) {
        < Vec < ComplexSelectorChildren > as VisitMutWithAstPath < Self > > :: visit_mut_children_with_ast_path (node , self , __ast_path)
    }
    #[doc = "Visit a node of type `Vec < ComplexSelector >`.\n\nBy default, this method calls \
             [`Vec < ComplexSelector >::visit_mut_children_with_ast_path`]. If you want to \
             recurse, you need to call it manually."]
    #[inline]
    fn visit_mut_complex_selectors(
        &mut self,
        node: &mut Vec<ComplexSelector>,
        __ast_path: &mut AstKindPath,
    ) {
        <Vec<ComplexSelector> as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `ComponentValue`.\n\nBy default, this method calls \
             [`ComponentValue::visit_mut_children_with_ast_path`]. If you want to recurse, you \
             need to call it manually."]
    #[inline]
    fn visit_mut_component_value(
        &mut self,
        node: &mut ComponentValue,
        __ast_path: &mut AstKindPath,
    ) {
        <ComponentValue as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Vec < ComponentValue >`.\n\nBy default, this method calls [`Vec \
             < ComponentValue >::visit_mut_children_with_ast_path`]. If you want to recurse, you \
             need to call it manually."]
    #[inline]
    fn visit_mut_component_values(
        &mut self,
        node: &mut Vec<ComponentValue>,
        __ast_path: &mut AstKindPath,
    ) {
        <Vec<ComponentValue> as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `CompoundSelector`.\n\nBy default, this method calls \
             [`CompoundSelector::visit_mut_children_with_ast_path`]. If you want to recurse, you \
             need to call it manually."]
    #[inline]
    fn visit_mut_compound_selector(
        &mut self,
        node: &mut CompoundSelector,
        __ast_path: &mut AstKindPath,
    ) {
        <CompoundSelector as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `CompoundSelectorList`.\n\nBy default, this method calls \
             [`CompoundSelectorList::visit_mut_children_with_ast_path`]. If you want to recurse, \
             you need to call it manually."]
    #[inline]
    fn visit_mut_compound_selector_list(
        &mut self,
        node: &mut CompoundSelectorList,
        __ast_path: &mut AstKindPath,
    ) {
        <CompoundSelectorList as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Vec < CompoundSelector >`.\n\nBy default, this method calls \
             [`Vec < CompoundSelector >::visit_mut_children_with_ast_path`]. If you want to \
             recurse, you need to call it manually."]
    #[inline]
    fn visit_mut_compound_selectors(
        &mut self,
        node: &mut Vec<CompoundSelector>,
        __ast_path: &mut AstKindPath,
    ) {
        <Vec<CompoundSelector> as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `ContainerCondition`.\n\nBy default, this method calls \
             [`ContainerCondition::visit_mut_children_with_ast_path`]. If you want to recurse, you \
             need to call it manually."]
    #[inline]
    fn visit_mut_container_condition(
        &mut self,
        node: &mut ContainerCondition,
        __ast_path: &mut AstKindPath,
    ) {
        <ContainerCondition as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `ContainerName`.\n\nBy default, this method calls \
             [`ContainerName::visit_mut_children_with_ast_path`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn visit_mut_container_name(&mut self, node: &mut ContainerName, __ast_path: &mut AstKindPath) {
        <ContainerName as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `ContainerQuery`.\n\nBy default, this method calls \
             [`ContainerQuery::visit_mut_children_with_ast_path`]. If you want to recurse, you \
             need to call it manually."]
    #[inline]
    fn visit_mut_container_query(
        &mut self,
        node: &mut ContainerQuery,
        __ast_path: &mut AstKindPath,
    ) {
        <ContainerQuery as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `ContainerQueryAnd`.\n\nBy default, this method calls \
             [`ContainerQueryAnd::visit_mut_children_with_ast_path`]. If you want to recurse, you \
             need to call it manually."]
    #[inline]
    fn visit_mut_container_query_and(
        &mut self,
        node: &mut ContainerQueryAnd,
        __ast_path: &mut AstKindPath,
    ) {
        <ContainerQueryAnd as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `ContainerQueryNot`.\n\nBy default, this method calls \
             [`ContainerQueryNot::visit_mut_children_with_ast_path`]. If you want to recurse, you \
             need to call it manually."]
    #[inline]
    fn visit_mut_container_query_not(
        &mut self,
        node: &mut ContainerQueryNot,
        __ast_path: &mut AstKindPath,
    ) {
        <ContainerQueryNot as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `ContainerQueryOr`.\n\nBy default, this method calls \
             [`ContainerQueryOr::visit_mut_children_with_ast_path`]. If you want to recurse, you \
             need to call it manually."]
    #[inline]
    fn visit_mut_container_query_or(
        &mut self,
        node: &mut ContainerQueryOr,
        __ast_path: &mut AstKindPath,
    ) {
        <ContainerQueryOr as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `ContainerQueryType`.\n\nBy default, this method calls \
             [`ContainerQueryType::visit_mut_children_with_ast_path`]. If you want to recurse, you \
             need to call it manually."]
    #[inline]
    fn visit_mut_container_query_type(
        &mut self,
        node: &mut ContainerQueryType,
        __ast_path: &mut AstKindPath,
    ) {
        <ContainerQueryType as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Vec < ContainerQueryType >`.\n\nBy default, this method calls \
             [`Vec < ContainerQueryType >::visit_mut_children_with_ast_path`]. If you want to \
             recurse, you need to call it manually."]
    #[inline]
    fn visit_mut_container_query_types(
        &mut self,
        node: &mut Vec<ContainerQueryType>,
        __ast_path: &mut AstKindPath,
    ) {
        <Vec<ContainerQueryType> as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `CustomHighlightName`.\n\nBy default, this method calls \
             [`CustomHighlightName::visit_mut_children_with_ast_path`]. If you want to recurse, \
             you need to call it manually."]
    #[inline]
    fn visit_mut_custom_highlight_name(
        &mut self,
        node: &mut CustomHighlightName,
        __ast_path: &mut AstKindPath,
    ) {
        <CustomHighlightName as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `CustomIdent`.\n\nBy default, this method calls \
             [`CustomIdent::visit_mut_children_with_ast_path`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn visit_mut_custom_ident(&mut self, node: &mut CustomIdent, __ast_path: &mut AstKindPath) {
        <CustomIdent as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Vec < CustomIdent >`.\n\nBy default, this method calls [`Vec < \
             CustomIdent >::visit_mut_children_with_ast_path`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn visit_mut_custom_idents(
        &mut self,
        node: &mut Vec<CustomIdent>,
        __ast_path: &mut AstKindPath,
    ) {
        <Vec<CustomIdent> as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `CustomMediaQuery`.\n\nBy default, this method calls \
             [`CustomMediaQuery::visit_mut_children_with_ast_path`]. If you want to recurse, you \
             need to call it manually."]
    #[inline]
    fn visit_mut_custom_media_query(
        &mut self,
        node: &mut CustomMediaQuery,
        __ast_path: &mut AstKindPath,
    ) {
        <CustomMediaQuery as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `CustomMediaQueryMediaType`.\n\nBy default, this method calls \
             [`CustomMediaQueryMediaType::visit_mut_children_with_ast_path`]. If you want to \
             recurse, you need to call it manually."]
    #[inline]
    fn visit_mut_custom_media_query_media_type(
        &mut self,
        node: &mut CustomMediaQueryMediaType,
        __ast_path: &mut AstKindPath,
    ) {
        <CustomMediaQueryMediaType as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `CustomPropertyName`.\n\nBy default, this method calls \
             [`CustomPropertyName::visit_mut_children_with_ast_path`]. If you want to recurse, you \
             need to call it manually."]
    #[inline]
    fn visit_mut_custom_property_name(
        &mut self,
        node: &mut CustomPropertyName,
        __ast_path: &mut AstKindPath,
    ) {
        <CustomPropertyName as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `DashedIdent`.\n\nBy default, this method calls \
             [`DashedIdent::visit_mut_children_with_ast_path`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn visit_mut_dashed_ident(&mut self, node: &mut DashedIdent, __ast_path: &mut AstKindPath) {
        <DashedIdent as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Declaration`.\n\nBy default, this method calls \
             [`Declaration::visit_mut_children_with_ast_path`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn visit_mut_declaration(&mut self, node: &mut Declaration, __ast_path: &mut AstKindPath) {
        <Declaration as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `DeclarationName`.\n\nBy default, this method calls \
             [`DeclarationName::visit_mut_children_with_ast_path`]. If you want to recurse, you \
             need to call it manually."]
    #[inline]
    fn visit_mut_declaration_name(
        &mut self,
        node: &mut DeclarationName,
        __ast_path: &mut AstKindPath,
    ) {
        <DeclarationName as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `DeclarationOrAtRule`.\n\nBy default, this method calls \
             [`DeclarationOrAtRule::visit_mut_children_with_ast_path`]. If you want to recurse, \
             you need to call it manually."]
    #[inline]
    fn visit_mut_declaration_or_at_rule(
        &mut self,
        node: &mut DeclarationOrAtRule,
        __ast_path: &mut AstKindPath,
    ) {
        <DeclarationOrAtRule as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Delimiter`.\n\nBy default, this method calls \
             [`Delimiter::visit_mut_children_with_ast_path`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_mut_delimiter(&mut self, node: &mut Delimiter, __ast_path: &mut AstKindPath) {
        <Delimiter as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `DelimiterValue`.\n\nBy default, this method calls \
             [`DelimiterValue::visit_mut_children_with_ast_path`]. If you want to recurse, you \
             need to call it manually."]
    #[inline]
    fn visit_mut_delimiter_value(
        &mut self,
        node: &mut DelimiterValue,
        __ast_path: &mut AstKindPath,
    ) {
        <DelimiterValue as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Dimension`.\n\nBy default, this method calls \
             [`Dimension::visit_mut_children_with_ast_path`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_mut_dimension(&mut self, node: &mut Dimension, __ast_path: &mut AstKindPath) {
        <Dimension as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `DimensionToken`.\n\nBy default, this method calls \
             [`DimensionToken::visit_mut_children_with_ast_path`]. If you want to recurse, you \
             need to call it manually."]
    #[inline]
    fn visit_mut_dimension_token(
        &mut self,
        node: &mut DimensionToken,
        __ast_path: &mut AstKindPath,
    ) {
        <DimensionToken as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `DocumentPrelude`.\n\nBy default, this method calls \
             [`DocumentPrelude::visit_mut_children_with_ast_path`]. If you want to recurse, you \
             need to call it manually."]
    #[inline]
    fn visit_mut_document_prelude(
        &mut self,
        node: &mut DocumentPrelude,
        __ast_path: &mut AstKindPath,
    ) {
        <DocumentPrelude as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `DocumentPreludeMatchingFunction`.\n\nBy default, this method \
             calls [`DocumentPreludeMatchingFunction::visit_mut_children_with_ast_path`]. If you \
             want to recurse, you need to call it manually."]
    #[inline]
    fn visit_mut_document_prelude_matching_function(
        &mut self,
        node: &mut DocumentPreludeMatchingFunction,
        __ast_path: &mut AstKindPath,
    ) {
        < DocumentPreludeMatchingFunction as VisitMutWithAstPath < Self > > :: visit_mut_children_with_ast_path (node , self , __ast_path)
    }
    #[doc = "Visit a node of type `Vec < DocumentPreludeMatchingFunction >`.\n\nBy default, this \
             method calls [`Vec < DocumentPreludeMatchingFunction \
             >::visit_mut_children_with_ast_path`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_mut_document_prelude_matching_functions(
        &mut self,
        node: &mut Vec<DocumentPreludeMatchingFunction>,
        __ast_path: &mut AstKindPath,
    ) {
        < Vec < DocumentPreludeMatchingFunction > as VisitMutWithAstPath < Self > > :: visit_mut_children_with_ast_path (node , self , __ast_path)
    }
    #[doc = "Visit a node of type `ExtensionName`.\n\nBy default, this method calls \
             [`ExtensionName::visit_mut_children_with_ast_path`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn visit_mut_extension_name(&mut self, node: &mut ExtensionName, __ast_path: &mut AstKindPath) {
        <ExtensionName as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `FamilyName`.\n\nBy default, this method calls \
             [`FamilyName::visit_mut_children_with_ast_path`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_mut_family_name(&mut self, node: &mut FamilyName, __ast_path: &mut AstKindPath) {
        <FamilyName as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Vec < FamilyName >`.\n\nBy default, this method calls [`Vec < \
             FamilyName >::visit_mut_children_with_ast_path`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_mut_family_names(&mut self, node: &mut Vec<FamilyName>, __ast_path: &mut AstKindPath) {
        <Vec<FamilyName> as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Flex`.\n\nBy default, this method calls \
             [`Flex::visit_mut_children_with_ast_path`]. If you want to recurse, you need to call \
             it manually."]
    #[inline]
    fn visit_mut_flex(&mut self, node: &mut Flex, __ast_path: &mut AstKindPath) {
        <Flex as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `FontFeatureValuesPrelude`.\n\nBy default, this method calls \
             [`FontFeatureValuesPrelude::visit_mut_children_with_ast_path`]. If you want to \
             recurse, you need to call it manually."]
    #[inline]
    fn visit_mut_font_feature_values_prelude(
        &mut self,
        node: &mut FontFeatureValuesPrelude,
        __ast_path: &mut AstKindPath,
    ) {
        <FontFeatureValuesPrelude as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `ForgivingComplexSelector`.\n\nBy default, this method calls \
             [`ForgivingComplexSelector::visit_mut_children_with_ast_path`]. If you want to \
             recurse, you need to call it manually."]
    #[inline]
    fn visit_mut_forgiving_complex_selector(
        &mut self,
        node: &mut ForgivingComplexSelector,
        __ast_path: &mut AstKindPath,
    ) {
        <ForgivingComplexSelector as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Vec < ForgivingComplexSelector >`.\n\nBy default, this method \
             calls [`Vec < ForgivingComplexSelector >::visit_mut_children_with_ast_path`]. If you \
             want to recurse, you need to call it manually."]
    #[inline]
    fn visit_mut_forgiving_complex_selectors(
        &mut self,
        node: &mut Vec<ForgivingComplexSelector>,
        __ast_path: &mut AstKindPath,
    ) {
        < Vec < ForgivingComplexSelector > as VisitMutWithAstPath < Self > > :: visit_mut_children_with_ast_path (node , self , __ast_path)
    }
    #[doc = "Visit a node of type `ForgivingRelativeSelector`.\n\nBy default, this method calls \
             [`ForgivingRelativeSelector::visit_mut_children_with_ast_path`]. If you want to \
             recurse, you need to call it manually."]
    #[inline]
    fn visit_mut_forgiving_relative_selector(
        &mut self,
        node: &mut ForgivingRelativeSelector,
        __ast_path: &mut AstKindPath,
    ) {
        <ForgivingRelativeSelector as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `ForgivingRelativeSelectorList`.\n\nBy default, this method \
             calls [`ForgivingRelativeSelectorList::visit_mut_children_with_ast_path`]. If you \
             want to recurse, you need to call it manually."]
    #[inline]
    fn visit_mut_forgiving_relative_selector_list(
        &mut self,
        node: &mut ForgivingRelativeSelectorList,
        __ast_path: &mut AstKindPath,
    ) {
        < ForgivingRelativeSelectorList as VisitMutWithAstPath < Self > > :: visit_mut_children_with_ast_path (node , self , __ast_path)
    }
    #[doc = "Visit a node of type `Vec < ForgivingRelativeSelector >`.\n\nBy default, this method \
             calls [`Vec < ForgivingRelativeSelector >::visit_mut_children_with_ast_path`]. If you \
             want to recurse, you need to call it manually."]
    #[inline]
    fn visit_mut_forgiving_relative_selectors(
        &mut self,
        node: &mut Vec<ForgivingRelativeSelector>,
        __ast_path: &mut AstKindPath,
    ) {
        < Vec < ForgivingRelativeSelector > as VisitMutWithAstPath < Self > > :: visit_mut_children_with_ast_path (node , self , __ast_path)
    }
    #[doc = "Visit a node of type `ForgivingSelectorList`.\n\nBy default, this method calls \
             [`ForgivingSelectorList::visit_mut_children_with_ast_path`]. If you want to recurse, \
             you need to call it manually."]
    #[inline]
    fn visit_mut_forgiving_selector_list(
        &mut self,
        node: &mut ForgivingSelectorList,
        __ast_path: &mut AstKindPath,
    ) {
        <ForgivingSelectorList as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Frequency`.\n\nBy default, this method calls \
             [`Frequency::visit_mut_children_with_ast_path`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_mut_frequency(&mut self, node: &mut Frequency, __ast_path: &mut AstKindPath) {
        <Frequency as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `FrequencyPercentage`.\n\nBy default, this method calls \
             [`FrequencyPercentage::visit_mut_children_with_ast_path`]. If you want to recurse, \
             you need to call it manually."]
    #[inline]
    fn visit_mut_frequency_percentage(
        &mut self,
        node: &mut FrequencyPercentage,
        __ast_path: &mut AstKindPath,
    ) {
        <FrequencyPercentage as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Function`.\n\nBy default, this method calls \
             [`Function::visit_mut_children_with_ast_path`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_mut_function(&mut self, node: &mut Function, __ast_path: &mut AstKindPath) {
        <Function as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `FunctionName`.\n\nBy default, this method calls \
             [`FunctionName::visit_mut_children_with_ast_path`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn visit_mut_function_name(&mut self, node: &mut FunctionName, __ast_path: &mut AstKindPath) {
        <FunctionName as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `GeneralEnclosed`.\n\nBy default, this method calls \
             [`GeneralEnclosed::visit_mut_children_with_ast_path`]. If you want to recurse, you \
             need to call it manually."]
    #[inline]
    fn visit_mut_general_enclosed(
        &mut self,
        node: &mut GeneralEnclosed,
        __ast_path: &mut AstKindPath,
    ) {
        <GeneralEnclosed as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `HexColor`.\n\nBy default, this method calls \
             [`HexColor::visit_mut_children_with_ast_path`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_mut_hex_color(&mut self, node: &mut HexColor, __ast_path: &mut AstKindPath) {
        <HexColor as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Hue`.\n\nBy default, this method calls \
             [`Hue::visit_mut_children_with_ast_path`]. If you want to recurse, you need to call \
             it manually."]
    #[inline]
    fn visit_mut_hue(&mut self, node: &mut Hue, __ast_path: &mut AstKindPath) {
        <Hue as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(node, self, __ast_path)
    }
    #[doc = "Visit a node of type `IdSelector`.\n\nBy default, this method calls \
             [`IdSelector::visit_mut_children_with_ast_path`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_mut_id_selector(&mut self, node: &mut IdSelector, __ast_path: &mut AstKindPath) {
        <IdSelector as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Ident`.\n\nBy default, this method calls \
             [`Ident::visit_mut_children_with_ast_path`]. If you want to recurse, you need to call \
             it manually."]
    #[inline]
    fn visit_mut_ident(&mut self, node: &mut Ident, __ast_path: &mut AstKindPath) {
        <Ident as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Vec < Ident >`.\n\nBy default, this method calls [`Vec < Ident \
             >::visit_mut_children_with_ast_path`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_mut_idents(&mut self, node: &mut Vec<Ident>, __ast_path: &mut AstKindPath) {
        <Vec<Ident> as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `ImportConditions`.\n\nBy default, this method calls \
             [`ImportConditions::visit_mut_children_with_ast_path`]. If you want to recurse, you \
             need to call it manually."]
    #[inline]
    fn visit_mut_import_conditions(
        &mut self,
        node: &mut ImportConditions,
        __ast_path: &mut AstKindPath,
    ) {
        <ImportConditions as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `ImportHref`.\n\nBy default, this method calls \
             [`ImportHref::visit_mut_children_with_ast_path`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_mut_import_href(&mut self, node: &mut ImportHref, __ast_path: &mut AstKindPath) {
        <ImportHref as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `ImportLayerName`.\n\nBy default, this method calls \
             [`ImportLayerName::visit_mut_children_with_ast_path`]. If you want to recurse, you \
             need to call it manually."]
    #[inline]
    fn visit_mut_import_layer_name(
        &mut self,
        node: &mut ImportLayerName,
        __ast_path: &mut AstKindPath,
    ) {
        <ImportLayerName as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `ImportPrelude`.\n\nBy default, this method calls \
             [`ImportPrelude::visit_mut_children_with_ast_path`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn visit_mut_import_prelude(&mut self, node: &mut ImportPrelude, __ast_path: &mut AstKindPath) {
        <ImportPrelude as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `ImportantFlag`.\n\nBy default, this method calls \
             [`ImportantFlag::visit_mut_children_with_ast_path`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn visit_mut_important_flag(&mut self, node: &mut ImportantFlag, __ast_path: &mut AstKindPath) {
        <ImportantFlag as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Integer`.\n\nBy default, this method calls \
             [`Integer::visit_mut_children_with_ast_path`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_mut_integer(&mut self, node: &mut Integer, __ast_path: &mut AstKindPath) {
        <Integer as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `KeyframeBlock`.\n\nBy default, this method calls \
             [`KeyframeBlock::visit_mut_children_with_ast_path`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn visit_mut_keyframe_block(&mut self, node: &mut KeyframeBlock, __ast_path: &mut AstKindPath) {
        <KeyframeBlock as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `KeyframeSelector`.\n\nBy default, this method calls \
             [`KeyframeSelector::visit_mut_children_with_ast_path`]. If you want to recurse, you \
             need to call it manually."]
    #[inline]
    fn visit_mut_keyframe_selector(
        &mut self,
        node: &mut KeyframeSelector,
        __ast_path: &mut AstKindPath,
    ) {
        <KeyframeSelector as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Vec < KeyframeSelector >`.\n\nBy default, this method calls \
             [`Vec < KeyframeSelector >::visit_mut_children_with_ast_path`]. If you want to \
             recurse, you need to call it manually."]
    #[inline]
    fn visit_mut_keyframe_selectors(
        &mut self,
        node: &mut Vec<KeyframeSelector>,
        __ast_path: &mut AstKindPath,
    ) {
        <Vec<KeyframeSelector> as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `KeyframesName`.\n\nBy default, this method calls \
             [`KeyframesName::visit_mut_children_with_ast_path`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn visit_mut_keyframes_name(&mut self, node: &mut KeyframesName, __ast_path: &mut AstKindPath) {
        <KeyframesName as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `KeyframesPseudoFunction`.\n\nBy default, this method calls \
             [`KeyframesPseudoFunction::visit_mut_children_with_ast_path`]. If you want to \
             recurse, you need to call it manually."]
    #[inline]
    fn visit_mut_keyframes_pseudo_function(
        &mut self,
        node: &mut KeyframesPseudoFunction,
        __ast_path: &mut AstKindPath,
    ) {
        <KeyframesPseudoFunction as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `KeyframesPseudoPrefix`.\n\nBy default, this method calls \
             [`KeyframesPseudoPrefix::visit_mut_children_with_ast_path`]. If you want to recurse, \
             you need to call it manually."]
    #[inline]
    fn visit_mut_keyframes_pseudo_prefix(
        &mut self,
        node: &mut KeyframesPseudoPrefix,
        __ast_path: &mut AstKindPath,
    ) {
        <KeyframesPseudoPrefix as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `LayerName`.\n\nBy default, this method calls \
             [`LayerName::visit_mut_children_with_ast_path`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_mut_layer_name(&mut self, node: &mut LayerName, __ast_path: &mut AstKindPath) {
        <LayerName as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `LayerNameList`.\n\nBy default, this method calls \
             [`LayerNameList::visit_mut_children_with_ast_path`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn visit_mut_layer_name_list(
        &mut self,
        node: &mut LayerNameList,
        __ast_path: &mut AstKindPath,
    ) {
        <LayerNameList as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Vec < LayerName >`.\n\nBy default, this method calls [`Vec < \
             LayerName >::visit_mut_children_with_ast_path`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_mut_layer_names(&mut self, node: &mut Vec<LayerName>, __ast_path: &mut AstKindPath) {
        <Vec<LayerName> as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `LayerPrelude`.\n\nBy default, this method calls \
             [`LayerPrelude::visit_mut_children_with_ast_path`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn visit_mut_layer_prelude(&mut self, node: &mut LayerPrelude, __ast_path: &mut AstKindPath) {
        <LayerPrelude as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Length`.\n\nBy default, this method calls \
             [`Length::visit_mut_children_with_ast_path`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_mut_length(&mut self, node: &mut Length, __ast_path: &mut AstKindPath) {
        <Length as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `LengthPercentage`.\n\nBy default, this method calls \
             [`LengthPercentage::visit_mut_children_with_ast_path`]. If you want to recurse, you \
             need to call it manually."]
    #[inline]
    fn visit_mut_length_percentage(
        &mut self,
        node: &mut LengthPercentage,
        __ast_path: &mut AstKindPath,
    ) {
        <LengthPercentage as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `ListOfComponentValues`.\n\nBy default, this method calls \
             [`ListOfComponentValues::visit_mut_children_with_ast_path`]. If you want to recurse, \
             you need to call it manually."]
    #[inline]
    fn visit_mut_list_of_component_values(
        &mut self,
        node: &mut ListOfComponentValues,
        __ast_path: &mut AstKindPath,
    ) {
        <ListOfComponentValues as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `MediaAnd`.\n\nBy default, this method calls \
             [`MediaAnd::visit_mut_children_with_ast_path`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_mut_media_and(&mut self, node: &mut MediaAnd, __ast_path: &mut AstKindPath) {
        <MediaAnd as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `MediaCondition`.\n\nBy default, this method calls \
             [`MediaCondition::visit_mut_children_with_ast_path`]. If you want to recurse, you \
             need to call it manually."]
    #[inline]
    fn visit_mut_media_condition(
        &mut self,
        node: &mut MediaCondition,
        __ast_path: &mut AstKindPath,
    ) {
        <MediaCondition as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `MediaConditionAllType`.\n\nBy default, this method calls \
             [`MediaConditionAllType::visit_mut_children_with_ast_path`]. If you want to recurse, \
             you need to call it manually."]
    #[inline]
    fn visit_mut_media_condition_all_type(
        &mut self,
        node: &mut MediaConditionAllType,
        __ast_path: &mut AstKindPath,
    ) {
        <MediaConditionAllType as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Vec < MediaConditionAllType >`.\n\nBy default, this method \
             calls [`Vec < MediaConditionAllType >::visit_mut_children_with_ast_path`]. If you \
             want to recurse, you need to call it manually."]
    #[inline]
    fn visit_mut_media_condition_all_types(
        &mut self,
        node: &mut Vec<MediaConditionAllType>,
        __ast_path: &mut AstKindPath,
    ) {
        <Vec<MediaConditionAllType> as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `MediaConditionType`.\n\nBy default, this method calls \
             [`MediaConditionType::visit_mut_children_with_ast_path`]. If you want to recurse, you \
             need to call it manually."]
    #[inline]
    fn visit_mut_media_condition_type(
        &mut self,
        node: &mut MediaConditionType,
        __ast_path: &mut AstKindPath,
    ) {
        <MediaConditionType as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `MediaConditionWithoutOr`.\n\nBy default, this method calls \
             [`MediaConditionWithoutOr::visit_mut_children_with_ast_path`]. If you want to \
             recurse, you need to call it manually."]
    #[inline]
    fn visit_mut_media_condition_without_or(
        &mut self,
        node: &mut MediaConditionWithoutOr,
        __ast_path: &mut AstKindPath,
    ) {
        <MediaConditionWithoutOr as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `MediaConditionWithoutOrType`.\n\nBy default, this method calls \
             [`MediaConditionWithoutOrType::visit_mut_children_with_ast_path`]. If you want to \
             recurse, you need to call it manually."]
    #[inline]
    fn visit_mut_media_condition_without_or_type(
        &mut self,
        node: &mut MediaConditionWithoutOrType,
        __ast_path: &mut AstKindPath,
    ) {
        <MediaConditionWithoutOrType as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Vec < MediaConditionWithoutOrType >`.\n\nBy default, this \
             method calls [`Vec < MediaConditionWithoutOrType \
             >::visit_mut_children_with_ast_path`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_mut_media_condition_without_or_types(
        &mut self,
        node: &mut Vec<MediaConditionWithoutOrType>,
        __ast_path: &mut AstKindPath,
    ) {
        < Vec < MediaConditionWithoutOrType > as VisitMutWithAstPath < Self > > :: visit_mut_children_with_ast_path (node , self , __ast_path)
    }
    #[doc = "Visit a node of type `MediaFeature`.\n\nBy default, this method calls \
             [`MediaFeature::visit_mut_children_with_ast_path`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn visit_mut_media_feature(&mut self, node: &mut MediaFeature, __ast_path: &mut AstKindPath) {
        <MediaFeature as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `MediaFeatureBoolean`.\n\nBy default, this method calls \
             [`MediaFeatureBoolean::visit_mut_children_with_ast_path`]. If you want to recurse, \
             you need to call it manually."]
    #[inline]
    fn visit_mut_media_feature_boolean(
        &mut self,
        node: &mut MediaFeatureBoolean,
        __ast_path: &mut AstKindPath,
    ) {
        <MediaFeatureBoolean as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `MediaFeatureName`.\n\nBy default, this method calls \
             [`MediaFeatureName::visit_mut_children_with_ast_path`]. If you want to recurse, you \
             need to call it manually."]
    #[inline]
    fn visit_mut_media_feature_name(
        &mut self,
        node: &mut MediaFeatureName,
        __ast_path: &mut AstKindPath,
    ) {
        <MediaFeatureName as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `MediaFeaturePlain`.\n\nBy default, this method calls \
             [`MediaFeaturePlain::visit_mut_children_with_ast_path`]. If you want to recurse, you \
             need to call it manually."]
    #[inline]
    fn visit_mut_media_feature_plain(
        &mut self,
        node: &mut MediaFeaturePlain,
        __ast_path: &mut AstKindPath,
    ) {
        <MediaFeaturePlain as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `MediaFeatureRange`.\n\nBy default, this method calls \
             [`MediaFeatureRange::visit_mut_children_with_ast_path`]. If you want to recurse, you \
             need to call it manually."]
    #[inline]
    fn visit_mut_media_feature_range(
        &mut self,
        node: &mut MediaFeatureRange,
        __ast_path: &mut AstKindPath,
    ) {
        <MediaFeatureRange as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `MediaFeatureRangeComparison`.\n\nBy default, this method calls \
             [`MediaFeatureRangeComparison::visit_mut_children_with_ast_path`]. If you want to \
             recurse, you need to call it manually."]
    #[inline]
    fn visit_mut_media_feature_range_comparison(
        &mut self,
        node: &mut MediaFeatureRangeComparison,
        __ast_path: &mut AstKindPath,
    ) {
        <MediaFeatureRangeComparison as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `MediaFeatureRangeInterval`.\n\nBy default, this method calls \
             [`MediaFeatureRangeInterval::visit_mut_children_with_ast_path`]. If you want to \
             recurse, you need to call it manually."]
    #[inline]
    fn visit_mut_media_feature_range_interval(
        &mut self,
        node: &mut MediaFeatureRangeInterval,
        __ast_path: &mut AstKindPath,
    ) {
        <MediaFeatureRangeInterval as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `MediaFeatureValue`.\n\nBy default, this method calls \
             [`MediaFeatureValue::visit_mut_children_with_ast_path`]. If you want to recurse, you \
             need to call it manually."]
    #[inline]
    fn visit_mut_media_feature_value(
        &mut self,
        node: &mut MediaFeatureValue,
        __ast_path: &mut AstKindPath,
    ) {
        <MediaFeatureValue as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `MediaInParens`.\n\nBy default, this method calls \
             [`MediaInParens::visit_mut_children_with_ast_path`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn visit_mut_media_in_parens(
        &mut self,
        node: &mut MediaInParens,
        __ast_path: &mut AstKindPath,
    ) {
        <MediaInParens as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `MediaNot`.\n\nBy default, this method calls \
             [`MediaNot::visit_mut_children_with_ast_path`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_mut_media_not(&mut self, node: &mut MediaNot, __ast_path: &mut AstKindPath) {
        <MediaNot as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `MediaOr`.\n\nBy default, this method calls \
             [`MediaOr::visit_mut_children_with_ast_path`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_mut_media_or(&mut self, node: &mut MediaOr, __ast_path: &mut AstKindPath) {
        <MediaOr as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `MediaQuery`.\n\nBy default, this method calls \
             [`MediaQuery::visit_mut_children_with_ast_path`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_mut_media_query(&mut self, node: &mut MediaQuery, __ast_path: &mut AstKindPath) {
        <MediaQuery as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `MediaQueryList`.\n\nBy default, this method calls \
             [`MediaQueryList::visit_mut_children_with_ast_path`]. If you want to recurse, you \
             need to call it manually."]
    #[inline]
    fn visit_mut_media_query_list(
        &mut self,
        node: &mut MediaQueryList,
        __ast_path: &mut AstKindPath,
    ) {
        <MediaQueryList as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Vec < MediaQuery >`.\n\nBy default, this method calls [`Vec < \
             MediaQuery >::visit_mut_children_with_ast_path`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_mut_media_querys(&mut self, node: &mut Vec<MediaQuery>, __ast_path: &mut AstKindPath) {
        <Vec<MediaQuery> as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `MediaType`.\n\nBy default, this method calls \
             [`MediaType::visit_mut_children_with_ast_path`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_mut_media_type(&mut self, node: &mut MediaType, __ast_path: &mut AstKindPath) {
        <MediaType as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `NamedNamespace`.\n\nBy default, this method calls \
             [`NamedNamespace::visit_mut_children_with_ast_path`]. If you want to recurse, you \
             need to call it manually."]
    #[inline]
    fn visit_mut_named_namespace(
        &mut self,
        node: &mut NamedNamespace,
        __ast_path: &mut AstKindPath,
    ) {
        <NamedNamespace as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Namespace`.\n\nBy default, this method calls \
             [`Namespace::visit_mut_children_with_ast_path`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_mut_namespace(&mut self, node: &mut Namespace, __ast_path: &mut AstKindPath) {
        <Namespace as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `NamespacePrefix`.\n\nBy default, this method calls \
             [`NamespacePrefix::visit_mut_children_with_ast_path`]. If you want to recurse, you \
             need to call it manually."]
    #[inline]
    fn visit_mut_namespace_prefix(
        &mut self,
        node: &mut NamespacePrefix,
        __ast_path: &mut AstKindPath,
    ) {
        <NamespacePrefix as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `NamespacePrelude`.\n\nBy default, this method calls \
             [`NamespacePrelude::visit_mut_children_with_ast_path`]. If you want to recurse, you \
             need to call it manually."]
    #[inline]
    fn visit_mut_namespace_prelude(
        &mut self,
        node: &mut NamespacePrelude,
        __ast_path: &mut AstKindPath,
    ) {
        <NamespacePrelude as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `NamespacePreludeUri`.\n\nBy default, this method calls \
             [`NamespacePreludeUri::visit_mut_children_with_ast_path`]. If you want to recurse, \
             you need to call it manually."]
    #[inline]
    fn visit_mut_namespace_prelude_uri(
        &mut self,
        node: &mut NamespacePreludeUri,
        __ast_path: &mut AstKindPath,
    ) {
        <NamespacePreludeUri as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `NestingSelector`.\n\nBy default, this method calls \
             [`NestingSelector::visit_mut_children_with_ast_path`]. If you want to recurse, you \
             need to call it manually."]
    #[inline]
    fn visit_mut_nesting_selector(
        &mut self,
        node: &mut NestingSelector,
        __ast_path: &mut AstKindPath,
    ) {
        <NestingSelector as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Number`.\n\nBy default, this method calls \
             [`Number::visit_mut_children_with_ast_path`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_mut_number(&mut self, node: &mut Number, __ast_path: &mut AstKindPath) {
        <Number as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `NumberType`.\n\nBy default, this method calls \
             [`NumberType::visit_mut_children_with_ast_path`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_mut_number_type(&mut self, node: &mut NumberType, __ast_path: &mut AstKindPath) {
        <NumberType as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Option < Box < AtRulePrelude > >`.\n\nBy default, this method \
             calls [`Option < Box < AtRulePrelude > >::visit_mut_children_with_ast_path`]. If you \
             want to recurse, you need to call it manually."]
    #[inline]
    fn visit_mut_opt_at_rule_prelude(
        &mut self,
        node: &mut Option<Box<AtRulePrelude>>,
        __ast_path: &mut AstKindPath,
    ) {
        <Option<Box<AtRulePrelude>> as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Option < swc_atoms :: Atom >`.\n\nBy default, this method calls \
             [`Option < swc_atoms :: Atom >::visit_mut_children_with_ast_path`]. If you want to \
             recurse, you need to call it manually."]
    #[inline]
    fn visit_mut_opt_atom(
        &mut self,
        node: &mut Option<swc_atoms::Atom>,
        __ast_path: &mut AstKindPath,
    ) {
        <Option<swc_atoms::Atom> as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Option < AttributeSelectorMatcher >`.\n\nBy default, this \
             method calls [`Option < AttributeSelectorMatcher \
             >::visit_mut_children_with_ast_path`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_mut_opt_attribute_selector_matcher(
        &mut self,
        node: &mut Option<AttributeSelectorMatcher>,
        __ast_path: &mut AstKindPath,
    ) {
        < Option < AttributeSelectorMatcher > as VisitMutWithAstPath < Self > > :: visit_mut_children_with_ast_path (node , self , __ast_path)
    }
    #[doc = "Visit a node of type `Option < AttributeSelectorModifier >`.\n\nBy default, this \
             method calls [`Option < AttributeSelectorModifier \
             >::visit_mut_children_with_ast_path`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_mut_opt_attribute_selector_modifier(
        &mut self,
        node: &mut Option<AttributeSelectorModifier>,
        __ast_path: &mut AstKindPath,
    ) {
        < Option < AttributeSelectorModifier > as VisitMutWithAstPath < Self > > :: visit_mut_children_with_ast_path (node , self , __ast_path)
    }
    #[doc = "Visit a node of type `Option < AttributeSelectorValue >`.\n\nBy default, this method \
             calls [`Option < AttributeSelectorValue >::visit_mut_children_with_ast_path`]. If you \
             want to recurse, you need to call it manually."]
    #[inline]
    fn visit_mut_opt_attribute_selector_value(
        &mut self,
        node: &mut Option<AttributeSelectorValue>,
        __ast_path: &mut AstKindPath,
    ) {
        < Option < AttributeSelectorValue > as VisitMutWithAstPath < Self > > :: visit_mut_children_with_ast_path (node , self , __ast_path)
    }
    #[doc = "Visit a node of type `Option < Combinator >`.\n\nBy default, this method calls \
             [`Option < Combinator >::visit_mut_children_with_ast_path`]. If you want to recurse, \
             you need to call it manually."]
    #[inline]
    fn visit_mut_opt_combinator(
        &mut self,
        node: &mut Option<Combinator>,
        __ast_path: &mut AstKindPath,
    ) {
        <Option<Combinator> as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Option < ContainerName >`.\n\nBy default, this method calls \
             [`Option < ContainerName >::visit_mut_children_with_ast_path`]. If you want to \
             recurse, you need to call it manually."]
    #[inline]
    fn visit_mut_opt_container_name(
        &mut self,
        node: &mut Option<ContainerName>,
        __ast_path: &mut AstKindPath,
    ) {
        <Option<ContainerName> as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Option < ForgivingSelectorList >`.\n\nBy default, this method \
             calls [`Option < ForgivingSelectorList >::visit_mut_children_with_ast_path`]. If you \
             want to recurse, you need to call it manually."]
    #[inline]
    fn visit_mut_opt_forgiving_selector_list(
        &mut self,
        node: &mut Option<ForgivingSelectorList>,
        __ast_path: &mut AstKindPath,
    ) {
        < Option < ForgivingSelectorList > as VisitMutWithAstPath < Self > > :: visit_mut_children_with_ast_path (node , self , __ast_path)
    }
    #[doc = "Visit a node of type `Option < Box < Function > >`.\n\nBy default, this method calls \
             [`Option < Box < Function > >::visit_mut_children_with_ast_path`]. If you want to \
             recurse, you need to call it manually."]
    #[inline]
    fn visit_mut_opt_function(
        &mut self,
        node: &mut Option<Box<Function>>,
        __ast_path: &mut AstKindPath,
    ) {
        <Option<Box<Function>> as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Option < Ident >`.\n\nBy default, this method calls [`Option < \
             Ident >::visit_mut_children_with_ast_path`]. If you want to recurse, you need to call \
             it manually."]
    #[inline]
    fn visit_mut_opt_ident(&mut self, node: &mut Option<Ident>, __ast_path: &mut AstKindPath) {
        <Option<Ident> as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Option < Box < ImportConditions > >`.\n\nBy default, this \
             method calls [`Option < Box < ImportConditions > \
             >::visit_mut_children_with_ast_path`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_mut_opt_import_conditions(
        &mut self,
        node: &mut Option<Box<ImportConditions>>,
        __ast_path: &mut AstKindPath,
    ) {
        < Option < Box < ImportConditions > > as VisitMutWithAstPath < Self > > :: visit_mut_children_with_ast_path (node , self , __ast_path)
    }
    #[doc = "Visit a node of type `Option < Box < ImportLayerName > >`.\n\nBy default, this method \
             calls [`Option < Box < ImportLayerName > >::visit_mut_children_with_ast_path`]. If \
             you want to recurse, you need to call it manually."]
    #[inline]
    fn visit_mut_opt_import_layer_name(
        &mut self,
        node: &mut Option<Box<ImportLayerName>>,
        __ast_path: &mut AstKindPath,
    ) {
        < Option < Box < ImportLayerName > > as VisitMutWithAstPath < Self > > :: visit_mut_children_with_ast_path (node , self , __ast_path)
    }
    #[doc = "Visit a node of type `Option < ImportantFlag >`.\n\nBy default, this method calls \
             [`Option < ImportantFlag >::visit_mut_children_with_ast_path`]. If you want to \
             recurse, you need to call it manually."]
    #[inline]
    fn visit_mut_opt_important_flag(
        &mut self,
        node: &mut Option<ImportantFlag>,
        __ast_path: &mut AstKindPath,
    ) {
        <Option<ImportantFlag> as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Option < Box < MediaConditionType > >`.\n\nBy default, this \
             method calls [`Option < Box < MediaConditionType > \
             >::visit_mut_children_with_ast_path`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_mut_opt_media_condition_type(
        &mut self,
        node: &mut Option<Box<MediaConditionType>>,
        __ast_path: &mut AstKindPath,
    ) {
        < Option < Box < MediaConditionType > > as VisitMutWithAstPath < Self > > :: visit_mut_children_with_ast_path (node , self , __ast_path)
    }
    #[doc = "Visit a node of type `Option < Box < MediaQueryList > >`.\n\nBy default, this method \
             calls [`Option < Box < MediaQueryList > >::visit_mut_children_with_ast_path`]. If you \
             want to recurse, you need to call it manually."]
    #[inline]
    fn visit_mut_opt_media_query_list(
        &mut self,
        node: &mut Option<Box<MediaQueryList>>,
        __ast_path: &mut AstKindPath,
    ) {
        <Option<Box<MediaQueryList>> as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Option < MediaType >`.\n\nBy default, this method calls \
             [`Option < MediaType >::visit_mut_children_with_ast_path`]. If you want to recurse, \
             you need to call it manually."]
    #[inline]
    fn visit_mut_opt_media_type(
        &mut self,
        node: &mut Option<MediaType>,
        __ast_path: &mut AstKindPath,
    ) {
        <Option<MediaType> as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Option < Namespace >`.\n\nBy default, this method calls \
             [`Option < Namespace >::visit_mut_children_with_ast_path`]. If you want to recurse, \
             you need to call it manually."]
    #[inline]
    fn visit_mut_opt_namespace(
        &mut self,
        node: &mut Option<Namespace>,
        __ast_path: &mut AstKindPath,
    ) {
        <Option<Namespace> as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Option < NamespacePrefix >`.\n\nBy default, this method calls \
             [`Option < NamespacePrefix >::visit_mut_children_with_ast_path`]. If you want to \
             recurse, you need to call it manually."]
    #[inline]
    fn visit_mut_opt_namespace_prefix(
        &mut self,
        node: &mut Option<NamespacePrefix>,
        __ast_path: &mut AstKindPath,
    ) {
        <Option<NamespacePrefix> as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Option < NestingSelector >`.\n\nBy default, this method calls \
             [`Option < NestingSelector >::visit_mut_children_with_ast_path`]. If you want to \
             recurse, you need to call it manually."]
    #[inline]
    fn visit_mut_opt_nesting_selector(
        &mut self,
        node: &mut Option<NestingSelector>,
        __ast_path: &mut AstKindPath,
    ) {
        <Option<NestingSelector> as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Option < Number >`.\n\nBy default, this method calls [`Option < \
             Number >::visit_mut_children_with_ast_path`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_mut_opt_number(&mut self, node: &mut Option<Number>, __ast_path: &mut AstKindPath) {
        <Option<Number> as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Option < Vec < PageSelectorPseudo > >`.\n\nBy default, this \
             method calls [`Option < Vec < PageSelectorPseudo > \
             >::visit_mut_children_with_ast_path`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_mut_opt_page_selector_pseudos(
        &mut self,
        node: &mut Option<Vec<PageSelectorPseudo>>,
        __ast_path: &mut AstKindPath,
    ) {
        < Option < Vec < PageSelectorPseudo > > as VisitMutWithAstPath < Self > > :: visit_mut_children_with_ast_path (node , self , __ast_path)
    }
    #[doc = "Visit a node of type `Option < PageSelectorType >`.\n\nBy default, this method calls \
             [`Option < PageSelectorType >::visit_mut_children_with_ast_path`]. If you want to \
             recurse, you need to call it manually."]
    #[inline]
    fn visit_mut_opt_page_selector_type(
        &mut self,
        node: &mut Option<PageSelectorType>,
        __ast_path: &mut AstKindPath,
    ) {
        <Option<PageSelectorType> as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Option < Vec < PseudoClassSelectorChildren > >`.\n\nBy default, \
             this method calls [`Option < Vec < PseudoClassSelectorChildren > \
             >::visit_mut_children_with_ast_path`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_mut_opt_pseudo_class_selector_childrens(
        &mut self,
        node: &mut Option<Vec<PseudoClassSelectorChildren>>,
        __ast_path: &mut AstKindPath,
    ) {
        < Option < Vec < PseudoClassSelectorChildren > > as VisitMutWithAstPath < Self > > :: visit_mut_children_with_ast_path (node , self , __ast_path)
    }
    #[doc = "Visit a node of type `Option < Vec < PseudoElementSelectorChildren > >`.\n\nBy \
             default, this method calls [`Option < Vec < PseudoElementSelectorChildren > \
             >::visit_mut_children_with_ast_path`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_mut_opt_pseudo_element_selector_childrens(
        &mut self,
        node: &mut Option<Vec<PseudoElementSelectorChildren>>,
        __ast_path: &mut AstKindPath,
    ) {
        < Option < Vec < PseudoElementSelectorChildren > > as VisitMutWithAstPath < Self > > :: visit_mut_children_with_ast_path (node , self , __ast_path)
    }
    #[doc = "Visit a node of type `Option < SimpleBlock >`.\n\nBy default, this method calls \
             [`Option < SimpleBlock >::visit_mut_children_with_ast_path`]. If you want to recurse, \
             you need to call it manually."]
    #[inline]
    fn visit_mut_opt_simple_block(
        &mut self,
        node: &mut Option<SimpleBlock>,
        __ast_path: &mut AstKindPath,
    ) {
        <Option<SimpleBlock> as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Option < Box < TypeSelector > >`.\n\nBy default, this method \
             calls [`Option < Box < TypeSelector > >::visit_mut_children_with_ast_path`]. If you \
             want to recurse, you need to call it manually."]
    #[inline]
    fn visit_mut_opt_type_selector(
        &mut self,
        node: &mut Option<Box<TypeSelector>>,
        __ast_path: &mut AstKindPath,
    ) {
        <Option<Box<TypeSelector>> as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Option < Vec < UrlModifier > >`.\n\nBy default, this method \
             calls [`Option < Vec < UrlModifier > >::visit_mut_children_with_ast_path`]. If you \
             want to recurse, you need to call it manually."]
    #[inline]
    fn visit_mut_opt_url_modifiers(
        &mut self,
        node: &mut Option<Vec<UrlModifier>>,
        __ast_path: &mut AstKindPath,
    ) {
        <Option<Vec<UrlModifier>> as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Option < Box < UrlValue > >`.\n\nBy default, this method calls \
             [`Option < Box < UrlValue > >::visit_mut_children_with_ast_path`]. If you want to \
             recurse, you need to call it manually."]
    #[inline]
    fn visit_mut_opt_url_value(
        &mut self,
        node: &mut Option<Box<UrlValue>>,
        __ast_path: &mut AstKindPath,
    ) {
        <Option<Box<UrlValue>> as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `PageSelector`.\n\nBy default, this method calls \
             [`PageSelector::visit_mut_children_with_ast_path`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn visit_mut_page_selector(&mut self, node: &mut PageSelector, __ast_path: &mut AstKindPath) {
        <PageSelector as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `PageSelectorList`.\n\nBy default, this method calls \
             [`PageSelectorList::visit_mut_children_with_ast_path`]. If you want to recurse, you \
             need to call it manually."]
    #[inline]
    fn visit_mut_page_selector_list(
        &mut self,
        node: &mut PageSelectorList,
        __ast_path: &mut AstKindPath,
    ) {
        <PageSelectorList as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `PageSelectorPseudo`.\n\nBy default, this method calls \
             [`PageSelectorPseudo::visit_mut_children_with_ast_path`]. If you want to recurse, you \
             need to call it manually."]
    #[inline]
    fn visit_mut_page_selector_pseudo(
        &mut self,
        node: &mut PageSelectorPseudo,
        __ast_path: &mut AstKindPath,
    ) {
        <PageSelectorPseudo as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Vec < PageSelectorPseudo >`.\n\nBy default, this method calls \
             [`Vec < PageSelectorPseudo >::visit_mut_children_with_ast_path`]. If you want to \
             recurse, you need to call it manually."]
    #[inline]
    fn visit_mut_page_selector_pseudos(
        &mut self,
        node: &mut Vec<PageSelectorPseudo>,
        __ast_path: &mut AstKindPath,
    ) {
        <Vec<PageSelectorPseudo> as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `PageSelectorType`.\n\nBy default, this method calls \
             [`PageSelectorType::visit_mut_children_with_ast_path`]. If you want to recurse, you \
             need to call it manually."]
    #[inline]
    fn visit_mut_page_selector_type(
        &mut self,
        node: &mut PageSelectorType,
        __ast_path: &mut AstKindPath,
    ) {
        <PageSelectorType as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Vec < PageSelector >`.\n\nBy default, this method calls [`Vec < \
             PageSelector >::visit_mut_children_with_ast_path`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn visit_mut_page_selectors(
        &mut self,
        node: &mut Vec<PageSelector>,
        __ast_path: &mut AstKindPath,
    ) {
        <Vec<PageSelector> as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Percentage`.\n\nBy default, this method calls \
             [`Percentage::visit_mut_children_with_ast_path`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_mut_percentage(&mut self, node: &mut Percentage, __ast_path: &mut AstKindPath) {
        <Percentage as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `PseudoClassSelector`.\n\nBy default, this method calls \
             [`PseudoClassSelector::visit_mut_children_with_ast_path`]. If you want to recurse, \
             you need to call it manually."]
    #[inline]
    fn visit_mut_pseudo_class_selector(
        &mut self,
        node: &mut PseudoClassSelector,
        __ast_path: &mut AstKindPath,
    ) {
        <PseudoClassSelector as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `PseudoClassSelectorChildren`.\n\nBy default, this method calls \
             [`PseudoClassSelectorChildren::visit_mut_children_with_ast_path`]. If you want to \
             recurse, you need to call it manually."]
    #[inline]
    fn visit_mut_pseudo_class_selector_children(
        &mut self,
        node: &mut PseudoClassSelectorChildren,
        __ast_path: &mut AstKindPath,
    ) {
        <PseudoClassSelectorChildren as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Vec < PseudoClassSelectorChildren >`.\n\nBy default, this \
             method calls [`Vec < PseudoClassSelectorChildren \
             >::visit_mut_children_with_ast_path`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_mut_pseudo_class_selector_childrens(
        &mut self,
        node: &mut Vec<PseudoClassSelectorChildren>,
        __ast_path: &mut AstKindPath,
    ) {
        < Vec < PseudoClassSelectorChildren > as VisitMutWithAstPath < Self > > :: visit_mut_children_with_ast_path (node , self , __ast_path)
    }
    #[doc = "Visit a node of type `PseudoElementSelector`.\n\nBy default, this method calls \
             [`PseudoElementSelector::visit_mut_children_with_ast_path`]. If you want to recurse, \
             you need to call it manually."]
    #[inline]
    fn visit_mut_pseudo_element_selector(
        &mut self,
        node: &mut PseudoElementSelector,
        __ast_path: &mut AstKindPath,
    ) {
        <PseudoElementSelector as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `PseudoElementSelectorChildren`.\n\nBy default, this method \
             calls [`PseudoElementSelectorChildren::visit_mut_children_with_ast_path`]. If you \
             want to recurse, you need to call it manually."]
    #[inline]
    fn visit_mut_pseudo_element_selector_children(
        &mut self,
        node: &mut PseudoElementSelectorChildren,
        __ast_path: &mut AstKindPath,
    ) {
        < PseudoElementSelectorChildren as VisitMutWithAstPath < Self > > :: visit_mut_children_with_ast_path (node , self , __ast_path)
    }
    #[doc = "Visit a node of type `Vec < PseudoElementSelectorChildren >`.\n\nBy default, this \
             method calls [`Vec < PseudoElementSelectorChildren \
             >::visit_mut_children_with_ast_path`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_mut_pseudo_element_selector_childrens(
        &mut self,
        node: &mut Vec<PseudoElementSelectorChildren>,
        __ast_path: &mut AstKindPath,
    ) {
        < Vec < PseudoElementSelectorChildren > as VisitMutWithAstPath < Self > > :: visit_mut_children_with_ast_path (node , self , __ast_path)
    }
    #[doc = "Visit a node of type `QualifiedRule`.\n\nBy default, this method calls \
             [`QualifiedRule::visit_mut_children_with_ast_path`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn visit_mut_qualified_rule(&mut self, node: &mut QualifiedRule, __ast_path: &mut AstKindPath) {
        <QualifiedRule as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `QualifiedRulePrelude`.\n\nBy default, this method calls \
             [`QualifiedRulePrelude::visit_mut_children_with_ast_path`]. If you want to recurse, \
             you need to call it manually."]
    #[inline]
    fn visit_mut_qualified_rule_prelude(
        &mut self,
        node: &mut QualifiedRulePrelude,
        __ast_path: &mut AstKindPath,
    ) {
        <QualifiedRulePrelude as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `QueryInParens`.\n\nBy default, this method calls \
             [`QueryInParens::visit_mut_children_with_ast_path`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn visit_mut_query_in_parens(
        &mut self,
        node: &mut QueryInParens,
        __ast_path: &mut AstKindPath,
    ) {
        <QueryInParens as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Ratio`.\n\nBy default, this method calls \
             [`Ratio::visit_mut_children_with_ast_path`]. If you want to recurse, you need to call \
             it manually."]
    #[inline]
    fn visit_mut_ratio(&mut self, node: &mut Ratio, __ast_path: &mut AstKindPath) {
        <Ratio as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `RelativeSelector`.\n\nBy default, this method calls \
             [`RelativeSelector::visit_mut_children_with_ast_path`]. If you want to recurse, you \
             need to call it manually."]
    #[inline]
    fn visit_mut_relative_selector(
        &mut self,
        node: &mut RelativeSelector,
        __ast_path: &mut AstKindPath,
    ) {
        <RelativeSelector as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `RelativeSelectorList`.\n\nBy default, this method calls \
             [`RelativeSelectorList::visit_mut_children_with_ast_path`]. If you want to recurse, \
             you need to call it manually."]
    #[inline]
    fn visit_mut_relative_selector_list(
        &mut self,
        node: &mut RelativeSelectorList,
        __ast_path: &mut AstKindPath,
    ) {
        <RelativeSelectorList as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Vec < RelativeSelector >`.\n\nBy default, this method calls \
             [`Vec < RelativeSelector >::visit_mut_children_with_ast_path`]. If you want to \
             recurse, you need to call it manually."]
    #[inline]
    fn visit_mut_relative_selectors(
        &mut self,
        node: &mut Vec<RelativeSelector>,
        __ast_path: &mut AstKindPath,
    ) {
        <Vec<RelativeSelector> as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Resolution`.\n\nBy default, this method calls \
             [`Resolution::visit_mut_children_with_ast_path`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_mut_resolution(&mut self, node: &mut Resolution, __ast_path: &mut AstKindPath) {
        <Resolution as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Rule`.\n\nBy default, this method calls \
             [`Rule::visit_mut_children_with_ast_path`]. If you want to recurse, you need to call \
             it manually."]
    #[inline]
    fn visit_mut_rule(&mut self, node: &mut Rule, __ast_path: &mut AstKindPath) {
        <Rule as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Vec < Rule >`.\n\nBy default, this method calls [`Vec < Rule \
             >::visit_mut_children_with_ast_path`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn visit_mut_rules(&mut self, node: &mut Vec<Rule>, __ast_path: &mut AstKindPath) {
        <Vec<Rule> as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `ScopeRange`.\n\nBy default, this method calls \
             [`ScopeRange::visit_mut_children_with_ast_path`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_mut_scope_range(&mut self, node: &mut ScopeRange, __ast_path: &mut AstKindPath) {
        <ScopeRange as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `SelectorList`.\n\nBy default, this method calls \
             [`SelectorList::visit_mut_children_with_ast_path`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn visit_mut_selector_list(&mut self, node: &mut SelectorList, __ast_path: &mut AstKindPath) {
        <SelectorList as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `SequenceOfCustomIdents`.\n\nBy default, this method calls \
             [`SequenceOfCustomIdents::visit_mut_children_with_ast_path`]. If you want to recurse, \
             you need to call it manually."]
    #[inline]
    fn visit_mut_sequence_of_custom_idents(
        &mut self,
        node: &mut SequenceOfCustomIdents,
        __ast_path: &mut AstKindPath,
    ) {
        <SequenceOfCustomIdents as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `SimpleBlock`.\n\nBy default, this method calls \
             [`SimpleBlock::visit_mut_children_with_ast_path`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn visit_mut_simple_block(&mut self, node: &mut SimpleBlock, __ast_path: &mut AstKindPath) {
        <SimpleBlock as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `SizeFeature`.\n\nBy default, this method calls \
             [`SizeFeature::visit_mut_children_with_ast_path`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn visit_mut_size_feature(&mut self, node: &mut SizeFeature, __ast_path: &mut AstKindPath) {
        <SizeFeature as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `SizeFeatureBoolean`.\n\nBy default, this method calls \
             [`SizeFeatureBoolean::visit_mut_children_with_ast_path`]. If you want to recurse, you \
             need to call it manually."]
    #[inline]
    fn visit_mut_size_feature_boolean(
        &mut self,
        node: &mut SizeFeatureBoolean,
        __ast_path: &mut AstKindPath,
    ) {
        <SizeFeatureBoolean as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `SizeFeatureName`.\n\nBy default, this method calls \
             [`SizeFeatureName::visit_mut_children_with_ast_path`]. If you want to recurse, you \
             need to call it manually."]
    #[inline]
    fn visit_mut_size_feature_name(
        &mut self,
        node: &mut SizeFeatureName,
        __ast_path: &mut AstKindPath,
    ) {
        <SizeFeatureName as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `SizeFeaturePlain`.\n\nBy default, this method calls \
             [`SizeFeaturePlain::visit_mut_children_with_ast_path`]. If you want to recurse, you \
             need to call it manually."]
    #[inline]
    fn visit_mut_size_feature_plain(
        &mut self,
        node: &mut SizeFeaturePlain,
        __ast_path: &mut AstKindPath,
    ) {
        <SizeFeaturePlain as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `SizeFeatureRange`.\n\nBy default, this method calls \
             [`SizeFeatureRange::visit_mut_children_with_ast_path`]. If you want to recurse, you \
             need to call it manually."]
    #[inline]
    fn visit_mut_size_feature_range(
        &mut self,
        node: &mut SizeFeatureRange,
        __ast_path: &mut AstKindPath,
    ) {
        <SizeFeatureRange as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `SizeFeatureRangeComparison`.\n\nBy default, this method calls \
             [`SizeFeatureRangeComparison::visit_mut_children_with_ast_path`]. If you want to \
             recurse, you need to call it manually."]
    #[inline]
    fn visit_mut_size_feature_range_comparison(
        &mut self,
        node: &mut SizeFeatureRangeComparison,
        __ast_path: &mut AstKindPath,
    ) {
        <SizeFeatureRangeComparison as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `SizeFeatureRangeInterval`.\n\nBy default, this method calls \
             [`SizeFeatureRangeInterval::visit_mut_children_with_ast_path`]. If you want to \
             recurse, you need to call it manually."]
    #[inline]
    fn visit_mut_size_feature_range_interval(
        &mut self,
        node: &mut SizeFeatureRangeInterval,
        __ast_path: &mut AstKindPath,
    ) {
        <SizeFeatureRangeInterval as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `SizeFeatureValue`.\n\nBy default, this method calls \
             [`SizeFeatureValue::visit_mut_children_with_ast_path`]. If you want to recurse, you \
             need to call it manually."]
    #[inline]
    fn visit_mut_size_feature_value(
        &mut self,
        node: &mut SizeFeatureValue,
        __ast_path: &mut AstKindPath,
    ) {
        <SizeFeatureValue as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `swc_common :: Span`.\n\nBy default, this method calls \
             [`swc_common :: Span::visit_mut_children_with_ast_path`]. If you want to recurse, you \
             need to call it manually."]
    #[inline]
    fn visit_mut_span(&mut self, node: &mut swc_common::Span, __ast_path: &mut AstKindPath) {
        <swc_common::Span as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Str`.\n\nBy default, this method calls \
             [`Str::visit_mut_children_with_ast_path`]. If you want to recurse, you need to call \
             it manually."]
    #[inline]
    fn visit_mut_str(&mut self, node: &mut Str, __ast_path: &mut AstKindPath) {
        <Str as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(node, self, __ast_path)
    }
    #[doc = "Visit a node of type `StyleBlock`.\n\nBy default, this method calls \
             [`StyleBlock::visit_mut_children_with_ast_path`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_mut_style_block(&mut self, node: &mut StyleBlock, __ast_path: &mut AstKindPath) {
        <StyleBlock as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Stylesheet`.\n\nBy default, this method calls \
             [`Stylesheet::visit_mut_children_with_ast_path`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_mut_stylesheet(&mut self, node: &mut Stylesheet, __ast_path: &mut AstKindPath) {
        <Stylesheet as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `SubclassSelector`.\n\nBy default, this method calls \
             [`SubclassSelector::visit_mut_children_with_ast_path`]. If you want to recurse, you \
             need to call it manually."]
    #[inline]
    fn visit_mut_subclass_selector(
        &mut self,
        node: &mut SubclassSelector,
        __ast_path: &mut AstKindPath,
    ) {
        <SubclassSelector as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Vec < SubclassSelector >`.\n\nBy default, this method calls \
             [`Vec < SubclassSelector >::visit_mut_children_with_ast_path`]. If you want to \
             recurse, you need to call it manually."]
    #[inline]
    fn visit_mut_subclass_selectors(
        &mut self,
        node: &mut Vec<SubclassSelector>,
        __ast_path: &mut AstKindPath,
    ) {
        <Vec<SubclassSelector> as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `SupportsAnd`.\n\nBy default, this method calls \
             [`SupportsAnd::visit_mut_children_with_ast_path`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn visit_mut_supports_and(&mut self, node: &mut SupportsAnd, __ast_path: &mut AstKindPath) {
        <SupportsAnd as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `SupportsCondition`.\n\nBy default, this method calls \
             [`SupportsCondition::visit_mut_children_with_ast_path`]. If you want to recurse, you \
             need to call it manually."]
    #[inline]
    fn visit_mut_supports_condition(
        &mut self,
        node: &mut SupportsCondition,
        __ast_path: &mut AstKindPath,
    ) {
        <SupportsCondition as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `SupportsConditionType`.\n\nBy default, this method calls \
             [`SupportsConditionType::visit_mut_children_with_ast_path`]. If you want to recurse, \
             you need to call it manually."]
    #[inline]
    fn visit_mut_supports_condition_type(
        &mut self,
        node: &mut SupportsConditionType,
        __ast_path: &mut AstKindPath,
    ) {
        <SupportsConditionType as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Vec < SupportsConditionType >`.\n\nBy default, this method \
             calls [`Vec < SupportsConditionType >::visit_mut_children_with_ast_path`]. If you \
             want to recurse, you need to call it manually."]
    #[inline]
    fn visit_mut_supports_condition_types(
        &mut self,
        node: &mut Vec<SupportsConditionType>,
        __ast_path: &mut AstKindPath,
    ) {
        <Vec<SupportsConditionType> as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `SupportsFeature`.\n\nBy default, this method calls \
             [`SupportsFeature::visit_mut_children_with_ast_path`]. If you want to recurse, you \
             need to call it manually."]
    #[inline]
    fn visit_mut_supports_feature(
        &mut self,
        node: &mut SupportsFeature,
        __ast_path: &mut AstKindPath,
    ) {
        <SupportsFeature as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `SupportsInParens`.\n\nBy default, this method calls \
             [`SupportsInParens::visit_mut_children_with_ast_path`]. If you want to recurse, you \
             need to call it manually."]
    #[inline]
    fn visit_mut_supports_in_parens(
        &mut self,
        node: &mut SupportsInParens,
        __ast_path: &mut AstKindPath,
    ) {
        <SupportsInParens as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `SupportsNot`.\n\nBy default, this method calls \
             [`SupportsNot::visit_mut_children_with_ast_path`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn visit_mut_supports_not(&mut self, node: &mut SupportsNot, __ast_path: &mut AstKindPath) {
        <SupportsNot as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `SupportsOr`.\n\nBy default, this method calls \
             [`SupportsOr::visit_mut_children_with_ast_path`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_mut_supports_or(&mut self, node: &mut SupportsOr, __ast_path: &mut AstKindPath) {
        <SupportsOr as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `TagNameSelector`.\n\nBy default, this method calls \
             [`TagNameSelector::visit_mut_children_with_ast_path`]. If you want to recurse, you \
             need to call it manually."]
    #[inline]
    fn visit_mut_tag_name_selector(
        &mut self,
        node: &mut TagNameSelector,
        __ast_path: &mut AstKindPath,
    ) {
        <TagNameSelector as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Time`.\n\nBy default, this method calls \
             [`Time::visit_mut_children_with_ast_path`]. If you want to recurse, you need to call \
             it manually."]
    #[inline]
    fn visit_mut_time(&mut self, node: &mut Time, __ast_path: &mut AstKindPath) {
        <Time as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `TimePercentage`.\n\nBy default, this method calls \
             [`TimePercentage::visit_mut_children_with_ast_path`]. If you want to recurse, you \
             need to call it manually."]
    #[inline]
    fn visit_mut_time_percentage(
        &mut self,
        node: &mut TimePercentage,
        __ast_path: &mut AstKindPath,
    ) {
        <TimePercentage as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Token`.\n\nBy default, this method calls \
             [`Token::visit_mut_children_with_ast_path`]. If you want to recurse, you need to call \
             it manually."]
    #[inline]
    fn visit_mut_token(&mut self, node: &mut Token, __ast_path: &mut AstKindPath) {
        <Token as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `TokenAndSpan`.\n\nBy default, this method calls \
             [`TokenAndSpan::visit_mut_children_with_ast_path`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn visit_mut_token_and_span(&mut self, node: &mut TokenAndSpan, __ast_path: &mut AstKindPath) {
        <TokenAndSpan as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `TypeSelector`.\n\nBy default, this method calls \
             [`TypeSelector::visit_mut_children_with_ast_path`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn visit_mut_type_selector(&mut self, node: &mut TypeSelector, __ast_path: &mut AstKindPath) {
        <TypeSelector as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `UnicodeRange`.\n\nBy default, this method calls \
             [`UnicodeRange::visit_mut_children_with_ast_path`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn visit_mut_unicode_range(&mut self, node: &mut UnicodeRange, __ast_path: &mut AstKindPath) {
        <UnicodeRange as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `UniversalSelector`.\n\nBy default, this method calls \
             [`UniversalSelector::visit_mut_children_with_ast_path`]. If you want to recurse, you \
             need to call it manually."]
    #[inline]
    fn visit_mut_universal_selector(
        &mut self,
        node: &mut UniversalSelector,
        __ast_path: &mut AstKindPath,
    ) {
        <UniversalSelector as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `UnknownDimension`.\n\nBy default, this method calls \
             [`UnknownDimension::visit_mut_children_with_ast_path`]. If you want to recurse, you \
             need to call it manually."]
    #[inline]
    fn visit_mut_unknown_dimension(
        &mut self,
        node: &mut UnknownDimension,
        __ast_path: &mut AstKindPath,
    ) {
        <UnknownDimension as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Url`.\n\nBy default, this method calls \
             [`Url::visit_mut_children_with_ast_path`]. If you want to recurse, you need to call \
             it manually."]
    #[inline]
    fn visit_mut_url(&mut self, node: &mut Url, __ast_path: &mut AstKindPath) {
        <Url as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(node, self, __ast_path)
    }
    #[doc = "Visit a node of type `UrlKeyValue`.\n\nBy default, this method calls \
             [`UrlKeyValue::visit_mut_children_with_ast_path`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn visit_mut_url_key_value(&mut self, node: &mut UrlKeyValue, __ast_path: &mut AstKindPath) {
        <UrlKeyValue as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `UrlModifier`.\n\nBy default, this method calls \
             [`UrlModifier::visit_mut_children_with_ast_path`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn visit_mut_url_modifier(&mut self, node: &mut UrlModifier, __ast_path: &mut AstKindPath) {
        <UrlModifier as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Vec < UrlModifier >`.\n\nBy default, this method calls [`Vec < \
             UrlModifier >::visit_mut_children_with_ast_path`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn visit_mut_url_modifiers(
        &mut self,
        node: &mut Vec<UrlModifier>,
        __ast_path: &mut AstKindPath,
    ) {
        <Vec<UrlModifier> as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `UrlValue`.\n\nBy default, this method calls \
             [`UrlValue::visit_mut_children_with_ast_path`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_mut_url_value(&mut self, node: &mut UrlValue, __ast_path: &mut AstKindPath) {
        <UrlValue as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `UrlValueRaw`.\n\nBy default, this method calls \
             [`UrlValueRaw::visit_mut_children_with_ast_path`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn visit_mut_url_value_raw(&mut self, node: &mut UrlValueRaw, __ast_path: &mut AstKindPath) {
        <UrlValueRaw as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `WqName`.\n\nBy default, this method calls \
             [`WqName::visit_mut_children_with_ast_path`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn visit_mut_wq_name(&mut self, node: &mut WqName, __ast_path: &mut AstKindPath) {
        <WqName as VisitMutWithAstPath<Self>>::visit_mut_children_with_ast_path(
            node, self, __ast_path,
        )
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V> VisitMutAstPath for &mut V
where
    V: ?Sized + VisitMutAstPath,
{
    #[inline]
    fn visit_mut_absolute_color_base(
        &mut self,
        node: &mut AbsoluteColorBase,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_absolute_color_base(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_alpha_value(&mut self, node: &mut AlphaValue, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_alpha_value(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_an_plus_b(&mut self, node: &mut AnPlusB, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_an_plus_b(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_an_plus_b_notation(
        &mut self,
        node: &mut AnPlusBNotation,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_an_plus_b_notation(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_angle(&mut self, node: &mut Angle, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_angle(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_angle_percentage(
        &mut self,
        node: &mut AnglePercentage,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_angle_percentage(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_any_namespace(&mut self, node: &mut AnyNamespace, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_any_namespace(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_at_rule(&mut self, node: &mut AtRule, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_at_rule(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_at_rule_name(&mut self, node: &mut AtRuleName, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_at_rule_name(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_at_rule_prelude(
        &mut self,
        node: &mut AtRulePrelude,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_at_rule_prelude(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_atom(&mut self, node: &mut swc_atoms::Atom, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_atom(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_attribute_selector(
        &mut self,
        node: &mut AttributeSelector,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_attribute_selector(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_attribute_selector_matcher(
        &mut self,
        node: &mut AttributeSelectorMatcher,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_attribute_selector_matcher(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_attribute_selector_matcher_value(
        &mut self,
        node: &mut AttributeSelectorMatcherValue,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_attribute_selector_matcher_value(
            &mut **self,
            node,
            __ast_path,
        )
    }

    #[inline]
    fn visit_mut_attribute_selector_modifier(
        &mut self,
        node: &mut AttributeSelectorModifier,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_attribute_selector_modifier(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_attribute_selector_value(
        &mut self,
        node: &mut AttributeSelectorValue,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_attribute_selector_value(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_bin_op(&mut self, node: &mut BinOp, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_bin_op(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_calc_operator(&mut self, node: &mut CalcOperator, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_calc_operator(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_calc_operator_type(
        &mut self,
        node: &mut CalcOperatorType,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_calc_operator_type(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_calc_product(&mut self, node: &mut CalcProduct, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_calc_product(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_calc_product_or_operator(
        &mut self,
        node: &mut CalcProductOrOperator,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_calc_product_or_operator(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_calc_product_or_operators(
        &mut self,
        node: &mut Vec<CalcProductOrOperator>,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_calc_product_or_operators(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_calc_sum(&mut self, node: &mut CalcSum, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_calc_sum(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_calc_value(&mut self, node: &mut CalcValue, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_calc_value(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_calc_value_or_operator(
        &mut self,
        node: &mut CalcValueOrOperator,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_calc_value_or_operator(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_calc_value_or_operators(
        &mut self,
        node: &mut Vec<CalcValueOrOperator>,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_calc_value_or_operators(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_class_selector(&mut self, node: &mut ClassSelector, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_class_selector(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_cmyk_component(&mut self, node: &mut CmykComponent, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_cmyk_component(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_color(&mut self, node: &mut Color, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_color(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_color_profile_name(
        &mut self,
        node: &mut ColorProfileName,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_color_profile_name(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_combinator(&mut self, node: &mut Combinator, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_combinator(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_combinator_value(
        &mut self,
        node: &mut CombinatorValue,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_combinator_value(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_complex_selector(
        &mut self,
        node: &mut ComplexSelector,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_complex_selector(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_complex_selector_children(
        &mut self,
        node: &mut ComplexSelectorChildren,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_complex_selector_children(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_complex_selector_childrens(
        &mut self,
        node: &mut Vec<ComplexSelectorChildren>,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_complex_selector_childrens(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_complex_selectors(
        &mut self,
        node: &mut Vec<ComplexSelector>,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_complex_selectors(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_component_value(
        &mut self,
        node: &mut ComponentValue,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_component_value(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_component_values(
        &mut self,
        node: &mut Vec<ComponentValue>,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_component_values(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_compound_selector(
        &mut self,
        node: &mut CompoundSelector,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_compound_selector(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_compound_selector_list(
        &mut self,
        node: &mut CompoundSelectorList,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_compound_selector_list(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_compound_selectors(
        &mut self,
        node: &mut Vec<CompoundSelector>,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_compound_selectors(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_container_condition(
        &mut self,
        node: &mut ContainerCondition,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_container_condition(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_container_name(&mut self, node: &mut ContainerName, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_container_name(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_container_query(
        &mut self,
        node: &mut ContainerQuery,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_container_query(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_container_query_and(
        &mut self,
        node: &mut ContainerQueryAnd,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_container_query_and(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_container_query_not(
        &mut self,
        node: &mut ContainerQueryNot,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_container_query_not(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_container_query_or(
        &mut self,
        node: &mut ContainerQueryOr,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_container_query_or(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_container_query_type(
        &mut self,
        node: &mut ContainerQueryType,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_container_query_type(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_container_query_types(
        &mut self,
        node: &mut Vec<ContainerQueryType>,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_container_query_types(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_custom_highlight_name(
        &mut self,
        node: &mut CustomHighlightName,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_custom_highlight_name(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_custom_ident(&mut self, node: &mut CustomIdent, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_custom_ident(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_custom_idents(
        &mut self,
        node: &mut Vec<CustomIdent>,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_custom_idents(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_custom_media_query(
        &mut self,
        node: &mut CustomMediaQuery,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_custom_media_query(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_custom_media_query_media_type(
        &mut self,
        node: &mut CustomMediaQueryMediaType,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_custom_media_query_media_type(
            &mut **self,
            node,
            __ast_path,
        )
    }

    #[inline]
    fn visit_mut_custom_property_name(
        &mut self,
        node: &mut CustomPropertyName,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_custom_property_name(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_dashed_ident(&mut self, node: &mut DashedIdent, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_dashed_ident(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_declaration(&mut self, node: &mut Declaration, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_declaration(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_declaration_name(
        &mut self,
        node: &mut DeclarationName,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_declaration_name(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_declaration_or_at_rule(
        &mut self,
        node: &mut DeclarationOrAtRule,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_declaration_or_at_rule(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_delimiter(&mut self, node: &mut Delimiter, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_delimiter(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_delimiter_value(
        &mut self,
        node: &mut DelimiterValue,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_delimiter_value(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_dimension(&mut self, node: &mut Dimension, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_dimension(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_dimension_token(
        &mut self,
        node: &mut DimensionToken,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_dimension_token(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_document_prelude(
        &mut self,
        node: &mut DocumentPrelude,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_document_prelude(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_document_prelude_matching_function(
        &mut self,
        node: &mut DocumentPreludeMatchingFunction,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_document_prelude_matching_function(
            &mut **self,
            node,
            __ast_path,
        )
    }

    #[inline]
    fn visit_mut_document_prelude_matching_functions(
        &mut self,
        node: &mut Vec<DocumentPreludeMatchingFunction>,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_document_prelude_matching_functions(
            &mut **self,
            node,
            __ast_path,
        )
    }

    #[inline]
    fn visit_mut_extension_name(&mut self, node: &mut ExtensionName, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_extension_name(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_family_name(&mut self, node: &mut FamilyName, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_family_name(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_family_names(&mut self, node: &mut Vec<FamilyName>, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_family_names(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_flex(&mut self, node: &mut Flex, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_flex(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_font_feature_values_prelude(
        &mut self,
        node: &mut FontFeatureValuesPrelude,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_font_feature_values_prelude(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_forgiving_complex_selector(
        &mut self,
        node: &mut ForgivingComplexSelector,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_forgiving_complex_selector(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_forgiving_complex_selectors(
        &mut self,
        node: &mut Vec<ForgivingComplexSelector>,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_forgiving_complex_selectors(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_forgiving_relative_selector(
        &mut self,
        node: &mut ForgivingRelativeSelector,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_forgiving_relative_selector(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_forgiving_relative_selector_list(
        &mut self,
        node: &mut ForgivingRelativeSelectorList,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_forgiving_relative_selector_list(
            &mut **self,
            node,
            __ast_path,
        )
    }

    #[inline]
    fn visit_mut_forgiving_relative_selectors(
        &mut self,
        node: &mut Vec<ForgivingRelativeSelector>,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_forgiving_relative_selectors(
            &mut **self,
            node,
            __ast_path,
        )
    }

    #[inline]
    fn visit_mut_forgiving_selector_list(
        &mut self,
        node: &mut ForgivingSelectorList,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_forgiving_selector_list(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_frequency(&mut self, node: &mut Frequency, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_frequency(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_frequency_percentage(
        &mut self,
        node: &mut FrequencyPercentage,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_frequency_percentage(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_function(&mut self, node: &mut Function, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_function(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_function_name(&mut self, node: &mut FunctionName, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_function_name(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_general_enclosed(
        &mut self,
        node: &mut GeneralEnclosed,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_general_enclosed(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_hex_color(&mut self, node: &mut HexColor, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_hex_color(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_hue(&mut self, node: &mut Hue, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_hue(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_id_selector(&mut self, node: &mut IdSelector, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_id_selector(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_ident(&mut self, node: &mut Ident, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_ident(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_idents(&mut self, node: &mut Vec<Ident>, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_idents(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_import_conditions(
        &mut self,
        node: &mut ImportConditions,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_import_conditions(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_import_href(&mut self, node: &mut ImportHref, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_import_href(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_import_layer_name(
        &mut self,
        node: &mut ImportLayerName,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_import_layer_name(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_import_prelude(&mut self, node: &mut ImportPrelude, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_import_prelude(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_important_flag(&mut self, node: &mut ImportantFlag, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_important_flag(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_integer(&mut self, node: &mut Integer, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_integer(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_keyframe_block(&mut self, node: &mut KeyframeBlock, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_keyframe_block(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_keyframe_selector(
        &mut self,
        node: &mut KeyframeSelector,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_keyframe_selector(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_keyframe_selectors(
        &mut self,
        node: &mut Vec<KeyframeSelector>,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_keyframe_selectors(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_keyframes_name(&mut self, node: &mut KeyframesName, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_keyframes_name(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_keyframes_pseudo_function(
        &mut self,
        node: &mut KeyframesPseudoFunction,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_keyframes_pseudo_function(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_keyframes_pseudo_prefix(
        &mut self,
        node: &mut KeyframesPseudoPrefix,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_keyframes_pseudo_prefix(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_layer_name(&mut self, node: &mut LayerName, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_layer_name(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_layer_name_list(
        &mut self,
        node: &mut LayerNameList,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_layer_name_list(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_layer_names(&mut self, node: &mut Vec<LayerName>, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_layer_names(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_layer_prelude(&mut self, node: &mut LayerPrelude, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_layer_prelude(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_length(&mut self, node: &mut Length, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_length(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_length_percentage(
        &mut self,
        node: &mut LengthPercentage,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_length_percentage(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_list_of_component_values(
        &mut self,
        node: &mut ListOfComponentValues,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_list_of_component_values(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_media_and(&mut self, node: &mut MediaAnd, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_media_and(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_media_condition(
        &mut self,
        node: &mut MediaCondition,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_media_condition(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_media_condition_all_type(
        &mut self,
        node: &mut MediaConditionAllType,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_media_condition_all_type(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_media_condition_all_types(
        &mut self,
        node: &mut Vec<MediaConditionAllType>,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_media_condition_all_types(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_media_condition_type(
        &mut self,
        node: &mut MediaConditionType,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_media_condition_type(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_media_condition_without_or(
        &mut self,
        node: &mut MediaConditionWithoutOr,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_media_condition_without_or(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_media_condition_without_or_type(
        &mut self,
        node: &mut MediaConditionWithoutOrType,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_media_condition_without_or_type(
            &mut **self,
            node,
            __ast_path,
        )
    }

    #[inline]
    fn visit_mut_media_condition_without_or_types(
        &mut self,
        node: &mut Vec<MediaConditionWithoutOrType>,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_media_condition_without_or_types(
            &mut **self,
            node,
            __ast_path,
        )
    }

    #[inline]
    fn visit_mut_media_feature(&mut self, node: &mut MediaFeature, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_media_feature(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_media_feature_boolean(
        &mut self,
        node: &mut MediaFeatureBoolean,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_media_feature_boolean(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_media_feature_name(
        &mut self,
        node: &mut MediaFeatureName,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_media_feature_name(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_media_feature_plain(
        &mut self,
        node: &mut MediaFeaturePlain,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_media_feature_plain(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_media_feature_range(
        &mut self,
        node: &mut MediaFeatureRange,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_media_feature_range(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_media_feature_range_comparison(
        &mut self,
        node: &mut MediaFeatureRangeComparison,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_media_feature_range_comparison(
            &mut **self,
            node,
            __ast_path,
        )
    }

    #[inline]
    fn visit_mut_media_feature_range_interval(
        &mut self,
        node: &mut MediaFeatureRangeInterval,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_media_feature_range_interval(
            &mut **self,
            node,
            __ast_path,
        )
    }

    #[inline]
    fn visit_mut_media_feature_value(
        &mut self,
        node: &mut MediaFeatureValue,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_media_feature_value(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_media_in_parens(
        &mut self,
        node: &mut MediaInParens,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_media_in_parens(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_media_not(&mut self, node: &mut MediaNot, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_media_not(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_media_or(&mut self, node: &mut MediaOr, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_media_or(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_media_query(&mut self, node: &mut MediaQuery, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_media_query(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_media_query_list(
        &mut self,
        node: &mut MediaQueryList,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_media_query_list(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_media_querys(&mut self, node: &mut Vec<MediaQuery>, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_media_querys(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_media_type(&mut self, node: &mut MediaType, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_media_type(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_named_namespace(
        &mut self,
        node: &mut NamedNamespace,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_named_namespace(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_namespace(&mut self, node: &mut Namespace, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_namespace(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_namespace_prefix(
        &mut self,
        node: &mut NamespacePrefix,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_namespace_prefix(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_namespace_prelude(
        &mut self,
        node: &mut NamespacePrelude,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_namespace_prelude(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_namespace_prelude_uri(
        &mut self,
        node: &mut NamespacePreludeUri,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_namespace_prelude_uri(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_nesting_selector(
        &mut self,
        node: &mut NestingSelector,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_nesting_selector(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_number(&mut self, node: &mut Number, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_number(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_number_type(&mut self, node: &mut NumberType, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_number_type(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_opt_at_rule_prelude(
        &mut self,
        node: &mut Option<Box<AtRulePrelude>>,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_opt_at_rule_prelude(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_opt_atom(
        &mut self,
        node: &mut Option<swc_atoms::Atom>,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_opt_atom(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_opt_attribute_selector_matcher(
        &mut self,
        node: &mut Option<AttributeSelectorMatcher>,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_opt_attribute_selector_matcher(
            &mut **self,
            node,
            __ast_path,
        )
    }

    #[inline]
    fn visit_mut_opt_attribute_selector_modifier(
        &mut self,
        node: &mut Option<AttributeSelectorModifier>,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_opt_attribute_selector_modifier(
            &mut **self,
            node,
            __ast_path,
        )
    }

    #[inline]
    fn visit_mut_opt_attribute_selector_value(
        &mut self,
        node: &mut Option<AttributeSelectorValue>,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_opt_attribute_selector_value(
            &mut **self,
            node,
            __ast_path,
        )
    }

    #[inline]
    fn visit_mut_opt_combinator(
        &mut self,
        node: &mut Option<Combinator>,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_opt_combinator(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_opt_container_name(
        &mut self,
        node: &mut Option<ContainerName>,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_opt_container_name(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_opt_forgiving_selector_list(
        &mut self,
        node: &mut Option<ForgivingSelectorList>,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_opt_forgiving_selector_list(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_opt_function(
        &mut self,
        node: &mut Option<Box<Function>>,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_opt_function(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_opt_ident(&mut self, node: &mut Option<Ident>, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_opt_ident(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_opt_import_conditions(
        &mut self,
        node: &mut Option<Box<ImportConditions>>,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_opt_import_conditions(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_opt_import_layer_name(
        &mut self,
        node: &mut Option<Box<ImportLayerName>>,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_opt_import_layer_name(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_opt_important_flag(
        &mut self,
        node: &mut Option<ImportantFlag>,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_opt_important_flag(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_opt_media_condition_type(
        &mut self,
        node: &mut Option<Box<MediaConditionType>>,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_opt_media_condition_type(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_opt_media_query_list(
        &mut self,
        node: &mut Option<Box<MediaQueryList>>,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_opt_media_query_list(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_opt_media_type(
        &mut self,
        node: &mut Option<MediaType>,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_opt_media_type(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_opt_namespace(
        &mut self,
        node: &mut Option<Namespace>,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_opt_namespace(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_opt_namespace_prefix(
        &mut self,
        node: &mut Option<NamespacePrefix>,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_opt_namespace_prefix(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_opt_nesting_selector(
        &mut self,
        node: &mut Option<NestingSelector>,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_opt_nesting_selector(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_opt_number(&mut self, node: &mut Option<Number>, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_opt_number(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_opt_page_selector_pseudos(
        &mut self,
        node: &mut Option<Vec<PageSelectorPseudo>>,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_opt_page_selector_pseudos(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_opt_page_selector_type(
        &mut self,
        node: &mut Option<PageSelectorType>,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_opt_page_selector_type(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_opt_pseudo_class_selector_childrens(
        &mut self,
        node: &mut Option<Vec<PseudoClassSelectorChildren>>,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_opt_pseudo_class_selector_childrens(
            &mut **self,
            node,
            __ast_path,
        )
    }

    #[inline]
    fn visit_mut_opt_pseudo_element_selector_childrens(
        &mut self,
        node: &mut Option<Vec<PseudoElementSelectorChildren>>,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_opt_pseudo_element_selector_childrens(
            &mut **self,
            node,
            __ast_path,
        )
    }

    #[inline]
    fn visit_mut_opt_simple_block(
        &mut self,
        node: &mut Option<SimpleBlock>,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_opt_simple_block(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_opt_type_selector(
        &mut self,
        node: &mut Option<Box<TypeSelector>>,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_opt_type_selector(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_opt_url_modifiers(
        &mut self,
        node: &mut Option<Vec<UrlModifier>>,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_opt_url_modifiers(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_opt_url_value(
        &mut self,
        node: &mut Option<Box<UrlValue>>,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_opt_url_value(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_page_selector(&mut self, node: &mut PageSelector, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_page_selector(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_page_selector_list(
        &mut self,
        node: &mut PageSelectorList,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_page_selector_list(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_page_selector_pseudo(
        &mut self,
        node: &mut PageSelectorPseudo,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_page_selector_pseudo(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_page_selector_pseudos(
        &mut self,
        node: &mut Vec<PageSelectorPseudo>,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_page_selector_pseudos(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_page_selector_type(
        &mut self,
        node: &mut PageSelectorType,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_page_selector_type(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_page_selectors(
        &mut self,
        node: &mut Vec<PageSelector>,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_page_selectors(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_percentage(&mut self, node: &mut Percentage, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_percentage(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_pseudo_class_selector(
        &mut self,
        node: &mut PseudoClassSelector,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_pseudo_class_selector(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_pseudo_class_selector_children(
        &mut self,
        node: &mut PseudoClassSelectorChildren,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_pseudo_class_selector_children(
            &mut **self,
            node,
            __ast_path,
        )
    }

    #[inline]
    fn visit_mut_pseudo_class_selector_childrens(
        &mut self,
        node: &mut Vec<PseudoClassSelectorChildren>,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_pseudo_class_selector_childrens(
            &mut **self,
            node,
            __ast_path,
        )
    }

    #[inline]
    fn visit_mut_pseudo_element_selector(
        &mut self,
        node: &mut PseudoElementSelector,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_pseudo_element_selector(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_pseudo_element_selector_children(
        &mut self,
        node: &mut PseudoElementSelectorChildren,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_pseudo_element_selector_children(
            &mut **self,
            node,
            __ast_path,
        )
    }

    #[inline]
    fn visit_mut_pseudo_element_selector_childrens(
        &mut self,
        node: &mut Vec<PseudoElementSelectorChildren>,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_pseudo_element_selector_childrens(
            &mut **self,
            node,
            __ast_path,
        )
    }

    #[inline]
    fn visit_mut_qualified_rule(&mut self, node: &mut QualifiedRule, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_qualified_rule(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_qualified_rule_prelude(
        &mut self,
        node: &mut QualifiedRulePrelude,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_qualified_rule_prelude(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_query_in_parens(
        &mut self,
        node: &mut QueryInParens,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_query_in_parens(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_ratio(&mut self, node: &mut Ratio, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_ratio(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_relative_selector(
        &mut self,
        node: &mut RelativeSelector,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_relative_selector(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_relative_selector_list(
        &mut self,
        node: &mut RelativeSelectorList,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_relative_selector_list(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_relative_selectors(
        &mut self,
        node: &mut Vec<RelativeSelector>,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_relative_selectors(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_resolution(&mut self, node: &mut Resolution, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_resolution(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_rule(&mut self, node: &mut Rule, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_rule(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_rules(&mut self, node: &mut Vec<Rule>, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_rules(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_scope_range(&mut self, node: &mut ScopeRange, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_scope_range(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_selector_list(&mut self, node: &mut SelectorList, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_selector_list(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_sequence_of_custom_idents(
        &mut self,
        node: &mut SequenceOfCustomIdents,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_sequence_of_custom_idents(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_simple_block(&mut self, node: &mut SimpleBlock, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_simple_block(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_size_feature(&mut self, node: &mut SizeFeature, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_size_feature(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_size_feature_boolean(
        &mut self,
        node: &mut SizeFeatureBoolean,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_size_feature_boolean(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_size_feature_name(
        &mut self,
        node: &mut SizeFeatureName,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_size_feature_name(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_size_feature_plain(
        &mut self,
        node: &mut SizeFeaturePlain,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_size_feature_plain(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_size_feature_range(
        &mut self,
        node: &mut SizeFeatureRange,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_size_feature_range(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_size_feature_range_comparison(
        &mut self,
        node: &mut SizeFeatureRangeComparison,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_size_feature_range_comparison(
            &mut **self,
            node,
            __ast_path,
        )
    }

    #[inline]
    fn visit_mut_size_feature_range_interval(
        &mut self,
        node: &mut SizeFeatureRangeInterval,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_size_feature_range_interval(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_size_feature_value(
        &mut self,
        node: &mut SizeFeatureValue,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_size_feature_value(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_span(&mut self, node: &mut swc_common::Span, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_span(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_str(&mut self, node: &mut Str, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_str(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_style_block(&mut self, node: &mut StyleBlock, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_style_block(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_stylesheet(&mut self, node: &mut Stylesheet, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_stylesheet(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_subclass_selector(
        &mut self,
        node: &mut SubclassSelector,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_subclass_selector(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_subclass_selectors(
        &mut self,
        node: &mut Vec<SubclassSelector>,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_subclass_selectors(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_supports_and(&mut self, node: &mut SupportsAnd, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_supports_and(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_supports_condition(
        &mut self,
        node: &mut SupportsCondition,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_supports_condition(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_supports_condition_type(
        &mut self,
        node: &mut SupportsConditionType,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_supports_condition_type(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_supports_condition_types(
        &mut self,
        node: &mut Vec<SupportsConditionType>,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_supports_condition_types(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_supports_feature(
        &mut self,
        node: &mut SupportsFeature,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_supports_feature(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_supports_in_parens(
        &mut self,
        node: &mut SupportsInParens,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_supports_in_parens(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_supports_not(&mut self, node: &mut SupportsNot, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_supports_not(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_supports_or(&mut self, node: &mut SupportsOr, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_supports_or(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_tag_name_selector(
        &mut self,
        node: &mut TagNameSelector,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_tag_name_selector(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_time(&mut self, node: &mut Time, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_time(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_time_percentage(
        &mut self,
        node: &mut TimePercentage,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_time_percentage(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_token(&mut self, node: &mut Token, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_token(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_token_and_span(&mut self, node: &mut TokenAndSpan, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_token_and_span(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_type_selector(&mut self, node: &mut TypeSelector, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_type_selector(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_unicode_range(&mut self, node: &mut UnicodeRange, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_unicode_range(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_universal_selector(
        &mut self,
        node: &mut UniversalSelector,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_universal_selector(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_unknown_dimension(
        &mut self,
        node: &mut UnknownDimension,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_unknown_dimension(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_url(&mut self, node: &mut Url, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_url(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_url_key_value(&mut self, node: &mut UrlKeyValue, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_url_key_value(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_url_modifier(&mut self, node: &mut UrlModifier, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_url_modifier(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_url_modifiers(
        &mut self,
        node: &mut Vec<UrlModifier>,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_url_modifiers(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_url_value(&mut self, node: &mut UrlValue, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_url_value(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_url_value_raw(&mut self, node: &mut UrlValueRaw, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_url_value_raw(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_wq_name(&mut self, node: &mut WqName, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_wq_name(&mut **self, node, __ast_path)
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V> VisitMutAstPath for Box<V>
where
    V: ?Sized + VisitMutAstPath,
{
    #[inline]
    fn visit_mut_absolute_color_base(
        &mut self,
        node: &mut AbsoluteColorBase,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_absolute_color_base(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_alpha_value(&mut self, node: &mut AlphaValue, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_alpha_value(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_an_plus_b(&mut self, node: &mut AnPlusB, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_an_plus_b(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_an_plus_b_notation(
        &mut self,
        node: &mut AnPlusBNotation,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_an_plus_b_notation(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_angle(&mut self, node: &mut Angle, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_angle(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_angle_percentage(
        &mut self,
        node: &mut AnglePercentage,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_angle_percentage(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_any_namespace(&mut self, node: &mut AnyNamespace, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_any_namespace(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_at_rule(&mut self, node: &mut AtRule, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_at_rule(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_at_rule_name(&mut self, node: &mut AtRuleName, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_at_rule_name(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_at_rule_prelude(
        &mut self,
        node: &mut AtRulePrelude,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_at_rule_prelude(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_atom(&mut self, node: &mut swc_atoms::Atom, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_atom(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_attribute_selector(
        &mut self,
        node: &mut AttributeSelector,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_attribute_selector(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_attribute_selector_matcher(
        &mut self,
        node: &mut AttributeSelectorMatcher,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_attribute_selector_matcher(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_attribute_selector_matcher_value(
        &mut self,
        node: &mut AttributeSelectorMatcherValue,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_attribute_selector_matcher_value(
            &mut **self,
            node,
            __ast_path,
        )
    }

    #[inline]
    fn visit_mut_attribute_selector_modifier(
        &mut self,
        node: &mut AttributeSelectorModifier,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_attribute_selector_modifier(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_attribute_selector_value(
        &mut self,
        node: &mut AttributeSelectorValue,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_attribute_selector_value(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_bin_op(&mut self, node: &mut BinOp, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_bin_op(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_calc_operator(&mut self, node: &mut CalcOperator, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_calc_operator(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_calc_operator_type(
        &mut self,
        node: &mut CalcOperatorType,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_calc_operator_type(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_calc_product(&mut self, node: &mut CalcProduct, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_calc_product(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_calc_product_or_operator(
        &mut self,
        node: &mut CalcProductOrOperator,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_calc_product_or_operator(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_calc_product_or_operators(
        &mut self,
        node: &mut Vec<CalcProductOrOperator>,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_calc_product_or_operators(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_calc_sum(&mut self, node: &mut CalcSum, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_calc_sum(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_calc_value(&mut self, node: &mut CalcValue, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_calc_value(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_calc_value_or_operator(
        &mut self,
        node: &mut CalcValueOrOperator,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_calc_value_or_operator(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_calc_value_or_operators(
        &mut self,
        node: &mut Vec<CalcValueOrOperator>,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_calc_value_or_operators(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_class_selector(&mut self, node: &mut ClassSelector, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_class_selector(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_cmyk_component(&mut self, node: &mut CmykComponent, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_cmyk_component(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_color(&mut self, node: &mut Color, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_color(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_color_profile_name(
        &mut self,
        node: &mut ColorProfileName,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_color_profile_name(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_combinator(&mut self, node: &mut Combinator, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_combinator(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_combinator_value(
        &mut self,
        node: &mut CombinatorValue,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_combinator_value(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_complex_selector(
        &mut self,
        node: &mut ComplexSelector,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_complex_selector(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_complex_selector_children(
        &mut self,
        node: &mut ComplexSelectorChildren,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_complex_selector_children(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_complex_selector_childrens(
        &mut self,
        node: &mut Vec<ComplexSelectorChildren>,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_complex_selector_childrens(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_complex_selectors(
        &mut self,
        node: &mut Vec<ComplexSelector>,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_complex_selectors(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_component_value(
        &mut self,
        node: &mut ComponentValue,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_component_value(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_component_values(
        &mut self,
        node: &mut Vec<ComponentValue>,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_component_values(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_compound_selector(
        &mut self,
        node: &mut CompoundSelector,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_compound_selector(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_compound_selector_list(
        &mut self,
        node: &mut CompoundSelectorList,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_compound_selector_list(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_compound_selectors(
        &mut self,
        node: &mut Vec<CompoundSelector>,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_compound_selectors(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_container_condition(
        &mut self,
        node: &mut ContainerCondition,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_container_condition(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_container_name(&mut self, node: &mut ContainerName, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_container_name(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_container_query(
        &mut self,
        node: &mut ContainerQuery,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_container_query(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_container_query_and(
        &mut self,
        node: &mut ContainerQueryAnd,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_container_query_and(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_container_query_not(
        &mut self,
        node: &mut ContainerQueryNot,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_container_query_not(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_container_query_or(
        &mut self,
        node: &mut ContainerQueryOr,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_container_query_or(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_container_query_type(
        &mut self,
        node: &mut ContainerQueryType,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_container_query_type(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_container_query_types(
        &mut self,
        node: &mut Vec<ContainerQueryType>,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_container_query_types(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_custom_highlight_name(
        &mut self,
        node: &mut CustomHighlightName,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_custom_highlight_name(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_custom_ident(&mut self, node: &mut CustomIdent, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_custom_ident(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_custom_idents(
        &mut self,
        node: &mut Vec<CustomIdent>,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_custom_idents(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_custom_media_query(
        &mut self,
        node: &mut CustomMediaQuery,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_custom_media_query(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_custom_media_query_media_type(
        &mut self,
        node: &mut CustomMediaQueryMediaType,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_custom_media_query_media_type(
            &mut **self,
            node,
            __ast_path,
        )
    }

    #[inline]
    fn visit_mut_custom_property_name(
        &mut self,
        node: &mut CustomPropertyName,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_custom_property_name(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_dashed_ident(&mut self, node: &mut DashedIdent, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_dashed_ident(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_declaration(&mut self, node: &mut Declaration, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_declaration(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_declaration_name(
        &mut self,
        node: &mut DeclarationName,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_declaration_name(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_declaration_or_at_rule(
        &mut self,
        node: &mut DeclarationOrAtRule,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_declaration_or_at_rule(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_delimiter(&mut self, node: &mut Delimiter, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_delimiter(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_delimiter_value(
        &mut self,
        node: &mut DelimiterValue,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_delimiter_value(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_dimension(&mut self, node: &mut Dimension, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_dimension(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_dimension_token(
        &mut self,
        node: &mut DimensionToken,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_dimension_token(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_document_prelude(
        &mut self,
        node: &mut DocumentPrelude,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_document_prelude(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_document_prelude_matching_function(
        &mut self,
        node: &mut DocumentPreludeMatchingFunction,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_document_prelude_matching_function(
            &mut **self,
            node,
            __ast_path,
        )
    }

    #[inline]
    fn visit_mut_document_prelude_matching_functions(
        &mut self,
        node: &mut Vec<DocumentPreludeMatchingFunction>,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_document_prelude_matching_functions(
            &mut **self,
            node,
            __ast_path,
        )
    }

    #[inline]
    fn visit_mut_extension_name(&mut self, node: &mut ExtensionName, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_extension_name(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_family_name(&mut self, node: &mut FamilyName, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_family_name(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_family_names(&mut self, node: &mut Vec<FamilyName>, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_family_names(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_flex(&mut self, node: &mut Flex, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_flex(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_font_feature_values_prelude(
        &mut self,
        node: &mut FontFeatureValuesPrelude,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_font_feature_values_prelude(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_forgiving_complex_selector(
        &mut self,
        node: &mut ForgivingComplexSelector,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_forgiving_complex_selector(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_forgiving_complex_selectors(
        &mut self,
        node: &mut Vec<ForgivingComplexSelector>,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_forgiving_complex_selectors(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_forgiving_relative_selector(
        &mut self,
        node: &mut ForgivingRelativeSelector,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_forgiving_relative_selector(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_forgiving_relative_selector_list(
        &mut self,
        node: &mut ForgivingRelativeSelectorList,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_forgiving_relative_selector_list(
            &mut **self,
            node,
            __ast_path,
        )
    }

    #[inline]
    fn visit_mut_forgiving_relative_selectors(
        &mut self,
        node: &mut Vec<ForgivingRelativeSelector>,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_forgiving_relative_selectors(
            &mut **self,
            node,
            __ast_path,
        )
    }

    #[inline]
    fn visit_mut_forgiving_selector_list(
        &mut self,
        node: &mut ForgivingSelectorList,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_forgiving_selector_list(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_frequency(&mut self, node: &mut Frequency, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_frequency(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_frequency_percentage(
        &mut self,
        node: &mut FrequencyPercentage,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_frequency_percentage(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_function(&mut self, node: &mut Function, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_function(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_function_name(&mut self, node: &mut FunctionName, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_function_name(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_general_enclosed(
        &mut self,
        node: &mut GeneralEnclosed,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_general_enclosed(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_hex_color(&mut self, node: &mut HexColor, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_hex_color(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_hue(&mut self, node: &mut Hue, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_hue(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_id_selector(&mut self, node: &mut IdSelector, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_id_selector(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_ident(&mut self, node: &mut Ident, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_ident(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_idents(&mut self, node: &mut Vec<Ident>, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_idents(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_import_conditions(
        &mut self,
        node: &mut ImportConditions,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_import_conditions(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_import_href(&mut self, node: &mut ImportHref, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_import_href(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_import_layer_name(
        &mut self,
        node: &mut ImportLayerName,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_import_layer_name(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_import_prelude(&mut self, node: &mut ImportPrelude, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_import_prelude(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_important_flag(&mut self, node: &mut ImportantFlag, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_important_flag(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_integer(&mut self, node: &mut Integer, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_integer(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_keyframe_block(&mut self, node: &mut KeyframeBlock, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_keyframe_block(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_keyframe_selector(
        &mut self,
        node: &mut KeyframeSelector,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_keyframe_selector(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_keyframe_selectors(
        &mut self,
        node: &mut Vec<KeyframeSelector>,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_keyframe_selectors(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_keyframes_name(&mut self, node: &mut KeyframesName, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_keyframes_name(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_keyframes_pseudo_function(
        &mut self,
        node: &mut KeyframesPseudoFunction,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_keyframes_pseudo_function(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_keyframes_pseudo_prefix(
        &mut self,
        node: &mut KeyframesPseudoPrefix,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_keyframes_pseudo_prefix(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_layer_name(&mut self, node: &mut LayerName, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_layer_name(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_layer_name_list(
        &mut self,
        node: &mut LayerNameList,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_layer_name_list(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_layer_names(&mut self, node: &mut Vec<LayerName>, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_layer_names(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_layer_prelude(&mut self, node: &mut LayerPrelude, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_layer_prelude(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_length(&mut self, node: &mut Length, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_length(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_length_percentage(
        &mut self,
        node: &mut LengthPercentage,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_length_percentage(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_list_of_component_values(
        &mut self,
        node: &mut ListOfComponentValues,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_list_of_component_values(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_media_and(&mut self, node: &mut MediaAnd, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_media_and(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_media_condition(
        &mut self,
        node: &mut MediaCondition,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_media_condition(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_media_condition_all_type(
        &mut self,
        node: &mut MediaConditionAllType,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_media_condition_all_type(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_media_condition_all_types(
        &mut self,
        node: &mut Vec<MediaConditionAllType>,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_media_condition_all_types(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_media_condition_type(
        &mut self,
        node: &mut MediaConditionType,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_media_condition_type(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_media_condition_without_or(
        &mut self,
        node: &mut MediaConditionWithoutOr,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_media_condition_without_or(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_media_condition_without_or_type(
        &mut self,
        node: &mut MediaConditionWithoutOrType,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_media_condition_without_or_type(
            &mut **self,
            node,
            __ast_path,
        )
    }

    #[inline]
    fn visit_mut_media_condition_without_or_types(
        &mut self,
        node: &mut Vec<MediaConditionWithoutOrType>,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_media_condition_without_or_types(
            &mut **self,
            node,
            __ast_path,
        )
    }

    #[inline]
    fn visit_mut_media_feature(&mut self, node: &mut MediaFeature, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_media_feature(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_media_feature_boolean(
        &mut self,
        node: &mut MediaFeatureBoolean,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_media_feature_boolean(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_media_feature_name(
        &mut self,
        node: &mut MediaFeatureName,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_media_feature_name(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_media_feature_plain(
        &mut self,
        node: &mut MediaFeaturePlain,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_media_feature_plain(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_media_feature_range(
        &mut self,
        node: &mut MediaFeatureRange,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_media_feature_range(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_media_feature_range_comparison(
        &mut self,
        node: &mut MediaFeatureRangeComparison,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_media_feature_range_comparison(
            &mut **self,
            node,
            __ast_path,
        )
    }

    #[inline]
    fn visit_mut_media_feature_range_interval(
        &mut self,
        node: &mut MediaFeatureRangeInterval,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_media_feature_range_interval(
            &mut **self,
            node,
            __ast_path,
        )
    }

    #[inline]
    fn visit_mut_media_feature_value(
        &mut self,
        node: &mut MediaFeatureValue,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_media_feature_value(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_media_in_parens(
        &mut self,
        node: &mut MediaInParens,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_media_in_parens(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_media_not(&mut self, node: &mut MediaNot, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_media_not(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_media_or(&mut self, node: &mut MediaOr, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_media_or(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_media_query(&mut self, node: &mut MediaQuery, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_media_query(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_media_query_list(
        &mut self,
        node: &mut MediaQueryList,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_media_query_list(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_media_querys(&mut self, node: &mut Vec<MediaQuery>, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_media_querys(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_media_type(&mut self, node: &mut MediaType, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_media_type(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_named_namespace(
        &mut self,
        node: &mut NamedNamespace,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_named_namespace(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_namespace(&mut self, node: &mut Namespace, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_namespace(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_namespace_prefix(
        &mut self,
        node: &mut NamespacePrefix,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_namespace_prefix(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_namespace_prelude(
        &mut self,
        node: &mut NamespacePrelude,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_namespace_prelude(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_namespace_prelude_uri(
        &mut self,
        node: &mut NamespacePreludeUri,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_namespace_prelude_uri(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_nesting_selector(
        &mut self,
        node: &mut NestingSelector,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_nesting_selector(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_number(&mut self, node: &mut Number, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_number(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_number_type(&mut self, node: &mut NumberType, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_number_type(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_opt_at_rule_prelude(
        &mut self,
        node: &mut Option<Box<AtRulePrelude>>,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_opt_at_rule_prelude(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_opt_atom(
        &mut self,
        node: &mut Option<swc_atoms::Atom>,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_opt_atom(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_opt_attribute_selector_matcher(
        &mut self,
        node: &mut Option<AttributeSelectorMatcher>,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_opt_attribute_selector_matcher(
            &mut **self,
            node,
            __ast_path,
        )
    }

    #[inline]
    fn visit_mut_opt_attribute_selector_modifier(
        &mut self,
        node: &mut Option<AttributeSelectorModifier>,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_opt_attribute_selector_modifier(
            &mut **self,
            node,
            __ast_path,
        )
    }

    #[inline]
    fn visit_mut_opt_attribute_selector_value(
        &mut self,
        node: &mut Option<AttributeSelectorValue>,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_opt_attribute_selector_value(
            &mut **self,
            node,
            __ast_path,
        )
    }

    #[inline]
    fn visit_mut_opt_combinator(
        &mut self,
        node: &mut Option<Combinator>,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_opt_combinator(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_opt_container_name(
        &mut self,
        node: &mut Option<ContainerName>,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_opt_container_name(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_opt_forgiving_selector_list(
        &mut self,
        node: &mut Option<ForgivingSelectorList>,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_opt_forgiving_selector_list(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_opt_function(
        &mut self,
        node: &mut Option<Box<Function>>,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_opt_function(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_opt_ident(&mut self, node: &mut Option<Ident>, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_opt_ident(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_opt_import_conditions(
        &mut self,
        node: &mut Option<Box<ImportConditions>>,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_opt_import_conditions(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_opt_import_layer_name(
        &mut self,
        node: &mut Option<Box<ImportLayerName>>,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_opt_import_layer_name(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_opt_important_flag(
        &mut self,
        node: &mut Option<ImportantFlag>,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_opt_important_flag(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_opt_media_condition_type(
        &mut self,
        node: &mut Option<Box<MediaConditionType>>,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_opt_media_condition_type(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_opt_media_query_list(
        &mut self,
        node: &mut Option<Box<MediaQueryList>>,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_opt_media_query_list(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_opt_media_type(
        &mut self,
        node: &mut Option<MediaType>,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_opt_media_type(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_opt_namespace(
        &mut self,
        node: &mut Option<Namespace>,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_opt_namespace(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_opt_namespace_prefix(
        &mut self,
        node: &mut Option<NamespacePrefix>,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_opt_namespace_prefix(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_opt_nesting_selector(
        &mut self,
        node: &mut Option<NestingSelector>,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_opt_nesting_selector(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_opt_number(&mut self, node: &mut Option<Number>, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_opt_number(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_opt_page_selector_pseudos(
        &mut self,
        node: &mut Option<Vec<PageSelectorPseudo>>,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_opt_page_selector_pseudos(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_opt_page_selector_type(
        &mut self,
        node: &mut Option<PageSelectorType>,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_opt_page_selector_type(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_opt_pseudo_class_selector_childrens(
        &mut self,
        node: &mut Option<Vec<PseudoClassSelectorChildren>>,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_opt_pseudo_class_selector_childrens(
            &mut **self,
            node,
            __ast_path,
        )
    }

    #[inline]
    fn visit_mut_opt_pseudo_element_selector_childrens(
        &mut self,
        node: &mut Option<Vec<PseudoElementSelectorChildren>>,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_opt_pseudo_element_selector_childrens(
            &mut **self,
            node,
            __ast_path,
        )
    }

    #[inline]
    fn visit_mut_opt_simple_block(
        &mut self,
        node: &mut Option<SimpleBlock>,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_opt_simple_block(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_opt_type_selector(
        &mut self,
        node: &mut Option<Box<TypeSelector>>,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_opt_type_selector(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_opt_url_modifiers(
        &mut self,
        node: &mut Option<Vec<UrlModifier>>,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_opt_url_modifiers(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_opt_url_value(
        &mut self,
        node: &mut Option<Box<UrlValue>>,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_opt_url_value(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_page_selector(&mut self, node: &mut PageSelector, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_page_selector(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_page_selector_list(
        &mut self,
        node: &mut PageSelectorList,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_page_selector_list(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_page_selector_pseudo(
        &mut self,
        node: &mut PageSelectorPseudo,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_page_selector_pseudo(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_page_selector_pseudos(
        &mut self,
        node: &mut Vec<PageSelectorPseudo>,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_page_selector_pseudos(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_page_selector_type(
        &mut self,
        node: &mut PageSelectorType,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_page_selector_type(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_page_selectors(
        &mut self,
        node: &mut Vec<PageSelector>,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_page_selectors(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_percentage(&mut self, node: &mut Percentage, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_percentage(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_pseudo_class_selector(
        &mut self,
        node: &mut PseudoClassSelector,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_pseudo_class_selector(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_pseudo_class_selector_children(
        &mut self,
        node: &mut PseudoClassSelectorChildren,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_pseudo_class_selector_children(
            &mut **self,
            node,
            __ast_path,
        )
    }

    #[inline]
    fn visit_mut_pseudo_class_selector_childrens(
        &mut self,
        node: &mut Vec<PseudoClassSelectorChildren>,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_pseudo_class_selector_childrens(
            &mut **self,
            node,
            __ast_path,
        )
    }

    #[inline]
    fn visit_mut_pseudo_element_selector(
        &mut self,
        node: &mut PseudoElementSelector,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_pseudo_element_selector(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_pseudo_element_selector_children(
        &mut self,
        node: &mut PseudoElementSelectorChildren,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_pseudo_element_selector_children(
            &mut **self,
            node,
            __ast_path,
        )
    }

    #[inline]
    fn visit_mut_pseudo_element_selector_childrens(
        &mut self,
        node: &mut Vec<PseudoElementSelectorChildren>,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_pseudo_element_selector_childrens(
            &mut **self,
            node,
            __ast_path,
        )
    }

    #[inline]
    fn visit_mut_qualified_rule(&mut self, node: &mut QualifiedRule, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_qualified_rule(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_qualified_rule_prelude(
        &mut self,
        node: &mut QualifiedRulePrelude,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_qualified_rule_prelude(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_query_in_parens(
        &mut self,
        node: &mut QueryInParens,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_query_in_parens(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_ratio(&mut self, node: &mut Ratio, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_ratio(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_relative_selector(
        &mut self,
        node: &mut RelativeSelector,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_relative_selector(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_relative_selector_list(
        &mut self,
        node: &mut RelativeSelectorList,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_relative_selector_list(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_relative_selectors(
        &mut self,
        node: &mut Vec<RelativeSelector>,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_relative_selectors(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_resolution(&mut self, node: &mut Resolution, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_resolution(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_rule(&mut self, node: &mut Rule, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_rule(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_rules(&mut self, node: &mut Vec<Rule>, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_rules(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_scope_range(&mut self, node: &mut ScopeRange, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_scope_range(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_selector_list(&mut self, node: &mut SelectorList, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_selector_list(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_sequence_of_custom_idents(
        &mut self,
        node: &mut SequenceOfCustomIdents,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_sequence_of_custom_idents(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_simple_block(&mut self, node: &mut SimpleBlock, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_simple_block(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_size_feature(&mut self, node: &mut SizeFeature, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_size_feature(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_size_feature_boolean(
        &mut self,
        node: &mut SizeFeatureBoolean,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_size_feature_boolean(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_size_feature_name(
        &mut self,
        node: &mut SizeFeatureName,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_size_feature_name(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_size_feature_plain(
        &mut self,
        node: &mut SizeFeaturePlain,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_size_feature_plain(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_size_feature_range(
        &mut self,
        node: &mut SizeFeatureRange,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_size_feature_range(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_size_feature_range_comparison(
        &mut self,
        node: &mut SizeFeatureRangeComparison,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_size_feature_range_comparison(
            &mut **self,
            node,
            __ast_path,
        )
    }

    #[inline]
    fn visit_mut_size_feature_range_interval(
        &mut self,
        node: &mut SizeFeatureRangeInterval,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_size_feature_range_interval(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_size_feature_value(
        &mut self,
        node: &mut SizeFeatureValue,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_size_feature_value(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_span(&mut self, node: &mut swc_common::Span, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_span(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_str(&mut self, node: &mut Str, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_str(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_style_block(&mut self, node: &mut StyleBlock, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_style_block(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_stylesheet(&mut self, node: &mut Stylesheet, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_stylesheet(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_subclass_selector(
        &mut self,
        node: &mut SubclassSelector,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_subclass_selector(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_subclass_selectors(
        &mut self,
        node: &mut Vec<SubclassSelector>,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_subclass_selectors(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_supports_and(&mut self, node: &mut SupportsAnd, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_supports_and(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_supports_condition(
        &mut self,
        node: &mut SupportsCondition,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_supports_condition(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_supports_condition_type(
        &mut self,
        node: &mut SupportsConditionType,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_supports_condition_type(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_supports_condition_types(
        &mut self,
        node: &mut Vec<SupportsConditionType>,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_supports_condition_types(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_supports_feature(
        &mut self,
        node: &mut SupportsFeature,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_supports_feature(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_supports_in_parens(
        &mut self,
        node: &mut SupportsInParens,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_supports_in_parens(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_supports_not(&mut self, node: &mut SupportsNot, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_supports_not(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_supports_or(&mut self, node: &mut SupportsOr, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_supports_or(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_tag_name_selector(
        &mut self,
        node: &mut TagNameSelector,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_tag_name_selector(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_time(&mut self, node: &mut Time, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_time(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_time_percentage(
        &mut self,
        node: &mut TimePercentage,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_time_percentage(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_token(&mut self, node: &mut Token, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_token(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_token_and_span(&mut self, node: &mut TokenAndSpan, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_token_and_span(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_type_selector(&mut self, node: &mut TypeSelector, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_type_selector(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_unicode_range(&mut self, node: &mut UnicodeRange, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_unicode_range(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_universal_selector(
        &mut self,
        node: &mut UniversalSelector,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_universal_selector(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_unknown_dimension(
        &mut self,
        node: &mut UnknownDimension,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_unknown_dimension(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_url(&mut self, node: &mut Url, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_url(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_url_key_value(&mut self, node: &mut UrlKeyValue, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_url_key_value(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_url_modifier(&mut self, node: &mut UrlModifier, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_url_modifier(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_url_modifiers(
        &mut self,
        node: &mut Vec<UrlModifier>,
        __ast_path: &mut AstKindPath,
    ) {
        <V as VisitMutAstPath>::visit_mut_url_modifiers(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_url_value(&mut self, node: &mut UrlValue, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_url_value(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_url_value_raw(&mut self, node: &mut UrlValueRaw, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_url_value_raw(&mut **self, node, __ast_path)
    }

    #[inline]
    fn visit_mut_wq_name(&mut self, node: &mut WqName, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_wq_name(&mut **self, node, __ast_path)
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<A, B> VisitMutAstPath for ::swc_visit::Either<A, B>
where
    A: VisitMutAstPath,
    B: VisitMutAstPath,
{
    #[inline]
    fn visit_mut_absolute_color_base(
        &mut self,
        node: &mut AbsoluteColorBase,
        __ast_path: &mut AstKindPath,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_absolute_color_base(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_absolute_color_base(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_alpha_value(&mut self, node: &mut AlphaValue, __ast_path: &mut AstKindPath) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_alpha_value(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_alpha_value(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_an_plus_b(&mut self, node: &mut AnPlusB, __ast_path: &mut AstKindPath) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_an_plus_b(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_an_plus_b(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_an_plus_b_notation(
        &mut self,
        node: &mut AnPlusBNotation,
        __ast_path: &mut AstKindPath,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_an_plus_b_notation(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_an_plus_b_notation(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_angle(&mut self, node: &mut Angle, __ast_path: &mut AstKindPath) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_angle(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_angle(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_angle_percentage(
        &mut self,
        node: &mut AnglePercentage,
        __ast_path: &mut AstKindPath,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_angle_percentage(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_angle_percentage(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_any_namespace(&mut self, node: &mut AnyNamespace, __ast_path: &mut AstKindPath) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_any_namespace(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_any_namespace(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_at_rule(&mut self, node: &mut AtRule, __ast_path: &mut AstKindPath) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_at_rule(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_at_rule(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_at_rule_name(&mut self, node: &mut AtRuleName, __ast_path: &mut AstKindPath) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_at_rule_name(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_at_rule_name(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_at_rule_prelude(
        &mut self,
        node: &mut AtRulePrelude,
        __ast_path: &mut AstKindPath,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_at_rule_prelude(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_at_rule_prelude(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_atom(&mut self, node: &mut swc_atoms::Atom, __ast_path: &mut AstKindPath) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_atom(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_atom(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_attribute_selector(
        &mut self,
        node: &mut AttributeSelector,
        __ast_path: &mut AstKindPath,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_attribute_selector(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_attribute_selector(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_attribute_selector_matcher(
        &mut self,
        node: &mut AttributeSelectorMatcher,
        __ast_path: &mut AstKindPath,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_attribute_selector_matcher(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_attribute_selector_matcher(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_attribute_selector_matcher_value(
        &mut self,
        node: &mut AttributeSelectorMatcherValue,
        __ast_path: &mut AstKindPath,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_attribute_selector_matcher_value(
                    visitor, node, __ast_path,
                )
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_attribute_selector_matcher_value(
                    visitor, node, __ast_path,
                )
            }
        }
    }

    #[inline]
    fn visit_mut_attribute_selector_modifier(
        &mut self,
        node: &mut AttributeSelectorModifier,
        __ast_path: &mut AstKindPath,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_attribute_selector_modifier(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_attribute_selector_modifier(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_attribute_selector_value(
        &mut self,
        node: &mut AttributeSelectorValue,
        __ast_path: &mut AstKindPath,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_attribute_selector_value(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_attribute_selector_value(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_bin_op(&mut self, node: &mut BinOp, __ast_path: &mut AstKindPath) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_bin_op(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_bin_op(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_calc_operator(&mut self, node: &mut CalcOperator, __ast_path: &mut AstKindPath) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_calc_operator(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_calc_operator(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_calc_operator_type(
        &mut self,
        node: &mut CalcOperatorType,
        __ast_path: &mut AstKindPath,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_calc_operator_type(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_calc_operator_type(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_calc_product(&mut self, node: &mut CalcProduct, __ast_path: &mut AstKindPath) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_calc_product(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_calc_product(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_calc_product_or_operator(
        &mut self,
        node: &mut CalcProductOrOperator,
        __ast_path: &mut AstKindPath,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_calc_product_or_operator(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_calc_product_or_operator(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_calc_product_or_operators(
        &mut self,
        node: &mut Vec<CalcProductOrOperator>,
        __ast_path: &mut AstKindPath,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_calc_product_or_operators(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_calc_product_or_operators(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_calc_sum(&mut self, node: &mut CalcSum, __ast_path: &mut AstKindPath) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_calc_sum(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_calc_sum(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_calc_value(&mut self, node: &mut CalcValue, __ast_path: &mut AstKindPath) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_calc_value(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_calc_value(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_calc_value_or_operator(
        &mut self,
        node: &mut CalcValueOrOperator,
        __ast_path: &mut AstKindPath,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_calc_value_or_operator(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_calc_value_or_operator(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_calc_value_or_operators(
        &mut self,
        node: &mut Vec<CalcValueOrOperator>,
        __ast_path: &mut AstKindPath,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_calc_value_or_operators(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_calc_value_or_operators(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_class_selector(&mut self, node: &mut ClassSelector, __ast_path: &mut AstKindPath) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_class_selector(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_class_selector(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_cmyk_component(&mut self, node: &mut CmykComponent, __ast_path: &mut AstKindPath) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_cmyk_component(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_cmyk_component(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_color(&mut self, node: &mut Color, __ast_path: &mut AstKindPath) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_color(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_color(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_color_profile_name(
        &mut self,
        node: &mut ColorProfileName,
        __ast_path: &mut AstKindPath,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_color_profile_name(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_color_profile_name(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_combinator(&mut self, node: &mut Combinator, __ast_path: &mut AstKindPath) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_combinator(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_combinator(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_combinator_value(
        &mut self,
        node: &mut CombinatorValue,
        __ast_path: &mut AstKindPath,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_combinator_value(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_combinator_value(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_complex_selector(
        &mut self,
        node: &mut ComplexSelector,
        __ast_path: &mut AstKindPath,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_complex_selector(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_complex_selector(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_complex_selector_children(
        &mut self,
        node: &mut ComplexSelectorChildren,
        __ast_path: &mut AstKindPath,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_complex_selector_children(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_complex_selector_children(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_complex_selector_childrens(
        &mut self,
        node: &mut Vec<ComplexSelectorChildren>,
        __ast_path: &mut AstKindPath,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_complex_selector_childrens(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_complex_selector_childrens(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_complex_selectors(
        &mut self,
        node: &mut Vec<ComplexSelector>,
        __ast_path: &mut AstKindPath,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_complex_selectors(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_complex_selectors(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_component_value(
        &mut self,
        node: &mut ComponentValue,
        __ast_path: &mut AstKindPath,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_component_value(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_component_value(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_component_values(
        &mut self,
        node: &mut Vec<ComponentValue>,
        __ast_path: &mut AstKindPath,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_component_values(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_component_values(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_compound_selector(
        &mut self,
        node: &mut CompoundSelector,
        __ast_path: &mut AstKindPath,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_compound_selector(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_compound_selector(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_compound_selector_list(
        &mut self,
        node: &mut CompoundSelectorList,
        __ast_path: &mut AstKindPath,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_compound_selector_list(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_compound_selector_list(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_compound_selectors(
        &mut self,
        node: &mut Vec<CompoundSelector>,
        __ast_path: &mut AstKindPath,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_compound_selectors(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_compound_selectors(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_container_condition(
        &mut self,
        node: &mut ContainerCondition,
        __ast_path: &mut AstKindPath,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_container_condition(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_container_condition(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_container_name(&mut self, node: &mut ContainerName, __ast_path: &mut AstKindPath) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_container_name(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_container_name(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_container_query(
        &mut self,
        node: &mut ContainerQuery,
        __ast_path: &mut AstKindPath,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_container_query(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_container_query(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_container_query_and(
        &mut self,
        node: &mut ContainerQueryAnd,
        __ast_path: &mut AstKindPath,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_container_query_and(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_container_query_and(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_container_query_not(
        &mut self,
        node: &mut ContainerQueryNot,
        __ast_path: &mut AstKindPath,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_container_query_not(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_container_query_not(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_container_query_or(
        &mut self,
        node: &mut ContainerQueryOr,
        __ast_path: &mut AstKindPath,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_container_query_or(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_container_query_or(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_container_query_type(
        &mut self,
        node: &mut ContainerQueryType,
        __ast_path: &mut AstKindPath,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_container_query_type(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_container_query_type(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_container_query_types(
        &mut self,
        node: &mut Vec<ContainerQueryType>,
        __ast_path: &mut AstKindPath,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_container_query_types(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_container_query_types(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_custom_highlight_name(
        &mut self,
        node: &mut CustomHighlightName,
        __ast_path: &mut AstKindPath,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_custom_highlight_name(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_custom_highlight_name(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_custom_ident(&mut self, node: &mut CustomIdent, __ast_path: &mut AstKindPath) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_custom_ident(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_custom_ident(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_custom_idents(
        &mut self,
        node: &mut Vec<CustomIdent>,
        __ast_path: &mut AstKindPath,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_custom_idents(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_custom_idents(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_custom_media_query(
        &mut self,
        node: &mut CustomMediaQuery,
        __ast_path: &mut AstKindPath,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_custom_media_query(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_custom_media_query(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_custom_media_query_media_type(
        &mut self,
        node: &mut CustomMediaQueryMediaType,
        __ast_path: &mut AstKindPath,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_custom_media_query_media_type(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_custom_media_query_media_type(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_custom_property_name(
        &mut self,
        node: &mut CustomPropertyName,
        __ast_path: &mut AstKindPath,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_custom_property_name(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_custom_property_name(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_dashed_ident(&mut self, node: &mut DashedIdent, __ast_path: &mut AstKindPath) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_dashed_ident(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_dashed_ident(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_declaration(&mut self, node: &mut Declaration, __ast_path: &mut AstKindPath) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_declaration(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_declaration(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_declaration_name(
        &mut self,
        node: &mut DeclarationName,
        __ast_path: &mut AstKindPath,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_declaration_name(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_declaration_name(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_declaration_or_at_rule(
        &mut self,
        node: &mut DeclarationOrAtRule,
        __ast_path: &mut AstKindPath,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_declaration_or_at_rule(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_declaration_or_at_rule(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_delimiter(&mut self, node: &mut Delimiter, __ast_path: &mut AstKindPath) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_delimiter(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_delimiter(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_delimiter_value(
        &mut self,
        node: &mut DelimiterValue,
        __ast_path: &mut AstKindPath,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_delimiter_value(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_delimiter_value(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_dimension(&mut self, node: &mut Dimension, __ast_path: &mut AstKindPath) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_dimension(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_dimension(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_dimension_token(
        &mut self,
        node: &mut DimensionToken,
        __ast_path: &mut AstKindPath,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_dimension_token(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_dimension_token(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_document_prelude(
        &mut self,
        node: &mut DocumentPrelude,
        __ast_path: &mut AstKindPath,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_document_prelude(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_document_prelude(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_document_prelude_matching_function(
        &mut self,
        node: &mut DocumentPreludeMatchingFunction,
        __ast_path: &mut AstKindPath,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_document_prelude_matching_function(
                    visitor, node, __ast_path,
                )
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_document_prelude_matching_function(
                    visitor, node, __ast_path,
                )
            }
        }
    }

    #[inline]
    fn visit_mut_document_prelude_matching_functions(
        &mut self,
        node: &mut Vec<DocumentPreludeMatchingFunction>,
        __ast_path: &mut AstKindPath,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_document_prelude_matching_functions(
                    visitor, node, __ast_path,
                )
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_document_prelude_matching_functions(
                    visitor, node, __ast_path,
                )
            }
        }
    }

    #[inline]
    fn visit_mut_extension_name(&mut self, node: &mut ExtensionName, __ast_path: &mut AstKindPath) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_extension_name(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_extension_name(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_family_name(&mut self, node: &mut FamilyName, __ast_path: &mut AstKindPath) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_family_name(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_family_name(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_family_names(&mut self, node: &mut Vec<FamilyName>, __ast_path: &mut AstKindPath) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_family_names(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_family_names(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_flex(&mut self, node: &mut Flex, __ast_path: &mut AstKindPath) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_flex(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_flex(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_font_feature_values_prelude(
        &mut self,
        node: &mut FontFeatureValuesPrelude,
        __ast_path: &mut AstKindPath,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_font_feature_values_prelude(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_font_feature_values_prelude(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_forgiving_complex_selector(
        &mut self,
        node: &mut ForgivingComplexSelector,
        __ast_path: &mut AstKindPath,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_forgiving_complex_selector(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_forgiving_complex_selector(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_forgiving_complex_selectors(
        &mut self,
        node: &mut Vec<ForgivingComplexSelector>,
        __ast_path: &mut AstKindPath,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_forgiving_complex_selectors(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_forgiving_complex_selectors(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_forgiving_relative_selector(
        &mut self,
        node: &mut ForgivingRelativeSelector,
        __ast_path: &mut AstKindPath,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_forgiving_relative_selector(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_forgiving_relative_selector(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_forgiving_relative_selector_list(
        &mut self,
        node: &mut ForgivingRelativeSelectorList,
        __ast_path: &mut AstKindPath,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_forgiving_relative_selector_list(
                    visitor, node, __ast_path,
                )
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_forgiving_relative_selector_list(
                    visitor, node, __ast_path,
                )
            }
        }
    }

    #[inline]
    fn visit_mut_forgiving_relative_selectors(
        &mut self,
        node: &mut Vec<ForgivingRelativeSelector>,
        __ast_path: &mut AstKindPath,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_forgiving_relative_selectors(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_forgiving_relative_selectors(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_forgiving_selector_list(
        &mut self,
        node: &mut ForgivingSelectorList,
        __ast_path: &mut AstKindPath,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_forgiving_selector_list(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_forgiving_selector_list(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_frequency(&mut self, node: &mut Frequency, __ast_path: &mut AstKindPath) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_frequency(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_frequency(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_frequency_percentage(
        &mut self,
        node: &mut FrequencyPercentage,
        __ast_path: &mut AstKindPath,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_frequency_percentage(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_frequency_percentage(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_function(&mut self, node: &mut Function, __ast_path: &mut AstKindPath) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_function(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_function(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_function_name(&mut self, node: &mut FunctionName, __ast_path: &mut AstKindPath) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_function_name(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_function_name(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_general_enclosed(
        &mut self,
        node: &mut GeneralEnclosed,
        __ast_path: &mut AstKindPath,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_general_enclosed(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_general_enclosed(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_hex_color(&mut self, node: &mut HexColor, __ast_path: &mut AstKindPath) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_hex_color(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_hex_color(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_hue(&mut self, node: &mut Hue, __ast_path: &mut AstKindPath) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_hue(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_hue(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_id_selector(&mut self, node: &mut IdSelector, __ast_path: &mut AstKindPath) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_id_selector(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_id_selector(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_ident(&mut self, node: &mut Ident, __ast_path: &mut AstKindPath) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_ident(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_ident(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_idents(&mut self, node: &mut Vec<Ident>, __ast_path: &mut AstKindPath) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_idents(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_idents(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_import_conditions(
        &mut self,
        node: &mut ImportConditions,
        __ast_path: &mut AstKindPath,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_import_conditions(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_import_conditions(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_import_href(&mut self, node: &mut ImportHref, __ast_path: &mut AstKindPath) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_import_href(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_import_href(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_import_layer_name(
        &mut self,
        node: &mut ImportLayerName,
        __ast_path: &mut AstKindPath,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_import_layer_name(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_import_layer_name(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_import_prelude(&mut self, node: &mut ImportPrelude, __ast_path: &mut AstKindPath) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_import_prelude(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_import_prelude(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_important_flag(&mut self, node: &mut ImportantFlag, __ast_path: &mut AstKindPath) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_important_flag(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_important_flag(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_integer(&mut self, node: &mut Integer, __ast_path: &mut AstKindPath) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_integer(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_integer(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_keyframe_block(&mut self, node: &mut KeyframeBlock, __ast_path: &mut AstKindPath) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_keyframe_block(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_keyframe_block(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_keyframe_selector(
        &mut self,
        node: &mut KeyframeSelector,
        __ast_path: &mut AstKindPath,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_keyframe_selector(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_keyframe_selector(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_keyframe_selectors(
        &mut self,
        node: &mut Vec<KeyframeSelector>,
        __ast_path: &mut AstKindPath,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_keyframe_selectors(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_keyframe_selectors(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_keyframes_name(&mut self, node: &mut KeyframesName, __ast_path: &mut AstKindPath) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_keyframes_name(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_keyframes_name(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_keyframes_pseudo_function(
        &mut self,
        node: &mut KeyframesPseudoFunction,
        __ast_path: &mut AstKindPath,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_keyframes_pseudo_function(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_keyframes_pseudo_function(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_keyframes_pseudo_prefix(
        &mut self,
        node: &mut KeyframesPseudoPrefix,
        __ast_path: &mut AstKindPath,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_keyframes_pseudo_prefix(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_keyframes_pseudo_prefix(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_layer_name(&mut self, node: &mut LayerName, __ast_path: &mut AstKindPath) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_layer_name(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_layer_name(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_layer_name_list(
        &mut self,
        node: &mut LayerNameList,
        __ast_path: &mut AstKindPath,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_layer_name_list(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_layer_name_list(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_layer_names(&mut self, node: &mut Vec<LayerName>, __ast_path: &mut AstKindPath) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_layer_names(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_layer_names(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_layer_prelude(&mut self, node: &mut LayerPrelude, __ast_path: &mut AstKindPath) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_layer_prelude(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_layer_prelude(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_length(&mut self, node: &mut Length, __ast_path: &mut AstKindPath) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_length(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_length(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_length_percentage(
        &mut self,
        node: &mut LengthPercentage,
        __ast_path: &mut AstKindPath,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_length_percentage(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_length_percentage(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_list_of_component_values(
        &mut self,
        node: &mut ListOfComponentValues,
        __ast_path: &mut AstKindPath,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_list_of_component_values(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_list_of_component_values(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_media_and(&mut self, node: &mut MediaAnd, __ast_path: &mut AstKindPath) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_media_and(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_media_and(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_media_condition(
        &mut self,
        node: &mut MediaCondition,
        __ast_path: &mut AstKindPath,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_media_condition(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_media_condition(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_media_condition_all_type(
        &mut self,
        node: &mut MediaConditionAllType,
        __ast_path: &mut AstKindPath,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_media_condition_all_type(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_media_condition_all_type(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_media_condition_all_types(
        &mut self,
        node: &mut Vec<MediaConditionAllType>,
        __ast_path: &mut AstKindPath,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_media_condition_all_types(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_media_condition_all_types(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_media_condition_type(
        &mut self,
        node: &mut MediaConditionType,
        __ast_path: &mut AstKindPath,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_media_condition_type(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_media_condition_type(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_media_condition_without_or(
        &mut self,
        node: &mut MediaConditionWithoutOr,
        __ast_path: &mut AstKindPath,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_media_condition_without_or(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_media_condition_without_or(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_media_condition_without_or_type(
        &mut self,
        node: &mut MediaConditionWithoutOrType,
        __ast_path: &mut AstKindPath,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_media_condition_without_or_type(
                    visitor, node, __ast_path,
                )
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_media_condition_without_or_type(
                    visitor, node, __ast_path,
                )
            }
        }
    }

    #[inline]
    fn visit_mut_media_condition_without_or_types(
        &mut self,
        node: &mut Vec<MediaConditionWithoutOrType>,
        __ast_path: &mut AstKindPath,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_media_condition_without_or_types(
                    visitor, node, __ast_path,
                )
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_media_condition_without_or_types(
                    visitor, node, __ast_path,
                )
            }
        }
    }

    #[inline]
    fn visit_mut_media_feature(&mut self, node: &mut MediaFeature, __ast_path: &mut AstKindPath) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_media_feature(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_media_feature(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_media_feature_boolean(
        &mut self,
        node: &mut MediaFeatureBoolean,
        __ast_path: &mut AstKindPath,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_media_feature_boolean(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_media_feature_boolean(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_media_feature_name(
        &mut self,
        node: &mut MediaFeatureName,
        __ast_path: &mut AstKindPath,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_media_feature_name(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_media_feature_name(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_media_feature_plain(
        &mut self,
        node: &mut MediaFeaturePlain,
        __ast_path: &mut AstKindPath,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_media_feature_plain(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_media_feature_plain(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_media_feature_range(
        &mut self,
        node: &mut MediaFeatureRange,
        __ast_path: &mut AstKindPath,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_media_feature_range(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_media_feature_range(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_media_feature_range_comparison(
        &mut self,
        node: &mut MediaFeatureRangeComparison,
        __ast_path: &mut AstKindPath,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_media_feature_range_comparison(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_media_feature_range_comparison(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_media_feature_range_interval(
        &mut self,
        node: &mut MediaFeatureRangeInterval,
        __ast_path: &mut AstKindPath,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_media_feature_range_interval(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_media_feature_range_interval(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_media_feature_value(
        &mut self,
        node: &mut MediaFeatureValue,
        __ast_path: &mut AstKindPath,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_media_feature_value(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_media_feature_value(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_media_in_parens(
        &mut self,
        node: &mut MediaInParens,
        __ast_path: &mut AstKindPath,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_media_in_parens(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_media_in_parens(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_media_not(&mut self, node: &mut MediaNot, __ast_path: &mut AstKindPath) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_media_not(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_media_not(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_media_or(&mut self, node: &mut MediaOr, __ast_path: &mut AstKindPath) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_media_or(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_media_or(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_media_query(&mut self, node: &mut MediaQuery, __ast_path: &mut AstKindPath) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_media_query(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_media_query(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_media_query_list(
        &mut self,
        node: &mut MediaQueryList,
        __ast_path: &mut AstKindPath,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_media_query_list(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_media_query_list(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_media_querys(&mut self, node: &mut Vec<MediaQuery>, __ast_path: &mut AstKindPath) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_media_querys(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_media_querys(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_media_type(&mut self, node: &mut MediaType, __ast_path: &mut AstKindPath) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_media_type(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_media_type(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_named_namespace(
        &mut self,
        node: &mut NamedNamespace,
        __ast_path: &mut AstKindPath,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_named_namespace(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_named_namespace(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_namespace(&mut self, node: &mut Namespace, __ast_path: &mut AstKindPath) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_namespace(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_namespace(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_namespace_prefix(
        &mut self,
        node: &mut NamespacePrefix,
        __ast_path: &mut AstKindPath,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_namespace_prefix(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_namespace_prefix(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_namespace_prelude(
        &mut self,
        node: &mut NamespacePrelude,
        __ast_path: &mut AstKindPath,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_namespace_prelude(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_namespace_prelude(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_namespace_prelude_uri(
        &mut self,
        node: &mut NamespacePreludeUri,
        __ast_path: &mut AstKindPath,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_namespace_prelude_uri(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_namespace_prelude_uri(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_nesting_selector(
        &mut self,
        node: &mut NestingSelector,
        __ast_path: &mut AstKindPath,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_nesting_selector(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_nesting_selector(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_number(&mut self, node: &mut Number, __ast_path: &mut AstKindPath) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_number(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_number(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_number_type(&mut self, node: &mut NumberType, __ast_path: &mut AstKindPath) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_number_type(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_number_type(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_opt_at_rule_prelude(
        &mut self,
        node: &mut Option<Box<AtRulePrelude>>,
        __ast_path: &mut AstKindPath,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_opt_at_rule_prelude(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_opt_at_rule_prelude(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_opt_atom(
        &mut self,
        node: &mut Option<swc_atoms::Atom>,
        __ast_path: &mut AstKindPath,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_opt_atom(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_opt_atom(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_opt_attribute_selector_matcher(
        &mut self,
        node: &mut Option<AttributeSelectorMatcher>,
        __ast_path: &mut AstKindPath,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_opt_attribute_selector_matcher(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_opt_attribute_selector_matcher(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_opt_attribute_selector_modifier(
        &mut self,
        node: &mut Option<AttributeSelectorModifier>,
        __ast_path: &mut AstKindPath,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_opt_attribute_selector_modifier(
                    visitor, node, __ast_path,
                )
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_opt_attribute_selector_modifier(
                    visitor, node, __ast_path,
                )
            }
        }
    }

    #[inline]
    fn visit_mut_opt_attribute_selector_value(
        &mut self,
        node: &mut Option<AttributeSelectorValue>,
        __ast_path: &mut AstKindPath,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_opt_attribute_selector_value(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_opt_attribute_selector_value(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_opt_combinator(
        &mut self,
        node: &mut Option<Combinator>,
        __ast_path: &mut AstKindPath,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_opt_combinator(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_opt_combinator(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_opt_container_name(
        &mut self,
        node: &mut Option<ContainerName>,
        __ast_path: &mut AstKindPath,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_opt_container_name(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_opt_container_name(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_opt_forgiving_selector_list(
        &mut self,
        node: &mut Option<ForgivingSelectorList>,
        __ast_path: &mut AstKindPath,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_opt_forgiving_selector_list(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_opt_forgiving_selector_list(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_opt_function(
        &mut self,
        node: &mut Option<Box<Function>>,
        __ast_path: &mut AstKindPath,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_opt_function(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_opt_function(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_opt_ident(&mut self, node: &mut Option<Ident>, __ast_path: &mut AstKindPath) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_opt_ident(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_opt_ident(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_opt_import_conditions(
        &mut self,
        node: &mut Option<Box<ImportConditions>>,
        __ast_path: &mut AstKindPath,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_opt_import_conditions(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_opt_import_conditions(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_opt_import_layer_name(
        &mut self,
        node: &mut Option<Box<ImportLayerName>>,
        __ast_path: &mut AstKindPath,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_opt_import_layer_name(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_opt_import_layer_name(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_opt_important_flag(
        &mut self,
        node: &mut Option<ImportantFlag>,
        __ast_path: &mut AstKindPath,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_opt_important_flag(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_opt_important_flag(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_opt_media_condition_type(
        &mut self,
        node: &mut Option<Box<MediaConditionType>>,
        __ast_path: &mut AstKindPath,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_opt_media_condition_type(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_opt_media_condition_type(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_opt_media_query_list(
        &mut self,
        node: &mut Option<Box<MediaQueryList>>,
        __ast_path: &mut AstKindPath,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_opt_media_query_list(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_opt_media_query_list(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_opt_media_type(
        &mut self,
        node: &mut Option<MediaType>,
        __ast_path: &mut AstKindPath,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_opt_media_type(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_opt_media_type(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_opt_namespace(
        &mut self,
        node: &mut Option<Namespace>,
        __ast_path: &mut AstKindPath,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_opt_namespace(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_opt_namespace(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_opt_namespace_prefix(
        &mut self,
        node: &mut Option<NamespacePrefix>,
        __ast_path: &mut AstKindPath,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_opt_namespace_prefix(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_opt_namespace_prefix(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_opt_nesting_selector(
        &mut self,
        node: &mut Option<NestingSelector>,
        __ast_path: &mut AstKindPath,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_opt_nesting_selector(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_opt_nesting_selector(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_opt_number(&mut self, node: &mut Option<Number>, __ast_path: &mut AstKindPath) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_opt_number(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_opt_number(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_opt_page_selector_pseudos(
        &mut self,
        node: &mut Option<Vec<PageSelectorPseudo>>,
        __ast_path: &mut AstKindPath,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_opt_page_selector_pseudos(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_opt_page_selector_pseudos(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_opt_page_selector_type(
        &mut self,
        node: &mut Option<PageSelectorType>,
        __ast_path: &mut AstKindPath,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_opt_page_selector_type(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_opt_page_selector_type(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_opt_pseudo_class_selector_childrens(
        &mut self,
        node: &mut Option<Vec<PseudoClassSelectorChildren>>,
        __ast_path: &mut AstKindPath,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_opt_pseudo_class_selector_childrens(
                    visitor, node, __ast_path,
                )
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_opt_pseudo_class_selector_childrens(
                    visitor, node, __ast_path,
                )
            }
        }
    }

    #[inline]
    fn visit_mut_opt_pseudo_element_selector_childrens(
        &mut self,
        node: &mut Option<Vec<PseudoElementSelectorChildren>>,
        __ast_path: &mut AstKindPath,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_opt_pseudo_element_selector_childrens(
                    visitor, node, __ast_path,
                )
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_opt_pseudo_element_selector_childrens(
                    visitor, node, __ast_path,
                )
            }
        }
    }

    #[inline]
    fn visit_mut_opt_simple_block(
        &mut self,
        node: &mut Option<SimpleBlock>,
        __ast_path: &mut AstKindPath,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_opt_simple_block(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_opt_simple_block(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_opt_type_selector(
        &mut self,
        node: &mut Option<Box<TypeSelector>>,
        __ast_path: &mut AstKindPath,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_opt_type_selector(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_opt_type_selector(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_opt_url_modifiers(
        &mut self,
        node: &mut Option<Vec<UrlModifier>>,
        __ast_path: &mut AstKindPath,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_opt_url_modifiers(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_opt_url_modifiers(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_opt_url_value(
        &mut self,
        node: &mut Option<Box<UrlValue>>,
        __ast_path: &mut AstKindPath,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_opt_url_value(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_opt_url_value(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_page_selector(&mut self, node: &mut PageSelector, __ast_path: &mut AstKindPath) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_page_selector(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_page_selector(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_page_selector_list(
        &mut self,
        node: &mut PageSelectorList,
        __ast_path: &mut AstKindPath,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_page_selector_list(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_page_selector_list(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_page_selector_pseudo(
        &mut self,
        node: &mut PageSelectorPseudo,
        __ast_path: &mut AstKindPath,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_page_selector_pseudo(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_page_selector_pseudo(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_page_selector_pseudos(
        &mut self,
        node: &mut Vec<PageSelectorPseudo>,
        __ast_path: &mut AstKindPath,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_page_selector_pseudos(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_page_selector_pseudos(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_page_selector_type(
        &mut self,
        node: &mut PageSelectorType,
        __ast_path: &mut AstKindPath,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_page_selector_type(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_page_selector_type(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_page_selectors(
        &mut self,
        node: &mut Vec<PageSelector>,
        __ast_path: &mut AstKindPath,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_page_selectors(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_page_selectors(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_percentage(&mut self, node: &mut Percentage, __ast_path: &mut AstKindPath) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_percentage(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_percentage(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_pseudo_class_selector(
        &mut self,
        node: &mut PseudoClassSelector,
        __ast_path: &mut AstKindPath,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_pseudo_class_selector(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_pseudo_class_selector(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_pseudo_class_selector_children(
        &mut self,
        node: &mut PseudoClassSelectorChildren,
        __ast_path: &mut AstKindPath,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_pseudo_class_selector_children(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_pseudo_class_selector_children(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_pseudo_class_selector_childrens(
        &mut self,
        node: &mut Vec<PseudoClassSelectorChildren>,
        __ast_path: &mut AstKindPath,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_pseudo_class_selector_childrens(
                    visitor, node, __ast_path,
                )
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_pseudo_class_selector_childrens(
                    visitor, node, __ast_path,
                )
            }
        }
    }

    #[inline]
    fn visit_mut_pseudo_element_selector(
        &mut self,
        node: &mut PseudoElementSelector,
        __ast_path: &mut AstKindPath,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_pseudo_element_selector(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_pseudo_element_selector(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_pseudo_element_selector_children(
        &mut self,
        node: &mut PseudoElementSelectorChildren,
        __ast_path: &mut AstKindPath,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_pseudo_element_selector_children(
                    visitor, node, __ast_path,
                )
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_pseudo_element_selector_children(
                    visitor, node, __ast_path,
                )
            }
        }
    }

    #[inline]
    fn visit_mut_pseudo_element_selector_childrens(
        &mut self,
        node: &mut Vec<PseudoElementSelectorChildren>,
        __ast_path: &mut AstKindPath,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_pseudo_element_selector_childrens(
                    visitor, node, __ast_path,
                )
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_pseudo_element_selector_childrens(
                    visitor, node, __ast_path,
                )
            }
        }
    }

    #[inline]
    fn visit_mut_qualified_rule(&mut self, node: &mut QualifiedRule, __ast_path: &mut AstKindPath) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_qualified_rule(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_qualified_rule(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_qualified_rule_prelude(
        &mut self,
        node: &mut QualifiedRulePrelude,
        __ast_path: &mut AstKindPath,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_qualified_rule_prelude(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_qualified_rule_prelude(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_query_in_parens(
        &mut self,
        node: &mut QueryInParens,
        __ast_path: &mut AstKindPath,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_query_in_parens(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_query_in_parens(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_ratio(&mut self, node: &mut Ratio, __ast_path: &mut AstKindPath) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_ratio(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_ratio(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_relative_selector(
        &mut self,
        node: &mut RelativeSelector,
        __ast_path: &mut AstKindPath,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_relative_selector(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_relative_selector(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_relative_selector_list(
        &mut self,
        node: &mut RelativeSelectorList,
        __ast_path: &mut AstKindPath,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_relative_selector_list(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_relative_selector_list(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_relative_selectors(
        &mut self,
        node: &mut Vec<RelativeSelector>,
        __ast_path: &mut AstKindPath,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_relative_selectors(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_relative_selectors(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_resolution(&mut self, node: &mut Resolution, __ast_path: &mut AstKindPath) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_resolution(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_resolution(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_rule(&mut self, node: &mut Rule, __ast_path: &mut AstKindPath) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_rule(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_rule(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_rules(&mut self, node: &mut Vec<Rule>, __ast_path: &mut AstKindPath) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_rules(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_rules(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_scope_range(&mut self, node: &mut ScopeRange, __ast_path: &mut AstKindPath) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_scope_range(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_scope_range(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_selector_list(&mut self, node: &mut SelectorList, __ast_path: &mut AstKindPath) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_selector_list(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_selector_list(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_sequence_of_custom_idents(
        &mut self,
        node: &mut SequenceOfCustomIdents,
        __ast_path: &mut AstKindPath,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_sequence_of_custom_idents(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_sequence_of_custom_idents(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_simple_block(&mut self, node: &mut SimpleBlock, __ast_path: &mut AstKindPath) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_simple_block(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_simple_block(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_size_feature(&mut self, node: &mut SizeFeature, __ast_path: &mut AstKindPath) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_size_feature(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_size_feature(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_size_feature_boolean(
        &mut self,
        node: &mut SizeFeatureBoolean,
        __ast_path: &mut AstKindPath,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_size_feature_boolean(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_size_feature_boolean(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_size_feature_name(
        &mut self,
        node: &mut SizeFeatureName,
        __ast_path: &mut AstKindPath,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_size_feature_name(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_size_feature_name(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_size_feature_plain(
        &mut self,
        node: &mut SizeFeaturePlain,
        __ast_path: &mut AstKindPath,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_size_feature_plain(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_size_feature_plain(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_size_feature_range(
        &mut self,
        node: &mut SizeFeatureRange,
        __ast_path: &mut AstKindPath,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_size_feature_range(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_size_feature_range(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_size_feature_range_comparison(
        &mut self,
        node: &mut SizeFeatureRangeComparison,
        __ast_path: &mut AstKindPath,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_size_feature_range_comparison(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_size_feature_range_comparison(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_size_feature_range_interval(
        &mut self,
        node: &mut SizeFeatureRangeInterval,
        __ast_path: &mut AstKindPath,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_size_feature_range_interval(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_size_feature_range_interval(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_size_feature_value(
        &mut self,
        node: &mut SizeFeatureValue,
        __ast_path: &mut AstKindPath,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_size_feature_value(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_size_feature_value(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_span(&mut self, node: &mut swc_common::Span, __ast_path: &mut AstKindPath) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_span(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_span(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_str(&mut self, node: &mut Str, __ast_path: &mut AstKindPath) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_str(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_str(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_style_block(&mut self, node: &mut StyleBlock, __ast_path: &mut AstKindPath) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_style_block(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_style_block(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_stylesheet(&mut self, node: &mut Stylesheet, __ast_path: &mut AstKindPath) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_stylesheet(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_stylesheet(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_subclass_selector(
        &mut self,
        node: &mut SubclassSelector,
        __ast_path: &mut AstKindPath,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_subclass_selector(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_subclass_selector(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_subclass_selectors(
        &mut self,
        node: &mut Vec<SubclassSelector>,
        __ast_path: &mut AstKindPath,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_subclass_selectors(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_subclass_selectors(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_supports_and(&mut self, node: &mut SupportsAnd, __ast_path: &mut AstKindPath) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_supports_and(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_supports_and(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_supports_condition(
        &mut self,
        node: &mut SupportsCondition,
        __ast_path: &mut AstKindPath,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_supports_condition(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_supports_condition(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_supports_condition_type(
        &mut self,
        node: &mut SupportsConditionType,
        __ast_path: &mut AstKindPath,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_supports_condition_type(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_supports_condition_type(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_supports_condition_types(
        &mut self,
        node: &mut Vec<SupportsConditionType>,
        __ast_path: &mut AstKindPath,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_supports_condition_types(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_supports_condition_types(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_supports_feature(
        &mut self,
        node: &mut SupportsFeature,
        __ast_path: &mut AstKindPath,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_supports_feature(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_supports_feature(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_supports_in_parens(
        &mut self,
        node: &mut SupportsInParens,
        __ast_path: &mut AstKindPath,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_supports_in_parens(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_supports_in_parens(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_supports_not(&mut self, node: &mut SupportsNot, __ast_path: &mut AstKindPath) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_supports_not(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_supports_not(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_supports_or(&mut self, node: &mut SupportsOr, __ast_path: &mut AstKindPath) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_supports_or(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_supports_or(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_tag_name_selector(
        &mut self,
        node: &mut TagNameSelector,
        __ast_path: &mut AstKindPath,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_tag_name_selector(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_tag_name_selector(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_time(&mut self, node: &mut Time, __ast_path: &mut AstKindPath) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_time(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_time(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_time_percentage(
        &mut self,
        node: &mut TimePercentage,
        __ast_path: &mut AstKindPath,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_time_percentage(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_time_percentage(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_token(&mut self, node: &mut Token, __ast_path: &mut AstKindPath) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_token(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_token(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_token_and_span(&mut self, node: &mut TokenAndSpan, __ast_path: &mut AstKindPath) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_token_and_span(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_token_and_span(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_type_selector(&mut self, node: &mut TypeSelector, __ast_path: &mut AstKindPath) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_type_selector(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_type_selector(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_unicode_range(&mut self, node: &mut UnicodeRange, __ast_path: &mut AstKindPath) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_unicode_range(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_unicode_range(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_universal_selector(
        &mut self,
        node: &mut UniversalSelector,
        __ast_path: &mut AstKindPath,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_universal_selector(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_universal_selector(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_unknown_dimension(
        &mut self,
        node: &mut UnknownDimension,
        __ast_path: &mut AstKindPath,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_unknown_dimension(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_unknown_dimension(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_url(&mut self, node: &mut Url, __ast_path: &mut AstKindPath) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_url(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_url(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_url_key_value(&mut self, node: &mut UrlKeyValue, __ast_path: &mut AstKindPath) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_url_key_value(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_url_key_value(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_url_modifier(&mut self, node: &mut UrlModifier, __ast_path: &mut AstKindPath) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_url_modifier(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_url_modifier(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_url_modifiers(
        &mut self,
        node: &mut Vec<UrlModifier>,
        __ast_path: &mut AstKindPath,
    ) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_url_modifiers(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_url_modifiers(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_url_value(&mut self, node: &mut UrlValue, __ast_path: &mut AstKindPath) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_url_value(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_url_value(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_url_value_raw(&mut self, node: &mut UrlValueRaw, __ast_path: &mut AstKindPath) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_url_value_raw(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_url_value_raw(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn visit_mut_wq_name(&mut self, node: &mut WqName, __ast_path: &mut AstKindPath) {
        match self {
            swc_visit::Either::Left(visitor) => {
                VisitMutAstPath::visit_mut_wq_name(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                VisitMutAstPath::visit_mut_wq_name(visitor, node, __ast_path)
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V> VisitMutAstPath for ::swc_visit::Optional<V>
where
    V: VisitMutAstPath,
{
    #[inline]
    fn visit_mut_absolute_color_base(
        &mut self,
        node: &mut AbsoluteColorBase,
        __ast_path: &mut AstKindPath,
    ) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_absolute_color_base(
                &mut self.visitor,
                node,
                __ast_path,
            )
        } else {
        }
    }

    #[inline]
    fn visit_mut_alpha_value(&mut self, node: &mut AlphaValue, __ast_path: &mut AstKindPath) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_alpha_value(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_mut_an_plus_b(&mut self, node: &mut AnPlusB, __ast_path: &mut AstKindPath) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_an_plus_b(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_mut_an_plus_b_notation(
        &mut self,
        node: &mut AnPlusBNotation,
        __ast_path: &mut AstKindPath,
    ) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_an_plus_b_notation(
                &mut self.visitor,
                node,
                __ast_path,
            )
        } else {
        }
    }

    #[inline]
    fn visit_mut_angle(&mut self, node: &mut Angle, __ast_path: &mut AstKindPath) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_angle(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_mut_angle_percentage(
        &mut self,
        node: &mut AnglePercentage,
        __ast_path: &mut AstKindPath,
    ) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_angle_percentage(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_mut_any_namespace(&mut self, node: &mut AnyNamespace, __ast_path: &mut AstKindPath) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_any_namespace(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_mut_at_rule(&mut self, node: &mut AtRule, __ast_path: &mut AstKindPath) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_at_rule(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_mut_at_rule_name(&mut self, node: &mut AtRuleName, __ast_path: &mut AstKindPath) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_at_rule_name(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_mut_at_rule_prelude(
        &mut self,
        node: &mut AtRulePrelude,
        __ast_path: &mut AstKindPath,
    ) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_at_rule_prelude(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_mut_atom(&mut self, node: &mut swc_atoms::Atom, __ast_path: &mut AstKindPath) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_atom(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_mut_attribute_selector(
        &mut self,
        node: &mut AttributeSelector,
        __ast_path: &mut AstKindPath,
    ) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_attribute_selector(
                &mut self.visitor,
                node,
                __ast_path,
            )
        } else {
        }
    }

    #[inline]
    fn visit_mut_attribute_selector_matcher(
        &mut self,
        node: &mut AttributeSelectorMatcher,
        __ast_path: &mut AstKindPath,
    ) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_attribute_selector_matcher(
                &mut self.visitor,
                node,
                __ast_path,
            )
        } else {
        }
    }

    #[inline]
    fn visit_mut_attribute_selector_matcher_value(
        &mut self,
        node: &mut AttributeSelectorMatcherValue,
        __ast_path: &mut AstKindPath,
    ) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_attribute_selector_matcher_value(
                &mut self.visitor,
                node,
                __ast_path,
            )
        } else {
        }
    }

    #[inline]
    fn visit_mut_attribute_selector_modifier(
        &mut self,
        node: &mut AttributeSelectorModifier,
        __ast_path: &mut AstKindPath,
    ) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_attribute_selector_modifier(
                &mut self.visitor,
                node,
                __ast_path,
            )
        } else {
        }
    }

    #[inline]
    fn visit_mut_attribute_selector_value(
        &mut self,
        node: &mut AttributeSelectorValue,
        __ast_path: &mut AstKindPath,
    ) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_attribute_selector_value(
                &mut self.visitor,
                node,
                __ast_path,
            )
        } else {
        }
    }

    #[inline]
    fn visit_mut_bin_op(&mut self, node: &mut BinOp, __ast_path: &mut AstKindPath) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_bin_op(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_mut_calc_operator(&mut self, node: &mut CalcOperator, __ast_path: &mut AstKindPath) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_calc_operator(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_mut_calc_operator_type(
        &mut self,
        node: &mut CalcOperatorType,
        __ast_path: &mut AstKindPath,
    ) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_calc_operator_type(
                &mut self.visitor,
                node,
                __ast_path,
            )
        } else {
        }
    }

    #[inline]
    fn visit_mut_calc_product(&mut self, node: &mut CalcProduct, __ast_path: &mut AstKindPath) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_calc_product(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_mut_calc_product_or_operator(
        &mut self,
        node: &mut CalcProductOrOperator,
        __ast_path: &mut AstKindPath,
    ) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_calc_product_or_operator(
                &mut self.visitor,
                node,
                __ast_path,
            )
        } else {
        }
    }

    #[inline]
    fn visit_mut_calc_product_or_operators(
        &mut self,
        node: &mut Vec<CalcProductOrOperator>,
        __ast_path: &mut AstKindPath,
    ) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_calc_product_or_operators(
                &mut self.visitor,
                node,
                __ast_path,
            )
        } else {
        }
    }

    #[inline]
    fn visit_mut_calc_sum(&mut self, node: &mut CalcSum, __ast_path: &mut AstKindPath) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_calc_sum(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_mut_calc_value(&mut self, node: &mut CalcValue, __ast_path: &mut AstKindPath) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_calc_value(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_mut_calc_value_or_operator(
        &mut self,
        node: &mut CalcValueOrOperator,
        __ast_path: &mut AstKindPath,
    ) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_calc_value_or_operator(
                &mut self.visitor,
                node,
                __ast_path,
            )
        } else {
        }
    }

    #[inline]
    fn visit_mut_calc_value_or_operators(
        &mut self,
        node: &mut Vec<CalcValueOrOperator>,
        __ast_path: &mut AstKindPath,
    ) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_calc_value_or_operators(
                &mut self.visitor,
                node,
                __ast_path,
            )
        } else {
        }
    }

    #[inline]
    fn visit_mut_class_selector(&mut self, node: &mut ClassSelector, __ast_path: &mut AstKindPath) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_class_selector(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_mut_cmyk_component(&mut self, node: &mut CmykComponent, __ast_path: &mut AstKindPath) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_cmyk_component(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_mut_color(&mut self, node: &mut Color, __ast_path: &mut AstKindPath) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_color(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_mut_color_profile_name(
        &mut self,
        node: &mut ColorProfileName,
        __ast_path: &mut AstKindPath,
    ) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_color_profile_name(
                &mut self.visitor,
                node,
                __ast_path,
            )
        } else {
        }
    }

    #[inline]
    fn visit_mut_combinator(&mut self, node: &mut Combinator, __ast_path: &mut AstKindPath) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_combinator(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_mut_combinator_value(
        &mut self,
        node: &mut CombinatorValue,
        __ast_path: &mut AstKindPath,
    ) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_combinator_value(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_mut_complex_selector(
        &mut self,
        node: &mut ComplexSelector,
        __ast_path: &mut AstKindPath,
    ) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_complex_selector(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_mut_complex_selector_children(
        &mut self,
        node: &mut ComplexSelectorChildren,
        __ast_path: &mut AstKindPath,
    ) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_complex_selector_children(
                &mut self.visitor,
                node,
                __ast_path,
            )
        } else {
        }
    }

    #[inline]
    fn visit_mut_complex_selector_childrens(
        &mut self,
        node: &mut Vec<ComplexSelectorChildren>,
        __ast_path: &mut AstKindPath,
    ) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_complex_selector_childrens(
                &mut self.visitor,
                node,
                __ast_path,
            )
        } else {
        }
    }

    #[inline]
    fn visit_mut_complex_selectors(
        &mut self,
        node: &mut Vec<ComplexSelector>,
        __ast_path: &mut AstKindPath,
    ) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_complex_selectors(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_mut_component_value(
        &mut self,
        node: &mut ComponentValue,
        __ast_path: &mut AstKindPath,
    ) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_component_value(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_mut_component_values(
        &mut self,
        node: &mut Vec<ComponentValue>,
        __ast_path: &mut AstKindPath,
    ) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_component_values(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_mut_compound_selector(
        &mut self,
        node: &mut CompoundSelector,
        __ast_path: &mut AstKindPath,
    ) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_compound_selector(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_mut_compound_selector_list(
        &mut self,
        node: &mut CompoundSelectorList,
        __ast_path: &mut AstKindPath,
    ) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_compound_selector_list(
                &mut self.visitor,
                node,
                __ast_path,
            )
        } else {
        }
    }

    #[inline]
    fn visit_mut_compound_selectors(
        &mut self,
        node: &mut Vec<CompoundSelector>,
        __ast_path: &mut AstKindPath,
    ) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_compound_selectors(
                &mut self.visitor,
                node,
                __ast_path,
            )
        } else {
        }
    }

    #[inline]
    fn visit_mut_container_condition(
        &mut self,
        node: &mut ContainerCondition,
        __ast_path: &mut AstKindPath,
    ) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_container_condition(
                &mut self.visitor,
                node,
                __ast_path,
            )
        } else {
        }
    }

    #[inline]
    fn visit_mut_container_name(&mut self, node: &mut ContainerName, __ast_path: &mut AstKindPath) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_container_name(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_mut_container_query(
        &mut self,
        node: &mut ContainerQuery,
        __ast_path: &mut AstKindPath,
    ) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_container_query(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_mut_container_query_and(
        &mut self,
        node: &mut ContainerQueryAnd,
        __ast_path: &mut AstKindPath,
    ) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_container_query_and(
                &mut self.visitor,
                node,
                __ast_path,
            )
        } else {
        }
    }

    #[inline]
    fn visit_mut_container_query_not(
        &mut self,
        node: &mut ContainerQueryNot,
        __ast_path: &mut AstKindPath,
    ) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_container_query_not(
                &mut self.visitor,
                node,
                __ast_path,
            )
        } else {
        }
    }

    #[inline]
    fn visit_mut_container_query_or(
        &mut self,
        node: &mut ContainerQueryOr,
        __ast_path: &mut AstKindPath,
    ) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_container_query_or(
                &mut self.visitor,
                node,
                __ast_path,
            )
        } else {
        }
    }

    #[inline]
    fn visit_mut_container_query_type(
        &mut self,
        node: &mut ContainerQueryType,
        __ast_path: &mut AstKindPath,
    ) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_container_query_type(
                &mut self.visitor,
                node,
                __ast_path,
            )
        } else {
        }
    }

    #[inline]
    fn visit_mut_container_query_types(
        &mut self,
        node: &mut Vec<ContainerQueryType>,
        __ast_path: &mut AstKindPath,
    ) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_container_query_types(
                &mut self.visitor,
                node,
                __ast_path,
            )
        } else {
        }
    }

    #[inline]
    fn visit_mut_custom_highlight_name(
        &mut self,
        node: &mut CustomHighlightName,
        __ast_path: &mut AstKindPath,
    ) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_custom_highlight_name(
                &mut self.visitor,
                node,
                __ast_path,
            )
        } else {
        }
    }

    #[inline]
    fn visit_mut_custom_ident(&mut self, node: &mut CustomIdent, __ast_path: &mut AstKindPath) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_custom_ident(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_mut_custom_idents(
        &mut self,
        node: &mut Vec<CustomIdent>,
        __ast_path: &mut AstKindPath,
    ) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_custom_idents(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_mut_custom_media_query(
        &mut self,
        node: &mut CustomMediaQuery,
        __ast_path: &mut AstKindPath,
    ) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_custom_media_query(
                &mut self.visitor,
                node,
                __ast_path,
            )
        } else {
        }
    }

    #[inline]
    fn visit_mut_custom_media_query_media_type(
        &mut self,
        node: &mut CustomMediaQueryMediaType,
        __ast_path: &mut AstKindPath,
    ) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_custom_media_query_media_type(
                &mut self.visitor,
                node,
                __ast_path,
            )
        } else {
        }
    }

    #[inline]
    fn visit_mut_custom_property_name(
        &mut self,
        node: &mut CustomPropertyName,
        __ast_path: &mut AstKindPath,
    ) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_custom_property_name(
                &mut self.visitor,
                node,
                __ast_path,
            )
        } else {
        }
    }

    #[inline]
    fn visit_mut_dashed_ident(&mut self, node: &mut DashedIdent, __ast_path: &mut AstKindPath) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_dashed_ident(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_mut_declaration(&mut self, node: &mut Declaration, __ast_path: &mut AstKindPath) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_declaration(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_mut_declaration_name(
        &mut self,
        node: &mut DeclarationName,
        __ast_path: &mut AstKindPath,
    ) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_declaration_name(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_mut_declaration_or_at_rule(
        &mut self,
        node: &mut DeclarationOrAtRule,
        __ast_path: &mut AstKindPath,
    ) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_declaration_or_at_rule(
                &mut self.visitor,
                node,
                __ast_path,
            )
        } else {
        }
    }

    #[inline]
    fn visit_mut_delimiter(&mut self, node: &mut Delimiter, __ast_path: &mut AstKindPath) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_delimiter(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_mut_delimiter_value(
        &mut self,
        node: &mut DelimiterValue,
        __ast_path: &mut AstKindPath,
    ) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_delimiter_value(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_mut_dimension(&mut self, node: &mut Dimension, __ast_path: &mut AstKindPath) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_dimension(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_mut_dimension_token(
        &mut self,
        node: &mut DimensionToken,
        __ast_path: &mut AstKindPath,
    ) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_dimension_token(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_mut_document_prelude(
        &mut self,
        node: &mut DocumentPrelude,
        __ast_path: &mut AstKindPath,
    ) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_document_prelude(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_mut_document_prelude_matching_function(
        &mut self,
        node: &mut DocumentPreludeMatchingFunction,
        __ast_path: &mut AstKindPath,
    ) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_document_prelude_matching_function(
                &mut self.visitor,
                node,
                __ast_path,
            )
        } else {
        }
    }

    #[inline]
    fn visit_mut_document_prelude_matching_functions(
        &mut self,
        node: &mut Vec<DocumentPreludeMatchingFunction>,
        __ast_path: &mut AstKindPath,
    ) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_document_prelude_matching_functions(
                &mut self.visitor,
                node,
                __ast_path,
            )
        } else {
        }
    }

    #[inline]
    fn visit_mut_extension_name(&mut self, node: &mut ExtensionName, __ast_path: &mut AstKindPath) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_extension_name(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_mut_family_name(&mut self, node: &mut FamilyName, __ast_path: &mut AstKindPath) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_family_name(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_mut_family_names(&mut self, node: &mut Vec<FamilyName>, __ast_path: &mut AstKindPath) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_family_names(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_mut_flex(&mut self, node: &mut Flex, __ast_path: &mut AstKindPath) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_flex(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_mut_font_feature_values_prelude(
        &mut self,
        node: &mut FontFeatureValuesPrelude,
        __ast_path: &mut AstKindPath,
    ) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_font_feature_values_prelude(
                &mut self.visitor,
                node,
                __ast_path,
            )
        } else {
        }
    }

    #[inline]
    fn visit_mut_forgiving_complex_selector(
        &mut self,
        node: &mut ForgivingComplexSelector,
        __ast_path: &mut AstKindPath,
    ) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_forgiving_complex_selector(
                &mut self.visitor,
                node,
                __ast_path,
            )
        } else {
        }
    }

    #[inline]
    fn visit_mut_forgiving_complex_selectors(
        &mut self,
        node: &mut Vec<ForgivingComplexSelector>,
        __ast_path: &mut AstKindPath,
    ) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_forgiving_complex_selectors(
                &mut self.visitor,
                node,
                __ast_path,
            )
        } else {
        }
    }

    #[inline]
    fn visit_mut_forgiving_relative_selector(
        &mut self,
        node: &mut ForgivingRelativeSelector,
        __ast_path: &mut AstKindPath,
    ) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_forgiving_relative_selector(
                &mut self.visitor,
                node,
                __ast_path,
            )
        } else {
        }
    }

    #[inline]
    fn visit_mut_forgiving_relative_selector_list(
        &mut self,
        node: &mut ForgivingRelativeSelectorList,
        __ast_path: &mut AstKindPath,
    ) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_forgiving_relative_selector_list(
                &mut self.visitor,
                node,
                __ast_path,
            )
        } else {
        }
    }

    #[inline]
    fn visit_mut_forgiving_relative_selectors(
        &mut self,
        node: &mut Vec<ForgivingRelativeSelector>,
        __ast_path: &mut AstKindPath,
    ) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_forgiving_relative_selectors(
                &mut self.visitor,
                node,
                __ast_path,
            )
        } else {
        }
    }

    #[inline]
    fn visit_mut_forgiving_selector_list(
        &mut self,
        node: &mut ForgivingSelectorList,
        __ast_path: &mut AstKindPath,
    ) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_forgiving_selector_list(
                &mut self.visitor,
                node,
                __ast_path,
            )
        } else {
        }
    }

    #[inline]
    fn visit_mut_frequency(&mut self, node: &mut Frequency, __ast_path: &mut AstKindPath) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_frequency(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_mut_frequency_percentage(
        &mut self,
        node: &mut FrequencyPercentage,
        __ast_path: &mut AstKindPath,
    ) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_frequency_percentage(
                &mut self.visitor,
                node,
                __ast_path,
            )
        } else {
        }
    }

    #[inline]
    fn visit_mut_function(&mut self, node: &mut Function, __ast_path: &mut AstKindPath) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_function(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_mut_function_name(&mut self, node: &mut FunctionName, __ast_path: &mut AstKindPath) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_function_name(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_mut_general_enclosed(
        &mut self,
        node: &mut GeneralEnclosed,
        __ast_path: &mut AstKindPath,
    ) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_general_enclosed(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_mut_hex_color(&mut self, node: &mut HexColor, __ast_path: &mut AstKindPath) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_hex_color(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_mut_hue(&mut self, node: &mut Hue, __ast_path: &mut AstKindPath) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_hue(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_mut_id_selector(&mut self, node: &mut IdSelector, __ast_path: &mut AstKindPath) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_id_selector(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_mut_ident(&mut self, node: &mut Ident, __ast_path: &mut AstKindPath) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_ident(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_mut_idents(&mut self, node: &mut Vec<Ident>, __ast_path: &mut AstKindPath) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_idents(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_mut_import_conditions(
        &mut self,
        node: &mut ImportConditions,
        __ast_path: &mut AstKindPath,
    ) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_import_conditions(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_mut_import_href(&mut self, node: &mut ImportHref, __ast_path: &mut AstKindPath) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_import_href(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_mut_import_layer_name(
        &mut self,
        node: &mut ImportLayerName,
        __ast_path: &mut AstKindPath,
    ) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_import_layer_name(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_mut_import_prelude(&mut self, node: &mut ImportPrelude, __ast_path: &mut AstKindPath) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_import_prelude(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_mut_important_flag(&mut self, node: &mut ImportantFlag, __ast_path: &mut AstKindPath) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_important_flag(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_mut_integer(&mut self, node: &mut Integer, __ast_path: &mut AstKindPath) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_integer(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_mut_keyframe_block(&mut self, node: &mut KeyframeBlock, __ast_path: &mut AstKindPath) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_keyframe_block(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_mut_keyframe_selector(
        &mut self,
        node: &mut KeyframeSelector,
        __ast_path: &mut AstKindPath,
    ) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_keyframe_selector(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_mut_keyframe_selectors(
        &mut self,
        node: &mut Vec<KeyframeSelector>,
        __ast_path: &mut AstKindPath,
    ) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_keyframe_selectors(
                &mut self.visitor,
                node,
                __ast_path,
            )
        } else {
        }
    }

    #[inline]
    fn visit_mut_keyframes_name(&mut self, node: &mut KeyframesName, __ast_path: &mut AstKindPath) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_keyframes_name(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_mut_keyframes_pseudo_function(
        &mut self,
        node: &mut KeyframesPseudoFunction,
        __ast_path: &mut AstKindPath,
    ) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_keyframes_pseudo_function(
                &mut self.visitor,
                node,
                __ast_path,
            )
        } else {
        }
    }

    #[inline]
    fn visit_mut_keyframes_pseudo_prefix(
        &mut self,
        node: &mut KeyframesPseudoPrefix,
        __ast_path: &mut AstKindPath,
    ) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_keyframes_pseudo_prefix(
                &mut self.visitor,
                node,
                __ast_path,
            )
        } else {
        }
    }

    #[inline]
    fn visit_mut_layer_name(&mut self, node: &mut LayerName, __ast_path: &mut AstKindPath) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_layer_name(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_mut_layer_name_list(
        &mut self,
        node: &mut LayerNameList,
        __ast_path: &mut AstKindPath,
    ) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_layer_name_list(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_mut_layer_names(&mut self, node: &mut Vec<LayerName>, __ast_path: &mut AstKindPath) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_layer_names(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_mut_layer_prelude(&mut self, node: &mut LayerPrelude, __ast_path: &mut AstKindPath) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_layer_prelude(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_mut_length(&mut self, node: &mut Length, __ast_path: &mut AstKindPath) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_length(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_mut_length_percentage(
        &mut self,
        node: &mut LengthPercentage,
        __ast_path: &mut AstKindPath,
    ) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_length_percentage(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_mut_list_of_component_values(
        &mut self,
        node: &mut ListOfComponentValues,
        __ast_path: &mut AstKindPath,
    ) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_list_of_component_values(
                &mut self.visitor,
                node,
                __ast_path,
            )
        } else {
        }
    }

    #[inline]
    fn visit_mut_media_and(&mut self, node: &mut MediaAnd, __ast_path: &mut AstKindPath) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_media_and(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_mut_media_condition(
        &mut self,
        node: &mut MediaCondition,
        __ast_path: &mut AstKindPath,
    ) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_media_condition(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_mut_media_condition_all_type(
        &mut self,
        node: &mut MediaConditionAllType,
        __ast_path: &mut AstKindPath,
    ) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_media_condition_all_type(
                &mut self.visitor,
                node,
                __ast_path,
            )
        } else {
        }
    }

    #[inline]
    fn visit_mut_media_condition_all_types(
        &mut self,
        node: &mut Vec<MediaConditionAllType>,
        __ast_path: &mut AstKindPath,
    ) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_media_condition_all_types(
                &mut self.visitor,
                node,
                __ast_path,
            )
        } else {
        }
    }

    #[inline]
    fn visit_mut_media_condition_type(
        &mut self,
        node: &mut MediaConditionType,
        __ast_path: &mut AstKindPath,
    ) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_media_condition_type(
                &mut self.visitor,
                node,
                __ast_path,
            )
        } else {
        }
    }

    #[inline]
    fn visit_mut_media_condition_without_or(
        &mut self,
        node: &mut MediaConditionWithoutOr,
        __ast_path: &mut AstKindPath,
    ) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_media_condition_without_or(
                &mut self.visitor,
                node,
                __ast_path,
            )
        } else {
        }
    }

    #[inline]
    fn visit_mut_media_condition_without_or_type(
        &mut self,
        node: &mut MediaConditionWithoutOrType,
        __ast_path: &mut AstKindPath,
    ) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_media_condition_without_or_type(
                &mut self.visitor,
                node,
                __ast_path,
            )
        } else {
        }
    }

    #[inline]
    fn visit_mut_media_condition_without_or_types(
        &mut self,
        node: &mut Vec<MediaConditionWithoutOrType>,
        __ast_path: &mut AstKindPath,
    ) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_media_condition_without_or_types(
                &mut self.visitor,
                node,
                __ast_path,
            )
        } else {
        }
    }

    #[inline]
    fn visit_mut_media_feature(&mut self, node: &mut MediaFeature, __ast_path: &mut AstKindPath) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_media_feature(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_mut_media_feature_boolean(
        &mut self,
        node: &mut MediaFeatureBoolean,
        __ast_path: &mut AstKindPath,
    ) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_media_feature_boolean(
                &mut self.visitor,
                node,
                __ast_path,
            )
        } else {
        }
    }

    #[inline]
    fn visit_mut_media_feature_name(
        &mut self,
        node: &mut MediaFeatureName,
        __ast_path: &mut AstKindPath,
    ) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_media_feature_name(
                &mut self.visitor,
                node,
                __ast_path,
            )
        } else {
        }
    }

    #[inline]
    fn visit_mut_media_feature_plain(
        &mut self,
        node: &mut MediaFeaturePlain,
        __ast_path: &mut AstKindPath,
    ) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_media_feature_plain(
                &mut self.visitor,
                node,
                __ast_path,
            )
        } else {
        }
    }

    #[inline]
    fn visit_mut_media_feature_range(
        &mut self,
        node: &mut MediaFeatureRange,
        __ast_path: &mut AstKindPath,
    ) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_media_feature_range(
                &mut self.visitor,
                node,
                __ast_path,
            )
        } else {
        }
    }

    #[inline]
    fn visit_mut_media_feature_range_comparison(
        &mut self,
        node: &mut MediaFeatureRangeComparison,
        __ast_path: &mut AstKindPath,
    ) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_media_feature_range_comparison(
                &mut self.visitor,
                node,
                __ast_path,
            )
        } else {
        }
    }

    #[inline]
    fn visit_mut_media_feature_range_interval(
        &mut self,
        node: &mut MediaFeatureRangeInterval,
        __ast_path: &mut AstKindPath,
    ) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_media_feature_range_interval(
                &mut self.visitor,
                node,
                __ast_path,
            )
        } else {
        }
    }

    #[inline]
    fn visit_mut_media_feature_value(
        &mut self,
        node: &mut MediaFeatureValue,
        __ast_path: &mut AstKindPath,
    ) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_media_feature_value(
                &mut self.visitor,
                node,
                __ast_path,
            )
        } else {
        }
    }

    #[inline]
    fn visit_mut_media_in_parens(
        &mut self,
        node: &mut MediaInParens,
        __ast_path: &mut AstKindPath,
    ) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_media_in_parens(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_mut_media_not(&mut self, node: &mut MediaNot, __ast_path: &mut AstKindPath) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_media_not(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_mut_media_or(&mut self, node: &mut MediaOr, __ast_path: &mut AstKindPath) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_media_or(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_mut_media_query(&mut self, node: &mut MediaQuery, __ast_path: &mut AstKindPath) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_media_query(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_mut_media_query_list(
        &mut self,
        node: &mut MediaQueryList,
        __ast_path: &mut AstKindPath,
    ) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_media_query_list(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_mut_media_querys(&mut self, node: &mut Vec<MediaQuery>, __ast_path: &mut AstKindPath) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_media_querys(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_mut_media_type(&mut self, node: &mut MediaType, __ast_path: &mut AstKindPath) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_media_type(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_mut_named_namespace(
        &mut self,
        node: &mut NamedNamespace,
        __ast_path: &mut AstKindPath,
    ) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_named_namespace(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_mut_namespace(&mut self, node: &mut Namespace, __ast_path: &mut AstKindPath) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_namespace(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_mut_namespace_prefix(
        &mut self,
        node: &mut NamespacePrefix,
        __ast_path: &mut AstKindPath,
    ) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_namespace_prefix(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_mut_namespace_prelude(
        &mut self,
        node: &mut NamespacePrelude,
        __ast_path: &mut AstKindPath,
    ) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_namespace_prelude(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_mut_namespace_prelude_uri(
        &mut self,
        node: &mut NamespacePreludeUri,
        __ast_path: &mut AstKindPath,
    ) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_namespace_prelude_uri(
                &mut self.visitor,
                node,
                __ast_path,
            )
        } else {
        }
    }

    #[inline]
    fn visit_mut_nesting_selector(
        &mut self,
        node: &mut NestingSelector,
        __ast_path: &mut AstKindPath,
    ) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_nesting_selector(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_mut_number(&mut self, node: &mut Number, __ast_path: &mut AstKindPath) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_number(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_mut_number_type(&mut self, node: &mut NumberType, __ast_path: &mut AstKindPath) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_number_type(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_mut_opt_at_rule_prelude(
        &mut self,
        node: &mut Option<Box<AtRulePrelude>>,
        __ast_path: &mut AstKindPath,
    ) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_opt_at_rule_prelude(
                &mut self.visitor,
                node,
                __ast_path,
            )
        } else {
        }
    }

    #[inline]
    fn visit_mut_opt_atom(
        &mut self,
        node: &mut Option<swc_atoms::Atom>,
        __ast_path: &mut AstKindPath,
    ) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_opt_atom(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_mut_opt_attribute_selector_matcher(
        &mut self,
        node: &mut Option<AttributeSelectorMatcher>,
        __ast_path: &mut AstKindPath,
    ) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_opt_attribute_selector_matcher(
                &mut self.visitor,
                node,
                __ast_path,
            )
        } else {
        }
    }

    #[inline]
    fn visit_mut_opt_attribute_selector_modifier(
        &mut self,
        node: &mut Option<AttributeSelectorModifier>,
        __ast_path: &mut AstKindPath,
    ) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_opt_attribute_selector_modifier(
                &mut self.visitor,
                node,
                __ast_path,
            )
        } else {
        }
    }

    #[inline]
    fn visit_mut_opt_attribute_selector_value(
        &mut self,
        node: &mut Option<AttributeSelectorValue>,
        __ast_path: &mut AstKindPath,
    ) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_opt_attribute_selector_value(
                &mut self.visitor,
                node,
                __ast_path,
            )
        } else {
        }
    }

    #[inline]
    fn visit_mut_opt_combinator(
        &mut self,
        node: &mut Option<Combinator>,
        __ast_path: &mut AstKindPath,
    ) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_opt_combinator(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_mut_opt_container_name(
        &mut self,
        node: &mut Option<ContainerName>,
        __ast_path: &mut AstKindPath,
    ) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_opt_container_name(
                &mut self.visitor,
                node,
                __ast_path,
            )
        } else {
        }
    }

    #[inline]
    fn visit_mut_opt_forgiving_selector_list(
        &mut self,
        node: &mut Option<ForgivingSelectorList>,
        __ast_path: &mut AstKindPath,
    ) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_opt_forgiving_selector_list(
                &mut self.visitor,
                node,
                __ast_path,
            )
        } else {
        }
    }

    #[inline]
    fn visit_mut_opt_function(
        &mut self,
        node: &mut Option<Box<Function>>,
        __ast_path: &mut AstKindPath,
    ) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_opt_function(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_mut_opt_ident(&mut self, node: &mut Option<Ident>, __ast_path: &mut AstKindPath) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_opt_ident(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_mut_opt_import_conditions(
        &mut self,
        node: &mut Option<Box<ImportConditions>>,
        __ast_path: &mut AstKindPath,
    ) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_opt_import_conditions(
                &mut self.visitor,
                node,
                __ast_path,
            )
        } else {
        }
    }

    #[inline]
    fn visit_mut_opt_import_layer_name(
        &mut self,
        node: &mut Option<Box<ImportLayerName>>,
        __ast_path: &mut AstKindPath,
    ) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_opt_import_layer_name(
                &mut self.visitor,
                node,
                __ast_path,
            )
        } else {
        }
    }

    #[inline]
    fn visit_mut_opt_important_flag(
        &mut self,
        node: &mut Option<ImportantFlag>,
        __ast_path: &mut AstKindPath,
    ) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_opt_important_flag(
                &mut self.visitor,
                node,
                __ast_path,
            )
        } else {
        }
    }

    #[inline]
    fn visit_mut_opt_media_condition_type(
        &mut self,
        node: &mut Option<Box<MediaConditionType>>,
        __ast_path: &mut AstKindPath,
    ) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_opt_media_condition_type(
                &mut self.visitor,
                node,
                __ast_path,
            )
        } else {
        }
    }

    #[inline]
    fn visit_mut_opt_media_query_list(
        &mut self,
        node: &mut Option<Box<MediaQueryList>>,
        __ast_path: &mut AstKindPath,
    ) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_opt_media_query_list(
                &mut self.visitor,
                node,
                __ast_path,
            )
        } else {
        }
    }

    #[inline]
    fn visit_mut_opt_media_type(
        &mut self,
        node: &mut Option<MediaType>,
        __ast_path: &mut AstKindPath,
    ) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_opt_media_type(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_mut_opt_namespace(
        &mut self,
        node: &mut Option<Namespace>,
        __ast_path: &mut AstKindPath,
    ) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_opt_namespace(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_mut_opt_namespace_prefix(
        &mut self,
        node: &mut Option<NamespacePrefix>,
        __ast_path: &mut AstKindPath,
    ) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_opt_namespace_prefix(
                &mut self.visitor,
                node,
                __ast_path,
            )
        } else {
        }
    }

    #[inline]
    fn visit_mut_opt_nesting_selector(
        &mut self,
        node: &mut Option<NestingSelector>,
        __ast_path: &mut AstKindPath,
    ) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_opt_nesting_selector(
                &mut self.visitor,
                node,
                __ast_path,
            )
        } else {
        }
    }

    #[inline]
    fn visit_mut_opt_number(&mut self, node: &mut Option<Number>, __ast_path: &mut AstKindPath) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_opt_number(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_mut_opt_page_selector_pseudos(
        &mut self,
        node: &mut Option<Vec<PageSelectorPseudo>>,
        __ast_path: &mut AstKindPath,
    ) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_opt_page_selector_pseudos(
                &mut self.visitor,
                node,
                __ast_path,
            )
        } else {
        }
    }

    #[inline]
    fn visit_mut_opt_page_selector_type(
        &mut self,
        node: &mut Option<PageSelectorType>,
        __ast_path: &mut AstKindPath,
    ) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_opt_page_selector_type(
                &mut self.visitor,
                node,
                __ast_path,
            )
        } else {
        }
    }

    #[inline]
    fn visit_mut_opt_pseudo_class_selector_childrens(
        &mut self,
        node: &mut Option<Vec<PseudoClassSelectorChildren>>,
        __ast_path: &mut AstKindPath,
    ) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_opt_pseudo_class_selector_childrens(
                &mut self.visitor,
                node,
                __ast_path,
            )
        } else {
        }
    }

    #[inline]
    fn visit_mut_opt_pseudo_element_selector_childrens(
        &mut self,
        node: &mut Option<Vec<PseudoElementSelectorChildren>>,
        __ast_path: &mut AstKindPath,
    ) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_opt_pseudo_element_selector_childrens(
                &mut self.visitor,
                node,
                __ast_path,
            )
        } else {
        }
    }

    #[inline]
    fn visit_mut_opt_simple_block(
        &mut self,
        node: &mut Option<SimpleBlock>,
        __ast_path: &mut AstKindPath,
    ) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_opt_simple_block(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_mut_opt_type_selector(
        &mut self,
        node: &mut Option<Box<TypeSelector>>,
        __ast_path: &mut AstKindPath,
    ) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_opt_type_selector(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_mut_opt_url_modifiers(
        &mut self,
        node: &mut Option<Vec<UrlModifier>>,
        __ast_path: &mut AstKindPath,
    ) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_opt_url_modifiers(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_mut_opt_url_value(
        &mut self,
        node: &mut Option<Box<UrlValue>>,
        __ast_path: &mut AstKindPath,
    ) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_opt_url_value(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_mut_page_selector(&mut self, node: &mut PageSelector, __ast_path: &mut AstKindPath) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_page_selector(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_mut_page_selector_list(
        &mut self,
        node: &mut PageSelectorList,
        __ast_path: &mut AstKindPath,
    ) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_page_selector_list(
                &mut self.visitor,
                node,
                __ast_path,
            )
        } else {
        }
    }

    #[inline]
    fn visit_mut_page_selector_pseudo(
        &mut self,
        node: &mut PageSelectorPseudo,
        __ast_path: &mut AstKindPath,
    ) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_page_selector_pseudo(
                &mut self.visitor,
                node,
                __ast_path,
            )
        } else {
        }
    }

    #[inline]
    fn visit_mut_page_selector_pseudos(
        &mut self,
        node: &mut Vec<PageSelectorPseudo>,
        __ast_path: &mut AstKindPath,
    ) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_page_selector_pseudos(
                &mut self.visitor,
                node,
                __ast_path,
            )
        } else {
        }
    }

    #[inline]
    fn visit_mut_page_selector_type(
        &mut self,
        node: &mut PageSelectorType,
        __ast_path: &mut AstKindPath,
    ) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_page_selector_type(
                &mut self.visitor,
                node,
                __ast_path,
            )
        } else {
        }
    }

    #[inline]
    fn visit_mut_page_selectors(
        &mut self,
        node: &mut Vec<PageSelector>,
        __ast_path: &mut AstKindPath,
    ) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_page_selectors(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_mut_percentage(&mut self, node: &mut Percentage, __ast_path: &mut AstKindPath) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_percentage(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_mut_pseudo_class_selector(
        &mut self,
        node: &mut PseudoClassSelector,
        __ast_path: &mut AstKindPath,
    ) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_pseudo_class_selector(
                &mut self.visitor,
                node,
                __ast_path,
            )
        } else {
        }
    }

    #[inline]
    fn visit_mut_pseudo_class_selector_children(
        &mut self,
        node: &mut PseudoClassSelectorChildren,
        __ast_path: &mut AstKindPath,
    ) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_pseudo_class_selector_children(
                &mut self.visitor,
                node,
                __ast_path,
            )
        } else {
        }
    }

    #[inline]
    fn visit_mut_pseudo_class_selector_childrens(
        &mut self,
        node: &mut Vec<PseudoClassSelectorChildren>,
        __ast_path: &mut AstKindPath,
    ) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_pseudo_class_selector_childrens(
                &mut self.visitor,
                node,
                __ast_path,
            )
        } else {
        }
    }

    #[inline]
    fn visit_mut_pseudo_element_selector(
        &mut self,
        node: &mut PseudoElementSelector,
        __ast_path: &mut AstKindPath,
    ) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_pseudo_element_selector(
                &mut self.visitor,
                node,
                __ast_path,
            )
        } else {
        }
    }

    #[inline]
    fn visit_mut_pseudo_element_selector_children(
        &mut self,
        node: &mut PseudoElementSelectorChildren,
        __ast_path: &mut AstKindPath,
    ) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_pseudo_element_selector_children(
                &mut self.visitor,
                node,
                __ast_path,
            )
        } else {
        }
    }

    #[inline]
    fn visit_mut_pseudo_element_selector_childrens(
        &mut self,
        node: &mut Vec<PseudoElementSelectorChildren>,
        __ast_path: &mut AstKindPath,
    ) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_pseudo_element_selector_childrens(
                &mut self.visitor,
                node,
                __ast_path,
            )
        } else {
        }
    }

    #[inline]
    fn visit_mut_qualified_rule(&mut self, node: &mut QualifiedRule, __ast_path: &mut AstKindPath) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_qualified_rule(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_mut_qualified_rule_prelude(
        &mut self,
        node: &mut QualifiedRulePrelude,
        __ast_path: &mut AstKindPath,
    ) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_qualified_rule_prelude(
                &mut self.visitor,
                node,
                __ast_path,
            )
        } else {
        }
    }

    #[inline]
    fn visit_mut_query_in_parens(
        &mut self,
        node: &mut QueryInParens,
        __ast_path: &mut AstKindPath,
    ) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_query_in_parens(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_mut_ratio(&mut self, node: &mut Ratio, __ast_path: &mut AstKindPath) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_ratio(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_mut_relative_selector(
        &mut self,
        node: &mut RelativeSelector,
        __ast_path: &mut AstKindPath,
    ) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_relative_selector(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_mut_relative_selector_list(
        &mut self,
        node: &mut RelativeSelectorList,
        __ast_path: &mut AstKindPath,
    ) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_relative_selector_list(
                &mut self.visitor,
                node,
                __ast_path,
            )
        } else {
        }
    }

    #[inline]
    fn visit_mut_relative_selectors(
        &mut self,
        node: &mut Vec<RelativeSelector>,
        __ast_path: &mut AstKindPath,
    ) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_relative_selectors(
                &mut self.visitor,
                node,
                __ast_path,
            )
        } else {
        }
    }

    #[inline]
    fn visit_mut_resolution(&mut self, node: &mut Resolution, __ast_path: &mut AstKindPath) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_resolution(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_mut_rule(&mut self, node: &mut Rule, __ast_path: &mut AstKindPath) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_rule(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_mut_rules(&mut self, node: &mut Vec<Rule>, __ast_path: &mut AstKindPath) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_rules(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_mut_scope_range(&mut self, node: &mut ScopeRange, __ast_path: &mut AstKindPath) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_scope_range(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_mut_selector_list(&mut self, node: &mut SelectorList, __ast_path: &mut AstKindPath) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_selector_list(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_mut_sequence_of_custom_idents(
        &mut self,
        node: &mut SequenceOfCustomIdents,
        __ast_path: &mut AstKindPath,
    ) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_sequence_of_custom_idents(
                &mut self.visitor,
                node,
                __ast_path,
            )
        } else {
        }
    }

    #[inline]
    fn visit_mut_simple_block(&mut self, node: &mut SimpleBlock, __ast_path: &mut AstKindPath) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_simple_block(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_mut_size_feature(&mut self, node: &mut SizeFeature, __ast_path: &mut AstKindPath) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_size_feature(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_mut_size_feature_boolean(
        &mut self,
        node: &mut SizeFeatureBoolean,
        __ast_path: &mut AstKindPath,
    ) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_size_feature_boolean(
                &mut self.visitor,
                node,
                __ast_path,
            )
        } else {
        }
    }

    #[inline]
    fn visit_mut_size_feature_name(
        &mut self,
        node: &mut SizeFeatureName,
        __ast_path: &mut AstKindPath,
    ) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_size_feature_name(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_mut_size_feature_plain(
        &mut self,
        node: &mut SizeFeaturePlain,
        __ast_path: &mut AstKindPath,
    ) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_size_feature_plain(
                &mut self.visitor,
                node,
                __ast_path,
            )
        } else {
        }
    }

    #[inline]
    fn visit_mut_size_feature_range(
        &mut self,
        node: &mut SizeFeatureRange,
        __ast_path: &mut AstKindPath,
    ) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_size_feature_range(
                &mut self.visitor,
                node,
                __ast_path,
            )
        } else {
        }
    }

    #[inline]
    fn visit_mut_size_feature_range_comparison(
        &mut self,
        node: &mut SizeFeatureRangeComparison,
        __ast_path: &mut AstKindPath,
    ) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_size_feature_range_comparison(
                &mut self.visitor,
                node,
                __ast_path,
            )
        } else {
        }
    }

    #[inline]
    fn visit_mut_size_feature_range_interval(
        &mut self,
        node: &mut SizeFeatureRangeInterval,
        __ast_path: &mut AstKindPath,
    ) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_size_feature_range_interval(
                &mut self.visitor,
                node,
                __ast_path,
            )
        } else {
        }
    }

    #[inline]
    fn visit_mut_size_feature_value(
        &mut self,
        node: &mut SizeFeatureValue,
        __ast_path: &mut AstKindPath,
    ) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_size_feature_value(
                &mut self.visitor,
                node,
                __ast_path,
            )
        } else {
        }
    }

    #[inline]
    fn visit_mut_span(&mut self, node: &mut swc_common::Span, __ast_path: &mut AstKindPath) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_span(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_mut_str(&mut self, node: &mut Str, __ast_path: &mut AstKindPath) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_str(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_mut_style_block(&mut self, node: &mut StyleBlock, __ast_path: &mut AstKindPath) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_style_block(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_mut_stylesheet(&mut self, node: &mut Stylesheet, __ast_path: &mut AstKindPath) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_stylesheet(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_mut_subclass_selector(
        &mut self,
        node: &mut SubclassSelector,
        __ast_path: &mut AstKindPath,
    ) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_subclass_selector(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_mut_subclass_selectors(
        &mut self,
        node: &mut Vec<SubclassSelector>,
        __ast_path: &mut AstKindPath,
    ) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_subclass_selectors(
                &mut self.visitor,
                node,
                __ast_path,
            )
        } else {
        }
    }

    #[inline]
    fn visit_mut_supports_and(&mut self, node: &mut SupportsAnd, __ast_path: &mut AstKindPath) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_supports_and(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_mut_supports_condition(
        &mut self,
        node: &mut SupportsCondition,
        __ast_path: &mut AstKindPath,
    ) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_supports_condition(
                &mut self.visitor,
                node,
                __ast_path,
            )
        } else {
        }
    }

    #[inline]
    fn visit_mut_supports_condition_type(
        &mut self,
        node: &mut SupportsConditionType,
        __ast_path: &mut AstKindPath,
    ) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_supports_condition_type(
                &mut self.visitor,
                node,
                __ast_path,
            )
        } else {
        }
    }

    #[inline]
    fn visit_mut_supports_condition_types(
        &mut self,
        node: &mut Vec<SupportsConditionType>,
        __ast_path: &mut AstKindPath,
    ) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_supports_condition_types(
                &mut self.visitor,
                node,
                __ast_path,
            )
        } else {
        }
    }

    #[inline]
    fn visit_mut_supports_feature(
        &mut self,
        node: &mut SupportsFeature,
        __ast_path: &mut AstKindPath,
    ) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_supports_feature(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_mut_supports_in_parens(
        &mut self,
        node: &mut SupportsInParens,
        __ast_path: &mut AstKindPath,
    ) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_supports_in_parens(
                &mut self.visitor,
                node,
                __ast_path,
            )
        } else {
        }
    }

    #[inline]
    fn visit_mut_supports_not(&mut self, node: &mut SupportsNot, __ast_path: &mut AstKindPath) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_supports_not(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_mut_supports_or(&mut self, node: &mut SupportsOr, __ast_path: &mut AstKindPath) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_supports_or(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_mut_tag_name_selector(
        &mut self,
        node: &mut TagNameSelector,
        __ast_path: &mut AstKindPath,
    ) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_tag_name_selector(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_mut_time(&mut self, node: &mut Time, __ast_path: &mut AstKindPath) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_time(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_mut_time_percentage(
        &mut self,
        node: &mut TimePercentage,
        __ast_path: &mut AstKindPath,
    ) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_time_percentage(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_mut_token(&mut self, node: &mut Token, __ast_path: &mut AstKindPath) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_token(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_mut_token_and_span(&mut self, node: &mut TokenAndSpan, __ast_path: &mut AstKindPath) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_token_and_span(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_mut_type_selector(&mut self, node: &mut TypeSelector, __ast_path: &mut AstKindPath) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_type_selector(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_mut_unicode_range(&mut self, node: &mut UnicodeRange, __ast_path: &mut AstKindPath) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_unicode_range(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_mut_universal_selector(
        &mut self,
        node: &mut UniversalSelector,
        __ast_path: &mut AstKindPath,
    ) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_universal_selector(
                &mut self.visitor,
                node,
                __ast_path,
            )
        } else {
        }
    }

    #[inline]
    fn visit_mut_unknown_dimension(
        &mut self,
        node: &mut UnknownDimension,
        __ast_path: &mut AstKindPath,
    ) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_unknown_dimension(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_mut_url(&mut self, node: &mut Url, __ast_path: &mut AstKindPath) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_url(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_mut_url_key_value(&mut self, node: &mut UrlKeyValue, __ast_path: &mut AstKindPath) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_url_key_value(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_mut_url_modifier(&mut self, node: &mut UrlModifier, __ast_path: &mut AstKindPath) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_url_modifier(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_mut_url_modifiers(
        &mut self,
        node: &mut Vec<UrlModifier>,
        __ast_path: &mut AstKindPath,
    ) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_url_modifiers(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_mut_url_value(&mut self, node: &mut UrlValue, __ast_path: &mut AstKindPath) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_url_value(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_mut_url_value_raw(&mut self, node: &mut UrlValueRaw, __ast_path: &mut AstKindPath) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_url_value_raw(&mut self.visitor, node, __ast_path)
        } else {
        }
    }

    #[inline]
    fn visit_mut_wq_name(&mut self, node: &mut WqName, __ast_path: &mut AstKindPath) {
        if self.enabled {
            <V as VisitMutAstPath>::visit_mut_wq_name(&mut self.visitor, node, __ast_path)
        } else {
        }
    }
}
#[doc = r" A trait implemented for types that can be visited using a visitor."]
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
pub trait VisitMutWithAstPath<V: ?Sized + VisitMutAstPath> {
    #[doc = r" Calls a visitor method (visitor.fold_xxx) with self."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath);
    #[doc = r" Visit children nodes of `self`` with `visitor`."]
    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath);
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for AbsoluteColorBase {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_absolute_color_base`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_absolute_color_base(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            AbsoluteColorBase::HexColor { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::AbsoluteColorBase(
                    self::fields::AbsoluteColorBaseField::HexColor,
                ));
                <HexColor as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            AbsoluteColorBase::NamedColorOrTransparent { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::AbsoluteColorBase(
                    self::fields::AbsoluteColorBaseField::NamedColorOrTransparent,
                ));
                <Ident as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            AbsoluteColorBase::Function { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::AbsoluteColorBase(
                    self::fields::AbsoluteColorBaseField::Function,
                ));
                <Function as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for AlphaValue {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_alpha_value`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_alpha_value(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            AlphaValue::Number { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::AlphaValue(
                    self::fields::AlphaValueField::Number,
                ));
                <Number as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            AlphaValue::Percentage { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::AlphaValue(
                    self::fields::AlphaValueField::Percentage,
                ));
                <Percentage as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for AnPlusB {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_an_plus_b`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_an_plus_b(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            AnPlusB::Ident { 0: _field_0 } => {
                let mut __ast_path = __ast_path
                    .with_guard(AstParentKind::AnPlusB(self::fields::AnPlusBField::Ident));
                <Ident as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            AnPlusB::AnPlusBNotation { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::AnPlusB(
                    self::fields::AnPlusBField::AnPlusBNotation,
                ));
                <AnPlusBNotation as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for AnPlusBNotation {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_an_plus_b_notation`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_an_plus_b_notation(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            AnPlusBNotation {
                span,
                a,
                a_raw,
                b,
                b_raw,
            } => {
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::AnPlusBNotation(
                        self::fields::AnPlusBNotationField::Span,
                    ));
                    <swc_common::Span as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::AnPlusBNotation(
                        self::fields::AnPlusBNotationField::ARaw,
                    ));
                    <Option<swc_atoms::Atom> as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        a_raw,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::AnPlusBNotation(
                        self::fields::AnPlusBNotationField::BRaw,
                    ));
                    <Option<swc_atoms::Atom> as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        b_raw,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for Angle {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_angle`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_angle(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            Angle { span, value, unit } => {
                {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentKind::Angle(self::fields::AngleField::Span));
                    <swc_common::Span as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path
                        .with_guard(AstParentKind::Angle(self::fields::AngleField::Value));
                    <Number as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        value,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentKind::Angle(self::fields::AngleField::Unit));
                    <Ident as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        unit,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for AnglePercentage {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_angle_percentage`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_angle_percentage(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            AnglePercentage::Angle { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::AnglePercentage(
                    self::fields::AnglePercentageField::Angle,
                ));
                <Angle as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            AnglePercentage::Percentage { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::AnglePercentage(
                    self::fields::AnglePercentageField::Percentage,
                ));
                <Percentage as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for AnyNamespace {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_any_namespace`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_any_namespace(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            AnyNamespace { span } => {
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::AnyNamespace(
                        self::fields::AnyNamespaceField::Span,
                    ));
                    <swc_common::Span as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for AtRule {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_at_rule`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_at_rule(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            AtRule {
                span,
                name,
                prelude,
                block,
            } => {
                {
                    let mut __ast_path = __ast_path
                        .with_guard(AstParentKind::AtRule(self::fields::AtRuleField::Span));
                    <swc_common::Span as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path
                        .with_guard(AstParentKind::AtRule(self::fields::AtRuleField::Name));
                    <AtRuleName as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        name,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path
                        .with_guard(AstParentKind::AtRule(self::fields::AtRuleField::Prelude));
                    <Option<Box<AtRulePrelude>> as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        prelude,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path
                        .with_guard(AstParentKind::AtRule(self::fields::AtRuleField::Block));
                    <Option<SimpleBlock> as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        block,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for AtRuleName {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_at_rule_name`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_at_rule_name(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            AtRuleName::DashedIdent { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::AtRuleName(
                    self::fields::AtRuleNameField::DashedIdent,
                ));
                <DashedIdent as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            AtRuleName::Ident { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::AtRuleName(
                    self::fields::AtRuleNameField::Ident,
                ));
                <Ident as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for AtRulePrelude {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_at_rule_prelude`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_at_rule_prelude(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            AtRulePrelude::ListOfComponentValues { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::AtRulePrelude(
                    self::fields::AtRulePreludeField::ListOfComponentValues,
                ));
                <ListOfComponentValues as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            AtRulePrelude::CharsetPrelude { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::AtRulePrelude(
                    self::fields::AtRulePreludeField::CharsetPrelude,
                ));
                <Str as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            AtRulePrelude::PropertyPrelude { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::AtRulePrelude(
                    self::fields::AtRulePreludeField::PropertyPrelude,
                ));
                <CustomPropertyName as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            AtRulePrelude::CounterStylePrelude { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::AtRulePrelude(
                    self::fields::AtRulePreludeField::CounterStylePrelude,
                ));
                <CustomIdent as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            AtRulePrelude::ColorProfilePrelude { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::AtRulePrelude(
                    self::fields::AtRulePreludeField::ColorProfilePrelude,
                ));
                <ColorProfileName as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            AtRulePrelude::DocumentPrelude { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::AtRulePrelude(
                    self::fields::AtRulePreludeField::DocumentPrelude,
                ));
                <DocumentPrelude as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            AtRulePrelude::FontPaletteValuesPrelude { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::AtRulePrelude(
                    self::fields::AtRulePreludeField::FontPaletteValuesPrelude,
                ));
                <DashedIdent as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            AtRulePrelude::FontFeatureValuesPrelude { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::AtRulePrelude(
                    self::fields::AtRulePreludeField::FontFeatureValuesPrelude,
                ));
                <FontFeatureValuesPrelude as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            AtRulePrelude::NestPrelude { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::AtRulePrelude(
                    self::fields::AtRulePreludeField::NestPrelude,
                ));
                <SelectorList as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            AtRulePrelude::KeyframesPrelude { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::AtRulePrelude(
                    self::fields::AtRulePreludeField::KeyframesPrelude,
                ));
                <KeyframesName as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            AtRulePrelude::ImportPrelude { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::AtRulePrelude(
                    self::fields::AtRulePreludeField::ImportPrelude,
                ));
                <ImportPrelude as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            AtRulePrelude::NamespacePrelude { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::AtRulePrelude(
                    self::fields::AtRulePreludeField::NamespacePrelude,
                ));
                <NamespacePrelude as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            AtRulePrelude::MediaPrelude { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::AtRulePrelude(
                    self::fields::AtRulePreludeField::MediaPrelude,
                ));
                <MediaQueryList as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            AtRulePrelude::SupportsPrelude { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::AtRulePrelude(
                    self::fields::AtRulePreludeField::SupportsPrelude,
                ));
                <SupportsCondition as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            AtRulePrelude::PagePrelude { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::AtRulePrelude(
                    self::fields::AtRulePreludeField::PagePrelude,
                ));
                <PageSelectorList as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            AtRulePrelude::LayerPrelude { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::AtRulePrelude(
                    self::fields::AtRulePreludeField::LayerPrelude,
                ));
                <LayerPrelude as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            AtRulePrelude::ContainerPrelude { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::AtRulePrelude(
                    self::fields::AtRulePreludeField::ContainerPrelude,
                ));
                <ContainerCondition as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            AtRulePrelude::CustomMediaPrelude { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::AtRulePrelude(
                    self::fields::AtRulePreludeField::CustomMediaPrelude,
                ));
                <CustomMediaQuery as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            AtRulePrelude::ScopePrelude { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::AtRulePrelude(
                    self::fields::AtRulePreludeField::ScopePrelude,
                ));
                <ScopeRange as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for AttributeSelector {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_attribute_selector`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_attribute_selector(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            AttributeSelector {
                span,
                name,
                matcher,
                value,
                modifier,
            } => {
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::AttributeSelector(
                        self::fields::AttributeSelectorField::Span,
                    ));
                    <swc_common::Span as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::AttributeSelector(
                        self::fields::AttributeSelectorField::Name,
                    ));
                    <WqName as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        name,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::AttributeSelector(
                        self::fields::AttributeSelectorField::Matcher,
                    ));
                    < Option < AttributeSelectorMatcher > as VisitMutWithAstPath < V > > :: visit_mut_with_ast_path (matcher , visitor , & mut * __ast_path)
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::AttributeSelector(
                        self::fields::AttributeSelectorField::Value,
                    ));
                    < Option < AttributeSelectorValue > as VisitMutWithAstPath < V > > :: visit_mut_with_ast_path (value , visitor , & mut * __ast_path)
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::AttributeSelector(
                        self::fields::AttributeSelectorField::Modifier,
                    ));
                    < Option < AttributeSelectorModifier > as VisitMutWithAstPath < V > > :: visit_mut_with_ast_path (modifier , visitor , & mut * __ast_path)
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for AttributeSelectorMatcher {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_attribute_selector_matcher`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_attribute_selector_matcher(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            AttributeSelectorMatcher { span, value } => {
                {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentKind::AttributeSelectorMatcher(
                            self::fields::AttributeSelectorMatcherField::Span,
                        ));
                    <swc_common::Span as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentKind::AttributeSelectorMatcher(
                            self::fields::AttributeSelectorMatcherField::Value,
                        ));
                    < AttributeSelectorMatcherValue as VisitMutWithAstPath < V > > :: visit_mut_with_ast_path (value , visitor , & mut * __ast_path)
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for AttributeSelectorMatcherValue {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_attribute_selector_matcher_value`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_attribute_selector_matcher_value(
            visitor, self, __ast_path,
        )
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            AttributeSelectorMatcherValue::Equals => {}
            AttributeSelectorMatcherValue::Tilde => {}
            AttributeSelectorMatcherValue::Bar => {}
            AttributeSelectorMatcherValue::Caret => {}
            AttributeSelectorMatcherValue::Dollar => {}
            AttributeSelectorMatcherValue::Asterisk => {}
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for AttributeSelectorModifier {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_attribute_selector_modifier`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_attribute_selector_modifier(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            AttributeSelectorModifier { span, value } => {
                {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentKind::AttributeSelectorModifier(
                            self::fields::AttributeSelectorModifierField::Span,
                        ));
                    <swc_common::Span as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentKind::AttributeSelectorModifier(
                            self::fields::AttributeSelectorModifierField::Value,
                        ));
                    <Ident as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        value,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for AttributeSelectorValue {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_attribute_selector_value`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_attribute_selector_value(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            AttributeSelectorValue::Str { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::AttributeSelectorValue(
                    self::fields::AttributeSelectorValueField::Str,
                ));
                <Str as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            AttributeSelectorValue::Ident { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::AttributeSelectorValue(
                    self::fields::AttributeSelectorValueField::Ident,
                ));
                <Ident as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for BinOp {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_bin_op`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_bin_op(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            BinOp::Add => {}
            BinOp::Sub => {}
            BinOp::Mul => {}
            BinOp::Div => {}
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for CalcOperator {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_calc_operator`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_calc_operator(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            CalcOperator { span, value } => {
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::CalcOperator(
                        self::fields::CalcOperatorField::Span,
                    ));
                    <swc_common::Span as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::CalcOperator(
                        self::fields::CalcOperatorField::Value,
                    ));
                    <CalcOperatorType as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        value,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for CalcOperatorType {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_calc_operator_type`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_calc_operator_type(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            CalcOperatorType::Add => {}
            CalcOperatorType::Sub => {}
            CalcOperatorType::Mul => {}
            CalcOperatorType::Div => {}
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for CalcProduct {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_calc_product`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_calc_product(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            CalcProduct { span, expressions } => {
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::CalcProduct(
                        self::fields::CalcProductField::Span,
                    ));
                    <swc_common::Span as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::CalcProduct(
                        self::fields::CalcProductField::Expressions(usize::MAX),
                    ));
                    <Vec<CalcValueOrOperator> as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        expressions,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for CalcProductOrOperator {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_calc_product_or_operator`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_calc_product_or_operator(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            CalcProductOrOperator::Product { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::CalcProductOrOperator(
                    self::fields::CalcProductOrOperatorField::Product,
                ));
                <CalcProduct as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            CalcProductOrOperator::Operator { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::CalcProductOrOperator(
                    self::fields::CalcProductOrOperatorField::Operator,
                ));
                <CalcOperator as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for CalcSum {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_calc_sum`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_calc_sum(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            CalcSum { span, expressions } => {
                {
                    let mut __ast_path = __ast_path
                        .with_guard(AstParentKind::CalcSum(self::fields::CalcSumField::Span));
                    <swc_common::Span as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::CalcSum(
                        self::fields::CalcSumField::Expressions(usize::MAX),
                    ));
                    <Vec<CalcProductOrOperator> as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        expressions,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for CalcValue {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_calc_value`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_calc_value(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            CalcValue::Number { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::CalcValue(
                    self::fields::CalcValueField::Number,
                ));
                <Number as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            CalcValue::Dimension { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::CalcValue(
                    self::fields::CalcValueField::Dimension,
                ));
                <Dimension as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            CalcValue::Percentage { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::CalcValue(
                    self::fields::CalcValueField::Percentage,
                ));
                <Percentage as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            CalcValue::Constant { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::CalcValue(
                    self::fields::CalcValueField::Constant,
                ));
                <Ident as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            CalcValue::Sum { 0: _field_0 } => {
                let mut __ast_path = __ast_path
                    .with_guard(AstParentKind::CalcValue(self::fields::CalcValueField::Sum));
                <CalcSum as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            CalcValue::Function { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::CalcValue(
                    self::fields::CalcValueField::Function,
                ));
                <Function as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for CalcValueOrOperator {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_calc_value_or_operator`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_calc_value_or_operator(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            CalcValueOrOperator::Value { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::CalcValueOrOperator(
                    self::fields::CalcValueOrOperatorField::Value,
                ));
                <CalcValue as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            CalcValueOrOperator::Operator { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::CalcValueOrOperator(
                    self::fields::CalcValueOrOperatorField::Operator,
                ));
                <CalcOperator as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for ClassSelector {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_class_selector`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_class_selector(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            ClassSelector { span, text } => {
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::ClassSelector(
                        self::fields::ClassSelectorField::Span,
                    ));
                    <swc_common::Span as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::ClassSelector(
                        self::fields::ClassSelectorField::Text,
                    ));
                    <Ident as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        text,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for CmykComponent {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_cmyk_component`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_cmyk_component(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            CmykComponent::Number { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::CmykComponent(
                    self::fields::CmykComponentField::Number,
                ));
                <Number as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            CmykComponent::Percentage { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::CmykComponent(
                    self::fields::CmykComponentField::Percentage,
                ));
                <Percentage as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            CmykComponent::Function { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::CmykComponent(
                    self::fields::CmykComponentField::Function,
                ));
                <Function as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for Color {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_color`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_color(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            Color::AbsoluteColorBase { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::Color(
                    self::fields::ColorField::AbsoluteColorBase,
                ));
                <AbsoluteColorBase as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            Color::CurrentColorOrSystemColor { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::Color(
                    self::fields::ColorField::CurrentColorOrSystemColor,
                ));
                <Ident as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            Color::Function { 0: _field_0 } => {
                let mut __ast_path =
                    __ast_path.with_guard(AstParentKind::Color(self::fields::ColorField::Function));
                <Function as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for ColorProfileName {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_color_profile_name`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_color_profile_name(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            ColorProfileName::DashedIdent { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::ColorProfileName(
                    self::fields::ColorProfileNameField::DashedIdent,
                ));
                <DashedIdent as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            ColorProfileName::Ident { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::ColorProfileName(
                    self::fields::ColorProfileNameField::Ident,
                ));
                <Ident as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for Combinator {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_combinator`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_combinator(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            Combinator { span, value } => {
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::Combinator(
                        self::fields::CombinatorField::Span,
                    ));
                    <swc_common::Span as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::Combinator(
                        self::fields::CombinatorField::Value,
                    ));
                    <CombinatorValue as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        value,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for CombinatorValue {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_combinator_value`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_combinator_value(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            CombinatorValue::Descendant => {}
            CombinatorValue::NextSibling => {}
            CombinatorValue::Child => {}
            CombinatorValue::LaterSibling => {}
            CombinatorValue::Column => {}
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for ComplexSelector {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_complex_selector`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_complex_selector(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            ComplexSelector { span, children } => {
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::ComplexSelector(
                        self::fields::ComplexSelectorField::Span,
                    ));
                    <swc_common::Span as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::ComplexSelector(
                        self::fields::ComplexSelectorField::Children(usize::MAX),
                    ));
                    < Vec < ComplexSelectorChildren > as VisitMutWithAstPath < V > > :: visit_mut_with_ast_path (children , visitor , & mut * __ast_path)
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for ComplexSelectorChildren {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_complex_selector_children`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_complex_selector_children(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            ComplexSelectorChildren::CompoundSelector { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::ComplexSelectorChildren(
                    self::fields::ComplexSelectorChildrenField::CompoundSelector,
                ));
                <CompoundSelector as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            ComplexSelectorChildren::Combinator { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::ComplexSelectorChildren(
                    self::fields::ComplexSelectorChildrenField::Combinator,
                ));
                <Combinator as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for ComponentValue {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_component_value`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_component_value(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            ComponentValue::PreservedToken { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::ComponentValue(
                    self::fields::ComponentValueField::PreservedToken,
                ));
                <Box<TokenAndSpan> as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            ComponentValue::Function { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::ComponentValue(
                    self::fields::ComponentValueField::Function,
                ));
                <Box<Function> as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            ComponentValue::SimpleBlock { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::ComponentValue(
                    self::fields::ComponentValueField::SimpleBlock,
                ));
                <Box<SimpleBlock> as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            ComponentValue::AtRule { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::ComponentValue(
                    self::fields::ComponentValueField::AtRule,
                ));
                <Box<AtRule> as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            ComponentValue::QualifiedRule { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::ComponentValue(
                    self::fields::ComponentValueField::QualifiedRule,
                ));
                <Box<QualifiedRule> as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            ComponentValue::ListOfComponentValues { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::ComponentValue(
                    self::fields::ComponentValueField::ListOfComponentValues,
                ));
                <Box<ListOfComponentValues> as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            ComponentValue::KeyframeBlock { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::ComponentValue(
                    self::fields::ComponentValueField::KeyframeBlock,
                ));
                <Box<KeyframeBlock> as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            ComponentValue::Ident { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::ComponentValue(
                    self::fields::ComponentValueField::Ident,
                ));
                <Box<Ident> as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            ComponentValue::DashedIdent { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::ComponentValue(
                    self::fields::ComponentValueField::DashedIdent,
                ));
                <Box<DashedIdent> as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            ComponentValue::Str { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::ComponentValue(
                    self::fields::ComponentValueField::Str,
                ));
                <Box<Str> as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            ComponentValue::Url { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::ComponentValue(
                    self::fields::ComponentValueField::Url,
                ));
                <Box<Url> as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            ComponentValue::Integer { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::ComponentValue(
                    self::fields::ComponentValueField::Integer,
                ));
                <Box<Integer> as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            ComponentValue::Number { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::ComponentValue(
                    self::fields::ComponentValueField::Number,
                ));
                <Box<Number> as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            ComponentValue::Percentage { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::ComponentValue(
                    self::fields::ComponentValueField::Percentage,
                ));
                <Box<Percentage> as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            ComponentValue::Dimension { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::ComponentValue(
                    self::fields::ComponentValueField::Dimension,
                ));
                <Box<Dimension> as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            ComponentValue::LengthPercentage { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::ComponentValue(
                    self::fields::ComponentValueField::LengthPercentage,
                ));
                <Box<LengthPercentage> as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            ComponentValue::FrequencyPercentage { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::ComponentValue(
                    self::fields::ComponentValueField::FrequencyPercentage,
                ));
                <Box<FrequencyPercentage> as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            ComponentValue::AnglePercentage { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::ComponentValue(
                    self::fields::ComponentValueField::AnglePercentage,
                ));
                <Box<AnglePercentage> as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            ComponentValue::TimePercentage { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::ComponentValue(
                    self::fields::ComponentValueField::TimePercentage,
                ));
                <Box<TimePercentage> as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            ComponentValue::Ratio { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::ComponentValue(
                    self::fields::ComponentValueField::Ratio,
                ));
                <Box<Ratio> as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            ComponentValue::UnicodeRange { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::ComponentValue(
                    self::fields::ComponentValueField::UnicodeRange,
                ));
                <Box<UnicodeRange> as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            ComponentValue::Color { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::ComponentValue(
                    self::fields::ComponentValueField::Color,
                ));
                <Box<Color> as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            ComponentValue::AlphaValue { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::ComponentValue(
                    self::fields::ComponentValueField::AlphaValue,
                ));
                <Box<AlphaValue> as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            ComponentValue::Hue { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::ComponentValue(
                    self::fields::ComponentValueField::Hue,
                ));
                <Box<Hue> as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            ComponentValue::CmykComponent { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::ComponentValue(
                    self::fields::ComponentValueField::CmykComponent,
                ));
                <Box<CmykComponent> as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            ComponentValue::Delimiter { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::ComponentValue(
                    self::fields::ComponentValueField::Delimiter,
                ));
                <Box<Delimiter> as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            ComponentValue::CalcSum { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::ComponentValue(
                    self::fields::ComponentValueField::CalcSum,
                ));
                <Box<CalcSum> as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            ComponentValue::ComplexSelector { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::ComponentValue(
                    self::fields::ComponentValueField::ComplexSelector,
                ));
                <Box<ComplexSelector> as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            ComponentValue::LayerName { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::ComponentValue(
                    self::fields::ComponentValueField::LayerName,
                ));
                <Box<LayerName> as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            ComponentValue::SupportsCondition { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::ComponentValue(
                    self::fields::ComponentValueField::SupportsCondition,
                ));
                <Box<SupportsCondition> as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            ComponentValue::Declaration { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::ComponentValue(
                    self::fields::ComponentValueField::Declaration,
                ));
                <Box<Declaration> as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            ComponentValue::IdSelector { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::ComponentValue(
                    self::fields::ComponentValueField::IdSelector,
                ));
                <Box<IdSelector> as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for CompoundSelector {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_compound_selector`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_compound_selector(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            CompoundSelector {
                span,
                nesting_selector,
                type_selector,
                subclass_selectors,
            } => {
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::CompoundSelector(
                        self::fields::CompoundSelectorField::Span,
                    ));
                    <swc_common::Span as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::CompoundSelector(
                        self::fields::CompoundSelectorField::NestingSelector,
                    ));
                    <Option<NestingSelector> as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        nesting_selector,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::CompoundSelector(
                        self::fields::CompoundSelectorField::TypeSelector,
                    ));
                    <Option<Box<TypeSelector>> as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        type_selector,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::CompoundSelector(
                        self::fields::CompoundSelectorField::SubclassSelectors(usize::MAX),
                    ));
                    <Vec<SubclassSelector> as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        subclass_selectors,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for CompoundSelectorList {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_compound_selector_list`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_compound_selector_list(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            CompoundSelectorList { span, children } => {
                {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentKind::CompoundSelectorList(
                            self::fields::CompoundSelectorListField::Span,
                        ));
                    <swc_common::Span as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentKind::CompoundSelectorList(
                            self::fields::CompoundSelectorListField::Children(usize::MAX),
                        ));
                    <Vec<CompoundSelector> as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        children,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for ContainerCondition {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_container_condition`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_container_condition(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            ContainerCondition { span, name, query } => {
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::ContainerCondition(
                        self::fields::ContainerConditionField::Span,
                    ));
                    <swc_common::Span as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::ContainerCondition(
                        self::fields::ContainerConditionField::Name,
                    ));
                    <Option<ContainerName> as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        name,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::ContainerCondition(
                        self::fields::ContainerConditionField::Query,
                    ));
                    <ContainerQuery as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        query,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for ContainerName {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_container_name`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_container_name(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            ContainerName::CustomIdent { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::ContainerName(
                    self::fields::ContainerNameField::CustomIdent,
                ));
                <CustomIdent as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for ContainerQuery {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_container_query`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_container_query(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            ContainerQuery { span, queries } => {
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::ContainerQuery(
                        self::fields::ContainerQueryField::Span,
                    ));
                    <swc_common::Span as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::ContainerQuery(
                        self::fields::ContainerQueryField::Queries(usize::MAX),
                    ));
                    <Vec<ContainerQueryType> as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        queries,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for ContainerQueryAnd {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_container_query_and`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_container_query_and(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            ContainerQueryAnd {
                span,
                keyword,
                query,
            } => {
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::ContainerQueryAnd(
                        self::fields::ContainerQueryAndField::Span,
                    ));
                    <swc_common::Span as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::ContainerQueryAnd(
                        self::fields::ContainerQueryAndField::Keyword,
                    ));
                    <Option<Ident> as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        keyword,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::ContainerQueryAnd(
                        self::fields::ContainerQueryAndField::Query,
                    ));
                    <QueryInParens as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        query,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for ContainerQueryNot {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_container_query_not`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_container_query_not(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            ContainerQueryNot {
                span,
                keyword,
                query,
            } => {
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::ContainerQueryNot(
                        self::fields::ContainerQueryNotField::Span,
                    ));
                    <swc_common::Span as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::ContainerQueryNot(
                        self::fields::ContainerQueryNotField::Keyword,
                    ));
                    <Option<Ident> as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        keyword,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::ContainerQueryNot(
                        self::fields::ContainerQueryNotField::Query,
                    ));
                    <QueryInParens as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        query,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for ContainerQueryOr {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_container_query_or`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_container_query_or(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            ContainerQueryOr {
                span,
                keyword,
                query,
            } => {
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::ContainerQueryOr(
                        self::fields::ContainerQueryOrField::Span,
                    ));
                    <swc_common::Span as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::ContainerQueryOr(
                        self::fields::ContainerQueryOrField::Keyword,
                    ));
                    <Option<Ident> as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        keyword,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::ContainerQueryOr(
                        self::fields::ContainerQueryOrField::Query,
                    ));
                    <QueryInParens as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        query,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for ContainerQueryType {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_container_query_type`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_container_query_type(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            ContainerQueryType::Not { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::ContainerQueryType(
                    self::fields::ContainerQueryTypeField::Not,
                ));
                <ContainerQueryNot as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            ContainerQueryType::And { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::ContainerQueryType(
                    self::fields::ContainerQueryTypeField::And,
                ));
                <ContainerQueryAnd as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            ContainerQueryType::Or { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::ContainerQueryType(
                    self::fields::ContainerQueryTypeField::Or,
                ));
                <ContainerQueryOr as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            ContainerQueryType::QueryInParens { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::ContainerQueryType(
                    self::fields::ContainerQueryTypeField::QueryInParens,
                ));
                <QueryInParens as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for CustomHighlightName {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_custom_highlight_name`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_custom_highlight_name(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            CustomHighlightName { span, value, raw } => {
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::CustomHighlightName(
                        self::fields::CustomHighlightNameField::Span,
                    ));
                    <swc_common::Span as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::CustomHighlightName(
                        self::fields::CustomHighlightNameField::Value,
                    ));
                    <swc_atoms::Atom as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        value,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::CustomHighlightName(
                        self::fields::CustomHighlightNameField::Raw,
                    ));
                    <Option<swc_atoms::Atom> as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        raw,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for CustomIdent {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_custom_ident`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_custom_ident(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            CustomIdent { span, value, raw } => {
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::CustomIdent(
                        self::fields::CustomIdentField::Span,
                    ));
                    <swc_common::Span as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::CustomIdent(
                        self::fields::CustomIdentField::Value,
                    ));
                    <swc_atoms::Atom as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        value,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::CustomIdent(
                        self::fields::CustomIdentField::Raw,
                    ));
                    <Option<swc_atoms::Atom> as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        raw,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for CustomMediaQuery {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_custom_media_query`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_custom_media_query(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            CustomMediaQuery { span, name, media } => {
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::CustomMediaQuery(
                        self::fields::CustomMediaQueryField::Span,
                    ));
                    <swc_common::Span as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::CustomMediaQuery(
                        self::fields::CustomMediaQueryField::Name,
                    ));
                    <ExtensionName as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        name,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::CustomMediaQuery(
                        self::fields::CustomMediaQueryField::Media,
                    ));
                    <CustomMediaQueryMediaType as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        media,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for CustomMediaQueryMediaType {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_custom_media_query_media_type`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_custom_media_query_media_type(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            CustomMediaQueryMediaType::Ident { 0: _field_0 } => {
                let mut __ast_path =
                    __ast_path.with_guard(AstParentKind::CustomMediaQueryMediaType(
                        self::fields::CustomMediaQueryMediaTypeField::Ident,
                    ));
                <Ident as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            CustomMediaQueryMediaType::MediaQueryList { 0: _field_0 } => {
                let mut __ast_path =
                    __ast_path.with_guard(AstParentKind::CustomMediaQueryMediaType(
                        self::fields::CustomMediaQueryMediaTypeField::MediaQueryList,
                    ));
                <MediaQueryList as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for CustomPropertyName {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_custom_property_name`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_custom_property_name(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            CustomPropertyName { span, value, raw } => {
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::CustomPropertyName(
                        self::fields::CustomPropertyNameField::Span,
                    ));
                    <swc_common::Span as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::CustomPropertyName(
                        self::fields::CustomPropertyNameField::Value,
                    ));
                    <swc_atoms::Atom as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        value,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::CustomPropertyName(
                        self::fields::CustomPropertyNameField::Raw,
                    ));
                    <Option<swc_atoms::Atom> as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        raw,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for DashedIdent {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_dashed_ident`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_dashed_ident(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            DashedIdent { span, value, raw } => {
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::DashedIdent(
                        self::fields::DashedIdentField::Span,
                    ));
                    <swc_common::Span as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::DashedIdent(
                        self::fields::DashedIdentField::Value,
                    ));
                    <swc_atoms::Atom as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        value,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::DashedIdent(
                        self::fields::DashedIdentField::Raw,
                    ));
                    <Option<swc_atoms::Atom> as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        raw,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for Declaration {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_declaration`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_declaration(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            Declaration {
                span,
                name,
                value,
                important,
            } => {
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::Declaration(
                        self::fields::DeclarationField::Span,
                    ));
                    <swc_common::Span as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::Declaration(
                        self::fields::DeclarationField::Name,
                    ));
                    <DeclarationName as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        name,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::Declaration(
                        self::fields::DeclarationField::Value(usize::MAX),
                    ));
                    <Vec<ComponentValue> as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        value,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::Declaration(
                        self::fields::DeclarationField::Important,
                    ));
                    <Option<ImportantFlag> as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        important,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for DeclarationName {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_declaration_name`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_declaration_name(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            DeclarationName::Ident { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::DeclarationName(
                    self::fields::DeclarationNameField::Ident,
                ));
                <Ident as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            DeclarationName::DashedIdent { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::DeclarationName(
                    self::fields::DeclarationNameField::DashedIdent,
                ));
                <DashedIdent as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for DeclarationOrAtRule {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_declaration_or_at_rule`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_declaration_or_at_rule(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            DeclarationOrAtRule::Declaration { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::DeclarationOrAtRule(
                    self::fields::DeclarationOrAtRuleField::Declaration,
                ));
                <Box<Declaration> as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            DeclarationOrAtRule::AtRule { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::DeclarationOrAtRule(
                    self::fields::DeclarationOrAtRuleField::AtRule,
                ));
                <Box<AtRule> as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            DeclarationOrAtRule::ListOfComponentValues { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::DeclarationOrAtRule(
                    self::fields::DeclarationOrAtRuleField::ListOfComponentValues,
                ));
                <Box<ListOfComponentValues> as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for Delimiter {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_delimiter`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_delimiter(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            Delimiter { span, value } => {
                {
                    let mut __ast_path = __ast_path
                        .with_guard(AstParentKind::Delimiter(self::fields::DelimiterField::Span));
                    <swc_common::Span as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::Delimiter(
                        self::fields::DelimiterField::Value,
                    ));
                    <DelimiterValue as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        value,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for DelimiterValue {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_delimiter_value`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_delimiter_value(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            DelimiterValue::Comma => {}
            DelimiterValue::Solidus => {}
            DelimiterValue::Semicolon => {}
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for Dimension {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_dimension`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_dimension(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            Dimension::Length { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::Dimension(
                    self::fields::DimensionField::Length,
                ));
                <Length as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            Dimension::Angle { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::Dimension(
                    self::fields::DimensionField::Angle,
                ));
                <Angle as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            Dimension::Time { 0: _field_0 } => {
                let mut __ast_path = __ast_path
                    .with_guard(AstParentKind::Dimension(self::fields::DimensionField::Time));
                <Time as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            Dimension::Frequency { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::Dimension(
                    self::fields::DimensionField::Frequency,
                ));
                <Frequency as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            Dimension::Resolution { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::Dimension(
                    self::fields::DimensionField::Resolution,
                ));
                <Resolution as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            Dimension::Flex { 0: _field_0 } => {
                let mut __ast_path = __ast_path
                    .with_guard(AstParentKind::Dimension(self::fields::DimensionField::Flex));
                <Flex as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            Dimension::UnknownDimension { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::Dimension(
                    self::fields::DimensionField::UnknownDimension,
                ));
                <UnknownDimension as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for DimensionToken {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_dimension_token`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_dimension_token(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            DimensionToken {
                value,
                raw_value,
                unit,
                type_flag,
                raw_unit,
            } => {
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::DimensionToken(
                        self::fields::DimensionTokenField::RawValue,
                    ));
                    <swc_atoms::Atom as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        raw_value,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::DimensionToken(
                        self::fields::DimensionTokenField::Unit,
                    ));
                    <swc_atoms::Atom as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        unit,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::DimensionToken(
                        self::fields::DimensionTokenField::TypeFlag,
                    ));
                    <NumberType as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        type_flag,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::DimensionToken(
                        self::fields::DimensionTokenField::RawUnit,
                    ));
                    <swc_atoms::Atom as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        raw_unit,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for DocumentPrelude {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_document_prelude`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_document_prelude(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            DocumentPrelude {
                span,
                matching_functions,
            } => {
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::DocumentPrelude(
                        self::fields::DocumentPreludeField::Span,
                    ));
                    <swc_common::Span as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::DocumentPrelude(
                        self::fields::DocumentPreludeField::MatchingFunctions(usize::MAX),
                    ));
                    < Vec < DocumentPreludeMatchingFunction > as VisitMutWithAstPath < V > > :: visit_mut_with_ast_path (matching_functions , visitor , & mut * __ast_path)
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for DocumentPreludeMatchingFunction {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_document_prelude_matching_function`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_document_prelude_matching_function(
            visitor, self, __ast_path,
        )
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            DocumentPreludeMatchingFunction::Url { 0: _field_0 } => {
                let mut __ast_path =
                    __ast_path.with_guard(AstParentKind::DocumentPreludeMatchingFunction(
                        self::fields::DocumentPreludeMatchingFunctionField::Url,
                    ));
                <Url as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            DocumentPreludeMatchingFunction::Function { 0: _field_0 } => {
                let mut __ast_path =
                    __ast_path.with_guard(AstParentKind::DocumentPreludeMatchingFunction(
                        self::fields::DocumentPreludeMatchingFunctionField::Function,
                    ));
                <Function as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for ExtensionName {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_extension_name`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_extension_name(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            ExtensionName { span, value, raw } => {
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::ExtensionName(
                        self::fields::ExtensionNameField::Span,
                    ));
                    <swc_common::Span as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::ExtensionName(
                        self::fields::ExtensionNameField::Value,
                    ));
                    <swc_atoms::Atom as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        value,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::ExtensionName(
                        self::fields::ExtensionNameField::Raw,
                    ));
                    <Option<swc_atoms::Atom> as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        raw,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for FamilyName {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_family_name`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_family_name(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            FamilyName::Str { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::FamilyName(
                    self::fields::FamilyNameField::Str,
                ));
                <Str as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            FamilyName::SequenceOfCustomIdents { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::FamilyName(
                    self::fields::FamilyNameField::SequenceOfCustomIdents,
                ));
                <SequenceOfCustomIdents as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for Flex {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_flex`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_flex(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            Flex { span, value, unit } => {
                {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentKind::Flex(self::fields::FlexField::Span));
                    <swc_common::Span as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentKind::Flex(self::fields::FlexField::Value));
                    <Number as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        value,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentKind::Flex(self::fields::FlexField::Unit));
                    <Ident as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        unit,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for FontFeatureValuesPrelude {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_font_feature_values_prelude`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_font_feature_values_prelude(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            FontFeatureValuesPrelude { span, font_family } => {
                {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentKind::FontFeatureValuesPrelude(
                            self::fields::FontFeatureValuesPreludeField::Span,
                        ));
                    <swc_common::Span as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentKind::FontFeatureValuesPrelude(
                            self::fields::FontFeatureValuesPreludeField::FontFamily(usize::MAX),
                        ));
                    <Vec<FamilyName> as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        font_family,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for ForgivingComplexSelector {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_forgiving_complex_selector`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_forgiving_complex_selector(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            ForgivingComplexSelector::ComplexSelector { 0: _field_0 } => {
                let mut __ast_path =
                    __ast_path.with_guard(AstParentKind::ForgivingComplexSelector(
                        self::fields::ForgivingComplexSelectorField::ComplexSelector,
                    ));
                <ComplexSelector as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            ForgivingComplexSelector::ListOfComponentValues { 0: _field_0 } => {
                let mut __ast_path =
                    __ast_path.with_guard(AstParentKind::ForgivingComplexSelector(
                        self::fields::ForgivingComplexSelectorField::ListOfComponentValues,
                    ));
                <ListOfComponentValues as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for ForgivingRelativeSelector {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_forgiving_relative_selector`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_forgiving_relative_selector(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            ForgivingRelativeSelector::RelativeSelector { 0: _field_0 } => {
                let mut __ast_path =
                    __ast_path.with_guard(AstParentKind::ForgivingRelativeSelector(
                        self::fields::ForgivingRelativeSelectorField::RelativeSelector,
                    ));
                <RelativeSelector as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            ForgivingRelativeSelector::ListOfComponentValues { 0: _field_0 } => {
                let mut __ast_path =
                    __ast_path.with_guard(AstParentKind::ForgivingRelativeSelector(
                        self::fields::ForgivingRelativeSelectorField::ListOfComponentValues,
                    ));
                <ListOfComponentValues as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for ForgivingRelativeSelectorList {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_forgiving_relative_selector_list`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_forgiving_relative_selector_list(
            visitor, self, __ast_path,
        )
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            ForgivingRelativeSelectorList { span, children } => {
                {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentKind::ForgivingRelativeSelectorList(
                            self::fields::ForgivingRelativeSelectorListField::Span,
                        ));
                    <swc_common::Span as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentKind::ForgivingRelativeSelectorList(
                            self::fields::ForgivingRelativeSelectorListField::Children(usize::MAX),
                        ));
                    < Vec < ForgivingRelativeSelector > as VisitMutWithAstPath < V > > :: visit_mut_with_ast_path (children , visitor , & mut * __ast_path)
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for ForgivingSelectorList {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_forgiving_selector_list`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_forgiving_selector_list(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            ForgivingSelectorList { span, children } => {
                {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentKind::ForgivingSelectorList(
                            self::fields::ForgivingSelectorListField::Span,
                        ));
                    <swc_common::Span as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentKind::ForgivingSelectorList(
                            self::fields::ForgivingSelectorListField::Children(usize::MAX),
                        ));
                    < Vec < ForgivingComplexSelector > as VisitMutWithAstPath < V > > :: visit_mut_with_ast_path (children , visitor , & mut * __ast_path)
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for Frequency {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_frequency`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_frequency(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            Frequency { span, value, unit } => {
                {
                    let mut __ast_path = __ast_path
                        .with_guard(AstParentKind::Frequency(self::fields::FrequencyField::Span));
                    <swc_common::Span as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::Frequency(
                        self::fields::FrequencyField::Value,
                    ));
                    <Number as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        value,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path
                        .with_guard(AstParentKind::Frequency(self::fields::FrequencyField::Unit));
                    <Ident as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        unit,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for FrequencyPercentage {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_frequency_percentage`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_frequency_percentage(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            FrequencyPercentage::Frequency { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::FrequencyPercentage(
                    self::fields::FrequencyPercentageField::Frequency,
                ));
                <Frequency as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            FrequencyPercentage::Percentage { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::FrequencyPercentage(
                    self::fields::FrequencyPercentageField::Percentage,
                ));
                <Percentage as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for Function {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_function`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_function(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            Function { span, name, value } => {
                {
                    let mut __ast_path = __ast_path
                        .with_guard(AstParentKind::Function(self::fields::FunctionField::Span));
                    <swc_common::Span as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path
                        .with_guard(AstParentKind::Function(self::fields::FunctionField::Name));
                    <FunctionName as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        name,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::Function(
                        self::fields::FunctionField::Value(usize::MAX),
                    ));
                    <Vec<ComponentValue> as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        value,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for FunctionName {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_function_name`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_function_name(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            FunctionName::Ident { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::FunctionName(
                    self::fields::FunctionNameField::Ident,
                ));
                <Ident as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            FunctionName::DashedIdent { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::FunctionName(
                    self::fields::FunctionNameField::DashedIdent,
                ));
                <DashedIdent as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for GeneralEnclosed {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_general_enclosed`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_general_enclosed(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            GeneralEnclosed::Function { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::GeneralEnclosed(
                    self::fields::GeneralEnclosedField::Function,
                ));
                <Function as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            GeneralEnclosed::SimpleBlock { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::GeneralEnclosed(
                    self::fields::GeneralEnclosedField::SimpleBlock,
                ));
                <SimpleBlock as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for HexColor {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_hex_color`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_hex_color(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            HexColor { span, value, raw } => {
                {
                    let mut __ast_path = __ast_path
                        .with_guard(AstParentKind::HexColor(self::fields::HexColorField::Span));
                    <swc_common::Span as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path
                        .with_guard(AstParentKind::HexColor(self::fields::HexColorField::Value));
                    <swc_atoms::Atom as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        value,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path
                        .with_guard(AstParentKind::HexColor(self::fields::HexColorField::Raw));
                    <Option<swc_atoms::Atom> as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        raw,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for Hue {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_hue`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_hue(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            Hue::Number { 0: _field_0 } => {
                let mut __ast_path =
                    __ast_path.with_guard(AstParentKind::Hue(self::fields::HueField::Number));
                <Number as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            Hue::Angle { 0: _field_0 } => {
                let mut __ast_path =
                    __ast_path.with_guard(AstParentKind::Hue(self::fields::HueField::Angle));
                <Angle as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for IdSelector {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_id_selector`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_id_selector(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            IdSelector { span, text } => {
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::IdSelector(
                        self::fields::IdSelectorField::Span,
                    ));
                    <swc_common::Span as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::IdSelector(
                        self::fields::IdSelectorField::Text,
                    ));
                    <Ident as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        text,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for Ident {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_ident`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_ident(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            Ident { span, value, raw } => {
                {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentKind::Ident(self::fields::IdentField::Span));
                    <swc_common::Span as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path
                        .with_guard(AstParentKind::Ident(self::fields::IdentField::Value));
                    <swc_atoms::Atom as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        value,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentKind::Ident(self::fields::IdentField::Raw));
                    <Option<swc_atoms::Atom> as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        raw,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for ImportConditions {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_import_conditions`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_import_conditions(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            ImportConditions {
                span,
                supports,
                media,
            } => {
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::ImportConditions(
                        self::fields::ImportConditionsField::Span,
                    ));
                    <swc_common::Span as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::ImportConditions(
                        self::fields::ImportConditionsField::Supports,
                    ));
                    <Option<Box<Function>> as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        supports,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::ImportConditions(
                        self::fields::ImportConditionsField::Media,
                    ));
                    <Option<Box<MediaQueryList>> as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        media,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for ImportHref {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_import_href`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_import_href(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            ImportHref::Url { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::ImportHref(
                    self::fields::ImportHrefField::Url,
                ));
                <Url as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            ImportHref::Str { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::ImportHref(
                    self::fields::ImportHrefField::Str,
                ));
                <Str as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for ImportLayerName {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_import_layer_name`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_import_layer_name(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            ImportLayerName::Ident { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::ImportLayerName(
                    self::fields::ImportLayerNameField::Ident,
                ));
                <Ident as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            ImportLayerName::Function { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::ImportLayerName(
                    self::fields::ImportLayerNameField::Function,
                ));
                <Function as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for ImportPrelude {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_import_prelude`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_import_prelude(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            ImportPrelude {
                span,
                href,
                layer_name,
                import_conditions,
            } => {
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::ImportPrelude(
                        self::fields::ImportPreludeField::Span,
                    ));
                    <swc_common::Span as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::ImportPrelude(
                        self::fields::ImportPreludeField::Href,
                    ));
                    <Box<ImportHref> as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        href,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::ImportPrelude(
                        self::fields::ImportPreludeField::LayerName,
                    ));
                    < Option < Box < ImportLayerName > > as VisitMutWithAstPath < V > > :: visit_mut_with_ast_path (layer_name , visitor , & mut * __ast_path)
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::ImportPrelude(
                        self::fields::ImportPreludeField::ImportConditions,
                    ));
                    < Option < Box < ImportConditions > > as VisitMutWithAstPath < V > > :: visit_mut_with_ast_path (import_conditions , visitor , & mut * __ast_path)
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for ImportantFlag {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_important_flag`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_important_flag(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            ImportantFlag { span, value } => {
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::ImportantFlag(
                        self::fields::ImportantFlagField::Span,
                    ));
                    <swc_common::Span as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::ImportantFlag(
                        self::fields::ImportantFlagField::Value,
                    ));
                    <Ident as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        value,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for Integer {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_integer`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_integer(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            Integer { span, value, raw } => {
                {
                    let mut __ast_path = __ast_path
                        .with_guard(AstParentKind::Integer(self::fields::IntegerField::Span));
                    <swc_common::Span as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path
                        .with_guard(AstParentKind::Integer(self::fields::IntegerField::Raw));
                    <Option<swc_atoms::Atom> as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        raw,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for KeyframeBlock {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_keyframe_block`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_keyframe_block(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            KeyframeBlock {
                span,
                prelude,
                block,
            } => {
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::KeyframeBlock(
                        self::fields::KeyframeBlockField::Span,
                    ));
                    <swc_common::Span as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::KeyframeBlock(
                        self::fields::KeyframeBlockField::Prelude(usize::MAX),
                    ));
                    <Vec<KeyframeSelector> as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        prelude,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::KeyframeBlock(
                        self::fields::KeyframeBlockField::Block,
                    ));
                    <SimpleBlock as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        block,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for KeyframeSelector {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_keyframe_selector`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_keyframe_selector(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            KeyframeSelector::Ident { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::KeyframeSelector(
                    self::fields::KeyframeSelectorField::Ident,
                ));
                <Ident as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            KeyframeSelector::Percentage { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::KeyframeSelector(
                    self::fields::KeyframeSelectorField::Percentage,
                ));
                <Percentage as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for KeyframesName {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_keyframes_name`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_keyframes_name(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            KeyframesName::CustomIdent { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::KeyframesName(
                    self::fields::KeyframesNameField::CustomIdent,
                ));
                <Box<CustomIdent> as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            KeyframesName::Str { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::KeyframesName(
                    self::fields::KeyframesNameField::Str,
                ));
                <Box<Str> as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            KeyframesName::PseudoPrefix { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::KeyframesName(
                    self::fields::KeyframesNameField::PseudoPrefix,
                ));
                <Box<KeyframesPseudoPrefix> as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            KeyframesName::PseudoFunction { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::KeyframesName(
                    self::fields::KeyframesNameField::PseudoFunction,
                ));
                <Box<KeyframesPseudoFunction> as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for KeyframesPseudoFunction {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_keyframes_pseudo_function`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_keyframes_pseudo_function(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            KeyframesPseudoFunction { span, pseudo, name } => {
                {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentKind::KeyframesPseudoFunction(
                            self::fields::KeyframesPseudoFunctionField::Span,
                        ));
                    <swc_common::Span as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentKind::KeyframesPseudoFunction(
                            self::fields::KeyframesPseudoFunctionField::Pseudo,
                        ));
                    <Ident as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        pseudo,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentKind::KeyframesPseudoFunction(
                            self::fields::KeyframesPseudoFunctionField::Name,
                        ));
                    <KeyframesName as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        name,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for KeyframesPseudoPrefix {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_keyframes_pseudo_prefix`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_keyframes_pseudo_prefix(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            KeyframesPseudoPrefix { span, pseudo, name } => {
                {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentKind::KeyframesPseudoPrefix(
                            self::fields::KeyframesPseudoPrefixField::Span,
                        ));
                    <swc_common::Span as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentKind::KeyframesPseudoPrefix(
                            self::fields::KeyframesPseudoPrefixField::Pseudo,
                        ));
                    <Ident as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        pseudo,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentKind::KeyframesPseudoPrefix(
                            self::fields::KeyframesPseudoPrefixField::Name,
                        ));
                    <KeyframesName as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        name,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for LayerName {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_layer_name`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_layer_name(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            LayerName { span, name } => {
                {
                    let mut __ast_path = __ast_path
                        .with_guard(AstParentKind::LayerName(self::fields::LayerNameField::Span));
                    <swc_common::Span as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::LayerName(
                        self::fields::LayerNameField::Name(usize::MAX),
                    ));
                    <Vec<Ident> as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        name,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for LayerNameList {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_layer_name_list`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_layer_name_list(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            LayerNameList { span, name_list } => {
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::LayerNameList(
                        self::fields::LayerNameListField::Span,
                    ));
                    <swc_common::Span as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::LayerNameList(
                        self::fields::LayerNameListField::NameList(usize::MAX),
                    ));
                    <Vec<LayerName> as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        name_list,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for LayerPrelude {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_layer_prelude`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_layer_prelude(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            LayerPrelude::Name { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::LayerPrelude(
                    self::fields::LayerPreludeField::Name,
                ));
                <LayerName as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            LayerPrelude::NameList { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::LayerPrelude(
                    self::fields::LayerPreludeField::NameList,
                ));
                <LayerNameList as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for Length {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_length`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_length(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            Length { span, value, unit } => {
                {
                    let mut __ast_path = __ast_path
                        .with_guard(AstParentKind::Length(self::fields::LengthField::Span));
                    <swc_common::Span as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path
                        .with_guard(AstParentKind::Length(self::fields::LengthField::Value));
                    <Number as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        value,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path
                        .with_guard(AstParentKind::Length(self::fields::LengthField::Unit));
                    <Ident as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        unit,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for LengthPercentage {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_length_percentage`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_length_percentage(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            LengthPercentage::Length { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::LengthPercentage(
                    self::fields::LengthPercentageField::Length,
                ));
                <Length as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            LengthPercentage::Percentage { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::LengthPercentage(
                    self::fields::LengthPercentageField::Percentage,
                ));
                <Percentage as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for ListOfComponentValues {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_list_of_component_values`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_list_of_component_values(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            ListOfComponentValues { span, children } => {
                {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentKind::ListOfComponentValues(
                            self::fields::ListOfComponentValuesField::Span,
                        ));
                    <swc_common::Span as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentKind::ListOfComponentValues(
                            self::fields::ListOfComponentValuesField::Children(usize::MAX),
                        ));
                    <Vec<ComponentValue> as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        children,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for MediaAnd {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_media_and`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_media_and(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            MediaAnd {
                span,
                keyword,
                condition,
            } => {
                {
                    let mut __ast_path = __ast_path
                        .with_guard(AstParentKind::MediaAnd(self::fields::MediaAndField::Span));
                    <swc_common::Span as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::MediaAnd(
                        self::fields::MediaAndField::Keyword,
                    ));
                    <Option<Ident> as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        keyword,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::MediaAnd(
                        self::fields::MediaAndField::Condition,
                    ));
                    <MediaInParens as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        condition,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for MediaCondition {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_media_condition`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_media_condition(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            MediaCondition { span, conditions } => {
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::MediaCondition(
                        self::fields::MediaConditionField::Span,
                    ));
                    <swc_common::Span as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::MediaCondition(
                        self::fields::MediaConditionField::Conditions(usize::MAX),
                    ));
                    <Vec<MediaConditionAllType> as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        conditions,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for MediaConditionAllType {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_media_condition_all_type`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_media_condition_all_type(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            MediaConditionAllType::Not { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::MediaConditionAllType(
                    self::fields::MediaConditionAllTypeField::Not,
                ));
                <MediaNot as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            MediaConditionAllType::And { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::MediaConditionAllType(
                    self::fields::MediaConditionAllTypeField::And,
                ));
                <MediaAnd as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            MediaConditionAllType::Or { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::MediaConditionAllType(
                    self::fields::MediaConditionAllTypeField::Or,
                ));
                <MediaOr as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            MediaConditionAllType::MediaInParens { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::MediaConditionAllType(
                    self::fields::MediaConditionAllTypeField::MediaInParens,
                ));
                <MediaInParens as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for MediaConditionType {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_media_condition_type`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_media_condition_type(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            MediaConditionType::All { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::MediaConditionType(
                    self::fields::MediaConditionTypeField::All,
                ));
                <MediaCondition as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            MediaConditionType::WithoutOr { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::MediaConditionType(
                    self::fields::MediaConditionTypeField::WithoutOr,
                ));
                <MediaConditionWithoutOr as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for MediaConditionWithoutOr {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_media_condition_without_or`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_media_condition_without_or(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            MediaConditionWithoutOr { span, conditions } => {
                {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentKind::MediaConditionWithoutOr(
                            self::fields::MediaConditionWithoutOrField::Span,
                        ));
                    <swc_common::Span as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentKind::MediaConditionWithoutOr(
                            self::fields::MediaConditionWithoutOrField::Conditions(usize::MAX),
                        ));
                    < Vec < MediaConditionWithoutOrType > as VisitMutWithAstPath < V > > :: visit_mut_with_ast_path (conditions , visitor , & mut * __ast_path)
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for MediaConditionWithoutOrType {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_media_condition_without_or_type`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_media_condition_without_or_type(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            MediaConditionWithoutOrType::Not { 0: _field_0 } => {
                let mut __ast_path =
                    __ast_path.with_guard(AstParentKind::MediaConditionWithoutOrType(
                        self::fields::MediaConditionWithoutOrTypeField::Not,
                    ));
                <MediaNot as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            MediaConditionWithoutOrType::And { 0: _field_0 } => {
                let mut __ast_path =
                    __ast_path.with_guard(AstParentKind::MediaConditionWithoutOrType(
                        self::fields::MediaConditionWithoutOrTypeField::And,
                    ));
                <MediaAnd as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            MediaConditionWithoutOrType::MediaInParens { 0: _field_0 } => {
                let mut __ast_path =
                    __ast_path.with_guard(AstParentKind::MediaConditionWithoutOrType(
                        self::fields::MediaConditionWithoutOrTypeField::MediaInParens,
                    ));
                <MediaInParens as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for MediaFeature {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_media_feature`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_media_feature(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            MediaFeature::Plain { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::MediaFeature(
                    self::fields::MediaFeatureField::Plain,
                ));
                <MediaFeaturePlain as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            MediaFeature::Boolean { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::MediaFeature(
                    self::fields::MediaFeatureField::Boolean,
                ));
                <MediaFeatureBoolean as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            MediaFeature::Range { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::MediaFeature(
                    self::fields::MediaFeatureField::Range,
                ));
                <MediaFeatureRange as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            MediaFeature::RangeInterval { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::MediaFeature(
                    self::fields::MediaFeatureField::RangeInterval,
                ));
                <MediaFeatureRangeInterval as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for MediaFeatureBoolean {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_media_feature_boolean`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_media_feature_boolean(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            MediaFeatureBoolean { span, name } => {
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::MediaFeatureBoolean(
                        self::fields::MediaFeatureBooleanField::Span,
                    ));
                    <swc_common::Span as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::MediaFeatureBoolean(
                        self::fields::MediaFeatureBooleanField::Name,
                    ));
                    <MediaFeatureName as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        name,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for MediaFeatureName {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_media_feature_name`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_media_feature_name(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            MediaFeatureName::Ident { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::MediaFeatureName(
                    self::fields::MediaFeatureNameField::Ident,
                ));
                <Ident as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            MediaFeatureName::ExtensionName { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::MediaFeatureName(
                    self::fields::MediaFeatureNameField::ExtensionName,
                ));
                <ExtensionName as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for MediaFeaturePlain {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_media_feature_plain`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_media_feature_plain(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            MediaFeaturePlain { span, name, value } => {
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::MediaFeaturePlain(
                        self::fields::MediaFeaturePlainField::Span,
                    ));
                    <swc_common::Span as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::MediaFeaturePlain(
                        self::fields::MediaFeaturePlainField::Name,
                    ));
                    <MediaFeatureName as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        name,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::MediaFeaturePlain(
                        self::fields::MediaFeaturePlainField::Value,
                    ));
                    <Box<MediaFeatureValue> as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        value,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for MediaFeatureRange {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_media_feature_range`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_media_feature_range(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            MediaFeatureRange {
                span,
                left,
                comparison,
                right,
            } => {
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::MediaFeatureRange(
                        self::fields::MediaFeatureRangeField::Span,
                    ));
                    <swc_common::Span as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::MediaFeatureRange(
                        self::fields::MediaFeatureRangeField::Left,
                    ));
                    <Box<MediaFeatureValue> as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        left,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::MediaFeatureRange(
                        self::fields::MediaFeatureRangeField::Comparison,
                    ));
                    <MediaFeatureRangeComparison as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        comparison,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::MediaFeatureRange(
                        self::fields::MediaFeatureRangeField::Right,
                    ));
                    <Box<MediaFeatureValue> as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        right,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for MediaFeatureRangeComparison {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_media_feature_range_comparison`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_media_feature_range_comparison(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            MediaFeatureRangeComparison::Lt => {}
            MediaFeatureRangeComparison::Le => {}
            MediaFeatureRangeComparison::Gt => {}
            MediaFeatureRangeComparison::Ge => {}
            MediaFeatureRangeComparison::Eq => {}
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for MediaFeatureRangeInterval {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_media_feature_range_interval`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_media_feature_range_interval(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            MediaFeatureRangeInterval {
                span,
                left,
                left_comparison,
                name,
                right_comparison,
                right,
            } => {
                {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentKind::MediaFeatureRangeInterval(
                            self::fields::MediaFeatureRangeIntervalField::Span,
                        ));
                    <swc_common::Span as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentKind::MediaFeatureRangeInterval(
                            self::fields::MediaFeatureRangeIntervalField::Left,
                        ));
                    <Box<MediaFeatureValue> as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        left,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentKind::MediaFeatureRangeInterval(
                            self::fields::MediaFeatureRangeIntervalField::LeftComparison,
                        ));
                    <MediaFeatureRangeComparison as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        left_comparison,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentKind::MediaFeatureRangeInterval(
                            self::fields::MediaFeatureRangeIntervalField::Name,
                        ));
                    <MediaFeatureName as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        name,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentKind::MediaFeatureRangeInterval(
                            self::fields::MediaFeatureRangeIntervalField::RightComparison,
                        ));
                    <MediaFeatureRangeComparison as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        right_comparison,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentKind::MediaFeatureRangeInterval(
                            self::fields::MediaFeatureRangeIntervalField::Right,
                        ));
                    <Box<MediaFeatureValue> as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        right,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for MediaFeatureValue {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_media_feature_value`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_media_feature_value(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            MediaFeatureValue::Number { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::MediaFeatureValue(
                    self::fields::MediaFeatureValueField::Number,
                ));
                <Number as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            MediaFeatureValue::Dimension { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::MediaFeatureValue(
                    self::fields::MediaFeatureValueField::Dimension,
                ));
                <Dimension as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            MediaFeatureValue::Ident { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::MediaFeatureValue(
                    self::fields::MediaFeatureValueField::Ident,
                ));
                <Ident as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            MediaFeatureValue::Ratio { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::MediaFeatureValue(
                    self::fields::MediaFeatureValueField::Ratio,
                ));
                <Ratio as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            MediaFeatureValue::Function { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::MediaFeatureValue(
                    self::fields::MediaFeatureValueField::Function,
                ));
                <Function as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for MediaInParens {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_media_in_parens`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_media_in_parens(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            MediaInParens::MediaCondition { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::MediaInParens(
                    self::fields::MediaInParensField::MediaCondition,
                ));
                <MediaCondition as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            MediaInParens::Feature { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::MediaInParens(
                    self::fields::MediaInParensField::Feature,
                ));
                <Box<MediaFeature> as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            MediaInParens::GeneralEnclosed { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::MediaInParens(
                    self::fields::MediaInParensField::GeneralEnclosed,
                ));
                <GeneralEnclosed as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for MediaNot {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_media_not`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_media_not(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            MediaNot {
                span,
                keyword,
                condition,
            } => {
                {
                    let mut __ast_path = __ast_path
                        .with_guard(AstParentKind::MediaNot(self::fields::MediaNotField::Span));
                    <swc_common::Span as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::MediaNot(
                        self::fields::MediaNotField::Keyword,
                    ));
                    <Option<Ident> as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        keyword,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::MediaNot(
                        self::fields::MediaNotField::Condition,
                    ));
                    <MediaInParens as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        condition,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for MediaOr {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_media_or`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_media_or(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            MediaOr {
                span,
                keyword,
                condition,
            } => {
                {
                    let mut __ast_path = __ast_path
                        .with_guard(AstParentKind::MediaOr(self::fields::MediaOrField::Span));
                    <swc_common::Span as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path
                        .with_guard(AstParentKind::MediaOr(self::fields::MediaOrField::Keyword));
                    <Option<Ident> as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        keyword,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::MediaOr(
                        self::fields::MediaOrField::Condition,
                    ));
                    <MediaInParens as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        condition,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for MediaQuery {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_media_query`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_media_query(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            MediaQuery {
                span,
                modifier,
                media_type,
                keyword,
                condition,
            } => {
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::MediaQuery(
                        self::fields::MediaQueryField::Span,
                    ));
                    <swc_common::Span as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::MediaQuery(
                        self::fields::MediaQueryField::Modifier,
                    ));
                    <Option<Ident> as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        modifier,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::MediaQuery(
                        self::fields::MediaQueryField::MediaType,
                    ));
                    <Option<MediaType> as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        media_type,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::MediaQuery(
                        self::fields::MediaQueryField::Keyword,
                    ));
                    <Option<Ident> as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        keyword,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::MediaQuery(
                        self::fields::MediaQueryField::Condition,
                    ));
                    < Option < Box < MediaConditionType > > as VisitMutWithAstPath < V > > :: visit_mut_with_ast_path (condition , visitor , & mut * __ast_path)
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for MediaQueryList {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_media_query_list`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_media_query_list(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            MediaQueryList { span, queries } => {
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::MediaQueryList(
                        self::fields::MediaQueryListField::Span,
                    ));
                    <swc_common::Span as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::MediaQueryList(
                        self::fields::MediaQueryListField::Queries(usize::MAX),
                    ));
                    <Vec<MediaQuery> as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        queries,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for MediaType {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_media_type`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_media_type(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            MediaType::Ident { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::MediaType(
                    self::fields::MediaTypeField::Ident,
                ));
                <Ident as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for NamedNamespace {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_named_namespace`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_named_namespace(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            NamedNamespace { span, name } => {
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::NamedNamespace(
                        self::fields::NamedNamespaceField::Span,
                    ));
                    <swc_common::Span as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::NamedNamespace(
                        self::fields::NamedNamespaceField::Name,
                    ));
                    <Ident as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        name,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for Namespace {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_namespace`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_namespace(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            Namespace::Named { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::Namespace(
                    self::fields::NamespaceField::Named,
                ));
                <NamedNamespace as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            Namespace::Any { 0: _field_0 } => {
                let mut __ast_path = __ast_path
                    .with_guard(AstParentKind::Namespace(self::fields::NamespaceField::Any));
                <AnyNamespace as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for NamespacePrefix {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_namespace_prefix`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_namespace_prefix(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            NamespacePrefix { span, namespace } => {
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::NamespacePrefix(
                        self::fields::NamespacePrefixField::Span,
                    ));
                    <swc_common::Span as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::NamespacePrefix(
                        self::fields::NamespacePrefixField::Namespace,
                    ));
                    <Option<Namespace> as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        namespace,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for NamespacePrelude {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_namespace_prelude`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_namespace_prelude(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            NamespacePrelude { span, prefix, uri } => {
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::NamespacePrelude(
                        self::fields::NamespacePreludeField::Span,
                    ));
                    <swc_common::Span as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::NamespacePrelude(
                        self::fields::NamespacePreludeField::Prefix,
                    ));
                    <Option<Ident> as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        prefix,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::NamespacePrelude(
                        self::fields::NamespacePreludeField::Uri,
                    ));
                    <Box<NamespacePreludeUri> as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        uri,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for NamespacePreludeUri {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_namespace_prelude_uri`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_namespace_prelude_uri(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            NamespacePreludeUri::Url { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::NamespacePreludeUri(
                    self::fields::NamespacePreludeUriField::Url,
                ));
                <Url as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            NamespacePreludeUri::Str { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::NamespacePreludeUri(
                    self::fields::NamespacePreludeUriField::Str,
                ));
                <Str as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for NestingSelector {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_nesting_selector`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_nesting_selector(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            NestingSelector { span } => {
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::NestingSelector(
                        self::fields::NestingSelectorField::Span,
                    ));
                    <swc_common::Span as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for Number {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_number`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_number(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            Number { span, value, raw } => {
                {
                    let mut __ast_path = __ast_path
                        .with_guard(AstParentKind::Number(self::fields::NumberField::Span));
                    <swc_common::Span as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path
                        .with_guard(AstParentKind::Number(self::fields::NumberField::Raw));
                    <Option<swc_atoms::Atom> as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        raw,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for NumberType {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_number_type`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_number_type(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            NumberType::Integer => {}
            NumberType::Number => {}
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for PageSelector {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_page_selector`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_page_selector(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            PageSelector {
                span,
                page_type,
                pseudos,
            } => {
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::PageSelector(
                        self::fields::PageSelectorField::Span,
                    ));
                    <swc_common::Span as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::PageSelector(
                        self::fields::PageSelectorField::PageType,
                    ));
                    <Option<PageSelectorType> as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        page_type,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::PageSelector(
                        self::fields::PageSelectorField::Pseudos(usize::MAX),
                    ));
                    < Option < Vec < PageSelectorPseudo > > as VisitMutWithAstPath < V > > :: visit_mut_with_ast_path (pseudos , visitor , & mut * __ast_path)
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for PageSelectorList {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_page_selector_list`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_page_selector_list(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            PageSelectorList { span, selectors } => {
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::PageSelectorList(
                        self::fields::PageSelectorListField::Span,
                    ));
                    <swc_common::Span as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::PageSelectorList(
                        self::fields::PageSelectorListField::Selectors(usize::MAX),
                    ));
                    <Vec<PageSelector> as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        selectors,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for PageSelectorPseudo {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_page_selector_pseudo`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_page_selector_pseudo(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            PageSelectorPseudo { span, value } => {
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::PageSelectorPseudo(
                        self::fields::PageSelectorPseudoField::Span,
                    ));
                    <swc_common::Span as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::PageSelectorPseudo(
                        self::fields::PageSelectorPseudoField::Value,
                    ));
                    <Ident as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        value,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for PageSelectorType {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_page_selector_type`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_page_selector_type(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            PageSelectorType { span, value } => {
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::PageSelectorType(
                        self::fields::PageSelectorTypeField::Span,
                    ));
                    <swc_common::Span as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::PageSelectorType(
                        self::fields::PageSelectorTypeField::Value,
                    ));
                    <Ident as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        value,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for Percentage {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_percentage`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_percentage(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            Percentage { span, value } => {
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::Percentage(
                        self::fields::PercentageField::Span,
                    ));
                    <swc_common::Span as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::Percentage(
                        self::fields::PercentageField::Value,
                    ));
                    <Number as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        value,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for PseudoClassSelector {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_pseudo_class_selector`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_pseudo_class_selector(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            PseudoClassSelector {
                span,
                name,
                children,
            } => {
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::PseudoClassSelector(
                        self::fields::PseudoClassSelectorField::Span,
                    ));
                    <swc_common::Span as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::PseudoClassSelector(
                        self::fields::PseudoClassSelectorField::Name,
                    ));
                    <Ident as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        name,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::PseudoClassSelector(
                        self::fields::PseudoClassSelectorField::Children(usize::MAX),
                    ));
                    < Option < Vec < PseudoClassSelectorChildren > > as VisitMutWithAstPath < V > > :: visit_mut_with_ast_path (children , visitor , & mut * __ast_path)
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for PseudoClassSelectorChildren {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_pseudo_class_selector_children`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_pseudo_class_selector_children(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            PseudoClassSelectorChildren::PreservedToken { 0: _field_0 } => {
                let mut __ast_path =
                    __ast_path.with_guard(AstParentKind::PseudoClassSelectorChildren(
                        self::fields::PseudoClassSelectorChildrenField::PreservedToken,
                    ));
                <TokenAndSpan as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            PseudoClassSelectorChildren::AnPlusB { 0: _field_0 } => {
                let mut __ast_path =
                    __ast_path.with_guard(AstParentKind::PseudoClassSelectorChildren(
                        self::fields::PseudoClassSelectorChildrenField::AnPlusB,
                    ));
                <AnPlusB as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            PseudoClassSelectorChildren::Ident { 0: _field_0 } => {
                let mut __ast_path =
                    __ast_path.with_guard(AstParentKind::PseudoClassSelectorChildren(
                        self::fields::PseudoClassSelectorChildrenField::Ident,
                    ));
                <Ident as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            PseudoClassSelectorChildren::Str { 0: _field_0 } => {
                let mut __ast_path =
                    __ast_path.with_guard(AstParentKind::PseudoClassSelectorChildren(
                        self::fields::PseudoClassSelectorChildrenField::Str,
                    ));
                <Str as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            PseudoClassSelectorChildren::Delimiter { 0: _field_0 } => {
                let mut __ast_path =
                    __ast_path.with_guard(AstParentKind::PseudoClassSelectorChildren(
                        self::fields::PseudoClassSelectorChildrenField::Delimiter,
                    ));
                <Delimiter as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            PseudoClassSelectorChildren::ComplexSelector { 0: _field_0 } => {
                let mut __ast_path =
                    __ast_path.with_guard(AstParentKind::PseudoClassSelectorChildren(
                        self::fields::PseudoClassSelectorChildrenField::ComplexSelector,
                    ));
                <ComplexSelector as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            PseudoClassSelectorChildren::SelectorList { 0: _field_0 } => {
                let mut __ast_path =
                    __ast_path.with_guard(AstParentKind::PseudoClassSelectorChildren(
                        self::fields::PseudoClassSelectorChildrenField::SelectorList,
                    ));
                <SelectorList as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            PseudoClassSelectorChildren::ForgivingSelectorList { 0: _field_0 } => {
                let mut __ast_path =
                    __ast_path.with_guard(AstParentKind::PseudoClassSelectorChildren(
                        self::fields::PseudoClassSelectorChildrenField::ForgivingSelectorList,
                    ));
                <ForgivingSelectorList as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            PseudoClassSelectorChildren::CompoundSelectorList { 0: _field_0 } => {
                let mut __ast_path =
                    __ast_path.with_guard(AstParentKind::PseudoClassSelectorChildren(
                        self::fields::PseudoClassSelectorChildrenField::CompoundSelectorList,
                    ));
                <CompoundSelectorList as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            PseudoClassSelectorChildren::RelativeSelectorList { 0: _field_0 } => {
                let mut __ast_path =
                    __ast_path.with_guard(AstParentKind::PseudoClassSelectorChildren(
                        self::fields::PseudoClassSelectorChildrenField::RelativeSelectorList,
                    ));
                <RelativeSelectorList as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            PseudoClassSelectorChildren::ForgivingRelativeSelectorList { 0: _field_0 } => {
                let mut __ast_path = __ast_path
                    .with_guard(AstParentKind::PseudoClassSelectorChildren(
                    self::fields::PseudoClassSelectorChildrenField::ForgivingRelativeSelectorList,
                ));
                <ForgivingRelativeSelectorList as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            PseudoClassSelectorChildren::CompoundSelector { 0: _field_0 } => {
                let mut __ast_path =
                    __ast_path.with_guard(AstParentKind::PseudoClassSelectorChildren(
                        self::fields::PseudoClassSelectorChildrenField::CompoundSelector,
                    ));
                <CompoundSelector as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for PseudoElementSelector {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_pseudo_element_selector`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_pseudo_element_selector(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            PseudoElementSelector {
                span,
                name,
                children,
            } => {
                {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentKind::PseudoElementSelector(
                            self::fields::PseudoElementSelectorField::Span,
                        ));
                    <swc_common::Span as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentKind::PseudoElementSelector(
                            self::fields::PseudoElementSelectorField::Name,
                        ));
                    <Ident as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        name,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentKind::PseudoElementSelector(
                            self::fields::PseudoElementSelectorField::Children(usize::MAX),
                        ));
                    < Option < Vec < PseudoElementSelectorChildren > > as VisitMutWithAstPath < V > > :: visit_mut_with_ast_path (children , visitor , & mut * __ast_path)
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for PseudoElementSelectorChildren {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_pseudo_element_selector_children`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_pseudo_element_selector_children(
            visitor, self, __ast_path,
        )
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            PseudoElementSelectorChildren::PreservedToken { 0: _field_0 } => {
                let mut __ast_path =
                    __ast_path.with_guard(AstParentKind::PseudoElementSelectorChildren(
                        self::fields::PseudoElementSelectorChildrenField::PreservedToken,
                    ));
                <TokenAndSpan as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            PseudoElementSelectorChildren::Ident { 0: _field_0 } => {
                let mut __ast_path =
                    __ast_path.with_guard(AstParentKind::PseudoElementSelectorChildren(
                        self::fields::PseudoElementSelectorChildrenField::Ident,
                    ));
                <Ident as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            PseudoElementSelectorChildren::CompoundSelector { 0: _field_0 } => {
                let mut __ast_path =
                    __ast_path.with_guard(AstParentKind::PseudoElementSelectorChildren(
                        self::fields::PseudoElementSelectorChildrenField::CompoundSelector,
                    ));
                <CompoundSelector as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            PseudoElementSelectorChildren::CustomHighlightName { 0: _field_0 } => {
                let mut __ast_path =
                    __ast_path.with_guard(AstParentKind::PseudoElementSelectorChildren(
                        self::fields::PseudoElementSelectorChildrenField::CustomHighlightName,
                    ));
                <CustomHighlightName as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for QualifiedRule {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_qualified_rule`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_qualified_rule(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            QualifiedRule {
                span,
                prelude,
                block,
            } => {
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::QualifiedRule(
                        self::fields::QualifiedRuleField::Span,
                    ));
                    <swc_common::Span as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::QualifiedRule(
                        self::fields::QualifiedRuleField::Prelude,
                    ));
                    <QualifiedRulePrelude as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        prelude,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::QualifiedRule(
                        self::fields::QualifiedRuleField::Block,
                    ));
                    <SimpleBlock as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        block,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for QualifiedRulePrelude {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_qualified_rule_prelude`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_qualified_rule_prelude(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            QualifiedRulePrelude::SelectorList { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::QualifiedRulePrelude(
                    self::fields::QualifiedRulePreludeField::SelectorList,
                ));
                <SelectorList as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            QualifiedRulePrelude::RelativeSelectorList { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::QualifiedRulePrelude(
                    self::fields::QualifiedRulePreludeField::RelativeSelectorList,
                ));
                <RelativeSelectorList as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            QualifiedRulePrelude::ListOfComponentValues { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::QualifiedRulePrelude(
                    self::fields::QualifiedRulePreludeField::ListOfComponentValues,
                ));
                <ListOfComponentValues as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for QueryInParens {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_query_in_parens`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_query_in_parens(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            QueryInParens::ContainerQuery { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::QueryInParens(
                    self::fields::QueryInParensField::ContainerQuery,
                ));
                <Box<ContainerQuery> as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            QueryInParens::SizeFeature { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::QueryInParens(
                    self::fields::QueryInParensField::SizeFeature,
                ));
                <SizeFeature as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            QueryInParens::GeneralEnclosed { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::QueryInParens(
                    self::fields::QueryInParensField::GeneralEnclosed,
                ));
                <GeneralEnclosed as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for Ratio {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_ratio`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_ratio(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            Ratio { span, left, right } => {
                {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentKind::Ratio(self::fields::RatioField::Span));
                    <swc_common::Span as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentKind::Ratio(self::fields::RatioField::Left));
                    <Number as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        left,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path
                        .with_guard(AstParentKind::Ratio(self::fields::RatioField::Right));
                    <Option<Number> as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        right,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for RelativeSelector {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_relative_selector`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_relative_selector(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            RelativeSelector {
                span,
                combinator,
                selector,
            } => {
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::RelativeSelector(
                        self::fields::RelativeSelectorField::Span,
                    ));
                    <swc_common::Span as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::RelativeSelector(
                        self::fields::RelativeSelectorField::Combinator,
                    ));
                    <Option<Combinator> as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        combinator,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::RelativeSelector(
                        self::fields::RelativeSelectorField::Selector,
                    ));
                    <ComplexSelector as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        selector,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for RelativeSelectorList {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_relative_selector_list`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_relative_selector_list(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            RelativeSelectorList { span, children } => {
                {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentKind::RelativeSelectorList(
                            self::fields::RelativeSelectorListField::Span,
                        ));
                    <swc_common::Span as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentKind::RelativeSelectorList(
                            self::fields::RelativeSelectorListField::Children(usize::MAX),
                        ));
                    <Vec<RelativeSelector> as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        children,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for Resolution {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_resolution`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_resolution(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            Resolution { span, value, unit } => {
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::Resolution(
                        self::fields::ResolutionField::Span,
                    ));
                    <swc_common::Span as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::Resolution(
                        self::fields::ResolutionField::Value,
                    ));
                    <Number as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        value,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::Resolution(
                        self::fields::ResolutionField::Unit,
                    ));
                    <Ident as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        unit,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for Rule {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_rule`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_rule(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            Rule::QualifiedRule { 0: _field_0 } => {
                let mut __ast_path = __ast_path
                    .with_guard(AstParentKind::Rule(self::fields::RuleField::QualifiedRule));
                <Box<QualifiedRule> as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            Rule::AtRule { 0: _field_0 } => {
                let mut __ast_path =
                    __ast_path.with_guard(AstParentKind::Rule(self::fields::RuleField::AtRule));
                <Box<AtRule> as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            Rule::ListOfComponentValues { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::Rule(
                    self::fields::RuleField::ListOfComponentValues,
                ));
                <Box<ListOfComponentValues> as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for ScopeRange {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_scope_range`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_scope_range(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            ScopeRange {
                span,
                scope_start,
                scope_end,
            } => {
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::ScopeRange(
                        self::fields::ScopeRangeField::Span,
                    ));
                    <swc_common::Span as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::ScopeRange(
                        self::fields::ScopeRangeField::ScopeStart,
                    ));
                    < Option < ForgivingSelectorList > as VisitMutWithAstPath < V > > :: visit_mut_with_ast_path (scope_start , visitor , & mut * __ast_path)
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::ScopeRange(
                        self::fields::ScopeRangeField::ScopeEnd,
                    ));
                    < Option < ForgivingSelectorList > as VisitMutWithAstPath < V > > :: visit_mut_with_ast_path (scope_end , visitor , & mut * __ast_path)
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for SelectorList {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_selector_list`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_selector_list(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            SelectorList { span, children } => {
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::SelectorList(
                        self::fields::SelectorListField::Span,
                    ));
                    <swc_common::Span as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::SelectorList(
                        self::fields::SelectorListField::Children(usize::MAX),
                    ));
                    <Vec<ComplexSelector> as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        children,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for SequenceOfCustomIdents {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_sequence_of_custom_idents`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_sequence_of_custom_idents(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            SequenceOfCustomIdents { span, value } => {
                {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentKind::SequenceOfCustomIdents(
                            self::fields::SequenceOfCustomIdentsField::Span,
                        ));
                    <swc_common::Span as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentKind::SequenceOfCustomIdents(
                            self::fields::SequenceOfCustomIdentsField::Value(usize::MAX),
                        ));
                    <Vec<CustomIdent> as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        value,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for SimpleBlock {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_simple_block`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_simple_block(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            SimpleBlock { span, name, value } => {
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::SimpleBlock(
                        self::fields::SimpleBlockField::Span,
                    ));
                    <swc_common::Span as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::SimpleBlock(
                        self::fields::SimpleBlockField::Name,
                    ));
                    <TokenAndSpan as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        name,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::SimpleBlock(
                        self::fields::SimpleBlockField::Value(usize::MAX),
                    ));
                    <Vec<ComponentValue> as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        value,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for SizeFeature {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_size_feature`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_size_feature(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            SizeFeature::Plain { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::SizeFeature(
                    self::fields::SizeFeatureField::Plain,
                ));
                <SizeFeaturePlain as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            SizeFeature::Boolean { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::SizeFeature(
                    self::fields::SizeFeatureField::Boolean,
                ));
                <SizeFeatureBoolean as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            SizeFeature::Range { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::SizeFeature(
                    self::fields::SizeFeatureField::Range,
                ));
                <SizeFeatureRange as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            SizeFeature::RangeInterval { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::SizeFeature(
                    self::fields::SizeFeatureField::RangeInterval,
                ));
                <SizeFeatureRangeInterval as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for SizeFeatureBoolean {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_size_feature_boolean`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_size_feature_boolean(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            SizeFeatureBoolean { span, name } => {
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::SizeFeatureBoolean(
                        self::fields::SizeFeatureBooleanField::Span,
                    ));
                    <swc_common::Span as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::SizeFeatureBoolean(
                        self::fields::SizeFeatureBooleanField::Name,
                    ));
                    <SizeFeatureName as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        name,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for SizeFeatureName {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_size_feature_name`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_size_feature_name(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            SizeFeatureName::Ident { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::SizeFeatureName(
                    self::fields::SizeFeatureNameField::Ident,
                ));
                <Ident as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for SizeFeaturePlain {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_size_feature_plain`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_size_feature_plain(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            SizeFeaturePlain { span, name, value } => {
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::SizeFeaturePlain(
                        self::fields::SizeFeaturePlainField::Span,
                    ));
                    <swc_common::Span as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::SizeFeaturePlain(
                        self::fields::SizeFeaturePlainField::Name,
                    ));
                    <SizeFeatureName as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        name,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::SizeFeaturePlain(
                        self::fields::SizeFeaturePlainField::Value,
                    ));
                    <Box<SizeFeatureValue> as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        value,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for SizeFeatureRange {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_size_feature_range`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_size_feature_range(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            SizeFeatureRange {
                span,
                left,
                comparison,
                right,
            } => {
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::SizeFeatureRange(
                        self::fields::SizeFeatureRangeField::Span,
                    ));
                    <swc_common::Span as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::SizeFeatureRange(
                        self::fields::SizeFeatureRangeField::Left,
                    ));
                    <Box<SizeFeatureValue> as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        left,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::SizeFeatureRange(
                        self::fields::SizeFeatureRangeField::Comparison,
                    ));
                    <SizeFeatureRangeComparison as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        comparison,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::SizeFeatureRange(
                        self::fields::SizeFeatureRangeField::Right,
                    ));
                    <Box<SizeFeatureValue> as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        right,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for SizeFeatureRangeComparison {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_size_feature_range_comparison`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_size_feature_range_comparison(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            SizeFeatureRangeComparison::Lt => {}
            SizeFeatureRangeComparison::Le => {}
            SizeFeatureRangeComparison::Gt => {}
            SizeFeatureRangeComparison::Ge => {}
            SizeFeatureRangeComparison::Eq => {}
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for SizeFeatureRangeInterval {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_size_feature_range_interval`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_size_feature_range_interval(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            SizeFeatureRangeInterval {
                span,
                left,
                left_comparison,
                name,
                right_comparison,
                right,
            } => {
                {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentKind::SizeFeatureRangeInterval(
                            self::fields::SizeFeatureRangeIntervalField::Span,
                        ));
                    <swc_common::Span as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentKind::SizeFeatureRangeInterval(
                            self::fields::SizeFeatureRangeIntervalField::Left,
                        ));
                    <Box<SizeFeatureValue> as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        left,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentKind::SizeFeatureRangeInterval(
                            self::fields::SizeFeatureRangeIntervalField::LeftComparison,
                        ));
                    <SizeFeatureRangeComparison as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        left_comparison,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentKind::SizeFeatureRangeInterval(
                            self::fields::SizeFeatureRangeIntervalField::Name,
                        ));
                    <SizeFeatureName as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        name,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentKind::SizeFeatureRangeInterval(
                            self::fields::SizeFeatureRangeIntervalField::RightComparison,
                        ));
                    <SizeFeatureRangeComparison as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        right_comparison,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentKind::SizeFeatureRangeInterval(
                            self::fields::SizeFeatureRangeIntervalField::Right,
                        ));
                    <Box<SizeFeatureValue> as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        right,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for SizeFeatureValue {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_size_feature_value`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_size_feature_value(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            SizeFeatureValue::Number { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::SizeFeatureValue(
                    self::fields::SizeFeatureValueField::Number,
                ));
                <Number as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            SizeFeatureValue::Dimension { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::SizeFeatureValue(
                    self::fields::SizeFeatureValueField::Dimension,
                ));
                <Dimension as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            SizeFeatureValue::Ident { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::SizeFeatureValue(
                    self::fields::SizeFeatureValueField::Ident,
                ));
                <Ident as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            SizeFeatureValue::Ratio { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::SizeFeatureValue(
                    self::fields::SizeFeatureValueField::Ratio,
                ));
                <Ratio as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            SizeFeatureValue::Function { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::SizeFeatureValue(
                    self::fields::SizeFeatureValueField::Function,
                ));
                <Function as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for Str {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_str`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_str(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            Str { span, value, raw } => {
                {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentKind::Str(self::fields::StrField::Span));
                    <swc_common::Span as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentKind::Str(self::fields::StrField::Value));
                    <swc_atoms::Atom as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        value,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentKind::Str(self::fields::StrField::Raw));
                    <Option<swc_atoms::Atom> as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        raw,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for StyleBlock {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_style_block`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_style_block(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            StyleBlock::AtRule { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::StyleBlock(
                    self::fields::StyleBlockField::AtRule,
                ));
                <Box<AtRule> as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            StyleBlock::Declaration { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::StyleBlock(
                    self::fields::StyleBlockField::Declaration,
                ));
                <Box<Declaration> as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            StyleBlock::QualifiedRule { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::StyleBlock(
                    self::fields::StyleBlockField::QualifiedRule,
                ));
                <Box<QualifiedRule> as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            StyleBlock::ListOfComponentValues { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::StyleBlock(
                    self::fields::StyleBlockField::ListOfComponentValues,
                ));
                <Box<ListOfComponentValues> as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for Stylesheet {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_stylesheet`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_stylesheet(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            Stylesheet { span, rules } => {
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::Stylesheet(
                        self::fields::StylesheetField::Span,
                    ));
                    <swc_common::Span as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::Stylesheet(
                        self::fields::StylesheetField::Rules(usize::MAX),
                    ));
                    <Vec<Rule> as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        rules,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for SubclassSelector {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_subclass_selector`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_subclass_selector(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            SubclassSelector::Id { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::SubclassSelector(
                    self::fields::SubclassSelectorField::Id,
                ));
                <IdSelector as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            SubclassSelector::Class { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::SubclassSelector(
                    self::fields::SubclassSelectorField::Class,
                ));
                <ClassSelector as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            SubclassSelector::Attribute { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::SubclassSelector(
                    self::fields::SubclassSelectorField::Attribute,
                ));
                <Box<AttributeSelector> as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            SubclassSelector::PseudoClass { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::SubclassSelector(
                    self::fields::SubclassSelectorField::PseudoClass,
                ));
                <PseudoClassSelector as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            SubclassSelector::PseudoElement { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::SubclassSelector(
                    self::fields::SubclassSelectorField::PseudoElement,
                ));
                <PseudoElementSelector as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for SupportsAnd {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_supports_and`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_supports_and(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            SupportsAnd {
                span,
                keyword,
                condition,
            } => {
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::SupportsAnd(
                        self::fields::SupportsAndField::Span,
                    ));
                    <swc_common::Span as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::SupportsAnd(
                        self::fields::SupportsAndField::Keyword,
                    ));
                    <Option<Ident> as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        keyword,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::SupportsAnd(
                        self::fields::SupportsAndField::Condition,
                    ));
                    <Box<SupportsInParens> as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        condition,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for SupportsCondition {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_supports_condition`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_supports_condition(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            SupportsCondition { span, conditions } => {
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::SupportsCondition(
                        self::fields::SupportsConditionField::Span,
                    ));
                    <swc_common::Span as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::SupportsCondition(
                        self::fields::SupportsConditionField::Conditions(usize::MAX),
                    ));
                    <Vec<SupportsConditionType> as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        conditions,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for SupportsConditionType {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_supports_condition_type`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_supports_condition_type(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            SupportsConditionType::Not { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::SupportsConditionType(
                    self::fields::SupportsConditionTypeField::Not,
                ));
                <SupportsNot as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            SupportsConditionType::And { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::SupportsConditionType(
                    self::fields::SupportsConditionTypeField::And,
                ));
                <SupportsAnd as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            SupportsConditionType::Or { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::SupportsConditionType(
                    self::fields::SupportsConditionTypeField::Or,
                ));
                <SupportsOr as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            SupportsConditionType::SupportsInParens { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::SupportsConditionType(
                    self::fields::SupportsConditionTypeField::SupportsInParens,
                ));
                <SupportsInParens as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for SupportsFeature {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_supports_feature`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_supports_feature(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            SupportsFeature::Declaration { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::SupportsFeature(
                    self::fields::SupportsFeatureField::Declaration,
                ));
                <Box<Declaration> as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            SupportsFeature::Function { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::SupportsFeature(
                    self::fields::SupportsFeatureField::Function,
                ));
                <Function as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for SupportsInParens {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_supports_in_parens`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_supports_in_parens(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            SupportsInParens::SupportsCondition { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::SupportsInParens(
                    self::fields::SupportsInParensField::SupportsCondition,
                ));
                <SupportsCondition as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            SupportsInParens::Feature { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::SupportsInParens(
                    self::fields::SupportsInParensField::Feature,
                ));
                <SupportsFeature as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            SupportsInParens::GeneralEnclosed { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::SupportsInParens(
                    self::fields::SupportsInParensField::GeneralEnclosed,
                ));
                <GeneralEnclosed as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for SupportsNot {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_supports_not`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_supports_not(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            SupportsNot {
                span,
                keyword,
                condition,
            } => {
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::SupportsNot(
                        self::fields::SupportsNotField::Span,
                    ));
                    <swc_common::Span as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::SupportsNot(
                        self::fields::SupportsNotField::Keyword,
                    ));
                    <Option<Ident> as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        keyword,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::SupportsNot(
                        self::fields::SupportsNotField::Condition,
                    ));
                    <Box<SupportsInParens> as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        condition,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for SupportsOr {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_supports_or`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_supports_or(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            SupportsOr {
                span,
                keyword,
                condition,
            } => {
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::SupportsOr(
                        self::fields::SupportsOrField::Span,
                    ));
                    <swc_common::Span as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::SupportsOr(
                        self::fields::SupportsOrField::Keyword,
                    ));
                    <Option<Ident> as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        keyword,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::SupportsOr(
                        self::fields::SupportsOrField::Condition,
                    ));
                    <Box<SupportsInParens> as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        condition,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for TagNameSelector {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_tag_name_selector`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_tag_name_selector(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            TagNameSelector { span, name } => {
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::TagNameSelector(
                        self::fields::TagNameSelectorField::Span,
                    ));
                    <swc_common::Span as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::TagNameSelector(
                        self::fields::TagNameSelectorField::Name,
                    ));
                    <WqName as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        name,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for Time {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_time`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_time(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            Time { span, value, unit } => {
                {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentKind::Time(self::fields::TimeField::Span));
                    <swc_common::Span as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentKind::Time(self::fields::TimeField::Value));
                    <Number as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        value,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentKind::Time(self::fields::TimeField::Unit));
                    <Ident as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        unit,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for TimePercentage {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_time_percentage`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_time_percentage(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            TimePercentage::Time { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::TimePercentage(
                    self::fields::TimePercentageField::Time,
                ));
                <Time as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            TimePercentage::Percentage { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::TimePercentage(
                    self::fields::TimePercentageField::Percentage,
                ));
                <Percentage as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for Token {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_token`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_token(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            Token::Ident { value, raw } => {
                let mut __ast_path =
                    __ast_path.with_guard(AstParentKind::Token(self::fields::TokenField::Ident));
                {
                    let mut __ast_path = __ast_path
                        .with_guard(AstParentKind::Token(self::fields::TokenField::Value));
                    <swc_atoms::Atom as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        value,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentKind::Token(self::fields::TokenField::Raw));
                    <swc_atoms::Atom as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        raw,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
            Token::Function { value, raw } => {
                let mut __ast_path =
                    __ast_path.with_guard(AstParentKind::Token(self::fields::TokenField::Function));
                {
                    let mut __ast_path = __ast_path
                        .with_guard(AstParentKind::Token(self::fields::TokenField::Value));
                    <swc_atoms::Atom as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        value,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentKind::Token(self::fields::TokenField::Raw));
                    <swc_atoms::Atom as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        raw,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
            Token::AtKeyword { value, raw } => {
                let mut __ast_path = __ast_path
                    .with_guard(AstParentKind::Token(self::fields::TokenField::AtKeyword));
                {
                    let mut __ast_path = __ast_path
                        .with_guard(AstParentKind::Token(self::fields::TokenField::Value));
                    <swc_atoms::Atom as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        value,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentKind::Token(self::fields::TokenField::Raw));
                    <swc_atoms::Atom as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        raw,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
            Token::Hash { is_id, value, raw } => {
                let mut __ast_path =
                    __ast_path.with_guard(AstParentKind::Token(self::fields::TokenField::Hash));
                {
                    let mut __ast_path = __ast_path
                        .with_guard(AstParentKind::Token(self::fields::TokenField::Value));
                    <swc_atoms::Atom as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        value,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentKind::Token(self::fields::TokenField::Raw));
                    <swc_atoms::Atom as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        raw,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
            Token::String { value, raw } => {
                let mut __ast_path =
                    __ast_path.with_guard(AstParentKind::Token(self::fields::TokenField::String));
                {
                    let mut __ast_path = __ast_path
                        .with_guard(AstParentKind::Token(self::fields::TokenField::Value));
                    <swc_atoms::Atom as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        value,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentKind::Token(self::fields::TokenField::Raw));
                    <swc_atoms::Atom as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        raw,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
            Token::BadString { raw } => {
                let mut __ast_path = __ast_path
                    .with_guard(AstParentKind::Token(self::fields::TokenField::BadString));
                {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentKind::Token(self::fields::TokenField::Raw));
                    <swc_atoms::Atom as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        raw,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
            Token::Url { value, raw } => {
                let mut __ast_path =
                    __ast_path.with_guard(AstParentKind::Token(self::fields::TokenField::Url));
                {
                    let mut __ast_path = __ast_path
                        .with_guard(AstParentKind::Token(self::fields::TokenField::Value));
                    <swc_atoms::Atom as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        value,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentKind::Token(self::fields::TokenField::Raw));
                    <Box<UrlKeyValue> as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        raw,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
            Token::BadUrl { raw } => {
                let mut __ast_path =
                    __ast_path.with_guard(AstParentKind::Token(self::fields::TokenField::BadUrl));
                {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentKind::Token(self::fields::TokenField::Raw));
                    <swc_atoms::Atom as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        raw,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
            Token::Delim { value } => {
                let mut __ast_path =
                    __ast_path.with_guard(AstParentKind::Token(self::fields::TokenField::Delim));
            }
            Token::Number {
                value,
                raw,
                type_flag,
            } => {
                let mut __ast_path =
                    __ast_path.with_guard(AstParentKind::Token(self::fields::TokenField::Number));
                {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentKind::Token(self::fields::TokenField::Raw));
                    <swc_atoms::Atom as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        raw,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path
                        .with_guard(AstParentKind::Token(self::fields::TokenField::TypeFlag));
                    <NumberType as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        type_flag,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
            Token::Percentage { value, raw } => {
                let mut __ast_path = __ast_path
                    .with_guard(AstParentKind::Token(self::fields::TokenField::Percentage));
                {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentKind::Token(self::fields::TokenField::Raw));
                    <swc_atoms::Atom as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        raw,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
            Token::Dimension { 0: _field_0 } => {
                let mut __ast_path = __ast_path
                    .with_guard(AstParentKind::Token(self::fields::TokenField::Dimension));
                <Box<DimensionToken> as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            Token::WhiteSpace { value } => {
                let mut __ast_path = __ast_path
                    .with_guard(AstParentKind::Token(self::fields::TokenField::WhiteSpace));
                {
                    let mut __ast_path = __ast_path
                        .with_guard(AstParentKind::Token(self::fields::TokenField::Value));
                    <swc_atoms::Atom as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        value,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
            Token::CDO => {}
            Token::CDC => {}
            Token::Colon => {}
            Token::Semi => {}
            Token::Comma => {}
            Token::LBracket => {}
            Token::RBracket => {}
            Token::LParen => {}
            Token::RParen => {}
            Token::LBrace => {}
            Token::RBrace => {}
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for TokenAndSpan {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_token_and_span`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_token_and_span(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            TokenAndSpan { span, token } => {
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::TokenAndSpan(
                        self::fields::TokenAndSpanField::Span,
                    ));
                    <swc_common::Span as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::TokenAndSpan(
                        self::fields::TokenAndSpanField::Token,
                    ));
                    <Token as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        token,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for TypeSelector {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_type_selector`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_type_selector(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            TypeSelector::TagName { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::TypeSelector(
                    self::fields::TypeSelectorField::TagName,
                ));
                <TagNameSelector as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            TypeSelector::Universal { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::TypeSelector(
                    self::fields::TypeSelectorField::Universal,
                ));
                <UniversalSelector as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for UnicodeRange {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_unicode_range`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_unicode_range(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            UnicodeRange {
                span,
                start,
                end,
                raw,
            } => {
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::UnicodeRange(
                        self::fields::UnicodeRangeField::Span,
                    ));
                    <swc_common::Span as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::UnicodeRange(
                        self::fields::UnicodeRangeField::Start,
                    ));
                    <swc_atoms::Atom as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        start,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::UnicodeRange(
                        self::fields::UnicodeRangeField::End,
                    ));
                    <Option<swc_atoms::Atom> as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        end,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::UnicodeRange(
                        self::fields::UnicodeRangeField::Raw,
                    ));
                    <Option<swc_atoms::Atom> as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        raw,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for UniversalSelector {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_universal_selector`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_universal_selector(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            UniversalSelector { span, prefix } => {
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::UniversalSelector(
                        self::fields::UniversalSelectorField::Span,
                    ));
                    <swc_common::Span as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::UniversalSelector(
                        self::fields::UniversalSelectorField::Prefix,
                    ));
                    <Option<NamespacePrefix> as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        prefix,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for UnknownDimension {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_unknown_dimension`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_unknown_dimension(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            UnknownDimension { span, value, unit } => {
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::UnknownDimension(
                        self::fields::UnknownDimensionField::Span,
                    ));
                    <swc_common::Span as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::UnknownDimension(
                        self::fields::UnknownDimensionField::Value,
                    ));
                    <Number as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        value,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::UnknownDimension(
                        self::fields::UnknownDimensionField::Unit,
                    ));
                    <Ident as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        unit,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for Url {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_url`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_url(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            Url {
                span,
                name,
                value,
                modifiers,
            } => {
                {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentKind::Url(self::fields::UrlField::Span));
                    <swc_common::Span as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentKind::Url(self::fields::UrlField::Name));
                    <Ident as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        name,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentKind::Url(self::fields::UrlField::Value));
                    <Option<Box<UrlValue>> as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        value,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::Url(
                        self::fields::UrlField::Modifiers(usize::MAX),
                    ));
                    <Option<Vec<UrlModifier>> as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        modifiers,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for UrlKeyValue {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_url_key_value`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_url_key_value(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            UrlKeyValue {
                0: _field_0,
                1: _field_1,
            } => {
                <swc_atoms::Atom as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                <swc_atoms::Atom as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_1,
                    visitor,
                    &mut *__ast_path,
                );
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for UrlModifier {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_url_modifier`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_url_modifier(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            UrlModifier::Ident { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::UrlModifier(
                    self::fields::UrlModifierField::Ident,
                ));
                <Ident as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            UrlModifier::Function { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::UrlModifier(
                    self::fields::UrlModifierField::Function,
                ));
                <Function as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for UrlValue {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_url_value`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_url_value(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            UrlValue::Str { 0: _field_0 } => {
                let mut __ast_path = __ast_path
                    .with_guard(AstParentKind::UrlValue(self::fields::UrlValueField::Str));
                <Str as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
            UrlValue::Raw { 0: _field_0 } => {
                let mut __ast_path = __ast_path
                    .with_guard(AstParentKind::UrlValue(self::fields::UrlValueField::Raw));
                <UrlValueRaw as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for UrlValueRaw {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_url_value_raw`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_url_value_raw(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            UrlValueRaw { span, value, raw } => {
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::UrlValueRaw(
                        self::fields::UrlValueRawField::Span,
                    ));
                    <swc_common::Span as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::UrlValueRaw(
                        self::fields::UrlValueRawField::Value,
                    ));
                    <swc_atoms::Atom as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        value,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::UrlValueRaw(
                        self::fields::UrlValueRawField::Raw,
                    ));
                    <Option<swc_atoms::Atom> as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        raw,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for WqName {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_wq_name`] with `self`."]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_wq_name(visitor, self, __ast_path)
    }

    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            WqName {
                span,
                prefix,
                value,
            } => {
                {
                    let mut __ast_path = __ast_path
                        .with_guard(AstParentKind::WqName(self::fields::WqNameField::Span));
                    <swc_common::Span as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path
                        .with_guard(AstParentKind::WqName(self::fields::WqNameField::Prefix));
                    <Option<NamespacePrefix> as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        prefix,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                {
                    let mut __ast_path = __ast_path
                        .with_guard(AstParentKind::WqName(self::fields::WqNameField::Value));
                    <Ident as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                        value,
                        visitor,
                        &mut *__ast_path,
                    )
                };
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for swc_atoms::Atom {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_atom`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_atom(visitor, self, __ast_path)
    }

    #[inline]
    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        {}
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for Vec<CalcProductOrOperator> {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_calc_product_or_operators`] with `self`. (Extra \
             impl)"]
    #[inline]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_calc_product_or_operators(visitor, self, __ast_path)
    }

    #[inline]
    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        self.iter_mut().enumerate().for_each(|(__idx, item)| {
            let mut __ast_path = __ast_path.with_index_guard(__idx);
            <CalcProductOrOperator as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                item,
                visitor,
                &mut *__ast_path,
            )
        })
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for Vec<CalcValueOrOperator> {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_calc_value_or_operators`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_calc_value_or_operators(visitor, self, __ast_path)
    }

    #[inline]
    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        self.iter_mut().enumerate().for_each(|(__idx, item)| {
            let mut __ast_path = __ast_path.with_index_guard(__idx);
            <CalcValueOrOperator as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                item,
                visitor,
                &mut *__ast_path,
            )
        })
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for Vec<ComplexSelectorChildren> {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_complex_selector_childrens`] with `self`. (Extra \
             impl)"]
    #[inline]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_complex_selector_childrens(visitor, self, __ast_path)
    }

    #[inline]
    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        self.iter_mut().enumerate().for_each(|(__idx, item)| {
            let mut __ast_path = __ast_path.with_index_guard(__idx);
            <ComplexSelectorChildren as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                item,
                visitor,
                &mut *__ast_path,
            )
        })
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for Vec<ComplexSelector> {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_complex_selectors`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_complex_selectors(visitor, self, __ast_path)
    }

    #[inline]
    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        self.iter_mut().enumerate().for_each(|(__idx, item)| {
            let mut __ast_path = __ast_path.with_index_guard(__idx);
            <ComplexSelector as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                item,
                visitor,
                &mut *__ast_path,
            )
        })
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for Vec<ComponentValue> {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_component_values`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_component_values(visitor, self, __ast_path)
    }

    #[inline]
    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        self.iter_mut().enumerate().for_each(|(__idx, item)| {
            let mut __ast_path = __ast_path.with_index_guard(__idx);
            <ComponentValue as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                item,
                visitor,
                &mut *__ast_path,
            )
        })
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for Vec<CompoundSelector> {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_compound_selectors`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_compound_selectors(visitor, self, __ast_path)
    }

    #[inline]
    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        self.iter_mut().enumerate().for_each(|(__idx, item)| {
            let mut __ast_path = __ast_path.with_index_guard(__idx);
            <CompoundSelector as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                item,
                visitor,
                &mut *__ast_path,
            )
        })
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for Vec<ContainerQueryType> {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_container_query_types`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_container_query_types(visitor, self, __ast_path)
    }

    #[inline]
    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        self.iter_mut().enumerate().for_each(|(__idx, item)| {
            let mut __ast_path = __ast_path.with_index_guard(__idx);
            <ContainerQueryType as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                item,
                visitor,
                &mut *__ast_path,
            )
        })
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for Vec<CustomIdent> {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_custom_idents`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_custom_idents(visitor, self, __ast_path)
    }

    #[inline]
    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        self.iter_mut().enumerate().for_each(|(__idx, item)| {
            let mut __ast_path = __ast_path.with_index_guard(__idx);
            <CustomIdent as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                item,
                visitor,
                &mut *__ast_path,
            )
        })
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for Vec<DocumentPreludeMatchingFunction> {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_document_prelude_matching_functions`] with `self`. \
             (Extra impl)"]
    #[inline]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_document_prelude_matching_functions(
            visitor, self, __ast_path,
        )
    }

    #[inline]
    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        self.iter_mut().enumerate().for_each(|(__idx, item)| {
            let mut __ast_path = __ast_path.with_index_guard(__idx);
            <DocumentPreludeMatchingFunction as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                item,
                visitor,
                &mut *__ast_path,
            )
        })
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for Vec<FamilyName> {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_family_names`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_family_names(visitor, self, __ast_path)
    }

    #[inline]
    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        self.iter_mut().enumerate().for_each(|(__idx, item)| {
            let mut __ast_path = __ast_path.with_index_guard(__idx);
            <FamilyName as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                item,
                visitor,
                &mut *__ast_path,
            )
        })
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for Vec<ForgivingComplexSelector> {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_forgiving_complex_selectors`] with `self`. (Extra \
             impl)"]
    #[inline]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_forgiving_complex_selectors(visitor, self, __ast_path)
    }

    #[inline]
    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        self.iter_mut().enumerate().for_each(|(__idx, item)| {
            let mut __ast_path = __ast_path.with_index_guard(__idx);
            <ForgivingComplexSelector as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                item,
                visitor,
                &mut *__ast_path,
            )
        })
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for Vec<ForgivingRelativeSelector> {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_forgiving_relative_selectors`] with `self`. (Extra \
             impl)"]
    #[inline]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_forgiving_relative_selectors(visitor, self, __ast_path)
    }

    #[inline]
    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        self.iter_mut().enumerate().for_each(|(__idx, item)| {
            let mut __ast_path = __ast_path.with_index_guard(__idx);
            <ForgivingRelativeSelector as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                item,
                visitor,
                &mut *__ast_path,
            )
        })
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for Vec<Ident> {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_idents`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_idents(visitor, self, __ast_path)
    }

    #[inline]
    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        self.iter_mut().enumerate().for_each(|(__idx, item)| {
            let mut __ast_path = __ast_path.with_index_guard(__idx);
            <Ident as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                item,
                visitor,
                &mut *__ast_path,
            )
        })
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for Vec<KeyframeSelector> {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_keyframe_selectors`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_keyframe_selectors(visitor, self, __ast_path)
    }

    #[inline]
    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        self.iter_mut().enumerate().for_each(|(__idx, item)| {
            let mut __ast_path = __ast_path.with_index_guard(__idx);
            <KeyframeSelector as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                item,
                visitor,
                &mut *__ast_path,
            )
        })
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for Vec<LayerName> {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_layer_names`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_layer_names(visitor, self, __ast_path)
    }

    #[inline]
    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        self.iter_mut().enumerate().for_each(|(__idx, item)| {
            let mut __ast_path = __ast_path.with_index_guard(__idx);
            <LayerName as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                item,
                visitor,
                &mut *__ast_path,
            )
        })
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for Vec<MediaConditionAllType> {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_media_condition_all_types`] with `self`. (Extra \
             impl)"]
    #[inline]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_media_condition_all_types(visitor, self, __ast_path)
    }

    #[inline]
    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        self.iter_mut().enumerate().for_each(|(__idx, item)| {
            let mut __ast_path = __ast_path.with_index_guard(__idx);
            <MediaConditionAllType as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                item,
                visitor,
                &mut *__ast_path,
            )
        })
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for Vec<MediaConditionWithoutOrType> {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_media_condition_without_or_types`] with `self`. \
             (Extra impl)"]
    #[inline]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_media_condition_without_or_types(
            visitor, self, __ast_path,
        )
    }

    #[inline]
    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        self.iter_mut().enumerate().for_each(|(__idx, item)| {
            let mut __ast_path = __ast_path.with_index_guard(__idx);
            <MediaConditionWithoutOrType as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                item,
                visitor,
                &mut *__ast_path,
            )
        })
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for Vec<MediaQuery> {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_media_querys`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_media_querys(visitor, self, __ast_path)
    }

    #[inline]
    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        self.iter_mut().enumerate().for_each(|(__idx, item)| {
            let mut __ast_path = __ast_path.with_index_guard(__idx);
            <MediaQuery as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                item,
                visitor,
                &mut *__ast_path,
            )
        })
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for Option<Box<AtRulePrelude>> {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_opt_at_rule_prelude`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_opt_at_rule_prelude(visitor, self, __ast_path)
    }

    #[inline]
    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            Some(inner) => <Box<AtRulePrelude> as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                inner, visitor, __ast_path,
            ),
            None => {}
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for Option<swc_atoms::Atom> {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_opt_atom`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_opt_atom(visitor, self, __ast_path)
    }

    #[inline]
    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            Some(inner) => <swc_atoms::Atom as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                inner, visitor, __ast_path,
            ),
            None => {}
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for Option<AttributeSelectorMatcher> {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_opt_attribute_selector_matcher`] with `self`. \
             (Extra impl)"]
    #[inline]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_opt_attribute_selector_matcher(visitor, self, __ast_path)
    }

    #[inline]
    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            Some(inner) => {
                <AttributeSelectorMatcher as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    inner, visitor, __ast_path,
                )
            }
            None => {}
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for Option<AttributeSelectorModifier> {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_opt_attribute_selector_modifier`] with `self`. \
             (Extra impl)"]
    #[inline]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_opt_attribute_selector_modifier(visitor, self, __ast_path)
    }

    #[inline]
    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            Some(inner) => {
                <AttributeSelectorModifier as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    inner, visitor, __ast_path,
                )
            }
            None => {}
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for Option<AttributeSelectorValue> {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_opt_attribute_selector_value`] with `self`. (Extra \
             impl)"]
    #[inline]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_opt_attribute_selector_value(visitor, self, __ast_path)
    }

    #[inline]
    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            Some(inner) => {
                <AttributeSelectorValue as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    inner, visitor, __ast_path,
                )
            }
            None => {}
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for Option<Combinator> {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_opt_combinator`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_opt_combinator(visitor, self, __ast_path)
    }

    #[inline]
    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            Some(inner) => <Combinator as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                inner, visitor, __ast_path,
            ),
            None => {}
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for Option<ContainerName> {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_opt_container_name`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_opt_container_name(visitor, self, __ast_path)
    }

    #[inline]
    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            Some(inner) => <ContainerName as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                inner, visitor, __ast_path,
            ),
            None => {}
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for Option<ForgivingSelectorList> {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_opt_forgiving_selector_list`] with `self`. (Extra \
             impl)"]
    #[inline]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_opt_forgiving_selector_list(visitor, self, __ast_path)
    }

    #[inline]
    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            Some(inner) => {
                <ForgivingSelectorList as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    inner, visitor, __ast_path,
                )
            }
            None => {}
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for Option<Box<Function>> {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_opt_function`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_opt_function(visitor, self, __ast_path)
    }

    #[inline]
    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            Some(inner) => <Box<Function> as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                inner, visitor, __ast_path,
            ),
            None => {}
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for Option<Ident> {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_opt_ident`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_opt_ident(visitor, self, __ast_path)
    }

    #[inline]
    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            Some(inner) => <Ident as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                inner, visitor, __ast_path,
            ),
            None => {}
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for Option<Box<ImportConditions>> {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_opt_import_conditions`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_opt_import_conditions(visitor, self, __ast_path)
    }

    #[inline]
    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            Some(inner) => {
                <Box<ImportConditions> as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    inner, visitor, __ast_path,
                )
            }
            None => {}
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for Option<Box<ImportLayerName>> {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_opt_import_layer_name`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_opt_import_layer_name(visitor, self, __ast_path)
    }

    #[inline]
    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            Some(inner) => {
                <Box<ImportLayerName> as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    inner, visitor, __ast_path,
                )
            }
            None => {}
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for Option<ImportantFlag> {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_opt_important_flag`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_opt_important_flag(visitor, self, __ast_path)
    }

    #[inline]
    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            Some(inner) => <ImportantFlag as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                inner, visitor, __ast_path,
            ),
            None => {}
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for Option<Box<MediaConditionType>> {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_opt_media_condition_type`] with `self`. (Extra \
             impl)"]
    #[inline]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_opt_media_condition_type(visitor, self, __ast_path)
    }

    #[inline]
    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            Some(inner) => {
                <Box<MediaConditionType> as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    inner, visitor, __ast_path,
                )
            }
            None => {}
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for Option<Box<MediaQueryList>> {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_opt_media_query_list`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_opt_media_query_list(visitor, self, __ast_path)
    }

    #[inline]
    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            Some(inner) => {
                <Box<MediaQueryList> as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    inner, visitor, __ast_path,
                )
            }
            None => {}
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for Option<MediaType> {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_opt_media_type`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_opt_media_type(visitor, self, __ast_path)
    }

    #[inline]
    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            Some(inner) => <MediaType as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                inner, visitor, __ast_path,
            ),
            None => {}
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for Option<Namespace> {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_opt_namespace`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_opt_namespace(visitor, self, __ast_path)
    }

    #[inline]
    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            Some(inner) => <Namespace as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                inner, visitor, __ast_path,
            ),
            None => {}
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for Option<NamespacePrefix> {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_opt_namespace_prefix`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_opt_namespace_prefix(visitor, self, __ast_path)
    }

    #[inline]
    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            Some(inner) => <NamespacePrefix as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                inner, visitor, __ast_path,
            ),
            None => {}
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for Option<NestingSelector> {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_opt_nesting_selector`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_opt_nesting_selector(visitor, self, __ast_path)
    }

    #[inline]
    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            Some(inner) => <NestingSelector as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                inner, visitor, __ast_path,
            ),
            None => {}
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for Option<Number> {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_opt_number`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_opt_number(visitor, self, __ast_path)
    }

    #[inline]
    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            Some(inner) => <Number as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                inner, visitor, __ast_path,
            ),
            None => {}
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for Option<Vec<PageSelectorPseudo>> {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_opt_page_selector_pseudos`] with `self`. (Extra \
             impl)"]
    #[inline]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_opt_page_selector_pseudos(visitor, self, __ast_path)
    }

    #[inline]
    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            Some(inner) => {
                <Vec<PageSelectorPseudo> as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                    inner, visitor, __ast_path,
                )
            }
            None => {}
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for Option<PageSelectorType> {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_opt_page_selector_type`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_opt_page_selector_type(visitor, self, __ast_path)
    }

    #[inline]
    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            Some(inner) => <PageSelectorType as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                inner, visitor, __ast_path,
            ),
            None => {}
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V>
    for Option<Vec<PseudoClassSelectorChildren>>
{
    #[doc = "Calls [VisitMutAstPath`::visit_mut_opt_pseudo_class_selector_childrens`] with `self`. \
             (Extra impl)"]
    #[inline]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_opt_pseudo_class_selector_childrens(
            visitor, self, __ast_path,
        )
    }

    #[inline]
    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self { Some (inner) => { < Vec < PseudoClassSelectorChildren > as VisitMutWithAstPath < V > > :: visit_mut_with_ast_path (inner , visitor , __ast_path) } None => { } }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V>
    for Option<Vec<PseudoElementSelectorChildren>>
{
    #[doc = "Calls [VisitMutAstPath`::visit_mut_opt_pseudo_element_selector_childrens`] with \
             `self`. (Extra impl)"]
    #[inline]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_opt_pseudo_element_selector_childrens(
            visitor, self, __ast_path,
        )
    }

    #[inline]
    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self { Some (inner) => { < Vec < PseudoElementSelectorChildren > as VisitMutWithAstPath < V > > :: visit_mut_with_ast_path (inner , visitor , __ast_path) } None => { } }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for Option<SimpleBlock> {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_opt_simple_block`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_opt_simple_block(visitor, self, __ast_path)
    }

    #[inline]
    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            Some(inner) => <SimpleBlock as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                inner, visitor, __ast_path,
            ),
            None => {}
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for Option<Box<TypeSelector>> {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_opt_type_selector`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_opt_type_selector(visitor, self, __ast_path)
    }

    #[inline]
    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            Some(inner) => <Box<TypeSelector> as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                inner, visitor, __ast_path,
            ),
            None => {}
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for Option<Vec<UrlModifier>> {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_opt_url_modifiers`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_opt_url_modifiers(visitor, self, __ast_path)
    }

    #[inline]
    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            Some(inner) => <Vec<UrlModifier> as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                inner, visitor, __ast_path,
            ),
            None => {}
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for Option<Box<UrlValue>> {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_opt_url_value`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_opt_url_value(visitor, self, __ast_path)
    }

    #[inline]
    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        match self {
            Some(inner) => <Box<UrlValue> as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                inner, visitor, __ast_path,
            ),
            None => {}
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for Vec<PageSelectorPseudo> {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_page_selector_pseudos`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_page_selector_pseudos(visitor, self, __ast_path)
    }

    #[inline]
    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        self.iter_mut().enumerate().for_each(|(__idx, item)| {
            let mut __ast_path = __ast_path.with_index_guard(__idx);
            <PageSelectorPseudo as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                item,
                visitor,
                &mut *__ast_path,
            )
        })
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for Vec<PageSelector> {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_page_selectors`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_page_selectors(visitor, self, __ast_path)
    }

    #[inline]
    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        self.iter_mut().enumerate().for_each(|(__idx, item)| {
            let mut __ast_path = __ast_path.with_index_guard(__idx);
            <PageSelector as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                item,
                visitor,
                &mut *__ast_path,
            )
        })
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for Vec<PseudoClassSelectorChildren> {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_pseudo_class_selector_childrens`] with `self`. \
             (Extra impl)"]
    #[inline]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_pseudo_class_selector_childrens(visitor, self, __ast_path)
    }

    #[inline]
    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        self.iter_mut().enumerate().for_each(|(__idx, item)| {
            let mut __ast_path = __ast_path.with_index_guard(__idx);
            <PseudoClassSelectorChildren as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                item,
                visitor,
                &mut *__ast_path,
            )
        })
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for Vec<PseudoElementSelectorChildren> {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_pseudo_element_selector_childrens`] with `self`. \
             (Extra impl)"]
    #[inline]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_pseudo_element_selector_childrens(
            visitor, self, __ast_path,
        )
    }

    #[inline]
    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        self.iter_mut().enumerate().for_each(|(__idx, item)| {
            let mut __ast_path = __ast_path.with_index_guard(__idx);
            <PseudoElementSelectorChildren as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                item,
                visitor,
                &mut *__ast_path,
            )
        })
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for Vec<RelativeSelector> {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_relative_selectors`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_relative_selectors(visitor, self, __ast_path)
    }

    #[inline]
    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        self.iter_mut().enumerate().for_each(|(__idx, item)| {
            let mut __ast_path = __ast_path.with_index_guard(__idx);
            <RelativeSelector as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                item,
                visitor,
                &mut *__ast_path,
            )
        })
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for Vec<Rule> {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_rules`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_rules(visitor, self, __ast_path)
    }

    #[inline]
    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        self.iter_mut().enumerate().for_each(|(__idx, item)| {
            let mut __ast_path = __ast_path.with_index_guard(__idx);
            <Rule as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                item,
                visitor,
                &mut *__ast_path,
            )
        })
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for swc_common::Span {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_span`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_span(visitor, self, __ast_path)
    }

    #[inline]
    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        {}
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for Vec<SubclassSelector> {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_subclass_selectors`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_subclass_selectors(visitor, self, __ast_path)
    }

    #[inline]
    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        self.iter_mut().enumerate().for_each(|(__idx, item)| {
            let mut __ast_path = __ast_path.with_index_guard(__idx);
            <SubclassSelector as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                item,
                visitor,
                &mut *__ast_path,
            )
        })
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for Vec<SupportsConditionType> {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_supports_condition_types`] with `self`. (Extra \
             impl)"]
    #[inline]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_supports_condition_types(visitor, self, __ast_path)
    }

    #[inline]
    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        self.iter_mut().enumerate().for_each(|(__idx, item)| {
            let mut __ast_path = __ast_path.with_index_guard(__idx);
            <SupportsConditionType as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                item,
                visitor,
                &mut *__ast_path,
            )
        })
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + VisitMutAstPath> VisitMutWithAstPath<V> for Vec<UrlModifier> {
    #[doc = "Calls [VisitMutAstPath`::visit_mut_url_modifiers`] with `self`. (Extra impl)"]
    #[inline]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        <V as VisitMutAstPath>::visit_mut_url_modifiers(visitor, self, __ast_path)
    }

    #[inline]
    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        self.iter_mut().enumerate().for_each(|(__idx, item)| {
            let mut __ast_path = __ast_path.with_index_guard(__idx);
            <UrlModifier as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
                item,
                visitor,
                &mut *__ast_path,
            )
        })
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V, T> VisitMutWithAstPath<V> for std::boxed::Box<T>
where
    V: ?Sized + VisitMutAstPath,
    T: VisitMutWithAstPath<V>,
{
    #[inline]
    fn visit_mut_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        let v = <T as VisitMutWithAstPath<V>>::visit_mut_with_ast_path(
            &mut **self,
            visitor,
            __ast_path,
        );
        v
    }

    #[inline]
    fn visit_mut_children_with_ast_path(&mut self, visitor: &mut V, __ast_path: &mut AstKindPath) {
        let v = <T as VisitMutWithAstPath<V>>::visit_mut_children_with_ast_path(
            &mut **self,
            visitor,
            __ast_path,
        );
        v
    }
}
#[doc = r" A visitor trait for traversing the AST."]
pub trait Fold {
    #[doc = "Visit a node of type `AbsoluteColorBase`.\n\nBy default, this method calls \
             [`AbsoluteColorBase::fold_children_with`]. If you want to recurse, you need to call \
             it manually."]
    #[inline]
    fn fold_absolute_color_base(&mut self, node: AbsoluteColorBase) -> AbsoluteColorBase {
        <AbsoluteColorBase as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `AlphaValue`.\n\nBy default, this method calls \
             [`AlphaValue::fold_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn fold_alpha_value(&mut self, node: AlphaValue) -> AlphaValue {
        <AlphaValue as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `AnPlusB`.\n\nBy default, this method calls \
             [`AnPlusB::fold_children_with`]. If you want to recurse, you need to call it manually."]
    #[inline]
    fn fold_an_plus_b(&mut self, node: AnPlusB) -> AnPlusB {
        <AnPlusB as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `AnPlusBNotation`.\n\nBy default, this method calls \
             [`AnPlusBNotation::fold_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn fold_an_plus_b_notation(&mut self, node: AnPlusBNotation) -> AnPlusBNotation {
        <AnPlusBNotation as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `Angle`.\n\nBy default, this method calls \
             [`Angle::fold_children_with`]. If you want to recurse, you need to call it manually."]
    #[inline]
    fn fold_angle(&mut self, node: Angle) -> Angle {
        <Angle as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `AnglePercentage`.\n\nBy default, this method calls \
             [`AnglePercentage::fold_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn fold_angle_percentage(&mut self, node: AnglePercentage) -> AnglePercentage {
        <AnglePercentage as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `AnyNamespace`.\n\nBy default, this method calls \
             [`AnyNamespace::fold_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn fold_any_namespace(&mut self, node: AnyNamespace) -> AnyNamespace {
        <AnyNamespace as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `AtRule`.\n\nBy default, this method calls \
             [`AtRule::fold_children_with`]. If you want to recurse, you need to call it manually."]
    #[inline]
    fn fold_at_rule(&mut self, node: AtRule) -> AtRule {
        <AtRule as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `AtRuleName`.\n\nBy default, this method calls \
             [`AtRuleName::fold_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn fold_at_rule_name(&mut self, node: AtRuleName) -> AtRuleName {
        <AtRuleName as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `AtRulePrelude`.\n\nBy default, this method calls \
             [`AtRulePrelude::fold_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn fold_at_rule_prelude(&mut self, node: AtRulePrelude) -> AtRulePrelude {
        <AtRulePrelude as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `swc_atoms :: Atom`.\n\nBy default, this method calls \
             [`swc_atoms :: Atom::fold_children_with`]. If you want to recurse, you need to call \
             it manually."]
    #[inline]
    fn fold_atom(&mut self, node: swc_atoms::Atom) -> swc_atoms::Atom {
        <swc_atoms::Atom as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `AttributeSelector`.\n\nBy default, this method calls \
             [`AttributeSelector::fold_children_with`]. If you want to recurse, you need to call \
             it manually."]
    #[inline]
    fn fold_attribute_selector(&mut self, node: AttributeSelector) -> AttributeSelector {
        <AttributeSelector as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `AttributeSelectorMatcher`.\n\nBy default, this method calls \
             [`AttributeSelectorMatcher::fold_children_with`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn fold_attribute_selector_matcher(
        &mut self,
        node: AttributeSelectorMatcher,
    ) -> AttributeSelectorMatcher {
        <AttributeSelectorMatcher as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `AttributeSelectorMatcherValue`.\n\nBy default, this method \
             calls [`AttributeSelectorMatcherValue::fold_children_with`]. If you want to recurse, \
             you need to call it manually."]
    #[inline]
    fn fold_attribute_selector_matcher_value(
        &mut self,
        node: AttributeSelectorMatcherValue,
    ) -> AttributeSelectorMatcherValue {
        <AttributeSelectorMatcherValue as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `AttributeSelectorModifier`.\n\nBy default, this method calls \
             [`AttributeSelectorModifier::fold_children_with`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn fold_attribute_selector_modifier(
        &mut self,
        node: AttributeSelectorModifier,
    ) -> AttributeSelectorModifier {
        <AttributeSelectorModifier as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `AttributeSelectorValue`.\n\nBy default, this method calls \
             [`AttributeSelectorValue::fold_children_with`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn fold_attribute_selector_value(
        &mut self,
        node: AttributeSelectorValue,
    ) -> AttributeSelectorValue {
        <AttributeSelectorValue as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `BinOp`.\n\nBy default, this method calls \
             [`BinOp::fold_children_with`]. If you want to recurse, you need to call it manually."]
    #[inline]
    fn fold_bin_op(&mut self, node: BinOp) -> BinOp {
        <BinOp as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `CalcOperator`.\n\nBy default, this method calls \
             [`CalcOperator::fold_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn fold_calc_operator(&mut self, node: CalcOperator) -> CalcOperator {
        <CalcOperator as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `CalcOperatorType`.\n\nBy default, this method calls \
             [`CalcOperatorType::fold_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn fold_calc_operator_type(&mut self, node: CalcOperatorType) -> CalcOperatorType {
        <CalcOperatorType as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `CalcProduct`.\n\nBy default, this method calls \
             [`CalcProduct::fold_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn fold_calc_product(&mut self, node: CalcProduct) -> CalcProduct {
        <CalcProduct as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `CalcProductOrOperator`.\n\nBy default, this method calls \
             [`CalcProductOrOperator::fold_children_with`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn fold_calc_product_or_operator(
        &mut self,
        node: CalcProductOrOperator,
    ) -> CalcProductOrOperator {
        <CalcProductOrOperator as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `Vec < CalcProductOrOperator >`.\n\nBy default, this method \
             calls [`Vec < CalcProductOrOperator >::fold_children_with`]. If you want to recurse, \
             you need to call it manually."]
    #[inline]
    fn fold_calc_product_or_operators(
        &mut self,
        node: Vec<CalcProductOrOperator>,
    ) -> Vec<CalcProductOrOperator> {
        <Vec<CalcProductOrOperator> as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `CalcSum`.\n\nBy default, this method calls \
             [`CalcSum::fold_children_with`]. If you want to recurse, you need to call it manually."]
    #[inline]
    fn fold_calc_sum(&mut self, node: CalcSum) -> CalcSum {
        <CalcSum as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `CalcValue`.\n\nBy default, this method calls \
             [`CalcValue::fold_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn fold_calc_value(&mut self, node: CalcValue) -> CalcValue {
        <CalcValue as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `CalcValueOrOperator`.\n\nBy default, this method calls \
             [`CalcValueOrOperator::fold_children_with`]. If you want to recurse, you need to call \
             it manually."]
    #[inline]
    fn fold_calc_value_or_operator(&mut self, node: CalcValueOrOperator) -> CalcValueOrOperator {
        <CalcValueOrOperator as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `Vec < CalcValueOrOperator >`.\n\nBy default, this method calls \
             [`Vec < CalcValueOrOperator >::fold_children_with`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn fold_calc_value_or_operators(
        &mut self,
        node: Vec<CalcValueOrOperator>,
    ) -> Vec<CalcValueOrOperator> {
        <Vec<CalcValueOrOperator> as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `ClassSelector`.\n\nBy default, this method calls \
             [`ClassSelector::fold_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn fold_class_selector(&mut self, node: ClassSelector) -> ClassSelector {
        <ClassSelector as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `CmykComponent`.\n\nBy default, this method calls \
             [`CmykComponent::fold_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn fold_cmyk_component(&mut self, node: CmykComponent) -> CmykComponent {
        <CmykComponent as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `Color`.\n\nBy default, this method calls \
             [`Color::fold_children_with`]. If you want to recurse, you need to call it manually."]
    #[inline]
    fn fold_color(&mut self, node: Color) -> Color {
        <Color as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `ColorProfileName`.\n\nBy default, this method calls \
             [`ColorProfileName::fold_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn fold_color_profile_name(&mut self, node: ColorProfileName) -> ColorProfileName {
        <ColorProfileName as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `Combinator`.\n\nBy default, this method calls \
             [`Combinator::fold_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn fold_combinator(&mut self, node: Combinator) -> Combinator {
        <Combinator as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `CombinatorValue`.\n\nBy default, this method calls \
             [`CombinatorValue::fold_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn fold_combinator_value(&mut self, node: CombinatorValue) -> CombinatorValue {
        <CombinatorValue as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `ComplexSelector`.\n\nBy default, this method calls \
             [`ComplexSelector::fold_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn fold_complex_selector(&mut self, node: ComplexSelector) -> ComplexSelector {
        <ComplexSelector as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `ComplexSelectorChildren`.\n\nBy default, this method calls \
             [`ComplexSelectorChildren::fold_children_with`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn fold_complex_selector_children(
        &mut self,
        node: ComplexSelectorChildren,
    ) -> ComplexSelectorChildren {
        <ComplexSelectorChildren as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `Vec < ComplexSelectorChildren >`.\n\nBy default, this method \
             calls [`Vec < ComplexSelectorChildren >::fold_children_with`]. If you want to \
             recurse, you need to call it manually."]
    #[inline]
    fn fold_complex_selector_childrens(
        &mut self,
        node: Vec<ComplexSelectorChildren>,
    ) -> Vec<ComplexSelectorChildren> {
        <Vec<ComplexSelectorChildren> as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `Vec < ComplexSelector >`.\n\nBy default, this method calls \
             [`Vec < ComplexSelector >::fold_children_with`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn fold_complex_selectors(&mut self, node: Vec<ComplexSelector>) -> Vec<ComplexSelector> {
        <Vec<ComplexSelector> as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `ComponentValue`.\n\nBy default, this method calls \
             [`ComponentValue::fold_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn fold_component_value(&mut self, node: ComponentValue) -> ComponentValue {
        <ComponentValue as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `Vec < ComponentValue >`.\n\nBy default, this method calls [`Vec \
             < ComponentValue >::fold_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn fold_component_values(&mut self, node: Vec<ComponentValue>) -> Vec<ComponentValue> {
        <Vec<ComponentValue> as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `CompoundSelector`.\n\nBy default, this method calls \
             [`CompoundSelector::fold_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn fold_compound_selector(&mut self, node: CompoundSelector) -> CompoundSelector {
        <CompoundSelector as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `CompoundSelectorList`.\n\nBy default, this method calls \
             [`CompoundSelectorList::fold_children_with`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn fold_compound_selector_list(&mut self, node: CompoundSelectorList) -> CompoundSelectorList {
        <CompoundSelectorList as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `Vec < CompoundSelector >`.\n\nBy default, this method calls \
             [`Vec < CompoundSelector >::fold_children_with`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn fold_compound_selectors(&mut self, node: Vec<CompoundSelector>) -> Vec<CompoundSelector> {
        <Vec<CompoundSelector> as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `ContainerCondition`.\n\nBy default, this method calls \
             [`ContainerCondition::fold_children_with`]. If you want to recurse, you need to call \
             it manually."]
    #[inline]
    fn fold_container_condition(&mut self, node: ContainerCondition) -> ContainerCondition {
        <ContainerCondition as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `ContainerName`.\n\nBy default, this method calls \
             [`ContainerName::fold_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn fold_container_name(&mut self, node: ContainerName) -> ContainerName {
        <ContainerName as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `ContainerQuery`.\n\nBy default, this method calls \
             [`ContainerQuery::fold_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn fold_container_query(&mut self, node: ContainerQuery) -> ContainerQuery {
        <ContainerQuery as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `ContainerQueryAnd`.\n\nBy default, this method calls \
             [`ContainerQueryAnd::fold_children_with`]. If you want to recurse, you need to call \
             it manually."]
    #[inline]
    fn fold_container_query_and(&mut self, node: ContainerQueryAnd) -> ContainerQueryAnd {
        <ContainerQueryAnd as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `ContainerQueryNot`.\n\nBy default, this method calls \
             [`ContainerQueryNot::fold_children_with`]. If you want to recurse, you need to call \
             it manually."]
    #[inline]
    fn fold_container_query_not(&mut self, node: ContainerQueryNot) -> ContainerQueryNot {
        <ContainerQueryNot as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `ContainerQueryOr`.\n\nBy default, this method calls \
             [`ContainerQueryOr::fold_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn fold_container_query_or(&mut self, node: ContainerQueryOr) -> ContainerQueryOr {
        <ContainerQueryOr as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `ContainerQueryType`.\n\nBy default, this method calls \
             [`ContainerQueryType::fold_children_with`]. If you want to recurse, you need to call \
             it manually."]
    #[inline]
    fn fold_container_query_type(&mut self, node: ContainerQueryType) -> ContainerQueryType {
        <ContainerQueryType as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `Vec < ContainerQueryType >`.\n\nBy default, this method calls \
             [`Vec < ContainerQueryType >::fold_children_with`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn fold_container_query_types(
        &mut self,
        node: Vec<ContainerQueryType>,
    ) -> Vec<ContainerQueryType> {
        <Vec<ContainerQueryType> as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `CustomHighlightName`.\n\nBy default, this method calls \
             [`CustomHighlightName::fold_children_with`]. If you want to recurse, you need to call \
             it manually."]
    #[inline]
    fn fold_custom_highlight_name(&mut self, node: CustomHighlightName) -> CustomHighlightName {
        <CustomHighlightName as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `CustomIdent`.\n\nBy default, this method calls \
             [`CustomIdent::fold_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn fold_custom_ident(&mut self, node: CustomIdent) -> CustomIdent {
        <CustomIdent as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `Vec < CustomIdent >`.\n\nBy default, this method calls [`Vec < \
             CustomIdent >::fold_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn fold_custom_idents(&mut self, node: Vec<CustomIdent>) -> Vec<CustomIdent> {
        <Vec<CustomIdent> as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `CustomMediaQuery`.\n\nBy default, this method calls \
             [`CustomMediaQuery::fold_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn fold_custom_media_query(&mut self, node: CustomMediaQuery) -> CustomMediaQuery {
        <CustomMediaQuery as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `CustomMediaQueryMediaType`.\n\nBy default, this method calls \
             [`CustomMediaQueryMediaType::fold_children_with`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn fold_custom_media_query_media_type(
        &mut self,
        node: CustomMediaQueryMediaType,
    ) -> CustomMediaQueryMediaType {
        <CustomMediaQueryMediaType as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `CustomPropertyName`.\n\nBy default, this method calls \
             [`CustomPropertyName::fold_children_with`]. If you want to recurse, you need to call \
             it manually."]
    #[inline]
    fn fold_custom_property_name(&mut self, node: CustomPropertyName) -> CustomPropertyName {
        <CustomPropertyName as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `DashedIdent`.\n\nBy default, this method calls \
             [`DashedIdent::fold_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn fold_dashed_ident(&mut self, node: DashedIdent) -> DashedIdent {
        <DashedIdent as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `Declaration`.\n\nBy default, this method calls \
             [`Declaration::fold_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn fold_declaration(&mut self, node: Declaration) -> Declaration {
        <Declaration as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `DeclarationName`.\n\nBy default, this method calls \
             [`DeclarationName::fold_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn fold_declaration_name(&mut self, node: DeclarationName) -> DeclarationName {
        <DeclarationName as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `DeclarationOrAtRule`.\n\nBy default, this method calls \
             [`DeclarationOrAtRule::fold_children_with`]. If you want to recurse, you need to call \
             it manually."]
    #[inline]
    fn fold_declaration_or_at_rule(&mut self, node: DeclarationOrAtRule) -> DeclarationOrAtRule {
        <DeclarationOrAtRule as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `Delimiter`.\n\nBy default, this method calls \
             [`Delimiter::fold_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn fold_delimiter(&mut self, node: Delimiter) -> Delimiter {
        <Delimiter as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `DelimiterValue`.\n\nBy default, this method calls \
             [`DelimiterValue::fold_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn fold_delimiter_value(&mut self, node: DelimiterValue) -> DelimiterValue {
        <DelimiterValue as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `Dimension`.\n\nBy default, this method calls \
             [`Dimension::fold_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn fold_dimension(&mut self, node: Dimension) -> Dimension {
        <Dimension as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `DimensionToken`.\n\nBy default, this method calls \
             [`DimensionToken::fold_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn fold_dimension_token(&mut self, node: DimensionToken) -> DimensionToken {
        <DimensionToken as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `DocumentPrelude`.\n\nBy default, this method calls \
             [`DocumentPrelude::fold_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn fold_document_prelude(&mut self, node: DocumentPrelude) -> DocumentPrelude {
        <DocumentPrelude as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `DocumentPreludeMatchingFunction`.\n\nBy default, this method \
             calls [`DocumentPreludeMatchingFunction::fold_children_with`]. If you want to \
             recurse, you need to call it manually."]
    #[inline]
    fn fold_document_prelude_matching_function(
        &mut self,
        node: DocumentPreludeMatchingFunction,
    ) -> DocumentPreludeMatchingFunction {
        <DocumentPreludeMatchingFunction as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `Vec < DocumentPreludeMatchingFunction >`.\n\nBy default, this \
             method calls [`Vec < DocumentPreludeMatchingFunction >::fold_children_with`]. If you \
             want to recurse, you need to call it manually."]
    #[inline]
    fn fold_document_prelude_matching_functions(
        &mut self,
        node: Vec<DocumentPreludeMatchingFunction>,
    ) -> Vec<DocumentPreludeMatchingFunction> {
        <Vec<DocumentPreludeMatchingFunction> as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `ExtensionName`.\n\nBy default, this method calls \
             [`ExtensionName::fold_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn fold_extension_name(&mut self, node: ExtensionName) -> ExtensionName {
        <ExtensionName as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `FamilyName`.\n\nBy default, this method calls \
             [`FamilyName::fold_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn fold_family_name(&mut self, node: FamilyName) -> FamilyName {
        <FamilyName as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `Vec < FamilyName >`.\n\nBy default, this method calls [`Vec < \
             FamilyName >::fold_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn fold_family_names(&mut self, node: Vec<FamilyName>) -> Vec<FamilyName> {
        <Vec<FamilyName> as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `Flex`.\n\nBy default, this method calls \
             [`Flex::fold_children_with`]. If you want to recurse, you need to call it manually."]
    #[inline]
    fn fold_flex(&mut self, node: Flex) -> Flex {
        <Flex as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `FontFeatureValuesPrelude`.\n\nBy default, this method calls \
             [`FontFeatureValuesPrelude::fold_children_with`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn fold_font_feature_values_prelude(
        &mut self,
        node: FontFeatureValuesPrelude,
    ) -> FontFeatureValuesPrelude {
        <FontFeatureValuesPrelude as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `ForgivingComplexSelector`.\n\nBy default, this method calls \
             [`ForgivingComplexSelector::fold_children_with`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn fold_forgiving_complex_selector(
        &mut self,
        node: ForgivingComplexSelector,
    ) -> ForgivingComplexSelector {
        <ForgivingComplexSelector as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `Vec < ForgivingComplexSelector >`.\n\nBy default, this method \
             calls [`Vec < ForgivingComplexSelector >::fold_children_with`]. If you want to \
             recurse, you need to call it manually."]
    #[inline]
    fn fold_forgiving_complex_selectors(
        &mut self,
        node: Vec<ForgivingComplexSelector>,
    ) -> Vec<ForgivingComplexSelector> {
        <Vec<ForgivingComplexSelector> as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `ForgivingRelativeSelector`.\n\nBy default, this method calls \
             [`ForgivingRelativeSelector::fold_children_with`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn fold_forgiving_relative_selector(
        &mut self,
        node: ForgivingRelativeSelector,
    ) -> ForgivingRelativeSelector {
        <ForgivingRelativeSelector as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `ForgivingRelativeSelectorList`.\n\nBy default, this method \
             calls [`ForgivingRelativeSelectorList::fold_children_with`]. If you want to recurse, \
             you need to call it manually."]
    #[inline]
    fn fold_forgiving_relative_selector_list(
        &mut self,
        node: ForgivingRelativeSelectorList,
    ) -> ForgivingRelativeSelectorList {
        <ForgivingRelativeSelectorList as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `Vec < ForgivingRelativeSelector >`.\n\nBy default, this method \
             calls [`Vec < ForgivingRelativeSelector >::fold_children_with`]. If you want to \
             recurse, you need to call it manually."]
    #[inline]
    fn fold_forgiving_relative_selectors(
        &mut self,
        node: Vec<ForgivingRelativeSelector>,
    ) -> Vec<ForgivingRelativeSelector> {
        <Vec<ForgivingRelativeSelector> as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `ForgivingSelectorList`.\n\nBy default, this method calls \
             [`ForgivingSelectorList::fold_children_with`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn fold_forgiving_selector_list(
        &mut self,
        node: ForgivingSelectorList,
    ) -> ForgivingSelectorList {
        <ForgivingSelectorList as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `Frequency`.\n\nBy default, this method calls \
             [`Frequency::fold_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn fold_frequency(&mut self, node: Frequency) -> Frequency {
        <Frequency as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `FrequencyPercentage`.\n\nBy default, this method calls \
             [`FrequencyPercentage::fold_children_with`]. If you want to recurse, you need to call \
             it manually."]
    #[inline]
    fn fold_frequency_percentage(&mut self, node: FrequencyPercentage) -> FrequencyPercentage {
        <FrequencyPercentage as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `Function`.\n\nBy default, this method calls \
             [`Function::fold_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn fold_function(&mut self, node: Function) -> Function {
        <Function as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `FunctionName`.\n\nBy default, this method calls \
             [`FunctionName::fold_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn fold_function_name(&mut self, node: FunctionName) -> FunctionName {
        <FunctionName as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `GeneralEnclosed`.\n\nBy default, this method calls \
             [`GeneralEnclosed::fold_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn fold_general_enclosed(&mut self, node: GeneralEnclosed) -> GeneralEnclosed {
        <GeneralEnclosed as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `HexColor`.\n\nBy default, this method calls \
             [`HexColor::fold_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn fold_hex_color(&mut self, node: HexColor) -> HexColor {
        <HexColor as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `Hue`.\n\nBy default, this method calls \
             [`Hue::fold_children_with`]. If you want to recurse, you need to call it manually."]
    #[inline]
    fn fold_hue(&mut self, node: Hue) -> Hue {
        <Hue as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `IdSelector`.\n\nBy default, this method calls \
             [`IdSelector::fold_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn fold_id_selector(&mut self, node: IdSelector) -> IdSelector {
        <IdSelector as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `Ident`.\n\nBy default, this method calls \
             [`Ident::fold_children_with`]. If you want to recurse, you need to call it manually."]
    #[inline]
    fn fold_ident(&mut self, node: Ident) -> Ident {
        <Ident as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `Vec < Ident >`.\n\nBy default, this method calls [`Vec < Ident \
             >::fold_children_with`]. If you want to recurse, you need to call it manually."]
    #[inline]
    fn fold_idents(&mut self, node: Vec<Ident>) -> Vec<Ident> {
        <Vec<Ident> as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `ImportConditions`.\n\nBy default, this method calls \
             [`ImportConditions::fold_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn fold_import_conditions(&mut self, node: ImportConditions) -> ImportConditions {
        <ImportConditions as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `ImportHref`.\n\nBy default, this method calls \
             [`ImportHref::fold_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn fold_import_href(&mut self, node: ImportHref) -> ImportHref {
        <ImportHref as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `ImportLayerName`.\n\nBy default, this method calls \
             [`ImportLayerName::fold_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn fold_import_layer_name(&mut self, node: ImportLayerName) -> ImportLayerName {
        <ImportLayerName as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `ImportPrelude`.\n\nBy default, this method calls \
             [`ImportPrelude::fold_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn fold_import_prelude(&mut self, node: ImportPrelude) -> ImportPrelude {
        <ImportPrelude as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `ImportantFlag`.\n\nBy default, this method calls \
             [`ImportantFlag::fold_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn fold_important_flag(&mut self, node: ImportantFlag) -> ImportantFlag {
        <ImportantFlag as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `Integer`.\n\nBy default, this method calls \
             [`Integer::fold_children_with`]. If you want to recurse, you need to call it manually."]
    #[inline]
    fn fold_integer(&mut self, node: Integer) -> Integer {
        <Integer as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `KeyframeBlock`.\n\nBy default, this method calls \
             [`KeyframeBlock::fold_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn fold_keyframe_block(&mut self, node: KeyframeBlock) -> KeyframeBlock {
        <KeyframeBlock as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `KeyframeSelector`.\n\nBy default, this method calls \
             [`KeyframeSelector::fold_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn fold_keyframe_selector(&mut self, node: KeyframeSelector) -> KeyframeSelector {
        <KeyframeSelector as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `Vec < KeyframeSelector >`.\n\nBy default, this method calls \
             [`Vec < KeyframeSelector >::fold_children_with`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn fold_keyframe_selectors(&mut self, node: Vec<KeyframeSelector>) -> Vec<KeyframeSelector> {
        <Vec<KeyframeSelector> as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `KeyframesName`.\n\nBy default, this method calls \
             [`KeyframesName::fold_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn fold_keyframes_name(&mut self, node: KeyframesName) -> KeyframesName {
        <KeyframesName as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `KeyframesPseudoFunction`.\n\nBy default, this method calls \
             [`KeyframesPseudoFunction::fold_children_with`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn fold_keyframes_pseudo_function(
        &mut self,
        node: KeyframesPseudoFunction,
    ) -> KeyframesPseudoFunction {
        <KeyframesPseudoFunction as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `KeyframesPseudoPrefix`.\n\nBy default, this method calls \
             [`KeyframesPseudoPrefix::fold_children_with`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn fold_keyframes_pseudo_prefix(
        &mut self,
        node: KeyframesPseudoPrefix,
    ) -> KeyframesPseudoPrefix {
        <KeyframesPseudoPrefix as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `LayerName`.\n\nBy default, this method calls \
             [`LayerName::fold_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn fold_layer_name(&mut self, node: LayerName) -> LayerName {
        <LayerName as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `LayerNameList`.\n\nBy default, this method calls \
             [`LayerNameList::fold_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn fold_layer_name_list(&mut self, node: LayerNameList) -> LayerNameList {
        <LayerNameList as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `Vec < LayerName >`.\n\nBy default, this method calls [`Vec < \
             LayerName >::fold_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn fold_layer_names(&mut self, node: Vec<LayerName>) -> Vec<LayerName> {
        <Vec<LayerName> as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `LayerPrelude`.\n\nBy default, this method calls \
             [`LayerPrelude::fold_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn fold_layer_prelude(&mut self, node: LayerPrelude) -> LayerPrelude {
        <LayerPrelude as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `Length`.\n\nBy default, this method calls \
             [`Length::fold_children_with`]. If you want to recurse, you need to call it manually."]
    #[inline]
    fn fold_length(&mut self, node: Length) -> Length {
        <Length as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `LengthPercentage`.\n\nBy default, this method calls \
             [`LengthPercentage::fold_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn fold_length_percentage(&mut self, node: LengthPercentage) -> LengthPercentage {
        <LengthPercentage as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `ListOfComponentValues`.\n\nBy default, this method calls \
             [`ListOfComponentValues::fold_children_with`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn fold_list_of_component_values(
        &mut self,
        node: ListOfComponentValues,
    ) -> ListOfComponentValues {
        <ListOfComponentValues as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `MediaAnd`.\n\nBy default, this method calls \
             [`MediaAnd::fold_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn fold_media_and(&mut self, node: MediaAnd) -> MediaAnd {
        <MediaAnd as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `MediaCondition`.\n\nBy default, this method calls \
             [`MediaCondition::fold_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn fold_media_condition(&mut self, node: MediaCondition) -> MediaCondition {
        <MediaCondition as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `MediaConditionAllType`.\n\nBy default, this method calls \
             [`MediaConditionAllType::fold_children_with`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn fold_media_condition_all_type(
        &mut self,
        node: MediaConditionAllType,
    ) -> MediaConditionAllType {
        <MediaConditionAllType as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `Vec < MediaConditionAllType >`.\n\nBy default, this method \
             calls [`Vec < MediaConditionAllType >::fold_children_with`]. If you want to recurse, \
             you need to call it manually."]
    #[inline]
    fn fold_media_condition_all_types(
        &mut self,
        node: Vec<MediaConditionAllType>,
    ) -> Vec<MediaConditionAllType> {
        <Vec<MediaConditionAllType> as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `MediaConditionType`.\n\nBy default, this method calls \
             [`MediaConditionType::fold_children_with`]. If you want to recurse, you need to call \
             it manually."]
    #[inline]
    fn fold_media_condition_type(&mut self, node: MediaConditionType) -> MediaConditionType {
        <MediaConditionType as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `MediaConditionWithoutOr`.\n\nBy default, this method calls \
             [`MediaConditionWithoutOr::fold_children_with`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn fold_media_condition_without_or(
        &mut self,
        node: MediaConditionWithoutOr,
    ) -> MediaConditionWithoutOr {
        <MediaConditionWithoutOr as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `MediaConditionWithoutOrType`.\n\nBy default, this method calls \
             [`MediaConditionWithoutOrType::fold_children_with`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn fold_media_condition_without_or_type(
        &mut self,
        node: MediaConditionWithoutOrType,
    ) -> MediaConditionWithoutOrType {
        <MediaConditionWithoutOrType as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `Vec < MediaConditionWithoutOrType >`.\n\nBy default, this \
             method calls [`Vec < MediaConditionWithoutOrType >::fold_children_with`]. If you want \
             to recurse, you need to call it manually."]
    #[inline]
    fn fold_media_condition_without_or_types(
        &mut self,
        node: Vec<MediaConditionWithoutOrType>,
    ) -> Vec<MediaConditionWithoutOrType> {
        <Vec<MediaConditionWithoutOrType> as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `MediaFeature`.\n\nBy default, this method calls \
             [`MediaFeature::fold_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn fold_media_feature(&mut self, node: MediaFeature) -> MediaFeature {
        <MediaFeature as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `MediaFeatureBoolean`.\n\nBy default, this method calls \
             [`MediaFeatureBoolean::fold_children_with`]. If you want to recurse, you need to call \
             it manually."]
    #[inline]
    fn fold_media_feature_boolean(&mut self, node: MediaFeatureBoolean) -> MediaFeatureBoolean {
        <MediaFeatureBoolean as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `MediaFeatureName`.\n\nBy default, this method calls \
             [`MediaFeatureName::fold_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn fold_media_feature_name(&mut self, node: MediaFeatureName) -> MediaFeatureName {
        <MediaFeatureName as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `MediaFeaturePlain`.\n\nBy default, this method calls \
             [`MediaFeaturePlain::fold_children_with`]. If you want to recurse, you need to call \
             it manually."]
    #[inline]
    fn fold_media_feature_plain(&mut self, node: MediaFeaturePlain) -> MediaFeaturePlain {
        <MediaFeaturePlain as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `MediaFeatureRange`.\n\nBy default, this method calls \
             [`MediaFeatureRange::fold_children_with`]. If you want to recurse, you need to call \
             it manually."]
    #[inline]
    fn fold_media_feature_range(&mut self, node: MediaFeatureRange) -> MediaFeatureRange {
        <MediaFeatureRange as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `MediaFeatureRangeComparison`.\n\nBy default, this method calls \
             [`MediaFeatureRangeComparison::fold_children_with`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn fold_media_feature_range_comparison(
        &mut self,
        node: MediaFeatureRangeComparison,
    ) -> MediaFeatureRangeComparison {
        <MediaFeatureRangeComparison as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `MediaFeatureRangeInterval`.\n\nBy default, this method calls \
             [`MediaFeatureRangeInterval::fold_children_with`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn fold_media_feature_range_interval(
        &mut self,
        node: MediaFeatureRangeInterval,
    ) -> MediaFeatureRangeInterval {
        <MediaFeatureRangeInterval as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `MediaFeatureValue`.\n\nBy default, this method calls \
             [`MediaFeatureValue::fold_children_with`]. If you want to recurse, you need to call \
             it manually."]
    #[inline]
    fn fold_media_feature_value(&mut self, node: MediaFeatureValue) -> MediaFeatureValue {
        <MediaFeatureValue as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `MediaInParens`.\n\nBy default, this method calls \
             [`MediaInParens::fold_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn fold_media_in_parens(&mut self, node: MediaInParens) -> MediaInParens {
        <MediaInParens as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `MediaNot`.\n\nBy default, this method calls \
             [`MediaNot::fold_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn fold_media_not(&mut self, node: MediaNot) -> MediaNot {
        <MediaNot as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `MediaOr`.\n\nBy default, this method calls \
             [`MediaOr::fold_children_with`]. If you want to recurse, you need to call it manually."]
    #[inline]
    fn fold_media_or(&mut self, node: MediaOr) -> MediaOr {
        <MediaOr as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `MediaQuery`.\n\nBy default, this method calls \
             [`MediaQuery::fold_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn fold_media_query(&mut self, node: MediaQuery) -> MediaQuery {
        <MediaQuery as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `MediaQueryList`.\n\nBy default, this method calls \
             [`MediaQueryList::fold_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn fold_media_query_list(&mut self, node: MediaQueryList) -> MediaQueryList {
        <MediaQueryList as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `Vec < MediaQuery >`.\n\nBy default, this method calls [`Vec < \
             MediaQuery >::fold_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn fold_media_querys(&mut self, node: Vec<MediaQuery>) -> Vec<MediaQuery> {
        <Vec<MediaQuery> as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `MediaType`.\n\nBy default, this method calls \
             [`MediaType::fold_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn fold_media_type(&mut self, node: MediaType) -> MediaType {
        <MediaType as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `NamedNamespace`.\n\nBy default, this method calls \
             [`NamedNamespace::fold_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn fold_named_namespace(&mut self, node: NamedNamespace) -> NamedNamespace {
        <NamedNamespace as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `Namespace`.\n\nBy default, this method calls \
             [`Namespace::fold_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn fold_namespace(&mut self, node: Namespace) -> Namespace {
        <Namespace as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `NamespacePrefix`.\n\nBy default, this method calls \
             [`NamespacePrefix::fold_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn fold_namespace_prefix(&mut self, node: NamespacePrefix) -> NamespacePrefix {
        <NamespacePrefix as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `NamespacePrelude`.\n\nBy default, this method calls \
             [`NamespacePrelude::fold_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn fold_namespace_prelude(&mut self, node: NamespacePrelude) -> NamespacePrelude {
        <NamespacePrelude as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `NamespacePreludeUri`.\n\nBy default, this method calls \
             [`NamespacePreludeUri::fold_children_with`]. If you want to recurse, you need to call \
             it manually."]
    #[inline]
    fn fold_namespace_prelude_uri(&mut self, node: NamespacePreludeUri) -> NamespacePreludeUri {
        <NamespacePreludeUri as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `NestingSelector`.\n\nBy default, this method calls \
             [`NestingSelector::fold_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn fold_nesting_selector(&mut self, node: NestingSelector) -> NestingSelector {
        <NestingSelector as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `Number`.\n\nBy default, this method calls \
             [`Number::fold_children_with`]. If you want to recurse, you need to call it manually."]
    #[inline]
    fn fold_number(&mut self, node: Number) -> Number {
        <Number as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `NumberType`.\n\nBy default, this method calls \
             [`NumberType::fold_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn fold_number_type(&mut self, node: NumberType) -> NumberType {
        <NumberType as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `Option < Box < AtRulePrelude > >`.\n\nBy default, this method \
             calls [`Option < Box < AtRulePrelude > >::fold_children_with`]. If you want to \
             recurse, you need to call it manually."]
    #[inline]
    fn fold_opt_at_rule_prelude(
        &mut self,
        node: Option<Box<AtRulePrelude>>,
    ) -> Option<Box<AtRulePrelude>> {
        <Option<Box<AtRulePrelude>> as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `Option < swc_atoms :: Atom >`.\n\nBy default, this method calls \
             [`Option < swc_atoms :: Atom >::fold_children_with`]. If you want to recurse, you \
             need to call it manually."]
    #[inline]
    fn fold_opt_atom(&mut self, node: Option<swc_atoms::Atom>) -> Option<swc_atoms::Atom> {
        <Option<swc_atoms::Atom> as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `Option < AttributeSelectorMatcher >`.\n\nBy default, this \
             method calls [`Option < AttributeSelectorMatcher >::fold_children_with`]. If you want \
             to recurse, you need to call it manually."]
    #[inline]
    fn fold_opt_attribute_selector_matcher(
        &mut self,
        node: Option<AttributeSelectorMatcher>,
    ) -> Option<AttributeSelectorMatcher> {
        <Option<AttributeSelectorMatcher> as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `Option < AttributeSelectorModifier >`.\n\nBy default, this \
             method calls [`Option < AttributeSelectorModifier >::fold_children_with`]. If you \
             want to recurse, you need to call it manually."]
    #[inline]
    fn fold_opt_attribute_selector_modifier(
        &mut self,
        node: Option<AttributeSelectorModifier>,
    ) -> Option<AttributeSelectorModifier> {
        <Option<AttributeSelectorModifier> as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `Option < AttributeSelectorValue >`.\n\nBy default, this method \
             calls [`Option < AttributeSelectorValue >::fold_children_with`]. If you want to \
             recurse, you need to call it manually."]
    #[inline]
    fn fold_opt_attribute_selector_value(
        &mut self,
        node: Option<AttributeSelectorValue>,
    ) -> Option<AttributeSelectorValue> {
        <Option<AttributeSelectorValue> as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `Option < Combinator >`.\n\nBy default, this method calls \
             [`Option < Combinator >::fold_children_with`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn fold_opt_combinator(&mut self, node: Option<Combinator>) -> Option<Combinator> {
        <Option<Combinator> as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `Option < ContainerName >`.\n\nBy default, this method calls \
             [`Option < ContainerName >::fold_children_with`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn fold_opt_container_name(&mut self, node: Option<ContainerName>) -> Option<ContainerName> {
        <Option<ContainerName> as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `Option < ForgivingSelectorList >`.\n\nBy default, this method \
             calls [`Option < ForgivingSelectorList >::fold_children_with`]. If you want to \
             recurse, you need to call it manually."]
    #[inline]
    fn fold_opt_forgiving_selector_list(
        &mut self,
        node: Option<ForgivingSelectorList>,
    ) -> Option<ForgivingSelectorList> {
        <Option<ForgivingSelectorList> as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `Option < Box < Function > >`.\n\nBy default, this method calls \
             [`Option < Box < Function > >::fold_children_with`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn fold_opt_function(&mut self, node: Option<Box<Function>>) -> Option<Box<Function>> {
        <Option<Box<Function>> as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `Option < Ident >`.\n\nBy default, this method calls [`Option < \
             Ident >::fold_children_with`]. If you want to recurse, you need to call it manually."]
    #[inline]
    fn fold_opt_ident(&mut self, node: Option<Ident>) -> Option<Ident> {
        <Option<Ident> as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `Option < Box < ImportConditions > >`.\n\nBy default, this \
             method calls [`Option < Box < ImportConditions > >::fold_children_with`]. If you want \
             to recurse, you need to call it manually."]
    #[inline]
    fn fold_opt_import_conditions(
        &mut self,
        node: Option<Box<ImportConditions>>,
    ) -> Option<Box<ImportConditions>> {
        <Option<Box<ImportConditions>> as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `Option < Box < ImportLayerName > >`.\n\nBy default, this method \
             calls [`Option < Box < ImportLayerName > >::fold_children_with`]. If you want to \
             recurse, you need to call it manually."]
    #[inline]
    fn fold_opt_import_layer_name(
        &mut self,
        node: Option<Box<ImportLayerName>>,
    ) -> Option<Box<ImportLayerName>> {
        <Option<Box<ImportLayerName>> as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `Option < ImportantFlag >`.\n\nBy default, this method calls \
             [`Option < ImportantFlag >::fold_children_with`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn fold_opt_important_flag(&mut self, node: Option<ImportantFlag>) -> Option<ImportantFlag> {
        <Option<ImportantFlag> as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `Option < Box < MediaConditionType > >`.\n\nBy default, this \
             method calls [`Option < Box < MediaConditionType > >::fold_children_with`]. If you \
             want to recurse, you need to call it manually."]
    #[inline]
    fn fold_opt_media_condition_type(
        &mut self,
        node: Option<Box<MediaConditionType>>,
    ) -> Option<Box<MediaConditionType>> {
        <Option<Box<MediaConditionType>> as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `Option < Box < MediaQueryList > >`.\n\nBy default, this method \
             calls [`Option < Box < MediaQueryList > >::fold_children_with`]. If you want to \
             recurse, you need to call it manually."]
    #[inline]
    fn fold_opt_media_query_list(
        &mut self,
        node: Option<Box<MediaQueryList>>,
    ) -> Option<Box<MediaQueryList>> {
        <Option<Box<MediaQueryList>> as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `Option < MediaType >`.\n\nBy default, this method calls \
             [`Option < MediaType >::fold_children_with`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn fold_opt_media_type(&mut self, node: Option<MediaType>) -> Option<MediaType> {
        <Option<MediaType> as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `Option < Namespace >`.\n\nBy default, this method calls \
             [`Option < Namespace >::fold_children_with`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn fold_opt_namespace(&mut self, node: Option<Namespace>) -> Option<Namespace> {
        <Option<Namespace> as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `Option < NamespacePrefix >`.\n\nBy default, this method calls \
             [`Option < NamespacePrefix >::fold_children_with`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn fold_opt_namespace_prefix(
        &mut self,
        node: Option<NamespacePrefix>,
    ) -> Option<NamespacePrefix> {
        <Option<NamespacePrefix> as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `Option < NestingSelector >`.\n\nBy default, this method calls \
             [`Option < NestingSelector >::fold_children_with`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn fold_opt_nesting_selector(
        &mut self,
        node: Option<NestingSelector>,
    ) -> Option<NestingSelector> {
        <Option<NestingSelector> as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `Option < Number >`.\n\nBy default, this method calls [`Option < \
             Number >::fold_children_with`]. If you want to recurse, you need to call it manually."]
    #[inline]
    fn fold_opt_number(&mut self, node: Option<Number>) -> Option<Number> {
        <Option<Number> as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `Option < Vec < PageSelectorPseudo > >`.\n\nBy default, this \
             method calls [`Option < Vec < PageSelectorPseudo > >::fold_children_with`]. If you \
             want to recurse, you need to call it manually."]
    #[inline]
    fn fold_opt_page_selector_pseudos(
        &mut self,
        node: Option<Vec<PageSelectorPseudo>>,
    ) -> Option<Vec<PageSelectorPseudo>> {
        <Option<Vec<PageSelectorPseudo>> as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `Option < PageSelectorType >`.\n\nBy default, this method calls \
             [`Option < PageSelectorType >::fold_children_with`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn fold_opt_page_selector_type(
        &mut self,
        node: Option<PageSelectorType>,
    ) -> Option<PageSelectorType> {
        <Option<PageSelectorType> as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `Option < Vec < PseudoClassSelectorChildren > >`.\n\nBy default, \
             this method calls [`Option < Vec < PseudoClassSelectorChildren > \
             >::fold_children_with`]. If you want to recurse, you need to call it manually."]
    #[inline]
    fn fold_opt_pseudo_class_selector_childrens(
        &mut self,
        node: Option<Vec<PseudoClassSelectorChildren>>,
    ) -> Option<Vec<PseudoClassSelectorChildren>> {
        <Option<Vec<PseudoClassSelectorChildren>> as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `Option < Vec < PseudoElementSelectorChildren > >`.\n\nBy \
             default, this method calls [`Option < Vec < PseudoElementSelectorChildren > \
             >::fold_children_with`]. If you want to recurse, you need to call it manually."]
    #[inline]
    fn fold_opt_pseudo_element_selector_childrens(
        &mut self,
        node: Option<Vec<PseudoElementSelectorChildren>>,
    ) -> Option<Vec<PseudoElementSelectorChildren>> {
        <Option<Vec<PseudoElementSelectorChildren>> as FoldWith<Self>>::fold_children_with(
            node, self,
        )
    }
    #[doc = "Visit a node of type `Option < SimpleBlock >`.\n\nBy default, this method calls \
             [`Option < SimpleBlock >::fold_children_with`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn fold_opt_simple_block(&mut self, node: Option<SimpleBlock>) -> Option<SimpleBlock> {
        <Option<SimpleBlock> as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `Option < Box < TypeSelector > >`.\n\nBy default, this method \
             calls [`Option < Box < TypeSelector > >::fold_children_with`]. If you want to \
             recurse, you need to call it manually."]
    #[inline]
    fn fold_opt_type_selector(
        &mut self,
        node: Option<Box<TypeSelector>>,
    ) -> Option<Box<TypeSelector>> {
        <Option<Box<TypeSelector>> as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `Option < Vec < UrlModifier > >`.\n\nBy default, this method \
             calls [`Option < Vec < UrlModifier > >::fold_children_with`]. If you want to recurse, \
             you need to call it manually."]
    #[inline]
    fn fold_opt_url_modifiers(
        &mut self,
        node: Option<Vec<UrlModifier>>,
    ) -> Option<Vec<UrlModifier>> {
        <Option<Vec<UrlModifier>> as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `Option < Box < UrlValue > >`.\n\nBy default, this method calls \
             [`Option < Box < UrlValue > >::fold_children_with`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn fold_opt_url_value(&mut self, node: Option<Box<UrlValue>>) -> Option<Box<UrlValue>> {
        <Option<Box<UrlValue>> as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `PageSelector`.\n\nBy default, this method calls \
             [`PageSelector::fold_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn fold_page_selector(&mut self, node: PageSelector) -> PageSelector {
        <PageSelector as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `PageSelectorList`.\n\nBy default, this method calls \
             [`PageSelectorList::fold_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn fold_page_selector_list(&mut self, node: PageSelectorList) -> PageSelectorList {
        <PageSelectorList as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `PageSelectorPseudo`.\n\nBy default, this method calls \
             [`PageSelectorPseudo::fold_children_with`]. If you want to recurse, you need to call \
             it manually."]
    #[inline]
    fn fold_page_selector_pseudo(&mut self, node: PageSelectorPseudo) -> PageSelectorPseudo {
        <PageSelectorPseudo as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `Vec < PageSelectorPseudo >`.\n\nBy default, this method calls \
             [`Vec < PageSelectorPseudo >::fold_children_with`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn fold_page_selector_pseudos(
        &mut self,
        node: Vec<PageSelectorPseudo>,
    ) -> Vec<PageSelectorPseudo> {
        <Vec<PageSelectorPseudo> as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `PageSelectorType`.\n\nBy default, this method calls \
             [`PageSelectorType::fold_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn fold_page_selector_type(&mut self, node: PageSelectorType) -> PageSelectorType {
        <PageSelectorType as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `Vec < PageSelector >`.\n\nBy default, this method calls [`Vec < \
             PageSelector >::fold_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn fold_page_selectors(&mut self, node: Vec<PageSelector>) -> Vec<PageSelector> {
        <Vec<PageSelector> as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `Percentage`.\n\nBy default, this method calls \
             [`Percentage::fold_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn fold_percentage(&mut self, node: Percentage) -> Percentage {
        <Percentage as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `PseudoClassSelector`.\n\nBy default, this method calls \
             [`PseudoClassSelector::fold_children_with`]. If you want to recurse, you need to call \
             it manually."]
    #[inline]
    fn fold_pseudo_class_selector(&mut self, node: PseudoClassSelector) -> PseudoClassSelector {
        <PseudoClassSelector as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `PseudoClassSelectorChildren`.\n\nBy default, this method calls \
             [`PseudoClassSelectorChildren::fold_children_with`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn fold_pseudo_class_selector_children(
        &mut self,
        node: PseudoClassSelectorChildren,
    ) -> PseudoClassSelectorChildren {
        <PseudoClassSelectorChildren as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `Vec < PseudoClassSelectorChildren >`.\n\nBy default, this \
             method calls [`Vec < PseudoClassSelectorChildren >::fold_children_with`]. If you want \
             to recurse, you need to call it manually."]
    #[inline]
    fn fold_pseudo_class_selector_childrens(
        &mut self,
        node: Vec<PseudoClassSelectorChildren>,
    ) -> Vec<PseudoClassSelectorChildren> {
        <Vec<PseudoClassSelectorChildren> as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `PseudoElementSelector`.\n\nBy default, this method calls \
             [`PseudoElementSelector::fold_children_with`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn fold_pseudo_element_selector(
        &mut self,
        node: PseudoElementSelector,
    ) -> PseudoElementSelector {
        <PseudoElementSelector as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `PseudoElementSelectorChildren`.\n\nBy default, this method \
             calls [`PseudoElementSelectorChildren::fold_children_with`]. If you want to recurse, \
             you need to call it manually."]
    #[inline]
    fn fold_pseudo_element_selector_children(
        &mut self,
        node: PseudoElementSelectorChildren,
    ) -> PseudoElementSelectorChildren {
        <PseudoElementSelectorChildren as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `Vec < PseudoElementSelectorChildren >`.\n\nBy default, this \
             method calls [`Vec < PseudoElementSelectorChildren >::fold_children_with`]. If you \
             want to recurse, you need to call it manually."]
    #[inline]
    fn fold_pseudo_element_selector_childrens(
        &mut self,
        node: Vec<PseudoElementSelectorChildren>,
    ) -> Vec<PseudoElementSelectorChildren> {
        <Vec<PseudoElementSelectorChildren> as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `QualifiedRule`.\n\nBy default, this method calls \
             [`QualifiedRule::fold_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn fold_qualified_rule(&mut self, node: QualifiedRule) -> QualifiedRule {
        <QualifiedRule as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `QualifiedRulePrelude`.\n\nBy default, this method calls \
             [`QualifiedRulePrelude::fold_children_with`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn fold_qualified_rule_prelude(&mut self, node: QualifiedRulePrelude) -> QualifiedRulePrelude {
        <QualifiedRulePrelude as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `QueryInParens`.\n\nBy default, this method calls \
             [`QueryInParens::fold_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn fold_query_in_parens(&mut self, node: QueryInParens) -> QueryInParens {
        <QueryInParens as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `Ratio`.\n\nBy default, this method calls \
             [`Ratio::fold_children_with`]. If you want to recurse, you need to call it manually."]
    #[inline]
    fn fold_ratio(&mut self, node: Ratio) -> Ratio {
        <Ratio as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `RelativeSelector`.\n\nBy default, this method calls \
             [`RelativeSelector::fold_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn fold_relative_selector(&mut self, node: RelativeSelector) -> RelativeSelector {
        <RelativeSelector as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `RelativeSelectorList`.\n\nBy default, this method calls \
             [`RelativeSelectorList::fold_children_with`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn fold_relative_selector_list(&mut self, node: RelativeSelectorList) -> RelativeSelectorList {
        <RelativeSelectorList as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `Vec < RelativeSelector >`.\n\nBy default, this method calls \
             [`Vec < RelativeSelector >::fold_children_with`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn fold_relative_selectors(&mut self, node: Vec<RelativeSelector>) -> Vec<RelativeSelector> {
        <Vec<RelativeSelector> as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `Resolution`.\n\nBy default, this method calls \
             [`Resolution::fold_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn fold_resolution(&mut self, node: Resolution) -> Resolution {
        <Resolution as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `Rule`.\n\nBy default, this method calls \
             [`Rule::fold_children_with`]. If you want to recurse, you need to call it manually."]
    #[inline]
    fn fold_rule(&mut self, node: Rule) -> Rule {
        <Rule as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `Vec < Rule >`.\n\nBy default, this method calls [`Vec < Rule \
             >::fold_children_with`]. If you want to recurse, you need to call it manually."]
    #[inline]
    fn fold_rules(&mut self, node: Vec<Rule>) -> Vec<Rule> {
        <Vec<Rule> as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `ScopeRange`.\n\nBy default, this method calls \
             [`ScopeRange::fold_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn fold_scope_range(&mut self, node: ScopeRange) -> ScopeRange {
        <ScopeRange as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `SelectorList`.\n\nBy default, this method calls \
             [`SelectorList::fold_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn fold_selector_list(&mut self, node: SelectorList) -> SelectorList {
        <SelectorList as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `SequenceOfCustomIdents`.\n\nBy default, this method calls \
             [`SequenceOfCustomIdents::fold_children_with`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn fold_sequence_of_custom_idents(
        &mut self,
        node: SequenceOfCustomIdents,
    ) -> SequenceOfCustomIdents {
        <SequenceOfCustomIdents as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `SimpleBlock`.\n\nBy default, this method calls \
             [`SimpleBlock::fold_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn fold_simple_block(&mut self, node: SimpleBlock) -> SimpleBlock {
        <SimpleBlock as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `SizeFeature`.\n\nBy default, this method calls \
             [`SizeFeature::fold_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn fold_size_feature(&mut self, node: SizeFeature) -> SizeFeature {
        <SizeFeature as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `SizeFeatureBoolean`.\n\nBy default, this method calls \
             [`SizeFeatureBoolean::fold_children_with`]. If you want to recurse, you need to call \
             it manually."]
    #[inline]
    fn fold_size_feature_boolean(&mut self, node: SizeFeatureBoolean) -> SizeFeatureBoolean {
        <SizeFeatureBoolean as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `SizeFeatureName`.\n\nBy default, this method calls \
             [`SizeFeatureName::fold_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn fold_size_feature_name(&mut self, node: SizeFeatureName) -> SizeFeatureName {
        <SizeFeatureName as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `SizeFeaturePlain`.\n\nBy default, this method calls \
             [`SizeFeaturePlain::fold_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn fold_size_feature_plain(&mut self, node: SizeFeaturePlain) -> SizeFeaturePlain {
        <SizeFeaturePlain as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `SizeFeatureRange`.\n\nBy default, this method calls \
             [`SizeFeatureRange::fold_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn fold_size_feature_range(&mut self, node: SizeFeatureRange) -> SizeFeatureRange {
        <SizeFeatureRange as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `SizeFeatureRangeComparison`.\n\nBy default, this method calls \
             [`SizeFeatureRangeComparison::fold_children_with`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn fold_size_feature_range_comparison(
        &mut self,
        node: SizeFeatureRangeComparison,
    ) -> SizeFeatureRangeComparison {
        <SizeFeatureRangeComparison as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `SizeFeatureRangeInterval`.\n\nBy default, this method calls \
             [`SizeFeatureRangeInterval::fold_children_with`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn fold_size_feature_range_interval(
        &mut self,
        node: SizeFeatureRangeInterval,
    ) -> SizeFeatureRangeInterval {
        <SizeFeatureRangeInterval as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `SizeFeatureValue`.\n\nBy default, this method calls \
             [`SizeFeatureValue::fold_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn fold_size_feature_value(&mut self, node: SizeFeatureValue) -> SizeFeatureValue {
        <SizeFeatureValue as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `swc_common :: Span`.\n\nBy default, this method calls \
             [`swc_common :: Span::fold_children_with`]. If you want to recurse, you need to call \
             it manually."]
    #[inline]
    fn fold_span(&mut self, node: swc_common::Span) -> swc_common::Span {
        <swc_common::Span as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `Str`.\n\nBy default, this method calls \
             [`Str::fold_children_with`]. If you want to recurse, you need to call it manually."]
    #[inline]
    fn fold_str(&mut self, node: Str) -> Str {
        <Str as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `StyleBlock`.\n\nBy default, this method calls \
             [`StyleBlock::fold_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn fold_style_block(&mut self, node: StyleBlock) -> StyleBlock {
        <StyleBlock as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `Stylesheet`.\n\nBy default, this method calls \
             [`Stylesheet::fold_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn fold_stylesheet(&mut self, node: Stylesheet) -> Stylesheet {
        <Stylesheet as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `SubclassSelector`.\n\nBy default, this method calls \
             [`SubclassSelector::fold_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn fold_subclass_selector(&mut self, node: SubclassSelector) -> SubclassSelector {
        <SubclassSelector as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `Vec < SubclassSelector >`.\n\nBy default, this method calls \
             [`Vec < SubclassSelector >::fold_children_with`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn fold_subclass_selectors(&mut self, node: Vec<SubclassSelector>) -> Vec<SubclassSelector> {
        <Vec<SubclassSelector> as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `SupportsAnd`.\n\nBy default, this method calls \
             [`SupportsAnd::fold_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn fold_supports_and(&mut self, node: SupportsAnd) -> SupportsAnd {
        <SupportsAnd as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `SupportsCondition`.\n\nBy default, this method calls \
             [`SupportsCondition::fold_children_with`]. If you want to recurse, you need to call \
             it manually."]
    #[inline]
    fn fold_supports_condition(&mut self, node: SupportsCondition) -> SupportsCondition {
        <SupportsCondition as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `SupportsConditionType`.\n\nBy default, this method calls \
             [`SupportsConditionType::fold_children_with`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn fold_supports_condition_type(
        &mut self,
        node: SupportsConditionType,
    ) -> SupportsConditionType {
        <SupportsConditionType as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `Vec < SupportsConditionType >`.\n\nBy default, this method \
             calls [`Vec < SupportsConditionType >::fold_children_with`]. If you want to recurse, \
             you need to call it manually."]
    #[inline]
    fn fold_supports_condition_types(
        &mut self,
        node: Vec<SupportsConditionType>,
    ) -> Vec<SupportsConditionType> {
        <Vec<SupportsConditionType> as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `SupportsFeature`.\n\nBy default, this method calls \
             [`SupportsFeature::fold_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn fold_supports_feature(&mut self, node: SupportsFeature) -> SupportsFeature {
        <SupportsFeature as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `SupportsInParens`.\n\nBy default, this method calls \
             [`SupportsInParens::fold_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn fold_supports_in_parens(&mut self, node: SupportsInParens) -> SupportsInParens {
        <SupportsInParens as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `SupportsNot`.\n\nBy default, this method calls \
             [`SupportsNot::fold_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn fold_supports_not(&mut self, node: SupportsNot) -> SupportsNot {
        <SupportsNot as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `SupportsOr`.\n\nBy default, this method calls \
             [`SupportsOr::fold_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn fold_supports_or(&mut self, node: SupportsOr) -> SupportsOr {
        <SupportsOr as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `TagNameSelector`.\n\nBy default, this method calls \
             [`TagNameSelector::fold_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn fold_tag_name_selector(&mut self, node: TagNameSelector) -> TagNameSelector {
        <TagNameSelector as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `Time`.\n\nBy default, this method calls \
             [`Time::fold_children_with`]. If you want to recurse, you need to call it manually."]
    #[inline]
    fn fold_time(&mut self, node: Time) -> Time {
        <Time as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `TimePercentage`.\n\nBy default, this method calls \
             [`TimePercentage::fold_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn fold_time_percentage(&mut self, node: TimePercentage) -> TimePercentage {
        <TimePercentage as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `Token`.\n\nBy default, this method calls \
             [`Token::fold_children_with`]. If you want to recurse, you need to call it manually."]
    #[inline]
    fn fold_token(&mut self, node: Token) -> Token {
        <Token as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `TokenAndSpan`.\n\nBy default, this method calls \
             [`TokenAndSpan::fold_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn fold_token_and_span(&mut self, node: TokenAndSpan) -> TokenAndSpan {
        <TokenAndSpan as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `TypeSelector`.\n\nBy default, this method calls \
             [`TypeSelector::fold_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn fold_type_selector(&mut self, node: TypeSelector) -> TypeSelector {
        <TypeSelector as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `UnicodeRange`.\n\nBy default, this method calls \
             [`UnicodeRange::fold_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn fold_unicode_range(&mut self, node: UnicodeRange) -> UnicodeRange {
        <UnicodeRange as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `UniversalSelector`.\n\nBy default, this method calls \
             [`UniversalSelector::fold_children_with`]. If you want to recurse, you need to call \
             it manually."]
    #[inline]
    fn fold_universal_selector(&mut self, node: UniversalSelector) -> UniversalSelector {
        <UniversalSelector as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `UnknownDimension`.\n\nBy default, this method calls \
             [`UnknownDimension::fold_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn fold_unknown_dimension(&mut self, node: UnknownDimension) -> UnknownDimension {
        <UnknownDimension as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `Url`.\n\nBy default, this method calls \
             [`Url::fold_children_with`]. If you want to recurse, you need to call it manually."]
    #[inline]
    fn fold_url(&mut self, node: Url) -> Url {
        <Url as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `UrlKeyValue`.\n\nBy default, this method calls \
             [`UrlKeyValue::fold_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn fold_url_key_value(&mut self, node: UrlKeyValue) -> UrlKeyValue {
        <UrlKeyValue as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `UrlModifier`.\n\nBy default, this method calls \
             [`UrlModifier::fold_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn fold_url_modifier(&mut self, node: UrlModifier) -> UrlModifier {
        <UrlModifier as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `Vec < UrlModifier >`.\n\nBy default, this method calls [`Vec < \
             UrlModifier >::fold_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn fold_url_modifiers(&mut self, node: Vec<UrlModifier>) -> Vec<UrlModifier> {
        <Vec<UrlModifier> as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `UrlValue`.\n\nBy default, this method calls \
             [`UrlValue::fold_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn fold_url_value(&mut self, node: UrlValue) -> UrlValue {
        <UrlValue as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `UrlValueRaw`.\n\nBy default, this method calls \
             [`UrlValueRaw::fold_children_with`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn fold_url_value_raw(&mut self, node: UrlValueRaw) -> UrlValueRaw {
        <UrlValueRaw as FoldWith<Self>>::fold_children_with(node, self)
    }
    #[doc = "Visit a node of type `WqName`.\n\nBy default, this method calls \
             [`WqName::fold_children_with`]. If you want to recurse, you need to call it manually."]
    #[inline]
    fn fold_wq_name(&mut self, node: WqName) -> WqName {
        <WqName as FoldWith<Self>>::fold_children_with(node, self)
    }
}
impl<V> Fold for &mut V
where
    V: ?Sized + Fold,
{
    #[inline]
    fn fold_absolute_color_base(&mut self, node: AbsoluteColorBase) -> AbsoluteColorBase {
        <V as Fold>::fold_absolute_color_base(&mut **self, node)
    }

    #[inline]
    fn fold_alpha_value(&mut self, node: AlphaValue) -> AlphaValue {
        <V as Fold>::fold_alpha_value(&mut **self, node)
    }

    #[inline]
    fn fold_an_plus_b(&mut self, node: AnPlusB) -> AnPlusB {
        <V as Fold>::fold_an_plus_b(&mut **self, node)
    }

    #[inline]
    fn fold_an_plus_b_notation(&mut self, node: AnPlusBNotation) -> AnPlusBNotation {
        <V as Fold>::fold_an_plus_b_notation(&mut **self, node)
    }

    #[inline]
    fn fold_angle(&mut self, node: Angle) -> Angle {
        <V as Fold>::fold_angle(&mut **self, node)
    }

    #[inline]
    fn fold_angle_percentage(&mut self, node: AnglePercentage) -> AnglePercentage {
        <V as Fold>::fold_angle_percentage(&mut **self, node)
    }

    #[inline]
    fn fold_any_namespace(&mut self, node: AnyNamespace) -> AnyNamespace {
        <V as Fold>::fold_any_namespace(&mut **self, node)
    }

    #[inline]
    fn fold_at_rule(&mut self, node: AtRule) -> AtRule {
        <V as Fold>::fold_at_rule(&mut **self, node)
    }

    #[inline]
    fn fold_at_rule_name(&mut self, node: AtRuleName) -> AtRuleName {
        <V as Fold>::fold_at_rule_name(&mut **self, node)
    }

    #[inline]
    fn fold_at_rule_prelude(&mut self, node: AtRulePrelude) -> AtRulePrelude {
        <V as Fold>::fold_at_rule_prelude(&mut **self, node)
    }

    #[inline]
    fn fold_atom(&mut self, node: swc_atoms::Atom) -> swc_atoms::Atom {
        <V as Fold>::fold_atom(&mut **self, node)
    }

    #[inline]
    fn fold_attribute_selector(&mut self, node: AttributeSelector) -> AttributeSelector {
        <V as Fold>::fold_attribute_selector(&mut **self, node)
    }

    #[inline]
    fn fold_attribute_selector_matcher(
        &mut self,
        node: AttributeSelectorMatcher,
    ) -> AttributeSelectorMatcher {
        <V as Fold>::fold_attribute_selector_matcher(&mut **self, node)
    }

    #[inline]
    fn fold_attribute_selector_matcher_value(
        &mut self,
        node: AttributeSelectorMatcherValue,
    ) -> AttributeSelectorMatcherValue {
        <V as Fold>::fold_attribute_selector_matcher_value(&mut **self, node)
    }

    #[inline]
    fn fold_attribute_selector_modifier(
        &mut self,
        node: AttributeSelectorModifier,
    ) -> AttributeSelectorModifier {
        <V as Fold>::fold_attribute_selector_modifier(&mut **self, node)
    }

    #[inline]
    fn fold_attribute_selector_value(
        &mut self,
        node: AttributeSelectorValue,
    ) -> AttributeSelectorValue {
        <V as Fold>::fold_attribute_selector_value(&mut **self, node)
    }

    #[inline]
    fn fold_bin_op(&mut self, node: BinOp) -> BinOp {
        <V as Fold>::fold_bin_op(&mut **self, node)
    }

    #[inline]
    fn fold_calc_operator(&mut self, node: CalcOperator) -> CalcOperator {
        <V as Fold>::fold_calc_operator(&mut **self, node)
    }

    #[inline]
    fn fold_calc_operator_type(&mut self, node: CalcOperatorType) -> CalcOperatorType {
        <V as Fold>::fold_calc_operator_type(&mut **self, node)
    }

    #[inline]
    fn fold_calc_product(&mut self, node: CalcProduct) -> CalcProduct {
        <V as Fold>::fold_calc_product(&mut **self, node)
    }

    #[inline]
    fn fold_calc_product_or_operator(
        &mut self,
        node: CalcProductOrOperator,
    ) -> CalcProductOrOperator {
        <V as Fold>::fold_calc_product_or_operator(&mut **self, node)
    }

    #[inline]
    fn fold_calc_product_or_operators(
        &mut self,
        node: Vec<CalcProductOrOperator>,
    ) -> Vec<CalcProductOrOperator> {
        <V as Fold>::fold_calc_product_or_operators(&mut **self, node)
    }

    #[inline]
    fn fold_calc_sum(&mut self, node: CalcSum) -> CalcSum {
        <V as Fold>::fold_calc_sum(&mut **self, node)
    }

    #[inline]
    fn fold_calc_value(&mut self, node: CalcValue) -> CalcValue {
        <V as Fold>::fold_calc_value(&mut **self, node)
    }

    #[inline]
    fn fold_calc_value_or_operator(&mut self, node: CalcValueOrOperator) -> CalcValueOrOperator {
        <V as Fold>::fold_calc_value_or_operator(&mut **self, node)
    }

    #[inline]
    fn fold_calc_value_or_operators(
        &mut self,
        node: Vec<CalcValueOrOperator>,
    ) -> Vec<CalcValueOrOperator> {
        <V as Fold>::fold_calc_value_or_operators(&mut **self, node)
    }

    #[inline]
    fn fold_class_selector(&mut self, node: ClassSelector) -> ClassSelector {
        <V as Fold>::fold_class_selector(&mut **self, node)
    }

    #[inline]
    fn fold_cmyk_component(&mut self, node: CmykComponent) -> CmykComponent {
        <V as Fold>::fold_cmyk_component(&mut **self, node)
    }

    #[inline]
    fn fold_color(&mut self, node: Color) -> Color {
        <V as Fold>::fold_color(&mut **self, node)
    }

    #[inline]
    fn fold_color_profile_name(&mut self, node: ColorProfileName) -> ColorProfileName {
        <V as Fold>::fold_color_profile_name(&mut **self, node)
    }

    #[inline]
    fn fold_combinator(&mut self, node: Combinator) -> Combinator {
        <V as Fold>::fold_combinator(&mut **self, node)
    }

    #[inline]
    fn fold_combinator_value(&mut self, node: CombinatorValue) -> CombinatorValue {
        <V as Fold>::fold_combinator_value(&mut **self, node)
    }

    #[inline]
    fn fold_complex_selector(&mut self, node: ComplexSelector) -> ComplexSelector {
        <V as Fold>::fold_complex_selector(&mut **self, node)
    }

    #[inline]
    fn fold_complex_selector_children(
        &mut self,
        node: ComplexSelectorChildren,
    ) -> ComplexSelectorChildren {
        <V as Fold>::fold_complex_selector_children(&mut **self, node)
    }

    #[inline]
    fn fold_complex_selector_childrens(
        &mut self,
        node: Vec<ComplexSelectorChildren>,
    ) -> Vec<ComplexSelectorChildren> {
        <V as Fold>::fold_complex_selector_childrens(&mut **self, node)
    }

    #[inline]
    fn fold_complex_selectors(&mut self, node: Vec<ComplexSelector>) -> Vec<ComplexSelector> {
        <V as Fold>::fold_complex_selectors(&mut **self, node)
    }

    #[inline]
    fn fold_component_value(&mut self, node: ComponentValue) -> ComponentValue {
        <V as Fold>::fold_component_value(&mut **self, node)
    }

    #[inline]
    fn fold_component_values(&mut self, node: Vec<ComponentValue>) -> Vec<ComponentValue> {
        <V as Fold>::fold_component_values(&mut **self, node)
    }

    #[inline]
    fn fold_compound_selector(&mut self, node: CompoundSelector) -> CompoundSelector {
        <V as Fold>::fold_compound_selector(&mut **self, node)
    }

    #[inline]
    fn fold_compound_selector_list(&mut self, node: CompoundSelectorList) -> CompoundSelectorList {
        <V as Fold>::fold_compound_selector_list(&mut **self, node)
    }

    #[inline]
    fn fold_compound_selectors(&mut self, node: Vec<CompoundSelector>) -> Vec<CompoundSelector> {
        <V as Fold>::fold_compound_selectors(&mut **self, node)
    }

    #[inline]
    fn fold_container_condition(&mut self, node: ContainerCondition) -> ContainerCondition {
        <V as Fold>::fold_container_condition(&mut **self, node)
    }

    #[inline]
    fn fold_container_name(&mut self, node: ContainerName) -> ContainerName {
        <V as Fold>::fold_container_name(&mut **self, node)
    }

    #[inline]
    fn fold_container_query(&mut self, node: ContainerQuery) -> ContainerQuery {
        <V as Fold>::fold_container_query(&mut **self, node)
    }

    #[inline]
    fn fold_container_query_and(&mut self, node: ContainerQueryAnd) -> ContainerQueryAnd {
        <V as Fold>::fold_container_query_and(&mut **self, node)
    }

    #[inline]
    fn fold_container_query_not(&mut self, node: ContainerQueryNot) -> ContainerQueryNot {
        <V as Fold>::fold_container_query_not(&mut **self, node)
    }

    #[inline]
    fn fold_container_query_or(&mut self, node: ContainerQueryOr) -> ContainerQueryOr {
        <V as Fold>::fold_container_query_or(&mut **self, node)
    }

    #[inline]
    fn fold_container_query_type(&mut self, node: ContainerQueryType) -> ContainerQueryType {
        <V as Fold>::fold_container_query_type(&mut **self, node)
    }

    #[inline]
    fn fold_container_query_types(
        &mut self,
        node: Vec<ContainerQueryType>,
    ) -> Vec<ContainerQueryType> {
        <V as Fold>::fold_container_query_types(&mut **self, node)
    }

    #[inline]
    fn fold_custom_highlight_name(&mut self, node: CustomHighlightName) -> CustomHighlightName {
        <V as Fold>::fold_custom_highlight_name(&mut **self, node)
    }

    #[inline]
    fn fold_custom_ident(&mut self, node: CustomIdent) -> CustomIdent {
        <V as Fold>::fold_custom_ident(&mut **self, node)
    }

    #[inline]
    fn fold_custom_idents(&mut self, node: Vec<CustomIdent>) -> Vec<CustomIdent> {
        <V as Fold>::fold_custom_idents(&mut **self, node)
    }

    #[inline]
    fn fold_custom_media_query(&mut self, node: CustomMediaQuery) -> CustomMediaQuery {
        <V as Fold>::fold_custom_media_query(&mut **self, node)
    }

    #[inline]
    fn fold_custom_media_query_media_type(
        &mut self,
        node: CustomMediaQueryMediaType,
    ) -> CustomMediaQueryMediaType {
        <V as Fold>::fold_custom_media_query_media_type(&mut **self, node)
    }

    #[inline]
    fn fold_custom_property_name(&mut self, node: CustomPropertyName) -> CustomPropertyName {
        <V as Fold>::fold_custom_property_name(&mut **self, node)
    }

    #[inline]
    fn fold_dashed_ident(&mut self, node: DashedIdent) -> DashedIdent {
        <V as Fold>::fold_dashed_ident(&mut **self, node)
    }

    #[inline]
    fn fold_declaration(&mut self, node: Declaration) -> Declaration {
        <V as Fold>::fold_declaration(&mut **self, node)
    }

    #[inline]
    fn fold_declaration_name(&mut self, node: DeclarationName) -> DeclarationName {
        <V as Fold>::fold_declaration_name(&mut **self, node)
    }

    #[inline]
    fn fold_declaration_or_at_rule(&mut self, node: DeclarationOrAtRule) -> DeclarationOrAtRule {
        <V as Fold>::fold_declaration_or_at_rule(&mut **self, node)
    }

    #[inline]
    fn fold_delimiter(&mut self, node: Delimiter) -> Delimiter {
        <V as Fold>::fold_delimiter(&mut **self, node)
    }

    #[inline]
    fn fold_delimiter_value(&mut self, node: DelimiterValue) -> DelimiterValue {
        <V as Fold>::fold_delimiter_value(&mut **self, node)
    }

    #[inline]
    fn fold_dimension(&mut self, node: Dimension) -> Dimension {
        <V as Fold>::fold_dimension(&mut **self, node)
    }

    #[inline]
    fn fold_dimension_token(&mut self, node: DimensionToken) -> DimensionToken {
        <V as Fold>::fold_dimension_token(&mut **self, node)
    }

    #[inline]
    fn fold_document_prelude(&mut self, node: DocumentPrelude) -> DocumentPrelude {
        <V as Fold>::fold_document_prelude(&mut **self, node)
    }

    #[inline]
    fn fold_document_prelude_matching_function(
        &mut self,
        node: DocumentPreludeMatchingFunction,
    ) -> DocumentPreludeMatchingFunction {
        <V as Fold>::fold_document_prelude_matching_function(&mut **self, node)
    }

    #[inline]
    fn fold_document_prelude_matching_functions(
        &mut self,
        node: Vec<DocumentPreludeMatchingFunction>,
    ) -> Vec<DocumentPreludeMatchingFunction> {
        <V as Fold>::fold_document_prelude_matching_functions(&mut **self, node)
    }

    #[inline]
    fn fold_extension_name(&mut self, node: ExtensionName) -> ExtensionName {
        <V as Fold>::fold_extension_name(&mut **self, node)
    }

    #[inline]
    fn fold_family_name(&mut self, node: FamilyName) -> FamilyName {
        <V as Fold>::fold_family_name(&mut **self, node)
    }

    #[inline]
    fn fold_family_names(&mut self, node: Vec<FamilyName>) -> Vec<FamilyName> {
        <V as Fold>::fold_family_names(&mut **self, node)
    }

    #[inline]
    fn fold_flex(&mut self, node: Flex) -> Flex {
        <V as Fold>::fold_flex(&mut **self, node)
    }

    #[inline]
    fn fold_font_feature_values_prelude(
        &mut self,
        node: FontFeatureValuesPrelude,
    ) -> FontFeatureValuesPrelude {
        <V as Fold>::fold_font_feature_values_prelude(&mut **self, node)
    }

    #[inline]
    fn fold_forgiving_complex_selector(
        &mut self,
        node: ForgivingComplexSelector,
    ) -> ForgivingComplexSelector {
        <V as Fold>::fold_forgiving_complex_selector(&mut **self, node)
    }

    #[inline]
    fn fold_forgiving_complex_selectors(
        &mut self,
        node: Vec<ForgivingComplexSelector>,
    ) -> Vec<ForgivingComplexSelector> {
        <V as Fold>::fold_forgiving_complex_selectors(&mut **self, node)
    }

    #[inline]
    fn fold_forgiving_relative_selector(
        &mut self,
        node: ForgivingRelativeSelector,
    ) -> ForgivingRelativeSelector {
        <V as Fold>::fold_forgiving_relative_selector(&mut **self, node)
    }

    #[inline]
    fn fold_forgiving_relative_selector_list(
        &mut self,
        node: ForgivingRelativeSelectorList,
    ) -> ForgivingRelativeSelectorList {
        <V as Fold>::fold_forgiving_relative_selector_list(&mut **self, node)
    }

    #[inline]
    fn fold_forgiving_relative_selectors(
        &mut self,
        node: Vec<ForgivingRelativeSelector>,
    ) -> Vec<ForgivingRelativeSelector> {
        <V as Fold>::fold_forgiving_relative_selectors(&mut **self, node)
    }

    #[inline]
    fn fold_forgiving_selector_list(
        &mut self,
        node: ForgivingSelectorList,
    ) -> ForgivingSelectorList {
        <V as Fold>::fold_forgiving_selector_list(&mut **self, node)
    }

    #[inline]
    fn fold_frequency(&mut self, node: Frequency) -> Frequency {
        <V as Fold>::fold_frequency(&mut **self, node)
    }

    #[inline]
    fn fold_frequency_percentage(&mut self, node: FrequencyPercentage) -> FrequencyPercentage {
        <V as Fold>::fold_frequency_percentage(&mut **self, node)
    }

    #[inline]
    fn fold_function(&mut self, node: Function) -> Function {
        <V as Fold>::fold_function(&mut **self, node)
    }

    #[inline]
    fn fold_function_name(&mut self, node: FunctionName) -> FunctionName {
        <V as Fold>::fold_function_name(&mut **self, node)
    }

    #[inline]
    fn fold_general_enclosed(&mut self, node: GeneralEnclosed) -> GeneralEnclosed {
        <V as Fold>::fold_general_enclosed(&mut **self, node)
    }

    #[inline]
    fn fold_hex_color(&mut self, node: HexColor) -> HexColor {
        <V as Fold>::fold_hex_color(&mut **self, node)
    }

    #[inline]
    fn fold_hue(&mut self, node: Hue) -> Hue {
        <V as Fold>::fold_hue(&mut **self, node)
    }

    #[inline]
    fn fold_id_selector(&mut self, node: IdSelector) -> IdSelector {
        <V as Fold>::fold_id_selector(&mut **self, node)
    }

    #[inline]
    fn fold_ident(&mut self, node: Ident) -> Ident {
        <V as Fold>::fold_ident(&mut **self, node)
    }

    #[inline]
    fn fold_idents(&mut self, node: Vec<Ident>) -> Vec<Ident> {
        <V as Fold>::fold_idents(&mut **self, node)
    }

    #[inline]
    fn fold_import_conditions(&mut self, node: ImportConditions) -> ImportConditions {
        <V as Fold>::fold_import_conditions(&mut **self, node)
    }

    #[inline]
    fn fold_import_href(&mut self, node: ImportHref) -> ImportHref {
        <V as Fold>::fold_import_href(&mut **self, node)
    }

    #[inline]
    fn fold_import_layer_name(&mut self, node: ImportLayerName) -> ImportLayerName {
        <V as Fold>::fold_import_layer_name(&mut **self, node)
    }

    #[inline]
    fn fold_import_prelude(&mut self, node: ImportPrelude) -> ImportPrelude {
        <V as Fold>::fold_import_prelude(&mut **self, node)
    }

    #[inline]
    fn fold_important_flag(&mut self, node: ImportantFlag) -> ImportantFlag {
        <V as Fold>::fold_important_flag(&mut **self, node)
    }

    #[inline]
    fn fold_integer(&mut self, node: Integer) -> Integer {
        <V as Fold>::fold_integer(&mut **self, node)
    }

    #[inline]
    fn fold_keyframe_block(&mut self, node: KeyframeBlock) -> KeyframeBlock {
        <V as Fold>::fold_keyframe_block(&mut **self, node)
    }

    #[inline]
    fn fold_keyframe_selector(&mut self, node: KeyframeSelector) -> KeyframeSelector {
        <V as Fold>::fold_keyframe_selector(&mut **self, node)
    }

    #[inline]
    fn fold_keyframe_selectors(&mut self, node: Vec<KeyframeSelector>) -> Vec<KeyframeSelector> {
        <V as Fold>::fold_keyframe_selectors(&mut **self, node)
    }

    #[inline]
    fn fold_keyframes_name(&mut self, node: KeyframesName) -> KeyframesName {
        <V as Fold>::fold_keyframes_name(&mut **self, node)
    }

    #[inline]
    fn fold_keyframes_pseudo_function(
        &mut self,
        node: KeyframesPseudoFunction,
    ) -> KeyframesPseudoFunction {
        <V as Fold>::fold_keyframes_pseudo_function(&mut **self, node)
    }

    #[inline]
    fn fold_keyframes_pseudo_prefix(
        &mut self,
        node: KeyframesPseudoPrefix,
    ) -> KeyframesPseudoPrefix {
        <V as Fold>::fold_keyframes_pseudo_prefix(&mut **self, node)
    }

    #[inline]
    fn fold_layer_name(&mut self, node: LayerName) -> LayerName {
        <V as Fold>::fold_layer_name(&mut **self, node)
    }

    #[inline]
    fn fold_layer_name_list(&mut self, node: LayerNameList) -> LayerNameList {
        <V as Fold>::fold_layer_name_list(&mut **self, node)
    }

    #[inline]
    fn fold_layer_names(&mut self, node: Vec<LayerName>) -> Vec<LayerName> {
        <V as Fold>::fold_layer_names(&mut **self, node)
    }

    #[inline]
    fn fold_layer_prelude(&mut self, node: LayerPrelude) -> LayerPrelude {
        <V as Fold>::fold_layer_prelude(&mut **self, node)
    }

    #[inline]
    fn fold_length(&mut self, node: Length) -> Length {
        <V as Fold>::fold_length(&mut **self, node)
    }

    #[inline]
    fn fold_length_percentage(&mut self, node: LengthPercentage) -> LengthPercentage {
        <V as Fold>::fold_length_percentage(&mut **self, node)
    }

    #[inline]
    fn fold_list_of_component_values(
        &mut self,
        node: ListOfComponentValues,
    ) -> ListOfComponentValues {
        <V as Fold>::fold_list_of_component_values(&mut **self, node)
    }

    #[inline]
    fn fold_media_and(&mut self, node: MediaAnd) -> MediaAnd {
        <V as Fold>::fold_media_and(&mut **self, node)
    }

    #[inline]
    fn fold_media_condition(&mut self, node: MediaCondition) -> MediaCondition {
        <V as Fold>::fold_media_condition(&mut **self, node)
    }

    #[inline]
    fn fold_media_condition_all_type(
        &mut self,
        node: MediaConditionAllType,
    ) -> MediaConditionAllType {
        <V as Fold>::fold_media_condition_all_type(&mut **self, node)
    }

    #[inline]
    fn fold_media_condition_all_types(
        &mut self,
        node: Vec<MediaConditionAllType>,
    ) -> Vec<MediaConditionAllType> {
        <V as Fold>::fold_media_condition_all_types(&mut **self, node)
    }

    #[inline]
    fn fold_media_condition_type(&mut self, node: MediaConditionType) -> MediaConditionType {
        <V as Fold>::fold_media_condition_type(&mut **self, node)
    }

    #[inline]
    fn fold_media_condition_without_or(
        &mut self,
        node: MediaConditionWithoutOr,
    ) -> MediaConditionWithoutOr {
        <V as Fold>::fold_media_condition_without_or(&mut **self, node)
    }

    #[inline]
    fn fold_media_condition_without_or_type(
        &mut self,
        node: MediaConditionWithoutOrType,
    ) -> MediaConditionWithoutOrType {
        <V as Fold>::fold_media_condition_without_or_type(&mut **self, node)
    }

    #[inline]
    fn fold_media_condition_without_or_types(
        &mut self,
        node: Vec<MediaConditionWithoutOrType>,
    ) -> Vec<MediaConditionWithoutOrType> {
        <V as Fold>::fold_media_condition_without_or_types(&mut **self, node)
    }

    #[inline]
    fn fold_media_feature(&mut self, node: MediaFeature) -> MediaFeature {
        <V as Fold>::fold_media_feature(&mut **self, node)
    }

    #[inline]
    fn fold_media_feature_boolean(&mut self, node: MediaFeatureBoolean) -> MediaFeatureBoolean {
        <V as Fold>::fold_media_feature_boolean(&mut **self, node)
    }

    #[inline]
    fn fold_media_feature_name(&mut self, node: MediaFeatureName) -> MediaFeatureName {
        <V as Fold>::fold_media_feature_name(&mut **self, node)
    }

    #[inline]
    fn fold_media_feature_plain(&mut self, node: MediaFeaturePlain) -> MediaFeaturePlain {
        <V as Fold>::fold_media_feature_plain(&mut **self, node)
    }

    #[inline]
    fn fold_media_feature_range(&mut self, node: MediaFeatureRange) -> MediaFeatureRange {
        <V as Fold>::fold_media_feature_range(&mut **self, node)
    }

    #[inline]
    fn fold_media_feature_range_comparison(
        &mut self,
        node: MediaFeatureRangeComparison,
    ) -> MediaFeatureRangeComparison {
        <V as Fold>::fold_media_feature_range_comparison(&mut **self, node)
    }

    #[inline]
    fn fold_media_feature_range_interval(
        &mut self,
        node: MediaFeatureRangeInterval,
    ) -> MediaFeatureRangeInterval {
        <V as Fold>::fold_media_feature_range_interval(&mut **self, node)
    }

    #[inline]
    fn fold_media_feature_value(&mut self, node: MediaFeatureValue) -> MediaFeatureValue {
        <V as Fold>::fold_media_feature_value(&mut **self, node)
    }

    #[inline]
    fn fold_media_in_parens(&mut self, node: MediaInParens) -> MediaInParens {
        <V as Fold>::fold_media_in_parens(&mut **self, node)
    }

    #[inline]
    fn fold_media_not(&mut self, node: MediaNot) -> MediaNot {
        <V as Fold>::fold_media_not(&mut **self, node)
    }

    #[inline]
    fn fold_media_or(&mut self, node: MediaOr) -> MediaOr {
        <V as Fold>::fold_media_or(&mut **self, node)
    }

    #[inline]
    fn fold_media_query(&mut self, node: MediaQuery) -> MediaQuery {
        <V as Fold>::fold_media_query(&mut **self, node)
    }

    #[inline]
    fn fold_media_query_list(&mut self, node: MediaQueryList) -> MediaQueryList {
        <V as Fold>::fold_media_query_list(&mut **self, node)
    }

    #[inline]
    fn fold_media_querys(&mut self, node: Vec<MediaQuery>) -> Vec<MediaQuery> {
        <V as Fold>::fold_media_querys(&mut **self, node)
    }

    #[inline]
    fn fold_media_type(&mut self, node: MediaType) -> MediaType {
        <V as Fold>::fold_media_type(&mut **self, node)
    }

    #[inline]
    fn fold_named_namespace(&mut self, node: NamedNamespace) -> NamedNamespace {
        <V as Fold>::fold_named_namespace(&mut **self, node)
    }

    #[inline]
    fn fold_namespace(&mut self, node: Namespace) -> Namespace {
        <V as Fold>::fold_namespace(&mut **self, node)
    }

    #[inline]
    fn fold_namespace_prefix(&mut self, node: NamespacePrefix) -> NamespacePrefix {
        <V as Fold>::fold_namespace_prefix(&mut **self, node)
    }

    #[inline]
    fn fold_namespace_prelude(&mut self, node: NamespacePrelude) -> NamespacePrelude {
        <V as Fold>::fold_namespace_prelude(&mut **self, node)
    }

    #[inline]
    fn fold_namespace_prelude_uri(&mut self, node: NamespacePreludeUri) -> NamespacePreludeUri {
        <V as Fold>::fold_namespace_prelude_uri(&mut **self, node)
    }

    #[inline]
    fn fold_nesting_selector(&mut self, node: NestingSelector) -> NestingSelector {
        <V as Fold>::fold_nesting_selector(&mut **self, node)
    }

    #[inline]
    fn fold_number(&mut self, node: Number) -> Number {
        <V as Fold>::fold_number(&mut **self, node)
    }

    #[inline]
    fn fold_number_type(&mut self, node: NumberType) -> NumberType {
        <V as Fold>::fold_number_type(&mut **self, node)
    }

    #[inline]
    fn fold_opt_at_rule_prelude(
        &mut self,
        node: Option<Box<AtRulePrelude>>,
    ) -> Option<Box<AtRulePrelude>> {
        <V as Fold>::fold_opt_at_rule_prelude(&mut **self, node)
    }

    #[inline]
    fn fold_opt_atom(&mut self, node: Option<swc_atoms::Atom>) -> Option<swc_atoms::Atom> {
        <V as Fold>::fold_opt_atom(&mut **self, node)
    }

    #[inline]
    fn fold_opt_attribute_selector_matcher(
        &mut self,
        node: Option<AttributeSelectorMatcher>,
    ) -> Option<AttributeSelectorMatcher> {
        <V as Fold>::fold_opt_attribute_selector_matcher(&mut **self, node)
    }

    #[inline]
    fn fold_opt_attribute_selector_modifier(
        &mut self,
        node: Option<AttributeSelectorModifier>,
    ) -> Option<AttributeSelectorModifier> {
        <V as Fold>::fold_opt_attribute_selector_modifier(&mut **self, node)
    }

    #[inline]
    fn fold_opt_attribute_selector_value(
        &mut self,
        node: Option<AttributeSelectorValue>,
    ) -> Option<AttributeSelectorValue> {
        <V as Fold>::fold_opt_attribute_selector_value(&mut **self, node)
    }

    #[inline]
    fn fold_opt_combinator(&mut self, node: Option<Combinator>) -> Option<Combinator> {
        <V as Fold>::fold_opt_combinator(&mut **self, node)
    }

    #[inline]
    fn fold_opt_container_name(&mut self, node: Option<ContainerName>) -> Option<ContainerName> {
        <V as Fold>::fold_opt_container_name(&mut **self, node)
    }

    #[inline]
    fn fold_opt_forgiving_selector_list(
        &mut self,
        node: Option<ForgivingSelectorList>,
    ) -> Option<ForgivingSelectorList> {
        <V as Fold>::fold_opt_forgiving_selector_list(&mut **self, node)
    }

    #[inline]
    fn fold_opt_function(&mut self, node: Option<Box<Function>>) -> Option<Box<Function>> {
        <V as Fold>::fold_opt_function(&mut **self, node)
    }

    #[inline]
    fn fold_opt_ident(&mut self, node: Option<Ident>) -> Option<Ident> {
        <V as Fold>::fold_opt_ident(&mut **self, node)
    }

    #[inline]
    fn fold_opt_import_conditions(
        &mut self,
        node: Option<Box<ImportConditions>>,
    ) -> Option<Box<ImportConditions>> {
        <V as Fold>::fold_opt_import_conditions(&mut **self, node)
    }

    #[inline]
    fn fold_opt_import_layer_name(
        &mut self,
        node: Option<Box<ImportLayerName>>,
    ) -> Option<Box<ImportLayerName>> {
        <V as Fold>::fold_opt_import_layer_name(&mut **self, node)
    }

    #[inline]
    fn fold_opt_important_flag(&mut self, node: Option<ImportantFlag>) -> Option<ImportantFlag> {
        <V as Fold>::fold_opt_important_flag(&mut **self, node)
    }

    #[inline]
    fn fold_opt_media_condition_type(
        &mut self,
        node: Option<Box<MediaConditionType>>,
    ) -> Option<Box<MediaConditionType>> {
        <V as Fold>::fold_opt_media_condition_type(&mut **self, node)
    }

    #[inline]
    fn fold_opt_media_query_list(
        &mut self,
        node: Option<Box<MediaQueryList>>,
    ) -> Option<Box<MediaQueryList>> {
        <V as Fold>::fold_opt_media_query_list(&mut **self, node)
    }

    #[inline]
    fn fold_opt_media_type(&mut self, node: Option<MediaType>) -> Option<MediaType> {
        <V as Fold>::fold_opt_media_type(&mut **self, node)
    }

    #[inline]
    fn fold_opt_namespace(&mut self, node: Option<Namespace>) -> Option<Namespace> {
        <V as Fold>::fold_opt_namespace(&mut **self, node)
    }

    #[inline]
    fn fold_opt_namespace_prefix(
        &mut self,
        node: Option<NamespacePrefix>,
    ) -> Option<NamespacePrefix> {
        <V as Fold>::fold_opt_namespace_prefix(&mut **self, node)
    }

    #[inline]
    fn fold_opt_nesting_selector(
        &mut self,
        node: Option<NestingSelector>,
    ) -> Option<NestingSelector> {
        <V as Fold>::fold_opt_nesting_selector(&mut **self, node)
    }

    #[inline]
    fn fold_opt_number(&mut self, node: Option<Number>) -> Option<Number> {
        <V as Fold>::fold_opt_number(&mut **self, node)
    }

    #[inline]
    fn fold_opt_page_selector_pseudos(
        &mut self,
        node: Option<Vec<PageSelectorPseudo>>,
    ) -> Option<Vec<PageSelectorPseudo>> {
        <V as Fold>::fold_opt_page_selector_pseudos(&mut **self, node)
    }

    #[inline]
    fn fold_opt_page_selector_type(
        &mut self,
        node: Option<PageSelectorType>,
    ) -> Option<PageSelectorType> {
        <V as Fold>::fold_opt_page_selector_type(&mut **self, node)
    }

    #[inline]
    fn fold_opt_pseudo_class_selector_childrens(
        &mut self,
        node: Option<Vec<PseudoClassSelectorChildren>>,
    ) -> Option<Vec<PseudoClassSelectorChildren>> {
        <V as Fold>::fold_opt_pseudo_class_selector_childrens(&mut **self, node)
    }

    #[inline]
    fn fold_opt_pseudo_element_selector_childrens(
        &mut self,
        node: Option<Vec<PseudoElementSelectorChildren>>,
    ) -> Option<Vec<PseudoElementSelectorChildren>> {
        <V as Fold>::fold_opt_pseudo_element_selector_childrens(&mut **self, node)
    }

    #[inline]
    fn fold_opt_simple_block(&mut self, node: Option<SimpleBlock>) -> Option<SimpleBlock> {
        <V as Fold>::fold_opt_simple_block(&mut **self, node)
    }

    #[inline]
    fn fold_opt_type_selector(
        &mut self,
        node: Option<Box<TypeSelector>>,
    ) -> Option<Box<TypeSelector>> {
        <V as Fold>::fold_opt_type_selector(&mut **self, node)
    }

    #[inline]
    fn fold_opt_url_modifiers(
        &mut self,
        node: Option<Vec<UrlModifier>>,
    ) -> Option<Vec<UrlModifier>> {
        <V as Fold>::fold_opt_url_modifiers(&mut **self, node)
    }

    #[inline]
    fn fold_opt_url_value(&mut self, node: Option<Box<UrlValue>>) -> Option<Box<UrlValue>> {
        <V as Fold>::fold_opt_url_value(&mut **self, node)
    }

    #[inline]
    fn fold_page_selector(&mut self, node: PageSelector) -> PageSelector {
        <V as Fold>::fold_page_selector(&mut **self, node)
    }

    #[inline]
    fn fold_page_selector_list(&mut self, node: PageSelectorList) -> PageSelectorList {
        <V as Fold>::fold_page_selector_list(&mut **self, node)
    }

    #[inline]
    fn fold_page_selector_pseudo(&mut self, node: PageSelectorPseudo) -> PageSelectorPseudo {
        <V as Fold>::fold_page_selector_pseudo(&mut **self, node)
    }

    #[inline]
    fn fold_page_selector_pseudos(
        &mut self,
        node: Vec<PageSelectorPseudo>,
    ) -> Vec<PageSelectorPseudo> {
        <V as Fold>::fold_page_selector_pseudos(&mut **self, node)
    }

    #[inline]
    fn fold_page_selector_type(&mut self, node: PageSelectorType) -> PageSelectorType {
        <V as Fold>::fold_page_selector_type(&mut **self, node)
    }

    #[inline]
    fn fold_page_selectors(&mut self, node: Vec<PageSelector>) -> Vec<PageSelector> {
        <V as Fold>::fold_page_selectors(&mut **self, node)
    }

    #[inline]
    fn fold_percentage(&mut self, node: Percentage) -> Percentage {
        <V as Fold>::fold_percentage(&mut **self, node)
    }

    #[inline]
    fn fold_pseudo_class_selector(&mut self, node: PseudoClassSelector) -> PseudoClassSelector {
        <V as Fold>::fold_pseudo_class_selector(&mut **self, node)
    }

    #[inline]
    fn fold_pseudo_class_selector_children(
        &mut self,
        node: PseudoClassSelectorChildren,
    ) -> PseudoClassSelectorChildren {
        <V as Fold>::fold_pseudo_class_selector_children(&mut **self, node)
    }

    #[inline]
    fn fold_pseudo_class_selector_childrens(
        &mut self,
        node: Vec<PseudoClassSelectorChildren>,
    ) -> Vec<PseudoClassSelectorChildren> {
        <V as Fold>::fold_pseudo_class_selector_childrens(&mut **self, node)
    }

    #[inline]
    fn fold_pseudo_element_selector(
        &mut self,
        node: PseudoElementSelector,
    ) -> PseudoElementSelector {
        <V as Fold>::fold_pseudo_element_selector(&mut **self, node)
    }

    #[inline]
    fn fold_pseudo_element_selector_children(
        &mut self,
        node: PseudoElementSelectorChildren,
    ) -> PseudoElementSelectorChildren {
        <V as Fold>::fold_pseudo_element_selector_children(&mut **self, node)
    }

    #[inline]
    fn fold_pseudo_element_selector_childrens(
        &mut self,
        node: Vec<PseudoElementSelectorChildren>,
    ) -> Vec<PseudoElementSelectorChildren> {
        <V as Fold>::fold_pseudo_element_selector_childrens(&mut **self, node)
    }

    #[inline]
    fn fold_qualified_rule(&mut self, node: QualifiedRule) -> QualifiedRule {
        <V as Fold>::fold_qualified_rule(&mut **self, node)
    }

    #[inline]
    fn fold_qualified_rule_prelude(&mut self, node: QualifiedRulePrelude) -> QualifiedRulePrelude {
        <V as Fold>::fold_qualified_rule_prelude(&mut **self, node)
    }

    #[inline]
    fn fold_query_in_parens(&mut self, node: QueryInParens) -> QueryInParens {
        <V as Fold>::fold_query_in_parens(&mut **self, node)
    }

    #[inline]
    fn fold_ratio(&mut self, node: Ratio) -> Ratio {
        <V as Fold>::fold_ratio(&mut **self, node)
    }

    #[inline]
    fn fold_relative_selector(&mut self, node: RelativeSelector) -> RelativeSelector {
        <V as Fold>::fold_relative_selector(&mut **self, node)
    }

    #[inline]
    fn fold_relative_selector_list(&mut self, node: RelativeSelectorList) -> RelativeSelectorList {
        <V as Fold>::fold_relative_selector_list(&mut **self, node)
    }

    #[inline]
    fn fold_relative_selectors(&mut self, node: Vec<RelativeSelector>) -> Vec<RelativeSelector> {
        <V as Fold>::fold_relative_selectors(&mut **self, node)
    }

    #[inline]
    fn fold_resolution(&mut self, node: Resolution) -> Resolution {
        <V as Fold>::fold_resolution(&mut **self, node)
    }

    #[inline]
    fn fold_rule(&mut self, node: Rule) -> Rule {
        <V as Fold>::fold_rule(&mut **self, node)
    }

    #[inline]
    fn fold_rules(&mut self, node: Vec<Rule>) -> Vec<Rule> {
        <V as Fold>::fold_rules(&mut **self, node)
    }

    #[inline]
    fn fold_scope_range(&mut self, node: ScopeRange) -> ScopeRange {
        <V as Fold>::fold_scope_range(&mut **self, node)
    }

    #[inline]
    fn fold_selector_list(&mut self, node: SelectorList) -> SelectorList {
        <V as Fold>::fold_selector_list(&mut **self, node)
    }

    #[inline]
    fn fold_sequence_of_custom_idents(
        &mut self,
        node: SequenceOfCustomIdents,
    ) -> SequenceOfCustomIdents {
        <V as Fold>::fold_sequence_of_custom_idents(&mut **self, node)
    }

    #[inline]
    fn fold_simple_block(&mut self, node: SimpleBlock) -> SimpleBlock {
        <V as Fold>::fold_simple_block(&mut **self, node)
    }

    #[inline]
    fn fold_size_feature(&mut self, node: SizeFeature) -> SizeFeature {
        <V as Fold>::fold_size_feature(&mut **self, node)
    }

    #[inline]
    fn fold_size_feature_boolean(&mut self, node: SizeFeatureBoolean) -> SizeFeatureBoolean {
        <V as Fold>::fold_size_feature_boolean(&mut **self, node)
    }

    #[inline]
    fn fold_size_feature_name(&mut self, node: SizeFeatureName) -> SizeFeatureName {
        <V as Fold>::fold_size_feature_name(&mut **self, node)
    }

    #[inline]
    fn fold_size_feature_plain(&mut self, node: SizeFeaturePlain) -> SizeFeaturePlain {
        <V as Fold>::fold_size_feature_plain(&mut **self, node)
    }

    #[inline]
    fn fold_size_feature_range(&mut self, node: SizeFeatureRange) -> SizeFeatureRange {
        <V as Fold>::fold_size_feature_range(&mut **self, node)
    }

    #[inline]
    fn fold_size_feature_range_comparison(
        &mut self,
        node: SizeFeatureRangeComparison,
    ) -> SizeFeatureRangeComparison {
        <V as Fold>::fold_size_feature_range_comparison(&mut **self, node)
    }

    #[inline]
    fn fold_size_feature_range_interval(
        &mut self,
        node: SizeFeatureRangeInterval,
    ) -> SizeFeatureRangeInterval {
        <V as Fold>::fold_size_feature_range_interval(&mut **self, node)
    }

    #[inline]
    fn fold_size_feature_value(&mut self, node: SizeFeatureValue) -> SizeFeatureValue {
        <V as Fold>::fold_size_feature_value(&mut **self, node)
    }

    #[inline]
    fn fold_span(&mut self, node: swc_common::Span) -> swc_common::Span {
        <V as Fold>::fold_span(&mut **self, node)
    }

    #[inline]
    fn fold_str(&mut self, node: Str) -> Str {
        <V as Fold>::fold_str(&mut **self, node)
    }

    #[inline]
    fn fold_style_block(&mut self, node: StyleBlock) -> StyleBlock {
        <V as Fold>::fold_style_block(&mut **self, node)
    }

    #[inline]
    fn fold_stylesheet(&mut self, node: Stylesheet) -> Stylesheet {
        <V as Fold>::fold_stylesheet(&mut **self, node)
    }

    #[inline]
    fn fold_subclass_selector(&mut self, node: SubclassSelector) -> SubclassSelector {
        <V as Fold>::fold_subclass_selector(&mut **self, node)
    }

    #[inline]
    fn fold_subclass_selectors(&mut self, node: Vec<SubclassSelector>) -> Vec<SubclassSelector> {
        <V as Fold>::fold_subclass_selectors(&mut **self, node)
    }

    #[inline]
    fn fold_supports_and(&mut self, node: SupportsAnd) -> SupportsAnd {
        <V as Fold>::fold_supports_and(&mut **self, node)
    }

    #[inline]
    fn fold_supports_condition(&mut self, node: SupportsCondition) -> SupportsCondition {
        <V as Fold>::fold_supports_condition(&mut **self, node)
    }

    #[inline]
    fn fold_supports_condition_type(
        &mut self,
        node: SupportsConditionType,
    ) -> SupportsConditionType {
        <V as Fold>::fold_supports_condition_type(&mut **self, node)
    }

    #[inline]
    fn fold_supports_condition_types(
        &mut self,
        node: Vec<SupportsConditionType>,
    ) -> Vec<SupportsConditionType> {
        <V as Fold>::fold_supports_condition_types(&mut **self, node)
    }

    #[inline]
    fn fold_supports_feature(&mut self, node: SupportsFeature) -> SupportsFeature {
        <V as Fold>::fold_supports_feature(&mut **self, node)
    }

    #[inline]
    fn fold_supports_in_parens(&mut self, node: SupportsInParens) -> SupportsInParens {
        <V as Fold>::fold_supports_in_parens(&mut **self, node)
    }

    #[inline]
    fn fold_supports_not(&mut self, node: SupportsNot) -> SupportsNot {
        <V as Fold>::fold_supports_not(&mut **self, node)
    }

    #[inline]
    fn fold_supports_or(&mut self, node: SupportsOr) -> SupportsOr {
        <V as Fold>::fold_supports_or(&mut **self, node)
    }

    #[inline]
    fn fold_tag_name_selector(&mut self, node: TagNameSelector) -> TagNameSelector {
        <V as Fold>::fold_tag_name_selector(&mut **self, node)
    }

    #[inline]
    fn fold_time(&mut self, node: Time) -> Time {
        <V as Fold>::fold_time(&mut **self, node)
    }

    #[inline]
    fn fold_time_percentage(&mut self, node: TimePercentage) -> TimePercentage {
        <V as Fold>::fold_time_percentage(&mut **self, node)
    }

    #[inline]
    fn fold_token(&mut self, node: Token) -> Token {
        <V as Fold>::fold_token(&mut **self, node)
    }

    #[inline]
    fn fold_token_and_span(&mut self, node: TokenAndSpan) -> TokenAndSpan {
        <V as Fold>::fold_token_and_span(&mut **self, node)
    }

    #[inline]
    fn fold_type_selector(&mut self, node: TypeSelector) -> TypeSelector {
        <V as Fold>::fold_type_selector(&mut **self, node)
    }

    #[inline]
    fn fold_unicode_range(&mut self, node: UnicodeRange) -> UnicodeRange {
        <V as Fold>::fold_unicode_range(&mut **self, node)
    }

    #[inline]
    fn fold_universal_selector(&mut self, node: UniversalSelector) -> UniversalSelector {
        <V as Fold>::fold_universal_selector(&mut **self, node)
    }

    #[inline]
    fn fold_unknown_dimension(&mut self, node: UnknownDimension) -> UnknownDimension {
        <V as Fold>::fold_unknown_dimension(&mut **self, node)
    }

    #[inline]
    fn fold_url(&mut self, node: Url) -> Url {
        <V as Fold>::fold_url(&mut **self, node)
    }

    #[inline]
    fn fold_url_key_value(&mut self, node: UrlKeyValue) -> UrlKeyValue {
        <V as Fold>::fold_url_key_value(&mut **self, node)
    }

    #[inline]
    fn fold_url_modifier(&mut self, node: UrlModifier) -> UrlModifier {
        <V as Fold>::fold_url_modifier(&mut **self, node)
    }

    #[inline]
    fn fold_url_modifiers(&mut self, node: Vec<UrlModifier>) -> Vec<UrlModifier> {
        <V as Fold>::fold_url_modifiers(&mut **self, node)
    }

    #[inline]
    fn fold_url_value(&mut self, node: UrlValue) -> UrlValue {
        <V as Fold>::fold_url_value(&mut **self, node)
    }

    #[inline]
    fn fold_url_value_raw(&mut self, node: UrlValueRaw) -> UrlValueRaw {
        <V as Fold>::fold_url_value_raw(&mut **self, node)
    }

    #[inline]
    fn fold_wq_name(&mut self, node: WqName) -> WqName {
        <V as Fold>::fold_wq_name(&mut **self, node)
    }
}
impl<V> Fold for Box<V>
where
    V: ?Sized + Fold,
{
    #[inline]
    fn fold_absolute_color_base(&mut self, node: AbsoluteColorBase) -> AbsoluteColorBase {
        <V as Fold>::fold_absolute_color_base(&mut **self, node)
    }

    #[inline]
    fn fold_alpha_value(&mut self, node: AlphaValue) -> AlphaValue {
        <V as Fold>::fold_alpha_value(&mut **self, node)
    }

    #[inline]
    fn fold_an_plus_b(&mut self, node: AnPlusB) -> AnPlusB {
        <V as Fold>::fold_an_plus_b(&mut **self, node)
    }

    #[inline]
    fn fold_an_plus_b_notation(&mut self, node: AnPlusBNotation) -> AnPlusBNotation {
        <V as Fold>::fold_an_plus_b_notation(&mut **self, node)
    }

    #[inline]
    fn fold_angle(&mut self, node: Angle) -> Angle {
        <V as Fold>::fold_angle(&mut **self, node)
    }

    #[inline]
    fn fold_angle_percentage(&mut self, node: AnglePercentage) -> AnglePercentage {
        <V as Fold>::fold_angle_percentage(&mut **self, node)
    }

    #[inline]
    fn fold_any_namespace(&mut self, node: AnyNamespace) -> AnyNamespace {
        <V as Fold>::fold_any_namespace(&mut **self, node)
    }

    #[inline]
    fn fold_at_rule(&mut self, node: AtRule) -> AtRule {
        <V as Fold>::fold_at_rule(&mut **self, node)
    }

    #[inline]
    fn fold_at_rule_name(&mut self, node: AtRuleName) -> AtRuleName {
        <V as Fold>::fold_at_rule_name(&mut **self, node)
    }

    #[inline]
    fn fold_at_rule_prelude(&mut self, node: AtRulePrelude) -> AtRulePrelude {
        <V as Fold>::fold_at_rule_prelude(&mut **self, node)
    }

    #[inline]
    fn fold_atom(&mut self, node: swc_atoms::Atom) -> swc_atoms::Atom {
        <V as Fold>::fold_atom(&mut **self, node)
    }

    #[inline]
    fn fold_attribute_selector(&mut self, node: AttributeSelector) -> AttributeSelector {
        <V as Fold>::fold_attribute_selector(&mut **self, node)
    }

    #[inline]
    fn fold_attribute_selector_matcher(
        &mut self,
        node: AttributeSelectorMatcher,
    ) -> AttributeSelectorMatcher {
        <V as Fold>::fold_attribute_selector_matcher(&mut **self, node)
    }

    #[inline]
    fn fold_attribute_selector_matcher_value(
        &mut self,
        node: AttributeSelectorMatcherValue,
    ) -> AttributeSelectorMatcherValue {
        <V as Fold>::fold_attribute_selector_matcher_value(&mut **self, node)
    }

    #[inline]
    fn fold_attribute_selector_modifier(
        &mut self,
        node: AttributeSelectorModifier,
    ) -> AttributeSelectorModifier {
        <V as Fold>::fold_attribute_selector_modifier(&mut **self, node)
    }

    #[inline]
    fn fold_attribute_selector_value(
        &mut self,
        node: AttributeSelectorValue,
    ) -> AttributeSelectorValue {
        <V as Fold>::fold_attribute_selector_value(&mut **self, node)
    }

    #[inline]
    fn fold_bin_op(&mut self, node: BinOp) -> BinOp {
        <V as Fold>::fold_bin_op(&mut **self, node)
    }

    #[inline]
    fn fold_calc_operator(&mut self, node: CalcOperator) -> CalcOperator {
        <V as Fold>::fold_calc_operator(&mut **self, node)
    }

    #[inline]
    fn fold_calc_operator_type(&mut self, node: CalcOperatorType) -> CalcOperatorType {
        <V as Fold>::fold_calc_operator_type(&mut **self, node)
    }

    #[inline]
    fn fold_calc_product(&mut self, node: CalcProduct) -> CalcProduct {
        <V as Fold>::fold_calc_product(&mut **self, node)
    }

    #[inline]
    fn fold_calc_product_or_operator(
        &mut self,
        node: CalcProductOrOperator,
    ) -> CalcProductOrOperator {
        <V as Fold>::fold_calc_product_or_operator(&mut **self, node)
    }

    #[inline]
    fn fold_calc_product_or_operators(
        &mut self,
        node: Vec<CalcProductOrOperator>,
    ) -> Vec<CalcProductOrOperator> {
        <V as Fold>::fold_calc_product_or_operators(&mut **self, node)
    }

    #[inline]
    fn fold_calc_sum(&mut self, node: CalcSum) -> CalcSum {
        <V as Fold>::fold_calc_sum(&mut **self, node)
    }

    #[inline]
    fn fold_calc_value(&mut self, node: CalcValue) -> CalcValue {
        <V as Fold>::fold_calc_value(&mut **self, node)
    }

    #[inline]
    fn fold_calc_value_or_operator(&mut self, node: CalcValueOrOperator) -> CalcValueOrOperator {
        <V as Fold>::fold_calc_value_or_operator(&mut **self, node)
    }

    #[inline]
    fn fold_calc_value_or_operators(
        &mut self,
        node: Vec<CalcValueOrOperator>,
    ) -> Vec<CalcValueOrOperator> {
        <V as Fold>::fold_calc_value_or_operators(&mut **self, node)
    }

    #[inline]
    fn fold_class_selector(&mut self, node: ClassSelector) -> ClassSelector {
        <V as Fold>::fold_class_selector(&mut **self, node)
    }

    #[inline]
    fn fold_cmyk_component(&mut self, node: CmykComponent) -> CmykComponent {
        <V as Fold>::fold_cmyk_component(&mut **self, node)
    }

    #[inline]
    fn fold_color(&mut self, node: Color) -> Color {
        <V as Fold>::fold_color(&mut **self, node)
    }

    #[inline]
    fn fold_color_profile_name(&mut self, node: ColorProfileName) -> ColorProfileName {
        <V as Fold>::fold_color_profile_name(&mut **self, node)
    }

    #[inline]
    fn fold_combinator(&mut self, node: Combinator) -> Combinator {
        <V as Fold>::fold_combinator(&mut **self, node)
    }

    #[inline]
    fn fold_combinator_value(&mut self, node: CombinatorValue) -> CombinatorValue {
        <V as Fold>::fold_combinator_value(&mut **self, node)
    }

    #[inline]
    fn fold_complex_selector(&mut self, node: ComplexSelector) -> ComplexSelector {
        <V as Fold>::fold_complex_selector(&mut **self, node)
    }

    #[inline]
    fn fold_complex_selector_children(
        &mut self,
        node: ComplexSelectorChildren,
    ) -> ComplexSelectorChildren {
        <V as Fold>::fold_complex_selector_children(&mut **self, node)
    }

    #[inline]
    fn fold_complex_selector_childrens(
        &mut self,
        node: Vec<ComplexSelectorChildren>,
    ) -> Vec<ComplexSelectorChildren> {
        <V as Fold>::fold_complex_selector_childrens(&mut **self, node)
    }

    #[inline]
    fn fold_complex_selectors(&mut self, node: Vec<ComplexSelector>) -> Vec<ComplexSelector> {
        <V as Fold>::fold_complex_selectors(&mut **self, node)
    }

    #[inline]
    fn fold_component_value(&mut self, node: ComponentValue) -> ComponentValue {
        <V as Fold>::fold_component_value(&mut **self, node)
    }

    #[inline]
    fn fold_component_values(&mut self, node: Vec<ComponentValue>) -> Vec<ComponentValue> {
        <V as Fold>::fold_component_values(&mut **self, node)
    }

    #[inline]
    fn fold_compound_selector(&mut self, node: CompoundSelector) -> CompoundSelector {
        <V as Fold>::fold_compound_selector(&mut **self, node)
    }

    #[inline]
    fn fold_compound_selector_list(&mut self, node: CompoundSelectorList) -> CompoundSelectorList {
        <V as Fold>::fold_compound_selector_list(&mut **self, node)
    }

    #[inline]
    fn fold_compound_selectors(&mut self, node: Vec<CompoundSelector>) -> Vec<CompoundSelector> {
        <V as Fold>::fold_compound_selectors(&mut **self, node)
    }

    #[inline]
    fn fold_container_condition(&mut self, node: ContainerCondition) -> ContainerCondition {
        <V as Fold>::fold_container_condition(&mut **self, node)
    }

    #[inline]
    fn fold_container_name(&mut self, node: ContainerName) -> ContainerName {
        <V as Fold>::fold_container_name(&mut **self, node)
    }

    #[inline]
    fn fold_container_query(&mut self, node: ContainerQuery) -> ContainerQuery {
        <V as Fold>::fold_container_query(&mut **self, node)
    }

    #[inline]
    fn fold_container_query_and(&mut self, node: ContainerQueryAnd) -> ContainerQueryAnd {
        <V as Fold>::fold_container_query_and(&mut **self, node)
    }

    #[inline]
    fn fold_container_query_not(&mut self, node: ContainerQueryNot) -> ContainerQueryNot {
        <V as Fold>::fold_container_query_not(&mut **self, node)
    }

    #[inline]
    fn fold_container_query_or(&mut self, node: ContainerQueryOr) -> ContainerQueryOr {
        <V as Fold>::fold_container_query_or(&mut **self, node)
    }

    #[inline]
    fn fold_container_query_type(&mut self, node: ContainerQueryType) -> ContainerQueryType {
        <V as Fold>::fold_container_query_type(&mut **self, node)
    }

    #[inline]
    fn fold_container_query_types(
        &mut self,
        node: Vec<ContainerQueryType>,
    ) -> Vec<ContainerQueryType> {
        <V as Fold>::fold_container_query_types(&mut **self, node)
    }

    #[inline]
    fn fold_custom_highlight_name(&mut self, node: CustomHighlightName) -> CustomHighlightName {
        <V as Fold>::fold_custom_highlight_name(&mut **self, node)
    }

    #[inline]
    fn fold_custom_ident(&mut self, node: CustomIdent) -> CustomIdent {
        <V as Fold>::fold_custom_ident(&mut **self, node)
    }

    #[inline]
    fn fold_custom_idents(&mut self, node: Vec<CustomIdent>) -> Vec<CustomIdent> {
        <V as Fold>::fold_custom_idents(&mut **self, node)
    }

    #[inline]
    fn fold_custom_media_query(&mut self, node: CustomMediaQuery) -> CustomMediaQuery {
        <V as Fold>::fold_custom_media_query(&mut **self, node)
    }

    #[inline]
    fn fold_custom_media_query_media_type(
        &mut self,
        node: CustomMediaQueryMediaType,
    ) -> CustomMediaQueryMediaType {
        <V as Fold>::fold_custom_media_query_media_type(&mut **self, node)
    }

    #[inline]
    fn fold_custom_property_name(&mut self, node: CustomPropertyName) -> CustomPropertyName {
        <V as Fold>::fold_custom_property_name(&mut **self, node)
    }

    #[inline]
    fn fold_dashed_ident(&mut self, node: DashedIdent) -> DashedIdent {
        <V as Fold>::fold_dashed_ident(&mut **self, node)
    }

    #[inline]
    fn fold_declaration(&mut self, node: Declaration) -> Declaration {
        <V as Fold>::fold_declaration(&mut **self, node)
    }

    #[inline]
    fn fold_declaration_name(&mut self, node: DeclarationName) -> DeclarationName {
        <V as Fold>::fold_declaration_name(&mut **self, node)
    }

    #[inline]
    fn fold_declaration_or_at_rule(&mut self, node: DeclarationOrAtRule) -> DeclarationOrAtRule {
        <V as Fold>::fold_declaration_or_at_rule(&mut **self, node)
    }

    #[inline]
    fn fold_delimiter(&mut self, node: Delimiter) -> Delimiter {
        <V as Fold>::fold_delimiter(&mut **self, node)
    }

    #[inline]
    fn fold_delimiter_value(&mut self, node: DelimiterValue) -> DelimiterValue {
        <V as Fold>::fold_delimiter_value(&mut **self, node)
    }

    #[inline]
    fn fold_dimension(&mut self, node: Dimension) -> Dimension {
        <V as Fold>::fold_dimension(&mut **self, node)
    }

    #[inline]
    fn fold_dimension_token(&mut self, node: DimensionToken) -> DimensionToken {
        <V as Fold>::fold_dimension_token(&mut **self, node)
    }

    #[inline]
    fn fold_document_prelude(&mut self, node: DocumentPrelude) -> DocumentPrelude {
        <V as Fold>::fold_document_prelude(&mut **self, node)
    }

    #[inline]
    fn fold_document_prelude_matching_function(
        &mut self,
        node: DocumentPreludeMatchingFunction,
    ) -> DocumentPreludeMatchingFunction {
        <V as Fold>::fold_document_prelude_matching_function(&mut **self, node)
    }

    #[inline]
    fn fold_document_prelude_matching_functions(
        &mut self,
        node: Vec<DocumentPreludeMatchingFunction>,
    ) -> Vec<DocumentPreludeMatchingFunction> {
        <V as Fold>::fold_document_prelude_matching_functions(&mut **self, node)
    }

    #[inline]
    fn fold_extension_name(&mut self, node: ExtensionName) -> ExtensionName {
        <V as Fold>::fold_extension_name(&mut **self, node)
    }

    #[inline]
    fn fold_family_name(&mut self, node: FamilyName) -> FamilyName {
        <V as Fold>::fold_family_name(&mut **self, node)
    }

    #[inline]
    fn fold_family_names(&mut self, node: Vec<FamilyName>) -> Vec<FamilyName> {
        <V as Fold>::fold_family_names(&mut **self, node)
    }

    #[inline]
    fn fold_flex(&mut self, node: Flex) -> Flex {
        <V as Fold>::fold_flex(&mut **self, node)
    }

    #[inline]
    fn fold_font_feature_values_prelude(
        &mut self,
        node: FontFeatureValuesPrelude,
    ) -> FontFeatureValuesPrelude {
        <V as Fold>::fold_font_feature_values_prelude(&mut **self, node)
    }

    #[inline]
    fn fold_forgiving_complex_selector(
        &mut self,
        node: ForgivingComplexSelector,
    ) -> ForgivingComplexSelector {
        <V as Fold>::fold_forgiving_complex_selector(&mut **self, node)
    }

    #[inline]
    fn fold_forgiving_complex_selectors(
        &mut self,
        node: Vec<ForgivingComplexSelector>,
    ) -> Vec<ForgivingComplexSelector> {
        <V as Fold>::fold_forgiving_complex_selectors(&mut **self, node)
    }

    #[inline]
    fn fold_forgiving_relative_selector(
        &mut self,
        node: ForgivingRelativeSelector,
    ) -> ForgivingRelativeSelector {
        <V as Fold>::fold_forgiving_relative_selector(&mut **self, node)
    }

    #[inline]
    fn fold_forgiving_relative_selector_list(
        &mut self,
        node: ForgivingRelativeSelectorList,
    ) -> ForgivingRelativeSelectorList {
        <V as Fold>::fold_forgiving_relative_selector_list(&mut **self, node)
    }

    #[inline]
    fn fold_forgiving_relative_selectors(
        &mut self,
        node: Vec<ForgivingRelativeSelector>,
    ) -> Vec<ForgivingRelativeSelector> {
        <V as Fold>::fold_forgiving_relative_selectors(&mut **self, node)
    }

    #[inline]
    fn fold_forgiving_selector_list(
        &mut self,
        node: ForgivingSelectorList,
    ) -> ForgivingSelectorList {
        <V as Fold>::fold_forgiving_selector_list(&mut **self, node)
    }

    #[inline]
    fn fold_frequency(&mut self, node: Frequency) -> Frequency {
        <V as Fold>::fold_frequency(&mut **self, node)
    }

    #[inline]
    fn fold_frequency_percentage(&mut self, node: FrequencyPercentage) -> FrequencyPercentage {
        <V as Fold>::fold_frequency_percentage(&mut **self, node)
    }

    #[inline]
    fn fold_function(&mut self, node: Function) -> Function {
        <V as Fold>::fold_function(&mut **self, node)
    }

    #[inline]
    fn fold_function_name(&mut self, node: FunctionName) -> FunctionName {
        <V as Fold>::fold_function_name(&mut **self, node)
    }

    #[inline]
    fn fold_general_enclosed(&mut self, node: GeneralEnclosed) -> GeneralEnclosed {
        <V as Fold>::fold_general_enclosed(&mut **self, node)
    }

    #[inline]
    fn fold_hex_color(&mut self, node: HexColor) -> HexColor {
        <V as Fold>::fold_hex_color(&mut **self, node)
    }

    #[inline]
    fn fold_hue(&mut self, node: Hue) -> Hue {
        <V as Fold>::fold_hue(&mut **self, node)
    }

    #[inline]
    fn fold_id_selector(&mut self, node: IdSelector) -> IdSelector {
        <V as Fold>::fold_id_selector(&mut **self, node)
    }

    #[inline]
    fn fold_ident(&mut self, node: Ident) -> Ident {
        <V as Fold>::fold_ident(&mut **self, node)
    }

    #[inline]
    fn fold_idents(&mut self, node: Vec<Ident>) -> Vec<Ident> {
        <V as Fold>::fold_idents(&mut **self, node)
    }

    #[inline]
    fn fold_import_conditions(&mut self, node: ImportConditions) -> ImportConditions {
        <V as Fold>::fold_import_conditions(&mut **self, node)
    }

    #[inline]
    fn fold_import_href(&mut self, node: ImportHref) -> ImportHref {
        <V as Fold>::fold_import_href(&mut **self, node)
    }

    #[inline]
    fn fold_import_layer_name(&mut self, node: ImportLayerName) -> ImportLayerName {
        <V as Fold>::fold_import_layer_name(&mut **self, node)
    }

    #[inline]
    fn fold_import_prelude(&mut self, node: ImportPrelude) -> ImportPrelude {
        <V as Fold>::fold_import_prelude(&mut **self, node)
    }

    #[inline]
    fn fold_important_flag(&mut self, node: ImportantFlag) -> ImportantFlag {
        <V as Fold>::fold_important_flag(&mut **self, node)
    }

    #[inline]
    fn fold_integer(&mut self, node: Integer) -> Integer {
        <V as Fold>::fold_integer(&mut **self, node)
    }

    #[inline]
    fn fold_keyframe_block(&mut self, node: KeyframeBlock) -> KeyframeBlock {
        <V as Fold>::fold_keyframe_block(&mut **self, node)
    }

    #[inline]
    fn fold_keyframe_selector(&mut self, node: KeyframeSelector) -> KeyframeSelector {
        <V as Fold>::fold_keyframe_selector(&mut **self, node)
    }

    #[inline]
    fn fold_keyframe_selectors(&mut self, node: Vec<KeyframeSelector>) -> Vec<KeyframeSelector> {
        <V as Fold>::fold_keyframe_selectors(&mut **self, node)
    }

    #[inline]
    fn fold_keyframes_name(&mut self, node: KeyframesName) -> KeyframesName {
        <V as Fold>::fold_keyframes_name(&mut **self, node)
    }

    #[inline]
    fn fold_keyframes_pseudo_function(
        &mut self,
        node: KeyframesPseudoFunction,
    ) -> KeyframesPseudoFunction {
        <V as Fold>::fold_keyframes_pseudo_function(&mut **self, node)
    }

    #[inline]
    fn fold_keyframes_pseudo_prefix(
        &mut self,
        node: KeyframesPseudoPrefix,
    ) -> KeyframesPseudoPrefix {
        <V as Fold>::fold_keyframes_pseudo_prefix(&mut **self, node)
    }

    #[inline]
    fn fold_layer_name(&mut self, node: LayerName) -> LayerName {
        <V as Fold>::fold_layer_name(&mut **self, node)
    }

    #[inline]
    fn fold_layer_name_list(&mut self, node: LayerNameList) -> LayerNameList {
        <V as Fold>::fold_layer_name_list(&mut **self, node)
    }

    #[inline]
    fn fold_layer_names(&mut self, node: Vec<LayerName>) -> Vec<LayerName> {
        <V as Fold>::fold_layer_names(&mut **self, node)
    }

    #[inline]
    fn fold_layer_prelude(&mut self, node: LayerPrelude) -> LayerPrelude {
        <V as Fold>::fold_layer_prelude(&mut **self, node)
    }

    #[inline]
    fn fold_length(&mut self, node: Length) -> Length {
        <V as Fold>::fold_length(&mut **self, node)
    }

    #[inline]
    fn fold_length_percentage(&mut self, node: LengthPercentage) -> LengthPercentage {
        <V as Fold>::fold_length_percentage(&mut **self, node)
    }

    #[inline]
    fn fold_list_of_component_values(
        &mut self,
        node: ListOfComponentValues,
    ) -> ListOfComponentValues {
        <V as Fold>::fold_list_of_component_values(&mut **self, node)
    }

    #[inline]
    fn fold_media_and(&mut self, node: MediaAnd) -> MediaAnd {
        <V as Fold>::fold_media_and(&mut **self, node)
    }

    #[inline]
    fn fold_media_condition(&mut self, node: MediaCondition) -> MediaCondition {
        <V as Fold>::fold_media_condition(&mut **self, node)
    }

    #[inline]
    fn fold_media_condition_all_type(
        &mut self,
        node: MediaConditionAllType,
    ) -> MediaConditionAllType {
        <V as Fold>::fold_media_condition_all_type(&mut **self, node)
    }

    #[inline]
    fn fold_media_condition_all_types(
        &mut self,
        node: Vec<MediaConditionAllType>,
    ) -> Vec<MediaConditionAllType> {
        <V as Fold>::fold_media_condition_all_types(&mut **self, node)
    }

    #[inline]
    fn fold_media_condition_type(&mut self, node: MediaConditionType) -> MediaConditionType {
        <V as Fold>::fold_media_condition_type(&mut **self, node)
    }

    #[inline]
    fn fold_media_condition_without_or(
        &mut self,
        node: MediaConditionWithoutOr,
    ) -> MediaConditionWithoutOr {
        <V as Fold>::fold_media_condition_without_or(&mut **self, node)
    }

    #[inline]
    fn fold_media_condition_without_or_type(
        &mut self,
        node: MediaConditionWithoutOrType,
    ) -> MediaConditionWithoutOrType {
        <V as Fold>::fold_media_condition_without_or_type(&mut **self, node)
    }

    #[inline]
    fn fold_media_condition_without_or_types(
        &mut self,
        node: Vec<MediaConditionWithoutOrType>,
    ) -> Vec<MediaConditionWithoutOrType> {
        <V as Fold>::fold_media_condition_without_or_types(&mut **self, node)
    }

    #[inline]
    fn fold_media_feature(&mut self, node: MediaFeature) -> MediaFeature {
        <V as Fold>::fold_media_feature(&mut **self, node)
    }

    #[inline]
    fn fold_media_feature_boolean(&mut self, node: MediaFeatureBoolean) -> MediaFeatureBoolean {
        <V as Fold>::fold_media_feature_boolean(&mut **self, node)
    }

    #[inline]
    fn fold_media_feature_name(&mut self, node: MediaFeatureName) -> MediaFeatureName {
        <V as Fold>::fold_media_feature_name(&mut **self, node)
    }

    #[inline]
    fn fold_media_feature_plain(&mut self, node: MediaFeaturePlain) -> MediaFeaturePlain {
        <V as Fold>::fold_media_feature_plain(&mut **self, node)
    }

    #[inline]
    fn fold_media_feature_range(&mut self, node: MediaFeatureRange) -> MediaFeatureRange {
        <V as Fold>::fold_media_feature_range(&mut **self, node)
    }

    #[inline]
    fn fold_media_feature_range_comparison(
        &mut self,
        node: MediaFeatureRangeComparison,
    ) -> MediaFeatureRangeComparison {
        <V as Fold>::fold_media_feature_range_comparison(&mut **self, node)
    }

    #[inline]
    fn fold_media_feature_range_interval(
        &mut self,
        node: MediaFeatureRangeInterval,
    ) -> MediaFeatureRangeInterval {
        <V as Fold>::fold_media_feature_range_interval(&mut **self, node)
    }

    #[inline]
    fn fold_media_feature_value(&mut self, node: MediaFeatureValue) -> MediaFeatureValue {
        <V as Fold>::fold_media_feature_value(&mut **self, node)
    }

    #[inline]
    fn fold_media_in_parens(&mut self, node: MediaInParens) -> MediaInParens {
        <V as Fold>::fold_media_in_parens(&mut **self, node)
    }

    #[inline]
    fn fold_media_not(&mut self, node: MediaNot) -> MediaNot {
        <V as Fold>::fold_media_not(&mut **self, node)
    }

    #[inline]
    fn fold_media_or(&mut self, node: MediaOr) -> MediaOr {
        <V as Fold>::fold_media_or(&mut **self, node)
    }

    #[inline]
    fn fold_media_query(&mut self, node: MediaQuery) -> MediaQuery {
        <V as Fold>::fold_media_query(&mut **self, node)
    }

    #[inline]
    fn fold_media_query_list(&mut self, node: MediaQueryList) -> MediaQueryList {
        <V as Fold>::fold_media_query_list(&mut **self, node)
    }

    #[inline]
    fn fold_media_querys(&mut self, node: Vec<MediaQuery>) -> Vec<MediaQuery> {
        <V as Fold>::fold_media_querys(&mut **self, node)
    }

    #[inline]
    fn fold_media_type(&mut self, node: MediaType) -> MediaType {
        <V as Fold>::fold_media_type(&mut **self, node)
    }

    #[inline]
    fn fold_named_namespace(&mut self, node: NamedNamespace) -> NamedNamespace {
        <V as Fold>::fold_named_namespace(&mut **self, node)
    }

    #[inline]
    fn fold_namespace(&mut self, node: Namespace) -> Namespace {
        <V as Fold>::fold_namespace(&mut **self, node)
    }

    #[inline]
    fn fold_namespace_prefix(&mut self, node: NamespacePrefix) -> NamespacePrefix {
        <V as Fold>::fold_namespace_prefix(&mut **self, node)
    }

    #[inline]
    fn fold_namespace_prelude(&mut self, node: NamespacePrelude) -> NamespacePrelude {
        <V as Fold>::fold_namespace_prelude(&mut **self, node)
    }

    #[inline]
    fn fold_namespace_prelude_uri(&mut self, node: NamespacePreludeUri) -> NamespacePreludeUri {
        <V as Fold>::fold_namespace_prelude_uri(&mut **self, node)
    }

    #[inline]
    fn fold_nesting_selector(&mut self, node: NestingSelector) -> NestingSelector {
        <V as Fold>::fold_nesting_selector(&mut **self, node)
    }

    #[inline]
    fn fold_number(&mut self, node: Number) -> Number {
        <V as Fold>::fold_number(&mut **self, node)
    }

    #[inline]
    fn fold_number_type(&mut self, node: NumberType) -> NumberType {
        <V as Fold>::fold_number_type(&mut **self, node)
    }

    #[inline]
    fn fold_opt_at_rule_prelude(
        &mut self,
        node: Option<Box<AtRulePrelude>>,
    ) -> Option<Box<AtRulePrelude>> {
        <V as Fold>::fold_opt_at_rule_prelude(&mut **self, node)
    }

    #[inline]
    fn fold_opt_atom(&mut self, node: Option<swc_atoms::Atom>) -> Option<swc_atoms::Atom> {
        <V as Fold>::fold_opt_atom(&mut **self, node)
    }

    #[inline]
    fn fold_opt_attribute_selector_matcher(
        &mut self,
        node: Option<AttributeSelectorMatcher>,
    ) -> Option<AttributeSelectorMatcher> {
        <V as Fold>::fold_opt_attribute_selector_matcher(&mut **self, node)
    }

    #[inline]
    fn fold_opt_attribute_selector_modifier(
        &mut self,
        node: Option<AttributeSelectorModifier>,
    ) -> Option<AttributeSelectorModifier> {
        <V as Fold>::fold_opt_attribute_selector_modifier(&mut **self, node)
    }

    #[inline]
    fn fold_opt_attribute_selector_value(
        &mut self,
        node: Option<AttributeSelectorValue>,
    ) -> Option<AttributeSelectorValue> {
        <V as Fold>::fold_opt_attribute_selector_value(&mut **self, node)
    }

    #[inline]
    fn fold_opt_combinator(&mut self, node: Option<Combinator>) -> Option<Combinator> {
        <V as Fold>::fold_opt_combinator(&mut **self, node)
    }

    #[inline]
    fn fold_opt_container_name(&mut self, node: Option<ContainerName>) -> Option<ContainerName> {
        <V as Fold>::fold_opt_container_name(&mut **self, node)
    }

    #[inline]
    fn fold_opt_forgiving_selector_list(
        &mut self,
        node: Option<ForgivingSelectorList>,
    ) -> Option<ForgivingSelectorList> {
        <V as Fold>::fold_opt_forgiving_selector_list(&mut **self, node)
    }

    #[inline]
    fn fold_opt_function(&mut self, node: Option<Box<Function>>) -> Option<Box<Function>> {
        <V as Fold>::fold_opt_function(&mut **self, node)
    }

    #[inline]
    fn fold_opt_ident(&mut self, node: Option<Ident>) -> Option<Ident> {
        <V as Fold>::fold_opt_ident(&mut **self, node)
    }

    #[inline]
    fn fold_opt_import_conditions(
        &mut self,
        node: Option<Box<ImportConditions>>,
    ) -> Option<Box<ImportConditions>> {
        <V as Fold>::fold_opt_import_conditions(&mut **self, node)
    }

    #[inline]
    fn fold_opt_import_layer_name(
        &mut self,
        node: Option<Box<ImportLayerName>>,
    ) -> Option<Box<ImportLayerName>> {
        <V as Fold>::fold_opt_import_layer_name(&mut **self, node)
    }

    #[inline]
    fn fold_opt_important_flag(&mut self, node: Option<ImportantFlag>) -> Option<ImportantFlag> {
        <V as Fold>::fold_opt_important_flag(&mut **self, node)
    }

    #[inline]
    fn fold_opt_media_condition_type(
        &mut self,
        node: Option<Box<MediaConditionType>>,
    ) -> Option<Box<MediaConditionType>> {
        <V as Fold>::fold_opt_media_condition_type(&mut **self, node)
    }

    #[inline]
    fn fold_opt_media_query_list(
        &mut self,
        node: Option<Box<MediaQueryList>>,
    ) -> Option<Box<MediaQueryList>> {
        <V as Fold>::fold_opt_media_query_list(&mut **self, node)
    }

    #[inline]
    fn fold_opt_media_type(&mut self, node: Option<MediaType>) -> Option<MediaType> {
        <V as Fold>::fold_opt_media_type(&mut **self, node)
    }

    #[inline]
    fn fold_opt_namespace(&mut self, node: Option<Namespace>) -> Option<Namespace> {
        <V as Fold>::fold_opt_namespace(&mut **self, node)
    }

    #[inline]
    fn fold_opt_namespace_prefix(
        &mut self,
        node: Option<NamespacePrefix>,
    ) -> Option<NamespacePrefix> {
        <V as Fold>::fold_opt_namespace_prefix(&mut **self, node)
    }

    #[inline]
    fn fold_opt_nesting_selector(
        &mut self,
        node: Option<NestingSelector>,
    ) -> Option<NestingSelector> {
        <V as Fold>::fold_opt_nesting_selector(&mut **self, node)
    }

    #[inline]
    fn fold_opt_number(&mut self, node: Option<Number>) -> Option<Number> {
        <V as Fold>::fold_opt_number(&mut **self, node)
    }

    #[inline]
    fn fold_opt_page_selector_pseudos(
        &mut self,
        node: Option<Vec<PageSelectorPseudo>>,
    ) -> Option<Vec<PageSelectorPseudo>> {
        <V as Fold>::fold_opt_page_selector_pseudos(&mut **self, node)
    }

    #[inline]
    fn fold_opt_page_selector_type(
        &mut self,
        node: Option<PageSelectorType>,
    ) -> Option<PageSelectorType> {
        <V as Fold>::fold_opt_page_selector_type(&mut **self, node)
    }

    #[inline]
    fn fold_opt_pseudo_class_selector_childrens(
        &mut self,
        node: Option<Vec<PseudoClassSelectorChildren>>,
    ) -> Option<Vec<PseudoClassSelectorChildren>> {
        <V as Fold>::fold_opt_pseudo_class_selector_childrens(&mut **self, node)
    }

    #[inline]
    fn fold_opt_pseudo_element_selector_childrens(
        &mut self,
        node: Option<Vec<PseudoElementSelectorChildren>>,
    ) -> Option<Vec<PseudoElementSelectorChildren>> {
        <V as Fold>::fold_opt_pseudo_element_selector_childrens(&mut **self, node)
    }

    #[inline]
    fn fold_opt_simple_block(&mut self, node: Option<SimpleBlock>) -> Option<SimpleBlock> {
        <V as Fold>::fold_opt_simple_block(&mut **self, node)
    }

    #[inline]
    fn fold_opt_type_selector(
        &mut self,
        node: Option<Box<TypeSelector>>,
    ) -> Option<Box<TypeSelector>> {
        <V as Fold>::fold_opt_type_selector(&mut **self, node)
    }

    #[inline]
    fn fold_opt_url_modifiers(
        &mut self,
        node: Option<Vec<UrlModifier>>,
    ) -> Option<Vec<UrlModifier>> {
        <V as Fold>::fold_opt_url_modifiers(&mut **self, node)
    }

    #[inline]
    fn fold_opt_url_value(&mut self, node: Option<Box<UrlValue>>) -> Option<Box<UrlValue>> {
        <V as Fold>::fold_opt_url_value(&mut **self, node)
    }

    #[inline]
    fn fold_page_selector(&mut self, node: PageSelector) -> PageSelector {
        <V as Fold>::fold_page_selector(&mut **self, node)
    }

    #[inline]
    fn fold_page_selector_list(&mut self, node: PageSelectorList) -> PageSelectorList {
        <V as Fold>::fold_page_selector_list(&mut **self, node)
    }

    #[inline]
    fn fold_page_selector_pseudo(&mut self, node: PageSelectorPseudo) -> PageSelectorPseudo {
        <V as Fold>::fold_page_selector_pseudo(&mut **self, node)
    }

    #[inline]
    fn fold_page_selector_pseudos(
        &mut self,
        node: Vec<PageSelectorPseudo>,
    ) -> Vec<PageSelectorPseudo> {
        <V as Fold>::fold_page_selector_pseudos(&mut **self, node)
    }

    #[inline]
    fn fold_page_selector_type(&mut self, node: PageSelectorType) -> PageSelectorType {
        <V as Fold>::fold_page_selector_type(&mut **self, node)
    }

    #[inline]
    fn fold_page_selectors(&mut self, node: Vec<PageSelector>) -> Vec<PageSelector> {
        <V as Fold>::fold_page_selectors(&mut **self, node)
    }

    #[inline]
    fn fold_percentage(&mut self, node: Percentage) -> Percentage {
        <V as Fold>::fold_percentage(&mut **self, node)
    }

    #[inline]
    fn fold_pseudo_class_selector(&mut self, node: PseudoClassSelector) -> PseudoClassSelector {
        <V as Fold>::fold_pseudo_class_selector(&mut **self, node)
    }

    #[inline]
    fn fold_pseudo_class_selector_children(
        &mut self,
        node: PseudoClassSelectorChildren,
    ) -> PseudoClassSelectorChildren {
        <V as Fold>::fold_pseudo_class_selector_children(&mut **self, node)
    }

    #[inline]
    fn fold_pseudo_class_selector_childrens(
        &mut self,
        node: Vec<PseudoClassSelectorChildren>,
    ) -> Vec<PseudoClassSelectorChildren> {
        <V as Fold>::fold_pseudo_class_selector_childrens(&mut **self, node)
    }

    #[inline]
    fn fold_pseudo_element_selector(
        &mut self,
        node: PseudoElementSelector,
    ) -> PseudoElementSelector {
        <V as Fold>::fold_pseudo_element_selector(&mut **self, node)
    }

    #[inline]
    fn fold_pseudo_element_selector_children(
        &mut self,
        node: PseudoElementSelectorChildren,
    ) -> PseudoElementSelectorChildren {
        <V as Fold>::fold_pseudo_element_selector_children(&mut **self, node)
    }

    #[inline]
    fn fold_pseudo_element_selector_childrens(
        &mut self,
        node: Vec<PseudoElementSelectorChildren>,
    ) -> Vec<PseudoElementSelectorChildren> {
        <V as Fold>::fold_pseudo_element_selector_childrens(&mut **self, node)
    }

    #[inline]
    fn fold_qualified_rule(&mut self, node: QualifiedRule) -> QualifiedRule {
        <V as Fold>::fold_qualified_rule(&mut **self, node)
    }

    #[inline]
    fn fold_qualified_rule_prelude(&mut self, node: QualifiedRulePrelude) -> QualifiedRulePrelude {
        <V as Fold>::fold_qualified_rule_prelude(&mut **self, node)
    }

    #[inline]
    fn fold_query_in_parens(&mut self, node: QueryInParens) -> QueryInParens {
        <V as Fold>::fold_query_in_parens(&mut **self, node)
    }

    #[inline]
    fn fold_ratio(&mut self, node: Ratio) -> Ratio {
        <V as Fold>::fold_ratio(&mut **self, node)
    }

    #[inline]
    fn fold_relative_selector(&mut self, node: RelativeSelector) -> RelativeSelector {
        <V as Fold>::fold_relative_selector(&mut **self, node)
    }

    #[inline]
    fn fold_relative_selector_list(&mut self, node: RelativeSelectorList) -> RelativeSelectorList {
        <V as Fold>::fold_relative_selector_list(&mut **self, node)
    }

    #[inline]
    fn fold_relative_selectors(&mut self, node: Vec<RelativeSelector>) -> Vec<RelativeSelector> {
        <V as Fold>::fold_relative_selectors(&mut **self, node)
    }

    #[inline]
    fn fold_resolution(&mut self, node: Resolution) -> Resolution {
        <V as Fold>::fold_resolution(&mut **self, node)
    }

    #[inline]
    fn fold_rule(&mut self, node: Rule) -> Rule {
        <V as Fold>::fold_rule(&mut **self, node)
    }

    #[inline]
    fn fold_rules(&mut self, node: Vec<Rule>) -> Vec<Rule> {
        <V as Fold>::fold_rules(&mut **self, node)
    }

    #[inline]
    fn fold_scope_range(&mut self, node: ScopeRange) -> ScopeRange {
        <V as Fold>::fold_scope_range(&mut **self, node)
    }

    #[inline]
    fn fold_selector_list(&mut self, node: SelectorList) -> SelectorList {
        <V as Fold>::fold_selector_list(&mut **self, node)
    }

    #[inline]
    fn fold_sequence_of_custom_idents(
        &mut self,
        node: SequenceOfCustomIdents,
    ) -> SequenceOfCustomIdents {
        <V as Fold>::fold_sequence_of_custom_idents(&mut **self, node)
    }

    #[inline]
    fn fold_simple_block(&mut self, node: SimpleBlock) -> SimpleBlock {
        <V as Fold>::fold_simple_block(&mut **self, node)
    }

    #[inline]
    fn fold_size_feature(&mut self, node: SizeFeature) -> SizeFeature {
        <V as Fold>::fold_size_feature(&mut **self, node)
    }

    #[inline]
    fn fold_size_feature_boolean(&mut self, node: SizeFeatureBoolean) -> SizeFeatureBoolean {
        <V as Fold>::fold_size_feature_boolean(&mut **self, node)
    }

    #[inline]
    fn fold_size_feature_name(&mut self, node: SizeFeatureName) -> SizeFeatureName {
        <V as Fold>::fold_size_feature_name(&mut **self, node)
    }

    #[inline]
    fn fold_size_feature_plain(&mut self, node: SizeFeaturePlain) -> SizeFeaturePlain {
        <V as Fold>::fold_size_feature_plain(&mut **self, node)
    }

    #[inline]
    fn fold_size_feature_range(&mut self, node: SizeFeatureRange) -> SizeFeatureRange {
        <V as Fold>::fold_size_feature_range(&mut **self, node)
    }

    #[inline]
    fn fold_size_feature_range_comparison(
        &mut self,
        node: SizeFeatureRangeComparison,
    ) -> SizeFeatureRangeComparison {
        <V as Fold>::fold_size_feature_range_comparison(&mut **self, node)
    }

    #[inline]
    fn fold_size_feature_range_interval(
        &mut self,
        node: SizeFeatureRangeInterval,
    ) -> SizeFeatureRangeInterval {
        <V as Fold>::fold_size_feature_range_interval(&mut **self, node)
    }

    #[inline]
    fn fold_size_feature_value(&mut self, node: SizeFeatureValue) -> SizeFeatureValue {
        <V as Fold>::fold_size_feature_value(&mut **self, node)
    }

    #[inline]
    fn fold_span(&mut self, node: swc_common::Span) -> swc_common::Span {
        <V as Fold>::fold_span(&mut **self, node)
    }

    #[inline]
    fn fold_str(&mut self, node: Str) -> Str {
        <V as Fold>::fold_str(&mut **self, node)
    }

    #[inline]
    fn fold_style_block(&mut self, node: StyleBlock) -> StyleBlock {
        <V as Fold>::fold_style_block(&mut **self, node)
    }

    #[inline]
    fn fold_stylesheet(&mut self, node: Stylesheet) -> Stylesheet {
        <V as Fold>::fold_stylesheet(&mut **self, node)
    }

    #[inline]
    fn fold_subclass_selector(&mut self, node: SubclassSelector) -> SubclassSelector {
        <V as Fold>::fold_subclass_selector(&mut **self, node)
    }

    #[inline]
    fn fold_subclass_selectors(&mut self, node: Vec<SubclassSelector>) -> Vec<SubclassSelector> {
        <V as Fold>::fold_subclass_selectors(&mut **self, node)
    }

    #[inline]
    fn fold_supports_and(&mut self, node: SupportsAnd) -> SupportsAnd {
        <V as Fold>::fold_supports_and(&mut **self, node)
    }

    #[inline]
    fn fold_supports_condition(&mut self, node: SupportsCondition) -> SupportsCondition {
        <V as Fold>::fold_supports_condition(&mut **self, node)
    }

    #[inline]
    fn fold_supports_condition_type(
        &mut self,
        node: SupportsConditionType,
    ) -> SupportsConditionType {
        <V as Fold>::fold_supports_condition_type(&mut **self, node)
    }

    #[inline]
    fn fold_supports_condition_types(
        &mut self,
        node: Vec<SupportsConditionType>,
    ) -> Vec<SupportsConditionType> {
        <V as Fold>::fold_supports_condition_types(&mut **self, node)
    }

    #[inline]
    fn fold_supports_feature(&mut self, node: SupportsFeature) -> SupportsFeature {
        <V as Fold>::fold_supports_feature(&mut **self, node)
    }

    #[inline]
    fn fold_supports_in_parens(&mut self, node: SupportsInParens) -> SupportsInParens {
        <V as Fold>::fold_supports_in_parens(&mut **self, node)
    }

    #[inline]
    fn fold_supports_not(&mut self, node: SupportsNot) -> SupportsNot {
        <V as Fold>::fold_supports_not(&mut **self, node)
    }

    #[inline]
    fn fold_supports_or(&mut self, node: SupportsOr) -> SupportsOr {
        <V as Fold>::fold_supports_or(&mut **self, node)
    }

    #[inline]
    fn fold_tag_name_selector(&mut self, node: TagNameSelector) -> TagNameSelector {
        <V as Fold>::fold_tag_name_selector(&mut **self, node)
    }

    #[inline]
    fn fold_time(&mut self, node: Time) -> Time {
        <V as Fold>::fold_time(&mut **self, node)
    }

    #[inline]
    fn fold_time_percentage(&mut self, node: TimePercentage) -> TimePercentage {
        <V as Fold>::fold_time_percentage(&mut **self, node)
    }

    #[inline]
    fn fold_token(&mut self, node: Token) -> Token {
        <V as Fold>::fold_token(&mut **self, node)
    }

    #[inline]
    fn fold_token_and_span(&mut self, node: TokenAndSpan) -> TokenAndSpan {
        <V as Fold>::fold_token_and_span(&mut **self, node)
    }

    #[inline]
    fn fold_type_selector(&mut self, node: TypeSelector) -> TypeSelector {
        <V as Fold>::fold_type_selector(&mut **self, node)
    }

    #[inline]
    fn fold_unicode_range(&mut self, node: UnicodeRange) -> UnicodeRange {
        <V as Fold>::fold_unicode_range(&mut **self, node)
    }

    #[inline]
    fn fold_universal_selector(&mut self, node: UniversalSelector) -> UniversalSelector {
        <V as Fold>::fold_universal_selector(&mut **self, node)
    }

    #[inline]
    fn fold_unknown_dimension(&mut self, node: UnknownDimension) -> UnknownDimension {
        <V as Fold>::fold_unknown_dimension(&mut **self, node)
    }

    #[inline]
    fn fold_url(&mut self, node: Url) -> Url {
        <V as Fold>::fold_url(&mut **self, node)
    }

    #[inline]
    fn fold_url_key_value(&mut self, node: UrlKeyValue) -> UrlKeyValue {
        <V as Fold>::fold_url_key_value(&mut **self, node)
    }

    #[inline]
    fn fold_url_modifier(&mut self, node: UrlModifier) -> UrlModifier {
        <V as Fold>::fold_url_modifier(&mut **self, node)
    }

    #[inline]
    fn fold_url_modifiers(&mut self, node: Vec<UrlModifier>) -> Vec<UrlModifier> {
        <V as Fold>::fold_url_modifiers(&mut **self, node)
    }

    #[inline]
    fn fold_url_value(&mut self, node: UrlValue) -> UrlValue {
        <V as Fold>::fold_url_value(&mut **self, node)
    }

    #[inline]
    fn fold_url_value_raw(&mut self, node: UrlValueRaw) -> UrlValueRaw {
        <V as Fold>::fold_url_value_raw(&mut **self, node)
    }

    #[inline]
    fn fold_wq_name(&mut self, node: WqName) -> WqName {
        <V as Fold>::fold_wq_name(&mut **self, node)
    }
}
impl<A, B> Fold for ::swc_visit::Either<A, B>
where
    A: Fold,
    B: Fold,
{
    #[inline]
    fn fold_absolute_color_base(&mut self, node: AbsoluteColorBase) -> AbsoluteColorBase {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_absolute_color_base(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_absolute_color_base(visitor, node),
        }
    }

    #[inline]
    fn fold_alpha_value(&mut self, node: AlphaValue) -> AlphaValue {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_alpha_value(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_alpha_value(visitor, node),
        }
    }

    #[inline]
    fn fold_an_plus_b(&mut self, node: AnPlusB) -> AnPlusB {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_an_plus_b(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_an_plus_b(visitor, node),
        }
    }

    #[inline]
    fn fold_an_plus_b_notation(&mut self, node: AnPlusBNotation) -> AnPlusBNotation {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_an_plus_b_notation(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_an_plus_b_notation(visitor, node),
        }
    }

    #[inline]
    fn fold_angle(&mut self, node: Angle) -> Angle {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_angle(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_angle(visitor, node),
        }
    }

    #[inline]
    fn fold_angle_percentage(&mut self, node: AnglePercentage) -> AnglePercentage {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_angle_percentage(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_angle_percentage(visitor, node),
        }
    }

    #[inline]
    fn fold_any_namespace(&mut self, node: AnyNamespace) -> AnyNamespace {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_any_namespace(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_any_namespace(visitor, node),
        }
    }

    #[inline]
    fn fold_at_rule(&mut self, node: AtRule) -> AtRule {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_at_rule(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_at_rule(visitor, node),
        }
    }

    #[inline]
    fn fold_at_rule_name(&mut self, node: AtRuleName) -> AtRuleName {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_at_rule_name(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_at_rule_name(visitor, node),
        }
    }

    #[inline]
    fn fold_at_rule_prelude(&mut self, node: AtRulePrelude) -> AtRulePrelude {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_at_rule_prelude(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_at_rule_prelude(visitor, node),
        }
    }

    #[inline]
    fn fold_atom(&mut self, node: swc_atoms::Atom) -> swc_atoms::Atom {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_atom(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_atom(visitor, node),
        }
    }

    #[inline]
    fn fold_attribute_selector(&mut self, node: AttributeSelector) -> AttributeSelector {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_attribute_selector(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_attribute_selector(visitor, node),
        }
    }

    #[inline]
    fn fold_attribute_selector_matcher(
        &mut self,
        node: AttributeSelectorMatcher,
    ) -> AttributeSelectorMatcher {
        match self {
            swc_visit::Either::Left(visitor) => {
                Fold::fold_attribute_selector_matcher(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                Fold::fold_attribute_selector_matcher(visitor, node)
            }
        }
    }

    #[inline]
    fn fold_attribute_selector_matcher_value(
        &mut self,
        node: AttributeSelectorMatcherValue,
    ) -> AttributeSelectorMatcherValue {
        match self {
            swc_visit::Either::Left(visitor) => {
                Fold::fold_attribute_selector_matcher_value(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                Fold::fold_attribute_selector_matcher_value(visitor, node)
            }
        }
    }

    #[inline]
    fn fold_attribute_selector_modifier(
        &mut self,
        node: AttributeSelectorModifier,
    ) -> AttributeSelectorModifier {
        match self {
            swc_visit::Either::Left(visitor) => {
                Fold::fold_attribute_selector_modifier(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                Fold::fold_attribute_selector_modifier(visitor, node)
            }
        }
    }

    #[inline]
    fn fold_attribute_selector_value(
        &mut self,
        node: AttributeSelectorValue,
    ) -> AttributeSelectorValue {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_attribute_selector_value(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_attribute_selector_value(visitor, node),
        }
    }

    #[inline]
    fn fold_bin_op(&mut self, node: BinOp) -> BinOp {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_bin_op(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_bin_op(visitor, node),
        }
    }

    #[inline]
    fn fold_calc_operator(&mut self, node: CalcOperator) -> CalcOperator {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_calc_operator(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_calc_operator(visitor, node),
        }
    }

    #[inline]
    fn fold_calc_operator_type(&mut self, node: CalcOperatorType) -> CalcOperatorType {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_calc_operator_type(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_calc_operator_type(visitor, node),
        }
    }

    #[inline]
    fn fold_calc_product(&mut self, node: CalcProduct) -> CalcProduct {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_calc_product(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_calc_product(visitor, node),
        }
    }

    #[inline]
    fn fold_calc_product_or_operator(
        &mut self,
        node: CalcProductOrOperator,
    ) -> CalcProductOrOperator {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_calc_product_or_operator(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_calc_product_or_operator(visitor, node),
        }
    }

    #[inline]
    fn fold_calc_product_or_operators(
        &mut self,
        node: Vec<CalcProductOrOperator>,
    ) -> Vec<CalcProductOrOperator> {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_calc_product_or_operators(visitor, node),
            swc_visit::Either::Right(visitor) => {
                Fold::fold_calc_product_or_operators(visitor, node)
            }
        }
    }

    #[inline]
    fn fold_calc_sum(&mut self, node: CalcSum) -> CalcSum {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_calc_sum(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_calc_sum(visitor, node),
        }
    }

    #[inline]
    fn fold_calc_value(&mut self, node: CalcValue) -> CalcValue {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_calc_value(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_calc_value(visitor, node),
        }
    }

    #[inline]
    fn fold_calc_value_or_operator(&mut self, node: CalcValueOrOperator) -> CalcValueOrOperator {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_calc_value_or_operator(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_calc_value_or_operator(visitor, node),
        }
    }

    #[inline]
    fn fold_calc_value_or_operators(
        &mut self,
        node: Vec<CalcValueOrOperator>,
    ) -> Vec<CalcValueOrOperator> {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_calc_value_or_operators(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_calc_value_or_operators(visitor, node),
        }
    }

    #[inline]
    fn fold_class_selector(&mut self, node: ClassSelector) -> ClassSelector {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_class_selector(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_class_selector(visitor, node),
        }
    }

    #[inline]
    fn fold_cmyk_component(&mut self, node: CmykComponent) -> CmykComponent {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_cmyk_component(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_cmyk_component(visitor, node),
        }
    }

    #[inline]
    fn fold_color(&mut self, node: Color) -> Color {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_color(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_color(visitor, node),
        }
    }

    #[inline]
    fn fold_color_profile_name(&mut self, node: ColorProfileName) -> ColorProfileName {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_color_profile_name(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_color_profile_name(visitor, node),
        }
    }

    #[inline]
    fn fold_combinator(&mut self, node: Combinator) -> Combinator {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_combinator(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_combinator(visitor, node),
        }
    }

    #[inline]
    fn fold_combinator_value(&mut self, node: CombinatorValue) -> CombinatorValue {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_combinator_value(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_combinator_value(visitor, node),
        }
    }

    #[inline]
    fn fold_complex_selector(&mut self, node: ComplexSelector) -> ComplexSelector {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_complex_selector(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_complex_selector(visitor, node),
        }
    }

    #[inline]
    fn fold_complex_selector_children(
        &mut self,
        node: ComplexSelectorChildren,
    ) -> ComplexSelectorChildren {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_complex_selector_children(visitor, node),
            swc_visit::Either::Right(visitor) => {
                Fold::fold_complex_selector_children(visitor, node)
            }
        }
    }

    #[inline]
    fn fold_complex_selector_childrens(
        &mut self,
        node: Vec<ComplexSelectorChildren>,
    ) -> Vec<ComplexSelectorChildren> {
        match self {
            swc_visit::Either::Left(visitor) => {
                Fold::fold_complex_selector_childrens(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                Fold::fold_complex_selector_childrens(visitor, node)
            }
        }
    }

    #[inline]
    fn fold_complex_selectors(&mut self, node: Vec<ComplexSelector>) -> Vec<ComplexSelector> {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_complex_selectors(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_complex_selectors(visitor, node),
        }
    }

    #[inline]
    fn fold_component_value(&mut self, node: ComponentValue) -> ComponentValue {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_component_value(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_component_value(visitor, node),
        }
    }

    #[inline]
    fn fold_component_values(&mut self, node: Vec<ComponentValue>) -> Vec<ComponentValue> {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_component_values(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_component_values(visitor, node),
        }
    }

    #[inline]
    fn fold_compound_selector(&mut self, node: CompoundSelector) -> CompoundSelector {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_compound_selector(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_compound_selector(visitor, node),
        }
    }

    #[inline]
    fn fold_compound_selector_list(&mut self, node: CompoundSelectorList) -> CompoundSelectorList {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_compound_selector_list(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_compound_selector_list(visitor, node),
        }
    }

    #[inline]
    fn fold_compound_selectors(&mut self, node: Vec<CompoundSelector>) -> Vec<CompoundSelector> {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_compound_selectors(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_compound_selectors(visitor, node),
        }
    }

    #[inline]
    fn fold_container_condition(&mut self, node: ContainerCondition) -> ContainerCondition {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_container_condition(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_container_condition(visitor, node),
        }
    }

    #[inline]
    fn fold_container_name(&mut self, node: ContainerName) -> ContainerName {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_container_name(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_container_name(visitor, node),
        }
    }

    #[inline]
    fn fold_container_query(&mut self, node: ContainerQuery) -> ContainerQuery {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_container_query(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_container_query(visitor, node),
        }
    }

    #[inline]
    fn fold_container_query_and(&mut self, node: ContainerQueryAnd) -> ContainerQueryAnd {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_container_query_and(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_container_query_and(visitor, node),
        }
    }

    #[inline]
    fn fold_container_query_not(&mut self, node: ContainerQueryNot) -> ContainerQueryNot {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_container_query_not(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_container_query_not(visitor, node),
        }
    }

    #[inline]
    fn fold_container_query_or(&mut self, node: ContainerQueryOr) -> ContainerQueryOr {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_container_query_or(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_container_query_or(visitor, node),
        }
    }

    #[inline]
    fn fold_container_query_type(&mut self, node: ContainerQueryType) -> ContainerQueryType {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_container_query_type(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_container_query_type(visitor, node),
        }
    }

    #[inline]
    fn fold_container_query_types(
        &mut self,
        node: Vec<ContainerQueryType>,
    ) -> Vec<ContainerQueryType> {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_container_query_types(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_container_query_types(visitor, node),
        }
    }

    #[inline]
    fn fold_custom_highlight_name(&mut self, node: CustomHighlightName) -> CustomHighlightName {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_custom_highlight_name(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_custom_highlight_name(visitor, node),
        }
    }

    #[inline]
    fn fold_custom_ident(&mut self, node: CustomIdent) -> CustomIdent {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_custom_ident(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_custom_ident(visitor, node),
        }
    }

    #[inline]
    fn fold_custom_idents(&mut self, node: Vec<CustomIdent>) -> Vec<CustomIdent> {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_custom_idents(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_custom_idents(visitor, node),
        }
    }

    #[inline]
    fn fold_custom_media_query(&mut self, node: CustomMediaQuery) -> CustomMediaQuery {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_custom_media_query(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_custom_media_query(visitor, node),
        }
    }

    #[inline]
    fn fold_custom_media_query_media_type(
        &mut self,
        node: CustomMediaQueryMediaType,
    ) -> CustomMediaQueryMediaType {
        match self {
            swc_visit::Either::Left(visitor) => {
                Fold::fold_custom_media_query_media_type(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                Fold::fold_custom_media_query_media_type(visitor, node)
            }
        }
    }

    #[inline]
    fn fold_custom_property_name(&mut self, node: CustomPropertyName) -> CustomPropertyName {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_custom_property_name(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_custom_property_name(visitor, node),
        }
    }

    #[inline]
    fn fold_dashed_ident(&mut self, node: DashedIdent) -> DashedIdent {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_dashed_ident(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_dashed_ident(visitor, node),
        }
    }

    #[inline]
    fn fold_declaration(&mut self, node: Declaration) -> Declaration {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_declaration(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_declaration(visitor, node),
        }
    }

    #[inline]
    fn fold_declaration_name(&mut self, node: DeclarationName) -> DeclarationName {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_declaration_name(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_declaration_name(visitor, node),
        }
    }

    #[inline]
    fn fold_declaration_or_at_rule(&mut self, node: DeclarationOrAtRule) -> DeclarationOrAtRule {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_declaration_or_at_rule(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_declaration_or_at_rule(visitor, node),
        }
    }

    #[inline]
    fn fold_delimiter(&mut self, node: Delimiter) -> Delimiter {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_delimiter(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_delimiter(visitor, node),
        }
    }

    #[inline]
    fn fold_delimiter_value(&mut self, node: DelimiterValue) -> DelimiterValue {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_delimiter_value(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_delimiter_value(visitor, node),
        }
    }

    #[inline]
    fn fold_dimension(&mut self, node: Dimension) -> Dimension {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_dimension(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_dimension(visitor, node),
        }
    }

    #[inline]
    fn fold_dimension_token(&mut self, node: DimensionToken) -> DimensionToken {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_dimension_token(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_dimension_token(visitor, node),
        }
    }

    #[inline]
    fn fold_document_prelude(&mut self, node: DocumentPrelude) -> DocumentPrelude {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_document_prelude(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_document_prelude(visitor, node),
        }
    }

    #[inline]
    fn fold_document_prelude_matching_function(
        &mut self,
        node: DocumentPreludeMatchingFunction,
    ) -> DocumentPreludeMatchingFunction {
        match self {
            swc_visit::Either::Left(visitor) => {
                Fold::fold_document_prelude_matching_function(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                Fold::fold_document_prelude_matching_function(visitor, node)
            }
        }
    }

    #[inline]
    fn fold_document_prelude_matching_functions(
        &mut self,
        node: Vec<DocumentPreludeMatchingFunction>,
    ) -> Vec<DocumentPreludeMatchingFunction> {
        match self {
            swc_visit::Either::Left(visitor) => {
                Fold::fold_document_prelude_matching_functions(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                Fold::fold_document_prelude_matching_functions(visitor, node)
            }
        }
    }

    #[inline]
    fn fold_extension_name(&mut self, node: ExtensionName) -> ExtensionName {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_extension_name(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_extension_name(visitor, node),
        }
    }

    #[inline]
    fn fold_family_name(&mut self, node: FamilyName) -> FamilyName {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_family_name(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_family_name(visitor, node),
        }
    }

    #[inline]
    fn fold_family_names(&mut self, node: Vec<FamilyName>) -> Vec<FamilyName> {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_family_names(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_family_names(visitor, node),
        }
    }

    #[inline]
    fn fold_flex(&mut self, node: Flex) -> Flex {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_flex(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_flex(visitor, node),
        }
    }

    #[inline]
    fn fold_font_feature_values_prelude(
        &mut self,
        node: FontFeatureValuesPrelude,
    ) -> FontFeatureValuesPrelude {
        match self {
            swc_visit::Either::Left(visitor) => {
                Fold::fold_font_feature_values_prelude(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                Fold::fold_font_feature_values_prelude(visitor, node)
            }
        }
    }

    #[inline]
    fn fold_forgiving_complex_selector(
        &mut self,
        node: ForgivingComplexSelector,
    ) -> ForgivingComplexSelector {
        match self {
            swc_visit::Either::Left(visitor) => {
                Fold::fold_forgiving_complex_selector(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                Fold::fold_forgiving_complex_selector(visitor, node)
            }
        }
    }

    #[inline]
    fn fold_forgiving_complex_selectors(
        &mut self,
        node: Vec<ForgivingComplexSelector>,
    ) -> Vec<ForgivingComplexSelector> {
        match self {
            swc_visit::Either::Left(visitor) => {
                Fold::fold_forgiving_complex_selectors(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                Fold::fold_forgiving_complex_selectors(visitor, node)
            }
        }
    }

    #[inline]
    fn fold_forgiving_relative_selector(
        &mut self,
        node: ForgivingRelativeSelector,
    ) -> ForgivingRelativeSelector {
        match self {
            swc_visit::Either::Left(visitor) => {
                Fold::fold_forgiving_relative_selector(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                Fold::fold_forgiving_relative_selector(visitor, node)
            }
        }
    }

    #[inline]
    fn fold_forgiving_relative_selector_list(
        &mut self,
        node: ForgivingRelativeSelectorList,
    ) -> ForgivingRelativeSelectorList {
        match self {
            swc_visit::Either::Left(visitor) => {
                Fold::fold_forgiving_relative_selector_list(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                Fold::fold_forgiving_relative_selector_list(visitor, node)
            }
        }
    }

    #[inline]
    fn fold_forgiving_relative_selectors(
        &mut self,
        node: Vec<ForgivingRelativeSelector>,
    ) -> Vec<ForgivingRelativeSelector> {
        match self {
            swc_visit::Either::Left(visitor) => {
                Fold::fold_forgiving_relative_selectors(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                Fold::fold_forgiving_relative_selectors(visitor, node)
            }
        }
    }

    #[inline]
    fn fold_forgiving_selector_list(
        &mut self,
        node: ForgivingSelectorList,
    ) -> ForgivingSelectorList {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_forgiving_selector_list(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_forgiving_selector_list(visitor, node),
        }
    }

    #[inline]
    fn fold_frequency(&mut self, node: Frequency) -> Frequency {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_frequency(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_frequency(visitor, node),
        }
    }

    #[inline]
    fn fold_frequency_percentage(&mut self, node: FrequencyPercentage) -> FrequencyPercentage {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_frequency_percentage(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_frequency_percentage(visitor, node),
        }
    }

    #[inline]
    fn fold_function(&mut self, node: Function) -> Function {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_function(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_function(visitor, node),
        }
    }

    #[inline]
    fn fold_function_name(&mut self, node: FunctionName) -> FunctionName {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_function_name(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_function_name(visitor, node),
        }
    }

    #[inline]
    fn fold_general_enclosed(&mut self, node: GeneralEnclosed) -> GeneralEnclosed {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_general_enclosed(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_general_enclosed(visitor, node),
        }
    }

    #[inline]
    fn fold_hex_color(&mut self, node: HexColor) -> HexColor {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_hex_color(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_hex_color(visitor, node),
        }
    }

    #[inline]
    fn fold_hue(&mut self, node: Hue) -> Hue {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_hue(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_hue(visitor, node),
        }
    }

    #[inline]
    fn fold_id_selector(&mut self, node: IdSelector) -> IdSelector {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_id_selector(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_id_selector(visitor, node),
        }
    }

    #[inline]
    fn fold_ident(&mut self, node: Ident) -> Ident {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_ident(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_ident(visitor, node),
        }
    }

    #[inline]
    fn fold_idents(&mut self, node: Vec<Ident>) -> Vec<Ident> {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_idents(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_idents(visitor, node),
        }
    }

    #[inline]
    fn fold_import_conditions(&mut self, node: ImportConditions) -> ImportConditions {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_import_conditions(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_import_conditions(visitor, node),
        }
    }

    #[inline]
    fn fold_import_href(&mut self, node: ImportHref) -> ImportHref {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_import_href(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_import_href(visitor, node),
        }
    }

    #[inline]
    fn fold_import_layer_name(&mut self, node: ImportLayerName) -> ImportLayerName {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_import_layer_name(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_import_layer_name(visitor, node),
        }
    }

    #[inline]
    fn fold_import_prelude(&mut self, node: ImportPrelude) -> ImportPrelude {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_import_prelude(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_import_prelude(visitor, node),
        }
    }

    #[inline]
    fn fold_important_flag(&mut self, node: ImportantFlag) -> ImportantFlag {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_important_flag(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_important_flag(visitor, node),
        }
    }

    #[inline]
    fn fold_integer(&mut self, node: Integer) -> Integer {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_integer(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_integer(visitor, node),
        }
    }

    #[inline]
    fn fold_keyframe_block(&mut self, node: KeyframeBlock) -> KeyframeBlock {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_keyframe_block(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_keyframe_block(visitor, node),
        }
    }

    #[inline]
    fn fold_keyframe_selector(&mut self, node: KeyframeSelector) -> KeyframeSelector {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_keyframe_selector(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_keyframe_selector(visitor, node),
        }
    }

    #[inline]
    fn fold_keyframe_selectors(&mut self, node: Vec<KeyframeSelector>) -> Vec<KeyframeSelector> {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_keyframe_selectors(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_keyframe_selectors(visitor, node),
        }
    }

    #[inline]
    fn fold_keyframes_name(&mut self, node: KeyframesName) -> KeyframesName {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_keyframes_name(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_keyframes_name(visitor, node),
        }
    }

    #[inline]
    fn fold_keyframes_pseudo_function(
        &mut self,
        node: KeyframesPseudoFunction,
    ) -> KeyframesPseudoFunction {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_keyframes_pseudo_function(visitor, node),
            swc_visit::Either::Right(visitor) => {
                Fold::fold_keyframes_pseudo_function(visitor, node)
            }
        }
    }

    #[inline]
    fn fold_keyframes_pseudo_prefix(
        &mut self,
        node: KeyframesPseudoPrefix,
    ) -> KeyframesPseudoPrefix {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_keyframes_pseudo_prefix(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_keyframes_pseudo_prefix(visitor, node),
        }
    }

    #[inline]
    fn fold_layer_name(&mut self, node: LayerName) -> LayerName {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_layer_name(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_layer_name(visitor, node),
        }
    }

    #[inline]
    fn fold_layer_name_list(&mut self, node: LayerNameList) -> LayerNameList {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_layer_name_list(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_layer_name_list(visitor, node),
        }
    }

    #[inline]
    fn fold_layer_names(&mut self, node: Vec<LayerName>) -> Vec<LayerName> {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_layer_names(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_layer_names(visitor, node),
        }
    }

    #[inline]
    fn fold_layer_prelude(&mut self, node: LayerPrelude) -> LayerPrelude {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_layer_prelude(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_layer_prelude(visitor, node),
        }
    }

    #[inline]
    fn fold_length(&mut self, node: Length) -> Length {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_length(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_length(visitor, node),
        }
    }

    #[inline]
    fn fold_length_percentage(&mut self, node: LengthPercentage) -> LengthPercentage {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_length_percentage(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_length_percentage(visitor, node),
        }
    }

    #[inline]
    fn fold_list_of_component_values(
        &mut self,
        node: ListOfComponentValues,
    ) -> ListOfComponentValues {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_list_of_component_values(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_list_of_component_values(visitor, node),
        }
    }

    #[inline]
    fn fold_media_and(&mut self, node: MediaAnd) -> MediaAnd {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_media_and(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_media_and(visitor, node),
        }
    }

    #[inline]
    fn fold_media_condition(&mut self, node: MediaCondition) -> MediaCondition {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_media_condition(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_media_condition(visitor, node),
        }
    }

    #[inline]
    fn fold_media_condition_all_type(
        &mut self,
        node: MediaConditionAllType,
    ) -> MediaConditionAllType {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_media_condition_all_type(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_media_condition_all_type(visitor, node),
        }
    }

    #[inline]
    fn fold_media_condition_all_types(
        &mut self,
        node: Vec<MediaConditionAllType>,
    ) -> Vec<MediaConditionAllType> {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_media_condition_all_types(visitor, node),
            swc_visit::Either::Right(visitor) => {
                Fold::fold_media_condition_all_types(visitor, node)
            }
        }
    }

    #[inline]
    fn fold_media_condition_type(&mut self, node: MediaConditionType) -> MediaConditionType {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_media_condition_type(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_media_condition_type(visitor, node),
        }
    }

    #[inline]
    fn fold_media_condition_without_or(
        &mut self,
        node: MediaConditionWithoutOr,
    ) -> MediaConditionWithoutOr {
        match self {
            swc_visit::Either::Left(visitor) => {
                Fold::fold_media_condition_without_or(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                Fold::fold_media_condition_without_or(visitor, node)
            }
        }
    }

    #[inline]
    fn fold_media_condition_without_or_type(
        &mut self,
        node: MediaConditionWithoutOrType,
    ) -> MediaConditionWithoutOrType {
        match self {
            swc_visit::Either::Left(visitor) => {
                Fold::fold_media_condition_without_or_type(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                Fold::fold_media_condition_without_or_type(visitor, node)
            }
        }
    }

    #[inline]
    fn fold_media_condition_without_or_types(
        &mut self,
        node: Vec<MediaConditionWithoutOrType>,
    ) -> Vec<MediaConditionWithoutOrType> {
        match self {
            swc_visit::Either::Left(visitor) => {
                Fold::fold_media_condition_without_or_types(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                Fold::fold_media_condition_without_or_types(visitor, node)
            }
        }
    }

    #[inline]
    fn fold_media_feature(&mut self, node: MediaFeature) -> MediaFeature {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_media_feature(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_media_feature(visitor, node),
        }
    }

    #[inline]
    fn fold_media_feature_boolean(&mut self, node: MediaFeatureBoolean) -> MediaFeatureBoolean {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_media_feature_boolean(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_media_feature_boolean(visitor, node),
        }
    }

    #[inline]
    fn fold_media_feature_name(&mut self, node: MediaFeatureName) -> MediaFeatureName {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_media_feature_name(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_media_feature_name(visitor, node),
        }
    }

    #[inline]
    fn fold_media_feature_plain(&mut self, node: MediaFeaturePlain) -> MediaFeaturePlain {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_media_feature_plain(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_media_feature_plain(visitor, node),
        }
    }

    #[inline]
    fn fold_media_feature_range(&mut self, node: MediaFeatureRange) -> MediaFeatureRange {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_media_feature_range(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_media_feature_range(visitor, node),
        }
    }

    #[inline]
    fn fold_media_feature_range_comparison(
        &mut self,
        node: MediaFeatureRangeComparison,
    ) -> MediaFeatureRangeComparison {
        match self {
            swc_visit::Either::Left(visitor) => {
                Fold::fold_media_feature_range_comparison(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                Fold::fold_media_feature_range_comparison(visitor, node)
            }
        }
    }

    #[inline]
    fn fold_media_feature_range_interval(
        &mut self,
        node: MediaFeatureRangeInterval,
    ) -> MediaFeatureRangeInterval {
        match self {
            swc_visit::Either::Left(visitor) => {
                Fold::fold_media_feature_range_interval(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                Fold::fold_media_feature_range_interval(visitor, node)
            }
        }
    }

    #[inline]
    fn fold_media_feature_value(&mut self, node: MediaFeatureValue) -> MediaFeatureValue {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_media_feature_value(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_media_feature_value(visitor, node),
        }
    }

    #[inline]
    fn fold_media_in_parens(&mut self, node: MediaInParens) -> MediaInParens {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_media_in_parens(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_media_in_parens(visitor, node),
        }
    }

    #[inline]
    fn fold_media_not(&mut self, node: MediaNot) -> MediaNot {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_media_not(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_media_not(visitor, node),
        }
    }

    #[inline]
    fn fold_media_or(&mut self, node: MediaOr) -> MediaOr {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_media_or(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_media_or(visitor, node),
        }
    }

    #[inline]
    fn fold_media_query(&mut self, node: MediaQuery) -> MediaQuery {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_media_query(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_media_query(visitor, node),
        }
    }

    #[inline]
    fn fold_media_query_list(&mut self, node: MediaQueryList) -> MediaQueryList {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_media_query_list(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_media_query_list(visitor, node),
        }
    }

    #[inline]
    fn fold_media_querys(&mut self, node: Vec<MediaQuery>) -> Vec<MediaQuery> {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_media_querys(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_media_querys(visitor, node),
        }
    }

    #[inline]
    fn fold_media_type(&mut self, node: MediaType) -> MediaType {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_media_type(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_media_type(visitor, node),
        }
    }

    #[inline]
    fn fold_named_namespace(&mut self, node: NamedNamespace) -> NamedNamespace {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_named_namespace(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_named_namespace(visitor, node),
        }
    }

    #[inline]
    fn fold_namespace(&mut self, node: Namespace) -> Namespace {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_namespace(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_namespace(visitor, node),
        }
    }

    #[inline]
    fn fold_namespace_prefix(&mut self, node: NamespacePrefix) -> NamespacePrefix {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_namespace_prefix(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_namespace_prefix(visitor, node),
        }
    }

    #[inline]
    fn fold_namespace_prelude(&mut self, node: NamespacePrelude) -> NamespacePrelude {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_namespace_prelude(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_namespace_prelude(visitor, node),
        }
    }

    #[inline]
    fn fold_namespace_prelude_uri(&mut self, node: NamespacePreludeUri) -> NamespacePreludeUri {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_namespace_prelude_uri(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_namespace_prelude_uri(visitor, node),
        }
    }

    #[inline]
    fn fold_nesting_selector(&mut self, node: NestingSelector) -> NestingSelector {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_nesting_selector(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_nesting_selector(visitor, node),
        }
    }

    #[inline]
    fn fold_number(&mut self, node: Number) -> Number {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_number(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_number(visitor, node),
        }
    }

    #[inline]
    fn fold_number_type(&mut self, node: NumberType) -> NumberType {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_number_type(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_number_type(visitor, node),
        }
    }

    #[inline]
    fn fold_opt_at_rule_prelude(
        &mut self,
        node: Option<Box<AtRulePrelude>>,
    ) -> Option<Box<AtRulePrelude>> {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_opt_at_rule_prelude(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_opt_at_rule_prelude(visitor, node),
        }
    }

    #[inline]
    fn fold_opt_atom(&mut self, node: Option<swc_atoms::Atom>) -> Option<swc_atoms::Atom> {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_opt_atom(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_opt_atom(visitor, node),
        }
    }

    #[inline]
    fn fold_opt_attribute_selector_matcher(
        &mut self,
        node: Option<AttributeSelectorMatcher>,
    ) -> Option<AttributeSelectorMatcher> {
        match self {
            swc_visit::Either::Left(visitor) => {
                Fold::fold_opt_attribute_selector_matcher(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                Fold::fold_opt_attribute_selector_matcher(visitor, node)
            }
        }
    }

    #[inline]
    fn fold_opt_attribute_selector_modifier(
        &mut self,
        node: Option<AttributeSelectorModifier>,
    ) -> Option<AttributeSelectorModifier> {
        match self {
            swc_visit::Either::Left(visitor) => {
                Fold::fold_opt_attribute_selector_modifier(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                Fold::fold_opt_attribute_selector_modifier(visitor, node)
            }
        }
    }

    #[inline]
    fn fold_opt_attribute_selector_value(
        &mut self,
        node: Option<AttributeSelectorValue>,
    ) -> Option<AttributeSelectorValue> {
        match self {
            swc_visit::Either::Left(visitor) => {
                Fold::fold_opt_attribute_selector_value(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                Fold::fold_opt_attribute_selector_value(visitor, node)
            }
        }
    }

    #[inline]
    fn fold_opt_combinator(&mut self, node: Option<Combinator>) -> Option<Combinator> {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_opt_combinator(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_opt_combinator(visitor, node),
        }
    }

    #[inline]
    fn fold_opt_container_name(&mut self, node: Option<ContainerName>) -> Option<ContainerName> {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_opt_container_name(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_opt_container_name(visitor, node),
        }
    }

    #[inline]
    fn fold_opt_forgiving_selector_list(
        &mut self,
        node: Option<ForgivingSelectorList>,
    ) -> Option<ForgivingSelectorList> {
        match self {
            swc_visit::Either::Left(visitor) => {
                Fold::fold_opt_forgiving_selector_list(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                Fold::fold_opt_forgiving_selector_list(visitor, node)
            }
        }
    }

    #[inline]
    fn fold_opt_function(&mut self, node: Option<Box<Function>>) -> Option<Box<Function>> {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_opt_function(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_opt_function(visitor, node),
        }
    }

    #[inline]
    fn fold_opt_ident(&mut self, node: Option<Ident>) -> Option<Ident> {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_opt_ident(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_opt_ident(visitor, node),
        }
    }

    #[inline]
    fn fold_opt_import_conditions(
        &mut self,
        node: Option<Box<ImportConditions>>,
    ) -> Option<Box<ImportConditions>> {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_opt_import_conditions(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_opt_import_conditions(visitor, node),
        }
    }

    #[inline]
    fn fold_opt_import_layer_name(
        &mut self,
        node: Option<Box<ImportLayerName>>,
    ) -> Option<Box<ImportLayerName>> {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_opt_import_layer_name(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_opt_import_layer_name(visitor, node),
        }
    }

    #[inline]
    fn fold_opt_important_flag(&mut self, node: Option<ImportantFlag>) -> Option<ImportantFlag> {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_opt_important_flag(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_opt_important_flag(visitor, node),
        }
    }

    #[inline]
    fn fold_opt_media_condition_type(
        &mut self,
        node: Option<Box<MediaConditionType>>,
    ) -> Option<Box<MediaConditionType>> {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_opt_media_condition_type(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_opt_media_condition_type(visitor, node),
        }
    }

    #[inline]
    fn fold_opt_media_query_list(
        &mut self,
        node: Option<Box<MediaQueryList>>,
    ) -> Option<Box<MediaQueryList>> {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_opt_media_query_list(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_opt_media_query_list(visitor, node),
        }
    }

    #[inline]
    fn fold_opt_media_type(&mut self, node: Option<MediaType>) -> Option<MediaType> {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_opt_media_type(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_opt_media_type(visitor, node),
        }
    }

    #[inline]
    fn fold_opt_namespace(&mut self, node: Option<Namespace>) -> Option<Namespace> {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_opt_namespace(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_opt_namespace(visitor, node),
        }
    }

    #[inline]
    fn fold_opt_namespace_prefix(
        &mut self,
        node: Option<NamespacePrefix>,
    ) -> Option<NamespacePrefix> {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_opt_namespace_prefix(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_opt_namespace_prefix(visitor, node),
        }
    }

    #[inline]
    fn fold_opt_nesting_selector(
        &mut self,
        node: Option<NestingSelector>,
    ) -> Option<NestingSelector> {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_opt_nesting_selector(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_opt_nesting_selector(visitor, node),
        }
    }

    #[inline]
    fn fold_opt_number(&mut self, node: Option<Number>) -> Option<Number> {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_opt_number(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_opt_number(visitor, node),
        }
    }

    #[inline]
    fn fold_opt_page_selector_pseudos(
        &mut self,
        node: Option<Vec<PageSelectorPseudo>>,
    ) -> Option<Vec<PageSelectorPseudo>> {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_opt_page_selector_pseudos(visitor, node),
            swc_visit::Either::Right(visitor) => {
                Fold::fold_opt_page_selector_pseudos(visitor, node)
            }
        }
    }

    #[inline]
    fn fold_opt_page_selector_type(
        &mut self,
        node: Option<PageSelectorType>,
    ) -> Option<PageSelectorType> {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_opt_page_selector_type(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_opt_page_selector_type(visitor, node),
        }
    }

    #[inline]
    fn fold_opt_pseudo_class_selector_childrens(
        &mut self,
        node: Option<Vec<PseudoClassSelectorChildren>>,
    ) -> Option<Vec<PseudoClassSelectorChildren>> {
        match self {
            swc_visit::Either::Left(visitor) => {
                Fold::fold_opt_pseudo_class_selector_childrens(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                Fold::fold_opt_pseudo_class_selector_childrens(visitor, node)
            }
        }
    }

    #[inline]
    fn fold_opt_pseudo_element_selector_childrens(
        &mut self,
        node: Option<Vec<PseudoElementSelectorChildren>>,
    ) -> Option<Vec<PseudoElementSelectorChildren>> {
        match self {
            swc_visit::Either::Left(visitor) => {
                Fold::fold_opt_pseudo_element_selector_childrens(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                Fold::fold_opt_pseudo_element_selector_childrens(visitor, node)
            }
        }
    }

    #[inline]
    fn fold_opt_simple_block(&mut self, node: Option<SimpleBlock>) -> Option<SimpleBlock> {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_opt_simple_block(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_opt_simple_block(visitor, node),
        }
    }

    #[inline]
    fn fold_opt_type_selector(
        &mut self,
        node: Option<Box<TypeSelector>>,
    ) -> Option<Box<TypeSelector>> {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_opt_type_selector(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_opt_type_selector(visitor, node),
        }
    }

    #[inline]
    fn fold_opt_url_modifiers(
        &mut self,
        node: Option<Vec<UrlModifier>>,
    ) -> Option<Vec<UrlModifier>> {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_opt_url_modifiers(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_opt_url_modifiers(visitor, node),
        }
    }

    #[inline]
    fn fold_opt_url_value(&mut self, node: Option<Box<UrlValue>>) -> Option<Box<UrlValue>> {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_opt_url_value(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_opt_url_value(visitor, node),
        }
    }

    #[inline]
    fn fold_page_selector(&mut self, node: PageSelector) -> PageSelector {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_page_selector(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_page_selector(visitor, node),
        }
    }

    #[inline]
    fn fold_page_selector_list(&mut self, node: PageSelectorList) -> PageSelectorList {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_page_selector_list(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_page_selector_list(visitor, node),
        }
    }

    #[inline]
    fn fold_page_selector_pseudo(&mut self, node: PageSelectorPseudo) -> PageSelectorPseudo {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_page_selector_pseudo(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_page_selector_pseudo(visitor, node),
        }
    }

    #[inline]
    fn fold_page_selector_pseudos(
        &mut self,
        node: Vec<PageSelectorPseudo>,
    ) -> Vec<PageSelectorPseudo> {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_page_selector_pseudos(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_page_selector_pseudos(visitor, node),
        }
    }

    #[inline]
    fn fold_page_selector_type(&mut self, node: PageSelectorType) -> PageSelectorType {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_page_selector_type(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_page_selector_type(visitor, node),
        }
    }

    #[inline]
    fn fold_page_selectors(&mut self, node: Vec<PageSelector>) -> Vec<PageSelector> {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_page_selectors(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_page_selectors(visitor, node),
        }
    }

    #[inline]
    fn fold_percentage(&mut self, node: Percentage) -> Percentage {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_percentage(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_percentage(visitor, node),
        }
    }

    #[inline]
    fn fold_pseudo_class_selector(&mut self, node: PseudoClassSelector) -> PseudoClassSelector {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_pseudo_class_selector(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_pseudo_class_selector(visitor, node),
        }
    }

    #[inline]
    fn fold_pseudo_class_selector_children(
        &mut self,
        node: PseudoClassSelectorChildren,
    ) -> PseudoClassSelectorChildren {
        match self {
            swc_visit::Either::Left(visitor) => {
                Fold::fold_pseudo_class_selector_children(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                Fold::fold_pseudo_class_selector_children(visitor, node)
            }
        }
    }

    #[inline]
    fn fold_pseudo_class_selector_childrens(
        &mut self,
        node: Vec<PseudoClassSelectorChildren>,
    ) -> Vec<PseudoClassSelectorChildren> {
        match self {
            swc_visit::Either::Left(visitor) => {
                Fold::fold_pseudo_class_selector_childrens(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                Fold::fold_pseudo_class_selector_childrens(visitor, node)
            }
        }
    }

    #[inline]
    fn fold_pseudo_element_selector(
        &mut self,
        node: PseudoElementSelector,
    ) -> PseudoElementSelector {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_pseudo_element_selector(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_pseudo_element_selector(visitor, node),
        }
    }

    #[inline]
    fn fold_pseudo_element_selector_children(
        &mut self,
        node: PseudoElementSelectorChildren,
    ) -> PseudoElementSelectorChildren {
        match self {
            swc_visit::Either::Left(visitor) => {
                Fold::fold_pseudo_element_selector_children(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                Fold::fold_pseudo_element_selector_children(visitor, node)
            }
        }
    }

    #[inline]
    fn fold_pseudo_element_selector_childrens(
        &mut self,
        node: Vec<PseudoElementSelectorChildren>,
    ) -> Vec<PseudoElementSelectorChildren> {
        match self {
            swc_visit::Either::Left(visitor) => {
                Fold::fold_pseudo_element_selector_childrens(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                Fold::fold_pseudo_element_selector_childrens(visitor, node)
            }
        }
    }

    #[inline]
    fn fold_qualified_rule(&mut self, node: QualifiedRule) -> QualifiedRule {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_qualified_rule(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_qualified_rule(visitor, node),
        }
    }

    #[inline]
    fn fold_qualified_rule_prelude(&mut self, node: QualifiedRulePrelude) -> QualifiedRulePrelude {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_qualified_rule_prelude(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_qualified_rule_prelude(visitor, node),
        }
    }

    #[inline]
    fn fold_query_in_parens(&mut self, node: QueryInParens) -> QueryInParens {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_query_in_parens(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_query_in_parens(visitor, node),
        }
    }

    #[inline]
    fn fold_ratio(&mut self, node: Ratio) -> Ratio {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_ratio(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_ratio(visitor, node),
        }
    }

    #[inline]
    fn fold_relative_selector(&mut self, node: RelativeSelector) -> RelativeSelector {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_relative_selector(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_relative_selector(visitor, node),
        }
    }

    #[inline]
    fn fold_relative_selector_list(&mut self, node: RelativeSelectorList) -> RelativeSelectorList {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_relative_selector_list(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_relative_selector_list(visitor, node),
        }
    }

    #[inline]
    fn fold_relative_selectors(&mut self, node: Vec<RelativeSelector>) -> Vec<RelativeSelector> {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_relative_selectors(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_relative_selectors(visitor, node),
        }
    }

    #[inline]
    fn fold_resolution(&mut self, node: Resolution) -> Resolution {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_resolution(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_resolution(visitor, node),
        }
    }

    #[inline]
    fn fold_rule(&mut self, node: Rule) -> Rule {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_rule(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_rule(visitor, node),
        }
    }

    #[inline]
    fn fold_rules(&mut self, node: Vec<Rule>) -> Vec<Rule> {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_rules(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_rules(visitor, node),
        }
    }

    #[inline]
    fn fold_scope_range(&mut self, node: ScopeRange) -> ScopeRange {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_scope_range(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_scope_range(visitor, node),
        }
    }

    #[inline]
    fn fold_selector_list(&mut self, node: SelectorList) -> SelectorList {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_selector_list(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_selector_list(visitor, node),
        }
    }

    #[inline]
    fn fold_sequence_of_custom_idents(
        &mut self,
        node: SequenceOfCustomIdents,
    ) -> SequenceOfCustomIdents {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_sequence_of_custom_idents(visitor, node),
            swc_visit::Either::Right(visitor) => {
                Fold::fold_sequence_of_custom_idents(visitor, node)
            }
        }
    }

    #[inline]
    fn fold_simple_block(&mut self, node: SimpleBlock) -> SimpleBlock {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_simple_block(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_simple_block(visitor, node),
        }
    }

    #[inline]
    fn fold_size_feature(&mut self, node: SizeFeature) -> SizeFeature {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_size_feature(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_size_feature(visitor, node),
        }
    }

    #[inline]
    fn fold_size_feature_boolean(&mut self, node: SizeFeatureBoolean) -> SizeFeatureBoolean {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_size_feature_boolean(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_size_feature_boolean(visitor, node),
        }
    }

    #[inline]
    fn fold_size_feature_name(&mut self, node: SizeFeatureName) -> SizeFeatureName {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_size_feature_name(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_size_feature_name(visitor, node),
        }
    }

    #[inline]
    fn fold_size_feature_plain(&mut self, node: SizeFeaturePlain) -> SizeFeaturePlain {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_size_feature_plain(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_size_feature_plain(visitor, node),
        }
    }

    #[inline]
    fn fold_size_feature_range(&mut self, node: SizeFeatureRange) -> SizeFeatureRange {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_size_feature_range(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_size_feature_range(visitor, node),
        }
    }

    #[inline]
    fn fold_size_feature_range_comparison(
        &mut self,
        node: SizeFeatureRangeComparison,
    ) -> SizeFeatureRangeComparison {
        match self {
            swc_visit::Either::Left(visitor) => {
                Fold::fold_size_feature_range_comparison(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                Fold::fold_size_feature_range_comparison(visitor, node)
            }
        }
    }

    #[inline]
    fn fold_size_feature_range_interval(
        &mut self,
        node: SizeFeatureRangeInterval,
    ) -> SizeFeatureRangeInterval {
        match self {
            swc_visit::Either::Left(visitor) => {
                Fold::fold_size_feature_range_interval(visitor, node)
            }
            swc_visit::Either::Right(visitor) => {
                Fold::fold_size_feature_range_interval(visitor, node)
            }
        }
    }

    #[inline]
    fn fold_size_feature_value(&mut self, node: SizeFeatureValue) -> SizeFeatureValue {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_size_feature_value(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_size_feature_value(visitor, node),
        }
    }

    #[inline]
    fn fold_span(&mut self, node: swc_common::Span) -> swc_common::Span {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_span(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_span(visitor, node),
        }
    }

    #[inline]
    fn fold_str(&mut self, node: Str) -> Str {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_str(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_str(visitor, node),
        }
    }

    #[inline]
    fn fold_style_block(&mut self, node: StyleBlock) -> StyleBlock {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_style_block(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_style_block(visitor, node),
        }
    }

    #[inline]
    fn fold_stylesheet(&mut self, node: Stylesheet) -> Stylesheet {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_stylesheet(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_stylesheet(visitor, node),
        }
    }

    #[inline]
    fn fold_subclass_selector(&mut self, node: SubclassSelector) -> SubclassSelector {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_subclass_selector(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_subclass_selector(visitor, node),
        }
    }

    #[inline]
    fn fold_subclass_selectors(&mut self, node: Vec<SubclassSelector>) -> Vec<SubclassSelector> {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_subclass_selectors(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_subclass_selectors(visitor, node),
        }
    }

    #[inline]
    fn fold_supports_and(&mut self, node: SupportsAnd) -> SupportsAnd {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_supports_and(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_supports_and(visitor, node),
        }
    }

    #[inline]
    fn fold_supports_condition(&mut self, node: SupportsCondition) -> SupportsCondition {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_supports_condition(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_supports_condition(visitor, node),
        }
    }

    #[inline]
    fn fold_supports_condition_type(
        &mut self,
        node: SupportsConditionType,
    ) -> SupportsConditionType {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_supports_condition_type(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_supports_condition_type(visitor, node),
        }
    }

    #[inline]
    fn fold_supports_condition_types(
        &mut self,
        node: Vec<SupportsConditionType>,
    ) -> Vec<SupportsConditionType> {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_supports_condition_types(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_supports_condition_types(visitor, node),
        }
    }

    #[inline]
    fn fold_supports_feature(&mut self, node: SupportsFeature) -> SupportsFeature {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_supports_feature(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_supports_feature(visitor, node),
        }
    }

    #[inline]
    fn fold_supports_in_parens(&mut self, node: SupportsInParens) -> SupportsInParens {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_supports_in_parens(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_supports_in_parens(visitor, node),
        }
    }

    #[inline]
    fn fold_supports_not(&mut self, node: SupportsNot) -> SupportsNot {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_supports_not(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_supports_not(visitor, node),
        }
    }

    #[inline]
    fn fold_supports_or(&mut self, node: SupportsOr) -> SupportsOr {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_supports_or(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_supports_or(visitor, node),
        }
    }

    #[inline]
    fn fold_tag_name_selector(&mut self, node: TagNameSelector) -> TagNameSelector {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_tag_name_selector(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_tag_name_selector(visitor, node),
        }
    }

    #[inline]
    fn fold_time(&mut self, node: Time) -> Time {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_time(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_time(visitor, node),
        }
    }

    #[inline]
    fn fold_time_percentage(&mut self, node: TimePercentage) -> TimePercentage {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_time_percentage(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_time_percentage(visitor, node),
        }
    }

    #[inline]
    fn fold_token(&mut self, node: Token) -> Token {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_token(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_token(visitor, node),
        }
    }

    #[inline]
    fn fold_token_and_span(&mut self, node: TokenAndSpan) -> TokenAndSpan {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_token_and_span(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_token_and_span(visitor, node),
        }
    }

    #[inline]
    fn fold_type_selector(&mut self, node: TypeSelector) -> TypeSelector {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_type_selector(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_type_selector(visitor, node),
        }
    }

    #[inline]
    fn fold_unicode_range(&mut self, node: UnicodeRange) -> UnicodeRange {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_unicode_range(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_unicode_range(visitor, node),
        }
    }

    #[inline]
    fn fold_universal_selector(&mut self, node: UniversalSelector) -> UniversalSelector {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_universal_selector(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_universal_selector(visitor, node),
        }
    }

    #[inline]
    fn fold_unknown_dimension(&mut self, node: UnknownDimension) -> UnknownDimension {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_unknown_dimension(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_unknown_dimension(visitor, node),
        }
    }

    #[inline]
    fn fold_url(&mut self, node: Url) -> Url {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_url(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_url(visitor, node),
        }
    }

    #[inline]
    fn fold_url_key_value(&mut self, node: UrlKeyValue) -> UrlKeyValue {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_url_key_value(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_url_key_value(visitor, node),
        }
    }

    #[inline]
    fn fold_url_modifier(&mut self, node: UrlModifier) -> UrlModifier {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_url_modifier(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_url_modifier(visitor, node),
        }
    }

    #[inline]
    fn fold_url_modifiers(&mut self, node: Vec<UrlModifier>) -> Vec<UrlModifier> {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_url_modifiers(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_url_modifiers(visitor, node),
        }
    }

    #[inline]
    fn fold_url_value(&mut self, node: UrlValue) -> UrlValue {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_url_value(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_url_value(visitor, node),
        }
    }

    #[inline]
    fn fold_url_value_raw(&mut self, node: UrlValueRaw) -> UrlValueRaw {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_url_value_raw(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_url_value_raw(visitor, node),
        }
    }

    #[inline]
    fn fold_wq_name(&mut self, node: WqName) -> WqName {
        match self {
            swc_visit::Either::Left(visitor) => Fold::fold_wq_name(visitor, node),
            swc_visit::Either::Right(visitor) => Fold::fold_wq_name(visitor, node),
        }
    }
}
impl<V> Fold for ::swc_visit::Optional<V>
where
    V: Fold,
{
    #[inline]
    fn fold_absolute_color_base(&mut self, node: AbsoluteColorBase) -> AbsoluteColorBase {
        if self.enabled {
            <V as Fold>::fold_absolute_color_base(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_alpha_value(&mut self, node: AlphaValue) -> AlphaValue {
        if self.enabled {
            <V as Fold>::fold_alpha_value(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_an_plus_b(&mut self, node: AnPlusB) -> AnPlusB {
        if self.enabled {
            <V as Fold>::fold_an_plus_b(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_an_plus_b_notation(&mut self, node: AnPlusBNotation) -> AnPlusBNotation {
        if self.enabled {
            <V as Fold>::fold_an_plus_b_notation(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_angle(&mut self, node: Angle) -> Angle {
        if self.enabled {
            <V as Fold>::fold_angle(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_angle_percentage(&mut self, node: AnglePercentage) -> AnglePercentage {
        if self.enabled {
            <V as Fold>::fold_angle_percentage(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_any_namespace(&mut self, node: AnyNamespace) -> AnyNamespace {
        if self.enabled {
            <V as Fold>::fold_any_namespace(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_at_rule(&mut self, node: AtRule) -> AtRule {
        if self.enabled {
            <V as Fold>::fold_at_rule(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_at_rule_name(&mut self, node: AtRuleName) -> AtRuleName {
        if self.enabled {
            <V as Fold>::fold_at_rule_name(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_at_rule_prelude(&mut self, node: AtRulePrelude) -> AtRulePrelude {
        if self.enabled {
            <V as Fold>::fold_at_rule_prelude(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_atom(&mut self, node: swc_atoms::Atom) -> swc_atoms::Atom {
        if self.enabled {
            <V as Fold>::fold_atom(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_attribute_selector(&mut self, node: AttributeSelector) -> AttributeSelector {
        if self.enabled {
            <V as Fold>::fold_attribute_selector(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_attribute_selector_matcher(
        &mut self,
        node: AttributeSelectorMatcher,
    ) -> AttributeSelectorMatcher {
        if self.enabled {
            <V as Fold>::fold_attribute_selector_matcher(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_attribute_selector_matcher_value(
        &mut self,
        node: AttributeSelectorMatcherValue,
    ) -> AttributeSelectorMatcherValue {
        if self.enabled {
            <V as Fold>::fold_attribute_selector_matcher_value(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_attribute_selector_modifier(
        &mut self,
        node: AttributeSelectorModifier,
    ) -> AttributeSelectorModifier {
        if self.enabled {
            <V as Fold>::fold_attribute_selector_modifier(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_attribute_selector_value(
        &mut self,
        node: AttributeSelectorValue,
    ) -> AttributeSelectorValue {
        if self.enabled {
            <V as Fold>::fold_attribute_selector_value(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_bin_op(&mut self, node: BinOp) -> BinOp {
        if self.enabled {
            <V as Fold>::fold_bin_op(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_calc_operator(&mut self, node: CalcOperator) -> CalcOperator {
        if self.enabled {
            <V as Fold>::fold_calc_operator(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_calc_operator_type(&mut self, node: CalcOperatorType) -> CalcOperatorType {
        if self.enabled {
            <V as Fold>::fold_calc_operator_type(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_calc_product(&mut self, node: CalcProduct) -> CalcProduct {
        if self.enabled {
            <V as Fold>::fold_calc_product(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_calc_product_or_operator(
        &mut self,
        node: CalcProductOrOperator,
    ) -> CalcProductOrOperator {
        if self.enabled {
            <V as Fold>::fold_calc_product_or_operator(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_calc_product_or_operators(
        &mut self,
        node: Vec<CalcProductOrOperator>,
    ) -> Vec<CalcProductOrOperator> {
        if self.enabled {
            <V as Fold>::fold_calc_product_or_operators(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_calc_sum(&mut self, node: CalcSum) -> CalcSum {
        if self.enabled {
            <V as Fold>::fold_calc_sum(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_calc_value(&mut self, node: CalcValue) -> CalcValue {
        if self.enabled {
            <V as Fold>::fold_calc_value(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_calc_value_or_operator(&mut self, node: CalcValueOrOperator) -> CalcValueOrOperator {
        if self.enabled {
            <V as Fold>::fold_calc_value_or_operator(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_calc_value_or_operators(
        &mut self,
        node: Vec<CalcValueOrOperator>,
    ) -> Vec<CalcValueOrOperator> {
        if self.enabled {
            <V as Fold>::fold_calc_value_or_operators(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_class_selector(&mut self, node: ClassSelector) -> ClassSelector {
        if self.enabled {
            <V as Fold>::fold_class_selector(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_cmyk_component(&mut self, node: CmykComponent) -> CmykComponent {
        if self.enabled {
            <V as Fold>::fold_cmyk_component(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_color(&mut self, node: Color) -> Color {
        if self.enabled {
            <V as Fold>::fold_color(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_color_profile_name(&mut self, node: ColorProfileName) -> ColorProfileName {
        if self.enabled {
            <V as Fold>::fold_color_profile_name(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_combinator(&mut self, node: Combinator) -> Combinator {
        if self.enabled {
            <V as Fold>::fold_combinator(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_combinator_value(&mut self, node: CombinatorValue) -> CombinatorValue {
        if self.enabled {
            <V as Fold>::fold_combinator_value(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_complex_selector(&mut self, node: ComplexSelector) -> ComplexSelector {
        if self.enabled {
            <V as Fold>::fold_complex_selector(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_complex_selector_children(
        &mut self,
        node: ComplexSelectorChildren,
    ) -> ComplexSelectorChildren {
        if self.enabled {
            <V as Fold>::fold_complex_selector_children(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_complex_selector_childrens(
        &mut self,
        node: Vec<ComplexSelectorChildren>,
    ) -> Vec<ComplexSelectorChildren> {
        if self.enabled {
            <V as Fold>::fold_complex_selector_childrens(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_complex_selectors(&mut self, node: Vec<ComplexSelector>) -> Vec<ComplexSelector> {
        if self.enabled {
            <V as Fold>::fold_complex_selectors(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_component_value(&mut self, node: ComponentValue) -> ComponentValue {
        if self.enabled {
            <V as Fold>::fold_component_value(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_component_values(&mut self, node: Vec<ComponentValue>) -> Vec<ComponentValue> {
        if self.enabled {
            <V as Fold>::fold_component_values(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_compound_selector(&mut self, node: CompoundSelector) -> CompoundSelector {
        if self.enabled {
            <V as Fold>::fold_compound_selector(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_compound_selector_list(&mut self, node: CompoundSelectorList) -> CompoundSelectorList {
        if self.enabled {
            <V as Fold>::fold_compound_selector_list(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_compound_selectors(&mut self, node: Vec<CompoundSelector>) -> Vec<CompoundSelector> {
        if self.enabled {
            <V as Fold>::fold_compound_selectors(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_container_condition(&mut self, node: ContainerCondition) -> ContainerCondition {
        if self.enabled {
            <V as Fold>::fold_container_condition(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_container_name(&mut self, node: ContainerName) -> ContainerName {
        if self.enabled {
            <V as Fold>::fold_container_name(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_container_query(&mut self, node: ContainerQuery) -> ContainerQuery {
        if self.enabled {
            <V as Fold>::fold_container_query(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_container_query_and(&mut self, node: ContainerQueryAnd) -> ContainerQueryAnd {
        if self.enabled {
            <V as Fold>::fold_container_query_and(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_container_query_not(&mut self, node: ContainerQueryNot) -> ContainerQueryNot {
        if self.enabled {
            <V as Fold>::fold_container_query_not(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_container_query_or(&mut self, node: ContainerQueryOr) -> ContainerQueryOr {
        if self.enabled {
            <V as Fold>::fold_container_query_or(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_container_query_type(&mut self, node: ContainerQueryType) -> ContainerQueryType {
        if self.enabled {
            <V as Fold>::fold_container_query_type(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_container_query_types(
        &mut self,
        node: Vec<ContainerQueryType>,
    ) -> Vec<ContainerQueryType> {
        if self.enabled {
            <V as Fold>::fold_container_query_types(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_custom_highlight_name(&mut self, node: CustomHighlightName) -> CustomHighlightName {
        if self.enabled {
            <V as Fold>::fold_custom_highlight_name(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_custom_ident(&mut self, node: CustomIdent) -> CustomIdent {
        if self.enabled {
            <V as Fold>::fold_custom_ident(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_custom_idents(&mut self, node: Vec<CustomIdent>) -> Vec<CustomIdent> {
        if self.enabled {
            <V as Fold>::fold_custom_idents(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_custom_media_query(&mut self, node: CustomMediaQuery) -> CustomMediaQuery {
        if self.enabled {
            <V as Fold>::fold_custom_media_query(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_custom_media_query_media_type(
        &mut self,
        node: CustomMediaQueryMediaType,
    ) -> CustomMediaQueryMediaType {
        if self.enabled {
            <V as Fold>::fold_custom_media_query_media_type(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_custom_property_name(&mut self, node: CustomPropertyName) -> CustomPropertyName {
        if self.enabled {
            <V as Fold>::fold_custom_property_name(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_dashed_ident(&mut self, node: DashedIdent) -> DashedIdent {
        if self.enabled {
            <V as Fold>::fold_dashed_ident(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_declaration(&mut self, node: Declaration) -> Declaration {
        if self.enabled {
            <V as Fold>::fold_declaration(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_declaration_name(&mut self, node: DeclarationName) -> DeclarationName {
        if self.enabled {
            <V as Fold>::fold_declaration_name(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_declaration_or_at_rule(&mut self, node: DeclarationOrAtRule) -> DeclarationOrAtRule {
        if self.enabled {
            <V as Fold>::fold_declaration_or_at_rule(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_delimiter(&mut self, node: Delimiter) -> Delimiter {
        if self.enabled {
            <V as Fold>::fold_delimiter(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_delimiter_value(&mut self, node: DelimiterValue) -> DelimiterValue {
        if self.enabled {
            <V as Fold>::fold_delimiter_value(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_dimension(&mut self, node: Dimension) -> Dimension {
        if self.enabled {
            <V as Fold>::fold_dimension(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_dimension_token(&mut self, node: DimensionToken) -> DimensionToken {
        if self.enabled {
            <V as Fold>::fold_dimension_token(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_document_prelude(&mut self, node: DocumentPrelude) -> DocumentPrelude {
        if self.enabled {
            <V as Fold>::fold_document_prelude(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_document_prelude_matching_function(
        &mut self,
        node: DocumentPreludeMatchingFunction,
    ) -> DocumentPreludeMatchingFunction {
        if self.enabled {
            <V as Fold>::fold_document_prelude_matching_function(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_document_prelude_matching_functions(
        &mut self,
        node: Vec<DocumentPreludeMatchingFunction>,
    ) -> Vec<DocumentPreludeMatchingFunction> {
        if self.enabled {
            <V as Fold>::fold_document_prelude_matching_functions(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_extension_name(&mut self, node: ExtensionName) -> ExtensionName {
        if self.enabled {
            <V as Fold>::fold_extension_name(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_family_name(&mut self, node: FamilyName) -> FamilyName {
        if self.enabled {
            <V as Fold>::fold_family_name(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_family_names(&mut self, node: Vec<FamilyName>) -> Vec<FamilyName> {
        if self.enabled {
            <V as Fold>::fold_family_names(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_flex(&mut self, node: Flex) -> Flex {
        if self.enabled {
            <V as Fold>::fold_flex(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_font_feature_values_prelude(
        &mut self,
        node: FontFeatureValuesPrelude,
    ) -> FontFeatureValuesPrelude {
        if self.enabled {
            <V as Fold>::fold_font_feature_values_prelude(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_forgiving_complex_selector(
        &mut self,
        node: ForgivingComplexSelector,
    ) -> ForgivingComplexSelector {
        if self.enabled {
            <V as Fold>::fold_forgiving_complex_selector(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_forgiving_complex_selectors(
        &mut self,
        node: Vec<ForgivingComplexSelector>,
    ) -> Vec<ForgivingComplexSelector> {
        if self.enabled {
            <V as Fold>::fold_forgiving_complex_selectors(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_forgiving_relative_selector(
        &mut self,
        node: ForgivingRelativeSelector,
    ) -> ForgivingRelativeSelector {
        if self.enabled {
            <V as Fold>::fold_forgiving_relative_selector(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_forgiving_relative_selector_list(
        &mut self,
        node: ForgivingRelativeSelectorList,
    ) -> ForgivingRelativeSelectorList {
        if self.enabled {
            <V as Fold>::fold_forgiving_relative_selector_list(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_forgiving_relative_selectors(
        &mut self,
        node: Vec<ForgivingRelativeSelector>,
    ) -> Vec<ForgivingRelativeSelector> {
        if self.enabled {
            <V as Fold>::fold_forgiving_relative_selectors(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_forgiving_selector_list(
        &mut self,
        node: ForgivingSelectorList,
    ) -> ForgivingSelectorList {
        if self.enabled {
            <V as Fold>::fold_forgiving_selector_list(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_frequency(&mut self, node: Frequency) -> Frequency {
        if self.enabled {
            <V as Fold>::fold_frequency(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_frequency_percentage(&mut self, node: FrequencyPercentage) -> FrequencyPercentage {
        if self.enabled {
            <V as Fold>::fold_frequency_percentage(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_function(&mut self, node: Function) -> Function {
        if self.enabled {
            <V as Fold>::fold_function(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_function_name(&mut self, node: FunctionName) -> FunctionName {
        if self.enabled {
            <V as Fold>::fold_function_name(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_general_enclosed(&mut self, node: GeneralEnclosed) -> GeneralEnclosed {
        if self.enabled {
            <V as Fold>::fold_general_enclosed(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_hex_color(&mut self, node: HexColor) -> HexColor {
        if self.enabled {
            <V as Fold>::fold_hex_color(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_hue(&mut self, node: Hue) -> Hue {
        if self.enabled {
            <V as Fold>::fold_hue(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_id_selector(&mut self, node: IdSelector) -> IdSelector {
        if self.enabled {
            <V as Fold>::fold_id_selector(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_ident(&mut self, node: Ident) -> Ident {
        if self.enabled {
            <V as Fold>::fold_ident(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_idents(&mut self, node: Vec<Ident>) -> Vec<Ident> {
        if self.enabled {
            <V as Fold>::fold_idents(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_import_conditions(&mut self, node: ImportConditions) -> ImportConditions {
        if self.enabled {
            <V as Fold>::fold_import_conditions(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_import_href(&mut self, node: ImportHref) -> ImportHref {
        if self.enabled {
            <V as Fold>::fold_import_href(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_import_layer_name(&mut self, node: ImportLayerName) -> ImportLayerName {
        if self.enabled {
            <V as Fold>::fold_import_layer_name(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_import_prelude(&mut self, node: ImportPrelude) -> ImportPrelude {
        if self.enabled {
            <V as Fold>::fold_import_prelude(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_important_flag(&mut self, node: ImportantFlag) -> ImportantFlag {
        if self.enabled {
            <V as Fold>::fold_important_flag(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_integer(&mut self, node: Integer) -> Integer {
        if self.enabled {
            <V as Fold>::fold_integer(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_keyframe_block(&mut self, node: KeyframeBlock) -> KeyframeBlock {
        if self.enabled {
            <V as Fold>::fold_keyframe_block(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_keyframe_selector(&mut self, node: KeyframeSelector) -> KeyframeSelector {
        if self.enabled {
            <V as Fold>::fold_keyframe_selector(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_keyframe_selectors(&mut self, node: Vec<KeyframeSelector>) -> Vec<KeyframeSelector> {
        if self.enabled {
            <V as Fold>::fold_keyframe_selectors(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_keyframes_name(&mut self, node: KeyframesName) -> KeyframesName {
        if self.enabled {
            <V as Fold>::fold_keyframes_name(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_keyframes_pseudo_function(
        &mut self,
        node: KeyframesPseudoFunction,
    ) -> KeyframesPseudoFunction {
        if self.enabled {
            <V as Fold>::fold_keyframes_pseudo_function(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_keyframes_pseudo_prefix(
        &mut self,
        node: KeyframesPseudoPrefix,
    ) -> KeyframesPseudoPrefix {
        if self.enabled {
            <V as Fold>::fold_keyframes_pseudo_prefix(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_layer_name(&mut self, node: LayerName) -> LayerName {
        if self.enabled {
            <V as Fold>::fold_layer_name(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_layer_name_list(&mut self, node: LayerNameList) -> LayerNameList {
        if self.enabled {
            <V as Fold>::fold_layer_name_list(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_layer_names(&mut self, node: Vec<LayerName>) -> Vec<LayerName> {
        if self.enabled {
            <V as Fold>::fold_layer_names(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_layer_prelude(&mut self, node: LayerPrelude) -> LayerPrelude {
        if self.enabled {
            <V as Fold>::fold_layer_prelude(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_length(&mut self, node: Length) -> Length {
        if self.enabled {
            <V as Fold>::fold_length(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_length_percentage(&mut self, node: LengthPercentage) -> LengthPercentage {
        if self.enabled {
            <V as Fold>::fold_length_percentage(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_list_of_component_values(
        &mut self,
        node: ListOfComponentValues,
    ) -> ListOfComponentValues {
        if self.enabled {
            <V as Fold>::fold_list_of_component_values(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_media_and(&mut self, node: MediaAnd) -> MediaAnd {
        if self.enabled {
            <V as Fold>::fold_media_and(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_media_condition(&mut self, node: MediaCondition) -> MediaCondition {
        if self.enabled {
            <V as Fold>::fold_media_condition(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_media_condition_all_type(
        &mut self,
        node: MediaConditionAllType,
    ) -> MediaConditionAllType {
        if self.enabled {
            <V as Fold>::fold_media_condition_all_type(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_media_condition_all_types(
        &mut self,
        node: Vec<MediaConditionAllType>,
    ) -> Vec<MediaConditionAllType> {
        if self.enabled {
            <V as Fold>::fold_media_condition_all_types(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_media_condition_type(&mut self, node: MediaConditionType) -> MediaConditionType {
        if self.enabled {
            <V as Fold>::fold_media_condition_type(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_media_condition_without_or(
        &mut self,
        node: MediaConditionWithoutOr,
    ) -> MediaConditionWithoutOr {
        if self.enabled {
            <V as Fold>::fold_media_condition_without_or(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_media_condition_without_or_type(
        &mut self,
        node: MediaConditionWithoutOrType,
    ) -> MediaConditionWithoutOrType {
        if self.enabled {
            <V as Fold>::fold_media_condition_without_or_type(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_media_condition_without_or_types(
        &mut self,
        node: Vec<MediaConditionWithoutOrType>,
    ) -> Vec<MediaConditionWithoutOrType> {
        if self.enabled {
            <V as Fold>::fold_media_condition_without_or_types(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_media_feature(&mut self, node: MediaFeature) -> MediaFeature {
        if self.enabled {
            <V as Fold>::fold_media_feature(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_media_feature_boolean(&mut self, node: MediaFeatureBoolean) -> MediaFeatureBoolean {
        if self.enabled {
            <V as Fold>::fold_media_feature_boolean(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_media_feature_name(&mut self, node: MediaFeatureName) -> MediaFeatureName {
        if self.enabled {
            <V as Fold>::fold_media_feature_name(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_media_feature_plain(&mut self, node: MediaFeaturePlain) -> MediaFeaturePlain {
        if self.enabled {
            <V as Fold>::fold_media_feature_plain(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_media_feature_range(&mut self, node: MediaFeatureRange) -> MediaFeatureRange {
        if self.enabled {
            <V as Fold>::fold_media_feature_range(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_media_feature_range_comparison(
        &mut self,
        node: MediaFeatureRangeComparison,
    ) -> MediaFeatureRangeComparison {
        if self.enabled {
            <V as Fold>::fold_media_feature_range_comparison(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_media_feature_range_interval(
        &mut self,
        node: MediaFeatureRangeInterval,
    ) -> MediaFeatureRangeInterval {
        if self.enabled {
            <V as Fold>::fold_media_feature_range_interval(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_media_feature_value(&mut self, node: MediaFeatureValue) -> MediaFeatureValue {
        if self.enabled {
            <V as Fold>::fold_media_feature_value(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_media_in_parens(&mut self, node: MediaInParens) -> MediaInParens {
        if self.enabled {
            <V as Fold>::fold_media_in_parens(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_media_not(&mut self, node: MediaNot) -> MediaNot {
        if self.enabled {
            <V as Fold>::fold_media_not(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_media_or(&mut self, node: MediaOr) -> MediaOr {
        if self.enabled {
            <V as Fold>::fold_media_or(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_media_query(&mut self, node: MediaQuery) -> MediaQuery {
        if self.enabled {
            <V as Fold>::fold_media_query(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_media_query_list(&mut self, node: MediaQueryList) -> MediaQueryList {
        if self.enabled {
            <V as Fold>::fold_media_query_list(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_media_querys(&mut self, node: Vec<MediaQuery>) -> Vec<MediaQuery> {
        if self.enabled {
            <V as Fold>::fold_media_querys(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_media_type(&mut self, node: MediaType) -> MediaType {
        if self.enabled {
            <V as Fold>::fold_media_type(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_named_namespace(&mut self, node: NamedNamespace) -> NamedNamespace {
        if self.enabled {
            <V as Fold>::fold_named_namespace(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_namespace(&mut self, node: Namespace) -> Namespace {
        if self.enabled {
            <V as Fold>::fold_namespace(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_namespace_prefix(&mut self, node: NamespacePrefix) -> NamespacePrefix {
        if self.enabled {
            <V as Fold>::fold_namespace_prefix(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_namespace_prelude(&mut self, node: NamespacePrelude) -> NamespacePrelude {
        if self.enabled {
            <V as Fold>::fold_namespace_prelude(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_namespace_prelude_uri(&mut self, node: NamespacePreludeUri) -> NamespacePreludeUri {
        if self.enabled {
            <V as Fold>::fold_namespace_prelude_uri(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_nesting_selector(&mut self, node: NestingSelector) -> NestingSelector {
        if self.enabled {
            <V as Fold>::fold_nesting_selector(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_number(&mut self, node: Number) -> Number {
        if self.enabled {
            <V as Fold>::fold_number(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_number_type(&mut self, node: NumberType) -> NumberType {
        if self.enabled {
            <V as Fold>::fold_number_type(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_opt_at_rule_prelude(
        &mut self,
        node: Option<Box<AtRulePrelude>>,
    ) -> Option<Box<AtRulePrelude>> {
        if self.enabled {
            <V as Fold>::fold_opt_at_rule_prelude(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_opt_atom(&mut self, node: Option<swc_atoms::Atom>) -> Option<swc_atoms::Atom> {
        if self.enabled {
            <V as Fold>::fold_opt_atom(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_opt_attribute_selector_matcher(
        &mut self,
        node: Option<AttributeSelectorMatcher>,
    ) -> Option<AttributeSelectorMatcher> {
        if self.enabled {
            <V as Fold>::fold_opt_attribute_selector_matcher(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_opt_attribute_selector_modifier(
        &mut self,
        node: Option<AttributeSelectorModifier>,
    ) -> Option<AttributeSelectorModifier> {
        if self.enabled {
            <V as Fold>::fold_opt_attribute_selector_modifier(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_opt_attribute_selector_value(
        &mut self,
        node: Option<AttributeSelectorValue>,
    ) -> Option<AttributeSelectorValue> {
        if self.enabled {
            <V as Fold>::fold_opt_attribute_selector_value(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_opt_combinator(&mut self, node: Option<Combinator>) -> Option<Combinator> {
        if self.enabled {
            <V as Fold>::fold_opt_combinator(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_opt_container_name(&mut self, node: Option<ContainerName>) -> Option<ContainerName> {
        if self.enabled {
            <V as Fold>::fold_opt_container_name(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_opt_forgiving_selector_list(
        &mut self,
        node: Option<ForgivingSelectorList>,
    ) -> Option<ForgivingSelectorList> {
        if self.enabled {
            <V as Fold>::fold_opt_forgiving_selector_list(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_opt_function(&mut self, node: Option<Box<Function>>) -> Option<Box<Function>> {
        if self.enabled {
            <V as Fold>::fold_opt_function(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_opt_ident(&mut self, node: Option<Ident>) -> Option<Ident> {
        if self.enabled {
            <V as Fold>::fold_opt_ident(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_opt_import_conditions(
        &mut self,
        node: Option<Box<ImportConditions>>,
    ) -> Option<Box<ImportConditions>> {
        if self.enabled {
            <V as Fold>::fold_opt_import_conditions(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_opt_import_layer_name(
        &mut self,
        node: Option<Box<ImportLayerName>>,
    ) -> Option<Box<ImportLayerName>> {
        if self.enabled {
            <V as Fold>::fold_opt_import_layer_name(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_opt_important_flag(&mut self, node: Option<ImportantFlag>) -> Option<ImportantFlag> {
        if self.enabled {
            <V as Fold>::fold_opt_important_flag(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_opt_media_condition_type(
        &mut self,
        node: Option<Box<MediaConditionType>>,
    ) -> Option<Box<MediaConditionType>> {
        if self.enabled {
            <V as Fold>::fold_opt_media_condition_type(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_opt_media_query_list(
        &mut self,
        node: Option<Box<MediaQueryList>>,
    ) -> Option<Box<MediaQueryList>> {
        if self.enabled {
            <V as Fold>::fold_opt_media_query_list(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_opt_media_type(&mut self, node: Option<MediaType>) -> Option<MediaType> {
        if self.enabled {
            <V as Fold>::fold_opt_media_type(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_opt_namespace(&mut self, node: Option<Namespace>) -> Option<Namespace> {
        if self.enabled {
            <V as Fold>::fold_opt_namespace(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_opt_namespace_prefix(
        &mut self,
        node: Option<NamespacePrefix>,
    ) -> Option<NamespacePrefix> {
        if self.enabled {
            <V as Fold>::fold_opt_namespace_prefix(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_opt_nesting_selector(
        &mut self,
        node: Option<NestingSelector>,
    ) -> Option<NestingSelector> {
        if self.enabled {
            <V as Fold>::fold_opt_nesting_selector(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_opt_number(&mut self, node: Option<Number>) -> Option<Number> {
        if self.enabled {
            <V as Fold>::fold_opt_number(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_opt_page_selector_pseudos(
        &mut self,
        node: Option<Vec<PageSelectorPseudo>>,
    ) -> Option<Vec<PageSelectorPseudo>> {
        if self.enabled {
            <V as Fold>::fold_opt_page_selector_pseudos(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_opt_page_selector_type(
        &mut self,
        node: Option<PageSelectorType>,
    ) -> Option<PageSelectorType> {
        if self.enabled {
            <V as Fold>::fold_opt_page_selector_type(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_opt_pseudo_class_selector_childrens(
        &mut self,
        node: Option<Vec<PseudoClassSelectorChildren>>,
    ) -> Option<Vec<PseudoClassSelectorChildren>> {
        if self.enabled {
            <V as Fold>::fold_opt_pseudo_class_selector_childrens(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_opt_pseudo_element_selector_childrens(
        &mut self,
        node: Option<Vec<PseudoElementSelectorChildren>>,
    ) -> Option<Vec<PseudoElementSelectorChildren>> {
        if self.enabled {
            <V as Fold>::fold_opt_pseudo_element_selector_childrens(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_opt_simple_block(&mut self, node: Option<SimpleBlock>) -> Option<SimpleBlock> {
        if self.enabled {
            <V as Fold>::fold_opt_simple_block(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_opt_type_selector(
        &mut self,
        node: Option<Box<TypeSelector>>,
    ) -> Option<Box<TypeSelector>> {
        if self.enabled {
            <V as Fold>::fold_opt_type_selector(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_opt_url_modifiers(
        &mut self,
        node: Option<Vec<UrlModifier>>,
    ) -> Option<Vec<UrlModifier>> {
        if self.enabled {
            <V as Fold>::fold_opt_url_modifiers(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_opt_url_value(&mut self, node: Option<Box<UrlValue>>) -> Option<Box<UrlValue>> {
        if self.enabled {
            <V as Fold>::fold_opt_url_value(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_page_selector(&mut self, node: PageSelector) -> PageSelector {
        if self.enabled {
            <V as Fold>::fold_page_selector(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_page_selector_list(&mut self, node: PageSelectorList) -> PageSelectorList {
        if self.enabled {
            <V as Fold>::fold_page_selector_list(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_page_selector_pseudo(&mut self, node: PageSelectorPseudo) -> PageSelectorPseudo {
        if self.enabled {
            <V as Fold>::fold_page_selector_pseudo(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_page_selector_pseudos(
        &mut self,
        node: Vec<PageSelectorPseudo>,
    ) -> Vec<PageSelectorPseudo> {
        if self.enabled {
            <V as Fold>::fold_page_selector_pseudos(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_page_selector_type(&mut self, node: PageSelectorType) -> PageSelectorType {
        if self.enabled {
            <V as Fold>::fold_page_selector_type(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_page_selectors(&mut self, node: Vec<PageSelector>) -> Vec<PageSelector> {
        if self.enabled {
            <V as Fold>::fold_page_selectors(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_percentage(&mut self, node: Percentage) -> Percentage {
        if self.enabled {
            <V as Fold>::fold_percentage(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_pseudo_class_selector(&mut self, node: PseudoClassSelector) -> PseudoClassSelector {
        if self.enabled {
            <V as Fold>::fold_pseudo_class_selector(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_pseudo_class_selector_children(
        &mut self,
        node: PseudoClassSelectorChildren,
    ) -> PseudoClassSelectorChildren {
        if self.enabled {
            <V as Fold>::fold_pseudo_class_selector_children(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_pseudo_class_selector_childrens(
        &mut self,
        node: Vec<PseudoClassSelectorChildren>,
    ) -> Vec<PseudoClassSelectorChildren> {
        if self.enabled {
            <V as Fold>::fold_pseudo_class_selector_childrens(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_pseudo_element_selector(
        &mut self,
        node: PseudoElementSelector,
    ) -> PseudoElementSelector {
        if self.enabled {
            <V as Fold>::fold_pseudo_element_selector(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_pseudo_element_selector_children(
        &mut self,
        node: PseudoElementSelectorChildren,
    ) -> PseudoElementSelectorChildren {
        if self.enabled {
            <V as Fold>::fold_pseudo_element_selector_children(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_pseudo_element_selector_childrens(
        &mut self,
        node: Vec<PseudoElementSelectorChildren>,
    ) -> Vec<PseudoElementSelectorChildren> {
        if self.enabled {
            <V as Fold>::fold_pseudo_element_selector_childrens(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_qualified_rule(&mut self, node: QualifiedRule) -> QualifiedRule {
        if self.enabled {
            <V as Fold>::fold_qualified_rule(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_qualified_rule_prelude(&mut self, node: QualifiedRulePrelude) -> QualifiedRulePrelude {
        if self.enabled {
            <V as Fold>::fold_qualified_rule_prelude(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_query_in_parens(&mut self, node: QueryInParens) -> QueryInParens {
        if self.enabled {
            <V as Fold>::fold_query_in_parens(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_ratio(&mut self, node: Ratio) -> Ratio {
        if self.enabled {
            <V as Fold>::fold_ratio(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_relative_selector(&mut self, node: RelativeSelector) -> RelativeSelector {
        if self.enabled {
            <V as Fold>::fold_relative_selector(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_relative_selector_list(&mut self, node: RelativeSelectorList) -> RelativeSelectorList {
        if self.enabled {
            <V as Fold>::fold_relative_selector_list(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_relative_selectors(&mut self, node: Vec<RelativeSelector>) -> Vec<RelativeSelector> {
        if self.enabled {
            <V as Fold>::fold_relative_selectors(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_resolution(&mut self, node: Resolution) -> Resolution {
        if self.enabled {
            <V as Fold>::fold_resolution(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_rule(&mut self, node: Rule) -> Rule {
        if self.enabled {
            <V as Fold>::fold_rule(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_rules(&mut self, node: Vec<Rule>) -> Vec<Rule> {
        if self.enabled {
            <V as Fold>::fold_rules(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_scope_range(&mut self, node: ScopeRange) -> ScopeRange {
        if self.enabled {
            <V as Fold>::fold_scope_range(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_selector_list(&mut self, node: SelectorList) -> SelectorList {
        if self.enabled {
            <V as Fold>::fold_selector_list(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_sequence_of_custom_idents(
        &mut self,
        node: SequenceOfCustomIdents,
    ) -> SequenceOfCustomIdents {
        if self.enabled {
            <V as Fold>::fold_sequence_of_custom_idents(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_simple_block(&mut self, node: SimpleBlock) -> SimpleBlock {
        if self.enabled {
            <V as Fold>::fold_simple_block(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_size_feature(&mut self, node: SizeFeature) -> SizeFeature {
        if self.enabled {
            <V as Fold>::fold_size_feature(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_size_feature_boolean(&mut self, node: SizeFeatureBoolean) -> SizeFeatureBoolean {
        if self.enabled {
            <V as Fold>::fold_size_feature_boolean(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_size_feature_name(&mut self, node: SizeFeatureName) -> SizeFeatureName {
        if self.enabled {
            <V as Fold>::fold_size_feature_name(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_size_feature_plain(&mut self, node: SizeFeaturePlain) -> SizeFeaturePlain {
        if self.enabled {
            <V as Fold>::fold_size_feature_plain(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_size_feature_range(&mut self, node: SizeFeatureRange) -> SizeFeatureRange {
        if self.enabled {
            <V as Fold>::fold_size_feature_range(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_size_feature_range_comparison(
        &mut self,
        node: SizeFeatureRangeComparison,
    ) -> SizeFeatureRangeComparison {
        if self.enabled {
            <V as Fold>::fold_size_feature_range_comparison(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_size_feature_range_interval(
        &mut self,
        node: SizeFeatureRangeInterval,
    ) -> SizeFeatureRangeInterval {
        if self.enabled {
            <V as Fold>::fold_size_feature_range_interval(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_size_feature_value(&mut self, node: SizeFeatureValue) -> SizeFeatureValue {
        if self.enabled {
            <V as Fold>::fold_size_feature_value(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_span(&mut self, node: swc_common::Span) -> swc_common::Span {
        if self.enabled {
            <V as Fold>::fold_span(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_str(&mut self, node: Str) -> Str {
        if self.enabled {
            <V as Fold>::fold_str(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_style_block(&mut self, node: StyleBlock) -> StyleBlock {
        if self.enabled {
            <V as Fold>::fold_style_block(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_stylesheet(&mut self, node: Stylesheet) -> Stylesheet {
        if self.enabled {
            <V as Fold>::fold_stylesheet(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_subclass_selector(&mut self, node: SubclassSelector) -> SubclassSelector {
        if self.enabled {
            <V as Fold>::fold_subclass_selector(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_subclass_selectors(&mut self, node: Vec<SubclassSelector>) -> Vec<SubclassSelector> {
        if self.enabled {
            <V as Fold>::fold_subclass_selectors(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_supports_and(&mut self, node: SupportsAnd) -> SupportsAnd {
        if self.enabled {
            <V as Fold>::fold_supports_and(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_supports_condition(&mut self, node: SupportsCondition) -> SupportsCondition {
        if self.enabled {
            <V as Fold>::fold_supports_condition(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_supports_condition_type(
        &mut self,
        node: SupportsConditionType,
    ) -> SupportsConditionType {
        if self.enabled {
            <V as Fold>::fold_supports_condition_type(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_supports_condition_types(
        &mut self,
        node: Vec<SupportsConditionType>,
    ) -> Vec<SupportsConditionType> {
        if self.enabled {
            <V as Fold>::fold_supports_condition_types(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_supports_feature(&mut self, node: SupportsFeature) -> SupportsFeature {
        if self.enabled {
            <V as Fold>::fold_supports_feature(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_supports_in_parens(&mut self, node: SupportsInParens) -> SupportsInParens {
        if self.enabled {
            <V as Fold>::fold_supports_in_parens(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_supports_not(&mut self, node: SupportsNot) -> SupportsNot {
        if self.enabled {
            <V as Fold>::fold_supports_not(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_supports_or(&mut self, node: SupportsOr) -> SupportsOr {
        if self.enabled {
            <V as Fold>::fold_supports_or(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_tag_name_selector(&mut self, node: TagNameSelector) -> TagNameSelector {
        if self.enabled {
            <V as Fold>::fold_tag_name_selector(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_time(&mut self, node: Time) -> Time {
        if self.enabled {
            <V as Fold>::fold_time(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_time_percentage(&mut self, node: TimePercentage) -> TimePercentage {
        if self.enabled {
            <V as Fold>::fold_time_percentage(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_token(&mut self, node: Token) -> Token {
        if self.enabled {
            <V as Fold>::fold_token(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_token_and_span(&mut self, node: TokenAndSpan) -> TokenAndSpan {
        if self.enabled {
            <V as Fold>::fold_token_and_span(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_type_selector(&mut self, node: TypeSelector) -> TypeSelector {
        if self.enabled {
            <V as Fold>::fold_type_selector(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_unicode_range(&mut self, node: UnicodeRange) -> UnicodeRange {
        if self.enabled {
            <V as Fold>::fold_unicode_range(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_universal_selector(&mut self, node: UniversalSelector) -> UniversalSelector {
        if self.enabled {
            <V as Fold>::fold_universal_selector(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_unknown_dimension(&mut self, node: UnknownDimension) -> UnknownDimension {
        if self.enabled {
            <V as Fold>::fold_unknown_dimension(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_url(&mut self, node: Url) -> Url {
        if self.enabled {
            <V as Fold>::fold_url(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_url_key_value(&mut self, node: UrlKeyValue) -> UrlKeyValue {
        if self.enabled {
            <V as Fold>::fold_url_key_value(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_url_modifier(&mut self, node: UrlModifier) -> UrlModifier {
        if self.enabled {
            <V as Fold>::fold_url_modifier(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_url_modifiers(&mut self, node: Vec<UrlModifier>) -> Vec<UrlModifier> {
        if self.enabled {
            <V as Fold>::fold_url_modifiers(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_url_value(&mut self, node: UrlValue) -> UrlValue {
        if self.enabled {
            <V as Fold>::fold_url_value(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_url_value_raw(&mut self, node: UrlValueRaw) -> UrlValueRaw {
        if self.enabled {
            <V as Fold>::fold_url_value_raw(&mut self.visitor, node)
        } else {
            node
        }
    }

    #[inline]
    fn fold_wq_name(&mut self, node: WqName) -> WqName {
        if self.enabled {
            <V as Fold>::fold_wq_name(&mut self.visitor, node)
        } else {
            node
        }
    }
}
#[doc = r" A trait implemented for types that can be visited using a visitor."]
pub trait FoldWith<V: ?Sized + Fold> {
    #[doc = r" Calls a visitor method (visitor.fold_xxx) with self."]
    fn fold_with(self, visitor: &mut V) -> Self;
    #[doc = r" Visit children nodes of `self`` with `visitor`."]
    fn fold_children_with(self, visitor: &mut V) -> Self;
}
impl<V: ?Sized + Fold> FoldWith<V> for AbsoluteColorBase {
    #[doc = "Calls [Fold`::fold_absolute_color_base`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_absolute_color_base(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            AbsoluteColorBase::HexColor { 0: _field_0 } => {
                let _field_0 = <HexColor as FoldWith<V>>::fold_with(_field_0, visitor);
                AbsoluteColorBase::HexColor { 0: _field_0 }
            }
            AbsoluteColorBase::NamedColorOrTransparent { 0: _field_0 } => {
                let _field_0 = <Ident as FoldWith<V>>::fold_with(_field_0, visitor);
                AbsoluteColorBase::NamedColorOrTransparent { 0: _field_0 }
            }
            AbsoluteColorBase::Function { 0: _field_0 } => {
                let _field_0 = <Function as FoldWith<V>>::fold_with(_field_0, visitor);
                AbsoluteColorBase::Function { 0: _field_0 }
            }
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for AlphaValue {
    #[doc = "Calls [Fold`::fold_alpha_value`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_alpha_value(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            AlphaValue::Number { 0: _field_0 } => {
                let _field_0 = <Number as FoldWith<V>>::fold_with(_field_0, visitor);
                AlphaValue::Number { 0: _field_0 }
            }
            AlphaValue::Percentage { 0: _field_0 } => {
                let _field_0 = <Percentage as FoldWith<V>>::fold_with(_field_0, visitor);
                AlphaValue::Percentage { 0: _field_0 }
            }
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for AnPlusB {
    #[doc = "Calls [Fold`::fold_an_plus_b`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_an_plus_b(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            AnPlusB::Ident { 0: _field_0 } => {
                let _field_0 = <Ident as FoldWith<V>>::fold_with(_field_0, visitor);
                AnPlusB::Ident { 0: _field_0 }
            }
            AnPlusB::AnPlusBNotation { 0: _field_0 } => {
                let _field_0 = <AnPlusBNotation as FoldWith<V>>::fold_with(_field_0, visitor);
                AnPlusB::AnPlusBNotation { 0: _field_0 }
            }
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for AnPlusBNotation {
    #[doc = "Calls [Fold`::fold_an_plus_b_notation`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_an_plus_b_notation(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            AnPlusBNotation {
                span,
                a,
                a_raw,
                b,
                b_raw,
            } => {
                let span = { <swc_common::Span as FoldWith<V>>::fold_with(span, visitor) };
                let a_raw = { <Option<swc_atoms::Atom> as FoldWith<V>>::fold_with(a_raw, visitor) };
                let b_raw = { <Option<swc_atoms::Atom> as FoldWith<V>>::fold_with(b_raw, visitor) };
                AnPlusBNotation {
                    span,
                    a,
                    a_raw,
                    b,
                    b_raw,
                }
            }
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for Angle {
    #[doc = "Calls [Fold`::fold_angle`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_angle(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            Angle { span, value, unit } => {
                let span = { <swc_common::Span as FoldWith<V>>::fold_with(span, visitor) };
                let value = { <Number as FoldWith<V>>::fold_with(value, visitor) };
                let unit = { <Ident as FoldWith<V>>::fold_with(unit, visitor) };
                Angle { span, value, unit }
            }
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for AnglePercentage {
    #[doc = "Calls [Fold`::fold_angle_percentage`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_angle_percentage(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            AnglePercentage::Angle { 0: _field_0 } => {
                let _field_0 = <Angle as FoldWith<V>>::fold_with(_field_0, visitor);
                AnglePercentage::Angle { 0: _field_0 }
            }
            AnglePercentage::Percentage { 0: _field_0 } => {
                let _field_0 = <Percentage as FoldWith<V>>::fold_with(_field_0, visitor);
                AnglePercentage::Percentage { 0: _field_0 }
            }
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for AnyNamespace {
    #[doc = "Calls [Fold`::fold_any_namespace`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_any_namespace(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            AnyNamespace { span } => {
                let span = { <swc_common::Span as FoldWith<V>>::fold_with(span, visitor) };
                AnyNamespace { span }
            }
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for AtRule {
    #[doc = "Calls [Fold`::fold_at_rule`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_at_rule(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            AtRule {
                span,
                name,
                prelude,
                block,
            } => {
                let span = { <swc_common::Span as FoldWith<V>>::fold_with(span, visitor) };
                let name = { <AtRuleName as FoldWith<V>>::fold_with(name, visitor) };
                let prelude =
                    { <Option<Box<AtRulePrelude>> as FoldWith<V>>::fold_with(prelude, visitor) };
                let block = { <Option<SimpleBlock> as FoldWith<V>>::fold_with(block, visitor) };
                AtRule {
                    span,
                    name,
                    prelude,
                    block,
                }
            }
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for AtRuleName {
    #[doc = "Calls [Fold`::fold_at_rule_name`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_at_rule_name(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            AtRuleName::DashedIdent { 0: _field_0 } => {
                let _field_0 = <DashedIdent as FoldWith<V>>::fold_with(_field_0, visitor);
                AtRuleName::DashedIdent { 0: _field_0 }
            }
            AtRuleName::Ident { 0: _field_0 } => {
                let _field_0 = <Ident as FoldWith<V>>::fold_with(_field_0, visitor);
                AtRuleName::Ident { 0: _field_0 }
            }
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for AtRulePrelude {
    #[doc = "Calls [Fold`::fold_at_rule_prelude`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_at_rule_prelude(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            AtRulePrelude::ListOfComponentValues { 0: _field_0 } => {
                let _field_0 = <ListOfComponentValues as FoldWith<V>>::fold_with(_field_0, visitor);
                AtRulePrelude::ListOfComponentValues { 0: _field_0 }
            }
            AtRulePrelude::CharsetPrelude { 0: _field_0 } => {
                let _field_0 = <Str as FoldWith<V>>::fold_with(_field_0, visitor);
                AtRulePrelude::CharsetPrelude { 0: _field_0 }
            }
            AtRulePrelude::PropertyPrelude { 0: _field_0 } => {
                let _field_0 = <CustomPropertyName as FoldWith<V>>::fold_with(_field_0, visitor);
                AtRulePrelude::PropertyPrelude { 0: _field_0 }
            }
            AtRulePrelude::CounterStylePrelude { 0: _field_0 } => {
                let _field_0 = <CustomIdent as FoldWith<V>>::fold_with(_field_0, visitor);
                AtRulePrelude::CounterStylePrelude { 0: _field_0 }
            }
            AtRulePrelude::ColorProfilePrelude { 0: _field_0 } => {
                let _field_0 = <ColorProfileName as FoldWith<V>>::fold_with(_field_0, visitor);
                AtRulePrelude::ColorProfilePrelude { 0: _field_0 }
            }
            AtRulePrelude::DocumentPrelude { 0: _field_0 } => {
                let _field_0 = <DocumentPrelude as FoldWith<V>>::fold_with(_field_0, visitor);
                AtRulePrelude::DocumentPrelude { 0: _field_0 }
            }
            AtRulePrelude::FontPaletteValuesPrelude { 0: _field_0 } => {
                let _field_0 = <DashedIdent as FoldWith<V>>::fold_with(_field_0, visitor);
                AtRulePrelude::FontPaletteValuesPrelude { 0: _field_0 }
            }
            AtRulePrelude::FontFeatureValuesPrelude { 0: _field_0 } => {
                let _field_0 =
                    <FontFeatureValuesPrelude as FoldWith<V>>::fold_with(_field_0, visitor);
                AtRulePrelude::FontFeatureValuesPrelude { 0: _field_0 }
            }
            AtRulePrelude::NestPrelude { 0: _field_0 } => {
                let _field_0 = <SelectorList as FoldWith<V>>::fold_with(_field_0, visitor);
                AtRulePrelude::NestPrelude { 0: _field_0 }
            }
            AtRulePrelude::KeyframesPrelude { 0: _field_0 } => {
                let _field_0 = <KeyframesName as FoldWith<V>>::fold_with(_field_0, visitor);
                AtRulePrelude::KeyframesPrelude { 0: _field_0 }
            }
            AtRulePrelude::ImportPrelude { 0: _field_0 } => {
                let _field_0 = <ImportPrelude as FoldWith<V>>::fold_with(_field_0, visitor);
                AtRulePrelude::ImportPrelude { 0: _field_0 }
            }
            AtRulePrelude::NamespacePrelude { 0: _field_0 } => {
                let _field_0 = <NamespacePrelude as FoldWith<V>>::fold_with(_field_0, visitor);
                AtRulePrelude::NamespacePrelude { 0: _field_0 }
            }
            AtRulePrelude::MediaPrelude { 0: _field_0 } => {
                let _field_0 = <MediaQueryList as FoldWith<V>>::fold_with(_field_0, visitor);
                AtRulePrelude::MediaPrelude { 0: _field_0 }
            }
            AtRulePrelude::SupportsPrelude { 0: _field_0 } => {
                let _field_0 = <SupportsCondition as FoldWith<V>>::fold_with(_field_0, visitor);
                AtRulePrelude::SupportsPrelude { 0: _field_0 }
            }
            AtRulePrelude::PagePrelude { 0: _field_0 } => {
                let _field_0 = <PageSelectorList as FoldWith<V>>::fold_with(_field_0, visitor);
                AtRulePrelude::PagePrelude { 0: _field_0 }
            }
            AtRulePrelude::LayerPrelude { 0: _field_0 } => {
                let _field_0 = <LayerPrelude as FoldWith<V>>::fold_with(_field_0, visitor);
                AtRulePrelude::LayerPrelude { 0: _field_0 }
            }
            AtRulePrelude::ContainerPrelude { 0: _field_0 } => {
                let _field_0 = <ContainerCondition as FoldWith<V>>::fold_with(_field_0, visitor);
                AtRulePrelude::ContainerPrelude { 0: _field_0 }
            }
            AtRulePrelude::CustomMediaPrelude { 0: _field_0 } => {
                let _field_0 = <CustomMediaQuery as FoldWith<V>>::fold_with(_field_0, visitor);
                AtRulePrelude::CustomMediaPrelude { 0: _field_0 }
            }
            AtRulePrelude::ScopePrelude { 0: _field_0 } => {
                let _field_0 = <ScopeRange as FoldWith<V>>::fold_with(_field_0, visitor);
                AtRulePrelude::ScopePrelude { 0: _field_0 }
            }
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for AttributeSelector {
    #[doc = "Calls [Fold`::fold_attribute_selector`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_attribute_selector(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            AttributeSelector {
                span,
                name,
                matcher,
                value,
                modifier,
            } => {
                let span = { <swc_common::Span as FoldWith<V>>::fold_with(span, visitor) };
                let name = { <WqName as FoldWith<V>>::fold_with(name, visitor) };
                let matcher = {
                    <Option<AttributeSelectorMatcher> as FoldWith<V>>::fold_with(matcher, visitor)
                };
                let value =
                    { <Option<AttributeSelectorValue> as FoldWith<V>>::fold_with(value, visitor) };
                let modifier = {
                    <Option<AttributeSelectorModifier> as FoldWith<V>>::fold_with(modifier, visitor)
                };
                AttributeSelector {
                    span,
                    name,
                    matcher,
                    value,
                    modifier,
                }
            }
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for AttributeSelectorMatcher {
    #[doc = "Calls [Fold`::fold_attribute_selector_matcher`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_attribute_selector_matcher(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            AttributeSelectorMatcher { span, value } => {
                let span = { <swc_common::Span as FoldWith<V>>::fold_with(span, visitor) };
                let value =
                    { <AttributeSelectorMatcherValue as FoldWith<V>>::fold_with(value, visitor) };
                AttributeSelectorMatcher { span, value }
            }
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for AttributeSelectorMatcherValue {
    #[doc = "Calls [Fold`::fold_attribute_selector_matcher_value`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_attribute_selector_matcher_value(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            AttributeSelectorMatcherValue::Equals => AttributeSelectorMatcherValue::Equals,
            AttributeSelectorMatcherValue::Tilde => AttributeSelectorMatcherValue::Tilde,
            AttributeSelectorMatcherValue::Bar => AttributeSelectorMatcherValue::Bar,
            AttributeSelectorMatcherValue::Caret => AttributeSelectorMatcherValue::Caret,
            AttributeSelectorMatcherValue::Dollar => AttributeSelectorMatcherValue::Dollar,
            AttributeSelectorMatcherValue::Asterisk => AttributeSelectorMatcherValue::Asterisk,
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for AttributeSelectorModifier {
    #[doc = "Calls [Fold`::fold_attribute_selector_modifier`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_attribute_selector_modifier(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            AttributeSelectorModifier { span, value } => {
                let span = { <swc_common::Span as FoldWith<V>>::fold_with(span, visitor) };
                let value = { <Ident as FoldWith<V>>::fold_with(value, visitor) };
                AttributeSelectorModifier { span, value }
            }
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for AttributeSelectorValue {
    #[doc = "Calls [Fold`::fold_attribute_selector_value`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_attribute_selector_value(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            AttributeSelectorValue::Str { 0: _field_0 } => {
                let _field_0 = <Str as FoldWith<V>>::fold_with(_field_0, visitor);
                AttributeSelectorValue::Str { 0: _field_0 }
            }
            AttributeSelectorValue::Ident { 0: _field_0 } => {
                let _field_0 = <Ident as FoldWith<V>>::fold_with(_field_0, visitor);
                AttributeSelectorValue::Ident { 0: _field_0 }
            }
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for BinOp {
    #[doc = "Calls [Fold`::fold_bin_op`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_bin_op(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            BinOp::Add => BinOp::Add,
            BinOp::Sub => BinOp::Sub,
            BinOp::Mul => BinOp::Mul,
            BinOp::Div => BinOp::Div,
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for CalcOperator {
    #[doc = "Calls [Fold`::fold_calc_operator`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_calc_operator(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            CalcOperator { span, value } => {
                let span = { <swc_common::Span as FoldWith<V>>::fold_with(span, visitor) };
                let value = { <CalcOperatorType as FoldWith<V>>::fold_with(value, visitor) };
                CalcOperator { span, value }
            }
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for CalcOperatorType {
    #[doc = "Calls [Fold`::fold_calc_operator_type`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_calc_operator_type(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            CalcOperatorType::Add => CalcOperatorType::Add,
            CalcOperatorType::Sub => CalcOperatorType::Sub,
            CalcOperatorType::Mul => CalcOperatorType::Mul,
            CalcOperatorType::Div => CalcOperatorType::Div,
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for CalcProduct {
    #[doc = "Calls [Fold`::fold_calc_product`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_calc_product(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            CalcProduct { span, expressions } => {
                let span = { <swc_common::Span as FoldWith<V>>::fold_with(span, visitor) };
                let expressions =
                    { <Vec<CalcValueOrOperator> as FoldWith<V>>::fold_with(expressions, visitor) };
                CalcProduct { span, expressions }
            }
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for CalcProductOrOperator {
    #[doc = "Calls [Fold`::fold_calc_product_or_operator`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_calc_product_or_operator(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            CalcProductOrOperator::Product { 0: _field_0 } => {
                let _field_0 = <CalcProduct as FoldWith<V>>::fold_with(_field_0, visitor);
                CalcProductOrOperator::Product { 0: _field_0 }
            }
            CalcProductOrOperator::Operator { 0: _field_0 } => {
                let _field_0 = <CalcOperator as FoldWith<V>>::fold_with(_field_0, visitor);
                CalcProductOrOperator::Operator { 0: _field_0 }
            }
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for CalcSum {
    #[doc = "Calls [Fold`::fold_calc_sum`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_calc_sum(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            CalcSum { span, expressions } => {
                let span = { <swc_common::Span as FoldWith<V>>::fold_with(span, visitor) };
                let expressions = {
                    <Vec<CalcProductOrOperator> as FoldWith<V>>::fold_with(expressions, visitor)
                };
                CalcSum { span, expressions }
            }
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for CalcValue {
    #[doc = "Calls [Fold`::fold_calc_value`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_calc_value(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            CalcValue::Number { 0: _field_0 } => {
                let _field_0 = <Number as FoldWith<V>>::fold_with(_field_0, visitor);
                CalcValue::Number { 0: _field_0 }
            }
            CalcValue::Dimension { 0: _field_0 } => {
                let _field_0 = <Dimension as FoldWith<V>>::fold_with(_field_0, visitor);
                CalcValue::Dimension { 0: _field_0 }
            }
            CalcValue::Percentage { 0: _field_0 } => {
                let _field_0 = <Percentage as FoldWith<V>>::fold_with(_field_0, visitor);
                CalcValue::Percentage { 0: _field_0 }
            }
            CalcValue::Constant { 0: _field_0 } => {
                let _field_0 = <Ident as FoldWith<V>>::fold_with(_field_0, visitor);
                CalcValue::Constant { 0: _field_0 }
            }
            CalcValue::Sum { 0: _field_0 } => {
                let _field_0 = <CalcSum as FoldWith<V>>::fold_with(_field_0, visitor);
                CalcValue::Sum { 0: _field_0 }
            }
            CalcValue::Function { 0: _field_0 } => {
                let _field_0 = <Function as FoldWith<V>>::fold_with(_field_0, visitor);
                CalcValue::Function { 0: _field_0 }
            }
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for CalcValueOrOperator {
    #[doc = "Calls [Fold`::fold_calc_value_or_operator`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_calc_value_or_operator(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            CalcValueOrOperator::Value { 0: _field_0 } => {
                let _field_0 = <CalcValue as FoldWith<V>>::fold_with(_field_0, visitor);
                CalcValueOrOperator::Value { 0: _field_0 }
            }
            CalcValueOrOperator::Operator { 0: _field_0 } => {
                let _field_0 = <CalcOperator as FoldWith<V>>::fold_with(_field_0, visitor);
                CalcValueOrOperator::Operator { 0: _field_0 }
            }
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for ClassSelector {
    #[doc = "Calls [Fold`::fold_class_selector`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_class_selector(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            ClassSelector { span, text } => {
                let span = { <swc_common::Span as FoldWith<V>>::fold_with(span, visitor) };
                let text = { <Ident as FoldWith<V>>::fold_with(text, visitor) };
                ClassSelector { span, text }
            }
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for CmykComponent {
    #[doc = "Calls [Fold`::fold_cmyk_component`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_cmyk_component(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            CmykComponent::Number { 0: _field_0 } => {
                let _field_0 = <Number as FoldWith<V>>::fold_with(_field_0, visitor);
                CmykComponent::Number { 0: _field_0 }
            }
            CmykComponent::Percentage { 0: _field_0 } => {
                let _field_0 = <Percentage as FoldWith<V>>::fold_with(_field_0, visitor);
                CmykComponent::Percentage { 0: _field_0 }
            }
            CmykComponent::Function { 0: _field_0 } => {
                let _field_0 = <Function as FoldWith<V>>::fold_with(_field_0, visitor);
                CmykComponent::Function { 0: _field_0 }
            }
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for Color {
    #[doc = "Calls [Fold`::fold_color`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_color(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            Color::AbsoluteColorBase { 0: _field_0 } => {
                let _field_0 = <AbsoluteColorBase as FoldWith<V>>::fold_with(_field_0, visitor);
                Color::AbsoluteColorBase { 0: _field_0 }
            }
            Color::CurrentColorOrSystemColor { 0: _field_0 } => {
                let _field_0 = <Ident as FoldWith<V>>::fold_with(_field_0, visitor);
                Color::CurrentColorOrSystemColor { 0: _field_0 }
            }
            Color::Function { 0: _field_0 } => {
                let _field_0 = <Function as FoldWith<V>>::fold_with(_field_0, visitor);
                Color::Function { 0: _field_0 }
            }
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for ColorProfileName {
    #[doc = "Calls [Fold`::fold_color_profile_name`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_color_profile_name(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            ColorProfileName::DashedIdent { 0: _field_0 } => {
                let _field_0 = <DashedIdent as FoldWith<V>>::fold_with(_field_0, visitor);
                ColorProfileName::DashedIdent { 0: _field_0 }
            }
            ColorProfileName::Ident { 0: _field_0 } => {
                let _field_0 = <Ident as FoldWith<V>>::fold_with(_field_0, visitor);
                ColorProfileName::Ident { 0: _field_0 }
            }
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for Combinator {
    #[doc = "Calls [Fold`::fold_combinator`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_combinator(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            Combinator { span, value } => {
                let span = { <swc_common::Span as FoldWith<V>>::fold_with(span, visitor) };
                let value = { <CombinatorValue as FoldWith<V>>::fold_with(value, visitor) };
                Combinator { span, value }
            }
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for CombinatorValue {
    #[doc = "Calls [Fold`::fold_combinator_value`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_combinator_value(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            CombinatorValue::Descendant => CombinatorValue::Descendant,
            CombinatorValue::NextSibling => CombinatorValue::NextSibling,
            CombinatorValue::Child => CombinatorValue::Child,
            CombinatorValue::LaterSibling => CombinatorValue::LaterSibling,
            CombinatorValue::Column => CombinatorValue::Column,
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for ComplexSelector {
    #[doc = "Calls [Fold`::fold_complex_selector`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_complex_selector(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            ComplexSelector { span, children } => {
                let span = { <swc_common::Span as FoldWith<V>>::fold_with(span, visitor) };
                let children =
                    { <Vec<ComplexSelectorChildren> as FoldWith<V>>::fold_with(children, visitor) };
                ComplexSelector { span, children }
            }
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for ComplexSelectorChildren {
    #[doc = "Calls [Fold`::fold_complex_selector_children`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_complex_selector_children(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            ComplexSelectorChildren::CompoundSelector { 0: _field_0 } => {
                let _field_0 = <CompoundSelector as FoldWith<V>>::fold_with(_field_0, visitor);
                ComplexSelectorChildren::CompoundSelector { 0: _field_0 }
            }
            ComplexSelectorChildren::Combinator { 0: _field_0 } => {
                let _field_0 = <Combinator as FoldWith<V>>::fold_with(_field_0, visitor);
                ComplexSelectorChildren::Combinator { 0: _field_0 }
            }
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for ComponentValue {
    #[doc = "Calls [Fold`::fold_component_value`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_component_value(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            ComponentValue::PreservedToken { 0: _field_0 } => {
                let _field_0 = <Box<TokenAndSpan> as FoldWith<V>>::fold_with(_field_0, visitor);
                ComponentValue::PreservedToken { 0: _field_0 }
            }
            ComponentValue::Function { 0: _field_0 } => {
                let _field_0 = <Box<Function> as FoldWith<V>>::fold_with(_field_0, visitor);
                ComponentValue::Function { 0: _field_0 }
            }
            ComponentValue::SimpleBlock { 0: _field_0 } => {
                let _field_0 = <Box<SimpleBlock> as FoldWith<V>>::fold_with(_field_0, visitor);
                ComponentValue::SimpleBlock { 0: _field_0 }
            }
            ComponentValue::AtRule { 0: _field_0 } => {
                let _field_0 = <Box<AtRule> as FoldWith<V>>::fold_with(_field_0, visitor);
                ComponentValue::AtRule { 0: _field_0 }
            }
            ComponentValue::QualifiedRule { 0: _field_0 } => {
                let _field_0 = <Box<QualifiedRule> as FoldWith<V>>::fold_with(_field_0, visitor);
                ComponentValue::QualifiedRule { 0: _field_0 }
            }
            ComponentValue::ListOfComponentValues { 0: _field_0 } => {
                let _field_0 =
                    <Box<ListOfComponentValues> as FoldWith<V>>::fold_with(_field_0, visitor);
                ComponentValue::ListOfComponentValues { 0: _field_0 }
            }
            ComponentValue::KeyframeBlock { 0: _field_0 } => {
                let _field_0 = <Box<KeyframeBlock> as FoldWith<V>>::fold_with(_field_0, visitor);
                ComponentValue::KeyframeBlock { 0: _field_0 }
            }
            ComponentValue::Ident { 0: _field_0 } => {
                let _field_0 = <Box<Ident> as FoldWith<V>>::fold_with(_field_0, visitor);
                ComponentValue::Ident { 0: _field_0 }
            }
            ComponentValue::DashedIdent { 0: _field_0 } => {
                let _field_0 = <Box<DashedIdent> as FoldWith<V>>::fold_with(_field_0, visitor);
                ComponentValue::DashedIdent { 0: _field_0 }
            }
            ComponentValue::Str { 0: _field_0 } => {
                let _field_0 = <Box<Str> as FoldWith<V>>::fold_with(_field_0, visitor);
                ComponentValue::Str { 0: _field_0 }
            }
            ComponentValue::Url { 0: _field_0 } => {
                let _field_0 = <Box<Url> as FoldWith<V>>::fold_with(_field_0, visitor);
                ComponentValue::Url { 0: _field_0 }
            }
            ComponentValue::Integer { 0: _field_0 } => {
                let _field_0 = <Box<Integer> as FoldWith<V>>::fold_with(_field_0, visitor);
                ComponentValue::Integer { 0: _field_0 }
            }
            ComponentValue::Number { 0: _field_0 } => {
                let _field_0 = <Box<Number> as FoldWith<V>>::fold_with(_field_0, visitor);
                ComponentValue::Number { 0: _field_0 }
            }
            ComponentValue::Percentage { 0: _field_0 } => {
                let _field_0 = <Box<Percentage> as FoldWith<V>>::fold_with(_field_0, visitor);
                ComponentValue::Percentage { 0: _field_0 }
            }
            ComponentValue::Dimension { 0: _field_0 } => {
                let _field_0 = <Box<Dimension> as FoldWith<V>>::fold_with(_field_0, visitor);
                ComponentValue::Dimension { 0: _field_0 }
            }
            ComponentValue::LengthPercentage { 0: _field_0 } => {
                let _field_0 = <Box<LengthPercentage> as FoldWith<V>>::fold_with(_field_0, visitor);
                ComponentValue::LengthPercentage { 0: _field_0 }
            }
            ComponentValue::FrequencyPercentage { 0: _field_0 } => {
                let _field_0 =
                    <Box<FrequencyPercentage> as FoldWith<V>>::fold_with(_field_0, visitor);
                ComponentValue::FrequencyPercentage { 0: _field_0 }
            }
            ComponentValue::AnglePercentage { 0: _field_0 } => {
                let _field_0 = <Box<AnglePercentage> as FoldWith<V>>::fold_with(_field_0, visitor);
                ComponentValue::AnglePercentage { 0: _field_0 }
            }
            ComponentValue::TimePercentage { 0: _field_0 } => {
                let _field_0 = <Box<TimePercentage> as FoldWith<V>>::fold_with(_field_0, visitor);
                ComponentValue::TimePercentage { 0: _field_0 }
            }
            ComponentValue::Ratio { 0: _field_0 } => {
                let _field_0 = <Box<Ratio> as FoldWith<V>>::fold_with(_field_0, visitor);
                ComponentValue::Ratio { 0: _field_0 }
            }
            ComponentValue::UnicodeRange { 0: _field_0 } => {
                let _field_0 = <Box<UnicodeRange> as FoldWith<V>>::fold_with(_field_0, visitor);
                ComponentValue::UnicodeRange { 0: _field_0 }
            }
            ComponentValue::Color { 0: _field_0 } => {
                let _field_0 = <Box<Color> as FoldWith<V>>::fold_with(_field_0, visitor);
                ComponentValue::Color { 0: _field_0 }
            }
            ComponentValue::AlphaValue { 0: _field_0 } => {
                let _field_0 = <Box<AlphaValue> as FoldWith<V>>::fold_with(_field_0, visitor);
                ComponentValue::AlphaValue { 0: _field_0 }
            }
            ComponentValue::Hue { 0: _field_0 } => {
                let _field_0 = <Box<Hue> as FoldWith<V>>::fold_with(_field_0, visitor);
                ComponentValue::Hue { 0: _field_0 }
            }
            ComponentValue::CmykComponent { 0: _field_0 } => {
                let _field_0 = <Box<CmykComponent> as FoldWith<V>>::fold_with(_field_0, visitor);
                ComponentValue::CmykComponent { 0: _field_0 }
            }
            ComponentValue::Delimiter { 0: _field_0 } => {
                let _field_0 = <Box<Delimiter> as FoldWith<V>>::fold_with(_field_0, visitor);
                ComponentValue::Delimiter { 0: _field_0 }
            }
            ComponentValue::CalcSum { 0: _field_0 } => {
                let _field_0 = <Box<CalcSum> as FoldWith<V>>::fold_with(_field_0, visitor);
                ComponentValue::CalcSum { 0: _field_0 }
            }
            ComponentValue::ComplexSelector { 0: _field_0 } => {
                let _field_0 = <Box<ComplexSelector> as FoldWith<V>>::fold_with(_field_0, visitor);
                ComponentValue::ComplexSelector { 0: _field_0 }
            }
            ComponentValue::LayerName { 0: _field_0 } => {
                let _field_0 = <Box<LayerName> as FoldWith<V>>::fold_with(_field_0, visitor);
                ComponentValue::LayerName { 0: _field_0 }
            }
            ComponentValue::SupportsCondition { 0: _field_0 } => {
                let _field_0 =
                    <Box<SupportsCondition> as FoldWith<V>>::fold_with(_field_0, visitor);
                ComponentValue::SupportsCondition { 0: _field_0 }
            }
            ComponentValue::Declaration { 0: _field_0 } => {
                let _field_0 = <Box<Declaration> as FoldWith<V>>::fold_with(_field_0, visitor);
                ComponentValue::Declaration { 0: _field_0 }
            }
            ComponentValue::IdSelector { 0: _field_0 } => {
                let _field_0 = <Box<IdSelector> as FoldWith<V>>::fold_with(_field_0, visitor);
                ComponentValue::IdSelector { 0: _field_0 }
            }
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for CompoundSelector {
    #[doc = "Calls [Fold`::fold_compound_selector`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_compound_selector(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            CompoundSelector {
                span,
                nesting_selector,
                type_selector,
                subclass_selectors,
            } => {
                let span = { <swc_common::Span as FoldWith<V>>::fold_with(span, visitor) };
                let nesting_selector = {
                    <Option<NestingSelector> as FoldWith<V>>::fold_with(nesting_selector, visitor)
                };
                let type_selector = {
                    <Option<Box<TypeSelector>> as FoldWith<V>>::fold_with(type_selector, visitor)
                };
                let subclass_selectors = {
                    <Vec<SubclassSelector> as FoldWith<V>>::fold_with(subclass_selectors, visitor)
                };
                CompoundSelector {
                    span,
                    nesting_selector,
                    type_selector,
                    subclass_selectors,
                }
            }
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for CompoundSelectorList {
    #[doc = "Calls [Fold`::fold_compound_selector_list`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_compound_selector_list(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            CompoundSelectorList { span, children } => {
                let span = { <swc_common::Span as FoldWith<V>>::fold_with(span, visitor) };
                let children =
                    { <Vec<CompoundSelector> as FoldWith<V>>::fold_with(children, visitor) };
                CompoundSelectorList { span, children }
            }
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for ContainerCondition {
    #[doc = "Calls [Fold`::fold_container_condition`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_container_condition(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            ContainerCondition { span, name, query } => {
                let span = { <swc_common::Span as FoldWith<V>>::fold_with(span, visitor) };
                let name = { <Option<ContainerName> as FoldWith<V>>::fold_with(name, visitor) };
                let query = { <ContainerQuery as FoldWith<V>>::fold_with(query, visitor) };
                ContainerCondition { span, name, query }
            }
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for ContainerName {
    #[doc = "Calls [Fold`::fold_container_name`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_container_name(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            ContainerName::CustomIdent { 0: _field_0 } => {
                let _field_0 = <CustomIdent as FoldWith<V>>::fold_with(_field_0, visitor);
                ContainerName::CustomIdent { 0: _field_0 }
            }
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for ContainerQuery {
    #[doc = "Calls [Fold`::fold_container_query`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_container_query(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            ContainerQuery { span, queries } => {
                let span = { <swc_common::Span as FoldWith<V>>::fold_with(span, visitor) };
                let queries =
                    { <Vec<ContainerQueryType> as FoldWith<V>>::fold_with(queries, visitor) };
                ContainerQuery { span, queries }
            }
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for ContainerQueryAnd {
    #[doc = "Calls [Fold`::fold_container_query_and`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_container_query_and(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            ContainerQueryAnd {
                span,
                keyword,
                query,
            } => {
                let span = { <swc_common::Span as FoldWith<V>>::fold_with(span, visitor) };
                let keyword = { <Option<Ident> as FoldWith<V>>::fold_with(keyword, visitor) };
                let query = { <QueryInParens as FoldWith<V>>::fold_with(query, visitor) };
                ContainerQueryAnd {
                    span,
                    keyword,
                    query,
                }
            }
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for ContainerQueryNot {
    #[doc = "Calls [Fold`::fold_container_query_not`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_container_query_not(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            ContainerQueryNot {
                span,
                keyword,
                query,
            } => {
                let span = { <swc_common::Span as FoldWith<V>>::fold_with(span, visitor) };
                let keyword = { <Option<Ident> as FoldWith<V>>::fold_with(keyword, visitor) };
                let query = { <QueryInParens as FoldWith<V>>::fold_with(query, visitor) };
                ContainerQueryNot {
                    span,
                    keyword,
                    query,
                }
            }
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for ContainerQueryOr {
    #[doc = "Calls [Fold`::fold_container_query_or`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_container_query_or(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            ContainerQueryOr {
                span,
                keyword,
                query,
            } => {
                let span = { <swc_common::Span as FoldWith<V>>::fold_with(span, visitor) };
                let keyword = { <Option<Ident> as FoldWith<V>>::fold_with(keyword, visitor) };
                let query = { <QueryInParens as FoldWith<V>>::fold_with(query, visitor) };
                ContainerQueryOr {
                    span,
                    keyword,
                    query,
                }
            }
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for ContainerQueryType {
    #[doc = "Calls [Fold`::fold_container_query_type`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_container_query_type(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            ContainerQueryType::Not { 0: _field_0 } => {
                let _field_0 = <ContainerQueryNot as FoldWith<V>>::fold_with(_field_0, visitor);
                ContainerQueryType::Not { 0: _field_0 }
            }
            ContainerQueryType::And { 0: _field_0 } => {
                let _field_0 = <ContainerQueryAnd as FoldWith<V>>::fold_with(_field_0, visitor);
                ContainerQueryType::And { 0: _field_0 }
            }
            ContainerQueryType::Or { 0: _field_0 } => {
                let _field_0 = <ContainerQueryOr as FoldWith<V>>::fold_with(_field_0, visitor);
                ContainerQueryType::Or { 0: _field_0 }
            }
            ContainerQueryType::QueryInParens { 0: _field_0 } => {
                let _field_0 = <QueryInParens as FoldWith<V>>::fold_with(_field_0, visitor);
                ContainerQueryType::QueryInParens { 0: _field_0 }
            }
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for CustomHighlightName {
    #[doc = "Calls [Fold`::fold_custom_highlight_name`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_custom_highlight_name(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            CustomHighlightName { span, value, raw } => {
                let span = { <swc_common::Span as FoldWith<V>>::fold_with(span, visitor) };
                let value = { <swc_atoms::Atom as FoldWith<V>>::fold_with(value, visitor) };
                let raw = { <Option<swc_atoms::Atom> as FoldWith<V>>::fold_with(raw, visitor) };
                CustomHighlightName { span, value, raw }
            }
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for CustomIdent {
    #[doc = "Calls [Fold`::fold_custom_ident`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_custom_ident(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            CustomIdent { span, value, raw } => {
                let span = { <swc_common::Span as FoldWith<V>>::fold_with(span, visitor) };
                let value = { <swc_atoms::Atom as FoldWith<V>>::fold_with(value, visitor) };
                let raw = { <Option<swc_atoms::Atom> as FoldWith<V>>::fold_with(raw, visitor) };
                CustomIdent { span, value, raw }
            }
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for CustomMediaQuery {
    #[doc = "Calls [Fold`::fold_custom_media_query`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_custom_media_query(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            CustomMediaQuery { span, name, media } => {
                let span = { <swc_common::Span as FoldWith<V>>::fold_with(span, visitor) };
                let name = { <ExtensionName as FoldWith<V>>::fold_with(name, visitor) };
                let media =
                    { <CustomMediaQueryMediaType as FoldWith<V>>::fold_with(media, visitor) };
                CustomMediaQuery { span, name, media }
            }
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for CustomMediaQueryMediaType {
    #[doc = "Calls [Fold`::fold_custom_media_query_media_type`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_custom_media_query_media_type(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            CustomMediaQueryMediaType::Ident { 0: _field_0 } => {
                let _field_0 = <Ident as FoldWith<V>>::fold_with(_field_0, visitor);
                CustomMediaQueryMediaType::Ident { 0: _field_0 }
            }
            CustomMediaQueryMediaType::MediaQueryList { 0: _field_0 } => {
                let _field_0 = <MediaQueryList as FoldWith<V>>::fold_with(_field_0, visitor);
                CustomMediaQueryMediaType::MediaQueryList { 0: _field_0 }
            }
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for CustomPropertyName {
    #[doc = "Calls [Fold`::fold_custom_property_name`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_custom_property_name(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            CustomPropertyName { span, value, raw } => {
                let span = { <swc_common::Span as FoldWith<V>>::fold_with(span, visitor) };
                let value = { <swc_atoms::Atom as FoldWith<V>>::fold_with(value, visitor) };
                let raw = { <Option<swc_atoms::Atom> as FoldWith<V>>::fold_with(raw, visitor) };
                CustomPropertyName { span, value, raw }
            }
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for DashedIdent {
    #[doc = "Calls [Fold`::fold_dashed_ident`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_dashed_ident(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            DashedIdent { span, value, raw } => {
                let span = { <swc_common::Span as FoldWith<V>>::fold_with(span, visitor) };
                let value = { <swc_atoms::Atom as FoldWith<V>>::fold_with(value, visitor) };
                let raw = { <Option<swc_atoms::Atom> as FoldWith<V>>::fold_with(raw, visitor) };
                DashedIdent { span, value, raw }
            }
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for Declaration {
    #[doc = "Calls [Fold`::fold_declaration`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_declaration(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            Declaration {
                span,
                name,
                value,
                important,
            } => {
                let span = { <swc_common::Span as FoldWith<V>>::fold_with(span, visitor) };
                let name = { <DeclarationName as FoldWith<V>>::fold_with(name, visitor) };
                let value = { <Vec<ComponentValue> as FoldWith<V>>::fold_with(value, visitor) };
                let important =
                    { <Option<ImportantFlag> as FoldWith<V>>::fold_with(important, visitor) };
                Declaration {
                    span,
                    name,
                    value,
                    important,
                }
            }
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for DeclarationName {
    #[doc = "Calls [Fold`::fold_declaration_name`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_declaration_name(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            DeclarationName::Ident { 0: _field_0 } => {
                let _field_0 = <Ident as FoldWith<V>>::fold_with(_field_0, visitor);
                DeclarationName::Ident { 0: _field_0 }
            }
            DeclarationName::DashedIdent { 0: _field_0 } => {
                let _field_0 = <DashedIdent as FoldWith<V>>::fold_with(_field_0, visitor);
                DeclarationName::DashedIdent { 0: _field_0 }
            }
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for DeclarationOrAtRule {
    #[doc = "Calls [Fold`::fold_declaration_or_at_rule`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_declaration_or_at_rule(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            DeclarationOrAtRule::Declaration { 0: _field_0 } => {
                let _field_0 = <Box<Declaration> as FoldWith<V>>::fold_with(_field_0, visitor);
                DeclarationOrAtRule::Declaration { 0: _field_0 }
            }
            DeclarationOrAtRule::AtRule { 0: _field_0 } => {
                let _field_0 = <Box<AtRule> as FoldWith<V>>::fold_with(_field_0, visitor);
                DeclarationOrAtRule::AtRule { 0: _field_0 }
            }
            DeclarationOrAtRule::ListOfComponentValues { 0: _field_0 } => {
                let _field_0 =
                    <Box<ListOfComponentValues> as FoldWith<V>>::fold_with(_field_0, visitor);
                DeclarationOrAtRule::ListOfComponentValues { 0: _field_0 }
            }
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for Delimiter {
    #[doc = "Calls [Fold`::fold_delimiter`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_delimiter(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            Delimiter { span, value } => {
                let span = { <swc_common::Span as FoldWith<V>>::fold_with(span, visitor) };
                let value = { <DelimiterValue as FoldWith<V>>::fold_with(value, visitor) };
                Delimiter { span, value }
            }
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for DelimiterValue {
    #[doc = "Calls [Fold`::fold_delimiter_value`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_delimiter_value(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            DelimiterValue::Comma => DelimiterValue::Comma,
            DelimiterValue::Solidus => DelimiterValue::Solidus,
            DelimiterValue::Semicolon => DelimiterValue::Semicolon,
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for Dimension {
    #[doc = "Calls [Fold`::fold_dimension`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_dimension(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            Dimension::Length { 0: _field_0 } => {
                let _field_0 = <Length as FoldWith<V>>::fold_with(_field_0, visitor);
                Dimension::Length { 0: _field_0 }
            }
            Dimension::Angle { 0: _field_0 } => {
                let _field_0 = <Angle as FoldWith<V>>::fold_with(_field_0, visitor);
                Dimension::Angle { 0: _field_0 }
            }
            Dimension::Time { 0: _field_0 } => {
                let _field_0 = <Time as FoldWith<V>>::fold_with(_field_0, visitor);
                Dimension::Time { 0: _field_0 }
            }
            Dimension::Frequency { 0: _field_0 } => {
                let _field_0 = <Frequency as FoldWith<V>>::fold_with(_field_0, visitor);
                Dimension::Frequency { 0: _field_0 }
            }
            Dimension::Resolution { 0: _field_0 } => {
                let _field_0 = <Resolution as FoldWith<V>>::fold_with(_field_0, visitor);
                Dimension::Resolution { 0: _field_0 }
            }
            Dimension::Flex { 0: _field_0 } => {
                let _field_0 = <Flex as FoldWith<V>>::fold_with(_field_0, visitor);
                Dimension::Flex { 0: _field_0 }
            }
            Dimension::UnknownDimension { 0: _field_0 } => {
                let _field_0 = <UnknownDimension as FoldWith<V>>::fold_with(_field_0, visitor);
                Dimension::UnknownDimension { 0: _field_0 }
            }
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for DimensionToken {
    #[doc = "Calls [Fold`::fold_dimension_token`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_dimension_token(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            DimensionToken {
                value,
                raw_value,
                unit,
                type_flag,
                raw_unit,
            } => {
                let raw_value = { <swc_atoms::Atom as FoldWith<V>>::fold_with(raw_value, visitor) };
                let unit = { <swc_atoms::Atom as FoldWith<V>>::fold_with(unit, visitor) };
                let type_flag = { <NumberType as FoldWith<V>>::fold_with(type_flag, visitor) };
                let raw_unit = { <swc_atoms::Atom as FoldWith<V>>::fold_with(raw_unit, visitor) };
                DimensionToken {
                    value,
                    raw_value,
                    unit,
                    type_flag,
                    raw_unit,
                }
            }
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for DocumentPrelude {
    #[doc = "Calls [Fold`::fold_document_prelude`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_document_prelude(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            DocumentPrelude {
                span,
                matching_functions,
            } => {
                let span = { <swc_common::Span as FoldWith<V>>::fold_with(span, visitor) };
                let matching_functions = {
                    <Vec<DocumentPreludeMatchingFunction> as FoldWith<V>>::fold_with(
                        matching_functions,
                        visitor,
                    )
                };
                DocumentPrelude {
                    span,
                    matching_functions,
                }
            }
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for DocumentPreludeMatchingFunction {
    #[doc = "Calls [Fold`::fold_document_prelude_matching_function`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_document_prelude_matching_function(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            DocumentPreludeMatchingFunction::Url { 0: _field_0 } => {
                let _field_0 = <Url as FoldWith<V>>::fold_with(_field_0, visitor);
                DocumentPreludeMatchingFunction::Url { 0: _field_0 }
            }
            DocumentPreludeMatchingFunction::Function { 0: _field_0 } => {
                let _field_0 = <Function as FoldWith<V>>::fold_with(_field_0, visitor);
                DocumentPreludeMatchingFunction::Function { 0: _field_0 }
            }
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for ExtensionName {
    #[doc = "Calls [Fold`::fold_extension_name`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_extension_name(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            ExtensionName { span, value, raw } => {
                let span = { <swc_common::Span as FoldWith<V>>::fold_with(span, visitor) };
                let value = { <swc_atoms::Atom as FoldWith<V>>::fold_with(value, visitor) };
                let raw = { <Option<swc_atoms::Atom> as FoldWith<V>>::fold_with(raw, visitor) };
                ExtensionName { span, value, raw }
            }
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for FamilyName {
    #[doc = "Calls [Fold`::fold_family_name`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_family_name(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            FamilyName::Str { 0: _field_0 } => {
                let _field_0 = <Str as FoldWith<V>>::fold_with(_field_0, visitor);
                FamilyName::Str { 0: _field_0 }
            }
            FamilyName::SequenceOfCustomIdents { 0: _field_0 } => {
                let _field_0 =
                    <SequenceOfCustomIdents as FoldWith<V>>::fold_with(_field_0, visitor);
                FamilyName::SequenceOfCustomIdents { 0: _field_0 }
            }
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for Flex {
    #[doc = "Calls [Fold`::fold_flex`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_flex(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            Flex { span, value, unit } => {
                let span = { <swc_common::Span as FoldWith<V>>::fold_with(span, visitor) };
                let value = { <Number as FoldWith<V>>::fold_with(value, visitor) };
                let unit = { <Ident as FoldWith<V>>::fold_with(unit, visitor) };
                Flex { span, value, unit }
            }
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for FontFeatureValuesPrelude {
    #[doc = "Calls [Fold`::fold_font_feature_values_prelude`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_font_feature_values_prelude(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            FontFeatureValuesPrelude { span, font_family } => {
                let span = { <swc_common::Span as FoldWith<V>>::fold_with(span, visitor) };
                let font_family =
                    { <Vec<FamilyName> as FoldWith<V>>::fold_with(font_family, visitor) };
                FontFeatureValuesPrelude { span, font_family }
            }
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for ForgivingComplexSelector {
    #[doc = "Calls [Fold`::fold_forgiving_complex_selector`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_forgiving_complex_selector(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            ForgivingComplexSelector::ComplexSelector { 0: _field_0 } => {
                let _field_0 = <ComplexSelector as FoldWith<V>>::fold_with(_field_0, visitor);
                ForgivingComplexSelector::ComplexSelector { 0: _field_0 }
            }
            ForgivingComplexSelector::ListOfComponentValues { 0: _field_0 } => {
                let _field_0 = <ListOfComponentValues as FoldWith<V>>::fold_with(_field_0, visitor);
                ForgivingComplexSelector::ListOfComponentValues { 0: _field_0 }
            }
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for ForgivingRelativeSelector {
    #[doc = "Calls [Fold`::fold_forgiving_relative_selector`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_forgiving_relative_selector(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            ForgivingRelativeSelector::RelativeSelector { 0: _field_0 } => {
                let _field_0 = <RelativeSelector as FoldWith<V>>::fold_with(_field_0, visitor);
                ForgivingRelativeSelector::RelativeSelector { 0: _field_0 }
            }
            ForgivingRelativeSelector::ListOfComponentValues { 0: _field_0 } => {
                let _field_0 = <ListOfComponentValues as FoldWith<V>>::fold_with(_field_0, visitor);
                ForgivingRelativeSelector::ListOfComponentValues { 0: _field_0 }
            }
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for ForgivingRelativeSelectorList {
    #[doc = "Calls [Fold`::fold_forgiving_relative_selector_list`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_forgiving_relative_selector_list(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            ForgivingRelativeSelectorList { span, children } => {
                let span = { <swc_common::Span as FoldWith<V>>::fold_with(span, visitor) };
                let children = {
                    <Vec<ForgivingRelativeSelector> as FoldWith<V>>::fold_with(children, visitor)
                };
                ForgivingRelativeSelectorList { span, children }
            }
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for ForgivingSelectorList {
    #[doc = "Calls [Fold`::fold_forgiving_selector_list`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_forgiving_selector_list(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            ForgivingSelectorList { span, children } => {
                let span = { <swc_common::Span as FoldWith<V>>::fold_with(span, visitor) };
                let children = {
                    <Vec<ForgivingComplexSelector> as FoldWith<V>>::fold_with(children, visitor)
                };
                ForgivingSelectorList { span, children }
            }
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for Frequency {
    #[doc = "Calls [Fold`::fold_frequency`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_frequency(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            Frequency { span, value, unit } => {
                let span = { <swc_common::Span as FoldWith<V>>::fold_with(span, visitor) };
                let value = { <Number as FoldWith<V>>::fold_with(value, visitor) };
                let unit = { <Ident as FoldWith<V>>::fold_with(unit, visitor) };
                Frequency { span, value, unit }
            }
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for FrequencyPercentage {
    #[doc = "Calls [Fold`::fold_frequency_percentage`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_frequency_percentage(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            FrequencyPercentage::Frequency { 0: _field_0 } => {
                let _field_0 = <Frequency as FoldWith<V>>::fold_with(_field_0, visitor);
                FrequencyPercentage::Frequency { 0: _field_0 }
            }
            FrequencyPercentage::Percentage { 0: _field_0 } => {
                let _field_0 = <Percentage as FoldWith<V>>::fold_with(_field_0, visitor);
                FrequencyPercentage::Percentage { 0: _field_0 }
            }
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for Function {
    #[doc = "Calls [Fold`::fold_function`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_function(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            Function { span, name, value } => {
                let span = { <swc_common::Span as FoldWith<V>>::fold_with(span, visitor) };
                let name = { <FunctionName as FoldWith<V>>::fold_with(name, visitor) };
                let value = { <Vec<ComponentValue> as FoldWith<V>>::fold_with(value, visitor) };
                Function { span, name, value }
            }
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for FunctionName {
    #[doc = "Calls [Fold`::fold_function_name`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_function_name(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            FunctionName::Ident { 0: _field_0 } => {
                let _field_0 = <Ident as FoldWith<V>>::fold_with(_field_0, visitor);
                FunctionName::Ident { 0: _field_0 }
            }
            FunctionName::DashedIdent { 0: _field_0 } => {
                let _field_0 = <DashedIdent as FoldWith<V>>::fold_with(_field_0, visitor);
                FunctionName::DashedIdent { 0: _field_0 }
            }
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for GeneralEnclosed {
    #[doc = "Calls [Fold`::fold_general_enclosed`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_general_enclosed(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            GeneralEnclosed::Function { 0: _field_0 } => {
                let _field_0 = <Function as FoldWith<V>>::fold_with(_field_0, visitor);
                GeneralEnclosed::Function { 0: _field_0 }
            }
            GeneralEnclosed::SimpleBlock { 0: _field_0 } => {
                let _field_0 = <SimpleBlock as FoldWith<V>>::fold_with(_field_0, visitor);
                GeneralEnclosed::SimpleBlock { 0: _field_0 }
            }
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for HexColor {
    #[doc = "Calls [Fold`::fold_hex_color`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_hex_color(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            HexColor { span, value, raw } => {
                let span = { <swc_common::Span as FoldWith<V>>::fold_with(span, visitor) };
                let value = { <swc_atoms::Atom as FoldWith<V>>::fold_with(value, visitor) };
                let raw = { <Option<swc_atoms::Atom> as FoldWith<V>>::fold_with(raw, visitor) };
                HexColor { span, value, raw }
            }
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for Hue {
    #[doc = "Calls [Fold`::fold_hue`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_hue(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            Hue::Number { 0: _field_0 } => {
                let _field_0 = <Number as FoldWith<V>>::fold_with(_field_0, visitor);
                Hue::Number { 0: _field_0 }
            }
            Hue::Angle { 0: _field_0 } => {
                let _field_0 = <Angle as FoldWith<V>>::fold_with(_field_0, visitor);
                Hue::Angle { 0: _field_0 }
            }
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for IdSelector {
    #[doc = "Calls [Fold`::fold_id_selector`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_id_selector(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            IdSelector { span, text } => {
                let span = { <swc_common::Span as FoldWith<V>>::fold_with(span, visitor) };
                let text = { <Ident as FoldWith<V>>::fold_with(text, visitor) };
                IdSelector { span, text }
            }
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for Ident {
    #[doc = "Calls [Fold`::fold_ident`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_ident(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            Ident { span, value, raw } => {
                let span = { <swc_common::Span as FoldWith<V>>::fold_with(span, visitor) };
                let value = { <swc_atoms::Atom as FoldWith<V>>::fold_with(value, visitor) };
                let raw = { <Option<swc_atoms::Atom> as FoldWith<V>>::fold_with(raw, visitor) };
                Ident { span, value, raw }
            }
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for ImportConditions {
    #[doc = "Calls [Fold`::fold_import_conditions`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_import_conditions(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            ImportConditions {
                span,
                supports,
                media,
            } => {
                let span = { <swc_common::Span as FoldWith<V>>::fold_with(span, visitor) };
                let supports =
                    { <Option<Box<Function>> as FoldWith<V>>::fold_with(supports, visitor) };
                let media =
                    { <Option<Box<MediaQueryList>> as FoldWith<V>>::fold_with(media, visitor) };
                ImportConditions {
                    span,
                    supports,
                    media,
                }
            }
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for ImportHref {
    #[doc = "Calls [Fold`::fold_import_href`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_import_href(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            ImportHref::Url { 0: _field_0 } => {
                let _field_0 = <Url as FoldWith<V>>::fold_with(_field_0, visitor);
                ImportHref::Url { 0: _field_0 }
            }
            ImportHref::Str { 0: _field_0 } => {
                let _field_0 = <Str as FoldWith<V>>::fold_with(_field_0, visitor);
                ImportHref::Str { 0: _field_0 }
            }
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for ImportLayerName {
    #[doc = "Calls [Fold`::fold_import_layer_name`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_import_layer_name(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            ImportLayerName::Ident { 0: _field_0 } => {
                let _field_0 = <Ident as FoldWith<V>>::fold_with(_field_0, visitor);
                ImportLayerName::Ident { 0: _field_0 }
            }
            ImportLayerName::Function { 0: _field_0 } => {
                let _field_0 = <Function as FoldWith<V>>::fold_with(_field_0, visitor);
                ImportLayerName::Function { 0: _field_0 }
            }
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for ImportPrelude {
    #[doc = "Calls [Fold`::fold_import_prelude`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_import_prelude(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            ImportPrelude {
                span,
                href,
                layer_name,
                import_conditions,
            } => {
                let span = { <swc_common::Span as FoldWith<V>>::fold_with(span, visitor) };
                let href = { <Box<ImportHref> as FoldWith<V>>::fold_with(href, visitor) };
                let layer_name = {
                    <Option<Box<ImportLayerName>> as FoldWith<V>>::fold_with(layer_name, visitor)
                };
                let import_conditions = {
                    <Option<Box<ImportConditions>> as FoldWith<V>>::fold_with(
                        import_conditions,
                        visitor,
                    )
                };
                ImportPrelude {
                    span,
                    href,
                    layer_name,
                    import_conditions,
                }
            }
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for ImportantFlag {
    #[doc = "Calls [Fold`::fold_important_flag`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_important_flag(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            ImportantFlag { span, value } => {
                let span = { <swc_common::Span as FoldWith<V>>::fold_with(span, visitor) };
                let value = { <Ident as FoldWith<V>>::fold_with(value, visitor) };
                ImportantFlag { span, value }
            }
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for Integer {
    #[doc = "Calls [Fold`::fold_integer`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_integer(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            Integer { span, value, raw } => {
                let span = { <swc_common::Span as FoldWith<V>>::fold_with(span, visitor) };
                let raw = { <Option<swc_atoms::Atom> as FoldWith<V>>::fold_with(raw, visitor) };
                Integer { span, value, raw }
            }
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for KeyframeBlock {
    #[doc = "Calls [Fold`::fold_keyframe_block`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_keyframe_block(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            KeyframeBlock {
                span,
                prelude,
                block,
            } => {
                let span = { <swc_common::Span as FoldWith<V>>::fold_with(span, visitor) };
                let prelude =
                    { <Vec<KeyframeSelector> as FoldWith<V>>::fold_with(prelude, visitor) };
                let block = { <SimpleBlock as FoldWith<V>>::fold_with(block, visitor) };
                KeyframeBlock {
                    span,
                    prelude,
                    block,
                }
            }
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for KeyframeSelector {
    #[doc = "Calls [Fold`::fold_keyframe_selector`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_keyframe_selector(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            KeyframeSelector::Ident { 0: _field_0 } => {
                let _field_0 = <Ident as FoldWith<V>>::fold_with(_field_0, visitor);
                KeyframeSelector::Ident { 0: _field_0 }
            }
            KeyframeSelector::Percentage { 0: _field_0 } => {
                let _field_0 = <Percentage as FoldWith<V>>::fold_with(_field_0, visitor);
                KeyframeSelector::Percentage { 0: _field_0 }
            }
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for KeyframesName {
    #[doc = "Calls [Fold`::fold_keyframes_name`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_keyframes_name(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            KeyframesName::CustomIdent { 0: _field_0 } => {
                let _field_0 = <Box<CustomIdent> as FoldWith<V>>::fold_with(_field_0, visitor);
                KeyframesName::CustomIdent { 0: _field_0 }
            }
            KeyframesName::Str { 0: _field_0 } => {
                let _field_0 = <Box<Str> as FoldWith<V>>::fold_with(_field_0, visitor);
                KeyframesName::Str { 0: _field_0 }
            }
            KeyframesName::PseudoPrefix { 0: _field_0 } => {
                let _field_0 =
                    <Box<KeyframesPseudoPrefix> as FoldWith<V>>::fold_with(_field_0, visitor);
                KeyframesName::PseudoPrefix { 0: _field_0 }
            }
            KeyframesName::PseudoFunction { 0: _field_0 } => {
                let _field_0 =
                    <Box<KeyframesPseudoFunction> as FoldWith<V>>::fold_with(_field_0, visitor);
                KeyframesName::PseudoFunction { 0: _field_0 }
            }
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for KeyframesPseudoFunction {
    #[doc = "Calls [Fold`::fold_keyframes_pseudo_function`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_keyframes_pseudo_function(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            KeyframesPseudoFunction { span, pseudo, name } => {
                let span = { <swc_common::Span as FoldWith<V>>::fold_with(span, visitor) };
                let pseudo = { <Ident as FoldWith<V>>::fold_with(pseudo, visitor) };
                let name = { <KeyframesName as FoldWith<V>>::fold_with(name, visitor) };
                KeyframesPseudoFunction { span, pseudo, name }
            }
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for KeyframesPseudoPrefix {
    #[doc = "Calls [Fold`::fold_keyframes_pseudo_prefix`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_keyframes_pseudo_prefix(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            KeyframesPseudoPrefix { span, pseudo, name } => {
                let span = { <swc_common::Span as FoldWith<V>>::fold_with(span, visitor) };
                let pseudo = { <Ident as FoldWith<V>>::fold_with(pseudo, visitor) };
                let name = { <KeyframesName as FoldWith<V>>::fold_with(name, visitor) };
                KeyframesPseudoPrefix { span, pseudo, name }
            }
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for LayerName {
    #[doc = "Calls [Fold`::fold_layer_name`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_layer_name(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            LayerName { span, name } => {
                let span = { <swc_common::Span as FoldWith<V>>::fold_with(span, visitor) };
                let name = { <Vec<Ident> as FoldWith<V>>::fold_with(name, visitor) };
                LayerName { span, name }
            }
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for LayerNameList {
    #[doc = "Calls [Fold`::fold_layer_name_list`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_layer_name_list(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            LayerNameList { span, name_list } => {
                let span = { <swc_common::Span as FoldWith<V>>::fold_with(span, visitor) };
                let name_list = { <Vec<LayerName> as FoldWith<V>>::fold_with(name_list, visitor) };
                LayerNameList { span, name_list }
            }
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for LayerPrelude {
    #[doc = "Calls [Fold`::fold_layer_prelude`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_layer_prelude(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            LayerPrelude::Name { 0: _field_0 } => {
                let _field_0 = <LayerName as FoldWith<V>>::fold_with(_field_0, visitor);
                LayerPrelude::Name { 0: _field_0 }
            }
            LayerPrelude::NameList { 0: _field_0 } => {
                let _field_0 = <LayerNameList as FoldWith<V>>::fold_with(_field_0, visitor);
                LayerPrelude::NameList { 0: _field_0 }
            }
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for Length {
    #[doc = "Calls [Fold`::fold_length`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_length(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            Length { span, value, unit } => {
                let span = { <swc_common::Span as FoldWith<V>>::fold_with(span, visitor) };
                let value = { <Number as FoldWith<V>>::fold_with(value, visitor) };
                let unit = { <Ident as FoldWith<V>>::fold_with(unit, visitor) };
                Length { span, value, unit }
            }
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for LengthPercentage {
    #[doc = "Calls [Fold`::fold_length_percentage`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_length_percentage(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            LengthPercentage::Length { 0: _field_0 } => {
                let _field_0 = <Length as FoldWith<V>>::fold_with(_field_0, visitor);
                LengthPercentage::Length { 0: _field_0 }
            }
            LengthPercentage::Percentage { 0: _field_0 } => {
                let _field_0 = <Percentage as FoldWith<V>>::fold_with(_field_0, visitor);
                LengthPercentage::Percentage { 0: _field_0 }
            }
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for ListOfComponentValues {
    #[doc = "Calls [Fold`::fold_list_of_component_values`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_list_of_component_values(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            ListOfComponentValues { span, children } => {
                let span = { <swc_common::Span as FoldWith<V>>::fold_with(span, visitor) };
                let children =
                    { <Vec<ComponentValue> as FoldWith<V>>::fold_with(children, visitor) };
                ListOfComponentValues { span, children }
            }
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for MediaAnd {
    #[doc = "Calls [Fold`::fold_media_and`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_media_and(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            MediaAnd {
                span,
                keyword,
                condition,
            } => {
                let span = { <swc_common::Span as FoldWith<V>>::fold_with(span, visitor) };
                let keyword = { <Option<Ident> as FoldWith<V>>::fold_with(keyword, visitor) };
                let condition = { <MediaInParens as FoldWith<V>>::fold_with(condition, visitor) };
                MediaAnd {
                    span,
                    keyword,
                    condition,
                }
            }
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for MediaCondition {
    #[doc = "Calls [Fold`::fold_media_condition`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_media_condition(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            MediaCondition { span, conditions } => {
                let span = { <swc_common::Span as FoldWith<V>>::fold_with(span, visitor) };
                let conditions =
                    { <Vec<MediaConditionAllType> as FoldWith<V>>::fold_with(conditions, visitor) };
                MediaCondition { span, conditions }
            }
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for MediaConditionAllType {
    #[doc = "Calls [Fold`::fold_media_condition_all_type`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_media_condition_all_type(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            MediaConditionAllType::Not { 0: _field_0 } => {
                let _field_0 = <MediaNot as FoldWith<V>>::fold_with(_field_0, visitor);
                MediaConditionAllType::Not { 0: _field_0 }
            }
            MediaConditionAllType::And { 0: _field_0 } => {
                let _field_0 = <MediaAnd as FoldWith<V>>::fold_with(_field_0, visitor);
                MediaConditionAllType::And { 0: _field_0 }
            }
            MediaConditionAllType::Or { 0: _field_0 } => {
                let _field_0 = <MediaOr as FoldWith<V>>::fold_with(_field_0, visitor);
                MediaConditionAllType::Or { 0: _field_0 }
            }
            MediaConditionAllType::MediaInParens { 0: _field_0 } => {
                let _field_0 = <MediaInParens as FoldWith<V>>::fold_with(_field_0, visitor);
                MediaConditionAllType::MediaInParens { 0: _field_0 }
            }
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for MediaConditionType {
    #[doc = "Calls [Fold`::fold_media_condition_type`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_media_condition_type(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            MediaConditionType::All { 0: _field_0 } => {
                let _field_0 = <MediaCondition as FoldWith<V>>::fold_with(_field_0, visitor);
                MediaConditionType::All { 0: _field_0 }
            }
            MediaConditionType::WithoutOr { 0: _field_0 } => {
                let _field_0 =
                    <MediaConditionWithoutOr as FoldWith<V>>::fold_with(_field_0, visitor);
                MediaConditionType::WithoutOr { 0: _field_0 }
            }
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for MediaConditionWithoutOr {
    #[doc = "Calls [Fold`::fold_media_condition_without_or`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_media_condition_without_or(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            MediaConditionWithoutOr { span, conditions } => {
                let span = { <swc_common::Span as FoldWith<V>>::fold_with(span, visitor) };
                let conditions = {
                    <Vec<MediaConditionWithoutOrType> as FoldWith<V>>::fold_with(
                        conditions, visitor,
                    )
                };
                MediaConditionWithoutOr { span, conditions }
            }
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for MediaConditionWithoutOrType {
    #[doc = "Calls [Fold`::fold_media_condition_without_or_type`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_media_condition_without_or_type(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            MediaConditionWithoutOrType::Not { 0: _field_0 } => {
                let _field_0 = <MediaNot as FoldWith<V>>::fold_with(_field_0, visitor);
                MediaConditionWithoutOrType::Not { 0: _field_0 }
            }
            MediaConditionWithoutOrType::And { 0: _field_0 } => {
                let _field_0 = <MediaAnd as FoldWith<V>>::fold_with(_field_0, visitor);
                MediaConditionWithoutOrType::And { 0: _field_0 }
            }
            MediaConditionWithoutOrType::MediaInParens { 0: _field_0 } => {
                let _field_0 = <MediaInParens as FoldWith<V>>::fold_with(_field_0, visitor);
                MediaConditionWithoutOrType::MediaInParens { 0: _field_0 }
            }
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for MediaFeature {
    #[doc = "Calls [Fold`::fold_media_feature`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_media_feature(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            MediaFeature::Plain { 0: _field_0 } => {
                let _field_0 = <MediaFeaturePlain as FoldWith<V>>::fold_with(_field_0, visitor);
                MediaFeature::Plain { 0: _field_0 }
            }
            MediaFeature::Boolean { 0: _field_0 } => {
                let _field_0 = <MediaFeatureBoolean as FoldWith<V>>::fold_with(_field_0, visitor);
                MediaFeature::Boolean { 0: _field_0 }
            }
            MediaFeature::Range { 0: _field_0 } => {
                let _field_0 = <MediaFeatureRange as FoldWith<V>>::fold_with(_field_0, visitor);
                MediaFeature::Range { 0: _field_0 }
            }
            MediaFeature::RangeInterval { 0: _field_0 } => {
                let _field_0 =
                    <MediaFeatureRangeInterval as FoldWith<V>>::fold_with(_field_0, visitor);
                MediaFeature::RangeInterval { 0: _field_0 }
            }
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for MediaFeatureBoolean {
    #[doc = "Calls [Fold`::fold_media_feature_boolean`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_media_feature_boolean(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            MediaFeatureBoolean { span, name } => {
                let span = { <swc_common::Span as FoldWith<V>>::fold_with(span, visitor) };
                let name = { <MediaFeatureName as FoldWith<V>>::fold_with(name, visitor) };
                MediaFeatureBoolean { span, name }
            }
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for MediaFeatureName {
    #[doc = "Calls [Fold`::fold_media_feature_name`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_media_feature_name(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            MediaFeatureName::Ident { 0: _field_0 } => {
                let _field_0 = <Ident as FoldWith<V>>::fold_with(_field_0, visitor);
                MediaFeatureName::Ident { 0: _field_0 }
            }
            MediaFeatureName::ExtensionName { 0: _field_0 } => {
                let _field_0 = <ExtensionName as FoldWith<V>>::fold_with(_field_0, visitor);
                MediaFeatureName::ExtensionName { 0: _field_0 }
            }
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for MediaFeaturePlain {
    #[doc = "Calls [Fold`::fold_media_feature_plain`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_media_feature_plain(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            MediaFeaturePlain { span, name, value } => {
                let span = { <swc_common::Span as FoldWith<V>>::fold_with(span, visitor) };
                let name = { <MediaFeatureName as FoldWith<V>>::fold_with(name, visitor) };
                let value = { <Box<MediaFeatureValue> as FoldWith<V>>::fold_with(value, visitor) };
                MediaFeaturePlain { span, name, value }
            }
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for MediaFeatureRange {
    #[doc = "Calls [Fold`::fold_media_feature_range`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_media_feature_range(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            MediaFeatureRange {
                span,
                left,
                comparison,
                right,
            } => {
                let span = { <swc_common::Span as FoldWith<V>>::fold_with(span, visitor) };
                let left = { <Box<MediaFeatureValue> as FoldWith<V>>::fold_with(left, visitor) };
                let comparison = {
                    <MediaFeatureRangeComparison as FoldWith<V>>::fold_with(comparison, visitor)
                };
                let right = { <Box<MediaFeatureValue> as FoldWith<V>>::fold_with(right, visitor) };
                MediaFeatureRange {
                    span,
                    left,
                    comparison,
                    right,
                }
            }
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for MediaFeatureRangeComparison {
    #[doc = "Calls [Fold`::fold_media_feature_range_comparison`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_media_feature_range_comparison(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            MediaFeatureRangeComparison::Lt => MediaFeatureRangeComparison::Lt,
            MediaFeatureRangeComparison::Le => MediaFeatureRangeComparison::Le,
            MediaFeatureRangeComparison::Gt => MediaFeatureRangeComparison::Gt,
            MediaFeatureRangeComparison::Ge => MediaFeatureRangeComparison::Ge,
            MediaFeatureRangeComparison::Eq => MediaFeatureRangeComparison::Eq,
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for MediaFeatureRangeInterval {
    #[doc = "Calls [Fold`::fold_media_feature_range_interval`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_media_feature_range_interval(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            MediaFeatureRangeInterval {
                span,
                left,
                left_comparison,
                name,
                right_comparison,
                right,
            } => {
                let span = { <swc_common::Span as FoldWith<V>>::fold_with(span, visitor) };
                let left = { <Box<MediaFeatureValue> as FoldWith<V>>::fold_with(left, visitor) };
                let left_comparison = {
                    <MediaFeatureRangeComparison as FoldWith<V>>::fold_with(
                        left_comparison,
                        visitor,
                    )
                };
                let name = { <MediaFeatureName as FoldWith<V>>::fold_with(name, visitor) };
                let right_comparison = {
                    <MediaFeatureRangeComparison as FoldWith<V>>::fold_with(
                        right_comparison,
                        visitor,
                    )
                };
                let right = { <Box<MediaFeatureValue> as FoldWith<V>>::fold_with(right, visitor) };
                MediaFeatureRangeInterval {
                    span,
                    left,
                    left_comparison,
                    name,
                    right_comparison,
                    right,
                }
            }
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for MediaFeatureValue {
    #[doc = "Calls [Fold`::fold_media_feature_value`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_media_feature_value(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            MediaFeatureValue::Number { 0: _field_0 } => {
                let _field_0 = <Number as FoldWith<V>>::fold_with(_field_0, visitor);
                MediaFeatureValue::Number { 0: _field_0 }
            }
            MediaFeatureValue::Dimension { 0: _field_0 } => {
                let _field_0 = <Dimension as FoldWith<V>>::fold_with(_field_0, visitor);
                MediaFeatureValue::Dimension { 0: _field_0 }
            }
            MediaFeatureValue::Ident { 0: _field_0 } => {
                let _field_0 = <Ident as FoldWith<V>>::fold_with(_field_0, visitor);
                MediaFeatureValue::Ident { 0: _field_0 }
            }
            MediaFeatureValue::Ratio { 0: _field_0 } => {
                let _field_0 = <Ratio as FoldWith<V>>::fold_with(_field_0, visitor);
                MediaFeatureValue::Ratio { 0: _field_0 }
            }
            MediaFeatureValue::Function { 0: _field_0 } => {
                let _field_0 = <Function as FoldWith<V>>::fold_with(_field_0, visitor);
                MediaFeatureValue::Function { 0: _field_0 }
            }
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for MediaInParens {
    #[doc = "Calls [Fold`::fold_media_in_parens`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_media_in_parens(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            MediaInParens::MediaCondition { 0: _field_0 } => {
                let _field_0 = <MediaCondition as FoldWith<V>>::fold_with(_field_0, visitor);
                MediaInParens::MediaCondition { 0: _field_0 }
            }
            MediaInParens::Feature { 0: _field_0 } => {
                let _field_0 = <Box<MediaFeature> as FoldWith<V>>::fold_with(_field_0, visitor);
                MediaInParens::Feature { 0: _field_0 }
            }
            MediaInParens::GeneralEnclosed { 0: _field_0 } => {
                let _field_0 = <GeneralEnclosed as FoldWith<V>>::fold_with(_field_0, visitor);
                MediaInParens::GeneralEnclosed { 0: _field_0 }
            }
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for MediaNot {
    #[doc = "Calls [Fold`::fold_media_not`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_media_not(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            MediaNot {
                span,
                keyword,
                condition,
            } => {
                let span = { <swc_common::Span as FoldWith<V>>::fold_with(span, visitor) };
                let keyword = { <Option<Ident> as FoldWith<V>>::fold_with(keyword, visitor) };
                let condition = { <MediaInParens as FoldWith<V>>::fold_with(condition, visitor) };
                MediaNot {
                    span,
                    keyword,
                    condition,
                }
            }
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for MediaOr {
    #[doc = "Calls [Fold`::fold_media_or`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_media_or(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            MediaOr {
                span,
                keyword,
                condition,
            } => {
                let span = { <swc_common::Span as FoldWith<V>>::fold_with(span, visitor) };
                let keyword = { <Option<Ident> as FoldWith<V>>::fold_with(keyword, visitor) };
                let condition = { <MediaInParens as FoldWith<V>>::fold_with(condition, visitor) };
                MediaOr {
                    span,
                    keyword,
                    condition,
                }
            }
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for MediaQuery {
    #[doc = "Calls [Fold`::fold_media_query`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_media_query(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            MediaQuery {
                span,
                modifier,
                media_type,
                keyword,
                condition,
            } => {
                let span = { <swc_common::Span as FoldWith<V>>::fold_with(span, visitor) };
                let modifier = { <Option<Ident> as FoldWith<V>>::fold_with(modifier, visitor) };
                let media_type =
                    { <Option<MediaType> as FoldWith<V>>::fold_with(media_type, visitor) };
                let keyword = { <Option<Ident> as FoldWith<V>>::fold_with(keyword, visitor) };
                let condition = {
                    <Option<Box<MediaConditionType>> as FoldWith<V>>::fold_with(condition, visitor)
                };
                MediaQuery {
                    span,
                    modifier,
                    media_type,
                    keyword,
                    condition,
                }
            }
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for MediaQueryList {
    #[doc = "Calls [Fold`::fold_media_query_list`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_media_query_list(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            MediaQueryList { span, queries } => {
                let span = { <swc_common::Span as FoldWith<V>>::fold_with(span, visitor) };
                let queries = { <Vec<MediaQuery> as FoldWith<V>>::fold_with(queries, visitor) };
                MediaQueryList { span, queries }
            }
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for MediaType {
    #[doc = "Calls [Fold`::fold_media_type`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_media_type(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            MediaType::Ident { 0: _field_0 } => {
                let _field_0 = <Ident as FoldWith<V>>::fold_with(_field_0, visitor);
                MediaType::Ident { 0: _field_0 }
            }
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for NamedNamespace {
    #[doc = "Calls [Fold`::fold_named_namespace`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_named_namespace(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            NamedNamespace { span, name } => {
                let span = { <swc_common::Span as FoldWith<V>>::fold_with(span, visitor) };
                let name = { <Ident as FoldWith<V>>::fold_with(name, visitor) };
                NamedNamespace { span, name }
            }
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for Namespace {
    #[doc = "Calls [Fold`::fold_namespace`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_namespace(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            Namespace::Named { 0: _field_0 } => {
                let _field_0 = <NamedNamespace as FoldWith<V>>::fold_with(_field_0, visitor);
                Namespace::Named { 0: _field_0 }
            }
            Namespace::Any { 0: _field_0 } => {
                let _field_0 = <AnyNamespace as FoldWith<V>>::fold_with(_field_0, visitor);
                Namespace::Any { 0: _field_0 }
            }
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for NamespacePrefix {
    #[doc = "Calls [Fold`::fold_namespace_prefix`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_namespace_prefix(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            NamespacePrefix { span, namespace } => {
                let span = { <swc_common::Span as FoldWith<V>>::fold_with(span, visitor) };
                let namespace =
                    { <Option<Namespace> as FoldWith<V>>::fold_with(namespace, visitor) };
                NamespacePrefix { span, namespace }
            }
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for NamespacePrelude {
    #[doc = "Calls [Fold`::fold_namespace_prelude`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_namespace_prelude(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            NamespacePrelude { span, prefix, uri } => {
                let span = { <swc_common::Span as FoldWith<V>>::fold_with(span, visitor) };
                let prefix = { <Option<Ident> as FoldWith<V>>::fold_with(prefix, visitor) };
                let uri = { <Box<NamespacePreludeUri> as FoldWith<V>>::fold_with(uri, visitor) };
                NamespacePrelude { span, prefix, uri }
            }
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for NamespacePreludeUri {
    #[doc = "Calls [Fold`::fold_namespace_prelude_uri`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_namespace_prelude_uri(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            NamespacePreludeUri::Url { 0: _field_0 } => {
                let _field_0 = <Url as FoldWith<V>>::fold_with(_field_0, visitor);
                NamespacePreludeUri::Url { 0: _field_0 }
            }
            NamespacePreludeUri::Str { 0: _field_0 } => {
                let _field_0 = <Str as FoldWith<V>>::fold_with(_field_0, visitor);
                NamespacePreludeUri::Str { 0: _field_0 }
            }
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for NestingSelector {
    #[doc = "Calls [Fold`::fold_nesting_selector`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_nesting_selector(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            NestingSelector { span } => {
                let span = { <swc_common::Span as FoldWith<V>>::fold_with(span, visitor) };
                NestingSelector { span }
            }
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for Number {
    #[doc = "Calls [Fold`::fold_number`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_number(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            Number { span, value, raw } => {
                let span = { <swc_common::Span as FoldWith<V>>::fold_with(span, visitor) };
                let raw = { <Option<swc_atoms::Atom> as FoldWith<V>>::fold_with(raw, visitor) };
                Number { span, value, raw }
            }
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for NumberType {
    #[doc = "Calls [Fold`::fold_number_type`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_number_type(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            NumberType::Integer => NumberType::Integer,
            NumberType::Number => NumberType::Number,
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for PageSelector {
    #[doc = "Calls [Fold`::fold_page_selector`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_page_selector(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            PageSelector {
                span,
                page_type,
                pseudos,
            } => {
                let span = { <swc_common::Span as FoldWith<V>>::fold_with(span, visitor) };
                let page_type =
                    { <Option<PageSelectorType> as FoldWith<V>>::fold_with(page_type, visitor) };
                let pseudos = {
                    <Option<Vec<PageSelectorPseudo>> as FoldWith<V>>::fold_with(pseudos, visitor)
                };
                PageSelector {
                    span,
                    page_type,
                    pseudos,
                }
            }
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for PageSelectorList {
    #[doc = "Calls [Fold`::fold_page_selector_list`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_page_selector_list(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            PageSelectorList { span, selectors } => {
                let span = { <swc_common::Span as FoldWith<V>>::fold_with(span, visitor) };
                let selectors =
                    { <Vec<PageSelector> as FoldWith<V>>::fold_with(selectors, visitor) };
                PageSelectorList { span, selectors }
            }
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for PageSelectorPseudo {
    #[doc = "Calls [Fold`::fold_page_selector_pseudo`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_page_selector_pseudo(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            PageSelectorPseudo { span, value } => {
                let span = { <swc_common::Span as FoldWith<V>>::fold_with(span, visitor) };
                let value = { <Ident as FoldWith<V>>::fold_with(value, visitor) };
                PageSelectorPseudo { span, value }
            }
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for PageSelectorType {
    #[doc = "Calls [Fold`::fold_page_selector_type`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_page_selector_type(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            PageSelectorType { span, value } => {
                let span = { <swc_common::Span as FoldWith<V>>::fold_with(span, visitor) };
                let value = { <Ident as FoldWith<V>>::fold_with(value, visitor) };
                PageSelectorType { span, value }
            }
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for Percentage {
    #[doc = "Calls [Fold`::fold_percentage`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_percentage(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            Percentage { span, value } => {
                let span = { <swc_common::Span as FoldWith<V>>::fold_with(span, visitor) };
                let value = { <Number as FoldWith<V>>::fold_with(value, visitor) };
                Percentage { span, value }
            }
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for PseudoClassSelector {
    #[doc = "Calls [Fold`::fold_pseudo_class_selector`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_pseudo_class_selector(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            PseudoClassSelector {
                span,
                name,
                children,
            } => {
                let span = { <swc_common::Span as FoldWith<V>>::fold_with(span, visitor) };
                let name = { <Ident as FoldWith<V>>::fold_with(name, visitor) };
                let children = {
                    <Option<Vec<PseudoClassSelectorChildren>> as FoldWith<V>>::fold_with(
                        children, visitor,
                    )
                };
                PseudoClassSelector {
                    span,
                    name,
                    children,
                }
            }
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for PseudoClassSelectorChildren {
    #[doc = "Calls [Fold`::fold_pseudo_class_selector_children`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_pseudo_class_selector_children(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            PseudoClassSelectorChildren::PreservedToken { 0: _field_0 } => {
                let _field_0 = <TokenAndSpan as FoldWith<V>>::fold_with(_field_0, visitor);
                PseudoClassSelectorChildren::PreservedToken { 0: _field_0 }
            }
            PseudoClassSelectorChildren::AnPlusB { 0: _field_0 } => {
                let _field_0 = <AnPlusB as FoldWith<V>>::fold_with(_field_0, visitor);
                PseudoClassSelectorChildren::AnPlusB { 0: _field_0 }
            }
            PseudoClassSelectorChildren::Ident { 0: _field_0 } => {
                let _field_0 = <Ident as FoldWith<V>>::fold_with(_field_0, visitor);
                PseudoClassSelectorChildren::Ident { 0: _field_0 }
            }
            PseudoClassSelectorChildren::Str { 0: _field_0 } => {
                let _field_0 = <Str as FoldWith<V>>::fold_with(_field_0, visitor);
                PseudoClassSelectorChildren::Str { 0: _field_0 }
            }
            PseudoClassSelectorChildren::Delimiter { 0: _field_0 } => {
                let _field_0 = <Delimiter as FoldWith<V>>::fold_with(_field_0, visitor);
                PseudoClassSelectorChildren::Delimiter { 0: _field_0 }
            }
            PseudoClassSelectorChildren::ComplexSelector { 0: _field_0 } => {
                let _field_0 = <ComplexSelector as FoldWith<V>>::fold_with(_field_0, visitor);
                PseudoClassSelectorChildren::ComplexSelector { 0: _field_0 }
            }
            PseudoClassSelectorChildren::SelectorList { 0: _field_0 } => {
                let _field_0 = <SelectorList as FoldWith<V>>::fold_with(_field_0, visitor);
                PseudoClassSelectorChildren::SelectorList { 0: _field_0 }
            }
            PseudoClassSelectorChildren::ForgivingSelectorList { 0: _field_0 } => {
                let _field_0 = <ForgivingSelectorList as FoldWith<V>>::fold_with(_field_0, visitor);
                PseudoClassSelectorChildren::ForgivingSelectorList { 0: _field_0 }
            }
            PseudoClassSelectorChildren::CompoundSelectorList { 0: _field_0 } => {
                let _field_0 = <CompoundSelectorList as FoldWith<V>>::fold_with(_field_0, visitor);
                PseudoClassSelectorChildren::CompoundSelectorList { 0: _field_0 }
            }
            PseudoClassSelectorChildren::RelativeSelectorList { 0: _field_0 } => {
                let _field_0 = <RelativeSelectorList as FoldWith<V>>::fold_with(_field_0, visitor);
                PseudoClassSelectorChildren::RelativeSelectorList { 0: _field_0 }
            }
            PseudoClassSelectorChildren::ForgivingRelativeSelectorList { 0: _field_0 } => {
                let _field_0 =
                    <ForgivingRelativeSelectorList as FoldWith<V>>::fold_with(_field_0, visitor);
                PseudoClassSelectorChildren::ForgivingRelativeSelectorList { 0: _field_0 }
            }
            PseudoClassSelectorChildren::CompoundSelector { 0: _field_0 } => {
                let _field_0 = <CompoundSelector as FoldWith<V>>::fold_with(_field_0, visitor);
                PseudoClassSelectorChildren::CompoundSelector { 0: _field_0 }
            }
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for PseudoElementSelector {
    #[doc = "Calls [Fold`::fold_pseudo_element_selector`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_pseudo_element_selector(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            PseudoElementSelector {
                span,
                name,
                children,
            } => {
                let span = { <swc_common::Span as FoldWith<V>>::fold_with(span, visitor) };
                let name = { <Ident as FoldWith<V>>::fold_with(name, visitor) };
                let children = {
                    <Option<Vec<PseudoElementSelectorChildren>> as FoldWith<V>>::fold_with(
                        children, visitor,
                    )
                };
                PseudoElementSelector {
                    span,
                    name,
                    children,
                }
            }
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for PseudoElementSelectorChildren {
    #[doc = "Calls [Fold`::fold_pseudo_element_selector_children`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_pseudo_element_selector_children(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            PseudoElementSelectorChildren::PreservedToken { 0: _field_0 } => {
                let _field_0 = <TokenAndSpan as FoldWith<V>>::fold_with(_field_0, visitor);
                PseudoElementSelectorChildren::PreservedToken { 0: _field_0 }
            }
            PseudoElementSelectorChildren::Ident { 0: _field_0 } => {
                let _field_0 = <Ident as FoldWith<V>>::fold_with(_field_0, visitor);
                PseudoElementSelectorChildren::Ident { 0: _field_0 }
            }
            PseudoElementSelectorChildren::CompoundSelector { 0: _field_0 } => {
                let _field_0 = <CompoundSelector as FoldWith<V>>::fold_with(_field_0, visitor);
                PseudoElementSelectorChildren::CompoundSelector { 0: _field_0 }
            }
            PseudoElementSelectorChildren::CustomHighlightName { 0: _field_0 } => {
                let _field_0 = <CustomHighlightName as FoldWith<V>>::fold_with(_field_0, visitor);
                PseudoElementSelectorChildren::CustomHighlightName { 0: _field_0 }
            }
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for QualifiedRule {
    #[doc = "Calls [Fold`::fold_qualified_rule`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_qualified_rule(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            QualifiedRule {
                span,
                prelude,
                block,
            } => {
                let span = { <swc_common::Span as FoldWith<V>>::fold_with(span, visitor) };
                let prelude =
                    { <QualifiedRulePrelude as FoldWith<V>>::fold_with(prelude, visitor) };
                let block = { <SimpleBlock as FoldWith<V>>::fold_with(block, visitor) };
                QualifiedRule {
                    span,
                    prelude,
                    block,
                }
            }
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for QualifiedRulePrelude {
    #[doc = "Calls [Fold`::fold_qualified_rule_prelude`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_qualified_rule_prelude(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            QualifiedRulePrelude::SelectorList { 0: _field_0 } => {
                let _field_0 = <SelectorList as FoldWith<V>>::fold_with(_field_0, visitor);
                QualifiedRulePrelude::SelectorList { 0: _field_0 }
            }
            QualifiedRulePrelude::RelativeSelectorList { 0: _field_0 } => {
                let _field_0 = <RelativeSelectorList as FoldWith<V>>::fold_with(_field_0, visitor);
                QualifiedRulePrelude::RelativeSelectorList { 0: _field_0 }
            }
            QualifiedRulePrelude::ListOfComponentValues { 0: _field_0 } => {
                let _field_0 = <ListOfComponentValues as FoldWith<V>>::fold_with(_field_0, visitor);
                QualifiedRulePrelude::ListOfComponentValues { 0: _field_0 }
            }
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for QueryInParens {
    #[doc = "Calls [Fold`::fold_query_in_parens`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_query_in_parens(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            QueryInParens::ContainerQuery { 0: _field_0 } => {
                let _field_0 = <Box<ContainerQuery> as FoldWith<V>>::fold_with(_field_0, visitor);
                QueryInParens::ContainerQuery { 0: _field_0 }
            }
            QueryInParens::SizeFeature { 0: _field_0 } => {
                let _field_0 = <SizeFeature as FoldWith<V>>::fold_with(_field_0, visitor);
                QueryInParens::SizeFeature { 0: _field_0 }
            }
            QueryInParens::GeneralEnclosed { 0: _field_0 } => {
                let _field_0 = <GeneralEnclosed as FoldWith<V>>::fold_with(_field_0, visitor);
                QueryInParens::GeneralEnclosed { 0: _field_0 }
            }
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for Ratio {
    #[doc = "Calls [Fold`::fold_ratio`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_ratio(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            Ratio { span, left, right } => {
                let span = { <swc_common::Span as FoldWith<V>>::fold_with(span, visitor) };
                let left = { <Number as FoldWith<V>>::fold_with(left, visitor) };
                let right = { <Option<Number> as FoldWith<V>>::fold_with(right, visitor) };
                Ratio { span, left, right }
            }
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for RelativeSelector {
    #[doc = "Calls [Fold`::fold_relative_selector`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_relative_selector(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            RelativeSelector {
                span,
                combinator,
                selector,
            } => {
                let span = { <swc_common::Span as FoldWith<V>>::fold_with(span, visitor) };
                let combinator =
                    { <Option<Combinator> as FoldWith<V>>::fold_with(combinator, visitor) };
                let selector = { <ComplexSelector as FoldWith<V>>::fold_with(selector, visitor) };
                RelativeSelector {
                    span,
                    combinator,
                    selector,
                }
            }
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for RelativeSelectorList {
    #[doc = "Calls [Fold`::fold_relative_selector_list`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_relative_selector_list(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            RelativeSelectorList { span, children } => {
                let span = { <swc_common::Span as FoldWith<V>>::fold_with(span, visitor) };
                let children =
                    { <Vec<RelativeSelector> as FoldWith<V>>::fold_with(children, visitor) };
                RelativeSelectorList { span, children }
            }
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for Resolution {
    #[doc = "Calls [Fold`::fold_resolution`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_resolution(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            Resolution { span, value, unit } => {
                let span = { <swc_common::Span as FoldWith<V>>::fold_with(span, visitor) };
                let value = { <Number as FoldWith<V>>::fold_with(value, visitor) };
                let unit = { <Ident as FoldWith<V>>::fold_with(unit, visitor) };
                Resolution { span, value, unit }
            }
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for Rule {
    #[doc = "Calls [Fold`::fold_rule`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_rule(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            Rule::QualifiedRule { 0: _field_0 } => {
                let _field_0 = <Box<QualifiedRule> as FoldWith<V>>::fold_with(_field_0, visitor);
                Rule::QualifiedRule { 0: _field_0 }
            }
            Rule::AtRule { 0: _field_0 } => {
                let _field_0 = <Box<AtRule> as FoldWith<V>>::fold_with(_field_0, visitor);
                Rule::AtRule { 0: _field_0 }
            }
            Rule::ListOfComponentValues { 0: _field_0 } => {
                let _field_0 =
                    <Box<ListOfComponentValues> as FoldWith<V>>::fold_with(_field_0, visitor);
                Rule::ListOfComponentValues { 0: _field_0 }
            }
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for ScopeRange {
    #[doc = "Calls [Fold`::fold_scope_range`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_scope_range(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            ScopeRange {
                span,
                scope_start,
                scope_end,
            } => {
                let span = { <swc_common::Span as FoldWith<V>>::fold_with(span, visitor) };
                let scope_start = {
                    <Option<ForgivingSelectorList> as FoldWith<V>>::fold_with(scope_start, visitor)
                };
                let scope_end = {
                    <Option<ForgivingSelectorList> as FoldWith<V>>::fold_with(scope_end, visitor)
                };
                ScopeRange {
                    span,
                    scope_start,
                    scope_end,
                }
            }
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for SelectorList {
    #[doc = "Calls [Fold`::fold_selector_list`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_selector_list(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            SelectorList { span, children } => {
                let span = { <swc_common::Span as FoldWith<V>>::fold_with(span, visitor) };
                let children =
                    { <Vec<ComplexSelector> as FoldWith<V>>::fold_with(children, visitor) };
                SelectorList { span, children }
            }
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for SequenceOfCustomIdents {
    #[doc = "Calls [Fold`::fold_sequence_of_custom_idents`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_sequence_of_custom_idents(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            SequenceOfCustomIdents { span, value } => {
                let span = { <swc_common::Span as FoldWith<V>>::fold_with(span, visitor) };
                let value = { <Vec<CustomIdent> as FoldWith<V>>::fold_with(value, visitor) };
                SequenceOfCustomIdents { span, value }
            }
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for SimpleBlock {
    #[doc = "Calls [Fold`::fold_simple_block`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_simple_block(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            SimpleBlock { span, name, value } => {
                let span = { <swc_common::Span as FoldWith<V>>::fold_with(span, visitor) };
                let name = { <TokenAndSpan as FoldWith<V>>::fold_with(name, visitor) };
                let value = { <Vec<ComponentValue> as FoldWith<V>>::fold_with(value, visitor) };
                SimpleBlock { span, name, value }
            }
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for SizeFeature {
    #[doc = "Calls [Fold`::fold_size_feature`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_size_feature(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            SizeFeature::Plain { 0: _field_0 } => {
                let _field_0 = <SizeFeaturePlain as FoldWith<V>>::fold_with(_field_0, visitor);
                SizeFeature::Plain { 0: _field_0 }
            }
            SizeFeature::Boolean { 0: _field_0 } => {
                let _field_0 = <SizeFeatureBoolean as FoldWith<V>>::fold_with(_field_0, visitor);
                SizeFeature::Boolean { 0: _field_0 }
            }
            SizeFeature::Range { 0: _field_0 } => {
                let _field_0 = <SizeFeatureRange as FoldWith<V>>::fold_with(_field_0, visitor);
                SizeFeature::Range { 0: _field_0 }
            }
            SizeFeature::RangeInterval { 0: _field_0 } => {
                let _field_0 =
                    <SizeFeatureRangeInterval as FoldWith<V>>::fold_with(_field_0, visitor);
                SizeFeature::RangeInterval { 0: _field_0 }
            }
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for SizeFeatureBoolean {
    #[doc = "Calls [Fold`::fold_size_feature_boolean`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_size_feature_boolean(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            SizeFeatureBoolean { span, name } => {
                let span = { <swc_common::Span as FoldWith<V>>::fold_with(span, visitor) };
                let name = { <SizeFeatureName as FoldWith<V>>::fold_with(name, visitor) };
                SizeFeatureBoolean { span, name }
            }
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for SizeFeatureName {
    #[doc = "Calls [Fold`::fold_size_feature_name`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_size_feature_name(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            SizeFeatureName::Ident { 0: _field_0 } => {
                let _field_0 = <Ident as FoldWith<V>>::fold_with(_field_0, visitor);
                SizeFeatureName::Ident { 0: _field_0 }
            }
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for SizeFeaturePlain {
    #[doc = "Calls [Fold`::fold_size_feature_plain`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_size_feature_plain(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            SizeFeaturePlain { span, name, value } => {
                let span = { <swc_common::Span as FoldWith<V>>::fold_with(span, visitor) };
                let name = { <SizeFeatureName as FoldWith<V>>::fold_with(name, visitor) };
                let value = { <Box<SizeFeatureValue> as FoldWith<V>>::fold_with(value, visitor) };
                SizeFeaturePlain { span, name, value }
            }
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for SizeFeatureRange {
    #[doc = "Calls [Fold`::fold_size_feature_range`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_size_feature_range(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            SizeFeatureRange {
                span,
                left,
                comparison,
                right,
            } => {
                let span = { <swc_common::Span as FoldWith<V>>::fold_with(span, visitor) };
                let left = { <Box<SizeFeatureValue> as FoldWith<V>>::fold_with(left, visitor) };
                let comparison =
                    { <SizeFeatureRangeComparison as FoldWith<V>>::fold_with(comparison, visitor) };
                let right = { <Box<SizeFeatureValue> as FoldWith<V>>::fold_with(right, visitor) };
                SizeFeatureRange {
                    span,
                    left,
                    comparison,
                    right,
                }
            }
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for SizeFeatureRangeComparison {
    #[doc = "Calls [Fold`::fold_size_feature_range_comparison`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_size_feature_range_comparison(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            SizeFeatureRangeComparison::Lt => SizeFeatureRangeComparison::Lt,
            SizeFeatureRangeComparison::Le => SizeFeatureRangeComparison::Le,
            SizeFeatureRangeComparison::Gt => SizeFeatureRangeComparison::Gt,
            SizeFeatureRangeComparison::Ge => SizeFeatureRangeComparison::Ge,
            SizeFeatureRangeComparison::Eq => SizeFeatureRangeComparison::Eq,
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for SizeFeatureRangeInterval {
    #[doc = "Calls [Fold`::fold_size_feature_range_interval`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_size_feature_range_interval(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            SizeFeatureRangeInterval {
                span,
                left,
                left_comparison,
                name,
                right_comparison,
                right,
            } => {
                let span = { <swc_common::Span as FoldWith<V>>::fold_with(span, visitor) };
                let left = { <Box<SizeFeatureValue> as FoldWith<V>>::fold_with(left, visitor) };
                let left_comparison = {
                    <SizeFeatureRangeComparison as FoldWith<V>>::fold_with(left_comparison, visitor)
                };
                let name = { <SizeFeatureName as FoldWith<V>>::fold_with(name, visitor) };
                let right_comparison = {
                    <SizeFeatureRangeComparison as FoldWith<V>>::fold_with(
                        right_comparison,
                        visitor,
                    )
                };
                let right = { <Box<SizeFeatureValue> as FoldWith<V>>::fold_with(right, visitor) };
                SizeFeatureRangeInterval {
                    span,
                    left,
                    left_comparison,
                    name,
                    right_comparison,
                    right,
                }
            }
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for SizeFeatureValue {
    #[doc = "Calls [Fold`::fold_size_feature_value`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_size_feature_value(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            SizeFeatureValue::Number { 0: _field_0 } => {
                let _field_0 = <Number as FoldWith<V>>::fold_with(_field_0, visitor);
                SizeFeatureValue::Number { 0: _field_0 }
            }
            SizeFeatureValue::Dimension { 0: _field_0 } => {
                let _field_0 = <Dimension as FoldWith<V>>::fold_with(_field_0, visitor);
                SizeFeatureValue::Dimension { 0: _field_0 }
            }
            SizeFeatureValue::Ident { 0: _field_0 } => {
                let _field_0 = <Ident as FoldWith<V>>::fold_with(_field_0, visitor);
                SizeFeatureValue::Ident { 0: _field_0 }
            }
            SizeFeatureValue::Ratio { 0: _field_0 } => {
                let _field_0 = <Ratio as FoldWith<V>>::fold_with(_field_0, visitor);
                SizeFeatureValue::Ratio { 0: _field_0 }
            }
            SizeFeatureValue::Function { 0: _field_0 } => {
                let _field_0 = <Function as FoldWith<V>>::fold_with(_field_0, visitor);
                SizeFeatureValue::Function { 0: _field_0 }
            }
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for Str {
    #[doc = "Calls [Fold`::fold_str`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_str(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            Str { span, value, raw } => {
                let span = { <swc_common::Span as FoldWith<V>>::fold_with(span, visitor) };
                let value = { <swc_atoms::Atom as FoldWith<V>>::fold_with(value, visitor) };
                let raw = { <Option<swc_atoms::Atom> as FoldWith<V>>::fold_with(raw, visitor) };
                Str { span, value, raw }
            }
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for StyleBlock {
    #[doc = "Calls [Fold`::fold_style_block`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_style_block(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            StyleBlock::AtRule { 0: _field_0 } => {
                let _field_0 = <Box<AtRule> as FoldWith<V>>::fold_with(_field_0, visitor);
                StyleBlock::AtRule { 0: _field_0 }
            }
            StyleBlock::Declaration { 0: _field_0 } => {
                let _field_0 = <Box<Declaration> as FoldWith<V>>::fold_with(_field_0, visitor);
                StyleBlock::Declaration { 0: _field_0 }
            }
            StyleBlock::QualifiedRule { 0: _field_0 } => {
                let _field_0 = <Box<QualifiedRule> as FoldWith<V>>::fold_with(_field_0, visitor);
                StyleBlock::QualifiedRule { 0: _field_0 }
            }
            StyleBlock::ListOfComponentValues { 0: _field_0 } => {
                let _field_0 =
                    <Box<ListOfComponentValues> as FoldWith<V>>::fold_with(_field_0, visitor);
                StyleBlock::ListOfComponentValues { 0: _field_0 }
            }
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for Stylesheet {
    #[doc = "Calls [Fold`::fold_stylesheet`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_stylesheet(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            Stylesheet { span, rules } => {
                let span = { <swc_common::Span as FoldWith<V>>::fold_with(span, visitor) };
                let rules = { <Vec<Rule> as FoldWith<V>>::fold_with(rules, visitor) };
                Stylesheet { span, rules }
            }
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for SubclassSelector {
    #[doc = "Calls [Fold`::fold_subclass_selector`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_subclass_selector(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            SubclassSelector::Id { 0: _field_0 } => {
                let _field_0 = <IdSelector as FoldWith<V>>::fold_with(_field_0, visitor);
                SubclassSelector::Id { 0: _field_0 }
            }
            SubclassSelector::Class { 0: _field_0 } => {
                let _field_0 = <ClassSelector as FoldWith<V>>::fold_with(_field_0, visitor);
                SubclassSelector::Class { 0: _field_0 }
            }
            SubclassSelector::Attribute { 0: _field_0 } => {
                let _field_0 =
                    <Box<AttributeSelector> as FoldWith<V>>::fold_with(_field_0, visitor);
                SubclassSelector::Attribute { 0: _field_0 }
            }
            SubclassSelector::PseudoClass { 0: _field_0 } => {
                let _field_0 = <PseudoClassSelector as FoldWith<V>>::fold_with(_field_0, visitor);
                SubclassSelector::PseudoClass { 0: _field_0 }
            }
            SubclassSelector::PseudoElement { 0: _field_0 } => {
                let _field_0 = <PseudoElementSelector as FoldWith<V>>::fold_with(_field_0, visitor);
                SubclassSelector::PseudoElement { 0: _field_0 }
            }
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for SupportsAnd {
    #[doc = "Calls [Fold`::fold_supports_and`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_supports_and(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            SupportsAnd {
                span,
                keyword,
                condition,
            } => {
                let span = { <swc_common::Span as FoldWith<V>>::fold_with(span, visitor) };
                let keyword = { <Option<Ident> as FoldWith<V>>::fold_with(keyword, visitor) };
                let condition =
                    { <Box<SupportsInParens> as FoldWith<V>>::fold_with(condition, visitor) };
                SupportsAnd {
                    span,
                    keyword,
                    condition,
                }
            }
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for SupportsCondition {
    #[doc = "Calls [Fold`::fold_supports_condition`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_supports_condition(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            SupportsCondition { span, conditions } => {
                let span = { <swc_common::Span as FoldWith<V>>::fold_with(span, visitor) };
                let conditions =
                    { <Vec<SupportsConditionType> as FoldWith<V>>::fold_with(conditions, visitor) };
                SupportsCondition { span, conditions }
            }
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for SupportsConditionType {
    #[doc = "Calls [Fold`::fold_supports_condition_type`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_supports_condition_type(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            SupportsConditionType::Not { 0: _field_0 } => {
                let _field_0 = <SupportsNot as FoldWith<V>>::fold_with(_field_0, visitor);
                SupportsConditionType::Not { 0: _field_0 }
            }
            SupportsConditionType::And { 0: _field_0 } => {
                let _field_0 = <SupportsAnd as FoldWith<V>>::fold_with(_field_0, visitor);
                SupportsConditionType::And { 0: _field_0 }
            }
            SupportsConditionType::Or { 0: _field_0 } => {
                let _field_0 = <SupportsOr as FoldWith<V>>::fold_with(_field_0, visitor);
                SupportsConditionType::Or { 0: _field_0 }
            }
            SupportsConditionType::SupportsInParens { 0: _field_0 } => {
                let _field_0 = <SupportsInParens as FoldWith<V>>::fold_with(_field_0, visitor);
                SupportsConditionType::SupportsInParens { 0: _field_0 }
            }
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for SupportsFeature {
    #[doc = "Calls [Fold`::fold_supports_feature`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_supports_feature(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            SupportsFeature::Declaration { 0: _field_0 } => {
                let _field_0 = <Box<Declaration> as FoldWith<V>>::fold_with(_field_0, visitor);
                SupportsFeature::Declaration { 0: _field_0 }
            }
            SupportsFeature::Function { 0: _field_0 } => {
                let _field_0 = <Function as FoldWith<V>>::fold_with(_field_0, visitor);
                SupportsFeature::Function { 0: _field_0 }
            }
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for SupportsInParens {
    #[doc = "Calls [Fold`::fold_supports_in_parens`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_supports_in_parens(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            SupportsInParens::SupportsCondition { 0: _field_0 } => {
                let _field_0 = <SupportsCondition as FoldWith<V>>::fold_with(_field_0, visitor);
                SupportsInParens::SupportsCondition { 0: _field_0 }
            }
            SupportsInParens::Feature { 0: _field_0 } => {
                let _field_0 = <SupportsFeature as FoldWith<V>>::fold_with(_field_0, visitor);
                SupportsInParens::Feature { 0: _field_0 }
            }
            SupportsInParens::GeneralEnclosed { 0: _field_0 } => {
                let _field_0 = <GeneralEnclosed as FoldWith<V>>::fold_with(_field_0, visitor);
                SupportsInParens::GeneralEnclosed { 0: _field_0 }
            }
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for SupportsNot {
    #[doc = "Calls [Fold`::fold_supports_not`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_supports_not(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            SupportsNot {
                span,
                keyword,
                condition,
            } => {
                let span = { <swc_common::Span as FoldWith<V>>::fold_with(span, visitor) };
                let keyword = { <Option<Ident> as FoldWith<V>>::fold_with(keyword, visitor) };
                let condition =
                    { <Box<SupportsInParens> as FoldWith<V>>::fold_with(condition, visitor) };
                SupportsNot {
                    span,
                    keyword,
                    condition,
                }
            }
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for SupportsOr {
    #[doc = "Calls [Fold`::fold_supports_or`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_supports_or(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            SupportsOr {
                span,
                keyword,
                condition,
            } => {
                let span = { <swc_common::Span as FoldWith<V>>::fold_with(span, visitor) };
                let keyword = { <Option<Ident> as FoldWith<V>>::fold_with(keyword, visitor) };
                let condition =
                    { <Box<SupportsInParens> as FoldWith<V>>::fold_with(condition, visitor) };
                SupportsOr {
                    span,
                    keyword,
                    condition,
                }
            }
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for TagNameSelector {
    #[doc = "Calls [Fold`::fold_tag_name_selector`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_tag_name_selector(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            TagNameSelector { span, name } => {
                let span = { <swc_common::Span as FoldWith<V>>::fold_with(span, visitor) };
                let name = { <WqName as FoldWith<V>>::fold_with(name, visitor) };
                TagNameSelector { span, name }
            }
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for Time {
    #[doc = "Calls [Fold`::fold_time`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_time(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            Time { span, value, unit } => {
                let span = { <swc_common::Span as FoldWith<V>>::fold_with(span, visitor) };
                let value = { <Number as FoldWith<V>>::fold_with(value, visitor) };
                let unit = { <Ident as FoldWith<V>>::fold_with(unit, visitor) };
                Time { span, value, unit }
            }
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for TimePercentage {
    #[doc = "Calls [Fold`::fold_time_percentage`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_time_percentage(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            TimePercentage::Time { 0: _field_0 } => {
                let _field_0 = <Time as FoldWith<V>>::fold_with(_field_0, visitor);
                TimePercentage::Time { 0: _field_0 }
            }
            TimePercentage::Percentage { 0: _field_0 } => {
                let _field_0 = <Percentage as FoldWith<V>>::fold_with(_field_0, visitor);
                TimePercentage::Percentage { 0: _field_0 }
            }
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for Token {
    #[doc = "Calls [Fold`::fold_token`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_token(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            Token::Ident { value, raw } => {
                let value = { <swc_atoms::Atom as FoldWith<V>>::fold_with(value, visitor) };
                let raw = { <swc_atoms::Atom as FoldWith<V>>::fold_with(raw, visitor) };
                Token::Ident { value, raw }
            }
            Token::Function { value, raw } => {
                let value = { <swc_atoms::Atom as FoldWith<V>>::fold_with(value, visitor) };
                let raw = { <swc_atoms::Atom as FoldWith<V>>::fold_with(raw, visitor) };
                Token::Function { value, raw }
            }
            Token::AtKeyword { value, raw } => {
                let value = { <swc_atoms::Atom as FoldWith<V>>::fold_with(value, visitor) };
                let raw = { <swc_atoms::Atom as FoldWith<V>>::fold_with(raw, visitor) };
                Token::AtKeyword { value, raw }
            }
            Token::Hash { is_id, value, raw } => {
                let value = { <swc_atoms::Atom as FoldWith<V>>::fold_with(value, visitor) };
                let raw = { <swc_atoms::Atom as FoldWith<V>>::fold_with(raw, visitor) };
                Token::Hash { is_id, value, raw }
            }
            Token::String { value, raw } => {
                let value = { <swc_atoms::Atom as FoldWith<V>>::fold_with(value, visitor) };
                let raw = { <swc_atoms::Atom as FoldWith<V>>::fold_with(raw, visitor) };
                Token::String { value, raw }
            }
            Token::BadString { raw } => {
                let raw = { <swc_atoms::Atom as FoldWith<V>>::fold_with(raw, visitor) };
                Token::BadString { raw }
            }
            Token::Url { value, raw } => {
                let value = { <swc_atoms::Atom as FoldWith<V>>::fold_with(value, visitor) };
                let raw = { <Box<UrlKeyValue> as FoldWith<V>>::fold_with(raw, visitor) };
                Token::Url { value, raw }
            }
            Token::BadUrl { raw } => {
                let raw = { <swc_atoms::Atom as FoldWith<V>>::fold_with(raw, visitor) };
                Token::BadUrl { raw }
            }
            Token::Delim { value } => Token::Delim { value },
            Token::Number {
                value,
                raw,
                type_flag,
            } => {
                let raw = { <swc_atoms::Atom as FoldWith<V>>::fold_with(raw, visitor) };
                let type_flag = { <NumberType as FoldWith<V>>::fold_with(type_flag, visitor) };
                Token::Number {
                    value,
                    raw,
                    type_flag,
                }
            }
            Token::Percentage { value, raw } => {
                let raw = { <swc_atoms::Atom as FoldWith<V>>::fold_with(raw, visitor) };
                Token::Percentage { value, raw }
            }
            Token::Dimension { 0: _field_0 } => {
                let _field_0 = <Box<DimensionToken> as FoldWith<V>>::fold_with(_field_0, visitor);
                Token::Dimension { 0: _field_0 }
            }
            Token::WhiteSpace { value } => {
                let value = { <swc_atoms::Atom as FoldWith<V>>::fold_with(value, visitor) };
                Token::WhiteSpace { value }
            }
            Token::CDO => Token::CDO,
            Token::CDC => Token::CDC,
            Token::Colon => Token::Colon,
            Token::Semi => Token::Semi,
            Token::Comma => Token::Comma,
            Token::LBracket => Token::LBracket,
            Token::RBracket => Token::RBracket,
            Token::LParen => Token::LParen,
            Token::RParen => Token::RParen,
            Token::LBrace => Token::LBrace,
            Token::RBrace => Token::RBrace,
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for TokenAndSpan {
    #[doc = "Calls [Fold`::fold_token_and_span`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_token_and_span(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            TokenAndSpan { span, token } => {
                let span = { <swc_common::Span as FoldWith<V>>::fold_with(span, visitor) };
                let token = { <Token as FoldWith<V>>::fold_with(token, visitor) };
                TokenAndSpan { span, token }
            }
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for TypeSelector {
    #[doc = "Calls [Fold`::fold_type_selector`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_type_selector(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            TypeSelector::TagName { 0: _field_0 } => {
                let _field_0 = <TagNameSelector as FoldWith<V>>::fold_with(_field_0, visitor);
                TypeSelector::TagName { 0: _field_0 }
            }
            TypeSelector::Universal { 0: _field_0 } => {
                let _field_0 = <UniversalSelector as FoldWith<V>>::fold_with(_field_0, visitor);
                TypeSelector::Universal { 0: _field_0 }
            }
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for UnicodeRange {
    #[doc = "Calls [Fold`::fold_unicode_range`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_unicode_range(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            UnicodeRange {
                span,
                start,
                end,
                raw,
            } => {
                let span = { <swc_common::Span as FoldWith<V>>::fold_with(span, visitor) };
                let start = { <swc_atoms::Atom as FoldWith<V>>::fold_with(start, visitor) };
                let end = { <Option<swc_atoms::Atom> as FoldWith<V>>::fold_with(end, visitor) };
                let raw = { <Option<swc_atoms::Atom> as FoldWith<V>>::fold_with(raw, visitor) };
                UnicodeRange {
                    span,
                    start,
                    end,
                    raw,
                }
            }
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for UniversalSelector {
    #[doc = "Calls [Fold`::fold_universal_selector`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_universal_selector(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            UniversalSelector { span, prefix } => {
                let span = { <swc_common::Span as FoldWith<V>>::fold_with(span, visitor) };
                let prefix =
                    { <Option<NamespacePrefix> as FoldWith<V>>::fold_with(prefix, visitor) };
                UniversalSelector { span, prefix }
            }
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for UnknownDimension {
    #[doc = "Calls [Fold`::fold_unknown_dimension`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_unknown_dimension(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            UnknownDimension { span, value, unit } => {
                let span = { <swc_common::Span as FoldWith<V>>::fold_with(span, visitor) };
                let value = { <Number as FoldWith<V>>::fold_with(value, visitor) };
                let unit = { <Ident as FoldWith<V>>::fold_with(unit, visitor) };
                UnknownDimension { span, value, unit }
            }
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for Url {
    #[doc = "Calls [Fold`::fold_url`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_url(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            Url {
                span,
                name,
                value,
                modifiers,
            } => {
                let span = { <swc_common::Span as FoldWith<V>>::fold_with(span, visitor) };
                let name = { <Ident as FoldWith<V>>::fold_with(name, visitor) };
                let value = { <Option<Box<UrlValue>> as FoldWith<V>>::fold_with(value, visitor) };
                let modifiers =
                    { <Option<Vec<UrlModifier>> as FoldWith<V>>::fold_with(modifiers, visitor) };
                Url {
                    span,
                    name,
                    value,
                    modifiers,
                }
            }
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for UrlKeyValue {
    #[doc = "Calls [Fold`::fold_url_key_value`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_url_key_value(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            UrlKeyValue {
                0: _field_0,
                1: _field_1,
            } => {
                let _field_0 = <swc_atoms::Atom as FoldWith<V>>::fold_with(_field_0, visitor);
                let _field_1 = <swc_atoms::Atom as FoldWith<V>>::fold_with(_field_1, visitor);
                UrlKeyValue {
                    0: _field_0,
                    1: _field_1,
                }
            }
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for UrlModifier {
    #[doc = "Calls [Fold`::fold_url_modifier`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_url_modifier(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            UrlModifier::Ident { 0: _field_0 } => {
                let _field_0 = <Ident as FoldWith<V>>::fold_with(_field_0, visitor);
                UrlModifier::Ident { 0: _field_0 }
            }
            UrlModifier::Function { 0: _field_0 } => {
                let _field_0 = <Function as FoldWith<V>>::fold_with(_field_0, visitor);
                UrlModifier::Function { 0: _field_0 }
            }
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for UrlValue {
    #[doc = "Calls [Fold`::fold_url_value`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_url_value(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            UrlValue::Str { 0: _field_0 } => {
                let _field_0 = <Str as FoldWith<V>>::fold_with(_field_0, visitor);
                UrlValue::Str { 0: _field_0 }
            }
            UrlValue::Raw { 0: _field_0 } => {
                let _field_0 = <UrlValueRaw as FoldWith<V>>::fold_with(_field_0, visitor);
                UrlValue::Raw { 0: _field_0 }
            }
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for UrlValueRaw {
    #[doc = "Calls [Fold`::fold_url_value_raw`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_url_value_raw(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            UrlValueRaw { span, value, raw } => {
                let span = { <swc_common::Span as FoldWith<V>>::fold_with(span, visitor) };
                let value = { <swc_atoms::Atom as FoldWith<V>>::fold_with(value, visitor) };
                let raw = { <Option<swc_atoms::Atom> as FoldWith<V>>::fold_with(raw, visitor) };
                UrlValueRaw { span, value, raw }
            }
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for WqName {
    #[doc = "Calls [Fold`::fold_wq_name`] with `self`."]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_wq_name(visitor, self)
    }

    fn fold_children_with(self, visitor: &mut V) -> Self {
        match self {
            WqName {
                span,
                prefix,
                value,
            } => {
                let span = { <swc_common::Span as FoldWith<V>>::fold_with(span, visitor) };
                let prefix =
                    { <Option<NamespacePrefix> as FoldWith<V>>::fold_with(prefix, visitor) };
                let value = { <Ident as FoldWith<V>>::fold_with(value, visitor) };
                WqName {
                    span,
                    prefix,
                    value,
                }
            }
        }
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for swc_atoms::Atom {
    #[doc = "Calls [Fold`::fold_atom`] with `self`. (Extra impl)"]
    #[inline]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_atom(visitor, self)
    }

    #[inline]
    fn fold_children_with(self, visitor: &mut V) -> Self {
        self
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for Vec<CalcProductOrOperator> {
    #[doc = "Calls [Fold`::fold_calc_product_or_operators`] with `self`. (Extra impl)"]
    #[inline]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_calc_product_or_operators(visitor, self)
    }

    #[inline]
    fn fold_children_with(self, visitor: &mut V) -> Self {
        swc_visit::util::move_map::MoveMap::move_map(self, |item| {
            <CalcProductOrOperator as FoldWith<V>>::fold_with(item, visitor)
        })
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for Vec<CalcValueOrOperator> {
    #[doc = "Calls [Fold`::fold_calc_value_or_operators`] with `self`. (Extra impl)"]
    #[inline]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_calc_value_or_operators(visitor, self)
    }

    #[inline]
    fn fold_children_with(self, visitor: &mut V) -> Self {
        swc_visit::util::move_map::MoveMap::move_map(self, |item| {
            <CalcValueOrOperator as FoldWith<V>>::fold_with(item, visitor)
        })
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for Vec<ComplexSelectorChildren> {
    #[doc = "Calls [Fold`::fold_complex_selector_childrens`] with `self`. (Extra impl)"]
    #[inline]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_complex_selector_childrens(visitor, self)
    }

    #[inline]
    fn fold_children_with(self, visitor: &mut V) -> Self {
        swc_visit::util::move_map::MoveMap::move_map(self, |item| {
            <ComplexSelectorChildren as FoldWith<V>>::fold_with(item, visitor)
        })
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for Vec<ComplexSelector> {
    #[doc = "Calls [Fold`::fold_complex_selectors`] with `self`. (Extra impl)"]
    #[inline]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_complex_selectors(visitor, self)
    }

    #[inline]
    fn fold_children_with(self, visitor: &mut V) -> Self {
        swc_visit::util::move_map::MoveMap::move_map(self, |item| {
            <ComplexSelector as FoldWith<V>>::fold_with(item, visitor)
        })
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for Vec<ComponentValue> {
    #[doc = "Calls [Fold`::fold_component_values`] with `self`. (Extra impl)"]
    #[inline]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_component_values(visitor, self)
    }

    #[inline]
    fn fold_children_with(self, visitor: &mut V) -> Self {
        swc_visit::util::move_map::MoveMap::move_map(self, |item| {
            <ComponentValue as FoldWith<V>>::fold_with(item, visitor)
        })
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for Vec<CompoundSelector> {
    #[doc = "Calls [Fold`::fold_compound_selectors`] with `self`. (Extra impl)"]
    #[inline]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_compound_selectors(visitor, self)
    }

    #[inline]
    fn fold_children_with(self, visitor: &mut V) -> Self {
        swc_visit::util::move_map::MoveMap::move_map(self, |item| {
            <CompoundSelector as FoldWith<V>>::fold_with(item, visitor)
        })
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for Vec<ContainerQueryType> {
    #[doc = "Calls [Fold`::fold_container_query_types`] with `self`. (Extra impl)"]
    #[inline]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_container_query_types(visitor, self)
    }

    #[inline]
    fn fold_children_with(self, visitor: &mut V) -> Self {
        swc_visit::util::move_map::MoveMap::move_map(self, |item| {
            <ContainerQueryType as FoldWith<V>>::fold_with(item, visitor)
        })
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for Vec<CustomIdent> {
    #[doc = "Calls [Fold`::fold_custom_idents`] with `self`. (Extra impl)"]
    #[inline]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_custom_idents(visitor, self)
    }

    #[inline]
    fn fold_children_with(self, visitor: &mut V) -> Self {
        swc_visit::util::move_map::MoveMap::move_map(self, |item| {
            <CustomIdent as FoldWith<V>>::fold_with(item, visitor)
        })
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for Vec<DocumentPreludeMatchingFunction> {
    #[doc = "Calls [Fold`::fold_document_prelude_matching_functions`] with `self`. (Extra impl)"]
    #[inline]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_document_prelude_matching_functions(visitor, self)
    }

    #[inline]
    fn fold_children_with(self, visitor: &mut V) -> Self {
        swc_visit::util::move_map::MoveMap::move_map(self, |item| {
            <DocumentPreludeMatchingFunction as FoldWith<V>>::fold_with(item, visitor)
        })
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for Vec<FamilyName> {
    #[doc = "Calls [Fold`::fold_family_names`] with `self`. (Extra impl)"]
    #[inline]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_family_names(visitor, self)
    }

    #[inline]
    fn fold_children_with(self, visitor: &mut V) -> Self {
        swc_visit::util::move_map::MoveMap::move_map(self, |item| {
            <FamilyName as FoldWith<V>>::fold_with(item, visitor)
        })
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for Vec<ForgivingComplexSelector> {
    #[doc = "Calls [Fold`::fold_forgiving_complex_selectors`] with `self`. (Extra impl)"]
    #[inline]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_forgiving_complex_selectors(visitor, self)
    }

    #[inline]
    fn fold_children_with(self, visitor: &mut V) -> Self {
        swc_visit::util::move_map::MoveMap::move_map(self, |item| {
            <ForgivingComplexSelector as FoldWith<V>>::fold_with(item, visitor)
        })
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for Vec<ForgivingRelativeSelector> {
    #[doc = "Calls [Fold`::fold_forgiving_relative_selectors`] with `self`. (Extra impl)"]
    #[inline]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_forgiving_relative_selectors(visitor, self)
    }

    #[inline]
    fn fold_children_with(self, visitor: &mut V) -> Self {
        swc_visit::util::move_map::MoveMap::move_map(self, |item| {
            <ForgivingRelativeSelector as FoldWith<V>>::fold_with(item, visitor)
        })
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for Vec<Ident> {
    #[doc = "Calls [Fold`::fold_idents`] with `self`. (Extra impl)"]
    #[inline]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_idents(visitor, self)
    }

    #[inline]
    fn fold_children_with(self, visitor: &mut V) -> Self {
        swc_visit::util::move_map::MoveMap::move_map(self, |item| {
            <Ident as FoldWith<V>>::fold_with(item, visitor)
        })
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for Vec<KeyframeSelector> {
    #[doc = "Calls [Fold`::fold_keyframe_selectors`] with `self`. (Extra impl)"]
    #[inline]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_keyframe_selectors(visitor, self)
    }

    #[inline]
    fn fold_children_with(self, visitor: &mut V) -> Self {
        swc_visit::util::move_map::MoveMap::move_map(self, |item| {
            <KeyframeSelector as FoldWith<V>>::fold_with(item, visitor)
        })
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for Vec<LayerName> {
    #[doc = "Calls [Fold`::fold_layer_names`] with `self`. (Extra impl)"]
    #[inline]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_layer_names(visitor, self)
    }

    #[inline]
    fn fold_children_with(self, visitor: &mut V) -> Self {
        swc_visit::util::move_map::MoveMap::move_map(self, |item| {
            <LayerName as FoldWith<V>>::fold_with(item, visitor)
        })
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for Vec<MediaConditionAllType> {
    #[doc = "Calls [Fold`::fold_media_condition_all_types`] with `self`. (Extra impl)"]
    #[inline]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_media_condition_all_types(visitor, self)
    }

    #[inline]
    fn fold_children_with(self, visitor: &mut V) -> Self {
        swc_visit::util::move_map::MoveMap::move_map(self, |item| {
            <MediaConditionAllType as FoldWith<V>>::fold_with(item, visitor)
        })
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for Vec<MediaConditionWithoutOrType> {
    #[doc = "Calls [Fold`::fold_media_condition_without_or_types`] with `self`. (Extra impl)"]
    #[inline]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_media_condition_without_or_types(visitor, self)
    }

    #[inline]
    fn fold_children_with(self, visitor: &mut V) -> Self {
        swc_visit::util::move_map::MoveMap::move_map(self, |item| {
            <MediaConditionWithoutOrType as FoldWith<V>>::fold_with(item, visitor)
        })
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for Vec<MediaQuery> {
    #[doc = "Calls [Fold`::fold_media_querys`] with `self`. (Extra impl)"]
    #[inline]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_media_querys(visitor, self)
    }

    #[inline]
    fn fold_children_with(self, visitor: &mut V) -> Self {
        swc_visit::util::move_map::MoveMap::move_map(self, |item| {
            <MediaQuery as FoldWith<V>>::fold_with(item, visitor)
        })
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for Option<Box<AtRulePrelude>> {
    #[doc = "Calls [Fold`::fold_opt_at_rule_prelude`] with `self`. (Extra impl)"]
    #[inline]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_opt_at_rule_prelude(visitor, self)
    }

    #[inline]
    fn fold_children_with(self, visitor: &mut V) -> Self {
        self.map(|inner| <Box<AtRulePrelude> as FoldWith<V>>::fold_with(inner, visitor))
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for Option<swc_atoms::Atom> {
    #[doc = "Calls [Fold`::fold_opt_atom`] with `self`. (Extra impl)"]
    #[inline]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_opt_atom(visitor, self)
    }

    #[inline]
    fn fold_children_with(self, visitor: &mut V) -> Self {
        self.map(|inner| <swc_atoms::Atom as FoldWith<V>>::fold_with(inner, visitor))
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for Option<AttributeSelectorMatcher> {
    #[doc = "Calls [Fold`::fold_opt_attribute_selector_matcher`] with `self`. (Extra impl)"]
    #[inline]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_opt_attribute_selector_matcher(visitor, self)
    }

    #[inline]
    fn fold_children_with(self, visitor: &mut V) -> Self {
        self.map(|inner| <AttributeSelectorMatcher as FoldWith<V>>::fold_with(inner, visitor))
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for Option<AttributeSelectorModifier> {
    #[doc = "Calls [Fold`::fold_opt_attribute_selector_modifier`] with `self`. (Extra impl)"]
    #[inline]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_opt_attribute_selector_modifier(visitor, self)
    }

    #[inline]
    fn fold_children_with(self, visitor: &mut V) -> Self {
        self.map(|inner| <AttributeSelectorModifier as FoldWith<V>>::fold_with(inner, visitor))
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for Option<AttributeSelectorValue> {
    #[doc = "Calls [Fold`::fold_opt_attribute_selector_value`] with `self`. (Extra impl)"]
    #[inline]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_opt_attribute_selector_value(visitor, self)
    }

    #[inline]
    fn fold_children_with(self, visitor: &mut V) -> Self {
        self.map(|inner| <AttributeSelectorValue as FoldWith<V>>::fold_with(inner, visitor))
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for Option<Combinator> {
    #[doc = "Calls [Fold`::fold_opt_combinator`] with `self`. (Extra impl)"]
    #[inline]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_opt_combinator(visitor, self)
    }

    #[inline]
    fn fold_children_with(self, visitor: &mut V) -> Self {
        self.map(|inner| <Combinator as FoldWith<V>>::fold_with(inner, visitor))
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for Option<ContainerName> {
    #[doc = "Calls [Fold`::fold_opt_container_name`] with `self`. (Extra impl)"]
    #[inline]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_opt_container_name(visitor, self)
    }

    #[inline]
    fn fold_children_with(self, visitor: &mut V) -> Self {
        self.map(|inner| <ContainerName as FoldWith<V>>::fold_with(inner, visitor))
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for Option<ForgivingSelectorList> {
    #[doc = "Calls [Fold`::fold_opt_forgiving_selector_list`] with `self`. (Extra impl)"]
    #[inline]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_opt_forgiving_selector_list(visitor, self)
    }

    #[inline]
    fn fold_children_with(self, visitor: &mut V) -> Self {
        self.map(|inner| <ForgivingSelectorList as FoldWith<V>>::fold_with(inner, visitor))
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for Option<Box<Function>> {
    #[doc = "Calls [Fold`::fold_opt_function`] with `self`. (Extra impl)"]
    #[inline]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_opt_function(visitor, self)
    }

    #[inline]
    fn fold_children_with(self, visitor: &mut V) -> Self {
        self.map(|inner| <Box<Function> as FoldWith<V>>::fold_with(inner, visitor))
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for Option<Ident> {
    #[doc = "Calls [Fold`::fold_opt_ident`] with `self`. (Extra impl)"]
    #[inline]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_opt_ident(visitor, self)
    }

    #[inline]
    fn fold_children_with(self, visitor: &mut V) -> Self {
        self.map(|inner| <Ident as FoldWith<V>>::fold_with(inner, visitor))
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for Option<Box<ImportConditions>> {
    #[doc = "Calls [Fold`::fold_opt_import_conditions`] with `self`. (Extra impl)"]
    #[inline]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_opt_import_conditions(visitor, self)
    }

    #[inline]
    fn fold_children_with(self, visitor: &mut V) -> Self {
        self.map(|inner| <Box<ImportConditions> as FoldWith<V>>::fold_with(inner, visitor))
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for Option<Box<ImportLayerName>> {
    #[doc = "Calls [Fold`::fold_opt_import_layer_name`] with `self`. (Extra impl)"]
    #[inline]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_opt_import_layer_name(visitor, self)
    }

    #[inline]
    fn fold_children_with(self, visitor: &mut V) -> Self {
        self.map(|inner| <Box<ImportLayerName> as FoldWith<V>>::fold_with(inner, visitor))
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for Option<ImportantFlag> {
    #[doc = "Calls [Fold`::fold_opt_important_flag`] with `self`. (Extra impl)"]
    #[inline]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_opt_important_flag(visitor, self)
    }

    #[inline]
    fn fold_children_with(self, visitor: &mut V) -> Self {
        self.map(|inner| <ImportantFlag as FoldWith<V>>::fold_with(inner, visitor))
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for Option<Box<MediaConditionType>> {
    #[doc = "Calls [Fold`::fold_opt_media_condition_type`] with `self`. (Extra impl)"]
    #[inline]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_opt_media_condition_type(visitor, self)
    }

    #[inline]
    fn fold_children_with(self, visitor: &mut V) -> Self {
        self.map(|inner| <Box<MediaConditionType> as FoldWith<V>>::fold_with(inner, visitor))
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for Option<Box<MediaQueryList>> {
    #[doc = "Calls [Fold`::fold_opt_media_query_list`] with `self`. (Extra impl)"]
    #[inline]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_opt_media_query_list(visitor, self)
    }

    #[inline]
    fn fold_children_with(self, visitor: &mut V) -> Self {
        self.map(|inner| <Box<MediaQueryList> as FoldWith<V>>::fold_with(inner, visitor))
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for Option<MediaType> {
    #[doc = "Calls [Fold`::fold_opt_media_type`] with `self`. (Extra impl)"]
    #[inline]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_opt_media_type(visitor, self)
    }

    #[inline]
    fn fold_children_with(self, visitor: &mut V) -> Self {
        self.map(|inner| <MediaType as FoldWith<V>>::fold_with(inner, visitor))
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for Option<Namespace> {
    #[doc = "Calls [Fold`::fold_opt_namespace`] with `self`. (Extra impl)"]
    #[inline]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_opt_namespace(visitor, self)
    }

    #[inline]
    fn fold_children_with(self, visitor: &mut V) -> Self {
        self.map(|inner| <Namespace as FoldWith<V>>::fold_with(inner, visitor))
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for Option<NamespacePrefix> {
    #[doc = "Calls [Fold`::fold_opt_namespace_prefix`] with `self`. (Extra impl)"]
    #[inline]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_opt_namespace_prefix(visitor, self)
    }

    #[inline]
    fn fold_children_with(self, visitor: &mut V) -> Self {
        self.map(|inner| <NamespacePrefix as FoldWith<V>>::fold_with(inner, visitor))
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for Option<NestingSelector> {
    #[doc = "Calls [Fold`::fold_opt_nesting_selector`] with `self`. (Extra impl)"]
    #[inline]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_opt_nesting_selector(visitor, self)
    }

    #[inline]
    fn fold_children_with(self, visitor: &mut V) -> Self {
        self.map(|inner| <NestingSelector as FoldWith<V>>::fold_with(inner, visitor))
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for Option<Number> {
    #[doc = "Calls [Fold`::fold_opt_number`] with `self`. (Extra impl)"]
    #[inline]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_opt_number(visitor, self)
    }

    #[inline]
    fn fold_children_with(self, visitor: &mut V) -> Self {
        self.map(|inner| <Number as FoldWith<V>>::fold_with(inner, visitor))
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for Option<Vec<PageSelectorPseudo>> {
    #[doc = "Calls [Fold`::fold_opt_page_selector_pseudos`] with `self`. (Extra impl)"]
    #[inline]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_opt_page_selector_pseudos(visitor, self)
    }

    #[inline]
    fn fold_children_with(self, visitor: &mut V) -> Self {
        self.map(|inner| <Vec<PageSelectorPseudo> as FoldWith<V>>::fold_with(inner, visitor))
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for Option<PageSelectorType> {
    #[doc = "Calls [Fold`::fold_opt_page_selector_type`] with `self`. (Extra impl)"]
    #[inline]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_opt_page_selector_type(visitor, self)
    }

    #[inline]
    fn fold_children_with(self, visitor: &mut V) -> Self {
        self.map(|inner| <PageSelectorType as FoldWith<V>>::fold_with(inner, visitor))
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for Option<Vec<PseudoClassSelectorChildren>> {
    #[doc = "Calls [Fold`::fold_opt_pseudo_class_selector_childrens`] with `self`. (Extra impl)"]
    #[inline]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_opt_pseudo_class_selector_childrens(visitor, self)
    }

    #[inline]
    fn fold_children_with(self, visitor: &mut V) -> Self {
        self.map(|inner| {
            <Vec<PseudoClassSelectorChildren> as FoldWith<V>>::fold_with(inner, visitor)
        })
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for Option<Vec<PseudoElementSelectorChildren>> {
    #[doc = "Calls [Fold`::fold_opt_pseudo_element_selector_childrens`] with `self`. (Extra impl)"]
    #[inline]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_opt_pseudo_element_selector_childrens(visitor, self)
    }

    #[inline]
    fn fold_children_with(self, visitor: &mut V) -> Self {
        self.map(|inner| {
            <Vec<PseudoElementSelectorChildren> as FoldWith<V>>::fold_with(inner, visitor)
        })
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for Option<SimpleBlock> {
    #[doc = "Calls [Fold`::fold_opt_simple_block`] with `self`. (Extra impl)"]
    #[inline]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_opt_simple_block(visitor, self)
    }

    #[inline]
    fn fold_children_with(self, visitor: &mut V) -> Self {
        self.map(|inner| <SimpleBlock as FoldWith<V>>::fold_with(inner, visitor))
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for Option<Box<TypeSelector>> {
    #[doc = "Calls [Fold`::fold_opt_type_selector`] with `self`. (Extra impl)"]
    #[inline]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_opt_type_selector(visitor, self)
    }

    #[inline]
    fn fold_children_with(self, visitor: &mut V) -> Self {
        self.map(|inner| <Box<TypeSelector> as FoldWith<V>>::fold_with(inner, visitor))
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for Option<Vec<UrlModifier>> {
    #[doc = "Calls [Fold`::fold_opt_url_modifiers`] with `self`. (Extra impl)"]
    #[inline]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_opt_url_modifiers(visitor, self)
    }

    #[inline]
    fn fold_children_with(self, visitor: &mut V) -> Self {
        self.map(|inner| <Vec<UrlModifier> as FoldWith<V>>::fold_with(inner, visitor))
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for Option<Box<UrlValue>> {
    #[doc = "Calls [Fold`::fold_opt_url_value`] with `self`. (Extra impl)"]
    #[inline]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_opt_url_value(visitor, self)
    }

    #[inline]
    fn fold_children_with(self, visitor: &mut V) -> Self {
        self.map(|inner| <Box<UrlValue> as FoldWith<V>>::fold_with(inner, visitor))
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for Vec<PageSelectorPseudo> {
    #[doc = "Calls [Fold`::fold_page_selector_pseudos`] with `self`. (Extra impl)"]
    #[inline]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_page_selector_pseudos(visitor, self)
    }

    #[inline]
    fn fold_children_with(self, visitor: &mut V) -> Self {
        swc_visit::util::move_map::MoveMap::move_map(self, |item| {
            <PageSelectorPseudo as FoldWith<V>>::fold_with(item, visitor)
        })
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for Vec<PageSelector> {
    #[doc = "Calls [Fold`::fold_page_selectors`] with `self`. (Extra impl)"]
    #[inline]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_page_selectors(visitor, self)
    }

    #[inline]
    fn fold_children_with(self, visitor: &mut V) -> Self {
        swc_visit::util::move_map::MoveMap::move_map(self, |item| {
            <PageSelector as FoldWith<V>>::fold_with(item, visitor)
        })
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for Vec<PseudoClassSelectorChildren> {
    #[doc = "Calls [Fold`::fold_pseudo_class_selector_childrens`] with `self`. (Extra impl)"]
    #[inline]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_pseudo_class_selector_childrens(visitor, self)
    }

    #[inline]
    fn fold_children_with(self, visitor: &mut V) -> Self {
        swc_visit::util::move_map::MoveMap::move_map(self, |item| {
            <PseudoClassSelectorChildren as FoldWith<V>>::fold_with(item, visitor)
        })
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for Vec<PseudoElementSelectorChildren> {
    #[doc = "Calls [Fold`::fold_pseudo_element_selector_childrens`] with `self`. (Extra impl)"]
    #[inline]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_pseudo_element_selector_childrens(visitor, self)
    }

    #[inline]
    fn fold_children_with(self, visitor: &mut V) -> Self {
        swc_visit::util::move_map::MoveMap::move_map(self, |item| {
            <PseudoElementSelectorChildren as FoldWith<V>>::fold_with(item, visitor)
        })
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for Vec<RelativeSelector> {
    #[doc = "Calls [Fold`::fold_relative_selectors`] with `self`. (Extra impl)"]
    #[inline]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_relative_selectors(visitor, self)
    }

    #[inline]
    fn fold_children_with(self, visitor: &mut V) -> Self {
        swc_visit::util::move_map::MoveMap::move_map(self, |item| {
            <RelativeSelector as FoldWith<V>>::fold_with(item, visitor)
        })
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for Vec<Rule> {
    #[doc = "Calls [Fold`::fold_rules`] with `self`. (Extra impl)"]
    #[inline]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_rules(visitor, self)
    }

    #[inline]
    fn fold_children_with(self, visitor: &mut V) -> Self {
        swc_visit::util::move_map::MoveMap::move_map(self, |item| {
            <Rule as FoldWith<V>>::fold_with(item, visitor)
        })
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for swc_common::Span {
    #[doc = "Calls [Fold`::fold_span`] with `self`. (Extra impl)"]
    #[inline]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_span(visitor, self)
    }

    #[inline]
    fn fold_children_with(self, visitor: &mut V) -> Self {
        self
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for Vec<SubclassSelector> {
    #[doc = "Calls [Fold`::fold_subclass_selectors`] with `self`. (Extra impl)"]
    #[inline]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_subclass_selectors(visitor, self)
    }

    #[inline]
    fn fold_children_with(self, visitor: &mut V) -> Self {
        swc_visit::util::move_map::MoveMap::move_map(self, |item| {
            <SubclassSelector as FoldWith<V>>::fold_with(item, visitor)
        })
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for Vec<SupportsConditionType> {
    #[doc = "Calls [Fold`::fold_supports_condition_types`] with `self`. (Extra impl)"]
    #[inline]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_supports_condition_types(visitor, self)
    }

    #[inline]
    fn fold_children_with(self, visitor: &mut V) -> Self {
        swc_visit::util::move_map::MoveMap::move_map(self, |item| {
            <SupportsConditionType as FoldWith<V>>::fold_with(item, visitor)
        })
    }
}
impl<V: ?Sized + Fold> FoldWith<V> for Vec<UrlModifier> {
    #[doc = "Calls [Fold`::fold_url_modifiers`] with `self`. (Extra impl)"]
    #[inline]
    fn fold_with(self, visitor: &mut V) -> Self {
        <V as Fold>::fold_url_modifiers(visitor, self)
    }

    #[inline]
    fn fold_children_with(self, visitor: &mut V) -> Self {
        swc_visit::util::move_map::MoveMap::move_map(self, |item| {
            <UrlModifier as FoldWith<V>>::fold_with(item, visitor)
        })
    }
}
impl<V, T> FoldWith<V> for std::boxed::Box<T>
where
    V: ?Sized + Fold,
    T: FoldWith<V>,
{
    #[inline]
    fn fold_with(self, visitor: &mut V) -> Self {
        swc_visit::util::map::Map::map(self, |inner| <T as FoldWith<V>>::fold_with(inner, visitor))
    }

    #[inline]
    fn fold_children_with(self, visitor: &mut V) -> Self {
        swc_visit::util::map::Map::map(self, |inner| {
            <T as FoldWith<V>>::fold_children_with(inner, visitor)
        })
    }
}
#[doc = r" A visitor trait for traversing the AST."]
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
pub trait FoldAstPath {
    #[doc = "Visit a node of type `AbsoluteColorBase`.\n\nBy default, this method calls \
             [`AbsoluteColorBase::fold_children_with_ast_path`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn fold_absolute_color_base(
        &mut self,
        node: AbsoluteColorBase,
        __ast_path: &mut AstKindPath,
    ) -> AbsoluteColorBase {
        <AbsoluteColorBase as FoldWithAstPath<Self>>::fold_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `AlphaValue`.\n\nBy default, this method calls \
             [`AlphaValue::fold_children_with_ast_path`]. If you want to recurse, you need to call \
             it manually."]
    #[inline]
    fn fold_alpha_value(&mut self, node: AlphaValue, __ast_path: &mut AstKindPath) -> AlphaValue {
        <AlphaValue as FoldWithAstPath<Self>>::fold_children_with_ast_path(node, self, __ast_path)
    }
    #[doc = "Visit a node of type `AnPlusB`.\n\nBy default, this method calls \
             [`AnPlusB::fold_children_with_ast_path`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn fold_an_plus_b(&mut self, node: AnPlusB, __ast_path: &mut AstKindPath) -> AnPlusB {
        <AnPlusB as FoldWithAstPath<Self>>::fold_children_with_ast_path(node, self, __ast_path)
    }
    #[doc = "Visit a node of type `AnPlusBNotation`.\n\nBy default, this method calls \
             [`AnPlusBNotation::fold_children_with_ast_path`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn fold_an_plus_b_notation(
        &mut self,
        node: AnPlusBNotation,
        __ast_path: &mut AstKindPath,
    ) -> AnPlusBNotation {
        <AnPlusBNotation as FoldWithAstPath<Self>>::fold_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Angle`.\n\nBy default, this method calls \
             [`Angle::fold_children_with_ast_path`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn fold_angle(&mut self, node: Angle, __ast_path: &mut AstKindPath) -> Angle {
        <Angle as FoldWithAstPath<Self>>::fold_children_with_ast_path(node, self, __ast_path)
    }
    #[doc = "Visit a node of type `AnglePercentage`.\n\nBy default, this method calls \
             [`AnglePercentage::fold_children_with_ast_path`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn fold_angle_percentage(
        &mut self,
        node: AnglePercentage,
        __ast_path: &mut AstKindPath,
    ) -> AnglePercentage {
        <AnglePercentage as FoldWithAstPath<Self>>::fold_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `AnyNamespace`.\n\nBy default, this method calls \
             [`AnyNamespace::fold_children_with_ast_path`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn fold_any_namespace(
        &mut self,
        node: AnyNamespace,
        __ast_path: &mut AstKindPath,
    ) -> AnyNamespace {
        <AnyNamespace as FoldWithAstPath<Self>>::fold_children_with_ast_path(node, self, __ast_path)
    }
    #[doc = "Visit a node of type `AtRule`.\n\nBy default, this method calls \
             [`AtRule::fold_children_with_ast_path`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn fold_at_rule(&mut self, node: AtRule, __ast_path: &mut AstKindPath) -> AtRule {
        <AtRule as FoldWithAstPath<Self>>::fold_children_with_ast_path(node, self, __ast_path)
    }
    #[doc = "Visit a node of type `AtRuleName`.\n\nBy default, this method calls \
             [`AtRuleName::fold_children_with_ast_path`]. If you want to recurse, you need to call \
             it manually."]
    #[inline]
    fn fold_at_rule_name(&mut self, node: AtRuleName, __ast_path: &mut AstKindPath) -> AtRuleName {
        <AtRuleName as FoldWithAstPath<Self>>::fold_children_with_ast_path(node, self, __ast_path)
    }
    #[doc = "Visit a node of type `AtRulePrelude`.\n\nBy default, this method calls \
             [`AtRulePrelude::fold_children_with_ast_path`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn fold_at_rule_prelude(
        &mut self,
        node: AtRulePrelude,
        __ast_path: &mut AstKindPath,
    ) -> AtRulePrelude {
        <AtRulePrelude as FoldWithAstPath<Self>>::fold_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `swc_atoms :: Atom`.\n\nBy default, this method calls \
             [`swc_atoms :: Atom::fold_children_with_ast_path`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn fold_atom(
        &mut self,
        node: swc_atoms::Atom,
        __ast_path: &mut AstKindPath,
    ) -> swc_atoms::Atom {
        <swc_atoms::Atom as FoldWithAstPath<Self>>::fold_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `AttributeSelector`.\n\nBy default, this method calls \
             [`AttributeSelector::fold_children_with_ast_path`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn fold_attribute_selector(
        &mut self,
        node: AttributeSelector,
        __ast_path: &mut AstKindPath,
    ) -> AttributeSelector {
        <AttributeSelector as FoldWithAstPath<Self>>::fold_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `AttributeSelectorMatcher`.\n\nBy default, this method calls \
             [`AttributeSelectorMatcher::fold_children_with_ast_path`]. If you want to recurse, \
             you need to call it manually."]
    #[inline]
    fn fold_attribute_selector_matcher(
        &mut self,
        node: AttributeSelectorMatcher,
        __ast_path: &mut AstKindPath,
    ) -> AttributeSelectorMatcher {
        <AttributeSelectorMatcher as FoldWithAstPath<Self>>::fold_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `AttributeSelectorMatcherValue`.\n\nBy default, this method \
             calls [`AttributeSelectorMatcherValue::fold_children_with_ast_path`]. If you want to \
             recurse, you need to call it manually."]
    #[inline]
    fn fold_attribute_selector_matcher_value(
        &mut self,
        node: AttributeSelectorMatcherValue,
        __ast_path: &mut AstKindPath,
    ) -> AttributeSelectorMatcherValue {
        <AttributeSelectorMatcherValue as FoldWithAstPath<Self>>::fold_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `AttributeSelectorModifier`.\n\nBy default, this method calls \
             [`AttributeSelectorModifier::fold_children_with_ast_path`]. If you want to recurse, \
             you need to call it manually."]
    #[inline]
    fn fold_attribute_selector_modifier(
        &mut self,
        node: AttributeSelectorModifier,
        __ast_path: &mut AstKindPath,
    ) -> AttributeSelectorModifier {
        <AttributeSelectorModifier as FoldWithAstPath<Self>>::fold_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `AttributeSelectorValue`.\n\nBy default, this method calls \
             [`AttributeSelectorValue::fold_children_with_ast_path`]. If you want to recurse, you \
             need to call it manually."]
    #[inline]
    fn fold_attribute_selector_value(
        &mut self,
        node: AttributeSelectorValue,
        __ast_path: &mut AstKindPath,
    ) -> AttributeSelectorValue {
        <AttributeSelectorValue as FoldWithAstPath<Self>>::fold_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `BinOp`.\n\nBy default, this method calls \
             [`BinOp::fold_children_with_ast_path`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn fold_bin_op(&mut self, node: BinOp, __ast_path: &mut AstKindPath) -> BinOp {
        <BinOp as FoldWithAstPath<Self>>::fold_children_with_ast_path(node, self, __ast_path)
    }
    #[doc = "Visit a node of type `CalcOperator`.\n\nBy default, this method calls \
             [`CalcOperator::fold_children_with_ast_path`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn fold_calc_operator(
        &mut self,
        node: CalcOperator,
        __ast_path: &mut AstKindPath,
    ) -> CalcOperator {
        <CalcOperator as FoldWithAstPath<Self>>::fold_children_with_ast_path(node, self, __ast_path)
    }
    #[doc = "Visit a node of type `CalcOperatorType`.\n\nBy default, this method calls \
             [`CalcOperatorType::fold_children_with_ast_path`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn fold_calc_operator_type(
        &mut self,
        node: CalcOperatorType,
        __ast_path: &mut AstKindPath,
    ) -> CalcOperatorType {
        <CalcOperatorType as FoldWithAstPath<Self>>::fold_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `CalcProduct`.\n\nBy default, this method calls \
             [`CalcProduct::fold_children_with_ast_path`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn fold_calc_product(
        &mut self,
        node: CalcProduct,
        __ast_path: &mut AstKindPath,
    ) -> CalcProduct {
        <CalcProduct as FoldWithAstPath<Self>>::fold_children_with_ast_path(node, self, __ast_path)
    }
    #[doc = "Visit a node of type `CalcProductOrOperator`.\n\nBy default, this method calls \
             [`CalcProductOrOperator::fold_children_with_ast_path`]. If you want to recurse, you \
             need to call it manually."]
    #[inline]
    fn fold_calc_product_or_operator(
        &mut self,
        node: CalcProductOrOperator,
        __ast_path: &mut AstKindPath,
    ) -> CalcProductOrOperator {
        <CalcProductOrOperator as FoldWithAstPath<Self>>::fold_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Vec < CalcProductOrOperator >`.\n\nBy default, this method \
             calls [`Vec < CalcProductOrOperator >::fold_children_with_ast_path`]. If you want to \
             recurse, you need to call it manually."]
    #[inline]
    fn fold_calc_product_or_operators(
        &mut self,
        node: Vec<CalcProductOrOperator>,
        __ast_path: &mut AstKindPath,
    ) -> Vec<CalcProductOrOperator> {
        <Vec<CalcProductOrOperator> as FoldWithAstPath<Self>>::fold_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `CalcSum`.\n\nBy default, this method calls \
             [`CalcSum::fold_children_with_ast_path`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn fold_calc_sum(&mut self, node: CalcSum, __ast_path: &mut AstKindPath) -> CalcSum {
        <CalcSum as FoldWithAstPath<Self>>::fold_children_with_ast_path(node, self, __ast_path)
    }
    #[doc = "Visit a node of type `CalcValue`.\n\nBy default, this method calls \
             [`CalcValue::fold_children_with_ast_path`]. If you want to recurse, you need to call \
             it manually."]
    #[inline]
    fn fold_calc_value(&mut self, node: CalcValue, __ast_path: &mut AstKindPath) -> CalcValue {
        <CalcValue as FoldWithAstPath<Self>>::fold_children_with_ast_path(node, self, __ast_path)
    }
    #[doc = "Visit a node of type `CalcValueOrOperator`.\n\nBy default, this method calls \
             [`CalcValueOrOperator::fold_children_with_ast_path`]. If you want to recurse, you \
             need to call it manually."]
    #[inline]
    fn fold_calc_value_or_operator(
        &mut self,
        node: CalcValueOrOperator,
        __ast_path: &mut AstKindPath,
    ) -> CalcValueOrOperator {
        <CalcValueOrOperator as FoldWithAstPath<Self>>::fold_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Vec < CalcValueOrOperator >`.\n\nBy default, this method calls \
             [`Vec < CalcValueOrOperator >::fold_children_with_ast_path`]. If you want to recurse, \
             you need to call it manually."]
    #[inline]
    fn fold_calc_value_or_operators(
        &mut self,
        node: Vec<CalcValueOrOperator>,
        __ast_path: &mut AstKindPath,
    ) -> Vec<CalcValueOrOperator> {
        <Vec<CalcValueOrOperator> as FoldWithAstPath<Self>>::fold_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `ClassSelector`.\n\nBy default, this method calls \
             [`ClassSelector::fold_children_with_ast_path`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn fold_class_selector(
        &mut self,
        node: ClassSelector,
        __ast_path: &mut AstKindPath,
    ) -> ClassSelector {
        <ClassSelector as FoldWithAstPath<Self>>::fold_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `CmykComponent`.\n\nBy default, this method calls \
             [`CmykComponent::fold_children_with_ast_path`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn fold_cmyk_component(
        &mut self,
        node: CmykComponent,
        __ast_path: &mut AstKindPath,
    ) -> CmykComponent {
        <CmykComponent as FoldWithAstPath<Self>>::fold_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Color`.\n\nBy default, this method calls \
             [`Color::fold_children_with_ast_path`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn fold_color(&mut self, node: Color, __ast_path: &mut AstKindPath) -> Color {
        <Color as FoldWithAstPath<Self>>::fold_children_with_ast_path(node, self, __ast_path)
    }
    #[doc = "Visit a node of type `ColorProfileName`.\n\nBy default, this method calls \
             [`ColorProfileName::fold_children_with_ast_path`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn fold_color_profile_name(
        &mut self,
        node: ColorProfileName,
        __ast_path: &mut AstKindPath,
    ) -> ColorProfileName {
        <ColorProfileName as FoldWithAstPath<Self>>::fold_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Combinator`.\n\nBy default, this method calls \
             [`Combinator::fold_children_with_ast_path`]. If you want to recurse, you need to call \
             it manually."]
    #[inline]
    fn fold_combinator(&mut self, node: Combinator, __ast_path: &mut AstKindPath) -> Combinator {
        <Combinator as FoldWithAstPath<Self>>::fold_children_with_ast_path(node, self, __ast_path)
    }
    #[doc = "Visit a node of type `CombinatorValue`.\n\nBy default, this method calls \
             [`CombinatorValue::fold_children_with_ast_path`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn fold_combinator_value(
        &mut self,
        node: CombinatorValue,
        __ast_path: &mut AstKindPath,
    ) -> CombinatorValue {
        <CombinatorValue as FoldWithAstPath<Self>>::fold_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `ComplexSelector`.\n\nBy default, this method calls \
             [`ComplexSelector::fold_children_with_ast_path`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn fold_complex_selector(
        &mut self,
        node: ComplexSelector,
        __ast_path: &mut AstKindPath,
    ) -> ComplexSelector {
        <ComplexSelector as FoldWithAstPath<Self>>::fold_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `ComplexSelectorChildren`.\n\nBy default, this method calls \
             [`ComplexSelectorChildren::fold_children_with_ast_path`]. If you want to recurse, you \
             need to call it manually."]
    #[inline]
    fn fold_complex_selector_children(
        &mut self,
        node: ComplexSelectorChildren,
        __ast_path: &mut AstKindPath,
    ) -> ComplexSelectorChildren {
        <ComplexSelectorChildren as FoldWithAstPath<Self>>::fold_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Vec < ComplexSelectorChildren >`.\n\nBy default, this method \
             calls [`Vec < ComplexSelectorChildren >::fold_children_with_ast_path`]. If you want \
             to recurse, you need to call it manually."]
    #[inline]
    fn fold_complex_selector_childrens(
        &mut self,
        node: Vec<ComplexSelectorChildren>,
        __ast_path: &mut AstKindPath,
    ) -> Vec<ComplexSelectorChildren> {
        <Vec<ComplexSelectorChildren> as FoldWithAstPath<Self>>::fold_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Vec < ComplexSelector >`.\n\nBy default, this method calls \
             [`Vec < ComplexSelector >::fold_children_with_ast_path`]. If you want to recurse, you \
             need to call it manually."]
    #[inline]
    fn fold_complex_selectors(
        &mut self,
        node: Vec<ComplexSelector>,
        __ast_path: &mut AstKindPath,
    ) -> Vec<ComplexSelector> {
        <Vec<ComplexSelector> as FoldWithAstPath<Self>>::fold_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `ComponentValue`.\n\nBy default, this method calls \
             [`ComponentValue::fold_children_with_ast_path`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn fold_component_value(
        &mut self,
        node: ComponentValue,
        __ast_path: &mut AstKindPath,
    ) -> ComponentValue {
        <ComponentValue as FoldWithAstPath<Self>>::fold_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Vec < ComponentValue >`.\n\nBy default, this method calls [`Vec \
             < ComponentValue >::fold_children_with_ast_path`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn fold_component_values(
        &mut self,
        node: Vec<ComponentValue>,
        __ast_path: &mut AstKindPath,
    ) -> Vec<ComponentValue> {
        <Vec<ComponentValue> as FoldWithAstPath<Self>>::fold_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `CompoundSelector`.\n\nBy default, this method calls \
             [`CompoundSelector::fold_children_with_ast_path`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn fold_compound_selector(
        &mut self,
        node: CompoundSelector,
        __ast_path: &mut AstKindPath,
    ) -> CompoundSelector {
        <CompoundSelector as FoldWithAstPath<Self>>::fold_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `CompoundSelectorList`.\n\nBy default, this method calls \
             [`CompoundSelectorList::fold_children_with_ast_path`]. If you want to recurse, you \
             need to call it manually."]
    #[inline]
    fn fold_compound_selector_list(
        &mut self,
        node: CompoundSelectorList,
        __ast_path: &mut AstKindPath,
    ) -> CompoundSelectorList {
        <CompoundSelectorList as FoldWithAstPath<Self>>::fold_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Vec < CompoundSelector >`.\n\nBy default, this method calls \
             [`Vec < CompoundSelector >::fold_children_with_ast_path`]. If you want to recurse, \
             you need to call it manually."]
    #[inline]
    fn fold_compound_selectors(
        &mut self,
        node: Vec<CompoundSelector>,
        __ast_path: &mut AstKindPath,
    ) -> Vec<CompoundSelector> {
        <Vec<CompoundSelector> as FoldWithAstPath<Self>>::fold_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `ContainerCondition`.\n\nBy default, this method calls \
             [`ContainerCondition::fold_children_with_ast_path`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn fold_container_condition(
        &mut self,
        node: ContainerCondition,
        __ast_path: &mut AstKindPath,
    ) -> ContainerCondition {
        <ContainerCondition as FoldWithAstPath<Self>>::fold_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `ContainerName`.\n\nBy default, this method calls \
             [`ContainerName::fold_children_with_ast_path`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn fold_container_name(
        &mut self,
        node: ContainerName,
        __ast_path: &mut AstKindPath,
    ) -> ContainerName {
        <ContainerName as FoldWithAstPath<Self>>::fold_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `ContainerQuery`.\n\nBy default, this method calls \
             [`ContainerQuery::fold_children_with_ast_path`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn fold_container_query(
        &mut self,
        node: ContainerQuery,
        __ast_path: &mut AstKindPath,
    ) -> ContainerQuery {
        <ContainerQuery as FoldWithAstPath<Self>>::fold_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `ContainerQueryAnd`.\n\nBy default, this method calls \
             [`ContainerQueryAnd::fold_children_with_ast_path`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn fold_container_query_and(
        &mut self,
        node: ContainerQueryAnd,
        __ast_path: &mut AstKindPath,
    ) -> ContainerQueryAnd {
        <ContainerQueryAnd as FoldWithAstPath<Self>>::fold_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `ContainerQueryNot`.\n\nBy default, this method calls \
             [`ContainerQueryNot::fold_children_with_ast_path`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn fold_container_query_not(
        &mut self,
        node: ContainerQueryNot,
        __ast_path: &mut AstKindPath,
    ) -> ContainerQueryNot {
        <ContainerQueryNot as FoldWithAstPath<Self>>::fold_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `ContainerQueryOr`.\n\nBy default, this method calls \
             [`ContainerQueryOr::fold_children_with_ast_path`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn fold_container_query_or(
        &mut self,
        node: ContainerQueryOr,
        __ast_path: &mut AstKindPath,
    ) -> ContainerQueryOr {
        <ContainerQueryOr as FoldWithAstPath<Self>>::fold_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `ContainerQueryType`.\n\nBy default, this method calls \
             [`ContainerQueryType::fold_children_with_ast_path`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn fold_container_query_type(
        &mut self,
        node: ContainerQueryType,
        __ast_path: &mut AstKindPath,
    ) -> ContainerQueryType {
        <ContainerQueryType as FoldWithAstPath<Self>>::fold_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Vec < ContainerQueryType >`.\n\nBy default, this method calls \
             [`Vec < ContainerQueryType >::fold_children_with_ast_path`]. If you want to recurse, \
             you need to call it manually."]
    #[inline]
    fn fold_container_query_types(
        &mut self,
        node: Vec<ContainerQueryType>,
        __ast_path: &mut AstKindPath,
    ) -> Vec<ContainerQueryType> {
        <Vec<ContainerQueryType> as FoldWithAstPath<Self>>::fold_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `CustomHighlightName`.\n\nBy default, this method calls \
             [`CustomHighlightName::fold_children_with_ast_path`]. If you want to recurse, you \
             need to call it manually."]
    #[inline]
    fn fold_custom_highlight_name(
        &mut self,
        node: CustomHighlightName,
        __ast_path: &mut AstKindPath,
    ) -> CustomHighlightName {
        <CustomHighlightName as FoldWithAstPath<Self>>::fold_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `CustomIdent`.\n\nBy default, this method calls \
             [`CustomIdent::fold_children_with_ast_path`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn fold_custom_ident(
        &mut self,
        node: CustomIdent,
        __ast_path: &mut AstKindPath,
    ) -> CustomIdent {
        <CustomIdent as FoldWithAstPath<Self>>::fold_children_with_ast_path(node, self, __ast_path)
    }
    #[doc = "Visit a node of type `Vec < CustomIdent >`.\n\nBy default, this method calls [`Vec < \
             CustomIdent >::fold_children_with_ast_path`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn fold_custom_idents(
        &mut self,
        node: Vec<CustomIdent>,
        __ast_path: &mut AstKindPath,
    ) -> Vec<CustomIdent> {
        <Vec<CustomIdent> as FoldWithAstPath<Self>>::fold_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `CustomMediaQuery`.\n\nBy default, this method calls \
             [`CustomMediaQuery::fold_children_with_ast_path`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn fold_custom_media_query(
        &mut self,
        node: CustomMediaQuery,
        __ast_path: &mut AstKindPath,
    ) -> CustomMediaQuery {
        <CustomMediaQuery as FoldWithAstPath<Self>>::fold_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `CustomMediaQueryMediaType`.\n\nBy default, this method calls \
             [`CustomMediaQueryMediaType::fold_children_with_ast_path`]. If you want to recurse, \
             you need to call it manually."]
    #[inline]
    fn fold_custom_media_query_media_type(
        &mut self,
        node: CustomMediaQueryMediaType,
        __ast_path: &mut AstKindPath,
    ) -> CustomMediaQueryMediaType {
        <CustomMediaQueryMediaType as FoldWithAstPath<Self>>::fold_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `CustomPropertyName`.\n\nBy default, this method calls \
             [`CustomPropertyName::fold_children_with_ast_path`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn fold_custom_property_name(
        &mut self,
        node: CustomPropertyName,
        __ast_path: &mut AstKindPath,
    ) -> CustomPropertyName {
        <CustomPropertyName as FoldWithAstPath<Self>>::fold_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `DashedIdent`.\n\nBy default, this method calls \
             [`DashedIdent::fold_children_with_ast_path`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn fold_dashed_ident(
        &mut self,
        node: DashedIdent,
        __ast_path: &mut AstKindPath,
    ) -> DashedIdent {
        <DashedIdent as FoldWithAstPath<Self>>::fold_children_with_ast_path(node, self, __ast_path)
    }
    #[doc = "Visit a node of type `Declaration`.\n\nBy default, this method calls \
             [`Declaration::fold_children_with_ast_path`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn fold_declaration(&mut self, node: Declaration, __ast_path: &mut AstKindPath) -> Declaration {
        <Declaration as FoldWithAstPath<Self>>::fold_children_with_ast_path(node, self, __ast_path)
    }
    #[doc = "Visit a node of type `DeclarationName`.\n\nBy default, this method calls \
             [`DeclarationName::fold_children_with_ast_path`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn fold_declaration_name(
        &mut self,
        node: DeclarationName,
        __ast_path: &mut AstKindPath,
    ) -> DeclarationName {
        <DeclarationName as FoldWithAstPath<Self>>::fold_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `DeclarationOrAtRule`.\n\nBy default, this method calls \
             [`DeclarationOrAtRule::fold_children_with_ast_path`]. If you want to recurse, you \
             need to call it manually."]
    #[inline]
    fn fold_declaration_or_at_rule(
        &mut self,
        node: DeclarationOrAtRule,
        __ast_path: &mut AstKindPath,
    ) -> DeclarationOrAtRule {
        <DeclarationOrAtRule as FoldWithAstPath<Self>>::fold_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Delimiter`.\n\nBy default, this method calls \
             [`Delimiter::fold_children_with_ast_path`]. If you want to recurse, you need to call \
             it manually."]
    #[inline]
    fn fold_delimiter(&mut self, node: Delimiter, __ast_path: &mut AstKindPath) -> Delimiter {
        <Delimiter as FoldWithAstPath<Self>>::fold_children_with_ast_path(node, self, __ast_path)
    }
    #[doc = "Visit a node of type `DelimiterValue`.\n\nBy default, this method calls \
             [`DelimiterValue::fold_children_with_ast_path`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn fold_delimiter_value(
        &mut self,
        node: DelimiterValue,
        __ast_path: &mut AstKindPath,
    ) -> DelimiterValue {
        <DelimiterValue as FoldWithAstPath<Self>>::fold_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Dimension`.\n\nBy default, this method calls \
             [`Dimension::fold_children_with_ast_path`]. If you want to recurse, you need to call \
             it manually."]
    #[inline]
    fn fold_dimension(&mut self, node: Dimension, __ast_path: &mut AstKindPath) -> Dimension {
        <Dimension as FoldWithAstPath<Self>>::fold_children_with_ast_path(node, self, __ast_path)
    }
    #[doc = "Visit a node of type `DimensionToken`.\n\nBy default, this method calls \
             [`DimensionToken::fold_children_with_ast_path`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn fold_dimension_token(
        &mut self,
        node: DimensionToken,
        __ast_path: &mut AstKindPath,
    ) -> DimensionToken {
        <DimensionToken as FoldWithAstPath<Self>>::fold_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `DocumentPrelude`.\n\nBy default, this method calls \
             [`DocumentPrelude::fold_children_with_ast_path`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn fold_document_prelude(
        &mut self,
        node: DocumentPrelude,
        __ast_path: &mut AstKindPath,
    ) -> DocumentPrelude {
        <DocumentPrelude as FoldWithAstPath<Self>>::fold_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `DocumentPreludeMatchingFunction`.\n\nBy default, this method \
             calls [`DocumentPreludeMatchingFunction::fold_children_with_ast_path`]. If you want \
             to recurse, you need to call it manually."]
    #[inline]
    fn fold_document_prelude_matching_function(
        &mut self,
        node: DocumentPreludeMatchingFunction,
        __ast_path: &mut AstKindPath,
    ) -> DocumentPreludeMatchingFunction {
        <DocumentPreludeMatchingFunction as FoldWithAstPath<Self>>::fold_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Vec < DocumentPreludeMatchingFunction >`.\n\nBy default, this \
             method calls [`Vec < DocumentPreludeMatchingFunction \
             >::fold_children_with_ast_path`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn fold_document_prelude_matching_functions(
        &mut self,
        node: Vec<DocumentPreludeMatchingFunction>,
        __ast_path: &mut AstKindPath,
    ) -> Vec<DocumentPreludeMatchingFunction> {
        <Vec<DocumentPreludeMatchingFunction> as FoldWithAstPath<Self>>::fold_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `ExtensionName`.\n\nBy default, this method calls \
             [`ExtensionName::fold_children_with_ast_path`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn fold_extension_name(
        &mut self,
        node: ExtensionName,
        __ast_path: &mut AstKindPath,
    ) -> ExtensionName {
        <ExtensionName as FoldWithAstPath<Self>>::fold_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `FamilyName`.\n\nBy default, this method calls \
             [`FamilyName::fold_children_with_ast_path`]. If you want to recurse, you need to call \
             it manually."]
    #[inline]
    fn fold_family_name(&mut self, node: FamilyName, __ast_path: &mut AstKindPath) -> FamilyName {
        <FamilyName as FoldWithAstPath<Self>>::fold_children_with_ast_path(node, self, __ast_path)
    }
    #[doc = "Visit a node of type `Vec < FamilyName >`.\n\nBy default, this method calls [`Vec < \
             FamilyName >::fold_children_with_ast_path`]. If you want to recurse, you need to call \
             it manually."]
    #[inline]
    fn fold_family_names(
        &mut self,
        node: Vec<FamilyName>,
        __ast_path: &mut AstKindPath,
    ) -> Vec<FamilyName> {
        <Vec<FamilyName> as FoldWithAstPath<Self>>::fold_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Flex`.\n\nBy default, this method calls \
             [`Flex::fold_children_with_ast_path`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn fold_flex(&mut self, node: Flex, __ast_path: &mut AstKindPath) -> Flex {
        <Flex as FoldWithAstPath<Self>>::fold_children_with_ast_path(node, self, __ast_path)
    }
    #[doc = "Visit a node of type `FontFeatureValuesPrelude`.\n\nBy default, this method calls \
             [`FontFeatureValuesPrelude::fold_children_with_ast_path`]. If you want to recurse, \
             you need to call it manually."]
    #[inline]
    fn fold_font_feature_values_prelude(
        &mut self,
        node: FontFeatureValuesPrelude,
        __ast_path: &mut AstKindPath,
    ) -> FontFeatureValuesPrelude {
        <FontFeatureValuesPrelude as FoldWithAstPath<Self>>::fold_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `ForgivingComplexSelector`.\n\nBy default, this method calls \
             [`ForgivingComplexSelector::fold_children_with_ast_path`]. If you want to recurse, \
             you need to call it manually."]
    #[inline]
    fn fold_forgiving_complex_selector(
        &mut self,
        node: ForgivingComplexSelector,
        __ast_path: &mut AstKindPath,
    ) -> ForgivingComplexSelector {
        <ForgivingComplexSelector as FoldWithAstPath<Self>>::fold_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Vec < ForgivingComplexSelector >`.\n\nBy default, this method \
             calls [`Vec < ForgivingComplexSelector >::fold_children_with_ast_path`]. If you want \
             to recurse, you need to call it manually."]
    #[inline]
    fn fold_forgiving_complex_selectors(
        &mut self,
        node: Vec<ForgivingComplexSelector>,
        __ast_path: &mut AstKindPath,
    ) -> Vec<ForgivingComplexSelector> {
        <Vec<ForgivingComplexSelector> as FoldWithAstPath<Self>>::fold_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `ForgivingRelativeSelector`.\n\nBy default, this method calls \
             [`ForgivingRelativeSelector::fold_children_with_ast_path`]. If you want to recurse, \
             you need to call it manually."]
    #[inline]
    fn fold_forgiving_relative_selector(
        &mut self,
        node: ForgivingRelativeSelector,
        __ast_path: &mut AstKindPath,
    ) -> ForgivingRelativeSelector {
        <ForgivingRelativeSelector as FoldWithAstPath<Self>>::fold_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `ForgivingRelativeSelectorList`.\n\nBy default, this method \
             calls [`ForgivingRelativeSelectorList::fold_children_with_ast_path`]. If you want to \
             recurse, you need to call it manually."]
    #[inline]
    fn fold_forgiving_relative_selector_list(
        &mut self,
        node: ForgivingRelativeSelectorList,
        __ast_path: &mut AstKindPath,
    ) -> ForgivingRelativeSelectorList {
        <ForgivingRelativeSelectorList as FoldWithAstPath<Self>>::fold_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Vec < ForgivingRelativeSelector >`.\n\nBy default, this method \
             calls [`Vec < ForgivingRelativeSelector >::fold_children_with_ast_path`]. If you want \
             to recurse, you need to call it manually."]
    #[inline]
    fn fold_forgiving_relative_selectors(
        &mut self,
        node: Vec<ForgivingRelativeSelector>,
        __ast_path: &mut AstKindPath,
    ) -> Vec<ForgivingRelativeSelector> {
        <Vec<ForgivingRelativeSelector> as FoldWithAstPath<Self>>::fold_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `ForgivingSelectorList`.\n\nBy default, this method calls \
             [`ForgivingSelectorList::fold_children_with_ast_path`]. If you want to recurse, you \
             need to call it manually."]
    #[inline]
    fn fold_forgiving_selector_list(
        &mut self,
        node: ForgivingSelectorList,
        __ast_path: &mut AstKindPath,
    ) -> ForgivingSelectorList {
        <ForgivingSelectorList as FoldWithAstPath<Self>>::fold_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Frequency`.\n\nBy default, this method calls \
             [`Frequency::fold_children_with_ast_path`]. If you want to recurse, you need to call \
             it manually."]
    #[inline]
    fn fold_frequency(&mut self, node: Frequency, __ast_path: &mut AstKindPath) -> Frequency {
        <Frequency as FoldWithAstPath<Self>>::fold_children_with_ast_path(node, self, __ast_path)
    }
    #[doc = "Visit a node of type `FrequencyPercentage`.\n\nBy default, this method calls \
             [`FrequencyPercentage::fold_children_with_ast_path`]. If you want to recurse, you \
             need to call it manually."]
    #[inline]
    fn fold_frequency_percentage(
        &mut self,
        node: FrequencyPercentage,
        __ast_path: &mut AstKindPath,
    ) -> FrequencyPercentage {
        <FrequencyPercentage as FoldWithAstPath<Self>>::fold_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Function`.\n\nBy default, this method calls \
             [`Function::fold_children_with_ast_path`]. If you want to recurse, you need to call \
             it manually."]
    #[inline]
    fn fold_function(&mut self, node: Function, __ast_path: &mut AstKindPath) -> Function {
        <Function as FoldWithAstPath<Self>>::fold_children_with_ast_path(node, self, __ast_path)
    }
    #[doc = "Visit a node of type `FunctionName`.\n\nBy default, this method calls \
             [`FunctionName::fold_children_with_ast_path`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn fold_function_name(
        &mut self,
        node: FunctionName,
        __ast_path: &mut AstKindPath,
    ) -> FunctionName {
        <FunctionName as FoldWithAstPath<Self>>::fold_children_with_ast_path(node, self, __ast_path)
    }
    #[doc = "Visit a node of type `GeneralEnclosed`.\n\nBy default, this method calls \
             [`GeneralEnclosed::fold_children_with_ast_path`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn fold_general_enclosed(
        &mut self,
        node: GeneralEnclosed,
        __ast_path: &mut AstKindPath,
    ) -> GeneralEnclosed {
        <GeneralEnclosed as FoldWithAstPath<Self>>::fold_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `HexColor`.\n\nBy default, this method calls \
             [`HexColor::fold_children_with_ast_path`]. If you want to recurse, you need to call \
             it manually."]
    #[inline]
    fn fold_hex_color(&mut self, node: HexColor, __ast_path: &mut AstKindPath) -> HexColor {
        <HexColor as FoldWithAstPath<Self>>::fold_children_with_ast_path(node, self, __ast_path)
    }
    #[doc = "Visit a node of type `Hue`.\n\nBy default, this method calls \
             [`Hue::fold_children_with_ast_path`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn fold_hue(&mut self, node: Hue, __ast_path: &mut AstKindPath) -> Hue {
        <Hue as FoldWithAstPath<Self>>::fold_children_with_ast_path(node, self, __ast_path)
    }
    #[doc = "Visit a node of type `IdSelector`.\n\nBy default, this method calls \
             [`IdSelector::fold_children_with_ast_path`]. If you want to recurse, you need to call \
             it manually."]
    #[inline]
    fn fold_id_selector(&mut self, node: IdSelector, __ast_path: &mut AstKindPath) -> IdSelector {
        <IdSelector as FoldWithAstPath<Self>>::fold_children_with_ast_path(node, self, __ast_path)
    }
    #[doc = "Visit a node of type `Ident`.\n\nBy default, this method calls \
             [`Ident::fold_children_with_ast_path`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn fold_ident(&mut self, node: Ident, __ast_path: &mut AstKindPath) -> Ident {
        <Ident as FoldWithAstPath<Self>>::fold_children_with_ast_path(node, self, __ast_path)
    }
    #[doc = "Visit a node of type `Vec < Ident >`.\n\nBy default, this method calls [`Vec < Ident \
             >::fold_children_with_ast_path`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn fold_idents(&mut self, node: Vec<Ident>, __ast_path: &mut AstKindPath) -> Vec<Ident> {
        <Vec<Ident> as FoldWithAstPath<Self>>::fold_children_with_ast_path(node, self, __ast_path)
    }
    #[doc = "Visit a node of type `ImportConditions`.\n\nBy default, this method calls \
             [`ImportConditions::fold_children_with_ast_path`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn fold_import_conditions(
        &mut self,
        node: ImportConditions,
        __ast_path: &mut AstKindPath,
    ) -> ImportConditions {
        <ImportConditions as FoldWithAstPath<Self>>::fold_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `ImportHref`.\n\nBy default, this method calls \
             [`ImportHref::fold_children_with_ast_path`]. If you want to recurse, you need to call \
             it manually."]
    #[inline]
    fn fold_import_href(&mut self, node: ImportHref, __ast_path: &mut AstKindPath) -> ImportHref {
        <ImportHref as FoldWithAstPath<Self>>::fold_children_with_ast_path(node, self, __ast_path)
    }
    #[doc = "Visit a node of type `ImportLayerName`.\n\nBy default, this method calls \
             [`ImportLayerName::fold_children_with_ast_path`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn fold_import_layer_name(
        &mut self,
        node: ImportLayerName,
        __ast_path: &mut AstKindPath,
    ) -> ImportLayerName {
        <ImportLayerName as FoldWithAstPath<Self>>::fold_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `ImportPrelude`.\n\nBy default, this method calls \
             [`ImportPrelude::fold_children_with_ast_path`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn fold_import_prelude(
        &mut self,
        node: ImportPrelude,
        __ast_path: &mut AstKindPath,
    ) -> ImportPrelude {
        <ImportPrelude as FoldWithAstPath<Self>>::fold_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `ImportantFlag`.\n\nBy default, this method calls \
             [`ImportantFlag::fold_children_with_ast_path`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn fold_important_flag(
        &mut self,
        node: ImportantFlag,
        __ast_path: &mut AstKindPath,
    ) -> ImportantFlag {
        <ImportantFlag as FoldWithAstPath<Self>>::fold_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Integer`.\n\nBy default, this method calls \
             [`Integer::fold_children_with_ast_path`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn fold_integer(&mut self, node: Integer, __ast_path: &mut AstKindPath) -> Integer {
        <Integer as FoldWithAstPath<Self>>::fold_children_with_ast_path(node, self, __ast_path)
    }
    #[doc = "Visit a node of type `KeyframeBlock`.\n\nBy default, this method calls \
             [`KeyframeBlock::fold_children_with_ast_path`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn fold_keyframe_block(
        &mut self,
        node: KeyframeBlock,
        __ast_path: &mut AstKindPath,
    ) -> KeyframeBlock {
        <KeyframeBlock as FoldWithAstPath<Self>>::fold_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `KeyframeSelector`.\n\nBy default, this method calls \
             [`KeyframeSelector::fold_children_with_ast_path`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn fold_keyframe_selector(
        &mut self,
        node: KeyframeSelector,
        __ast_path: &mut AstKindPath,
    ) -> KeyframeSelector {
        <KeyframeSelector as FoldWithAstPath<Self>>::fold_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Vec < KeyframeSelector >`.\n\nBy default, this method calls \
             [`Vec < KeyframeSelector >::fold_children_with_ast_path`]. If you want to recurse, \
             you need to call it manually."]
    #[inline]
    fn fold_keyframe_selectors(
        &mut self,
        node: Vec<KeyframeSelector>,
        __ast_path: &mut AstKindPath,
    ) -> Vec<KeyframeSelector> {
        <Vec<KeyframeSelector> as FoldWithAstPath<Self>>::fold_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `KeyframesName`.\n\nBy default, this method calls \
             [`KeyframesName::fold_children_with_ast_path`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn fold_keyframes_name(
        &mut self,
        node: KeyframesName,
        __ast_path: &mut AstKindPath,
    ) -> KeyframesName {
        <KeyframesName as FoldWithAstPath<Self>>::fold_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `KeyframesPseudoFunction`.\n\nBy default, this method calls \
             [`KeyframesPseudoFunction::fold_children_with_ast_path`]. If you want to recurse, you \
             need to call it manually."]
    #[inline]
    fn fold_keyframes_pseudo_function(
        &mut self,
        node: KeyframesPseudoFunction,
        __ast_path: &mut AstKindPath,
    ) -> KeyframesPseudoFunction {
        <KeyframesPseudoFunction as FoldWithAstPath<Self>>::fold_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `KeyframesPseudoPrefix`.\n\nBy default, this method calls \
             [`KeyframesPseudoPrefix::fold_children_with_ast_path`]. If you want to recurse, you \
             need to call it manually."]
    #[inline]
    fn fold_keyframes_pseudo_prefix(
        &mut self,
        node: KeyframesPseudoPrefix,
        __ast_path: &mut AstKindPath,
    ) -> KeyframesPseudoPrefix {
        <KeyframesPseudoPrefix as FoldWithAstPath<Self>>::fold_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `LayerName`.\n\nBy default, this method calls \
             [`LayerName::fold_children_with_ast_path`]. If you want to recurse, you need to call \
             it manually."]
    #[inline]
    fn fold_layer_name(&mut self, node: LayerName, __ast_path: &mut AstKindPath) -> LayerName {
        <LayerName as FoldWithAstPath<Self>>::fold_children_with_ast_path(node, self, __ast_path)
    }
    #[doc = "Visit a node of type `LayerNameList`.\n\nBy default, this method calls \
             [`LayerNameList::fold_children_with_ast_path`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn fold_layer_name_list(
        &mut self,
        node: LayerNameList,
        __ast_path: &mut AstKindPath,
    ) -> LayerNameList {
        <LayerNameList as FoldWithAstPath<Self>>::fold_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Vec < LayerName >`.\n\nBy default, this method calls [`Vec < \
             LayerName >::fold_children_with_ast_path`]. If you want to recurse, you need to call \
             it manually."]
    #[inline]
    fn fold_layer_names(
        &mut self,
        node: Vec<LayerName>,
        __ast_path: &mut AstKindPath,
    ) -> Vec<LayerName> {
        <Vec<LayerName> as FoldWithAstPath<Self>>::fold_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `LayerPrelude`.\n\nBy default, this method calls \
             [`LayerPrelude::fold_children_with_ast_path`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn fold_layer_prelude(
        &mut self,
        node: LayerPrelude,
        __ast_path: &mut AstKindPath,
    ) -> LayerPrelude {
        <LayerPrelude as FoldWithAstPath<Self>>::fold_children_with_ast_path(node, self, __ast_path)
    }
    #[doc = "Visit a node of type `Length`.\n\nBy default, this method calls \
             [`Length::fold_children_with_ast_path`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn fold_length(&mut self, node: Length, __ast_path: &mut AstKindPath) -> Length {
        <Length as FoldWithAstPath<Self>>::fold_children_with_ast_path(node, self, __ast_path)
    }
    #[doc = "Visit a node of type `LengthPercentage`.\n\nBy default, this method calls \
             [`LengthPercentage::fold_children_with_ast_path`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn fold_length_percentage(
        &mut self,
        node: LengthPercentage,
        __ast_path: &mut AstKindPath,
    ) -> LengthPercentage {
        <LengthPercentage as FoldWithAstPath<Self>>::fold_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `ListOfComponentValues`.\n\nBy default, this method calls \
             [`ListOfComponentValues::fold_children_with_ast_path`]. If you want to recurse, you \
             need to call it manually."]
    #[inline]
    fn fold_list_of_component_values(
        &mut self,
        node: ListOfComponentValues,
        __ast_path: &mut AstKindPath,
    ) -> ListOfComponentValues {
        <ListOfComponentValues as FoldWithAstPath<Self>>::fold_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `MediaAnd`.\n\nBy default, this method calls \
             [`MediaAnd::fold_children_with_ast_path`]. If you want to recurse, you need to call \
             it manually."]
    #[inline]
    fn fold_media_and(&mut self, node: MediaAnd, __ast_path: &mut AstKindPath) -> MediaAnd {
        <MediaAnd as FoldWithAstPath<Self>>::fold_children_with_ast_path(node, self, __ast_path)
    }
    #[doc = "Visit a node of type `MediaCondition`.\n\nBy default, this method calls \
             [`MediaCondition::fold_children_with_ast_path`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn fold_media_condition(
        &mut self,
        node: MediaCondition,
        __ast_path: &mut AstKindPath,
    ) -> MediaCondition {
        <MediaCondition as FoldWithAstPath<Self>>::fold_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `MediaConditionAllType`.\n\nBy default, this method calls \
             [`MediaConditionAllType::fold_children_with_ast_path`]. If you want to recurse, you \
             need to call it manually."]
    #[inline]
    fn fold_media_condition_all_type(
        &mut self,
        node: MediaConditionAllType,
        __ast_path: &mut AstKindPath,
    ) -> MediaConditionAllType {
        <MediaConditionAllType as FoldWithAstPath<Self>>::fold_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Vec < MediaConditionAllType >`.\n\nBy default, this method \
             calls [`Vec < MediaConditionAllType >::fold_children_with_ast_path`]. If you want to \
             recurse, you need to call it manually."]
    #[inline]
    fn fold_media_condition_all_types(
        &mut self,
        node: Vec<MediaConditionAllType>,
        __ast_path: &mut AstKindPath,
    ) -> Vec<MediaConditionAllType> {
        <Vec<MediaConditionAllType> as FoldWithAstPath<Self>>::fold_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `MediaConditionType`.\n\nBy default, this method calls \
             [`MediaConditionType::fold_children_with_ast_path`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn fold_media_condition_type(
        &mut self,
        node: MediaConditionType,
        __ast_path: &mut AstKindPath,
    ) -> MediaConditionType {
        <MediaConditionType as FoldWithAstPath<Self>>::fold_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `MediaConditionWithoutOr`.\n\nBy default, this method calls \
             [`MediaConditionWithoutOr::fold_children_with_ast_path`]. If you want to recurse, you \
             need to call it manually."]
    #[inline]
    fn fold_media_condition_without_or(
        &mut self,
        node: MediaConditionWithoutOr,
        __ast_path: &mut AstKindPath,
    ) -> MediaConditionWithoutOr {
        <MediaConditionWithoutOr as FoldWithAstPath<Self>>::fold_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `MediaConditionWithoutOrType`.\n\nBy default, this method calls \
             [`MediaConditionWithoutOrType::fold_children_with_ast_path`]. If you want to recurse, \
             you need to call it manually."]
    #[inline]
    fn fold_media_condition_without_or_type(
        &mut self,
        node: MediaConditionWithoutOrType,
        __ast_path: &mut AstKindPath,
    ) -> MediaConditionWithoutOrType {
        <MediaConditionWithoutOrType as FoldWithAstPath<Self>>::fold_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Vec < MediaConditionWithoutOrType >`.\n\nBy default, this \
             method calls [`Vec < MediaConditionWithoutOrType >::fold_children_with_ast_path`]. If \
             you want to recurse, you need to call it manually."]
    #[inline]
    fn fold_media_condition_without_or_types(
        &mut self,
        node: Vec<MediaConditionWithoutOrType>,
        __ast_path: &mut AstKindPath,
    ) -> Vec<MediaConditionWithoutOrType> {
        <Vec<MediaConditionWithoutOrType> as FoldWithAstPath<Self>>::fold_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `MediaFeature`.\n\nBy default, this method calls \
             [`MediaFeature::fold_children_with_ast_path`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn fold_media_feature(
        &mut self,
        node: MediaFeature,
        __ast_path: &mut AstKindPath,
    ) -> MediaFeature {
        <MediaFeature as FoldWithAstPath<Self>>::fold_children_with_ast_path(node, self, __ast_path)
    }
    #[doc = "Visit a node of type `MediaFeatureBoolean`.\n\nBy default, this method calls \
             [`MediaFeatureBoolean::fold_children_with_ast_path`]. If you want to recurse, you \
             need to call it manually."]
    #[inline]
    fn fold_media_feature_boolean(
        &mut self,
        node: MediaFeatureBoolean,
        __ast_path: &mut AstKindPath,
    ) -> MediaFeatureBoolean {
        <MediaFeatureBoolean as FoldWithAstPath<Self>>::fold_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `MediaFeatureName`.\n\nBy default, this method calls \
             [`MediaFeatureName::fold_children_with_ast_path`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn fold_media_feature_name(
        &mut self,
        node: MediaFeatureName,
        __ast_path: &mut AstKindPath,
    ) -> MediaFeatureName {
        <MediaFeatureName as FoldWithAstPath<Self>>::fold_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `MediaFeaturePlain`.\n\nBy default, this method calls \
             [`MediaFeaturePlain::fold_children_with_ast_path`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn fold_media_feature_plain(
        &mut self,
        node: MediaFeaturePlain,
        __ast_path: &mut AstKindPath,
    ) -> MediaFeaturePlain {
        <MediaFeaturePlain as FoldWithAstPath<Self>>::fold_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `MediaFeatureRange`.\n\nBy default, this method calls \
             [`MediaFeatureRange::fold_children_with_ast_path`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn fold_media_feature_range(
        &mut self,
        node: MediaFeatureRange,
        __ast_path: &mut AstKindPath,
    ) -> MediaFeatureRange {
        <MediaFeatureRange as FoldWithAstPath<Self>>::fold_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `MediaFeatureRangeComparison`.\n\nBy default, this method calls \
             [`MediaFeatureRangeComparison::fold_children_with_ast_path`]. If you want to recurse, \
             you need to call it manually."]
    #[inline]
    fn fold_media_feature_range_comparison(
        &mut self,
        node: MediaFeatureRangeComparison,
        __ast_path: &mut AstKindPath,
    ) -> MediaFeatureRangeComparison {
        <MediaFeatureRangeComparison as FoldWithAstPath<Self>>::fold_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `MediaFeatureRangeInterval`.\n\nBy default, this method calls \
             [`MediaFeatureRangeInterval::fold_children_with_ast_path`]. If you want to recurse, \
             you need to call it manually."]
    #[inline]
    fn fold_media_feature_range_interval(
        &mut self,
        node: MediaFeatureRangeInterval,
        __ast_path: &mut AstKindPath,
    ) -> MediaFeatureRangeInterval {
        <MediaFeatureRangeInterval as FoldWithAstPath<Self>>::fold_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `MediaFeatureValue`.\n\nBy default, this method calls \
             [`MediaFeatureValue::fold_children_with_ast_path`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn fold_media_feature_value(
        &mut self,
        node: MediaFeatureValue,
        __ast_path: &mut AstKindPath,
    ) -> MediaFeatureValue {
        <MediaFeatureValue as FoldWithAstPath<Self>>::fold_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `MediaInParens`.\n\nBy default, this method calls \
             [`MediaInParens::fold_children_with_ast_path`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn fold_media_in_parens(
        &mut self,
        node: MediaInParens,
        __ast_path: &mut AstKindPath,
    ) -> MediaInParens {
        <MediaInParens as FoldWithAstPath<Self>>::fold_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `MediaNot`.\n\nBy default, this method calls \
             [`MediaNot::fold_children_with_ast_path`]. If you want to recurse, you need to call \
             it manually."]
    #[inline]
    fn fold_media_not(&mut self, node: MediaNot, __ast_path: &mut AstKindPath) -> MediaNot {
        <MediaNot as FoldWithAstPath<Self>>::fold_children_with_ast_path(node, self, __ast_path)
    }
    #[doc = "Visit a node of type `MediaOr`.\n\nBy default, this method calls \
             [`MediaOr::fold_children_with_ast_path`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn fold_media_or(&mut self, node: MediaOr, __ast_path: &mut AstKindPath) -> MediaOr {
        <MediaOr as FoldWithAstPath<Self>>::fold_children_with_ast_path(node, self, __ast_path)
    }
    #[doc = "Visit a node of type `MediaQuery`.\n\nBy default, this method calls \
             [`MediaQuery::fold_children_with_ast_path`]. If you want to recurse, you need to call \
             it manually."]
    #[inline]
    fn fold_media_query(&mut self, node: MediaQuery, __ast_path: &mut AstKindPath) -> MediaQuery {
        <MediaQuery as FoldWithAstPath<Self>>::fold_children_with_ast_path(node, self, __ast_path)
    }
    #[doc = "Visit a node of type `MediaQueryList`.\n\nBy default, this method calls \
             [`MediaQueryList::fold_children_with_ast_path`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn fold_media_query_list(
        &mut self,
        node: MediaQueryList,
        __ast_path: &mut AstKindPath,
    ) -> MediaQueryList {
        <MediaQueryList as FoldWithAstPath<Self>>::fold_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Vec < MediaQuery >`.\n\nBy default, this method calls [`Vec < \
             MediaQuery >::fold_children_with_ast_path`]. If you want to recurse, you need to call \
             it manually."]
    #[inline]
    fn fold_media_querys(
        &mut self,
        node: Vec<MediaQuery>,
        __ast_path: &mut AstKindPath,
    ) -> Vec<MediaQuery> {
        <Vec<MediaQuery> as FoldWithAstPath<Self>>::fold_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `MediaType`.\n\nBy default, this method calls \
             [`MediaType::fold_children_with_ast_path`]. If you want to recurse, you need to call \
             it manually."]
    #[inline]
    fn fold_media_type(&mut self, node: MediaType, __ast_path: &mut AstKindPath) -> MediaType {
        <MediaType as FoldWithAstPath<Self>>::fold_children_with_ast_path(node, self, __ast_path)
    }
    #[doc = "Visit a node of type `NamedNamespace`.\n\nBy default, this method calls \
             [`NamedNamespace::fold_children_with_ast_path`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn fold_named_namespace(
        &mut self,
        node: NamedNamespace,
        __ast_path: &mut AstKindPath,
    ) -> NamedNamespace {
        <NamedNamespace as FoldWithAstPath<Self>>::fold_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Namespace`.\n\nBy default, this method calls \
             [`Namespace::fold_children_with_ast_path`]. If you want to recurse, you need to call \
             it manually."]
    #[inline]
    fn fold_namespace(&mut self, node: Namespace, __ast_path: &mut AstKindPath) -> Namespace {
        <Namespace as FoldWithAstPath<Self>>::fold_children_with_ast_path(node, self, __ast_path)
    }
    #[doc = "Visit a node of type `NamespacePrefix`.\n\nBy default, this method calls \
             [`NamespacePrefix::fold_children_with_ast_path`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn fold_namespace_prefix(
        &mut self,
        node: NamespacePrefix,
        __ast_path: &mut AstKindPath,
    ) -> NamespacePrefix {
        <NamespacePrefix as FoldWithAstPath<Self>>::fold_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `NamespacePrelude`.\n\nBy default, this method calls \
             [`NamespacePrelude::fold_children_with_ast_path`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn fold_namespace_prelude(
        &mut self,
        node: NamespacePrelude,
        __ast_path: &mut AstKindPath,
    ) -> NamespacePrelude {
        <NamespacePrelude as FoldWithAstPath<Self>>::fold_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `NamespacePreludeUri`.\n\nBy default, this method calls \
             [`NamespacePreludeUri::fold_children_with_ast_path`]. If you want to recurse, you \
             need to call it manually."]
    #[inline]
    fn fold_namespace_prelude_uri(
        &mut self,
        node: NamespacePreludeUri,
        __ast_path: &mut AstKindPath,
    ) -> NamespacePreludeUri {
        <NamespacePreludeUri as FoldWithAstPath<Self>>::fold_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `NestingSelector`.\n\nBy default, this method calls \
             [`NestingSelector::fold_children_with_ast_path`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn fold_nesting_selector(
        &mut self,
        node: NestingSelector,
        __ast_path: &mut AstKindPath,
    ) -> NestingSelector {
        <NestingSelector as FoldWithAstPath<Self>>::fold_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Number`.\n\nBy default, this method calls \
             [`Number::fold_children_with_ast_path`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn fold_number(&mut self, node: Number, __ast_path: &mut AstKindPath) -> Number {
        <Number as FoldWithAstPath<Self>>::fold_children_with_ast_path(node, self, __ast_path)
    }
    #[doc = "Visit a node of type `NumberType`.\n\nBy default, this method calls \
             [`NumberType::fold_children_with_ast_path`]. If you want to recurse, you need to call \
             it manually."]
    #[inline]
    fn fold_number_type(&mut self, node: NumberType, __ast_path: &mut AstKindPath) -> NumberType {
        <NumberType as FoldWithAstPath<Self>>::fold_children_with_ast_path(node, self, __ast_path)
    }
    #[doc = "Visit a node of type `Option < Box < AtRulePrelude > >`.\n\nBy default, this method \
             calls [`Option < Box < AtRulePrelude > >::fold_children_with_ast_path`]. If you want \
             to recurse, you need to call it manually."]
    #[inline]
    fn fold_opt_at_rule_prelude(
        &mut self,
        node: Option<Box<AtRulePrelude>>,
        __ast_path: &mut AstKindPath,
    ) -> Option<Box<AtRulePrelude>> {
        <Option<Box<AtRulePrelude>> as FoldWithAstPath<Self>>::fold_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Option < swc_atoms :: Atom >`.\n\nBy default, this method calls \
             [`Option < swc_atoms :: Atom >::fold_children_with_ast_path`]. If you want to \
             recurse, you need to call it manually."]
    #[inline]
    fn fold_opt_atom(
        &mut self,
        node: Option<swc_atoms::Atom>,
        __ast_path: &mut AstKindPath,
    ) -> Option<swc_atoms::Atom> {
        <Option<swc_atoms::Atom> as FoldWithAstPath<Self>>::fold_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Option < AttributeSelectorMatcher >`.\n\nBy default, this \
             method calls [`Option < AttributeSelectorMatcher >::fold_children_with_ast_path`]. If \
             you want to recurse, you need to call it manually."]
    #[inline]
    fn fold_opt_attribute_selector_matcher(
        &mut self,
        node: Option<AttributeSelectorMatcher>,
        __ast_path: &mut AstKindPath,
    ) -> Option<AttributeSelectorMatcher> {
        <Option<AttributeSelectorMatcher> as FoldWithAstPath<Self>>::fold_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Option < AttributeSelectorModifier >`.\n\nBy default, this \
             method calls [`Option < AttributeSelectorModifier >::fold_children_with_ast_path`]. \
             If you want to recurse, you need to call it manually."]
    #[inline]
    fn fold_opt_attribute_selector_modifier(
        &mut self,
        node: Option<AttributeSelectorModifier>,
        __ast_path: &mut AstKindPath,
    ) -> Option<AttributeSelectorModifier> {
        <Option<AttributeSelectorModifier> as FoldWithAstPath<Self>>::fold_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Option < AttributeSelectorValue >`.\n\nBy default, this method \
             calls [`Option < AttributeSelectorValue >::fold_children_with_ast_path`]. If you want \
             to recurse, you need to call it manually."]
    #[inline]
    fn fold_opt_attribute_selector_value(
        &mut self,
        node: Option<AttributeSelectorValue>,
        __ast_path: &mut AstKindPath,
    ) -> Option<AttributeSelectorValue> {
        <Option<AttributeSelectorValue> as FoldWithAstPath<Self>>::fold_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Option < Combinator >`.\n\nBy default, this method calls \
             [`Option < Combinator >::fold_children_with_ast_path`]. If you want to recurse, you \
             need to call it manually."]
    #[inline]
    fn fold_opt_combinator(
        &mut self,
        node: Option<Combinator>,
        __ast_path: &mut AstKindPath,
    ) -> Option<Combinator> {
        <Option<Combinator> as FoldWithAstPath<Self>>::fold_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Option < ContainerName >`.\n\nBy default, this method calls \
             [`Option < ContainerName >::fold_children_with_ast_path`]. If you want to recurse, \
             you need to call it manually."]
    #[inline]
    fn fold_opt_container_name(
        &mut self,
        node: Option<ContainerName>,
        __ast_path: &mut AstKindPath,
    ) -> Option<ContainerName> {
        <Option<ContainerName> as FoldWithAstPath<Self>>::fold_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Option < ForgivingSelectorList >`.\n\nBy default, this method \
             calls [`Option < ForgivingSelectorList >::fold_children_with_ast_path`]. If you want \
             to recurse, you need to call it manually."]
    #[inline]
    fn fold_opt_forgiving_selector_list(
        &mut self,
        node: Option<ForgivingSelectorList>,
        __ast_path: &mut AstKindPath,
    ) -> Option<ForgivingSelectorList> {
        <Option<ForgivingSelectorList> as FoldWithAstPath<Self>>::fold_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Option < Box < Function > >`.\n\nBy default, this method calls \
             [`Option < Box < Function > >::fold_children_with_ast_path`]. If you want to recurse, \
             you need to call it manually."]
    #[inline]
    fn fold_opt_function(
        &mut self,
        node: Option<Box<Function>>,
        __ast_path: &mut AstKindPath,
    ) -> Option<Box<Function>> {
        <Option<Box<Function>> as FoldWithAstPath<Self>>::fold_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Option < Ident >`.\n\nBy default, this method calls [`Option < \
             Ident >::fold_children_with_ast_path`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn fold_opt_ident(
        &mut self,
        node: Option<Ident>,
        __ast_path: &mut AstKindPath,
    ) -> Option<Ident> {
        <Option<Ident> as FoldWithAstPath<Self>>::fold_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Option < Box < ImportConditions > >`.\n\nBy default, this \
             method calls [`Option < Box < ImportConditions > >::fold_children_with_ast_path`]. If \
             you want to recurse, you need to call it manually."]
    #[inline]
    fn fold_opt_import_conditions(
        &mut self,
        node: Option<Box<ImportConditions>>,
        __ast_path: &mut AstKindPath,
    ) -> Option<Box<ImportConditions>> {
        <Option<Box<ImportConditions>> as FoldWithAstPath<Self>>::fold_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Option < Box < ImportLayerName > >`.\n\nBy default, this method \
             calls [`Option < Box < ImportLayerName > >::fold_children_with_ast_path`]. If you \
             want to recurse, you need to call it manually."]
    #[inline]
    fn fold_opt_import_layer_name(
        &mut self,
        node: Option<Box<ImportLayerName>>,
        __ast_path: &mut AstKindPath,
    ) -> Option<Box<ImportLayerName>> {
        <Option<Box<ImportLayerName>> as FoldWithAstPath<Self>>::fold_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Option < ImportantFlag >`.\n\nBy default, this method calls \
             [`Option < ImportantFlag >::fold_children_with_ast_path`]. If you want to recurse, \
             you need to call it manually."]
    #[inline]
    fn fold_opt_important_flag(
        &mut self,
        node: Option<ImportantFlag>,
        __ast_path: &mut AstKindPath,
    ) -> Option<ImportantFlag> {
        <Option<ImportantFlag> as FoldWithAstPath<Self>>::fold_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Option < Box < MediaConditionType > >`.\n\nBy default, this \
             method calls [`Option < Box < MediaConditionType > >::fold_children_with_ast_path`]. \
             If you want to recurse, you need to call it manually."]
    #[inline]
    fn fold_opt_media_condition_type(
        &mut self,
        node: Option<Box<MediaConditionType>>,
        __ast_path: &mut AstKindPath,
    ) -> Option<Box<MediaConditionType>> {
        <Option<Box<MediaConditionType>> as FoldWithAstPath<Self>>::fold_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Option < Box < MediaQueryList > >`.\n\nBy default, this method \
             calls [`Option < Box < MediaQueryList > >::fold_children_with_ast_path`]. If you want \
             to recurse, you need to call it manually."]
    #[inline]
    fn fold_opt_media_query_list(
        &mut self,
        node: Option<Box<MediaQueryList>>,
        __ast_path: &mut AstKindPath,
    ) -> Option<Box<MediaQueryList>> {
        <Option<Box<MediaQueryList>> as FoldWithAstPath<Self>>::fold_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Option < MediaType >`.\n\nBy default, this method calls \
             [`Option < MediaType >::fold_children_with_ast_path`]. If you want to recurse, you \
             need to call it manually."]
    #[inline]
    fn fold_opt_media_type(
        &mut self,
        node: Option<MediaType>,
        __ast_path: &mut AstKindPath,
    ) -> Option<MediaType> {
        <Option<MediaType> as FoldWithAstPath<Self>>::fold_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Option < Namespace >`.\n\nBy default, this method calls \
             [`Option < Namespace >::fold_children_with_ast_path`]. If you want to recurse, you \
             need to call it manually."]
    #[inline]
    fn fold_opt_namespace(
        &mut self,
        node: Option<Namespace>,
        __ast_path: &mut AstKindPath,
    ) -> Option<Namespace> {
        <Option<Namespace> as FoldWithAstPath<Self>>::fold_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Option < NamespacePrefix >`.\n\nBy default, this method calls \
             [`Option < NamespacePrefix >::fold_children_with_ast_path`]. If you want to recurse, \
             you need to call it manually."]
    #[inline]
    fn fold_opt_namespace_prefix(
        &mut self,
        node: Option<NamespacePrefix>,
        __ast_path: &mut AstKindPath,
    ) -> Option<NamespacePrefix> {
        <Option<NamespacePrefix> as FoldWithAstPath<Self>>::fold_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Option < NestingSelector >`.\n\nBy default, this method calls \
             [`Option < NestingSelector >::fold_children_with_ast_path`]. If you want to recurse, \
             you need to call it manually."]
    #[inline]
    fn fold_opt_nesting_selector(
        &mut self,
        node: Option<NestingSelector>,
        __ast_path: &mut AstKindPath,
    ) -> Option<NestingSelector> {
        <Option<NestingSelector> as FoldWithAstPath<Self>>::fold_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Option < Number >`.\n\nBy default, this method calls [`Option < \
             Number >::fold_children_with_ast_path`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn fold_opt_number(
        &mut self,
        node: Option<Number>,
        __ast_path: &mut AstKindPath,
    ) -> Option<Number> {
        <Option<Number> as FoldWithAstPath<Self>>::fold_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Option < Vec < PageSelectorPseudo > >`.\n\nBy default, this \
             method calls [`Option < Vec < PageSelectorPseudo > >::fold_children_with_ast_path`]. \
             If you want to recurse, you need to call it manually."]
    #[inline]
    fn fold_opt_page_selector_pseudos(
        &mut self,
        node: Option<Vec<PageSelectorPseudo>>,
        __ast_path: &mut AstKindPath,
    ) -> Option<Vec<PageSelectorPseudo>> {
        <Option<Vec<PageSelectorPseudo>> as FoldWithAstPath<Self>>::fold_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Option < PageSelectorType >`.\n\nBy default, this method calls \
             [`Option < PageSelectorType >::fold_children_with_ast_path`]. If you want to recurse, \
             you need to call it manually."]
    #[inline]
    fn fold_opt_page_selector_type(
        &mut self,
        node: Option<PageSelectorType>,
        __ast_path: &mut AstKindPath,
    ) -> Option<PageSelectorType> {
        <Option<PageSelectorType> as FoldWithAstPath<Self>>::fold_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Option < Vec < PseudoClassSelectorChildren > >`.\n\nBy default, \
             this method calls [`Option < Vec < PseudoClassSelectorChildren > \
             >::fold_children_with_ast_path`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn fold_opt_pseudo_class_selector_childrens(
        &mut self,
        node: Option<Vec<PseudoClassSelectorChildren>>,
        __ast_path: &mut AstKindPath,
    ) -> Option<Vec<PseudoClassSelectorChildren>> {
        < Option < Vec < PseudoClassSelectorChildren > > as FoldWithAstPath < Self > > :: fold_children_with_ast_path (node , self , __ast_path)
    }
    #[doc = "Visit a node of type `Option < Vec < PseudoElementSelectorChildren > >`.\n\nBy \
             default, this method calls [`Option < Vec < PseudoElementSelectorChildren > \
             >::fold_children_with_ast_path`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn fold_opt_pseudo_element_selector_childrens(
        &mut self,
        node: Option<Vec<PseudoElementSelectorChildren>>,
        __ast_path: &mut AstKindPath,
    ) -> Option<Vec<PseudoElementSelectorChildren>> {
        < Option < Vec < PseudoElementSelectorChildren > > as FoldWithAstPath < Self > > :: fold_children_with_ast_path (node , self , __ast_path)
    }
    #[doc = "Visit a node of type `Option < SimpleBlock >`.\n\nBy default, this method calls \
             [`Option < SimpleBlock >::fold_children_with_ast_path`]. If you want to recurse, you \
             need to call it manually."]
    #[inline]
    fn fold_opt_simple_block(
        &mut self,
        node: Option<SimpleBlock>,
        __ast_path: &mut AstKindPath,
    ) -> Option<SimpleBlock> {
        <Option<SimpleBlock> as FoldWithAstPath<Self>>::fold_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Option < Box < TypeSelector > >`.\n\nBy default, this method \
             calls [`Option < Box < TypeSelector > >::fold_children_with_ast_path`]. If you want \
             to recurse, you need to call it manually."]
    #[inline]
    fn fold_opt_type_selector(
        &mut self,
        node: Option<Box<TypeSelector>>,
        __ast_path: &mut AstKindPath,
    ) -> Option<Box<TypeSelector>> {
        <Option<Box<TypeSelector>> as FoldWithAstPath<Self>>::fold_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Option < Vec < UrlModifier > >`.\n\nBy default, this method \
             calls [`Option < Vec < UrlModifier > >::fold_children_with_ast_path`]. If you want to \
             recurse, you need to call it manually."]
    #[inline]
    fn fold_opt_url_modifiers(
        &mut self,
        node: Option<Vec<UrlModifier>>,
        __ast_path: &mut AstKindPath,
    ) -> Option<Vec<UrlModifier>> {
        <Option<Vec<UrlModifier>> as FoldWithAstPath<Self>>::fold_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Option < Box < UrlValue > >`.\n\nBy default, this method calls \
             [`Option < Box < UrlValue > >::fold_children_with_ast_path`]. If you want to recurse, \
             you need to call it manually."]
    #[inline]
    fn fold_opt_url_value(
        &mut self,
        node: Option<Box<UrlValue>>,
        __ast_path: &mut AstKindPath,
    ) -> Option<Box<UrlValue>> {
        <Option<Box<UrlValue>> as FoldWithAstPath<Self>>::fold_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `PageSelector`.\n\nBy default, this method calls \
             [`PageSelector::fold_children_with_ast_path`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn fold_page_selector(
        &mut self,
        node: PageSelector,
        __ast_path: &mut AstKindPath,
    ) -> PageSelector {
        <PageSelector as FoldWithAstPath<Self>>::fold_children_with_ast_path(node, self, __ast_path)
    }
    #[doc = "Visit a node of type `PageSelectorList`.\n\nBy default, this method calls \
             [`PageSelectorList::fold_children_with_ast_path`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn fold_page_selector_list(
        &mut self,
        node: PageSelectorList,
        __ast_path: &mut AstKindPath,
    ) -> PageSelectorList {
        <PageSelectorList as FoldWithAstPath<Self>>::fold_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `PageSelectorPseudo`.\n\nBy default, this method calls \
             [`PageSelectorPseudo::fold_children_with_ast_path`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn fold_page_selector_pseudo(
        &mut self,
        node: PageSelectorPseudo,
        __ast_path: &mut AstKindPath,
    ) -> PageSelectorPseudo {
        <PageSelectorPseudo as FoldWithAstPath<Self>>::fold_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Vec < PageSelectorPseudo >`.\n\nBy default, this method calls \
             [`Vec < PageSelectorPseudo >::fold_children_with_ast_path`]. If you want to recurse, \
             you need to call it manually."]
    #[inline]
    fn fold_page_selector_pseudos(
        &mut self,
        node: Vec<PageSelectorPseudo>,
        __ast_path: &mut AstKindPath,
    ) -> Vec<PageSelectorPseudo> {
        <Vec<PageSelectorPseudo> as FoldWithAstPath<Self>>::fold_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `PageSelectorType`.\n\nBy default, this method calls \
             [`PageSelectorType::fold_children_with_ast_path`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn fold_page_selector_type(
        &mut self,
        node: PageSelectorType,
        __ast_path: &mut AstKindPath,
    ) -> PageSelectorType {
        <PageSelectorType as FoldWithAstPath<Self>>::fold_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Vec < PageSelector >`.\n\nBy default, this method calls [`Vec < \
             PageSelector >::fold_children_with_ast_path`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn fold_page_selectors(
        &mut self,
        node: Vec<PageSelector>,
        __ast_path: &mut AstKindPath,
    ) -> Vec<PageSelector> {
        <Vec<PageSelector> as FoldWithAstPath<Self>>::fold_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Percentage`.\n\nBy default, this method calls \
             [`Percentage::fold_children_with_ast_path`]. If you want to recurse, you need to call \
             it manually."]
    #[inline]
    fn fold_percentage(&mut self, node: Percentage, __ast_path: &mut AstKindPath) -> Percentage {
        <Percentage as FoldWithAstPath<Self>>::fold_children_with_ast_path(node, self, __ast_path)
    }
    #[doc = "Visit a node of type `PseudoClassSelector`.\n\nBy default, this method calls \
             [`PseudoClassSelector::fold_children_with_ast_path`]. If you want to recurse, you \
             need to call it manually."]
    #[inline]
    fn fold_pseudo_class_selector(
        &mut self,
        node: PseudoClassSelector,
        __ast_path: &mut AstKindPath,
    ) -> PseudoClassSelector {
        <PseudoClassSelector as FoldWithAstPath<Self>>::fold_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `PseudoClassSelectorChildren`.\n\nBy default, this method calls \
             [`PseudoClassSelectorChildren::fold_children_with_ast_path`]. If you want to recurse, \
             you need to call it manually."]
    #[inline]
    fn fold_pseudo_class_selector_children(
        &mut self,
        node: PseudoClassSelectorChildren,
        __ast_path: &mut AstKindPath,
    ) -> PseudoClassSelectorChildren {
        <PseudoClassSelectorChildren as FoldWithAstPath<Self>>::fold_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Vec < PseudoClassSelectorChildren >`.\n\nBy default, this \
             method calls [`Vec < PseudoClassSelectorChildren >::fold_children_with_ast_path`]. If \
             you want to recurse, you need to call it manually."]
    #[inline]
    fn fold_pseudo_class_selector_childrens(
        &mut self,
        node: Vec<PseudoClassSelectorChildren>,
        __ast_path: &mut AstKindPath,
    ) -> Vec<PseudoClassSelectorChildren> {
        <Vec<PseudoClassSelectorChildren> as FoldWithAstPath<Self>>::fold_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `PseudoElementSelector`.\n\nBy default, this method calls \
             [`PseudoElementSelector::fold_children_with_ast_path`]. If you want to recurse, you \
             need to call it manually."]
    #[inline]
    fn fold_pseudo_element_selector(
        &mut self,
        node: PseudoElementSelector,
        __ast_path: &mut AstKindPath,
    ) -> PseudoElementSelector {
        <PseudoElementSelector as FoldWithAstPath<Self>>::fold_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `PseudoElementSelectorChildren`.\n\nBy default, this method \
             calls [`PseudoElementSelectorChildren::fold_children_with_ast_path`]. If you want to \
             recurse, you need to call it manually."]
    #[inline]
    fn fold_pseudo_element_selector_children(
        &mut self,
        node: PseudoElementSelectorChildren,
        __ast_path: &mut AstKindPath,
    ) -> PseudoElementSelectorChildren {
        <PseudoElementSelectorChildren as FoldWithAstPath<Self>>::fold_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Vec < PseudoElementSelectorChildren >`.\n\nBy default, this \
             method calls [`Vec < PseudoElementSelectorChildren >::fold_children_with_ast_path`]. \
             If you want to recurse, you need to call it manually."]
    #[inline]
    fn fold_pseudo_element_selector_childrens(
        &mut self,
        node: Vec<PseudoElementSelectorChildren>,
        __ast_path: &mut AstKindPath,
    ) -> Vec<PseudoElementSelectorChildren> {
        <Vec<PseudoElementSelectorChildren> as FoldWithAstPath<Self>>::fold_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `QualifiedRule`.\n\nBy default, this method calls \
             [`QualifiedRule::fold_children_with_ast_path`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn fold_qualified_rule(
        &mut self,
        node: QualifiedRule,
        __ast_path: &mut AstKindPath,
    ) -> QualifiedRule {
        <QualifiedRule as FoldWithAstPath<Self>>::fold_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `QualifiedRulePrelude`.\n\nBy default, this method calls \
             [`QualifiedRulePrelude::fold_children_with_ast_path`]. If you want to recurse, you \
             need to call it manually."]
    #[inline]
    fn fold_qualified_rule_prelude(
        &mut self,
        node: QualifiedRulePrelude,
        __ast_path: &mut AstKindPath,
    ) -> QualifiedRulePrelude {
        <QualifiedRulePrelude as FoldWithAstPath<Self>>::fold_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `QueryInParens`.\n\nBy default, this method calls \
             [`QueryInParens::fold_children_with_ast_path`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn fold_query_in_parens(
        &mut self,
        node: QueryInParens,
        __ast_path: &mut AstKindPath,
    ) -> QueryInParens {
        <QueryInParens as FoldWithAstPath<Self>>::fold_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Ratio`.\n\nBy default, this method calls \
             [`Ratio::fold_children_with_ast_path`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn fold_ratio(&mut self, node: Ratio, __ast_path: &mut AstKindPath) -> Ratio {
        <Ratio as FoldWithAstPath<Self>>::fold_children_with_ast_path(node, self, __ast_path)
    }
    #[doc = "Visit a node of type `RelativeSelector`.\n\nBy default, this method calls \
             [`RelativeSelector::fold_children_with_ast_path`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn fold_relative_selector(
        &mut self,
        node: RelativeSelector,
        __ast_path: &mut AstKindPath,
    ) -> RelativeSelector {
        <RelativeSelector as FoldWithAstPath<Self>>::fold_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `RelativeSelectorList`.\n\nBy default, this method calls \
             [`RelativeSelectorList::fold_children_with_ast_path`]. If you want to recurse, you \
             need to call it manually."]
    #[inline]
    fn fold_relative_selector_list(
        &mut self,
        node: RelativeSelectorList,
        __ast_path: &mut AstKindPath,
    ) -> RelativeSelectorList {
        <RelativeSelectorList as FoldWithAstPath<Self>>::fold_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Vec < RelativeSelector >`.\n\nBy default, this method calls \
             [`Vec < RelativeSelector >::fold_children_with_ast_path`]. If you want to recurse, \
             you need to call it manually."]
    #[inline]
    fn fold_relative_selectors(
        &mut self,
        node: Vec<RelativeSelector>,
        __ast_path: &mut AstKindPath,
    ) -> Vec<RelativeSelector> {
        <Vec<RelativeSelector> as FoldWithAstPath<Self>>::fold_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Resolution`.\n\nBy default, this method calls \
             [`Resolution::fold_children_with_ast_path`]. If you want to recurse, you need to call \
             it manually."]
    #[inline]
    fn fold_resolution(&mut self, node: Resolution, __ast_path: &mut AstKindPath) -> Resolution {
        <Resolution as FoldWithAstPath<Self>>::fold_children_with_ast_path(node, self, __ast_path)
    }
    #[doc = "Visit a node of type `Rule`.\n\nBy default, this method calls \
             [`Rule::fold_children_with_ast_path`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn fold_rule(&mut self, node: Rule, __ast_path: &mut AstKindPath) -> Rule {
        <Rule as FoldWithAstPath<Self>>::fold_children_with_ast_path(node, self, __ast_path)
    }
    #[doc = "Visit a node of type `Vec < Rule >`.\n\nBy default, this method calls [`Vec < Rule \
             >::fold_children_with_ast_path`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn fold_rules(&mut self, node: Vec<Rule>, __ast_path: &mut AstKindPath) -> Vec<Rule> {
        <Vec<Rule> as FoldWithAstPath<Self>>::fold_children_with_ast_path(node, self, __ast_path)
    }
    #[doc = "Visit a node of type `ScopeRange`.\n\nBy default, this method calls \
             [`ScopeRange::fold_children_with_ast_path`]. If you want to recurse, you need to call \
             it manually."]
    #[inline]
    fn fold_scope_range(&mut self, node: ScopeRange, __ast_path: &mut AstKindPath) -> ScopeRange {
        <ScopeRange as FoldWithAstPath<Self>>::fold_children_with_ast_path(node, self, __ast_path)
    }
    #[doc = "Visit a node of type `SelectorList`.\n\nBy default, this method calls \
             [`SelectorList::fold_children_with_ast_path`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn fold_selector_list(
        &mut self,
        node: SelectorList,
        __ast_path: &mut AstKindPath,
    ) -> SelectorList {
        <SelectorList as FoldWithAstPath<Self>>::fold_children_with_ast_path(node, self, __ast_path)
    }
    #[doc = "Visit a node of type `SequenceOfCustomIdents`.\n\nBy default, this method calls \
             [`SequenceOfCustomIdents::fold_children_with_ast_path`]. If you want to recurse, you \
             need to call it manually."]
    #[inline]
    fn fold_sequence_of_custom_idents(
        &mut self,
        node: SequenceOfCustomIdents,
        __ast_path: &mut AstKindPath,
    ) -> SequenceOfCustomIdents {
        <SequenceOfCustomIdents as FoldWithAstPath<Self>>::fold_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `SimpleBlock`.\n\nBy default, this method calls \
             [`SimpleBlock::fold_children_with_ast_path`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn fold_simple_block(
        &mut self,
        node: SimpleBlock,
        __ast_path: &mut AstKindPath,
    ) -> SimpleBlock {
        <SimpleBlock as FoldWithAstPath<Self>>::fold_children_with_ast_path(node, self, __ast_path)
    }
    #[doc = "Visit a node of type `SizeFeature`.\n\nBy default, this method calls \
             [`SizeFeature::fold_children_with_ast_path`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn fold_size_feature(
        &mut self,
        node: SizeFeature,
        __ast_path: &mut AstKindPath,
    ) -> SizeFeature {
        <SizeFeature as FoldWithAstPath<Self>>::fold_children_with_ast_path(node, self, __ast_path)
    }
    #[doc = "Visit a node of type `SizeFeatureBoolean`.\n\nBy default, this method calls \
             [`SizeFeatureBoolean::fold_children_with_ast_path`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn fold_size_feature_boolean(
        &mut self,
        node: SizeFeatureBoolean,
        __ast_path: &mut AstKindPath,
    ) -> SizeFeatureBoolean {
        <SizeFeatureBoolean as FoldWithAstPath<Self>>::fold_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `SizeFeatureName`.\n\nBy default, this method calls \
             [`SizeFeatureName::fold_children_with_ast_path`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn fold_size_feature_name(
        &mut self,
        node: SizeFeatureName,
        __ast_path: &mut AstKindPath,
    ) -> SizeFeatureName {
        <SizeFeatureName as FoldWithAstPath<Self>>::fold_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `SizeFeaturePlain`.\n\nBy default, this method calls \
             [`SizeFeaturePlain::fold_children_with_ast_path`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn fold_size_feature_plain(
        &mut self,
        node: SizeFeaturePlain,
        __ast_path: &mut AstKindPath,
    ) -> SizeFeaturePlain {
        <SizeFeaturePlain as FoldWithAstPath<Self>>::fold_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `SizeFeatureRange`.\n\nBy default, this method calls \
             [`SizeFeatureRange::fold_children_with_ast_path`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn fold_size_feature_range(
        &mut self,
        node: SizeFeatureRange,
        __ast_path: &mut AstKindPath,
    ) -> SizeFeatureRange {
        <SizeFeatureRange as FoldWithAstPath<Self>>::fold_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `SizeFeatureRangeComparison`.\n\nBy default, this method calls \
             [`SizeFeatureRangeComparison::fold_children_with_ast_path`]. If you want to recurse, \
             you need to call it manually."]
    #[inline]
    fn fold_size_feature_range_comparison(
        &mut self,
        node: SizeFeatureRangeComparison,
        __ast_path: &mut AstKindPath,
    ) -> SizeFeatureRangeComparison {
        <SizeFeatureRangeComparison as FoldWithAstPath<Self>>::fold_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `SizeFeatureRangeInterval`.\n\nBy default, this method calls \
             [`SizeFeatureRangeInterval::fold_children_with_ast_path`]. If you want to recurse, \
             you need to call it manually."]
    #[inline]
    fn fold_size_feature_range_interval(
        &mut self,
        node: SizeFeatureRangeInterval,
        __ast_path: &mut AstKindPath,
    ) -> SizeFeatureRangeInterval {
        <SizeFeatureRangeInterval as FoldWithAstPath<Self>>::fold_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `SizeFeatureValue`.\n\nBy default, this method calls \
             [`SizeFeatureValue::fold_children_with_ast_path`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn fold_size_feature_value(
        &mut self,
        node: SizeFeatureValue,
        __ast_path: &mut AstKindPath,
    ) -> SizeFeatureValue {
        <SizeFeatureValue as FoldWithAstPath<Self>>::fold_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `swc_common :: Span`.\n\nBy default, this method calls \
             [`swc_common :: Span::fold_children_with_ast_path`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn fold_span(
        &mut self,
        node: swc_common::Span,
        __ast_path: &mut AstKindPath,
    ) -> swc_common::Span {
        <swc_common::Span as FoldWithAstPath<Self>>::fold_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Str`.\n\nBy default, this method calls \
             [`Str::fold_children_with_ast_path`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn fold_str(&mut self, node: Str, __ast_path: &mut AstKindPath) -> Str {
        <Str as FoldWithAstPath<Self>>::fold_children_with_ast_path(node, self, __ast_path)
    }
    #[doc = "Visit a node of type `StyleBlock`.\n\nBy default, this method calls \
             [`StyleBlock::fold_children_with_ast_path`]. If you want to recurse, you need to call \
             it manually."]
    #[inline]
    fn fold_style_block(&mut self, node: StyleBlock, __ast_path: &mut AstKindPath) -> StyleBlock {
        <StyleBlock as FoldWithAstPath<Self>>::fold_children_with_ast_path(node, self, __ast_path)
    }
    #[doc = "Visit a node of type `Stylesheet`.\n\nBy default, this method calls \
             [`Stylesheet::fold_children_with_ast_path`]. If you want to recurse, you need to call \
             it manually."]
    #[inline]
    fn fold_stylesheet(&mut self, node: Stylesheet, __ast_path: &mut AstKindPath) -> Stylesheet {
        <Stylesheet as FoldWithAstPath<Self>>::fold_children_with_ast_path(node, self, __ast_path)
    }
    #[doc = "Visit a node of type `SubclassSelector`.\n\nBy default, this method calls \
             [`SubclassSelector::fold_children_with_ast_path`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn fold_subclass_selector(
        &mut self,
        node: SubclassSelector,
        __ast_path: &mut AstKindPath,
    ) -> SubclassSelector {
        <SubclassSelector as FoldWithAstPath<Self>>::fold_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Vec < SubclassSelector >`.\n\nBy default, this method calls \
             [`Vec < SubclassSelector >::fold_children_with_ast_path`]. If you want to recurse, \
             you need to call it manually."]
    #[inline]
    fn fold_subclass_selectors(
        &mut self,
        node: Vec<SubclassSelector>,
        __ast_path: &mut AstKindPath,
    ) -> Vec<SubclassSelector> {
        <Vec<SubclassSelector> as FoldWithAstPath<Self>>::fold_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `SupportsAnd`.\n\nBy default, this method calls \
             [`SupportsAnd::fold_children_with_ast_path`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn fold_supports_and(
        &mut self,
        node: SupportsAnd,
        __ast_path: &mut AstKindPath,
    ) -> SupportsAnd {
        <SupportsAnd as FoldWithAstPath<Self>>::fold_children_with_ast_path(node, self, __ast_path)
    }
    #[doc = "Visit a node of type `SupportsCondition`.\n\nBy default, this method calls \
             [`SupportsCondition::fold_children_with_ast_path`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn fold_supports_condition(
        &mut self,
        node: SupportsCondition,
        __ast_path: &mut AstKindPath,
    ) -> SupportsCondition {
        <SupportsCondition as FoldWithAstPath<Self>>::fold_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `SupportsConditionType`.\n\nBy default, this method calls \
             [`SupportsConditionType::fold_children_with_ast_path`]. If you want to recurse, you \
             need to call it manually."]
    #[inline]
    fn fold_supports_condition_type(
        &mut self,
        node: SupportsConditionType,
        __ast_path: &mut AstKindPath,
    ) -> SupportsConditionType {
        <SupportsConditionType as FoldWithAstPath<Self>>::fold_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Vec < SupportsConditionType >`.\n\nBy default, this method \
             calls [`Vec < SupportsConditionType >::fold_children_with_ast_path`]. If you want to \
             recurse, you need to call it manually."]
    #[inline]
    fn fold_supports_condition_types(
        &mut self,
        node: Vec<SupportsConditionType>,
        __ast_path: &mut AstKindPath,
    ) -> Vec<SupportsConditionType> {
        <Vec<SupportsConditionType> as FoldWithAstPath<Self>>::fold_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `SupportsFeature`.\n\nBy default, this method calls \
             [`SupportsFeature::fold_children_with_ast_path`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn fold_supports_feature(
        &mut self,
        node: SupportsFeature,
        __ast_path: &mut AstKindPath,
    ) -> SupportsFeature {
        <SupportsFeature as FoldWithAstPath<Self>>::fold_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `SupportsInParens`.\n\nBy default, this method calls \
             [`SupportsInParens::fold_children_with_ast_path`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn fold_supports_in_parens(
        &mut self,
        node: SupportsInParens,
        __ast_path: &mut AstKindPath,
    ) -> SupportsInParens {
        <SupportsInParens as FoldWithAstPath<Self>>::fold_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `SupportsNot`.\n\nBy default, this method calls \
             [`SupportsNot::fold_children_with_ast_path`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn fold_supports_not(
        &mut self,
        node: SupportsNot,
        __ast_path: &mut AstKindPath,
    ) -> SupportsNot {
        <SupportsNot as FoldWithAstPath<Self>>::fold_children_with_ast_path(node, self, __ast_path)
    }
    #[doc = "Visit a node of type `SupportsOr`.\n\nBy default, this method calls \
             [`SupportsOr::fold_children_with_ast_path`]. If you want to recurse, you need to call \
             it manually."]
    #[inline]
    fn fold_supports_or(&mut self, node: SupportsOr, __ast_path: &mut AstKindPath) -> SupportsOr {
        <SupportsOr as FoldWithAstPath<Self>>::fold_children_with_ast_path(node, self, __ast_path)
    }
    #[doc = "Visit a node of type `TagNameSelector`.\n\nBy default, this method calls \
             [`TagNameSelector::fold_children_with_ast_path`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn fold_tag_name_selector(
        &mut self,
        node: TagNameSelector,
        __ast_path: &mut AstKindPath,
    ) -> TagNameSelector {
        <TagNameSelector as FoldWithAstPath<Self>>::fold_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Time`.\n\nBy default, this method calls \
             [`Time::fold_children_with_ast_path`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn fold_time(&mut self, node: Time, __ast_path: &mut AstKindPath) -> Time {
        <Time as FoldWithAstPath<Self>>::fold_children_with_ast_path(node, self, __ast_path)
    }
    #[doc = "Visit a node of type `TimePercentage`.\n\nBy default, this method calls \
             [`TimePercentage::fold_children_with_ast_path`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn fold_time_percentage(
        &mut self,
        node: TimePercentage,
        __ast_path: &mut AstKindPath,
    ) -> TimePercentage {
        <TimePercentage as FoldWithAstPath<Self>>::fold_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Token`.\n\nBy default, this method calls \
             [`Token::fold_children_with_ast_path`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn fold_token(&mut self, node: Token, __ast_path: &mut AstKindPath) -> Token {
        <Token as FoldWithAstPath<Self>>::fold_children_with_ast_path(node, self, __ast_path)
    }
    #[doc = "Visit a node of type `TokenAndSpan`.\n\nBy default, this method calls \
             [`TokenAndSpan::fold_children_with_ast_path`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn fold_token_and_span(
        &mut self,
        node: TokenAndSpan,
        __ast_path: &mut AstKindPath,
    ) -> TokenAndSpan {
        <TokenAndSpan as FoldWithAstPath<Self>>::fold_children_with_ast_path(node, self, __ast_path)
    }
    #[doc = "Visit a node of type `TypeSelector`.\n\nBy default, this method calls \
             [`TypeSelector::fold_children_with_ast_path`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn fold_type_selector(
        &mut self,
        node: TypeSelector,
        __ast_path: &mut AstKindPath,
    ) -> TypeSelector {
        <TypeSelector as FoldWithAstPath<Self>>::fold_children_with_ast_path(node, self, __ast_path)
    }
    #[doc = "Visit a node of type `UnicodeRange`.\n\nBy default, this method calls \
             [`UnicodeRange::fold_children_with_ast_path`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn fold_unicode_range(
        &mut self,
        node: UnicodeRange,
        __ast_path: &mut AstKindPath,
    ) -> UnicodeRange {
        <UnicodeRange as FoldWithAstPath<Self>>::fold_children_with_ast_path(node, self, __ast_path)
    }
    #[doc = "Visit a node of type `UniversalSelector`.\n\nBy default, this method calls \
             [`UniversalSelector::fold_children_with_ast_path`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn fold_universal_selector(
        &mut self,
        node: UniversalSelector,
        __ast_path: &mut AstKindPath,
    ) -> UniversalSelector {
        <UniversalSelector as FoldWithAstPath<Self>>::fold_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `UnknownDimension`.\n\nBy default, this method calls \
             [`UnknownDimension::fold_children_with_ast_path`]. If you want to recurse, you need \
             to call it manually."]
    #[inline]
    fn fold_unknown_dimension(
        &mut self,
        node: UnknownDimension,
        __ast_path: &mut AstKindPath,
    ) -> UnknownDimension {
        <UnknownDimension as FoldWithAstPath<Self>>::fold_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `Url`.\n\nBy default, this method calls \
             [`Url::fold_children_with_ast_path`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn fold_url(&mut self, node: Url, __ast_path: &mut AstKindPath) -> Url {
        <Url as FoldWithAstPath<Self>>::fold_children_with_ast_path(node, self, __ast_path)
    }
    #[doc = "Visit a node of type `UrlKeyValue`.\n\nBy default, this method calls \
             [`UrlKeyValue::fold_children_with_ast_path`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn fold_url_key_value(
        &mut self,
        node: UrlKeyValue,
        __ast_path: &mut AstKindPath,
    ) -> UrlKeyValue {
        <UrlKeyValue as FoldWithAstPath<Self>>::fold_children_with_ast_path(node, self, __ast_path)
    }
    #[doc = "Visit a node of type `UrlModifier`.\n\nBy default, this method calls \
             [`UrlModifier::fold_children_with_ast_path`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn fold_url_modifier(
        &mut self,
        node: UrlModifier,
        __ast_path: &mut AstKindPath,
    ) -> UrlModifier {
        <UrlModifier as FoldWithAstPath<Self>>::fold_children_with_ast_path(node, self, __ast_path)
    }
    #[doc = "Visit a node of type `Vec < UrlModifier >`.\n\nBy default, this method calls [`Vec < \
             UrlModifier >::fold_children_with_ast_path`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn fold_url_modifiers(
        &mut self,
        node: Vec<UrlModifier>,
        __ast_path: &mut AstKindPath,
    ) -> Vec<UrlModifier> {
        <Vec<UrlModifier> as FoldWithAstPath<Self>>::fold_children_with_ast_path(
            node, self, __ast_path,
        )
    }
    #[doc = "Visit a node of type `UrlValue`.\n\nBy default, this method calls \
             [`UrlValue::fold_children_with_ast_path`]. If you want to recurse, you need to call \
             it manually."]
    #[inline]
    fn fold_url_value(&mut self, node: UrlValue, __ast_path: &mut AstKindPath) -> UrlValue {
        <UrlValue as FoldWithAstPath<Self>>::fold_children_with_ast_path(node, self, __ast_path)
    }
    #[doc = "Visit a node of type `UrlValueRaw`.\n\nBy default, this method calls \
             [`UrlValueRaw::fold_children_with_ast_path`]. If you want to recurse, you need to \
             call it manually."]
    #[inline]
    fn fold_url_value_raw(
        &mut self,
        node: UrlValueRaw,
        __ast_path: &mut AstKindPath,
    ) -> UrlValueRaw {
        <UrlValueRaw as FoldWithAstPath<Self>>::fold_children_with_ast_path(node, self, __ast_path)
    }
    #[doc = "Visit a node of type `WqName`.\n\nBy default, this method calls \
             [`WqName::fold_children_with_ast_path`]. If you want to recurse, you need to call it \
             manually."]
    #[inline]
    fn fold_wq_name(&mut self, node: WqName, __ast_path: &mut AstKindPath) -> WqName {
        <WqName as FoldWithAstPath<Self>>::fold_children_with_ast_path(node, self, __ast_path)
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V> FoldAstPath for &mut V
where
    V: ?Sized + FoldAstPath,
{
    #[inline]
    fn fold_absolute_color_base(
        &mut self,
        node: AbsoluteColorBase,
        __ast_path: &mut AstKindPath,
    ) -> AbsoluteColorBase {
        <V as FoldAstPath>::fold_absolute_color_base(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_alpha_value(&mut self, node: AlphaValue, __ast_path: &mut AstKindPath) -> AlphaValue {
        <V as FoldAstPath>::fold_alpha_value(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_an_plus_b(&mut self, node: AnPlusB, __ast_path: &mut AstKindPath) -> AnPlusB {
        <V as FoldAstPath>::fold_an_plus_b(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_an_plus_b_notation(
        &mut self,
        node: AnPlusBNotation,
        __ast_path: &mut AstKindPath,
    ) -> AnPlusBNotation {
        <V as FoldAstPath>::fold_an_plus_b_notation(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_angle(&mut self, node: Angle, __ast_path: &mut AstKindPath) -> Angle {
        <V as FoldAstPath>::fold_angle(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_angle_percentage(
        &mut self,
        node: AnglePercentage,
        __ast_path: &mut AstKindPath,
    ) -> AnglePercentage {
        <V as FoldAstPath>::fold_angle_percentage(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_any_namespace(
        &mut self,
        node: AnyNamespace,
        __ast_path: &mut AstKindPath,
    ) -> AnyNamespace {
        <V as FoldAstPath>::fold_any_namespace(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_at_rule(&mut self, node: AtRule, __ast_path: &mut AstKindPath) -> AtRule {
        <V as FoldAstPath>::fold_at_rule(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_at_rule_name(&mut self, node: AtRuleName, __ast_path: &mut AstKindPath) -> AtRuleName {
        <V as FoldAstPath>::fold_at_rule_name(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_at_rule_prelude(
        &mut self,
        node: AtRulePrelude,
        __ast_path: &mut AstKindPath,
    ) -> AtRulePrelude {
        <V as FoldAstPath>::fold_at_rule_prelude(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_atom(
        &mut self,
        node: swc_atoms::Atom,
        __ast_path: &mut AstKindPath,
    ) -> swc_atoms::Atom {
        <V as FoldAstPath>::fold_atom(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_attribute_selector(
        &mut self,
        node: AttributeSelector,
        __ast_path: &mut AstKindPath,
    ) -> AttributeSelector {
        <V as FoldAstPath>::fold_attribute_selector(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_attribute_selector_matcher(
        &mut self,
        node: AttributeSelectorMatcher,
        __ast_path: &mut AstKindPath,
    ) -> AttributeSelectorMatcher {
        <V as FoldAstPath>::fold_attribute_selector_matcher(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_attribute_selector_matcher_value(
        &mut self,
        node: AttributeSelectorMatcherValue,
        __ast_path: &mut AstKindPath,
    ) -> AttributeSelectorMatcherValue {
        <V as FoldAstPath>::fold_attribute_selector_matcher_value(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_attribute_selector_modifier(
        &mut self,
        node: AttributeSelectorModifier,
        __ast_path: &mut AstKindPath,
    ) -> AttributeSelectorModifier {
        <V as FoldAstPath>::fold_attribute_selector_modifier(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_attribute_selector_value(
        &mut self,
        node: AttributeSelectorValue,
        __ast_path: &mut AstKindPath,
    ) -> AttributeSelectorValue {
        <V as FoldAstPath>::fold_attribute_selector_value(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_bin_op(&mut self, node: BinOp, __ast_path: &mut AstKindPath) -> BinOp {
        <V as FoldAstPath>::fold_bin_op(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_calc_operator(
        &mut self,
        node: CalcOperator,
        __ast_path: &mut AstKindPath,
    ) -> CalcOperator {
        <V as FoldAstPath>::fold_calc_operator(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_calc_operator_type(
        &mut self,
        node: CalcOperatorType,
        __ast_path: &mut AstKindPath,
    ) -> CalcOperatorType {
        <V as FoldAstPath>::fold_calc_operator_type(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_calc_product(
        &mut self,
        node: CalcProduct,
        __ast_path: &mut AstKindPath,
    ) -> CalcProduct {
        <V as FoldAstPath>::fold_calc_product(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_calc_product_or_operator(
        &mut self,
        node: CalcProductOrOperator,
        __ast_path: &mut AstKindPath,
    ) -> CalcProductOrOperator {
        <V as FoldAstPath>::fold_calc_product_or_operator(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_calc_product_or_operators(
        &mut self,
        node: Vec<CalcProductOrOperator>,
        __ast_path: &mut AstKindPath,
    ) -> Vec<CalcProductOrOperator> {
        <V as FoldAstPath>::fold_calc_product_or_operators(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_calc_sum(&mut self, node: CalcSum, __ast_path: &mut AstKindPath) -> CalcSum {
        <V as FoldAstPath>::fold_calc_sum(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_calc_value(&mut self, node: CalcValue, __ast_path: &mut AstKindPath) -> CalcValue {
        <V as FoldAstPath>::fold_calc_value(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_calc_value_or_operator(
        &mut self,
        node: CalcValueOrOperator,
        __ast_path: &mut AstKindPath,
    ) -> CalcValueOrOperator {
        <V as FoldAstPath>::fold_calc_value_or_operator(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_calc_value_or_operators(
        &mut self,
        node: Vec<CalcValueOrOperator>,
        __ast_path: &mut AstKindPath,
    ) -> Vec<CalcValueOrOperator> {
        <V as FoldAstPath>::fold_calc_value_or_operators(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_class_selector(
        &mut self,
        node: ClassSelector,
        __ast_path: &mut AstKindPath,
    ) -> ClassSelector {
        <V as FoldAstPath>::fold_class_selector(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_cmyk_component(
        &mut self,
        node: CmykComponent,
        __ast_path: &mut AstKindPath,
    ) -> CmykComponent {
        <V as FoldAstPath>::fold_cmyk_component(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_color(&mut self, node: Color, __ast_path: &mut AstKindPath) -> Color {
        <V as FoldAstPath>::fold_color(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_color_profile_name(
        &mut self,
        node: ColorProfileName,
        __ast_path: &mut AstKindPath,
    ) -> ColorProfileName {
        <V as FoldAstPath>::fold_color_profile_name(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_combinator(&mut self, node: Combinator, __ast_path: &mut AstKindPath) -> Combinator {
        <V as FoldAstPath>::fold_combinator(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_combinator_value(
        &mut self,
        node: CombinatorValue,
        __ast_path: &mut AstKindPath,
    ) -> CombinatorValue {
        <V as FoldAstPath>::fold_combinator_value(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_complex_selector(
        &mut self,
        node: ComplexSelector,
        __ast_path: &mut AstKindPath,
    ) -> ComplexSelector {
        <V as FoldAstPath>::fold_complex_selector(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_complex_selector_children(
        &mut self,
        node: ComplexSelectorChildren,
        __ast_path: &mut AstKindPath,
    ) -> ComplexSelectorChildren {
        <V as FoldAstPath>::fold_complex_selector_children(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_complex_selector_childrens(
        &mut self,
        node: Vec<ComplexSelectorChildren>,
        __ast_path: &mut AstKindPath,
    ) -> Vec<ComplexSelectorChildren> {
        <V as FoldAstPath>::fold_complex_selector_childrens(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_complex_selectors(
        &mut self,
        node: Vec<ComplexSelector>,
        __ast_path: &mut AstKindPath,
    ) -> Vec<ComplexSelector> {
        <V as FoldAstPath>::fold_complex_selectors(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_component_value(
        &mut self,
        node: ComponentValue,
        __ast_path: &mut AstKindPath,
    ) -> ComponentValue {
        <V as FoldAstPath>::fold_component_value(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_component_values(
        &mut self,
        node: Vec<ComponentValue>,
        __ast_path: &mut AstKindPath,
    ) -> Vec<ComponentValue> {
        <V as FoldAstPath>::fold_component_values(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_compound_selector(
        &mut self,
        node: CompoundSelector,
        __ast_path: &mut AstKindPath,
    ) -> CompoundSelector {
        <V as FoldAstPath>::fold_compound_selector(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_compound_selector_list(
        &mut self,
        node: CompoundSelectorList,
        __ast_path: &mut AstKindPath,
    ) -> CompoundSelectorList {
        <V as FoldAstPath>::fold_compound_selector_list(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_compound_selectors(
        &mut self,
        node: Vec<CompoundSelector>,
        __ast_path: &mut AstKindPath,
    ) -> Vec<CompoundSelector> {
        <V as FoldAstPath>::fold_compound_selectors(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_container_condition(
        &mut self,
        node: ContainerCondition,
        __ast_path: &mut AstKindPath,
    ) -> ContainerCondition {
        <V as FoldAstPath>::fold_container_condition(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_container_name(
        &mut self,
        node: ContainerName,
        __ast_path: &mut AstKindPath,
    ) -> ContainerName {
        <V as FoldAstPath>::fold_container_name(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_container_query(
        &mut self,
        node: ContainerQuery,
        __ast_path: &mut AstKindPath,
    ) -> ContainerQuery {
        <V as FoldAstPath>::fold_container_query(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_container_query_and(
        &mut self,
        node: ContainerQueryAnd,
        __ast_path: &mut AstKindPath,
    ) -> ContainerQueryAnd {
        <V as FoldAstPath>::fold_container_query_and(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_container_query_not(
        &mut self,
        node: ContainerQueryNot,
        __ast_path: &mut AstKindPath,
    ) -> ContainerQueryNot {
        <V as FoldAstPath>::fold_container_query_not(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_container_query_or(
        &mut self,
        node: ContainerQueryOr,
        __ast_path: &mut AstKindPath,
    ) -> ContainerQueryOr {
        <V as FoldAstPath>::fold_container_query_or(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_container_query_type(
        &mut self,
        node: ContainerQueryType,
        __ast_path: &mut AstKindPath,
    ) -> ContainerQueryType {
        <V as FoldAstPath>::fold_container_query_type(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_container_query_types(
        &mut self,
        node: Vec<ContainerQueryType>,
        __ast_path: &mut AstKindPath,
    ) -> Vec<ContainerQueryType> {
        <V as FoldAstPath>::fold_container_query_types(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_custom_highlight_name(
        &mut self,
        node: CustomHighlightName,
        __ast_path: &mut AstKindPath,
    ) -> CustomHighlightName {
        <V as FoldAstPath>::fold_custom_highlight_name(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_custom_ident(
        &mut self,
        node: CustomIdent,
        __ast_path: &mut AstKindPath,
    ) -> CustomIdent {
        <V as FoldAstPath>::fold_custom_ident(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_custom_idents(
        &mut self,
        node: Vec<CustomIdent>,
        __ast_path: &mut AstKindPath,
    ) -> Vec<CustomIdent> {
        <V as FoldAstPath>::fold_custom_idents(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_custom_media_query(
        &mut self,
        node: CustomMediaQuery,
        __ast_path: &mut AstKindPath,
    ) -> CustomMediaQuery {
        <V as FoldAstPath>::fold_custom_media_query(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_custom_media_query_media_type(
        &mut self,
        node: CustomMediaQueryMediaType,
        __ast_path: &mut AstKindPath,
    ) -> CustomMediaQueryMediaType {
        <V as FoldAstPath>::fold_custom_media_query_media_type(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_custom_property_name(
        &mut self,
        node: CustomPropertyName,
        __ast_path: &mut AstKindPath,
    ) -> CustomPropertyName {
        <V as FoldAstPath>::fold_custom_property_name(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_dashed_ident(
        &mut self,
        node: DashedIdent,
        __ast_path: &mut AstKindPath,
    ) -> DashedIdent {
        <V as FoldAstPath>::fold_dashed_ident(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_declaration(&mut self, node: Declaration, __ast_path: &mut AstKindPath) -> Declaration {
        <V as FoldAstPath>::fold_declaration(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_declaration_name(
        &mut self,
        node: DeclarationName,
        __ast_path: &mut AstKindPath,
    ) -> DeclarationName {
        <V as FoldAstPath>::fold_declaration_name(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_declaration_or_at_rule(
        &mut self,
        node: DeclarationOrAtRule,
        __ast_path: &mut AstKindPath,
    ) -> DeclarationOrAtRule {
        <V as FoldAstPath>::fold_declaration_or_at_rule(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_delimiter(&mut self, node: Delimiter, __ast_path: &mut AstKindPath) -> Delimiter {
        <V as FoldAstPath>::fold_delimiter(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_delimiter_value(
        &mut self,
        node: DelimiterValue,
        __ast_path: &mut AstKindPath,
    ) -> DelimiterValue {
        <V as FoldAstPath>::fold_delimiter_value(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_dimension(&mut self, node: Dimension, __ast_path: &mut AstKindPath) -> Dimension {
        <V as FoldAstPath>::fold_dimension(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_dimension_token(
        &mut self,
        node: DimensionToken,
        __ast_path: &mut AstKindPath,
    ) -> DimensionToken {
        <V as FoldAstPath>::fold_dimension_token(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_document_prelude(
        &mut self,
        node: DocumentPrelude,
        __ast_path: &mut AstKindPath,
    ) -> DocumentPrelude {
        <V as FoldAstPath>::fold_document_prelude(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_document_prelude_matching_function(
        &mut self,
        node: DocumentPreludeMatchingFunction,
        __ast_path: &mut AstKindPath,
    ) -> DocumentPreludeMatchingFunction {
        <V as FoldAstPath>::fold_document_prelude_matching_function(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_document_prelude_matching_functions(
        &mut self,
        node: Vec<DocumentPreludeMatchingFunction>,
        __ast_path: &mut AstKindPath,
    ) -> Vec<DocumentPreludeMatchingFunction> {
        <V as FoldAstPath>::fold_document_prelude_matching_functions(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_extension_name(
        &mut self,
        node: ExtensionName,
        __ast_path: &mut AstKindPath,
    ) -> ExtensionName {
        <V as FoldAstPath>::fold_extension_name(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_family_name(&mut self, node: FamilyName, __ast_path: &mut AstKindPath) -> FamilyName {
        <V as FoldAstPath>::fold_family_name(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_family_names(
        &mut self,
        node: Vec<FamilyName>,
        __ast_path: &mut AstKindPath,
    ) -> Vec<FamilyName> {
        <V as FoldAstPath>::fold_family_names(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_flex(&mut self, node: Flex, __ast_path: &mut AstKindPath) -> Flex {
        <V as FoldAstPath>::fold_flex(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_font_feature_values_prelude(
        &mut self,
        node: FontFeatureValuesPrelude,
        __ast_path: &mut AstKindPath,
    ) -> FontFeatureValuesPrelude {
        <V as FoldAstPath>::fold_font_feature_values_prelude(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_forgiving_complex_selector(
        &mut self,
        node: ForgivingComplexSelector,
        __ast_path: &mut AstKindPath,
    ) -> ForgivingComplexSelector {
        <V as FoldAstPath>::fold_forgiving_complex_selector(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_forgiving_complex_selectors(
        &mut self,
        node: Vec<ForgivingComplexSelector>,
        __ast_path: &mut AstKindPath,
    ) -> Vec<ForgivingComplexSelector> {
        <V as FoldAstPath>::fold_forgiving_complex_selectors(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_forgiving_relative_selector(
        &mut self,
        node: ForgivingRelativeSelector,
        __ast_path: &mut AstKindPath,
    ) -> ForgivingRelativeSelector {
        <V as FoldAstPath>::fold_forgiving_relative_selector(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_forgiving_relative_selector_list(
        &mut self,
        node: ForgivingRelativeSelectorList,
        __ast_path: &mut AstKindPath,
    ) -> ForgivingRelativeSelectorList {
        <V as FoldAstPath>::fold_forgiving_relative_selector_list(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_forgiving_relative_selectors(
        &mut self,
        node: Vec<ForgivingRelativeSelector>,
        __ast_path: &mut AstKindPath,
    ) -> Vec<ForgivingRelativeSelector> {
        <V as FoldAstPath>::fold_forgiving_relative_selectors(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_forgiving_selector_list(
        &mut self,
        node: ForgivingSelectorList,
        __ast_path: &mut AstKindPath,
    ) -> ForgivingSelectorList {
        <V as FoldAstPath>::fold_forgiving_selector_list(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_frequency(&mut self, node: Frequency, __ast_path: &mut AstKindPath) -> Frequency {
        <V as FoldAstPath>::fold_frequency(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_frequency_percentage(
        &mut self,
        node: FrequencyPercentage,
        __ast_path: &mut AstKindPath,
    ) -> FrequencyPercentage {
        <V as FoldAstPath>::fold_frequency_percentage(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_function(&mut self, node: Function, __ast_path: &mut AstKindPath) -> Function {
        <V as FoldAstPath>::fold_function(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_function_name(
        &mut self,
        node: FunctionName,
        __ast_path: &mut AstKindPath,
    ) -> FunctionName {
        <V as FoldAstPath>::fold_function_name(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_general_enclosed(
        &mut self,
        node: GeneralEnclosed,
        __ast_path: &mut AstKindPath,
    ) -> GeneralEnclosed {
        <V as FoldAstPath>::fold_general_enclosed(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_hex_color(&mut self, node: HexColor, __ast_path: &mut AstKindPath) -> HexColor {
        <V as FoldAstPath>::fold_hex_color(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_hue(&mut self, node: Hue, __ast_path: &mut AstKindPath) -> Hue {
        <V as FoldAstPath>::fold_hue(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_id_selector(&mut self, node: IdSelector, __ast_path: &mut AstKindPath) -> IdSelector {
        <V as FoldAstPath>::fold_id_selector(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_ident(&mut self, node: Ident, __ast_path: &mut AstKindPath) -> Ident {
        <V as FoldAstPath>::fold_ident(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_idents(&mut self, node: Vec<Ident>, __ast_path: &mut AstKindPath) -> Vec<Ident> {
        <V as FoldAstPath>::fold_idents(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_import_conditions(
        &mut self,
        node: ImportConditions,
        __ast_path: &mut AstKindPath,
    ) -> ImportConditions {
        <V as FoldAstPath>::fold_import_conditions(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_import_href(&mut self, node: ImportHref, __ast_path: &mut AstKindPath) -> ImportHref {
        <V as FoldAstPath>::fold_import_href(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_import_layer_name(
        &mut self,
        node: ImportLayerName,
        __ast_path: &mut AstKindPath,
    ) -> ImportLayerName {
        <V as FoldAstPath>::fold_import_layer_name(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_import_prelude(
        &mut self,
        node: ImportPrelude,
        __ast_path: &mut AstKindPath,
    ) -> ImportPrelude {
        <V as FoldAstPath>::fold_import_prelude(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_important_flag(
        &mut self,
        node: ImportantFlag,
        __ast_path: &mut AstKindPath,
    ) -> ImportantFlag {
        <V as FoldAstPath>::fold_important_flag(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_integer(&mut self, node: Integer, __ast_path: &mut AstKindPath) -> Integer {
        <V as FoldAstPath>::fold_integer(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_keyframe_block(
        &mut self,
        node: KeyframeBlock,
        __ast_path: &mut AstKindPath,
    ) -> KeyframeBlock {
        <V as FoldAstPath>::fold_keyframe_block(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_keyframe_selector(
        &mut self,
        node: KeyframeSelector,
        __ast_path: &mut AstKindPath,
    ) -> KeyframeSelector {
        <V as FoldAstPath>::fold_keyframe_selector(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_keyframe_selectors(
        &mut self,
        node: Vec<KeyframeSelector>,
        __ast_path: &mut AstKindPath,
    ) -> Vec<KeyframeSelector> {
        <V as FoldAstPath>::fold_keyframe_selectors(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_keyframes_name(
        &mut self,
        node: KeyframesName,
        __ast_path: &mut AstKindPath,
    ) -> KeyframesName {
        <V as FoldAstPath>::fold_keyframes_name(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_keyframes_pseudo_function(
        &mut self,
        node: KeyframesPseudoFunction,
        __ast_path: &mut AstKindPath,
    ) -> KeyframesPseudoFunction {
        <V as FoldAstPath>::fold_keyframes_pseudo_function(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_keyframes_pseudo_prefix(
        &mut self,
        node: KeyframesPseudoPrefix,
        __ast_path: &mut AstKindPath,
    ) -> KeyframesPseudoPrefix {
        <V as FoldAstPath>::fold_keyframes_pseudo_prefix(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_layer_name(&mut self, node: LayerName, __ast_path: &mut AstKindPath) -> LayerName {
        <V as FoldAstPath>::fold_layer_name(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_layer_name_list(
        &mut self,
        node: LayerNameList,
        __ast_path: &mut AstKindPath,
    ) -> LayerNameList {
        <V as FoldAstPath>::fold_layer_name_list(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_layer_names(
        &mut self,
        node: Vec<LayerName>,
        __ast_path: &mut AstKindPath,
    ) -> Vec<LayerName> {
        <V as FoldAstPath>::fold_layer_names(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_layer_prelude(
        &mut self,
        node: LayerPrelude,
        __ast_path: &mut AstKindPath,
    ) -> LayerPrelude {
        <V as FoldAstPath>::fold_layer_prelude(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_length(&mut self, node: Length, __ast_path: &mut AstKindPath) -> Length {
        <V as FoldAstPath>::fold_length(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_length_percentage(
        &mut self,
        node: LengthPercentage,
        __ast_path: &mut AstKindPath,
    ) -> LengthPercentage {
        <V as FoldAstPath>::fold_length_percentage(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_list_of_component_values(
        &mut self,
        node: ListOfComponentValues,
        __ast_path: &mut AstKindPath,
    ) -> ListOfComponentValues {
        <V as FoldAstPath>::fold_list_of_component_values(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_media_and(&mut self, node: MediaAnd, __ast_path: &mut AstKindPath) -> MediaAnd {
        <V as FoldAstPath>::fold_media_and(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_media_condition(
        &mut self,
        node: MediaCondition,
        __ast_path: &mut AstKindPath,
    ) -> MediaCondition {
        <V as FoldAstPath>::fold_media_condition(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_media_condition_all_type(
        &mut self,
        node: MediaConditionAllType,
        __ast_path: &mut AstKindPath,
    ) -> MediaConditionAllType {
        <V as FoldAstPath>::fold_media_condition_all_type(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_media_condition_all_types(
        &mut self,
        node: Vec<MediaConditionAllType>,
        __ast_path: &mut AstKindPath,
    ) -> Vec<MediaConditionAllType> {
        <V as FoldAstPath>::fold_media_condition_all_types(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_media_condition_type(
        &mut self,
        node: MediaConditionType,
        __ast_path: &mut AstKindPath,
    ) -> MediaConditionType {
        <V as FoldAstPath>::fold_media_condition_type(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_media_condition_without_or(
        &mut self,
        node: MediaConditionWithoutOr,
        __ast_path: &mut AstKindPath,
    ) -> MediaConditionWithoutOr {
        <V as FoldAstPath>::fold_media_condition_without_or(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_media_condition_without_or_type(
        &mut self,
        node: MediaConditionWithoutOrType,
        __ast_path: &mut AstKindPath,
    ) -> MediaConditionWithoutOrType {
        <V as FoldAstPath>::fold_media_condition_without_or_type(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_media_condition_without_or_types(
        &mut self,
        node: Vec<MediaConditionWithoutOrType>,
        __ast_path: &mut AstKindPath,
    ) -> Vec<MediaConditionWithoutOrType> {
        <V as FoldAstPath>::fold_media_condition_without_or_types(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_media_feature(
        &mut self,
        node: MediaFeature,
        __ast_path: &mut AstKindPath,
    ) -> MediaFeature {
        <V as FoldAstPath>::fold_media_feature(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_media_feature_boolean(
        &mut self,
        node: MediaFeatureBoolean,
        __ast_path: &mut AstKindPath,
    ) -> MediaFeatureBoolean {
        <V as FoldAstPath>::fold_media_feature_boolean(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_media_feature_name(
        &mut self,
        node: MediaFeatureName,
        __ast_path: &mut AstKindPath,
    ) -> MediaFeatureName {
        <V as FoldAstPath>::fold_media_feature_name(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_media_feature_plain(
        &mut self,
        node: MediaFeaturePlain,
        __ast_path: &mut AstKindPath,
    ) -> MediaFeaturePlain {
        <V as FoldAstPath>::fold_media_feature_plain(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_media_feature_range(
        &mut self,
        node: MediaFeatureRange,
        __ast_path: &mut AstKindPath,
    ) -> MediaFeatureRange {
        <V as FoldAstPath>::fold_media_feature_range(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_media_feature_range_comparison(
        &mut self,
        node: MediaFeatureRangeComparison,
        __ast_path: &mut AstKindPath,
    ) -> MediaFeatureRangeComparison {
        <V as FoldAstPath>::fold_media_feature_range_comparison(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_media_feature_range_interval(
        &mut self,
        node: MediaFeatureRangeInterval,
        __ast_path: &mut AstKindPath,
    ) -> MediaFeatureRangeInterval {
        <V as FoldAstPath>::fold_media_feature_range_interval(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_media_feature_value(
        &mut self,
        node: MediaFeatureValue,
        __ast_path: &mut AstKindPath,
    ) -> MediaFeatureValue {
        <V as FoldAstPath>::fold_media_feature_value(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_media_in_parens(
        &mut self,
        node: MediaInParens,
        __ast_path: &mut AstKindPath,
    ) -> MediaInParens {
        <V as FoldAstPath>::fold_media_in_parens(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_media_not(&mut self, node: MediaNot, __ast_path: &mut AstKindPath) -> MediaNot {
        <V as FoldAstPath>::fold_media_not(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_media_or(&mut self, node: MediaOr, __ast_path: &mut AstKindPath) -> MediaOr {
        <V as FoldAstPath>::fold_media_or(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_media_query(&mut self, node: MediaQuery, __ast_path: &mut AstKindPath) -> MediaQuery {
        <V as FoldAstPath>::fold_media_query(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_media_query_list(
        &mut self,
        node: MediaQueryList,
        __ast_path: &mut AstKindPath,
    ) -> MediaQueryList {
        <V as FoldAstPath>::fold_media_query_list(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_media_querys(
        &mut self,
        node: Vec<MediaQuery>,
        __ast_path: &mut AstKindPath,
    ) -> Vec<MediaQuery> {
        <V as FoldAstPath>::fold_media_querys(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_media_type(&mut self, node: MediaType, __ast_path: &mut AstKindPath) -> MediaType {
        <V as FoldAstPath>::fold_media_type(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_named_namespace(
        &mut self,
        node: NamedNamespace,
        __ast_path: &mut AstKindPath,
    ) -> NamedNamespace {
        <V as FoldAstPath>::fold_named_namespace(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_namespace(&mut self, node: Namespace, __ast_path: &mut AstKindPath) -> Namespace {
        <V as FoldAstPath>::fold_namespace(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_namespace_prefix(
        &mut self,
        node: NamespacePrefix,
        __ast_path: &mut AstKindPath,
    ) -> NamespacePrefix {
        <V as FoldAstPath>::fold_namespace_prefix(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_namespace_prelude(
        &mut self,
        node: NamespacePrelude,
        __ast_path: &mut AstKindPath,
    ) -> NamespacePrelude {
        <V as FoldAstPath>::fold_namespace_prelude(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_namespace_prelude_uri(
        &mut self,
        node: NamespacePreludeUri,
        __ast_path: &mut AstKindPath,
    ) -> NamespacePreludeUri {
        <V as FoldAstPath>::fold_namespace_prelude_uri(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_nesting_selector(
        &mut self,
        node: NestingSelector,
        __ast_path: &mut AstKindPath,
    ) -> NestingSelector {
        <V as FoldAstPath>::fold_nesting_selector(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_number(&mut self, node: Number, __ast_path: &mut AstKindPath) -> Number {
        <V as FoldAstPath>::fold_number(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_number_type(&mut self, node: NumberType, __ast_path: &mut AstKindPath) -> NumberType {
        <V as FoldAstPath>::fold_number_type(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_opt_at_rule_prelude(
        &mut self,
        node: Option<Box<AtRulePrelude>>,
        __ast_path: &mut AstKindPath,
    ) -> Option<Box<AtRulePrelude>> {
        <V as FoldAstPath>::fold_opt_at_rule_prelude(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_opt_atom(
        &mut self,
        node: Option<swc_atoms::Atom>,
        __ast_path: &mut AstKindPath,
    ) -> Option<swc_atoms::Atom> {
        <V as FoldAstPath>::fold_opt_atom(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_opt_attribute_selector_matcher(
        &mut self,
        node: Option<AttributeSelectorMatcher>,
        __ast_path: &mut AstKindPath,
    ) -> Option<AttributeSelectorMatcher> {
        <V as FoldAstPath>::fold_opt_attribute_selector_matcher(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_opt_attribute_selector_modifier(
        &mut self,
        node: Option<AttributeSelectorModifier>,
        __ast_path: &mut AstKindPath,
    ) -> Option<AttributeSelectorModifier> {
        <V as FoldAstPath>::fold_opt_attribute_selector_modifier(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_opt_attribute_selector_value(
        &mut self,
        node: Option<AttributeSelectorValue>,
        __ast_path: &mut AstKindPath,
    ) -> Option<AttributeSelectorValue> {
        <V as FoldAstPath>::fold_opt_attribute_selector_value(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_opt_combinator(
        &mut self,
        node: Option<Combinator>,
        __ast_path: &mut AstKindPath,
    ) -> Option<Combinator> {
        <V as FoldAstPath>::fold_opt_combinator(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_opt_container_name(
        &mut self,
        node: Option<ContainerName>,
        __ast_path: &mut AstKindPath,
    ) -> Option<ContainerName> {
        <V as FoldAstPath>::fold_opt_container_name(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_opt_forgiving_selector_list(
        &mut self,
        node: Option<ForgivingSelectorList>,
        __ast_path: &mut AstKindPath,
    ) -> Option<ForgivingSelectorList> {
        <V as FoldAstPath>::fold_opt_forgiving_selector_list(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_opt_function(
        &mut self,
        node: Option<Box<Function>>,
        __ast_path: &mut AstKindPath,
    ) -> Option<Box<Function>> {
        <V as FoldAstPath>::fold_opt_function(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_opt_ident(
        &mut self,
        node: Option<Ident>,
        __ast_path: &mut AstKindPath,
    ) -> Option<Ident> {
        <V as FoldAstPath>::fold_opt_ident(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_opt_import_conditions(
        &mut self,
        node: Option<Box<ImportConditions>>,
        __ast_path: &mut AstKindPath,
    ) -> Option<Box<ImportConditions>> {
        <V as FoldAstPath>::fold_opt_import_conditions(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_opt_import_layer_name(
        &mut self,
        node: Option<Box<ImportLayerName>>,
        __ast_path: &mut AstKindPath,
    ) -> Option<Box<ImportLayerName>> {
        <V as FoldAstPath>::fold_opt_import_layer_name(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_opt_important_flag(
        &mut self,
        node: Option<ImportantFlag>,
        __ast_path: &mut AstKindPath,
    ) -> Option<ImportantFlag> {
        <V as FoldAstPath>::fold_opt_important_flag(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_opt_media_condition_type(
        &mut self,
        node: Option<Box<MediaConditionType>>,
        __ast_path: &mut AstKindPath,
    ) -> Option<Box<MediaConditionType>> {
        <V as FoldAstPath>::fold_opt_media_condition_type(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_opt_media_query_list(
        &mut self,
        node: Option<Box<MediaQueryList>>,
        __ast_path: &mut AstKindPath,
    ) -> Option<Box<MediaQueryList>> {
        <V as FoldAstPath>::fold_opt_media_query_list(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_opt_media_type(
        &mut self,
        node: Option<MediaType>,
        __ast_path: &mut AstKindPath,
    ) -> Option<MediaType> {
        <V as FoldAstPath>::fold_opt_media_type(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_opt_namespace(
        &mut self,
        node: Option<Namespace>,
        __ast_path: &mut AstKindPath,
    ) -> Option<Namespace> {
        <V as FoldAstPath>::fold_opt_namespace(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_opt_namespace_prefix(
        &mut self,
        node: Option<NamespacePrefix>,
        __ast_path: &mut AstKindPath,
    ) -> Option<NamespacePrefix> {
        <V as FoldAstPath>::fold_opt_namespace_prefix(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_opt_nesting_selector(
        &mut self,
        node: Option<NestingSelector>,
        __ast_path: &mut AstKindPath,
    ) -> Option<NestingSelector> {
        <V as FoldAstPath>::fold_opt_nesting_selector(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_opt_number(
        &mut self,
        node: Option<Number>,
        __ast_path: &mut AstKindPath,
    ) -> Option<Number> {
        <V as FoldAstPath>::fold_opt_number(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_opt_page_selector_pseudos(
        &mut self,
        node: Option<Vec<PageSelectorPseudo>>,
        __ast_path: &mut AstKindPath,
    ) -> Option<Vec<PageSelectorPseudo>> {
        <V as FoldAstPath>::fold_opt_page_selector_pseudos(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_opt_page_selector_type(
        &mut self,
        node: Option<PageSelectorType>,
        __ast_path: &mut AstKindPath,
    ) -> Option<PageSelectorType> {
        <V as FoldAstPath>::fold_opt_page_selector_type(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_opt_pseudo_class_selector_childrens(
        &mut self,
        node: Option<Vec<PseudoClassSelectorChildren>>,
        __ast_path: &mut AstKindPath,
    ) -> Option<Vec<PseudoClassSelectorChildren>> {
        <V as FoldAstPath>::fold_opt_pseudo_class_selector_childrens(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_opt_pseudo_element_selector_childrens(
        &mut self,
        node: Option<Vec<PseudoElementSelectorChildren>>,
        __ast_path: &mut AstKindPath,
    ) -> Option<Vec<PseudoElementSelectorChildren>> {
        <V as FoldAstPath>::fold_opt_pseudo_element_selector_childrens(
            &mut **self,
            node,
            __ast_path,
        )
    }

    #[inline]
    fn fold_opt_simple_block(
        &mut self,
        node: Option<SimpleBlock>,
        __ast_path: &mut AstKindPath,
    ) -> Option<SimpleBlock> {
        <V as FoldAstPath>::fold_opt_simple_block(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_opt_type_selector(
        &mut self,
        node: Option<Box<TypeSelector>>,
        __ast_path: &mut AstKindPath,
    ) -> Option<Box<TypeSelector>> {
        <V as FoldAstPath>::fold_opt_type_selector(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_opt_url_modifiers(
        &mut self,
        node: Option<Vec<UrlModifier>>,
        __ast_path: &mut AstKindPath,
    ) -> Option<Vec<UrlModifier>> {
        <V as FoldAstPath>::fold_opt_url_modifiers(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_opt_url_value(
        &mut self,
        node: Option<Box<UrlValue>>,
        __ast_path: &mut AstKindPath,
    ) -> Option<Box<UrlValue>> {
        <V as FoldAstPath>::fold_opt_url_value(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_page_selector(
        &mut self,
        node: PageSelector,
        __ast_path: &mut AstKindPath,
    ) -> PageSelector {
        <V as FoldAstPath>::fold_page_selector(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_page_selector_list(
        &mut self,
        node: PageSelectorList,
        __ast_path: &mut AstKindPath,
    ) -> PageSelectorList {
        <V as FoldAstPath>::fold_page_selector_list(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_page_selector_pseudo(
        &mut self,
        node: PageSelectorPseudo,
        __ast_path: &mut AstKindPath,
    ) -> PageSelectorPseudo {
        <V as FoldAstPath>::fold_page_selector_pseudo(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_page_selector_pseudos(
        &mut self,
        node: Vec<PageSelectorPseudo>,
        __ast_path: &mut AstKindPath,
    ) -> Vec<PageSelectorPseudo> {
        <V as FoldAstPath>::fold_page_selector_pseudos(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_page_selector_type(
        &mut self,
        node: PageSelectorType,
        __ast_path: &mut AstKindPath,
    ) -> PageSelectorType {
        <V as FoldAstPath>::fold_page_selector_type(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_page_selectors(
        &mut self,
        node: Vec<PageSelector>,
        __ast_path: &mut AstKindPath,
    ) -> Vec<PageSelector> {
        <V as FoldAstPath>::fold_page_selectors(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_percentage(&mut self, node: Percentage, __ast_path: &mut AstKindPath) -> Percentage {
        <V as FoldAstPath>::fold_percentage(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_pseudo_class_selector(
        &mut self,
        node: PseudoClassSelector,
        __ast_path: &mut AstKindPath,
    ) -> PseudoClassSelector {
        <V as FoldAstPath>::fold_pseudo_class_selector(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_pseudo_class_selector_children(
        &mut self,
        node: PseudoClassSelectorChildren,
        __ast_path: &mut AstKindPath,
    ) -> PseudoClassSelectorChildren {
        <V as FoldAstPath>::fold_pseudo_class_selector_children(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_pseudo_class_selector_childrens(
        &mut self,
        node: Vec<PseudoClassSelectorChildren>,
        __ast_path: &mut AstKindPath,
    ) -> Vec<PseudoClassSelectorChildren> {
        <V as FoldAstPath>::fold_pseudo_class_selector_childrens(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_pseudo_element_selector(
        &mut self,
        node: PseudoElementSelector,
        __ast_path: &mut AstKindPath,
    ) -> PseudoElementSelector {
        <V as FoldAstPath>::fold_pseudo_element_selector(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_pseudo_element_selector_children(
        &mut self,
        node: PseudoElementSelectorChildren,
        __ast_path: &mut AstKindPath,
    ) -> PseudoElementSelectorChildren {
        <V as FoldAstPath>::fold_pseudo_element_selector_children(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_pseudo_element_selector_childrens(
        &mut self,
        node: Vec<PseudoElementSelectorChildren>,
        __ast_path: &mut AstKindPath,
    ) -> Vec<PseudoElementSelectorChildren> {
        <V as FoldAstPath>::fold_pseudo_element_selector_childrens(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_qualified_rule(
        &mut self,
        node: QualifiedRule,
        __ast_path: &mut AstKindPath,
    ) -> QualifiedRule {
        <V as FoldAstPath>::fold_qualified_rule(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_qualified_rule_prelude(
        &mut self,
        node: QualifiedRulePrelude,
        __ast_path: &mut AstKindPath,
    ) -> QualifiedRulePrelude {
        <V as FoldAstPath>::fold_qualified_rule_prelude(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_query_in_parens(
        &mut self,
        node: QueryInParens,
        __ast_path: &mut AstKindPath,
    ) -> QueryInParens {
        <V as FoldAstPath>::fold_query_in_parens(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_ratio(&mut self, node: Ratio, __ast_path: &mut AstKindPath) -> Ratio {
        <V as FoldAstPath>::fold_ratio(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_relative_selector(
        &mut self,
        node: RelativeSelector,
        __ast_path: &mut AstKindPath,
    ) -> RelativeSelector {
        <V as FoldAstPath>::fold_relative_selector(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_relative_selector_list(
        &mut self,
        node: RelativeSelectorList,
        __ast_path: &mut AstKindPath,
    ) -> RelativeSelectorList {
        <V as FoldAstPath>::fold_relative_selector_list(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_relative_selectors(
        &mut self,
        node: Vec<RelativeSelector>,
        __ast_path: &mut AstKindPath,
    ) -> Vec<RelativeSelector> {
        <V as FoldAstPath>::fold_relative_selectors(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_resolution(&mut self, node: Resolution, __ast_path: &mut AstKindPath) -> Resolution {
        <V as FoldAstPath>::fold_resolution(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_rule(&mut self, node: Rule, __ast_path: &mut AstKindPath) -> Rule {
        <V as FoldAstPath>::fold_rule(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_rules(&mut self, node: Vec<Rule>, __ast_path: &mut AstKindPath) -> Vec<Rule> {
        <V as FoldAstPath>::fold_rules(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_scope_range(&mut self, node: ScopeRange, __ast_path: &mut AstKindPath) -> ScopeRange {
        <V as FoldAstPath>::fold_scope_range(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_selector_list(
        &mut self,
        node: SelectorList,
        __ast_path: &mut AstKindPath,
    ) -> SelectorList {
        <V as FoldAstPath>::fold_selector_list(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_sequence_of_custom_idents(
        &mut self,
        node: SequenceOfCustomIdents,
        __ast_path: &mut AstKindPath,
    ) -> SequenceOfCustomIdents {
        <V as FoldAstPath>::fold_sequence_of_custom_idents(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_simple_block(
        &mut self,
        node: SimpleBlock,
        __ast_path: &mut AstKindPath,
    ) -> SimpleBlock {
        <V as FoldAstPath>::fold_simple_block(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_size_feature(
        &mut self,
        node: SizeFeature,
        __ast_path: &mut AstKindPath,
    ) -> SizeFeature {
        <V as FoldAstPath>::fold_size_feature(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_size_feature_boolean(
        &mut self,
        node: SizeFeatureBoolean,
        __ast_path: &mut AstKindPath,
    ) -> SizeFeatureBoolean {
        <V as FoldAstPath>::fold_size_feature_boolean(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_size_feature_name(
        &mut self,
        node: SizeFeatureName,
        __ast_path: &mut AstKindPath,
    ) -> SizeFeatureName {
        <V as FoldAstPath>::fold_size_feature_name(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_size_feature_plain(
        &mut self,
        node: SizeFeaturePlain,
        __ast_path: &mut AstKindPath,
    ) -> SizeFeaturePlain {
        <V as FoldAstPath>::fold_size_feature_plain(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_size_feature_range(
        &mut self,
        node: SizeFeatureRange,
        __ast_path: &mut AstKindPath,
    ) -> SizeFeatureRange {
        <V as FoldAstPath>::fold_size_feature_range(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_size_feature_range_comparison(
        &mut self,
        node: SizeFeatureRangeComparison,
        __ast_path: &mut AstKindPath,
    ) -> SizeFeatureRangeComparison {
        <V as FoldAstPath>::fold_size_feature_range_comparison(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_size_feature_range_interval(
        &mut self,
        node: SizeFeatureRangeInterval,
        __ast_path: &mut AstKindPath,
    ) -> SizeFeatureRangeInterval {
        <V as FoldAstPath>::fold_size_feature_range_interval(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_size_feature_value(
        &mut self,
        node: SizeFeatureValue,
        __ast_path: &mut AstKindPath,
    ) -> SizeFeatureValue {
        <V as FoldAstPath>::fold_size_feature_value(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_span(
        &mut self,
        node: swc_common::Span,
        __ast_path: &mut AstKindPath,
    ) -> swc_common::Span {
        <V as FoldAstPath>::fold_span(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_str(&mut self, node: Str, __ast_path: &mut AstKindPath) -> Str {
        <V as FoldAstPath>::fold_str(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_style_block(&mut self, node: StyleBlock, __ast_path: &mut AstKindPath) -> StyleBlock {
        <V as FoldAstPath>::fold_style_block(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_stylesheet(&mut self, node: Stylesheet, __ast_path: &mut AstKindPath) -> Stylesheet {
        <V as FoldAstPath>::fold_stylesheet(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_subclass_selector(
        &mut self,
        node: SubclassSelector,
        __ast_path: &mut AstKindPath,
    ) -> SubclassSelector {
        <V as FoldAstPath>::fold_subclass_selector(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_subclass_selectors(
        &mut self,
        node: Vec<SubclassSelector>,
        __ast_path: &mut AstKindPath,
    ) -> Vec<SubclassSelector> {
        <V as FoldAstPath>::fold_subclass_selectors(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_supports_and(
        &mut self,
        node: SupportsAnd,
        __ast_path: &mut AstKindPath,
    ) -> SupportsAnd {
        <V as FoldAstPath>::fold_supports_and(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_supports_condition(
        &mut self,
        node: SupportsCondition,
        __ast_path: &mut AstKindPath,
    ) -> SupportsCondition {
        <V as FoldAstPath>::fold_supports_condition(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_supports_condition_type(
        &mut self,
        node: SupportsConditionType,
        __ast_path: &mut AstKindPath,
    ) -> SupportsConditionType {
        <V as FoldAstPath>::fold_supports_condition_type(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_supports_condition_types(
        &mut self,
        node: Vec<SupportsConditionType>,
        __ast_path: &mut AstKindPath,
    ) -> Vec<SupportsConditionType> {
        <V as FoldAstPath>::fold_supports_condition_types(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_supports_feature(
        &mut self,
        node: SupportsFeature,
        __ast_path: &mut AstKindPath,
    ) -> SupportsFeature {
        <V as FoldAstPath>::fold_supports_feature(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_supports_in_parens(
        &mut self,
        node: SupportsInParens,
        __ast_path: &mut AstKindPath,
    ) -> SupportsInParens {
        <V as FoldAstPath>::fold_supports_in_parens(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_supports_not(
        &mut self,
        node: SupportsNot,
        __ast_path: &mut AstKindPath,
    ) -> SupportsNot {
        <V as FoldAstPath>::fold_supports_not(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_supports_or(&mut self, node: SupportsOr, __ast_path: &mut AstKindPath) -> SupportsOr {
        <V as FoldAstPath>::fold_supports_or(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_tag_name_selector(
        &mut self,
        node: TagNameSelector,
        __ast_path: &mut AstKindPath,
    ) -> TagNameSelector {
        <V as FoldAstPath>::fold_tag_name_selector(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_time(&mut self, node: Time, __ast_path: &mut AstKindPath) -> Time {
        <V as FoldAstPath>::fold_time(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_time_percentage(
        &mut self,
        node: TimePercentage,
        __ast_path: &mut AstKindPath,
    ) -> TimePercentage {
        <V as FoldAstPath>::fold_time_percentage(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_token(&mut self, node: Token, __ast_path: &mut AstKindPath) -> Token {
        <V as FoldAstPath>::fold_token(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_token_and_span(
        &mut self,
        node: TokenAndSpan,
        __ast_path: &mut AstKindPath,
    ) -> TokenAndSpan {
        <V as FoldAstPath>::fold_token_and_span(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_type_selector(
        &mut self,
        node: TypeSelector,
        __ast_path: &mut AstKindPath,
    ) -> TypeSelector {
        <V as FoldAstPath>::fold_type_selector(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_unicode_range(
        &mut self,
        node: UnicodeRange,
        __ast_path: &mut AstKindPath,
    ) -> UnicodeRange {
        <V as FoldAstPath>::fold_unicode_range(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_universal_selector(
        &mut self,
        node: UniversalSelector,
        __ast_path: &mut AstKindPath,
    ) -> UniversalSelector {
        <V as FoldAstPath>::fold_universal_selector(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_unknown_dimension(
        &mut self,
        node: UnknownDimension,
        __ast_path: &mut AstKindPath,
    ) -> UnknownDimension {
        <V as FoldAstPath>::fold_unknown_dimension(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_url(&mut self, node: Url, __ast_path: &mut AstKindPath) -> Url {
        <V as FoldAstPath>::fold_url(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_url_key_value(
        &mut self,
        node: UrlKeyValue,
        __ast_path: &mut AstKindPath,
    ) -> UrlKeyValue {
        <V as FoldAstPath>::fold_url_key_value(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_url_modifier(
        &mut self,
        node: UrlModifier,
        __ast_path: &mut AstKindPath,
    ) -> UrlModifier {
        <V as FoldAstPath>::fold_url_modifier(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_url_modifiers(
        &mut self,
        node: Vec<UrlModifier>,
        __ast_path: &mut AstKindPath,
    ) -> Vec<UrlModifier> {
        <V as FoldAstPath>::fold_url_modifiers(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_url_value(&mut self, node: UrlValue, __ast_path: &mut AstKindPath) -> UrlValue {
        <V as FoldAstPath>::fold_url_value(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_url_value_raw(
        &mut self,
        node: UrlValueRaw,
        __ast_path: &mut AstKindPath,
    ) -> UrlValueRaw {
        <V as FoldAstPath>::fold_url_value_raw(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_wq_name(&mut self, node: WqName, __ast_path: &mut AstKindPath) -> WqName {
        <V as FoldAstPath>::fold_wq_name(&mut **self, node, __ast_path)
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V> FoldAstPath for Box<V>
where
    V: ?Sized + FoldAstPath,
{
    #[inline]
    fn fold_absolute_color_base(
        &mut self,
        node: AbsoluteColorBase,
        __ast_path: &mut AstKindPath,
    ) -> AbsoluteColorBase {
        <V as FoldAstPath>::fold_absolute_color_base(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_alpha_value(&mut self, node: AlphaValue, __ast_path: &mut AstKindPath) -> AlphaValue {
        <V as FoldAstPath>::fold_alpha_value(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_an_plus_b(&mut self, node: AnPlusB, __ast_path: &mut AstKindPath) -> AnPlusB {
        <V as FoldAstPath>::fold_an_plus_b(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_an_plus_b_notation(
        &mut self,
        node: AnPlusBNotation,
        __ast_path: &mut AstKindPath,
    ) -> AnPlusBNotation {
        <V as FoldAstPath>::fold_an_plus_b_notation(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_angle(&mut self, node: Angle, __ast_path: &mut AstKindPath) -> Angle {
        <V as FoldAstPath>::fold_angle(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_angle_percentage(
        &mut self,
        node: AnglePercentage,
        __ast_path: &mut AstKindPath,
    ) -> AnglePercentage {
        <V as FoldAstPath>::fold_angle_percentage(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_any_namespace(
        &mut self,
        node: AnyNamespace,
        __ast_path: &mut AstKindPath,
    ) -> AnyNamespace {
        <V as FoldAstPath>::fold_any_namespace(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_at_rule(&mut self, node: AtRule, __ast_path: &mut AstKindPath) -> AtRule {
        <V as FoldAstPath>::fold_at_rule(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_at_rule_name(&mut self, node: AtRuleName, __ast_path: &mut AstKindPath) -> AtRuleName {
        <V as FoldAstPath>::fold_at_rule_name(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_at_rule_prelude(
        &mut self,
        node: AtRulePrelude,
        __ast_path: &mut AstKindPath,
    ) -> AtRulePrelude {
        <V as FoldAstPath>::fold_at_rule_prelude(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_atom(
        &mut self,
        node: swc_atoms::Atom,
        __ast_path: &mut AstKindPath,
    ) -> swc_atoms::Atom {
        <V as FoldAstPath>::fold_atom(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_attribute_selector(
        &mut self,
        node: AttributeSelector,
        __ast_path: &mut AstKindPath,
    ) -> AttributeSelector {
        <V as FoldAstPath>::fold_attribute_selector(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_attribute_selector_matcher(
        &mut self,
        node: AttributeSelectorMatcher,
        __ast_path: &mut AstKindPath,
    ) -> AttributeSelectorMatcher {
        <V as FoldAstPath>::fold_attribute_selector_matcher(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_attribute_selector_matcher_value(
        &mut self,
        node: AttributeSelectorMatcherValue,
        __ast_path: &mut AstKindPath,
    ) -> AttributeSelectorMatcherValue {
        <V as FoldAstPath>::fold_attribute_selector_matcher_value(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_attribute_selector_modifier(
        &mut self,
        node: AttributeSelectorModifier,
        __ast_path: &mut AstKindPath,
    ) -> AttributeSelectorModifier {
        <V as FoldAstPath>::fold_attribute_selector_modifier(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_attribute_selector_value(
        &mut self,
        node: AttributeSelectorValue,
        __ast_path: &mut AstKindPath,
    ) -> AttributeSelectorValue {
        <V as FoldAstPath>::fold_attribute_selector_value(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_bin_op(&mut self, node: BinOp, __ast_path: &mut AstKindPath) -> BinOp {
        <V as FoldAstPath>::fold_bin_op(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_calc_operator(
        &mut self,
        node: CalcOperator,
        __ast_path: &mut AstKindPath,
    ) -> CalcOperator {
        <V as FoldAstPath>::fold_calc_operator(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_calc_operator_type(
        &mut self,
        node: CalcOperatorType,
        __ast_path: &mut AstKindPath,
    ) -> CalcOperatorType {
        <V as FoldAstPath>::fold_calc_operator_type(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_calc_product(
        &mut self,
        node: CalcProduct,
        __ast_path: &mut AstKindPath,
    ) -> CalcProduct {
        <V as FoldAstPath>::fold_calc_product(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_calc_product_or_operator(
        &mut self,
        node: CalcProductOrOperator,
        __ast_path: &mut AstKindPath,
    ) -> CalcProductOrOperator {
        <V as FoldAstPath>::fold_calc_product_or_operator(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_calc_product_or_operators(
        &mut self,
        node: Vec<CalcProductOrOperator>,
        __ast_path: &mut AstKindPath,
    ) -> Vec<CalcProductOrOperator> {
        <V as FoldAstPath>::fold_calc_product_or_operators(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_calc_sum(&mut self, node: CalcSum, __ast_path: &mut AstKindPath) -> CalcSum {
        <V as FoldAstPath>::fold_calc_sum(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_calc_value(&mut self, node: CalcValue, __ast_path: &mut AstKindPath) -> CalcValue {
        <V as FoldAstPath>::fold_calc_value(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_calc_value_or_operator(
        &mut self,
        node: CalcValueOrOperator,
        __ast_path: &mut AstKindPath,
    ) -> CalcValueOrOperator {
        <V as FoldAstPath>::fold_calc_value_or_operator(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_calc_value_or_operators(
        &mut self,
        node: Vec<CalcValueOrOperator>,
        __ast_path: &mut AstKindPath,
    ) -> Vec<CalcValueOrOperator> {
        <V as FoldAstPath>::fold_calc_value_or_operators(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_class_selector(
        &mut self,
        node: ClassSelector,
        __ast_path: &mut AstKindPath,
    ) -> ClassSelector {
        <V as FoldAstPath>::fold_class_selector(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_cmyk_component(
        &mut self,
        node: CmykComponent,
        __ast_path: &mut AstKindPath,
    ) -> CmykComponent {
        <V as FoldAstPath>::fold_cmyk_component(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_color(&mut self, node: Color, __ast_path: &mut AstKindPath) -> Color {
        <V as FoldAstPath>::fold_color(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_color_profile_name(
        &mut self,
        node: ColorProfileName,
        __ast_path: &mut AstKindPath,
    ) -> ColorProfileName {
        <V as FoldAstPath>::fold_color_profile_name(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_combinator(&mut self, node: Combinator, __ast_path: &mut AstKindPath) -> Combinator {
        <V as FoldAstPath>::fold_combinator(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_combinator_value(
        &mut self,
        node: CombinatorValue,
        __ast_path: &mut AstKindPath,
    ) -> CombinatorValue {
        <V as FoldAstPath>::fold_combinator_value(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_complex_selector(
        &mut self,
        node: ComplexSelector,
        __ast_path: &mut AstKindPath,
    ) -> ComplexSelector {
        <V as FoldAstPath>::fold_complex_selector(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_complex_selector_children(
        &mut self,
        node: ComplexSelectorChildren,
        __ast_path: &mut AstKindPath,
    ) -> ComplexSelectorChildren {
        <V as FoldAstPath>::fold_complex_selector_children(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_complex_selector_childrens(
        &mut self,
        node: Vec<ComplexSelectorChildren>,
        __ast_path: &mut AstKindPath,
    ) -> Vec<ComplexSelectorChildren> {
        <V as FoldAstPath>::fold_complex_selector_childrens(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_complex_selectors(
        &mut self,
        node: Vec<ComplexSelector>,
        __ast_path: &mut AstKindPath,
    ) -> Vec<ComplexSelector> {
        <V as FoldAstPath>::fold_complex_selectors(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_component_value(
        &mut self,
        node: ComponentValue,
        __ast_path: &mut AstKindPath,
    ) -> ComponentValue {
        <V as FoldAstPath>::fold_component_value(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_component_values(
        &mut self,
        node: Vec<ComponentValue>,
        __ast_path: &mut AstKindPath,
    ) -> Vec<ComponentValue> {
        <V as FoldAstPath>::fold_component_values(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_compound_selector(
        &mut self,
        node: CompoundSelector,
        __ast_path: &mut AstKindPath,
    ) -> CompoundSelector {
        <V as FoldAstPath>::fold_compound_selector(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_compound_selector_list(
        &mut self,
        node: CompoundSelectorList,
        __ast_path: &mut AstKindPath,
    ) -> CompoundSelectorList {
        <V as FoldAstPath>::fold_compound_selector_list(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_compound_selectors(
        &mut self,
        node: Vec<CompoundSelector>,
        __ast_path: &mut AstKindPath,
    ) -> Vec<CompoundSelector> {
        <V as FoldAstPath>::fold_compound_selectors(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_container_condition(
        &mut self,
        node: ContainerCondition,
        __ast_path: &mut AstKindPath,
    ) -> ContainerCondition {
        <V as FoldAstPath>::fold_container_condition(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_container_name(
        &mut self,
        node: ContainerName,
        __ast_path: &mut AstKindPath,
    ) -> ContainerName {
        <V as FoldAstPath>::fold_container_name(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_container_query(
        &mut self,
        node: ContainerQuery,
        __ast_path: &mut AstKindPath,
    ) -> ContainerQuery {
        <V as FoldAstPath>::fold_container_query(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_container_query_and(
        &mut self,
        node: ContainerQueryAnd,
        __ast_path: &mut AstKindPath,
    ) -> ContainerQueryAnd {
        <V as FoldAstPath>::fold_container_query_and(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_container_query_not(
        &mut self,
        node: ContainerQueryNot,
        __ast_path: &mut AstKindPath,
    ) -> ContainerQueryNot {
        <V as FoldAstPath>::fold_container_query_not(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_container_query_or(
        &mut self,
        node: ContainerQueryOr,
        __ast_path: &mut AstKindPath,
    ) -> ContainerQueryOr {
        <V as FoldAstPath>::fold_container_query_or(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_container_query_type(
        &mut self,
        node: ContainerQueryType,
        __ast_path: &mut AstKindPath,
    ) -> ContainerQueryType {
        <V as FoldAstPath>::fold_container_query_type(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_container_query_types(
        &mut self,
        node: Vec<ContainerQueryType>,
        __ast_path: &mut AstKindPath,
    ) -> Vec<ContainerQueryType> {
        <V as FoldAstPath>::fold_container_query_types(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_custom_highlight_name(
        &mut self,
        node: CustomHighlightName,
        __ast_path: &mut AstKindPath,
    ) -> CustomHighlightName {
        <V as FoldAstPath>::fold_custom_highlight_name(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_custom_ident(
        &mut self,
        node: CustomIdent,
        __ast_path: &mut AstKindPath,
    ) -> CustomIdent {
        <V as FoldAstPath>::fold_custom_ident(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_custom_idents(
        &mut self,
        node: Vec<CustomIdent>,
        __ast_path: &mut AstKindPath,
    ) -> Vec<CustomIdent> {
        <V as FoldAstPath>::fold_custom_idents(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_custom_media_query(
        &mut self,
        node: CustomMediaQuery,
        __ast_path: &mut AstKindPath,
    ) -> CustomMediaQuery {
        <V as FoldAstPath>::fold_custom_media_query(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_custom_media_query_media_type(
        &mut self,
        node: CustomMediaQueryMediaType,
        __ast_path: &mut AstKindPath,
    ) -> CustomMediaQueryMediaType {
        <V as FoldAstPath>::fold_custom_media_query_media_type(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_custom_property_name(
        &mut self,
        node: CustomPropertyName,
        __ast_path: &mut AstKindPath,
    ) -> CustomPropertyName {
        <V as FoldAstPath>::fold_custom_property_name(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_dashed_ident(
        &mut self,
        node: DashedIdent,
        __ast_path: &mut AstKindPath,
    ) -> DashedIdent {
        <V as FoldAstPath>::fold_dashed_ident(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_declaration(&mut self, node: Declaration, __ast_path: &mut AstKindPath) -> Declaration {
        <V as FoldAstPath>::fold_declaration(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_declaration_name(
        &mut self,
        node: DeclarationName,
        __ast_path: &mut AstKindPath,
    ) -> DeclarationName {
        <V as FoldAstPath>::fold_declaration_name(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_declaration_or_at_rule(
        &mut self,
        node: DeclarationOrAtRule,
        __ast_path: &mut AstKindPath,
    ) -> DeclarationOrAtRule {
        <V as FoldAstPath>::fold_declaration_or_at_rule(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_delimiter(&mut self, node: Delimiter, __ast_path: &mut AstKindPath) -> Delimiter {
        <V as FoldAstPath>::fold_delimiter(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_delimiter_value(
        &mut self,
        node: DelimiterValue,
        __ast_path: &mut AstKindPath,
    ) -> DelimiterValue {
        <V as FoldAstPath>::fold_delimiter_value(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_dimension(&mut self, node: Dimension, __ast_path: &mut AstKindPath) -> Dimension {
        <V as FoldAstPath>::fold_dimension(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_dimension_token(
        &mut self,
        node: DimensionToken,
        __ast_path: &mut AstKindPath,
    ) -> DimensionToken {
        <V as FoldAstPath>::fold_dimension_token(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_document_prelude(
        &mut self,
        node: DocumentPrelude,
        __ast_path: &mut AstKindPath,
    ) -> DocumentPrelude {
        <V as FoldAstPath>::fold_document_prelude(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_document_prelude_matching_function(
        &mut self,
        node: DocumentPreludeMatchingFunction,
        __ast_path: &mut AstKindPath,
    ) -> DocumentPreludeMatchingFunction {
        <V as FoldAstPath>::fold_document_prelude_matching_function(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_document_prelude_matching_functions(
        &mut self,
        node: Vec<DocumentPreludeMatchingFunction>,
        __ast_path: &mut AstKindPath,
    ) -> Vec<DocumentPreludeMatchingFunction> {
        <V as FoldAstPath>::fold_document_prelude_matching_functions(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_extension_name(
        &mut self,
        node: ExtensionName,
        __ast_path: &mut AstKindPath,
    ) -> ExtensionName {
        <V as FoldAstPath>::fold_extension_name(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_family_name(&mut self, node: FamilyName, __ast_path: &mut AstKindPath) -> FamilyName {
        <V as FoldAstPath>::fold_family_name(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_family_names(
        &mut self,
        node: Vec<FamilyName>,
        __ast_path: &mut AstKindPath,
    ) -> Vec<FamilyName> {
        <V as FoldAstPath>::fold_family_names(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_flex(&mut self, node: Flex, __ast_path: &mut AstKindPath) -> Flex {
        <V as FoldAstPath>::fold_flex(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_font_feature_values_prelude(
        &mut self,
        node: FontFeatureValuesPrelude,
        __ast_path: &mut AstKindPath,
    ) -> FontFeatureValuesPrelude {
        <V as FoldAstPath>::fold_font_feature_values_prelude(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_forgiving_complex_selector(
        &mut self,
        node: ForgivingComplexSelector,
        __ast_path: &mut AstKindPath,
    ) -> ForgivingComplexSelector {
        <V as FoldAstPath>::fold_forgiving_complex_selector(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_forgiving_complex_selectors(
        &mut self,
        node: Vec<ForgivingComplexSelector>,
        __ast_path: &mut AstKindPath,
    ) -> Vec<ForgivingComplexSelector> {
        <V as FoldAstPath>::fold_forgiving_complex_selectors(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_forgiving_relative_selector(
        &mut self,
        node: ForgivingRelativeSelector,
        __ast_path: &mut AstKindPath,
    ) -> ForgivingRelativeSelector {
        <V as FoldAstPath>::fold_forgiving_relative_selector(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_forgiving_relative_selector_list(
        &mut self,
        node: ForgivingRelativeSelectorList,
        __ast_path: &mut AstKindPath,
    ) -> ForgivingRelativeSelectorList {
        <V as FoldAstPath>::fold_forgiving_relative_selector_list(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_forgiving_relative_selectors(
        &mut self,
        node: Vec<ForgivingRelativeSelector>,
        __ast_path: &mut AstKindPath,
    ) -> Vec<ForgivingRelativeSelector> {
        <V as FoldAstPath>::fold_forgiving_relative_selectors(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_forgiving_selector_list(
        &mut self,
        node: ForgivingSelectorList,
        __ast_path: &mut AstKindPath,
    ) -> ForgivingSelectorList {
        <V as FoldAstPath>::fold_forgiving_selector_list(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_frequency(&mut self, node: Frequency, __ast_path: &mut AstKindPath) -> Frequency {
        <V as FoldAstPath>::fold_frequency(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_frequency_percentage(
        &mut self,
        node: FrequencyPercentage,
        __ast_path: &mut AstKindPath,
    ) -> FrequencyPercentage {
        <V as FoldAstPath>::fold_frequency_percentage(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_function(&mut self, node: Function, __ast_path: &mut AstKindPath) -> Function {
        <V as FoldAstPath>::fold_function(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_function_name(
        &mut self,
        node: FunctionName,
        __ast_path: &mut AstKindPath,
    ) -> FunctionName {
        <V as FoldAstPath>::fold_function_name(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_general_enclosed(
        &mut self,
        node: GeneralEnclosed,
        __ast_path: &mut AstKindPath,
    ) -> GeneralEnclosed {
        <V as FoldAstPath>::fold_general_enclosed(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_hex_color(&mut self, node: HexColor, __ast_path: &mut AstKindPath) -> HexColor {
        <V as FoldAstPath>::fold_hex_color(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_hue(&mut self, node: Hue, __ast_path: &mut AstKindPath) -> Hue {
        <V as FoldAstPath>::fold_hue(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_id_selector(&mut self, node: IdSelector, __ast_path: &mut AstKindPath) -> IdSelector {
        <V as FoldAstPath>::fold_id_selector(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_ident(&mut self, node: Ident, __ast_path: &mut AstKindPath) -> Ident {
        <V as FoldAstPath>::fold_ident(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_idents(&mut self, node: Vec<Ident>, __ast_path: &mut AstKindPath) -> Vec<Ident> {
        <V as FoldAstPath>::fold_idents(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_import_conditions(
        &mut self,
        node: ImportConditions,
        __ast_path: &mut AstKindPath,
    ) -> ImportConditions {
        <V as FoldAstPath>::fold_import_conditions(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_import_href(&mut self, node: ImportHref, __ast_path: &mut AstKindPath) -> ImportHref {
        <V as FoldAstPath>::fold_import_href(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_import_layer_name(
        &mut self,
        node: ImportLayerName,
        __ast_path: &mut AstKindPath,
    ) -> ImportLayerName {
        <V as FoldAstPath>::fold_import_layer_name(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_import_prelude(
        &mut self,
        node: ImportPrelude,
        __ast_path: &mut AstKindPath,
    ) -> ImportPrelude {
        <V as FoldAstPath>::fold_import_prelude(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_important_flag(
        &mut self,
        node: ImportantFlag,
        __ast_path: &mut AstKindPath,
    ) -> ImportantFlag {
        <V as FoldAstPath>::fold_important_flag(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_integer(&mut self, node: Integer, __ast_path: &mut AstKindPath) -> Integer {
        <V as FoldAstPath>::fold_integer(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_keyframe_block(
        &mut self,
        node: KeyframeBlock,
        __ast_path: &mut AstKindPath,
    ) -> KeyframeBlock {
        <V as FoldAstPath>::fold_keyframe_block(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_keyframe_selector(
        &mut self,
        node: KeyframeSelector,
        __ast_path: &mut AstKindPath,
    ) -> KeyframeSelector {
        <V as FoldAstPath>::fold_keyframe_selector(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_keyframe_selectors(
        &mut self,
        node: Vec<KeyframeSelector>,
        __ast_path: &mut AstKindPath,
    ) -> Vec<KeyframeSelector> {
        <V as FoldAstPath>::fold_keyframe_selectors(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_keyframes_name(
        &mut self,
        node: KeyframesName,
        __ast_path: &mut AstKindPath,
    ) -> KeyframesName {
        <V as FoldAstPath>::fold_keyframes_name(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_keyframes_pseudo_function(
        &mut self,
        node: KeyframesPseudoFunction,
        __ast_path: &mut AstKindPath,
    ) -> KeyframesPseudoFunction {
        <V as FoldAstPath>::fold_keyframes_pseudo_function(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_keyframes_pseudo_prefix(
        &mut self,
        node: KeyframesPseudoPrefix,
        __ast_path: &mut AstKindPath,
    ) -> KeyframesPseudoPrefix {
        <V as FoldAstPath>::fold_keyframes_pseudo_prefix(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_layer_name(&mut self, node: LayerName, __ast_path: &mut AstKindPath) -> LayerName {
        <V as FoldAstPath>::fold_layer_name(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_layer_name_list(
        &mut self,
        node: LayerNameList,
        __ast_path: &mut AstKindPath,
    ) -> LayerNameList {
        <V as FoldAstPath>::fold_layer_name_list(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_layer_names(
        &mut self,
        node: Vec<LayerName>,
        __ast_path: &mut AstKindPath,
    ) -> Vec<LayerName> {
        <V as FoldAstPath>::fold_layer_names(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_layer_prelude(
        &mut self,
        node: LayerPrelude,
        __ast_path: &mut AstKindPath,
    ) -> LayerPrelude {
        <V as FoldAstPath>::fold_layer_prelude(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_length(&mut self, node: Length, __ast_path: &mut AstKindPath) -> Length {
        <V as FoldAstPath>::fold_length(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_length_percentage(
        &mut self,
        node: LengthPercentage,
        __ast_path: &mut AstKindPath,
    ) -> LengthPercentage {
        <V as FoldAstPath>::fold_length_percentage(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_list_of_component_values(
        &mut self,
        node: ListOfComponentValues,
        __ast_path: &mut AstKindPath,
    ) -> ListOfComponentValues {
        <V as FoldAstPath>::fold_list_of_component_values(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_media_and(&mut self, node: MediaAnd, __ast_path: &mut AstKindPath) -> MediaAnd {
        <V as FoldAstPath>::fold_media_and(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_media_condition(
        &mut self,
        node: MediaCondition,
        __ast_path: &mut AstKindPath,
    ) -> MediaCondition {
        <V as FoldAstPath>::fold_media_condition(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_media_condition_all_type(
        &mut self,
        node: MediaConditionAllType,
        __ast_path: &mut AstKindPath,
    ) -> MediaConditionAllType {
        <V as FoldAstPath>::fold_media_condition_all_type(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_media_condition_all_types(
        &mut self,
        node: Vec<MediaConditionAllType>,
        __ast_path: &mut AstKindPath,
    ) -> Vec<MediaConditionAllType> {
        <V as FoldAstPath>::fold_media_condition_all_types(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_media_condition_type(
        &mut self,
        node: MediaConditionType,
        __ast_path: &mut AstKindPath,
    ) -> MediaConditionType {
        <V as FoldAstPath>::fold_media_condition_type(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_media_condition_without_or(
        &mut self,
        node: MediaConditionWithoutOr,
        __ast_path: &mut AstKindPath,
    ) -> MediaConditionWithoutOr {
        <V as FoldAstPath>::fold_media_condition_without_or(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_media_condition_without_or_type(
        &mut self,
        node: MediaConditionWithoutOrType,
        __ast_path: &mut AstKindPath,
    ) -> MediaConditionWithoutOrType {
        <V as FoldAstPath>::fold_media_condition_without_or_type(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_media_condition_without_or_types(
        &mut self,
        node: Vec<MediaConditionWithoutOrType>,
        __ast_path: &mut AstKindPath,
    ) -> Vec<MediaConditionWithoutOrType> {
        <V as FoldAstPath>::fold_media_condition_without_or_types(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_media_feature(
        &mut self,
        node: MediaFeature,
        __ast_path: &mut AstKindPath,
    ) -> MediaFeature {
        <V as FoldAstPath>::fold_media_feature(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_media_feature_boolean(
        &mut self,
        node: MediaFeatureBoolean,
        __ast_path: &mut AstKindPath,
    ) -> MediaFeatureBoolean {
        <V as FoldAstPath>::fold_media_feature_boolean(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_media_feature_name(
        &mut self,
        node: MediaFeatureName,
        __ast_path: &mut AstKindPath,
    ) -> MediaFeatureName {
        <V as FoldAstPath>::fold_media_feature_name(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_media_feature_plain(
        &mut self,
        node: MediaFeaturePlain,
        __ast_path: &mut AstKindPath,
    ) -> MediaFeaturePlain {
        <V as FoldAstPath>::fold_media_feature_plain(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_media_feature_range(
        &mut self,
        node: MediaFeatureRange,
        __ast_path: &mut AstKindPath,
    ) -> MediaFeatureRange {
        <V as FoldAstPath>::fold_media_feature_range(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_media_feature_range_comparison(
        &mut self,
        node: MediaFeatureRangeComparison,
        __ast_path: &mut AstKindPath,
    ) -> MediaFeatureRangeComparison {
        <V as FoldAstPath>::fold_media_feature_range_comparison(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_media_feature_range_interval(
        &mut self,
        node: MediaFeatureRangeInterval,
        __ast_path: &mut AstKindPath,
    ) -> MediaFeatureRangeInterval {
        <V as FoldAstPath>::fold_media_feature_range_interval(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_media_feature_value(
        &mut self,
        node: MediaFeatureValue,
        __ast_path: &mut AstKindPath,
    ) -> MediaFeatureValue {
        <V as FoldAstPath>::fold_media_feature_value(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_media_in_parens(
        &mut self,
        node: MediaInParens,
        __ast_path: &mut AstKindPath,
    ) -> MediaInParens {
        <V as FoldAstPath>::fold_media_in_parens(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_media_not(&mut self, node: MediaNot, __ast_path: &mut AstKindPath) -> MediaNot {
        <V as FoldAstPath>::fold_media_not(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_media_or(&mut self, node: MediaOr, __ast_path: &mut AstKindPath) -> MediaOr {
        <V as FoldAstPath>::fold_media_or(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_media_query(&mut self, node: MediaQuery, __ast_path: &mut AstKindPath) -> MediaQuery {
        <V as FoldAstPath>::fold_media_query(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_media_query_list(
        &mut self,
        node: MediaQueryList,
        __ast_path: &mut AstKindPath,
    ) -> MediaQueryList {
        <V as FoldAstPath>::fold_media_query_list(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_media_querys(
        &mut self,
        node: Vec<MediaQuery>,
        __ast_path: &mut AstKindPath,
    ) -> Vec<MediaQuery> {
        <V as FoldAstPath>::fold_media_querys(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_media_type(&mut self, node: MediaType, __ast_path: &mut AstKindPath) -> MediaType {
        <V as FoldAstPath>::fold_media_type(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_named_namespace(
        &mut self,
        node: NamedNamespace,
        __ast_path: &mut AstKindPath,
    ) -> NamedNamespace {
        <V as FoldAstPath>::fold_named_namespace(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_namespace(&mut self, node: Namespace, __ast_path: &mut AstKindPath) -> Namespace {
        <V as FoldAstPath>::fold_namespace(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_namespace_prefix(
        &mut self,
        node: NamespacePrefix,
        __ast_path: &mut AstKindPath,
    ) -> NamespacePrefix {
        <V as FoldAstPath>::fold_namespace_prefix(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_namespace_prelude(
        &mut self,
        node: NamespacePrelude,
        __ast_path: &mut AstKindPath,
    ) -> NamespacePrelude {
        <V as FoldAstPath>::fold_namespace_prelude(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_namespace_prelude_uri(
        &mut self,
        node: NamespacePreludeUri,
        __ast_path: &mut AstKindPath,
    ) -> NamespacePreludeUri {
        <V as FoldAstPath>::fold_namespace_prelude_uri(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_nesting_selector(
        &mut self,
        node: NestingSelector,
        __ast_path: &mut AstKindPath,
    ) -> NestingSelector {
        <V as FoldAstPath>::fold_nesting_selector(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_number(&mut self, node: Number, __ast_path: &mut AstKindPath) -> Number {
        <V as FoldAstPath>::fold_number(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_number_type(&mut self, node: NumberType, __ast_path: &mut AstKindPath) -> NumberType {
        <V as FoldAstPath>::fold_number_type(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_opt_at_rule_prelude(
        &mut self,
        node: Option<Box<AtRulePrelude>>,
        __ast_path: &mut AstKindPath,
    ) -> Option<Box<AtRulePrelude>> {
        <V as FoldAstPath>::fold_opt_at_rule_prelude(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_opt_atom(
        &mut self,
        node: Option<swc_atoms::Atom>,
        __ast_path: &mut AstKindPath,
    ) -> Option<swc_atoms::Atom> {
        <V as FoldAstPath>::fold_opt_atom(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_opt_attribute_selector_matcher(
        &mut self,
        node: Option<AttributeSelectorMatcher>,
        __ast_path: &mut AstKindPath,
    ) -> Option<AttributeSelectorMatcher> {
        <V as FoldAstPath>::fold_opt_attribute_selector_matcher(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_opt_attribute_selector_modifier(
        &mut self,
        node: Option<AttributeSelectorModifier>,
        __ast_path: &mut AstKindPath,
    ) -> Option<AttributeSelectorModifier> {
        <V as FoldAstPath>::fold_opt_attribute_selector_modifier(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_opt_attribute_selector_value(
        &mut self,
        node: Option<AttributeSelectorValue>,
        __ast_path: &mut AstKindPath,
    ) -> Option<AttributeSelectorValue> {
        <V as FoldAstPath>::fold_opt_attribute_selector_value(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_opt_combinator(
        &mut self,
        node: Option<Combinator>,
        __ast_path: &mut AstKindPath,
    ) -> Option<Combinator> {
        <V as FoldAstPath>::fold_opt_combinator(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_opt_container_name(
        &mut self,
        node: Option<ContainerName>,
        __ast_path: &mut AstKindPath,
    ) -> Option<ContainerName> {
        <V as FoldAstPath>::fold_opt_container_name(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_opt_forgiving_selector_list(
        &mut self,
        node: Option<ForgivingSelectorList>,
        __ast_path: &mut AstKindPath,
    ) -> Option<ForgivingSelectorList> {
        <V as FoldAstPath>::fold_opt_forgiving_selector_list(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_opt_function(
        &mut self,
        node: Option<Box<Function>>,
        __ast_path: &mut AstKindPath,
    ) -> Option<Box<Function>> {
        <V as FoldAstPath>::fold_opt_function(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_opt_ident(
        &mut self,
        node: Option<Ident>,
        __ast_path: &mut AstKindPath,
    ) -> Option<Ident> {
        <V as FoldAstPath>::fold_opt_ident(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_opt_import_conditions(
        &mut self,
        node: Option<Box<ImportConditions>>,
        __ast_path: &mut AstKindPath,
    ) -> Option<Box<ImportConditions>> {
        <V as FoldAstPath>::fold_opt_import_conditions(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_opt_import_layer_name(
        &mut self,
        node: Option<Box<ImportLayerName>>,
        __ast_path: &mut AstKindPath,
    ) -> Option<Box<ImportLayerName>> {
        <V as FoldAstPath>::fold_opt_import_layer_name(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_opt_important_flag(
        &mut self,
        node: Option<ImportantFlag>,
        __ast_path: &mut AstKindPath,
    ) -> Option<ImportantFlag> {
        <V as FoldAstPath>::fold_opt_important_flag(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_opt_media_condition_type(
        &mut self,
        node: Option<Box<MediaConditionType>>,
        __ast_path: &mut AstKindPath,
    ) -> Option<Box<MediaConditionType>> {
        <V as FoldAstPath>::fold_opt_media_condition_type(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_opt_media_query_list(
        &mut self,
        node: Option<Box<MediaQueryList>>,
        __ast_path: &mut AstKindPath,
    ) -> Option<Box<MediaQueryList>> {
        <V as FoldAstPath>::fold_opt_media_query_list(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_opt_media_type(
        &mut self,
        node: Option<MediaType>,
        __ast_path: &mut AstKindPath,
    ) -> Option<MediaType> {
        <V as FoldAstPath>::fold_opt_media_type(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_opt_namespace(
        &mut self,
        node: Option<Namespace>,
        __ast_path: &mut AstKindPath,
    ) -> Option<Namespace> {
        <V as FoldAstPath>::fold_opt_namespace(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_opt_namespace_prefix(
        &mut self,
        node: Option<NamespacePrefix>,
        __ast_path: &mut AstKindPath,
    ) -> Option<NamespacePrefix> {
        <V as FoldAstPath>::fold_opt_namespace_prefix(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_opt_nesting_selector(
        &mut self,
        node: Option<NestingSelector>,
        __ast_path: &mut AstKindPath,
    ) -> Option<NestingSelector> {
        <V as FoldAstPath>::fold_opt_nesting_selector(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_opt_number(
        &mut self,
        node: Option<Number>,
        __ast_path: &mut AstKindPath,
    ) -> Option<Number> {
        <V as FoldAstPath>::fold_opt_number(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_opt_page_selector_pseudos(
        &mut self,
        node: Option<Vec<PageSelectorPseudo>>,
        __ast_path: &mut AstKindPath,
    ) -> Option<Vec<PageSelectorPseudo>> {
        <V as FoldAstPath>::fold_opt_page_selector_pseudos(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_opt_page_selector_type(
        &mut self,
        node: Option<PageSelectorType>,
        __ast_path: &mut AstKindPath,
    ) -> Option<PageSelectorType> {
        <V as FoldAstPath>::fold_opt_page_selector_type(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_opt_pseudo_class_selector_childrens(
        &mut self,
        node: Option<Vec<PseudoClassSelectorChildren>>,
        __ast_path: &mut AstKindPath,
    ) -> Option<Vec<PseudoClassSelectorChildren>> {
        <V as FoldAstPath>::fold_opt_pseudo_class_selector_childrens(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_opt_pseudo_element_selector_childrens(
        &mut self,
        node: Option<Vec<PseudoElementSelectorChildren>>,
        __ast_path: &mut AstKindPath,
    ) -> Option<Vec<PseudoElementSelectorChildren>> {
        <V as FoldAstPath>::fold_opt_pseudo_element_selector_childrens(
            &mut **self,
            node,
            __ast_path,
        )
    }

    #[inline]
    fn fold_opt_simple_block(
        &mut self,
        node: Option<SimpleBlock>,
        __ast_path: &mut AstKindPath,
    ) -> Option<SimpleBlock> {
        <V as FoldAstPath>::fold_opt_simple_block(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_opt_type_selector(
        &mut self,
        node: Option<Box<TypeSelector>>,
        __ast_path: &mut AstKindPath,
    ) -> Option<Box<TypeSelector>> {
        <V as FoldAstPath>::fold_opt_type_selector(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_opt_url_modifiers(
        &mut self,
        node: Option<Vec<UrlModifier>>,
        __ast_path: &mut AstKindPath,
    ) -> Option<Vec<UrlModifier>> {
        <V as FoldAstPath>::fold_opt_url_modifiers(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_opt_url_value(
        &mut self,
        node: Option<Box<UrlValue>>,
        __ast_path: &mut AstKindPath,
    ) -> Option<Box<UrlValue>> {
        <V as FoldAstPath>::fold_opt_url_value(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_page_selector(
        &mut self,
        node: PageSelector,
        __ast_path: &mut AstKindPath,
    ) -> PageSelector {
        <V as FoldAstPath>::fold_page_selector(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_page_selector_list(
        &mut self,
        node: PageSelectorList,
        __ast_path: &mut AstKindPath,
    ) -> PageSelectorList {
        <V as FoldAstPath>::fold_page_selector_list(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_page_selector_pseudo(
        &mut self,
        node: PageSelectorPseudo,
        __ast_path: &mut AstKindPath,
    ) -> PageSelectorPseudo {
        <V as FoldAstPath>::fold_page_selector_pseudo(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_page_selector_pseudos(
        &mut self,
        node: Vec<PageSelectorPseudo>,
        __ast_path: &mut AstKindPath,
    ) -> Vec<PageSelectorPseudo> {
        <V as FoldAstPath>::fold_page_selector_pseudos(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_page_selector_type(
        &mut self,
        node: PageSelectorType,
        __ast_path: &mut AstKindPath,
    ) -> PageSelectorType {
        <V as FoldAstPath>::fold_page_selector_type(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_page_selectors(
        &mut self,
        node: Vec<PageSelector>,
        __ast_path: &mut AstKindPath,
    ) -> Vec<PageSelector> {
        <V as FoldAstPath>::fold_page_selectors(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_percentage(&mut self, node: Percentage, __ast_path: &mut AstKindPath) -> Percentage {
        <V as FoldAstPath>::fold_percentage(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_pseudo_class_selector(
        &mut self,
        node: PseudoClassSelector,
        __ast_path: &mut AstKindPath,
    ) -> PseudoClassSelector {
        <V as FoldAstPath>::fold_pseudo_class_selector(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_pseudo_class_selector_children(
        &mut self,
        node: PseudoClassSelectorChildren,
        __ast_path: &mut AstKindPath,
    ) -> PseudoClassSelectorChildren {
        <V as FoldAstPath>::fold_pseudo_class_selector_children(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_pseudo_class_selector_childrens(
        &mut self,
        node: Vec<PseudoClassSelectorChildren>,
        __ast_path: &mut AstKindPath,
    ) -> Vec<PseudoClassSelectorChildren> {
        <V as FoldAstPath>::fold_pseudo_class_selector_childrens(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_pseudo_element_selector(
        &mut self,
        node: PseudoElementSelector,
        __ast_path: &mut AstKindPath,
    ) -> PseudoElementSelector {
        <V as FoldAstPath>::fold_pseudo_element_selector(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_pseudo_element_selector_children(
        &mut self,
        node: PseudoElementSelectorChildren,
        __ast_path: &mut AstKindPath,
    ) -> PseudoElementSelectorChildren {
        <V as FoldAstPath>::fold_pseudo_element_selector_children(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_pseudo_element_selector_childrens(
        &mut self,
        node: Vec<PseudoElementSelectorChildren>,
        __ast_path: &mut AstKindPath,
    ) -> Vec<PseudoElementSelectorChildren> {
        <V as FoldAstPath>::fold_pseudo_element_selector_childrens(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_qualified_rule(
        &mut self,
        node: QualifiedRule,
        __ast_path: &mut AstKindPath,
    ) -> QualifiedRule {
        <V as FoldAstPath>::fold_qualified_rule(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_qualified_rule_prelude(
        &mut self,
        node: QualifiedRulePrelude,
        __ast_path: &mut AstKindPath,
    ) -> QualifiedRulePrelude {
        <V as FoldAstPath>::fold_qualified_rule_prelude(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_query_in_parens(
        &mut self,
        node: QueryInParens,
        __ast_path: &mut AstKindPath,
    ) -> QueryInParens {
        <V as FoldAstPath>::fold_query_in_parens(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_ratio(&mut self, node: Ratio, __ast_path: &mut AstKindPath) -> Ratio {
        <V as FoldAstPath>::fold_ratio(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_relative_selector(
        &mut self,
        node: RelativeSelector,
        __ast_path: &mut AstKindPath,
    ) -> RelativeSelector {
        <V as FoldAstPath>::fold_relative_selector(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_relative_selector_list(
        &mut self,
        node: RelativeSelectorList,
        __ast_path: &mut AstKindPath,
    ) -> RelativeSelectorList {
        <V as FoldAstPath>::fold_relative_selector_list(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_relative_selectors(
        &mut self,
        node: Vec<RelativeSelector>,
        __ast_path: &mut AstKindPath,
    ) -> Vec<RelativeSelector> {
        <V as FoldAstPath>::fold_relative_selectors(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_resolution(&mut self, node: Resolution, __ast_path: &mut AstKindPath) -> Resolution {
        <V as FoldAstPath>::fold_resolution(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_rule(&mut self, node: Rule, __ast_path: &mut AstKindPath) -> Rule {
        <V as FoldAstPath>::fold_rule(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_rules(&mut self, node: Vec<Rule>, __ast_path: &mut AstKindPath) -> Vec<Rule> {
        <V as FoldAstPath>::fold_rules(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_scope_range(&mut self, node: ScopeRange, __ast_path: &mut AstKindPath) -> ScopeRange {
        <V as FoldAstPath>::fold_scope_range(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_selector_list(
        &mut self,
        node: SelectorList,
        __ast_path: &mut AstKindPath,
    ) -> SelectorList {
        <V as FoldAstPath>::fold_selector_list(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_sequence_of_custom_idents(
        &mut self,
        node: SequenceOfCustomIdents,
        __ast_path: &mut AstKindPath,
    ) -> SequenceOfCustomIdents {
        <V as FoldAstPath>::fold_sequence_of_custom_idents(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_simple_block(
        &mut self,
        node: SimpleBlock,
        __ast_path: &mut AstKindPath,
    ) -> SimpleBlock {
        <V as FoldAstPath>::fold_simple_block(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_size_feature(
        &mut self,
        node: SizeFeature,
        __ast_path: &mut AstKindPath,
    ) -> SizeFeature {
        <V as FoldAstPath>::fold_size_feature(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_size_feature_boolean(
        &mut self,
        node: SizeFeatureBoolean,
        __ast_path: &mut AstKindPath,
    ) -> SizeFeatureBoolean {
        <V as FoldAstPath>::fold_size_feature_boolean(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_size_feature_name(
        &mut self,
        node: SizeFeatureName,
        __ast_path: &mut AstKindPath,
    ) -> SizeFeatureName {
        <V as FoldAstPath>::fold_size_feature_name(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_size_feature_plain(
        &mut self,
        node: SizeFeaturePlain,
        __ast_path: &mut AstKindPath,
    ) -> SizeFeaturePlain {
        <V as FoldAstPath>::fold_size_feature_plain(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_size_feature_range(
        &mut self,
        node: SizeFeatureRange,
        __ast_path: &mut AstKindPath,
    ) -> SizeFeatureRange {
        <V as FoldAstPath>::fold_size_feature_range(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_size_feature_range_comparison(
        &mut self,
        node: SizeFeatureRangeComparison,
        __ast_path: &mut AstKindPath,
    ) -> SizeFeatureRangeComparison {
        <V as FoldAstPath>::fold_size_feature_range_comparison(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_size_feature_range_interval(
        &mut self,
        node: SizeFeatureRangeInterval,
        __ast_path: &mut AstKindPath,
    ) -> SizeFeatureRangeInterval {
        <V as FoldAstPath>::fold_size_feature_range_interval(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_size_feature_value(
        &mut self,
        node: SizeFeatureValue,
        __ast_path: &mut AstKindPath,
    ) -> SizeFeatureValue {
        <V as FoldAstPath>::fold_size_feature_value(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_span(
        &mut self,
        node: swc_common::Span,
        __ast_path: &mut AstKindPath,
    ) -> swc_common::Span {
        <V as FoldAstPath>::fold_span(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_str(&mut self, node: Str, __ast_path: &mut AstKindPath) -> Str {
        <V as FoldAstPath>::fold_str(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_style_block(&mut self, node: StyleBlock, __ast_path: &mut AstKindPath) -> StyleBlock {
        <V as FoldAstPath>::fold_style_block(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_stylesheet(&mut self, node: Stylesheet, __ast_path: &mut AstKindPath) -> Stylesheet {
        <V as FoldAstPath>::fold_stylesheet(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_subclass_selector(
        &mut self,
        node: SubclassSelector,
        __ast_path: &mut AstKindPath,
    ) -> SubclassSelector {
        <V as FoldAstPath>::fold_subclass_selector(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_subclass_selectors(
        &mut self,
        node: Vec<SubclassSelector>,
        __ast_path: &mut AstKindPath,
    ) -> Vec<SubclassSelector> {
        <V as FoldAstPath>::fold_subclass_selectors(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_supports_and(
        &mut self,
        node: SupportsAnd,
        __ast_path: &mut AstKindPath,
    ) -> SupportsAnd {
        <V as FoldAstPath>::fold_supports_and(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_supports_condition(
        &mut self,
        node: SupportsCondition,
        __ast_path: &mut AstKindPath,
    ) -> SupportsCondition {
        <V as FoldAstPath>::fold_supports_condition(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_supports_condition_type(
        &mut self,
        node: SupportsConditionType,
        __ast_path: &mut AstKindPath,
    ) -> SupportsConditionType {
        <V as FoldAstPath>::fold_supports_condition_type(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_supports_condition_types(
        &mut self,
        node: Vec<SupportsConditionType>,
        __ast_path: &mut AstKindPath,
    ) -> Vec<SupportsConditionType> {
        <V as FoldAstPath>::fold_supports_condition_types(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_supports_feature(
        &mut self,
        node: SupportsFeature,
        __ast_path: &mut AstKindPath,
    ) -> SupportsFeature {
        <V as FoldAstPath>::fold_supports_feature(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_supports_in_parens(
        &mut self,
        node: SupportsInParens,
        __ast_path: &mut AstKindPath,
    ) -> SupportsInParens {
        <V as FoldAstPath>::fold_supports_in_parens(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_supports_not(
        &mut self,
        node: SupportsNot,
        __ast_path: &mut AstKindPath,
    ) -> SupportsNot {
        <V as FoldAstPath>::fold_supports_not(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_supports_or(&mut self, node: SupportsOr, __ast_path: &mut AstKindPath) -> SupportsOr {
        <V as FoldAstPath>::fold_supports_or(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_tag_name_selector(
        &mut self,
        node: TagNameSelector,
        __ast_path: &mut AstKindPath,
    ) -> TagNameSelector {
        <V as FoldAstPath>::fold_tag_name_selector(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_time(&mut self, node: Time, __ast_path: &mut AstKindPath) -> Time {
        <V as FoldAstPath>::fold_time(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_time_percentage(
        &mut self,
        node: TimePercentage,
        __ast_path: &mut AstKindPath,
    ) -> TimePercentage {
        <V as FoldAstPath>::fold_time_percentage(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_token(&mut self, node: Token, __ast_path: &mut AstKindPath) -> Token {
        <V as FoldAstPath>::fold_token(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_token_and_span(
        &mut self,
        node: TokenAndSpan,
        __ast_path: &mut AstKindPath,
    ) -> TokenAndSpan {
        <V as FoldAstPath>::fold_token_and_span(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_type_selector(
        &mut self,
        node: TypeSelector,
        __ast_path: &mut AstKindPath,
    ) -> TypeSelector {
        <V as FoldAstPath>::fold_type_selector(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_unicode_range(
        &mut self,
        node: UnicodeRange,
        __ast_path: &mut AstKindPath,
    ) -> UnicodeRange {
        <V as FoldAstPath>::fold_unicode_range(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_universal_selector(
        &mut self,
        node: UniversalSelector,
        __ast_path: &mut AstKindPath,
    ) -> UniversalSelector {
        <V as FoldAstPath>::fold_universal_selector(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_unknown_dimension(
        &mut self,
        node: UnknownDimension,
        __ast_path: &mut AstKindPath,
    ) -> UnknownDimension {
        <V as FoldAstPath>::fold_unknown_dimension(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_url(&mut self, node: Url, __ast_path: &mut AstKindPath) -> Url {
        <V as FoldAstPath>::fold_url(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_url_key_value(
        &mut self,
        node: UrlKeyValue,
        __ast_path: &mut AstKindPath,
    ) -> UrlKeyValue {
        <V as FoldAstPath>::fold_url_key_value(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_url_modifier(
        &mut self,
        node: UrlModifier,
        __ast_path: &mut AstKindPath,
    ) -> UrlModifier {
        <V as FoldAstPath>::fold_url_modifier(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_url_modifiers(
        &mut self,
        node: Vec<UrlModifier>,
        __ast_path: &mut AstKindPath,
    ) -> Vec<UrlModifier> {
        <V as FoldAstPath>::fold_url_modifiers(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_url_value(&mut self, node: UrlValue, __ast_path: &mut AstKindPath) -> UrlValue {
        <V as FoldAstPath>::fold_url_value(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_url_value_raw(
        &mut self,
        node: UrlValueRaw,
        __ast_path: &mut AstKindPath,
    ) -> UrlValueRaw {
        <V as FoldAstPath>::fold_url_value_raw(&mut **self, node, __ast_path)
    }

    #[inline]
    fn fold_wq_name(&mut self, node: WqName, __ast_path: &mut AstKindPath) -> WqName {
        <V as FoldAstPath>::fold_wq_name(&mut **self, node, __ast_path)
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<A, B> FoldAstPath for ::swc_visit::Either<A, B>
where
    A: FoldAstPath,
    B: FoldAstPath,
{
    #[inline]
    fn fold_absolute_color_base(
        &mut self,
        node: AbsoluteColorBase,
        __ast_path: &mut AstKindPath,
    ) -> AbsoluteColorBase {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_absolute_color_base(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_absolute_color_base(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_alpha_value(&mut self, node: AlphaValue, __ast_path: &mut AstKindPath) -> AlphaValue {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_alpha_value(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_alpha_value(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_an_plus_b(&mut self, node: AnPlusB, __ast_path: &mut AstKindPath) -> AnPlusB {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_an_plus_b(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_an_plus_b(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_an_plus_b_notation(
        &mut self,
        node: AnPlusBNotation,
        __ast_path: &mut AstKindPath,
    ) -> AnPlusBNotation {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_an_plus_b_notation(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_an_plus_b_notation(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_angle(&mut self, node: Angle, __ast_path: &mut AstKindPath) -> Angle {
        match self {
            swc_visit::Either::Left(visitor) => FoldAstPath::fold_angle(visitor, node, __ast_path),
            swc_visit::Either::Right(visitor) => FoldAstPath::fold_angle(visitor, node, __ast_path),
        }
    }

    #[inline]
    fn fold_angle_percentage(
        &mut self,
        node: AnglePercentage,
        __ast_path: &mut AstKindPath,
    ) -> AnglePercentage {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_angle_percentage(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_angle_percentage(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_any_namespace(
        &mut self,
        node: AnyNamespace,
        __ast_path: &mut AstKindPath,
    ) -> AnyNamespace {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_any_namespace(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_any_namespace(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_at_rule(&mut self, node: AtRule, __ast_path: &mut AstKindPath) -> AtRule {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_at_rule(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_at_rule(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_at_rule_name(&mut self, node: AtRuleName, __ast_path: &mut AstKindPath) -> AtRuleName {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_at_rule_name(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_at_rule_name(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_at_rule_prelude(
        &mut self,
        node: AtRulePrelude,
        __ast_path: &mut AstKindPath,
    ) -> AtRulePrelude {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_at_rule_prelude(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_at_rule_prelude(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_atom(
        &mut self,
        node: swc_atoms::Atom,
        __ast_path: &mut AstKindPath,
    ) -> swc_atoms::Atom {
        match self {
            swc_visit::Either::Left(visitor) => FoldAstPath::fold_atom(visitor, node, __ast_path),
            swc_visit::Either::Right(visitor) => FoldAstPath::fold_atom(visitor, node, __ast_path),
        }
    }

    #[inline]
    fn fold_attribute_selector(
        &mut self,
        node: AttributeSelector,
        __ast_path: &mut AstKindPath,
    ) -> AttributeSelector {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_attribute_selector(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_attribute_selector(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_attribute_selector_matcher(
        &mut self,
        node: AttributeSelectorMatcher,
        __ast_path: &mut AstKindPath,
    ) -> AttributeSelectorMatcher {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_attribute_selector_matcher(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_attribute_selector_matcher(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_attribute_selector_matcher_value(
        &mut self,
        node: AttributeSelectorMatcherValue,
        __ast_path: &mut AstKindPath,
    ) -> AttributeSelectorMatcherValue {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_attribute_selector_matcher_value(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_attribute_selector_matcher_value(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_attribute_selector_modifier(
        &mut self,
        node: AttributeSelectorModifier,
        __ast_path: &mut AstKindPath,
    ) -> AttributeSelectorModifier {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_attribute_selector_modifier(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_attribute_selector_modifier(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_attribute_selector_value(
        &mut self,
        node: AttributeSelectorValue,
        __ast_path: &mut AstKindPath,
    ) -> AttributeSelectorValue {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_attribute_selector_value(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_attribute_selector_value(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_bin_op(&mut self, node: BinOp, __ast_path: &mut AstKindPath) -> BinOp {
        match self {
            swc_visit::Either::Left(visitor) => FoldAstPath::fold_bin_op(visitor, node, __ast_path),
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_bin_op(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_calc_operator(
        &mut self,
        node: CalcOperator,
        __ast_path: &mut AstKindPath,
    ) -> CalcOperator {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_calc_operator(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_calc_operator(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_calc_operator_type(
        &mut self,
        node: CalcOperatorType,
        __ast_path: &mut AstKindPath,
    ) -> CalcOperatorType {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_calc_operator_type(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_calc_operator_type(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_calc_product(
        &mut self,
        node: CalcProduct,
        __ast_path: &mut AstKindPath,
    ) -> CalcProduct {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_calc_product(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_calc_product(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_calc_product_or_operator(
        &mut self,
        node: CalcProductOrOperator,
        __ast_path: &mut AstKindPath,
    ) -> CalcProductOrOperator {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_calc_product_or_operator(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_calc_product_or_operator(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_calc_product_or_operators(
        &mut self,
        node: Vec<CalcProductOrOperator>,
        __ast_path: &mut AstKindPath,
    ) -> Vec<CalcProductOrOperator> {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_calc_product_or_operators(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_calc_product_or_operators(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_calc_sum(&mut self, node: CalcSum, __ast_path: &mut AstKindPath) -> CalcSum {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_calc_sum(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_calc_sum(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_calc_value(&mut self, node: CalcValue, __ast_path: &mut AstKindPath) -> CalcValue {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_calc_value(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_calc_value(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_calc_value_or_operator(
        &mut self,
        node: CalcValueOrOperator,
        __ast_path: &mut AstKindPath,
    ) -> CalcValueOrOperator {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_calc_value_or_operator(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_calc_value_or_operator(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_calc_value_or_operators(
        &mut self,
        node: Vec<CalcValueOrOperator>,
        __ast_path: &mut AstKindPath,
    ) -> Vec<CalcValueOrOperator> {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_calc_value_or_operators(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_calc_value_or_operators(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_class_selector(
        &mut self,
        node: ClassSelector,
        __ast_path: &mut AstKindPath,
    ) -> ClassSelector {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_class_selector(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_class_selector(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_cmyk_component(
        &mut self,
        node: CmykComponent,
        __ast_path: &mut AstKindPath,
    ) -> CmykComponent {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_cmyk_component(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_cmyk_component(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_color(&mut self, node: Color, __ast_path: &mut AstKindPath) -> Color {
        match self {
            swc_visit::Either::Left(visitor) => FoldAstPath::fold_color(visitor, node, __ast_path),
            swc_visit::Either::Right(visitor) => FoldAstPath::fold_color(visitor, node, __ast_path),
        }
    }

    #[inline]
    fn fold_color_profile_name(
        &mut self,
        node: ColorProfileName,
        __ast_path: &mut AstKindPath,
    ) -> ColorProfileName {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_color_profile_name(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_color_profile_name(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_combinator(&mut self, node: Combinator, __ast_path: &mut AstKindPath) -> Combinator {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_combinator(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_combinator(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_combinator_value(
        &mut self,
        node: CombinatorValue,
        __ast_path: &mut AstKindPath,
    ) -> CombinatorValue {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_combinator_value(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_combinator_value(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_complex_selector(
        &mut self,
        node: ComplexSelector,
        __ast_path: &mut AstKindPath,
    ) -> ComplexSelector {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_complex_selector(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_complex_selector(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_complex_selector_children(
        &mut self,
        node: ComplexSelectorChildren,
        __ast_path: &mut AstKindPath,
    ) -> ComplexSelectorChildren {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_complex_selector_children(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_complex_selector_children(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_complex_selector_childrens(
        &mut self,
        node: Vec<ComplexSelectorChildren>,
        __ast_path: &mut AstKindPath,
    ) -> Vec<ComplexSelectorChildren> {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_complex_selector_childrens(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_complex_selector_childrens(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_complex_selectors(
        &mut self,
        node: Vec<ComplexSelector>,
        __ast_path: &mut AstKindPath,
    ) -> Vec<ComplexSelector> {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_complex_selectors(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_complex_selectors(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_component_value(
        &mut self,
        node: ComponentValue,
        __ast_path: &mut AstKindPath,
    ) -> ComponentValue {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_component_value(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_component_value(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_component_values(
        &mut self,
        node: Vec<ComponentValue>,
        __ast_path: &mut AstKindPath,
    ) -> Vec<ComponentValue> {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_component_values(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_component_values(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_compound_selector(
        &mut self,
        node: CompoundSelector,
        __ast_path: &mut AstKindPath,
    ) -> CompoundSelector {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_compound_selector(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_compound_selector(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_compound_selector_list(
        &mut self,
        node: CompoundSelectorList,
        __ast_path: &mut AstKindPath,
    ) -> CompoundSelectorList {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_compound_selector_list(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_compound_selector_list(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_compound_selectors(
        &mut self,
        node: Vec<CompoundSelector>,
        __ast_path: &mut AstKindPath,
    ) -> Vec<CompoundSelector> {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_compound_selectors(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_compound_selectors(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_container_condition(
        &mut self,
        node: ContainerCondition,
        __ast_path: &mut AstKindPath,
    ) -> ContainerCondition {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_container_condition(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_container_condition(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_container_name(
        &mut self,
        node: ContainerName,
        __ast_path: &mut AstKindPath,
    ) -> ContainerName {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_container_name(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_container_name(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_container_query(
        &mut self,
        node: ContainerQuery,
        __ast_path: &mut AstKindPath,
    ) -> ContainerQuery {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_container_query(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_container_query(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_container_query_and(
        &mut self,
        node: ContainerQueryAnd,
        __ast_path: &mut AstKindPath,
    ) -> ContainerQueryAnd {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_container_query_and(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_container_query_and(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_container_query_not(
        &mut self,
        node: ContainerQueryNot,
        __ast_path: &mut AstKindPath,
    ) -> ContainerQueryNot {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_container_query_not(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_container_query_not(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_container_query_or(
        &mut self,
        node: ContainerQueryOr,
        __ast_path: &mut AstKindPath,
    ) -> ContainerQueryOr {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_container_query_or(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_container_query_or(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_container_query_type(
        &mut self,
        node: ContainerQueryType,
        __ast_path: &mut AstKindPath,
    ) -> ContainerQueryType {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_container_query_type(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_container_query_type(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_container_query_types(
        &mut self,
        node: Vec<ContainerQueryType>,
        __ast_path: &mut AstKindPath,
    ) -> Vec<ContainerQueryType> {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_container_query_types(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_container_query_types(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_custom_highlight_name(
        &mut self,
        node: CustomHighlightName,
        __ast_path: &mut AstKindPath,
    ) -> CustomHighlightName {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_custom_highlight_name(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_custom_highlight_name(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_custom_ident(
        &mut self,
        node: CustomIdent,
        __ast_path: &mut AstKindPath,
    ) -> CustomIdent {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_custom_ident(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_custom_ident(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_custom_idents(
        &mut self,
        node: Vec<CustomIdent>,
        __ast_path: &mut AstKindPath,
    ) -> Vec<CustomIdent> {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_custom_idents(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_custom_idents(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_custom_media_query(
        &mut self,
        node: CustomMediaQuery,
        __ast_path: &mut AstKindPath,
    ) -> CustomMediaQuery {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_custom_media_query(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_custom_media_query(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_custom_media_query_media_type(
        &mut self,
        node: CustomMediaQueryMediaType,
        __ast_path: &mut AstKindPath,
    ) -> CustomMediaQueryMediaType {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_custom_media_query_media_type(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_custom_media_query_media_type(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_custom_property_name(
        &mut self,
        node: CustomPropertyName,
        __ast_path: &mut AstKindPath,
    ) -> CustomPropertyName {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_custom_property_name(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_custom_property_name(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_dashed_ident(
        &mut self,
        node: DashedIdent,
        __ast_path: &mut AstKindPath,
    ) -> DashedIdent {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_dashed_ident(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_dashed_ident(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_declaration(&mut self, node: Declaration, __ast_path: &mut AstKindPath) -> Declaration {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_declaration(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_declaration(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_declaration_name(
        &mut self,
        node: DeclarationName,
        __ast_path: &mut AstKindPath,
    ) -> DeclarationName {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_declaration_name(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_declaration_name(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_declaration_or_at_rule(
        &mut self,
        node: DeclarationOrAtRule,
        __ast_path: &mut AstKindPath,
    ) -> DeclarationOrAtRule {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_declaration_or_at_rule(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_declaration_or_at_rule(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_delimiter(&mut self, node: Delimiter, __ast_path: &mut AstKindPath) -> Delimiter {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_delimiter(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_delimiter(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_delimiter_value(
        &mut self,
        node: DelimiterValue,
        __ast_path: &mut AstKindPath,
    ) -> DelimiterValue {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_delimiter_value(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_delimiter_value(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_dimension(&mut self, node: Dimension, __ast_path: &mut AstKindPath) -> Dimension {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_dimension(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_dimension(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_dimension_token(
        &mut self,
        node: DimensionToken,
        __ast_path: &mut AstKindPath,
    ) -> DimensionToken {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_dimension_token(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_dimension_token(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_document_prelude(
        &mut self,
        node: DocumentPrelude,
        __ast_path: &mut AstKindPath,
    ) -> DocumentPrelude {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_document_prelude(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_document_prelude(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_document_prelude_matching_function(
        &mut self,
        node: DocumentPreludeMatchingFunction,
        __ast_path: &mut AstKindPath,
    ) -> DocumentPreludeMatchingFunction {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_document_prelude_matching_function(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_document_prelude_matching_function(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_document_prelude_matching_functions(
        &mut self,
        node: Vec<DocumentPreludeMatchingFunction>,
        __ast_path: &mut AstKindPath,
    ) -> Vec<DocumentPreludeMatchingFunction> {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_document_prelude_matching_functions(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_document_prelude_matching_functions(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_extension_name(
        &mut self,
        node: ExtensionName,
        __ast_path: &mut AstKindPath,
    ) -> ExtensionName {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_extension_name(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_extension_name(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_family_name(&mut self, node: FamilyName, __ast_path: &mut AstKindPath) -> FamilyName {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_family_name(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_family_name(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_family_names(
        &mut self,
        node: Vec<FamilyName>,
        __ast_path: &mut AstKindPath,
    ) -> Vec<FamilyName> {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_family_names(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_family_names(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_flex(&mut self, node: Flex, __ast_path: &mut AstKindPath) -> Flex {
        match self {
            swc_visit::Either::Left(visitor) => FoldAstPath::fold_flex(visitor, node, __ast_path),
            swc_visit::Either::Right(visitor) => FoldAstPath::fold_flex(visitor, node, __ast_path),
        }
    }

    #[inline]
    fn fold_font_feature_values_prelude(
        &mut self,
        node: FontFeatureValuesPrelude,
        __ast_path: &mut AstKindPath,
    ) -> FontFeatureValuesPrelude {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_font_feature_values_prelude(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_font_feature_values_prelude(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_forgiving_complex_selector(
        &mut self,
        node: ForgivingComplexSelector,
        __ast_path: &mut AstKindPath,
    ) -> ForgivingComplexSelector {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_forgiving_complex_selector(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_forgiving_complex_selector(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_forgiving_complex_selectors(
        &mut self,
        node: Vec<ForgivingComplexSelector>,
        __ast_path: &mut AstKindPath,
    ) -> Vec<ForgivingComplexSelector> {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_forgiving_complex_selectors(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_forgiving_complex_selectors(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_forgiving_relative_selector(
        &mut self,
        node: ForgivingRelativeSelector,
        __ast_path: &mut AstKindPath,
    ) -> ForgivingRelativeSelector {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_forgiving_relative_selector(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_forgiving_relative_selector(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_forgiving_relative_selector_list(
        &mut self,
        node: ForgivingRelativeSelectorList,
        __ast_path: &mut AstKindPath,
    ) -> ForgivingRelativeSelectorList {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_forgiving_relative_selector_list(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_forgiving_relative_selector_list(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_forgiving_relative_selectors(
        &mut self,
        node: Vec<ForgivingRelativeSelector>,
        __ast_path: &mut AstKindPath,
    ) -> Vec<ForgivingRelativeSelector> {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_forgiving_relative_selectors(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_forgiving_relative_selectors(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_forgiving_selector_list(
        &mut self,
        node: ForgivingSelectorList,
        __ast_path: &mut AstKindPath,
    ) -> ForgivingSelectorList {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_forgiving_selector_list(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_forgiving_selector_list(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_frequency(&mut self, node: Frequency, __ast_path: &mut AstKindPath) -> Frequency {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_frequency(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_frequency(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_frequency_percentage(
        &mut self,
        node: FrequencyPercentage,
        __ast_path: &mut AstKindPath,
    ) -> FrequencyPercentage {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_frequency_percentage(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_frequency_percentage(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_function(&mut self, node: Function, __ast_path: &mut AstKindPath) -> Function {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_function(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_function(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_function_name(
        &mut self,
        node: FunctionName,
        __ast_path: &mut AstKindPath,
    ) -> FunctionName {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_function_name(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_function_name(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_general_enclosed(
        &mut self,
        node: GeneralEnclosed,
        __ast_path: &mut AstKindPath,
    ) -> GeneralEnclosed {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_general_enclosed(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_general_enclosed(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_hex_color(&mut self, node: HexColor, __ast_path: &mut AstKindPath) -> HexColor {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_hex_color(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_hex_color(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_hue(&mut self, node: Hue, __ast_path: &mut AstKindPath) -> Hue {
        match self {
            swc_visit::Either::Left(visitor) => FoldAstPath::fold_hue(visitor, node, __ast_path),
            swc_visit::Either::Right(visitor) => FoldAstPath::fold_hue(visitor, node, __ast_path),
        }
    }

    #[inline]
    fn fold_id_selector(&mut self, node: IdSelector, __ast_path: &mut AstKindPath) -> IdSelector {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_id_selector(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_id_selector(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_ident(&mut self, node: Ident, __ast_path: &mut AstKindPath) -> Ident {
        match self {
            swc_visit::Either::Left(visitor) => FoldAstPath::fold_ident(visitor, node, __ast_path),
            swc_visit::Either::Right(visitor) => FoldAstPath::fold_ident(visitor, node, __ast_path),
        }
    }

    #[inline]
    fn fold_idents(&mut self, node: Vec<Ident>, __ast_path: &mut AstKindPath) -> Vec<Ident> {
        match self {
            swc_visit::Either::Left(visitor) => FoldAstPath::fold_idents(visitor, node, __ast_path),
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_idents(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_import_conditions(
        &mut self,
        node: ImportConditions,
        __ast_path: &mut AstKindPath,
    ) -> ImportConditions {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_import_conditions(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_import_conditions(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_import_href(&mut self, node: ImportHref, __ast_path: &mut AstKindPath) -> ImportHref {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_import_href(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_import_href(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_import_layer_name(
        &mut self,
        node: ImportLayerName,
        __ast_path: &mut AstKindPath,
    ) -> ImportLayerName {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_import_layer_name(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_import_layer_name(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_import_prelude(
        &mut self,
        node: ImportPrelude,
        __ast_path: &mut AstKindPath,
    ) -> ImportPrelude {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_import_prelude(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_import_prelude(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_important_flag(
        &mut self,
        node: ImportantFlag,
        __ast_path: &mut AstKindPath,
    ) -> ImportantFlag {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_important_flag(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_important_flag(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_integer(&mut self, node: Integer, __ast_path: &mut AstKindPath) -> Integer {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_integer(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_integer(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_keyframe_block(
        &mut self,
        node: KeyframeBlock,
        __ast_path: &mut AstKindPath,
    ) -> KeyframeBlock {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_keyframe_block(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_keyframe_block(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_keyframe_selector(
        &mut self,
        node: KeyframeSelector,
        __ast_path: &mut AstKindPath,
    ) -> KeyframeSelector {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_keyframe_selector(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_keyframe_selector(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_keyframe_selectors(
        &mut self,
        node: Vec<KeyframeSelector>,
        __ast_path: &mut AstKindPath,
    ) -> Vec<KeyframeSelector> {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_keyframe_selectors(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_keyframe_selectors(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_keyframes_name(
        &mut self,
        node: KeyframesName,
        __ast_path: &mut AstKindPath,
    ) -> KeyframesName {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_keyframes_name(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_keyframes_name(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_keyframes_pseudo_function(
        &mut self,
        node: KeyframesPseudoFunction,
        __ast_path: &mut AstKindPath,
    ) -> KeyframesPseudoFunction {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_keyframes_pseudo_function(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_keyframes_pseudo_function(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_keyframes_pseudo_prefix(
        &mut self,
        node: KeyframesPseudoPrefix,
        __ast_path: &mut AstKindPath,
    ) -> KeyframesPseudoPrefix {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_keyframes_pseudo_prefix(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_keyframes_pseudo_prefix(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_layer_name(&mut self, node: LayerName, __ast_path: &mut AstKindPath) -> LayerName {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_layer_name(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_layer_name(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_layer_name_list(
        &mut self,
        node: LayerNameList,
        __ast_path: &mut AstKindPath,
    ) -> LayerNameList {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_layer_name_list(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_layer_name_list(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_layer_names(
        &mut self,
        node: Vec<LayerName>,
        __ast_path: &mut AstKindPath,
    ) -> Vec<LayerName> {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_layer_names(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_layer_names(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_layer_prelude(
        &mut self,
        node: LayerPrelude,
        __ast_path: &mut AstKindPath,
    ) -> LayerPrelude {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_layer_prelude(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_layer_prelude(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_length(&mut self, node: Length, __ast_path: &mut AstKindPath) -> Length {
        match self {
            swc_visit::Either::Left(visitor) => FoldAstPath::fold_length(visitor, node, __ast_path),
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_length(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_length_percentage(
        &mut self,
        node: LengthPercentage,
        __ast_path: &mut AstKindPath,
    ) -> LengthPercentage {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_length_percentage(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_length_percentage(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_list_of_component_values(
        &mut self,
        node: ListOfComponentValues,
        __ast_path: &mut AstKindPath,
    ) -> ListOfComponentValues {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_list_of_component_values(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_list_of_component_values(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_media_and(&mut self, node: MediaAnd, __ast_path: &mut AstKindPath) -> MediaAnd {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_media_and(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_media_and(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_media_condition(
        &mut self,
        node: MediaCondition,
        __ast_path: &mut AstKindPath,
    ) -> MediaCondition {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_media_condition(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_media_condition(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_media_condition_all_type(
        &mut self,
        node: MediaConditionAllType,
        __ast_path: &mut AstKindPath,
    ) -> MediaConditionAllType {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_media_condition_all_type(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_media_condition_all_type(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_media_condition_all_types(
        &mut self,
        node: Vec<MediaConditionAllType>,
        __ast_path: &mut AstKindPath,
    ) -> Vec<MediaConditionAllType> {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_media_condition_all_types(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_media_condition_all_types(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_media_condition_type(
        &mut self,
        node: MediaConditionType,
        __ast_path: &mut AstKindPath,
    ) -> MediaConditionType {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_media_condition_type(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_media_condition_type(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_media_condition_without_or(
        &mut self,
        node: MediaConditionWithoutOr,
        __ast_path: &mut AstKindPath,
    ) -> MediaConditionWithoutOr {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_media_condition_without_or(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_media_condition_without_or(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_media_condition_without_or_type(
        &mut self,
        node: MediaConditionWithoutOrType,
        __ast_path: &mut AstKindPath,
    ) -> MediaConditionWithoutOrType {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_media_condition_without_or_type(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_media_condition_without_or_type(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_media_condition_without_or_types(
        &mut self,
        node: Vec<MediaConditionWithoutOrType>,
        __ast_path: &mut AstKindPath,
    ) -> Vec<MediaConditionWithoutOrType> {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_media_condition_without_or_types(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_media_condition_without_or_types(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_media_feature(
        &mut self,
        node: MediaFeature,
        __ast_path: &mut AstKindPath,
    ) -> MediaFeature {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_media_feature(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_media_feature(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_media_feature_boolean(
        &mut self,
        node: MediaFeatureBoolean,
        __ast_path: &mut AstKindPath,
    ) -> MediaFeatureBoolean {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_media_feature_boolean(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_media_feature_boolean(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_media_feature_name(
        &mut self,
        node: MediaFeatureName,
        __ast_path: &mut AstKindPath,
    ) -> MediaFeatureName {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_media_feature_name(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_media_feature_name(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_media_feature_plain(
        &mut self,
        node: MediaFeaturePlain,
        __ast_path: &mut AstKindPath,
    ) -> MediaFeaturePlain {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_media_feature_plain(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_media_feature_plain(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_media_feature_range(
        &mut self,
        node: MediaFeatureRange,
        __ast_path: &mut AstKindPath,
    ) -> MediaFeatureRange {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_media_feature_range(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_media_feature_range(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_media_feature_range_comparison(
        &mut self,
        node: MediaFeatureRangeComparison,
        __ast_path: &mut AstKindPath,
    ) -> MediaFeatureRangeComparison {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_media_feature_range_comparison(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_media_feature_range_comparison(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_media_feature_range_interval(
        &mut self,
        node: MediaFeatureRangeInterval,
        __ast_path: &mut AstKindPath,
    ) -> MediaFeatureRangeInterval {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_media_feature_range_interval(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_media_feature_range_interval(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_media_feature_value(
        &mut self,
        node: MediaFeatureValue,
        __ast_path: &mut AstKindPath,
    ) -> MediaFeatureValue {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_media_feature_value(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_media_feature_value(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_media_in_parens(
        &mut self,
        node: MediaInParens,
        __ast_path: &mut AstKindPath,
    ) -> MediaInParens {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_media_in_parens(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_media_in_parens(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_media_not(&mut self, node: MediaNot, __ast_path: &mut AstKindPath) -> MediaNot {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_media_not(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_media_not(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_media_or(&mut self, node: MediaOr, __ast_path: &mut AstKindPath) -> MediaOr {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_media_or(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_media_or(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_media_query(&mut self, node: MediaQuery, __ast_path: &mut AstKindPath) -> MediaQuery {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_media_query(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_media_query(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_media_query_list(
        &mut self,
        node: MediaQueryList,
        __ast_path: &mut AstKindPath,
    ) -> MediaQueryList {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_media_query_list(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_media_query_list(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_media_querys(
        &mut self,
        node: Vec<MediaQuery>,
        __ast_path: &mut AstKindPath,
    ) -> Vec<MediaQuery> {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_media_querys(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_media_querys(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_media_type(&mut self, node: MediaType, __ast_path: &mut AstKindPath) -> MediaType {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_media_type(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_media_type(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_named_namespace(
        &mut self,
        node: NamedNamespace,
        __ast_path: &mut AstKindPath,
    ) -> NamedNamespace {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_named_namespace(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_named_namespace(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_namespace(&mut self, node: Namespace, __ast_path: &mut AstKindPath) -> Namespace {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_namespace(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_namespace(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_namespace_prefix(
        &mut self,
        node: NamespacePrefix,
        __ast_path: &mut AstKindPath,
    ) -> NamespacePrefix {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_namespace_prefix(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_namespace_prefix(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_namespace_prelude(
        &mut self,
        node: NamespacePrelude,
        __ast_path: &mut AstKindPath,
    ) -> NamespacePrelude {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_namespace_prelude(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_namespace_prelude(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_namespace_prelude_uri(
        &mut self,
        node: NamespacePreludeUri,
        __ast_path: &mut AstKindPath,
    ) -> NamespacePreludeUri {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_namespace_prelude_uri(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_namespace_prelude_uri(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_nesting_selector(
        &mut self,
        node: NestingSelector,
        __ast_path: &mut AstKindPath,
    ) -> NestingSelector {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_nesting_selector(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_nesting_selector(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_number(&mut self, node: Number, __ast_path: &mut AstKindPath) -> Number {
        match self {
            swc_visit::Either::Left(visitor) => FoldAstPath::fold_number(visitor, node, __ast_path),
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_number(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_number_type(&mut self, node: NumberType, __ast_path: &mut AstKindPath) -> NumberType {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_number_type(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_number_type(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_opt_at_rule_prelude(
        &mut self,
        node: Option<Box<AtRulePrelude>>,
        __ast_path: &mut AstKindPath,
    ) -> Option<Box<AtRulePrelude>> {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_opt_at_rule_prelude(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_opt_at_rule_prelude(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_opt_atom(
        &mut self,
        node: Option<swc_atoms::Atom>,
        __ast_path: &mut AstKindPath,
    ) -> Option<swc_atoms::Atom> {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_opt_atom(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_opt_atom(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_opt_attribute_selector_matcher(
        &mut self,
        node: Option<AttributeSelectorMatcher>,
        __ast_path: &mut AstKindPath,
    ) -> Option<AttributeSelectorMatcher> {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_opt_attribute_selector_matcher(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_opt_attribute_selector_matcher(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_opt_attribute_selector_modifier(
        &mut self,
        node: Option<AttributeSelectorModifier>,
        __ast_path: &mut AstKindPath,
    ) -> Option<AttributeSelectorModifier> {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_opt_attribute_selector_modifier(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_opt_attribute_selector_modifier(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_opt_attribute_selector_value(
        &mut self,
        node: Option<AttributeSelectorValue>,
        __ast_path: &mut AstKindPath,
    ) -> Option<AttributeSelectorValue> {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_opt_attribute_selector_value(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_opt_attribute_selector_value(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_opt_combinator(
        &mut self,
        node: Option<Combinator>,
        __ast_path: &mut AstKindPath,
    ) -> Option<Combinator> {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_opt_combinator(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_opt_combinator(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_opt_container_name(
        &mut self,
        node: Option<ContainerName>,
        __ast_path: &mut AstKindPath,
    ) -> Option<ContainerName> {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_opt_container_name(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_opt_container_name(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_opt_forgiving_selector_list(
        &mut self,
        node: Option<ForgivingSelectorList>,
        __ast_path: &mut AstKindPath,
    ) -> Option<ForgivingSelectorList> {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_opt_forgiving_selector_list(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_opt_forgiving_selector_list(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_opt_function(
        &mut self,
        node: Option<Box<Function>>,
        __ast_path: &mut AstKindPath,
    ) -> Option<Box<Function>> {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_opt_function(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_opt_function(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_opt_ident(
        &mut self,
        node: Option<Ident>,
        __ast_path: &mut AstKindPath,
    ) -> Option<Ident> {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_opt_ident(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_opt_ident(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_opt_import_conditions(
        &mut self,
        node: Option<Box<ImportConditions>>,
        __ast_path: &mut AstKindPath,
    ) -> Option<Box<ImportConditions>> {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_opt_import_conditions(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_opt_import_conditions(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_opt_import_layer_name(
        &mut self,
        node: Option<Box<ImportLayerName>>,
        __ast_path: &mut AstKindPath,
    ) -> Option<Box<ImportLayerName>> {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_opt_import_layer_name(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_opt_import_layer_name(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_opt_important_flag(
        &mut self,
        node: Option<ImportantFlag>,
        __ast_path: &mut AstKindPath,
    ) -> Option<ImportantFlag> {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_opt_important_flag(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_opt_important_flag(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_opt_media_condition_type(
        &mut self,
        node: Option<Box<MediaConditionType>>,
        __ast_path: &mut AstKindPath,
    ) -> Option<Box<MediaConditionType>> {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_opt_media_condition_type(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_opt_media_condition_type(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_opt_media_query_list(
        &mut self,
        node: Option<Box<MediaQueryList>>,
        __ast_path: &mut AstKindPath,
    ) -> Option<Box<MediaQueryList>> {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_opt_media_query_list(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_opt_media_query_list(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_opt_media_type(
        &mut self,
        node: Option<MediaType>,
        __ast_path: &mut AstKindPath,
    ) -> Option<MediaType> {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_opt_media_type(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_opt_media_type(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_opt_namespace(
        &mut self,
        node: Option<Namespace>,
        __ast_path: &mut AstKindPath,
    ) -> Option<Namespace> {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_opt_namespace(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_opt_namespace(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_opt_namespace_prefix(
        &mut self,
        node: Option<NamespacePrefix>,
        __ast_path: &mut AstKindPath,
    ) -> Option<NamespacePrefix> {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_opt_namespace_prefix(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_opt_namespace_prefix(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_opt_nesting_selector(
        &mut self,
        node: Option<NestingSelector>,
        __ast_path: &mut AstKindPath,
    ) -> Option<NestingSelector> {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_opt_nesting_selector(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_opt_nesting_selector(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_opt_number(
        &mut self,
        node: Option<Number>,
        __ast_path: &mut AstKindPath,
    ) -> Option<Number> {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_opt_number(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_opt_number(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_opt_page_selector_pseudos(
        &mut self,
        node: Option<Vec<PageSelectorPseudo>>,
        __ast_path: &mut AstKindPath,
    ) -> Option<Vec<PageSelectorPseudo>> {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_opt_page_selector_pseudos(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_opt_page_selector_pseudos(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_opt_page_selector_type(
        &mut self,
        node: Option<PageSelectorType>,
        __ast_path: &mut AstKindPath,
    ) -> Option<PageSelectorType> {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_opt_page_selector_type(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_opt_page_selector_type(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_opt_pseudo_class_selector_childrens(
        &mut self,
        node: Option<Vec<PseudoClassSelectorChildren>>,
        __ast_path: &mut AstKindPath,
    ) -> Option<Vec<PseudoClassSelectorChildren>> {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_opt_pseudo_class_selector_childrens(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_opt_pseudo_class_selector_childrens(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_opt_pseudo_element_selector_childrens(
        &mut self,
        node: Option<Vec<PseudoElementSelectorChildren>>,
        __ast_path: &mut AstKindPath,
    ) -> Option<Vec<PseudoElementSelectorChildren>> {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_opt_pseudo_element_selector_childrens(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_opt_pseudo_element_selector_childrens(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_opt_simple_block(
        &mut self,
        node: Option<SimpleBlock>,
        __ast_path: &mut AstKindPath,
    ) -> Option<SimpleBlock> {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_opt_simple_block(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_opt_simple_block(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_opt_type_selector(
        &mut self,
        node: Option<Box<TypeSelector>>,
        __ast_path: &mut AstKindPath,
    ) -> Option<Box<TypeSelector>> {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_opt_type_selector(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_opt_type_selector(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_opt_url_modifiers(
        &mut self,
        node: Option<Vec<UrlModifier>>,
        __ast_path: &mut AstKindPath,
    ) -> Option<Vec<UrlModifier>> {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_opt_url_modifiers(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_opt_url_modifiers(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_opt_url_value(
        &mut self,
        node: Option<Box<UrlValue>>,
        __ast_path: &mut AstKindPath,
    ) -> Option<Box<UrlValue>> {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_opt_url_value(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_opt_url_value(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_page_selector(
        &mut self,
        node: PageSelector,
        __ast_path: &mut AstKindPath,
    ) -> PageSelector {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_page_selector(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_page_selector(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_page_selector_list(
        &mut self,
        node: PageSelectorList,
        __ast_path: &mut AstKindPath,
    ) -> PageSelectorList {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_page_selector_list(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_page_selector_list(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_page_selector_pseudo(
        &mut self,
        node: PageSelectorPseudo,
        __ast_path: &mut AstKindPath,
    ) -> PageSelectorPseudo {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_page_selector_pseudo(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_page_selector_pseudo(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_page_selector_pseudos(
        &mut self,
        node: Vec<PageSelectorPseudo>,
        __ast_path: &mut AstKindPath,
    ) -> Vec<PageSelectorPseudo> {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_page_selector_pseudos(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_page_selector_pseudos(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_page_selector_type(
        &mut self,
        node: PageSelectorType,
        __ast_path: &mut AstKindPath,
    ) -> PageSelectorType {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_page_selector_type(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_page_selector_type(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_page_selectors(
        &mut self,
        node: Vec<PageSelector>,
        __ast_path: &mut AstKindPath,
    ) -> Vec<PageSelector> {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_page_selectors(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_page_selectors(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_percentage(&mut self, node: Percentage, __ast_path: &mut AstKindPath) -> Percentage {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_percentage(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_percentage(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_pseudo_class_selector(
        &mut self,
        node: PseudoClassSelector,
        __ast_path: &mut AstKindPath,
    ) -> PseudoClassSelector {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_pseudo_class_selector(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_pseudo_class_selector(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_pseudo_class_selector_children(
        &mut self,
        node: PseudoClassSelectorChildren,
        __ast_path: &mut AstKindPath,
    ) -> PseudoClassSelectorChildren {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_pseudo_class_selector_children(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_pseudo_class_selector_children(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_pseudo_class_selector_childrens(
        &mut self,
        node: Vec<PseudoClassSelectorChildren>,
        __ast_path: &mut AstKindPath,
    ) -> Vec<PseudoClassSelectorChildren> {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_pseudo_class_selector_childrens(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_pseudo_class_selector_childrens(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_pseudo_element_selector(
        &mut self,
        node: PseudoElementSelector,
        __ast_path: &mut AstKindPath,
    ) -> PseudoElementSelector {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_pseudo_element_selector(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_pseudo_element_selector(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_pseudo_element_selector_children(
        &mut self,
        node: PseudoElementSelectorChildren,
        __ast_path: &mut AstKindPath,
    ) -> PseudoElementSelectorChildren {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_pseudo_element_selector_children(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_pseudo_element_selector_children(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_pseudo_element_selector_childrens(
        &mut self,
        node: Vec<PseudoElementSelectorChildren>,
        __ast_path: &mut AstKindPath,
    ) -> Vec<PseudoElementSelectorChildren> {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_pseudo_element_selector_childrens(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_pseudo_element_selector_childrens(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_qualified_rule(
        &mut self,
        node: QualifiedRule,
        __ast_path: &mut AstKindPath,
    ) -> QualifiedRule {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_qualified_rule(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_qualified_rule(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_qualified_rule_prelude(
        &mut self,
        node: QualifiedRulePrelude,
        __ast_path: &mut AstKindPath,
    ) -> QualifiedRulePrelude {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_qualified_rule_prelude(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_qualified_rule_prelude(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_query_in_parens(
        &mut self,
        node: QueryInParens,
        __ast_path: &mut AstKindPath,
    ) -> QueryInParens {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_query_in_parens(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_query_in_parens(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_ratio(&mut self, node: Ratio, __ast_path: &mut AstKindPath) -> Ratio {
        match self {
            swc_visit::Either::Left(visitor) => FoldAstPath::fold_ratio(visitor, node, __ast_path),
            swc_visit::Either::Right(visitor) => FoldAstPath::fold_ratio(visitor, node, __ast_path),
        }
    }

    #[inline]
    fn fold_relative_selector(
        &mut self,
        node: RelativeSelector,
        __ast_path: &mut AstKindPath,
    ) -> RelativeSelector {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_relative_selector(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_relative_selector(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_relative_selector_list(
        &mut self,
        node: RelativeSelectorList,
        __ast_path: &mut AstKindPath,
    ) -> RelativeSelectorList {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_relative_selector_list(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_relative_selector_list(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_relative_selectors(
        &mut self,
        node: Vec<RelativeSelector>,
        __ast_path: &mut AstKindPath,
    ) -> Vec<RelativeSelector> {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_relative_selectors(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_relative_selectors(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_resolution(&mut self, node: Resolution, __ast_path: &mut AstKindPath) -> Resolution {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_resolution(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_resolution(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_rule(&mut self, node: Rule, __ast_path: &mut AstKindPath) -> Rule {
        match self {
            swc_visit::Either::Left(visitor) => FoldAstPath::fold_rule(visitor, node, __ast_path),
            swc_visit::Either::Right(visitor) => FoldAstPath::fold_rule(visitor, node, __ast_path),
        }
    }

    #[inline]
    fn fold_rules(&mut self, node: Vec<Rule>, __ast_path: &mut AstKindPath) -> Vec<Rule> {
        match self {
            swc_visit::Either::Left(visitor) => FoldAstPath::fold_rules(visitor, node, __ast_path),
            swc_visit::Either::Right(visitor) => FoldAstPath::fold_rules(visitor, node, __ast_path),
        }
    }

    #[inline]
    fn fold_scope_range(&mut self, node: ScopeRange, __ast_path: &mut AstKindPath) -> ScopeRange {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_scope_range(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_scope_range(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_selector_list(
        &mut self,
        node: SelectorList,
        __ast_path: &mut AstKindPath,
    ) -> SelectorList {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_selector_list(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_selector_list(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_sequence_of_custom_idents(
        &mut self,
        node: SequenceOfCustomIdents,
        __ast_path: &mut AstKindPath,
    ) -> SequenceOfCustomIdents {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_sequence_of_custom_idents(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_sequence_of_custom_idents(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_simple_block(
        &mut self,
        node: SimpleBlock,
        __ast_path: &mut AstKindPath,
    ) -> SimpleBlock {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_simple_block(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_simple_block(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_size_feature(
        &mut self,
        node: SizeFeature,
        __ast_path: &mut AstKindPath,
    ) -> SizeFeature {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_size_feature(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_size_feature(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_size_feature_boolean(
        &mut self,
        node: SizeFeatureBoolean,
        __ast_path: &mut AstKindPath,
    ) -> SizeFeatureBoolean {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_size_feature_boolean(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_size_feature_boolean(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_size_feature_name(
        &mut self,
        node: SizeFeatureName,
        __ast_path: &mut AstKindPath,
    ) -> SizeFeatureName {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_size_feature_name(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_size_feature_name(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_size_feature_plain(
        &mut self,
        node: SizeFeaturePlain,
        __ast_path: &mut AstKindPath,
    ) -> SizeFeaturePlain {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_size_feature_plain(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_size_feature_plain(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_size_feature_range(
        &mut self,
        node: SizeFeatureRange,
        __ast_path: &mut AstKindPath,
    ) -> SizeFeatureRange {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_size_feature_range(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_size_feature_range(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_size_feature_range_comparison(
        &mut self,
        node: SizeFeatureRangeComparison,
        __ast_path: &mut AstKindPath,
    ) -> SizeFeatureRangeComparison {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_size_feature_range_comparison(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_size_feature_range_comparison(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_size_feature_range_interval(
        &mut self,
        node: SizeFeatureRangeInterval,
        __ast_path: &mut AstKindPath,
    ) -> SizeFeatureRangeInterval {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_size_feature_range_interval(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_size_feature_range_interval(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_size_feature_value(
        &mut self,
        node: SizeFeatureValue,
        __ast_path: &mut AstKindPath,
    ) -> SizeFeatureValue {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_size_feature_value(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_size_feature_value(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_span(
        &mut self,
        node: swc_common::Span,
        __ast_path: &mut AstKindPath,
    ) -> swc_common::Span {
        match self {
            swc_visit::Either::Left(visitor) => FoldAstPath::fold_span(visitor, node, __ast_path),
            swc_visit::Either::Right(visitor) => FoldAstPath::fold_span(visitor, node, __ast_path),
        }
    }

    #[inline]
    fn fold_str(&mut self, node: Str, __ast_path: &mut AstKindPath) -> Str {
        match self {
            swc_visit::Either::Left(visitor) => FoldAstPath::fold_str(visitor, node, __ast_path),
            swc_visit::Either::Right(visitor) => FoldAstPath::fold_str(visitor, node, __ast_path),
        }
    }

    #[inline]
    fn fold_style_block(&mut self, node: StyleBlock, __ast_path: &mut AstKindPath) -> StyleBlock {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_style_block(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_style_block(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_stylesheet(&mut self, node: Stylesheet, __ast_path: &mut AstKindPath) -> Stylesheet {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_stylesheet(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_stylesheet(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_subclass_selector(
        &mut self,
        node: SubclassSelector,
        __ast_path: &mut AstKindPath,
    ) -> SubclassSelector {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_subclass_selector(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_subclass_selector(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_subclass_selectors(
        &mut self,
        node: Vec<SubclassSelector>,
        __ast_path: &mut AstKindPath,
    ) -> Vec<SubclassSelector> {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_subclass_selectors(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_subclass_selectors(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_supports_and(
        &mut self,
        node: SupportsAnd,
        __ast_path: &mut AstKindPath,
    ) -> SupportsAnd {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_supports_and(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_supports_and(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_supports_condition(
        &mut self,
        node: SupportsCondition,
        __ast_path: &mut AstKindPath,
    ) -> SupportsCondition {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_supports_condition(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_supports_condition(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_supports_condition_type(
        &mut self,
        node: SupportsConditionType,
        __ast_path: &mut AstKindPath,
    ) -> SupportsConditionType {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_supports_condition_type(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_supports_condition_type(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_supports_condition_types(
        &mut self,
        node: Vec<SupportsConditionType>,
        __ast_path: &mut AstKindPath,
    ) -> Vec<SupportsConditionType> {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_supports_condition_types(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_supports_condition_types(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_supports_feature(
        &mut self,
        node: SupportsFeature,
        __ast_path: &mut AstKindPath,
    ) -> SupportsFeature {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_supports_feature(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_supports_feature(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_supports_in_parens(
        &mut self,
        node: SupportsInParens,
        __ast_path: &mut AstKindPath,
    ) -> SupportsInParens {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_supports_in_parens(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_supports_in_parens(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_supports_not(
        &mut self,
        node: SupportsNot,
        __ast_path: &mut AstKindPath,
    ) -> SupportsNot {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_supports_not(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_supports_not(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_supports_or(&mut self, node: SupportsOr, __ast_path: &mut AstKindPath) -> SupportsOr {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_supports_or(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_supports_or(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_tag_name_selector(
        &mut self,
        node: TagNameSelector,
        __ast_path: &mut AstKindPath,
    ) -> TagNameSelector {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_tag_name_selector(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_tag_name_selector(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_time(&mut self, node: Time, __ast_path: &mut AstKindPath) -> Time {
        match self {
            swc_visit::Either::Left(visitor) => FoldAstPath::fold_time(visitor, node, __ast_path),
            swc_visit::Either::Right(visitor) => FoldAstPath::fold_time(visitor, node, __ast_path),
        }
    }

    #[inline]
    fn fold_time_percentage(
        &mut self,
        node: TimePercentage,
        __ast_path: &mut AstKindPath,
    ) -> TimePercentage {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_time_percentage(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_time_percentage(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_token(&mut self, node: Token, __ast_path: &mut AstKindPath) -> Token {
        match self {
            swc_visit::Either::Left(visitor) => FoldAstPath::fold_token(visitor, node, __ast_path),
            swc_visit::Either::Right(visitor) => FoldAstPath::fold_token(visitor, node, __ast_path),
        }
    }

    #[inline]
    fn fold_token_and_span(
        &mut self,
        node: TokenAndSpan,
        __ast_path: &mut AstKindPath,
    ) -> TokenAndSpan {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_token_and_span(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_token_and_span(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_type_selector(
        &mut self,
        node: TypeSelector,
        __ast_path: &mut AstKindPath,
    ) -> TypeSelector {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_type_selector(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_type_selector(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_unicode_range(
        &mut self,
        node: UnicodeRange,
        __ast_path: &mut AstKindPath,
    ) -> UnicodeRange {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_unicode_range(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_unicode_range(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_universal_selector(
        &mut self,
        node: UniversalSelector,
        __ast_path: &mut AstKindPath,
    ) -> UniversalSelector {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_universal_selector(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_universal_selector(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_unknown_dimension(
        &mut self,
        node: UnknownDimension,
        __ast_path: &mut AstKindPath,
    ) -> UnknownDimension {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_unknown_dimension(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_unknown_dimension(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_url(&mut self, node: Url, __ast_path: &mut AstKindPath) -> Url {
        match self {
            swc_visit::Either::Left(visitor) => FoldAstPath::fold_url(visitor, node, __ast_path),
            swc_visit::Either::Right(visitor) => FoldAstPath::fold_url(visitor, node, __ast_path),
        }
    }

    #[inline]
    fn fold_url_key_value(
        &mut self,
        node: UrlKeyValue,
        __ast_path: &mut AstKindPath,
    ) -> UrlKeyValue {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_url_key_value(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_url_key_value(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_url_modifier(
        &mut self,
        node: UrlModifier,
        __ast_path: &mut AstKindPath,
    ) -> UrlModifier {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_url_modifier(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_url_modifier(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_url_modifiers(
        &mut self,
        node: Vec<UrlModifier>,
        __ast_path: &mut AstKindPath,
    ) -> Vec<UrlModifier> {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_url_modifiers(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_url_modifiers(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_url_value(&mut self, node: UrlValue, __ast_path: &mut AstKindPath) -> UrlValue {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_url_value(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_url_value(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_url_value_raw(
        &mut self,
        node: UrlValueRaw,
        __ast_path: &mut AstKindPath,
    ) -> UrlValueRaw {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_url_value_raw(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_url_value_raw(visitor, node, __ast_path)
            }
        }
    }

    #[inline]
    fn fold_wq_name(&mut self, node: WqName, __ast_path: &mut AstKindPath) -> WqName {
        match self {
            swc_visit::Either::Left(visitor) => {
                FoldAstPath::fold_wq_name(visitor, node, __ast_path)
            }
            swc_visit::Either::Right(visitor) => {
                FoldAstPath::fold_wq_name(visitor, node, __ast_path)
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V> FoldAstPath for ::swc_visit::Optional<V>
where
    V: FoldAstPath,
{
    #[inline]
    fn fold_absolute_color_base(
        &mut self,
        node: AbsoluteColorBase,
        __ast_path: &mut AstKindPath,
    ) -> AbsoluteColorBase {
        if self.enabled {
            <V as FoldAstPath>::fold_absolute_color_base(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_alpha_value(&mut self, node: AlphaValue, __ast_path: &mut AstKindPath) -> AlphaValue {
        if self.enabled {
            <V as FoldAstPath>::fold_alpha_value(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_an_plus_b(&mut self, node: AnPlusB, __ast_path: &mut AstKindPath) -> AnPlusB {
        if self.enabled {
            <V as FoldAstPath>::fold_an_plus_b(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_an_plus_b_notation(
        &mut self,
        node: AnPlusBNotation,
        __ast_path: &mut AstKindPath,
    ) -> AnPlusBNotation {
        if self.enabled {
            <V as FoldAstPath>::fold_an_plus_b_notation(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_angle(&mut self, node: Angle, __ast_path: &mut AstKindPath) -> Angle {
        if self.enabled {
            <V as FoldAstPath>::fold_angle(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_angle_percentage(
        &mut self,
        node: AnglePercentage,
        __ast_path: &mut AstKindPath,
    ) -> AnglePercentage {
        if self.enabled {
            <V as FoldAstPath>::fold_angle_percentage(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_any_namespace(
        &mut self,
        node: AnyNamespace,
        __ast_path: &mut AstKindPath,
    ) -> AnyNamespace {
        if self.enabled {
            <V as FoldAstPath>::fold_any_namespace(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_at_rule(&mut self, node: AtRule, __ast_path: &mut AstKindPath) -> AtRule {
        if self.enabled {
            <V as FoldAstPath>::fold_at_rule(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_at_rule_name(&mut self, node: AtRuleName, __ast_path: &mut AstKindPath) -> AtRuleName {
        if self.enabled {
            <V as FoldAstPath>::fold_at_rule_name(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_at_rule_prelude(
        &mut self,
        node: AtRulePrelude,
        __ast_path: &mut AstKindPath,
    ) -> AtRulePrelude {
        if self.enabled {
            <V as FoldAstPath>::fold_at_rule_prelude(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_atom(
        &mut self,
        node: swc_atoms::Atom,
        __ast_path: &mut AstKindPath,
    ) -> swc_atoms::Atom {
        if self.enabled {
            <V as FoldAstPath>::fold_atom(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_attribute_selector(
        &mut self,
        node: AttributeSelector,
        __ast_path: &mut AstKindPath,
    ) -> AttributeSelector {
        if self.enabled {
            <V as FoldAstPath>::fold_attribute_selector(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_attribute_selector_matcher(
        &mut self,
        node: AttributeSelectorMatcher,
        __ast_path: &mut AstKindPath,
    ) -> AttributeSelectorMatcher {
        if self.enabled {
            <V as FoldAstPath>::fold_attribute_selector_matcher(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_attribute_selector_matcher_value(
        &mut self,
        node: AttributeSelectorMatcherValue,
        __ast_path: &mut AstKindPath,
    ) -> AttributeSelectorMatcherValue {
        if self.enabled {
            <V as FoldAstPath>::fold_attribute_selector_matcher_value(
                &mut self.visitor,
                node,
                __ast_path,
            )
        } else {
            node
        }
    }

    #[inline]
    fn fold_attribute_selector_modifier(
        &mut self,
        node: AttributeSelectorModifier,
        __ast_path: &mut AstKindPath,
    ) -> AttributeSelectorModifier {
        if self.enabled {
            <V as FoldAstPath>::fold_attribute_selector_modifier(
                &mut self.visitor,
                node,
                __ast_path,
            )
        } else {
            node
        }
    }

    #[inline]
    fn fold_attribute_selector_value(
        &mut self,
        node: AttributeSelectorValue,
        __ast_path: &mut AstKindPath,
    ) -> AttributeSelectorValue {
        if self.enabled {
            <V as FoldAstPath>::fold_attribute_selector_value(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_bin_op(&mut self, node: BinOp, __ast_path: &mut AstKindPath) -> BinOp {
        if self.enabled {
            <V as FoldAstPath>::fold_bin_op(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_calc_operator(
        &mut self,
        node: CalcOperator,
        __ast_path: &mut AstKindPath,
    ) -> CalcOperator {
        if self.enabled {
            <V as FoldAstPath>::fold_calc_operator(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_calc_operator_type(
        &mut self,
        node: CalcOperatorType,
        __ast_path: &mut AstKindPath,
    ) -> CalcOperatorType {
        if self.enabled {
            <V as FoldAstPath>::fold_calc_operator_type(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_calc_product(
        &mut self,
        node: CalcProduct,
        __ast_path: &mut AstKindPath,
    ) -> CalcProduct {
        if self.enabled {
            <V as FoldAstPath>::fold_calc_product(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_calc_product_or_operator(
        &mut self,
        node: CalcProductOrOperator,
        __ast_path: &mut AstKindPath,
    ) -> CalcProductOrOperator {
        if self.enabled {
            <V as FoldAstPath>::fold_calc_product_or_operator(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_calc_product_or_operators(
        &mut self,
        node: Vec<CalcProductOrOperator>,
        __ast_path: &mut AstKindPath,
    ) -> Vec<CalcProductOrOperator> {
        if self.enabled {
            <V as FoldAstPath>::fold_calc_product_or_operators(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_calc_sum(&mut self, node: CalcSum, __ast_path: &mut AstKindPath) -> CalcSum {
        if self.enabled {
            <V as FoldAstPath>::fold_calc_sum(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_calc_value(&mut self, node: CalcValue, __ast_path: &mut AstKindPath) -> CalcValue {
        if self.enabled {
            <V as FoldAstPath>::fold_calc_value(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_calc_value_or_operator(
        &mut self,
        node: CalcValueOrOperator,
        __ast_path: &mut AstKindPath,
    ) -> CalcValueOrOperator {
        if self.enabled {
            <V as FoldAstPath>::fold_calc_value_or_operator(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_calc_value_or_operators(
        &mut self,
        node: Vec<CalcValueOrOperator>,
        __ast_path: &mut AstKindPath,
    ) -> Vec<CalcValueOrOperator> {
        if self.enabled {
            <V as FoldAstPath>::fold_calc_value_or_operators(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_class_selector(
        &mut self,
        node: ClassSelector,
        __ast_path: &mut AstKindPath,
    ) -> ClassSelector {
        if self.enabled {
            <V as FoldAstPath>::fold_class_selector(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_cmyk_component(
        &mut self,
        node: CmykComponent,
        __ast_path: &mut AstKindPath,
    ) -> CmykComponent {
        if self.enabled {
            <V as FoldAstPath>::fold_cmyk_component(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_color(&mut self, node: Color, __ast_path: &mut AstKindPath) -> Color {
        if self.enabled {
            <V as FoldAstPath>::fold_color(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_color_profile_name(
        &mut self,
        node: ColorProfileName,
        __ast_path: &mut AstKindPath,
    ) -> ColorProfileName {
        if self.enabled {
            <V as FoldAstPath>::fold_color_profile_name(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_combinator(&mut self, node: Combinator, __ast_path: &mut AstKindPath) -> Combinator {
        if self.enabled {
            <V as FoldAstPath>::fold_combinator(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_combinator_value(
        &mut self,
        node: CombinatorValue,
        __ast_path: &mut AstKindPath,
    ) -> CombinatorValue {
        if self.enabled {
            <V as FoldAstPath>::fold_combinator_value(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_complex_selector(
        &mut self,
        node: ComplexSelector,
        __ast_path: &mut AstKindPath,
    ) -> ComplexSelector {
        if self.enabled {
            <V as FoldAstPath>::fold_complex_selector(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_complex_selector_children(
        &mut self,
        node: ComplexSelectorChildren,
        __ast_path: &mut AstKindPath,
    ) -> ComplexSelectorChildren {
        if self.enabled {
            <V as FoldAstPath>::fold_complex_selector_children(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_complex_selector_childrens(
        &mut self,
        node: Vec<ComplexSelectorChildren>,
        __ast_path: &mut AstKindPath,
    ) -> Vec<ComplexSelectorChildren> {
        if self.enabled {
            <V as FoldAstPath>::fold_complex_selector_childrens(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_complex_selectors(
        &mut self,
        node: Vec<ComplexSelector>,
        __ast_path: &mut AstKindPath,
    ) -> Vec<ComplexSelector> {
        if self.enabled {
            <V as FoldAstPath>::fold_complex_selectors(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_component_value(
        &mut self,
        node: ComponentValue,
        __ast_path: &mut AstKindPath,
    ) -> ComponentValue {
        if self.enabled {
            <V as FoldAstPath>::fold_component_value(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_component_values(
        &mut self,
        node: Vec<ComponentValue>,
        __ast_path: &mut AstKindPath,
    ) -> Vec<ComponentValue> {
        if self.enabled {
            <V as FoldAstPath>::fold_component_values(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_compound_selector(
        &mut self,
        node: CompoundSelector,
        __ast_path: &mut AstKindPath,
    ) -> CompoundSelector {
        if self.enabled {
            <V as FoldAstPath>::fold_compound_selector(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_compound_selector_list(
        &mut self,
        node: CompoundSelectorList,
        __ast_path: &mut AstKindPath,
    ) -> CompoundSelectorList {
        if self.enabled {
            <V as FoldAstPath>::fold_compound_selector_list(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_compound_selectors(
        &mut self,
        node: Vec<CompoundSelector>,
        __ast_path: &mut AstKindPath,
    ) -> Vec<CompoundSelector> {
        if self.enabled {
            <V as FoldAstPath>::fold_compound_selectors(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_container_condition(
        &mut self,
        node: ContainerCondition,
        __ast_path: &mut AstKindPath,
    ) -> ContainerCondition {
        if self.enabled {
            <V as FoldAstPath>::fold_container_condition(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_container_name(
        &mut self,
        node: ContainerName,
        __ast_path: &mut AstKindPath,
    ) -> ContainerName {
        if self.enabled {
            <V as FoldAstPath>::fold_container_name(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_container_query(
        &mut self,
        node: ContainerQuery,
        __ast_path: &mut AstKindPath,
    ) -> ContainerQuery {
        if self.enabled {
            <V as FoldAstPath>::fold_container_query(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_container_query_and(
        &mut self,
        node: ContainerQueryAnd,
        __ast_path: &mut AstKindPath,
    ) -> ContainerQueryAnd {
        if self.enabled {
            <V as FoldAstPath>::fold_container_query_and(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_container_query_not(
        &mut self,
        node: ContainerQueryNot,
        __ast_path: &mut AstKindPath,
    ) -> ContainerQueryNot {
        if self.enabled {
            <V as FoldAstPath>::fold_container_query_not(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_container_query_or(
        &mut self,
        node: ContainerQueryOr,
        __ast_path: &mut AstKindPath,
    ) -> ContainerQueryOr {
        if self.enabled {
            <V as FoldAstPath>::fold_container_query_or(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_container_query_type(
        &mut self,
        node: ContainerQueryType,
        __ast_path: &mut AstKindPath,
    ) -> ContainerQueryType {
        if self.enabled {
            <V as FoldAstPath>::fold_container_query_type(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_container_query_types(
        &mut self,
        node: Vec<ContainerQueryType>,
        __ast_path: &mut AstKindPath,
    ) -> Vec<ContainerQueryType> {
        if self.enabled {
            <V as FoldAstPath>::fold_container_query_types(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_custom_highlight_name(
        &mut self,
        node: CustomHighlightName,
        __ast_path: &mut AstKindPath,
    ) -> CustomHighlightName {
        if self.enabled {
            <V as FoldAstPath>::fold_custom_highlight_name(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_custom_ident(
        &mut self,
        node: CustomIdent,
        __ast_path: &mut AstKindPath,
    ) -> CustomIdent {
        if self.enabled {
            <V as FoldAstPath>::fold_custom_ident(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_custom_idents(
        &mut self,
        node: Vec<CustomIdent>,
        __ast_path: &mut AstKindPath,
    ) -> Vec<CustomIdent> {
        if self.enabled {
            <V as FoldAstPath>::fold_custom_idents(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_custom_media_query(
        &mut self,
        node: CustomMediaQuery,
        __ast_path: &mut AstKindPath,
    ) -> CustomMediaQuery {
        if self.enabled {
            <V as FoldAstPath>::fold_custom_media_query(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_custom_media_query_media_type(
        &mut self,
        node: CustomMediaQueryMediaType,
        __ast_path: &mut AstKindPath,
    ) -> CustomMediaQueryMediaType {
        if self.enabled {
            <V as FoldAstPath>::fold_custom_media_query_media_type(
                &mut self.visitor,
                node,
                __ast_path,
            )
        } else {
            node
        }
    }

    #[inline]
    fn fold_custom_property_name(
        &mut self,
        node: CustomPropertyName,
        __ast_path: &mut AstKindPath,
    ) -> CustomPropertyName {
        if self.enabled {
            <V as FoldAstPath>::fold_custom_property_name(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_dashed_ident(
        &mut self,
        node: DashedIdent,
        __ast_path: &mut AstKindPath,
    ) -> DashedIdent {
        if self.enabled {
            <V as FoldAstPath>::fold_dashed_ident(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_declaration(&mut self, node: Declaration, __ast_path: &mut AstKindPath) -> Declaration {
        if self.enabled {
            <V as FoldAstPath>::fold_declaration(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_declaration_name(
        &mut self,
        node: DeclarationName,
        __ast_path: &mut AstKindPath,
    ) -> DeclarationName {
        if self.enabled {
            <V as FoldAstPath>::fold_declaration_name(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_declaration_or_at_rule(
        &mut self,
        node: DeclarationOrAtRule,
        __ast_path: &mut AstKindPath,
    ) -> DeclarationOrAtRule {
        if self.enabled {
            <V as FoldAstPath>::fold_declaration_or_at_rule(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_delimiter(&mut self, node: Delimiter, __ast_path: &mut AstKindPath) -> Delimiter {
        if self.enabled {
            <V as FoldAstPath>::fold_delimiter(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_delimiter_value(
        &mut self,
        node: DelimiterValue,
        __ast_path: &mut AstKindPath,
    ) -> DelimiterValue {
        if self.enabled {
            <V as FoldAstPath>::fold_delimiter_value(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_dimension(&mut self, node: Dimension, __ast_path: &mut AstKindPath) -> Dimension {
        if self.enabled {
            <V as FoldAstPath>::fold_dimension(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_dimension_token(
        &mut self,
        node: DimensionToken,
        __ast_path: &mut AstKindPath,
    ) -> DimensionToken {
        if self.enabled {
            <V as FoldAstPath>::fold_dimension_token(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_document_prelude(
        &mut self,
        node: DocumentPrelude,
        __ast_path: &mut AstKindPath,
    ) -> DocumentPrelude {
        if self.enabled {
            <V as FoldAstPath>::fold_document_prelude(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_document_prelude_matching_function(
        &mut self,
        node: DocumentPreludeMatchingFunction,
        __ast_path: &mut AstKindPath,
    ) -> DocumentPreludeMatchingFunction {
        if self.enabled {
            <V as FoldAstPath>::fold_document_prelude_matching_function(
                &mut self.visitor,
                node,
                __ast_path,
            )
        } else {
            node
        }
    }

    #[inline]
    fn fold_document_prelude_matching_functions(
        &mut self,
        node: Vec<DocumentPreludeMatchingFunction>,
        __ast_path: &mut AstKindPath,
    ) -> Vec<DocumentPreludeMatchingFunction> {
        if self.enabled {
            <V as FoldAstPath>::fold_document_prelude_matching_functions(
                &mut self.visitor,
                node,
                __ast_path,
            )
        } else {
            node
        }
    }

    #[inline]
    fn fold_extension_name(
        &mut self,
        node: ExtensionName,
        __ast_path: &mut AstKindPath,
    ) -> ExtensionName {
        if self.enabled {
            <V as FoldAstPath>::fold_extension_name(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_family_name(&mut self, node: FamilyName, __ast_path: &mut AstKindPath) -> FamilyName {
        if self.enabled {
            <V as FoldAstPath>::fold_family_name(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_family_names(
        &mut self,
        node: Vec<FamilyName>,
        __ast_path: &mut AstKindPath,
    ) -> Vec<FamilyName> {
        if self.enabled {
            <V as FoldAstPath>::fold_family_names(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_flex(&mut self, node: Flex, __ast_path: &mut AstKindPath) -> Flex {
        if self.enabled {
            <V as FoldAstPath>::fold_flex(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_font_feature_values_prelude(
        &mut self,
        node: FontFeatureValuesPrelude,
        __ast_path: &mut AstKindPath,
    ) -> FontFeatureValuesPrelude {
        if self.enabled {
            <V as FoldAstPath>::fold_font_feature_values_prelude(
                &mut self.visitor,
                node,
                __ast_path,
            )
        } else {
            node
        }
    }

    #[inline]
    fn fold_forgiving_complex_selector(
        &mut self,
        node: ForgivingComplexSelector,
        __ast_path: &mut AstKindPath,
    ) -> ForgivingComplexSelector {
        if self.enabled {
            <V as FoldAstPath>::fold_forgiving_complex_selector(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_forgiving_complex_selectors(
        &mut self,
        node: Vec<ForgivingComplexSelector>,
        __ast_path: &mut AstKindPath,
    ) -> Vec<ForgivingComplexSelector> {
        if self.enabled {
            <V as FoldAstPath>::fold_forgiving_complex_selectors(
                &mut self.visitor,
                node,
                __ast_path,
            )
        } else {
            node
        }
    }

    #[inline]
    fn fold_forgiving_relative_selector(
        &mut self,
        node: ForgivingRelativeSelector,
        __ast_path: &mut AstKindPath,
    ) -> ForgivingRelativeSelector {
        if self.enabled {
            <V as FoldAstPath>::fold_forgiving_relative_selector(
                &mut self.visitor,
                node,
                __ast_path,
            )
        } else {
            node
        }
    }

    #[inline]
    fn fold_forgiving_relative_selector_list(
        &mut self,
        node: ForgivingRelativeSelectorList,
        __ast_path: &mut AstKindPath,
    ) -> ForgivingRelativeSelectorList {
        if self.enabled {
            <V as FoldAstPath>::fold_forgiving_relative_selector_list(
                &mut self.visitor,
                node,
                __ast_path,
            )
        } else {
            node
        }
    }

    #[inline]
    fn fold_forgiving_relative_selectors(
        &mut self,
        node: Vec<ForgivingRelativeSelector>,
        __ast_path: &mut AstKindPath,
    ) -> Vec<ForgivingRelativeSelector> {
        if self.enabled {
            <V as FoldAstPath>::fold_forgiving_relative_selectors(
                &mut self.visitor,
                node,
                __ast_path,
            )
        } else {
            node
        }
    }

    #[inline]
    fn fold_forgiving_selector_list(
        &mut self,
        node: ForgivingSelectorList,
        __ast_path: &mut AstKindPath,
    ) -> ForgivingSelectorList {
        if self.enabled {
            <V as FoldAstPath>::fold_forgiving_selector_list(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_frequency(&mut self, node: Frequency, __ast_path: &mut AstKindPath) -> Frequency {
        if self.enabled {
            <V as FoldAstPath>::fold_frequency(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_frequency_percentage(
        &mut self,
        node: FrequencyPercentage,
        __ast_path: &mut AstKindPath,
    ) -> FrequencyPercentage {
        if self.enabled {
            <V as FoldAstPath>::fold_frequency_percentage(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_function(&mut self, node: Function, __ast_path: &mut AstKindPath) -> Function {
        if self.enabled {
            <V as FoldAstPath>::fold_function(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_function_name(
        &mut self,
        node: FunctionName,
        __ast_path: &mut AstKindPath,
    ) -> FunctionName {
        if self.enabled {
            <V as FoldAstPath>::fold_function_name(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_general_enclosed(
        &mut self,
        node: GeneralEnclosed,
        __ast_path: &mut AstKindPath,
    ) -> GeneralEnclosed {
        if self.enabled {
            <V as FoldAstPath>::fold_general_enclosed(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_hex_color(&mut self, node: HexColor, __ast_path: &mut AstKindPath) -> HexColor {
        if self.enabled {
            <V as FoldAstPath>::fold_hex_color(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_hue(&mut self, node: Hue, __ast_path: &mut AstKindPath) -> Hue {
        if self.enabled {
            <V as FoldAstPath>::fold_hue(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_id_selector(&mut self, node: IdSelector, __ast_path: &mut AstKindPath) -> IdSelector {
        if self.enabled {
            <V as FoldAstPath>::fold_id_selector(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_ident(&mut self, node: Ident, __ast_path: &mut AstKindPath) -> Ident {
        if self.enabled {
            <V as FoldAstPath>::fold_ident(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_idents(&mut self, node: Vec<Ident>, __ast_path: &mut AstKindPath) -> Vec<Ident> {
        if self.enabled {
            <V as FoldAstPath>::fold_idents(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_import_conditions(
        &mut self,
        node: ImportConditions,
        __ast_path: &mut AstKindPath,
    ) -> ImportConditions {
        if self.enabled {
            <V as FoldAstPath>::fold_import_conditions(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_import_href(&mut self, node: ImportHref, __ast_path: &mut AstKindPath) -> ImportHref {
        if self.enabled {
            <V as FoldAstPath>::fold_import_href(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_import_layer_name(
        &mut self,
        node: ImportLayerName,
        __ast_path: &mut AstKindPath,
    ) -> ImportLayerName {
        if self.enabled {
            <V as FoldAstPath>::fold_import_layer_name(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_import_prelude(
        &mut self,
        node: ImportPrelude,
        __ast_path: &mut AstKindPath,
    ) -> ImportPrelude {
        if self.enabled {
            <V as FoldAstPath>::fold_import_prelude(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_important_flag(
        &mut self,
        node: ImportantFlag,
        __ast_path: &mut AstKindPath,
    ) -> ImportantFlag {
        if self.enabled {
            <V as FoldAstPath>::fold_important_flag(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_integer(&mut self, node: Integer, __ast_path: &mut AstKindPath) -> Integer {
        if self.enabled {
            <V as FoldAstPath>::fold_integer(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_keyframe_block(
        &mut self,
        node: KeyframeBlock,
        __ast_path: &mut AstKindPath,
    ) -> KeyframeBlock {
        if self.enabled {
            <V as FoldAstPath>::fold_keyframe_block(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_keyframe_selector(
        &mut self,
        node: KeyframeSelector,
        __ast_path: &mut AstKindPath,
    ) -> KeyframeSelector {
        if self.enabled {
            <V as FoldAstPath>::fold_keyframe_selector(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_keyframe_selectors(
        &mut self,
        node: Vec<KeyframeSelector>,
        __ast_path: &mut AstKindPath,
    ) -> Vec<KeyframeSelector> {
        if self.enabled {
            <V as FoldAstPath>::fold_keyframe_selectors(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_keyframes_name(
        &mut self,
        node: KeyframesName,
        __ast_path: &mut AstKindPath,
    ) -> KeyframesName {
        if self.enabled {
            <V as FoldAstPath>::fold_keyframes_name(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_keyframes_pseudo_function(
        &mut self,
        node: KeyframesPseudoFunction,
        __ast_path: &mut AstKindPath,
    ) -> KeyframesPseudoFunction {
        if self.enabled {
            <V as FoldAstPath>::fold_keyframes_pseudo_function(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_keyframes_pseudo_prefix(
        &mut self,
        node: KeyframesPseudoPrefix,
        __ast_path: &mut AstKindPath,
    ) -> KeyframesPseudoPrefix {
        if self.enabled {
            <V as FoldAstPath>::fold_keyframes_pseudo_prefix(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_layer_name(&mut self, node: LayerName, __ast_path: &mut AstKindPath) -> LayerName {
        if self.enabled {
            <V as FoldAstPath>::fold_layer_name(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_layer_name_list(
        &mut self,
        node: LayerNameList,
        __ast_path: &mut AstKindPath,
    ) -> LayerNameList {
        if self.enabled {
            <V as FoldAstPath>::fold_layer_name_list(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_layer_names(
        &mut self,
        node: Vec<LayerName>,
        __ast_path: &mut AstKindPath,
    ) -> Vec<LayerName> {
        if self.enabled {
            <V as FoldAstPath>::fold_layer_names(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_layer_prelude(
        &mut self,
        node: LayerPrelude,
        __ast_path: &mut AstKindPath,
    ) -> LayerPrelude {
        if self.enabled {
            <V as FoldAstPath>::fold_layer_prelude(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_length(&mut self, node: Length, __ast_path: &mut AstKindPath) -> Length {
        if self.enabled {
            <V as FoldAstPath>::fold_length(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_length_percentage(
        &mut self,
        node: LengthPercentage,
        __ast_path: &mut AstKindPath,
    ) -> LengthPercentage {
        if self.enabled {
            <V as FoldAstPath>::fold_length_percentage(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_list_of_component_values(
        &mut self,
        node: ListOfComponentValues,
        __ast_path: &mut AstKindPath,
    ) -> ListOfComponentValues {
        if self.enabled {
            <V as FoldAstPath>::fold_list_of_component_values(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_media_and(&mut self, node: MediaAnd, __ast_path: &mut AstKindPath) -> MediaAnd {
        if self.enabled {
            <V as FoldAstPath>::fold_media_and(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_media_condition(
        &mut self,
        node: MediaCondition,
        __ast_path: &mut AstKindPath,
    ) -> MediaCondition {
        if self.enabled {
            <V as FoldAstPath>::fold_media_condition(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_media_condition_all_type(
        &mut self,
        node: MediaConditionAllType,
        __ast_path: &mut AstKindPath,
    ) -> MediaConditionAllType {
        if self.enabled {
            <V as FoldAstPath>::fold_media_condition_all_type(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_media_condition_all_types(
        &mut self,
        node: Vec<MediaConditionAllType>,
        __ast_path: &mut AstKindPath,
    ) -> Vec<MediaConditionAllType> {
        if self.enabled {
            <V as FoldAstPath>::fold_media_condition_all_types(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_media_condition_type(
        &mut self,
        node: MediaConditionType,
        __ast_path: &mut AstKindPath,
    ) -> MediaConditionType {
        if self.enabled {
            <V as FoldAstPath>::fold_media_condition_type(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_media_condition_without_or(
        &mut self,
        node: MediaConditionWithoutOr,
        __ast_path: &mut AstKindPath,
    ) -> MediaConditionWithoutOr {
        if self.enabled {
            <V as FoldAstPath>::fold_media_condition_without_or(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_media_condition_without_or_type(
        &mut self,
        node: MediaConditionWithoutOrType,
        __ast_path: &mut AstKindPath,
    ) -> MediaConditionWithoutOrType {
        if self.enabled {
            <V as FoldAstPath>::fold_media_condition_without_or_type(
                &mut self.visitor,
                node,
                __ast_path,
            )
        } else {
            node
        }
    }

    #[inline]
    fn fold_media_condition_without_or_types(
        &mut self,
        node: Vec<MediaConditionWithoutOrType>,
        __ast_path: &mut AstKindPath,
    ) -> Vec<MediaConditionWithoutOrType> {
        if self.enabled {
            <V as FoldAstPath>::fold_media_condition_without_or_types(
                &mut self.visitor,
                node,
                __ast_path,
            )
        } else {
            node
        }
    }

    #[inline]
    fn fold_media_feature(
        &mut self,
        node: MediaFeature,
        __ast_path: &mut AstKindPath,
    ) -> MediaFeature {
        if self.enabled {
            <V as FoldAstPath>::fold_media_feature(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_media_feature_boolean(
        &mut self,
        node: MediaFeatureBoolean,
        __ast_path: &mut AstKindPath,
    ) -> MediaFeatureBoolean {
        if self.enabled {
            <V as FoldAstPath>::fold_media_feature_boolean(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_media_feature_name(
        &mut self,
        node: MediaFeatureName,
        __ast_path: &mut AstKindPath,
    ) -> MediaFeatureName {
        if self.enabled {
            <V as FoldAstPath>::fold_media_feature_name(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_media_feature_plain(
        &mut self,
        node: MediaFeaturePlain,
        __ast_path: &mut AstKindPath,
    ) -> MediaFeaturePlain {
        if self.enabled {
            <V as FoldAstPath>::fold_media_feature_plain(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_media_feature_range(
        &mut self,
        node: MediaFeatureRange,
        __ast_path: &mut AstKindPath,
    ) -> MediaFeatureRange {
        if self.enabled {
            <V as FoldAstPath>::fold_media_feature_range(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_media_feature_range_comparison(
        &mut self,
        node: MediaFeatureRangeComparison,
        __ast_path: &mut AstKindPath,
    ) -> MediaFeatureRangeComparison {
        if self.enabled {
            <V as FoldAstPath>::fold_media_feature_range_comparison(
                &mut self.visitor,
                node,
                __ast_path,
            )
        } else {
            node
        }
    }

    #[inline]
    fn fold_media_feature_range_interval(
        &mut self,
        node: MediaFeatureRangeInterval,
        __ast_path: &mut AstKindPath,
    ) -> MediaFeatureRangeInterval {
        if self.enabled {
            <V as FoldAstPath>::fold_media_feature_range_interval(
                &mut self.visitor,
                node,
                __ast_path,
            )
        } else {
            node
        }
    }

    #[inline]
    fn fold_media_feature_value(
        &mut self,
        node: MediaFeatureValue,
        __ast_path: &mut AstKindPath,
    ) -> MediaFeatureValue {
        if self.enabled {
            <V as FoldAstPath>::fold_media_feature_value(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_media_in_parens(
        &mut self,
        node: MediaInParens,
        __ast_path: &mut AstKindPath,
    ) -> MediaInParens {
        if self.enabled {
            <V as FoldAstPath>::fold_media_in_parens(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_media_not(&mut self, node: MediaNot, __ast_path: &mut AstKindPath) -> MediaNot {
        if self.enabled {
            <V as FoldAstPath>::fold_media_not(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_media_or(&mut self, node: MediaOr, __ast_path: &mut AstKindPath) -> MediaOr {
        if self.enabled {
            <V as FoldAstPath>::fold_media_or(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_media_query(&mut self, node: MediaQuery, __ast_path: &mut AstKindPath) -> MediaQuery {
        if self.enabled {
            <V as FoldAstPath>::fold_media_query(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_media_query_list(
        &mut self,
        node: MediaQueryList,
        __ast_path: &mut AstKindPath,
    ) -> MediaQueryList {
        if self.enabled {
            <V as FoldAstPath>::fold_media_query_list(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_media_querys(
        &mut self,
        node: Vec<MediaQuery>,
        __ast_path: &mut AstKindPath,
    ) -> Vec<MediaQuery> {
        if self.enabled {
            <V as FoldAstPath>::fold_media_querys(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_media_type(&mut self, node: MediaType, __ast_path: &mut AstKindPath) -> MediaType {
        if self.enabled {
            <V as FoldAstPath>::fold_media_type(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_named_namespace(
        &mut self,
        node: NamedNamespace,
        __ast_path: &mut AstKindPath,
    ) -> NamedNamespace {
        if self.enabled {
            <V as FoldAstPath>::fold_named_namespace(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_namespace(&mut self, node: Namespace, __ast_path: &mut AstKindPath) -> Namespace {
        if self.enabled {
            <V as FoldAstPath>::fold_namespace(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_namespace_prefix(
        &mut self,
        node: NamespacePrefix,
        __ast_path: &mut AstKindPath,
    ) -> NamespacePrefix {
        if self.enabled {
            <V as FoldAstPath>::fold_namespace_prefix(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_namespace_prelude(
        &mut self,
        node: NamespacePrelude,
        __ast_path: &mut AstKindPath,
    ) -> NamespacePrelude {
        if self.enabled {
            <V as FoldAstPath>::fold_namespace_prelude(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_namespace_prelude_uri(
        &mut self,
        node: NamespacePreludeUri,
        __ast_path: &mut AstKindPath,
    ) -> NamespacePreludeUri {
        if self.enabled {
            <V as FoldAstPath>::fold_namespace_prelude_uri(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_nesting_selector(
        &mut self,
        node: NestingSelector,
        __ast_path: &mut AstKindPath,
    ) -> NestingSelector {
        if self.enabled {
            <V as FoldAstPath>::fold_nesting_selector(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_number(&mut self, node: Number, __ast_path: &mut AstKindPath) -> Number {
        if self.enabled {
            <V as FoldAstPath>::fold_number(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_number_type(&mut self, node: NumberType, __ast_path: &mut AstKindPath) -> NumberType {
        if self.enabled {
            <V as FoldAstPath>::fold_number_type(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_opt_at_rule_prelude(
        &mut self,
        node: Option<Box<AtRulePrelude>>,
        __ast_path: &mut AstKindPath,
    ) -> Option<Box<AtRulePrelude>> {
        if self.enabled {
            <V as FoldAstPath>::fold_opt_at_rule_prelude(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_opt_atom(
        &mut self,
        node: Option<swc_atoms::Atom>,
        __ast_path: &mut AstKindPath,
    ) -> Option<swc_atoms::Atom> {
        if self.enabled {
            <V as FoldAstPath>::fold_opt_atom(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_opt_attribute_selector_matcher(
        &mut self,
        node: Option<AttributeSelectorMatcher>,
        __ast_path: &mut AstKindPath,
    ) -> Option<AttributeSelectorMatcher> {
        if self.enabled {
            <V as FoldAstPath>::fold_opt_attribute_selector_matcher(
                &mut self.visitor,
                node,
                __ast_path,
            )
        } else {
            node
        }
    }

    #[inline]
    fn fold_opt_attribute_selector_modifier(
        &mut self,
        node: Option<AttributeSelectorModifier>,
        __ast_path: &mut AstKindPath,
    ) -> Option<AttributeSelectorModifier> {
        if self.enabled {
            <V as FoldAstPath>::fold_opt_attribute_selector_modifier(
                &mut self.visitor,
                node,
                __ast_path,
            )
        } else {
            node
        }
    }

    #[inline]
    fn fold_opt_attribute_selector_value(
        &mut self,
        node: Option<AttributeSelectorValue>,
        __ast_path: &mut AstKindPath,
    ) -> Option<AttributeSelectorValue> {
        if self.enabled {
            <V as FoldAstPath>::fold_opt_attribute_selector_value(
                &mut self.visitor,
                node,
                __ast_path,
            )
        } else {
            node
        }
    }

    #[inline]
    fn fold_opt_combinator(
        &mut self,
        node: Option<Combinator>,
        __ast_path: &mut AstKindPath,
    ) -> Option<Combinator> {
        if self.enabled {
            <V as FoldAstPath>::fold_opt_combinator(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_opt_container_name(
        &mut self,
        node: Option<ContainerName>,
        __ast_path: &mut AstKindPath,
    ) -> Option<ContainerName> {
        if self.enabled {
            <V as FoldAstPath>::fold_opt_container_name(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_opt_forgiving_selector_list(
        &mut self,
        node: Option<ForgivingSelectorList>,
        __ast_path: &mut AstKindPath,
    ) -> Option<ForgivingSelectorList> {
        if self.enabled {
            <V as FoldAstPath>::fold_opt_forgiving_selector_list(
                &mut self.visitor,
                node,
                __ast_path,
            )
        } else {
            node
        }
    }

    #[inline]
    fn fold_opt_function(
        &mut self,
        node: Option<Box<Function>>,
        __ast_path: &mut AstKindPath,
    ) -> Option<Box<Function>> {
        if self.enabled {
            <V as FoldAstPath>::fold_opt_function(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_opt_ident(
        &mut self,
        node: Option<Ident>,
        __ast_path: &mut AstKindPath,
    ) -> Option<Ident> {
        if self.enabled {
            <V as FoldAstPath>::fold_opt_ident(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_opt_import_conditions(
        &mut self,
        node: Option<Box<ImportConditions>>,
        __ast_path: &mut AstKindPath,
    ) -> Option<Box<ImportConditions>> {
        if self.enabled {
            <V as FoldAstPath>::fold_opt_import_conditions(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_opt_import_layer_name(
        &mut self,
        node: Option<Box<ImportLayerName>>,
        __ast_path: &mut AstKindPath,
    ) -> Option<Box<ImportLayerName>> {
        if self.enabled {
            <V as FoldAstPath>::fold_opt_import_layer_name(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_opt_important_flag(
        &mut self,
        node: Option<ImportantFlag>,
        __ast_path: &mut AstKindPath,
    ) -> Option<ImportantFlag> {
        if self.enabled {
            <V as FoldAstPath>::fold_opt_important_flag(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_opt_media_condition_type(
        &mut self,
        node: Option<Box<MediaConditionType>>,
        __ast_path: &mut AstKindPath,
    ) -> Option<Box<MediaConditionType>> {
        if self.enabled {
            <V as FoldAstPath>::fold_opt_media_condition_type(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_opt_media_query_list(
        &mut self,
        node: Option<Box<MediaQueryList>>,
        __ast_path: &mut AstKindPath,
    ) -> Option<Box<MediaQueryList>> {
        if self.enabled {
            <V as FoldAstPath>::fold_opt_media_query_list(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_opt_media_type(
        &mut self,
        node: Option<MediaType>,
        __ast_path: &mut AstKindPath,
    ) -> Option<MediaType> {
        if self.enabled {
            <V as FoldAstPath>::fold_opt_media_type(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_opt_namespace(
        &mut self,
        node: Option<Namespace>,
        __ast_path: &mut AstKindPath,
    ) -> Option<Namespace> {
        if self.enabled {
            <V as FoldAstPath>::fold_opt_namespace(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_opt_namespace_prefix(
        &mut self,
        node: Option<NamespacePrefix>,
        __ast_path: &mut AstKindPath,
    ) -> Option<NamespacePrefix> {
        if self.enabled {
            <V as FoldAstPath>::fold_opt_namespace_prefix(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_opt_nesting_selector(
        &mut self,
        node: Option<NestingSelector>,
        __ast_path: &mut AstKindPath,
    ) -> Option<NestingSelector> {
        if self.enabled {
            <V as FoldAstPath>::fold_opt_nesting_selector(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_opt_number(
        &mut self,
        node: Option<Number>,
        __ast_path: &mut AstKindPath,
    ) -> Option<Number> {
        if self.enabled {
            <V as FoldAstPath>::fold_opt_number(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_opt_page_selector_pseudos(
        &mut self,
        node: Option<Vec<PageSelectorPseudo>>,
        __ast_path: &mut AstKindPath,
    ) -> Option<Vec<PageSelectorPseudo>> {
        if self.enabled {
            <V as FoldAstPath>::fold_opt_page_selector_pseudos(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_opt_page_selector_type(
        &mut self,
        node: Option<PageSelectorType>,
        __ast_path: &mut AstKindPath,
    ) -> Option<PageSelectorType> {
        if self.enabled {
            <V as FoldAstPath>::fold_opt_page_selector_type(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_opt_pseudo_class_selector_childrens(
        &mut self,
        node: Option<Vec<PseudoClassSelectorChildren>>,
        __ast_path: &mut AstKindPath,
    ) -> Option<Vec<PseudoClassSelectorChildren>> {
        if self.enabled {
            <V as FoldAstPath>::fold_opt_pseudo_class_selector_childrens(
                &mut self.visitor,
                node,
                __ast_path,
            )
        } else {
            node
        }
    }

    #[inline]
    fn fold_opt_pseudo_element_selector_childrens(
        &mut self,
        node: Option<Vec<PseudoElementSelectorChildren>>,
        __ast_path: &mut AstKindPath,
    ) -> Option<Vec<PseudoElementSelectorChildren>> {
        if self.enabled {
            <V as FoldAstPath>::fold_opt_pseudo_element_selector_childrens(
                &mut self.visitor,
                node,
                __ast_path,
            )
        } else {
            node
        }
    }

    #[inline]
    fn fold_opt_simple_block(
        &mut self,
        node: Option<SimpleBlock>,
        __ast_path: &mut AstKindPath,
    ) -> Option<SimpleBlock> {
        if self.enabled {
            <V as FoldAstPath>::fold_opt_simple_block(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_opt_type_selector(
        &mut self,
        node: Option<Box<TypeSelector>>,
        __ast_path: &mut AstKindPath,
    ) -> Option<Box<TypeSelector>> {
        if self.enabled {
            <V as FoldAstPath>::fold_opt_type_selector(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_opt_url_modifiers(
        &mut self,
        node: Option<Vec<UrlModifier>>,
        __ast_path: &mut AstKindPath,
    ) -> Option<Vec<UrlModifier>> {
        if self.enabled {
            <V as FoldAstPath>::fold_opt_url_modifiers(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_opt_url_value(
        &mut self,
        node: Option<Box<UrlValue>>,
        __ast_path: &mut AstKindPath,
    ) -> Option<Box<UrlValue>> {
        if self.enabled {
            <V as FoldAstPath>::fold_opt_url_value(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_page_selector(
        &mut self,
        node: PageSelector,
        __ast_path: &mut AstKindPath,
    ) -> PageSelector {
        if self.enabled {
            <V as FoldAstPath>::fold_page_selector(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_page_selector_list(
        &mut self,
        node: PageSelectorList,
        __ast_path: &mut AstKindPath,
    ) -> PageSelectorList {
        if self.enabled {
            <V as FoldAstPath>::fold_page_selector_list(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_page_selector_pseudo(
        &mut self,
        node: PageSelectorPseudo,
        __ast_path: &mut AstKindPath,
    ) -> PageSelectorPseudo {
        if self.enabled {
            <V as FoldAstPath>::fold_page_selector_pseudo(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_page_selector_pseudos(
        &mut self,
        node: Vec<PageSelectorPseudo>,
        __ast_path: &mut AstKindPath,
    ) -> Vec<PageSelectorPseudo> {
        if self.enabled {
            <V as FoldAstPath>::fold_page_selector_pseudos(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_page_selector_type(
        &mut self,
        node: PageSelectorType,
        __ast_path: &mut AstKindPath,
    ) -> PageSelectorType {
        if self.enabled {
            <V as FoldAstPath>::fold_page_selector_type(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_page_selectors(
        &mut self,
        node: Vec<PageSelector>,
        __ast_path: &mut AstKindPath,
    ) -> Vec<PageSelector> {
        if self.enabled {
            <V as FoldAstPath>::fold_page_selectors(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_percentage(&mut self, node: Percentage, __ast_path: &mut AstKindPath) -> Percentage {
        if self.enabled {
            <V as FoldAstPath>::fold_percentage(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_pseudo_class_selector(
        &mut self,
        node: PseudoClassSelector,
        __ast_path: &mut AstKindPath,
    ) -> PseudoClassSelector {
        if self.enabled {
            <V as FoldAstPath>::fold_pseudo_class_selector(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_pseudo_class_selector_children(
        &mut self,
        node: PseudoClassSelectorChildren,
        __ast_path: &mut AstKindPath,
    ) -> PseudoClassSelectorChildren {
        if self.enabled {
            <V as FoldAstPath>::fold_pseudo_class_selector_children(
                &mut self.visitor,
                node,
                __ast_path,
            )
        } else {
            node
        }
    }

    #[inline]
    fn fold_pseudo_class_selector_childrens(
        &mut self,
        node: Vec<PseudoClassSelectorChildren>,
        __ast_path: &mut AstKindPath,
    ) -> Vec<PseudoClassSelectorChildren> {
        if self.enabled {
            <V as FoldAstPath>::fold_pseudo_class_selector_childrens(
                &mut self.visitor,
                node,
                __ast_path,
            )
        } else {
            node
        }
    }

    #[inline]
    fn fold_pseudo_element_selector(
        &mut self,
        node: PseudoElementSelector,
        __ast_path: &mut AstKindPath,
    ) -> PseudoElementSelector {
        if self.enabled {
            <V as FoldAstPath>::fold_pseudo_element_selector(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_pseudo_element_selector_children(
        &mut self,
        node: PseudoElementSelectorChildren,
        __ast_path: &mut AstKindPath,
    ) -> PseudoElementSelectorChildren {
        if self.enabled {
            <V as FoldAstPath>::fold_pseudo_element_selector_children(
                &mut self.visitor,
                node,
                __ast_path,
            )
        } else {
            node
        }
    }

    #[inline]
    fn fold_pseudo_element_selector_childrens(
        &mut self,
        node: Vec<PseudoElementSelectorChildren>,
        __ast_path: &mut AstKindPath,
    ) -> Vec<PseudoElementSelectorChildren> {
        if self.enabled {
            <V as FoldAstPath>::fold_pseudo_element_selector_childrens(
                &mut self.visitor,
                node,
                __ast_path,
            )
        } else {
            node
        }
    }

    #[inline]
    fn fold_qualified_rule(
        &mut self,
        node: QualifiedRule,
        __ast_path: &mut AstKindPath,
    ) -> QualifiedRule {
        if self.enabled {
            <V as FoldAstPath>::fold_qualified_rule(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_qualified_rule_prelude(
        &mut self,
        node: QualifiedRulePrelude,
        __ast_path: &mut AstKindPath,
    ) -> QualifiedRulePrelude {
        if self.enabled {
            <V as FoldAstPath>::fold_qualified_rule_prelude(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_query_in_parens(
        &mut self,
        node: QueryInParens,
        __ast_path: &mut AstKindPath,
    ) -> QueryInParens {
        if self.enabled {
            <V as FoldAstPath>::fold_query_in_parens(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_ratio(&mut self, node: Ratio, __ast_path: &mut AstKindPath) -> Ratio {
        if self.enabled {
            <V as FoldAstPath>::fold_ratio(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_relative_selector(
        &mut self,
        node: RelativeSelector,
        __ast_path: &mut AstKindPath,
    ) -> RelativeSelector {
        if self.enabled {
            <V as FoldAstPath>::fold_relative_selector(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_relative_selector_list(
        &mut self,
        node: RelativeSelectorList,
        __ast_path: &mut AstKindPath,
    ) -> RelativeSelectorList {
        if self.enabled {
            <V as FoldAstPath>::fold_relative_selector_list(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_relative_selectors(
        &mut self,
        node: Vec<RelativeSelector>,
        __ast_path: &mut AstKindPath,
    ) -> Vec<RelativeSelector> {
        if self.enabled {
            <V as FoldAstPath>::fold_relative_selectors(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_resolution(&mut self, node: Resolution, __ast_path: &mut AstKindPath) -> Resolution {
        if self.enabled {
            <V as FoldAstPath>::fold_resolution(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_rule(&mut self, node: Rule, __ast_path: &mut AstKindPath) -> Rule {
        if self.enabled {
            <V as FoldAstPath>::fold_rule(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_rules(&mut self, node: Vec<Rule>, __ast_path: &mut AstKindPath) -> Vec<Rule> {
        if self.enabled {
            <V as FoldAstPath>::fold_rules(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_scope_range(&mut self, node: ScopeRange, __ast_path: &mut AstKindPath) -> ScopeRange {
        if self.enabled {
            <V as FoldAstPath>::fold_scope_range(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_selector_list(
        &mut self,
        node: SelectorList,
        __ast_path: &mut AstKindPath,
    ) -> SelectorList {
        if self.enabled {
            <V as FoldAstPath>::fold_selector_list(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_sequence_of_custom_idents(
        &mut self,
        node: SequenceOfCustomIdents,
        __ast_path: &mut AstKindPath,
    ) -> SequenceOfCustomIdents {
        if self.enabled {
            <V as FoldAstPath>::fold_sequence_of_custom_idents(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_simple_block(
        &mut self,
        node: SimpleBlock,
        __ast_path: &mut AstKindPath,
    ) -> SimpleBlock {
        if self.enabled {
            <V as FoldAstPath>::fold_simple_block(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_size_feature(
        &mut self,
        node: SizeFeature,
        __ast_path: &mut AstKindPath,
    ) -> SizeFeature {
        if self.enabled {
            <V as FoldAstPath>::fold_size_feature(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_size_feature_boolean(
        &mut self,
        node: SizeFeatureBoolean,
        __ast_path: &mut AstKindPath,
    ) -> SizeFeatureBoolean {
        if self.enabled {
            <V as FoldAstPath>::fold_size_feature_boolean(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_size_feature_name(
        &mut self,
        node: SizeFeatureName,
        __ast_path: &mut AstKindPath,
    ) -> SizeFeatureName {
        if self.enabled {
            <V as FoldAstPath>::fold_size_feature_name(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_size_feature_plain(
        &mut self,
        node: SizeFeaturePlain,
        __ast_path: &mut AstKindPath,
    ) -> SizeFeaturePlain {
        if self.enabled {
            <V as FoldAstPath>::fold_size_feature_plain(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_size_feature_range(
        &mut self,
        node: SizeFeatureRange,
        __ast_path: &mut AstKindPath,
    ) -> SizeFeatureRange {
        if self.enabled {
            <V as FoldAstPath>::fold_size_feature_range(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_size_feature_range_comparison(
        &mut self,
        node: SizeFeatureRangeComparison,
        __ast_path: &mut AstKindPath,
    ) -> SizeFeatureRangeComparison {
        if self.enabled {
            <V as FoldAstPath>::fold_size_feature_range_comparison(
                &mut self.visitor,
                node,
                __ast_path,
            )
        } else {
            node
        }
    }

    #[inline]
    fn fold_size_feature_range_interval(
        &mut self,
        node: SizeFeatureRangeInterval,
        __ast_path: &mut AstKindPath,
    ) -> SizeFeatureRangeInterval {
        if self.enabled {
            <V as FoldAstPath>::fold_size_feature_range_interval(
                &mut self.visitor,
                node,
                __ast_path,
            )
        } else {
            node
        }
    }

    #[inline]
    fn fold_size_feature_value(
        &mut self,
        node: SizeFeatureValue,
        __ast_path: &mut AstKindPath,
    ) -> SizeFeatureValue {
        if self.enabled {
            <V as FoldAstPath>::fold_size_feature_value(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_span(
        &mut self,
        node: swc_common::Span,
        __ast_path: &mut AstKindPath,
    ) -> swc_common::Span {
        if self.enabled {
            <V as FoldAstPath>::fold_span(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_str(&mut self, node: Str, __ast_path: &mut AstKindPath) -> Str {
        if self.enabled {
            <V as FoldAstPath>::fold_str(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_style_block(&mut self, node: StyleBlock, __ast_path: &mut AstKindPath) -> StyleBlock {
        if self.enabled {
            <V as FoldAstPath>::fold_style_block(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_stylesheet(&mut self, node: Stylesheet, __ast_path: &mut AstKindPath) -> Stylesheet {
        if self.enabled {
            <V as FoldAstPath>::fold_stylesheet(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_subclass_selector(
        &mut self,
        node: SubclassSelector,
        __ast_path: &mut AstKindPath,
    ) -> SubclassSelector {
        if self.enabled {
            <V as FoldAstPath>::fold_subclass_selector(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_subclass_selectors(
        &mut self,
        node: Vec<SubclassSelector>,
        __ast_path: &mut AstKindPath,
    ) -> Vec<SubclassSelector> {
        if self.enabled {
            <V as FoldAstPath>::fold_subclass_selectors(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_supports_and(
        &mut self,
        node: SupportsAnd,
        __ast_path: &mut AstKindPath,
    ) -> SupportsAnd {
        if self.enabled {
            <V as FoldAstPath>::fold_supports_and(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_supports_condition(
        &mut self,
        node: SupportsCondition,
        __ast_path: &mut AstKindPath,
    ) -> SupportsCondition {
        if self.enabled {
            <V as FoldAstPath>::fold_supports_condition(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_supports_condition_type(
        &mut self,
        node: SupportsConditionType,
        __ast_path: &mut AstKindPath,
    ) -> SupportsConditionType {
        if self.enabled {
            <V as FoldAstPath>::fold_supports_condition_type(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_supports_condition_types(
        &mut self,
        node: Vec<SupportsConditionType>,
        __ast_path: &mut AstKindPath,
    ) -> Vec<SupportsConditionType> {
        if self.enabled {
            <V as FoldAstPath>::fold_supports_condition_types(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_supports_feature(
        &mut self,
        node: SupportsFeature,
        __ast_path: &mut AstKindPath,
    ) -> SupportsFeature {
        if self.enabled {
            <V as FoldAstPath>::fold_supports_feature(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_supports_in_parens(
        &mut self,
        node: SupportsInParens,
        __ast_path: &mut AstKindPath,
    ) -> SupportsInParens {
        if self.enabled {
            <V as FoldAstPath>::fold_supports_in_parens(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_supports_not(
        &mut self,
        node: SupportsNot,
        __ast_path: &mut AstKindPath,
    ) -> SupportsNot {
        if self.enabled {
            <V as FoldAstPath>::fold_supports_not(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_supports_or(&mut self, node: SupportsOr, __ast_path: &mut AstKindPath) -> SupportsOr {
        if self.enabled {
            <V as FoldAstPath>::fold_supports_or(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_tag_name_selector(
        &mut self,
        node: TagNameSelector,
        __ast_path: &mut AstKindPath,
    ) -> TagNameSelector {
        if self.enabled {
            <V as FoldAstPath>::fold_tag_name_selector(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_time(&mut self, node: Time, __ast_path: &mut AstKindPath) -> Time {
        if self.enabled {
            <V as FoldAstPath>::fold_time(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_time_percentage(
        &mut self,
        node: TimePercentage,
        __ast_path: &mut AstKindPath,
    ) -> TimePercentage {
        if self.enabled {
            <V as FoldAstPath>::fold_time_percentage(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_token(&mut self, node: Token, __ast_path: &mut AstKindPath) -> Token {
        if self.enabled {
            <V as FoldAstPath>::fold_token(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_token_and_span(
        &mut self,
        node: TokenAndSpan,
        __ast_path: &mut AstKindPath,
    ) -> TokenAndSpan {
        if self.enabled {
            <V as FoldAstPath>::fold_token_and_span(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_type_selector(
        &mut self,
        node: TypeSelector,
        __ast_path: &mut AstKindPath,
    ) -> TypeSelector {
        if self.enabled {
            <V as FoldAstPath>::fold_type_selector(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_unicode_range(
        &mut self,
        node: UnicodeRange,
        __ast_path: &mut AstKindPath,
    ) -> UnicodeRange {
        if self.enabled {
            <V as FoldAstPath>::fold_unicode_range(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_universal_selector(
        &mut self,
        node: UniversalSelector,
        __ast_path: &mut AstKindPath,
    ) -> UniversalSelector {
        if self.enabled {
            <V as FoldAstPath>::fold_universal_selector(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_unknown_dimension(
        &mut self,
        node: UnknownDimension,
        __ast_path: &mut AstKindPath,
    ) -> UnknownDimension {
        if self.enabled {
            <V as FoldAstPath>::fold_unknown_dimension(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_url(&mut self, node: Url, __ast_path: &mut AstKindPath) -> Url {
        if self.enabled {
            <V as FoldAstPath>::fold_url(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_url_key_value(
        &mut self,
        node: UrlKeyValue,
        __ast_path: &mut AstKindPath,
    ) -> UrlKeyValue {
        if self.enabled {
            <V as FoldAstPath>::fold_url_key_value(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_url_modifier(
        &mut self,
        node: UrlModifier,
        __ast_path: &mut AstKindPath,
    ) -> UrlModifier {
        if self.enabled {
            <V as FoldAstPath>::fold_url_modifier(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_url_modifiers(
        &mut self,
        node: Vec<UrlModifier>,
        __ast_path: &mut AstKindPath,
    ) -> Vec<UrlModifier> {
        if self.enabled {
            <V as FoldAstPath>::fold_url_modifiers(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_url_value(&mut self, node: UrlValue, __ast_path: &mut AstKindPath) -> UrlValue {
        if self.enabled {
            <V as FoldAstPath>::fold_url_value(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_url_value_raw(
        &mut self,
        node: UrlValueRaw,
        __ast_path: &mut AstKindPath,
    ) -> UrlValueRaw {
        if self.enabled {
            <V as FoldAstPath>::fold_url_value_raw(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }

    #[inline]
    fn fold_wq_name(&mut self, node: WqName, __ast_path: &mut AstKindPath) -> WqName {
        if self.enabled {
            <V as FoldAstPath>::fold_wq_name(&mut self.visitor, node, __ast_path)
        } else {
            node
        }
    }
}
#[doc = r" A trait implemented for types that can be visited using a visitor."]
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
pub trait FoldWithAstPath<V: ?Sized + FoldAstPath> {
    #[doc = r" Calls a visitor method (visitor.fold_xxx) with self."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self;
    #[doc = r" Visit children nodes of `self`` with `visitor`."]
    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self;
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for AbsoluteColorBase {
    #[doc = "Calls [FoldAstPath`::fold_absolute_color_base`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_absolute_color_base(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            AbsoluteColorBase::HexColor { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::AbsoluteColorBase(
                    self::fields::AbsoluteColorBaseField::HexColor,
                ));
                let _field_0 = <HexColor as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                AbsoluteColorBase::HexColor { 0: _field_0 }
            }
            AbsoluteColorBase::NamedColorOrTransparent { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::AbsoluteColorBase(
                    self::fields::AbsoluteColorBaseField::NamedColorOrTransparent,
                ));
                let _field_0 = <Ident as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                AbsoluteColorBase::NamedColorOrTransparent { 0: _field_0 }
            }
            AbsoluteColorBase::Function { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::AbsoluteColorBase(
                    self::fields::AbsoluteColorBaseField::Function,
                ));
                let _field_0 = <Function as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                AbsoluteColorBase::Function { 0: _field_0 }
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for AlphaValue {
    #[doc = "Calls [FoldAstPath`::fold_alpha_value`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_alpha_value(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            AlphaValue::Number { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::AlphaValue(
                    self::fields::AlphaValueField::Number,
                ));
                let _field_0 = <Number as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                AlphaValue::Number { 0: _field_0 }
            }
            AlphaValue::Percentage { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::AlphaValue(
                    self::fields::AlphaValueField::Percentage,
                ));
                let _field_0 = <Percentage as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                AlphaValue::Percentage { 0: _field_0 }
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for AnPlusB {
    #[doc = "Calls [FoldAstPath`::fold_an_plus_b`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_an_plus_b(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            AnPlusB::Ident { 0: _field_0 } => {
                let mut __ast_path = __ast_path
                    .with_guard(AstParentKind::AnPlusB(self::fields::AnPlusBField::Ident));
                let _field_0 = <Ident as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                AnPlusB::Ident { 0: _field_0 }
            }
            AnPlusB::AnPlusBNotation { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::AnPlusB(
                    self::fields::AnPlusBField::AnPlusBNotation,
                ));
                let _field_0 = <AnPlusBNotation as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                AnPlusB::AnPlusBNotation { 0: _field_0 }
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for AnPlusBNotation {
    #[doc = "Calls [FoldAstPath`::fold_an_plus_b_notation`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_an_plus_b_notation(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            AnPlusBNotation {
                span,
                a,
                a_raw,
                b,
                b_raw,
            } => {
                let span = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::AnPlusBNotation(
                        self::fields::AnPlusBNotationField::Span,
                    ));
                    <swc_common::Span as FoldWithAstPath<V>>::fold_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let a_raw = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::AnPlusBNotation(
                        self::fields::AnPlusBNotationField::ARaw,
                    ));
                    <Option<swc_atoms::Atom> as FoldWithAstPath<V>>::fold_with_ast_path(
                        a_raw,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let b_raw = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::AnPlusBNotation(
                        self::fields::AnPlusBNotationField::BRaw,
                    ));
                    <Option<swc_atoms::Atom> as FoldWithAstPath<V>>::fold_with_ast_path(
                        b_raw,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                AnPlusBNotation {
                    span,
                    a,
                    a_raw,
                    b,
                    b_raw,
                }
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for Angle {
    #[doc = "Calls [FoldAstPath`::fold_angle`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_angle(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            Angle { span, value, unit } => {
                let span = {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentKind::Angle(self::fields::AngleField::Span));
                    <swc_common::Span as FoldWithAstPath<V>>::fold_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let value = {
                    let mut __ast_path = __ast_path
                        .with_guard(AstParentKind::Angle(self::fields::AngleField::Value));
                    <Number as FoldWithAstPath<V>>::fold_with_ast_path(
                        value,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let unit = {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentKind::Angle(self::fields::AngleField::Unit));
                    <Ident as FoldWithAstPath<V>>::fold_with_ast_path(
                        unit,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                Angle { span, value, unit }
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for AnglePercentage {
    #[doc = "Calls [FoldAstPath`::fold_angle_percentage`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_angle_percentage(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            AnglePercentage::Angle { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::AnglePercentage(
                    self::fields::AnglePercentageField::Angle,
                ));
                let _field_0 = <Angle as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                AnglePercentage::Angle { 0: _field_0 }
            }
            AnglePercentage::Percentage { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::AnglePercentage(
                    self::fields::AnglePercentageField::Percentage,
                ));
                let _field_0 = <Percentage as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                AnglePercentage::Percentage { 0: _field_0 }
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for AnyNamespace {
    #[doc = "Calls [FoldAstPath`::fold_any_namespace`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_any_namespace(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            AnyNamespace { span } => {
                let span = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::AnyNamespace(
                        self::fields::AnyNamespaceField::Span,
                    ));
                    <swc_common::Span as FoldWithAstPath<V>>::fold_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                AnyNamespace { span }
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for AtRule {
    #[doc = "Calls [FoldAstPath`::fold_at_rule`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_at_rule(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            AtRule {
                span,
                name,
                prelude,
                block,
            } => {
                let span = {
                    let mut __ast_path = __ast_path
                        .with_guard(AstParentKind::AtRule(self::fields::AtRuleField::Span));
                    <swc_common::Span as FoldWithAstPath<V>>::fold_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let name = {
                    let mut __ast_path = __ast_path
                        .with_guard(AstParentKind::AtRule(self::fields::AtRuleField::Name));
                    <AtRuleName as FoldWithAstPath<V>>::fold_with_ast_path(
                        name,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let prelude = {
                    let mut __ast_path = __ast_path
                        .with_guard(AstParentKind::AtRule(self::fields::AtRuleField::Prelude));
                    <Option<Box<AtRulePrelude>> as FoldWithAstPath<V>>::fold_with_ast_path(
                        prelude,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let block = {
                    let mut __ast_path = __ast_path
                        .with_guard(AstParentKind::AtRule(self::fields::AtRuleField::Block));
                    <Option<SimpleBlock> as FoldWithAstPath<V>>::fold_with_ast_path(
                        block,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                AtRule {
                    span,
                    name,
                    prelude,
                    block,
                }
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for AtRuleName {
    #[doc = "Calls [FoldAstPath`::fold_at_rule_name`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_at_rule_name(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            AtRuleName::DashedIdent { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::AtRuleName(
                    self::fields::AtRuleNameField::DashedIdent,
                ));
                let _field_0 = <DashedIdent as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                AtRuleName::DashedIdent { 0: _field_0 }
            }
            AtRuleName::Ident { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::AtRuleName(
                    self::fields::AtRuleNameField::Ident,
                ));
                let _field_0 = <Ident as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                AtRuleName::Ident { 0: _field_0 }
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for AtRulePrelude {
    #[doc = "Calls [FoldAstPath`::fold_at_rule_prelude`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_at_rule_prelude(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            AtRulePrelude::ListOfComponentValues { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::AtRulePrelude(
                    self::fields::AtRulePreludeField::ListOfComponentValues,
                ));
                let _field_0 = <ListOfComponentValues as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                AtRulePrelude::ListOfComponentValues { 0: _field_0 }
            }
            AtRulePrelude::CharsetPrelude { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::AtRulePrelude(
                    self::fields::AtRulePreludeField::CharsetPrelude,
                ));
                let _field_0 = <Str as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                AtRulePrelude::CharsetPrelude { 0: _field_0 }
            }
            AtRulePrelude::PropertyPrelude { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::AtRulePrelude(
                    self::fields::AtRulePreludeField::PropertyPrelude,
                ));
                let _field_0 = <CustomPropertyName as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                AtRulePrelude::PropertyPrelude { 0: _field_0 }
            }
            AtRulePrelude::CounterStylePrelude { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::AtRulePrelude(
                    self::fields::AtRulePreludeField::CounterStylePrelude,
                ));
                let _field_0 = <CustomIdent as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                AtRulePrelude::CounterStylePrelude { 0: _field_0 }
            }
            AtRulePrelude::ColorProfilePrelude { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::AtRulePrelude(
                    self::fields::AtRulePreludeField::ColorProfilePrelude,
                ));
                let _field_0 = <ColorProfileName as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                AtRulePrelude::ColorProfilePrelude { 0: _field_0 }
            }
            AtRulePrelude::DocumentPrelude { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::AtRulePrelude(
                    self::fields::AtRulePreludeField::DocumentPrelude,
                ));
                let _field_0 = <DocumentPrelude as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                AtRulePrelude::DocumentPrelude { 0: _field_0 }
            }
            AtRulePrelude::FontPaletteValuesPrelude { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::AtRulePrelude(
                    self::fields::AtRulePreludeField::FontPaletteValuesPrelude,
                ));
                let _field_0 = <DashedIdent as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                AtRulePrelude::FontPaletteValuesPrelude { 0: _field_0 }
            }
            AtRulePrelude::FontFeatureValuesPrelude { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::AtRulePrelude(
                    self::fields::AtRulePreludeField::FontFeatureValuesPrelude,
                ));
                let _field_0 = <FontFeatureValuesPrelude as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                AtRulePrelude::FontFeatureValuesPrelude { 0: _field_0 }
            }
            AtRulePrelude::NestPrelude { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::AtRulePrelude(
                    self::fields::AtRulePreludeField::NestPrelude,
                ));
                let _field_0 = <SelectorList as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                AtRulePrelude::NestPrelude { 0: _field_0 }
            }
            AtRulePrelude::KeyframesPrelude { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::AtRulePrelude(
                    self::fields::AtRulePreludeField::KeyframesPrelude,
                ));
                let _field_0 = <KeyframesName as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                AtRulePrelude::KeyframesPrelude { 0: _field_0 }
            }
            AtRulePrelude::ImportPrelude { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::AtRulePrelude(
                    self::fields::AtRulePreludeField::ImportPrelude,
                ));
                let _field_0 = <ImportPrelude as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                AtRulePrelude::ImportPrelude { 0: _field_0 }
            }
            AtRulePrelude::NamespacePrelude { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::AtRulePrelude(
                    self::fields::AtRulePreludeField::NamespacePrelude,
                ));
                let _field_0 = <NamespacePrelude as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                AtRulePrelude::NamespacePrelude { 0: _field_0 }
            }
            AtRulePrelude::MediaPrelude { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::AtRulePrelude(
                    self::fields::AtRulePreludeField::MediaPrelude,
                ));
                let _field_0 = <MediaQueryList as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                AtRulePrelude::MediaPrelude { 0: _field_0 }
            }
            AtRulePrelude::SupportsPrelude { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::AtRulePrelude(
                    self::fields::AtRulePreludeField::SupportsPrelude,
                ));
                let _field_0 = <SupportsCondition as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                AtRulePrelude::SupportsPrelude { 0: _field_0 }
            }
            AtRulePrelude::PagePrelude { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::AtRulePrelude(
                    self::fields::AtRulePreludeField::PagePrelude,
                ));
                let _field_0 = <PageSelectorList as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                AtRulePrelude::PagePrelude { 0: _field_0 }
            }
            AtRulePrelude::LayerPrelude { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::AtRulePrelude(
                    self::fields::AtRulePreludeField::LayerPrelude,
                ));
                let _field_0 = <LayerPrelude as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                AtRulePrelude::LayerPrelude { 0: _field_0 }
            }
            AtRulePrelude::ContainerPrelude { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::AtRulePrelude(
                    self::fields::AtRulePreludeField::ContainerPrelude,
                ));
                let _field_0 = <ContainerCondition as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                AtRulePrelude::ContainerPrelude { 0: _field_0 }
            }
            AtRulePrelude::CustomMediaPrelude { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::AtRulePrelude(
                    self::fields::AtRulePreludeField::CustomMediaPrelude,
                ));
                let _field_0 = <CustomMediaQuery as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                AtRulePrelude::CustomMediaPrelude { 0: _field_0 }
            }
            AtRulePrelude::ScopePrelude { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::AtRulePrelude(
                    self::fields::AtRulePreludeField::ScopePrelude,
                ));
                let _field_0 = <ScopeRange as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                AtRulePrelude::ScopePrelude { 0: _field_0 }
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for AttributeSelector {
    #[doc = "Calls [FoldAstPath`::fold_attribute_selector`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_attribute_selector(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            AttributeSelector {
                span,
                name,
                matcher,
                value,
                modifier,
            } => {
                let span = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::AttributeSelector(
                        self::fields::AttributeSelectorField::Span,
                    ));
                    <swc_common::Span as FoldWithAstPath<V>>::fold_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let name = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::AttributeSelector(
                        self::fields::AttributeSelectorField::Name,
                    ));
                    <WqName as FoldWithAstPath<V>>::fold_with_ast_path(
                        name,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let matcher = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::AttributeSelector(
                        self::fields::AttributeSelectorField::Matcher,
                    ));
                    <Option<AttributeSelectorMatcher> as FoldWithAstPath<V>>::fold_with_ast_path(
                        matcher,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let value = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::AttributeSelector(
                        self::fields::AttributeSelectorField::Value,
                    ));
                    <Option<AttributeSelectorValue> as FoldWithAstPath<V>>::fold_with_ast_path(
                        value,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let modifier = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::AttributeSelector(
                        self::fields::AttributeSelectorField::Modifier,
                    ));
                    <Option<AttributeSelectorModifier> as FoldWithAstPath<V>>::fold_with_ast_path(
                        modifier,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                AttributeSelector {
                    span,
                    name,
                    matcher,
                    value,
                    modifier,
                }
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for AttributeSelectorMatcher {
    #[doc = "Calls [FoldAstPath`::fold_attribute_selector_matcher`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_attribute_selector_matcher(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            AttributeSelectorMatcher { span, value } => {
                let span = {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentKind::AttributeSelectorMatcher(
                            self::fields::AttributeSelectorMatcherField::Span,
                        ));
                    <swc_common::Span as FoldWithAstPath<V>>::fold_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let value = {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentKind::AttributeSelectorMatcher(
                            self::fields::AttributeSelectorMatcherField::Value,
                        ));
                    <AttributeSelectorMatcherValue as FoldWithAstPath<V>>::fold_with_ast_path(
                        value,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                AttributeSelectorMatcher { span, value }
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for AttributeSelectorMatcherValue {
    #[doc = "Calls [FoldAstPath`::fold_attribute_selector_matcher_value`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_attribute_selector_matcher_value(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            AttributeSelectorMatcherValue::Equals => AttributeSelectorMatcherValue::Equals,
            AttributeSelectorMatcherValue::Tilde => AttributeSelectorMatcherValue::Tilde,
            AttributeSelectorMatcherValue::Bar => AttributeSelectorMatcherValue::Bar,
            AttributeSelectorMatcherValue::Caret => AttributeSelectorMatcherValue::Caret,
            AttributeSelectorMatcherValue::Dollar => AttributeSelectorMatcherValue::Dollar,
            AttributeSelectorMatcherValue::Asterisk => AttributeSelectorMatcherValue::Asterisk,
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for AttributeSelectorModifier {
    #[doc = "Calls [FoldAstPath`::fold_attribute_selector_modifier`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_attribute_selector_modifier(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            AttributeSelectorModifier { span, value } => {
                let span = {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentKind::AttributeSelectorModifier(
                            self::fields::AttributeSelectorModifierField::Span,
                        ));
                    <swc_common::Span as FoldWithAstPath<V>>::fold_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let value = {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentKind::AttributeSelectorModifier(
                            self::fields::AttributeSelectorModifierField::Value,
                        ));
                    <Ident as FoldWithAstPath<V>>::fold_with_ast_path(
                        value,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                AttributeSelectorModifier { span, value }
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for AttributeSelectorValue {
    #[doc = "Calls [FoldAstPath`::fold_attribute_selector_value`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_attribute_selector_value(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            AttributeSelectorValue::Str { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::AttributeSelectorValue(
                    self::fields::AttributeSelectorValueField::Str,
                ));
                let _field_0 = <Str as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                AttributeSelectorValue::Str { 0: _field_0 }
            }
            AttributeSelectorValue::Ident { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::AttributeSelectorValue(
                    self::fields::AttributeSelectorValueField::Ident,
                ));
                let _field_0 = <Ident as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                AttributeSelectorValue::Ident { 0: _field_0 }
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for BinOp {
    #[doc = "Calls [FoldAstPath`::fold_bin_op`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_bin_op(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            BinOp::Add => BinOp::Add,
            BinOp::Sub => BinOp::Sub,
            BinOp::Mul => BinOp::Mul,
            BinOp::Div => BinOp::Div,
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for CalcOperator {
    #[doc = "Calls [FoldAstPath`::fold_calc_operator`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_calc_operator(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            CalcOperator { span, value } => {
                let span = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::CalcOperator(
                        self::fields::CalcOperatorField::Span,
                    ));
                    <swc_common::Span as FoldWithAstPath<V>>::fold_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let value = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::CalcOperator(
                        self::fields::CalcOperatorField::Value,
                    ));
                    <CalcOperatorType as FoldWithAstPath<V>>::fold_with_ast_path(
                        value,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                CalcOperator { span, value }
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for CalcOperatorType {
    #[doc = "Calls [FoldAstPath`::fold_calc_operator_type`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_calc_operator_type(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            CalcOperatorType::Add => CalcOperatorType::Add,
            CalcOperatorType::Sub => CalcOperatorType::Sub,
            CalcOperatorType::Mul => CalcOperatorType::Mul,
            CalcOperatorType::Div => CalcOperatorType::Div,
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for CalcProduct {
    #[doc = "Calls [FoldAstPath`::fold_calc_product`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_calc_product(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            CalcProduct { span, expressions } => {
                let span = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::CalcProduct(
                        self::fields::CalcProductField::Span,
                    ));
                    <swc_common::Span as FoldWithAstPath<V>>::fold_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let expressions = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::CalcProduct(
                        self::fields::CalcProductField::Expressions(usize::MAX),
                    ));
                    <Vec<CalcValueOrOperator> as FoldWithAstPath<V>>::fold_with_ast_path(
                        expressions,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                CalcProduct { span, expressions }
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for CalcProductOrOperator {
    #[doc = "Calls [FoldAstPath`::fold_calc_product_or_operator`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_calc_product_or_operator(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            CalcProductOrOperator::Product { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::CalcProductOrOperator(
                    self::fields::CalcProductOrOperatorField::Product,
                ));
                let _field_0 = <CalcProduct as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                CalcProductOrOperator::Product { 0: _field_0 }
            }
            CalcProductOrOperator::Operator { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::CalcProductOrOperator(
                    self::fields::CalcProductOrOperatorField::Operator,
                ));
                let _field_0 = <CalcOperator as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                CalcProductOrOperator::Operator { 0: _field_0 }
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for CalcSum {
    #[doc = "Calls [FoldAstPath`::fold_calc_sum`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_calc_sum(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            CalcSum { span, expressions } => {
                let span = {
                    let mut __ast_path = __ast_path
                        .with_guard(AstParentKind::CalcSum(self::fields::CalcSumField::Span));
                    <swc_common::Span as FoldWithAstPath<V>>::fold_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let expressions = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::CalcSum(
                        self::fields::CalcSumField::Expressions(usize::MAX),
                    ));
                    <Vec<CalcProductOrOperator> as FoldWithAstPath<V>>::fold_with_ast_path(
                        expressions,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                CalcSum { span, expressions }
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for CalcValue {
    #[doc = "Calls [FoldAstPath`::fold_calc_value`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_calc_value(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            CalcValue::Number { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::CalcValue(
                    self::fields::CalcValueField::Number,
                ));
                let _field_0 = <Number as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                CalcValue::Number { 0: _field_0 }
            }
            CalcValue::Dimension { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::CalcValue(
                    self::fields::CalcValueField::Dimension,
                ));
                let _field_0 = <Dimension as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                CalcValue::Dimension { 0: _field_0 }
            }
            CalcValue::Percentage { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::CalcValue(
                    self::fields::CalcValueField::Percentage,
                ));
                let _field_0 = <Percentage as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                CalcValue::Percentage { 0: _field_0 }
            }
            CalcValue::Constant { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::CalcValue(
                    self::fields::CalcValueField::Constant,
                ));
                let _field_0 = <Ident as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                CalcValue::Constant { 0: _field_0 }
            }
            CalcValue::Sum { 0: _field_0 } => {
                let mut __ast_path = __ast_path
                    .with_guard(AstParentKind::CalcValue(self::fields::CalcValueField::Sum));
                let _field_0 = <CalcSum as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                CalcValue::Sum { 0: _field_0 }
            }
            CalcValue::Function { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::CalcValue(
                    self::fields::CalcValueField::Function,
                ));
                let _field_0 = <Function as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                CalcValue::Function { 0: _field_0 }
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for CalcValueOrOperator {
    #[doc = "Calls [FoldAstPath`::fold_calc_value_or_operator`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_calc_value_or_operator(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            CalcValueOrOperator::Value { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::CalcValueOrOperator(
                    self::fields::CalcValueOrOperatorField::Value,
                ));
                let _field_0 = <CalcValue as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                CalcValueOrOperator::Value { 0: _field_0 }
            }
            CalcValueOrOperator::Operator { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::CalcValueOrOperator(
                    self::fields::CalcValueOrOperatorField::Operator,
                ));
                let _field_0 = <CalcOperator as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                CalcValueOrOperator::Operator { 0: _field_0 }
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for ClassSelector {
    #[doc = "Calls [FoldAstPath`::fold_class_selector`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_class_selector(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            ClassSelector { span, text } => {
                let span = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::ClassSelector(
                        self::fields::ClassSelectorField::Span,
                    ));
                    <swc_common::Span as FoldWithAstPath<V>>::fold_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let text = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::ClassSelector(
                        self::fields::ClassSelectorField::Text,
                    ));
                    <Ident as FoldWithAstPath<V>>::fold_with_ast_path(
                        text,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                ClassSelector { span, text }
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for CmykComponent {
    #[doc = "Calls [FoldAstPath`::fold_cmyk_component`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_cmyk_component(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            CmykComponent::Number { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::CmykComponent(
                    self::fields::CmykComponentField::Number,
                ));
                let _field_0 = <Number as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                CmykComponent::Number { 0: _field_0 }
            }
            CmykComponent::Percentage { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::CmykComponent(
                    self::fields::CmykComponentField::Percentage,
                ));
                let _field_0 = <Percentage as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                CmykComponent::Percentage { 0: _field_0 }
            }
            CmykComponent::Function { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::CmykComponent(
                    self::fields::CmykComponentField::Function,
                ));
                let _field_0 = <Function as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                CmykComponent::Function { 0: _field_0 }
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for Color {
    #[doc = "Calls [FoldAstPath`::fold_color`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_color(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            Color::AbsoluteColorBase { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::Color(
                    self::fields::ColorField::AbsoluteColorBase,
                ));
                let _field_0 = <AbsoluteColorBase as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                Color::AbsoluteColorBase { 0: _field_0 }
            }
            Color::CurrentColorOrSystemColor { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::Color(
                    self::fields::ColorField::CurrentColorOrSystemColor,
                ));
                let _field_0 = <Ident as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                Color::CurrentColorOrSystemColor { 0: _field_0 }
            }
            Color::Function { 0: _field_0 } => {
                let mut __ast_path =
                    __ast_path.with_guard(AstParentKind::Color(self::fields::ColorField::Function));
                let _field_0 = <Function as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                Color::Function { 0: _field_0 }
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for ColorProfileName {
    #[doc = "Calls [FoldAstPath`::fold_color_profile_name`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_color_profile_name(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            ColorProfileName::DashedIdent { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::ColorProfileName(
                    self::fields::ColorProfileNameField::DashedIdent,
                ));
                let _field_0 = <DashedIdent as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                ColorProfileName::DashedIdent { 0: _field_0 }
            }
            ColorProfileName::Ident { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::ColorProfileName(
                    self::fields::ColorProfileNameField::Ident,
                ));
                let _field_0 = <Ident as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                ColorProfileName::Ident { 0: _field_0 }
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for Combinator {
    #[doc = "Calls [FoldAstPath`::fold_combinator`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_combinator(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            Combinator { span, value } => {
                let span = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::Combinator(
                        self::fields::CombinatorField::Span,
                    ));
                    <swc_common::Span as FoldWithAstPath<V>>::fold_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let value = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::Combinator(
                        self::fields::CombinatorField::Value,
                    ));
                    <CombinatorValue as FoldWithAstPath<V>>::fold_with_ast_path(
                        value,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                Combinator { span, value }
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for CombinatorValue {
    #[doc = "Calls [FoldAstPath`::fold_combinator_value`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_combinator_value(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            CombinatorValue::Descendant => CombinatorValue::Descendant,
            CombinatorValue::NextSibling => CombinatorValue::NextSibling,
            CombinatorValue::Child => CombinatorValue::Child,
            CombinatorValue::LaterSibling => CombinatorValue::LaterSibling,
            CombinatorValue::Column => CombinatorValue::Column,
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for ComplexSelector {
    #[doc = "Calls [FoldAstPath`::fold_complex_selector`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_complex_selector(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            ComplexSelector { span, children } => {
                let span = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::ComplexSelector(
                        self::fields::ComplexSelectorField::Span,
                    ));
                    <swc_common::Span as FoldWithAstPath<V>>::fold_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let children = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::ComplexSelector(
                        self::fields::ComplexSelectorField::Children(usize::MAX),
                    ));
                    <Vec<ComplexSelectorChildren> as FoldWithAstPath<V>>::fold_with_ast_path(
                        children,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                ComplexSelector { span, children }
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for ComplexSelectorChildren {
    #[doc = "Calls [FoldAstPath`::fold_complex_selector_children`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_complex_selector_children(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            ComplexSelectorChildren::CompoundSelector { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::ComplexSelectorChildren(
                    self::fields::ComplexSelectorChildrenField::CompoundSelector,
                ));
                let _field_0 = <CompoundSelector as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                ComplexSelectorChildren::CompoundSelector { 0: _field_0 }
            }
            ComplexSelectorChildren::Combinator { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::ComplexSelectorChildren(
                    self::fields::ComplexSelectorChildrenField::Combinator,
                ));
                let _field_0 = <Combinator as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                ComplexSelectorChildren::Combinator { 0: _field_0 }
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for ComponentValue {
    #[doc = "Calls [FoldAstPath`::fold_component_value`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_component_value(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            ComponentValue::PreservedToken { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::ComponentValue(
                    self::fields::ComponentValueField::PreservedToken,
                ));
                let _field_0 = <Box<TokenAndSpan> as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                ComponentValue::PreservedToken { 0: _field_0 }
            }
            ComponentValue::Function { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::ComponentValue(
                    self::fields::ComponentValueField::Function,
                ));
                let _field_0 = <Box<Function> as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                ComponentValue::Function { 0: _field_0 }
            }
            ComponentValue::SimpleBlock { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::ComponentValue(
                    self::fields::ComponentValueField::SimpleBlock,
                ));
                let _field_0 = <Box<SimpleBlock> as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                ComponentValue::SimpleBlock { 0: _field_0 }
            }
            ComponentValue::AtRule { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::ComponentValue(
                    self::fields::ComponentValueField::AtRule,
                ));
                let _field_0 = <Box<AtRule> as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                ComponentValue::AtRule { 0: _field_0 }
            }
            ComponentValue::QualifiedRule { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::ComponentValue(
                    self::fields::ComponentValueField::QualifiedRule,
                ));
                let _field_0 = <Box<QualifiedRule> as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                ComponentValue::QualifiedRule { 0: _field_0 }
            }
            ComponentValue::ListOfComponentValues { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::ComponentValue(
                    self::fields::ComponentValueField::ListOfComponentValues,
                ));
                let _field_0 =
                    <Box<ListOfComponentValues> as FoldWithAstPath<V>>::fold_with_ast_path(
                        _field_0,
                        visitor,
                        &mut *__ast_path,
                    );
                ComponentValue::ListOfComponentValues { 0: _field_0 }
            }
            ComponentValue::KeyframeBlock { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::ComponentValue(
                    self::fields::ComponentValueField::KeyframeBlock,
                ));
                let _field_0 = <Box<KeyframeBlock> as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                ComponentValue::KeyframeBlock { 0: _field_0 }
            }
            ComponentValue::Ident { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::ComponentValue(
                    self::fields::ComponentValueField::Ident,
                ));
                let _field_0 = <Box<Ident> as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                ComponentValue::Ident { 0: _field_0 }
            }
            ComponentValue::DashedIdent { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::ComponentValue(
                    self::fields::ComponentValueField::DashedIdent,
                ));
                let _field_0 = <Box<DashedIdent> as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                ComponentValue::DashedIdent { 0: _field_0 }
            }
            ComponentValue::Str { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::ComponentValue(
                    self::fields::ComponentValueField::Str,
                ));
                let _field_0 = <Box<Str> as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                ComponentValue::Str { 0: _field_0 }
            }
            ComponentValue::Url { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::ComponentValue(
                    self::fields::ComponentValueField::Url,
                ));
                let _field_0 = <Box<Url> as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                ComponentValue::Url { 0: _field_0 }
            }
            ComponentValue::Integer { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::ComponentValue(
                    self::fields::ComponentValueField::Integer,
                ));
                let _field_0 = <Box<Integer> as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                ComponentValue::Integer { 0: _field_0 }
            }
            ComponentValue::Number { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::ComponentValue(
                    self::fields::ComponentValueField::Number,
                ));
                let _field_0 = <Box<Number> as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                ComponentValue::Number { 0: _field_0 }
            }
            ComponentValue::Percentage { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::ComponentValue(
                    self::fields::ComponentValueField::Percentage,
                ));
                let _field_0 = <Box<Percentage> as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                ComponentValue::Percentage { 0: _field_0 }
            }
            ComponentValue::Dimension { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::ComponentValue(
                    self::fields::ComponentValueField::Dimension,
                ));
                let _field_0 = <Box<Dimension> as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                ComponentValue::Dimension { 0: _field_0 }
            }
            ComponentValue::LengthPercentage { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::ComponentValue(
                    self::fields::ComponentValueField::LengthPercentage,
                ));
                let _field_0 = <Box<LengthPercentage> as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                ComponentValue::LengthPercentage { 0: _field_0 }
            }
            ComponentValue::FrequencyPercentage { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::ComponentValue(
                    self::fields::ComponentValueField::FrequencyPercentage,
                ));
                let _field_0 = <Box<FrequencyPercentage> as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                ComponentValue::FrequencyPercentage { 0: _field_0 }
            }
            ComponentValue::AnglePercentage { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::ComponentValue(
                    self::fields::ComponentValueField::AnglePercentage,
                ));
                let _field_0 = <Box<AnglePercentage> as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                ComponentValue::AnglePercentage { 0: _field_0 }
            }
            ComponentValue::TimePercentage { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::ComponentValue(
                    self::fields::ComponentValueField::TimePercentage,
                ));
                let _field_0 = <Box<TimePercentage> as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                ComponentValue::TimePercentage { 0: _field_0 }
            }
            ComponentValue::Ratio { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::ComponentValue(
                    self::fields::ComponentValueField::Ratio,
                ));
                let _field_0 = <Box<Ratio> as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                ComponentValue::Ratio { 0: _field_0 }
            }
            ComponentValue::UnicodeRange { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::ComponentValue(
                    self::fields::ComponentValueField::UnicodeRange,
                ));
                let _field_0 = <Box<UnicodeRange> as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                ComponentValue::UnicodeRange { 0: _field_0 }
            }
            ComponentValue::Color { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::ComponentValue(
                    self::fields::ComponentValueField::Color,
                ));
                let _field_0 = <Box<Color> as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                ComponentValue::Color { 0: _field_0 }
            }
            ComponentValue::AlphaValue { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::ComponentValue(
                    self::fields::ComponentValueField::AlphaValue,
                ));
                let _field_0 = <Box<AlphaValue> as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                ComponentValue::AlphaValue { 0: _field_0 }
            }
            ComponentValue::Hue { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::ComponentValue(
                    self::fields::ComponentValueField::Hue,
                ));
                let _field_0 = <Box<Hue> as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                ComponentValue::Hue { 0: _field_0 }
            }
            ComponentValue::CmykComponent { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::ComponentValue(
                    self::fields::ComponentValueField::CmykComponent,
                ));
                let _field_0 = <Box<CmykComponent> as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                ComponentValue::CmykComponent { 0: _field_0 }
            }
            ComponentValue::Delimiter { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::ComponentValue(
                    self::fields::ComponentValueField::Delimiter,
                ));
                let _field_0 = <Box<Delimiter> as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                ComponentValue::Delimiter { 0: _field_0 }
            }
            ComponentValue::CalcSum { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::ComponentValue(
                    self::fields::ComponentValueField::CalcSum,
                ));
                let _field_0 = <Box<CalcSum> as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                ComponentValue::CalcSum { 0: _field_0 }
            }
            ComponentValue::ComplexSelector { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::ComponentValue(
                    self::fields::ComponentValueField::ComplexSelector,
                ));
                let _field_0 = <Box<ComplexSelector> as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                ComponentValue::ComplexSelector { 0: _field_0 }
            }
            ComponentValue::LayerName { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::ComponentValue(
                    self::fields::ComponentValueField::LayerName,
                ));
                let _field_0 = <Box<LayerName> as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                ComponentValue::LayerName { 0: _field_0 }
            }
            ComponentValue::SupportsCondition { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::ComponentValue(
                    self::fields::ComponentValueField::SupportsCondition,
                ));
                let _field_0 = <Box<SupportsCondition> as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                ComponentValue::SupportsCondition { 0: _field_0 }
            }
            ComponentValue::Declaration { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::ComponentValue(
                    self::fields::ComponentValueField::Declaration,
                ));
                let _field_0 = <Box<Declaration> as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                ComponentValue::Declaration { 0: _field_0 }
            }
            ComponentValue::IdSelector { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::ComponentValue(
                    self::fields::ComponentValueField::IdSelector,
                ));
                let _field_0 = <Box<IdSelector> as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                ComponentValue::IdSelector { 0: _field_0 }
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for CompoundSelector {
    #[doc = "Calls [FoldAstPath`::fold_compound_selector`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_compound_selector(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            CompoundSelector {
                span,
                nesting_selector,
                type_selector,
                subclass_selectors,
            } => {
                let span = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::CompoundSelector(
                        self::fields::CompoundSelectorField::Span,
                    ));
                    <swc_common::Span as FoldWithAstPath<V>>::fold_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let nesting_selector = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::CompoundSelector(
                        self::fields::CompoundSelectorField::NestingSelector,
                    ));
                    <Option<NestingSelector> as FoldWithAstPath<V>>::fold_with_ast_path(
                        nesting_selector,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let type_selector = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::CompoundSelector(
                        self::fields::CompoundSelectorField::TypeSelector,
                    ));
                    <Option<Box<TypeSelector>> as FoldWithAstPath<V>>::fold_with_ast_path(
                        type_selector,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let subclass_selectors = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::CompoundSelector(
                        self::fields::CompoundSelectorField::SubclassSelectors(usize::MAX),
                    ));
                    <Vec<SubclassSelector> as FoldWithAstPath<V>>::fold_with_ast_path(
                        subclass_selectors,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                CompoundSelector {
                    span,
                    nesting_selector,
                    type_selector,
                    subclass_selectors,
                }
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for CompoundSelectorList {
    #[doc = "Calls [FoldAstPath`::fold_compound_selector_list`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_compound_selector_list(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            CompoundSelectorList { span, children } => {
                let span = {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentKind::CompoundSelectorList(
                            self::fields::CompoundSelectorListField::Span,
                        ));
                    <swc_common::Span as FoldWithAstPath<V>>::fold_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let children = {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentKind::CompoundSelectorList(
                            self::fields::CompoundSelectorListField::Children(usize::MAX),
                        ));
                    <Vec<CompoundSelector> as FoldWithAstPath<V>>::fold_with_ast_path(
                        children,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                CompoundSelectorList { span, children }
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for ContainerCondition {
    #[doc = "Calls [FoldAstPath`::fold_container_condition`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_container_condition(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            ContainerCondition { span, name, query } => {
                let span = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::ContainerCondition(
                        self::fields::ContainerConditionField::Span,
                    ));
                    <swc_common::Span as FoldWithAstPath<V>>::fold_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let name = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::ContainerCondition(
                        self::fields::ContainerConditionField::Name,
                    ));
                    <Option<ContainerName> as FoldWithAstPath<V>>::fold_with_ast_path(
                        name,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let query = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::ContainerCondition(
                        self::fields::ContainerConditionField::Query,
                    ));
                    <ContainerQuery as FoldWithAstPath<V>>::fold_with_ast_path(
                        query,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                ContainerCondition { span, name, query }
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for ContainerName {
    #[doc = "Calls [FoldAstPath`::fold_container_name`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_container_name(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            ContainerName::CustomIdent { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::ContainerName(
                    self::fields::ContainerNameField::CustomIdent,
                ));
                let _field_0 = <CustomIdent as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                ContainerName::CustomIdent { 0: _field_0 }
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for ContainerQuery {
    #[doc = "Calls [FoldAstPath`::fold_container_query`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_container_query(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            ContainerQuery { span, queries } => {
                let span = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::ContainerQuery(
                        self::fields::ContainerQueryField::Span,
                    ));
                    <swc_common::Span as FoldWithAstPath<V>>::fold_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let queries = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::ContainerQuery(
                        self::fields::ContainerQueryField::Queries(usize::MAX),
                    ));
                    <Vec<ContainerQueryType> as FoldWithAstPath<V>>::fold_with_ast_path(
                        queries,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                ContainerQuery { span, queries }
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for ContainerQueryAnd {
    #[doc = "Calls [FoldAstPath`::fold_container_query_and`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_container_query_and(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            ContainerQueryAnd {
                span,
                keyword,
                query,
            } => {
                let span = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::ContainerQueryAnd(
                        self::fields::ContainerQueryAndField::Span,
                    ));
                    <swc_common::Span as FoldWithAstPath<V>>::fold_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let keyword = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::ContainerQueryAnd(
                        self::fields::ContainerQueryAndField::Keyword,
                    ));
                    <Option<Ident> as FoldWithAstPath<V>>::fold_with_ast_path(
                        keyword,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let query = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::ContainerQueryAnd(
                        self::fields::ContainerQueryAndField::Query,
                    ));
                    <QueryInParens as FoldWithAstPath<V>>::fold_with_ast_path(
                        query,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                ContainerQueryAnd {
                    span,
                    keyword,
                    query,
                }
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for ContainerQueryNot {
    #[doc = "Calls [FoldAstPath`::fold_container_query_not`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_container_query_not(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            ContainerQueryNot {
                span,
                keyword,
                query,
            } => {
                let span = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::ContainerQueryNot(
                        self::fields::ContainerQueryNotField::Span,
                    ));
                    <swc_common::Span as FoldWithAstPath<V>>::fold_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let keyword = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::ContainerQueryNot(
                        self::fields::ContainerQueryNotField::Keyword,
                    ));
                    <Option<Ident> as FoldWithAstPath<V>>::fold_with_ast_path(
                        keyword,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let query = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::ContainerQueryNot(
                        self::fields::ContainerQueryNotField::Query,
                    ));
                    <QueryInParens as FoldWithAstPath<V>>::fold_with_ast_path(
                        query,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                ContainerQueryNot {
                    span,
                    keyword,
                    query,
                }
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for ContainerQueryOr {
    #[doc = "Calls [FoldAstPath`::fold_container_query_or`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_container_query_or(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            ContainerQueryOr {
                span,
                keyword,
                query,
            } => {
                let span = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::ContainerQueryOr(
                        self::fields::ContainerQueryOrField::Span,
                    ));
                    <swc_common::Span as FoldWithAstPath<V>>::fold_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let keyword = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::ContainerQueryOr(
                        self::fields::ContainerQueryOrField::Keyword,
                    ));
                    <Option<Ident> as FoldWithAstPath<V>>::fold_with_ast_path(
                        keyword,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let query = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::ContainerQueryOr(
                        self::fields::ContainerQueryOrField::Query,
                    ));
                    <QueryInParens as FoldWithAstPath<V>>::fold_with_ast_path(
                        query,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                ContainerQueryOr {
                    span,
                    keyword,
                    query,
                }
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for ContainerQueryType {
    #[doc = "Calls [FoldAstPath`::fold_container_query_type`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_container_query_type(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            ContainerQueryType::Not { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::ContainerQueryType(
                    self::fields::ContainerQueryTypeField::Not,
                ));
                let _field_0 = <ContainerQueryNot as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                ContainerQueryType::Not { 0: _field_0 }
            }
            ContainerQueryType::And { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::ContainerQueryType(
                    self::fields::ContainerQueryTypeField::And,
                ));
                let _field_0 = <ContainerQueryAnd as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                ContainerQueryType::And { 0: _field_0 }
            }
            ContainerQueryType::Or { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::ContainerQueryType(
                    self::fields::ContainerQueryTypeField::Or,
                ));
                let _field_0 = <ContainerQueryOr as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                ContainerQueryType::Or { 0: _field_0 }
            }
            ContainerQueryType::QueryInParens { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::ContainerQueryType(
                    self::fields::ContainerQueryTypeField::QueryInParens,
                ));
                let _field_0 = <QueryInParens as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                ContainerQueryType::QueryInParens { 0: _field_0 }
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for CustomHighlightName {
    #[doc = "Calls [FoldAstPath`::fold_custom_highlight_name`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_custom_highlight_name(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            CustomHighlightName { span, value, raw } => {
                let span = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::CustomHighlightName(
                        self::fields::CustomHighlightNameField::Span,
                    ));
                    <swc_common::Span as FoldWithAstPath<V>>::fold_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let value = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::CustomHighlightName(
                        self::fields::CustomHighlightNameField::Value,
                    ));
                    <swc_atoms::Atom as FoldWithAstPath<V>>::fold_with_ast_path(
                        value,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let raw = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::CustomHighlightName(
                        self::fields::CustomHighlightNameField::Raw,
                    ));
                    <Option<swc_atoms::Atom> as FoldWithAstPath<V>>::fold_with_ast_path(
                        raw,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                CustomHighlightName { span, value, raw }
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for CustomIdent {
    #[doc = "Calls [FoldAstPath`::fold_custom_ident`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_custom_ident(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            CustomIdent { span, value, raw } => {
                let span = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::CustomIdent(
                        self::fields::CustomIdentField::Span,
                    ));
                    <swc_common::Span as FoldWithAstPath<V>>::fold_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let value = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::CustomIdent(
                        self::fields::CustomIdentField::Value,
                    ));
                    <swc_atoms::Atom as FoldWithAstPath<V>>::fold_with_ast_path(
                        value,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let raw = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::CustomIdent(
                        self::fields::CustomIdentField::Raw,
                    ));
                    <Option<swc_atoms::Atom> as FoldWithAstPath<V>>::fold_with_ast_path(
                        raw,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                CustomIdent { span, value, raw }
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for CustomMediaQuery {
    #[doc = "Calls [FoldAstPath`::fold_custom_media_query`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_custom_media_query(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            CustomMediaQuery { span, name, media } => {
                let span = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::CustomMediaQuery(
                        self::fields::CustomMediaQueryField::Span,
                    ));
                    <swc_common::Span as FoldWithAstPath<V>>::fold_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let name = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::CustomMediaQuery(
                        self::fields::CustomMediaQueryField::Name,
                    ));
                    <ExtensionName as FoldWithAstPath<V>>::fold_with_ast_path(
                        name,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let media = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::CustomMediaQuery(
                        self::fields::CustomMediaQueryField::Media,
                    ));
                    <CustomMediaQueryMediaType as FoldWithAstPath<V>>::fold_with_ast_path(
                        media,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                CustomMediaQuery { span, name, media }
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for CustomMediaQueryMediaType {
    #[doc = "Calls [FoldAstPath`::fold_custom_media_query_media_type`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_custom_media_query_media_type(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            CustomMediaQueryMediaType::Ident { 0: _field_0 } => {
                let mut __ast_path =
                    __ast_path.with_guard(AstParentKind::CustomMediaQueryMediaType(
                        self::fields::CustomMediaQueryMediaTypeField::Ident,
                    ));
                let _field_0 = <Ident as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                CustomMediaQueryMediaType::Ident { 0: _field_0 }
            }
            CustomMediaQueryMediaType::MediaQueryList { 0: _field_0 } => {
                let mut __ast_path =
                    __ast_path.with_guard(AstParentKind::CustomMediaQueryMediaType(
                        self::fields::CustomMediaQueryMediaTypeField::MediaQueryList,
                    ));
                let _field_0 = <MediaQueryList as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                CustomMediaQueryMediaType::MediaQueryList { 0: _field_0 }
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for CustomPropertyName {
    #[doc = "Calls [FoldAstPath`::fold_custom_property_name`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_custom_property_name(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            CustomPropertyName { span, value, raw } => {
                let span = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::CustomPropertyName(
                        self::fields::CustomPropertyNameField::Span,
                    ));
                    <swc_common::Span as FoldWithAstPath<V>>::fold_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let value = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::CustomPropertyName(
                        self::fields::CustomPropertyNameField::Value,
                    ));
                    <swc_atoms::Atom as FoldWithAstPath<V>>::fold_with_ast_path(
                        value,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let raw = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::CustomPropertyName(
                        self::fields::CustomPropertyNameField::Raw,
                    ));
                    <Option<swc_atoms::Atom> as FoldWithAstPath<V>>::fold_with_ast_path(
                        raw,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                CustomPropertyName { span, value, raw }
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for DashedIdent {
    #[doc = "Calls [FoldAstPath`::fold_dashed_ident`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_dashed_ident(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            DashedIdent { span, value, raw } => {
                let span = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::DashedIdent(
                        self::fields::DashedIdentField::Span,
                    ));
                    <swc_common::Span as FoldWithAstPath<V>>::fold_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let value = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::DashedIdent(
                        self::fields::DashedIdentField::Value,
                    ));
                    <swc_atoms::Atom as FoldWithAstPath<V>>::fold_with_ast_path(
                        value,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let raw = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::DashedIdent(
                        self::fields::DashedIdentField::Raw,
                    ));
                    <Option<swc_atoms::Atom> as FoldWithAstPath<V>>::fold_with_ast_path(
                        raw,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                DashedIdent { span, value, raw }
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for Declaration {
    #[doc = "Calls [FoldAstPath`::fold_declaration`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_declaration(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            Declaration {
                span,
                name,
                value,
                important,
            } => {
                let span = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::Declaration(
                        self::fields::DeclarationField::Span,
                    ));
                    <swc_common::Span as FoldWithAstPath<V>>::fold_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let name = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::Declaration(
                        self::fields::DeclarationField::Name,
                    ));
                    <DeclarationName as FoldWithAstPath<V>>::fold_with_ast_path(
                        name,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let value = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::Declaration(
                        self::fields::DeclarationField::Value(usize::MAX),
                    ));
                    <Vec<ComponentValue> as FoldWithAstPath<V>>::fold_with_ast_path(
                        value,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let important = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::Declaration(
                        self::fields::DeclarationField::Important,
                    ));
                    <Option<ImportantFlag> as FoldWithAstPath<V>>::fold_with_ast_path(
                        important,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                Declaration {
                    span,
                    name,
                    value,
                    important,
                }
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for DeclarationName {
    #[doc = "Calls [FoldAstPath`::fold_declaration_name`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_declaration_name(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            DeclarationName::Ident { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::DeclarationName(
                    self::fields::DeclarationNameField::Ident,
                ));
                let _field_0 = <Ident as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                DeclarationName::Ident { 0: _field_0 }
            }
            DeclarationName::DashedIdent { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::DeclarationName(
                    self::fields::DeclarationNameField::DashedIdent,
                ));
                let _field_0 = <DashedIdent as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                DeclarationName::DashedIdent { 0: _field_0 }
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for DeclarationOrAtRule {
    #[doc = "Calls [FoldAstPath`::fold_declaration_or_at_rule`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_declaration_or_at_rule(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            DeclarationOrAtRule::Declaration { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::DeclarationOrAtRule(
                    self::fields::DeclarationOrAtRuleField::Declaration,
                ));
                let _field_0 = <Box<Declaration> as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                DeclarationOrAtRule::Declaration { 0: _field_0 }
            }
            DeclarationOrAtRule::AtRule { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::DeclarationOrAtRule(
                    self::fields::DeclarationOrAtRuleField::AtRule,
                ));
                let _field_0 = <Box<AtRule> as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                DeclarationOrAtRule::AtRule { 0: _field_0 }
            }
            DeclarationOrAtRule::ListOfComponentValues { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::DeclarationOrAtRule(
                    self::fields::DeclarationOrAtRuleField::ListOfComponentValues,
                ));
                let _field_0 =
                    <Box<ListOfComponentValues> as FoldWithAstPath<V>>::fold_with_ast_path(
                        _field_0,
                        visitor,
                        &mut *__ast_path,
                    );
                DeclarationOrAtRule::ListOfComponentValues { 0: _field_0 }
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for Delimiter {
    #[doc = "Calls [FoldAstPath`::fold_delimiter`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_delimiter(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            Delimiter { span, value } => {
                let span = {
                    let mut __ast_path = __ast_path
                        .with_guard(AstParentKind::Delimiter(self::fields::DelimiterField::Span));
                    <swc_common::Span as FoldWithAstPath<V>>::fold_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let value = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::Delimiter(
                        self::fields::DelimiterField::Value,
                    ));
                    <DelimiterValue as FoldWithAstPath<V>>::fold_with_ast_path(
                        value,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                Delimiter { span, value }
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for DelimiterValue {
    #[doc = "Calls [FoldAstPath`::fold_delimiter_value`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_delimiter_value(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            DelimiterValue::Comma => DelimiterValue::Comma,
            DelimiterValue::Solidus => DelimiterValue::Solidus,
            DelimiterValue::Semicolon => DelimiterValue::Semicolon,
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for Dimension {
    #[doc = "Calls [FoldAstPath`::fold_dimension`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_dimension(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            Dimension::Length { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::Dimension(
                    self::fields::DimensionField::Length,
                ));
                let _field_0 = <Length as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                Dimension::Length { 0: _field_0 }
            }
            Dimension::Angle { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::Dimension(
                    self::fields::DimensionField::Angle,
                ));
                let _field_0 = <Angle as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                Dimension::Angle { 0: _field_0 }
            }
            Dimension::Time { 0: _field_0 } => {
                let mut __ast_path = __ast_path
                    .with_guard(AstParentKind::Dimension(self::fields::DimensionField::Time));
                let _field_0 = <Time as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                Dimension::Time { 0: _field_0 }
            }
            Dimension::Frequency { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::Dimension(
                    self::fields::DimensionField::Frequency,
                ));
                let _field_0 = <Frequency as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                Dimension::Frequency { 0: _field_0 }
            }
            Dimension::Resolution { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::Dimension(
                    self::fields::DimensionField::Resolution,
                ));
                let _field_0 = <Resolution as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                Dimension::Resolution { 0: _field_0 }
            }
            Dimension::Flex { 0: _field_0 } => {
                let mut __ast_path = __ast_path
                    .with_guard(AstParentKind::Dimension(self::fields::DimensionField::Flex));
                let _field_0 = <Flex as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                Dimension::Flex { 0: _field_0 }
            }
            Dimension::UnknownDimension { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::Dimension(
                    self::fields::DimensionField::UnknownDimension,
                ));
                let _field_0 = <UnknownDimension as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                Dimension::UnknownDimension { 0: _field_0 }
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for DimensionToken {
    #[doc = "Calls [FoldAstPath`::fold_dimension_token`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_dimension_token(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            DimensionToken {
                value,
                raw_value,
                unit,
                type_flag,
                raw_unit,
            } => {
                let raw_value = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::DimensionToken(
                        self::fields::DimensionTokenField::RawValue,
                    ));
                    <swc_atoms::Atom as FoldWithAstPath<V>>::fold_with_ast_path(
                        raw_value,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let unit = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::DimensionToken(
                        self::fields::DimensionTokenField::Unit,
                    ));
                    <swc_atoms::Atom as FoldWithAstPath<V>>::fold_with_ast_path(
                        unit,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let type_flag = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::DimensionToken(
                        self::fields::DimensionTokenField::TypeFlag,
                    ));
                    <NumberType as FoldWithAstPath<V>>::fold_with_ast_path(
                        type_flag,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let raw_unit = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::DimensionToken(
                        self::fields::DimensionTokenField::RawUnit,
                    ));
                    <swc_atoms::Atom as FoldWithAstPath<V>>::fold_with_ast_path(
                        raw_unit,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                DimensionToken {
                    value,
                    raw_value,
                    unit,
                    type_flag,
                    raw_unit,
                }
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for DocumentPrelude {
    #[doc = "Calls [FoldAstPath`::fold_document_prelude`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_document_prelude(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            DocumentPrelude {
                span,
                matching_functions,
            } => {
                let span = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::DocumentPrelude(
                        self::fields::DocumentPreludeField::Span,
                    ));
                    <swc_common::Span as FoldWithAstPath<V>>::fold_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let matching_functions = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::DocumentPrelude(
                        self::fields::DocumentPreludeField::MatchingFunctions(usize::MAX),
                    ));
                    <Vec<DocumentPreludeMatchingFunction> as FoldWithAstPath<V>>::fold_with_ast_path(
                        matching_functions,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                DocumentPrelude {
                    span,
                    matching_functions,
                }
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for DocumentPreludeMatchingFunction {
    #[doc = "Calls [FoldAstPath`::fold_document_prelude_matching_function`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_document_prelude_matching_function(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            DocumentPreludeMatchingFunction::Url { 0: _field_0 } => {
                let mut __ast_path =
                    __ast_path.with_guard(AstParentKind::DocumentPreludeMatchingFunction(
                        self::fields::DocumentPreludeMatchingFunctionField::Url,
                    ));
                let _field_0 = <Url as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                DocumentPreludeMatchingFunction::Url { 0: _field_0 }
            }
            DocumentPreludeMatchingFunction::Function { 0: _field_0 } => {
                let mut __ast_path =
                    __ast_path.with_guard(AstParentKind::DocumentPreludeMatchingFunction(
                        self::fields::DocumentPreludeMatchingFunctionField::Function,
                    ));
                let _field_0 = <Function as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                DocumentPreludeMatchingFunction::Function { 0: _field_0 }
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for ExtensionName {
    #[doc = "Calls [FoldAstPath`::fold_extension_name`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_extension_name(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            ExtensionName { span, value, raw } => {
                let span = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::ExtensionName(
                        self::fields::ExtensionNameField::Span,
                    ));
                    <swc_common::Span as FoldWithAstPath<V>>::fold_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let value = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::ExtensionName(
                        self::fields::ExtensionNameField::Value,
                    ));
                    <swc_atoms::Atom as FoldWithAstPath<V>>::fold_with_ast_path(
                        value,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let raw = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::ExtensionName(
                        self::fields::ExtensionNameField::Raw,
                    ));
                    <Option<swc_atoms::Atom> as FoldWithAstPath<V>>::fold_with_ast_path(
                        raw,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                ExtensionName { span, value, raw }
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for FamilyName {
    #[doc = "Calls [FoldAstPath`::fold_family_name`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_family_name(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            FamilyName::Str { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::FamilyName(
                    self::fields::FamilyNameField::Str,
                ));
                let _field_0 = <Str as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                FamilyName::Str { 0: _field_0 }
            }
            FamilyName::SequenceOfCustomIdents { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::FamilyName(
                    self::fields::FamilyNameField::SequenceOfCustomIdents,
                ));
                let _field_0 = <SequenceOfCustomIdents as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                FamilyName::SequenceOfCustomIdents { 0: _field_0 }
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for Flex {
    #[doc = "Calls [FoldAstPath`::fold_flex`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_flex(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            Flex { span, value, unit } => {
                let span = {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentKind::Flex(self::fields::FlexField::Span));
                    <swc_common::Span as FoldWithAstPath<V>>::fold_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let value = {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentKind::Flex(self::fields::FlexField::Value));
                    <Number as FoldWithAstPath<V>>::fold_with_ast_path(
                        value,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let unit = {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentKind::Flex(self::fields::FlexField::Unit));
                    <Ident as FoldWithAstPath<V>>::fold_with_ast_path(
                        unit,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                Flex { span, value, unit }
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for FontFeatureValuesPrelude {
    #[doc = "Calls [FoldAstPath`::fold_font_feature_values_prelude`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_font_feature_values_prelude(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            FontFeatureValuesPrelude { span, font_family } => {
                let span = {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentKind::FontFeatureValuesPrelude(
                            self::fields::FontFeatureValuesPreludeField::Span,
                        ));
                    <swc_common::Span as FoldWithAstPath<V>>::fold_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let font_family = {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentKind::FontFeatureValuesPrelude(
                            self::fields::FontFeatureValuesPreludeField::FontFamily(usize::MAX),
                        ));
                    <Vec<FamilyName> as FoldWithAstPath<V>>::fold_with_ast_path(
                        font_family,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                FontFeatureValuesPrelude { span, font_family }
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for ForgivingComplexSelector {
    #[doc = "Calls [FoldAstPath`::fold_forgiving_complex_selector`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_forgiving_complex_selector(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            ForgivingComplexSelector::ComplexSelector { 0: _field_0 } => {
                let mut __ast_path =
                    __ast_path.with_guard(AstParentKind::ForgivingComplexSelector(
                        self::fields::ForgivingComplexSelectorField::ComplexSelector,
                    ));
                let _field_0 = <ComplexSelector as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                ForgivingComplexSelector::ComplexSelector { 0: _field_0 }
            }
            ForgivingComplexSelector::ListOfComponentValues { 0: _field_0 } => {
                let mut __ast_path =
                    __ast_path.with_guard(AstParentKind::ForgivingComplexSelector(
                        self::fields::ForgivingComplexSelectorField::ListOfComponentValues,
                    ));
                let _field_0 = <ListOfComponentValues as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                ForgivingComplexSelector::ListOfComponentValues { 0: _field_0 }
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for ForgivingRelativeSelector {
    #[doc = "Calls [FoldAstPath`::fold_forgiving_relative_selector`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_forgiving_relative_selector(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            ForgivingRelativeSelector::RelativeSelector { 0: _field_0 } => {
                let mut __ast_path =
                    __ast_path.with_guard(AstParentKind::ForgivingRelativeSelector(
                        self::fields::ForgivingRelativeSelectorField::RelativeSelector,
                    ));
                let _field_0 = <RelativeSelector as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                ForgivingRelativeSelector::RelativeSelector { 0: _field_0 }
            }
            ForgivingRelativeSelector::ListOfComponentValues { 0: _field_0 } => {
                let mut __ast_path =
                    __ast_path.with_guard(AstParentKind::ForgivingRelativeSelector(
                        self::fields::ForgivingRelativeSelectorField::ListOfComponentValues,
                    ));
                let _field_0 = <ListOfComponentValues as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                ForgivingRelativeSelector::ListOfComponentValues { 0: _field_0 }
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for ForgivingRelativeSelectorList {
    #[doc = "Calls [FoldAstPath`::fold_forgiving_relative_selector_list`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_forgiving_relative_selector_list(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            ForgivingRelativeSelectorList { span, children } => {
                let span = {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentKind::ForgivingRelativeSelectorList(
                            self::fields::ForgivingRelativeSelectorListField::Span,
                        ));
                    <swc_common::Span as FoldWithAstPath<V>>::fold_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let children = {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentKind::ForgivingRelativeSelectorList(
                            self::fields::ForgivingRelativeSelectorListField::Children(usize::MAX),
                        ));
                    <Vec<ForgivingRelativeSelector> as FoldWithAstPath<V>>::fold_with_ast_path(
                        children,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                ForgivingRelativeSelectorList { span, children }
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for ForgivingSelectorList {
    #[doc = "Calls [FoldAstPath`::fold_forgiving_selector_list`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_forgiving_selector_list(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            ForgivingSelectorList { span, children } => {
                let span = {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentKind::ForgivingSelectorList(
                            self::fields::ForgivingSelectorListField::Span,
                        ));
                    <swc_common::Span as FoldWithAstPath<V>>::fold_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let children = {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentKind::ForgivingSelectorList(
                            self::fields::ForgivingSelectorListField::Children(usize::MAX),
                        ));
                    <Vec<ForgivingComplexSelector> as FoldWithAstPath<V>>::fold_with_ast_path(
                        children,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                ForgivingSelectorList { span, children }
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for Frequency {
    #[doc = "Calls [FoldAstPath`::fold_frequency`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_frequency(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            Frequency { span, value, unit } => {
                let span = {
                    let mut __ast_path = __ast_path
                        .with_guard(AstParentKind::Frequency(self::fields::FrequencyField::Span));
                    <swc_common::Span as FoldWithAstPath<V>>::fold_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let value = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::Frequency(
                        self::fields::FrequencyField::Value,
                    ));
                    <Number as FoldWithAstPath<V>>::fold_with_ast_path(
                        value,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let unit = {
                    let mut __ast_path = __ast_path
                        .with_guard(AstParentKind::Frequency(self::fields::FrequencyField::Unit));
                    <Ident as FoldWithAstPath<V>>::fold_with_ast_path(
                        unit,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                Frequency { span, value, unit }
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for FrequencyPercentage {
    #[doc = "Calls [FoldAstPath`::fold_frequency_percentage`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_frequency_percentage(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            FrequencyPercentage::Frequency { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::FrequencyPercentage(
                    self::fields::FrequencyPercentageField::Frequency,
                ));
                let _field_0 = <Frequency as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                FrequencyPercentage::Frequency { 0: _field_0 }
            }
            FrequencyPercentage::Percentage { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::FrequencyPercentage(
                    self::fields::FrequencyPercentageField::Percentage,
                ));
                let _field_0 = <Percentage as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                FrequencyPercentage::Percentage { 0: _field_0 }
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for Function {
    #[doc = "Calls [FoldAstPath`::fold_function`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_function(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            Function { span, name, value } => {
                let span = {
                    let mut __ast_path = __ast_path
                        .with_guard(AstParentKind::Function(self::fields::FunctionField::Span));
                    <swc_common::Span as FoldWithAstPath<V>>::fold_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let name = {
                    let mut __ast_path = __ast_path
                        .with_guard(AstParentKind::Function(self::fields::FunctionField::Name));
                    <FunctionName as FoldWithAstPath<V>>::fold_with_ast_path(
                        name,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let value = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::Function(
                        self::fields::FunctionField::Value(usize::MAX),
                    ));
                    <Vec<ComponentValue> as FoldWithAstPath<V>>::fold_with_ast_path(
                        value,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                Function { span, name, value }
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for FunctionName {
    #[doc = "Calls [FoldAstPath`::fold_function_name`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_function_name(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            FunctionName::Ident { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::FunctionName(
                    self::fields::FunctionNameField::Ident,
                ));
                let _field_0 = <Ident as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                FunctionName::Ident { 0: _field_0 }
            }
            FunctionName::DashedIdent { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::FunctionName(
                    self::fields::FunctionNameField::DashedIdent,
                ));
                let _field_0 = <DashedIdent as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                FunctionName::DashedIdent { 0: _field_0 }
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for GeneralEnclosed {
    #[doc = "Calls [FoldAstPath`::fold_general_enclosed`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_general_enclosed(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            GeneralEnclosed::Function { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::GeneralEnclosed(
                    self::fields::GeneralEnclosedField::Function,
                ));
                let _field_0 = <Function as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                GeneralEnclosed::Function { 0: _field_0 }
            }
            GeneralEnclosed::SimpleBlock { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::GeneralEnclosed(
                    self::fields::GeneralEnclosedField::SimpleBlock,
                ));
                let _field_0 = <SimpleBlock as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                GeneralEnclosed::SimpleBlock { 0: _field_0 }
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for HexColor {
    #[doc = "Calls [FoldAstPath`::fold_hex_color`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_hex_color(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            HexColor { span, value, raw } => {
                let span = {
                    let mut __ast_path = __ast_path
                        .with_guard(AstParentKind::HexColor(self::fields::HexColorField::Span));
                    <swc_common::Span as FoldWithAstPath<V>>::fold_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let value = {
                    let mut __ast_path = __ast_path
                        .with_guard(AstParentKind::HexColor(self::fields::HexColorField::Value));
                    <swc_atoms::Atom as FoldWithAstPath<V>>::fold_with_ast_path(
                        value,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let raw = {
                    let mut __ast_path = __ast_path
                        .with_guard(AstParentKind::HexColor(self::fields::HexColorField::Raw));
                    <Option<swc_atoms::Atom> as FoldWithAstPath<V>>::fold_with_ast_path(
                        raw,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                HexColor { span, value, raw }
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for Hue {
    #[doc = "Calls [FoldAstPath`::fold_hue`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_hue(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            Hue::Number { 0: _field_0 } => {
                let mut __ast_path =
                    __ast_path.with_guard(AstParentKind::Hue(self::fields::HueField::Number));
                let _field_0 = <Number as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                Hue::Number { 0: _field_0 }
            }
            Hue::Angle { 0: _field_0 } => {
                let mut __ast_path =
                    __ast_path.with_guard(AstParentKind::Hue(self::fields::HueField::Angle));
                let _field_0 = <Angle as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                Hue::Angle { 0: _field_0 }
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for IdSelector {
    #[doc = "Calls [FoldAstPath`::fold_id_selector`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_id_selector(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            IdSelector { span, text } => {
                let span = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::IdSelector(
                        self::fields::IdSelectorField::Span,
                    ));
                    <swc_common::Span as FoldWithAstPath<V>>::fold_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let text = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::IdSelector(
                        self::fields::IdSelectorField::Text,
                    ));
                    <Ident as FoldWithAstPath<V>>::fold_with_ast_path(
                        text,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                IdSelector { span, text }
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for Ident {
    #[doc = "Calls [FoldAstPath`::fold_ident`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_ident(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            Ident { span, value, raw } => {
                let span = {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentKind::Ident(self::fields::IdentField::Span));
                    <swc_common::Span as FoldWithAstPath<V>>::fold_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let value = {
                    let mut __ast_path = __ast_path
                        .with_guard(AstParentKind::Ident(self::fields::IdentField::Value));
                    <swc_atoms::Atom as FoldWithAstPath<V>>::fold_with_ast_path(
                        value,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let raw = {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentKind::Ident(self::fields::IdentField::Raw));
                    <Option<swc_atoms::Atom> as FoldWithAstPath<V>>::fold_with_ast_path(
                        raw,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                Ident { span, value, raw }
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for ImportConditions {
    #[doc = "Calls [FoldAstPath`::fold_import_conditions`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_import_conditions(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            ImportConditions {
                span,
                supports,
                media,
            } => {
                let span = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::ImportConditions(
                        self::fields::ImportConditionsField::Span,
                    ));
                    <swc_common::Span as FoldWithAstPath<V>>::fold_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let supports = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::ImportConditions(
                        self::fields::ImportConditionsField::Supports,
                    ));
                    <Option<Box<Function>> as FoldWithAstPath<V>>::fold_with_ast_path(
                        supports,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let media = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::ImportConditions(
                        self::fields::ImportConditionsField::Media,
                    ));
                    <Option<Box<MediaQueryList>> as FoldWithAstPath<V>>::fold_with_ast_path(
                        media,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                ImportConditions {
                    span,
                    supports,
                    media,
                }
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for ImportHref {
    #[doc = "Calls [FoldAstPath`::fold_import_href`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_import_href(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            ImportHref::Url { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::ImportHref(
                    self::fields::ImportHrefField::Url,
                ));
                let _field_0 = <Url as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                ImportHref::Url { 0: _field_0 }
            }
            ImportHref::Str { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::ImportHref(
                    self::fields::ImportHrefField::Str,
                ));
                let _field_0 = <Str as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                ImportHref::Str { 0: _field_0 }
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for ImportLayerName {
    #[doc = "Calls [FoldAstPath`::fold_import_layer_name`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_import_layer_name(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            ImportLayerName::Ident { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::ImportLayerName(
                    self::fields::ImportLayerNameField::Ident,
                ));
                let _field_0 = <Ident as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                ImportLayerName::Ident { 0: _field_0 }
            }
            ImportLayerName::Function { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::ImportLayerName(
                    self::fields::ImportLayerNameField::Function,
                ));
                let _field_0 = <Function as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                ImportLayerName::Function { 0: _field_0 }
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for ImportPrelude {
    #[doc = "Calls [FoldAstPath`::fold_import_prelude`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_import_prelude(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            ImportPrelude {
                span,
                href,
                layer_name,
                import_conditions,
            } => {
                let span = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::ImportPrelude(
                        self::fields::ImportPreludeField::Span,
                    ));
                    <swc_common::Span as FoldWithAstPath<V>>::fold_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let href = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::ImportPrelude(
                        self::fields::ImportPreludeField::Href,
                    ));
                    <Box<ImportHref> as FoldWithAstPath<V>>::fold_with_ast_path(
                        href,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let layer_name = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::ImportPrelude(
                        self::fields::ImportPreludeField::LayerName,
                    ));
                    <Option<Box<ImportLayerName>> as FoldWithAstPath<V>>::fold_with_ast_path(
                        layer_name,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let import_conditions = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::ImportPrelude(
                        self::fields::ImportPreludeField::ImportConditions,
                    ));
                    <Option<Box<ImportConditions>> as FoldWithAstPath<V>>::fold_with_ast_path(
                        import_conditions,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                ImportPrelude {
                    span,
                    href,
                    layer_name,
                    import_conditions,
                }
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for ImportantFlag {
    #[doc = "Calls [FoldAstPath`::fold_important_flag`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_important_flag(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            ImportantFlag { span, value } => {
                let span = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::ImportantFlag(
                        self::fields::ImportantFlagField::Span,
                    ));
                    <swc_common::Span as FoldWithAstPath<V>>::fold_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let value = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::ImportantFlag(
                        self::fields::ImportantFlagField::Value,
                    ));
                    <Ident as FoldWithAstPath<V>>::fold_with_ast_path(
                        value,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                ImportantFlag { span, value }
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for Integer {
    #[doc = "Calls [FoldAstPath`::fold_integer`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_integer(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            Integer { span, value, raw } => {
                let span = {
                    let mut __ast_path = __ast_path
                        .with_guard(AstParentKind::Integer(self::fields::IntegerField::Span));
                    <swc_common::Span as FoldWithAstPath<V>>::fold_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let raw = {
                    let mut __ast_path = __ast_path
                        .with_guard(AstParentKind::Integer(self::fields::IntegerField::Raw));
                    <Option<swc_atoms::Atom> as FoldWithAstPath<V>>::fold_with_ast_path(
                        raw,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                Integer { span, value, raw }
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for KeyframeBlock {
    #[doc = "Calls [FoldAstPath`::fold_keyframe_block`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_keyframe_block(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            KeyframeBlock {
                span,
                prelude,
                block,
            } => {
                let span = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::KeyframeBlock(
                        self::fields::KeyframeBlockField::Span,
                    ));
                    <swc_common::Span as FoldWithAstPath<V>>::fold_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let prelude = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::KeyframeBlock(
                        self::fields::KeyframeBlockField::Prelude(usize::MAX),
                    ));
                    <Vec<KeyframeSelector> as FoldWithAstPath<V>>::fold_with_ast_path(
                        prelude,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let block = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::KeyframeBlock(
                        self::fields::KeyframeBlockField::Block,
                    ));
                    <SimpleBlock as FoldWithAstPath<V>>::fold_with_ast_path(
                        block,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                KeyframeBlock {
                    span,
                    prelude,
                    block,
                }
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for KeyframeSelector {
    #[doc = "Calls [FoldAstPath`::fold_keyframe_selector`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_keyframe_selector(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            KeyframeSelector::Ident { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::KeyframeSelector(
                    self::fields::KeyframeSelectorField::Ident,
                ));
                let _field_0 = <Ident as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                KeyframeSelector::Ident { 0: _field_0 }
            }
            KeyframeSelector::Percentage { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::KeyframeSelector(
                    self::fields::KeyframeSelectorField::Percentage,
                ));
                let _field_0 = <Percentage as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                KeyframeSelector::Percentage { 0: _field_0 }
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for KeyframesName {
    #[doc = "Calls [FoldAstPath`::fold_keyframes_name`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_keyframes_name(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            KeyframesName::CustomIdent { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::KeyframesName(
                    self::fields::KeyframesNameField::CustomIdent,
                ));
                let _field_0 = <Box<CustomIdent> as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                KeyframesName::CustomIdent { 0: _field_0 }
            }
            KeyframesName::Str { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::KeyframesName(
                    self::fields::KeyframesNameField::Str,
                ));
                let _field_0 = <Box<Str> as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                KeyframesName::Str { 0: _field_0 }
            }
            KeyframesName::PseudoPrefix { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::KeyframesName(
                    self::fields::KeyframesNameField::PseudoPrefix,
                ));
                let _field_0 =
                    <Box<KeyframesPseudoPrefix> as FoldWithAstPath<V>>::fold_with_ast_path(
                        _field_0,
                        visitor,
                        &mut *__ast_path,
                    );
                KeyframesName::PseudoPrefix { 0: _field_0 }
            }
            KeyframesName::PseudoFunction { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::KeyframesName(
                    self::fields::KeyframesNameField::PseudoFunction,
                ));
                let _field_0 =
                    <Box<KeyframesPseudoFunction> as FoldWithAstPath<V>>::fold_with_ast_path(
                        _field_0,
                        visitor,
                        &mut *__ast_path,
                    );
                KeyframesName::PseudoFunction { 0: _field_0 }
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for KeyframesPseudoFunction {
    #[doc = "Calls [FoldAstPath`::fold_keyframes_pseudo_function`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_keyframes_pseudo_function(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            KeyframesPseudoFunction { span, pseudo, name } => {
                let span = {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentKind::KeyframesPseudoFunction(
                            self::fields::KeyframesPseudoFunctionField::Span,
                        ));
                    <swc_common::Span as FoldWithAstPath<V>>::fold_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let pseudo = {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentKind::KeyframesPseudoFunction(
                            self::fields::KeyframesPseudoFunctionField::Pseudo,
                        ));
                    <Ident as FoldWithAstPath<V>>::fold_with_ast_path(
                        pseudo,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let name = {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentKind::KeyframesPseudoFunction(
                            self::fields::KeyframesPseudoFunctionField::Name,
                        ));
                    <KeyframesName as FoldWithAstPath<V>>::fold_with_ast_path(
                        name,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                KeyframesPseudoFunction { span, pseudo, name }
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for KeyframesPseudoPrefix {
    #[doc = "Calls [FoldAstPath`::fold_keyframes_pseudo_prefix`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_keyframes_pseudo_prefix(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            KeyframesPseudoPrefix { span, pseudo, name } => {
                let span = {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentKind::KeyframesPseudoPrefix(
                            self::fields::KeyframesPseudoPrefixField::Span,
                        ));
                    <swc_common::Span as FoldWithAstPath<V>>::fold_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let pseudo = {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentKind::KeyframesPseudoPrefix(
                            self::fields::KeyframesPseudoPrefixField::Pseudo,
                        ));
                    <Ident as FoldWithAstPath<V>>::fold_with_ast_path(
                        pseudo,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let name = {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentKind::KeyframesPseudoPrefix(
                            self::fields::KeyframesPseudoPrefixField::Name,
                        ));
                    <KeyframesName as FoldWithAstPath<V>>::fold_with_ast_path(
                        name,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                KeyframesPseudoPrefix { span, pseudo, name }
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for LayerName {
    #[doc = "Calls [FoldAstPath`::fold_layer_name`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_layer_name(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            LayerName { span, name } => {
                let span = {
                    let mut __ast_path = __ast_path
                        .with_guard(AstParentKind::LayerName(self::fields::LayerNameField::Span));
                    <swc_common::Span as FoldWithAstPath<V>>::fold_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let name = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::LayerName(
                        self::fields::LayerNameField::Name(usize::MAX),
                    ));
                    <Vec<Ident> as FoldWithAstPath<V>>::fold_with_ast_path(
                        name,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                LayerName { span, name }
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for LayerNameList {
    #[doc = "Calls [FoldAstPath`::fold_layer_name_list`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_layer_name_list(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            LayerNameList { span, name_list } => {
                let span = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::LayerNameList(
                        self::fields::LayerNameListField::Span,
                    ));
                    <swc_common::Span as FoldWithAstPath<V>>::fold_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let name_list = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::LayerNameList(
                        self::fields::LayerNameListField::NameList(usize::MAX),
                    ));
                    <Vec<LayerName> as FoldWithAstPath<V>>::fold_with_ast_path(
                        name_list,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                LayerNameList { span, name_list }
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for LayerPrelude {
    #[doc = "Calls [FoldAstPath`::fold_layer_prelude`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_layer_prelude(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            LayerPrelude::Name { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::LayerPrelude(
                    self::fields::LayerPreludeField::Name,
                ));
                let _field_0 = <LayerName as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                LayerPrelude::Name { 0: _field_0 }
            }
            LayerPrelude::NameList { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::LayerPrelude(
                    self::fields::LayerPreludeField::NameList,
                ));
                let _field_0 = <LayerNameList as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                LayerPrelude::NameList { 0: _field_0 }
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for Length {
    #[doc = "Calls [FoldAstPath`::fold_length`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_length(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            Length { span, value, unit } => {
                let span = {
                    let mut __ast_path = __ast_path
                        .with_guard(AstParentKind::Length(self::fields::LengthField::Span));
                    <swc_common::Span as FoldWithAstPath<V>>::fold_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let value = {
                    let mut __ast_path = __ast_path
                        .with_guard(AstParentKind::Length(self::fields::LengthField::Value));
                    <Number as FoldWithAstPath<V>>::fold_with_ast_path(
                        value,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let unit = {
                    let mut __ast_path = __ast_path
                        .with_guard(AstParentKind::Length(self::fields::LengthField::Unit));
                    <Ident as FoldWithAstPath<V>>::fold_with_ast_path(
                        unit,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                Length { span, value, unit }
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for LengthPercentage {
    #[doc = "Calls [FoldAstPath`::fold_length_percentage`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_length_percentage(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            LengthPercentage::Length { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::LengthPercentage(
                    self::fields::LengthPercentageField::Length,
                ));
                let _field_0 = <Length as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                LengthPercentage::Length { 0: _field_0 }
            }
            LengthPercentage::Percentage { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::LengthPercentage(
                    self::fields::LengthPercentageField::Percentage,
                ));
                let _field_0 = <Percentage as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                LengthPercentage::Percentage { 0: _field_0 }
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for ListOfComponentValues {
    #[doc = "Calls [FoldAstPath`::fold_list_of_component_values`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_list_of_component_values(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            ListOfComponentValues { span, children } => {
                let span = {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentKind::ListOfComponentValues(
                            self::fields::ListOfComponentValuesField::Span,
                        ));
                    <swc_common::Span as FoldWithAstPath<V>>::fold_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let children = {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentKind::ListOfComponentValues(
                            self::fields::ListOfComponentValuesField::Children(usize::MAX),
                        ));
                    <Vec<ComponentValue> as FoldWithAstPath<V>>::fold_with_ast_path(
                        children,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                ListOfComponentValues { span, children }
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for MediaAnd {
    #[doc = "Calls [FoldAstPath`::fold_media_and`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_media_and(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            MediaAnd {
                span,
                keyword,
                condition,
            } => {
                let span = {
                    let mut __ast_path = __ast_path
                        .with_guard(AstParentKind::MediaAnd(self::fields::MediaAndField::Span));
                    <swc_common::Span as FoldWithAstPath<V>>::fold_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let keyword = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::MediaAnd(
                        self::fields::MediaAndField::Keyword,
                    ));
                    <Option<Ident> as FoldWithAstPath<V>>::fold_with_ast_path(
                        keyword,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let condition = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::MediaAnd(
                        self::fields::MediaAndField::Condition,
                    ));
                    <MediaInParens as FoldWithAstPath<V>>::fold_with_ast_path(
                        condition,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                MediaAnd {
                    span,
                    keyword,
                    condition,
                }
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for MediaCondition {
    #[doc = "Calls [FoldAstPath`::fold_media_condition`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_media_condition(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            MediaCondition { span, conditions } => {
                let span = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::MediaCondition(
                        self::fields::MediaConditionField::Span,
                    ));
                    <swc_common::Span as FoldWithAstPath<V>>::fold_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let conditions = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::MediaCondition(
                        self::fields::MediaConditionField::Conditions(usize::MAX),
                    ));
                    <Vec<MediaConditionAllType> as FoldWithAstPath<V>>::fold_with_ast_path(
                        conditions,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                MediaCondition { span, conditions }
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for MediaConditionAllType {
    #[doc = "Calls [FoldAstPath`::fold_media_condition_all_type`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_media_condition_all_type(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            MediaConditionAllType::Not { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::MediaConditionAllType(
                    self::fields::MediaConditionAllTypeField::Not,
                ));
                let _field_0 = <MediaNot as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                MediaConditionAllType::Not { 0: _field_0 }
            }
            MediaConditionAllType::And { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::MediaConditionAllType(
                    self::fields::MediaConditionAllTypeField::And,
                ));
                let _field_0 = <MediaAnd as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                MediaConditionAllType::And { 0: _field_0 }
            }
            MediaConditionAllType::Or { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::MediaConditionAllType(
                    self::fields::MediaConditionAllTypeField::Or,
                ));
                let _field_0 = <MediaOr as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                MediaConditionAllType::Or { 0: _field_0 }
            }
            MediaConditionAllType::MediaInParens { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::MediaConditionAllType(
                    self::fields::MediaConditionAllTypeField::MediaInParens,
                ));
                let _field_0 = <MediaInParens as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                MediaConditionAllType::MediaInParens { 0: _field_0 }
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for MediaConditionType {
    #[doc = "Calls [FoldAstPath`::fold_media_condition_type`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_media_condition_type(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            MediaConditionType::All { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::MediaConditionType(
                    self::fields::MediaConditionTypeField::All,
                ));
                let _field_0 = <MediaCondition as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                MediaConditionType::All { 0: _field_0 }
            }
            MediaConditionType::WithoutOr { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::MediaConditionType(
                    self::fields::MediaConditionTypeField::WithoutOr,
                ));
                let _field_0 = <MediaConditionWithoutOr as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                MediaConditionType::WithoutOr { 0: _field_0 }
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for MediaConditionWithoutOr {
    #[doc = "Calls [FoldAstPath`::fold_media_condition_without_or`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_media_condition_without_or(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            MediaConditionWithoutOr { span, conditions } => {
                let span = {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentKind::MediaConditionWithoutOr(
                            self::fields::MediaConditionWithoutOrField::Span,
                        ));
                    <swc_common::Span as FoldWithAstPath<V>>::fold_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let conditions = {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentKind::MediaConditionWithoutOr(
                            self::fields::MediaConditionWithoutOrField::Conditions(usize::MAX),
                        ));
                    <Vec<MediaConditionWithoutOrType> as FoldWithAstPath<V>>::fold_with_ast_path(
                        conditions,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                MediaConditionWithoutOr { span, conditions }
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for MediaConditionWithoutOrType {
    #[doc = "Calls [FoldAstPath`::fold_media_condition_without_or_type`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_media_condition_without_or_type(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            MediaConditionWithoutOrType::Not { 0: _field_0 } => {
                let mut __ast_path =
                    __ast_path.with_guard(AstParentKind::MediaConditionWithoutOrType(
                        self::fields::MediaConditionWithoutOrTypeField::Not,
                    ));
                let _field_0 = <MediaNot as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                MediaConditionWithoutOrType::Not { 0: _field_0 }
            }
            MediaConditionWithoutOrType::And { 0: _field_0 } => {
                let mut __ast_path =
                    __ast_path.with_guard(AstParentKind::MediaConditionWithoutOrType(
                        self::fields::MediaConditionWithoutOrTypeField::And,
                    ));
                let _field_0 = <MediaAnd as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                MediaConditionWithoutOrType::And { 0: _field_0 }
            }
            MediaConditionWithoutOrType::MediaInParens { 0: _field_0 } => {
                let mut __ast_path =
                    __ast_path.with_guard(AstParentKind::MediaConditionWithoutOrType(
                        self::fields::MediaConditionWithoutOrTypeField::MediaInParens,
                    ));
                let _field_0 = <MediaInParens as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                MediaConditionWithoutOrType::MediaInParens { 0: _field_0 }
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for MediaFeature {
    #[doc = "Calls [FoldAstPath`::fold_media_feature`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_media_feature(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            MediaFeature::Plain { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::MediaFeature(
                    self::fields::MediaFeatureField::Plain,
                ));
                let _field_0 = <MediaFeaturePlain as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                MediaFeature::Plain { 0: _field_0 }
            }
            MediaFeature::Boolean { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::MediaFeature(
                    self::fields::MediaFeatureField::Boolean,
                ));
                let _field_0 = <MediaFeatureBoolean as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                MediaFeature::Boolean { 0: _field_0 }
            }
            MediaFeature::Range { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::MediaFeature(
                    self::fields::MediaFeatureField::Range,
                ));
                let _field_0 = <MediaFeatureRange as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                MediaFeature::Range { 0: _field_0 }
            }
            MediaFeature::RangeInterval { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::MediaFeature(
                    self::fields::MediaFeatureField::RangeInterval,
                ));
                let _field_0 =
                    <MediaFeatureRangeInterval as FoldWithAstPath<V>>::fold_with_ast_path(
                        _field_0,
                        visitor,
                        &mut *__ast_path,
                    );
                MediaFeature::RangeInterval { 0: _field_0 }
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for MediaFeatureBoolean {
    #[doc = "Calls [FoldAstPath`::fold_media_feature_boolean`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_media_feature_boolean(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            MediaFeatureBoolean { span, name } => {
                let span = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::MediaFeatureBoolean(
                        self::fields::MediaFeatureBooleanField::Span,
                    ));
                    <swc_common::Span as FoldWithAstPath<V>>::fold_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let name = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::MediaFeatureBoolean(
                        self::fields::MediaFeatureBooleanField::Name,
                    ));
                    <MediaFeatureName as FoldWithAstPath<V>>::fold_with_ast_path(
                        name,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                MediaFeatureBoolean { span, name }
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for MediaFeatureName {
    #[doc = "Calls [FoldAstPath`::fold_media_feature_name`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_media_feature_name(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            MediaFeatureName::Ident { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::MediaFeatureName(
                    self::fields::MediaFeatureNameField::Ident,
                ));
                let _field_0 = <Ident as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                MediaFeatureName::Ident { 0: _field_0 }
            }
            MediaFeatureName::ExtensionName { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::MediaFeatureName(
                    self::fields::MediaFeatureNameField::ExtensionName,
                ));
                let _field_0 = <ExtensionName as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                MediaFeatureName::ExtensionName { 0: _field_0 }
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for MediaFeaturePlain {
    #[doc = "Calls [FoldAstPath`::fold_media_feature_plain`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_media_feature_plain(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            MediaFeaturePlain { span, name, value } => {
                let span = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::MediaFeaturePlain(
                        self::fields::MediaFeaturePlainField::Span,
                    ));
                    <swc_common::Span as FoldWithAstPath<V>>::fold_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let name = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::MediaFeaturePlain(
                        self::fields::MediaFeaturePlainField::Name,
                    ));
                    <MediaFeatureName as FoldWithAstPath<V>>::fold_with_ast_path(
                        name,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let value = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::MediaFeaturePlain(
                        self::fields::MediaFeaturePlainField::Value,
                    ));
                    <Box<MediaFeatureValue> as FoldWithAstPath<V>>::fold_with_ast_path(
                        value,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                MediaFeaturePlain { span, name, value }
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for MediaFeatureRange {
    #[doc = "Calls [FoldAstPath`::fold_media_feature_range`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_media_feature_range(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            MediaFeatureRange {
                span,
                left,
                comparison,
                right,
            } => {
                let span = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::MediaFeatureRange(
                        self::fields::MediaFeatureRangeField::Span,
                    ));
                    <swc_common::Span as FoldWithAstPath<V>>::fold_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let left = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::MediaFeatureRange(
                        self::fields::MediaFeatureRangeField::Left,
                    ));
                    <Box<MediaFeatureValue> as FoldWithAstPath<V>>::fold_with_ast_path(
                        left,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let comparison = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::MediaFeatureRange(
                        self::fields::MediaFeatureRangeField::Comparison,
                    ));
                    <MediaFeatureRangeComparison as FoldWithAstPath<V>>::fold_with_ast_path(
                        comparison,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let right = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::MediaFeatureRange(
                        self::fields::MediaFeatureRangeField::Right,
                    ));
                    <Box<MediaFeatureValue> as FoldWithAstPath<V>>::fold_with_ast_path(
                        right,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                MediaFeatureRange {
                    span,
                    left,
                    comparison,
                    right,
                }
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for MediaFeatureRangeComparison {
    #[doc = "Calls [FoldAstPath`::fold_media_feature_range_comparison`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_media_feature_range_comparison(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            MediaFeatureRangeComparison::Lt => MediaFeatureRangeComparison::Lt,
            MediaFeatureRangeComparison::Le => MediaFeatureRangeComparison::Le,
            MediaFeatureRangeComparison::Gt => MediaFeatureRangeComparison::Gt,
            MediaFeatureRangeComparison::Ge => MediaFeatureRangeComparison::Ge,
            MediaFeatureRangeComparison::Eq => MediaFeatureRangeComparison::Eq,
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for MediaFeatureRangeInterval {
    #[doc = "Calls [FoldAstPath`::fold_media_feature_range_interval`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_media_feature_range_interval(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            MediaFeatureRangeInterval {
                span,
                left,
                left_comparison,
                name,
                right_comparison,
                right,
            } => {
                let span = {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentKind::MediaFeatureRangeInterval(
                            self::fields::MediaFeatureRangeIntervalField::Span,
                        ));
                    <swc_common::Span as FoldWithAstPath<V>>::fold_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let left = {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentKind::MediaFeatureRangeInterval(
                            self::fields::MediaFeatureRangeIntervalField::Left,
                        ));
                    <Box<MediaFeatureValue> as FoldWithAstPath<V>>::fold_with_ast_path(
                        left,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let left_comparison = {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentKind::MediaFeatureRangeInterval(
                            self::fields::MediaFeatureRangeIntervalField::LeftComparison,
                        ));
                    <MediaFeatureRangeComparison as FoldWithAstPath<V>>::fold_with_ast_path(
                        left_comparison,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let name = {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentKind::MediaFeatureRangeInterval(
                            self::fields::MediaFeatureRangeIntervalField::Name,
                        ));
                    <MediaFeatureName as FoldWithAstPath<V>>::fold_with_ast_path(
                        name,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let right_comparison = {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentKind::MediaFeatureRangeInterval(
                            self::fields::MediaFeatureRangeIntervalField::RightComparison,
                        ));
                    <MediaFeatureRangeComparison as FoldWithAstPath<V>>::fold_with_ast_path(
                        right_comparison,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let right = {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentKind::MediaFeatureRangeInterval(
                            self::fields::MediaFeatureRangeIntervalField::Right,
                        ));
                    <Box<MediaFeatureValue> as FoldWithAstPath<V>>::fold_with_ast_path(
                        right,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                MediaFeatureRangeInterval {
                    span,
                    left,
                    left_comparison,
                    name,
                    right_comparison,
                    right,
                }
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for MediaFeatureValue {
    #[doc = "Calls [FoldAstPath`::fold_media_feature_value`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_media_feature_value(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            MediaFeatureValue::Number { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::MediaFeatureValue(
                    self::fields::MediaFeatureValueField::Number,
                ));
                let _field_0 = <Number as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                MediaFeatureValue::Number { 0: _field_0 }
            }
            MediaFeatureValue::Dimension { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::MediaFeatureValue(
                    self::fields::MediaFeatureValueField::Dimension,
                ));
                let _field_0 = <Dimension as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                MediaFeatureValue::Dimension { 0: _field_0 }
            }
            MediaFeatureValue::Ident { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::MediaFeatureValue(
                    self::fields::MediaFeatureValueField::Ident,
                ));
                let _field_0 = <Ident as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                MediaFeatureValue::Ident { 0: _field_0 }
            }
            MediaFeatureValue::Ratio { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::MediaFeatureValue(
                    self::fields::MediaFeatureValueField::Ratio,
                ));
                let _field_0 = <Ratio as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                MediaFeatureValue::Ratio { 0: _field_0 }
            }
            MediaFeatureValue::Function { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::MediaFeatureValue(
                    self::fields::MediaFeatureValueField::Function,
                ));
                let _field_0 = <Function as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                MediaFeatureValue::Function { 0: _field_0 }
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for MediaInParens {
    #[doc = "Calls [FoldAstPath`::fold_media_in_parens`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_media_in_parens(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            MediaInParens::MediaCondition { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::MediaInParens(
                    self::fields::MediaInParensField::MediaCondition,
                ));
                let _field_0 = <MediaCondition as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                MediaInParens::MediaCondition { 0: _field_0 }
            }
            MediaInParens::Feature { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::MediaInParens(
                    self::fields::MediaInParensField::Feature,
                ));
                let _field_0 = <Box<MediaFeature> as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                MediaInParens::Feature { 0: _field_0 }
            }
            MediaInParens::GeneralEnclosed { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::MediaInParens(
                    self::fields::MediaInParensField::GeneralEnclosed,
                ));
                let _field_0 = <GeneralEnclosed as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                MediaInParens::GeneralEnclosed { 0: _field_0 }
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for MediaNot {
    #[doc = "Calls [FoldAstPath`::fold_media_not`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_media_not(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            MediaNot {
                span,
                keyword,
                condition,
            } => {
                let span = {
                    let mut __ast_path = __ast_path
                        .with_guard(AstParentKind::MediaNot(self::fields::MediaNotField::Span));
                    <swc_common::Span as FoldWithAstPath<V>>::fold_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let keyword = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::MediaNot(
                        self::fields::MediaNotField::Keyword,
                    ));
                    <Option<Ident> as FoldWithAstPath<V>>::fold_with_ast_path(
                        keyword,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let condition = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::MediaNot(
                        self::fields::MediaNotField::Condition,
                    ));
                    <MediaInParens as FoldWithAstPath<V>>::fold_with_ast_path(
                        condition,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                MediaNot {
                    span,
                    keyword,
                    condition,
                }
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for MediaOr {
    #[doc = "Calls [FoldAstPath`::fold_media_or`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_media_or(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            MediaOr {
                span,
                keyword,
                condition,
            } => {
                let span = {
                    let mut __ast_path = __ast_path
                        .with_guard(AstParentKind::MediaOr(self::fields::MediaOrField::Span));
                    <swc_common::Span as FoldWithAstPath<V>>::fold_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let keyword = {
                    let mut __ast_path = __ast_path
                        .with_guard(AstParentKind::MediaOr(self::fields::MediaOrField::Keyword));
                    <Option<Ident> as FoldWithAstPath<V>>::fold_with_ast_path(
                        keyword,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let condition = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::MediaOr(
                        self::fields::MediaOrField::Condition,
                    ));
                    <MediaInParens as FoldWithAstPath<V>>::fold_with_ast_path(
                        condition,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                MediaOr {
                    span,
                    keyword,
                    condition,
                }
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for MediaQuery {
    #[doc = "Calls [FoldAstPath`::fold_media_query`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_media_query(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            MediaQuery {
                span,
                modifier,
                media_type,
                keyword,
                condition,
            } => {
                let span = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::MediaQuery(
                        self::fields::MediaQueryField::Span,
                    ));
                    <swc_common::Span as FoldWithAstPath<V>>::fold_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let modifier = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::MediaQuery(
                        self::fields::MediaQueryField::Modifier,
                    ));
                    <Option<Ident> as FoldWithAstPath<V>>::fold_with_ast_path(
                        modifier,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let media_type = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::MediaQuery(
                        self::fields::MediaQueryField::MediaType,
                    ));
                    <Option<MediaType> as FoldWithAstPath<V>>::fold_with_ast_path(
                        media_type,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let keyword = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::MediaQuery(
                        self::fields::MediaQueryField::Keyword,
                    ));
                    <Option<Ident> as FoldWithAstPath<V>>::fold_with_ast_path(
                        keyword,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let condition = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::MediaQuery(
                        self::fields::MediaQueryField::Condition,
                    ));
                    <Option<Box<MediaConditionType>> as FoldWithAstPath<V>>::fold_with_ast_path(
                        condition,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                MediaQuery {
                    span,
                    modifier,
                    media_type,
                    keyword,
                    condition,
                }
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for MediaQueryList {
    #[doc = "Calls [FoldAstPath`::fold_media_query_list`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_media_query_list(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            MediaQueryList { span, queries } => {
                let span = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::MediaQueryList(
                        self::fields::MediaQueryListField::Span,
                    ));
                    <swc_common::Span as FoldWithAstPath<V>>::fold_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let queries = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::MediaQueryList(
                        self::fields::MediaQueryListField::Queries(usize::MAX),
                    ));
                    <Vec<MediaQuery> as FoldWithAstPath<V>>::fold_with_ast_path(
                        queries,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                MediaQueryList { span, queries }
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for MediaType {
    #[doc = "Calls [FoldAstPath`::fold_media_type`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_media_type(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            MediaType::Ident { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::MediaType(
                    self::fields::MediaTypeField::Ident,
                ));
                let _field_0 = <Ident as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                MediaType::Ident { 0: _field_0 }
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for NamedNamespace {
    #[doc = "Calls [FoldAstPath`::fold_named_namespace`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_named_namespace(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            NamedNamespace { span, name } => {
                let span = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::NamedNamespace(
                        self::fields::NamedNamespaceField::Span,
                    ));
                    <swc_common::Span as FoldWithAstPath<V>>::fold_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let name = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::NamedNamespace(
                        self::fields::NamedNamespaceField::Name,
                    ));
                    <Ident as FoldWithAstPath<V>>::fold_with_ast_path(
                        name,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                NamedNamespace { span, name }
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for Namespace {
    #[doc = "Calls [FoldAstPath`::fold_namespace`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_namespace(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            Namespace::Named { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::Namespace(
                    self::fields::NamespaceField::Named,
                ));
                let _field_0 = <NamedNamespace as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                Namespace::Named { 0: _field_0 }
            }
            Namespace::Any { 0: _field_0 } => {
                let mut __ast_path = __ast_path
                    .with_guard(AstParentKind::Namespace(self::fields::NamespaceField::Any));
                let _field_0 = <AnyNamespace as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                Namespace::Any { 0: _field_0 }
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for NamespacePrefix {
    #[doc = "Calls [FoldAstPath`::fold_namespace_prefix`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_namespace_prefix(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            NamespacePrefix { span, namespace } => {
                let span = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::NamespacePrefix(
                        self::fields::NamespacePrefixField::Span,
                    ));
                    <swc_common::Span as FoldWithAstPath<V>>::fold_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let namespace = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::NamespacePrefix(
                        self::fields::NamespacePrefixField::Namespace,
                    ));
                    <Option<Namespace> as FoldWithAstPath<V>>::fold_with_ast_path(
                        namespace,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                NamespacePrefix { span, namespace }
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for NamespacePrelude {
    #[doc = "Calls [FoldAstPath`::fold_namespace_prelude`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_namespace_prelude(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            NamespacePrelude { span, prefix, uri } => {
                let span = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::NamespacePrelude(
                        self::fields::NamespacePreludeField::Span,
                    ));
                    <swc_common::Span as FoldWithAstPath<V>>::fold_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let prefix = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::NamespacePrelude(
                        self::fields::NamespacePreludeField::Prefix,
                    ));
                    <Option<Ident> as FoldWithAstPath<V>>::fold_with_ast_path(
                        prefix,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let uri = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::NamespacePrelude(
                        self::fields::NamespacePreludeField::Uri,
                    ));
                    <Box<NamespacePreludeUri> as FoldWithAstPath<V>>::fold_with_ast_path(
                        uri,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                NamespacePrelude { span, prefix, uri }
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for NamespacePreludeUri {
    #[doc = "Calls [FoldAstPath`::fold_namespace_prelude_uri`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_namespace_prelude_uri(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            NamespacePreludeUri::Url { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::NamespacePreludeUri(
                    self::fields::NamespacePreludeUriField::Url,
                ));
                let _field_0 = <Url as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                NamespacePreludeUri::Url { 0: _field_0 }
            }
            NamespacePreludeUri::Str { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::NamespacePreludeUri(
                    self::fields::NamespacePreludeUriField::Str,
                ));
                let _field_0 = <Str as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                NamespacePreludeUri::Str { 0: _field_0 }
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for NestingSelector {
    #[doc = "Calls [FoldAstPath`::fold_nesting_selector`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_nesting_selector(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            NestingSelector { span } => {
                let span = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::NestingSelector(
                        self::fields::NestingSelectorField::Span,
                    ));
                    <swc_common::Span as FoldWithAstPath<V>>::fold_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                NestingSelector { span }
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for Number {
    #[doc = "Calls [FoldAstPath`::fold_number`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_number(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            Number { span, value, raw } => {
                let span = {
                    let mut __ast_path = __ast_path
                        .with_guard(AstParentKind::Number(self::fields::NumberField::Span));
                    <swc_common::Span as FoldWithAstPath<V>>::fold_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let raw = {
                    let mut __ast_path = __ast_path
                        .with_guard(AstParentKind::Number(self::fields::NumberField::Raw));
                    <Option<swc_atoms::Atom> as FoldWithAstPath<V>>::fold_with_ast_path(
                        raw,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                Number { span, value, raw }
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for NumberType {
    #[doc = "Calls [FoldAstPath`::fold_number_type`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_number_type(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            NumberType::Integer => NumberType::Integer,
            NumberType::Number => NumberType::Number,
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for PageSelector {
    #[doc = "Calls [FoldAstPath`::fold_page_selector`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_page_selector(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            PageSelector {
                span,
                page_type,
                pseudos,
            } => {
                let span = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::PageSelector(
                        self::fields::PageSelectorField::Span,
                    ));
                    <swc_common::Span as FoldWithAstPath<V>>::fold_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let page_type = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::PageSelector(
                        self::fields::PageSelectorField::PageType,
                    ));
                    <Option<PageSelectorType> as FoldWithAstPath<V>>::fold_with_ast_path(
                        page_type,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let pseudos = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::PageSelector(
                        self::fields::PageSelectorField::Pseudos(usize::MAX),
                    ));
                    <Option<Vec<PageSelectorPseudo>> as FoldWithAstPath<V>>::fold_with_ast_path(
                        pseudos,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                PageSelector {
                    span,
                    page_type,
                    pseudos,
                }
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for PageSelectorList {
    #[doc = "Calls [FoldAstPath`::fold_page_selector_list`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_page_selector_list(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            PageSelectorList { span, selectors } => {
                let span = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::PageSelectorList(
                        self::fields::PageSelectorListField::Span,
                    ));
                    <swc_common::Span as FoldWithAstPath<V>>::fold_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let selectors = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::PageSelectorList(
                        self::fields::PageSelectorListField::Selectors(usize::MAX),
                    ));
                    <Vec<PageSelector> as FoldWithAstPath<V>>::fold_with_ast_path(
                        selectors,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                PageSelectorList { span, selectors }
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for PageSelectorPseudo {
    #[doc = "Calls [FoldAstPath`::fold_page_selector_pseudo`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_page_selector_pseudo(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            PageSelectorPseudo { span, value } => {
                let span = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::PageSelectorPseudo(
                        self::fields::PageSelectorPseudoField::Span,
                    ));
                    <swc_common::Span as FoldWithAstPath<V>>::fold_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let value = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::PageSelectorPseudo(
                        self::fields::PageSelectorPseudoField::Value,
                    ));
                    <Ident as FoldWithAstPath<V>>::fold_with_ast_path(
                        value,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                PageSelectorPseudo { span, value }
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for PageSelectorType {
    #[doc = "Calls [FoldAstPath`::fold_page_selector_type`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_page_selector_type(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            PageSelectorType { span, value } => {
                let span = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::PageSelectorType(
                        self::fields::PageSelectorTypeField::Span,
                    ));
                    <swc_common::Span as FoldWithAstPath<V>>::fold_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let value = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::PageSelectorType(
                        self::fields::PageSelectorTypeField::Value,
                    ));
                    <Ident as FoldWithAstPath<V>>::fold_with_ast_path(
                        value,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                PageSelectorType { span, value }
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for Percentage {
    #[doc = "Calls [FoldAstPath`::fold_percentage`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_percentage(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            Percentage { span, value } => {
                let span = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::Percentage(
                        self::fields::PercentageField::Span,
                    ));
                    <swc_common::Span as FoldWithAstPath<V>>::fold_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let value = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::Percentage(
                        self::fields::PercentageField::Value,
                    ));
                    <Number as FoldWithAstPath<V>>::fold_with_ast_path(
                        value,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                Percentage { span, value }
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for PseudoClassSelector {
    #[doc = "Calls [FoldAstPath`::fold_pseudo_class_selector`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_pseudo_class_selector(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            PseudoClassSelector {
                span,
                name,
                children,
            } => {
                let span = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::PseudoClassSelector(
                        self::fields::PseudoClassSelectorField::Span,
                    ));
                    <swc_common::Span as FoldWithAstPath<V>>::fold_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let name = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::PseudoClassSelector(
                        self::fields::PseudoClassSelectorField::Name,
                    ));
                    <Ident as FoldWithAstPath<V>>::fold_with_ast_path(
                        name,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let children = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::PseudoClassSelector(
                        self::fields::PseudoClassSelectorField::Children(usize::MAX),
                    ));
                    < Option < Vec < PseudoClassSelectorChildren > > as FoldWithAstPath < V > > :: fold_with_ast_path (children , visitor , & mut * __ast_path)
                };
                PseudoClassSelector {
                    span,
                    name,
                    children,
                }
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for PseudoClassSelectorChildren {
    #[doc = "Calls [FoldAstPath`::fold_pseudo_class_selector_children`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_pseudo_class_selector_children(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            PseudoClassSelectorChildren::PreservedToken { 0: _field_0 } => {
                let mut __ast_path =
                    __ast_path.with_guard(AstParentKind::PseudoClassSelectorChildren(
                        self::fields::PseudoClassSelectorChildrenField::PreservedToken,
                    ));
                let _field_0 = <TokenAndSpan as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                PseudoClassSelectorChildren::PreservedToken { 0: _field_0 }
            }
            PseudoClassSelectorChildren::AnPlusB { 0: _field_0 } => {
                let mut __ast_path =
                    __ast_path.with_guard(AstParentKind::PseudoClassSelectorChildren(
                        self::fields::PseudoClassSelectorChildrenField::AnPlusB,
                    ));
                let _field_0 = <AnPlusB as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                PseudoClassSelectorChildren::AnPlusB { 0: _field_0 }
            }
            PseudoClassSelectorChildren::Ident { 0: _field_0 } => {
                let mut __ast_path =
                    __ast_path.with_guard(AstParentKind::PseudoClassSelectorChildren(
                        self::fields::PseudoClassSelectorChildrenField::Ident,
                    ));
                let _field_0 = <Ident as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                PseudoClassSelectorChildren::Ident { 0: _field_0 }
            }
            PseudoClassSelectorChildren::Str { 0: _field_0 } => {
                let mut __ast_path =
                    __ast_path.with_guard(AstParentKind::PseudoClassSelectorChildren(
                        self::fields::PseudoClassSelectorChildrenField::Str,
                    ));
                let _field_0 = <Str as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                PseudoClassSelectorChildren::Str { 0: _field_0 }
            }
            PseudoClassSelectorChildren::Delimiter { 0: _field_0 } => {
                let mut __ast_path =
                    __ast_path.with_guard(AstParentKind::PseudoClassSelectorChildren(
                        self::fields::PseudoClassSelectorChildrenField::Delimiter,
                    ));
                let _field_0 = <Delimiter as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                PseudoClassSelectorChildren::Delimiter { 0: _field_0 }
            }
            PseudoClassSelectorChildren::ComplexSelector { 0: _field_0 } => {
                let mut __ast_path =
                    __ast_path.with_guard(AstParentKind::PseudoClassSelectorChildren(
                        self::fields::PseudoClassSelectorChildrenField::ComplexSelector,
                    ));
                let _field_0 = <ComplexSelector as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                PseudoClassSelectorChildren::ComplexSelector { 0: _field_0 }
            }
            PseudoClassSelectorChildren::SelectorList { 0: _field_0 } => {
                let mut __ast_path =
                    __ast_path.with_guard(AstParentKind::PseudoClassSelectorChildren(
                        self::fields::PseudoClassSelectorChildrenField::SelectorList,
                    ));
                let _field_0 = <SelectorList as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                PseudoClassSelectorChildren::SelectorList { 0: _field_0 }
            }
            PseudoClassSelectorChildren::ForgivingSelectorList { 0: _field_0 } => {
                let mut __ast_path =
                    __ast_path.with_guard(AstParentKind::PseudoClassSelectorChildren(
                        self::fields::PseudoClassSelectorChildrenField::ForgivingSelectorList,
                    ));
                let _field_0 = <ForgivingSelectorList as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                PseudoClassSelectorChildren::ForgivingSelectorList { 0: _field_0 }
            }
            PseudoClassSelectorChildren::CompoundSelectorList { 0: _field_0 } => {
                let mut __ast_path =
                    __ast_path.with_guard(AstParentKind::PseudoClassSelectorChildren(
                        self::fields::PseudoClassSelectorChildrenField::CompoundSelectorList,
                    ));
                let _field_0 = <CompoundSelectorList as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                PseudoClassSelectorChildren::CompoundSelectorList { 0: _field_0 }
            }
            PseudoClassSelectorChildren::RelativeSelectorList { 0: _field_0 } => {
                let mut __ast_path =
                    __ast_path.with_guard(AstParentKind::PseudoClassSelectorChildren(
                        self::fields::PseudoClassSelectorChildrenField::RelativeSelectorList,
                    ));
                let _field_0 = <RelativeSelectorList as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                PseudoClassSelectorChildren::RelativeSelectorList { 0: _field_0 }
            }
            PseudoClassSelectorChildren::ForgivingRelativeSelectorList { 0: _field_0 } => {
                let mut __ast_path = __ast_path
                    .with_guard(AstParentKind::PseudoClassSelectorChildren(
                    self::fields::PseudoClassSelectorChildrenField::ForgivingRelativeSelectorList,
                ));
                let _field_0 =
                    <ForgivingRelativeSelectorList as FoldWithAstPath<V>>::fold_with_ast_path(
                        _field_0,
                        visitor,
                        &mut *__ast_path,
                    );
                PseudoClassSelectorChildren::ForgivingRelativeSelectorList { 0: _field_0 }
            }
            PseudoClassSelectorChildren::CompoundSelector { 0: _field_0 } => {
                let mut __ast_path =
                    __ast_path.with_guard(AstParentKind::PseudoClassSelectorChildren(
                        self::fields::PseudoClassSelectorChildrenField::CompoundSelector,
                    ));
                let _field_0 = <CompoundSelector as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                PseudoClassSelectorChildren::CompoundSelector { 0: _field_0 }
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for PseudoElementSelector {
    #[doc = "Calls [FoldAstPath`::fold_pseudo_element_selector`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_pseudo_element_selector(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            PseudoElementSelector {
                span,
                name,
                children,
            } => {
                let span = {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentKind::PseudoElementSelector(
                            self::fields::PseudoElementSelectorField::Span,
                        ));
                    <swc_common::Span as FoldWithAstPath<V>>::fold_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let name = {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentKind::PseudoElementSelector(
                            self::fields::PseudoElementSelectorField::Name,
                        ));
                    <Ident as FoldWithAstPath<V>>::fold_with_ast_path(
                        name,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let children = {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentKind::PseudoElementSelector(
                            self::fields::PseudoElementSelectorField::Children(usize::MAX),
                        ));
                    < Option < Vec < PseudoElementSelectorChildren > > as FoldWithAstPath < V > > :: fold_with_ast_path (children , visitor , & mut * __ast_path)
                };
                PseudoElementSelector {
                    span,
                    name,
                    children,
                }
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for PseudoElementSelectorChildren {
    #[doc = "Calls [FoldAstPath`::fold_pseudo_element_selector_children`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_pseudo_element_selector_children(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            PseudoElementSelectorChildren::PreservedToken { 0: _field_0 } => {
                let mut __ast_path =
                    __ast_path.with_guard(AstParentKind::PseudoElementSelectorChildren(
                        self::fields::PseudoElementSelectorChildrenField::PreservedToken,
                    ));
                let _field_0 = <TokenAndSpan as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                PseudoElementSelectorChildren::PreservedToken { 0: _field_0 }
            }
            PseudoElementSelectorChildren::Ident { 0: _field_0 } => {
                let mut __ast_path =
                    __ast_path.with_guard(AstParentKind::PseudoElementSelectorChildren(
                        self::fields::PseudoElementSelectorChildrenField::Ident,
                    ));
                let _field_0 = <Ident as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                PseudoElementSelectorChildren::Ident { 0: _field_0 }
            }
            PseudoElementSelectorChildren::CompoundSelector { 0: _field_0 } => {
                let mut __ast_path =
                    __ast_path.with_guard(AstParentKind::PseudoElementSelectorChildren(
                        self::fields::PseudoElementSelectorChildrenField::CompoundSelector,
                    ));
                let _field_0 = <CompoundSelector as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                PseudoElementSelectorChildren::CompoundSelector { 0: _field_0 }
            }
            PseudoElementSelectorChildren::CustomHighlightName { 0: _field_0 } => {
                let mut __ast_path =
                    __ast_path.with_guard(AstParentKind::PseudoElementSelectorChildren(
                        self::fields::PseudoElementSelectorChildrenField::CustomHighlightName,
                    ));
                let _field_0 = <CustomHighlightName as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                PseudoElementSelectorChildren::CustomHighlightName { 0: _field_0 }
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for QualifiedRule {
    #[doc = "Calls [FoldAstPath`::fold_qualified_rule`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_qualified_rule(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            QualifiedRule {
                span,
                prelude,
                block,
            } => {
                let span = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::QualifiedRule(
                        self::fields::QualifiedRuleField::Span,
                    ));
                    <swc_common::Span as FoldWithAstPath<V>>::fold_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let prelude = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::QualifiedRule(
                        self::fields::QualifiedRuleField::Prelude,
                    ));
                    <QualifiedRulePrelude as FoldWithAstPath<V>>::fold_with_ast_path(
                        prelude,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let block = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::QualifiedRule(
                        self::fields::QualifiedRuleField::Block,
                    ));
                    <SimpleBlock as FoldWithAstPath<V>>::fold_with_ast_path(
                        block,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                QualifiedRule {
                    span,
                    prelude,
                    block,
                }
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for QualifiedRulePrelude {
    #[doc = "Calls [FoldAstPath`::fold_qualified_rule_prelude`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_qualified_rule_prelude(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            QualifiedRulePrelude::SelectorList { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::QualifiedRulePrelude(
                    self::fields::QualifiedRulePreludeField::SelectorList,
                ));
                let _field_0 = <SelectorList as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                QualifiedRulePrelude::SelectorList { 0: _field_0 }
            }
            QualifiedRulePrelude::RelativeSelectorList { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::QualifiedRulePrelude(
                    self::fields::QualifiedRulePreludeField::RelativeSelectorList,
                ));
                let _field_0 = <RelativeSelectorList as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                QualifiedRulePrelude::RelativeSelectorList { 0: _field_0 }
            }
            QualifiedRulePrelude::ListOfComponentValues { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::QualifiedRulePrelude(
                    self::fields::QualifiedRulePreludeField::ListOfComponentValues,
                ));
                let _field_0 = <ListOfComponentValues as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                QualifiedRulePrelude::ListOfComponentValues { 0: _field_0 }
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for QueryInParens {
    #[doc = "Calls [FoldAstPath`::fold_query_in_parens`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_query_in_parens(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            QueryInParens::ContainerQuery { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::QueryInParens(
                    self::fields::QueryInParensField::ContainerQuery,
                ));
                let _field_0 = <Box<ContainerQuery> as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                QueryInParens::ContainerQuery { 0: _field_0 }
            }
            QueryInParens::SizeFeature { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::QueryInParens(
                    self::fields::QueryInParensField::SizeFeature,
                ));
                let _field_0 = <SizeFeature as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                QueryInParens::SizeFeature { 0: _field_0 }
            }
            QueryInParens::GeneralEnclosed { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::QueryInParens(
                    self::fields::QueryInParensField::GeneralEnclosed,
                ));
                let _field_0 = <GeneralEnclosed as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                QueryInParens::GeneralEnclosed { 0: _field_0 }
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for Ratio {
    #[doc = "Calls [FoldAstPath`::fold_ratio`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_ratio(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            Ratio { span, left, right } => {
                let span = {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentKind::Ratio(self::fields::RatioField::Span));
                    <swc_common::Span as FoldWithAstPath<V>>::fold_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let left = {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentKind::Ratio(self::fields::RatioField::Left));
                    <Number as FoldWithAstPath<V>>::fold_with_ast_path(
                        left,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let right = {
                    let mut __ast_path = __ast_path
                        .with_guard(AstParentKind::Ratio(self::fields::RatioField::Right));
                    <Option<Number> as FoldWithAstPath<V>>::fold_with_ast_path(
                        right,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                Ratio { span, left, right }
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for RelativeSelector {
    #[doc = "Calls [FoldAstPath`::fold_relative_selector`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_relative_selector(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            RelativeSelector {
                span,
                combinator,
                selector,
            } => {
                let span = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::RelativeSelector(
                        self::fields::RelativeSelectorField::Span,
                    ));
                    <swc_common::Span as FoldWithAstPath<V>>::fold_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let combinator = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::RelativeSelector(
                        self::fields::RelativeSelectorField::Combinator,
                    ));
                    <Option<Combinator> as FoldWithAstPath<V>>::fold_with_ast_path(
                        combinator,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let selector = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::RelativeSelector(
                        self::fields::RelativeSelectorField::Selector,
                    ));
                    <ComplexSelector as FoldWithAstPath<V>>::fold_with_ast_path(
                        selector,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                RelativeSelector {
                    span,
                    combinator,
                    selector,
                }
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for RelativeSelectorList {
    #[doc = "Calls [FoldAstPath`::fold_relative_selector_list`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_relative_selector_list(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            RelativeSelectorList { span, children } => {
                let span = {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentKind::RelativeSelectorList(
                            self::fields::RelativeSelectorListField::Span,
                        ));
                    <swc_common::Span as FoldWithAstPath<V>>::fold_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let children = {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentKind::RelativeSelectorList(
                            self::fields::RelativeSelectorListField::Children(usize::MAX),
                        ));
                    <Vec<RelativeSelector> as FoldWithAstPath<V>>::fold_with_ast_path(
                        children,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                RelativeSelectorList { span, children }
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for Resolution {
    #[doc = "Calls [FoldAstPath`::fold_resolution`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_resolution(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            Resolution { span, value, unit } => {
                let span = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::Resolution(
                        self::fields::ResolutionField::Span,
                    ));
                    <swc_common::Span as FoldWithAstPath<V>>::fold_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let value = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::Resolution(
                        self::fields::ResolutionField::Value,
                    ));
                    <Number as FoldWithAstPath<V>>::fold_with_ast_path(
                        value,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let unit = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::Resolution(
                        self::fields::ResolutionField::Unit,
                    ));
                    <Ident as FoldWithAstPath<V>>::fold_with_ast_path(
                        unit,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                Resolution { span, value, unit }
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for Rule {
    #[doc = "Calls [FoldAstPath`::fold_rule`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_rule(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            Rule::QualifiedRule { 0: _field_0 } => {
                let mut __ast_path = __ast_path
                    .with_guard(AstParentKind::Rule(self::fields::RuleField::QualifiedRule));
                let _field_0 = <Box<QualifiedRule> as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                Rule::QualifiedRule { 0: _field_0 }
            }
            Rule::AtRule { 0: _field_0 } => {
                let mut __ast_path =
                    __ast_path.with_guard(AstParentKind::Rule(self::fields::RuleField::AtRule));
                let _field_0 = <Box<AtRule> as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                Rule::AtRule { 0: _field_0 }
            }
            Rule::ListOfComponentValues { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::Rule(
                    self::fields::RuleField::ListOfComponentValues,
                ));
                let _field_0 =
                    <Box<ListOfComponentValues> as FoldWithAstPath<V>>::fold_with_ast_path(
                        _field_0,
                        visitor,
                        &mut *__ast_path,
                    );
                Rule::ListOfComponentValues { 0: _field_0 }
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for ScopeRange {
    #[doc = "Calls [FoldAstPath`::fold_scope_range`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_scope_range(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            ScopeRange {
                span,
                scope_start,
                scope_end,
            } => {
                let span = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::ScopeRange(
                        self::fields::ScopeRangeField::Span,
                    ));
                    <swc_common::Span as FoldWithAstPath<V>>::fold_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let scope_start = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::ScopeRange(
                        self::fields::ScopeRangeField::ScopeStart,
                    ));
                    <Option<ForgivingSelectorList> as FoldWithAstPath<V>>::fold_with_ast_path(
                        scope_start,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let scope_end = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::ScopeRange(
                        self::fields::ScopeRangeField::ScopeEnd,
                    ));
                    <Option<ForgivingSelectorList> as FoldWithAstPath<V>>::fold_with_ast_path(
                        scope_end,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                ScopeRange {
                    span,
                    scope_start,
                    scope_end,
                }
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for SelectorList {
    #[doc = "Calls [FoldAstPath`::fold_selector_list`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_selector_list(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            SelectorList { span, children } => {
                let span = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::SelectorList(
                        self::fields::SelectorListField::Span,
                    ));
                    <swc_common::Span as FoldWithAstPath<V>>::fold_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let children = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::SelectorList(
                        self::fields::SelectorListField::Children(usize::MAX),
                    ));
                    <Vec<ComplexSelector> as FoldWithAstPath<V>>::fold_with_ast_path(
                        children,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                SelectorList { span, children }
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for SequenceOfCustomIdents {
    #[doc = "Calls [FoldAstPath`::fold_sequence_of_custom_idents`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_sequence_of_custom_idents(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            SequenceOfCustomIdents { span, value } => {
                let span = {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentKind::SequenceOfCustomIdents(
                            self::fields::SequenceOfCustomIdentsField::Span,
                        ));
                    <swc_common::Span as FoldWithAstPath<V>>::fold_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let value = {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentKind::SequenceOfCustomIdents(
                            self::fields::SequenceOfCustomIdentsField::Value(usize::MAX),
                        ));
                    <Vec<CustomIdent> as FoldWithAstPath<V>>::fold_with_ast_path(
                        value,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                SequenceOfCustomIdents { span, value }
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for SimpleBlock {
    #[doc = "Calls [FoldAstPath`::fold_simple_block`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_simple_block(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            SimpleBlock { span, name, value } => {
                let span = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::SimpleBlock(
                        self::fields::SimpleBlockField::Span,
                    ));
                    <swc_common::Span as FoldWithAstPath<V>>::fold_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let name = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::SimpleBlock(
                        self::fields::SimpleBlockField::Name,
                    ));
                    <TokenAndSpan as FoldWithAstPath<V>>::fold_with_ast_path(
                        name,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let value = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::SimpleBlock(
                        self::fields::SimpleBlockField::Value(usize::MAX),
                    ));
                    <Vec<ComponentValue> as FoldWithAstPath<V>>::fold_with_ast_path(
                        value,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                SimpleBlock { span, name, value }
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for SizeFeature {
    #[doc = "Calls [FoldAstPath`::fold_size_feature`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_size_feature(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            SizeFeature::Plain { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::SizeFeature(
                    self::fields::SizeFeatureField::Plain,
                ));
                let _field_0 = <SizeFeaturePlain as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                SizeFeature::Plain { 0: _field_0 }
            }
            SizeFeature::Boolean { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::SizeFeature(
                    self::fields::SizeFeatureField::Boolean,
                ));
                let _field_0 = <SizeFeatureBoolean as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                SizeFeature::Boolean { 0: _field_0 }
            }
            SizeFeature::Range { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::SizeFeature(
                    self::fields::SizeFeatureField::Range,
                ));
                let _field_0 = <SizeFeatureRange as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                SizeFeature::Range { 0: _field_0 }
            }
            SizeFeature::RangeInterval { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::SizeFeature(
                    self::fields::SizeFeatureField::RangeInterval,
                ));
                let _field_0 = <SizeFeatureRangeInterval as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                SizeFeature::RangeInterval { 0: _field_0 }
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for SizeFeatureBoolean {
    #[doc = "Calls [FoldAstPath`::fold_size_feature_boolean`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_size_feature_boolean(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            SizeFeatureBoolean { span, name } => {
                let span = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::SizeFeatureBoolean(
                        self::fields::SizeFeatureBooleanField::Span,
                    ));
                    <swc_common::Span as FoldWithAstPath<V>>::fold_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let name = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::SizeFeatureBoolean(
                        self::fields::SizeFeatureBooleanField::Name,
                    ));
                    <SizeFeatureName as FoldWithAstPath<V>>::fold_with_ast_path(
                        name,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                SizeFeatureBoolean { span, name }
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for SizeFeatureName {
    #[doc = "Calls [FoldAstPath`::fold_size_feature_name`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_size_feature_name(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            SizeFeatureName::Ident { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::SizeFeatureName(
                    self::fields::SizeFeatureNameField::Ident,
                ));
                let _field_0 = <Ident as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                SizeFeatureName::Ident { 0: _field_0 }
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for SizeFeaturePlain {
    #[doc = "Calls [FoldAstPath`::fold_size_feature_plain`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_size_feature_plain(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            SizeFeaturePlain { span, name, value } => {
                let span = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::SizeFeaturePlain(
                        self::fields::SizeFeaturePlainField::Span,
                    ));
                    <swc_common::Span as FoldWithAstPath<V>>::fold_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let name = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::SizeFeaturePlain(
                        self::fields::SizeFeaturePlainField::Name,
                    ));
                    <SizeFeatureName as FoldWithAstPath<V>>::fold_with_ast_path(
                        name,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let value = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::SizeFeaturePlain(
                        self::fields::SizeFeaturePlainField::Value,
                    ));
                    <Box<SizeFeatureValue> as FoldWithAstPath<V>>::fold_with_ast_path(
                        value,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                SizeFeaturePlain { span, name, value }
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for SizeFeatureRange {
    #[doc = "Calls [FoldAstPath`::fold_size_feature_range`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_size_feature_range(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            SizeFeatureRange {
                span,
                left,
                comparison,
                right,
            } => {
                let span = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::SizeFeatureRange(
                        self::fields::SizeFeatureRangeField::Span,
                    ));
                    <swc_common::Span as FoldWithAstPath<V>>::fold_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let left = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::SizeFeatureRange(
                        self::fields::SizeFeatureRangeField::Left,
                    ));
                    <Box<SizeFeatureValue> as FoldWithAstPath<V>>::fold_with_ast_path(
                        left,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let comparison = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::SizeFeatureRange(
                        self::fields::SizeFeatureRangeField::Comparison,
                    ));
                    <SizeFeatureRangeComparison as FoldWithAstPath<V>>::fold_with_ast_path(
                        comparison,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let right = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::SizeFeatureRange(
                        self::fields::SizeFeatureRangeField::Right,
                    ));
                    <Box<SizeFeatureValue> as FoldWithAstPath<V>>::fold_with_ast_path(
                        right,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                SizeFeatureRange {
                    span,
                    left,
                    comparison,
                    right,
                }
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for SizeFeatureRangeComparison {
    #[doc = "Calls [FoldAstPath`::fold_size_feature_range_comparison`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_size_feature_range_comparison(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            SizeFeatureRangeComparison::Lt => SizeFeatureRangeComparison::Lt,
            SizeFeatureRangeComparison::Le => SizeFeatureRangeComparison::Le,
            SizeFeatureRangeComparison::Gt => SizeFeatureRangeComparison::Gt,
            SizeFeatureRangeComparison::Ge => SizeFeatureRangeComparison::Ge,
            SizeFeatureRangeComparison::Eq => SizeFeatureRangeComparison::Eq,
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for SizeFeatureRangeInterval {
    #[doc = "Calls [FoldAstPath`::fold_size_feature_range_interval`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_size_feature_range_interval(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            SizeFeatureRangeInterval {
                span,
                left,
                left_comparison,
                name,
                right_comparison,
                right,
            } => {
                let span = {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentKind::SizeFeatureRangeInterval(
                            self::fields::SizeFeatureRangeIntervalField::Span,
                        ));
                    <swc_common::Span as FoldWithAstPath<V>>::fold_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let left = {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentKind::SizeFeatureRangeInterval(
                            self::fields::SizeFeatureRangeIntervalField::Left,
                        ));
                    <Box<SizeFeatureValue> as FoldWithAstPath<V>>::fold_with_ast_path(
                        left,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let left_comparison = {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentKind::SizeFeatureRangeInterval(
                            self::fields::SizeFeatureRangeIntervalField::LeftComparison,
                        ));
                    <SizeFeatureRangeComparison as FoldWithAstPath<V>>::fold_with_ast_path(
                        left_comparison,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let name = {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentKind::SizeFeatureRangeInterval(
                            self::fields::SizeFeatureRangeIntervalField::Name,
                        ));
                    <SizeFeatureName as FoldWithAstPath<V>>::fold_with_ast_path(
                        name,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let right_comparison = {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentKind::SizeFeatureRangeInterval(
                            self::fields::SizeFeatureRangeIntervalField::RightComparison,
                        ));
                    <SizeFeatureRangeComparison as FoldWithAstPath<V>>::fold_with_ast_path(
                        right_comparison,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let right = {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentKind::SizeFeatureRangeInterval(
                            self::fields::SizeFeatureRangeIntervalField::Right,
                        ));
                    <Box<SizeFeatureValue> as FoldWithAstPath<V>>::fold_with_ast_path(
                        right,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                SizeFeatureRangeInterval {
                    span,
                    left,
                    left_comparison,
                    name,
                    right_comparison,
                    right,
                }
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for SizeFeatureValue {
    #[doc = "Calls [FoldAstPath`::fold_size_feature_value`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_size_feature_value(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            SizeFeatureValue::Number { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::SizeFeatureValue(
                    self::fields::SizeFeatureValueField::Number,
                ));
                let _field_0 = <Number as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                SizeFeatureValue::Number { 0: _field_0 }
            }
            SizeFeatureValue::Dimension { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::SizeFeatureValue(
                    self::fields::SizeFeatureValueField::Dimension,
                ));
                let _field_0 = <Dimension as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                SizeFeatureValue::Dimension { 0: _field_0 }
            }
            SizeFeatureValue::Ident { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::SizeFeatureValue(
                    self::fields::SizeFeatureValueField::Ident,
                ));
                let _field_0 = <Ident as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                SizeFeatureValue::Ident { 0: _field_0 }
            }
            SizeFeatureValue::Ratio { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::SizeFeatureValue(
                    self::fields::SizeFeatureValueField::Ratio,
                ));
                let _field_0 = <Ratio as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                SizeFeatureValue::Ratio { 0: _field_0 }
            }
            SizeFeatureValue::Function { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::SizeFeatureValue(
                    self::fields::SizeFeatureValueField::Function,
                ));
                let _field_0 = <Function as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                SizeFeatureValue::Function { 0: _field_0 }
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for Str {
    #[doc = "Calls [FoldAstPath`::fold_str`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_str(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            Str { span, value, raw } => {
                let span = {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentKind::Str(self::fields::StrField::Span));
                    <swc_common::Span as FoldWithAstPath<V>>::fold_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let value = {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentKind::Str(self::fields::StrField::Value));
                    <swc_atoms::Atom as FoldWithAstPath<V>>::fold_with_ast_path(
                        value,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let raw = {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentKind::Str(self::fields::StrField::Raw));
                    <Option<swc_atoms::Atom> as FoldWithAstPath<V>>::fold_with_ast_path(
                        raw,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                Str { span, value, raw }
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for StyleBlock {
    #[doc = "Calls [FoldAstPath`::fold_style_block`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_style_block(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            StyleBlock::AtRule { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::StyleBlock(
                    self::fields::StyleBlockField::AtRule,
                ));
                let _field_0 = <Box<AtRule> as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                StyleBlock::AtRule { 0: _field_0 }
            }
            StyleBlock::Declaration { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::StyleBlock(
                    self::fields::StyleBlockField::Declaration,
                ));
                let _field_0 = <Box<Declaration> as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                StyleBlock::Declaration { 0: _field_0 }
            }
            StyleBlock::QualifiedRule { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::StyleBlock(
                    self::fields::StyleBlockField::QualifiedRule,
                ));
                let _field_0 = <Box<QualifiedRule> as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                StyleBlock::QualifiedRule { 0: _field_0 }
            }
            StyleBlock::ListOfComponentValues { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::StyleBlock(
                    self::fields::StyleBlockField::ListOfComponentValues,
                ));
                let _field_0 =
                    <Box<ListOfComponentValues> as FoldWithAstPath<V>>::fold_with_ast_path(
                        _field_0,
                        visitor,
                        &mut *__ast_path,
                    );
                StyleBlock::ListOfComponentValues { 0: _field_0 }
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for Stylesheet {
    #[doc = "Calls [FoldAstPath`::fold_stylesheet`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_stylesheet(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            Stylesheet { span, rules } => {
                let span = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::Stylesheet(
                        self::fields::StylesheetField::Span,
                    ));
                    <swc_common::Span as FoldWithAstPath<V>>::fold_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let rules = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::Stylesheet(
                        self::fields::StylesheetField::Rules(usize::MAX),
                    ));
                    <Vec<Rule> as FoldWithAstPath<V>>::fold_with_ast_path(
                        rules,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                Stylesheet { span, rules }
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for SubclassSelector {
    #[doc = "Calls [FoldAstPath`::fold_subclass_selector`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_subclass_selector(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            SubclassSelector::Id { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::SubclassSelector(
                    self::fields::SubclassSelectorField::Id,
                ));
                let _field_0 = <IdSelector as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                SubclassSelector::Id { 0: _field_0 }
            }
            SubclassSelector::Class { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::SubclassSelector(
                    self::fields::SubclassSelectorField::Class,
                ));
                let _field_0 = <ClassSelector as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                SubclassSelector::Class { 0: _field_0 }
            }
            SubclassSelector::Attribute { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::SubclassSelector(
                    self::fields::SubclassSelectorField::Attribute,
                ));
                let _field_0 = <Box<AttributeSelector> as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                SubclassSelector::Attribute { 0: _field_0 }
            }
            SubclassSelector::PseudoClass { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::SubclassSelector(
                    self::fields::SubclassSelectorField::PseudoClass,
                ));
                let _field_0 = <PseudoClassSelector as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                SubclassSelector::PseudoClass { 0: _field_0 }
            }
            SubclassSelector::PseudoElement { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::SubclassSelector(
                    self::fields::SubclassSelectorField::PseudoElement,
                ));
                let _field_0 = <PseudoElementSelector as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                SubclassSelector::PseudoElement { 0: _field_0 }
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for SupportsAnd {
    #[doc = "Calls [FoldAstPath`::fold_supports_and`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_supports_and(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            SupportsAnd {
                span,
                keyword,
                condition,
            } => {
                let span = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::SupportsAnd(
                        self::fields::SupportsAndField::Span,
                    ));
                    <swc_common::Span as FoldWithAstPath<V>>::fold_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let keyword = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::SupportsAnd(
                        self::fields::SupportsAndField::Keyword,
                    ));
                    <Option<Ident> as FoldWithAstPath<V>>::fold_with_ast_path(
                        keyword,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let condition = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::SupportsAnd(
                        self::fields::SupportsAndField::Condition,
                    ));
                    <Box<SupportsInParens> as FoldWithAstPath<V>>::fold_with_ast_path(
                        condition,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                SupportsAnd {
                    span,
                    keyword,
                    condition,
                }
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for SupportsCondition {
    #[doc = "Calls [FoldAstPath`::fold_supports_condition`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_supports_condition(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            SupportsCondition { span, conditions } => {
                let span = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::SupportsCondition(
                        self::fields::SupportsConditionField::Span,
                    ));
                    <swc_common::Span as FoldWithAstPath<V>>::fold_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let conditions = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::SupportsCondition(
                        self::fields::SupportsConditionField::Conditions(usize::MAX),
                    ));
                    <Vec<SupportsConditionType> as FoldWithAstPath<V>>::fold_with_ast_path(
                        conditions,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                SupportsCondition { span, conditions }
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for SupportsConditionType {
    #[doc = "Calls [FoldAstPath`::fold_supports_condition_type`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_supports_condition_type(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            SupportsConditionType::Not { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::SupportsConditionType(
                    self::fields::SupportsConditionTypeField::Not,
                ));
                let _field_0 = <SupportsNot as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                SupportsConditionType::Not { 0: _field_0 }
            }
            SupportsConditionType::And { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::SupportsConditionType(
                    self::fields::SupportsConditionTypeField::And,
                ));
                let _field_0 = <SupportsAnd as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                SupportsConditionType::And { 0: _field_0 }
            }
            SupportsConditionType::Or { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::SupportsConditionType(
                    self::fields::SupportsConditionTypeField::Or,
                ));
                let _field_0 = <SupportsOr as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                SupportsConditionType::Or { 0: _field_0 }
            }
            SupportsConditionType::SupportsInParens { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::SupportsConditionType(
                    self::fields::SupportsConditionTypeField::SupportsInParens,
                ));
                let _field_0 = <SupportsInParens as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                SupportsConditionType::SupportsInParens { 0: _field_0 }
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for SupportsFeature {
    #[doc = "Calls [FoldAstPath`::fold_supports_feature`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_supports_feature(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            SupportsFeature::Declaration { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::SupportsFeature(
                    self::fields::SupportsFeatureField::Declaration,
                ));
                let _field_0 = <Box<Declaration> as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                SupportsFeature::Declaration { 0: _field_0 }
            }
            SupportsFeature::Function { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::SupportsFeature(
                    self::fields::SupportsFeatureField::Function,
                ));
                let _field_0 = <Function as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                SupportsFeature::Function { 0: _field_0 }
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for SupportsInParens {
    #[doc = "Calls [FoldAstPath`::fold_supports_in_parens`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_supports_in_parens(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            SupportsInParens::SupportsCondition { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::SupportsInParens(
                    self::fields::SupportsInParensField::SupportsCondition,
                ));
                let _field_0 = <SupportsCondition as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                SupportsInParens::SupportsCondition { 0: _field_0 }
            }
            SupportsInParens::Feature { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::SupportsInParens(
                    self::fields::SupportsInParensField::Feature,
                ));
                let _field_0 = <SupportsFeature as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                SupportsInParens::Feature { 0: _field_0 }
            }
            SupportsInParens::GeneralEnclosed { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::SupportsInParens(
                    self::fields::SupportsInParensField::GeneralEnclosed,
                ));
                let _field_0 = <GeneralEnclosed as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                SupportsInParens::GeneralEnclosed { 0: _field_0 }
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for SupportsNot {
    #[doc = "Calls [FoldAstPath`::fold_supports_not`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_supports_not(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            SupportsNot {
                span,
                keyword,
                condition,
            } => {
                let span = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::SupportsNot(
                        self::fields::SupportsNotField::Span,
                    ));
                    <swc_common::Span as FoldWithAstPath<V>>::fold_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let keyword = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::SupportsNot(
                        self::fields::SupportsNotField::Keyword,
                    ));
                    <Option<Ident> as FoldWithAstPath<V>>::fold_with_ast_path(
                        keyword,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let condition = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::SupportsNot(
                        self::fields::SupportsNotField::Condition,
                    ));
                    <Box<SupportsInParens> as FoldWithAstPath<V>>::fold_with_ast_path(
                        condition,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                SupportsNot {
                    span,
                    keyword,
                    condition,
                }
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for SupportsOr {
    #[doc = "Calls [FoldAstPath`::fold_supports_or`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_supports_or(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            SupportsOr {
                span,
                keyword,
                condition,
            } => {
                let span = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::SupportsOr(
                        self::fields::SupportsOrField::Span,
                    ));
                    <swc_common::Span as FoldWithAstPath<V>>::fold_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let keyword = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::SupportsOr(
                        self::fields::SupportsOrField::Keyword,
                    ));
                    <Option<Ident> as FoldWithAstPath<V>>::fold_with_ast_path(
                        keyword,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let condition = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::SupportsOr(
                        self::fields::SupportsOrField::Condition,
                    ));
                    <Box<SupportsInParens> as FoldWithAstPath<V>>::fold_with_ast_path(
                        condition,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                SupportsOr {
                    span,
                    keyword,
                    condition,
                }
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for TagNameSelector {
    #[doc = "Calls [FoldAstPath`::fold_tag_name_selector`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_tag_name_selector(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            TagNameSelector { span, name } => {
                let span = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::TagNameSelector(
                        self::fields::TagNameSelectorField::Span,
                    ));
                    <swc_common::Span as FoldWithAstPath<V>>::fold_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let name = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::TagNameSelector(
                        self::fields::TagNameSelectorField::Name,
                    ));
                    <WqName as FoldWithAstPath<V>>::fold_with_ast_path(
                        name,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                TagNameSelector { span, name }
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for Time {
    #[doc = "Calls [FoldAstPath`::fold_time`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_time(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            Time { span, value, unit } => {
                let span = {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentKind::Time(self::fields::TimeField::Span));
                    <swc_common::Span as FoldWithAstPath<V>>::fold_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let value = {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentKind::Time(self::fields::TimeField::Value));
                    <Number as FoldWithAstPath<V>>::fold_with_ast_path(
                        value,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let unit = {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentKind::Time(self::fields::TimeField::Unit));
                    <Ident as FoldWithAstPath<V>>::fold_with_ast_path(
                        unit,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                Time { span, value, unit }
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for TimePercentage {
    #[doc = "Calls [FoldAstPath`::fold_time_percentage`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_time_percentage(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            TimePercentage::Time { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::TimePercentage(
                    self::fields::TimePercentageField::Time,
                ));
                let _field_0 = <Time as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                TimePercentage::Time { 0: _field_0 }
            }
            TimePercentage::Percentage { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::TimePercentage(
                    self::fields::TimePercentageField::Percentage,
                ));
                let _field_0 = <Percentage as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                TimePercentage::Percentage { 0: _field_0 }
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for Token {
    #[doc = "Calls [FoldAstPath`::fold_token`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_token(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            Token::Ident { value, raw } => {
                let mut __ast_path =
                    __ast_path.with_guard(AstParentKind::Token(self::fields::TokenField::Ident));
                let value = {
                    let mut __ast_path = __ast_path
                        .with_guard(AstParentKind::Token(self::fields::TokenField::Value));
                    <swc_atoms::Atom as FoldWithAstPath<V>>::fold_with_ast_path(
                        value,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let raw = {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentKind::Token(self::fields::TokenField::Raw));
                    <swc_atoms::Atom as FoldWithAstPath<V>>::fold_with_ast_path(
                        raw,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                Token::Ident { value, raw }
            }
            Token::Function { value, raw } => {
                let mut __ast_path =
                    __ast_path.with_guard(AstParentKind::Token(self::fields::TokenField::Function));
                let value = {
                    let mut __ast_path = __ast_path
                        .with_guard(AstParentKind::Token(self::fields::TokenField::Value));
                    <swc_atoms::Atom as FoldWithAstPath<V>>::fold_with_ast_path(
                        value,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let raw = {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentKind::Token(self::fields::TokenField::Raw));
                    <swc_atoms::Atom as FoldWithAstPath<V>>::fold_with_ast_path(
                        raw,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                Token::Function { value, raw }
            }
            Token::AtKeyword { value, raw } => {
                let mut __ast_path = __ast_path
                    .with_guard(AstParentKind::Token(self::fields::TokenField::AtKeyword));
                let value = {
                    let mut __ast_path = __ast_path
                        .with_guard(AstParentKind::Token(self::fields::TokenField::Value));
                    <swc_atoms::Atom as FoldWithAstPath<V>>::fold_with_ast_path(
                        value,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let raw = {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentKind::Token(self::fields::TokenField::Raw));
                    <swc_atoms::Atom as FoldWithAstPath<V>>::fold_with_ast_path(
                        raw,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                Token::AtKeyword { value, raw }
            }
            Token::Hash { is_id, value, raw } => {
                let mut __ast_path =
                    __ast_path.with_guard(AstParentKind::Token(self::fields::TokenField::Hash));
                let value = {
                    let mut __ast_path = __ast_path
                        .with_guard(AstParentKind::Token(self::fields::TokenField::Value));
                    <swc_atoms::Atom as FoldWithAstPath<V>>::fold_with_ast_path(
                        value,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let raw = {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentKind::Token(self::fields::TokenField::Raw));
                    <swc_atoms::Atom as FoldWithAstPath<V>>::fold_with_ast_path(
                        raw,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                Token::Hash { is_id, value, raw }
            }
            Token::String { value, raw } => {
                let mut __ast_path =
                    __ast_path.with_guard(AstParentKind::Token(self::fields::TokenField::String));
                let value = {
                    let mut __ast_path = __ast_path
                        .with_guard(AstParentKind::Token(self::fields::TokenField::Value));
                    <swc_atoms::Atom as FoldWithAstPath<V>>::fold_with_ast_path(
                        value,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let raw = {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentKind::Token(self::fields::TokenField::Raw));
                    <swc_atoms::Atom as FoldWithAstPath<V>>::fold_with_ast_path(
                        raw,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                Token::String { value, raw }
            }
            Token::BadString { raw } => {
                let mut __ast_path = __ast_path
                    .with_guard(AstParentKind::Token(self::fields::TokenField::BadString));
                let raw = {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentKind::Token(self::fields::TokenField::Raw));
                    <swc_atoms::Atom as FoldWithAstPath<V>>::fold_with_ast_path(
                        raw,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                Token::BadString { raw }
            }
            Token::Url { value, raw } => {
                let mut __ast_path =
                    __ast_path.with_guard(AstParentKind::Token(self::fields::TokenField::Url));
                let value = {
                    let mut __ast_path = __ast_path
                        .with_guard(AstParentKind::Token(self::fields::TokenField::Value));
                    <swc_atoms::Atom as FoldWithAstPath<V>>::fold_with_ast_path(
                        value,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let raw = {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentKind::Token(self::fields::TokenField::Raw));
                    <Box<UrlKeyValue> as FoldWithAstPath<V>>::fold_with_ast_path(
                        raw,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                Token::Url { value, raw }
            }
            Token::BadUrl { raw } => {
                let mut __ast_path =
                    __ast_path.with_guard(AstParentKind::Token(self::fields::TokenField::BadUrl));
                let raw = {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentKind::Token(self::fields::TokenField::Raw));
                    <swc_atoms::Atom as FoldWithAstPath<V>>::fold_with_ast_path(
                        raw,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                Token::BadUrl { raw }
            }
            Token::Delim { value } => {
                let mut __ast_path =
                    __ast_path.with_guard(AstParentKind::Token(self::fields::TokenField::Delim));
                Token::Delim { value }
            }
            Token::Number {
                value,
                raw,
                type_flag,
            } => {
                let mut __ast_path =
                    __ast_path.with_guard(AstParentKind::Token(self::fields::TokenField::Number));
                let raw = {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentKind::Token(self::fields::TokenField::Raw));
                    <swc_atoms::Atom as FoldWithAstPath<V>>::fold_with_ast_path(
                        raw,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let type_flag = {
                    let mut __ast_path = __ast_path
                        .with_guard(AstParentKind::Token(self::fields::TokenField::TypeFlag));
                    <NumberType as FoldWithAstPath<V>>::fold_with_ast_path(
                        type_flag,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                Token::Number {
                    value,
                    raw,
                    type_flag,
                }
            }
            Token::Percentage { value, raw } => {
                let mut __ast_path = __ast_path
                    .with_guard(AstParentKind::Token(self::fields::TokenField::Percentage));
                let raw = {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentKind::Token(self::fields::TokenField::Raw));
                    <swc_atoms::Atom as FoldWithAstPath<V>>::fold_with_ast_path(
                        raw,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                Token::Percentage { value, raw }
            }
            Token::Dimension { 0: _field_0 } => {
                let mut __ast_path = __ast_path
                    .with_guard(AstParentKind::Token(self::fields::TokenField::Dimension));
                let _field_0 = <Box<DimensionToken> as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                Token::Dimension { 0: _field_0 }
            }
            Token::WhiteSpace { value } => {
                let mut __ast_path = __ast_path
                    .with_guard(AstParentKind::Token(self::fields::TokenField::WhiteSpace));
                let value = {
                    let mut __ast_path = __ast_path
                        .with_guard(AstParentKind::Token(self::fields::TokenField::Value));
                    <swc_atoms::Atom as FoldWithAstPath<V>>::fold_with_ast_path(
                        value,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                Token::WhiteSpace { value }
            }
            Token::CDO => Token::CDO,
            Token::CDC => Token::CDC,
            Token::Colon => Token::Colon,
            Token::Semi => Token::Semi,
            Token::Comma => Token::Comma,
            Token::LBracket => Token::LBracket,
            Token::RBracket => Token::RBracket,
            Token::LParen => Token::LParen,
            Token::RParen => Token::RParen,
            Token::LBrace => Token::LBrace,
            Token::RBrace => Token::RBrace,
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for TokenAndSpan {
    #[doc = "Calls [FoldAstPath`::fold_token_and_span`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_token_and_span(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            TokenAndSpan { span, token } => {
                let span = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::TokenAndSpan(
                        self::fields::TokenAndSpanField::Span,
                    ));
                    <swc_common::Span as FoldWithAstPath<V>>::fold_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let token = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::TokenAndSpan(
                        self::fields::TokenAndSpanField::Token,
                    ));
                    <Token as FoldWithAstPath<V>>::fold_with_ast_path(
                        token,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                TokenAndSpan { span, token }
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for TypeSelector {
    #[doc = "Calls [FoldAstPath`::fold_type_selector`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_type_selector(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            TypeSelector::TagName { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::TypeSelector(
                    self::fields::TypeSelectorField::TagName,
                ));
                let _field_0 = <TagNameSelector as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                TypeSelector::TagName { 0: _field_0 }
            }
            TypeSelector::Universal { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::TypeSelector(
                    self::fields::TypeSelectorField::Universal,
                ));
                let _field_0 = <UniversalSelector as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                TypeSelector::Universal { 0: _field_0 }
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for UnicodeRange {
    #[doc = "Calls [FoldAstPath`::fold_unicode_range`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_unicode_range(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            UnicodeRange {
                span,
                start,
                end,
                raw,
            } => {
                let span = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::UnicodeRange(
                        self::fields::UnicodeRangeField::Span,
                    ));
                    <swc_common::Span as FoldWithAstPath<V>>::fold_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let start = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::UnicodeRange(
                        self::fields::UnicodeRangeField::Start,
                    ));
                    <swc_atoms::Atom as FoldWithAstPath<V>>::fold_with_ast_path(
                        start,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let end = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::UnicodeRange(
                        self::fields::UnicodeRangeField::End,
                    ));
                    <Option<swc_atoms::Atom> as FoldWithAstPath<V>>::fold_with_ast_path(
                        end,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let raw = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::UnicodeRange(
                        self::fields::UnicodeRangeField::Raw,
                    ));
                    <Option<swc_atoms::Atom> as FoldWithAstPath<V>>::fold_with_ast_path(
                        raw,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                UnicodeRange {
                    span,
                    start,
                    end,
                    raw,
                }
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for UniversalSelector {
    #[doc = "Calls [FoldAstPath`::fold_universal_selector`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_universal_selector(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            UniversalSelector { span, prefix } => {
                let span = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::UniversalSelector(
                        self::fields::UniversalSelectorField::Span,
                    ));
                    <swc_common::Span as FoldWithAstPath<V>>::fold_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let prefix = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::UniversalSelector(
                        self::fields::UniversalSelectorField::Prefix,
                    ));
                    <Option<NamespacePrefix> as FoldWithAstPath<V>>::fold_with_ast_path(
                        prefix,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                UniversalSelector { span, prefix }
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for UnknownDimension {
    #[doc = "Calls [FoldAstPath`::fold_unknown_dimension`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_unknown_dimension(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            UnknownDimension { span, value, unit } => {
                let span = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::UnknownDimension(
                        self::fields::UnknownDimensionField::Span,
                    ));
                    <swc_common::Span as FoldWithAstPath<V>>::fold_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let value = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::UnknownDimension(
                        self::fields::UnknownDimensionField::Value,
                    ));
                    <Number as FoldWithAstPath<V>>::fold_with_ast_path(
                        value,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let unit = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::UnknownDimension(
                        self::fields::UnknownDimensionField::Unit,
                    ));
                    <Ident as FoldWithAstPath<V>>::fold_with_ast_path(
                        unit,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                UnknownDimension { span, value, unit }
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for Url {
    #[doc = "Calls [FoldAstPath`::fold_url`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_url(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            Url {
                span,
                name,
                value,
                modifiers,
            } => {
                let span = {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentKind::Url(self::fields::UrlField::Span));
                    <swc_common::Span as FoldWithAstPath<V>>::fold_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let name = {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentKind::Url(self::fields::UrlField::Name));
                    <Ident as FoldWithAstPath<V>>::fold_with_ast_path(
                        name,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let value = {
                    let mut __ast_path =
                        __ast_path.with_guard(AstParentKind::Url(self::fields::UrlField::Value));
                    <Option<Box<UrlValue>> as FoldWithAstPath<V>>::fold_with_ast_path(
                        value,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let modifiers = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::Url(
                        self::fields::UrlField::Modifiers(usize::MAX),
                    ));
                    <Option<Vec<UrlModifier>> as FoldWithAstPath<V>>::fold_with_ast_path(
                        modifiers,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                Url {
                    span,
                    name,
                    value,
                    modifiers,
                }
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for UrlKeyValue {
    #[doc = "Calls [FoldAstPath`::fold_url_key_value`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_url_key_value(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            UrlKeyValue {
                0: _field_0,
                1: _field_1,
            } => {
                let _field_0 = <swc_atoms::Atom as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                let _field_1 = <swc_atoms::Atom as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_1,
                    visitor,
                    &mut *__ast_path,
                );
                UrlKeyValue {
                    0: _field_0,
                    1: _field_1,
                }
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for UrlModifier {
    #[doc = "Calls [FoldAstPath`::fold_url_modifier`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_url_modifier(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            UrlModifier::Ident { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::UrlModifier(
                    self::fields::UrlModifierField::Ident,
                ));
                let _field_0 = <Ident as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                UrlModifier::Ident { 0: _field_0 }
            }
            UrlModifier::Function { 0: _field_0 } => {
                let mut __ast_path = __ast_path.with_guard(AstParentKind::UrlModifier(
                    self::fields::UrlModifierField::Function,
                ));
                let _field_0 = <Function as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                UrlModifier::Function { 0: _field_0 }
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for UrlValue {
    #[doc = "Calls [FoldAstPath`::fold_url_value`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_url_value(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            UrlValue::Str { 0: _field_0 } => {
                let mut __ast_path = __ast_path
                    .with_guard(AstParentKind::UrlValue(self::fields::UrlValueField::Str));
                let _field_0 = <Str as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                UrlValue::Str { 0: _field_0 }
            }
            UrlValue::Raw { 0: _field_0 } => {
                let mut __ast_path = __ast_path
                    .with_guard(AstParentKind::UrlValue(self::fields::UrlValueField::Raw));
                let _field_0 = <UrlValueRaw as FoldWithAstPath<V>>::fold_with_ast_path(
                    _field_0,
                    visitor,
                    &mut *__ast_path,
                );
                UrlValue::Raw { 0: _field_0 }
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for UrlValueRaw {
    #[doc = "Calls [FoldAstPath`::fold_url_value_raw`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_url_value_raw(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            UrlValueRaw { span, value, raw } => {
                let span = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::UrlValueRaw(
                        self::fields::UrlValueRawField::Span,
                    ));
                    <swc_common::Span as FoldWithAstPath<V>>::fold_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let value = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::UrlValueRaw(
                        self::fields::UrlValueRawField::Value,
                    ));
                    <swc_atoms::Atom as FoldWithAstPath<V>>::fold_with_ast_path(
                        value,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let raw = {
                    let mut __ast_path = __ast_path.with_guard(AstParentKind::UrlValueRaw(
                        self::fields::UrlValueRawField::Raw,
                    ));
                    <Option<swc_atoms::Atom> as FoldWithAstPath<V>>::fold_with_ast_path(
                        raw,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                UrlValueRaw { span, value, raw }
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for WqName {
    #[doc = "Calls [FoldAstPath`::fold_wq_name`] with `self`."]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_wq_name(visitor, self, __ast_path)
    }

    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        match self {
            WqName {
                span,
                prefix,
                value,
            } => {
                let span = {
                    let mut __ast_path = __ast_path
                        .with_guard(AstParentKind::WqName(self::fields::WqNameField::Span));
                    <swc_common::Span as FoldWithAstPath<V>>::fold_with_ast_path(
                        span,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let prefix = {
                    let mut __ast_path = __ast_path
                        .with_guard(AstParentKind::WqName(self::fields::WqNameField::Prefix));
                    <Option<NamespacePrefix> as FoldWithAstPath<V>>::fold_with_ast_path(
                        prefix,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                let value = {
                    let mut __ast_path = __ast_path
                        .with_guard(AstParentKind::WqName(self::fields::WqNameField::Value));
                    <Ident as FoldWithAstPath<V>>::fold_with_ast_path(
                        value,
                        visitor,
                        &mut *__ast_path,
                    )
                };
                WqName {
                    span,
                    prefix,
                    value,
                }
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for swc_atoms::Atom {
    #[doc = "Calls [FoldAstPath`::fold_atom`] with `self`. (Extra impl)"]
    #[inline]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_atom(visitor, self, __ast_path)
    }

    #[inline]
    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        self
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for Vec<CalcProductOrOperator> {
    #[doc = "Calls [FoldAstPath`::fold_calc_product_or_operators`] with `self`. (Extra impl)"]
    #[inline]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_calc_product_or_operators(visitor, self, __ast_path)
    }

    #[inline]
    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        self.into_iter()
            .enumerate()
            .map(|(__idx, item)| {
                let mut __ast_path = __ast_path.with_index_guard(__idx);
                <CalcProductOrOperator as FoldWithAstPath<V>>::fold_with_ast_path(
                    item,
                    visitor,
                    &mut *__ast_path,
                )
            })
            .collect()
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for Vec<CalcValueOrOperator> {
    #[doc = "Calls [FoldAstPath`::fold_calc_value_or_operators`] with `self`. (Extra impl)"]
    #[inline]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_calc_value_or_operators(visitor, self, __ast_path)
    }

    #[inline]
    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        self.into_iter()
            .enumerate()
            .map(|(__idx, item)| {
                let mut __ast_path = __ast_path.with_index_guard(__idx);
                <CalcValueOrOperator as FoldWithAstPath<V>>::fold_with_ast_path(
                    item,
                    visitor,
                    &mut *__ast_path,
                )
            })
            .collect()
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for Vec<ComplexSelectorChildren> {
    #[doc = "Calls [FoldAstPath`::fold_complex_selector_childrens`] with `self`. (Extra impl)"]
    #[inline]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_complex_selector_childrens(visitor, self, __ast_path)
    }

    #[inline]
    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        self.into_iter()
            .enumerate()
            .map(|(__idx, item)| {
                let mut __ast_path = __ast_path.with_index_guard(__idx);
                <ComplexSelectorChildren as FoldWithAstPath<V>>::fold_with_ast_path(
                    item,
                    visitor,
                    &mut *__ast_path,
                )
            })
            .collect()
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for Vec<ComplexSelector> {
    #[doc = "Calls [FoldAstPath`::fold_complex_selectors`] with `self`. (Extra impl)"]
    #[inline]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_complex_selectors(visitor, self, __ast_path)
    }

    #[inline]
    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        self.into_iter()
            .enumerate()
            .map(|(__idx, item)| {
                let mut __ast_path = __ast_path.with_index_guard(__idx);
                <ComplexSelector as FoldWithAstPath<V>>::fold_with_ast_path(
                    item,
                    visitor,
                    &mut *__ast_path,
                )
            })
            .collect()
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for Vec<ComponentValue> {
    #[doc = "Calls [FoldAstPath`::fold_component_values`] with `self`. (Extra impl)"]
    #[inline]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_component_values(visitor, self, __ast_path)
    }

    #[inline]
    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        self.into_iter()
            .enumerate()
            .map(|(__idx, item)| {
                let mut __ast_path = __ast_path.with_index_guard(__idx);
                <ComponentValue as FoldWithAstPath<V>>::fold_with_ast_path(
                    item,
                    visitor,
                    &mut *__ast_path,
                )
            })
            .collect()
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for Vec<CompoundSelector> {
    #[doc = "Calls [FoldAstPath`::fold_compound_selectors`] with `self`. (Extra impl)"]
    #[inline]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_compound_selectors(visitor, self, __ast_path)
    }

    #[inline]
    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        self.into_iter()
            .enumerate()
            .map(|(__idx, item)| {
                let mut __ast_path = __ast_path.with_index_guard(__idx);
                <CompoundSelector as FoldWithAstPath<V>>::fold_with_ast_path(
                    item,
                    visitor,
                    &mut *__ast_path,
                )
            })
            .collect()
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for Vec<ContainerQueryType> {
    #[doc = "Calls [FoldAstPath`::fold_container_query_types`] with `self`. (Extra impl)"]
    #[inline]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_container_query_types(visitor, self, __ast_path)
    }

    #[inline]
    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        self.into_iter()
            .enumerate()
            .map(|(__idx, item)| {
                let mut __ast_path = __ast_path.with_index_guard(__idx);
                <ContainerQueryType as FoldWithAstPath<V>>::fold_with_ast_path(
                    item,
                    visitor,
                    &mut *__ast_path,
                )
            })
            .collect()
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for Vec<CustomIdent> {
    #[doc = "Calls [FoldAstPath`::fold_custom_idents`] with `self`. (Extra impl)"]
    #[inline]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_custom_idents(visitor, self, __ast_path)
    }

    #[inline]
    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        self.into_iter()
            .enumerate()
            .map(|(__idx, item)| {
                let mut __ast_path = __ast_path.with_index_guard(__idx);
                <CustomIdent as FoldWithAstPath<V>>::fold_with_ast_path(
                    item,
                    visitor,
                    &mut *__ast_path,
                )
            })
            .collect()
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for Vec<DocumentPreludeMatchingFunction> {
    #[doc = "Calls [FoldAstPath`::fold_document_prelude_matching_functions`] with `self`. (Extra \
             impl)"]
    #[inline]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_document_prelude_matching_functions(visitor, self, __ast_path)
    }

    #[inline]
    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        self.into_iter()
            .enumerate()
            .map(|(__idx, item)| {
                let mut __ast_path = __ast_path.with_index_guard(__idx);
                <DocumentPreludeMatchingFunction as FoldWithAstPath<V>>::fold_with_ast_path(
                    item,
                    visitor,
                    &mut *__ast_path,
                )
            })
            .collect()
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for Vec<FamilyName> {
    #[doc = "Calls [FoldAstPath`::fold_family_names`] with `self`. (Extra impl)"]
    #[inline]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_family_names(visitor, self, __ast_path)
    }

    #[inline]
    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        self.into_iter()
            .enumerate()
            .map(|(__idx, item)| {
                let mut __ast_path = __ast_path.with_index_guard(__idx);
                <FamilyName as FoldWithAstPath<V>>::fold_with_ast_path(
                    item,
                    visitor,
                    &mut *__ast_path,
                )
            })
            .collect()
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for Vec<ForgivingComplexSelector> {
    #[doc = "Calls [FoldAstPath`::fold_forgiving_complex_selectors`] with `self`. (Extra impl)"]
    #[inline]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_forgiving_complex_selectors(visitor, self, __ast_path)
    }

    #[inline]
    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        self.into_iter()
            .enumerate()
            .map(|(__idx, item)| {
                let mut __ast_path = __ast_path.with_index_guard(__idx);
                <ForgivingComplexSelector as FoldWithAstPath<V>>::fold_with_ast_path(
                    item,
                    visitor,
                    &mut *__ast_path,
                )
            })
            .collect()
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for Vec<ForgivingRelativeSelector> {
    #[doc = "Calls [FoldAstPath`::fold_forgiving_relative_selectors`] with `self`. (Extra impl)"]
    #[inline]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_forgiving_relative_selectors(visitor, self, __ast_path)
    }

    #[inline]
    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        self.into_iter()
            .enumerate()
            .map(|(__idx, item)| {
                let mut __ast_path = __ast_path.with_index_guard(__idx);
                <ForgivingRelativeSelector as FoldWithAstPath<V>>::fold_with_ast_path(
                    item,
                    visitor,
                    &mut *__ast_path,
                )
            })
            .collect()
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for Vec<Ident> {
    #[doc = "Calls [FoldAstPath`::fold_idents`] with `self`. (Extra impl)"]
    #[inline]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_idents(visitor, self, __ast_path)
    }

    #[inline]
    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        self.into_iter()
            .enumerate()
            .map(|(__idx, item)| {
                let mut __ast_path = __ast_path.with_index_guard(__idx);
                <Ident as FoldWithAstPath<V>>::fold_with_ast_path(item, visitor, &mut *__ast_path)
            })
            .collect()
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for Vec<KeyframeSelector> {
    #[doc = "Calls [FoldAstPath`::fold_keyframe_selectors`] with `self`. (Extra impl)"]
    #[inline]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_keyframe_selectors(visitor, self, __ast_path)
    }

    #[inline]
    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        self.into_iter()
            .enumerate()
            .map(|(__idx, item)| {
                let mut __ast_path = __ast_path.with_index_guard(__idx);
                <KeyframeSelector as FoldWithAstPath<V>>::fold_with_ast_path(
                    item,
                    visitor,
                    &mut *__ast_path,
                )
            })
            .collect()
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for Vec<LayerName> {
    #[doc = "Calls [FoldAstPath`::fold_layer_names`] with `self`. (Extra impl)"]
    #[inline]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_layer_names(visitor, self, __ast_path)
    }

    #[inline]
    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        self.into_iter()
            .enumerate()
            .map(|(__idx, item)| {
                let mut __ast_path = __ast_path.with_index_guard(__idx);
                <LayerName as FoldWithAstPath<V>>::fold_with_ast_path(
                    item,
                    visitor,
                    &mut *__ast_path,
                )
            })
            .collect()
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for Vec<MediaConditionAllType> {
    #[doc = "Calls [FoldAstPath`::fold_media_condition_all_types`] with `self`. (Extra impl)"]
    #[inline]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_media_condition_all_types(visitor, self, __ast_path)
    }

    #[inline]
    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        self.into_iter()
            .enumerate()
            .map(|(__idx, item)| {
                let mut __ast_path = __ast_path.with_index_guard(__idx);
                <MediaConditionAllType as FoldWithAstPath<V>>::fold_with_ast_path(
                    item,
                    visitor,
                    &mut *__ast_path,
                )
            })
            .collect()
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for Vec<MediaConditionWithoutOrType> {
    #[doc = "Calls [FoldAstPath`::fold_media_condition_without_or_types`] with `self`. (Extra impl)"]
    #[inline]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_media_condition_without_or_types(visitor, self, __ast_path)
    }

    #[inline]
    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        self.into_iter()
            .enumerate()
            .map(|(__idx, item)| {
                let mut __ast_path = __ast_path.with_index_guard(__idx);
                <MediaConditionWithoutOrType as FoldWithAstPath<V>>::fold_with_ast_path(
                    item,
                    visitor,
                    &mut *__ast_path,
                )
            })
            .collect()
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for Vec<MediaQuery> {
    #[doc = "Calls [FoldAstPath`::fold_media_querys`] with `self`. (Extra impl)"]
    #[inline]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_media_querys(visitor, self, __ast_path)
    }

    #[inline]
    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        self.into_iter()
            .enumerate()
            .map(|(__idx, item)| {
                let mut __ast_path = __ast_path.with_index_guard(__idx);
                <MediaQuery as FoldWithAstPath<V>>::fold_with_ast_path(
                    item,
                    visitor,
                    &mut *__ast_path,
                )
            })
            .collect()
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for Option<Box<AtRulePrelude>> {
    #[doc = "Calls [FoldAstPath`::fold_opt_at_rule_prelude`] with `self`. (Extra impl)"]
    #[inline]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_opt_at_rule_prelude(visitor, self, __ast_path)
    }

    #[inline]
    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        self.map(|inner| {
            <Box<AtRulePrelude> as FoldWithAstPath<V>>::fold_with_ast_path(
                inner, visitor, __ast_path,
            )
        })
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for Option<swc_atoms::Atom> {
    #[doc = "Calls [FoldAstPath`::fold_opt_atom`] with `self`. (Extra impl)"]
    #[inline]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_opt_atom(visitor, self, __ast_path)
    }

    #[inline]
    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        self.map(|inner| {
            <swc_atoms::Atom as FoldWithAstPath<V>>::fold_with_ast_path(inner, visitor, __ast_path)
        })
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for Option<AttributeSelectorMatcher> {
    #[doc = "Calls [FoldAstPath`::fold_opt_attribute_selector_matcher`] with `self`. (Extra impl)"]
    #[inline]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_opt_attribute_selector_matcher(visitor, self, __ast_path)
    }

    #[inline]
    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        self.map(|inner| {
            <AttributeSelectorMatcher as FoldWithAstPath<V>>::fold_with_ast_path(
                inner, visitor, __ast_path,
            )
        })
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for Option<AttributeSelectorModifier> {
    #[doc = "Calls [FoldAstPath`::fold_opt_attribute_selector_modifier`] with `self`. (Extra impl)"]
    #[inline]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_opt_attribute_selector_modifier(visitor, self, __ast_path)
    }

    #[inline]
    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        self.map(|inner| {
            <AttributeSelectorModifier as FoldWithAstPath<V>>::fold_with_ast_path(
                inner, visitor, __ast_path,
            )
        })
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for Option<AttributeSelectorValue> {
    #[doc = "Calls [FoldAstPath`::fold_opt_attribute_selector_value`] with `self`. (Extra impl)"]
    #[inline]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_opt_attribute_selector_value(visitor, self, __ast_path)
    }

    #[inline]
    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        self.map(|inner| {
            <AttributeSelectorValue as FoldWithAstPath<V>>::fold_with_ast_path(
                inner, visitor, __ast_path,
            )
        })
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for Option<Combinator> {
    #[doc = "Calls [FoldAstPath`::fold_opt_combinator`] with `self`. (Extra impl)"]
    #[inline]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_opt_combinator(visitor, self, __ast_path)
    }

    #[inline]
    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        self.map(|inner| {
            <Combinator as FoldWithAstPath<V>>::fold_with_ast_path(inner, visitor, __ast_path)
        })
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for Option<ContainerName> {
    #[doc = "Calls [FoldAstPath`::fold_opt_container_name`] with `self`. (Extra impl)"]
    #[inline]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_opt_container_name(visitor, self, __ast_path)
    }

    #[inline]
    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        self.map(|inner| {
            <ContainerName as FoldWithAstPath<V>>::fold_with_ast_path(inner, visitor, __ast_path)
        })
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for Option<ForgivingSelectorList> {
    #[doc = "Calls [FoldAstPath`::fold_opt_forgiving_selector_list`] with `self`. (Extra impl)"]
    #[inline]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_opt_forgiving_selector_list(visitor, self, __ast_path)
    }

    #[inline]
    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        self.map(|inner| {
            <ForgivingSelectorList as FoldWithAstPath<V>>::fold_with_ast_path(
                inner, visitor, __ast_path,
            )
        })
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for Option<Box<Function>> {
    #[doc = "Calls [FoldAstPath`::fold_opt_function`] with `self`. (Extra impl)"]
    #[inline]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_opt_function(visitor, self, __ast_path)
    }

    #[inline]
    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        self.map(|inner| {
            <Box<Function> as FoldWithAstPath<V>>::fold_with_ast_path(inner, visitor, __ast_path)
        })
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for Option<Ident> {
    #[doc = "Calls [FoldAstPath`::fold_opt_ident`] with `self`. (Extra impl)"]
    #[inline]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_opt_ident(visitor, self, __ast_path)
    }

    #[inline]
    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        self.map(|inner| {
            <Ident as FoldWithAstPath<V>>::fold_with_ast_path(inner, visitor, __ast_path)
        })
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for Option<Box<ImportConditions>> {
    #[doc = "Calls [FoldAstPath`::fold_opt_import_conditions`] with `self`. (Extra impl)"]
    #[inline]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_opt_import_conditions(visitor, self, __ast_path)
    }

    #[inline]
    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        self.map(|inner| {
            <Box<ImportConditions> as FoldWithAstPath<V>>::fold_with_ast_path(
                inner, visitor, __ast_path,
            )
        })
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for Option<Box<ImportLayerName>> {
    #[doc = "Calls [FoldAstPath`::fold_opt_import_layer_name`] with `self`. (Extra impl)"]
    #[inline]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_opt_import_layer_name(visitor, self, __ast_path)
    }

    #[inline]
    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        self.map(|inner| {
            <Box<ImportLayerName> as FoldWithAstPath<V>>::fold_with_ast_path(
                inner, visitor, __ast_path,
            )
        })
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for Option<ImportantFlag> {
    #[doc = "Calls [FoldAstPath`::fold_opt_important_flag`] with `self`. (Extra impl)"]
    #[inline]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_opt_important_flag(visitor, self, __ast_path)
    }

    #[inline]
    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        self.map(|inner| {
            <ImportantFlag as FoldWithAstPath<V>>::fold_with_ast_path(inner, visitor, __ast_path)
        })
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for Option<Box<MediaConditionType>> {
    #[doc = "Calls [FoldAstPath`::fold_opt_media_condition_type`] with `self`. (Extra impl)"]
    #[inline]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_opt_media_condition_type(visitor, self, __ast_path)
    }

    #[inline]
    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        self.map(|inner| {
            <Box<MediaConditionType> as FoldWithAstPath<V>>::fold_with_ast_path(
                inner, visitor, __ast_path,
            )
        })
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for Option<Box<MediaQueryList>> {
    #[doc = "Calls [FoldAstPath`::fold_opt_media_query_list`] with `self`. (Extra impl)"]
    #[inline]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_opt_media_query_list(visitor, self, __ast_path)
    }

    #[inline]
    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        self.map(|inner| {
            <Box<MediaQueryList> as FoldWithAstPath<V>>::fold_with_ast_path(
                inner, visitor, __ast_path,
            )
        })
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for Option<MediaType> {
    #[doc = "Calls [FoldAstPath`::fold_opt_media_type`] with `self`. (Extra impl)"]
    #[inline]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_opt_media_type(visitor, self, __ast_path)
    }

    #[inline]
    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        self.map(|inner| {
            <MediaType as FoldWithAstPath<V>>::fold_with_ast_path(inner, visitor, __ast_path)
        })
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for Option<Namespace> {
    #[doc = "Calls [FoldAstPath`::fold_opt_namespace`] with `self`. (Extra impl)"]
    #[inline]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_opt_namespace(visitor, self, __ast_path)
    }

    #[inline]
    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        self.map(|inner| {
            <Namespace as FoldWithAstPath<V>>::fold_with_ast_path(inner, visitor, __ast_path)
        })
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for Option<NamespacePrefix> {
    #[doc = "Calls [FoldAstPath`::fold_opt_namespace_prefix`] with `self`. (Extra impl)"]
    #[inline]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_opt_namespace_prefix(visitor, self, __ast_path)
    }

    #[inline]
    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        self.map(|inner| {
            <NamespacePrefix as FoldWithAstPath<V>>::fold_with_ast_path(inner, visitor, __ast_path)
        })
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for Option<NestingSelector> {
    #[doc = "Calls [FoldAstPath`::fold_opt_nesting_selector`] with `self`. (Extra impl)"]
    #[inline]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_opt_nesting_selector(visitor, self, __ast_path)
    }

    #[inline]
    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        self.map(|inner| {
            <NestingSelector as FoldWithAstPath<V>>::fold_with_ast_path(inner, visitor, __ast_path)
        })
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for Option<Number> {
    #[doc = "Calls [FoldAstPath`::fold_opt_number`] with `self`. (Extra impl)"]
    #[inline]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_opt_number(visitor, self, __ast_path)
    }

    #[inline]
    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        self.map(|inner| {
            <Number as FoldWithAstPath<V>>::fold_with_ast_path(inner, visitor, __ast_path)
        })
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for Option<Vec<PageSelectorPseudo>> {
    #[doc = "Calls [FoldAstPath`::fold_opt_page_selector_pseudos`] with `self`. (Extra impl)"]
    #[inline]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_opt_page_selector_pseudos(visitor, self, __ast_path)
    }

    #[inline]
    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        self.map(|inner| {
            <Vec<PageSelectorPseudo> as FoldWithAstPath<V>>::fold_with_ast_path(
                inner, visitor, __ast_path,
            )
        })
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for Option<PageSelectorType> {
    #[doc = "Calls [FoldAstPath`::fold_opt_page_selector_type`] with `self`. (Extra impl)"]
    #[inline]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_opt_page_selector_type(visitor, self, __ast_path)
    }

    #[inline]
    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        self.map(|inner| {
            <PageSelectorType as FoldWithAstPath<V>>::fold_with_ast_path(inner, visitor, __ast_path)
        })
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for Option<Vec<PseudoClassSelectorChildren>> {
    #[doc = "Calls [FoldAstPath`::fold_opt_pseudo_class_selector_childrens`] with `self`. (Extra \
             impl)"]
    #[inline]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_opt_pseudo_class_selector_childrens(visitor, self, __ast_path)
    }

    #[inline]
    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        self.map(|inner| {
            <Vec<PseudoClassSelectorChildren> as FoldWithAstPath<V>>::fold_with_ast_path(
                inner, visitor, __ast_path,
            )
        })
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for Option<Vec<PseudoElementSelectorChildren>> {
    #[doc = "Calls [FoldAstPath`::fold_opt_pseudo_element_selector_childrens`] with `self`. (Extra \
             impl)"]
    #[inline]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_opt_pseudo_element_selector_childrens(visitor, self, __ast_path)
    }

    #[inline]
    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        self.map(|inner| {
            <Vec<PseudoElementSelectorChildren> as FoldWithAstPath<V>>::fold_with_ast_path(
                inner, visitor, __ast_path,
            )
        })
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for Option<SimpleBlock> {
    #[doc = "Calls [FoldAstPath`::fold_opt_simple_block`] with `self`. (Extra impl)"]
    #[inline]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_opt_simple_block(visitor, self, __ast_path)
    }

    #[inline]
    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        self.map(|inner| {
            <SimpleBlock as FoldWithAstPath<V>>::fold_with_ast_path(inner, visitor, __ast_path)
        })
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for Option<Box<TypeSelector>> {
    #[doc = "Calls [FoldAstPath`::fold_opt_type_selector`] with `self`. (Extra impl)"]
    #[inline]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_opt_type_selector(visitor, self, __ast_path)
    }

    #[inline]
    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        self.map(|inner| {
            <Box<TypeSelector> as FoldWithAstPath<V>>::fold_with_ast_path(
                inner, visitor, __ast_path,
            )
        })
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for Option<Vec<UrlModifier>> {
    #[doc = "Calls [FoldAstPath`::fold_opt_url_modifiers`] with `self`. (Extra impl)"]
    #[inline]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_opt_url_modifiers(visitor, self, __ast_path)
    }

    #[inline]
    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        self.map(|inner| {
            <Vec<UrlModifier> as FoldWithAstPath<V>>::fold_with_ast_path(inner, visitor, __ast_path)
        })
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for Option<Box<UrlValue>> {
    #[doc = "Calls [FoldAstPath`::fold_opt_url_value`] with `self`. (Extra impl)"]
    #[inline]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_opt_url_value(visitor, self, __ast_path)
    }

    #[inline]
    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        self.map(|inner| {
            <Box<UrlValue> as FoldWithAstPath<V>>::fold_with_ast_path(inner, visitor, __ast_path)
        })
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for Vec<PageSelectorPseudo> {
    #[doc = "Calls [FoldAstPath`::fold_page_selector_pseudos`] with `self`. (Extra impl)"]
    #[inline]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_page_selector_pseudos(visitor, self, __ast_path)
    }

    #[inline]
    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        self.into_iter()
            .enumerate()
            .map(|(__idx, item)| {
                let mut __ast_path = __ast_path.with_index_guard(__idx);
                <PageSelectorPseudo as FoldWithAstPath<V>>::fold_with_ast_path(
                    item,
                    visitor,
                    &mut *__ast_path,
                )
            })
            .collect()
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for Vec<PageSelector> {
    #[doc = "Calls [FoldAstPath`::fold_page_selectors`] with `self`. (Extra impl)"]
    #[inline]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_page_selectors(visitor, self, __ast_path)
    }

    #[inline]
    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        self.into_iter()
            .enumerate()
            .map(|(__idx, item)| {
                let mut __ast_path = __ast_path.with_index_guard(__idx);
                <PageSelector as FoldWithAstPath<V>>::fold_with_ast_path(
                    item,
                    visitor,
                    &mut *__ast_path,
                )
            })
            .collect()
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for Vec<PseudoClassSelectorChildren> {
    #[doc = "Calls [FoldAstPath`::fold_pseudo_class_selector_childrens`] with `self`. (Extra impl)"]
    #[inline]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_pseudo_class_selector_childrens(visitor, self, __ast_path)
    }

    #[inline]
    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        self.into_iter()
            .enumerate()
            .map(|(__idx, item)| {
                let mut __ast_path = __ast_path.with_index_guard(__idx);
                <PseudoClassSelectorChildren as FoldWithAstPath<V>>::fold_with_ast_path(
                    item,
                    visitor,
                    &mut *__ast_path,
                )
            })
            .collect()
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for Vec<PseudoElementSelectorChildren> {
    #[doc = "Calls [FoldAstPath`::fold_pseudo_element_selector_childrens`] with `self`. (Extra \
             impl)"]
    #[inline]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_pseudo_element_selector_childrens(visitor, self, __ast_path)
    }

    #[inline]
    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        self.into_iter()
            .enumerate()
            .map(|(__idx, item)| {
                let mut __ast_path = __ast_path.with_index_guard(__idx);
                <PseudoElementSelectorChildren as FoldWithAstPath<V>>::fold_with_ast_path(
                    item,
                    visitor,
                    &mut *__ast_path,
                )
            })
            .collect()
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for Vec<RelativeSelector> {
    #[doc = "Calls [FoldAstPath`::fold_relative_selectors`] with `self`. (Extra impl)"]
    #[inline]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_relative_selectors(visitor, self, __ast_path)
    }

    #[inline]
    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        self.into_iter()
            .enumerate()
            .map(|(__idx, item)| {
                let mut __ast_path = __ast_path.with_index_guard(__idx);
                <RelativeSelector as FoldWithAstPath<V>>::fold_with_ast_path(
                    item,
                    visitor,
                    &mut *__ast_path,
                )
            })
            .collect()
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for Vec<Rule> {
    #[doc = "Calls [FoldAstPath`::fold_rules`] with `self`. (Extra impl)"]
    #[inline]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_rules(visitor, self, __ast_path)
    }

    #[inline]
    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        self.into_iter()
            .enumerate()
            .map(|(__idx, item)| {
                let mut __ast_path = __ast_path.with_index_guard(__idx);
                <Rule as FoldWithAstPath<V>>::fold_with_ast_path(item, visitor, &mut *__ast_path)
            })
            .collect()
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for swc_common::Span {
    #[doc = "Calls [FoldAstPath`::fold_span`] with `self`. (Extra impl)"]
    #[inline]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_span(visitor, self, __ast_path)
    }

    #[inline]
    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        self
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for Vec<SubclassSelector> {
    #[doc = "Calls [FoldAstPath`::fold_subclass_selectors`] with `self`. (Extra impl)"]
    #[inline]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_subclass_selectors(visitor, self, __ast_path)
    }

    #[inline]
    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        self.into_iter()
            .enumerate()
            .map(|(__idx, item)| {
                let mut __ast_path = __ast_path.with_index_guard(__idx);
                <SubclassSelector as FoldWithAstPath<V>>::fold_with_ast_path(
                    item,
                    visitor,
                    &mut *__ast_path,
                )
            })
            .collect()
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for Vec<SupportsConditionType> {
    #[doc = "Calls [FoldAstPath`::fold_supports_condition_types`] with `self`. (Extra impl)"]
    #[inline]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_supports_condition_types(visitor, self, __ast_path)
    }

    #[inline]
    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        self.into_iter()
            .enumerate()
            .map(|(__idx, item)| {
                let mut __ast_path = __ast_path.with_index_guard(__idx);
                <SupportsConditionType as FoldWithAstPath<V>>::fold_with_ast_path(
                    item,
                    visitor,
                    &mut *__ast_path,
                )
            })
            .collect()
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V: ?Sized + FoldAstPath> FoldWithAstPath<V> for Vec<UrlModifier> {
    #[doc = "Calls [FoldAstPath`::fold_url_modifiers`] with `self`. (Extra impl)"]
    #[inline]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        <V as FoldAstPath>::fold_url_modifiers(visitor, self, __ast_path)
    }

    #[inline]
    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        self.into_iter()
            .enumerate()
            .map(|(__idx, item)| {
                let mut __ast_path = __ast_path.with_index_guard(__idx);
                <UrlModifier as FoldWithAstPath<V>>::fold_with_ast_path(
                    item,
                    visitor,
                    &mut *__ast_path,
                )
            })
            .collect()
    }
}
#[cfg(any(docsrs, feature = "path"))]
#[cfg_attr(docsrs, doc(cfg(feature = "path")))]
impl<V, T> FoldWithAstPath<V> for std::boxed::Box<T>
where
    V: ?Sized + FoldAstPath,
    T: FoldWithAstPath<V>,
{
    #[inline]
    fn fold_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        swc_visit::util::map::Map::map(self, |inner| {
            <T as FoldWithAstPath<V>>::fold_with_ast_path(inner, visitor, __ast_path)
        })
    }

    #[inline]
    fn fold_children_with_ast_path(self, visitor: &mut V, __ast_path: &mut AstKindPath) -> Self {
        swc_visit::util::map::Map::map(self, |inner| {
            <T as FoldWithAstPath<V>>::fold_children_with_ast_path(inner, visitor, __ast_path)
        })
    }
}
#[cfg(any(docsrs, feature = "path"))]
pub type AstKindPath = swc_visit::AstKindPath<AstParentKind>;
#[cfg(any(docsrs, feature = "path"))]
pub type AstNodePath<'ast> = swc_visit::AstNodePath<AstParentNodeRef<'ast>>;
#[cfg(any(docsrs, feature = "path"))]
pub mod fields {
    use swc_css_ast::*;
    #[inline(always)]
    fn assert_initial_index(idx: usize, index: usize) {
        #[cfg(debug_assertions)]
        if !(idx == usize::MAX || index == usize::MAX) {
            {
                panic!("Should be usize::MAX");
            }
        }
    }
    impl AbsoluteColorBaseField {
        #[inline(always)]
        pub(crate) fn set_index(&mut self, _: usize) {
            swc_visit::wrong_ast_path();
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum AbsoluteColorBaseField {
        #[doc = "Represents [`AbsoluteColorBase::HexColor`]"]
        HexColor,
        #[doc = "Represents [`AbsoluteColorBase::NamedColorOrTransparent`]"]
        NamedColorOrTransparent,
        #[doc = "Represents [`AbsoluteColorBase::Function`]"]
        Function,
    }
    impl AlphaValueField {
        #[inline(always)]
        pub(crate) fn set_index(&mut self, _: usize) {
            swc_visit::wrong_ast_path();
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum AlphaValueField {
        #[doc = "Represents [`AlphaValue::Number`]"]
        Number,
        #[doc = "Represents [`AlphaValue::Percentage`]"]
        Percentage,
    }
    impl AnPlusBField {
        #[inline(always)]
        pub(crate) fn set_index(&mut self, _: usize) {
            swc_visit::wrong_ast_path();
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum AnPlusBField {
        #[doc = "Represents [`AnPlusB::Ident`]"]
        Ident,
        #[doc = "Represents [`AnPlusB::AnPlusBNotation`]"]
        AnPlusBNotation,
    }
    impl AnPlusBNotationField {
        pub(crate) fn set_index(&mut self, index: usize) {
            match self {
                _ => swc_visit::wrong_ast_path(),
            }
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum AnPlusBNotationField {
        #[doc = "Represents [`AnPlusBNotation::span`]"]
        Span,
        #[doc = "Represents [`AnPlusBNotation::a`]"]
        A,
        #[doc = "Represents [`AnPlusBNotation::a_raw`]"]
        ARaw,
        #[doc = "Represents [`AnPlusBNotation::b`]"]
        B,
        #[doc = "Represents [`AnPlusBNotation::b_raw`]"]
        BRaw,
    }
    impl AngleField {
        pub(crate) fn set_index(&mut self, index: usize) {
            match self {
                _ => swc_visit::wrong_ast_path(),
            }
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum AngleField {
        #[doc = "Represents [`Angle::span`]"]
        Span,
        #[doc = "Represents [`Angle::value`]"]
        Value,
        #[doc = "Represents [`Angle::unit`]"]
        Unit,
    }
    impl AnglePercentageField {
        #[inline(always)]
        pub(crate) fn set_index(&mut self, _: usize) {
            swc_visit::wrong_ast_path();
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum AnglePercentageField {
        #[doc = "Represents [`AnglePercentage::Angle`]"]
        Angle,
        #[doc = "Represents [`AnglePercentage::Percentage`]"]
        Percentage,
    }
    impl AnyNamespaceField {
        pub(crate) fn set_index(&mut self, index: usize) {
            match self {
                _ => swc_visit::wrong_ast_path(),
            }
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum AnyNamespaceField {
        #[doc = "Represents [`AnyNamespace::span`]"]
        Span,
    }
    impl AtRuleField {
        pub(crate) fn set_index(&mut self, index: usize) {
            match self {
                _ => swc_visit::wrong_ast_path(),
            }
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum AtRuleField {
        #[doc = "Represents [`AtRule::span`]"]
        Span,
        #[doc = "Represents [`AtRule::name`]"]
        Name,
        #[doc = "Represents [`AtRule::prelude`]"]
        Prelude,
        #[doc = "Represents [`AtRule::block`]"]
        Block,
    }
    impl AtRuleNameField {
        #[inline(always)]
        pub(crate) fn set_index(&mut self, _: usize) {
            swc_visit::wrong_ast_path();
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum AtRuleNameField {
        #[doc = "Represents [`AtRuleName::DashedIdent`]"]
        DashedIdent,
        #[doc = "Represents [`AtRuleName::Ident`]"]
        Ident,
    }
    impl AtRulePreludeField {
        #[inline(always)]
        pub(crate) fn set_index(&mut self, _: usize) {
            swc_visit::wrong_ast_path();
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum AtRulePreludeField {
        #[doc = "Represents [`AtRulePrelude::ListOfComponentValues`]"]
        ListOfComponentValues,
        #[doc = "Represents [`AtRulePrelude::CharsetPrelude`]"]
        CharsetPrelude,
        #[doc = "Represents [`AtRulePrelude::PropertyPrelude`]"]
        PropertyPrelude,
        #[doc = "Represents [`AtRulePrelude::CounterStylePrelude`]"]
        CounterStylePrelude,
        #[doc = "Represents [`AtRulePrelude::ColorProfilePrelude`]"]
        ColorProfilePrelude,
        #[doc = "Represents [`AtRulePrelude::DocumentPrelude`]"]
        DocumentPrelude,
        #[doc = "Represents [`AtRulePrelude::FontPaletteValuesPrelude`]"]
        FontPaletteValuesPrelude,
        #[doc = "Represents [`AtRulePrelude::FontFeatureValuesPrelude`]"]
        FontFeatureValuesPrelude,
        #[doc = "Represents [`AtRulePrelude::NestPrelude`]"]
        NestPrelude,
        #[doc = "Represents [`AtRulePrelude::KeyframesPrelude`]"]
        KeyframesPrelude,
        #[doc = "Represents [`AtRulePrelude::ImportPrelude`]"]
        ImportPrelude,
        #[doc = "Represents [`AtRulePrelude::NamespacePrelude`]"]
        NamespacePrelude,
        #[doc = "Represents [`AtRulePrelude::MediaPrelude`]"]
        MediaPrelude,
        #[doc = "Represents [`AtRulePrelude::SupportsPrelude`]"]
        SupportsPrelude,
        #[doc = "Represents [`AtRulePrelude::PagePrelude`]"]
        PagePrelude,
        #[doc = "Represents [`AtRulePrelude::LayerPrelude`]"]
        LayerPrelude,
        #[doc = "Represents [`AtRulePrelude::ContainerPrelude`]"]
        ContainerPrelude,
        #[doc = "Represents [`AtRulePrelude::CustomMediaPrelude`]"]
        CustomMediaPrelude,
        #[doc = "Represents [`AtRulePrelude::ScopePrelude`]"]
        ScopePrelude,
    }
    impl AttributeSelectorField {
        pub(crate) fn set_index(&mut self, index: usize) {
            match self {
                _ => swc_visit::wrong_ast_path(),
            }
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum AttributeSelectorField {
        #[doc = "Represents [`AttributeSelector::span`]"]
        Span,
        #[doc = "Represents [`AttributeSelector::name`]"]
        Name,
        #[doc = "Represents [`AttributeSelector::matcher`]"]
        Matcher,
        #[doc = "Represents [`AttributeSelector::value`]"]
        Value,
        #[doc = "Represents [`AttributeSelector::modifier`]"]
        Modifier,
    }
    impl AttributeSelectorMatcherField {
        pub(crate) fn set_index(&mut self, index: usize) {
            match self {
                _ => swc_visit::wrong_ast_path(),
            }
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum AttributeSelectorMatcherField {
        #[doc = "Represents [`AttributeSelectorMatcher::span`]"]
        Span,
        #[doc = "Represents [`AttributeSelectorMatcher::value`]"]
        Value,
    }
    impl AttributeSelectorMatcherValueField {
        #[inline(always)]
        pub(crate) fn set_index(&mut self, _: usize) {
            swc_visit::wrong_ast_path();
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum AttributeSelectorMatcherValueField {
        #[doc = "Represents [`AttributeSelectorMatcherValue::Equals`]"]
        Equals,
        #[doc = "Represents [`AttributeSelectorMatcherValue::Tilde`]"]
        Tilde,
        #[doc = "Represents [`AttributeSelectorMatcherValue::Bar`]"]
        Bar,
        #[doc = "Represents [`AttributeSelectorMatcherValue::Caret`]"]
        Caret,
        #[doc = "Represents [`AttributeSelectorMatcherValue::Dollar`]"]
        Dollar,
        #[doc = "Represents [`AttributeSelectorMatcherValue::Asterisk`]"]
        Asterisk,
    }
    impl AttributeSelectorModifierField {
        pub(crate) fn set_index(&mut self, index: usize) {
            match self {
                _ => swc_visit::wrong_ast_path(),
            }
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum AttributeSelectorModifierField {
        #[doc = "Represents [`AttributeSelectorModifier::span`]"]
        Span,
        #[doc = "Represents [`AttributeSelectorModifier::value`]"]
        Value,
    }
    impl AttributeSelectorValueField {
        #[inline(always)]
        pub(crate) fn set_index(&mut self, _: usize) {
            swc_visit::wrong_ast_path();
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum AttributeSelectorValueField {
        #[doc = "Represents [`AttributeSelectorValue::Str`]"]
        Str,
        #[doc = "Represents [`AttributeSelectorValue::Ident`]"]
        Ident,
    }
    impl BinOpField {
        #[inline(always)]
        pub(crate) fn set_index(&mut self, _: usize) {
            swc_visit::wrong_ast_path();
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum BinOpField {
        #[doc = "Represents [`BinOp::Add`]"]
        Add,
        #[doc = "Represents [`BinOp::Sub`]"]
        Sub,
        #[doc = "Represents [`BinOp::Mul`]"]
        Mul,
        #[doc = "Represents [`BinOp::Div`]"]
        Div,
    }
    impl CalcOperatorField {
        pub(crate) fn set_index(&mut self, index: usize) {
            match self {
                _ => swc_visit::wrong_ast_path(),
            }
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum CalcOperatorField {
        #[doc = "Represents [`CalcOperator::span`]"]
        Span,
        #[doc = "Represents [`CalcOperator::value`]"]
        Value,
    }
    impl CalcOperatorTypeField {
        #[inline(always)]
        pub(crate) fn set_index(&mut self, _: usize) {
            swc_visit::wrong_ast_path();
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum CalcOperatorTypeField {
        #[doc = "Represents [`CalcOperatorType::Add`]"]
        Add,
        #[doc = "Represents [`CalcOperatorType::Sub`]"]
        Sub,
        #[doc = "Represents [`CalcOperatorType::Mul`]"]
        Mul,
        #[doc = "Represents [`CalcOperatorType::Div`]"]
        Div,
    }
    impl CalcProductField {
        pub(crate) fn set_index(&mut self, index: usize) {
            match self {
                Self::Expressions(idx) => {
                    assert_initial_index(*idx, index);
                    *idx = index;
                }
                _ => swc_visit::wrong_ast_path(),
            }
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum CalcProductField {
        #[doc = "Represents [`CalcProduct::span`]"]
        Span,
        #[doc = "Represents [`CalcProduct::expressions`]"]
        Expressions(usize),
    }
    impl CalcProductOrOperatorField {
        #[inline(always)]
        pub(crate) fn set_index(&mut self, _: usize) {
            swc_visit::wrong_ast_path();
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum CalcProductOrOperatorField {
        #[doc = "Represents [`CalcProductOrOperator::Product`]"]
        Product,
        #[doc = "Represents [`CalcProductOrOperator::Operator`]"]
        Operator,
    }
    impl CalcSumField {
        pub(crate) fn set_index(&mut self, index: usize) {
            match self {
                Self::Expressions(idx) => {
                    assert_initial_index(*idx, index);
                    *idx = index;
                }
                _ => swc_visit::wrong_ast_path(),
            }
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum CalcSumField {
        #[doc = "Represents [`CalcSum::span`]"]
        Span,
        #[doc = "Represents [`CalcSum::expressions`]"]
        Expressions(usize),
    }
    impl CalcValueField {
        #[inline(always)]
        pub(crate) fn set_index(&mut self, _: usize) {
            swc_visit::wrong_ast_path();
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum CalcValueField {
        #[doc = "Represents [`CalcValue::Number`]"]
        Number,
        #[doc = "Represents [`CalcValue::Dimension`]"]
        Dimension,
        #[doc = "Represents [`CalcValue::Percentage`]"]
        Percentage,
        #[doc = "Represents [`CalcValue::Constant`]"]
        Constant,
        #[doc = "Represents [`CalcValue::Sum`]"]
        Sum,
        #[doc = "Represents [`CalcValue::Function`]"]
        Function,
    }
    impl CalcValueOrOperatorField {
        #[inline(always)]
        pub(crate) fn set_index(&mut self, _: usize) {
            swc_visit::wrong_ast_path();
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum CalcValueOrOperatorField {
        #[doc = "Represents [`CalcValueOrOperator::Value`]"]
        Value,
        #[doc = "Represents [`CalcValueOrOperator::Operator`]"]
        Operator,
    }
    impl ClassSelectorField {
        pub(crate) fn set_index(&mut self, index: usize) {
            match self {
                _ => swc_visit::wrong_ast_path(),
            }
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum ClassSelectorField {
        #[doc = "Represents [`ClassSelector::span`]"]
        Span,
        #[doc = "Represents [`ClassSelector::text`]"]
        Text,
    }
    impl CmykComponentField {
        #[inline(always)]
        pub(crate) fn set_index(&mut self, _: usize) {
            swc_visit::wrong_ast_path();
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum CmykComponentField {
        #[doc = "Represents [`CmykComponent::Number`]"]
        Number,
        #[doc = "Represents [`CmykComponent::Percentage`]"]
        Percentage,
        #[doc = "Represents [`CmykComponent::Function`]"]
        Function,
    }
    impl ColorField {
        #[inline(always)]
        pub(crate) fn set_index(&mut self, _: usize) {
            swc_visit::wrong_ast_path();
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum ColorField {
        #[doc = "Represents [`Color::AbsoluteColorBase`]"]
        AbsoluteColorBase,
        #[doc = "Represents [`Color::CurrentColorOrSystemColor`]"]
        CurrentColorOrSystemColor,
        #[doc = "Represents [`Color::Function`]"]
        Function,
    }
    impl ColorProfileNameField {
        #[inline(always)]
        pub(crate) fn set_index(&mut self, _: usize) {
            swc_visit::wrong_ast_path();
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum ColorProfileNameField {
        #[doc = "Represents [`ColorProfileName::DashedIdent`]"]
        DashedIdent,
        #[doc = "Represents [`ColorProfileName::Ident`]"]
        Ident,
    }
    impl CombinatorField {
        pub(crate) fn set_index(&mut self, index: usize) {
            match self {
                _ => swc_visit::wrong_ast_path(),
            }
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum CombinatorField {
        #[doc = "Represents [`Combinator::span`]"]
        Span,
        #[doc = "Represents [`Combinator::value`]"]
        Value,
    }
    impl CombinatorValueField {
        #[inline(always)]
        pub(crate) fn set_index(&mut self, _: usize) {
            swc_visit::wrong_ast_path();
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum CombinatorValueField {
        #[doc = "Represents [`CombinatorValue::Descendant`]"]
        Descendant,
        #[doc = "Represents [`CombinatorValue::NextSibling`]"]
        NextSibling,
        #[doc = "Represents [`CombinatorValue::Child`]"]
        Child,
        #[doc = "Represents [`CombinatorValue::LaterSibling`]"]
        LaterSibling,
        #[doc = "Represents [`CombinatorValue::Column`]"]
        Column,
    }
    impl ComplexSelectorField {
        pub(crate) fn set_index(&mut self, index: usize) {
            match self {
                Self::Children(idx) => {
                    assert_initial_index(*idx, index);
                    *idx = index;
                }
                _ => swc_visit::wrong_ast_path(),
            }
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum ComplexSelectorField {
        #[doc = "Represents [`ComplexSelector::span`]"]
        Span,
        #[doc = "Represents [`ComplexSelector::children`]"]
        Children(usize),
    }
    impl ComplexSelectorChildrenField {
        #[inline(always)]
        pub(crate) fn set_index(&mut self, _: usize) {
            swc_visit::wrong_ast_path();
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum ComplexSelectorChildrenField {
        #[doc = "Represents [`ComplexSelectorChildren::CompoundSelector`]"]
        CompoundSelector,
        #[doc = "Represents [`ComplexSelectorChildren::Combinator`]"]
        Combinator,
    }
    impl ComponentValueField {
        #[inline(always)]
        pub(crate) fn set_index(&mut self, _: usize) {
            swc_visit::wrong_ast_path();
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum ComponentValueField {
        #[doc = "Represents [`ComponentValue::PreservedToken`]"]
        PreservedToken,
        #[doc = "Represents [`ComponentValue::Function`]"]
        Function,
        #[doc = "Represents [`ComponentValue::SimpleBlock`]"]
        SimpleBlock,
        #[doc = "Represents [`ComponentValue::AtRule`]"]
        AtRule,
        #[doc = "Represents [`ComponentValue::QualifiedRule`]"]
        QualifiedRule,
        #[doc = "Represents [`ComponentValue::ListOfComponentValues`]"]
        ListOfComponentValues,
        #[doc = "Represents [`ComponentValue::KeyframeBlock`]"]
        KeyframeBlock,
        #[doc = "Represents [`ComponentValue::Ident`]"]
        Ident,
        #[doc = "Represents [`ComponentValue::DashedIdent`]"]
        DashedIdent,
        #[doc = "Represents [`ComponentValue::Str`]"]
        Str,
        #[doc = "Represents [`ComponentValue::Url`]"]
        Url,
        #[doc = "Represents [`ComponentValue::Integer`]"]
        Integer,
        #[doc = "Represents [`ComponentValue::Number`]"]
        Number,
        #[doc = "Represents [`ComponentValue::Percentage`]"]
        Percentage,
        #[doc = "Represents [`ComponentValue::Dimension`]"]
        Dimension,
        #[doc = "Represents [`ComponentValue::LengthPercentage`]"]
        LengthPercentage,
        #[doc = "Represents [`ComponentValue::FrequencyPercentage`]"]
        FrequencyPercentage,
        #[doc = "Represents [`ComponentValue::AnglePercentage`]"]
        AnglePercentage,
        #[doc = "Represents [`ComponentValue::TimePercentage`]"]
        TimePercentage,
        #[doc = "Represents [`ComponentValue::Ratio`]"]
        Ratio,
        #[doc = "Represents [`ComponentValue::UnicodeRange`]"]
        UnicodeRange,
        #[doc = "Represents [`ComponentValue::Color`]"]
        Color,
        #[doc = "Represents [`ComponentValue::AlphaValue`]"]
        AlphaValue,
        #[doc = "Represents [`ComponentValue::Hue`]"]
        Hue,
        #[doc = "Represents [`ComponentValue::CmykComponent`]"]
        CmykComponent,
        #[doc = "Represents [`ComponentValue::Delimiter`]"]
        Delimiter,
        #[doc = "Represents [`ComponentValue::CalcSum`]"]
        CalcSum,
        #[doc = "Represents [`ComponentValue::ComplexSelector`]"]
        ComplexSelector,
        #[doc = "Represents [`ComponentValue::LayerName`]"]
        LayerName,
        #[doc = "Represents [`ComponentValue::SupportsCondition`]"]
        SupportsCondition,
        #[doc = "Represents [`ComponentValue::Declaration`]"]
        Declaration,
        #[doc = "Represents [`ComponentValue::IdSelector`]"]
        IdSelector,
    }
    impl CompoundSelectorField {
        pub(crate) fn set_index(&mut self, index: usize) {
            match self {
                Self::SubclassSelectors(idx) => {
                    assert_initial_index(*idx, index);
                    *idx = index;
                }
                _ => swc_visit::wrong_ast_path(),
            }
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum CompoundSelectorField {
        #[doc = "Represents [`CompoundSelector::span`]"]
        Span,
        #[doc = "Represents [`CompoundSelector::nesting_selector`]"]
        NestingSelector,
        #[doc = "Represents [`CompoundSelector::type_selector`]"]
        TypeSelector,
        #[doc = "Represents [`CompoundSelector::subclass_selectors`]"]
        SubclassSelectors(usize),
    }
    impl CompoundSelectorListField {
        pub(crate) fn set_index(&mut self, index: usize) {
            match self {
                Self::Children(idx) => {
                    assert_initial_index(*idx, index);
                    *idx = index;
                }
                _ => swc_visit::wrong_ast_path(),
            }
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum CompoundSelectorListField {
        #[doc = "Represents [`CompoundSelectorList::span`]"]
        Span,
        #[doc = "Represents [`CompoundSelectorList::children`]"]
        Children(usize),
    }
    impl ContainerConditionField {
        pub(crate) fn set_index(&mut self, index: usize) {
            match self {
                _ => swc_visit::wrong_ast_path(),
            }
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum ContainerConditionField {
        #[doc = "Represents [`ContainerCondition::span`]"]
        Span,
        #[doc = "Represents [`ContainerCondition::name`]"]
        Name,
        #[doc = "Represents [`ContainerCondition::query`]"]
        Query,
    }
    impl ContainerNameField {
        #[inline(always)]
        pub(crate) fn set_index(&mut self, _: usize) {
            swc_visit::wrong_ast_path();
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum ContainerNameField {
        #[doc = "Represents [`ContainerName::CustomIdent`]"]
        CustomIdent,
    }
    impl ContainerQueryField {
        pub(crate) fn set_index(&mut self, index: usize) {
            match self {
                Self::Queries(idx) => {
                    assert_initial_index(*idx, index);
                    *idx = index;
                }
                _ => swc_visit::wrong_ast_path(),
            }
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum ContainerQueryField {
        #[doc = "Represents [`ContainerQuery::span`]"]
        Span,
        #[doc = "Represents [`ContainerQuery::queries`]"]
        Queries(usize),
    }
    impl ContainerQueryAndField {
        pub(crate) fn set_index(&mut self, index: usize) {
            match self {
                _ => swc_visit::wrong_ast_path(),
            }
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum ContainerQueryAndField {
        #[doc = "Represents [`ContainerQueryAnd::span`]"]
        Span,
        #[doc = "Represents [`ContainerQueryAnd::keyword`]"]
        Keyword,
        #[doc = "Represents [`ContainerQueryAnd::query`]"]
        Query,
    }
    impl ContainerQueryNotField {
        pub(crate) fn set_index(&mut self, index: usize) {
            match self {
                _ => swc_visit::wrong_ast_path(),
            }
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum ContainerQueryNotField {
        #[doc = "Represents [`ContainerQueryNot::span`]"]
        Span,
        #[doc = "Represents [`ContainerQueryNot::keyword`]"]
        Keyword,
        #[doc = "Represents [`ContainerQueryNot::query`]"]
        Query,
    }
    impl ContainerQueryOrField {
        pub(crate) fn set_index(&mut self, index: usize) {
            match self {
                _ => swc_visit::wrong_ast_path(),
            }
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum ContainerQueryOrField {
        #[doc = "Represents [`ContainerQueryOr::span`]"]
        Span,
        #[doc = "Represents [`ContainerQueryOr::keyword`]"]
        Keyword,
        #[doc = "Represents [`ContainerQueryOr::query`]"]
        Query,
    }
    impl ContainerQueryTypeField {
        #[inline(always)]
        pub(crate) fn set_index(&mut self, _: usize) {
            swc_visit::wrong_ast_path();
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum ContainerQueryTypeField {
        #[doc = "Represents [`ContainerQueryType::Not`]"]
        Not,
        #[doc = "Represents [`ContainerQueryType::And`]"]
        And,
        #[doc = "Represents [`ContainerQueryType::Or`]"]
        Or,
        #[doc = "Represents [`ContainerQueryType::QueryInParens`]"]
        QueryInParens,
    }
    impl CustomHighlightNameField {
        pub(crate) fn set_index(&mut self, index: usize) {
            match self {
                _ => swc_visit::wrong_ast_path(),
            }
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum CustomHighlightNameField {
        #[doc = "Represents [`CustomHighlightName::span`]"]
        Span,
        #[doc = "Represents [`CustomHighlightName::value`]"]
        Value,
        #[doc = "Represents [`CustomHighlightName::raw`]"]
        Raw,
    }
    impl CustomIdentField {
        pub(crate) fn set_index(&mut self, index: usize) {
            match self {
                _ => swc_visit::wrong_ast_path(),
            }
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum CustomIdentField {
        #[doc = "Represents [`CustomIdent::span`]"]
        Span,
        #[doc = "Represents [`CustomIdent::value`]"]
        Value,
        #[doc = "Represents [`CustomIdent::raw`]"]
        Raw,
    }
    impl CustomMediaQueryField {
        pub(crate) fn set_index(&mut self, index: usize) {
            match self {
                _ => swc_visit::wrong_ast_path(),
            }
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum CustomMediaQueryField {
        #[doc = "Represents [`CustomMediaQuery::span`]"]
        Span,
        #[doc = "Represents [`CustomMediaQuery::name`]"]
        Name,
        #[doc = "Represents [`CustomMediaQuery::media`]"]
        Media,
    }
    impl CustomMediaQueryMediaTypeField {
        #[inline(always)]
        pub(crate) fn set_index(&mut self, _: usize) {
            swc_visit::wrong_ast_path();
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum CustomMediaQueryMediaTypeField {
        #[doc = "Represents [`CustomMediaQueryMediaType::Ident`]"]
        Ident,
        #[doc = "Represents [`CustomMediaQueryMediaType::MediaQueryList`]"]
        MediaQueryList,
    }
    impl CustomPropertyNameField {
        pub(crate) fn set_index(&mut self, index: usize) {
            match self {
                _ => swc_visit::wrong_ast_path(),
            }
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum CustomPropertyNameField {
        #[doc = "Represents [`CustomPropertyName::span`]"]
        Span,
        #[doc = "Represents [`CustomPropertyName::value`]"]
        Value,
        #[doc = "Represents [`CustomPropertyName::raw`]"]
        Raw,
    }
    impl DashedIdentField {
        pub(crate) fn set_index(&mut self, index: usize) {
            match self {
                _ => swc_visit::wrong_ast_path(),
            }
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum DashedIdentField {
        #[doc = "Represents [`DashedIdent::span`]"]
        Span,
        #[doc = "Represents [`DashedIdent::value`]"]
        Value,
        #[doc = "Represents [`DashedIdent::raw`]"]
        Raw,
    }
    impl DeclarationField {
        pub(crate) fn set_index(&mut self, index: usize) {
            match self {
                Self::Value(idx) => {
                    assert_initial_index(*idx, index);
                    *idx = index;
                }
                _ => swc_visit::wrong_ast_path(),
            }
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum DeclarationField {
        #[doc = "Represents [`Declaration::span`]"]
        Span,
        #[doc = "Represents [`Declaration::name`]"]
        Name,
        #[doc = "Represents [`Declaration::value`]"]
        Value(usize),
        #[doc = "Represents [`Declaration::important`]"]
        Important,
    }
    impl DeclarationNameField {
        #[inline(always)]
        pub(crate) fn set_index(&mut self, _: usize) {
            swc_visit::wrong_ast_path();
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum DeclarationNameField {
        #[doc = "Represents [`DeclarationName::Ident`]"]
        Ident,
        #[doc = "Represents [`DeclarationName::DashedIdent`]"]
        DashedIdent,
    }
    impl DeclarationOrAtRuleField {
        #[inline(always)]
        pub(crate) fn set_index(&mut self, _: usize) {
            swc_visit::wrong_ast_path();
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum DeclarationOrAtRuleField {
        #[doc = "Represents [`DeclarationOrAtRule::Declaration`]"]
        Declaration,
        #[doc = "Represents [`DeclarationOrAtRule::AtRule`]"]
        AtRule,
        #[doc = "Represents [`DeclarationOrAtRule::ListOfComponentValues`]"]
        ListOfComponentValues,
    }
    impl DelimiterField {
        pub(crate) fn set_index(&mut self, index: usize) {
            match self {
                _ => swc_visit::wrong_ast_path(),
            }
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum DelimiterField {
        #[doc = "Represents [`Delimiter::span`]"]
        Span,
        #[doc = "Represents [`Delimiter::value`]"]
        Value,
    }
    impl DelimiterValueField {
        #[inline(always)]
        pub(crate) fn set_index(&mut self, _: usize) {
            swc_visit::wrong_ast_path();
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum DelimiterValueField {
        #[doc = "Represents [`DelimiterValue::Comma`]"]
        Comma,
        #[doc = "Represents [`DelimiterValue::Solidus`]"]
        Solidus,
        #[doc = "Represents [`DelimiterValue::Semicolon`]"]
        Semicolon,
    }
    impl DimensionField {
        #[inline(always)]
        pub(crate) fn set_index(&mut self, _: usize) {
            swc_visit::wrong_ast_path();
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum DimensionField {
        #[doc = "Represents [`Dimension::Length`]"]
        Length,
        #[doc = "Represents [`Dimension::Angle`]"]
        Angle,
        #[doc = "Represents [`Dimension::Time`]"]
        Time,
        #[doc = "Represents [`Dimension::Frequency`]"]
        Frequency,
        #[doc = "Represents [`Dimension::Resolution`]"]
        Resolution,
        #[doc = "Represents [`Dimension::Flex`]"]
        Flex,
        #[doc = "Represents [`Dimension::UnknownDimension`]"]
        UnknownDimension,
    }
    impl DimensionTokenField {
        pub(crate) fn set_index(&mut self, index: usize) {
            match self {
                _ => swc_visit::wrong_ast_path(),
            }
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum DimensionTokenField {
        #[doc = "Represents [`DimensionToken::value`]"]
        Value,
        #[doc = "Represents [`DimensionToken::raw_value`]"]
        RawValue,
        #[doc = "Represents [`DimensionToken::unit`]"]
        Unit,
        #[doc = "Represents [`DimensionToken::type_flag`]"]
        TypeFlag,
        #[doc = "Represents [`DimensionToken::raw_unit`]"]
        RawUnit,
    }
    impl DocumentPreludeField {
        pub(crate) fn set_index(&mut self, index: usize) {
            match self {
                Self::MatchingFunctions(idx) => {
                    assert_initial_index(*idx, index);
                    *idx = index;
                }
                _ => swc_visit::wrong_ast_path(),
            }
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum DocumentPreludeField {
        #[doc = "Represents [`DocumentPrelude::span`]"]
        Span,
        #[doc = "Represents [`DocumentPrelude::matching_functions`]"]
        MatchingFunctions(usize),
    }
    impl DocumentPreludeMatchingFunctionField {
        #[inline(always)]
        pub(crate) fn set_index(&mut self, _: usize) {
            swc_visit::wrong_ast_path();
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum DocumentPreludeMatchingFunctionField {
        #[doc = "Represents [`DocumentPreludeMatchingFunction::Url`]"]
        Url,
        #[doc = "Represents [`DocumentPreludeMatchingFunction::Function`]"]
        Function,
    }
    impl ExtensionNameField {
        pub(crate) fn set_index(&mut self, index: usize) {
            match self {
                _ => swc_visit::wrong_ast_path(),
            }
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum ExtensionNameField {
        #[doc = "Represents [`ExtensionName::span`]"]
        Span,
        #[doc = "Represents [`ExtensionName::value`]"]
        Value,
        #[doc = "Represents [`ExtensionName::raw`]"]
        Raw,
    }
    impl FamilyNameField {
        #[inline(always)]
        pub(crate) fn set_index(&mut self, _: usize) {
            swc_visit::wrong_ast_path();
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum FamilyNameField {
        #[doc = "Represents [`FamilyName::Str`]"]
        Str,
        #[doc = "Represents [`FamilyName::SequenceOfCustomIdents`]"]
        SequenceOfCustomIdents,
    }
    impl FlexField {
        pub(crate) fn set_index(&mut self, index: usize) {
            match self {
                _ => swc_visit::wrong_ast_path(),
            }
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum FlexField {
        #[doc = "Represents [`Flex::span`]"]
        Span,
        #[doc = "Represents [`Flex::value`]"]
        Value,
        #[doc = "Represents [`Flex::unit`]"]
        Unit,
    }
    impl FontFeatureValuesPreludeField {
        pub(crate) fn set_index(&mut self, index: usize) {
            match self {
                Self::FontFamily(idx) => {
                    assert_initial_index(*idx, index);
                    *idx = index;
                }
                _ => swc_visit::wrong_ast_path(),
            }
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum FontFeatureValuesPreludeField {
        #[doc = "Represents [`FontFeatureValuesPrelude::span`]"]
        Span,
        #[doc = "Represents [`FontFeatureValuesPrelude::font_family`]"]
        FontFamily(usize),
    }
    impl ForgivingComplexSelectorField {
        #[inline(always)]
        pub(crate) fn set_index(&mut self, _: usize) {
            swc_visit::wrong_ast_path();
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum ForgivingComplexSelectorField {
        #[doc = "Represents [`ForgivingComplexSelector::ComplexSelector`]"]
        ComplexSelector,
        #[doc = "Represents [`ForgivingComplexSelector::ListOfComponentValues`]"]
        ListOfComponentValues,
    }
    impl ForgivingRelativeSelectorField {
        #[inline(always)]
        pub(crate) fn set_index(&mut self, _: usize) {
            swc_visit::wrong_ast_path();
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum ForgivingRelativeSelectorField {
        #[doc = "Represents [`ForgivingRelativeSelector::RelativeSelector`]"]
        RelativeSelector,
        #[doc = "Represents [`ForgivingRelativeSelector::ListOfComponentValues`]"]
        ListOfComponentValues,
    }
    impl ForgivingRelativeSelectorListField {
        pub(crate) fn set_index(&mut self, index: usize) {
            match self {
                Self::Children(idx) => {
                    assert_initial_index(*idx, index);
                    *idx = index;
                }
                _ => swc_visit::wrong_ast_path(),
            }
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum ForgivingRelativeSelectorListField {
        #[doc = "Represents [`ForgivingRelativeSelectorList::span`]"]
        Span,
        #[doc = "Represents [`ForgivingRelativeSelectorList::children`]"]
        Children(usize),
    }
    impl ForgivingSelectorListField {
        pub(crate) fn set_index(&mut self, index: usize) {
            match self {
                Self::Children(idx) => {
                    assert_initial_index(*idx, index);
                    *idx = index;
                }
                _ => swc_visit::wrong_ast_path(),
            }
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum ForgivingSelectorListField {
        #[doc = "Represents [`ForgivingSelectorList::span`]"]
        Span,
        #[doc = "Represents [`ForgivingSelectorList::children`]"]
        Children(usize),
    }
    impl FrequencyField {
        pub(crate) fn set_index(&mut self, index: usize) {
            match self {
                _ => swc_visit::wrong_ast_path(),
            }
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum FrequencyField {
        #[doc = "Represents [`Frequency::span`]"]
        Span,
        #[doc = "Represents [`Frequency::value`]"]
        Value,
        #[doc = "Represents [`Frequency::unit`]"]
        Unit,
    }
    impl FrequencyPercentageField {
        #[inline(always)]
        pub(crate) fn set_index(&mut self, _: usize) {
            swc_visit::wrong_ast_path();
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum FrequencyPercentageField {
        #[doc = "Represents [`FrequencyPercentage::Frequency`]"]
        Frequency,
        #[doc = "Represents [`FrequencyPercentage::Percentage`]"]
        Percentage,
    }
    impl FunctionField {
        pub(crate) fn set_index(&mut self, index: usize) {
            match self {
                Self::Value(idx) => {
                    assert_initial_index(*idx, index);
                    *idx = index;
                }
                _ => swc_visit::wrong_ast_path(),
            }
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum FunctionField {
        #[doc = "Represents [`Function::span`]"]
        Span,
        #[doc = "Represents [`Function::name`]"]
        Name,
        #[doc = "Represents [`Function::value`]"]
        Value(usize),
    }
    impl FunctionNameField {
        #[inline(always)]
        pub(crate) fn set_index(&mut self, _: usize) {
            swc_visit::wrong_ast_path();
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum FunctionNameField {
        #[doc = "Represents [`FunctionName::Ident`]"]
        Ident,
        #[doc = "Represents [`FunctionName::DashedIdent`]"]
        DashedIdent,
    }
    impl GeneralEnclosedField {
        #[inline(always)]
        pub(crate) fn set_index(&mut self, _: usize) {
            swc_visit::wrong_ast_path();
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum GeneralEnclosedField {
        #[doc = "Represents [`GeneralEnclosed::Function`]"]
        Function,
        #[doc = "Represents [`GeneralEnclosed::SimpleBlock`]"]
        SimpleBlock,
    }
    impl HexColorField {
        pub(crate) fn set_index(&mut self, index: usize) {
            match self {
                _ => swc_visit::wrong_ast_path(),
            }
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum HexColorField {
        #[doc = "Represents [`HexColor::span`]"]
        Span,
        #[doc = "Represents [`HexColor::value`]"]
        Value,
        #[doc = "Represents [`HexColor::raw`]"]
        Raw,
    }
    impl HueField {
        #[inline(always)]
        pub(crate) fn set_index(&mut self, _: usize) {
            swc_visit::wrong_ast_path();
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum HueField {
        #[doc = "Represents [`Hue::Number`]"]
        Number,
        #[doc = "Represents [`Hue::Angle`]"]
        Angle,
    }
    impl IdSelectorField {
        pub(crate) fn set_index(&mut self, index: usize) {
            match self {
                _ => swc_visit::wrong_ast_path(),
            }
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum IdSelectorField {
        #[doc = "Represents [`IdSelector::span`]"]
        Span,
        #[doc = "Represents [`IdSelector::text`]"]
        Text,
    }
    impl IdentField {
        pub(crate) fn set_index(&mut self, index: usize) {
            match self {
                _ => swc_visit::wrong_ast_path(),
            }
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum IdentField {
        #[doc = "Represents [`Ident::span`]"]
        Span,
        #[doc = "Represents [`Ident::value`]"]
        Value,
        #[doc = "Represents [`Ident::raw`]"]
        Raw,
    }
    impl ImportConditionsField {
        pub(crate) fn set_index(&mut self, index: usize) {
            match self {
                _ => swc_visit::wrong_ast_path(),
            }
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum ImportConditionsField {
        #[doc = "Represents [`ImportConditions::span`]"]
        Span,
        #[doc = "Represents [`ImportConditions::supports`]"]
        Supports,
        #[doc = "Represents [`ImportConditions::media`]"]
        Media,
    }
    impl ImportHrefField {
        #[inline(always)]
        pub(crate) fn set_index(&mut self, _: usize) {
            swc_visit::wrong_ast_path();
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum ImportHrefField {
        #[doc = "Represents [`ImportHref::Url`]"]
        Url,
        #[doc = "Represents [`ImportHref::Str`]"]
        Str,
    }
    impl ImportLayerNameField {
        #[inline(always)]
        pub(crate) fn set_index(&mut self, _: usize) {
            swc_visit::wrong_ast_path();
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum ImportLayerNameField {
        #[doc = "Represents [`ImportLayerName::Ident`]"]
        Ident,
        #[doc = "Represents [`ImportLayerName::Function`]"]
        Function,
    }
    impl ImportPreludeField {
        pub(crate) fn set_index(&mut self, index: usize) {
            match self {
                _ => swc_visit::wrong_ast_path(),
            }
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum ImportPreludeField {
        #[doc = "Represents [`ImportPrelude::span`]"]
        Span,
        #[doc = "Represents [`ImportPrelude::href`]"]
        Href,
        #[doc = "Represents [`ImportPrelude::layer_name`]"]
        LayerName,
        #[doc = "Represents [`ImportPrelude::import_conditions`]"]
        ImportConditions,
    }
    impl ImportantFlagField {
        pub(crate) fn set_index(&mut self, index: usize) {
            match self {
                _ => swc_visit::wrong_ast_path(),
            }
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum ImportantFlagField {
        #[doc = "Represents [`ImportantFlag::span`]"]
        Span,
        #[doc = "Represents [`ImportantFlag::value`]"]
        Value,
    }
    impl IntegerField {
        pub(crate) fn set_index(&mut self, index: usize) {
            match self {
                _ => swc_visit::wrong_ast_path(),
            }
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum IntegerField {
        #[doc = "Represents [`Integer::span`]"]
        Span,
        #[doc = "Represents [`Integer::value`]"]
        Value,
        #[doc = "Represents [`Integer::raw`]"]
        Raw,
    }
    impl KeyframeBlockField {
        pub(crate) fn set_index(&mut self, index: usize) {
            match self {
                Self::Prelude(idx) => {
                    assert_initial_index(*idx, index);
                    *idx = index;
                }
                _ => swc_visit::wrong_ast_path(),
            }
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum KeyframeBlockField {
        #[doc = "Represents [`KeyframeBlock::span`]"]
        Span,
        #[doc = "Represents [`KeyframeBlock::prelude`]"]
        Prelude(usize),
        #[doc = "Represents [`KeyframeBlock::block`]"]
        Block,
    }
    impl KeyframeSelectorField {
        #[inline(always)]
        pub(crate) fn set_index(&mut self, _: usize) {
            swc_visit::wrong_ast_path();
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum KeyframeSelectorField {
        #[doc = "Represents [`KeyframeSelector::Ident`]"]
        Ident,
        #[doc = "Represents [`KeyframeSelector::Percentage`]"]
        Percentage,
    }
    impl KeyframesNameField {
        #[inline(always)]
        pub(crate) fn set_index(&mut self, _: usize) {
            swc_visit::wrong_ast_path();
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum KeyframesNameField {
        #[doc = "Represents [`KeyframesName::CustomIdent`]"]
        CustomIdent,
        #[doc = "Represents [`KeyframesName::Str`]"]
        Str,
        #[doc = "Represents [`KeyframesName::PseudoPrefix`]"]
        PseudoPrefix,
        #[doc = "Represents [`KeyframesName::PseudoFunction`]"]
        PseudoFunction,
    }
    impl KeyframesPseudoFunctionField {
        pub(crate) fn set_index(&mut self, index: usize) {
            match self {
                _ => swc_visit::wrong_ast_path(),
            }
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum KeyframesPseudoFunctionField {
        #[doc = "Represents [`KeyframesPseudoFunction::span`]"]
        Span,
        #[doc = "Represents [`KeyframesPseudoFunction::pseudo`]"]
        Pseudo,
        #[doc = "Represents [`KeyframesPseudoFunction::name`]"]
        Name,
    }
    impl KeyframesPseudoPrefixField {
        pub(crate) fn set_index(&mut self, index: usize) {
            match self {
                _ => swc_visit::wrong_ast_path(),
            }
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum KeyframesPseudoPrefixField {
        #[doc = "Represents [`KeyframesPseudoPrefix::span`]"]
        Span,
        #[doc = "Represents [`KeyframesPseudoPrefix::pseudo`]"]
        Pseudo,
        #[doc = "Represents [`KeyframesPseudoPrefix::name`]"]
        Name,
    }
    impl LayerNameField {
        pub(crate) fn set_index(&mut self, index: usize) {
            match self {
                Self::Name(idx) => {
                    assert_initial_index(*idx, index);
                    *idx = index;
                }
                _ => swc_visit::wrong_ast_path(),
            }
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum LayerNameField {
        #[doc = "Represents [`LayerName::span`]"]
        Span,
        #[doc = "Represents [`LayerName::name`]"]
        Name(usize),
    }
    impl LayerNameListField {
        pub(crate) fn set_index(&mut self, index: usize) {
            match self {
                Self::NameList(idx) => {
                    assert_initial_index(*idx, index);
                    *idx = index;
                }
                _ => swc_visit::wrong_ast_path(),
            }
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum LayerNameListField {
        #[doc = "Represents [`LayerNameList::span`]"]
        Span,
        #[doc = "Represents [`LayerNameList::name_list`]"]
        NameList(usize),
    }
    impl LayerPreludeField {
        #[inline(always)]
        pub(crate) fn set_index(&mut self, _: usize) {
            swc_visit::wrong_ast_path();
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum LayerPreludeField {
        #[doc = "Represents [`LayerPrelude::Name`]"]
        Name,
        #[doc = "Represents [`LayerPrelude::NameList`]"]
        NameList,
    }
    impl LengthField {
        pub(crate) fn set_index(&mut self, index: usize) {
            match self {
                _ => swc_visit::wrong_ast_path(),
            }
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum LengthField {
        #[doc = "Represents [`Length::span`]"]
        Span,
        #[doc = "Represents [`Length::value`]"]
        Value,
        #[doc = "Represents [`Length::unit`]"]
        Unit,
    }
    impl LengthPercentageField {
        #[inline(always)]
        pub(crate) fn set_index(&mut self, _: usize) {
            swc_visit::wrong_ast_path();
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum LengthPercentageField {
        #[doc = "Represents [`LengthPercentage::Length`]"]
        Length,
        #[doc = "Represents [`LengthPercentage::Percentage`]"]
        Percentage,
    }
    impl ListOfComponentValuesField {
        pub(crate) fn set_index(&mut self, index: usize) {
            match self {
                Self::Children(idx) => {
                    assert_initial_index(*idx, index);
                    *idx = index;
                }
                _ => swc_visit::wrong_ast_path(),
            }
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum ListOfComponentValuesField {
        #[doc = "Represents [`ListOfComponentValues::span`]"]
        Span,
        #[doc = "Represents [`ListOfComponentValues::children`]"]
        Children(usize),
    }
    impl MediaAndField {
        pub(crate) fn set_index(&mut self, index: usize) {
            match self {
                _ => swc_visit::wrong_ast_path(),
            }
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum MediaAndField {
        #[doc = "Represents [`MediaAnd::span`]"]
        Span,
        #[doc = "Represents [`MediaAnd::keyword`]"]
        Keyword,
        #[doc = "Represents [`MediaAnd::condition`]"]
        Condition,
    }
    impl MediaConditionField {
        pub(crate) fn set_index(&mut self, index: usize) {
            match self {
                Self::Conditions(idx) => {
                    assert_initial_index(*idx, index);
                    *idx = index;
                }
                _ => swc_visit::wrong_ast_path(),
            }
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum MediaConditionField {
        #[doc = "Represents [`MediaCondition::span`]"]
        Span,
        #[doc = "Represents [`MediaCondition::conditions`]"]
        Conditions(usize),
    }
    impl MediaConditionAllTypeField {
        #[inline(always)]
        pub(crate) fn set_index(&mut self, _: usize) {
            swc_visit::wrong_ast_path();
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum MediaConditionAllTypeField {
        #[doc = "Represents [`MediaConditionAllType::Not`]"]
        Not,
        #[doc = "Represents [`MediaConditionAllType::And`]"]
        And,
        #[doc = "Represents [`MediaConditionAllType::Or`]"]
        Or,
        #[doc = "Represents [`MediaConditionAllType::MediaInParens`]"]
        MediaInParens,
    }
    impl MediaConditionTypeField {
        #[inline(always)]
        pub(crate) fn set_index(&mut self, _: usize) {
            swc_visit::wrong_ast_path();
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum MediaConditionTypeField {
        #[doc = "Represents [`MediaConditionType::All`]"]
        All,
        #[doc = "Represents [`MediaConditionType::WithoutOr`]"]
        WithoutOr,
    }
    impl MediaConditionWithoutOrField {
        pub(crate) fn set_index(&mut self, index: usize) {
            match self {
                Self::Conditions(idx) => {
                    assert_initial_index(*idx, index);
                    *idx = index;
                }
                _ => swc_visit::wrong_ast_path(),
            }
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum MediaConditionWithoutOrField {
        #[doc = "Represents [`MediaConditionWithoutOr::span`]"]
        Span,
        #[doc = "Represents [`MediaConditionWithoutOr::conditions`]"]
        Conditions(usize),
    }
    impl MediaConditionWithoutOrTypeField {
        #[inline(always)]
        pub(crate) fn set_index(&mut self, _: usize) {
            swc_visit::wrong_ast_path();
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum MediaConditionWithoutOrTypeField {
        #[doc = "Represents [`MediaConditionWithoutOrType::Not`]"]
        Not,
        #[doc = "Represents [`MediaConditionWithoutOrType::And`]"]
        And,
        #[doc = "Represents [`MediaConditionWithoutOrType::MediaInParens`]"]
        MediaInParens,
    }
    impl MediaFeatureField {
        #[inline(always)]
        pub(crate) fn set_index(&mut self, _: usize) {
            swc_visit::wrong_ast_path();
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum MediaFeatureField {
        #[doc = "Represents [`MediaFeature::Plain`]"]
        Plain,
        #[doc = "Represents [`MediaFeature::Boolean`]"]
        Boolean,
        #[doc = "Represents [`MediaFeature::Range`]"]
        Range,
        #[doc = "Represents [`MediaFeature::RangeInterval`]"]
        RangeInterval,
    }
    impl MediaFeatureBooleanField {
        pub(crate) fn set_index(&mut self, index: usize) {
            match self {
                _ => swc_visit::wrong_ast_path(),
            }
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum MediaFeatureBooleanField {
        #[doc = "Represents [`MediaFeatureBoolean::span`]"]
        Span,
        #[doc = "Represents [`MediaFeatureBoolean::name`]"]
        Name,
    }
    impl MediaFeatureNameField {
        #[inline(always)]
        pub(crate) fn set_index(&mut self, _: usize) {
            swc_visit::wrong_ast_path();
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum MediaFeatureNameField {
        #[doc = "Represents [`MediaFeatureName::Ident`]"]
        Ident,
        #[doc = "Represents [`MediaFeatureName::ExtensionName`]"]
        ExtensionName,
    }
    impl MediaFeaturePlainField {
        pub(crate) fn set_index(&mut self, index: usize) {
            match self {
                _ => swc_visit::wrong_ast_path(),
            }
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum MediaFeaturePlainField {
        #[doc = "Represents [`MediaFeaturePlain::span`]"]
        Span,
        #[doc = "Represents [`MediaFeaturePlain::name`]"]
        Name,
        #[doc = "Represents [`MediaFeaturePlain::value`]"]
        Value,
    }
    impl MediaFeatureRangeField {
        pub(crate) fn set_index(&mut self, index: usize) {
            match self {
                _ => swc_visit::wrong_ast_path(),
            }
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum MediaFeatureRangeField {
        #[doc = "Represents [`MediaFeatureRange::span`]"]
        Span,
        #[doc = "Represents [`MediaFeatureRange::left`]"]
        Left,
        #[doc = "Represents [`MediaFeatureRange::comparison`]"]
        Comparison,
        #[doc = "Represents [`MediaFeatureRange::right`]"]
        Right,
    }
    impl MediaFeatureRangeComparisonField {
        #[inline(always)]
        pub(crate) fn set_index(&mut self, _: usize) {
            swc_visit::wrong_ast_path();
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum MediaFeatureRangeComparisonField {
        #[doc = "Represents [`MediaFeatureRangeComparison::Lt`]"]
        Lt,
        #[doc = "Represents [`MediaFeatureRangeComparison::Le`]"]
        Le,
        #[doc = "Represents [`MediaFeatureRangeComparison::Gt`]"]
        Gt,
        #[doc = "Represents [`MediaFeatureRangeComparison::Ge`]"]
        Ge,
        #[doc = "Represents [`MediaFeatureRangeComparison::Eq`]"]
        Eq,
    }
    impl MediaFeatureRangeIntervalField {
        pub(crate) fn set_index(&mut self, index: usize) {
            match self {
                _ => swc_visit::wrong_ast_path(),
            }
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum MediaFeatureRangeIntervalField {
        #[doc = "Represents [`MediaFeatureRangeInterval::span`]"]
        Span,
        #[doc = "Represents [`MediaFeatureRangeInterval::left`]"]
        Left,
        #[doc = "Represents [`MediaFeatureRangeInterval::left_comparison`]"]
        LeftComparison,
        #[doc = "Represents [`MediaFeatureRangeInterval::name`]"]
        Name,
        #[doc = "Represents [`MediaFeatureRangeInterval::right_comparison`]"]
        RightComparison,
        #[doc = "Represents [`MediaFeatureRangeInterval::right`]"]
        Right,
    }
    impl MediaFeatureValueField {
        #[inline(always)]
        pub(crate) fn set_index(&mut self, _: usize) {
            swc_visit::wrong_ast_path();
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum MediaFeatureValueField {
        #[doc = "Represents [`MediaFeatureValue::Number`]"]
        Number,
        #[doc = "Represents [`MediaFeatureValue::Dimension`]"]
        Dimension,
        #[doc = "Represents [`MediaFeatureValue::Ident`]"]
        Ident,
        #[doc = "Represents [`MediaFeatureValue::Ratio`]"]
        Ratio,
        #[doc = "Represents [`MediaFeatureValue::Function`]"]
        Function,
    }
    impl MediaInParensField {
        #[inline(always)]
        pub(crate) fn set_index(&mut self, _: usize) {
            swc_visit::wrong_ast_path();
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum MediaInParensField {
        #[doc = "Represents [`MediaInParens::MediaCondition`]"]
        MediaCondition,
        #[doc = "Represents [`MediaInParens::Feature`]"]
        Feature,
        #[doc = "Represents [`MediaInParens::GeneralEnclosed`]"]
        GeneralEnclosed,
    }
    impl MediaNotField {
        pub(crate) fn set_index(&mut self, index: usize) {
            match self {
                _ => swc_visit::wrong_ast_path(),
            }
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum MediaNotField {
        #[doc = "Represents [`MediaNot::span`]"]
        Span,
        #[doc = "Represents [`MediaNot::keyword`]"]
        Keyword,
        #[doc = "Represents [`MediaNot::condition`]"]
        Condition,
    }
    impl MediaOrField {
        pub(crate) fn set_index(&mut self, index: usize) {
            match self {
                _ => swc_visit::wrong_ast_path(),
            }
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum MediaOrField {
        #[doc = "Represents [`MediaOr::span`]"]
        Span,
        #[doc = "Represents [`MediaOr::keyword`]"]
        Keyword,
        #[doc = "Represents [`MediaOr::condition`]"]
        Condition,
    }
    impl MediaQueryField {
        pub(crate) fn set_index(&mut self, index: usize) {
            match self {
                _ => swc_visit::wrong_ast_path(),
            }
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum MediaQueryField {
        #[doc = "Represents [`MediaQuery::span`]"]
        Span,
        #[doc = "Represents [`MediaQuery::modifier`]"]
        Modifier,
        #[doc = "Represents [`MediaQuery::media_type`]"]
        MediaType,
        #[doc = "Represents [`MediaQuery::keyword`]"]
        Keyword,
        #[doc = "Represents [`MediaQuery::condition`]"]
        Condition,
    }
    impl MediaQueryListField {
        pub(crate) fn set_index(&mut self, index: usize) {
            match self {
                Self::Queries(idx) => {
                    assert_initial_index(*idx, index);
                    *idx = index;
                }
                _ => swc_visit::wrong_ast_path(),
            }
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum MediaQueryListField {
        #[doc = "Represents [`MediaQueryList::span`]"]
        Span,
        #[doc = "Represents [`MediaQueryList::queries`]"]
        Queries(usize),
    }
    impl MediaTypeField {
        #[inline(always)]
        pub(crate) fn set_index(&mut self, _: usize) {
            swc_visit::wrong_ast_path();
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum MediaTypeField {
        #[doc = "Represents [`MediaType::Ident`]"]
        Ident,
    }
    impl NamedNamespaceField {
        pub(crate) fn set_index(&mut self, index: usize) {
            match self {
                _ => swc_visit::wrong_ast_path(),
            }
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum NamedNamespaceField {
        #[doc = "Represents [`NamedNamespace::span`]"]
        Span,
        #[doc = "Represents [`NamedNamespace::name`]"]
        Name,
    }
    impl NamespaceField {
        #[inline(always)]
        pub(crate) fn set_index(&mut self, _: usize) {
            swc_visit::wrong_ast_path();
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum NamespaceField {
        #[doc = "Represents [`Namespace::Named`]"]
        Named,
        #[doc = "Represents [`Namespace::Any`]"]
        Any,
    }
    impl NamespacePrefixField {
        pub(crate) fn set_index(&mut self, index: usize) {
            match self {
                _ => swc_visit::wrong_ast_path(),
            }
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum NamespacePrefixField {
        #[doc = "Represents [`NamespacePrefix::span`]"]
        Span,
        #[doc = "Represents [`NamespacePrefix::namespace`]"]
        Namespace,
    }
    impl NamespacePreludeField {
        pub(crate) fn set_index(&mut self, index: usize) {
            match self {
                _ => swc_visit::wrong_ast_path(),
            }
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum NamespacePreludeField {
        #[doc = "Represents [`NamespacePrelude::span`]"]
        Span,
        #[doc = "Represents [`NamespacePrelude::prefix`]"]
        Prefix,
        #[doc = "Represents [`NamespacePrelude::uri`]"]
        Uri,
    }
    impl NamespacePreludeUriField {
        #[inline(always)]
        pub(crate) fn set_index(&mut self, _: usize) {
            swc_visit::wrong_ast_path();
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum NamespacePreludeUriField {
        #[doc = "Represents [`NamespacePreludeUri::Url`]"]
        Url,
        #[doc = "Represents [`NamespacePreludeUri::Str`]"]
        Str,
    }
    impl NestingSelectorField {
        pub(crate) fn set_index(&mut self, index: usize) {
            match self {
                _ => swc_visit::wrong_ast_path(),
            }
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum NestingSelectorField {
        #[doc = "Represents [`NestingSelector::span`]"]
        Span,
    }
    impl NumberField {
        pub(crate) fn set_index(&mut self, index: usize) {
            match self {
                _ => swc_visit::wrong_ast_path(),
            }
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum NumberField {
        #[doc = "Represents [`Number::span`]"]
        Span,
        #[doc = "Represents [`Number::value`]"]
        Value,
        #[doc = "Represents [`Number::raw`]"]
        Raw,
    }
    impl NumberTypeField {
        #[inline(always)]
        pub(crate) fn set_index(&mut self, _: usize) {
            swc_visit::wrong_ast_path();
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum NumberTypeField {
        #[doc = "Represents [`NumberType::Integer`]"]
        Integer,
        #[doc = "Represents [`NumberType::Number`]"]
        Number,
    }
    impl PageSelectorField {
        pub(crate) fn set_index(&mut self, index: usize) {
            match self {
                Self::Pseudos(idx) => {
                    assert_initial_index(*idx, index);
                    *idx = index;
                }
                _ => swc_visit::wrong_ast_path(),
            }
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum PageSelectorField {
        #[doc = "Represents [`PageSelector::span`]"]
        Span,
        #[doc = "Represents [`PageSelector::page_type`]"]
        PageType,
        #[doc = "Represents [`PageSelector::pseudos`]"]
        Pseudos(usize),
    }
    impl PageSelectorListField {
        pub(crate) fn set_index(&mut self, index: usize) {
            match self {
                Self::Selectors(idx) => {
                    assert_initial_index(*idx, index);
                    *idx = index;
                }
                _ => swc_visit::wrong_ast_path(),
            }
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum PageSelectorListField {
        #[doc = "Represents [`PageSelectorList::span`]"]
        Span,
        #[doc = "Represents [`PageSelectorList::selectors`]"]
        Selectors(usize),
    }
    impl PageSelectorPseudoField {
        pub(crate) fn set_index(&mut self, index: usize) {
            match self {
                _ => swc_visit::wrong_ast_path(),
            }
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum PageSelectorPseudoField {
        #[doc = "Represents [`PageSelectorPseudo::span`]"]
        Span,
        #[doc = "Represents [`PageSelectorPseudo::value`]"]
        Value,
    }
    impl PageSelectorTypeField {
        pub(crate) fn set_index(&mut self, index: usize) {
            match self {
                _ => swc_visit::wrong_ast_path(),
            }
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum PageSelectorTypeField {
        #[doc = "Represents [`PageSelectorType::span`]"]
        Span,
        #[doc = "Represents [`PageSelectorType::value`]"]
        Value,
    }
    impl PercentageField {
        pub(crate) fn set_index(&mut self, index: usize) {
            match self {
                _ => swc_visit::wrong_ast_path(),
            }
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum PercentageField {
        #[doc = "Represents [`Percentage::span`]"]
        Span,
        #[doc = "Represents [`Percentage::value`]"]
        Value,
    }
    impl PseudoClassSelectorField {
        pub(crate) fn set_index(&mut self, index: usize) {
            match self {
                Self::Children(idx) => {
                    assert_initial_index(*idx, index);
                    *idx = index;
                }
                _ => swc_visit::wrong_ast_path(),
            }
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum PseudoClassSelectorField {
        #[doc = "Represents [`PseudoClassSelector::span`]"]
        Span,
        #[doc = "Represents [`PseudoClassSelector::name`]"]
        Name,
        #[doc = "Represents [`PseudoClassSelector::children`]"]
        Children(usize),
    }
    impl PseudoClassSelectorChildrenField {
        #[inline(always)]
        pub(crate) fn set_index(&mut self, _: usize) {
            swc_visit::wrong_ast_path();
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum PseudoClassSelectorChildrenField {
        #[doc = "Represents [`PseudoClassSelectorChildren::PreservedToken`]"]
        PreservedToken,
        #[doc = "Represents [`PseudoClassSelectorChildren::AnPlusB`]"]
        AnPlusB,
        #[doc = "Represents [`PseudoClassSelectorChildren::Ident`]"]
        Ident,
        #[doc = "Represents [`PseudoClassSelectorChildren::Str`]"]
        Str,
        #[doc = "Represents [`PseudoClassSelectorChildren::Delimiter`]"]
        Delimiter,
        #[doc = "Represents [`PseudoClassSelectorChildren::ComplexSelector`]"]
        ComplexSelector,
        #[doc = "Represents [`PseudoClassSelectorChildren::SelectorList`]"]
        SelectorList,
        #[doc = "Represents [`PseudoClassSelectorChildren::ForgivingSelectorList`]"]
        ForgivingSelectorList,
        #[doc = "Represents [`PseudoClassSelectorChildren::CompoundSelectorList`]"]
        CompoundSelectorList,
        #[doc = "Represents [`PseudoClassSelectorChildren::RelativeSelectorList`]"]
        RelativeSelectorList,
        #[doc = "Represents [`PseudoClassSelectorChildren::ForgivingRelativeSelectorList`]"]
        ForgivingRelativeSelectorList,
        #[doc = "Represents [`PseudoClassSelectorChildren::CompoundSelector`]"]
        CompoundSelector,
    }
    impl PseudoElementSelectorField {
        pub(crate) fn set_index(&mut self, index: usize) {
            match self {
                Self::Children(idx) => {
                    assert_initial_index(*idx, index);
                    *idx = index;
                }
                _ => swc_visit::wrong_ast_path(),
            }
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum PseudoElementSelectorField {
        #[doc = "Represents [`PseudoElementSelector::span`]"]
        Span,
        #[doc = "Represents [`PseudoElementSelector::name`]"]
        Name,
        #[doc = "Represents [`PseudoElementSelector::children`]"]
        Children(usize),
    }
    impl PseudoElementSelectorChildrenField {
        #[inline(always)]
        pub(crate) fn set_index(&mut self, _: usize) {
            swc_visit::wrong_ast_path();
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum PseudoElementSelectorChildrenField {
        #[doc = "Represents [`PseudoElementSelectorChildren::PreservedToken`]"]
        PreservedToken,
        #[doc = "Represents [`PseudoElementSelectorChildren::Ident`]"]
        Ident,
        #[doc = "Represents [`PseudoElementSelectorChildren::CompoundSelector`]"]
        CompoundSelector,
        #[doc = "Represents [`PseudoElementSelectorChildren::CustomHighlightName`]"]
        CustomHighlightName,
    }
    impl QualifiedRuleField {
        pub(crate) fn set_index(&mut self, index: usize) {
            match self {
                _ => swc_visit::wrong_ast_path(),
            }
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum QualifiedRuleField {
        #[doc = "Represents [`QualifiedRule::span`]"]
        Span,
        #[doc = "Represents [`QualifiedRule::prelude`]"]
        Prelude,
        #[doc = "Represents [`QualifiedRule::block`]"]
        Block,
    }
    impl QualifiedRulePreludeField {
        #[inline(always)]
        pub(crate) fn set_index(&mut self, _: usize) {
            swc_visit::wrong_ast_path();
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum QualifiedRulePreludeField {
        #[doc = "Represents [`QualifiedRulePrelude::SelectorList`]"]
        SelectorList,
        #[doc = "Represents [`QualifiedRulePrelude::RelativeSelectorList`]"]
        RelativeSelectorList,
        #[doc = "Represents [`QualifiedRulePrelude::ListOfComponentValues`]"]
        ListOfComponentValues,
    }
    impl QueryInParensField {
        #[inline(always)]
        pub(crate) fn set_index(&mut self, _: usize) {
            swc_visit::wrong_ast_path();
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum QueryInParensField {
        #[doc = "Represents [`QueryInParens::ContainerQuery`]"]
        ContainerQuery,
        #[doc = "Represents [`QueryInParens::SizeFeature`]"]
        SizeFeature,
        #[doc = "Represents [`QueryInParens::GeneralEnclosed`]"]
        GeneralEnclosed,
    }
    impl RatioField {
        pub(crate) fn set_index(&mut self, index: usize) {
            match self {
                _ => swc_visit::wrong_ast_path(),
            }
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum RatioField {
        #[doc = "Represents [`Ratio::span`]"]
        Span,
        #[doc = "Represents [`Ratio::left`]"]
        Left,
        #[doc = "Represents [`Ratio::right`]"]
        Right,
    }
    impl RelativeSelectorField {
        pub(crate) fn set_index(&mut self, index: usize) {
            match self {
                _ => swc_visit::wrong_ast_path(),
            }
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum RelativeSelectorField {
        #[doc = "Represents [`RelativeSelector::span`]"]
        Span,
        #[doc = "Represents [`RelativeSelector::combinator`]"]
        Combinator,
        #[doc = "Represents [`RelativeSelector::selector`]"]
        Selector,
    }
    impl RelativeSelectorListField {
        pub(crate) fn set_index(&mut self, index: usize) {
            match self {
                Self::Children(idx) => {
                    assert_initial_index(*idx, index);
                    *idx = index;
                }
                _ => swc_visit::wrong_ast_path(),
            }
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum RelativeSelectorListField {
        #[doc = "Represents [`RelativeSelectorList::span`]"]
        Span,
        #[doc = "Represents [`RelativeSelectorList::children`]"]
        Children(usize),
    }
    impl ResolutionField {
        pub(crate) fn set_index(&mut self, index: usize) {
            match self {
                _ => swc_visit::wrong_ast_path(),
            }
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum ResolutionField {
        #[doc = "Represents [`Resolution::span`]"]
        Span,
        #[doc = "Represents [`Resolution::value`]"]
        Value,
        #[doc = "Represents [`Resolution::unit`]"]
        Unit,
    }
    impl RuleField {
        #[inline(always)]
        pub(crate) fn set_index(&mut self, _: usize) {
            swc_visit::wrong_ast_path();
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum RuleField {
        #[doc = "Represents [`Rule::QualifiedRule`]"]
        QualifiedRule,
        #[doc = "Represents [`Rule::AtRule`]"]
        AtRule,
        #[doc = "Represents [`Rule::ListOfComponentValues`]"]
        ListOfComponentValues,
    }
    impl ScopeRangeField {
        pub(crate) fn set_index(&mut self, index: usize) {
            match self {
                _ => swc_visit::wrong_ast_path(),
            }
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum ScopeRangeField {
        #[doc = "Represents [`ScopeRange::span`]"]
        Span,
        #[doc = "Represents [`ScopeRange::scope_start`]"]
        ScopeStart,
        #[doc = "Represents [`ScopeRange::scope_end`]"]
        ScopeEnd,
    }
    impl SelectorListField {
        pub(crate) fn set_index(&mut self, index: usize) {
            match self {
                Self::Children(idx) => {
                    assert_initial_index(*idx, index);
                    *idx = index;
                }
                _ => swc_visit::wrong_ast_path(),
            }
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum SelectorListField {
        #[doc = "Represents [`SelectorList::span`]"]
        Span,
        #[doc = "Represents [`SelectorList::children`]"]
        Children(usize),
    }
    impl SequenceOfCustomIdentsField {
        pub(crate) fn set_index(&mut self, index: usize) {
            match self {
                Self::Value(idx) => {
                    assert_initial_index(*idx, index);
                    *idx = index;
                }
                _ => swc_visit::wrong_ast_path(),
            }
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum SequenceOfCustomIdentsField {
        #[doc = "Represents [`SequenceOfCustomIdents::span`]"]
        Span,
        #[doc = "Represents [`SequenceOfCustomIdents::value`]"]
        Value(usize),
    }
    impl SimpleBlockField {
        pub(crate) fn set_index(&mut self, index: usize) {
            match self {
                Self::Value(idx) => {
                    assert_initial_index(*idx, index);
                    *idx = index;
                }
                _ => swc_visit::wrong_ast_path(),
            }
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum SimpleBlockField {
        #[doc = "Represents [`SimpleBlock::span`]"]
        Span,
        #[doc = "Represents [`SimpleBlock::name`]"]
        Name,
        #[doc = "Represents [`SimpleBlock::value`]"]
        Value(usize),
    }
    impl SizeFeatureField {
        #[inline(always)]
        pub(crate) fn set_index(&mut self, _: usize) {
            swc_visit::wrong_ast_path();
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum SizeFeatureField {
        #[doc = "Represents [`SizeFeature::Plain`]"]
        Plain,
        #[doc = "Represents [`SizeFeature::Boolean`]"]
        Boolean,
        #[doc = "Represents [`SizeFeature::Range`]"]
        Range,
        #[doc = "Represents [`SizeFeature::RangeInterval`]"]
        RangeInterval,
    }
    impl SizeFeatureBooleanField {
        pub(crate) fn set_index(&mut self, index: usize) {
            match self {
                _ => swc_visit::wrong_ast_path(),
            }
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum SizeFeatureBooleanField {
        #[doc = "Represents [`SizeFeatureBoolean::span`]"]
        Span,
        #[doc = "Represents [`SizeFeatureBoolean::name`]"]
        Name,
    }
    impl SizeFeatureNameField {
        #[inline(always)]
        pub(crate) fn set_index(&mut self, _: usize) {
            swc_visit::wrong_ast_path();
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum SizeFeatureNameField {
        #[doc = "Represents [`SizeFeatureName::Ident`]"]
        Ident,
    }
    impl SizeFeaturePlainField {
        pub(crate) fn set_index(&mut self, index: usize) {
            match self {
                _ => swc_visit::wrong_ast_path(),
            }
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum SizeFeaturePlainField {
        #[doc = "Represents [`SizeFeaturePlain::span`]"]
        Span,
        #[doc = "Represents [`SizeFeaturePlain::name`]"]
        Name,
        #[doc = "Represents [`SizeFeaturePlain::value`]"]
        Value,
    }
    impl SizeFeatureRangeField {
        pub(crate) fn set_index(&mut self, index: usize) {
            match self {
                _ => swc_visit::wrong_ast_path(),
            }
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum SizeFeatureRangeField {
        #[doc = "Represents [`SizeFeatureRange::span`]"]
        Span,
        #[doc = "Represents [`SizeFeatureRange::left`]"]
        Left,
        #[doc = "Represents [`SizeFeatureRange::comparison`]"]
        Comparison,
        #[doc = "Represents [`SizeFeatureRange::right`]"]
        Right,
    }
    impl SizeFeatureRangeComparisonField {
        #[inline(always)]
        pub(crate) fn set_index(&mut self, _: usize) {
            swc_visit::wrong_ast_path();
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum SizeFeatureRangeComparisonField {
        #[doc = "Represents [`SizeFeatureRangeComparison::Lt`]"]
        Lt,
        #[doc = "Represents [`SizeFeatureRangeComparison::Le`]"]
        Le,
        #[doc = "Represents [`SizeFeatureRangeComparison::Gt`]"]
        Gt,
        #[doc = "Represents [`SizeFeatureRangeComparison::Ge`]"]
        Ge,
        #[doc = "Represents [`SizeFeatureRangeComparison::Eq`]"]
        Eq,
    }
    impl SizeFeatureRangeIntervalField {
        pub(crate) fn set_index(&mut self, index: usize) {
            match self {
                _ => swc_visit::wrong_ast_path(),
            }
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum SizeFeatureRangeIntervalField {
        #[doc = "Represents [`SizeFeatureRangeInterval::span`]"]
        Span,
        #[doc = "Represents [`SizeFeatureRangeInterval::left`]"]
        Left,
        #[doc = "Represents [`SizeFeatureRangeInterval::left_comparison`]"]
        LeftComparison,
        #[doc = "Represents [`SizeFeatureRangeInterval::name`]"]
        Name,
        #[doc = "Represents [`SizeFeatureRangeInterval::right_comparison`]"]
        RightComparison,
        #[doc = "Represents [`SizeFeatureRangeInterval::right`]"]
        Right,
    }
    impl SizeFeatureValueField {
        #[inline(always)]
        pub(crate) fn set_index(&mut self, _: usize) {
            swc_visit::wrong_ast_path();
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum SizeFeatureValueField {
        #[doc = "Represents [`SizeFeatureValue::Number`]"]
        Number,
        #[doc = "Represents [`SizeFeatureValue::Dimension`]"]
        Dimension,
        #[doc = "Represents [`SizeFeatureValue::Ident`]"]
        Ident,
        #[doc = "Represents [`SizeFeatureValue::Ratio`]"]
        Ratio,
        #[doc = "Represents [`SizeFeatureValue::Function`]"]
        Function,
    }
    impl StrField {
        pub(crate) fn set_index(&mut self, index: usize) {
            match self {
                _ => swc_visit::wrong_ast_path(),
            }
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum StrField {
        #[doc = "Represents [`Str::span`]"]
        Span,
        #[doc = "Represents [`Str::value`]"]
        Value,
        #[doc = "Represents [`Str::raw`]"]
        Raw,
    }
    impl StyleBlockField {
        #[inline(always)]
        pub(crate) fn set_index(&mut self, _: usize) {
            swc_visit::wrong_ast_path();
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum StyleBlockField {
        #[doc = "Represents [`StyleBlock::AtRule`]"]
        AtRule,
        #[doc = "Represents [`StyleBlock::Declaration`]"]
        Declaration,
        #[doc = "Represents [`StyleBlock::QualifiedRule`]"]
        QualifiedRule,
        #[doc = "Represents [`StyleBlock::ListOfComponentValues`]"]
        ListOfComponentValues,
    }
    impl StylesheetField {
        pub(crate) fn set_index(&mut self, index: usize) {
            match self {
                Self::Rules(idx) => {
                    assert_initial_index(*idx, index);
                    *idx = index;
                }
                _ => swc_visit::wrong_ast_path(),
            }
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum StylesheetField {
        #[doc = "Represents [`Stylesheet::span`]"]
        Span,
        #[doc = "Represents [`Stylesheet::rules`]"]
        Rules(usize),
    }
    impl SubclassSelectorField {
        #[inline(always)]
        pub(crate) fn set_index(&mut self, _: usize) {
            swc_visit::wrong_ast_path();
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum SubclassSelectorField {
        #[doc = "Represents [`SubclassSelector::Id`]"]
        Id,
        #[doc = "Represents [`SubclassSelector::Class`]"]
        Class,
        #[doc = "Represents [`SubclassSelector::Attribute`]"]
        Attribute,
        #[doc = "Represents [`SubclassSelector::PseudoClass`]"]
        PseudoClass,
        #[doc = "Represents [`SubclassSelector::PseudoElement`]"]
        PseudoElement,
    }
    impl SupportsAndField {
        pub(crate) fn set_index(&mut self, index: usize) {
            match self {
                _ => swc_visit::wrong_ast_path(),
            }
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum SupportsAndField {
        #[doc = "Represents [`SupportsAnd::span`]"]
        Span,
        #[doc = "Represents [`SupportsAnd::keyword`]"]
        Keyword,
        #[doc = "Represents [`SupportsAnd::condition`]"]
        Condition,
    }
    impl SupportsConditionField {
        pub(crate) fn set_index(&mut self, index: usize) {
            match self {
                Self::Conditions(idx) => {
                    assert_initial_index(*idx, index);
                    *idx = index;
                }
                _ => swc_visit::wrong_ast_path(),
            }
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum SupportsConditionField {
        #[doc = "Represents [`SupportsCondition::span`]"]
        Span,
        #[doc = "Represents [`SupportsCondition::conditions`]"]
        Conditions(usize),
    }
    impl SupportsConditionTypeField {
        #[inline(always)]
        pub(crate) fn set_index(&mut self, _: usize) {
            swc_visit::wrong_ast_path();
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum SupportsConditionTypeField {
        #[doc = "Represents [`SupportsConditionType::Not`]"]
        Not,
        #[doc = "Represents [`SupportsConditionType::And`]"]
        And,
        #[doc = "Represents [`SupportsConditionType::Or`]"]
        Or,
        #[doc = "Represents [`SupportsConditionType::SupportsInParens`]"]
        SupportsInParens,
    }
    impl SupportsFeatureField {
        #[inline(always)]
        pub(crate) fn set_index(&mut self, _: usize) {
            swc_visit::wrong_ast_path();
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum SupportsFeatureField {
        #[doc = "Represents [`SupportsFeature::Declaration`]"]
        Declaration,
        #[doc = "Represents [`SupportsFeature::Function`]"]
        Function,
    }
    impl SupportsInParensField {
        #[inline(always)]
        pub(crate) fn set_index(&mut self, _: usize) {
            swc_visit::wrong_ast_path();
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum SupportsInParensField {
        #[doc = "Represents [`SupportsInParens::SupportsCondition`]"]
        SupportsCondition,
        #[doc = "Represents [`SupportsInParens::Feature`]"]
        Feature,
        #[doc = "Represents [`SupportsInParens::GeneralEnclosed`]"]
        GeneralEnclosed,
    }
    impl SupportsNotField {
        pub(crate) fn set_index(&mut self, index: usize) {
            match self {
                _ => swc_visit::wrong_ast_path(),
            }
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum SupportsNotField {
        #[doc = "Represents [`SupportsNot::span`]"]
        Span,
        #[doc = "Represents [`SupportsNot::keyword`]"]
        Keyword,
        #[doc = "Represents [`SupportsNot::condition`]"]
        Condition,
    }
    impl SupportsOrField {
        pub(crate) fn set_index(&mut self, index: usize) {
            match self {
                _ => swc_visit::wrong_ast_path(),
            }
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum SupportsOrField {
        #[doc = "Represents [`SupportsOr::span`]"]
        Span,
        #[doc = "Represents [`SupportsOr::keyword`]"]
        Keyword,
        #[doc = "Represents [`SupportsOr::condition`]"]
        Condition,
    }
    impl TagNameSelectorField {
        pub(crate) fn set_index(&mut self, index: usize) {
            match self {
                _ => swc_visit::wrong_ast_path(),
            }
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum TagNameSelectorField {
        #[doc = "Represents [`TagNameSelector::span`]"]
        Span,
        #[doc = "Represents [`TagNameSelector::name`]"]
        Name,
    }
    impl TimeField {
        pub(crate) fn set_index(&mut self, index: usize) {
            match self {
                _ => swc_visit::wrong_ast_path(),
            }
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum TimeField {
        #[doc = "Represents [`Time::span`]"]
        Span,
        #[doc = "Represents [`Time::value`]"]
        Value,
        #[doc = "Represents [`Time::unit`]"]
        Unit,
    }
    impl TimePercentageField {
        #[inline(always)]
        pub(crate) fn set_index(&mut self, _: usize) {
            swc_visit::wrong_ast_path();
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum TimePercentageField {
        #[doc = "Represents [`TimePercentage::Time`]"]
        Time,
        #[doc = "Represents [`TimePercentage::Percentage`]"]
        Percentage,
    }
    impl TokenField {
        #[inline(always)]
        pub(crate) fn set_index(&mut self, _: usize) {
            swc_visit::wrong_ast_path();
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum TokenField {
        #[doc = "Represents [`Token::Ident`]"]
        Ident,
        #[doc = "Represents [`Token::Function`]"]
        Function,
        #[doc = "Represents [`Token::AtKeyword`]"]
        AtKeyword,
        #[doc = "Represents [`Token::Hash`]"]
        Hash,
        #[doc = "Represents [`Token::String`]"]
        String,
        #[doc = "Represents [`Token::BadString`]"]
        BadString,
        #[doc = "Represents [`Token::Url`]"]
        Url,
        #[doc = "Represents [`Token::BadUrl`]"]
        BadUrl,
        #[doc = "Represents [`Token::Delim`]"]
        Delim,
        #[doc = "Represents [`Token::Number`]"]
        Number,
        #[doc = "Represents [`Token::Percentage`]"]
        Percentage,
        #[doc = "Represents [`Token::Dimension`]"]
        Dimension,
        #[doc = "Represents [`Token::WhiteSpace`]"]
        WhiteSpace,
        #[doc = "Represents [`Token::CDO`]"]
        Cdo,
        #[doc = "Represents [`Token::CDC`]"]
        Cdc,
        #[doc = "Represents [`Token::Colon`]"]
        Colon,
        #[doc = "Represents [`Token::Semi`]"]
        Semi,
        #[doc = "Represents [`Token::Comma`]"]
        Comma,
        #[doc = "Represents [`Token::LBracket`]"]
        Lbracket,
        #[doc = "Represents [`Token::RBracket`]"]
        Rbracket,
        #[doc = "Represents [`Token::LParen`]"]
        Lparen,
        #[doc = "Represents [`Token::RParen`]"]
        Rparen,
        #[doc = "Represents [`Token::LBrace`]"]
        Lbrace,
        #[doc = "Represents [`Token::RBrace`]"]
        Rbrace,
    }
    impl TokenAndSpanField {
        pub(crate) fn set_index(&mut self, index: usize) {
            match self {
                _ => swc_visit::wrong_ast_path(),
            }
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum TokenAndSpanField {
        #[doc = "Represents [`TokenAndSpan::span`]"]
        Span,
        #[doc = "Represents [`TokenAndSpan::token`]"]
        Token,
    }
    impl TypeSelectorField {
        #[inline(always)]
        pub(crate) fn set_index(&mut self, _: usize) {
            swc_visit::wrong_ast_path();
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum TypeSelectorField {
        #[doc = "Represents [`TypeSelector::TagName`]"]
        TagName,
        #[doc = "Represents [`TypeSelector::Universal`]"]
        Universal,
    }
    impl UnicodeRangeField {
        pub(crate) fn set_index(&mut self, index: usize) {
            match self {
                _ => swc_visit::wrong_ast_path(),
            }
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum UnicodeRangeField {
        #[doc = "Represents [`UnicodeRange::span`]"]
        Span,
        #[doc = "Represents [`UnicodeRange::start`]"]
        Start,
        #[doc = "Represents [`UnicodeRange::end`]"]
        End,
        #[doc = "Represents [`UnicodeRange::raw`]"]
        Raw,
    }
    impl UniversalSelectorField {
        pub(crate) fn set_index(&mut self, index: usize) {
            match self {
                _ => swc_visit::wrong_ast_path(),
            }
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum UniversalSelectorField {
        #[doc = "Represents [`UniversalSelector::span`]"]
        Span,
        #[doc = "Represents [`UniversalSelector::prefix`]"]
        Prefix,
    }
    impl UnknownDimensionField {
        pub(crate) fn set_index(&mut self, index: usize) {
            match self {
                _ => swc_visit::wrong_ast_path(),
            }
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum UnknownDimensionField {
        #[doc = "Represents [`UnknownDimension::span`]"]
        Span,
        #[doc = "Represents [`UnknownDimension::value`]"]
        Value,
        #[doc = "Represents [`UnknownDimension::unit`]"]
        Unit,
    }
    impl UrlField {
        pub(crate) fn set_index(&mut self, index: usize) {
            match self {
                Self::Modifiers(idx) => {
                    assert_initial_index(*idx, index);
                    *idx = index;
                }
                _ => swc_visit::wrong_ast_path(),
            }
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum UrlField {
        #[doc = "Represents [`Url::span`]"]
        Span,
        #[doc = "Represents [`Url::name`]"]
        Name,
        #[doc = "Represents [`Url::value`]"]
        Value,
        #[doc = "Represents [`Url::modifiers`]"]
        Modifiers(usize),
    }
    impl UrlKeyValueField {
        pub(crate) fn set_index(&mut self, index: usize) {
            match self {
                _ => swc_visit::wrong_ast_path(),
            }
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum UrlKeyValueField {}
    impl UrlModifierField {
        #[inline(always)]
        pub(crate) fn set_index(&mut self, _: usize) {
            swc_visit::wrong_ast_path();
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum UrlModifierField {
        #[doc = "Represents [`UrlModifier::Ident`]"]
        Ident,
        #[doc = "Represents [`UrlModifier::Function`]"]
        Function,
    }
    impl UrlValueField {
        #[inline(always)]
        pub(crate) fn set_index(&mut self, _: usize) {
            swc_visit::wrong_ast_path();
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum UrlValueField {
        #[doc = "Represents [`UrlValue::Str`]"]
        Str,
        #[doc = "Represents [`UrlValue::Raw`]"]
        Raw,
    }
    impl UrlValueRawField {
        pub(crate) fn set_index(&mut self, index: usize) {
            match self {
                _ => swc_visit::wrong_ast_path(),
            }
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum UrlValueRawField {
        #[doc = "Represents [`UrlValueRaw::span`]"]
        Span,
        #[doc = "Represents [`UrlValueRaw::value`]"]
        Value,
        #[doc = "Represents [`UrlValueRaw::raw`]"]
        Raw,
    }
    impl WqNameField {
        pub(crate) fn set_index(&mut self, index: usize) {
            match self {
                _ => swc_visit::wrong_ast_path(),
            }
        }
    }
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum WqNameField {
        #[doc = "Represents [`WqName::span`]"]
        Span,
        #[doc = "Represents [`WqName::prefix`]"]
        Prefix,
        #[doc = "Represents [`WqName::value`]"]
        Value,
    }
    #[cfg(any(docsrs, feature = "path"))]
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum AstParentKind {
        AbsoluteColorBase(AbsoluteColorBaseField),
        AlphaValue(AlphaValueField),
        AnPlusB(AnPlusBField),
        AnPlusBNotation(AnPlusBNotationField),
        Angle(AngleField),
        AnglePercentage(AnglePercentageField),
        AnyNamespace(AnyNamespaceField),
        AtRule(AtRuleField),
        AtRuleName(AtRuleNameField),
        AtRulePrelude(AtRulePreludeField),
        AttributeSelector(AttributeSelectorField),
        AttributeSelectorMatcher(AttributeSelectorMatcherField),
        AttributeSelectorMatcherValue(AttributeSelectorMatcherValueField),
        AttributeSelectorModifier(AttributeSelectorModifierField),
        AttributeSelectorValue(AttributeSelectorValueField),
        BinOp(BinOpField),
        CalcOperator(CalcOperatorField),
        CalcOperatorType(CalcOperatorTypeField),
        CalcProduct(CalcProductField),
        CalcProductOrOperator(CalcProductOrOperatorField),
        CalcSum(CalcSumField),
        CalcValue(CalcValueField),
        CalcValueOrOperator(CalcValueOrOperatorField),
        ClassSelector(ClassSelectorField),
        CmykComponent(CmykComponentField),
        Color(ColorField),
        ColorProfileName(ColorProfileNameField),
        Combinator(CombinatorField),
        CombinatorValue(CombinatorValueField),
        ComplexSelector(ComplexSelectorField),
        ComplexSelectorChildren(ComplexSelectorChildrenField),
        ComponentValue(ComponentValueField),
        CompoundSelector(CompoundSelectorField),
        CompoundSelectorList(CompoundSelectorListField),
        ContainerCondition(ContainerConditionField),
        ContainerName(ContainerNameField),
        ContainerQuery(ContainerQueryField),
        ContainerQueryAnd(ContainerQueryAndField),
        ContainerQueryNot(ContainerQueryNotField),
        ContainerQueryOr(ContainerQueryOrField),
        ContainerQueryType(ContainerQueryTypeField),
        CustomHighlightName(CustomHighlightNameField),
        CustomIdent(CustomIdentField),
        CustomMediaQuery(CustomMediaQueryField),
        CustomMediaQueryMediaType(CustomMediaQueryMediaTypeField),
        CustomPropertyName(CustomPropertyNameField),
        DashedIdent(DashedIdentField),
        Declaration(DeclarationField),
        DeclarationName(DeclarationNameField),
        DeclarationOrAtRule(DeclarationOrAtRuleField),
        Delimiter(DelimiterField),
        DelimiterValue(DelimiterValueField),
        Dimension(DimensionField),
        DimensionToken(DimensionTokenField),
        DocumentPrelude(DocumentPreludeField),
        DocumentPreludeMatchingFunction(DocumentPreludeMatchingFunctionField),
        ExtensionName(ExtensionNameField),
        FamilyName(FamilyNameField),
        Flex(FlexField),
        FontFeatureValuesPrelude(FontFeatureValuesPreludeField),
        ForgivingComplexSelector(ForgivingComplexSelectorField),
        ForgivingRelativeSelector(ForgivingRelativeSelectorField),
        ForgivingRelativeSelectorList(ForgivingRelativeSelectorListField),
        ForgivingSelectorList(ForgivingSelectorListField),
        Frequency(FrequencyField),
        FrequencyPercentage(FrequencyPercentageField),
        Function(FunctionField),
        FunctionName(FunctionNameField),
        GeneralEnclosed(GeneralEnclosedField),
        HexColor(HexColorField),
        Hue(HueField),
        IdSelector(IdSelectorField),
        Ident(IdentField),
        ImportConditions(ImportConditionsField),
        ImportHref(ImportHrefField),
        ImportLayerName(ImportLayerNameField),
        ImportPrelude(ImportPreludeField),
        ImportantFlag(ImportantFlagField),
        Integer(IntegerField),
        KeyframeBlock(KeyframeBlockField),
        KeyframeSelector(KeyframeSelectorField),
        KeyframesName(KeyframesNameField),
        KeyframesPseudoFunction(KeyframesPseudoFunctionField),
        KeyframesPseudoPrefix(KeyframesPseudoPrefixField),
        LayerName(LayerNameField),
        LayerNameList(LayerNameListField),
        LayerPrelude(LayerPreludeField),
        Length(LengthField),
        LengthPercentage(LengthPercentageField),
        ListOfComponentValues(ListOfComponentValuesField),
        MediaAnd(MediaAndField),
        MediaCondition(MediaConditionField),
        MediaConditionAllType(MediaConditionAllTypeField),
        MediaConditionType(MediaConditionTypeField),
        MediaConditionWithoutOr(MediaConditionWithoutOrField),
        MediaConditionWithoutOrType(MediaConditionWithoutOrTypeField),
        MediaFeature(MediaFeatureField),
        MediaFeatureBoolean(MediaFeatureBooleanField),
        MediaFeatureName(MediaFeatureNameField),
        MediaFeaturePlain(MediaFeaturePlainField),
        MediaFeatureRange(MediaFeatureRangeField),
        MediaFeatureRangeComparison(MediaFeatureRangeComparisonField),
        MediaFeatureRangeInterval(MediaFeatureRangeIntervalField),
        MediaFeatureValue(MediaFeatureValueField),
        MediaInParens(MediaInParensField),
        MediaNot(MediaNotField),
        MediaOr(MediaOrField),
        MediaQuery(MediaQueryField),
        MediaQueryList(MediaQueryListField),
        MediaType(MediaTypeField),
        NamedNamespace(NamedNamespaceField),
        Namespace(NamespaceField),
        NamespacePrefix(NamespacePrefixField),
        NamespacePrelude(NamespacePreludeField),
        NamespacePreludeUri(NamespacePreludeUriField),
        NestingSelector(NestingSelectorField),
        Number(NumberField),
        NumberType(NumberTypeField),
        PageSelector(PageSelectorField),
        PageSelectorList(PageSelectorListField),
        PageSelectorPseudo(PageSelectorPseudoField),
        PageSelectorType(PageSelectorTypeField),
        Percentage(PercentageField),
        PseudoClassSelector(PseudoClassSelectorField),
        PseudoClassSelectorChildren(PseudoClassSelectorChildrenField),
        PseudoElementSelector(PseudoElementSelectorField),
        PseudoElementSelectorChildren(PseudoElementSelectorChildrenField),
        QualifiedRule(QualifiedRuleField),
        QualifiedRulePrelude(QualifiedRulePreludeField),
        QueryInParens(QueryInParensField),
        Ratio(RatioField),
        RelativeSelector(RelativeSelectorField),
        RelativeSelectorList(RelativeSelectorListField),
        Resolution(ResolutionField),
        Rule(RuleField),
        ScopeRange(ScopeRangeField),
        SelectorList(SelectorListField),
        SequenceOfCustomIdents(SequenceOfCustomIdentsField),
        SimpleBlock(SimpleBlockField),
        SizeFeature(SizeFeatureField),
        SizeFeatureBoolean(SizeFeatureBooleanField),
        SizeFeatureName(SizeFeatureNameField),
        SizeFeaturePlain(SizeFeaturePlainField),
        SizeFeatureRange(SizeFeatureRangeField),
        SizeFeatureRangeComparison(SizeFeatureRangeComparisonField),
        SizeFeatureRangeInterval(SizeFeatureRangeIntervalField),
        SizeFeatureValue(SizeFeatureValueField),
        Str(StrField),
        StyleBlock(StyleBlockField),
        Stylesheet(StylesheetField),
        SubclassSelector(SubclassSelectorField),
        SupportsAnd(SupportsAndField),
        SupportsCondition(SupportsConditionField),
        SupportsConditionType(SupportsConditionTypeField),
        SupportsFeature(SupportsFeatureField),
        SupportsInParens(SupportsInParensField),
        SupportsNot(SupportsNotField),
        SupportsOr(SupportsOrField),
        TagNameSelector(TagNameSelectorField),
        Time(TimeField),
        TimePercentage(TimePercentageField),
        Token(TokenField),
        TokenAndSpan(TokenAndSpanField),
        TypeSelector(TypeSelectorField),
        UnicodeRange(UnicodeRangeField),
        UniversalSelector(UniversalSelectorField),
        UnknownDimension(UnknownDimensionField),
        Url(UrlField),
        UrlKeyValue(UrlKeyValueField),
        UrlModifier(UrlModifierField),
        UrlValue(UrlValueField),
        UrlValueRaw(UrlValueRawField),
        WqName(WqNameField),
    }
    impl ::swc_visit::ParentKind for AstParentKind {
        #[inline]
        fn set_index(&mut self, index: usize) {
            match self {
                Self::AbsoluteColorBase(v) => v.set_index(index),
                Self::AlphaValue(v) => v.set_index(index),
                Self::AnPlusB(v) => v.set_index(index),
                Self::AnPlusBNotation(v) => v.set_index(index),
                Self::Angle(v) => v.set_index(index),
                Self::AnglePercentage(v) => v.set_index(index),
                Self::AnyNamespace(v) => v.set_index(index),
                Self::AtRule(v) => v.set_index(index),
                Self::AtRuleName(v) => v.set_index(index),
                Self::AtRulePrelude(v) => v.set_index(index),
                Self::AttributeSelector(v) => v.set_index(index),
                Self::AttributeSelectorMatcher(v) => v.set_index(index),
                Self::AttributeSelectorMatcherValue(v) => v.set_index(index),
                Self::AttributeSelectorModifier(v) => v.set_index(index),
                Self::AttributeSelectorValue(v) => v.set_index(index),
                Self::BinOp(v) => v.set_index(index),
                Self::CalcOperator(v) => v.set_index(index),
                Self::CalcOperatorType(v) => v.set_index(index),
                Self::CalcProduct(v) => v.set_index(index),
                Self::CalcProductOrOperator(v) => v.set_index(index),
                Self::CalcSum(v) => v.set_index(index),
                Self::CalcValue(v) => v.set_index(index),
                Self::CalcValueOrOperator(v) => v.set_index(index),
                Self::ClassSelector(v) => v.set_index(index),
                Self::CmykComponent(v) => v.set_index(index),
                Self::Color(v) => v.set_index(index),
                Self::ColorProfileName(v) => v.set_index(index),
                Self::Combinator(v) => v.set_index(index),
                Self::CombinatorValue(v) => v.set_index(index),
                Self::ComplexSelector(v) => v.set_index(index),
                Self::ComplexSelectorChildren(v) => v.set_index(index),
                Self::ComponentValue(v) => v.set_index(index),
                Self::CompoundSelector(v) => v.set_index(index),
                Self::CompoundSelectorList(v) => v.set_index(index),
                Self::ContainerCondition(v) => v.set_index(index),
                Self::ContainerName(v) => v.set_index(index),
                Self::ContainerQuery(v) => v.set_index(index),
                Self::ContainerQueryAnd(v) => v.set_index(index),
                Self::ContainerQueryNot(v) => v.set_index(index),
                Self::ContainerQueryOr(v) => v.set_index(index),
                Self::ContainerQueryType(v) => v.set_index(index),
                Self::CustomHighlightName(v) => v.set_index(index),
                Self::CustomIdent(v) => v.set_index(index),
                Self::CustomMediaQuery(v) => v.set_index(index),
                Self::CustomMediaQueryMediaType(v) => v.set_index(index),
                Self::CustomPropertyName(v) => v.set_index(index),
                Self::DashedIdent(v) => v.set_index(index),
                Self::Declaration(v) => v.set_index(index),
                Self::DeclarationName(v) => v.set_index(index),
                Self::DeclarationOrAtRule(v) => v.set_index(index),
                Self::Delimiter(v) => v.set_index(index),
                Self::DelimiterValue(v) => v.set_index(index),
                Self::Dimension(v) => v.set_index(index),
                Self::DimensionToken(v) => v.set_index(index),
                Self::DocumentPrelude(v) => v.set_index(index),
                Self::DocumentPreludeMatchingFunction(v) => v.set_index(index),
                Self::ExtensionName(v) => v.set_index(index),
                Self::FamilyName(v) => v.set_index(index),
                Self::Flex(v) => v.set_index(index),
                Self::FontFeatureValuesPrelude(v) => v.set_index(index),
                Self::ForgivingComplexSelector(v) => v.set_index(index),
                Self::ForgivingRelativeSelector(v) => v.set_index(index),
                Self::ForgivingRelativeSelectorList(v) => v.set_index(index),
                Self::ForgivingSelectorList(v) => v.set_index(index),
                Self::Frequency(v) => v.set_index(index),
                Self::FrequencyPercentage(v) => v.set_index(index),
                Self::Function(v) => v.set_index(index),
                Self::FunctionName(v) => v.set_index(index),
                Self::GeneralEnclosed(v) => v.set_index(index),
                Self::HexColor(v) => v.set_index(index),
                Self::Hue(v) => v.set_index(index),
                Self::IdSelector(v) => v.set_index(index),
                Self::Ident(v) => v.set_index(index),
                Self::ImportConditions(v) => v.set_index(index),
                Self::ImportHref(v) => v.set_index(index),
                Self::ImportLayerName(v) => v.set_index(index),
                Self::ImportPrelude(v) => v.set_index(index),
                Self::ImportantFlag(v) => v.set_index(index),
                Self::Integer(v) => v.set_index(index),
                Self::KeyframeBlock(v) => v.set_index(index),
                Self::KeyframeSelector(v) => v.set_index(index),
                Self::KeyframesName(v) => v.set_index(index),
                Self::KeyframesPseudoFunction(v) => v.set_index(index),
                Self::KeyframesPseudoPrefix(v) => v.set_index(index),
                Self::LayerName(v) => v.set_index(index),
                Self::LayerNameList(v) => v.set_index(index),
                Self::LayerPrelude(v) => v.set_index(index),
                Self::Length(v) => v.set_index(index),
                Self::LengthPercentage(v) => v.set_index(index),
                Self::ListOfComponentValues(v) => v.set_index(index),
                Self::MediaAnd(v) => v.set_index(index),
                Self::MediaCondition(v) => v.set_index(index),
                Self::MediaConditionAllType(v) => v.set_index(index),
                Self::MediaConditionType(v) => v.set_index(index),
                Self::MediaConditionWithoutOr(v) => v.set_index(index),
                Self::MediaConditionWithoutOrType(v) => v.set_index(index),
                Self::MediaFeature(v) => v.set_index(index),
                Self::MediaFeatureBoolean(v) => v.set_index(index),
                Self::MediaFeatureName(v) => v.set_index(index),
                Self::MediaFeaturePlain(v) => v.set_index(index),
                Self::MediaFeatureRange(v) => v.set_index(index),
                Self::MediaFeatureRangeComparison(v) => v.set_index(index),
                Self::MediaFeatureRangeInterval(v) => v.set_index(index),
                Self::MediaFeatureValue(v) => v.set_index(index),
                Self::MediaInParens(v) => v.set_index(index),
                Self::MediaNot(v) => v.set_index(index),
                Self::MediaOr(v) => v.set_index(index),
                Self::MediaQuery(v) => v.set_index(index),
                Self::MediaQueryList(v) => v.set_index(index),
                Self::MediaType(v) => v.set_index(index),
                Self::NamedNamespace(v) => v.set_index(index),
                Self::Namespace(v) => v.set_index(index),
                Self::NamespacePrefix(v) => v.set_index(index),
                Self::NamespacePrelude(v) => v.set_index(index),
                Self::NamespacePreludeUri(v) => v.set_index(index),
                Self::NestingSelector(v) => v.set_index(index),
                Self::Number(v) => v.set_index(index),
                Self::NumberType(v) => v.set_index(index),
                Self::PageSelector(v) => v.set_index(index),
                Self::PageSelectorList(v) => v.set_index(index),
                Self::PageSelectorPseudo(v) => v.set_index(index),
                Self::PageSelectorType(v) => v.set_index(index),
                Self::Percentage(v) => v.set_index(index),
                Self::PseudoClassSelector(v) => v.set_index(index),
                Self::PseudoClassSelectorChildren(v) => v.set_index(index),
                Self::PseudoElementSelector(v) => v.set_index(index),
                Self::PseudoElementSelectorChildren(v) => v.set_index(index),
                Self::QualifiedRule(v) => v.set_index(index),
                Self::QualifiedRulePrelude(v) => v.set_index(index),
                Self::QueryInParens(v) => v.set_index(index),
                Self::Ratio(v) => v.set_index(index),
                Self::RelativeSelector(v) => v.set_index(index),
                Self::RelativeSelectorList(v) => v.set_index(index),
                Self::Resolution(v) => v.set_index(index),
                Self::Rule(v) => v.set_index(index),
                Self::ScopeRange(v) => v.set_index(index),
                Self::SelectorList(v) => v.set_index(index),
                Self::SequenceOfCustomIdents(v) => v.set_index(index),
                Self::SimpleBlock(v) => v.set_index(index),
                Self::SizeFeature(v) => v.set_index(index),
                Self::SizeFeatureBoolean(v) => v.set_index(index),
                Self::SizeFeatureName(v) => v.set_index(index),
                Self::SizeFeaturePlain(v) => v.set_index(index),
                Self::SizeFeatureRange(v) => v.set_index(index),
                Self::SizeFeatureRangeComparison(v) => v.set_index(index),
                Self::SizeFeatureRangeInterval(v) => v.set_index(index),
                Self::SizeFeatureValue(v) => v.set_index(index),
                Self::Str(v) => v.set_index(index),
                Self::StyleBlock(v) => v.set_index(index),
                Self::Stylesheet(v) => v.set_index(index),
                Self::SubclassSelector(v) => v.set_index(index),
                Self::SupportsAnd(v) => v.set_index(index),
                Self::SupportsCondition(v) => v.set_index(index),
                Self::SupportsConditionType(v) => v.set_index(index),
                Self::SupportsFeature(v) => v.set_index(index),
                Self::SupportsInParens(v) => v.set_index(index),
                Self::SupportsNot(v) => v.set_index(index),
                Self::SupportsOr(v) => v.set_index(index),
                Self::TagNameSelector(v) => v.set_index(index),
                Self::Time(v) => v.set_index(index),
                Self::TimePercentage(v) => v.set_index(index),
                Self::Token(v) => v.set_index(index),
                Self::TokenAndSpan(v) => v.set_index(index),
                Self::TypeSelector(v) => v.set_index(index),
                Self::UnicodeRange(v) => v.set_index(index),
                Self::UniversalSelector(v) => v.set_index(index),
                Self::UnknownDimension(v) => v.set_index(index),
                Self::Url(v) => v.set_index(index),
                Self::UrlKeyValue(v) => v.set_index(index),
                Self::UrlModifier(v) => v.set_index(index),
                Self::UrlValue(v) => v.set_index(index),
                Self::UrlValueRaw(v) => v.set_index(index),
                Self::WqName(v) => v.set_index(index),
            }
        }
    }
    #[cfg(any(docsrs, feature = "path"))]
    #[derive(Debug, Clone, Copy)]
    pub enum AstParentNodeRef<'ast> {
        AbsoluteColorBase(&'ast AbsoluteColorBase, AbsoluteColorBaseField),
        AlphaValue(&'ast AlphaValue, AlphaValueField),
        AnPlusB(&'ast AnPlusB, AnPlusBField),
        AnPlusBNotation(&'ast AnPlusBNotation, AnPlusBNotationField),
        Angle(&'ast Angle, AngleField),
        AnglePercentage(&'ast AnglePercentage, AnglePercentageField),
        AnyNamespace(&'ast AnyNamespace, AnyNamespaceField),
        AtRule(&'ast AtRule, AtRuleField),
        AtRuleName(&'ast AtRuleName, AtRuleNameField),
        AtRulePrelude(&'ast AtRulePrelude, AtRulePreludeField),
        AttributeSelector(&'ast AttributeSelector, AttributeSelectorField),
        AttributeSelectorMatcher(
            &'ast AttributeSelectorMatcher,
            AttributeSelectorMatcherField,
        ),
        AttributeSelectorMatcherValue(
            &'ast AttributeSelectorMatcherValue,
            AttributeSelectorMatcherValueField,
        ),
        AttributeSelectorModifier(
            &'ast AttributeSelectorModifier,
            AttributeSelectorModifierField,
        ),
        AttributeSelectorValue(&'ast AttributeSelectorValue, AttributeSelectorValueField),
        BinOp(&'ast BinOp, BinOpField),
        CalcOperator(&'ast CalcOperator, CalcOperatorField),
        CalcOperatorType(&'ast CalcOperatorType, CalcOperatorTypeField),
        CalcProduct(&'ast CalcProduct, CalcProductField),
        CalcProductOrOperator(&'ast CalcProductOrOperator, CalcProductOrOperatorField),
        CalcSum(&'ast CalcSum, CalcSumField),
        CalcValue(&'ast CalcValue, CalcValueField),
        CalcValueOrOperator(&'ast CalcValueOrOperator, CalcValueOrOperatorField),
        ClassSelector(&'ast ClassSelector, ClassSelectorField),
        CmykComponent(&'ast CmykComponent, CmykComponentField),
        Color(&'ast Color, ColorField),
        ColorProfileName(&'ast ColorProfileName, ColorProfileNameField),
        Combinator(&'ast Combinator, CombinatorField),
        CombinatorValue(&'ast CombinatorValue, CombinatorValueField),
        ComplexSelector(&'ast ComplexSelector, ComplexSelectorField),
        ComplexSelectorChildren(&'ast ComplexSelectorChildren, ComplexSelectorChildrenField),
        ComponentValue(&'ast ComponentValue, ComponentValueField),
        CompoundSelector(&'ast CompoundSelector, CompoundSelectorField),
        CompoundSelectorList(&'ast CompoundSelectorList, CompoundSelectorListField),
        ContainerCondition(&'ast ContainerCondition, ContainerConditionField),
        ContainerName(&'ast ContainerName, ContainerNameField),
        ContainerQuery(&'ast ContainerQuery, ContainerQueryField),
        ContainerQueryAnd(&'ast ContainerQueryAnd, ContainerQueryAndField),
        ContainerQueryNot(&'ast ContainerQueryNot, ContainerQueryNotField),
        ContainerQueryOr(&'ast ContainerQueryOr, ContainerQueryOrField),
        ContainerQueryType(&'ast ContainerQueryType, ContainerQueryTypeField),
        CustomHighlightName(&'ast CustomHighlightName, CustomHighlightNameField),
        CustomIdent(&'ast CustomIdent, CustomIdentField),
        CustomMediaQuery(&'ast CustomMediaQuery, CustomMediaQueryField),
        CustomMediaQueryMediaType(
            &'ast CustomMediaQueryMediaType,
            CustomMediaQueryMediaTypeField,
        ),
        CustomPropertyName(&'ast CustomPropertyName, CustomPropertyNameField),
        DashedIdent(&'ast DashedIdent, DashedIdentField),
        Declaration(&'ast Declaration, DeclarationField),
        DeclarationName(&'ast DeclarationName, DeclarationNameField),
        DeclarationOrAtRule(&'ast DeclarationOrAtRule, DeclarationOrAtRuleField),
        Delimiter(&'ast Delimiter, DelimiterField),
        DelimiterValue(&'ast DelimiterValue, DelimiterValueField),
        Dimension(&'ast Dimension, DimensionField),
        DimensionToken(&'ast DimensionToken, DimensionTokenField),
        DocumentPrelude(&'ast DocumentPrelude, DocumentPreludeField),
        DocumentPreludeMatchingFunction(
            &'ast DocumentPreludeMatchingFunction,
            DocumentPreludeMatchingFunctionField,
        ),
        ExtensionName(&'ast ExtensionName, ExtensionNameField),
        FamilyName(&'ast FamilyName, FamilyNameField),
        Flex(&'ast Flex, FlexField),
        FontFeatureValuesPrelude(
            &'ast FontFeatureValuesPrelude,
            FontFeatureValuesPreludeField,
        ),
        ForgivingComplexSelector(
            &'ast ForgivingComplexSelector,
            ForgivingComplexSelectorField,
        ),
        ForgivingRelativeSelector(
            &'ast ForgivingRelativeSelector,
            ForgivingRelativeSelectorField,
        ),
        ForgivingRelativeSelectorList(
            &'ast ForgivingRelativeSelectorList,
            ForgivingRelativeSelectorListField,
        ),
        ForgivingSelectorList(&'ast ForgivingSelectorList, ForgivingSelectorListField),
        Frequency(&'ast Frequency, FrequencyField),
        FrequencyPercentage(&'ast FrequencyPercentage, FrequencyPercentageField),
        Function(&'ast Function, FunctionField),
        FunctionName(&'ast FunctionName, FunctionNameField),
        GeneralEnclosed(&'ast GeneralEnclosed, GeneralEnclosedField),
        HexColor(&'ast HexColor, HexColorField),
        Hue(&'ast Hue, HueField),
        IdSelector(&'ast IdSelector, IdSelectorField),
        Ident(&'ast Ident, IdentField),
        ImportConditions(&'ast ImportConditions, ImportConditionsField),
        ImportHref(&'ast ImportHref, ImportHrefField),
        ImportLayerName(&'ast ImportLayerName, ImportLayerNameField),
        ImportPrelude(&'ast ImportPrelude, ImportPreludeField),
        ImportantFlag(&'ast ImportantFlag, ImportantFlagField),
        Integer(&'ast Integer, IntegerField),
        KeyframeBlock(&'ast KeyframeBlock, KeyframeBlockField),
        KeyframeSelector(&'ast KeyframeSelector, KeyframeSelectorField),
        KeyframesName(&'ast KeyframesName, KeyframesNameField),
        KeyframesPseudoFunction(&'ast KeyframesPseudoFunction, KeyframesPseudoFunctionField),
        KeyframesPseudoPrefix(&'ast KeyframesPseudoPrefix, KeyframesPseudoPrefixField),
        LayerName(&'ast LayerName, LayerNameField),
        LayerNameList(&'ast LayerNameList, LayerNameListField),
        LayerPrelude(&'ast LayerPrelude, LayerPreludeField),
        Length(&'ast Length, LengthField),
        LengthPercentage(&'ast LengthPercentage, LengthPercentageField),
        ListOfComponentValues(&'ast ListOfComponentValues, ListOfComponentValuesField),
        MediaAnd(&'ast MediaAnd, MediaAndField),
        MediaCondition(&'ast MediaCondition, MediaConditionField),
        MediaConditionAllType(&'ast MediaConditionAllType, MediaConditionAllTypeField),
        MediaConditionType(&'ast MediaConditionType, MediaConditionTypeField),
        MediaConditionWithoutOr(&'ast MediaConditionWithoutOr, MediaConditionWithoutOrField),
        MediaConditionWithoutOrType(
            &'ast MediaConditionWithoutOrType,
            MediaConditionWithoutOrTypeField,
        ),
        MediaFeature(&'ast MediaFeature, MediaFeatureField),
        MediaFeatureBoolean(&'ast MediaFeatureBoolean, MediaFeatureBooleanField),
        MediaFeatureName(&'ast MediaFeatureName, MediaFeatureNameField),
        MediaFeaturePlain(&'ast MediaFeaturePlain, MediaFeaturePlainField),
        MediaFeatureRange(&'ast MediaFeatureRange, MediaFeatureRangeField),
        MediaFeatureRangeComparison(
            &'ast MediaFeatureRangeComparison,
            MediaFeatureRangeComparisonField,
        ),
        MediaFeatureRangeInterval(
            &'ast MediaFeatureRangeInterval,
            MediaFeatureRangeIntervalField,
        ),
        MediaFeatureValue(&'ast MediaFeatureValue, MediaFeatureValueField),
        MediaInParens(&'ast MediaInParens, MediaInParensField),
        MediaNot(&'ast MediaNot, MediaNotField),
        MediaOr(&'ast MediaOr, MediaOrField),
        MediaQuery(&'ast MediaQuery, MediaQueryField),
        MediaQueryList(&'ast MediaQueryList, MediaQueryListField),
        MediaType(&'ast MediaType, MediaTypeField),
        NamedNamespace(&'ast NamedNamespace, NamedNamespaceField),
        Namespace(&'ast Namespace, NamespaceField),
        NamespacePrefix(&'ast NamespacePrefix, NamespacePrefixField),
        NamespacePrelude(&'ast NamespacePrelude, NamespacePreludeField),
        NamespacePreludeUri(&'ast NamespacePreludeUri, NamespacePreludeUriField),
        NestingSelector(&'ast NestingSelector, NestingSelectorField),
        Number(&'ast Number, NumberField),
        NumberType(&'ast NumberType, NumberTypeField),
        PageSelector(&'ast PageSelector, PageSelectorField),
        PageSelectorList(&'ast PageSelectorList, PageSelectorListField),
        PageSelectorPseudo(&'ast PageSelectorPseudo, PageSelectorPseudoField),
        PageSelectorType(&'ast PageSelectorType, PageSelectorTypeField),
        Percentage(&'ast Percentage, PercentageField),
        PseudoClassSelector(&'ast PseudoClassSelector, PseudoClassSelectorField),
        PseudoClassSelectorChildren(
            &'ast PseudoClassSelectorChildren,
            PseudoClassSelectorChildrenField,
        ),
        PseudoElementSelector(&'ast PseudoElementSelector, PseudoElementSelectorField),
        PseudoElementSelectorChildren(
            &'ast PseudoElementSelectorChildren,
            PseudoElementSelectorChildrenField,
        ),
        QualifiedRule(&'ast QualifiedRule, QualifiedRuleField),
        QualifiedRulePrelude(&'ast QualifiedRulePrelude, QualifiedRulePreludeField),
        QueryInParens(&'ast QueryInParens, QueryInParensField),
        Ratio(&'ast Ratio, RatioField),
        RelativeSelector(&'ast RelativeSelector, RelativeSelectorField),
        RelativeSelectorList(&'ast RelativeSelectorList, RelativeSelectorListField),
        Resolution(&'ast Resolution, ResolutionField),
        Rule(&'ast Rule, RuleField),
        ScopeRange(&'ast ScopeRange, ScopeRangeField),
        SelectorList(&'ast SelectorList, SelectorListField),
        SequenceOfCustomIdents(&'ast SequenceOfCustomIdents, SequenceOfCustomIdentsField),
        SimpleBlock(&'ast SimpleBlock, SimpleBlockField),
        SizeFeature(&'ast SizeFeature, SizeFeatureField),
        SizeFeatureBoolean(&'ast SizeFeatureBoolean, SizeFeatureBooleanField),
        SizeFeatureName(&'ast SizeFeatureName, SizeFeatureNameField),
        SizeFeaturePlain(&'ast SizeFeaturePlain, SizeFeaturePlainField),
        SizeFeatureRange(&'ast SizeFeatureRange, SizeFeatureRangeField),
        SizeFeatureRangeComparison(
            &'ast SizeFeatureRangeComparison,
            SizeFeatureRangeComparisonField,
        ),
        SizeFeatureRangeInterval(
            &'ast SizeFeatureRangeInterval,
            SizeFeatureRangeIntervalField,
        ),
        SizeFeatureValue(&'ast SizeFeatureValue, SizeFeatureValueField),
        Str(&'ast Str, StrField),
        StyleBlock(&'ast StyleBlock, StyleBlockField),
        Stylesheet(&'ast Stylesheet, StylesheetField),
        SubclassSelector(&'ast SubclassSelector, SubclassSelectorField),
        SupportsAnd(&'ast SupportsAnd, SupportsAndField),
        SupportsCondition(&'ast SupportsCondition, SupportsConditionField),
        SupportsConditionType(&'ast SupportsConditionType, SupportsConditionTypeField),
        SupportsFeature(&'ast SupportsFeature, SupportsFeatureField),
        SupportsInParens(&'ast SupportsInParens, SupportsInParensField),
        SupportsNot(&'ast SupportsNot, SupportsNotField),
        SupportsOr(&'ast SupportsOr, SupportsOrField),
        TagNameSelector(&'ast TagNameSelector, TagNameSelectorField),
        Time(&'ast Time, TimeField),
        TimePercentage(&'ast TimePercentage, TimePercentageField),
        Token(&'ast Token, TokenField),
        TokenAndSpan(&'ast TokenAndSpan, TokenAndSpanField),
        TypeSelector(&'ast TypeSelector, TypeSelectorField),
        UnicodeRange(&'ast UnicodeRange, UnicodeRangeField),
        UniversalSelector(&'ast UniversalSelector, UniversalSelectorField),
        UnknownDimension(&'ast UnknownDimension, UnknownDimensionField),
        Url(&'ast Url, UrlField),
        UrlKeyValue(&'ast UrlKeyValue, UrlKeyValueField),
        UrlModifier(&'ast UrlModifier, UrlModifierField),
        UrlValue(&'ast UrlValue, UrlValueField),
        UrlValueRaw(&'ast UrlValueRaw, UrlValueRawField),
        WqName(&'ast WqName, WqNameField),
    }
    impl<'ast> ::swc_visit::NodeRef for AstParentNodeRef<'ast> {
        type ParentKind = AstParentKind;

        #[inline(always)]
        fn kind(&self) -> AstParentKind {
            self.kind()
        }

        fn set_index(&mut self, index: usize) {
            match self {
                Self::AbsoluteColorBase(_, __field_kind) => __field_kind.set_index(index),
                Self::AlphaValue(_, __field_kind) => __field_kind.set_index(index),
                Self::AnPlusB(_, __field_kind) => __field_kind.set_index(index),
                Self::AnPlusBNotation(_, __field_kind) => __field_kind.set_index(index),
                Self::Angle(_, __field_kind) => __field_kind.set_index(index),
                Self::AnglePercentage(_, __field_kind) => __field_kind.set_index(index),
                Self::AnyNamespace(_, __field_kind) => __field_kind.set_index(index),
                Self::AtRule(_, __field_kind) => __field_kind.set_index(index),
                Self::AtRuleName(_, __field_kind) => __field_kind.set_index(index),
                Self::AtRulePrelude(_, __field_kind) => __field_kind.set_index(index),
                Self::AttributeSelector(_, __field_kind) => __field_kind.set_index(index),
                Self::AttributeSelectorMatcher(_, __field_kind) => __field_kind.set_index(index),
                Self::AttributeSelectorMatcherValue(_, __field_kind) => {
                    __field_kind.set_index(index)
                }
                Self::AttributeSelectorModifier(_, __field_kind) => __field_kind.set_index(index),
                Self::AttributeSelectorValue(_, __field_kind) => __field_kind.set_index(index),
                Self::BinOp(_, __field_kind) => __field_kind.set_index(index),
                Self::CalcOperator(_, __field_kind) => __field_kind.set_index(index),
                Self::CalcOperatorType(_, __field_kind) => __field_kind.set_index(index),
                Self::CalcProduct(_, __field_kind) => __field_kind.set_index(index),
                Self::CalcProductOrOperator(_, __field_kind) => __field_kind.set_index(index),
                Self::CalcSum(_, __field_kind) => __field_kind.set_index(index),
                Self::CalcValue(_, __field_kind) => __field_kind.set_index(index),
                Self::CalcValueOrOperator(_, __field_kind) => __field_kind.set_index(index),
                Self::ClassSelector(_, __field_kind) => __field_kind.set_index(index),
                Self::CmykComponent(_, __field_kind) => __field_kind.set_index(index),
                Self::Color(_, __field_kind) => __field_kind.set_index(index),
                Self::ColorProfileName(_, __field_kind) => __field_kind.set_index(index),
                Self::Combinator(_, __field_kind) => __field_kind.set_index(index),
                Self::CombinatorValue(_, __field_kind) => __field_kind.set_index(index),
                Self::ComplexSelector(_, __field_kind) => __field_kind.set_index(index),
                Self::ComplexSelectorChildren(_, __field_kind) => __field_kind.set_index(index),
                Self::ComponentValue(_, __field_kind) => __field_kind.set_index(index),
                Self::CompoundSelector(_, __field_kind) => __field_kind.set_index(index),
                Self::CompoundSelectorList(_, __field_kind) => __field_kind.set_index(index),
                Self::ContainerCondition(_, __field_kind) => __field_kind.set_index(index),
                Self::ContainerName(_, __field_kind) => __field_kind.set_index(index),
                Self::ContainerQuery(_, __field_kind) => __field_kind.set_index(index),
                Self::ContainerQueryAnd(_, __field_kind) => __field_kind.set_index(index),
                Self::ContainerQueryNot(_, __field_kind) => __field_kind.set_index(index),
                Self::ContainerQueryOr(_, __field_kind) => __field_kind.set_index(index),
                Self::ContainerQueryType(_, __field_kind) => __field_kind.set_index(index),
                Self::CustomHighlightName(_, __field_kind) => __field_kind.set_index(index),
                Self::CustomIdent(_, __field_kind) => __field_kind.set_index(index),
                Self::CustomMediaQuery(_, __field_kind) => __field_kind.set_index(index),
                Self::CustomMediaQueryMediaType(_, __field_kind) => __field_kind.set_index(index),
                Self::CustomPropertyName(_, __field_kind) => __field_kind.set_index(index),
                Self::DashedIdent(_, __field_kind) => __field_kind.set_index(index),
                Self::Declaration(_, __field_kind) => __field_kind.set_index(index),
                Self::DeclarationName(_, __field_kind) => __field_kind.set_index(index),
                Self::DeclarationOrAtRule(_, __field_kind) => __field_kind.set_index(index),
                Self::Delimiter(_, __field_kind) => __field_kind.set_index(index),
                Self::DelimiterValue(_, __field_kind) => __field_kind.set_index(index),
                Self::Dimension(_, __field_kind) => __field_kind.set_index(index),
                Self::DimensionToken(_, __field_kind) => __field_kind.set_index(index),
                Self::DocumentPrelude(_, __field_kind) => __field_kind.set_index(index),
                Self::DocumentPreludeMatchingFunction(_, __field_kind) => {
                    __field_kind.set_index(index)
                }
                Self::ExtensionName(_, __field_kind) => __field_kind.set_index(index),
                Self::FamilyName(_, __field_kind) => __field_kind.set_index(index),
                Self::Flex(_, __field_kind) => __field_kind.set_index(index),
                Self::FontFeatureValuesPrelude(_, __field_kind) => __field_kind.set_index(index),
                Self::ForgivingComplexSelector(_, __field_kind) => __field_kind.set_index(index),
                Self::ForgivingRelativeSelector(_, __field_kind) => __field_kind.set_index(index),
                Self::ForgivingRelativeSelectorList(_, __field_kind) => {
                    __field_kind.set_index(index)
                }
                Self::ForgivingSelectorList(_, __field_kind) => __field_kind.set_index(index),
                Self::Frequency(_, __field_kind) => __field_kind.set_index(index),
                Self::FrequencyPercentage(_, __field_kind) => __field_kind.set_index(index),
                Self::Function(_, __field_kind) => __field_kind.set_index(index),
                Self::FunctionName(_, __field_kind) => __field_kind.set_index(index),
                Self::GeneralEnclosed(_, __field_kind) => __field_kind.set_index(index),
                Self::HexColor(_, __field_kind) => __field_kind.set_index(index),
                Self::Hue(_, __field_kind) => __field_kind.set_index(index),
                Self::IdSelector(_, __field_kind) => __field_kind.set_index(index),
                Self::Ident(_, __field_kind) => __field_kind.set_index(index),
                Self::ImportConditions(_, __field_kind) => __field_kind.set_index(index),
                Self::ImportHref(_, __field_kind) => __field_kind.set_index(index),
                Self::ImportLayerName(_, __field_kind) => __field_kind.set_index(index),
                Self::ImportPrelude(_, __field_kind) => __field_kind.set_index(index),
                Self::ImportantFlag(_, __field_kind) => __field_kind.set_index(index),
                Self::Integer(_, __field_kind) => __field_kind.set_index(index),
                Self::KeyframeBlock(_, __field_kind) => __field_kind.set_index(index),
                Self::KeyframeSelector(_, __field_kind) => __field_kind.set_index(index),
                Self::KeyframesName(_, __field_kind) => __field_kind.set_index(index),
                Self::KeyframesPseudoFunction(_, __field_kind) => __field_kind.set_index(index),
                Self::KeyframesPseudoPrefix(_, __field_kind) => __field_kind.set_index(index),
                Self::LayerName(_, __field_kind) => __field_kind.set_index(index),
                Self::LayerNameList(_, __field_kind) => __field_kind.set_index(index),
                Self::LayerPrelude(_, __field_kind) => __field_kind.set_index(index),
                Self::Length(_, __field_kind) => __field_kind.set_index(index),
                Self::LengthPercentage(_, __field_kind) => __field_kind.set_index(index),
                Self::ListOfComponentValues(_, __field_kind) => __field_kind.set_index(index),
                Self::MediaAnd(_, __field_kind) => __field_kind.set_index(index),
                Self::MediaCondition(_, __field_kind) => __field_kind.set_index(index),
                Self::MediaConditionAllType(_, __field_kind) => __field_kind.set_index(index),
                Self::MediaConditionType(_, __field_kind) => __field_kind.set_index(index),
                Self::MediaConditionWithoutOr(_, __field_kind) => __field_kind.set_index(index),
                Self::MediaConditionWithoutOrType(_, __field_kind) => __field_kind.set_index(index),
                Self::MediaFeature(_, __field_kind) => __field_kind.set_index(index),
                Self::MediaFeatureBoolean(_, __field_kind) => __field_kind.set_index(index),
                Self::MediaFeatureName(_, __field_kind) => __field_kind.set_index(index),
                Self::MediaFeaturePlain(_, __field_kind) => __field_kind.set_index(index),
                Self::MediaFeatureRange(_, __field_kind) => __field_kind.set_index(index),
                Self::MediaFeatureRangeComparison(_, __field_kind) => __field_kind.set_index(index),
                Self::MediaFeatureRangeInterval(_, __field_kind) => __field_kind.set_index(index),
                Self::MediaFeatureValue(_, __field_kind) => __field_kind.set_index(index),
                Self::MediaInParens(_, __field_kind) => __field_kind.set_index(index),
                Self::MediaNot(_, __field_kind) => __field_kind.set_index(index),
                Self::MediaOr(_, __field_kind) => __field_kind.set_index(index),
                Self::MediaQuery(_, __field_kind) => __field_kind.set_index(index),
                Self::MediaQueryList(_, __field_kind) => __field_kind.set_index(index),
                Self::MediaType(_, __field_kind) => __field_kind.set_index(index),
                Self::NamedNamespace(_, __field_kind) => __field_kind.set_index(index),
                Self::Namespace(_, __field_kind) => __field_kind.set_index(index),
                Self::NamespacePrefix(_, __field_kind) => __field_kind.set_index(index),
                Self::NamespacePrelude(_, __field_kind) => __field_kind.set_index(index),
                Self::NamespacePreludeUri(_, __field_kind) => __field_kind.set_index(index),
                Self::NestingSelector(_, __field_kind) => __field_kind.set_index(index),
                Self::Number(_, __field_kind) => __field_kind.set_index(index),
                Self::NumberType(_, __field_kind) => __field_kind.set_index(index),
                Self::PageSelector(_, __field_kind) => __field_kind.set_index(index),
                Self::PageSelectorList(_, __field_kind) => __field_kind.set_index(index),
                Self::PageSelectorPseudo(_, __field_kind) => __field_kind.set_index(index),
                Self::PageSelectorType(_, __field_kind) => __field_kind.set_index(index),
                Self::Percentage(_, __field_kind) => __field_kind.set_index(index),
                Self::PseudoClassSelector(_, __field_kind) => __field_kind.set_index(index),
                Self::PseudoClassSelectorChildren(_, __field_kind) => __field_kind.set_index(index),
                Self::PseudoElementSelector(_, __field_kind) => __field_kind.set_index(index),
                Self::PseudoElementSelectorChildren(_, __field_kind) => {
                    __field_kind.set_index(index)
                }
                Self::QualifiedRule(_, __field_kind) => __field_kind.set_index(index),
                Self::QualifiedRulePrelude(_, __field_kind) => __field_kind.set_index(index),
                Self::QueryInParens(_, __field_kind) => __field_kind.set_index(index),
                Self::Ratio(_, __field_kind) => __field_kind.set_index(index),
                Self::RelativeSelector(_, __field_kind) => __field_kind.set_index(index),
                Self::RelativeSelectorList(_, __field_kind) => __field_kind.set_index(index),
                Self::Resolution(_, __field_kind) => __field_kind.set_index(index),
                Self::Rule(_, __field_kind) => __field_kind.set_index(index),
                Self::ScopeRange(_, __field_kind) => __field_kind.set_index(index),
                Self::SelectorList(_, __field_kind) => __field_kind.set_index(index),
                Self::SequenceOfCustomIdents(_, __field_kind) => __field_kind.set_index(index),
                Self::SimpleBlock(_, __field_kind) => __field_kind.set_index(index),
                Self::SizeFeature(_, __field_kind) => __field_kind.set_index(index),
                Self::SizeFeatureBoolean(_, __field_kind) => __field_kind.set_index(index),
                Self::SizeFeatureName(_, __field_kind) => __field_kind.set_index(index),
                Self::SizeFeaturePlain(_, __field_kind) => __field_kind.set_index(index),
                Self::SizeFeatureRange(_, __field_kind) => __field_kind.set_index(index),
                Self::SizeFeatureRangeComparison(_, __field_kind) => __field_kind.set_index(index),
                Self::SizeFeatureRangeInterval(_, __field_kind) => __field_kind.set_index(index),
                Self::SizeFeatureValue(_, __field_kind) => __field_kind.set_index(index),
                Self::Str(_, __field_kind) => __field_kind.set_index(index),
                Self::StyleBlock(_, __field_kind) => __field_kind.set_index(index),
                Self::Stylesheet(_, __field_kind) => __field_kind.set_index(index),
                Self::SubclassSelector(_, __field_kind) => __field_kind.set_index(index),
                Self::SupportsAnd(_, __field_kind) => __field_kind.set_index(index),
                Self::SupportsCondition(_, __field_kind) => __field_kind.set_index(index),
                Self::SupportsConditionType(_, __field_kind) => __field_kind.set_index(index),
                Self::SupportsFeature(_, __field_kind) => __field_kind.set_index(index),
                Self::SupportsInParens(_, __field_kind) => __field_kind.set_index(index),
                Self::SupportsNot(_, __field_kind) => __field_kind.set_index(index),
                Self::SupportsOr(_, __field_kind) => __field_kind.set_index(index),
                Self::TagNameSelector(_, __field_kind) => __field_kind.set_index(index),
                Self::Time(_, __field_kind) => __field_kind.set_index(index),
                Self::TimePercentage(_, __field_kind) => __field_kind.set_index(index),
                Self::Token(_, __field_kind) => __field_kind.set_index(index),
                Self::TokenAndSpan(_, __field_kind) => __field_kind.set_index(index),
                Self::TypeSelector(_, __field_kind) => __field_kind.set_index(index),
                Self::UnicodeRange(_, __field_kind) => __field_kind.set_index(index),
                Self::UniversalSelector(_, __field_kind) => __field_kind.set_index(index),
                Self::UnknownDimension(_, __field_kind) => __field_kind.set_index(index),
                Self::Url(_, __field_kind) => __field_kind.set_index(index),
                Self::UrlKeyValue(_, __field_kind) => __field_kind.set_index(index),
                Self::UrlModifier(_, __field_kind) => __field_kind.set_index(index),
                Self::UrlValue(_, __field_kind) => __field_kind.set_index(index),
                Self::UrlValueRaw(_, __field_kind) => __field_kind.set_index(index),
                Self::WqName(_, __field_kind) => __field_kind.set_index(index),
            }
        }
    }
    impl<'ast> AstParentNodeRef<'ast> {
        #[inline]
        pub fn kind(&self) -> AstParentKind {
            match self {
                Self::AbsoluteColorBase(_, __field_kind) => {
                    AstParentKind::AbsoluteColorBase(*__field_kind)
                }
                Self::AlphaValue(_, __field_kind) => AstParentKind::AlphaValue(*__field_kind),
                Self::AnPlusB(_, __field_kind) => AstParentKind::AnPlusB(*__field_kind),
                Self::AnPlusBNotation(_, __field_kind) => {
                    AstParentKind::AnPlusBNotation(*__field_kind)
                }
                Self::Angle(_, __field_kind) => AstParentKind::Angle(*__field_kind),
                Self::AnglePercentage(_, __field_kind) => {
                    AstParentKind::AnglePercentage(*__field_kind)
                }
                Self::AnyNamespace(_, __field_kind) => AstParentKind::AnyNamespace(*__field_kind),
                Self::AtRule(_, __field_kind) => AstParentKind::AtRule(*__field_kind),
                Self::AtRuleName(_, __field_kind) => AstParentKind::AtRuleName(*__field_kind),
                Self::AtRulePrelude(_, __field_kind) => AstParentKind::AtRulePrelude(*__field_kind),
                Self::AttributeSelector(_, __field_kind) => {
                    AstParentKind::AttributeSelector(*__field_kind)
                }
                Self::AttributeSelectorMatcher(_, __field_kind) => {
                    AstParentKind::AttributeSelectorMatcher(*__field_kind)
                }
                Self::AttributeSelectorMatcherValue(_, __field_kind) => {
                    AstParentKind::AttributeSelectorMatcherValue(*__field_kind)
                }
                Self::AttributeSelectorModifier(_, __field_kind) => {
                    AstParentKind::AttributeSelectorModifier(*__field_kind)
                }
                Self::AttributeSelectorValue(_, __field_kind) => {
                    AstParentKind::AttributeSelectorValue(*__field_kind)
                }
                Self::BinOp(_, __field_kind) => AstParentKind::BinOp(*__field_kind),
                Self::CalcOperator(_, __field_kind) => AstParentKind::CalcOperator(*__field_kind),
                Self::CalcOperatorType(_, __field_kind) => {
                    AstParentKind::CalcOperatorType(*__field_kind)
                }
                Self::CalcProduct(_, __field_kind) => AstParentKind::CalcProduct(*__field_kind),
                Self::CalcProductOrOperator(_, __field_kind) => {
                    AstParentKind::CalcProductOrOperator(*__field_kind)
                }
                Self::CalcSum(_, __field_kind) => AstParentKind::CalcSum(*__field_kind),
                Self::CalcValue(_, __field_kind) => AstParentKind::CalcValue(*__field_kind),
                Self::CalcValueOrOperator(_, __field_kind) => {
                    AstParentKind::CalcValueOrOperator(*__field_kind)
                }
                Self::ClassSelector(_, __field_kind) => AstParentKind::ClassSelector(*__field_kind),
                Self::CmykComponent(_, __field_kind) => AstParentKind::CmykComponent(*__field_kind),
                Self::Color(_, __field_kind) => AstParentKind::Color(*__field_kind),
                Self::ColorProfileName(_, __field_kind) => {
                    AstParentKind::ColorProfileName(*__field_kind)
                }
                Self::Combinator(_, __field_kind) => AstParentKind::Combinator(*__field_kind),
                Self::CombinatorValue(_, __field_kind) => {
                    AstParentKind::CombinatorValue(*__field_kind)
                }
                Self::ComplexSelector(_, __field_kind) => {
                    AstParentKind::ComplexSelector(*__field_kind)
                }
                Self::ComplexSelectorChildren(_, __field_kind) => {
                    AstParentKind::ComplexSelectorChildren(*__field_kind)
                }
                Self::ComponentValue(_, __field_kind) => {
                    AstParentKind::ComponentValue(*__field_kind)
                }
                Self::CompoundSelector(_, __field_kind) => {
                    AstParentKind::CompoundSelector(*__field_kind)
                }
                Self::CompoundSelectorList(_, __field_kind) => {
                    AstParentKind::CompoundSelectorList(*__field_kind)
                }
                Self::ContainerCondition(_, __field_kind) => {
                    AstParentKind::ContainerCondition(*__field_kind)
                }
                Self::ContainerName(_, __field_kind) => AstParentKind::ContainerName(*__field_kind),
                Self::ContainerQuery(_, __field_kind) => {
                    AstParentKind::ContainerQuery(*__field_kind)
                }
                Self::ContainerQueryAnd(_, __field_kind) => {
                    AstParentKind::ContainerQueryAnd(*__field_kind)
                }
                Self::ContainerQueryNot(_, __field_kind) => {
                    AstParentKind::ContainerQueryNot(*__field_kind)
                }
                Self::ContainerQueryOr(_, __field_kind) => {
                    AstParentKind::ContainerQueryOr(*__field_kind)
                }
                Self::ContainerQueryType(_, __field_kind) => {
                    AstParentKind::ContainerQueryType(*__field_kind)
                }
                Self::CustomHighlightName(_, __field_kind) => {
                    AstParentKind::CustomHighlightName(*__field_kind)
                }
                Self::CustomIdent(_, __field_kind) => AstParentKind::CustomIdent(*__field_kind),
                Self::CustomMediaQuery(_, __field_kind) => {
                    AstParentKind::CustomMediaQuery(*__field_kind)
                }
                Self::CustomMediaQueryMediaType(_, __field_kind) => {
                    AstParentKind::CustomMediaQueryMediaType(*__field_kind)
                }
                Self::CustomPropertyName(_, __field_kind) => {
                    AstParentKind::CustomPropertyName(*__field_kind)
                }
                Self::DashedIdent(_, __field_kind) => AstParentKind::DashedIdent(*__field_kind),
                Self::Declaration(_, __field_kind) => AstParentKind::Declaration(*__field_kind),
                Self::DeclarationName(_, __field_kind) => {
                    AstParentKind::DeclarationName(*__field_kind)
                }
                Self::DeclarationOrAtRule(_, __field_kind) => {
                    AstParentKind::DeclarationOrAtRule(*__field_kind)
                }
                Self::Delimiter(_, __field_kind) => AstParentKind::Delimiter(*__field_kind),
                Self::DelimiterValue(_, __field_kind) => {
                    AstParentKind::DelimiterValue(*__field_kind)
                }
                Self::Dimension(_, __field_kind) => AstParentKind::Dimension(*__field_kind),
                Self::DimensionToken(_, __field_kind) => {
                    AstParentKind::DimensionToken(*__field_kind)
                }
                Self::DocumentPrelude(_, __field_kind) => {
                    AstParentKind::DocumentPrelude(*__field_kind)
                }
                Self::DocumentPreludeMatchingFunction(_, __field_kind) => {
                    AstParentKind::DocumentPreludeMatchingFunction(*__field_kind)
                }
                Self::ExtensionName(_, __field_kind) => AstParentKind::ExtensionName(*__field_kind),
                Self::FamilyName(_, __field_kind) => AstParentKind::FamilyName(*__field_kind),
                Self::Flex(_, __field_kind) => AstParentKind::Flex(*__field_kind),
                Self::FontFeatureValuesPrelude(_, __field_kind) => {
                    AstParentKind::FontFeatureValuesPrelude(*__field_kind)
                }
                Self::ForgivingComplexSelector(_, __field_kind) => {
                    AstParentKind::ForgivingComplexSelector(*__field_kind)
                }
                Self::ForgivingRelativeSelector(_, __field_kind) => {
                    AstParentKind::ForgivingRelativeSelector(*__field_kind)
                }
                Self::ForgivingRelativeSelectorList(_, __field_kind) => {
                    AstParentKind::ForgivingRelativeSelectorList(*__field_kind)
                }
                Self::ForgivingSelectorList(_, __field_kind) => {
                    AstParentKind::ForgivingSelectorList(*__field_kind)
                }
                Self::Frequency(_, __field_kind) => AstParentKind::Frequency(*__field_kind),
                Self::FrequencyPercentage(_, __field_kind) => {
                    AstParentKind::FrequencyPercentage(*__field_kind)
                }
                Self::Function(_, __field_kind) => AstParentKind::Function(*__field_kind),
                Self::FunctionName(_, __field_kind) => AstParentKind::FunctionName(*__field_kind),
                Self::GeneralEnclosed(_, __field_kind) => {
                    AstParentKind::GeneralEnclosed(*__field_kind)
                }
                Self::HexColor(_, __field_kind) => AstParentKind::HexColor(*__field_kind),
                Self::Hue(_, __field_kind) => AstParentKind::Hue(*__field_kind),
                Self::IdSelector(_, __field_kind) => AstParentKind::IdSelector(*__field_kind),
                Self::Ident(_, __field_kind) => AstParentKind::Ident(*__field_kind),
                Self::ImportConditions(_, __field_kind) => {
                    AstParentKind::ImportConditions(*__field_kind)
                }
                Self::ImportHref(_, __field_kind) => AstParentKind::ImportHref(*__field_kind),
                Self::ImportLayerName(_, __field_kind) => {
                    AstParentKind::ImportLayerName(*__field_kind)
                }
                Self::ImportPrelude(_, __field_kind) => AstParentKind::ImportPrelude(*__field_kind),
                Self::ImportantFlag(_, __field_kind) => AstParentKind::ImportantFlag(*__field_kind),
                Self::Integer(_, __field_kind) => AstParentKind::Integer(*__field_kind),
                Self::KeyframeBlock(_, __field_kind) => AstParentKind::KeyframeBlock(*__field_kind),
                Self::KeyframeSelector(_, __field_kind) => {
                    AstParentKind::KeyframeSelector(*__field_kind)
                }
                Self::KeyframesName(_, __field_kind) => AstParentKind::KeyframesName(*__field_kind),
                Self::KeyframesPseudoFunction(_, __field_kind) => {
                    AstParentKind::KeyframesPseudoFunction(*__field_kind)
                }
                Self::KeyframesPseudoPrefix(_, __field_kind) => {
                    AstParentKind::KeyframesPseudoPrefix(*__field_kind)
                }
                Self::LayerName(_, __field_kind) => AstParentKind::LayerName(*__field_kind),
                Self::LayerNameList(_, __field_kind) => AstParentKind::LayerNameList(*__field_kind),
                Self::LayerPrelude(_, __field_kind) => AstParentKind::LayerPrelude(*__field_kind),
                Self::Length(_, __field_kind) => AstParentKind::Length(*__field_kind),
                Self::LengthPercentage(_, __field_kind) => {
                    AstParentKind::LengthPercentage(*__field_kind)
                }
                Self::ListOfComponentValues(_, __field_kind) => {
                    AstParentKind::ListOfComponentValues(*__field_kind)
                }
                Self::MediaAnd(_, __field_kind) => AstParentKind::MediaAnd(*__field_kind),
                Self::MediaCondition(_, __field_kind) => {
                    AstParentKind::MediaCondition(*__field_kind)
                }
                Self::MediaConditionAllType(_, __field_kind) => {
                    AstParentKind::MediaConditionAllType(*__field_kind)
                }
                Self::MediaConditionType(_, __field_kind) => {
                    AstParentKind::MediaConditionType(*__field_kind)
                }
                Self::MediaConditionWithoutOr(_, __field_kind) => {
                    AstParentKind::MediaConditionWithoutOr(*__field_kind)
                }
                Self::MediaConditionWithoutOrType(_, __field_kind) => {
                    AstParentKind::MediaConditionWithoutOrType(*__field_kind)
                }
                Self::MediaFeature(_, __field_kind) => AstParentKind::MediaFeature(*__field_kind),
                Self::MediaFeatureBoolean(_, __field_kind) => {
                    AstParentKind::MediaFeatureBoolean(*__field_kind)
                }
                Self::MediaFeatureName(_, __field_kind) => {
                    AstParentKind::MediaFeatureName(*__field_kind)
                }
                Self::MediaFeaturePlain(_, __field_kind) => {
                    AstParentKind::MediaFeaturePlain(*__field_kind)
                }
                Self::MediaFeatureRange(_, __field_kind) => {
                    AstParentKind::MediaFeatureRange(*__field_kind)
                }
                Self::MediaFeatureRangeComparison(_, __field_kind) => {
                    AstParentKind::MediaFeatureRangeComparison(*__field_kind)
                }
                Self::MediaFeatureRangeInterval(_, __field_kind) => {
                    AstParentKind::MediaFeatureRangeInterval(*__field_kind)
                }
                Self::MediaFeatureValue(_, __field_kind) => {
                    AstParentKind::MediaFeatureValue(*__field_kind)
                }
                Self::MediaInParens(_, __field_kind) => AstParentKind::MediaInParens(*__field_kind),
                Self::MediaNot(_, __field_kind) => AstParentKind::MediaNot(*__field_kind),
                Self::MediaOr(_, __field_kind) => AstParentKind::MediaOr(*__field_kind),
                Self::MediaQuery(_, __field_kind) => AstParentKind::MediaQuery(*__field_kind),
                Self::MediaQueryList(_, __field_kind) => {
                    AstParentKind::MediaQueryList(*__field_kind)
                }
                Self::MediaType(_, __field_kind) => AstParentKind::MediaType(*__field_kind),
                Self::NamedNamespace(_, __field_kind) => {
                    AstParentKind::NamedNamespace(*__field_kind)
                }
                Self::Namespace(_, __field_kind) => AstParentKind::Namespace(*__field_kind),
                Self::NamespacePrefix(_, __field_kind) => {
                    AstParentKind::NamespacePrefix(*__field_kind)
                }
                Self::NamespacePrelude(_, __field_kind) => {
                    AstParentKind::NamespacePrelude(*__field_kind)
                }
                Self::NamespacePreludeUri(_, __field_kind) => {
                    AstParentKind::NamespacePreludeUri(*__field_kind)
                }
                Self::NestingSelector(_, __field_kind) => {
                    AstParentKind::NestingSelector(*__field_kind)
                }
                Self::Number(_, __field_kind) => AstParentKind::Number(*__field_kind),
                Self::NumberType(_, __field_kind) => AstParentKind::NumberType(*__field_kind),
                Self::PageSelector(_, __field_kind) => AstParentKind::PageSelector(*__field_kind),
                Self::PageSelectorList(_, __field_kind) => {
                    AstParentKind::PageSelectorList(*__field_kind)
                }
                Self::PageSelectorPseudo(_, __field_kind) => {
                    AstParentKind::PageSelectorPseudo(*__field_kind)
                }
                Self::PageSelectorType(_, __field_kind) => {
                    AstParentKind::PageSelectorType(*__field_kind)
                }
                Self::Percentage(_, __field_kind) => AstParentKind::Percentage(*__field_kind),
                Self::PseudoClassSelector(_, __field_kind) => {
                    AstParentKind::PseudoClassSelector(*__field_kind)
                }
                Self::PseudoClassSelectorChildren(_, __field_kind) => {
                    AstParentKind::PseudoClassSelectorChildren(*__field_kind)
                }
                Self::PseudoElementSelector(_, __field_kind) => {
                    AstParentKind::PseudoElementSelector(*__field_kind)
                }
                Self::PseudoElementSelectorChildren(_, __field_kind) => {
                    AstParentKind::PseudoElementSelectorChildren(*__field_kind)
                }
                Self::QualifiedRule(_, __field_kind) => AstParentKind::QualifiedRule(*__field_kind),
                Self::QualifiedRulePrelude(_, __field_kind) => {
                    AstParentKind::QualifiedRulePrelude(*__field_kind)
                }
                Self::QueryInParens(_, __field_kind) => AstParentKind::QueryInParens(*__field_kind),
                Self::Ratio(_, __field_kind) => AstParentKind::Ratio(*__field_kind),
                Self::RelativeSelector(_, __field_kind) => {
                    AstParentKind::RelativeSelector(*__field_kind)
                }
                Self::RelativeSelectorList(_, __field_kind) => {
                    AstParentKind::RelativeSelectorList(*__field_kind)
                }
                Self::Resolution(_, __field_kind) => AstParentKind::Resolution(*__field_kind),
                Self::Rule(_, __field_kind) => AstParentKind::Rule(*__field_kind),
                Self::ScopeRange(_, __field_kind) => AstParentKind::ScopeRange(*__field_kind),
                Self::SelectorList(_, __field_kind) => AstParentKind::SelectorList(*__field_kind),
                Self::SequenceOfCustomIdents(_, __field_kind) => {
                    AstParentKind::SequenceOfCustomIdents(*__field_kind)
                }
                Self::SimpleBlock(_, __field_kind) => AstParentKind::SimpleBlock(*__field_kind),
                Self::SizeFeature(_, __field_kind) => AstParentKind::SizeFeature(*__field_kind),
                Self::SizeFeatureBoolean(_, __field_kind) => {
                    AstParentKind::SizeFeatureBoolean(*__field_kind)
                }
                Self::SizeFeatureName(_, __field_kind) => {
                    AstParentKind::SizeFeatureName(*__field_kind)
                }
                Self::SizeFeaturePlain(_, __field_kind) => {
                    AstParentKind::SizeFeaturePlain(*__field_kind)
                }
                Self::SizeFeatureRange(_, __field_kind) => {
                    AstParentKind::SizeFeatureRange(*__field_kind)
                }
                Self::SizeFeatureRangeComparison(_, __field_kind) => {
                    AstParentKind::SizeFeatureRangeComparison(*__field_kind)
                }
                Self::SizeFeatureRangeInterval(_, __field_kind) => {
                    AstParentKind::SizeFeatureRangeInterval(*__field_kind)
                }
                Self::SizeFeatureValue(_, __field_kind) => {
                    AstParentKind::SizeFeatureValue(*__field_kind)
                }
                Self::Str(_, __field_kind) => AstParentKind::Str(*__field_kind),
                Self::StyleBlock(_, __field_kind) => AstParentKind::StyleBlock(*__field_kind),
                Self::Stylesheet(_, __field_kind) => AstParentKind::Stylesheet(*__field_kind),
                Self::SubclassSelector(_, __field_kind) => {
                    AstParentKind::SubclassSelector(*__field_kind)
                }
                Self::SupportsAnd(_, __field_kind) => AstParentKind::SupportsAnd(*__field_kind),
                Self::SupportsCondition(_, __field_kind) => {
                    AstParentKind::SupportsCondition(*__field_kind)
                }
                Self::SupportsConditionType(_, __field_kind) => {
                    AstParentKind::SupportsConditionType(*__field_kind)
                }
                Self::SupportsFeature(_, __field_kind) => {
                    AstParentKind::SupportsFeature(*__field_kind)
                }
                Self::SupportsInParens(_, __field_kind) => {
                    AstParentKind::SupportsInParens(*__field_kind)
                }
                Self::SupportsNot(_, __field_kind) => AstParentKind::SupportsNot(*__field_kind),
                Self::SupportsOr(_, __field_kind) => AstParentKind::SupportsOr(*__field_kind),
                Self::TagNameSelector(_, __field_kind) => {
                    AstParentKind::TagNameSelector(*__field_kind)
                }
                Self::Time(_, __field_kind) => AstParentKind::Time(*__field_kind),
                Self::TimePercentage(_, __field_kind) => {
                    AstParentKind::TimePercentage(*__field_kind)
                }
                Self::Token(_, __field_kind) => AstParentKind::Token(*__field_kind),
                Self::TokenAndSpan(_, __field_kind) => AstParentKind::TokenAndSpan(*__field_kind),
                Self::TypeSelector(_, __field_kind) => AstParentKind::TypeSelector(*__field_kind),
                Self::UnicodeRange(_, __field_kind) => AstParentKind::UnicodeRange(*__field_kind),
                Self::UniversalSelector(_, __field_kind) => {
                    AstParentKind::UniversalSelector(*__field_kind)
                }
                Self::UnknownDimension(_, __field_kind) => {
                    AstParentKind::UnknownDimension(*__field_kind)
                }
                Self::Url(_, __field_kind) => AstParentKind::Url(*__field_kind),
                Self::UrlKeyValue(_, __field_kind) => AstParentKind::UrlKeyValue(*__field_kind),
                Self::UrlModifier(_, __field_kind) => AstParentKind::UrlModifier(*__field_kind),
                Self::UrlValue(_, __field_kind) => AstParentKind::UrlValue(*__field_kind),
                Self::UrlValueRaw(_, __field_kind) => AstParentKind::UrlValueRaw(*__field_kind),
                Self::WqName(_, __field_kind) => AstParentKind::WqName(*__field_kind),
            }
        }
    }
}
#[cfg(any(docsrs, feature = "path"))]
pub use self::fields::{AstParentKind, AstParentNodeRef};
