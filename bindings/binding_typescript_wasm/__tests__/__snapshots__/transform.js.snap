// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`transform in strip-only mode should not emit 'Caused by: failed to parse' 1`] = `
{
  "code": "InvalidSyntax",
  "column": 23,
  "filename": "test.ts",
  "line": 1,
  "message": "await isn't allowed in non-async function",
  "snippet": "Promise",
}
`;

exports[`transform in strip-only mode should remove declare enum 1`] = `
{
  "code": "                   ",
  "map": undefined,
}
`;

exports[`transform in strip-only mode should remove declare enum 2`] = `
{
  "code": "                  
                     
                 ",
  "map": undefined,
}
`;

exports[`transform in strip-only mode should remove declare enum 3`] = `
{
  "code": "                  
                          
                      
                     ",
  "map": undefined,
}
`;

exports[`transform in strip-only mode should report correct error for syntax error 1`] = `
{
  "code": "InvalidSyntax",
  "column": 25,
  "filename": "test.ts",
  "line": 1,
  "message": "Expected ';', '}' or <eof>",
  "snippet": "syntax",
}
`;

exports[`transform in strip-only mode should report correct error for unsupported syntax 1`] = `
{
  "code": "UnsupportedSyntax",
  "column": 0,
  "filename": "test.ts",
  "line": 1,
  "message": "TypeScript enum is not supported in strip-only mode",
  "snippet": "enum Foo {
                    a, b    
                    }",
}
`;

exports[`transform in strip-only mode should strip complex expressions 1`] = `
{
  "code": "const foo = {
                        foo: 1          ,
                        bar: "bar"                 ,
                    }                 ;
                    const bar = "bar";",
  "map": undefined,
}
`;

exports[`transform in strip-only mode should strip nonnull assertions 1`] = `
{
  "code": "const foo = 1 ;
                    const bar = "bar";",
  "map": undefined,
}
`;

exports[`transform in strip-only mode should strip satisfies 1`] = `
{
  "code": "const foo = 1                 ;
                    const bar = "bar";",
  "map": undefined,
}
`;

exports[`transform in strip-only mode should strip type annotations 1`] = `
{
  "code": "const foo = 1;
                    const bar      = "bar";",
  "map": undefined,
}
`;

exports[`transform in strip-only mode should strip type assertions 1`] = `
{
  "code": "const foo = 1          ;
                    const bar = "bar";",
  "map": undefined,
}
`;

exports[`transform in strip-only mode should strip type declarations 1`] = `
{
  "code": "const foo = 1;
                                      
                                      
                    const bar      = "bar";",
  "map": undefined,
}
`;

exports[`transform in strip-only mode should throw an error when it encounters a module 1`] = `
{
  "code": "UnsupportedSyntax",
  "column": 0,
  "filename": "test.ts",
  "line": 1,
  "message": "\`module\` keyword is not supported. Use \`namespace\` instead.",
  "snippet": "module foo",
}
`;

exports[`transform in strip-only mode should throw an error when it encounters a module 2`] = `
{
  "code": "UnsupportedSyntax",
  "column": 8,
  "filename": "test.ts",
  "line": 1,
  "message": "\`module\` keyword is not supported. Use \`namespace\` instead.",
  "snippet": "module foo",
}
`;

exports[`transform in strip-only mode should throw an error when it encounters a namespace 1`] = `
{
  "code": "UnsupportedSyntax",
  "column": 0,
  "filename": "test.ts",
  "line": 1,
  "message": "TypeScript namespace declaration is not supported in strip-only mode",
  "snippet": "namespace Foo { export const m = 1; }",
}
`;

exports[`transform in strip-only mode should throw an error when it encounters an enum 1`] = `
{
  "code": "UnsupportedSyntax",
  "column": 0,
  "filename": "test.ts",
  "line": 1,
  "message": "TypeScript enum is not supported in strip-only mode",
  "snippet": "enum Foo {}",
}
`;

exports[`transform in transform mode shoud throw an object even with deprecatedTsModuleAsError = true 1`] = `
{
  "code": "UnsupportedSyntax",
  "column": 0,
  "filename": "<anon>",
  "line": 1,
  "message": "\`module\` keyword is not supported. Use \`namespace\` instead.",
  "snippet": "module F",
}
`;

exports[`transform in transform mode should throw an error when it encounters a declared module 1`] = `
{
  "code": "UnsupportedSyntax",
  "column": 8,
  "filename": "test.ts",
  "line": 1,
  "message": "\`module\` keyword is not supported. Use \`namespace\` instead.",
  "snippet": "module foo",
}
`;

exports[`transform in transform mode should throw an error when it encounters a module 1`] = `
{
  "code": "UnsupportedSyntax",
  "column": 0,
  "filename": "test.ts",
  "line": 1,
  "message": "\`module\` keyword is not supported. Use \`namespace\` instead.",
  "snippet": "module foo",
}
`;

exports[`transform should strip types 1`] = `
{
  "code": "
        export const foo         = 1;
                          
    ",
  "map": undefined,
}
`;
